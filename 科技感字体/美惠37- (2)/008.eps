%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: plata_48.eps
%%Creator: Adobe Illustrator(R) 19.1
%%For: user
%%CreationDate: 4/12/2016
%%BoundingBox: 0 0 1200 1200
%%HiResBoundingBox: 0 0 1200 1200
%%CropBox: 0 0 1200 1200
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.1.0 x29 R agm 4.7731 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
    xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
    xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
    xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:photoshop="http://ns.adobe.com/photoshop/1.0/"
   dc:format="application/postscript"
   xmp:MetadataDate="2016-04-12T14:40:48+03:00"
   xmp:ModifyDate="2016-04-12T14:15:55+03:00"
   xmp:CreateDate="2016-04-12T14:15:55+03:00"
   xmp:CreatorTool="Adobe Illustrator CC 2015 (Windows)"
   xmpMM:InstanceID="xmp.iid:0ECE6366A300E611A717E86A33404556"
   xmpMM:DocumentID="xmp.did:3d40b8b1-fa65-f745-8e5c-3ac012941b7a"
   xmpMM:OriginalDocumentID="uuid:5D20892493BFDB11914A8590D31508C8"
   xmpMM:RenditionClass="proof:pdf"
   illustrator:StartupProfile="Print"
   xmpTPg:HasVisibleOverprint="False"
   xmpTPg:HasVisibleTransparency="False"
   xmpTPg:NPages="1"
   pdf:Producer="Adobe PDF library 10.01"
   photoshop:Headline="Abstract vector background with high tech circuit board Vector Illustration">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Abstract vector background with high tech circuit board Vector Illustration</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Iryna</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Abstract vector background with high tech circuit board Vector Illustration</rdf:li>
    </rdf:Alt>
   </dc:description>
   <dc:subject>
    <rdf:Bag>
     <rdf:li>circuit</rdf:li>
     <rdf:li>board</rdf:li>
     <rdf:li>motherboard</rdf:li>
     <rdf:li>mother</rdf:li>
     <rdf:li>chip</rdf:li>
     <rdf:li>computer</rdf:li>
     <rdf:li>abstract</rdf:li>
     <rdf:li>abstraction</rdf:li>
     <rdf:li>integrated</rdf:li>
     <rdf:li>technical</rdf:li>
     <rdf:li>hardware</rdf:li>
     <rdf:li>engineering</rdf:li>
     <rdf:li>vector</rdf:li>
     <rdf:li>line</rdf:li>
     <rdf:li>cyberspace</rdf:li>
     <rdf:li>tech</rdf:li>
     <rdf:li>processor</rdf:li>
     <rdf:li>graphic</rdf:li>
     <rdf:li>digital</rdf:li>
     <rdf:li>card</rdf:li>
     <rdf:li>black</rdf:li>
     <rdf:li>technology</rdf:li>
     <rdf:li>equipment</rdf:li>
     <rdf:li>illustration</rdf:li>
     <rdf:li>creativity</rdf:li>
     <rdf:li>connection</rdf:li>
     <rdf:li>computing</rdf:li>
     <rdf:li>electrical</rdf:li>
     <rdf:li>backdrop</rdf:li>
     <rdf:li>design</rdf:li>
     <rdf:li>science</rdf:li>
     <rdf:li>cover</rdf:li>
     <rdf:li>blue</rdf:li>
     <rdf:li>internal</rdf:li>
     <rdf:li>connect</rdf:li>
     <rdf:li>backgrounds</rdf:li>
     <rdf:li>art</rdf:li>
     <rdf:li>part</rdf:li>
     <rdf:li>industry</rdf:li>
     <rdf:li>conceptual</rdf:li>
     <rdf:li>construction</rdf:li>
     <rdf:li>textured</rdf:li>
     <rdf:li>electronics</rdf:li>
    </rdf:Bag>
   </dc:subject>
   <xmp:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xmpGImg:width="256"
      xmpGImg:height="256"
      xmpGImg:format="JPEG"
      xmpGImg:image="/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A8qYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYqujjkkkWONS8jkKiKCSSTQAAdScIFolIAWeSYtoNyjFZLm0R12ZDcRVB7g0&#xA;PbLfBPePm4o1kTuIzr+qVOfRrqKB51eGeOKhl9CVJGRSacmVTULXavStPHInEQL2LKGqiZAEGJPK&#xA;wQgMrcl2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVM9H0d71xLKG+rcuCqlA8rgcj&#xA;HGW2FBu7n4UXc9gbcWLi934/Hk4mq1Qxih9X2Ad5/QOcjsOpBtP5mSzYW1rNcmKIcQLO6ktrZf8A&#xA;JiQAkqP52PJzVj1y86jh2F/A0Ph+N3Bh2eZjikI2f50RKXxP6BtHkEdDqVzLbCS8N1JBKhkksZrx&#xA;7h2tqbzG3dVDoOtOStT4loBzFgyEje67rvbvr8Hr5uPLBESqHCCD9QgIji/m8QOx+Bj/AAm/pJBr&#xA;mh/U+N1at62nTUMcgPLjyrxBai1B4ni1BWhBCsrKuNmw8O4+n8fj9th2ek1fiemW2Qfj+0dNtzEx&#xA;kSfKHOdirsVdiqrbW1xdXEdtbRtNcTMEiiQVZmY0AAGGMSTQ5sMmSMImUjURzR7eV/MysUOk3nIG&#xA;hH1eXqP9jlv5fJ/NPycYdoaci/Eh/ph+tNLa2tNDtDc3JEl1IGT4G3J6NDCw6AdJZR/qJ3OXRiMY&#xA;s8/xsP0n4Bw8mSWolwx2iPxxS/3sf86XQIK01bzBe3Jit7n0IwC7caRwQxr1JoKKi/2bnK45JyNA&#xA;/qDkZdNgxxuUbPzMj+kn8bMgsri+ngFzaevdxQ1QrOY+V0n2HkhQgtGwY8QCGR68DUng+TCUiLFn&#xA;9Pu/FHl5HV5YQieGXDEnuv0dQJHqOvSUfqFD1RIta0WD0Bqmln1LGT4nRa/u9wDsSxCgsAQSShIB&#xA;JBR3x8uIVxR5fj8eXyJ2Wk1Zvw8m0x9v7f8AdcxREoxIcxnZOxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KsofUo2Rb7UbOzsoplUWttb2kZeQKOJkCuRxT4ftE/E3T9qmZ4g5yAHuDpxgIPBjl&#xA;OZHMymdvLbr5dBz6WB1LXRNF9WsVZVdfTkcqkbFK1EMaR/CicviYDdm3OV5M1io/jy/HNyMGj4Tx&#xA;T6b9Tv8AziTuT0HcNgusNJ+r20N9MkdzczvJHZ6fyUlWi+3JcrX4ETwale/w9WGOgJHc9B+tGbU8&#xA;UjAXGIAMpe/kId5Ply6b8hum3ksV498tygiRwb/VJ1ZhLIdxFEFHqAbVHCjbc9qACyEiDd+8/j8d&#xA;XHz4gYCHCbr0wHQd56fPb+HezZxNClqkk8EYl0yUFr2yUBxGHHIyxBeKsjKvJlWgYDmnEr+5vIrc&#xA;fT1H6R+PMVXpwYTMyIyNZB9MuV10PcRyBNkE8MuLi/eRbXND+p8bq1b1tOmoY5AeXHlXiC1FqDxP&#xA;FqCtCCFZWVcPNh4dx9P4/H7bDudJq/E9Mtsg/H9o6bbmJjIllrbTXVzFbQgNNO6xxqSFBZzQCrEA&#xA;bnvlMYkmg5eSYhEyPIC0wm8s6zDK8UkUayRsUdTPBsymhH28tOnmDX6Q40dfikAQTR/oy/Us/wAP&#xA;ar/JH/yPh/5rweBL8EJ/O4u8/wCll+pD2Frcz6jBbW7rFcvKqRSNII1V+VAfUJAFD3rkYRJkAObb&#xA;myRjjMpC413Xt7kbc3lrp8rWlpFBdmJmWe9lRZvVkBoTHyqBGP2e7dT1AWyUxE0KPn+Ojj48Uso4&#xA;pGUb5RBqh5+ff0HId5ZbWuoa9qMaPNFFJMGSB5iIYaxJVYY6DiD0VVHcjBGMskvx8mWTJDTYyQCQ&#xA;Odbnc/UfvJ8imhj0xdLEkCumnwNHHdWUjot3dX3HkQyqeawIagGn/DEkXVHh2+nqOpl+r8c3C4sh&#xA;yUa4zZEgDwwh8duM/j0iiz9Ipp2oLPqAMuosOEscR4paRU4iJU+wzAbNG3wBfhPxE8B4nDK5fV93&#xA;l+zl058p+AcuOobY+l/xnvvmB3SHqJ9Q2HqP2VnY6lpoEzTAPdWqGq3CmqerFzDfvfiK/EDyqY5A&#xA;WP77J/pR+I7/ANv9h/pawGv3eTauR/m9aNfw9duW04EAfu4zrWiwegNU0s+pYyfE6LX93uAdiWIU&#xA;FgCCSUJAJIKO+JlxCuKPL8fjy+RO30mrN+Hk2mPt/b/uuYoiUYkOYzsnYq7FXYq7FXYq7FXYq7FX&#xA;Yqmh8r+ZPTikGl3bRzRrLE6wyMrI4qrAqCNxl35fJ/NPycP+UNPZHiQsGj6hzDX+GfMn/VqvP+ke&#xA;X/mnB4GT+afkn8/p/wDVIf6YfrQd3ZXlnL6V3BJby05enKjI1D0NGAOQlAxNEU348sMguBEh5G1D&#xA;ItjsVdiqK1LU77U7try+lM1w6qrOQF2RQiiigDZVAyeTIZmzzacGnhhhwQFR/XuidEudPiaVJw0N&#xA;2/ptYakruv1WVH5Byi/aDUoT1XqAemTxSiOfPoe5p1eOcqMd478UaHqBHKz+DyNJtJc6hNcXvKZb&#xA;TVbpfT1eJ5YoUu4nZZDJHNJ8Cl6AtQ0YfEtQSMuMpEnepH6uW/xcKOOEYx24sUd4bEmB5UYjfbp3&#xA;cjvurPZWt5rCrLbINEjV47PTrS/tJZ4+S0DKquzSycviIpVuntkjESluPR0AkL/a1jLLHi2l++NG&#xA;UpY5iJ8uXpFbdw5obS9UudEuUs7xw1ow52t0nJkCM1eS04s0TMtWUUZGFRxdSMhjyHGaPLofx0+7&#xA;3t2o08dREzgPV1H6D04q5HlIbG4lO5oUtUkngjEumSgte2SgOIw45GWILxVkZV5Mq0DAc04lf3OQ&#xA;RW4+nqP0j8eYqvTr4TMyIyNZB9MuV10PcRyBNkE8MuLi/eR+50JLPUrO6gMU+lzTRFXnYmFQzbLM&#xA;6hW9M8T8QAqAdlZWVcaWHhkCPpv4fHy/HOw7PHrDPHKMrGQA8uf+aO/y93OJEiIu00oXUwEGi0Dt&#xA;T05r8p1P2SJKU8MlIRs7Q+cv1tWM5eEb5+XUY/1KXDS/98aP/wAjdQ/6qYKj3Q+cv1s7yd+b5Y/+&#xA;JY7JT1GoABU0C140r2rvT55il2seSpaWlzeXUVraxtNcTsEiiQVZmbYAYYxMjQ5scuWOOJlI1Ecy&#xA;yG003zOto2j6hpl+2mGQyBFglLQTU4+rGKAHwZa0YeBowyYwyVwSjLh93IuryZ9OZeLjnj8Sq+oe&#xA;odx/QenmLBO7Dy95kivINQeKaPVLU/udRgQMZVpxDSRzhfjA/aIqe4qK5kQwZARL+IdR+112bW6e&#xA;UDjBBxy5xJ5e4x6eXLuNOtfKmoWNnfRBJ2tLtAL2KdIkV1RuS0lqzRsp+JWpxr9v4KkMdPKII3o8&#xA;/wC3p+L2XJ2jjyTgbjxRPpIs1fl1HQjn/N9VJBb3F15fuhHIXm02Z24tx4urr8D/AAPULKoPGWJt&#xA;mGxqpVsxoyOI/wBH8fb3h2c4R1UbG2Qf2jcc4nnGQ5cxvYT65dY4JdbsyrwkLJfQqfgnViU9WMuG&#xA;/eDkwPIGo5LICa+rky2HGPj5+fv/ALD/AEtZjFkYZ8+UT1j14TXTly8pQ6eHGPMWl2lv6V7ZN/ot&#xA;zQiKhHAsiyDjUseJVxsSSpqKsAGbEz4wNxyP4/H4LuNDqJSuE/qj+sj57fHY0PpBLmO7BMLKXQks&#xA;3W9trma8MgMbwzpEgj4moIaKU8uVP8+tkTCtwb9/7C42WOYzHBKIjXWJJv8A0wTZPK73aFYdM1HT&#xA;5KBkmuUluIWHdT6Nurr7GjfR1y8afi5RlH37/cHBPaAgd545juiRE/7KZB+xyeQ9SLjnI3CvxcbS&#xA;/LU/yQ1ui18KsB7jEaOX4Ev1Ke2MdbD/AGeP/iz9xZlY+UYIbKIfV4FVh8Ikit5mI8TJJFIWJ7kH&#xA;j/KOIBbPhpgByH2H9H46OhzdpmUzvL4GQ+wSFff3m9gt/hmD/fVr/wBItp/1Qw+AO4fIfqa/z8u+&#xA;X+nn/wAU7/DMH++rX/pFtP8Aqhj4A7h8h+pfz8u+X+nn/wAU7/DMH++rX/pFtP8Aqhj4A7h8h+pf&#xA;z8u+X+nn/wAU7/DMH++rX/pFtP8Aqhj4A7h8h+pfz8u+X+nn/wAU23l2N6c0tm4gKtbW1NAOgH7j&#xA;CcPu+Q/Uga4jkZf6af8AxTX+GYP99Wv/AEi2n/VDB4A7h8h+pP5+XfL/AE8/+KYF53sls9ZWJVRQ&#xA;YVakccca7lv2Y1jXt4ZrdXDhnXk9L2RlOTDe/PqSfvJY9mM7R2KuxV2Ksu1K5sWu2MV9ogThGAIr&#xA;O4VaiNQaD0H79d/6ZmzlG+cPkf1OjwY5iO8c/XnOPf8A1wq2/mTU7eFYLfX7GGFNkijivFVQTXZR&#xA;bgDc5IZ5AUJx/wBl+phPQY5nilhyEnvMP+LTG11fzRKYHbUre7tZw7iNre/aOaOL++6W55Ko+14d&#xA;8tjlyGtwR7pb9/Rxcmm00bHBKMhX8WOwT9P8fXoq6xo9rqNq80KM8LsGmhUiSWKWQCkkZrR2cU78&#xA;Z1pv6nFnOXEJCx+Px/svfRMNLqpYpAE79DyBA6HuA+eM/wBDijFDyFb3UGpJa3TCW1idZLeUVaNo&#xA;nSV6oaboZI1biRs46Bq5HRgiVHl/b+n7fNs7ZnGWPijtI7EdbBiN/OiRfWJ5mNIrQvK+o22nQw3S&#xA;LzikZ+AddiJI5UO8c6MKx7qVyeHTyEQD+OXvadZ2hjnkJjyI7vKQPWJ687R0vlz1ZXkeCAu7FmPC&#xA;x6k1P/Svyw4L6D/Y/wDEONHXUKBlt55P+qy3/DC/8s8P/AWP/ePx/L+Q/wBj/wAQn+UPOXzyf9Vn&#xA;lt4nC7nTpxkYUFKbE+AUfgM08huXs8RuIPkusLiK2vre4li9eKGRHeHm0fNVIJXmvxLXxHTGEqIJ&#xA;3Y5oGcDEGiRz518OqMk1PSWkZl0mMKxJAM05IBPjy3yw5I/zftLRHT5QP7w/6WP6k6stJ0m7tree&#xA;KKz/AH8cn7sy3XJbhK+nbN2DzDdOx38MvjjjIA7b+Z593x6Ovy6nLCRiTPYjpD6Tzl7o/wAXdsjd&#xA;Os7XT5xe2hhjlSBZoTbPcNM7dJ4VSX4GeD7UkbUJXpStRZCIibHd0v4j4dQ4+fLLLHgnZHFR4hGh&#xA;/NkSNwJcoyF0e+qJle2Vlq1k9xbpG4eNWubZW4xvGtVSWJ2Hwhdwjkfu90cenUJbOAmLH4/H2cjt&#xA;yxMWWeCfDK+ex6g9QR1vqP49pwPHRmE0hPL2n6BcaXrV88FvdXE/BkikEpAWEFWASRY5EZCHQ7j/&#xA;AFSrGGLgjAxmdiT+hv1Jz5c4yYYAyjGPUV/F5iwQdj194ITS11v8tba3jgW+lYIiIWP1tS3BeKlg&#xA;iotabbDLo5dOBV/e4eTSdoTkTwDf+p199lV/xH+W3/LbJ999kvH0/f8A7ph+R7Q/mj/pWuj8y/lu&#xA;kiOL2UFSDUG+rscRnwd/+6Yy0HaBFcI/6VpbJ54/LlnZm0IszEksbS2JJPfd8qOrwfzfsDljsjXg&#xA;V4v+zn+poeePy7Q8o9CpIu6EWtsKEdNw+2D83g/m/YE/yRrzscu39ef6mO63qOta5cLqF7eRafFK&#xA;D9TtZJHWkVaVVVUmhP7R+122G2NlnPIeInh7naaTBh08fDhEzI+o0Of46dEv+pzf9Xm3/wCRs3/N&#xA;GVcJ/nD5ly/FH+py+Uf1u+pzf9Xm3/5Gzf8ANGPCf5w+ZXxR/qcvlH9bvqc3/V5t/wDkbN/zRjwn&#xA;+cPmV8Uf6nL5R/W76nN/1ebf/kbN/wA0Y8J/nD5lfFH+py+Uf1u+pzf9Xm3/AORs3/NGPCf5w+ZX&#xA;xR/qcvlH9bvqc3/V5t/+Rs3/ADRjwn+cPmV8Uf6nL5R/Wl99G0c3FrhLo0B9WNmYfKrBTlUxR525&#xA;OGVj6TFD5FtdirsVdirsVdiqc6N5hu7MxQSXEq20bM1vJGavbu+zPECaFW6SRn4XHXehF+LMY7Xt&#xA;9346jq4Gq0UclyAHEed8peR938MucTy6gySwv3sH5pw+q8OUka1kiSKQkGSMEFpLSRieS05RNXat&#xA;Q+XCfD7vx/sftB+3U5sIyijfFfuJI6HuyDoeUx5UYmWoWX1i2kuLF5kjlYG4ihes0crgESIVNHZx&#xA;Sm/Gdab+pxZ7ZwsXH8fj/Ze+icTBl4ZCMwLHIkbEDoe6vnjP9DijGIomriZeWtLJAGHIpe8CyV34&#xA;8zVSR/MvzGYQEr+r/ZO8JxVtio/1P1foKZ3BsjPIbfVLoQcj6QfUoeXGu1aDrTLZcN7SNf1g4kOP&#xA;hHFCN9f3ckuul1Iyn6rrHGGgoJb9WavfdSoyqQle0v8AZOVjOOvVj38sZY8/Lm3I8mqatWtT4175&#xA;jF2g5LcCXYqibC/ls5WZVWSKReE8D1KSITUqwFPCoI3B3G+ThPhas2ETHcRyPUH8fPkdmVQTx3ca&#xA;zQs0wmZVBZuEjyJUojuB8F2m/ozUpKNjvyXMwHi3H4/493Hr8w6WcDA0dq+QHUgdcZ/jhzgfKiiL&#xA;S7ntZ1ubZmZmZpSIlCmQqAJJYoyaJOgp9Yt60YbjbiyyjIg2Px5jz/nR/YWvLijOPDL3b9O6Mj1i&#xA;f4J9OR6gmN/a2GqWEl1CsbIY1e6t1YrG8aVCyxvxJULuEfjWPdHHCoS2cYzjY/Hn+OXI7csTDknh&#xA;mIm+ex631BHW+ov17TieLeUX/Reg/wAn/c0tv+yfMTw4fiQ/4l3H5jP3/wDSqf8Axbv0XoP8n/c0&#xA;tv8Asnx8OH4kP+JX8xn7/wDpVP8A4tcmleX+a8lAWo5E6pb0A9+NsT92Ixw/Eh/xKDqM9f8AVqX/&#xA;ABbRufKgJHoWxp3EV6R9FbtT+GPFi7h/sv8AikjHqe+Xzx/9U247nysZEC20BYkcQtvduSa9la8o&#xA;x9jiJY+4fKX/ABSJY9TW8pf6aH/VNk82n3kccct7q76RJPV0sku0tmC7ANKTxEkh70FFFFACgAZZ&#xA;gRuZcN9Lp1Ec8CSIYxlA/i4DL5dw+08zZsqP1eP/AKmqf/uKxf1wcP8Ath/0wZ8Z/wBQj/yqLvq8&#xA;f/U1T/8AcVi/rjw/7Yf9MF4z/qEf+VRd9Xj/AOpqn/7isX9ceH/bD/pgvGf9Qj/yqLvq8f8A1NU/&#xA;/cVi/rjw/wC2H/TBeM/6hH/lUXfV4/8Aqap/+4rF/XHh/wBsP+mC8Z/1CP8AyqLvq8f/AFNU/wD3&#xA;FYv648P+2H/TBeM/6hH/AJVFiPmpAupgC+bUR6a/6Q863J6n4ea7beGYOoHq58Xxt3nZxvH9HBvy&#xA;4eH7Emyhz3Yq7FXYq7FXYq7FU00fWGtWWGZmFuGLxyIAXgcihdAdmDDZ0OzjY70IuxZa2PL7vx1H&#xA;Vw9TpuPcfV9kh3H/AHsucT8QZTYX72D804fVeHKSNayRJFISDJGCC0lpIxPJacomrtWofMhPh934&#xA;/wBj9oP26bNhGUUb4r9xJHQ92QdDymPKjEdNaG4laeHzRc2kch5C2a7kl4V6qJFLBhX7JqdssMb3&#xA;EyPi40cvAOE4IyI68AF/Dp5rP0ZP/wBTjP8A9JE2Dwz/AKofmWX5iP8AyjR/0sXfoyf/AKnGf/pI&#xA;mx8M/wCqH5lfzEf+UaP+li88uRS4lBf1CHb94d+W/wBrfxzVy5vU4/pG1bKWBm7FXYqibC/ls5WZ&#xA;VWSKReE8D1KSITUqwFPCoI3B3G+ThPhas2ETHcRyPUH8fPkdmVQTx3cazQs0wmZVBZuEjyJUojuB&#xA;8F2m/ozUpKNjvyXMwHi3H4/493Hr8w6WcDA0dq+QHUgdcZ/jhzgfKiiLO8ktbhLiGZIy7l+bNHbq&#xA;7CivLH6rJHHMuwngZgG2I/ZZZRlRsH9Hx8j/ADo9fk15cQnExIJ+cq7gaBJj/MmBY5H+IEcbrRCS&#xA;fQ04V3oIdJp/1GZZxQ7o/KH/ABTijHm78n+mzf8AVN31nRP98af/AMidJ/7LMeKHdH5Q/wCKT4eb&#xA;vyf6bN/1TXwXWiCaM/V9OajA8fR0oV36VF2ThEoXyj/sP+KYzx5qO+T55v8AqmmD6t5pDsFaVVBN&#xA;AYLs0HzOnb5b4mT8A/8AEOKNNpq6f6aH/VZyat5p5rzdytRyDW91xp3rWwjFP9kPmMRkyfgH/iFO&#xA;m01bV/pof9Vj9x9yG1J2DrI0h5yVLyFuJY7dxJF49ATTtt8TRmfx+Px+m7ANqA2H47j+j9EQfr/8&#xA;Xf8AJX/s5yu/x+C38Hl9n/HHev8A8Xf8lf8As5xv8fgrweX2f8cd6/8Axd/yV/7Ocb/H4K8Hl9n/&#xA;ABx3r/8AF3/JX/s5xv8AH4K8Hl9n/HHev/xd/wAlf+znG/x+CvB5fZ/xx3r/APF3/JX/ALOcb/H4&#xA;K8Hl9n/HGIeam5amDy5fu135cu5785f15g6j6nednCsfx/HQJPlDnuxV2KuxV2KuxV2KuxVMtL1q&#xA;WyAjdDNCjGSIBijxuRRmRwDTmvwupBDDqNhS3HlMXE1GkGTcbHketjzHlzB5jp1TL/FkH/LD/wAN&#xA;D/1Qy78yO77v1OJ/Jsv53+6/4t3+LIP+WH/hof8Aqhj+ZHd936l/k2X87/df8W7/ABZB/wAsP/DQ&#xA;/wDVDH8yO77v1L/Jsv53+6/4tjsjc5GcCgYk08Kn2pmKS7WIoUtwJdirsVdiqJsL+WzlZlVZIpF4&#xA;TwPUpIhNSrAU8KgjcHcb5OE+FqzYRMdxHI9Qfx8+R2ZRbeatLhDMs90ssgHqyenKsjca8RI8F9bL&#xA;Kyg05mME9TmXHURHU/b+iQv306fJ2dkl0hQ5bivgJYpmN93EQFb/ABpYf8tV5915/wB5PJfmo95/&#xA;2X/Ftf8AJU/5sP8AYf8AVB3+NLD/AJarz7rz/vJ4/mo95/2X/Fr/ACVP+bD/AGH/AFQbTzrYK6sb&#xA;q8IBBIpefx1PEaqPef8AZf8AFoPZM6+mH+w/6oJYfNGlEk/ozr/k6d/2QZV+Yj/N/wBz/wAQ5f8A&#xA;J+X+f/01/wCqra+atMRg66Z8Smq7WA3HutirfcQcfzEf5v8Auf8AiVPZ2Q7cf/TT/qqkepald6jd&#xA;tc3LcnbZVFeKrWvFa123+nqd8x5zMjZdjgwRxR4Y8vx+P2IXINzsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdiqYaPotzqsskcDcTGoZv3U8uxNOkEcxH0jLcWIz5fp/QC4uq1ccIBl184j/dSimv8AgTVf9+f9&#xA;Omo/9kuXfk5fgS/4lw/5Yxd3+zxf9VHf4E1X/fn/AE6aj/2S4/k5fgS/4lf5Yxd3+zxf9VHf4E1X&#xA;/fn/AE6aj/2S4/k5fgS/4lf5Yxd3+zxf9VEq1PRrmwHJnWaIOYnkjEi8JV6xyLKkbo3ejLv275Tk&#xA;xGLm6fVRy+R571uO8EEgj3FL8qcl2KuxV2KuxV2KuxVECwvTZG+EL/VA/pmeh4c6VpXJcBq62avG&#xA;hx8Fjiq6Q+RbXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FU/8o2Iu7m4UrA3FAaXB&#xA;oOvb9zcfqGZOmhxE8vj/AGF1naebgiPq5/w/9JRZR/h9P996d94/7IszPB/q/j/NdP8AnT35Px/y&#xA;Vd/h9P8AfenfeP8Asix8H+r+P81fzp78n4/5Koa90yK1QO0FpTdvVijSZUC7lnRrWIui7c+DclB5&#xA;UyE8ddB9/wDvR8a3bcWoMzVz9xJF+4+IaP8AN4hRO1oZlUKysqhAqRSRyvyQI1DHDNID8ULbG3uA&#xA;fg2VjShEPx+w+X82XRuB6jnudhvfWUR0kP8AKY/4tyBdgxzVtJazYyxBzalzH+8FJIpB1hmHZx9z&#xA;DcdwMXJj4dxy/GxdrptT4mxriq9uRH86Pl93I+ZblTluxV2KuxV2KpnZaVS2XUb9HTTmYpDx2e4k&#xA;XrHESD0/afovuaKbYY9uKX0/f7nEy6j1eHCuPr/RHef0Dr7rIPbCV49T9Ke3W4uTGYrm0VxFbWVr&#xA;X+6PNlQvyI5B267E+q1VyYGpbiz3dAO7+3/dctbmiDjuJ4Y3YlVynLv2F1XKhy6cAqRZ5j8uNYN9&#xA;ateT2DtTevKJqkcHqAeoI3Fa7GjAjKc+Dh3H0uXodd4npl9f3+Y/HmNkizHdk7FXYq7FXYq7FXYq&#xA;7FVa0tJ7udYIF5O1SSSAqqBVmZjsqqNyTsBkoxMjQa8uWMI8UuX4+1GfoeL/AKuVn/wUn/VPJ+F/&#xA;SDR+aP8AMn9n63foeL/q5Wf/AAUn/VPHwv6QX80f5k/s/W79Dxf9XKz/AOCk/wCqePhf0gv5o/zJ&#xA;/Z+t36Hi/wCrlZ/8FJ/1Tx8L+kF/NH+ZP7P1oK4hEMzRiVJgtP3kZJU1FdqhT+GVyFFyIS4hdEe9&#xA;SwM3Yq7FXYqmugMizS8pZIvhFDHdpZk792dJOXyy7Dz/AG04WtBIFAH3wM/uIpO/Vg/5a7j/ALjM&#xA;P/VDMix3n/Tj9Tr+E/zY/wDKmX/Fu9WD/lruP+4zD/1Qxsd5/wBOP1Lwn+bH/lTL/i010W/tgHtZ&#xA;pZZIHZWV3vYrsxydFZXWONomqaAmqk/Cact7sUxyPL+tf6NnC1eGX1AAH+oY2OtizxfeOY5LNR05&#xA;7FwykC3Ado5FQlEQn96RFuWgYn9/B1jPxLtUEThw+78fZ3jpzDLBnGQf0tuu5PTf+f8AzJ8pj0y3&#xA;5AmVQrKyqECpFJHK/JAjUMcM0gPxQtsbe4B+DZWNKEV/j9h8v5sujkA9Rz3Ow3vrKI6SH+Ux/wAW&#xA;5AuwY5q2ktZsZYg5tS5j/eCkkUg6wzDs4+5huO4GLkx8O45fjYu102p8TY1xVe3Ij+dHy+7kfMty&#xA;py3Yq7FU00K3sZpZPVkC30fB9PglUGCaRXBMUrEjiGXYdiepGXYYgnfn07j73D1k5xAoeg3xEfVE&#xA;Vzj7vwCnH6QuA1zdWtvSnNGsmDltLmmkBkltogRxUkUVqVU0B3oWv4zuQPh/N9w/Fffg+BH0xke7&#xA;1bfvQBsJHqe8dRuNrEUXtNOmvjpEF09poqcmGoywuPXmVDwkmGxRS3wrXZFNTvyJiYxJ4Qah31zP&#xA;n+NmYy5Iw8WURLL/ADRIekXuI95rc/zj5UEToutSwyvpOrJSUfuSJqAOAAvpyciBWgARyaUorEAI&#xA;8c8WUg8Mvx+Px0Iq1ekEh4uLlz26eY/SPeQL4ozLfMflxrBvrVryewdqb15RNUjg9QD1BG4rXY0Y&#xA;EZTnwcO4+lytDrvE9Mvr+/zH48xskWY7snYq7FXYq7FXYqrWlpPdzrBAvJ2qSSQFVQKszMdlVRuS&#xA;dgMlGJkaDXlyxhHily/H2ou7u4IIGsLBuULU+tXVCGnYGoAB3WJT9lepPxNvQLOUgBwx/t/Z+PdT&#xA;ixSlLjnz6D+b/wAe7z05DqZOS1tLCBZdQj9a5mUNDZcinFG3EkpX4hyH2FG5+0dqciIiIuXPu/X+&#xA;P2xOSWQ1A1Ec5efcPd1Pw53wjbazmuoVntvLUs8D14Sxi6dTQ0NGUkdRk4xJFiH3tGTKIHhlnAPc&#xA;eBU/RV//ANSpcf8AA3f9cl4Z/wBTP2sPzMP+UiP+wd+ir/8A6lS4/wCBu/64+Gf9TP2r+Zh/ykR/&#xA;2CSajFJFeSRyWjWLrStq4cMlVB39T4t+u+Y8xR5U7HBISgCJcfnt+jZDZBtdirsVdirsVdirsVVb&#xA;a5mtphLEaMKgggFSpFCrA7EEbEHDGRBsMMmMTFFn3l/zBbXlsLe4J9Oq0PL95DJ9lCHb7o5D/qP2&#xA;J2WHMJCj/Z+Oh+BeZ1uiljlxR5/YR12/3Uf86PUBW40uK0lbm4SL0pTZ8FjClzWsYWVkX0ZGNJYC&#xA;ao26/CTkjj4T934PQ9R0PJjDUGY2G9ji5/PYH1D+Gf8AENpbgIaSGw9GUIryf6PCqQSPblXqR6tt&#xA;I3rcmSLrBJ9tem9FyBAr4Du+XPp0PNtjKdi6HqO4Etu6Y9POX8cfpPPqWOap5bdNQnXTD6tgG/0e&#xA;SeW3SQrT9oLIRUHb39sxcmD1Hh5fB2un14MB4m0+tCVfcg7zQdVs7FL64iVbV5TAsiyRv+8C8uNE&#xA;Zj0yEsMoizyb8WsxZJ8ET6gL5EbfEJflTlOxVNofMd3GySNDDLcooQXThxKVAoAzoyVoNqnemXDO&#xA;R0FuFPQxNgEiJ6bV8iCi4POmoJKrPCjID8ah5wSO4+KRl6eKkeII2ywaqV8vvaJ9lQIoE/KP6v0j&#xA;3oPVdYtr+MKLT0WjoIHEnIon7Uf2RyT+QHdelSKAV5Mol0cjTaWWM/Vd89ufnz59/fz585J5H1JL&#xA;5xY6lIhgqIpGkIHqRGJzxavUr6SqG/l2P2U45eknxbS/H4/HStR2vgOMceMG+e3Q2P1k1379ZcUG&#xA;zXPRuxV2KorTdPkv7r6vHLDCxR353EixJ8Clqc3IFTSgycIcRppz5hijxEE8uQs77cgif8P3/wDv&#xA;2z/6TrP/AKq5LwZeX+mj+tq/Ow7p/wCkn/xLh5fvq7zWYHj9etP4S4+CfL/TR/Wv52HdP/ST/wCJ&#xA;RkcdotpJHHI0ekxsFvb1RSS7kHxCGEN0QdQD/rvvxUWACv6PU9/kPx5noHHlKRkCReU/THpAfzpe&#xA;f/SMf4pHafNq2oTTLpGkwSfVk9b047dJnSNSACS4ZnNSOta4wMpH0xG3kueOLEB4uSQ4jW8iLPw5&#xA;LbfRb36362rQStdTMzRWU/KOWd/tNJKz8WSFeryEivQH7TKI4jdyG/d3/s7z+AZ6uHDWIjhHOQ3E&#xA;fIVzl/Nj8+gkNmmtlX61PJC0bngLyWASmZk+HjbQHiI4IgOIO1f+FWwkczXvrn7h3D8dwojGRPDE&#xA;SsfwiVcP9eXWcufX9Mkf0hpH+/oP+4dH/wA14OOHeP8ASs/Ay90v+Vh/U79IaR/v6D/uHR/8148c&#xA;O8f6VfAy90v+Vh/UkmoyQyXkjwsrRmnEpGIV+yBtGCQMx5kE7OxwRIgAefvv7UNkG12KuxV2KuxV&#xA;2KuxV2KqttczW0wliNGFQQQCpUihVgdiCNiDhjIg2GGTGJiizbTfMGnXmlyQajEs9moUyRTNL+7Z&#xA;dl5PGksoHZJApP7D9mOwhmjKNS3H495+PwPe89n0WSGQHGan3it/gSI++N/0o9QsEvkFyFj0+zeR&#xA;tkQ32oJUnoOUluiL82YDxOC8PcP9NL9TIx1w5znX9TGfumT8haX3h0p0may0KGGe0qLywuJbt5kC&#xA;neRWWWPko/aHGq9dxuK5cO9QFjmDf63KxeKCBPLIiX0yAgAfL6TR7t9/fzJ7zU7S4sktotMtrSRZ&#xA;TIbiEzFypWnA+rJJ8Pf/ADOUSyAihED5/rc7Fp5RnxGcpCqo8Ne/aIS/KnKdirsVdirsVdirsVdi&#xA;rsVTTy4nPVAvpWcv7qb4NQf0oP7turco/i/l365dgHq6defJw9cax85jcfQLlzHkdu/yTH6p/wBq&#xA;vR/+4j/2e5bw/wBGH+m/484vif7Zm/5V/wDVpwtKmn6L0f8A7iP/AGe48P8ARh/pv+PL4v8Atmb/&#xA;AJV/9Wkn1W5u5Lj0biIW31WsSWagqsVDuoViWrXckkknrlGSRJo7V0c7T44CNxPFxb8Xf+PkmmjS&#xA;6rdaZJbWdpYvHYgyTSTLAszrM6qAWlILgMBSnT7suxGRjQEdvc4eqjihkEpync9hXFQoHu5fpXtL&#xA;Nb28jakltDA1B9UtPRWW4INQjvCSyxAgFt99qb7qSSB6qA7hW/y6MRETkBj4jLvlxVHzAlzl3fbt&#xA;sRL6A9zHJcazK8V3MkElgtq1pJCsDKTxKNPFxoOIVR0yRw3vPntVVy+bUNaIERwgGIMhLi4weL38&#xA;JvrZR2mWF/HDbabpt7drFHNNcTJDIkMkxkWJFQLBNPQD0t5G6VoAWIVrMcJACMSeZPdfLuJ+bjaj&#xA;NAmWTJGFkCIsEgVxG/VGPftEd25Asgb9X82/yXH/AEkap/TLOHL5/Obj8el74/6XCwnzEt2us3Av&#xA;AwuBw5h2ldvsLSrT/vOnj+rNfnvjN8/x3vQ6ExOIcH0793f/AEdktypy3Yq7FXYq7FXYq7FXYq7F&#xA;UTYaje2EkktpKYnlieCQgA8o5V4upBBG4OThMx5NWbBDKAJi6IPxHJDZBtTux16KC2juHEn6bsJI&#xA;m0y6UKU9ND8Uc4b7QUU4bdNj8NAMiGYAX/GOR/X+h1+bRmUjEV4MweMeffHuvr8+dpRcTPPPJO4U&#xA;PKzOwRQigsaniqgAD2GUE2bc6EBGIA6KeBk7FXYq7FXYq7FXYq7FXYq7FUdpupR2S3CvZW94Z0CA&#xA;3CsxjowbknFloTSmWY8nDewN97j58ByEVKUeE/w9ffsVVdYtuQ9TS7Rk/aUCVSR3owk2+eS8UfzQ&#xA;wOll0yTv4fqTX9Ffpa3T0EnuYUULa30UTTSRKv8Ax7XaRgn4R/duB026bJd4fGNrPnz+B/R+Kwvz&#xA;PgyPFwxPWJIAP9KBPf8AxD9P1J/4Jv8A/l4/6Qrv/qng/KHz/wBKf1Mv5Wh/R/08P+KRWmeWNQsL&#xA;xbkQG5Kq6+jc6ddyRnmpWpUx9RWo98nj08om6v3xLTqO0MeSHDfD5xyQB+9EfoTVP+WSP/uFT/8A&#xA;VLJeFLu/2B/U1fm8f84/8rY/8U1ezSadpz29zE1nbTf70GOAWc121NoYlZQwiUH45GHegG9GZnhj&#xA;R2Huony93eU4oDLkEonikOVy4xD+kd64u6I9/mAEmmaQkMMvp2zCaJZgq6inJeX7DqUBVx3GVHHC&#xA;gdv9M5MdRlJIuWxr+7PzG/Jj1w8DzM0EZhiNOMbNzI23+Ki139sxZEXs7SAkB6jZ+SlgZuxV2Kux&#xA;V2Kr44ZpATHGzgdeIJ/VhAJYmYHMr/qd3/viT/gW/ph4D3I8WPeFr29wi8nidV8SpA/HAYkJE4nk&#xA;VPAydirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqO0jU/0ddm&#xA;c28V1G6PFLDMoYFJBxbiSDxen2WHTLMeThN1bj6nT+LGrMTYII7x947wypJrS6t1EVtBNDc26WiP&#xA;HBGssiQkMOO3wXke3JSaTL03pXMBBGwG4rl+PV/unSmEoS3lIGMjLeRoX9+M9DzgefWlXmjuknki&#xA;n0u2N1IsspEWnujFF4q0aXEiSQ8gatGy7NUg70yRPFdGIv8Aq/p5e5gImBAIyy4RXPJ38iYgiVdJ&#xA;A8vdbrZJFmRGvYrtN/3EE0FvEij4mKwWM6VdqbuxVFAqx/lYjfnfuIH2RP7O9chBBPCY+ZEpE++W&#xA;SB28hcidojvNkTTGRX9SFQ4DKHvtSQlTuDRqGhG4Pcb5cBH8Sk4ROQGql/pMRSjzXHYjRJjFJCz8&#xA;koEvLuZvtD9iU8D9OU6kDg2r5y/S5vZpn4wsSrf+CA+2O7A81r0rsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqL0/UZbNnAVZbeUAT2714PTdTsQQyndWBqPv&#xA;ycJmPuaM2AZK6SHI937D1Ccnzpck1MBJPUmeck/MlsyPzR7vtLgfyVHv/wBjH9SMsfMMF9bXn1qR&#xA;LUworxJKLm4jkbmBR1UlaKaNRwVJoKHJwziQN7fMtGbQyxyjwgys9OCJG3Trvy23HehUudCNuy3U&#xA;lpfXjzPLLe3C33qMGA+E+m0Y2IJr75AShW9E954m4483F6ROEAAOEeHX2goXUJtD+pSrbxWfrsFE&#xA;bQi9Dr8QJI9eR06AjpkJmFbVf+d+luwRzcY4jOvPw6/2IBSPMd2LsVdirsVdiqpb289xMkECGSaQ&#xA;8URRUk4YxJNBjOYiDKRoBHf4e1X+SP8A5Hw/815Z4EvwQ4353F3n/Sy/U7/D2q/yR/8AI+H/AJrx&#xA;8CX4IX87i7z/AKWX6nf4e1X+SP8A5Hw/814+BL8EL+dxd5/0sv1O/wAPar/JH/yPh/5rx8CX4IX8&#xA;7i7z/pZfqS3KnLTNfL1+1rb3Ky2gjuULor3dtG4AYr8SSSKw3Xwy7wZUDtv5j9bhnWwEjGp3H+hM&#xA;jv5gO/w/f/79s/8ApOs/+quDwZeX+mj+tP52HdP/AEk/+Jd/h+//AN+2f/SdZ/8AVXHwZeX+mj+t&#xA;fzsO6f8ApJ/8S7/D9/8A79s/+k6z/wCquPgy8v8ATR/Wv52HdP8A0k/+JRWmafqFhdfWFXTLk8HT&#xA;0rm6spY/jUrXiZuq1qPfJ44Sib9J95j+to1GfHljw/vY7jeMMgO3+ar+nqn++dH/AORun/8AVTJ1&#xA;Luh84/ra+LH35vlk/wCJXNoNpeBZZbi1sLjpLHFc2ckTEdHT/SFKV7r0ruNjQPgiW5IiffH9aBrJ&#xA;Y9gJzj0uMwfcfRv5H595b/hOy/6u1v8A8jbP/spx/LD+cPs/4pP8pT/1OXyn/wAQ7/Cdl/1drf8A&#xA;5G2f/ZTj+WH84fZ/xS/ylP8A1OXyn/xDv8J2X/V2t/8AkbZ/9lOP5Yfzh9n/ABS/ylP/AFOXyn/x&#xA;Dv8ACdl/1drf/kbZ/wDZTj+WH84fZ/xS/wApT/1OXyn/AMQlGq2EVjdCGO4S5UqG9RGjYb12rE8q&#xA;9vHKMkOE1dudpsxyRsjh+f6QEFlbkOxV2KuxV2KuxVkvk/8ASH1fVRZtqasYo+X6LXl/u0f3u4an&#xA;WnHf6K5l6biqVcX+b+l1PanBxY+PwuZ/vPd/D+m/vTHh5l/375k/5Fy/815b+8/2xxL0/dpvmP1I&#xA;DXF1sadJ9ak1poaryF8kiwdRTkWZh8sqzcfDvx/Hk5OkOHxBwjDf9Aji+5jGYjuHYq7FXYq3irKL&#xA;SzsIbKD6nJJcLeIq3UiIUnlmf7Vjbg1+Faj1Zem/yVsyMQAK3vn33/NH6T/YdPkyzlM8YEeE7b3E&#xA;D/VJf72P7TEVDczcGWNnZIm9Nmt7y2sbNGp/cwmdH9XgPtOG367/AGmmJH+wiI9wvn+Pe0Txi96s&#xA;/wA6EpzP9KXCRw30FbeX0h/1qf8Ank/7jWnf9U8PEfxOP6mPhx7h/wAqMv8AxTvrU/8APJ/3GtO/&#xA;6p48R/E4/qXw49w/5UZf+Kd9an/nk/7jWnf9U8eI/icf1L4ce4f8qMv/ABTCc170LJ47Sul6e/6N&#xA;0mTnEx9WW99KZ/3risifWoaHt9n+gyxH0j0w/wBN/wAeDqJZP3kxx5RvyELA2HI+HL71v1T/ALVe&#xA;j/8AcR/7PceH+jD/AE3/AB5Pif7Zm/5V/wDVp31T/tV6P/3Ef+z3Hh/ow/03/Hl8T/bM3/Kv/q07&#xA;6p/2q9H/AO4j/wBnuPD/AEYf6b/jy+J/tmb/AJV/9Wla30i7ueX1fRNLm405enfM9K9K0vThjjJ5&#xA;Rj/pv+PNc9TCH1Zco9+P/q0rv5DaVjIEntee5t0NnMqHuFka7jZh4VWvz65M6O+8f6U/75qHbHDt&#xA;6ZefrF/Dwz96aaF5bGkyiRBKblzSOUmNZT/kp6Mkyov8x51Pei/DJbhwcB8/x3E/jy54es1/jCjX&#xA;D8a954oxJ8tq7rlvCQ/X7Vfhe/1IsPtGMI6V/wAlhHuMyuMd8nV+DI8oYvjY/wB81+kbP/lu1X/g&#xA;F/6p48Y75J8Cf8zF8/8Ajzv0jZ/8t2q/8Av/AFTx4x3yXwJ/zMXz/wCPLW1Yg0ju7ngOnqW0zP8A&#xA;SVlRfuUYPE8z8j+tI03fGPwlH/iT97z3z3cNPrau0jSH0UHJ0eM9W/ZdpD+OazWG5/B6jseHDhqq&#xA;9R6g/cAx3MV2rsVdirsVdirsVXrLIquiuVWQASKCQGAIIBHfcVw2gxBNnoswJdirsVdirsVdirJN&#xA;M1+1sNKaK0tb6L1VRNTnhuI1jkkV2eP7VvLw26UbfMrHmEY7CXnv+x1Oo0UsuW5ygavgBibAoA/x&#xA;i/kvGoR3cMt2/wBYt7UL6E93PMs87oan6tbUjiVOfI8zQ7ddiVY8fEL3A77s+4bD4/ix4BgRAcMp&#xA;cxER4Yj+nPc3XTz5criFurOW+g9ae6tdOS3f0LfTJWkSSNCocME4MSrV3c7schKJkLJEa6N2PKMZ&#xA;qMZTMhZmKonlzv7OgR1lZBktLeyjtrqOKEtf3Mdv9ZczNLKVjjVlVncxKtFG3UkgBiLYw5AUdt9r&#xA;6n9DjZctGUpmUST6QZcO1R3NchxXv8BZICL/AEbL/wBW28/7gcf/AFWyfB/RP+k/a0eOP58P+V5/&#xA;4l36Nl/6tt5/3A4/+q2PB/RP+k/avjj+fD/lef8AiWE5r3oXYq7FXYqvhFZkFFarD4XPFTv0Y1Wg&#xA;+nCObGXIs0vNVsrXWf0b6tpp8QkkN1PZw/W7WEkE8YonLeqxIAZz0+ytFB5Z8sgE+HaPuFge7v8A&#xA;f8nQYtPOeLxKnM0KEpcEpe8j6R3R685WTsC/xAn/AFc4/wDuF2v9Mr8b+l/sQ5H5I/zD/wArZo+X&#xA;zENM0v1GkW5vbxawJ9WhtaR9mdYhyKHqOR+LwC7tac/BHvJ8gPx+Pjix0PjZKrhhHn6pS38r6+7l&#xA;7+UPm1G/mleWW4kaRyWZix3JzBOSRN276OCERQAoLPrl3/v+T/gm/rg4z3svCj3B31y7/wB/yf8A&#xA;BN/XHjPevhR7g765d/7/AJP+Cb+uPGe9fCj3BTeSSRuTsXbpViSfxwE2yEQOS3Al2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxVG2WtaxYwPBZXs9rDKweRIZGjDMoIBPEjxyyOWURQJDj5dJiyESnGMiO8Ao&#xA;iDVYbmaSTX2u9RCxMttS44ukhIIPKRZfh67UyQyAn13L4/2tc9MYADBwQ339PMfAjdMpPOLyOXe4&#xA;1gsep/Sf0f8ALPlp1V9Z/wCm/Y4ceywBQGH/AJVf8fQWqeZLm7tvq0b3PpN/evd3BuZWFQeAfjGF&#xA;Sqg8Qu53JNFpXkzmQrf4m3J0+gjCXERG+nDHhHvqzZ872HKrNkuUOe7FXYq7FXYq7FXYqitN1K+0&#xA;y9ivrGUwXUNTFKACRyUqdmBHQ5OEzA2ObTnwQzQMJi4noiP8R65/y2yffkvHn3tX5HD/ADQgZ7ie&#xA;4meaeRpZpDV5HJLE+5OVkkmy5MICIqIoBTwMnYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqrWl&#xA;pcXdwlvbRmSZ/sqPYVJJOwAAqSdgMlGJkaDDJkjCJlI0AslilhleKVGjljYrJGwIZWBoQQehGAit&#xA;iyjISFjcFZgS7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYqrWlpcXlwltbIZJpDRVFB0FSSTsABuSdgMlGJkaDXlyxhEykaAZfPpttoukyQLbfXml21Sd&#xA;X9NxGpAYRLUPSN6VJUqG+2C3wR5pxjHGqvv/AGfj39w0cM8tRlEuLgr6BVi/6XTcedkfSa9Uyuey&#xA;F8Le3MglmlATStRpxE4WgFtPueEiVCgk/DsCShVhUYcVD5Hv8j5/jlRcyGXw7lVAfXH+b/Sj3xPM&#xA;9+5Hq4okjuba4tbiS2uY2huIWKSxOCrKw2IIOY0okGjzdjjyRnESibieqyOOSSRY41LyOQqIoJJJ&#xA;NAAB1JxAtlKQAs8k1v8Ay/JDG72chvVs4I5NVeNKJbSyOU9IvUh6GnxLt92XTw1y3ob+ThYdaJEC&#xA;Y4OKRELO8gBd109yUZQ5zsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiq6OnqL&#xA;WlKivKvGle9N6fLCES5Ms1R9K/SFxSbQlHM0EEV+Yv8AY8UYU+RzNyGPEfo/2TpNOMvhjbPy6nHf&#xA;3oXnpf8Av/R/+RWof9U8hce+Hyl+purJ3Zvnj/4pXsX0r67b1m0Qj1EqJYr/ANP7Q+3WMDj41OSg&#xA;Y2N4f7L9TXmGXgO2fkeRx38N0iktJrzV5ra0SOR5JpBGtvUQ0BJqhfcRgb1bovXMYxMpUPs/HJ2U&#xA;cohiEpEgADnz+Ndfd15MrVdP8r6ewDepeyfDLKtVd3U7xxnZkRGHxN1B/wCLKCHM9OGPn+Px+36d&#xA;ITk1mTugOQ7vM95PQdf6n95E5NXv2v1vhJwnSgj4ABUUCgRV+zw47celMwzklxcXV3g00BDgr0/f&#xA;533+aajULQQiLS4BcXGrRmO60143ZLe4D0jltmDV50rx/lqV3y7jFVEWZdO4+ThHBK7yHhjjNiVi&#xA;5RrcT25d/fV7JqvlGzigjm1a6ha9uqyu894kJbkftLzBLitfjr8R6bUZrvywAuRFnz/HzcI9pzMi&#xA;MUTwR22gT93L+r0672BhomnwI/6P1DT7WeQcDctexSuqHZhHugUsNietNsfCiPpMQfej83kkR4kM&#xA;kgOnAQPjztKb7T7xohZWUlrFp6GpBvrMPM4/3ZLSalf5V6KOm9WNM4GqFcP9aO/v3/sc7FnhfHMS&#xA;M/8Ahc6HlH0/M85fIAo1GwksLx7WSWKZkCkyW8iyxnkobZ12NK0OUThwmvuc7BmGSHEAR7xR+SFy&#xA;Dc7FXYqzTyzYWM1iGmtopG+oXT8nRWPNWk4tuOooKHNhp4RMdx/Cf0vP9oZpxntIj95Dr/VSbzlb&#xA;wW/mK4igjSGJY7crHGoVQWt4ydhtuTXMfVRAyEDy+52HZc5SwAyNm5f7opJmO7B2Ko+y0LWb61ku&#xA;7KymuYInWKR4kL0dgWAotT0GWQwzkLAsONl1mHHIRnIRkRe5pU/wz5k/6tV5/wBI8v8AzTh8DJ/N&#xA;PyY/n9P/AKpD/TD9bItP0yLQrJrp3iOpOADNJI8cUQcVCrJERJVl7xmrDcER7y5cMfhi/wCL7vl+&#xA;j7vq1WfUHUz4QD4fcACTXkdv9NsP6+0L/wAR6h/y3Wf/AEm6r/1Wx8eXeP8ATT/Wj8jD+ZP/AEmH&#xA;/iUbbanqUkfK4u4oSJELhbjVJf8AQ2+1doUufjRDsyj4hvypQ5OOSR5n7Z8u/wCpoyafGD6Yk7H+&#xA;HEPX/MNw2J6Hkel2qpeahyQS6hBF8ciXDm41QpFt/o0hb6zQx3G3GQfCK7ntkhKXUj5z+H8XI97W&#xA;cUN6hI8q9OGz/PH0fVDrHmejH5/OutwTPDNA0c0bFZI2utRDKw2IIN1mMdVMGiPtl/xTtIdlYZAE&#xA;Gwf6OL/qmmenap5nv0QxRqryKZI4jdao0jRg8fU4R3DsErtU9cthkyS5ffP9bh59PpsZ3PLa+HDV&#xA;91mA38kdw85/74/5K61/1Uyysvd9s/1uPek7/swf8SxjzgNYElr+kk4Nxf0vivHqKiv+9jOf+B+n&#xA;MTU8e3F/vv0u37L8KpeGe7+Z/vAPtY7mK7V2KuxVchAdSTQAippX8D1xCDyZrPevquoXU1leX2o0&#xA;erzQaRbN9r7JYLIKVp3AzYGfHIkGUv8AMH63n4YhhhETjCHkc0v+Ja+p6r/vvVP+4LD/ANVceGX9&#xA;L/SD9a+Li78X/K+X/Eoiwg1WG+t5f9ykXpyI3q/oSE8aMDyp6jdPlkoCQIPq/wBIGvNPFKBH7o2D&#xA;/l5fqVvLWnXltD5ivby3mgmLRy208sJtXdfUdpOKgDhy+GoT7JoRQhSJYIECZIPypr1+eEzhhAxI&#xA;3BAPEBsKvv68+e97Ehgd7e3F5cGecgsQFVVFFRRsqIo2VVHQZrZzMjZelxYo440Px5nzU4IJp5kh&#xA;hRpJpGCxxqKszHYAAYACTQZTmIgkmgGf6No1j5esTe3pjkvZI+fx7xrGduTU39Ku228p+FfgqX2e&#xA;LEMQs8/x9n+65DbnzGq1U9VPghYgD8b/AOK+yA3PqoRKdS1CW6gk1eY2ietKqW6XsYlup0NQ09Ar&#xA;hUUrSg+EfZWpG9GSdjiNfHmfNztPgECMQ49hvwmoxP8AN6Wft6nnsC1ia4026MQisLq3be3vIbeM&#xA;xSqNqqSo6HYjschlJgaqJHfTfpYRyxu8kZdYmRsIH9OS/wDLJZ/9I8f9Mq8byHycn8oP50/9MUNq&#xA;N899dvcvFFAzhR6VvGsUY4qF2RdhWlT75Gc+I39zdgwjHERBJ95s/NDZBtdirsVZ35UIGnr/ANs6&#xA;7A+ZeUAZstN9P+af0vN9o/3n/JSH3RSfzrBJJq02oIOVs/pQlh+y8cKqOXtIqc42GzLuDsQMfVC5&#xA;cXT9n4I73P7JmBiED9W5+BkfuupDmDz6XHMxXauxVPtF036zpFzN+iJ77jPGn1qOb00SqMfTKcW5&#xA;E9a9v15OKFxJ4Sd+dut1efgyxHiRh6TsY3e43u0dYaTAtyjy6S8HE/u/WlE3N/2VSEqvqN3oTx7t&#xA;8NcshjF7xr8d3483GzamRiQMgl7hW3nK9h9v83elDWfMs8cxj0+cpOpPqXcTkleRqyRSbMeR/vJe&#xA;rnwQAGOXOQfSd+/9X6T19zZpdACLmNv5pH2kf7mP8P8AWVdN1PzCghmur69uZbnax04XMytNXbm5&#xA;Vgyxj2NW7bVIMMk9iTI3yFnf9jHPp8BsRhCIj9UuGO3kNt5fd8gm8ocmFLqdmEjB9O1RXSR1lIoF&#xA;eUHgz/BxD14ygcW4sv7u89LPuP4/B9/LBiRuYjl9UKIFd4HMDe65wJsWD6wvH0phBK0drKgai8ok&#xA;RVckOYFuWhjkglIIeByCj1pT4lyHI0dvl9l1YPWPQ/FuuxYuQPv6cuLhEiJx/hmLEo9/pKPi1W/i&#xA;jSKLWxHEgCoinTlVVGwAAv6ADLRkkNhL/c/8W4stNCRs4rJ/4b/1RQl7qkVrE93c3K3LyNyLp9VE&#xA;sjqKBQLeW5+Kh/vJD8C14Dk2VzyAbk38v0E/M8ujfi05mRGMeGv69Af50Yf6WP1H6jQam1fVI/Tr&#xA;+ij6kaSgLezniJFDcW/0nZhWhGJyyH8z5n9aY6bGb/vdiR9Een+ZySHzLc3NytrLObT/AHYqrazP&#xA;MRTiSX5yS8a12+nMbPImia+BdloMcYcQjx9PqiB38qASPMd2LsVdirsVT7yzrGoaXFdy219JYxSG&#xA;JZZEt0uFZqOUBL7KftU8d/DMnBllCyDXwt1uv0sMxiJQEyLr1GPdfLn093xTj/HWrf8AUxSf9IEG&#xA;X/m5fz/9iHA/kfF/qI/5WSd/jrVv+pik/wCkCDH83L+f/sQv8j4v9RH/ACskp3PnG/uYHgn1+R4p&#xA;AVZTYw9CKGhBqPmMEtTIijP/AGIZ4+y4QIlHEAR/tkmP/U9D/wCrjJ/0jf8AXzMXhh/O+x2fi5v5&#xA;g/037GYaHpel6Jp/6Rm/eTzxmSM3KemBCduboCxWJvD7Up+EUXlyzsWOOOPEefn3fq+08uXPRavU&#xA;ZNRk8MbAH+E3v3A/zvsh9R9VcJbcXFxrFx9auqtasWmggmbh63D4Wurpl+xEn2fh/wCMce/JsqlI&#xA;zNnl9/mfL+wOXCEcEeGP1ciR/D/Qh3yPPf8Arz6BU1WWYaDMFlnCS3Ns8vG2VjJ8LenJK2wgHH+4&#xA;gU/Z7bg4chPAefMdPv7v6I7mOniPHG0doyr1cuVgfzv6cz/F7qRWtR/W725S49S7+synlyiFvNLK&#xA;oAJEXwiG8jHVNlmX/KpWeUcRN738Ps6S8v4mjSS4IRMajwjv4gB/W/ixn+dzxnyuoZqGnyWci/EJ&#xA;beUc7e4SvCRK0qK9COjKdwdjmBOHD7noMOYZB3SHMd346HqhMg3OxV2KuxVlPl2U3ENhECVRbuHT&#xA;7kA0JS7kaWOSNh8SSRPExB+XbkDmYDYA8wPn+kOm10eEzP8AQMx74iiD3iQI+3yKO1Zi+iX7tTkY&#xA;nFQAPhMmnS8du3qTOwHQFj45Zk+g/j+Z+suNphWaA8x92YfdED4BhGa96J2Kpnp1pZrYzaldyxvF&#xA;BIsaacH4yzSMCVJUUIiWh5MN/wBkUrUXQiK4j06d/wCxw8+WfGMcQQSL4q2A/wCK7h8Tyotm17UJ&#xA;I5IwIIVlBVzb20EDFT1XnGivxPcV3wHNI93wADKOjxgg+o13ylL7CSFmjz6bBeerqFu11EqP6UIc&#xA;Iplp+7MlRugb7Q2wYjEH1C2WqhklCoHhN7nnt1rz7k8vIJI57uL64ko2Gr65EQ8RBApb21OIO3w8&#xA;RTl0+FATmRIUSL/rS/QPx9jrsUwRE8JH8zGdj/Wn99715yIVtC1nTJ1bSvqoit5KpFbsxk9ZTStS&#xA;xX98SAduKvtTgyowlhyxPprb7/2/f5GmvWaXJH97xXIczyr/AI78zHrxRMgjb2yhmhSxvnMtrKR+&#xA;j9QqC6uRRUdjwHOicQW4iQLxbi6/u7JwBHDLl0P4/B5GiNsfFlMTxw2kPqj+kc9t72sxJ4o8UZeu&#xA;Galpt1p90be4G/VHFeLrUjktQD1BBBFQaggEEZgTgYmi7/BnjljxR/s/HyI3GzKdMOst5b09bWTX&#xA;RErz0FnEfq27j+7ZGVm3+1Xv0zMx8fhiuPry5Om1HgjUT4hguo/UfVy6gj5eS/h5l/375k/5Fy/8&#xA;14f3n+2Mb0/dpvmP1JH5kGoh4Prraixo3D9JKyntX0+TN9OY2fi2vi/znZaA46PB4f8AmfpSXKHP&#xA;dirsVdiqdeW/M11oT3D24flcBVbiyAUUk7h0kHfMjBqDjuurr9f2fHUgCX8Pv/QQnn/K0tW8JP8A&#xA;g4P+qGZH8oS/Ffqdd/oexeXyl/xbv+Vpat4Sf8HB/wBUMf5Ql+K/Uv8AoexeXyl/xbv+Vpat4Sf8&#xA;HB/1Qx/lCX4r9S/6HsXl8pf8W7/laWreEn/Bwf8AVDH+UJfiv1L/AKHsXl8pf8WoSXN3rMq3l8gE&#xA;DVnhtZHIWUr8LXFy4C0hj+yKAV+xGK8iImRyGzy7v0ny/sDbHHHAOCHPkSOn9GI/nHn/ALKZ5BWk&#xA;kRUeaZ6RjhLJJKg32/dSyxbL9kUtrYbU+Jvg+0Sep/HcSP8Acx+J2a4xJIAG+42PzAP/AE0yc72H&#xA;q5RzUtcu7usMckkVjz9VYC5YtJvWaU7epK1d3PyFBQZizyk7dPxufN2uDSRhuQDOquun80d0fL52&#xA;d0x07XJL52i1CT1ruYBTNO5AuAPsxzSH7Mi/7qm/Z+y3wfZthl4tpc/v9/n3H9Di59IMYvGKiOgH&#xA;0+cR1B/ih15j1czGaFblXhmR5xO7B0K8JpJk2b4T/d3sf7adJh/lULWkXsd7/H+m/wB173EhMwNi&#xA;hQ+AH6cR6HnjP9HlFtQ0+SzkX4hLbyjnb3CV4SJWlRXoR0ZTuDscw5w4fc7rDmGQd0hzHd+Oh6oT&#xA;INzsVdirKfKThbGRgkEkkN9a3MUXqEXUkkCyFURK8BH8R9SRtlG++2ZmmO3T6gfPa/s7z0dN2kLm&#xA;N5AHHOJNekCXDuTz4v5sR9R7kZqTxtoV8EYMDFIyMP2o1l06H1FrQ8GeFwp70yeQ+g/jrAfoaMAI&#xA;zQvvHzrNKvfUhY82FZgPQOxV2KuxV2KoltQvmsE08zObJJTOlvX4BIyhS1PGgyXGeHhvZqGCAn4l&#xA;esir8u5DZFtZhoGvpfIdO1ACaWYcKNuJwaCh3X978I7jnQbiQI+Z2HNxemX9v7fv99F0Wt0ZxnxM&#xA;ewH+x/47/ud9jAyiitRt7ZqaVqDNLG9s1/p92PilEKoxJaoWrqkJpWnqKAGCtx4TnEfTLusHy/A+&#xA;I50aqnBOQ/e49jxcEo9LsfZcvPhNkGQviCS6KINLt7e6tI5JLe4uoTO+pwwo7RyBG4Qy8SgBHzPX&#xA;wyBxVEAjkT/EB9hb46viyGUZECUYGvCkasXvIc/0IT9FWX/LHb/9xaz/AOash4Y7h/pw3fmJ/wA6&#xA;X/KmaWaxawwNEIoY4uQNRHdRXdaU6mInj9OU5Ygch9oLmaXIZXZJ98DD7+aXZU5TsVdirsVdirsV&#xA;dirsVTby3pqX166sglaJUaKFyVR5JJ44EV2X4ggaYM1NyBTatRdgx8R/HeB+lwtfnOOA6Xe/UARl&#xA;I15+mh8/JP3kjWNppXpFSOaSWVBvVf3M0sQou6/7y2w2p8TfBu2ST1/Hkf8AiY/E7OsETdAb7igf&#xA;9NEH/ppk536R6uUZ1TVJL6TivJLZGZo42bmxZ93kkc/bkf8Aab6BQAAYmTJxe78fa7fT6cYx/S/F&#xA;ADpEdB+mygMrcl2Ksg0nVluF+q3XFpmVY1aRuCTon2IpX/YdP91S/s/Zb4Ps5OPJex/t/HQ/odZq&#xA;dNw+qPLntziepA6g/wAcOvMermbm0W85QThpIppKTs68JC4dYmkZf91XcRdfUH2ZV367m/h4tj+P&#xA;1SHXvcHxPD3GxA27qokD+ljlR4esDty2ELlj9OV4614MVr8jTMAii7+MrAKzAydirJ/K7qdJ1CH1&#xA;EPKSJpLdoioZFDktNdAVjhU0LIDyfotK5l6f6SPx8T3fe6jtAfvYGjyO99dvph1l3HlHmUu1jWDc&#xA;F7e3dmt2YNNMwCtOyiikqNkRBtHGNlHvlWXLew5ff+Og6OVpdLw+qX1dB/N/WT/FLmSlOUua7FXY&#xA;q7FXYq7FXYqidNmjg1G1nkNI4po3c9aKrAnJ4zUgfNqzwMscgOZBeiHU/wAvLi4sru91J3uLWy+o&#xA;vEkcwhdGjeN6/ug+4lbcMM2fiYCQTLcCuv6nlfy+vjGUIQHDKfHdxsGwR/FXQdEefM/5fkknVr0k&#xA;7km41P8A5qy38xg/nH5zcb+T9d/qcP8AS4v1Nf4m/L7/AKut5/0kan/zVj4+D+cfnJfyGu/1OH+l&#xA;xfqYf591LQL2WzOkXU10qK4mM0lzJxJK8afWCad/s5gaycJEcJv5/pd92Ngz4xLxYiN1VCI/3P6W&#xA;KZhu6dirsVdirsVdirsVdiqK0/U7zT5jNauEkPCpIDf3cqTL1/y4lOThkMTY/HVpz6eGUVLlv9oM&#xA;fuJbu9UvbuCKCd+UUNDGoAFKRRwjp/kQqMZZDIUfxyH6Fx6eECZAbn9Zl98ihMg3OxV2KuxVM08x&#xA;augULN9kKASqk/AEVakjegiX7stGeXe4h0OI9Pwb/WUud2d2dt2Ykk+53yolygKFLcUuxVEx6jfR&#xA;2Mtgk7rZzuss0APwM6AhSR7VyQmQOG9mo4IGYmQOMCgfehsi2uxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2Kv//Z"/>
    </rdf:Alt>
   </xmp:Thumbnails>
   <xmpMM:DerivedFrom
    stRef:instanceID="uuid:01be913d-6f39-4130-af4b-1cb948073b8e"
    stRef:documentID="xmp.did:0C5A99264D6BE51194FFADFDE0B012D7"
    stRef:originalDocumentID="uuid:5D20892493BFDB11914A8590D31508C8"
    stRef:renditionClass="proof:pdf"/>
   <xmpMM:History>
    <rdf:Seq>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:F07763D45588E411BF89F345A28D8C9F"
      stEvt:when="2014-12-20T17:10:37+02:00"
      stEvt:softwareAgent="Adobe Illustrator CS6 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:24845C695A88E411BF89F345A28D8C9F"
      stEvt:when="2014-12-20T17:11:02+02:00"
      stEvt:softwareAgent="Adobe Illustrator CS6 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:28845C695A88E411BF89F345A28D8C9F"
      stEvt:when="2014-12-20T17:18:19+02:00"
      stEvt:softwareAgent="Adobe Illustrator CS6 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:0C5A99264D6BE51194FFADFDE0B012D7"
      stEvt:when="2015-10-05T13:39:49+03:00"
      stEvt:softwareAgent="Adobe Illustrator CS6 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:3d40b8b1-fa65-f745-8e5c-3ac012941b7a"
      stEvt:when="2016-04-12T14:15:55+03:00"
      stEvt:softwareAgent="Adobe Illustrator CC 2015 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:DDA02139A300E611A717E86A33404556"
      stEvt:when="2016-04-12T14:39:32+03:00"
      stEvt:changed="/metadata"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:0ECE6366A300E611A717E86A33404556"
      stEvt:when="2016-04-12T14:40:48+03:00"
      stEvt:changed="/metadata"/>
    </rdf:Seq>
   </xmpMM:History>
   <xmpTPg:MaxPageSize
    stDim:w="1200.000000"
    stDim:h="1200.000000"
    stDim:unit="Pixels"/>
   <xmpTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xmpTPg:PlateNames>
   <xmpTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li>
      <rdf:Description
       xmpG:groupName="Default Swatch Group"
       xmpG:groupType="0">
      <xmpG:Colorants>
       <rdf:Seq>
        <rdf:li
         xmpG:swatchName="White"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="255"
         xmpG:green="255"
         xmpG:blue="255"/>
        <rdf:li
         xmpG:swatchName="Black"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="35"
         xmpG:green="31"
         xmpG:blue="32"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=100"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="35"
         xmpG:green="31"
         xmpG:blue="32"/>
       </rdf:Seq>
      </xmpG:Colorants>
      </rdf:Description>
     </rdf:li>
    </rdf:Seq>
   </xmpTPg:SwatchGroups>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                            
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1200 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1200 li
1200 1200 li
1200 0 li
cp
clp
1200 1200 mo
0 1200 li
0 0 li
1200 0 li
1200 1200 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
0 0 0 rgb
f
620.914 1080.06 mo
620.268 1080.06 619.747 1079.54 619.747 1078.9 cv
619.747 1078.25 620.268 1077.73 620.914 1077.73 cv
621.558 1077.73 622.083 1078.25 622.083 1078.9 cv
622.083 1079.54 621.558 1080.06 620.914 1080.06 cv
cp
634.935 1064.87 mo
624.216 1075.59 li
623.375 1074.74 622.203 1074.22 620.914 1074.22 cv
618.332 1074.22 616.244 1076.32 616.244 1078.9 cv
616.244 1081.47 618.332 1083.57 620.914 1083.57 cv
623.495 1083.57 625.587 1081.47 625.587 1078.9 cv
625.587 1078.21 625.438 1077.55 625.174 1076.97 cv
637.276 1064.87 li
637.276 1029.82 li
625.587 1018.13 li
625.587 943.331 li
623.252 943.331 li
623.252 1018.13 li
634.935 1029.82 li
634.935 1064.87 li
cp
.376471 .788235 .901961 rgb
f
620.914 1096.42 mo
620.268 1096.42 619.747 1095.9 619.747 1095.25 cv
619.747 1094.61 620.268 1094.09 620.914 1094.09 cv
621.558 1094.09 622.083 1094.61 622.083 1095.25 cv
622.083 1095.9 621.558 1096.42 620.914 1096.42 cv
cp
641.943 1074.22 mo
624.216 1091.95 li
623.375 1091.11 622.203 1090.58 620.914 1090.58 cv
618.332 1090.58 616.244 1092.67 616.244 1095.25 cv
616.244 1097.83 618.332 1099.93 620.914 1099.93 cv
623.495 1099.93 625.587 1097.83 625.587 1095.25 cv
625.587 1094.57 625.438 1093.92 625.174 1093.33 cv
644.283 1074.22 li
644.283 1020.47 li
632.599 1008.79 li
632.599 943.331 li
630.263 943.331 li
630.263 1008.79 li
641.943 1020.47 li
641.943 1074.22 li
cp
f
620.914 1061.37 mo
621.558 1061.37 622.083 1061.89 622.083 1062.54 cv
622.083 1063.18 621.558 1063.7 620.914 1063.7 cv
620.268 1063.7 619.747 1063.18 619.747 1062.54 cv
619.747 1061.89 620.268 1061.37 620.914 1061.37 cv
cp
619.879 1057.98 mo
617.796 1058.45 616.244 1060.31 616.244 1062.54 cv
616.244 1065.12 618.332 1067.21 620.914 1067.21 cv
623.495 1067.21 625.587 1065.12 625.587 1062.54 cv
625.587 1060.41 624.163 1058.61 622.212 1058.04 cv
622.212 1036.83 li
615.203 1027.49 li
615.203 943.331 li
612.865 943.331 li
612.865 1027.49 li
619.879 1036.83 li
619.879 1057.98 li
cp
f
620.914 1112.78 mo
620.268 1112.78 619.747 1112.26 619.747 1111.61 cv
619.747 1110.97 620.268 1110.44 620.914 1110.44 cv
621.558 1110.44 622.083 1110.97 622.083 1111.61 cv
622.083 1112.26 621.558 1112.78 620.914 1112.78 cv
cp
653.629 1078.9 mo
624.216 1108.31 li
623.375 1107.46 622.203 1106.94 620.914 1106.94 cv
618.332 1106.94 616.244 1109.03 616.244 1111.61 cv
616.244 1114.19 618.332 1116.29 620.914 1116.29 cv
623.495 1116.29 625.587 1114.19 625.587 1111.61 cv
625.587 1110.92 625.438 1110.27 625.174 1109.69 cv
655.971 1078.9 li
655.971 1020.47 li
639.61 1004.12 li
639.61 943.331 li
637.276 943.331 li
637.276 1004.12 li
653.629 1020.47 li
653.629 1078.9 li
cp
f
620.914 1129.13 mo
620.268 1129.13 619.747 1128.62 619.747 1127.97 cv
619.747 1127.32 620.268 1126.8 620.914 1126.8 cv
621.558 1126.8 622.083 1127.32 622.083 1127.97 cv
622.083 1128.62 621.558 1129.13 620.914 1129.13 cv
cp
662.976 1085.91 mo
624.216 1124.67 li
623.375 1123.82 622.203 1123.3 620.914 1123.3 cv
618.332 1123.3 616.244 1125.39 616.244 1127.97 cv
616.244 1130.55 618.332 1132.64 620.914 1132.64 cv
623.495 1132.64 625.587 1130.55 625.587 1127.97 cv
625.587 1127.29 625.438 1126.63 625.174 1126.05 cv
665.313 1085.91 li
665.313 1015.8 li
646.621 997.102 li
646.621 943.331 li
644.283 943.331 li
644.283 997.102 li
662.976 1015.8 li
662.976 1085.91 li
cp
f
967.651 962.039 mo
967.651 961.393 968.174 960.87 968.82 960.87 cv
969.466 960.87 969.993 961.393 969.993 962.039 cv
969.993 962.685 969.466 963.203 968.82 963.203 cv
968.174 963.203 967.651 962.685 967.651 962.039 cv
cp
982.845 976.057 mo
972.125 965.341 li
972.975 964.495 973.5 963.331 973.5 962.039 cv
973.5 959.455 971.404 957.365 968.82 957.365 cv
966.24 957.365 964.148 959.455 964.148 962.039 cv
964.148 964.623 966.24 966.71 968.82 966.71 cv
969.51 966.71 970.16 966.563 970.749 966.299 cv
982.845 978.393 li
1017.9 978.393 li
1029.58 966.71 li
1104.39 966.71 li
1104.39 964.377 li
1029.58 964.377 li
1017.9 976.057 li
982.845 976.057 li
cp
f
951.295 962.039 mo
951.295 961.393 951.817 960.87 952.464 960.87 cv
953.109 960.87 953.633 961.393 953.633 962.039 cv
953.633 962.685 953.109 963.203 952.464 963.203 cv
951.817 963.203 951.295 962.685 951.295 962.039 cv
cp
973.496 983.07 mo
955.77 965.341 li
956.612 964.495 957.135 963.331 957.135 962.039 cv
957.135 959.455 955.048 957.365 952.464 957.365 cv
949.884 957.365 947.79 959.455 947.79 962.039 cv
947.79 964.623 949.884 966.71 952.464 966.71 cv
953.149 966.71 953.804 966.563 954.389 966.299 cv
973.496 985.408 li
1027.25 985.408 li
1038.93 973.724 li
1104.39 973.724 li
1104.39 971.386 li
1038.93 971.386 li
1027.25 983.07 li
973.496 983.07 li
cp
f
771.355 990.078 mo
771.355 990.724 770.83 991.251 770.184 991.251 cv
769.542 991.251 769.015 990.724 769.015 990.078 cv
769.015 989.437 769.542 988.911 770.184 988.911 cv
770.83 988.911 771.355 989.437 771.355 990.078 cv
cp
774.743 989.047 mo
774.271 986.96 772.407 985.408 770.184 985.408 cv
767.604 985.408 765.513 987.5 765.513 990.078 cv
765.513 992.662 767.604 994.756 770.184 994.756 cv
772.315 994.756 774.112 993.33 774.678 991.376 cv
814.586 991.376 li
856.65 949.313 li
1104.39 949.313 li
1104.39 946.975 li
856.65 946.975 li
814.586 989.047 li
774.743 989.047 li
cp
f
934.934 962.039 mo
934.934 961.393 935.461 960.87 936.107 960.87 cv
936.749 960.87 937.274 961.393 937.274 962.039 cv
937.274 962.685 936.749 963.203 936.107 963.203 cv
935.461 963.203 934.934 962.685 934.934 962.039 cv
cp
968.82 994.756 mo
939.407 965.341 li
940.258 964.495 940.783 963.331 940.783 962.039 cv
940.783 959.455 938.685 957.365 936.107 957.365 cv
933.523 957.365 931.432 959.455 931.432 962.039 cv
931.432 964.623 933.523 966.71 936.107 966.71 cv
936.793 966.71 937.443 966.563 938.032 966.299 cv
968.82 997.094 li
1027.25 997.094 li
1043.6 980.731 li
1104.39 980.731 li
1104.39 978.393 li
1043.6 978.393 li
1027.25 994.756 li
968.82 994.756 li
cp
f
1058.79 1004.1 mo
1058.79 1004.75 1058.27 1005.27 1057.62 1005.27 cv
1056.98 1005.27 1056.46 1004.75 1056.46 1004.1 cv
1056.46 1003.46 1056.98 1002.93 1057.62 1002.93 cv
1058.27 1002.93 1058.79 1003.46 1058.79 1004.1 cv
cp
1057.62 999.425 mo
1055.04 999.425 1052.95 1001.52 1052.95 1004.1 cv
1052.95 1006.68 1055.04 1008.78 1057.62 1008.78 cv
1059.75 1008.78 1061.55 1007.35 1062.12 1005.4 cv
1100.84 1005.4 li
1101.32 1007.05 1102.68 1008.33 1104.39 1008.68 cv
1104.39 1004.79 li
1104.24 1004.59 1104.16 1004.36 1104.16 1004.1 cv
1104.16 1003.85 1104.24 1003.61 1104.39 1003.41 cv
1104.39 999.523 li
1102.59 999.893 1101.18 1001.28 1100.77 1003.06 cv
1062.18 1003.06 li
1061.71 1000.98 1059.85 999.425 1057.62 999.425 cv
cp
f
1028.41 1015.79 mo
1028.41 1016.43 1027.89 1016.96 1027.25 1016.96 cv
1026.6 1016.96 1026.08 1016.43 1026.08 1015.79 cv
1026.08 1015.14 1026.6 1014.61 1027.25 1014.61 cv
1027.89 1014.61 1028.41 1015.14 1028.41 1015.79 cv
cp
1022.57 1015.79 mo
1022.57 1018.37 1024.67 1020.46 1027.25 1020.46 cv
1029.38 1020.46 1031.17 1019.04 1031.74 1017.08 cv
1104.39 1017.08 li
1104.39 1014.75 li
1031.81 1014.75 li
1031.33 1012.67 1029.47 1011.11 1027.25 1011.11 cv
1024.67 1011.11 1022.57 1013.2 1022.57 1015.79 cv
cp
f
918.582 962.039 mo
918.582 961.393 919.101 960.87 919.746 960.87 cv
920.393 960.87 920.915 961.393 920.915 962.039 cv
920.915 962.685 920.393 963.203 919.746 963.203 cv
919.101 963.203 918.582 962.685 918.582 962.039 cv
cp
961.81 1004.1 mo
923.054 965.341 li
923.894 964.495 924.418 963.331 924.418 962.039 cv
924.418 959.455 922.33 957.365 919.746 957.365 cv
917.162 957.365 915.073 959.455 915.073 962.039 cv
915.073 964.623 917.162 966.71 919.746 966.71 cv
920.432 966.71 921.087 966.563 921.671 966.299 cv
961.81 1006.44 li
1031.92 1006.44 li
1050.62 987.742 li
1104.39 987.742 li
1104.39 985.408 li
1050.62 985.408 li
1031.92 1004.1 li
961.81 1004.1 li
cp
f
771.355 971.386 mo
771.355 972.032 770.83 972.555 770.184 972.555 cv
769.542 972.555 769.015 972.032 769.015 971.386 cv
769.015 970.74 769.542 970.217 770.184 970.217 cv
770.83 970.217 771.355 970.74 771.355 971.386 cv
cp
774.743 970.345 mo
774.271 968.266 772.407 966.71 770.184 966.71 cv
767.604 966.71 765.513 968.802 765.513 971.386 cv
765.513 973.968 767.604 976.057 770.184 976.057 cv
772.315 976.057 774.112 974.638 774.678 972.685 cv
823.934 972.685 li
856.65 939.967 li
1104.39 939.967 li
1104.39 937.627 li
856.65 937.627 li
823.934 970.345 li
774.743 970.345 li
cp
f
855.481 1029.81 mo
855.481 1030.45 854.958 1030.98 854.313 1030.98 cv
853.666 1030.98 853.147 1030.45 853.147 1029.81 cv
853.147 1029.16 853.666 1028.64 854.313 1028.64 cv
854.958 1028.64 855.481 1029.16 855.481 1029.81 cv
cp
896.377 985.408 mo
856.239 1025.55 li
855.652 1025.28 854.998 1025.13 854.313 1025.13 cv
851.737 1025.13 849.639 1027.23 849.639 1029.81 cv
849.639 1032.39 851.737 1034.48 854.313 1034.48 cv
856.896 1034.48 858.986 1032.39 858.986 1029.81 cv
858.986 1028.52 858.465 1027.35 857.621 1026.5 cv
896.377 987.742 li
985.181 1076.54 li
985.181 1104.59 li
1104.39 1104.59 li
1104.39 1102.25 li
987.519 1102.25 li
987.519 1076.54 li
896.377 985.408 li
cp
f
881.186 1053.17 mo
881.186 1053.82 880.666 1054.35 880.021 1054.35 cv
879.372 1054.35 878.852 1053.82 878.852 1053.17 cv
878.852 1052.53 879.372 1052.01 880.021 1052.01 cv
880.666 1052.01 881.186 1052.53 881.186 1053.17 cv
cp
910.399 1020.46 mo
881.945 1048.91 li
881.356 1048.65 880.708 1048.5 880.021 1048.5 cv
877.436 1048.5 875.349 1050.6 875.349 1053.17 cv
875.349 1055.76 877.436 1057.85 880.021 1057.85 cv
882.6 1057.85 884.696 1055.76 884.696 1053.17 cv
884.696 1051.88 884.171 1050.71 883.325 1049.87 cv
910.399 1022.79 li
973.496 1085.89 li
973.496 1113.94 li
1104.39 1113.94 li
1104.39 1111.6 li
975.834 1111.6 li
975.834 1085.89 li
910.399 1020.46 li
cp
f
1028.41 1032.14 mo
1028.41 1032.79 1027.89 1033.31 1027.25 1033.31 cv
1026.6 1033.31 1026.08 1032.79 1026.08 1032.14 cv
1026.08 1031.5 1026.6 1030.98 1027.25 1030.98 cv
1027.89 1030.98 1028.41 1031.5 1028.41 1032.14 cv
cp
1022.57 1032.14 mo
1022.57 1034.72 1024.67 1036.82 1027.25 1036.82 cv
1029.38 1036.82 1031.17 1035.39 1031.74 1033.45 cv
1104.39 1033.45 li
1104.39 1031.11 li
1031.81 1031.11 li
1031.33 1029.02 1029.47 1027.47 1027.25 1027.47 cv
1024.67 1027.47 1022.57 1029.56 1022.57 1032.14 cv
cp
f
867.166 1041.49 mo
867.166 1042.13 866.644 1042.66 865.997 1042.66 cv
865.352 1042.66 864.833 1042.13 864.833 1041.49 cv
864.833 1040.84 865.352 1040.32 865.997 1040.32 cv
866.644 1040.32 867.166 1040.84 867.166 1041.49 cv
cp
903.388 1001.76 mo
867.925 1037.23 li
867.338 1036.97 866.688 1036.82 865.997 1036.82 cv
863.418 1036.82 861.324 1038.91 861.324 1041.49 cv
861.324 1044.07 863.418 1046.17 865.997 1046.17 cv
868.577 1046.17 870.673 1044.07 870.673 1041.49 cv
870.673 1040.2 870.147 1039.03 869.302 1038.19 cv
903.388 1004.1 li
980.507 1081.22 li
980.507 1109.26 li
1104.39 1109.26 li
1104.39 1106.92 li
982.845 1106.92 li
982.845 1081.22 li
903.388 1001.76 li
cp
f
771.355 1008.78 mo
771.355 1009.42 770.83 1009.94 770.184 1009.94 cv
769.542 1009.94 769.015 1009.42 769.015 1008.78 cv
769.015 1008.13 769.542 1007.61 770.184 1007.61 cv
770.83 1007.61 771.355 1008.13 771.355 1008.78 cv
cp
851.978 963.337 mo
807.577 1007.73 li
774.743 1007.73 li
774.271 1005.66 772.407 1004.1 770.184 1004.1 cv
767.604 1004.1 765.513 1006.19 765.513 1008.78 cv
765.513 1011.36 767.604 1013.45 770.184 1013.45 cv
772.315 1013.45 774.112 1012.02 774.678 1010.08 cv
807.577 1010.08 li
851.978 965.673 li
903.388 965.673 li
1013.22 1075.5 li
1013.22 1091.87 li
1104.39 1091.87 li
1104.39 1089.53 li
1015.56 1089.53 li
1015.56 1075.5 li
903.388 963.337 li
851.978 963.337 li
cp
f
1028.41 1048.5 mo
1028.41 1049.15 1027.89 1049.67 1027.25 1049.67 cv
1026.6 1049.67 1026.08 1049.15 1026.08 1048.5 cv
1026.08 1047.86 1026.6 1047.34 1027.25 1047.34 cv
1027.89 1047.34 1028.41 1047.86 1028.41 1048.5 cv
cp
1022.57 1048.5 mo
1022.57 1051.08 1024.67 1053.17 1027.25 1053.17 cv
1029.38 1053.17 1031.17 1051.75 1031.74 1049.8 cv
1104.39 1049.8 li
1104.39 1047.46 li
1031.81 1047.46 li
1031.33 1045.38 1029.47 1043.83 1027.25 1043.83 cv
1024.67 1043.83 1022.57 1045.92 1022.57 1048.5 cv
cp
f
1028.41 1064.86 mo
1028.41 1065.5 1027.89 1066.03 1027.25 1066.03 cv
1026.6 1066.03 1026.08 1065.5 1026.08 1064.86 cv
1026.08 1064.21 1026.6 1063.69 1027.25 1063.69 cv
1027.89 1063.69 1028.41 1064.21 1028.41 1064.86 cv
cp
1022.57 1064.86 mo
1022.57 1067.44 1024.67 1069.54 1027.25 1069.54 cv
1029.38 1069.54 1031.17 1068.11 1031.74 1066.16 cv
1104.39 1066.16 li
1104.39 1063.82 li
1031.81 1063.82 li
1031.33 1061.74 1029.47 1060.19 1027.25 1060.19 cv
1024.67 1060.19 1022.57 1062.28 1022.57 1064.86 cv
cp
f
771.355 1041.49 mo
771.355 1042.13 770.83 1042.66 770.184 1042.66 cv
769.542 1042.66 769.015 1042.13 769.015 1041.49 cv
769.015 1040.84 769.542 1040.32 770.184 1040.32 cv
770.83 1040.32 771.355 1040.84 771.355 1041.49 cv
cp
905.726 976.057 mo
854.313 976.057 li
812.248 1018.12 li
791.216 1018.12 li
772.108 1037.23 li
771.522 1036.97 770.869 1036.82 770.184 1036.82 cv
767.604 1036.82 765.513 1038.91 765.513 1041.49 cv
765.513 1044.07 767.604 1046.17 770.184 1046.17 cv
772.766 1046.17 774.859 1044.07 774.859 1041.49 cv
774.859 1040.2 774.337 1039.03 773.488 1038.19 cv
791.216 1020.46 li
812.248 1020.46 li
854.313 978.393 li
905.726 978.393 li
1003.88 1076.54 li
1003.88 1099.91 li
1104.39 1099.91 li
1104.39 1097.58 li
1006.21 1097.58 li
1006.21 1076.54 li
905.726 976.057 li
cp
f
1028.41 1081.22 mo
1028.41 1081.86 1027.89 1082.39 1027.25 1082.39 cv
1026.6 1082.39 1026.08 1081.86 1026.08 1081.22 cv
1026.08 1080.57 1026.6 1080.05 1027.25 1080.05 cv
1027.89 1080.05 1028.41 1080.57 1028.41 1081.22 cv
cp
1022.57 1081.22 mo
1022.57 1083.8 1024.67 1085.89 1027.25 1085.89 cv
1029.38 1085.89 1031.17 1084.47 1031.74 1082.52 cv
1104.39 1082.52 li
1104.39 1080.18 li
1031.81 1080.18 li
1031.33 1078.1 1029.47 1076.54 1027.25 1076.54 cv
1024.67 1076.54 1022.57 1078.64 1022.57 1081.22 cv
cp
f
358.687 1034.68 mo
358.041 1034.68 357.514 1034.16 357.514 1033.52 cv
357.514 1032.87 358.041 1032.34 358.687 1032.34 cv
359.329 1032.34 359.852 1032.87 359.852 1033.52 cv
359.852 1034.16 359.329 1034.68 358.687 1034.68 cv
cp
358.687 1028.84 mo
356.103 1028.84 354.009 1030.93 354.009 1033.52 cv
354.009 1034.2 354.159 1034.85 354.424 1035.44 cv
267.547 1122.32 li
267.547 1135.2 li
269.883 1135.2 li
269.883 1122.32 li
355.378 1036.82 li
356.226 1037.66 357.395 1038.19 358.687 1038.19 cv
361.267 1038.19 363.358 1036.09 363.358 1033.52 cv
363.358 1030.93 361.267 1028.84 358.687 1028.84 cv
cp
f
378.098 1051.04 mo
377.452 1051.04 376.926 1050.52 376.926 1049.87 cv
376.926 1049.23 377.452 1048.7 378.098 1048.7 cv
378.739 1048.7 379.262 1049.23 379.262 1049.87 cv
379.262 1050.52 378.739 1051.04 378.098 1051.04 cv
cp
382.769 1049.87 mo
382.769 1047.29 380.677 1045.2 378.098 1045.2 cv
375.514 1045.2 373.419 1047.29 373.419 1049.87 cv
373.419 1052.45 375.514 1054.54 378.098 1054.54 cv
379.385 1054.54 380.554 1054.02 381.402 1053.18 cv
457.55 1129.33 li
457.55 1135.2 li
459.888 1135.2 li
459.888 1129.33 li
382.353 1051.8 li
382.62 1051.21 382.769 1050.56 382.769 1049.87 cv
cp
f
378.098 1018.32 mo
377.452 1018.32 376.926 1017.8 376.926 1017.15 cv
376.926 1016.51 377.452 1015.99 378.098 1015.99 cv
378.739 1015.99 379.262 1016.51 379.262 1017.15 cv
379.262 1017.8 378.739 1018.32 378.098 1018.32 cv
cp
382.769 1017.15 mo
382.769 1014.57 380.677 1012.48 378.098 1012.48 cv
375.514 1012.48 373.419 1014.57 373.419 1017.15 cv
373.419 1019.73 375.514 1021.83 378.098 1021.83 cv
379.385 1021.83 380.554 1021.31 381.402 1020.46 cv
476.247 1115.31 li
476.247 1135.2 li
478.582 1135.2 li
478.582 1115.31 li
382.353 1019.08 li
382.62 1018.49 382.769 1017.84 382.769 1017.15 cv
cp
f
358.687 1018.32 mo
358.041 1018.32 357.514 1017.8 357.514 1017.15 cv
357.514 1016.51 358.041 1015.99 358.687 1015.99 cv
359.329 1015.99 359.852 1016.51 359.852 1017.15 cv
359.852 1017.8 359.329 1018.32 358.687 1018.32 cv
cp
358.687 1012.48 mo
356.103 1012.48 354.009 1014.57 354.009 1017.15 cv
354.009 1017.84 354.159 1018.49 354.424 1019.08 cv
258.198 1115.31 li
258.198 1135.2 li
260.536 1135.2 li
260.536 1115.31 li
355.378 1020.46 li
356.226 1021.31 357.395 1021.83 358.687 1021.83 cv
361.267 1021.83 363.358 1019.73 363.358 1017.15 cv
363.358 1014.57 361.267 1012.48 358.687 1012.48 cv
cp
f
358.687 1001.96 mo
358.041 1001.96 357.514 1001.44 357.514 1000.8 cv
357.514 1000.15 358.041 999.632 358.687 999.632 cv
359.329 999.632 359.852 1000.15 359.852 1000.8 cv
359.852 1001.44 359.329 1001.96 358.687 1001.96 cv
cp
358.687 996.122 mo
356.103 996.122 354.009 998.214 354.009 1000.8 cv
354.009 1001.48 354.159 1002.13 354.424 1002.72 cv
248.851 1108.29 li
248.851 1135.2 li
251.185 1135.2 li
251.185 1108.29 li
355.378 1004.1 li
356.226 1004.95 357.395 1005.47 358.687 1005.47 cv
361.267 1005.47 363.358 1003.38 363.358 1000.8 cv
363.358 998.214 361.267 996.122 358.687 996.122 cv
cp
f
378.098 1001.96 mo
377.452 1001.96 376.926 1001.44 376.926 1000.8 cv
376.926 1000.15 377.452 999.632 378.098 999.632 cv
378.739 999.632 379.262 1000.15 379.262 1000.8 cv
379.262 1001.44 378.739 1001.96 378.098 1001.96 cv
cp
382.769 1000.8 mo
382.769 998.214 380.677 996.122 378.098 996.122 cv
375.514 996.122 373.419 998.214 373.419 1000.8 cv
373.419 1003.38 375.514 1005.47 378.098 1005.47 cv
379.385 1005.47 380.554 1004.95 381.402 1004.1 cv
485.589 1108.29 li
485.589 1135.2 li
487.93 1135.2 li
487.93 1108.29 li
382.353 1002.72 li
382.62 1002.13 382.769 1001.48 382.769 1000.8 cv
cp
f
378.098 1034.68 mo
377.452 1034.68 376.926 1034.16 376.926 1033.52 cv
376.926 1032.87 377.452 1032.34 378.098 1032.34 cv
378.739 1032.34 379.262 1032.87 379.262 1033.52 cv
379.262 1034.16 378.739 1034.68 378.098 1034.68 cv
cp
382.769 1033.52 mo
382.769 1030.93 380.677 1028.84 378.098 1028.84 cv
375.514 1028.84 373.419 1030.93 373.419 1033.52 cv
373.419 1036.09 375.514 1038.19 378.098 1038.19 cv
379.385 1038.19 380.554 1037.66 381.402 1036.82 cv
466.897 1122.32 li
466.897 1135.2 li
469.235 1135.2 li
469.235 1122.32 li
382.353 1035.44 li
382.62 1034.85 382.769 1034.2 382.769 1033.52 cv
cp
f
358.687 1051.04 mo
358.041 1051.04 357.514 1050.52 357.514 1049.87 cv
357.514 1049.23 358.041 1048.7 358.687 1048.7 cv
359.329 1048.7 359.852 1049.23 359.852 1049.87 cv
359.852 1050.52 359.329 1051.04 358.687 1051.04 cv
cp
358.687 1045.2 mo
356.103 1045.2 354.009 1047.29 354.009 1049.87 cv
354.009 1050.56 354.159 1051.21 354.424 1051.8 cv
276.895 1129.33 li
276.895 1135.2 li
279.23 1135.2 li
279.23 1129.33 li
355.378 1053.18 li
356.226 1054.02 357.395 1054.54 358.687 1054.54 cv
361.267 1054.54 363.358 1052.45 363.358 1049.87 cv
363.358 1047.29 361.267 1045.2 358.687 1045.2 cv
cp
f
78.207 963.023 mo
78.853 963.023 79.376 963.551 79.376 964.196 cv
79.376 964.838 78.853 965.363 78.207 965.363 cv
77.561 965.363 77.0366 964.838 77.0366 964.196 cv
77.0366 963.551 77.561 963.023 78.207 963.023 cv
cp
186.673 963.032 mo
187.319 963.032 187.842 963.551 187.842 964.196 cv
187.842 964.838 187.319 965.363 186.673 965.363 cv
186.027 965.363 185.508 964.838 185.508 964.196 cv
185.508 963.551 186.027 963.032 186.673 963.032 cv
cp
78.207 968.868 mo
80.3369 968.868 82.1333 967.441 82.6978 965.497 cv
91.9331 965.497 li
95.3223 965.497 li
182.182 965.497 li
182.744 967.441 184.541 968.874 186.673 968.874 cv
189.257 968.874 191.344 966.776 191.344 964.196 cv
191.344 961.612 189.257 959.521 186.673 959.521 cv
184.449 959.521 182.586 961.076 182.118 963.159 cv
95.3223 963.159 li
91.9331 963.159 li
82.7651 963.159 li
82.2891 961.076 80.4307 959.521 78.207 959.521 cv
75.623 959.521 73.5332 961.612 73.5332 964.196 cv
73.5332 966.776 75.623 968.868 78.207 968.868 cv
cp
f
186.673 998.08 mo
186.027 998.08 185.508 997.56 185.508 996.913 cv
185.508 996.268 186.027 995.744 186.673 995.744 cv
187.319 995.744 187.842 996.268 187.842 996.913 cv
187.842 997.56 187.319 998.08 186.673 998.08 cv
cp
78.207 998.08 mo
77.561 998.08 77.041 997.56 77.041 996.909 cv
77.041 996.268 77.561 995.74 78.207 995.74 cv
78.853 995.74 79.376 996.268 79.376 996.909 cv
79.376 997.56 78.853 998.08 78.207 998.08 cv
cp
186.673 992.242 mo
184.449 992.242 182.586 993.798 182.118 995.876 cv
95.3223 995.876 li
91.9331 995.876 li
82.7681 995.876 li
82.2891 993.789 80.4307 992.237 78.207 992.237 cv
75.623 992.237 73.5332 994.329 73.5332 996.909 cv
73.5332 999.491 75.623 1001.59 78.207 1001.59 cv
80.3369 1001.59 82.1333 1000.16 82.6978 998.214 cv
91.9331 998.214 li
95.3223 998.214 li
182.182 998.214 li
182.744 1000.16 184.541 1001.59 186.673 1001.59 cv
189.257 1001.59 191.344 999.493 191.344 996.913 cv
191.344 994.329 189.257 992.242 186.673 992.242 cv
cp
f
78.207 979.389 mo
78.853 979.389 79.376 979.906 79.376 980.553 cv
79.376 981.199 78.853 981.717 78.207 981.717 cv
77.561 981.717 77.041 981.199 77.041 980.553 cv
77.041 979.906 77.561 979.389 78.207 979.389 cv
cp
186.673 979.389 mo
187.319 979.389 187.842 979.906 187.842 980.553 cv
187.842 981.199 187.319 981.727 186.673 981.727 cv
186.027 981.727 185.508 981.199 185.508 980.553 cv
185.508 979.906 186.027 979.389 186.673 979.389 cv
cp
78.207 985.224 mo
80.3369 985.224 82.1333 983.805 82.6978 981.852 cv
91.9331 981.852 li
95.3223 981.852 li
182.182 981.852 li
182.744 983.805 184.541 985.229 186.673 985.229 cv
189.257 985.229 191.344 983.137 191.344 980.553 cv
191.344 977.973 189.257 975.881 186.673 975.881 cv
184.449 975.881 182.586 977.433 182.118 979.516 cv
95.3223 979.512 li
91.9331 979.512 li
82.7681 979.512 li
82.2891 977.433 80.4307 975.879 78.207 975.879 cv
75.623 975.879 73.5332 977.973 73.5332 980.553 cv
73.5332 983.137 75.623 985.224 78.207 985.224 cv
cp
f
78.207 946.671 mo
78.853 946.671 79.376 947.19 79.376 947.836 cv
79.376 948.481 78.853 949.005 78.207 949.005 cv
77.561 949.005 77.0366 948.481 77.0366 947.836 cv
77.0366 947.19 77.561 946.671 78.207 946.671 cv
cp
186.673 946.671 mo
187.319 946.671 187.842 947.19 187.842 947.84 cv
187.842 948.481 187.319 949.005 186.673 949.005 cv
186.027 949.005 185.508 948.481 185.508 947.84 cv
185.508 947.19 186.027 946.671 186.673 946.671 cv
cp
78.207 952.507 mo
80.3369 952.507 82.1333 951.088 82.6978 949.134 cv
91.9331 949.134 li
95.3223 949.134 li
182.182 949.134 li
182.744 951.088 184.541 952.507 186.673 952.507 cv
189.257 952.507 191.344 950.42 191.344 947.836 cv
191.344 945.261 189.257 943.162 186.673 943.162 cv
184.449 943.162 182.586 944.718 182.118 946.796 cv
95.3223 946.796 li
91.9331 946.796 li
82.7651 946.796 li
82.2891 944.718 80.4307 943.162 78.207 943.162 cv
75.623 943.162 73.5332 945.252 73.5332 947.836 cv
73.5332 950.42 75.623 952.507 78.207 952.507 cv
cp
f
339.632 935.133 mo
340.283 935.133 340.801 935.66 340.801 936.305 cv
340.801 936.95 340.283 937.476 339.632 937.476 cv
338.986 937.476 338.468 936.95 338.468 936.305 cv
338.468 935.66 338.986 935.133 339.632 935.133 cv
cp
208.769 983.04 mo
297.568 894.24 li
336.33 932.995 li
335.479 933.844 334.961 935.015 334.961 936.305 cv
334.961 938.882 337.048 940.981 339.632 940.981 cv
342.212 940.981 344.306 938.882 344.306 936.305 cv
344.306 933.723 342.212 931.629 339.632 931.629 cv
338.947 931.629 338.296 931.778 337.712 932.046 cv
297.568 891.9 li
206.431 983.04 li
206.431 1008.74 li
94.1006 1008.74 li
94.1006 1011.08 li
208.769 1011.09 li
208.769 983.04 li
cp
f
455.753 965.687 mo
456.395 965.687 456.917 966.209 456.917 966.856 cv
456.917 967.501 456.395 968.019 455.753 968.019 cv
455.107 968.019 454.58 967.501 454.58 966.856 cv
454.58 966.209 455.107 965.687 455.753 965.687 cv
cp
141.344 1059.29 mo
144.732 1059.29 li
264.126 1059.29 li
355.264 968.156 li
451.257 968.156 li
451.822 970.099 453.619 971.526 455.753 971.526 cv
458.328 971.526 460.424 969.435 460.424 966.856 cv
460.424 964.271 458.328 962.18 455.753 962.18 cv
453.525 962.18 451.666 963.735 451.191 965.815 cv
355.264 965.815 li
264.126 1056.95 li
144.732 1056.95 li
141.344 1056.95 li
99.5718 1056.95 li
94.1006 1051.48 li
94.1006 1053.81 li
99.5718 1059.29 li
141.344 1059.29 li
cp
f
327.948 946.82 mo
328.594 946.82 329.116 947.346 329.116 947.987 cv
329.116 948.636 328.594 949.158 327.948 949.158 cv
327.302 949.158 326.779 948.636 326.779 947.987 cv
326.779 947.346 327.302 946.82 327.948 946.82 cv
cp
213.444 987.711 mo
290.559 910.597 li
324.645 944.685 li
323.799 945.526 323.276 946.699 323.276 947.987 cv
323.276 950.571 325.368 952.661 327.948 952.661 cv
330.531 952.661 332.621 950.571 332.621 947.987 cv
332.621 945.407 330.531 943.313 327.948 943.313 cv
327.262 943.313 326.612 943.463 326.023 943.731 cv
290.559 908.259 li
211.104 987.711 li
211.104 1013.42 li
94.1006 1013.42 li
94.1006 1015.76 li
213.444 1015.76 li
213.444 987.711 li
cp
f
455.753 982.045 mo
456.395 982.045 456.917 982.567 456.917 983.211 cv
456.917 983.859 456.395 984.383 455.753 984.383 cv
455.107 984.383 454.58 983.859 454.58 983.211 cv
454.58 982.567 455.107 982.045 455.753 982.045 cv
cp
144.732 1066.3 mo
268.797 1066.3 li
350.588 984.508 li
451.257 984.512 li
451.822 986.461 453.619 987.887 455.753 987.887 cv
458.332 987.887 460.424 985.793 460.424 983.211 cv
460.424 980.634 458.328 978.54 455.753 978.54 cv
453.525 978.54 451.666 980.092 451.191 982.179 cv
350.588 982.179 li
268.797 1063.96 li
144.732 1063.96 li
141.344 1063.96 li
94.8994 1063.96 li
94.1006 1063.16 li
94.1006 1065.5 li
94.8994 1066.3 li
141.344 1066.3 li
144.732 1066.3 li
cp
f
313.929 958.503 mo
314.575 958.503 315.098 959.03 315.098 959.672 cv
315.098 960.316 314.575 960.844 313.929 960.844 cv
313.283 960.844 312.76 960.316 312.76 959.672 cv
312.76 959.03 313.283 958.503 313.929 958.503 cv
cp
220.451 992.387 mo
283.545 929.291 li
310.62 956.37 li
309.778 957.211 309.255 958.385 309.255 959.672 cv
309.255 962.256 311.345 964.346 313.929 964.346 cv
316.513 964.346 318.601 962.256 318.601 959.672 cv
318.601 957.093 316.513 954.999 313.929 954.999 cv
313.241 954.999 312.589 955.148 312.004 955.412 cv
283.545 926.953 li
218.116 992.387 li
218.116 1018.09 li
94.1006 1018.09 li
94.1006 1020.42 li
220.451 1020.43 li
220.451 992.387 li
cp
f
423.031 921.288 mo
423.675 921.288 424.2 921.807 424.2 922.453 cv
424.2 923.099 423.675 923.617 423.031 923.617 cv
422.39 923.617 421.862 923.099 421.862 922.453 cv
421.862 921.807 422.39 921.288 423.031 921.288 cv
cp
144.732 1036.96 mo
271.133 1036.96 li
355.264 952.832 li
394.99 952.832 li
421.111 926.716 li
421.695 926.981 422.346 927.124 423.031 927.124 cv
425.611 927.124 427.707 925.037 427.707 922.453 cv
427.707 919.869 425.611 917.781 423.031 917.781 cv
420.452 917.781 418.36 919.869 418.36 922.453 cv
418.36 923.745 418.883 924.918 419.729 925.758 cv
394.99 950.496 li
355.264 950.496 li
271.133 1034.62 li
144.732 1034.62 li
141.344 1034.62 li
94.1006 1034.62 li
94.1006 1036.96 li
141.344 1036.96 li
144.732 1036.96 li
cp
f
437.057 932.965 mo
437.703 932.965 438.223 933.492 438.223 934.138 cv
438.223 934.784 437.703 935.303 437.057 935.303 cv
436.408 935.303 435.888 934.784 435.888 934.138 cv
435.888 933.492 436.408 932.965 437.057 932.965 cv
cp
141.344 1053.31 mo
144.732 1053.32 li
264.126 1053.32 li
355.264 962.18 li
411.346 962.18 li
435.129 938.4 li
435.716 938.664 436.369 938.813 437.057 938.813 cv
439.636 938.813 441.726 936.722 441.726 934.138 cv
441.726 931.559 439.636 929.462 437.057 929.462 cv
434.473 929.462 432.378 931.559 432.378 934.138 cv
432.378 935.43 432.901 936.595 433.749 937.447 cv
411.346 959.844 li
355.264 959.844 li
264.126 1050.98 li
144.732 1050.98 li
141.344 1050.98 li
99.5718 1050.98 li
94.1006 1045.5 li
94.1006 1047.84 li
99.5718 1053.31 li
141.344 1053.31 li
cp
f
818.256 518.027 mo
817.609 518.027 817.091 517.504 817.091 516.862 cv
817.091 516.216 817.609 515.693 818.256 515.693 cv
818.901 515.693 819.425 516.216 819.425 516.862 cv
819.425 517.504 818.901 518.027 818.256 518.027 cv
cp
1133.79 438.707 mo
1099.44 438.707 li
1091.38 438.707 li
974.827 438.707 li
897.71 515.819 li
822.814 515.819 li
822.343 513.74 820.479 512.188 818.256 512.188 cv
815.676 512.188 813.584 514.278 813.584 516.862 cv
813.584 519.441 815.676 521.535 818.256 521.535 cv
820.387 521.535 822.185 520.106 822.747 518.157 cv
897.71 518.157 li
974.827 441.045 li
1091.38 441.045 li
1099.44 441.045 li
1133.79 441.045 li
1133.79 438.707 li
cp
f
1020.5 557.757 mo
1019.85 557.757 1019.33 557.236 1019.33 556.59 cv
1019.33 555.944 1019.85 555.423 1020.5 555.423 cv
1021.15 555.423 1021.67 555.944 1021.67 556.59 cv
1021.67 557.236 1021.15 557.757 1020.5 557.757 cv
cp
1133.79 536.858 mo
1105.38 536.858 li
1102 536.858 li
1088.27 536.858 li
1069.57 555.551 li
1025.06 555.551 li
1024.58 553.468 1022.72 551.921 1020.5 551.921 cv
1017.91 551.912 1015.83 554.008 1015.83 556.59 cv
1015.83 559.17 1017.91 561.264 1020.5 561.264 cv
1022.63 561.264 1024.43 559.835 1024.99 557.889 cv
1069.57 557.889 li
1088.27 539.192 li
1102 539.192 li
1105.38 539.192 li
1133.79 539.192 li
1133.79 536.858 li
cp
f
1006.48 572.819 mo
1005.83 572.819 1005.31 572.292 1005.31 571.646 cv
1005.31 571.004 1005.83 570.479 1006.48 570.479 cv
1007.12 570.479 1007.65 571.004 1007.65 571.646 cv
1007.65 572.292 1007.12 572.819 1006.48 572.819 cv
cp
1133.79 551.921 mo
1105.38 551.921 li
1102 551.921 li
1084.63 551.921 li
1065.94 570.615 li
1011.04 570.615 li
1010.56 568.528 1008.7 566.977 1006.48 566.977 cv
1003.9 566.977 1001.8 569.068 1001.8 571.646 cv
1001.8 574.229 1003.9 576.328 1006.48 576.328 cv
1008.61 576.328 1010.41 574.898 1010.97 572.944 cv
1065.94 572.944 li
1084.63 554.252 li
1102 554.252 li
1105.38 554.252 li
1133.79 554.252 li
1133.79 551.921 li
cp
f
818.256 555.419 mo
817.609 555.419 817.091 554.896 817.091 554.252 cv
817.091 553.606 817.609 553.079 818.256 553.079 cv
818.901 553.079 819.425 553.606 819.425 554.252 cv
819.425 554.896 818.901 555.419 818.256 555.419 cv
cp
1133.79 557.889 mo
1097.11 557.889 li
1093.71 557.889 li
1084.66 557.889 li
1056.62 585.93 li
930.43 585.93 li
897.713 553.213 li
822.814 553.213 li
822.343 551.13 820.479 549.574 818.256 549.574 cv
815.676 549.574 813.586 551.669 813.586 554.252 cv
813.586 556.832 815.676 558.921 818.256 558.921 cv
820.392 558.921 822.185 557.498 822.747 555.551 cv
897.713 555.551 li
930.43 588.268 li
1056.62 588.268 li
1084.66 560.227 li
1093.71 560.227 li
1097.11 560.227 li
1133.79 560.227 li
1133.79 557.889 li
cp
f
1095.6 591.437 mo
1095.6 590.795 1096.13 590.272 1096.77 590.272 cv
1097.42 590.272 1097.94 590.795 1097.94 591.437 cv
1097.94 592.083 1097.42 592.61 1096.77 592.61 cv
1096.13 592.61 1095.6 592.083 1095.6 591.437 cv
cp
1101.33 592.478 mo
1123.59 592.478 li
1123.59 590.142 li
1101.27 590.142 li
1100.7 588.193 1098.9 586.769 1096.77 586.769 cv
1094.19 586.769 1092.1 588.861 1092.1 591.437 cv
1092.1 594.021 1094.19 596.117 1096.77 596.117 cv
1099 596.117 1100.86 594.563 1101.33 592.478 cv
cp
f
850.603 574.111 mo
849.957 574.111 849.435 573.59 849.435 572.944 cv
849.435 572.303 849.957 571.775 850.603 571.775 cv
851.245 571.775 851.768 572.303 851.768 572.944 cv
851.768 573.59 851.245 574.111 850.603 574.111 cv
cp
1133.79 576.328 mo
1096.73 576.328 li
1093.34 576.328 li
1084.29 576.328 li
1063.26 597.356 li
920.709 597.356 li
895.001 571.646 li
855.095 571.646 li
854.527 569.697 852.732 568.273 850.603 568.273 cv
848.023 568.273 845.926 570.36 845.926 572.944 cv
845.926 575.528 848.023 577.62 850.603 577.62 cv
852.827 577.62 854.685 576.065 855.16 573.986 cv
895.001 573.986 li
920.709 599.69 li
1063.26 599.693 li
1084.29 578.662 li
1093.34 578.662 li
1096.73 578.662 li
1133.79 578.666 li
1133.79 576.328 li
cp
f
964.412 522.704 mo
963.767 522.704 963.243 522.181 963.243 521.535 cv
963.243 520.889 963.767 520.37 964.412 520.37 cv
965.059 520.37 965.579 520.889 965.579 521.535 cv
965.579 522.181 965.059 522.704 964.412 522.704 cv
cp
1133.79 483.108 mo
1105.38 483.108 li
1102 483.108 li
1025.17 483.108 li
987.782 520.496 li
968.97 520.496 li
968.495 518.417 966.636 516.862 964.412 516.862 cv
961.833 516.862 959.741 518.951 959.741 521.535 cv
959.741 524.118 961.833 526.212 964.412 526.212 cv
966.544 526.212 968.341 524.783 968.903 522.834 cv
987.782 522.834 li
1025.17 485.444 li
1102 485.444 li
1105.38 485.444 li
1133.79 485.444 li
1133.79 483.108 li
cp
f
818.256 536.724 mo
817.609 536.724 817.091 536.201 817.091 535.555 cv
817.091 534.909 817.609 534.386 818.256 534.386 cv
818.901 534.386 819.425 534.909 819.425 535.555 cv
819.425 536.201 818.901 536.724 818.256 536.724 cv
cp
1133.79 462.078 mo
1097.1 462.078 li
1093.71 462.078 li
1002.87 462.078 li
970.156 494.794 li
944.45 494.79 li
904.722 534.519 li
822.814 534.516 li
822.343 532.434 820.479 530.881 818.256 530.881 cv
815.676 530.881 813.584 532.975 813.584 535.555 cv
813.584 538.139 815.676 540.229 818.256 540.229 cv
820.387 540.229 822.185 538.802 822.747 536.854 cv
904.722 536.854 li
944.45 497.125 li
970.156 497.125 li
1002.87 464.412 li
1093.71 464.417 li
1097.1 464.417 li
1133.79 464.417 li
1133.79 462.078 li
cp
f
1034.52 546.071 mo
1033.87 546.071 1033.35 545.551 1033.35 544.905 cv
1033.35 544.259 1033.87 543.739 1034.52 543.739 cv
1035.16 543.739 1035.69 544.259 1035.69 544.905 cv
1035.69 545.551 1035.16 546.071 1034.52 546.071 cv
cp
1133.79 525.173 mo
1105.38 525.173 li
1102 525.173 li
1064.9 525.173 li
1064.9 543.866 li
1039.08 543.866 li
1038.61 541.787 1036.75 540.231 1034.52 540.231 cv
1031.94 540.231 1029.85 542.329 1029.85 544.905 cv
1029.85 547.485 1031.94 549.583 1034.52 549.583 cv
1036.65 549.583 1038.45 548.157 1039.01 546.2 cv
1067.24 546.205 li
1067.24 527.511 li
1102 527.511 li
1105.38 527.511 li
1133.79 527.511 li
1133.79 525.173 li
cp
f
962.074 557.757 mo
961.429 557.757 960.91 557.236 960.91 556.59 cv
960.91 555.944 961.429 555.423 962.074 555.423 cv
962.725 555.423 963.243 555.944 963.243 556.59 cv
963.243 557.236 962.725 557.757 962.074 557.757 cv
cp
1133.79 508.814 mo
1105.38 508.814 li
1102 508.814 li
1039.19 508.811 li
992.458 555.551 li
966.636 555.551 li
966.161 553.468 964.298 551.912 962.074 551.912 cv
959.495 551.912 957.403 554.008 957.403 556.59 cv
957.403 559.167 959.495 561.264 962.079 561.264 cv
964.21 561.264 966.005 559.835 966.565 557.889 cv
992.458 557.889 li
1039.19 511.149 li
1102 511.149 li
1105.38 511.149 li
1133.79 511.149 li
1133.79 508.814 li
cp
f
952.727 534.386 mo
952.081 534.386 951.559 533.866 951.559 533.22 cv
951.559 532.574 952.081 532.051 952.727 532.051 cv
953.373 532.051 953.896 532.574 953.896 533.22 cv
953.896 533.866 953.373 534.386 952.727 534.386 cv
cp
1133.79 494.794 mo
1105.38 494.794 li
1102 494.794 li
1032.18 494.794 li
994.796 532.181 li
957.286 532.181 li
956.814 530.102 954.951 528.546 952.727 528.546 cv
950.147 528.546 948.056 530.636 948.056 533.22 cv
948.056 535.803 950.147 537.894 952.727 537.894 cv
954.858 537.894 956.656 536.472 957.219 534.519 cv
994.796 534.519 li
1032.18 497.129 li
1102 497.129 li
1105.38 497.129 li
1133.79 497.129 li
1133.79 494.794 li
cp
f
565.336 474.054 mo
564.69 474.054 564.163 473.53 564.163 472.885 cv
564.163 472.239 564.69 471.72 565.336 471.72 cv
565.98 471.72 566.501 472.239 566.501 472.885 cv
566.501 473.53 565.98 474.054 565.336 474.054 cv
cp
567.259 468.624 mo
566.672 468.357 566.019 468.215 565.336 468.215 cv
562.752 468.215 560.658 470.309 560.658 472.885 cv
560.658 475.465 562.752 477.562 565.336 477.562 cv
567.916 477.562 570.01 475.465 570.01 472.885 cv
570.01 471.593 569.487 470.428 568.639 469.581 cv
595.714 442.506 li
658.81 505.602 li
658.81 521.846 li
661.147 521.846 li
661.147 505.602 li
595.714 440.168 li
567.259 468.624 li
cp
f
551.311 462.369 mo
550.665 462.369 550.143 461.845 550.143 461.199 cv
550.143 460.554 550.665 460.03 551.311 460.03 cv
551.957 460.03 552.478 460.554 552.478 461.199 cv
552.478 461.845 551.957 462.369 551.311 462.369 cv
cp
553.236 456.939 mo
552.647 456.675 551.999 456.522 551.311 456.522 cv
548.727 456.522 546.64 458.624 546.64 461.199 cv
546.64 463.783 548.727 465.877 551.311 465.877 cv
553.896 465.877 555.985 463.783 555.985 461.199 cv
555.985 459.908 555.462 458.743 554.616 457.896 cv
588.7 423.813 li
665.821 500.932 li
665.821 521.846 li
668.161 521.846 li
668.161 500.932 li
588.7 421.475 li
553.236 456.939 li
cp
f
539.631 450.685 mo
538.98 450.685 538.462 450.16 538.462 449.514 cv
538.462 448.868 538.98 448.349 539.631 448.349 cv
540.272 448.349 540.795 448.868 540.795 449.514 cv
540.795 450.16 540.272 450.685 539.631 450.685 cv
cp
541.551 445.257 mo
540.962 444.99 540.31 444.842 539.631 444.842 cv
537.042 444.842 534.951 446.932 534.951 449.514 cv
534.951 452.098 537.047 454.191 539.631 454.191 cv
542.21 454.191 544.3 452.098 544.3 449.514 cv
544.3 448.224 543.777 447.058 542.931 446.211 cv
581.695 407.451 li
670.495 496.255 li
670.495 521.846 li
672.833 521.846 li
672.833 496.255 li
581.695 405.117 li
541.551 445.257 li
cp
f
511.587 471.715 mo
510.941 471.715 510.418 471.192 510.418 470.546 cv
510.418 469.9 510.941 469.381 511.587 469.381 cv
512.229 469.381 512.754 469.9 512.754 470.546 cv
512.754 471.192 512.229 471.715 511.587 471.715 cv
cp
593.376 496.255 mo
537.293 496.255 li
514.89 473.85 li
515.733 473.011 516.256 471.838 516.256 470.546 cv
516.256 467.967 514.167 465.877 511.587 465.873 cv
509.003 465.873 506.909 467.967 506.909 470.546 cv
506.909 473.13 509.003 475.223 511.587 475.223 cv
512.271 475.223 512.923 475.075 513.51 474.808 cv
537.293 498.593 li
593.376 498.593 li
600.073 505.287 li
602.406 505.287 li
593.376 496.255 li
cp
f
593.376 474.054 mo
592.729 474.054 592.211 473.53 592.211 472.889 cv
592.211 472.243 592.729 471.72 593.376 471.72 cv
594.021 471.72 594.54 472.243 594.54 472.889 cv
594.54 473.53 594.021 474.054 593.376 474.054 cv
cp
596.683 476.189 mo
597.526 475.346 598.052 474.176 598.052 472.889 cv
598.052 470.309 595.955 468.215 593.376 468.215 cv
590.792 468.215 588.702 470.309 588.702 472.889 cv
588.702 475.465 590.792 477.562 593.376 477.562 cv
594.061 477.562 594.716 477.414 595.303 477.15 cv
623.442 505.287 li
625.78 505.287 li
596.683 476.189 li
cp
f
525.608 460.03 mo
524.957 460.03 524.439 459.507 524.439 458.865 cv
524.439 458.215 524.957 457.696 525.608 457.696 cv
526.25 457.696 526.772 458.215 526.772 458.865 cv
526.772 459.507 526.25 460.03 525.608 460.03 cv
cp
593.376 486.908 mo
553.647 486.902 li
528.915 462.168 li
529.752 461.326 530.279 460.153 530.279 458.865 cv
530.279 456.285 528.188 454.191 525.608 454.191 cv
523.024 454.191 520.935 456.285 520.935 458.865 cv
520.935 461.444 523.028 463.538 525.608 463.538 cv
526.293 463.538 526.944 463.39 527.53 463.123 cv
553.647 489.243 li
593.376 489.243 li
609.42 505.287 li
611.758 505.287 li
593.376 486.908 li
cp
f
859.004 791.33 mo
859.004 791.972 858.48 792.495 857.835 792.495 cv
857.188 792.495 856.661 791.972 856.661 791.33 cv
856.661 790.685 857.188 790.159 857.835 790.159 cv
858.48 790.159 859.004 790.685 859.004 791.33 cv
cp
862.394 790.289 mo
861.917 788.21 860.056 786.654 857.835 786.654 cv
855.251 786.654 853.156 788.746 853.156 791.33 cv
853.156 793.912 855.251 796.002 857.835 796.002 cv
859.964 796.002 861.761 794.573 862.326 792.625 cv
902.232 792.625 li
944.299 750.563 li
1099.32 750.563 li
1099.32 748.223 li
944.299 748.223 li
902.232 790.289 li
862.394 790.289 li
cp
f
685.862 723.989 mo
685.862 723.343 686.385 722.817 687.031 722.817 cv
687.677 722.817 688.2 723.343 688.2 723.989 cv
688.2 724.633 687.677 725.153 687.031 725.153 cv
686.385 725.153 685.862 724.633 685.862 723.989 cv
cp
871.855 731.868 mo
862.508 722.517 li
691.588 722.947 li
691.118 720.869 689.255 719.309 687.031 719.309 cv
684.447 719.309 682.355 721.405 682.355 723.989 cv
682.355 726.57 684.447 728.656 687.031 728.656 cv
689.162 728.656 690.958 727.232 691.522 725.285 cv
862.508 724.854 li
871.855 734.202 li
911.581 734.202 li
930.275 715.51 li
1099.32 715.51 li
1099.32 713.17 li
930.275 713.17 li
911.581 731.868 li
871.855 731.868 li
cp
f
688.2 742.681 mo
688.2 743.327 687.677 743.848 687.031 743.848 cv
686.385 743.848 685.862 743.327 685.862 742.681 cv
685.862 742.035 686.385 741.515 687.031 741.515 cv
687.677 741.515 688.2 742.035 688.2 742.681 cv
cp
691.588 741.642 mo
691.118 739.563 689.255 738.012 687.031 738.012 cv
684.447 738.012 682.355 740.1 682.355 742.681 cv
682.355 745.263 684.447 747.359 687.031 747.359 cv
689.162 747.359 690.958 745.931 691.522 743.979 cv
913.917 743.549 li
934.951 722.517 li
1099.32 722.517 li
1099.32 720.179 li
934.951 720.179 li
913.917 741.216 li
691.588 741.642 li
cp
f
688.2 705.295 mo
688.2 705.932 687.677 706.459 687.031 706.459 cv
686.385 706.459 685.862 705.932 685.862 705.295 cv
685.862 704.641 686.385 704.121 687.031 704.121 cv
687.677 704.121 688.2 704.641 688.2 705.295 cv
cp
682.355 705.295 mo
682.355 707.875 684.447 709.964 687.031 709.964 cv
689.162 709.964 690.958 708.538 691.522 706.592 cv
1099.32 706.162 li
1099.32 703.824 li
691.588 704.251 li
691.118 702.172 689.255 700.617 687.031 700.617 cv
684.447 700.617 682.355 702.711 682.355 705.295 cv
cp
f
828.622 779.646 mo
828.622 780.291 828.099 780.81 827.453 780.81 cv
826.811 780.81 826.284 780.291 826.284 779.646 cv
826.284 778.999 826.811 778.475 827.453 778.475 cv
828.099 778.475 828.622 778.999 828.622 779.646 cv
cp
850.823 756.273 mo
830.756 776.341 li
829.914 775.49 828.745 774.968 827.453 774.968 cv
824.874 774.968 822.777 777.063 822.777 779.646 cv
822.777 782.227 824.874 784.313 827.453 784.313 cv
830.037 784.313 832.129 782.227 832.129 779.646 cv
832.129 778.958 831.977 778.308 831.714 777.721 cv
850.823 758.613 li
918.591 758.613 li
941.961 735.243 li
1099.32 735.243 li
1099.32 732.907 li
941.961 732.907 li
918.591 756.273 li
850.823 756.273 li
cp
f
859.004 772.627 mo
859.004 773.273 858.48 773.801 857.835 773.801 cv
857.188 773.801 856.661 773.273 856.661 772.627 cv
856.661 771.985 857.188 771.463 857.835 771.463 cv
858.48 771.463 859.004 771.985 859.004 772.627 cv
cp
862.394 771.597 mo
861.917 769.512 860.056 767.96 857.835 767.96 cv
855.251 767.96 853.156 770.043 853.156 772.627 cv
853.156 775.22 855.251 777.306 857.835 777.306 cv
859.964 777.306 861.761 775.879 862.326 773.935 cv
911.581 773.935 li
944.299 741.216 li
1099.32 741.216 li
1099.32 738.88 li
944.299 738.88 li
911.581 771.597 li
862.394 771.597 li
cp
f
828.622 760.951 mo
828.622 761.593 828.099 762.115 827.453 762.115 cv
826.811 762.115 826.284 761.593 826.284 760.951 cv
826.284 760.305 826.811 759.777 827.453 759.777 cv
828.099 759.777 828.622 760.305 828.622 760.951 cv
cp
937.289 727.194 mo
916.253 748.223 li
846.147 748.223 li
834.462 759.912 li
832.011 759.912 li
831.54 757.829 829.679 756.273 827.453 756.273 cv
824.874 756.273 822.777 758.367 822.777 760.951 cv
822.777 763.526 824.874 765.622 827.453 765.622 cv
829.585 765.622 831.382 764.194 831.944 762.25 cv
834.462 762.25 li
846.147 750.563 li
916.253 750.563 li
937.289 729.53 li
1053.69 729.53 li
1058.37 727.194 li
1099.32 727.194 li
1099.32 724.854 li
1058.37 724.854 li
1053.69 727.194 li
937.289 727.194 li
cp
f
856.661 683.828 mo
856.661 684.474 856.141 684.996 855.494 684.996 cv
854.849 684.996 854.33 684.474 854.33 683.828 cv
854.33 683.185 854.849 682.663 855.494 682.663 cv
856.141 682.663 856.661 683.185 856.661 683.828 cv
cp
860.054 682.793 mo
859.581 680.71 857.718 679.156 855.494 679.156 cv
852.915 679.156 850.823 681.248 850.823 683.828 cv
850.823 686.412 852.915 688.501 855.494 688.501 cv
857.626 688.501 859.428 687.075 859.985 685.129 cv
904.572 685.129 li
918.591 699.151 li
1065.21 699.151 li
1087.61 699.151 li
1099.32 699.151 li
1099.32 696.815 li
1087.61 696.815 li
1065.21 696.815 li
918.591 696.815 li
904.572 682.793 li
860.054 682.793 li
cp
f
115.077 644.963 mo
115.077 644.317 115.601 643.795 116.247 643.795 cv
116.892 643.795 117.415 644.317 117.415 644.963 cv
117.415 645.609 116.892 646.133 116.247 646.133 cv
115.601 646.133 115.077 645.609 115.077 644.963 cv
cp
130.27 658.981 mo
119.549 648.268 li
120.399 647.424 120.924 646.256 120.924 644.963 cv
120.924 642.384 118.826 640.289 116.247 640.289 cv
113.663 640.289 111.573 642.384 111.573 644.963 cv
111.573 647.543 113.663 649.637 116.247 649.637 cv
116.934 649.637 117.582 649.49 118.169 649.227 cv
130.27 661.322 li
165.32 661.322 li
177.003 649.637 li
251.809 649.637 li
251.809 647.306 li
177.003 647.306 li
165.32 658.981 li
130.27 658.981 li
cp
f
98.7183 644.963 mo
98.7183 644.317 99.2422 643.795 99.8882 643.795 cv
100.534 643.795 101.057 644.317 101.057 644.963 cv
101.057 645.609 100.534 646.133 99.8882 646.133 cv
99.2422 646.133 98.7183 645.609 98.7183 644.963 cv
cp
120.919 665.995 mo
103.192 648.268 li
104.038 647.424 104.561 646.256 104.561 644.963 cv
104.561 642.384 102.471 640.289 99.8882 640.289 cv
97.3076 640.289 95.2148 642.384 95.2148 644.963 cv
95.2148 647.543 97.3076 649.637 99.8882 649.637 cv
100.575 649.637 101.228 649.49 101.814 649.227 cv
120.919 668.333 li
174.667 668.333 li
186.352 656.644 li
251.809 656.644 li
251.809 654.31 li
186.352 654.31 li
174.667 665.995 li
120.919 665.995 li
cp
f
133.77 644.963 mo
133.77 645.609 133.249 646.133 132.603 646.133 cv
131.96 646.133 131.435 645.609 131.435 644.963 cv
131.435 644.317 131.96 643.795 132.603 643.795 cv
133.249 643.795 133.77 644.317 133.77 644.963 cv
cp
137.163 643.926 mo
136.688 641.844 134.827 640.289 132.603 640.289 cv
130.024 640.289 127.932 642.384 127.932 644.963 cv
127.932 647.543 130.024 649.637 132.603 649.637 cv
134.734 649.637 136.532 648.211 137.097 646.26 cv
158.311 646.26 li
167.656 639.25 li
251.809 639.25 li
251.809 636.912 li
167.656 636.912 li
158.311 643.926 li
137.163 643.926 li
cp
f
82.3638 644.963 mo
82.3638 644.317 82.8838 643.795 83.5298 643.795 cv
84.1758 643.795 84.6987 644.317 84.6987 644.963 cv
84.6987 645.609 84.1758 646.133 83.5298 646.133 cv
82.8838 646.133 82.3638 645.609 82.3638 644.963 cv
cp
116.247 677.685 mo
86.833 648.268 li
87.6826 647.424 88.2031 646.256 88.2031 644.963 cv
88.2031 642.384 86.1094 640.289 83.5298 640.289 cv
80.9502 640.289 78.856 642.384 78.856 644.963 cv
78.856 647.543 80.9502 649.637 83.5298 649.637 cv
84.2163 649.637 84.8687 649.49 85.4521 649.227 cv
116.247 680.018 li
174.667 680.018 li
191.028 663.662 li
251.809 663.662 li
251.809 661.322 li
191.028 661.322 li
174.667 677.685 li
116.247 677.685 li
cp
f
206.215 687.027 mo
206.215 687.673 205.692 688.196 205.051 688.196 cv
204.405 688.196 203.877 687.673 203.877 687.027 cv
203.877 686.381 204.405 685.858 205.051 685.858 cv
205.692 685.858 206.215 686.381 206.215 687.027 cv
cp
205.051 682.354 mo
202.471 682.354 200.373 684.447 200.373 687.027 cv
200.373 689.611 202.471 691.699 205.051 691.699 cv
207.182 691.699 208.977 690.275 209.542 688.326 cv
248.264 688.326 li
248.743 689.977 250.105 691.255 251.809 691.606 cv
251.809 687.713 li
251.672 687.519 251.586 687.282 251.586 687.027 cv
251.586 686.771 251.672 686.533 251.809 686.344 cv
251.809 682.448 li
250.02 682.817 248.602 684.21 248.196 685.99 cv
209.608 685.99 li
209.133 683.907 207.274 682.354 205.051 682.354 cv
cp
f
175.836 698.717 mo
175.836 699.363 175.313 699.881 174.667 699.881 cv
174.026 699.881 173.498 699.363 173.498 698.717 cv
173.498 698.07 174.026 697.543 174.667 697.543 cv
175.313 697.543 175.836 698.07 175.836 698.717 cv
cp
169.996 698.717 mo
169.996 701.292 172.088 703.384 174.667 703.384 cv
176.803 703.384 178.596 701.96 179.158 700.011 cv
251.809 700.011 li
251.809 697.671 li
179.227 697.671 li
178.754 695.59 176.895 694.039 174.667 694.039 cv
172.088 694.039 169.996 696.133 169.996 698.717 cv
cp
f
66.0054 644.963 mo
66.0054 644.317 66.5249 643.795 67.1709 643.795 cv
67.8169 643.795 68.3398 644.317 68.3398 644.963 cv
68.3398 645.609 67.8169 646.133 67.1709 646.133 cv
66.5249 646.133 66.0054 645.609 66.0054 644.963 cv
cp
109.237 687.027 mo
70.478 648.268 li
71.3208 647.424 71.8447 646.256 71.8447 644.963 cv
71.8447 642.384 69.7505 640.289 67.1743 640.289 cv
64.5869 640.289 62.4976 642.384 62.4976 644.963 cv
62.4976 647.543 64.5869 649.637 67.1743 649.637 cv
67.8579 649.637 68.5068 649.49 69.0972 649.227 cv
109.237 689.36 li
179.345 689.36 li
198.037 670.667 li
251.809 670.667 li
251.809 668.333 li
198.037 668.333 li
179.345 687.027 li
109.237 687.027 li
cp
f
175.836 715.068 mo
175.836 715.715 175.313 716.235 174.667 716.235 cv
174.026 716.235 173.498 715.715 173.498 715.068 cv
173.498 714.423 174.026 713.9 174.667 713.9 cv
175.313 713.9 175.836 714.423 175.836 715.068 cv
cp
169.996 715.068 mo
169.996 717.652 172.088 719.749 174.667 719.749 cv
176.803 719.749 178.596 718.318 179.158 716.369 cv
251.809 716.369 li
251.809 714.031 li
179.227 714.031 li
178.754 711.953 176.895 710.393 174.667 710.393 cv
172.088 710.393 169.996 712.489 169.996 715.068 cv
cp
f
175.836 731.425 mo
175.836 732.08 175.313 732.599 174.667 732.599 cv
174.026 732.599 173.498 732.08 173.498 731.425 cv
173.498 730.788 174.026 730.261 174.667 730.261 cv
175.313 730.261 175.836 730.788 175.836 731.425 cv
cp
169.996 731.425 mo
169.996 734.009 172.088 736.101 174.667 736.101 cv
176.803 736.101 178.596 734.677 179.158 732.729 cv
251.809 732.729 li
251.809 730.393 li
179.227 730.393 li
178.754 728.307 176.895 726.754 174.667 726.754 cv
172.088 726.754 169.996 728.85 169.996 731.425 cv
cp
f
175.836 747.786 mo
175.836 748.432 175.313 748.952 174.667 748.952 cv
174.026 748.952 173.498 748.432 173.498 747.786 cv
173.498 747.14 174.026 746.617 174.667 746.617 cv
175.313 746.617 175.836 747.14 175.836 747.786 cv
cp
169.996 747.786 mo
169.996 750.37 172.088 752.462 174.667 752.462 cv
176.803 752.462 178.596 751.038 179.158 749.087 cv
251.809 749.087 li
251.809 746.749 li
179.227 746.749 li
178.754 744.67 176.895 743.114 174.667 743.114 cv
172.088 743.114 169.996 745.211 169.996 747.786 cv
cp
f
380.282 508.337 mo
380.282 508.983 379.759 509.504 379.113 509.504 cv
378.471 509.504 377.944 508.983 377.944 508.337 cv
377.944 507.691 378.471 507.164 379.113 507.164 cv
379.759 507.164 380.282 507.691 380.282 508.337 cv
cp
374.441 508.337 mo
374.441 510.917 376.533 513.011 379.113 513.011 cv
381.692 513.011 383.786 510.917 383.786 508.337 cv
383.786 505.753 381.692 503.661 379.113 503.661 cv
378.432 503.661 377.777 503.81 377.19 504.077 cv
271.617 398.499 li
133.715 398.499 li
133.715 400.836 li
271.617 400.836 li
375.808 505.028 li
374.964 505.876 374.441 507.045 374.441 508.337 cv
cp
f
331.208 508.337 mo
331.208 508.983 330.685 509.504 330.039 509.504 cv
329.394 509.504 328.868 508.983 328.868 508.337 cv
328.868 507.691 329.394 507.164 330.039 507.164 cv
330.685 507.164 331.208 507.691 331.208 508.337 cv
cp
325.364 508.337 mo
325.364 510.917 327.457 513.011 330.039 513.011 cv
332.621 513.011 334.715 510.917 334.715 508.337 cv
334.715 505.753 332.621 503.661 330.039 503.661 cv
329.353 503.661 328.701 503.81 328.115 504.077 cv
250.584 426.542 li
133.715 426.542 li
133.715 428.88 li
250.584 428.88 li
326.735 505.028 li
325.887 505.876 325.364 507.045 325.364 508.337 cv
cp
f
347.569 508.337 mo
347.569 508.983 347.042 509.504 346.395 509.504 cv
345.754 509.504 345.231 508.983 345.231 508.337 cv
345.231 507.691 345.754 507.164 346.395 507.164 cv
347.042 507.164 347.569 507.691 347.569 508.337 cv
cp
341.724 508.337 mo
341.724 510.917 343.816 513.011 346.395 513.011 cv
348.975 513.011 351.069 510.917 351.069 508.337 cv
351.069 505.753 348.975 503.661 346.395 503.661 cv
345.71 503.661 345.06 503.81 344.473 504.077 cv
257.596 417.195 li
133.715 417.195 li
133.715 419.529 li
257.596 419.529 li
343.093 505.028 li
342.247 505.876 341.724 507.045 341.724 508.337 cv
cp
f
363.925 508.337 mo
363.925 508.983 363.4 509.504 362.754 509.504 cv
362.11 509.504 361.59 508.983 361.59 508.337 cv
361.59 507.691 362.11 507.164 362.754 507.164 cv
363.4 507.164 363.925 507.691 363.925 508.337 cv
cp
358.081 508.337 mo
358.081 510.917 360.175 513.011 362.754 513.011 cv
365.338 513.011 367.432 510.917 367.432 508.337 cv
367.432 505.753 365.338 503.661 362.754 503.661 cv
362.071 503.661 361.418 503.81 360.831 504.077 cv
264.605 407.849 li
133.715 407.849 li
133.715 410.18 li
264.605 410.18 li
359.452 505.028 li
358.603 505.876 358.081 507.045 358.081 508.337 cv
cp
f
429.357 520.018 mo
429.357 519.369 429.882 518.849 430.528 518.849 cv
431.17 518.849 431.697 519.369 431.697 520.018 cv
431.697 520.661 431.17 521.188 430.528 521.188 cv
429.882 521.188 429.357 520.661 429.357 520.018 cv
cp
425.969 521.059 mo
426.441 523.142 428.3 524.693 430.528 524.693 cv
433.108 524.693 435.204 522.599 435.204 520.018 cv
435.204 517.438 433.108 515.346 430.528 515.346 cv
428.397 515.346 426.595 516.77 426.035 518.717 cv
325.364 518.717 li
243.573 436.927 li
133.715 436.927 li
133.715 439.266 li
243.573 439.266 li
325.364 521.059 li
425.969 521.059 li
cp
f
429.357 536.378 mo
429.357 535.732 429.882 535.211 430.528 535.211 cv
431.17 535.211 431.697 535.732 431.697 536.378 cv
431.697 537.024 431.17 537.543 430.528 537.543 cv
429.882 537.543 429.357 537.024 429.357 536.378 cv
cp
425.969 537.416 mo
426.441 539.494 428.3 541.05 430.528 541.05 cv
433.108 541.05 435.204 538.962 435.204 536.378 cv
435.204 533.794 433.108 531.7 430.528 531.7 cv
428.397 531.7 426.595 533.127 426.035 535.078 cv
330.039 535.078 li
238.899 443.94 li
133.715 443.94 li
133.715 446.274 li
238.899 446.274 li
330.039 537.416 li
425.969 537.416 li
cp
f
331.208 566.757 mo
331.208 567.401 330.685 567.929 330.039 567.929 cv
329.394 567.929 328.868 567.401 328.868 566.757 cv
328.868 566.114 329.394 565.591 330.039 565.591 cv
330.685 565.591 331.208 566.114 331.208 566.757 cv
cp
325.364 566.757 mo
325.364 569.339 327.457 571.433 330.039 571.433 cv
332.621 571.433 334.715 569.339 334.715 566.757 cv
334.715 564.176 332.621 562.086 330.039 562.086 cv
329.353 562.086 328.701 562.227 328.115 562.495 cv
243.573 477.952 li
133.715 477.952 li
133.715 480.29 li
243.573 480.29 li
326.735 563.452 li
325.887 564.299 325.364 565.466 325.364 566.757 cv
cp
f
398.98 580.78 mo
398.98 581.426 398.457 581.945 397.811 581.945 cv
397.165 581.945 396.643 581.426 396.643 580.78 cv
396.643 580.135 397.165 579.611 397.811 579.611 cv
398.457 579.611 398.98 580.135 398.98 580.78 cv
cp
369.766 552.732 mo
394.502 577.471 li
393.656 578.319 393.136 579.488 393.136 580.78 cv
393.136 583.364 395.232 585.449 397.811 585.449 cv
400.391 585.449 402.483 583.364 402.483 580.78 cv
402.483 578.196 400.391 576.102 397.811 576.102 cv
397.124 576.102 396.473 576.254 395.887 576.518 cv
369.766 550.401 li
330.039 550.401 li
245.911 466.274 li
133.715 466.274 li
133.715 468.605 li
245.911 468.605 li
330.039 552.732 li
369.766 552.732 li
cp
f
412.999 569.095 mo
412.999 569.741 412.476 570.264 411.83 570.264 cv
411.184 570.264 410.665 569.741 410.665 569.095 cv
410.665 568.449 411.184 567.929 411.83 567.929 cv
412.476 567.929 412.999 568.449 412.999 569.095 cv
cp
386.126 543.39 mo
408.523 565.782 li
407.682 566.634 407.156 567.804 407.156 569.095 cv
407.156 571.679 409.25 573.767 411.83 573.767 cv
414.414 573.767 416.505 571.679 416.505 569.095 cv
416.505 566.511 414.414 564.419 411.83 564.419 cv
411.146 564.419 410.494 564.565 409.907 564.833 cv
386.126 541.05 li
330.039 541.05 li
238.899 449.912 li
133.715 449.912 li
133.715 452.251 li
238.899 452.251 li
330.039 543.39 li
386.126 543.39 li
cp
f
479.136 804.021 mo
479.136 804.663 478.609 805.187 477.963 805.187 cv
477.321 805.187 476.794 804.663 476.794 804.021 cv
476.794 803.371 477.321 802.852 477.963 802.852 cv
478.609 802.852 479.136 803.371 479.136 804.021 cv
cp
482.52 802.981 mo
482.05 800.899 480.19 799.348 477.963 799.348 cv
475.383 799.348 473.293 801.438 473.293 804.021 cv
473.293 806.602 475.383 808.693 477.963 808.693 cv
480.094 808.693 481.894 807.269 482.454 805.32 cv
537.429 805.32 li
556.121 786.624 li
636.896 786.624 li
636.896 784.286 li
556.121 784.286 li
537.429 802.981 li
482.52 802.981 li
cp
f
507.177 777.276 mo
507.177 777.923 506.652 778.441 506.011 778.441 cv
505.362 778.441 504.837 777.923 504.837 777.276 cv
504.837 776.631 505.362 776.112 506.011 776.112 cv
506.652 776.112 507.177 776.631 507.177 777.276 cv
cp
510.565 776.237 mo
510.093 774.154 508.23 772.601 506.011 772.601 cv
503.427 772.601 501.332 774.692 501.332 777.276 cv
501.332 779.852 503.427 781.95 506.011 781.95 cv
508.138 781.95 509.933 780.519 510.499 778.575 cv
538.723 778.575 li
538.723 759.879 li
636.896 759.879 li
636.896 757.541 li
536.385 757.541 li
536.385 776.237 li
510.565 776.237 li
cp
f
434.729 788.962 mo
434.729 789.607 434.206 790.126 433.565 790.126 cv
432.919 790.126 432.396 789.607 432.396 788.962 cv
432.396 788.315 432.919 787.788 433.565 787.788 cv
434.206 787.788 434.729 788.315 434.729 788.962 cv
cp
438.118 787.923 mo
437.647 785.842 435.789 784.286 433.565 784.286 cv
430.981 784.286 428.889 786.378 428.889 788.962 cv
428.889 791.546 430.981 793.631 433.565 793.631 cv
435.696 793.631 437.494 792.209 438.056 790.263 cv
463.944 790.263 li
510.68 743.521 li
636.896 743.521 li
636.896 741.183 li
510.68 741.183 li
463.944 787.923 li
438.118 787.923 li
cp
f
493.152 788.962 mo
493.152 789.607 492.631 790.126 491.985 790.126 cv
491.339 790.126 490.816 789.607 490.816 788.962 cv
490.816 788.315 491.339 787.788 491.985 787.788 cv
492.631 787.788 493.152 788.315 493.152 788.962 cv
cp
541.063 787.923 mo
496.542 787.923 li
496.072 785.842 494.209 784.286 491.985 784.286 cv
489.406 784.286 487.314 786.378 487.314 788.962 cv
487.314 791.546 489.406 793.631 491.985 793.631 cv
494.117 793.631 495.91 792.209 496.477 790.263 cv
541.063 790.263 li
559.755 771.563 li
636.896 771.563 li
636.896 769.222 li
559.755 769.231 li
541.063 787.923 li
cp
f
425.382 765.592 mo
425.382 766.237 424.859 766.756 424.213 766.756 cv
423.572 766.756 423.044 766.237 423.044 765.592 cv
423.044 764.945 423.572 764.423 424.213 764.423 cv
424.859 764.423 425.382 764.945 425.382 765.592 cv
cp
428.775 764.553 mo
428.3 762.474 426.441 760.916 424.213 760.916 cv
421.634 760.916 419.546 763.012 419.546 765.592 cv
419.546 768.176 421.634 770.268 424.213 770.268 cv
426.349 770.268 428.146 768.839 428.703 766.891 cv
466.282 766.891 li
503.668 729.495 li
636.896 729.495 li
636.896 727.157 li
503.668 727.157 li
466.282 764.553 li
428.775 764.553 li
cp
f
437.067 753.906 mo
437.067 754.553 436.544 755.076 435.898 755.076 cv
435.252 755.076 434.729 754.553 434.729 753.906 cv
434.729 753.261 435.252 752.738 435.898 752.738 cv
436.544 752.738 437.067 753.261 437.067 753.906 cv
cp
440.458 752.867 mo
439.985 750.789 438.122 749.233 435.898 749.233 cv
433.314 749.233 431.227 751.323 431.227 753.906 cv
431.227 756.49 433.314 758.578 435.898 758.578 cv
438.03 758.578 439.831 757.15 440.39 755.205 cv
459.269 755.205 li
496.661 717.815 li
636.896 717.815 li
636.896 715.477 li
496.661 715.477 li
459.269 752.867 li
440.458 752.867 li
cp
f
460.438 735.99 mo
460.438 736.637 459.912 737.159 459.266 737.159 cv
458.62 737.159 458.1 736.637 458.1 735.99 cv
458.1 735.345 458.62 734.819 459.266 734.819 cv
459.912 734.819 460.438 735.345 460.438 735.99 cv
cp
459.269 731.319 mo
456.689 731.319 454.597 733.408 454.597 735.99 cv
454.597 738.572 456.689 740.662 459.269 740.662 cv
461.848 740.662 463.944 738.572 463.944 735.99 cv
463.944 734.698 463.421 733.529 462.573 732.685 cv
487.314 707.945 li
600.239 707.945 li
627.736 707.945 li
636.896 707.945 li
636.896 705.607 li
627.736 705.607 li
600.239 705.607 li
487.314 705.607 li
461.193 731.732 li
460.606 731.464 459.954 731.319 459.269 731.319 cv
cp
f
217.067 224.397 mo
217.067 223.752 217.59 223.231 218.236 223.231 cv
218.88 223.231 219.405 223.752 219.405 224.397 cv
219.405 225.043 218.88 225.567 218.236 225.567 cv
217.59 225.567 217.067 225.043 217.067 224.397 cv
cp
222.91 224.397 mo
222.91 221.814 220.82 219.725 218.236 219.725 cv
215.657 219.725 213.563 221.814 213.563 224.397 cv
213.563 226.981 215.657 229.071 218.236 229.071 cv
218.924 229.071 219.577 228.922 220.159 228.659 cv
297.691 306.193 li
414.559 306.193 li
414.559 303.851 li
297.691 303.851 li
221.539 227.701 li
222.387 226.859 222.91 225.689 222.91 224.397 cv
cp
f
200.705 224.397 mo
200.705 223.752 201.236 223.231 201.878 223.231 cv
202.524 223.231 203.047 223.752 203.047 224.397 cv
203.047 225.043 202.524 225.567 201.878 225.567 cv
201.236 225.567 200.705 225.043 200.705 224.397 cv
cp
206.552 224.397 mo
206.552 221.814 204.457 219.725 201.878 219.725 cv
199.298 219.725 197.205 221.814 197.205 224.397 cv
197.205 226.981 199.298 229.071 201.878 229.071 cv
202.563 229.071 203.214 228.922 203.805 228.659 cv
290.678 315.54 li
414.559 315.54 li
414.559 313.201 li
290.678 313.201 li
205.183 227.701 li
206.031 226.859 206.552 225.689 206.552 224.397 cv
cp
f
118.916 212.716 mo
118.916 213.358 118.397 213.882 117.752 213.882 cv
117.106 213.882 116.582 213.358 116.582 212.716 cv
116.582 212.074 117.106 211.543 117.752 211.543 cv
118.397 211.543 118.916 212.074 118.916 212.716 cv
cp
122.31 211.673 mo
121.839 209.594 119.975 208.043 117.752 208.043 cv
115.168 208.043 113.074 210.136 113.074 212.716 cv
113.074 215.296 115.168 217.389 117.752 217.389 cv
119.882 217.389 121.678 215.964 122.239 214.012 cv
222.91 214.012 li
304.701 295.803 li
414.559 295.803 li
414.559 293.469 li
304.701 293.469 li
222.91 211.673 li
122.31 211.673 li
cp
f
118.916 196.35 mo
118.916 197.004 118.397 197.523 117.752 197.523 cv
117.106 197.523 116.582 197.004 116.582 196.35 cv
116.582 195.708 117.106 195.185 117.752 195.185 cv
118.397 195.185 118.916 195.708 118.916 196.35 cv
cp
122.31 195.319 mo
121.839 193.236 119.975 191.681 117.752 191.681 cv
115.168 191.681 113.074 193.774 113.074 196.35 cv
113.074 198.938 115.168 201.027 117.752 201.027 cv
119.882 201.027 121.678 199.602 122.239 197.656 cv
218.236 197.656 li
309.376 288.792 li
414.559 288.792 li
414.559 286.457 li
309.376 286.457 li
218.236 195.319 li
122.31 195.319 li
cp
f
165.659 142.609 mo
165.659 143.251 165.133 143.774 164.49 143.774 cv
163.844 143.774 163.318 143.251 163.318 142.609 cv
163.318 141.963 163.844 141.436 164.49 141.436 cv
165.133 141.436 165.659 141.963 165.659 142.609 cv
cp
206.552 98.2065 mo
166.41 138.347 li
165.826 138.08 165.175 137.932 164.49 137.932 cv
161.906 137.932 159.814 140.026 159.814 142.609 cv
159.814 145.185 161.906 147.279 164.49 147.279 cv
167.071 147.279 169.161 145.185 169.161 142.609 cv
169.161 141.318 168.638 140.145 167.792 139.302 cv
206.552 100.541 li
295.351 189.342 li
295.351 217.389 li
414.559 217.389 li
414.559 215.051 li
297.691 215.051 li
297.691 189.342 li
206.552 98.2065 li
cp
f
217.067 165.972 mo
217.067 165.326 217.59 164.807 218.236 164.807 cv
218.88 164.807 219.405 165.326 219.405 165.972 cv
219.405 166.618 218.88 167.145 218.236 167.145 cv
217.59 167.145 217.067 166.618 217.067 165.972 cv
cp
222.91 165.972 mo
222.91 163.396 220.82 161.299 218.236 161.299 cv
215.657 161.299 213.563 163.396 213.563 165.972 cv
213.563 168.555 215.657 170.649 218.236 170.649 cv
218.924 170.649 219.577 170.504 220.159 170.234 cv
304.701 254.776 li
414.559 254.776 li
414.559 252.44 li
304.701 252.44 li
221.539 169.283 li
222.387 168.436 222.91 167.268 222.91 165.972 cv
cp
f
340.217 242.749 mo
340.217 243.395 339.694 243.922 339.048 243.922 cv
338.402 243.922 337.879 243.395 337.879 242.749 cv
337.879 242.104 338.402 241.584 339.048 241.584 cv
339.694 241.584 340.217 242.104 340.217 242.749 cv
cp
334.376 242.749 mo
334.376 245.333 336.464 247.426 339.048 247.426 cv
341.179 247.426 342.977 246.001 343.539 244.048 cv
385.808 244.048 li
385.808 241.717 li
343.607 241.717 li
343.13 239.632 341.271 238.079 339.048 238.079 cv
336.464 238.079 334.376 240.17 334.376 242.749 cv
cp
f
191.362 165.972 mo
191.362 166.618 190.839 167.145 190.193 167.145 cv
189.547 167.145 189.024 166.618 189.024 165.972 cv
189.024 165.326 189.547 164.807 190.193 164.807 cv
190.839 164.807 191.362 165.326 191.362 165.972 cv
cp
220.577 133.255 mo
192.116 161.71 li
191.529 161.451 190.878 161.299 190.193 161.299 cv
187.613 161.299 185.52 163.396 185.52 165.972 cv
185.52 168.555 187.613 170.649 190.193 170.649 cv
192.777 170.649 194.869 168.555 194.869 165.972 cv
194.869 164.684 194.346 163.515 193.5 162.672 cv
220.577 135.594 li
283.671 198.692 li
283.671 226.736 li
414.559 226.736 li
414.559 224.397 li
286.006 224.397 li
286.006 198.692 li
220.577 133.255 li
cp
f
338.585 144.943 mo
338.585 145.594 338.063 146.113 337.417 146.113 cv
336.771 146.113 336.249 145.594 336.249 144.943 cv
336.249 144.302 336.771 143.774 337.417 143.774 cv
338.063 143.774 338.585 144.302 338.585 144.943 cv
cp
332.742 144.943 mo
332.742 147.524 334.838 149.617 337.417 149.617 cv
339.549 149.617 341.346 148.192 341.909 146.24 cv
414.559 146.24 li
414.559 143.904 li
341.977 143.904 li
341.504 141.822 339.641 140.271 337.417 140.271 cv
334.838 140.271 332.742 142.364 332.742 144.943 cv
cp
f
149.298 151.956 mo
149.298 151.31 149.818 150.786 150.467 150.786 cv
151.113 150.786 151.633 151.31 151.633 151.956 cv
151.633 152.602 151.113 153.125 150.467 153.125 cv
149.818 153.125 149.298 152.602 149.298 151.956 cv
cp
178.508 179.996 mo
153.771 155.259 li
154.62 154.417 155.138 153.248 155.138 151.956 cv
155.138 149.372 153.048 147.279 150.467 147.279 cv
147.885 147.279 145.795 149.372 145.795 151.956 cv
145.795 154.532 147.885 156.629 150.467 156.629 cv
151.152 156.629 151.8 156.481 152.392 156.217 cv
178.508 182.334 li
218.236 182.334 li
302.363 266.461 li
414.559 266.461 li
414.559 264.122 li
302.363 264.122 li
218.236 179.996 li
178.508 179.996 li
cp
f
135.275 163.641 mo
135.275 162.995 135.798 162.467 136.444 162.467 cv
137.09 162.467 137.613 162.995 137.613 163.641 cv
137.613 164.287 137.09 164.807 136.444 164.807 cv
135.798 164.807 135.275 164.287 135.275 163.641 cv
cp
162.149 189.342 mo
139.753 166.944 li
140.594 166.099 141.117 164.928 141.117 163.641 cv
141.117 161.057 139.028 158.964 136.444 158.964 cv
133.864 158.964 131.771 161.057 131.771 163.641 cv
131.771 166.22 133.864 168.314 136.444 168.314 cv
137.132 168.314 137.78 168.162 138.369 167.902 cv
162.149 191.681 li
218.236 191.681 li
309.376 282.82 li
414.559 282.82 li
414.559 280.485 li
309.376 280.485 li
218.236 189.342 li
162.149 189.342 li
cp
f
177.344 154.29 mo
177.344 154.94 176.82 155.46 176.175 155.46 cv
175.529 155.46 175.003 154.94 175.003 154.29 cv
175.003 153.649 175.529 153.125 176.175 153.125 cv
176.82 153.125 177.344 153.649 177.344 154.29 cv
cp
213.563 114.565 mo
178.095 150.033 li
177.511 149.765 176.855 149.617 176.175 149.617 cv
173.591 149.617 171.497 151.711 171.497 154.29 cv
171.497 156.874 173.591 158.964 176.175 158.964 cv
178.754 158.964 180.846 156.874 180.846 154.29 cv
180.846 153.003 180.323 151.833 179.477 150.983 cv
213.563 116.9 li
290.678 194.019 li
290.678 222.063 li
414.559 222.063 li
414.559 219.725 li
293.016 219.725 li
293.016 194.019 li
213.563 114.565 li
cp
f
81.5269 121.578 mo
81.5269 122.224 81.0073 122.742 80.3613 122.742 cv
79.7153 122.742 79.1924 122.224 79.1924 121.578 cv
79.1924 120.932 79.7153 120.404 80.3613 120.404 cv
81.0073 120.404 81.5269 120.932 81.5269 121.578 cv
cp
162.149 76.1362 mo
117.752 120.539 li
84.916 120.539 li
84.4438 118.456 82.585 116.9 80.3613 116.9 cv
77.7773 116.9 75.6846 118.994 75.6846 121.578 cv
75.6846 124.161 77.7773 126.247 80.3613 126.247 cv
82.4883 126.247 84.2886 124.822 84.8525 122.877 cv
117.752 122.877 li
162.149 78.4741 li
213.563 78.4741 li
323.395 188.306 li
323.395 204.665 li
414.559 204.665 li
414.559 202.327 li
325.733 202.327 li
325.733 188.306 li
213.563 76.1362 li
162.149 76.1362 li
cp
f
338.585 161.299 mo
338.585 161.948 338.063 162.467 337.417 162.467 cv
336.771 162.467 336.249 161.948 336.249 161.299 cv
336.249 160.656 336.771 160.133 337.417 160.133 cv
338.063 160.133 338.585 160.656 338.585 161.299 cv
cp
332.742 161.299 mo
332.742 163.886 334.838 165.972 337.417 165.972 cv
339.549 165.972 341.346 164.546 341.909 162.602 cv
414.559 162.602 li
414.559 160.263 li
341.977 160.263 li
341.504 158.184 339.641 156.629 337.417 156.629 cv
334.838 156.629 332.742 158.719 332.742 161.299 cv
cp
f
338.585 177.657 mo
338.585 178.303 338.063 178.831 337.417 178.831 cv
336.771 178.831 336.249 178.303 336.249 177.657 cv
336.249 177.015 336.771 176.492 337.417 176.492 cv
338.063 176.492 338.585 177.015 338.585 177.657 cv
cp
332.742 177.657 mo
332.742 180.24 334.838 182.334 337.417 182.334 cv
339.549 182.334 341.346 180.909 341.909 178.957 cv
414.559 178.957 li
414.559 176.621 li
341.977 176.621 li
341.504 174.539 339.641 172.987 337.417 172.987 cv
334.838 172.987 332.742 175.081 332.742 177.657 cv
cp
f
81.5269 154.29 mo
81.5269 154.94 81.0073 155.46 80.3613 155.46 cv
79.7153 155.46 79.1924 154.94 79.1924 154.29 cv
79.1924 153.649 79.7153 153.125 80.3613 153.125 cv
81.0073 153.125 81.5269 153.649 81.5269 154.29 cv
cp
215.898 88.8564 mo
164.49 88.8564 li
122.424 130.92 li
101.389 130.92 li
82.2837 150.033 li
81.6973 149.765 81.0444 149.617 80.3613 149.617 cv
77.7773 149.617 75.6846 151.711 75.6846 154.29 cv
75.6846 156.874 77.7773 158.964 80.3613 158.964 cv
82.9409 158.964 85.0347 156.874 85.0347 154.29 cv
85.0347 153.003 84.5107 151.833 83.6646 150.983 cv
101.389 133.255 li
122.424 133.255 li
164.49 91.1953 li
215.898 91.1953 li
314.048 189.342 li
314.048 212.716 li
414.559 212.716 li
414.559 210.377 li
316.388 210.377 li
316.388 189.342 li
215.898 88.8564 li
cp
f
338.585 194.019 mo
338.585 194.665 338.063 195.185 337.417 195.185 cv
336.771 195.185 336.249 194.665 336.249 194.019 cv
336.249 193.373 336.771 192.846 337.417 192.846 cv
338.063 192.846 338.585 193.373 338.585 194.019 cv
cp
332.742 194.019 mo
332.742 196.603 334.838 198.692 337.417 198.692 cv
339.549 198.692 341.346 197.267 341.909 195.319 cv
414.559 195.319 li
414.559 192.98 li
341.977 192.98 li
341.504 190.898 339.641 189.342 337.417 189.342 cv
334.838 189.342 332.742 191.436 332.742 194.019 cv
cp
f
536.401 213.066 mo
536.401 212.42 536.926 211.896 537.567 211.896 cv
538.213 211.896 538.739 212.42 538.739 213.066 cv
538.739 213.711 538.213 214.231 537.567 214.231 cv
536.926 214.231 536.401 213.711 536.401 213.066 cv
cp
542.246 213.066 mo
542.246 210.485 540.151 208.388 537.567 208.388 cv
534.988 208.388 532.898 210.485 532.898 213.066 cv
532.898 215.649 534.988 217.735 537.567 217.735 cv
538.26 217.735 538.906 217.594 539.495 217.323 cv
645.063 322.901 li
782.968 322.901 li
782.968 320.563 li
645.063 320.563 li
540.875 216.37 li
541.718 215.523 542.246 214.354 542.246 213.066 cv
cp
f
585.479 213.066 mo
585.479 212.42 585.997 211.896 586.644 211.896 cv
587.289 211.896 587.813 212.42 587.813 213.066 cv
587.813 213.711 587.289 214.231 586.644 214.231 cv
585.997 214.231 585.479 213.711 585.479 213.066 cv
cp
591.316 213.066 mo
591.316 210.485 589.227 208.388 586.644 208.388 cv
584.063 208.388 581.97 210.485 581.97 213.066 cv
581.97 215.649 584.063 217.735 586.644 217.735 cv
587.329 217.735 587.983 217.594 588.57 217.323 cv
666.101 294.857 li
782.968 294.857 li
782.968 292.52 li
666.101 292.52 li
589.952 216.37 li
590.796 215.523 591.316 214.354 591.316 213.066 cv
cp
f
569.118 213.066 mo
569.118 212.42 569.643 211.896 570.284 211.896 cv
570.931 211.896 571.458 212.42 571.458 213.066 cv
571.458 213.711 570.931 214.231 570.284 214.231 cv
569.643 214.231 569.118 213.711 569.118 213.066 cv
cp
574.958 213.066 mo
574.958 210.485 572.864 208.388 570.284 208.388 cv
567.705 208.388 565.615 210.485 565.615 213.066 cv
565.615 215.649 567.705 217.735 570.284 217.735 cv
570.973 217.735 571.623 217.594 572.212 217.323 cv
659.087 304.205 li
782.968 304.205 li
782.968 301.869 li
659.087 301.869 li
573.592 216.37 li
574.435 215.523 574.958 214.354 574.958 213.066 cv
cp
f
552.762 213.066 mo
552.762 212.42 553.28 211.896 553.926 211.896 cv
554.577 211.896 555.095 212.42 555.095 213.066 cv
555.095 213.711 554.577 214.231 553.926 214.231 cv
553.28 214.231 552.762 213.711 552.762 213.066 cv
cp
558.6 213.066 mo
558.6 210.485 556.51 208.388 553.926 208.388 cv
551.347 208.388 549.255 210.485 549.255 213.066 cv
549.255 215.649 551.347 217.735 553.926 217.735 cv
554.612 217.735 555.267 217.594 555.853 217.323 cv
652.077 313.547 li
782.968 313.547 li
782.968 311.216 li
652.077 311.216 li
557.235 216.37 li
558.079 215.523 558.6 214.354 558.6 213.066 cv
cp
f
487.327 201.38 mo
487.327 202.026 486.805 202.55 486.158 202.55 cv
485.513 202.55 484.989 202.026 484.989 201.38 cv
484.989 200.735 485.513 200.211 486.158 200.211 cv
486.805 200.211 487.327 200.735 487.327 201.38 cv
cp
490.715 200.34 mo
490.245 198.259 488.382 196.71 486.158 196.71 cv
483.579 196.71 481.485 198.797 481.485 201.38 cv
481.485 203.964 483.579 206.058 486.158 206.058 cv
488.29 206.058 490.085 204.632 490.649 202.679 cv
591.316 202.679 li
673.109 284.468 li
782.968 284.468 li
782.968 282.13 li
673.109 282.13 li
591.316 200.34 li
490.715 200.34 li
cp
f
487.327 185.018 mo
487.327 185.667 486.805 186.188 486.158 186.188 cv
485.513 186.188 484.989 185.667 484.989 185.018 cv
484.989 184.376 485.513 183.852 486.158 183.852 cv
486.805 183.852 487.327 184.376 487.327 185.018 cv
cp
490.715 183.983 mo
490.245 181.903 488.382 180.349 486.158 180.349 cv
483.579 180.349 481.485 182.441 481.485 185.018 cv
481.485 187.602 483.579 189.695 486.158 189.695 cv
488.29 189.695 490.085 188.27 490.649 186.321 cv
586.644 186.321 li
677.785 277.46 li
782.968 277.46 li
782.968 275.122 li
677.785 275.122 li
586.644 183.983 li
490.715 183.983 li
cp
f
534.063 131.276 mo
534.063 131.919 533.54 132.442 532.898 132.442 cv
532.252 132.442 531.725 131.919 531.725 131.276 cv
531.725 130.627 532.252 130.104 532.898 130.104 cv
533.54 130.104 534.063 130.627 534.063 131.276 cv
cp
574.958 86.8711 mo
534.821 127.012 li
534.23 126.748 533.581 126.6 532.898 126.6 cv
530.315 126.6 528.223 128.693 528.223 131.276 cv
528.223 133.852 530.315 135.947 532.898 135.947 cv
535.478 135.947 537.567 133.852 537.567 131.276 cv
537.567 129.985 537.047 128.812 536.199 127.966 cv
574.958 89.2056 li
663.763 178.01 li
663.763 206.058 li
782.968 206.058 li
782.968 203.719 li
666.101 203.719 li
666.101 178.01 li
574.958 86.8711 li
cp
f
585.479 154.64 mo
585.479 154.001 585.997 153.474 586.644 153.474 cv
587.289 153.474 587.813 154.001 587.813 154.64 cv
587.813 155.289 587.289 155.806 586.644 155.806 cv
585.997 155.806 585.479 155.289 585.479 154.64 cv
cp
591.316 154.64 mo
591.316 152.064 589.227 149.966 586.644 149.966 cv
584.063 149.966 581.97 152.064 581.97 154.64 cv
581.97 157.224 584.063 159.316 586.644 159.316 cv
587.329 159.316 587.983 159.169 588.57 158.901 cv
673.109 243.444 li
782.968 243.444 li
782.968 241.105 li
673.109 241.105 li
589.952 157.947 li
590.796 157.098 591.316 155.932 591.316 154.64 cv
cp
f
559.769 154.64 mo
559.769 155.289 559.246 155.806 558.6 155.806 cv
557.958 155.806 557.433 155.289 557.433 154.64 cv
557.433 154.001 557.958 153.474 558.6 153.474 cv
559.246 153.474 559.769 154.001 559.769 154.64 cv
cp
588.981 121.923 mo
560.526 150.378 li
559.94 150.119 559.287 149.966 558.6 149.966 cv
556.02 149.966 553.926 152.064 553.926 154.64 cv
553.926 157.224 556.02 159.316 558.6 159.316 cv
561.184 159.316 563.277 157.224 563.277 154.64 cv
563.277 153.355 562.755 152.182 561.906 151.336 cv
588.981 124.262 li
652.077 187.357 li
652.077 215.404 li
782.968 215.404 li
782.968 213.066 li
654.415 213.066 li
654.415 187.357 li
588.981 121.923 li
cp
f
517.706 140.62 mo
517.706 139.974 518.229 139.45 518.875 139.45 cv
519.521 139.45 520.04 139.974 520.04 140.62 cv
520.04 141.266 519.521 141.789 518.875 141.789 cv
518.229 141.789 517.706 141.266 517.706 140.62 cv
cp
546.915 168.664 mo
522.178 143.927 li
523.024 143.081 523.547 141.908 523.547 140.62 cv
523.547 138.04 521.459 135.947 518.875 135.947 cv
516.296 135.947 514.202 138.04 514.202 140.62 cv
514.202 143.2 516.296 145.292 518.875 145.292 cv
519.561 145.292 520.211 145.145 520.8 144.881 cv
546.915 171.001 li
586.644 171.001 li
670.773 255.129 li
782.968 255.129 li
782.968 252.79 li
670.773 252.79 li
586.644 168.664 li
546.915 168.664 li
cp
f
503.686 152.301 mo
503.686 151.659 504.209 151.135 504.852 151.135 cv
505.498 151.135 506.024 151.659 506.024 152.301 cv
506.024 152.947 505.498 153.474 504.852 153.474 cv
504.209 153.474 503.686 152.947 503.686 152.301 cv
cp
530.56 178.01 mo
508.157 155.612 li
509.005 154.766 509.528 153.593 509.528 152.301 cv
509.528 149.726 507.435 147.632 504.852 147.632 cv
502.271 147.632 500.181 149.726 500.181 152.301 cv
500.181 154.885 502.271 156.979 504.852 156.979 cv
505.542 156.979 506.191 156.83 506.777 156.567 cv
530.56 180.349 li
586.644 180.349 li
677.785 271.483 li
782.968 271.483 li
782.968 269.153 li
677.785 269.153 li
586.644 178.01 li
530.56 178.01 li
cp
f
545.748 142.955 mo
545.748 143.601 545.225 144.128 544.579 144.128 cv
543.938 144.128 543.415 143.601 543.415 142.955 cv
543.415 142.312 543.938 141.789 544.579 141.789 cv
545.225 141.789 545.748 142.312 545.748 142.955 cv
cp
581.97 103.229 mo
546.506 138.697 li
545.919 138.434 545.267 138.285 544.579 138.285 cv
541.995 138.285 539.908 140.378 539.908 142.955 cv
539.908 145.538 541.995 147.632 544.579 147.632 cv
547.159 147.632 549.255 145.538 549.255 142.955 cv
549.255 141.67 548.729 140.497 547.884 139.651 cv
581.97 105.568 li
659.087 182.686 li
659.087 210.727 li
782.968 210.727 li
782.968 208.388 li
661.429 208.388 li
661.429 182.686 li
581.97 103.229 li
cp
f
449.936 110.241 mo
449.936 110.884 449.414 111.411 448.768 111.411 cv
448.122 111.411 447.599 110.884 447.599 110.241 cv
447.599 109.592 448.122 109.072 448.768 109.072 cv
449.414 109.072 449.936 109.592 449.936 110.241 cv
cp
530.56 64.8008 mo
486.158 109.202 li
453.327 109.202 li
452.854 107.12 450.991 105.568 448.768 105.568 cv
446.188 105.568 444.094 107.658 444.094 110.241 cv
444.094 112.822 446.188 114.915 448.768 114.915 cv
450.897 114.915 452.694 113.49 453.259 111.54 cv
486.158 111.54 li
530.56 67.1353 li
581.97 67.1353 li
691.806 176.971 li
691.806 193.329 li
782.968 193.329 li
782.968 190.995 li
694.144 190.995 li
694.144 176.971 li
581.97 64.8008 li
530.56 64.8008 li
cp
f
449.936 142.955 mo
449.936 143.601 449.414 144.128 448.768 144.128 cv
448.122 144.128 447.599 143.601 447.599 142.955 cv
447.599 142.312 448.122 141.789 448.768 141.789 cv
449.414 141.789 449.936 142.312 449.936 142.955 cv
cp
584.31 77.5205 mo
532.898 77.5205 li
490.83 119.588 li
469.8 119.588 li
450.69 138.697 li
450.103 138.434 449.456 138.285 448.768 138.285 cv
446.188 138.285 444.094 140.378 444.094 142.955 cv
444.094 145.538 446.188 147.632 448.768 147.632 cv
451.347 147.632 453.441 145.538 453.441 142.955 cv
453.441 141.67 452.918 140.497 452.075 139.651 cv
469.8 121.923 li
490.83 121.923 li
532.898 79.8599 li
584.31 79.8599 li
682.459 178.01 li
682.459 201.38 li
782.968 201.38 li
782.968 199.042 li
684.794 199.042 li
684.794 178.01 li
584.31 77.5205 li
cp
f
859.34 186.922 mo
880.367 165.894 li
1137.45 165.894 li
1137.45 163.552 li
880.367 163.552 li
859.34 184.587 li
791.444 184.665 li
782.915 191.005 li
782.952 193.318 li
791.444 187 li
859.34 186.922 li
cp
f
859.34 194.977 mo
880.367 173.946 li
1137.45 173.946 li
1137.45 171.61 li
880.367 171.61 li
859.34 192.643 li
791.444 192.717 li
782.915 199.061 li
782.952 201.373 li
791.444 195.047 li
859.34 194.977 li
cp
f
859.377 199.643 mo
880.404 178.612 li
1137.49 178.612 li
1137.49 176.273 li
880.404 176.273 li
859.377 197.305 li
791.479 197.386 li
782.952 203.727 li
782.989 206.039 li
791.479 199.718 li
859.377 199.643 li
cp
f
859.357 204.324 mo
880.385 183.296 li
1137.47 183.296 li
1137.47 180.958 li
880.385 180.958 li
859.357 201.989 li
791.462 202.067 li
782.933 208.411 li
782.972 210.719 li
791.462 204.398 li
859.357 204.324 li
cp
f
859.34 209.009 mo
880.367 187.977 li
1137.45 187.977 li
1137.45 185.642 li
880.367 185.642 li
859.34 206.669 li
791.444 206.751 li
782.915 213.091 li
782.952 215.404 li
791.444 209.082 li
859.34 209.009 li
cp
f
859.351 237.037 mo
880.383 216.009 li
1137.47 216.009 li
1137.47 213.67 li
880.383 213.67 li
859.351 234.706 li
791.456 234.78 li
782.928 241.12 li
782.968 243.436 li
791.456 237.119 li
859.351 237.037 li
cp
f
859.351 248.722 mo
880.383 227.694 li
1137.47 227.694 li
1137.47 225.359 li
880.383 225.359 li
859.351 246.387 li
791.456 246.465 li
782.928 252.805 li
782.968 255.121 li
791.456 248.796 li
859.351 248.722 li
cp
f
859.34 265.085 mo
880.367 244.053 li
1137.45 244.053 li
1137.45 241.713 li
880.367 241.713 li
859.34 262.746 li
791.444 262.827 li
782.915 269.167 li
782.952 271.483 li
791.444 265.158 li
859.34 265.085 li
cp
f
859.351 271.046 mo
880.383 250.014 li
1137.47 250.014 li
1137.47 247.676 li
880.383 247.676 li
859.351 268.707 li
791.456 268.785 li
782.928 275.128 li
782.968 277.438 li
791.456 271.12 li
859.351 271.046 li
cp
f
859.351 278.068 mo
880.383 257.037 li
1137.47 257.037 li
1137.47 254.698 li
880.383 254.698 li
859.351 275.73 li
791.456 275.811 li
782.928 282.152 li
782.968 284.464 li
791.456 278.143 li
859.351 278.068 li
cp
f
859.388 288.403 mo
880.42 267.371 li
1137.5 267.371 li
1137.5 265.032 li
880.42 265.032 li
859.388 286.064 li
791.493 286.139 li
782.963 292.482 li
783.003 294.795 li
791.493 288.473 li
859.388 288.403 li
cp
f
859.335 297.801 mo
880.363 276.77 li
1137.45 276.77 li
1137.45 274.435 li
880.363 274.435 li
859.335 295.463 li
791.44 295.544 li
782.91 301.884 li
782.948 304.2 li
791.44 297.875 li
859.335 297.801 li
cp
f
859.335 307.148 mo
880.363 286.12 li
1137.45 286.12 li
1137.45 283.781 li
880.363 283.781 li
859.335 304.816 li
791.44 304.895 li
782.91 311.235 li
782.948 313.547 li
791.44 307.229 li
859.335 307.148 li
cp
f
859.28 316.498 mo
880.31 295.471 li
1137.39 295.471 li
1137.39 293.131 li
880.31 293.131 li
859.28 314.164 li
791.386 314.242 li
782.855 320.581 li
782.893 322.897 li
791.386 316.568 li
859.28 316.498 li
cp
f
768.264 166.949 mo
768.264 166.303 768.782 165.783 769.428 165.783 cv
770.074 165.783 770.597 166.303 770.597 166.949 cv
770.597 167.595 770.074 168.118 769.428 168.118 cv
768.782 168.118 768.264 167.595 768.264 166.949 cv
cp
817.275 177.576 mo
857.002 177.576 li
875.698 158.878 li
1137.45 158.878 li
1137.45 156.54 li
875.698 156.54 li
857.002 175.241 li
817.275 175.241 li
807.924 165.894 li
782.796 165.894 li
782.796 165.91 li
773.987 165.91 li
773.515 163.831 771.656 162.275 769.428 162.275 cv
766.849 162.275 764.761 164.365 764.761 166.949 cv
764.761 169.532 766.849 171.626 769.428 171.626 cv
771.56 171.626 773.361 170.196 773.919 168.248 cv
791.1 168.248 li
791.1 168.229 li
807.924 168.229 li
817.275 177.576 li
cp
f
1057.8 147.639 mo
1057.8 146.993 1058.33 146.474 1058.97 146.474 cv
1059.61 146.474 1060.14 146.993 1060.14 147.639 cv
1060.14 148.285 1059.61 148.811 1058.97 148.811 cv
1058.33 148.811 1057.8 148.285 1057.8 147.639 cv
cp
1063.46 148.938 mo
1137.38 148.938 li
1137.38 146.6 li
1063.53 146.6 li
1063.06 144.521 1061.2 142.966 1058.97 142.966 cv
1056.39 142.966 1054.3 145.06 1054.3 147.639 cv
1054.3 150.222 1056.39 152.316 1058.97 152.316 cv
1061.1 152.316 1062.9 150.891 1063.46 148.938 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.1.0
%%For: (user) ()
%%Title: (plata_48.eps)
%%CreationDate: 4/12/2016 2:15 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",Kl!#)gddR,scSPTRZ]bMcmgG3[K/"Nh!WfS[`7PMYG`.o0:?KIk\)/Z,/X>%,]9ruG2TL%0bY*Df/ubXEWN*>]]=6<3Ztf9b
%q,[Br[@E@`0eL;aZ2ZQXrNCSBT%=LJh?99V]/jUpXo:Vq?&a0Dm<58\mB,KYIoT[_=-[k%V3:]m2&bjHF'FVrob+tfm("L?H6XoI
%]?Nr4kN*-Wg*c7I[lsKn(uX9[pJ:LO!$+N,5#_W/ZZ6S#[qLn+2>keKkJQMrhWoA9rHc*Koc]J6p,pXs.-ae,&&<!5B>T.ai5](W
%3i`Z-I9pM\;8Jn'LH/o834Id2UrU4?THKHs`t8:0s"XZ_`;`spnc(,FiP4l#.qe#b?I$AQ&^.C<JS4$`(Oig2#Neh`Lb,f'@LF5I
%btb%^O'$%?L66\$/,]FoJ&K:P#E7"fXLnZ.1b9jnL:JH!o8X"Sp;=OW$Y%Z4d3&&FcaDR"W)APbU,rb=r_`VYctuZB`".WU7auk@
%WqW4K4GJR&04)&%;$6"sK2SJ]HC"o[r`;o9=1[Ql*u)$:(gpFHjT8T-lTqj^q%]U_RA,fA:=M=B^LL7I8N\qER\?3,ni$E\*/NnC
%4NiVobR`Xp\4kJYJhs\u-8BihHg(O[EPG^BYIE)a&/m/04e\jeh0MdEWc-u#r]c?a4s9k7j8Y#5K(T"je;=D`Xcr-R7-0F+X!90A
%VcDJh2mFTRps1Ngp(iU>7f-HgWrBh`!u?NLOG*]_YM8P4]nMFFrNFiN\)?>?0n:?i]BqmsYBAFqpV3"$[J"=!K5,P(*<5\?DMe<J
%rkJ8$^%63[pFrs^PUcqXh.cg"2;0(fR+#X*GgNCr.bu*A5r("Cs+"H++I6JnKMhb:-D&SnSZ(7T>Sp1ertkh.;jO07!GT.RA#5LG
%5Q(W_!#Eemjc6s<.Wc$s]?qHL'@uU6UVENX/:7=]5<:87]\S:fN]NFToN8fSJ:G?WCXcdC*`]iFdnDVLf3:VZ0s&gjs4QgH@`<(Z
%79T%09TLg$Ie=o,<hTI#j+Bu(!bR[q<U7b5ir;srJ6Kdo/0),Lcsl1o9';pTc#%S.]o1Zc]A8S(;gt&ZdGNSPpgloLqGF`0hr=28
%QRW9("bOGKhop%RnuK-\i5^*m-#T*@=rg)o#U;'ik31+uk^9piRRnBXIPjpUNI%cW\PqPh7S^YNLlQrWqGAT?GuS@?95>dN-eV5r
%^/?IeHR[1q]g(HKmX;bQ]meJ71ct6BZ<03Tqm1SVCh)mH;"$nhJ@D!gFEV^q(R7b6RQ76-;CpW;Qt>M5]!=)2IPhT6j3bJEY]>/6
%Ro\Y.\Ma06LKEThi"<6/MtJP\30ip8#sYQTQMtVW>4CPZZm&$NN<@aN)$gW+DC%kQ]r3l)h5J:@XPE(^ba.fir1EsA'H;L+1(E:#
%_qaMh0Q!BH7"8/S"$q&Ae^#oF,Nr<r-7=Ea`.Z;i/^Bue5oHI1FOLjLM^X'd&EBtI(?&=!&UmGMKYlS;U!^ELS=#L/WRioHJje'#
%VTh5#''W2Xl&=:J(>371:8;.@-H`FC`;ZEV$IN[j)GP)irmer!Oj'^I:of#oYCfV+=e$P._gFb9cISql-(HhqWn*iR?gUqoa<VHG
%Ssn?V)t%7A:+O#Ve;\ne5ZP--d00ETKYub+=h&A!)`4k1*&1kk@l(.1k.!HJ2NlJX,bmZj4MKpTdOFCT:D0thM--c%6`2?\Bkc6t
%HdJla]0'!;0QW;<?^nT1ZT`-hX\n4WQc#9gG[W=/O%!UtL<DI)JiP?F/$N39c>r6/:i6KV=bLh%,f73IEm>knqe(S&BAEpinr;8g
%H>aD>bs=%M@:7Ah0UEr([#!fZZ.pOh>JtQ?=De_o@IW=4XB7*=3-,_UX]RM)R`d%rm)O0Od2u6Gkb:sjs7s8CkiOVViA2bfEc8`U
%R3<L4okVP1O#l%7RjlFPjO9:XZnWCT;pDT!]NZ9GHM'mGCUA2im5JZS[osQR?CRZpcQY^lX'V9i=jJugB&7jAcd$i6J';Snj0?>E
%A=Lb>hEY-ZGOnhfEKWO>7`R+74S,V9,r[79VWMQ)OJEOi#E;?"]A;cF/$1?p2uLeIj>4(L\FWe"h28?\T_`2&!bU*Yd2R2R.b3a]
%>03Y()Yq7Is%d*sU?iC[WRTg5ctCUlY.04K@8+sm1i+(u`0g(>(kVTX@f.U+)#p#8O)`OL\,,3&)6W)eX2^9h)p6$9QqO@?`[qL-
%2T.C9V-G`dF-SV6g$Y8RMg;J6at[ZI+@B[YR74S;Vl3d%A?`D]?r'RQ%+Fh0W$IBMK/;7;N9Vof#'5)G<4_c%75O4A=\t]jRIR.+
%Q="'tTD?%&;=Cj'$Pnrds4$hM2Rd!=dsIAM2U)_['m7hICrs6[G-VXcS(Sn8>)U?PT>`FT<,p-O[*-M7+Npja2)FLKN$gIjHRIS8
%G%7Ql7K:K6:q&EnE>-W7R/%02]"=52I?:9o@`#+`RQ!KKCN[:-n4(F?2eBU+"rZPTXF/RdFtW9U_[MaY%#,oabD^!mZ`l,nZT7Mf
%hK[kl@q9Xu]M<C^Ki]c`@RKKV(uH4<C#0'h*:JKmJHt421\b-0Dm(o6h,tic2u8D`$p/Ron;;f+@qSQ?.*,j5k&'+Go*Yn#7r?\B
%-VJlT@<l8XU=*dFNMEGg*WsKh=toTj[,``J=?3n&I)DRM9>1fqfZSTZ@`i=6DM$2raa9NU*BmV"gUtch`Hn`:W)P!hN94-:1RD$8
%ZNBJK/@E_mUiR4;Y>[)YjbEak[6H#HbPo`FCr_48C`[3G<+f%BH*_MgWNpM5@^b[YBnij6k"S/h]/JuM,Kg\c\\,9pK80>':;*61
%gl-?pSnQ<QA#D&pNc!9M;'j-*AI*=Vpm>OqJJ@@UK^)%NAXtAPV,jYWPC=CF;P_d)Wmtuu&ZJqS1^@OA\M^&dn[-6W?k95]ET+*h
%(m?8ql),h<V=A3[f-h_@\"Wam2kpuHPg^6o_i2r\B8NM>1Hf$9Fkb.l<h,:HXY2H.<\;M6>b#PD;.0Y`:8@DS?D*s\C1L1UeXMs8
%na^hQi!*H1<kT),;1cb^PaMg(Z=q_"V(WTG;._7A>J1>);)0$F=WcrgH7)=NbOFY5/'8<MqCmh9R('&-cM+&4(OK"K8[R-.nor3B
%+Z,RM]dPhVCWPSOc2M%6/>d:@At-bGPZ`oeDWG+<o,k1Q-'RLJo;6i=(M2aq>P0?07EK)lApndVe@d851i2#<rU4!fRE%HJRB4CC
%#2D'4EkX3QbI!UTd1c+qZ,?K]`3n0*RPhTPpD4V=:5\C%Q':*q7%MBo.nd0Z?>fVMOgjCVj2KYL269lkAS,B&Y%$"qKjDmK":MiM
%Y\OWY2A^ORV[LS_?+X8->(iHXY\FQHp<U0^$YSir3GT#'[]jNHBWFU(KMI!f2N)i;DAeo$IpL<hWs-;X0Y7*7ne]1l6PD#*d:*q=
%LXAEdYGcHfW;J]e$)]L`,Ni[kbf>)#0[kJ769?cu(2jRlBV]OqClc6tA)8hVWOHWi=hQ]hiD"/Z<%"^<MjZ0u+LKT1Xk1CYBdSbG
%\<gfI0?s0G29G\J/u;,q*)jS9`lrIWa?TAFPj*9]c<Ri;SE[oj)EIT]3rBHeG9).R?-e@bksZ^r\aa7^>bfba:KYrSF+:Nfp%o]f
%obgf=J+>Ms.7Fq0Cs=9$;4D\aE93pkffu+aDKa_s#[R00UB^K5)hRHZ]",0L)01+k=VU4CMY`T,L/H]U1`>X/7KFB;(ptunal(CO
%%&<YkPJNbuT\Q[D0:Ga&Ms6e5g$rfHGYVkmbc^tNc&jsShSS/.8^??_`"i/mDDhSK:AWf5p"u6X]B*N#=-IU.rgVUsMtPsVHDZUE
%8J^X,MtPuHqX5.f>-.bLh"i[F[VuE&1=e6B?Ag\u)-\/MFbbFNk.=aeSQ<a?mali%os:tjQKL2=h@*r?OWJ)H:KsTcQ;kVn7\fqF
%AC2=go8>dDXAn]sd1"GL5FCDI'0<_\DLmGnb$lBG^6kAhPJN[u\n;QjB%9MEI($0QbYP[8XkuA)H.tcBClom1RS\nNfc4SE1-$>4
%1taFWaVGE,c<?ZqHhm!jh'd$?K5VL,_q\6VDm01<D`=EiH8hk+\%@pVaE?l=rbNKSmUXCN7Lf,o`^C90SXOC$1<<Gj:VAdPO*Xr+
%1ZC.NPg_J.3f=*`3+ks.Db?,s*+^jMcDB6-H$lpLM5oL,FKZ7^%t?@J#r9,C4+DCg^UoYZlBCHmg7sgV2^5$(8@m#edNoq>;a("4
%CIWH/GZc:u(5\AHian6s=X7;hM3ktuVSY.t:V;K7%*QC:&hc$\JMtNdnaj,!@?EfY,`o02OWtH#c#j6T`a(E@V3#l_"8&(+P'//b
%%bG8'k52H@//JH5qIL=CA6<(p0bZVT(RIiiG>>]7k:^FokMR?(O,\JcTMclBL:*BgB@rm%qW,/rM.njpa2LbH1H[[02o%4604$@G
%St!91E<F\7\q0)QrOTLeBlX$u[+)IeGB.e&WO;c=&PqjH/h+p_.GpBMlks[L>9%:J)4+b!O0`JD.'bbRl=g&FrgKEnAW\.RCTED-
%[YMoI>HdbR=YK(#B]qpnN$`i,`r&#anXgX#r&;<91P:6]l^=7==S<q*]5\FOBcHdnCZn3OD<I!+SCWX33a'DsZX1h^I7qp]9:-IC
%bof[qIrL;5?oB163.t6&#?;i*-<q_-aCG/.neg4-O"j-Zc.qJ:JfBfla<JMGO"mu'm_"PT735s$a-a9+=l_:QH&Oc*@pju@Y@Q?k
%[><.H6@<t-X]51_`p7e2b;Nu3h8G&1m&)%*od1q#WkWgPdZj0+39o,mePS=n/S[bdj*Ds!d:nSd>/Fj]!37tjm_ePj,El)kGZmEO
%q$bk%SQ:&6W>kdU7'13icn.OJbB@<6dEp6n\@?3cERE.mU7j-%h2T'\.#Y?;gbY0U5tq$E+X<W<&YXY8M`]gfEJNVVgMUVkV&7mm
%,l.Dj5#!^+F-UNnXt0$`4Qr@H)ISim1F[S/DEl5WG0bKQHB"8_9J][q[6n8Y6tqtNs(6-Cas>9&D"u-sb)C95as+^hDt[(-oZ=&\
%rUZ8;>q@C7BVbVQ[qsoe'5hn)42^KV3QtnN2`HSQ_s?IPg0)@7ZPCYpe$;D!2kA@%LuoK#g`i1k7!$h8jtc^5MeMN*6ut;+He==<
%k;(g20o,:(#,rBsg`i7mKQE&jD@t/G_RUuA]ij<!-?8/nS6I^d5X:Z1LtN='hRD7Io55ktKXZd#DF-IPnKd_-p[q7-7j:<NZaa(G
%B#:%J^K7-mmZ@?/fn%+2T8O(4()LLTiI[$Q,bl=:Y4;h$f1m9MlK*>P6g[XF>4;JpbEOIBom\j)A>oagZue%_]A>>^U,0qHDo8N,
%MDplsW5if6gV+irFlRMM=i^J8S4i&'-(oa>M_O&Wj^iq*ERnu2k1?JjWg-71NCH&_WW'QOFAT^qSi0pnB+V%]aU`!nf7]$![p/2^
%q(0?fnr%3RQXT&QDpUYJ<26NeWKStZfY>K%rDP=0@92>6>R9G&\8E^0^qVWOL^EIu/>\oRRT08bD[nNSCeDi!]2-C,ZdIlNX38]<
%=V56Sb$nhM95cH#C`5MrHA1U*plh\:JIKFWY3jMASTZNpP(;h]KtFg5M#Mr8d?S#^r^St;$_M+k'E.NMU*F(Wk1V8qECoUL^)'#o
%F3ZZ2;kEsE=X:WZcE>8C!FBBcYKJAp<u)ZC>p#i`@*c7iU\6$J1,r3S4Yk)4MFNfGS=U.SDS:PIN&!P(0NU'k:##3,I?e^DkJp'*
%Io*,*bf_Oa`u-dKZT^B]O^Tt)c@uaca`6GPnBB4:=,_eKF6!2ENUrN'?9C,*X%q"6fY[IKO)(l:>\_1d]YioE]deK+D^;oVc_TCX
%)eLI(hD<29gRMVEe>rY^%/1[aKaft^LA4Qu?P8bX/c.>^jbO6+@:[X\UpUS;pVuQ5RU[kacGmO92qDTq9\_2fkbd3rEO3uQc2AY#
%.lZF)M3SKelHETfEICueWJIn\%lcj9a-TKT\@m#dE7AddfU7@\&mS$oToO'PD8>bVM;W,s1\2j4bjq@n>l)pVUG<haS@;?PpC?jj
%RYO_k5+G't;S>02r5Yo3E5-F^V0D)H4)*e3XBRB0hdoMHC=H1j-Da#/H8q7'j<c<YhTm(MS$$A8$T4E^R[H+lQu,Q?EsN.nn=9Gs
%\'jQ4AU-jU#'KpbV*;'EVTld*H0$h)F-67U;GGc,?DKd5HA??_.l80&#j8tQf>SNKle,`m9f9H?,=qP9H_tege#LO1O;R+(FRm$!
%3WLf!MOG92Daij^(B*@Ps*EL0^BOPEK>mojGFuQZ!Ym37g8@ecX#oNNjBbhiQ1LrDg[E^dNg"q9nR&aUNCNl::De]U\D;&(_Z(+G
%(F_SP50W+WKg5pW3nGM.M#*eJUMBRcD&kA`pAYSSrKmHFpX_Xj^D4?Y,J4W$#NP>cX8Q[hr<ikldV$p^$CJ6)TK98B:"YgrW]*#!
%8.lfNIJf^^RhPea6NrT>pn,4b#+cLhi"+/B9o'/J:1+5+ro*a7j'2#.C&=4^iZFKNH6N1'Fi)ph!j[Z,:4;nks*=]qr;c1[BV+"[
%gukk1Y4cf/nIUH]P[&hJZ<cIg``/QtC`jqej>K)u1noF`ikc_+12-g-?r_A4_n_-jVVubJ?Kd&siJ=KdI6Ic<]mc:oNhPu>M@]a'
%#1\4upV.3<BoTUoT%ttEIfA4CZ,.9F/(I;/DJAtSZlK#<,Q.;t'@8N)_nhXR'e0%1<2^52BkfHZoUP!We6"Csm)Pl.c-ph<=oCR"
%X:j`q&k&RSmHU>NO\N+/LGl_fZ5NhDebDpWl32^^b:,Z:T&kK)c?"IOS)72fW9NO&a]NcHhT=4E<q#+19"28nd?aiBr*a&N/o/qb
%s#KgJF]r_B_d8NcKE<_^ku#r[c.XF1F&DMiR1QgWDG>:-JZdD'?:GU3l!cN,8UmX9r9k(Leml=9P-(qRR#K0E1:$Q?e3!]q7Ub\F
%lt-94B1'd<cK_(SD`;=Er*?@\Y4X:.%H8?7L*jO0rZ1%]B_"Wp^UlZgCFJr&rgX#fSc_XBCXfCDa,HK'7&I#?;5H!:jD8`GZW`Gl
%M!%199J7$b8uO\*V_?b7\L-b@k,$C[4=cirC>pRZ<eFa8+qrUtX`f&]4K%R1p_DoSXM<YpT23bMZH<T*1c$`eZ].*?bapec%3GYK
%[[F'a1[8%Vi*?58b(Te9Aa\&9L*Vu.&Sg/"Cc.rcL:[/?0K2De$@AY<PF38,R0K3e\^EM\<6h8o6+\r:`;5lAS$iq#W-.BN60/BN
%g2;"48UQ=O/%s+O<b^(D!FU7oKfbQ'/NH"AST\A^>1h"5#5r`5YgVi-h>2V1WEdWO!\%9>X*"6:m7OjR@s>QJXPBdi!HTMlZBD;K
%imuB)HgO;!*s&EujUoL2?a_(\D@cTSo57d@-(tchSOt9pk'H^_TV49X.`6rcIG>7XWH@Ym2__8`J6^7`\ZY=[QJ'K)A["@\oXl,7
%rLMT,=!G@F-"nBGG$mts=A?7TXZn;K,Llpof(K@)W#'UVLiUP`?iAbTXkp7Oef4;]YG%)FVYhb(KmqO'/n'/(3KhXL6ON/X.dC;1
%"_9c_4,cE`#,Dp?&,$8,%OaZp:Y;m76s#A.>;uP,\'[CA1_-;+T[=_Ool7U-)"XJi@-mM8J(.mB38&$9%8,@D`Ti>8^kR.kW*oMa
%b0_;.,=ULLgmMt9d.KlA($0c?DYm>WDG-jn2tHTi\]_irC!^P3XoC$=U)<B8$@e-+YI+0!*)riab?0ljBL1EuJS^q\.'F;87Je=`
%K`Q=Jp2T9!^+u<jBN_6H`5J*J-V%REprVE::$)J3JdQq;5DgB*.t))iEk>LhTZZpE6+V+[WM.\;]3!Kql0l[F[odaPH>G;hKkcE(
%U+JIsOD=e-FZYuImgVob5NjjK?hje-%E:4QC5![/+5:5S7_Jmn!:q.ZJ\=$uk*##9;GepUEX%8RBG/kXX\/8,coE#7S^m`YVtI5C
%QP$,qj,2#GM"YT1GYpi:XI7)mD(eN0V3Z?C2=%BuI]FX&.H<\75hG:<Q!=KMC:d].C+3n^>CG>qlbCKKZ4+ub&9`3"ptnjB-Cq#;
%D:SHmHAcp1fTF%_kjtjR<Za/T7JlpX1UU6nVX4]PPmhr.j)M.:E3-*cQDu@n\;b70/_&oZ;k"raI:3eL1ui,*,!/i&_fs367iH9b
%=5S!,hpO@:9[N2T8'U,7135M^7os@UUn6(@S7fk8il('j2G"@C,c`E?=oH`3c,Z#23&Kei=#<JVrW"u_'<&Jr-Zsc5Rr)9SRm0Ku
%]<$3OTq<qbd'9aR1uap@ZnrfY.mYGK`%[LKUtgXDJqN>WqfK#af$<ORH:3OI:ea]L;)\[!UiK5qh6`dKWrq2.!`"/!h53&b,306N
%"B*Us1&VUskRLR6Poi<FmSqr).!jp\ND\10fnOJ*_j32uLKMHEkiF&OM:Er8SIJb&eS9I9)(#uNUXpHc`/M.QC<>+C$lND[):MsC
%B"k6,Su&plUO;KXF:,G\7WC$SAa/FWrkXqV\Nd/-m0!hYh=auW\t`;P.A3_=]erR.(anaW<1CWTa##6=D"fTWmK@<H>44C#pq[66
%S^M`-S!WqLFL9b7B6g']MIW<AoZ^#&Z8Y1D-DSk8d#2:(B5X9/AB8qgeFj(K)mQ)3VNnN_HMp=I`d':3+e'pO09Q](UA&/24#L!-
%7Org;3jjfL\\9Q9ZnC`f\s)e*M+"nZZP^9!/%#b9Pbt)Ua39=T-qZ''T<:LG<H#`*PA`^6&l[r;ObIl9I_.s^C.t;gP$3gJ0W3MZ
%EsZpsk+c,JoN/3JKa=Y>6J:l*<_=dB.:fa_7T3$!43joZ/s)I=/kJ!<.$0B6@O@Iu>1BUF\'e/7WG]PO8A^DKaXF-"*(sDuEAKK"
%J!hu@<?#4Yd79>;o/VK;j5`I')*sdu*HGYG]=!$u>DE3TU79h8atmuM0&#.],\";0)2hQC(i<UKH%*C1$DMbIKP?Aj@gA8F[u#cf
%9TZV_m51iX`Y^4$<,M<Jl7rqDlOD*M)BgDK=JO<dcl@XVS,dBFRdB,iZ6!mi*36l6N#Q[j0ZMIk`qSeI22(Od4)u5DH]N&f_A8-!
%K-q72]BsU0/>L%#U(.dN,e>V]e2jj>9LPFP]"N)(W4N[aWgQQ:VfGKUVGg1n+,JDl"1>.##%Cc"ZuL3=lK;rB$.b.NFh25QiIk<r
%XuA>*A("-<XWE;!V,u,::?ra_NMgJZk7u3@Ni0bl%J[3A#s*`m0_Me"E,1i^Y9F-D[rXge];Ruf*fXqeUl,!c_3"F<2:Um[5_kHs
%Bso,C00KE:QECj2h'(,$F@VFa&!?/)Hm,@.(!jKA#Bs#E.r$%lh6TXMZ?#!5".hs8m8ds],N^JXRTOu/<e7W)r)FW@"beT/MQM[C
%IAN:LZN=2\N.7.e[(&8_=nMjno)SV9D1sU)YNu6h4B*Zh/!`Bf2&ZR/0\bF=mtureAETUf3f0W70a`nGJY^?B8uFJ%dR6^9I'BHK
%p4s&0>+*.I5g,LGl`G00=%lhuo_K-5^T0kS`kMHB"[pMD8iOmYW14MU;%<d\me6,2rk+%j3D<sNUK1PYD"WSM]=@6JT$C>^p`i#3
%"6IV#dX:J"O"lChmIBX%`kU5[>R.V\f5B]E=ri*$e_j-I/+lrGhW!GS8;Ak]TO>m7"nLjQD.HV*Ecm\iY2gK9rnT54W.dEMe>mt>
%Y(oN&TYc&X,4k(71L@@8%u()&hmrHKW_gBq)mh6fGY`dAVSu^>S?(IlB9Hc)FlD;4fh:QA2tAXH1\CHNFT)X1a3<)dU64AEo&Hu-
%:eZ08?I7PR0.8/1madk/X)V9f'I2=kouU&QlrU#fbL"2tC,8_t*NksfPn%/GY"*!"V^j<hNN4jB?H*_r<r[]JdEmOeZpC12NLfiR
%;-pY7mHR-Lh2I5a[sY+DOSQ=iDj'(rLB>Q^r.lOEXOX3D85u^"J82.]j8'%"N)Ck5XLD`\Nbsh%E7pt7$2gD_1^BEe!/nuH5O1-[
%H-BPR:./TeXYOh$A$R=)9*8QP=8L>7`LqM1Wmhum6;A/)>Bu($fg\q[dPCcg0uT6/30]KQG"AI;S2f3rlh.%^,I+R/.P'2Lp>d%D
%-lQG&+,AV<<_Z4FN/0BUVX/_qfsJXf93:C5+pl/kf;aG19$0$N_o]MP;WB@nT<QOC$-Wb#6@ZGUQWoY/gERD/lp;R3@V"A0PO@+b
%B\q^OY@pE^p(&ZsRjHR=]'!h19P-=uXJAs&<R3g%nJ4mS141@`6*d&fm!u[a10MK4_=)d!RuGpT;bt!<)W0*Am#\WQ1[\MYP-*B;
%_;&<\X3:1$X*&]2Y>B-dI:-4/#U^ppZ%fX)aYYP<oMPlHX&/2l:FlBaj]Bt1n#VRj6H9J&0E=J'B'IqkB1ukDJ;A"8[L>.UE-A9'
%LU)W/mCg3K/ODF$A![5OF.VdVs87-%rK@KPPn2%km/-Z1>FXI)k/H&"ldh!BXlZAag\"1QGLq3=I)ik*[eY+@kptrM>5??o=.A#3
%eM$;lYC_+uj4lAJ?L^PUI+c$A\c+2\BQI[oe(a6&ZrWlfc1UY0DG9_t^NKPR9mLftM2o%1:S(UFq>>m:TsDhKO&2KV/DXP%5OJ0&
%5JD"qT2q6cc$$X!fK8A*4FZSO)3g$(h=k,<)@t[l0uYs/`G$g2]7,"e^O,SJ9At+Ws))qXP]#mSk/LuslfMA(hgA[6^,IGlmFKRU
%(tN#in'EN&Z`iirXi=u5_qNep7=Y3Os(#jro)4$BC6j?eDEN:8ShksjpU7i-Iqur/pO<tQC4!Fu<e;E;$V)^k>.bIi.^]9k'E2*[
%>huBjDjIgbS<NW*_EIeqj/pqVh]HcS5BpDdNWtQ9^3ak_@_GsI>iK,`a#dqq$XU2SXB,7:rU0EfqR79KXiA%e%p$9&^C1J2U\d8Q
%J;9W[0.q&h``mreFgKGp5%m-/nnNU'Dglt0p\iY!R9f#WpWU[ECSkWF/\^G^K9l*N7/hPfW3+UZ="DY>k,Tk&/'H=@_`qgT)*XAT
%D/SfZgj-Z@*4gB%6ZMS$GNYs?h>[+mj'D'DRWWr>/*$N6FUpldl92_2h=B6Gn%EFD;a&sJI-@[<"asH&)s5a6YDTBGNVfPVO$@cl
%(_;,k`jd]8.)n6[^#uVL4FUJf&:\Q0hg*?.\!M<QF)KQ!CC`8sKCSa$e"('Nq!@p8@.aH?`d7$mlYij`AW;8urg"K>"&rJXA/2hY
%.[Wk)%Zr5])!9]/.\<m,#3YHCj*gKI<"$ac+-2=mX"Stj<%8FHDL&-uheYD.SieSE?W?oVK=fZ8Kk&:q'e&ia5MgsPC7fZ5I"+&9
%Xi-K+e(/H(MHeHKGFupHp9@mc45-[=-3_,KLQA(a=b"bE#rt@-4"'1NG?`@J(T#AopYr<]p?MT4ek:Qums<?5O-Ul+[DQq)f$m-d
%9cl;/mp'B,`N2:Q10?"@)s3IV_Hhfofer&bd8TM@]t&UI^KigJd2re+Ath4Ue&T0%TmI0PA$fr7oCYGUW<S,d<*HljH+8:]*Ic^&
%2)ZKjUMb;/L^p#XbF7o9Oj-b[/Y'I-REfZNHnXH?I@2bVrU;>S$Lh@2Nd`ln(A>L[]ddlk]a,&<j_:j(?#+n"Q8GE[G./CHPP9sF
%f.TAa[.X@lcBCXBTGXUtZsVV%]GEk:D`5tpfZ)Uuqt=uWPB9h"CUq47\U>BNO4TrSM)JMola>'Ilb0mM9]sR]"7+p:^#r"jok<`A
%'?9\'6WC?mO.X)[oHGp\r!V.6)h,J%I^IioWAP&Rhd7(!lVEg=SAEm2k?d-B<Vq18h=4gJZkL+J!6&b:2KlgU(?t0:[pN@9qqg$3
%kkIHR;n`*S5;%KrPX^@rl2.(pPegBaGu-J:F<4;j2jNQ6$6M8,iPhR>iT8+T()0+eH;&:`H0jGGh_+pk2RP!pdJ`'-iP@Hi8iSAe
%:*/9'@"Nn0DFH7dgsa3FYmMViV)Iq,cQC!1]%c(E5-@)#L4&S6LA6P9O.SW+D"_Z'BR-ql?*D#BTl@K&jLG!Ujn"bc`fBqXrQ:or
%J(3KMa0.DiD)GW:H0h`\C7tF>ZhbnZoA/Z2J+3BdTm?M%D8Er9lgBf+nF!c&F*G7/M17Yl9fJ[]dHT@@F*VKsRDb[`1&=D1P[X@5
%/[UVolq@%Jn#1'9_-`h=cXdF;Li%-4KoM@\n#d?8XclPO*@0<'$]Xe7'P1EO8G-.@il,;V3fd!<rMT4EF[gu53FHu=PsB&6;1VdQ
%-06ml[BP4B&R/o'<&'>%ZB_ZBBr/+b`f5^(O7WWf+0FS,9TWne2*!DBN]1M7I/T%@KHo'DZBu(NNU"?XA,A3+B-_d)MFhmors7@P
%0kZ*BVUA]0$'S$\PHg9>n#AuF0m\U=9iJ^0h81\erfV<l;Un!cVPU:_#2MQ(ZBS#H92]hb1aCc@$($p:TX[F^.&i>R5HS3)6PbQA
%c1iP-WGIkXS]<P"3nrq(p1pDP\8Tjs,^Q5.m8KjoN#3M/O>:@tAJG`O)<%SFUa`RWA:1^A2lX_tV.$Kd.Y)@bR6OEPL.jQe7^&\J
%XA;6ZD9*>l/J#P1I(7N%ia![<ot>SF1GIuVCbZNVKi[1%m//.hS1cs\q4hp,mU`H+BptAbbjN1#'5//*aWhkMi6ArpdRjK6dH8#[
%E9m&>]+<6J\S^F\nM,itO:7m4*@`nc%G[q6=nscYhTQN4R[778"7QU=INBAEq<OZqV1O,@pB?HfFHIWNn,\CQg+NkaB4^n_.DC3'
%e"O`sSOA1Lf$W6h;1Gd[o=2HEV#T-sD2.dGEQiFt:k`PpKY>^P57@AC>6iBY&RJO;CE!OXd6#fg,p%lW?@@0&n@uUq/AC=3qOY^"
%i'.1P=*XQ?%JnGGDK"uLme6@LY4)b@hA/fH?h,tZaH$i``lAh<jbQ83jQ?>X^IBl7B5`)dX7_+ki)9%AgucnlD;G1R5$AjB.R>dG
%>#L68_XTnh6Xd`/r:0bs]Df]P>sE,]3sXC3OU9;'oXjQ6f%O6<($.=[&,3$m<O"lE(>Ne.i8Hh^M1__Fo9G*WGR8<TVr,=AgOHGU
%nbD/<CAmC\2:5cW;e_rJ-"qeBUnVG-Bs\rlT!L&";XHQ5ALMWU(HP0'1+MFrs-0Rr)@$Mn)]3gun3E$D86*RNkiF^Y<-qmHIe#<H
%mXFfS+DTf=$u=I?Q/qi)f#'.t(e/2m:0d;_2oW,4O*AETQ\sA3g(#3^/=a[.+ll,ZgW'38;<,hQIJ`m):2-U`phnmqRmF+W)p<G,
%56lYFr*o!:_'V_EZ2%QK!X9b8(#HSeH<2R[XMmCPST!CEr6)q@JPglAg/3uS1-&ck]#;>9^A)_amIAZ]PET+`^?2+.o.RR*?TeV6
%s56Q[hDNO"I+u6>T%m4.aFo,L<bjT%S5Wa(K7?dE&I]"F9)m^9$O>rS*Q4NHS&`k3<IVq6*;c5k00e<J&G+nIc@!BGZs3D.IIj7M
%D8*[uZ@62Pn766@7AtHDlj'n3cRsMGf$iRs0X4Hu[gMUamd6NdbgXi0[h&$TWFi]#gZrL)K-,g-\!<"N_HOi*IG)!$3mUm'X\P`S
%0V?oE[Eh>,N@@G[j'bWlAK8^uQ@p5BOq#Sbgb56[dF#m@9PT0sp`($[o^JNY?7NOYXN++$IXO&s1.*sMn1Bi4]N%/+?qlN,o@/+A
%.-;%U/":=XIpC,Vle&gTC2JlF,,jElk@_D5>lCn@))pf4B_<SGp)TX0-Yg+pHm6f!q^4#Ar74nis!^]YRQL)og"IP#T:i_*HTR91
%H"UXp;qd!6jk[WA1Y>rZs0KFgpAFQ1F6u>OZJtSIL\TgWk+Qc1hcTmA4_N!\HnIsL,m`]2<Tq=rlc#g/?Y2KVGGjf_6-Lgm4FVEW
%Q1)J'P`K88HZjVr`+XQNSfJV%6+jPZIPiO`Rt]0MeUtlZKGPr?RHO;s_7GB1rSHi*GD5)J-B?,cA[qRU9:Ob&E)8MR>lD67rt_+j
%YJ5R?I7(Xg5!M25"hc?L!k7:7gX=4?`G2\Xlfl_Bo^qs]c(E=^Ono+UCJY:346Ln\q7C3h5rYR2G's&I8nk7F5"tldSsK+%`C!D2
%=R"Ef>E,M"#"it4aa:V-s)E+n':QhU#s-Wr5jASmg5e^$0p8qJmI]QqaetDu&Uo%&g5`hh_JuhiDDd#-JRL/1XDb9/^M0oIUW-n:
%Qe:TCPNmqL0R/JY$AZZk5DL!7:2dcDjAg,>X`Uc+4nCl(DSP%WpIr/X?9I-?)tiLZia2<I@*<h6onRkngRVP&R2Bj79.um%_rkB!
%IGl<,Nm*-e^%Bl_hCY64cgQ7(r3]:K)k<`#,K5PPK?3F2C8:3FhKX;>h?b\-`m3i6ViL22o=>+Gp[9/g:@?n%!XTrug%k?:?Y*rp
%i?mCJn!n8Y>(U57?9P_](QORFhpPKdfq.8/(.g*O)eEoMj*uLqTdA%RPdUs,_0=\i_sCd1\:!Yc1aB2BGZiZZ0)4DaH0BY5C4_gW
%`^g`4(Fg7p4^;\Q+%s'Pij@`icRq.8Sp#(@BWKN9m\fQ1[OrZo?Yh_EDng`"jGWUPPH;Y$e$psj^T_0"pKg43ZI>ZQd+`Bsr:g=,
%U`cmWhgl'm;lFrBRDH#WV2$-'qLt7Xbo/&(aii;D@]^M#CF^H&[j<a)qj6Kg)KV+trdNgh+Y2/.\G:RN])ACK(;=Gr:ES-UL#qdZ
%NDcIt]$58o$)Kp&^]hQ^fA!?5MD&=SXE#E.H?6Gkg+gp>8o'-ugMsF2?\4-mGh%.=.QlPXmWI=E?DVX[a:pKA*^]1?4[d2V0>?5R
%NJXgV8D7/e*.0;S)Z:?5pss0DetZdiinV$<;/!cOZG4;%Hkm:-p7nI>495&8rGV5sfB0cb&tWclp!V8pZOgGjH$uSi4Eu!J]%:r;
%cFf4`2sm_CNZ+/!4+b53ho-?4$i\PEm/m4[q<#[hraC+-89KCuPK[BaC<%A:Cj.K>cI1:uSYb3-=0sDgZFu4RngDup0S3@iN\9Im
%]Oa5g4&4mG5'TrB_"qW9IBig.L0!>h/CT%c'TO1612m2\XWV#$=iJP2m[)aV]3bY:R`b^Tm[$RR5m9181B3"ZFYY&mgO*#FmpBlB
%jaHDG[nDc'/plLs3VOZEfPIcLbOm9b^(]gWhM\jB<gp(6AsLr6DlYjI=OZJ5hPm'2Q<s!6[&9>7^A2dSIqTOV:-3)NTX;Adk?H3c
%_%5NjD*IFdPf$GE2lrD@p.!#.J$XW$3#]H;L*mhI>MO#FHSCLt25,m:YOqeD]l:>[YeRVtM6?5I[ITm\5*$_D+De5^G>?o==!l97
%hgbZKVt,9)p/^eTI55G.9d;jDZe$:l]B`uL5_9pmJ4$X%"ES_f*VoW\:N4AK?HYp/):K\`#9QS4#G#PO)/MSe"9CLhh&/e*.0+FX
%he?p*pi3N@goJ-Q(LJ^FQ#Jm/O0:Y\)O2Z@R!/?#pMRr=^VJs]'Yh)Hk1g:S[sP$-g:(=3oB6>>b\GV&`qdTHDsVo/h+.s4=;l-_
%WlJnY^RYj,hnN;ge21C4c$uGpod&68ZN6)2h@fRAbKhkDHrqkih='.hqCh_A8gfVrWa8Btg[[As8FM\Up?hA^XscG.p5T$TAV63)
%<!pp'#OTlcs)PLYm.U:c%fmZ`]ul,ThSTl5M_AFbrE5(;^>2h\`Zp*(%SYVi*O$er<kYoirVK_^a)=>$^7IPBSb0\"PVsUOa81[b
%a2X#k2K@Mk!42@\b!c:60(84W$BDmfS/rL'(XLq7on4WT7P(uTEoQ4.96A>elOM_KJ4l<b(S<X8Q3mkdS[DP46!MY^HJVFR4=jOB
%/!n4Fp!p(W@IHTGT?d.RA4i&J*5U8l.cFW4.0M0sgR'kOAJU4`g;,0:q"s[5;K5N@bF<Fc%=,0U/@>hg?q*;.\95?rYp.th"Ntj?
%G"72FRbA1e/Yc_Mk4Y,<Y_;miG%tg3F(.06_=8Pnd\?Qo((T*\n(uNc%khX)NQo-/@&(B@r,q<@HttT>8scq%bf4#TfP"'15'g'g
%r=C!dY^?4opZ"j.4#<7E(l`3Wfg-ggp]Sh:9'MAfIIm@S3(2*.@))WM`Te^IWn*Z95&/W&p\(8g$:FOSEp91+"OZn3_r]m9>A"/*
%JJ36$n(l<r!h1?*pWEJ=K"3-r9e5'"FP\L=[D+n;M5Je@\$5d7!G7UXG6drh\&-<a%g/X0\>A-":3COQ>Hn._4q?uA([Io]j`bK3
%BdBJ6ST\Hlf,9"o5//L/^btaLX0cEanTG<-T=n7[19t9b>5rh;>P_Bt@-pDEh(."Y>-Rr0I,e;)#J9_&c^Q\-JdCZ?h0eb3j#\kF
%]$\:);a"EhZ#'g9X_.]QhS,&aItE^9L6a(al>NhT>8\-8\,?tr9PY2qYHCh3m6XcM[GtNYV8E)kqU`2\IV\E)/:Kb^C11H,W3NlO
%Es'm2:kO=$hZ0'%06O17J%+31>Fk>omYC6nmm[314'qaXakF;5ZF,#+W`AJAkO6#Zg#mTifp90S^\.C'Ngn(MW]uE]h3AbFo%dO)
%O%]fsR^XFWG^I#[l.13YrI7WC/W]!rGeHjiT,k9&jbiD^cZn%b5E_?qO*9$9-g5tCUc5r#XN3m2-$?/Cn*S";a)+S<]F'S&8AE[=
%W:EINC=)1r4,p2#\2`]e\Y?"Y\nq$8q.b7!O,Cn((AD"!3IJl$*`ZH@@8!3c8\F2+&)W#UPBm0TDp#:iRf&j%;nOW6s6GG#dgC-^
%q4*t5B_h;Xs&rm]3V-[^ggVIZb\9"U^YLDlaIN)0W4<>V$';oe=.Nbg:[k2&p8$)k5HtiT:Af?7eouiC]1U`u7)J8Pq'F-W,isNA
%q1D%Gn[nWjrX9A>R'fEd<o4Bf[>:+?IEN*`/37]1Y%>63:YYU`ho(k;Jq.;*&3OTd^LQ?X:-Q$*%sT%bP7N$GCZ8JlhD3me;;VQ9
%T``FCgVD'FW0?rra38gpQ+%1V'UWGuRs5\_@6,<-Ks/`DDqgRIBmP'J&X6VY2I/hnJp\+rVmEQA*12#lLH6*/JXq"u^sU;bYpurf
%'=t&9MNW7Y`fXZ9E#lA\1M!:Vg_tXuFWI)_VJc]+T$XtEgbq'rT=:I080aIDe-beu);;`c<EUH:BfgkULCWs.%:`6,Luheb5b.r?
%Bj0;r!cS<!:oC\_2"EojEr@]_QKNT/p<4(I_WUk5k$:&*Fc?$j#$XiiUE#sbIEV5(4VAUt$klf+8S[@\@l8uT;&uX_\;l65PU/cb
%.Vk;>Du$nQ,L43-D]IMg<SB5,jQHo4,.%uX#>ilg?#B4eBOiZrBE@@--`/-K+ggg3(PY!5Je$FAEp/1*5-SlbEl'LP>)?)q@u6>C
%8<o(P$n4T%VQci8>s*'m)p/SrE<D;>Gnq>X%Q%^h9EqqD=bi^!%ZW<Aa]@7-"4iT(!7oFSF]]S-2X26/3!.W5OFF&1VKDioYnMG/
%a0NSCfSO#t+JACZ0Q`JFl:_7@Gn3Nu"qP*2&;5@R$7moV'WE&dMPGc:Dc2hOP4FO-8J+(%oRJ3<+#)MiI5$s1[k/qcl-SO2OEXs"
%AV^P;0Vb&%X(0Mq2U#h@AbSHj/An:;mX`V?[2O'2U$4;"dU(%R@\d*5K8LKuNX7(OH@0ge,dLk3oYE9"!E6DN>;h4Q0-=:>=$4rs
%p;-=k:>jedX=:>ejTBF716?1$Kkc";^u7HpU!fM=edNIrW@LsW'3tVe#S#$LCFuG\4)Y=hV^W?g^1$;M0ug6iBTf0%Le*gGUY8%B
%=\Zb28i&#CRS(28hQm:.IF'>EQr!92N!au"!,?I(c&b[+:_6=EJMnB;9UcY/V:'c/H$R<9[!;`P?QR_5:(.fb">tl7a=o@=f>,kr
%QC'j8#cSdEMBg)2i=q"J/17*s!b)piQZQCrH+X-G'*jH]Jn>obD<8&5CXW?4$-kT<ktj%^ZZK<A!+MQO*S";ShPLIR-pd\H11>"q
%JS?L/"UPk07*K]M5f[Pf&f:uFJfptrK_d^+UN`ZPoP&l<`WMED<"SFlKuUNrr*jA<"A]t(0K__[jo-+h-k,(q(kOt800+^DYJ:Pd
%D$Zg[*.$=t,Va]Q8P1`j5l9o`o6&:?3gLUL[NP\P`=^l8&#1j_G)R`%O<R]b6?4=g/R4(5^pUNmA9ku=d6&qt%*.K$%8:ECBtLa7
%b;p&QN/oR-*$*rAdh@ZIE;)WNh#p?jMKI-5TTfQCC0Fl"#)jBa&BM*N-8C$[R#VL]Amj)sFH#pj#2>GRB`eVZ0/1U8=!`DD#*:$o
%j$Ia]OQoMn`jMW?@VJ^C<s-MJKlR9-UVHjqLsI8jMLtkfmY6^=M8<I40U[Z6fF7@W9>de)2<[CE,Y4V%9^]VFQ37kTMpD]G\Lo7p
%/AV\GL9$Xn0_RN+W$J3;$B@K*_oEuX6;&iUZI&*77hTWB>D6g7coc,[QUcq'&EkfMEF*2]rA:!(nd.;F?nqc/'`;8)a.`>7Xq-m/
%&YuU=-lp)eZI29PR+P`<Zd^[03r>G_9HlQrYr'"4WKf(ip,T+N,UEL`QG^$.hUW-TNc[ukoUkB;XE>1q@)6(]5g7MY0<TW0"&0P=
%Hu9fS`LqegiuFai6IZIIYf9P\=Q/U^!i*5<fK%(dL+>sbHJ&A;YA#k(;CYGc0h(Z<D%!*A-E834gpEHqZ#.m\:>iIHPbJpq&IW?/
%G$ib;_.8.+0as#K8MLq)"0:nC#u\"lSu6X/O=6QGXAC,`3!L!.ILt5<?D0dqN."E8.7odYP2hYR^UI4JY8hH1=<c!t:-OAKFJ/bL
%(j#ql]E#2s/O4Hspm#58)o*Um)(A1Fc3)PC)(I0iRshET-L2Ab&LS=JpU.;:XNG<2C8iU=)$Rod\USD4!aG.j^b943^Bqn,AGNSX
%%O%pE@pkhp#qVHB+EV*:Y2tI%Y5kV^K?o03SN+\PEL'D*eNd.?c@Op3S,"b-lYOBQ38c%IFV%q\80KLbLl#f&m;P/bk*C2(]]8QD
%@RPhY=`YGS@9-c<kjs6^>j`0.li=QV'Oro0JW--+D#h;@'C&7KN)_!4+E?n4_/AR4_)8UE6j3]o'`uJ!.U"$]A3/KIf;HmWh85sC
%Us0H;34A5=g'hB1W^mgq?qFX)Ue3]T:BHC\,ZP_$prh,d)-dQqFR2C)"IN/"6EJ9JZQ3q:lYC)[aLd0?%Q1Qp-HlK,;6)[,*_&Vf
%PVJPABL8d=O0Bq'W'dke*FS#aNo&1ag,?*OC3:(qZD@j^&P]MNDMROnBq/[=cP^J3R%dlR*V>YP.Gd=F8!>\4P:]Lb<T=\"";GuL
%[^:gX![H3!g4MC<[%'N)"IO">6EH"`ZQ3q=lYC2R4=\BkLK`EO'T-Pg/T!itJb-/oAIKniRLlO>,A]6!eKNVo2Y^>s-RNY`s.\+2
%\N5%j'ep:pYoR_;hqHL6lQhels,.Wa&H%C#EH!5GLYB>t83p=25#`=]XUq%(FA'ds$uq[Q:kr\566Ce\r3sb4aF?S4J?+l6r/*jZ
%a<rNXN:RO4N!Ou'^taD&5pTkV'Z(AD9McUm7d+fT7G'&F(.qCWnDJ!oDXa!2dR#t04ptelL4LQ>%IQA7_"F?l&4.Ih+]\kTd'heg
%!Vg:C9CK]eJU3%!\IO8lkm".u`5([.+F4_-J,+QaErqN!6pHu9H^CY)IZji=N)g3mOlr1?$^s+kEnR_>Gr@>J+PQ>p]b^esqSD],
%SM5_iMP]5F3sF$7Vl1CkS1nPfoB[qY=$Z+V<C'2IKbNg-jK8F,7b.(O3..)N=U>2"Vm*CF+_("j,<8$*.:cRu1-f:3YY5uRUBDdc
%VGK:[0PBNUmR7RM#lYjjV@\1aSjX-oAs7lX/q[&60gNpHQl)TUNu3>G3&O0.*#CYhaNb$FmF*eIO^\msM*Xb&&ctgaUr750mCWq`
%5sDYB2K\:J(fi:M,Y,Zts!u3E_PB`MWTDX4^4sJh6:;SMZmV;')NQM$!n2AW(aRp'"tOkQ&aG&-JRBOQZ;V=b3f<LU7G,RhOH`BB
%/#f0eUr!F]6h4R@@.i3e11klb&B9aNI!J+35$.mmGe>"ie"C?f75W<1M'g##P(]Ks5$AlBE@E(-Os\rZ&bn&bP(/5kpGUZZ$H4Q_
%A`a9%&G+Fi8.1D#r"a%f[^&as>W-,I"o#LYd)?99^<]Ee'kInG=9-a5)rTk6(bB0G#-=!2QRY@o^e'KP;6\*sN<BcDWoE%#/uNm0
%miP"_%VOC98[C@>-o2@c`W7t7CD+fJ[8uGrlS+^T*K*_p!5YX)=_Wu_C5IPP%TqVY@MXLi0hndo(h,W[l_Xra"HqNDW7O#bWHgL)
%4u?&Y(_7HEh)P[HXsMPfK3g1&r8[%%5]l:RW19Qs<\oq*Ahi&`j6!;YF9dp537j0[#YlruCFD7Nd;fOC-9]=Bb\*qP2<b/(LGkjr
%o8XK6`907]52.idcZu<LrO`/!aU(Lj*AGM<X'K-&'s#9?*!'j3X^\"d]rFWNZfT^9^4nY/D%a6j=#>%VStp0=G=^0hNqN[Fo<:G!
%S^-E14t&>n;%90HT;*+0GTnB/Or9<[:D-RQ"LfOgYA_(R6tR9fi`gdbRkM63CrVKD[Vu@*3DWeH0KfSG!n7j^"S]E6KIbs;#Qn2T
%U^E&:#XP#O"KdI&dUIhS$sf4]d@lh!PA`03E-2tEO):cNBH>!@i`tlEIndXd$VUs?,R5I#^(G:sZnWB#`WsDo_"7b>Jic)o(lp&f
%i>_aR:H(*3cG]?c"5.?CP+ZVK%0s)(V2@.=3&EcG;)`GU9fGp,lo/OBGg11@W[$F%Q('X`aW(<3SQ:9?Ir$pukBff1>e(Ss=W7Tn
%R4Q@G;1K/H%Gj[D8dR2B"$IG[^9?it;TjNi8fL*^LQhSZ@9bDbUoY8h=B.mtJOj.J84i*->Q@;t.2]=iOLbLU^/U6#XDr*c_ZI7:
%6@3s6J`&5L]T=GgE8)(6^,,>i&P1*l$*5WI,;tlh;VJ#'Tl&f?6J(4iDgT,6(s%7a1ctqH:;YXlSgcug#X]$H9>e`O>n^L_Q@&r!
%'jLT0W"ACSdhaG9aJG!h&mE^;3!2-P0!uFt@s"Lta#'!i>.[@1j;G3DPdYZj@Z;gJ/S=Xl:!+*pW:ch5`M:poVURK&CNG5)^.tdL
%UsK/NlLKT5nV2#g@E@Fikm`7P3Mr,>;$c\_,Ue(B:aqk=#1CD#)pCDOiMWP+-6,@.40<VN>!]MtJdPR]E>*5m.TEsq32VB7c&!tb
%#,rD:?Pjp32j-a9g702pDW6cc>f.`?2*_u1NcYQ7IE/XJ]\sGV9d:5s>'>ael,YH1Bg$nSr\,0h4G9KA_[;A$=(m"u&aJJ@%O'[_
%F:%hr&@0Q00'/rAWd4g/hCIP"qm`FuiXD%)8O=U;k;FUMhidng\D"s(]:SrjE#*W)oFKP]&tMZQ-g;O8Uf'5j1Z8g<!l`h]4nn!k
%q9\^8Reqr.!D&V5V!!1@U!3ICap6N;8FFM7%?8IO0L-iMLf$<V"$q<jo3c%7N.THBnWPL<84jPt>u'd>CX)grc*$5YI#CMS,ejBl
%gCI#J>sMTe8(+B<NoWYPg=ltRKdjn`koW1C5uh*g+]#Jnl:F;g7*KLMg?T\F60PQg/S-K&]`0RQ4#j`ggu6;!ERu%$3&,4QQIn(7
%6T3^[cF3;k?"3qG]>i4no50I$[n53Q5Crp=!ZoV90X>8L^p_mX79Mqcmbm=SD82UVWa$g2e^[6DHl-gH<3]Di[UG33!=u"=F$(f]
%Q03K`=Zg)4#8q-^OR8VeNND7qCiE;UYV>]HIrlB[Apfc13l@_4M]Lhh>^Tku;(*l5=9F$P!)D:'f[O?;@khP)j+o:K.@VX4pJe#+
%6QELDEG/kBLb4];RjHPW<2OQJ]Ir['1jIG:`F2KT2]98-^;!YnS]`"]?%,6L?k8_.pF#i-+<\*;Li-?B]7^7CkAD4bp!G_\l30A=
%$PT4oOo<]BG'OjdZ@l'Xj5&0C9FHer\&Rc*kinls7>?2C8sU0d]<qqRmU+lTN78Pu&ZE?\1(93Zo/ma?P[[V)SS2VnL[Wr+,!1Jk
%KRBJV^nurEW0b`iNknF2;DC)FP,3HP;6@oJ4h-4iS[&pC3<Y77o-o%Pds'cKD:hY?fUo_g5(1n-b3&O4qs`'Xm&+^e:H\gLGN<T4
%]j1bbpjs7*@GiS?>ccJb<=(@A[8F:VD.@&_QGqc-D.A2VUG5@&D.5Vq\3YQJ^EZ'<ga$m%\:H,\#`bLe_.1Q2<`2^X#r%LP+ge7p
%E;P[92m*V!jY^[goI`em2j_+nDU`jBe@g2RG57tNKc@^D/nKgoW9ni/HhUE^q5%s8]WUMF^f+)c5ON%:dc>%3fSO%<"A!(p'Ka0J
%G:ZgF((daW-%W6/+*tAKN#qHlGm]=)Rf(Oh$K$PHK$g9ZG-6P7%ePO5-W;9\`rl(PeW7+WLj][&XfnE!KFXU"cbi=t'I+o&f\d'1
%`2)!!o%gZ,g#['<#T.N-\".2BP"!3^#R3Lu(*>fg@6BTf\Nr"7*.rT#?)-ed)[1#2VPq<g9RjtCQ's``%lU8TIi<<+.d^28b2KD.
%o1GteS'oSHNArDQG,d%Rn5\0kXm6<g_)Gj3<$IgSp\$jg,h4"9oO/U$H&*W2-\L&DOQXJ3VQrK[LK2!iXi%(o%O%+j*gXGq6c[b4
%[3eLS'A`&ka\e?N:7Ao!PoaF=DMXIqaW\+8@9BC"Z9s0$L(Td.L-o/pL<FnL]%e'7UP>Ljd0&j:=lC0D)9soWRf($ajO?C$&+Cbh
%Oi,/.^5Hcj@rP<uXeejNEiPj=B+@OVEAIWJb@62La[._@?2:6ER)!AVMGVIn'&cA9Wa?YQRMP$68(9@SU"f^uZ;HicPEKu\Oo0.g
%GP1Pf$?o4Q8k9u;fFull(?1oaG?<0)G8G<lCuq.2]+FZ2@P'rGi>>@j[c?srP=][OM$n7R_$_L_#nc:d3]=`Y7h[-P'Ab@8-&q'X
%.5J:WYM%[\4"U'c;sG7";$X+!:LB)@Vj2:iaW,Ts.HQN<Vup&!Vls"EBr)m9qE)]RI_(Ep\7s47#7B/i^)BcX2@2&l:_YK!.(Ei\
%O$5<s^je%Dh\mC^0qK@6SquHk,:/2ef5T^,1bF-OG\G[F7'mY\M31,<8b6&0$ZD;%D9H]9.=.>WSm4oOj#60f>jCRa&a/LY%\k=i
%F`K(qN8(95EN,l!;U=$m*m2+'\BrLtQ:i%NRQQ5G'>*n0:4O,nnQ6C,_R+QjeAj/XidsW,j-_KOmn4mf--hj[A]7LlM_*OdMto^Q
%0@FR&7$c=gPbc6[N'g6q&SG@$74^u4MNEr9Y$t%gaS/q8,BUGDU\lN0MPdV6/J2J6)2Tqn9SiuO$9&T%dT0C_9@>$f,b:iV][Dh;
%qd=DRStB+tTdX5GM:srM^lH:ZY81=J0a+^S.ia>.eX^,K]O"C!`24G(6:pGD`Y#,G)(ITlI\ihcm\f,:0rgKA(;V9X-pg\2C_`LU
%eWcjtS=!fDjF>VeXC"1XE1?;9TQ<u#Wn/e9$moRo78%7N^]AX7o^s(=f0h;N:X6a14qr_hI%`8T""3X6$>,h$q2R!`!t3B)";+aF
%r`,2_D1#T3iYQA=2rlhl^NtC+hWp;M"3@G,6;m7f)0$$Ub#KHC:@IjH\H-6jFWm`.Mko2rP'U]]mi<`5hI%h!lQ)>qH!B%i%TARc
%[Yq372Q(Zg%\=rr0URV84tmVRO-eKrNo6L]U?-(9!b*7hTX$tG>>g2r_+6<10NC#^AMjce.F+%1<H\G7r8=%Ab$r%M@['KAbEKHI
%WF6S"Cm\lI[[q>\ZpDWN2D(=AM<9nATsgu@\V5,s9bg?0=\$>+atb6LBFPgV0OYIU#;-(iV?Ye"1V+luTAl07)!N:dk5@kS`r/Y*
%-Ro2%0D<(-dL`U,[WIfRVFi5?X=.L+"WE\T\5fJj&.rHr&lE3N:lKK3L#[WY/4K<^_Ng](!@4A%;t2(L/XjJ\Q@u#tAls$/,er<X
%"epZXq:Gue2Y-@UO%iIjge,HqSRq;-q\j(aBQM/^+Y_bZ$dFSHpoe\PZLNL5@l[G4D13e5"Wk5?phW)8\,M9.odL=!B#nnB[lcdM
%D$=EW_?>b3%6a9^As4mSU:cfR`KnsD^db!qYX=a<im`D`#fVJtgkn&F`0?X*'c/;c3<gO+d4j!P'TO,uYZ)Vse5K@iOf*)#4[3dU
%@Al([huOkIe1o[<"L`Q67QEfA3jr(o(eROPP*4$&Os.YTf`[Vke><p'cB-i3iHoP2!+Rt%Y_SQco;f;K$@W(*NfCXjHp:@k>)&^]
%^DLIUf9M>j89(%q"F5SDKga>TCB^J)J>b:p3QfN1l.?f>0HK)Pg)=\@DRm.XAmgj?j'*LX-*8-_Xt[^4lr_ltQ_]AkU6Kef$mc.j
%+pb8)0O]QmC:jDt>>,uo<%u1\)9*=4]:YY$5OOAKdJaT!'NK20&u$EWcN&c9<ZP<&8eAtKT$UjQ,>cP1!J??c\MZ5U=CMV6Uronl
%Q5ZVm-Zag>W&=m"H%lGDYN:"P_0,*tQK&9oFqH0#F1f+![n4sk@P"58MGu%.A4\LQGXB_rj1Ob=R\!_1%piu70p^1-8P8Up0QmIZ
%eT6iZ5rJE,Q5sR+:"/2C6HV>_p"<uioA),T@7&KacYs%g;Thc?,XO<p>-A(=N?P-n7VFe'34%rp7jj%jnfi,W!rW8!H@ipR:P3@4
%h0^'L#sAi%6I-CG;I7>*@'k"b()8,HV*Mr(VeN`JqQWr`?Ahc_ieg9,V&62+%eG])?An/GijFT68#HN*"L2Et:_O1OhMHfA#>#Z+
%0\&&?[&?)/oi^?8:d0dW0#VTL",f2W0dUg-jB/5qBe'P2bt;*<jr`ldFJ"9P\ahGM<Y.bhC6+CS?6jKkPD!GI\tj#6jM\l2PfaS8
%$jfDHemM?L_GZ7I,kj8=%ms0/9=QOXMG$dFD&<KT:2-`MGQ^(gbB4_>WppZO\:J?d44"Z]0]1k#DcmS)5fu"N)Gj>Qf5)m0<S>?N
%T[&XR'::JI)G[_9;&'<qFBBY/<SVP=WfON"$mekX;A-ZSgEgft;iJ)LKN5WVNhl?3SWp;7d,(J:h^fu*(o(&EZ"G&sehPm8)JnDq
%'?Lj4UO0EectWkTdr%LM1feVF0NBfXAK@%V.p7U[*q-,IAPcGs27`?Y<0PKSK!r41.L9JLHRO'U*MKc93*$FHV+C8&ZP1kGih]1D
%ih]2r-!j3FjliQEq"t7FSW4!`;h$(^`?eh8@61WKRhCeDKV'HD4mA-^3Xkc2#X=%.2fU=C;@r"Y.M'L3?YD,p8]akE0$s`pimOYG
%KZ`m_r%q(^9jh*sjeO;=L'8[&j)JJ-]Ak[#-gnL'p8LE\_L9[QQD@-",tj,XW1(SC>(WuCkmNr6,FK%9k`V/Y\kJY+7?=c+W9Bg#
%DM?S\1)-T(m6P[CmZ@D]QmR!4U;sg?KVHYs'Bt'-4#Pen,8?[q=7gkk:IibWCRhi+)!q\4a2nn81/=:bdRenA-;Pp:8[:sS"J_e,
%=B8DE`sRBPAKUB&a2nnK+dXVjie56!&djcJR(tI?5hm*B73M"jS8^`;`V7:["Bp,'_UL6Tk"$g_'M.g7`)VXm.LB0FAm^e',*Oi/
%k>0Md`)Vqa`%@)h,(e4.U9J<0_GN2h:`lMq.jVNsXhYd6Sgos2$\E(5W51S*U);$h$)n]^Wt<lL;(<AM1"7mW2HbZpe^W/X\26dN
%;fis#5rF%0dbPS7J.8c)6\5?.7bOVO5(E/39i&h`KYms(?Q>0FKAn3YEU/8#fBkHB7#h;_>!ba4A&5/bn>AQ`9Q@!Q+.WSQ/.OGR
%#VL]5GacDU#T6s,kW&+[IsdK?6GbY?VZ[`1Pn@mdhT^^dD,dJh`/99-M6F?c67]c!&_Isb$nNa,)2P?a9K-KJ2/*j-QF.K-+LBtn
%0PCW`8W!iD[LUlTEF!,<Ot+A&kcn#3&_Kh4VW&7W2%p!ZF%T34Q43!j)1f0HCjsMJ=5^p""$\+T-piKt9#YrCAhF.IIacYoD9jKo
%TQSr!4"45r<F-W^nj8<I2p0*`4UZEI;WTB-<`$&b@LUB%>=17\^_Y8`Yg\Lg_0iKs7$aJGdN\m)oi5g]9WBWi3kdlHR?YdJl?O9i
%MTF3[(tV?"MJJas/]HS.FpW/<=0)XI*5s<D8"n2@=>Gp+<EXb_WZ">.dmfJ:fH:NU0JS<d#lI>T+fkq*0Hc(,!BPr\OW5@7"4[EA
%"9D<>#VCH5iSA5l9R8E@ISX=DL9(NX`#_QJg10+8LDDVcEBL0;j;?AT1'*4t:8#=G,<%5G=_(C#+=,[D0[2'\;Is`K,=$<H#TCnI
%P9`RcUCt2?e7;+BLt,@n#;^F/Lmqn.g;XtE[Nk5'A<*#Y8CnH4?1=`D\Dm2l=dB&fA7/')Gg&c<"H[1d/?Y(F'3@1C(RLOJL(]kU
%V\g^</1uQAU_>SLhkrus\Qh40\H8dG`a'0KS#t=?8<p5P=[C#%MD6CF3#;g1Z1,!)k2O=PEcKaW4bt-/Lr)kk0#(:^NMm]D7MGmF
%Le=>W`JMb]/e4pUTQqJ2UcUT":^n%FBA/r\5mG)V;]e^t^*eabV%l))9n8d);<>fZmc>i`Bq<rE%<tUDZHf,Y//6RW1B[HjkGf+#
%W!p$C$4@jjUF\7Q"^dpgr>Pjg6;&M:H=QI[6CNa]U,aNt=Aah&.G`0Ufn@.:GW@KNoG\qHE%-?O^CeuV_&HefOH3K+:jiq;mc>i`
%3M$sI"jq?:W[]FM.5?S<9mA[o)5J"*0koh1&gT_h6t2n)Oq#RPDGlW<+opoi8>=ac9/[D*A]:%<:s;C03@WQ>H\;&^i#udYhSc(m
%2sa3W\2VRei9;T4>&*aX"uU`p5[nXEW3A4#3Q0dmQ(cTbJ96,_$'cBZaHIWA,S6Q'ZGk@e"N?:$%F*`h2SX[%PT*!$]hsI2hDi"o
%eISUlEU_+g^+<$J7Y$r@+eX^mFAUVZ\/8dqik!51,up7364ujWK&XBX"]R!$0Q'T"Sr"4)d\_,-K24&Y/N12NM,@_NTQGW(8qZ+;
%/4BYiK+VZ2jpaH.7`uO.DJg/^Zm(BuJnV\/'bs^7U_lJi-Hlp5#&,Go9NmUh":E3kOdN)N@O#D]ALZ$'SWH5p>*=7I6;"!qYES#]
%f/b?aMT)jiFKWY"^[O5s(/nE#2gLcL$UTW`a+TjCgP`6S[B4h4Rl))Knr(mrn;@-oAR!je<-GGmr5_WP:^FQJr'EQ(6;t/>,oc5"
%mn=r:#1`q`="Gm0iOA0I?o+U30^`bpZR@m:O`CbCo<f[Wc8K)J_6d"\N?M?c!#Ma=N=a^,4GQ;jW&'=i$[.h`&=p6[Qkeh%Q;(r"
%RIXL:omheej3r6E!?*1Q>c'Lg2:51jK4_,n"jF*u:k+g'Wfot)0&+9K-Q^G<fM.VcM@b$VJrlPhTb)'TMLq\aKJ>R$G6`2SUg*r>
%/^:HE,D:;g*h2=<3t5)VV9l`(KO$.KYe4[a#KPo+#V58iF(XI[<2,Yeq;^$\bdON:Dcg<I`T4Pjfcn7D])8gY#?1;uD\&Uo`VhkC
%Dr=J&#<,MLgm?!$JtQlh]<@1*:BIQU\%$?#cj2d%/-E*][VQe?'_9%-nY?$s`="A-Q7)%gC3X"D+Q^TS.i4huE'fQ2j;2<79#nu+
%.7?E,p07[/ep'd*[b`hB9f+*g[)ij:d5ImVkog5jh>"]EKW<GZic6[/8jlN1A#AW?3N14s;[>.9BFBCZiEBV&;:&'XnZtImi\/oi
%qiAQ'lA4dDJq="($VZsSn7m]\eh7*)o"+>Bm0Os(9+!i)9d-lCMXoIMAl=:*=juLMFqG&0/A00SjHHY[ZGe=n/lUR'LEct`Ikf'<
%YN+q_@>of-`Km^D-":VKOQCiKXW\52EXG+*-4]SY'Gin$.&q,mrfXgA/fm[(,sD^NE;Y5Ob`(Jo1Xi4S@*eX[SVitiBXn7gq;!cY
%SV-ZUJWc.9@u/[g(Q4B.&7:DQ"eii"g[Y'*'mm_M/f['saC`Ei%cWp&$ZDpZDcDQGcqo0o%(Hnk#pgV2?M=T_\8OmQZog@r&?.hl
%Z4'JbGY)X`;q/f[0hkHR^?fT!*E'SP:qU"r&LqrIY)Z[hCC<\?2SZ\X&E6#F&8:DE7*DF*W1[TI`>FasFeVaaNEq@c2ucu$552k<
%G9C]@@]Kj9?bd`F_k7Dk*n7)%6q&SY9I\m(Zc?e$P_+@2i+]&OL>jZ$[TlG'Ad\%@n\l`1f_iP!5,7%2%LalP"9mVVcXRC1B9S]2
%SkJR7@V>sf0#:Z8%t$R-W&>6$3RN@8hj0Fm9Gj;,m1KQH&&d"c'T5H`Y,ln<EcPT(P<nb\dB1NR-p4R6l'"bjN[;FuL!0cV8gY"+
%Im)]:+OWh"b)YI[G'N`4$8gQMO?U?+69/m2Fqdj9.TBGFZ'/W*adY3)Yhd'k=9Gj+7rdHPBs,@V8I+Qh#u:ul)UIE(-K#oa#"OZ7
%47;Hh"BIs\>r'I77\.Nq?7COdbOA/V#`<hYi#T*]?JOYP@MtD7"h_%h$7UYcZCS>1:'_%ogmBbJ8Vi[*:ja8l*EpFB?*PEu@KjW_
%KPka&NQgBT/1^Lc.(^N*+c&r7%QSc\`4"O"kYp0il,=#_9\1ZZYG#bsY7\bb_Pqf+'ueJ*GR@&c/;J(k4[Vhke(KGr*:On@E->[e
%Z!E7@ppNW4N0,WnRF!,-e.MqK#-Ej/,MD$k$7tTk>qDYYZ,On0Oq@4TnT29nSV4@j.4QeqfdSY1jIJ!:Yi(?AGMqW,jZnC^i<o?C
%!=q!&,(Qg5Q3KAcHhA`DqV[k@HUPQ/V*7^K0SeWFShu5%#Y]uMKa9;K1N,f,BGJ<?o)ugq%/^>G*Q([-m@+g+rBG\[7tIPIFd]Hh
%iA\EULD1Unlr,.c74AO_s1')'Pb!D>Ylk4P%$0$c`(sLpP:^UV_G^Q\L0837I$U>"c"Z[Z:D5=`:p$)Z.kHOVJt^1\GX>dn^db!&
%q_\id*E""@0p1>2GK0Ei6\p'&92TX6p`:piYmVg*7!hn,[YTPB4*4iFVl&P_Ljb1nJP@bS&?f$:ClP!;BXnJ8'iaOq(dmjharT.4
%qO(m^!:L:Sm:=SE:`:I7fG]M^RpnK1JRT\<@U$H!"!TKoM#&GoI0=pFWe8D+^(VQ/AJei8R!NhAQPDm?)D"B&PA6''1#iXUn8LJG
%kXZkY6!SY1;1-e&Rp<59.m^rQV<,]./(`aH1/gO'"[?r_Fp]GT&eq2qh#34/BJ=q`p@p.`%d*a1T"4Lh7@Dn6]<W7@llh"[:tf9D
%K,!eDdE\RB;$@-P'E^YOYf)(DY`fZd,BE/X%^p\X2b!?%E$_%a/`Z@;+VFAVMkU\.2_DH<K%G._5g^_.kS3^[Tg?iHjaddk=$Z+V
%O1ul)$$!MCm:05a.&>!cW2uY$-cHpc<t/7+s']g0@ID$[]Hmp_6Nd'U6_f6/kd$.,4sY_uSgb3_Q:qD%i`4R'd,BbP-u.d`O`lb(
%F85)n9,19ghbhO7D'=RW40bu/,7l;)6[AV9]3'r!BrgS)"njtpqKseG55!ujD!M0rjfq'EU?l#1G)%\:i'LTcABHD(.EY[13FU,A
%*$&9KV<&&?I1&t<Nd"+Z@ea>GlkDk2<N*!l@OK,3P#jJnMl/or4E<0?&)K0nM;@0JG(nooWQU\2`%K<.&70e.2tlHKi-A@`Z4iQV
%d;g9'TFX5ucJG]IFLHFhL2`oL.TW7KIZg07@Rs\Z%/e@-9U::-(qASCDa?-`EQM7?15K4f_GnZCe!7^2`t_Z-'%k&$c-9rB_94[g
%Kg__QJaq'7I\97Wof7M]V8BUf.3)DgZ'=f)"cl.Z1_@+TMMq"eATPi[9_]Ri<JdH2+.@p,AE/k?*Zr?p;\b0K"+!M:f_IY?7`uNC
%Q.O$bR$CO%Ekj,I$DQW3<)ui#P@=sB)ln^QR3nFp?'^6SD6=hVO-k'P."g/n^4:cUk71uF9NJfM#Rggf2$Ku;L_jD9m,D;N[_V[i
%i!5sJUQIl*^f!XdUVaCT.3-r<YuL9&8KP>I`Y97*:uu**LBD]:8&>\pbGql@2,*\,#)aPQ=Gi-:Ke!U@kF#&ImtB,"O.K7($DKs>
%<*#1OPJR`b?2\%FnsCd#CNu&k$G%,el\Y?jE%@l>cfn'3b[=?h8"hV#NYbfB]fAN6&6%(TC")0UK^InePCbg!,\fCXgO]4jD4,rd
%L]qbL`/+c^BJ\Rl)i<L#CuPogDEu<O!_4Wg20$1Of+8Hd\LB_,?ms;r-s#k#7uAQj+'+@I7gL9-/0-J<RJ;"EcDV3hT.ND+r:R>)
%8HbnLSqDeb>US4Q3\:/^_P@u<^nbILDj@bEO9]-I5Fc-@%Afac:kVq?#p<L.EZ>O_X\)H6K.(;d_]Jr'>-<CU]J_m<+GAajCW_Z(
%Wa(8#$7^3sN$3JqJkOX-/tOD3`M@>0Zl5V'04EGMGU,(UmN7.B!$AjaqQ%GWdAA!]$>e0TK/!\Mr9+:Mn/"2mfB*J0m!_F4[/r$\
%?7mkTK7LI7oD/!P$q2P&/L:R:RD<C3h:T('"Oi=(K(0"%gfC:3ZK#9":Q(7,Wjm3#_Z5B'iitN$kPPBd\7QT(eY&HA!l!B][?6!'
%/IF?B/SD$\2-BMeKh:0^J5pNYWS8ndQ9RCs8BX5,/t"E\cl$S3-;-/o,Gp=IfjsHV6g(B+Be3i4)`M#2oh,^[(f#/hL%-3acZYK$
%\D.bOJaa<*;o/s_SMt_"%`(WkoiUP=_`S\R0=W`lV7U,[j[1,6g_/L#`jk1]?$Sbo\LKMmnCh-.h6jC>h=4K!bWHZQiEWY[4ha7\
%H+j@?TB!KbF2J\@#fN?*6'gla1;hbV[ONoc::-79PO45[fC5H\@F]!)-9XHm<dghLc#@oiN,;O=OWLc$#]=;q1__R=KGWlm8:%d$
%+gRe-cu?4R(0?J92o<dYa3-sX_F[oq4:d-YJ<EA6YP#<J,`Jo2o4eH-(Le6shr/+42GfY8,Z`!!)0Slcm\hF.iMb^-Yn`#C;0,&F
%!0_[dL3-Kk&_^\)Z-/H-nJi9pKW[mbNM@P!,U(t44]omLBX'9+HY`D"*[+M>)Dmlb,FuD]nH?M,2iX8lBf"b5'ONXkg76$[LEI.>
%cfukR;hnrQ;jcdk#ak75ML3C0)M9a&hSgo5g0?Hj?34!;TMQSpGRjE7!&?5O7#MeAmbK<Yl*Mm_$DQW[Ph/]NP<o[LRl]gCEK.CG
%>'\mb_WE>kk/hCqQ4kYN<0etM-[Wuu#oe9,'^L3(ZuMrKZ'r2<j9?[^pja,)`2tW$nO$d0\6p'jh%>Xri[ZL;-2>'[L-^@**bj`.
%/(iekC/U@B7u`?QO\"^k`]o69ZBnE'.14"c&3uPkMfQ>t[]-qNh)OX:f;tBj%K8[EWs-]9,@pV9?7udg`Fs3aS^-Co1MPVYVDX3^
%0b7s.3Qf]8]aaXt"ie<C<E,2T'#ef\kR"[]T%og0&Du&DJ_2jd/$$Ko8XM*X5g2!obT-]:fT#cAU+C[T37PbEl=q._RFTIXh.M?j
%\V<0/5M=iZnNo>YK/lVpBbNI-(,!7_1j9A5b^@4P)A>I2%MCSKpbKNq3#Y2kq?k1^M#h5],s1#I$`l1u/g-IK[mV31#][2G/)&Uj
%%?MtkgK)6JrF+Uk6SFouJ9iG,)rOSDA:nC@Lh/!b3Ofc:H:&^P_5c5r9U-l2)mb^+l??t&LK?J-Fd73&,CR+5r435<J4ZijUonX3
%/qg#QQ],9Q+U]tkb;<r!3FbOJK4bDY=Vs:GOg+6]CG:M(r"WrRZYc%[-.ZYeN<Ha!QsC^rKK@o1`lf?A1DoQUA_S8+p4=iXOG!gM
%W7_iIM@RL8p?iRR`jT.dLp"r5eD]Sq'K=4qk:u2;N.>$0pbW+p8eb\6.a7%&$Ps5F#FVrH<^S7^B)?(P_f.<_Lb@SqRV[!R<ZOS:
%d[_UjeNr`@86PITXL-(aYLE`_nLJHe8T&5#/oAQXF_NCL!H%a,)d/=C>.@40i>X^4fYW:0Oe;fiI0o47WX]up_`0YQ'Mh`5ZPG&$
%\-juHM\UH7(*4k9.)QIKDf9%,D4o-[,2ck-.oB_@D/_LOFt?l&*&]^FW?q7I8.RZo@@[#0j_E[1.=rU)5Nb?uE91nTX(h'4n:TRS
%at_t6E0;3,KIYcm]cMo>d;Xa"RiLsmYA+o*-CPKu9fLbZ&u6NmZm"+\#^^P@?hHF1WJ6@^<MuaJ)Jnl"37>!^K,>mXKT4"o$t"X#
%(FTuaO92&o)Y#R7/QXOeP3>.Caq-nE;\1N^TsB9-SJ5R)h?e'A1PF=UC+P)Q8JqlqZYZB2&MQC3l+-=?5p;;lP&S2]/:_0+%=HAP
%@FZC\oV8GG5mM8k9jiA1cA])&MU]Kp4'^5dE>o2&ke\Em_#Y&dn_Ro7%jLRd5`f+Bit*j_k"OCV#m7G0eTCrmW$)u41ftV:hr2TH
%@QqO<7_k$<@1'I4g+`'<'(#`0<ZOY<d_-l5eR9q&)I?WBXQum_eb$i7$1#0E$$^-[3,N5L`$0$o@dShk?+L/$]MtE0W]Y1K(q;LW
%l+P&LU;I7OYhVF#)&UNP0oT7@OWBe!*9E8.:j,:$>'OJ2p[H[_>#(bapAtuqQ_P2KN"E<hggQ),>pr+L$kO*h?-m(\m,GDe?>`<-
%.X-+gS]p+AT@Jf,oC"f.jqbG6L7p%aeV8==aU*]\PRbmnd9tLi,@K&;b&\NUM36Ek,'RLlD![Or"%;Rq8D-h&[M'm.b=9XoN_);t
%A-GmiPbd\/)<\QLr`(/@+`8+hYUPO_FRgA"1ae:]c"Ah*?89Q^C]p>t6p9e3iCZ%-Dhl@X@.3Si&^3"@_c$suou;BIL>k3I_e%lS
%2Y\%g$B]a;"EhP;Z8)9>lti:Ybss]rq=5+^XC*1K3D&H)([0NTmeE*5j%!(#J@MH1HJ9i\<GP-tmgW#M]*><2U+ki[&[:OG3BW%?
%YU+J<aXq<X)r`43S<I10;E!O2m9rZBl^#+*DZ%d?ZGeH,%khe7SerG,]m9n;+p!,TM6e!8Va=b%"@\-#[<PHl11AnbOMKnj*s"_k
%qT$\\0<cVdU^/D+L=iF!a@E0B`ed.$:-l6hMMg[jG"RK4@JM5m(R%O[3H6b=+s'Y#%&Iks"u1uH4+[VI]9b)U"lf4qMW/J$-jsGg
%1Dnu`9SsPjq\57?VG;njgM"6/J/5+<;)?0^eitU]O<:Z#Zooea!&,F>Tg;P/9XYSOMErmcLOt%<1_bp":"[F:O`LJOF'mP!993>%
%Dt&8/2Zku!*4OF\>+JpO-Op8;`$Bopc3uePA0?4G]H/Hqhaa`IUg!'7F"Y])Qb^hLB,s.3<_4U&9(bIi^cSV[r_^QW!T?^h+P\Ju
%p2s,GN8ZZsj$H!h5A5Db==pB9_$)q:_n!ld5Uk3aOCZNWW*LqNDTukALBJeK]jmmb^E&Kp`pXO,:$pXAb541rF,7FKW./0Pk(C1'
%f%;*r&@-Hm$s-F]U03XY#U;F"-'^p'L6<L@+lk_k$$?sF%8=f1%L,L0mA\tQiO;CM/Z+7/cPEh;#<@RL?UFVp3]S;%D7mjoPjSp1
%2^C'YT2G0d:!"iAQOZ9D>+Hh[c1RdFFgN>&PK?7\[DEmWCX@ic:#AH26[_:1C4pi8!utYaDL:r&Y[?N8R;l.n\:::0ma*]QmSYm1
%:r#5\;e0&e5mX9u\-m)-7*`'QA"";o5)Q*O,b[qFQlt61*(AtEeBS4F-^fkSNCf6C*JV4YO&j>RZCR7P&O_$[)A)b+mle(QZ[Asd
%FlBI#^euKlRHl3R;b!3I2*E6WQ6iE_K#8,lK:;Xt6VZH&#`Z,67,KOt$`5^4;51k>6+3e\Y3lrog=0RF^Dn;)'47=;5<h9oPe!>R
%X*oB+iSRFbT-#-7lP9`QlGU9j1rS9=$<^"1qlU/1&p5I"WepugMB&4c+rL^N8IR[+)d,$5c5Rt:8<V<D3[KH`n.Q/"GfLjbW$/@h
%dEV`XIY0h+)"l*o6a.i,9TC7PF9\1R#$#NmNre<tJrYH777iL?ND02cP-<^#%'bakK+/2P!J-#C]qT%l>%S)3eopH#LG_[<\?g]r
%:5[n?OB;@.K>&<6@tS+UpHLkZkQJGe1TNZb\XD?!r1>&>j6IJ9bj%$rXnWU[C=W$;XEcuno`.16H<Qf1.Ng0f-BLV&nc<Qg-k48,
%VC2%MLoU[FP:76KR_fUd*!=G_j5ZD0Oi<YD5mJn[#)U-OlCPL/XEURYhh.FdPJZ9leNBj@%?s1*.3[(,!#4tn;26=H"Bk@[1-KK0
%RV&g:EB)Tf\7dXQ$(]X+2RE?3$6A3bF'i'u<Sj'`aG^&#T$;#DlZ#R7n#'nDl]3tVF/>J1oXM<;pJ\J]ouF,!\Pu(;l[IWf3dX)6
%l,N>;o8rH0=nI*@=ejd2Vgn'F?1,Z+/q3Zn/p6*s\Y][B21M:G9]1nh:,&0E@?[.P^KYTK]HO'1:12O$1fH?\Eele''Zl#J[r?(P
%ejs#ZdMUK;1l%[#ULB@?.-n3*)q%b0IO1Jhe6'.Z8aer-Xf=\#:Y^/u[*="thtORhA(<%KD3hr79rq?JhPZE9r;Bq[hZs*h[_1c$
%oKL>4a4p9-FYd7Xi0N!-TABhKicr.BY&9s-p"n2T.L4L$^7.>44JX7qR7s?nW+VnYcbUq_*+b`b2Hr/pp%G882GG=,O`itOM/NFS
%^)"8ISE2IZ0nQ?*6G)ADW-.LaN?s#WJ5)l=9r5<kRTr7B2Ndk7ihn"taI@EuPdjrIdBkHeGGB&bAU3Am0?]j8k[LV3<hlK#lK?/:
%Z>/33?OPW9d`/Yu6bPBYO[\SJoibJ<?LPY:W0[7Yar:bA"pSKXm,]TM^5<sfDDq%_IcuuC;fgZ\pBDjg4Ck?=E"KfjbosMU'&#5S
%=I[].W2cb>h19C&UgukB-8K9[&NZn=T9F>PD4Lb\<q9#-<V^5\'FG3#=:OOReoT/9_ZCq+WmKVTod3J>Qkb0K4Qjc'e5I`<g-5lp
%m6$K;cgsbIqob[.J'/;2cQB@_]:F1)::m'AATe!?ELL^r2ad>^8A);V05]!!2boPOqe#/#)9&fF]g;tElcZa>rk+Qe[2(lg[^eEV
%2BUd*.*,'-J`P6-G$D9uBI;e-4]`jd>&(L8;[c3RCBHkYVqenbW2$u=d5nZKc_cj$1dHNANiI\&(p+/C(87fOfG/@Gb:$6$X[*5F
%1Y3]'hQ_WTcocY!lGn<7OC>>70:oM@Of2^`&f1FNf.56VPe,U=.b+_&Fi"(>+91JAJ,/]Ns22mLs6upNrq;\.H2G(drp!]QWT?%f
%^OH'Ls75>[rp[tc^\u^?rS?@[I/NU!J,[ohIuD<rrUt0Vo\\VWL.gg2EAYu3cRX;_!M5t7iafh<\IoJ&%2#`f'6g#%(!R]?e/7bE
%G1747-J'd@GdiFK:]9lS4!2D6FrThhQh#6a+=PcZkPfYk_5kJ=W0o-M*O5PXe8r-*FtIJScnjpG#cQnL5N$^@)f^ui!3gVd#YEh*
%FemO)dP)-/NN,MaJ7G2i7eJEQjA:N9m3<%UR9G#4(bJq-S&i"47p]])h[[bH:JKeD%3,>PO#?"FPqKt.EN)6,O.[RNCXR1$@l>MM
%Q5W[s;'KSR0IeFrcMOIfWG[3J``MZ4@C$agKMm:XRIA<JIR$Gn#%?2p`[#t=;=V7LD0(snNO"G;Zmnk75r)%!BK=5jYZe%],0,cu
%%S%,7-k2_P<_\>G2+W2^+#k280F#)BGTRVu'"rskMBM$c'"rHOQU"O`]cDs*gHJ*%m*I;0hJc"b6Mf8SP/c!H)7XM,U*kXZik_@E
%r47^TTmf'[Mr&,,6n_+CiPD7T)KXl,M^&c.'BNIp88_Q^G-:_"n5dM;o*X>Di`W-EW-9%7<P\KP+s%>nZ$\Xf5A([EkDm?9)U=c<
%L,H6lTQsC]_m+faS3oEpN,J,/B6"$MUhPVQcn*,lO9]FZDW?.CR!e]rpHCGn0;Iq(4u0>+c."QgA;B;)4W9><]iDaKd$ihLd1r[m
%PPU0lMGgu9<(),CbJ[ubD+V+Xq#El5F?Cbq/q>'2UfHJ/ha[T6*o^ksI#+4'I)3%jSY#/AT;I<>Z#\<^6==o,VaZ_nacC%D+Zh91
%qTp'JRes5VMVjLi0SHE,KB<p;%=JY;ghj8kC3`P@Y7X7>"1RM^99Rl'6lb3-INT1QD3d6GKOk.A)9/=J;Wh"RRG+=0\H6M.1_HWQ
%cu>ZkaeJHOD%.Mk^eb:A7he>R#_j]@"e+p'kL>U#)BfF:CPP)q*0P9,)T%sR2.)0.6ej8e<@##iNVpR<(l2],!2RrV(rUu/4[3PU
%2C1,W]sYs>gbnC$D4@.ucoLg$/t<_,Ig%&;jq4dR#c7N:C>Y?krkubab-M5L&!hZ>B\ar)2\:rp"sQk64Hfuk,(M=[aAYHnJ)JQ9
%e-7\1+%N@o,87>:Ua&UIG3D:XfKRV#qT(_*gK:'^=MIsrMhEELGJcnTnqgo2OG=1SGj>=$bSn1:YZ8IN@lABJYU(8*P6RU+@*E^b
%#>-?d$>+D3OkHZfg::4Y=)0(^#!uj/_YZ&n@6/_>8[pB2))0Vq_P7UQ*'"HtWP:-ERk34lXBi`r5+=Ei>pYj(#'_ZQ,]7boh2p<k
%iU)B-_PoO`PO2aC]Q.J^7Y@Lu$2&&SCt8#u5))Aj3n=P4#C1p/`#gW'iCo^2;'$"<W:"QUWi;BGc\*LCYrp#I=NhQUL;Q>&Jn?iq
%p&4r8FFunlpj1<L9,gZ^VW6+ZNDgD-%*B/"6IZ%=.J%Ncdl!_dS/P#t@&p#.47o3OI$T$umFhhhP[S?(;LZ_:.!8r.WGWg`Shig?
%R=/UL,ZZ]ndrMH[?,RJTFE(p(^gM]Z%t,(o2n0[.Rq3oj'C9!cOi=VOp<`0t3?O[n4&2l)C>t's86/!J:kRn/di4=rd)e;dl\Nqo
%CEa:0#lM[dj5k('Hu=6t*h8A)NVChQ'*f]oJE,'uW"fZ/O)FOUC5I%hfZ9lZkI5K%HHP2_9./6G!I\Vg#Y@i_mCHn0.aeXQ$/%2T
%h$7_'\2bg_&a7/J(#M(;dh(9Q-.SQq3\AaM>WD4:-RUIReShssM#R6<UOD`b>K]8Z"gOR76]Ynr_N+h((DN2PaVd"S6b6U@AX%k;
%LbS0Y3m(f".#gW-nU3:&O.=>j+<6U@3MT,hO+?&FNGg<S8ZE`$:4k_eo1=X+%Q@(IW/o"[`/BH!JA`[+/nuFUmaiRCdea90L-.F?
%G8p#&94rnaj,aFq'l7SMB2iW[`]!:"_^2ocb+g;%EC4>iNM-m\<YB_UWF=1e7jc8Q:X@-r;;Vs4QSl(,q_^onlQ8))qCi,agN_7q
%r2Z2'%V3r,).(Ug`NML=ZjC>1#"LW\`,&ncA_dlm%m)O4+8B^(qK:R)8ao?@a>m3i+mp6(n.NY"%V,R-\lD.Il(?Rsn]6[?D6QfU
%'+Z?$X8b2TLg=dokar52j66)C%;=`J2=+!\EXl6e'/ttX!XQX^PM<1c2YCk4`(t.3_\hHPj*cl[#t\Ao\1eU#P@8m7mnL%#`4uK@
%d*,=)3;DRq*3t$+L8"`*_DR]c;6qYE>D@Qj5B&I?_&9f<GTUED.U3_35;]'(B_+dP$Pcp0iqgGO1c*W#%R)m5L8<^pT`I/uj2h_K
%WsP<b\6jl#L3c3/`ZTIEn(0>e/+T3gKY_@+E@0ki.aV/>"?392lX[7'2j,p/M+.j#<M4"DTG)f3W+bH,L6@ier6X>E1htBU5ijIM
%SWmZ&(BLk0O>po=*tnD(jrfth@Ba"X7*Zt@QVcG+M4.BK3i6d(P+TT5I@hH"83EFX'!!cW&W/@*e.e-3-FSdBR[)5dTF&b\c6uB/
%.&5r'1c1q_k#TZ@e;R9A$A<_DI;7Z+'E3L`)R/-13%^35pq3>qEs'jrJd"pBP.6Tc_]YG..Zmoa&C-\(:ZNA`7Gqk1>WGK\BJFDm
%[uC1=r.1W:%qC^5NVC9TTa2;o8A?<I7KVm5<=6AKc\p..?#LBp4;V2V9?NQ'BF,ls&_a&i0%WU$TbU;&1@fua9U:^kS&,#kGQT),
%q]o#"Ppi%?:kp<u)sSZGK;B;#8L5_+V%q+N_c9fqSZ"_f;E6Qs!hgRnfP\QY&?NQMK^o;(eZ"hKR0')3R8)oBEge']<RF;%5"k/D
%MI`:;$Q;V7BGsE80b&J='Kg;<;ID5M+CB#HG.Af;-@OCG9.>9pDrr8u>5*S3.AH]jB5lV.,^1V('KMY_/FK0Rh851%(V4VYZONbD
%A_Z?'&?g^@-#SJncb"('>ri;OZe&&9",U1t(@RNA$H:Bc9=oeUieQnVGZ`!g[o:=trT$qM!#R<L9&;ioPM2ik_kWmkV\ri5:mP3$
%2JW4KU#(oOqL-Kc-]U3_,e4t:"7'_>aZ\(o#Dhu?%N=!"o9lM"aISeJJKTb\GX>EKLg1`an!4+-^MYn"5oHZF.%c_C5D50$efrOW
%d<IT6fO,c"Oj>n)7bGb=CW@>:rojQSfJN/-4'B!gG;u1:QGEpGn&>Ugd59M"!pG1/kElSuOYN8uhH]c93*3+nHF!aha+KC.jSdTG
%KT@p%+mPC!df]N(@Isu4m%EYgC2paSh[>[U=/*JkmHCZJj83k;+*j<*R>9=McO2/%\fu/`&R5#e%5&_;O\U1:L8adf!\tp/R5nrd
%9;G7sWCPhOkeh^&s7f@S2T>u5P)Y9:U"Zgk5)1K;dC=%^VeA&#&]1Eg!Oe9LmUL0'lO947SiZ8#r"RJfZJrQ+2,BQZRQGNEE.+!)
%X84m7`$3@\0qn&n*_@G5:+^>r&O<qLD5$VG%VW6Ad4Gu#rg3h_>!W9)PB'&IRn@!O5e.Y_,16M<d,5>+LbIHR\"+L6hECG]5b!EF
%EVZ'Cc(kit(sHT5,gOFIE7s:Z.m&[i@X8f"Yf(U8>%=6qXpjr.;6:6941dK@?q0-!.Y9=+gNn.\d;EA.s1G(<5@7OGfB2j^h0reg
%?^\m"p@F!'I;P!Of^0L+rRE^>A*5P?:SmWuA=F\)J\0G=4!MnalH?`-''^gM%Z/</=;`5rLfZBPqa#Zj=<R,bV`pcCqC##FH_BtE
%FCJj`1=BUoi!$4u.pLa#1=m1f(JBBX&>cn/@C#8>,i@D_kREA->uSAAl[^@sGe!O=;0q32]n<C.9GT93Mt`RggVr`Gj8K[sHn`+G
%X"5?"m]SI.XnT91`VH<EXHdNkFk/VbBK99C]b?MW.?3Xh)a5F@#<HPP@R6NaRTE1VC_rV]Z-1t,T\<[3\QRGQ4@I=(mu]kH1Joou
%Oud^8Z[l$?NLJf<^Jn)o;>0<<i^NMc/tQ7n_Lur"-B]7c7#Sf111-98I<,^X.E6k_7N:g<B(::0[nfCR+S&C")+a.b5g^=/OD)@H
%aV8QMfG&uo28^h<emKk9bdiA'.hX;cXf+`k46aY/1]R5Fl8HXhjTq<HM[5"o+RXU]"k7cVVcOg+jqDDb)[B2i%09Jqr!7&((!2Cj
%+$goqT@'Guo[=C/U\tHZ!\WV^THiY+GZ]gO4)B\L,KLf:(RgF1DJR(k7us>=%<)(+G'fZ^^Ypacq\DtZX1,ItUYFdBDZ,=!GjJWu
%$/XPLIt]2pDtnuXT'XTmIY[H&S)<]ERMWXr*36f9P9:B>ofJ=)e9kEl*M$:1DQ@b`ob0AeI7+bN8k8`X7gM9WOhSIqo;WlASIpid
%:$3c-j9>&2Wh4YhQHg%#Q\i+g`PMpkiMs0REEG7h/6jOQ^(h#'N2<Sph5B:7=S;#oiFmtZ5hIfW"L=Q6M3g]bTm>18_m/L5<Cs#e
%hfP4pMUB*%4$'SA<93P9(HmC\bpRlX8u29ODl7jdP?pAEH-MD)`11Z;p,g$\?1X9WbL0bZk1-b\Ip)Qg/A,[tDCA/-Q%`;_gAPUA
%-aWHB\\$Z[[H@3.BmFhmotNGN!o,(9.ATdNAj=N),;nE@p:FhjL0bX%T_>4ojF<@u7&+2HFWa)tU#*!Nf$TH33Th?DgNI_BUjbCY
%h]=[qh!hQGG^q7b3<=i6q.#ROPsa,!>>K:/23h2)pYB.Pj:-?n-<+Bk9YE4c7X*)<<c's.Spjc/Sg@OJVV3Xl4:=\+fHb\r0gAqJ
%s!l^U&Hl.2U(P`NKUrpbE8ZU%anK5m7-Fs'JjFf#`.CSj%ncslj;8fA:FPelChW%nn;t)FWF(;=\,Lrl+Ut31]8u\ZR6$7,b[qie
%R-Wst"c3JGCq2oB,R@=`Lp1ROi@K^;2,(FsSX`'k>XH&93Op:fhCjdf4OngO%2$Oil,7\k6@u3[V(,WT&@,31N"lt`B]M%mcl2P<
%1B+t^4&iIJSJT+W]WGAmWs]]f5o6X"ZofI59jJ@kbV\u$WZ7\1L).QEdR#`T@YG\]&3=_H/J0:kS"MM-KQ]?uEa;kI?P4mc^sR+[
%U/SZ5p-GB=H*!CMKsQdL.6q?s+GE+9XL(oM(\MDR.d-k&SqIH>=ZL[Qk7Ftccn89mDTI_0b<hJ5V4=!j."<!JW?_KRi@7`\WK8Q"
%A6$=!cO9B`,N#XjjV/[<bI2KL01(A_[9<sA$PgoP(TRA>4<RV-*gV,;WX2Zc5W7C3-F':*+L/d'LlP.<1CC'Te-HpJmpMI`U=D\d
%3[L2gY8[q!%"m>PYRa?+Y.3\\$YLJ#@Xth>7q.a%QN[%3?)1)5RFb"</FAhZj!:E10lIBc;WZto\9Pb><Dor5X&HoDM,@Q]$?S+q
%!g5(pJX6eN86M,*\Amgj&oD+beXe&l!<RHJSE4]pU^H>pZrCq0.[kuB<VL3Q5cT_:-1.&0T2:f*#,P$D!Y/Y43?Y;a\B.C]T^Q/[
%NZk$A8%U#X\LoPb0*rDBi+V>l)!#SpI87"E;`;pA>,g5a]?B:N8rr61ERtir8aK?<WtdY":tRA-ZWBb844HGNm3nh^L$lSs631Zh
%7<YQ7Fi'5cfuS(:$;]`[!thqKfla:K%cO>\5,k2;g-KdA[<<O;"9aha6W*qf*m/rUqQ?OOm]`0BI"DT/4K]U\$hX?<McOb.$BA#&
%S_rnZ=nq7!bJ-Z0OsnFMc`shSF$c"Q%i0LWLk&<^8G"(sg`W#fTZQE-+`>1qJnpHhBUW[*AKN1<N=1o.J<uWh+8X7UJYV0\3$ibj
%n#mp*]D9h"EjVGWZq5;f<0F@hg3Jc#RcVU0%e2faGgmL:W1E$?9c#hDGHCj8jH/4&\VR3A%S_O3g:8>W81^/tC!Tu-pP16YVP88K
%Jq3b<&e1&_@Ckb.M1k!p>1?j?6GZOebujtZS;9[(WH3J'V&bE[0g36K0dZ5\3H<lJ=d6SXOH;bg+J*F?%s:rcEr)NTh%'Gdr]Fsc
%A*C;fKDeed&uCQHSW'/eZVIr#+:h&UDt=FC6aKM()\,fa+@f6G75Pl>T0sk.9s3XC7bj]j-8?FM9`c1i?k=]T7'YOS5Gkah-Dqie
%3o(^>N(KABB4,84J/Vn3-At9sKK77mUkd8PjP5%),f);*+A1BHZ(N%#&fdSL.o1[]ZUnU_FA'Lo7hADmKZa/nPKTE5JGV3;2G&-\
%)OaR9%JE)UK)86`;DU5r7KUjZht/7=CZOnJe6B#6Yh(a$3jd6dhLL3D3'L0IX%j3]CfF-\c04$8$\irL/JO*Q0%d/jbO',NHm8a1
%:'=YM;oG]2$,3Q=`17l8hCkRX\K__Ie.@-L-hZ4;q.:=9h=K.#FIU8N2^R5hc64KYAI*J7&RRJ&:%PVXBLK#PJ.G7@P5edJ],,.G
%qq?b>!4abPg%XTUJ,Kt8(C)Nm1T'/Q7e%OW]`V%D\kuNS)9Vi`":XQo+Z5mj+i;//]0PEsiha\/fMd2CEeep9o+Eb@6bg1(,blLn
%cH+h]qk1kOclu(r>NBNfi>h%ta=Sla9<bZ@n;`7?K6s@m&sf8D4"a7;?)eIRVeOnH$%bO5-Kc`jcU164Pr8q#C-Z!VV4CF3"Q[*C
%"Q>^:qZqP:)PVnT'F,_u*9(92/R%k>a;+X':1WY!6h4FqmM!lj6e$bBm0IM-bq]QE\eYP`0gB9IRR0/q&>?1FHKm07:7#XS4\I:;
%E00t&Bmj>`p&c3`8e&nKn<f'Y.seT&qZ\GhZ?[FZ(4t]aY`3u!1)"f&)bSYhM&IO$rr]@2eN9m^<:fbZR8.,P%=JY;ghj9&0!"6l
%i%6AA8oYXT@[1Epe>u24de]S:8tetd+I^TT,8_<@3bW]id0pm1,qH+HEl^;,T/*u&W=i&q`!'CGW7MO$Do^IT6QVYX]++Jo9+s.t
%b#rp_-&XI6U8>dToYf;cA)selHL^Q`]/>Id=dm&7I;#U_OtR:'c?[?b*(//Xr798iFjQKq<4KG6r>Hrroa`#OI2IUlD7j6!cnEIb
%d8VTTb5#)-JgG'eVkUIi2K[D"%X3l)l1Ns?O(@9k5q.s/YX;N/LQo($VhVh6jJa)9BC-OJaQatkD]LE5Z.6tHFu$(oEV)=8r"aj2
%k?b]-djM//o+c7*aRaqEV$s+jh(0_f%kYJ\&A[8g46ch]c1S0W@oU?4XK<86IfZtc<\<;,HU=\bj7rLl*Zjgn:@MH>9-gZi?;\fo
%Q4Bjcoi-[!$>U2mh&r,jU[]l$;o=2\DWaEJ+eNUA;'QD04<bTVf,Wt&%?fWF#EFO&N'Zkih?U`]n=\9q2VS;Oa53i\l$F`iBF!0s
%@.K@A1G>7pH'^6VG+!N-O-4Y@)e(1]K_'0NOuddina>Q'g%^1dU.u2u2hGqHh[[bHgBD@WNiCuoEjD"u=Ve#:qE*$)HZ)*TPR;5m
%8*nor"b!#iHto\>=__990NX[h+RUcKYJAHPpZ3qg+A%JIjn"A`iNkM<en<[qcs%KLX#"=4pahH(oi\^_oG0sWl3r)5P0shmRBAdo
%3;0>[F)$!b"-J/5QO=aW44XaUZ*8eg$c,DrQqoZ:pYg;"rmWah7c'I.3C0Hd3Jp]D-p$;9?qCBKW7MNIM8#LnKU=VZllq'C<Da=W
%LX]40RoWj0JqU^WQE7Qj[^aM#p3J/bNsQGe(FV+YF[B^JN`'ediU=s(GiDPOrDb=%:.dF<>qqXs9/<0C4VQFQa[RV*8JL40OSZR_
%U]s.!c(M)T:223&[(JrIp.t:74=h_$)sNR,&[&]VcPI`c`RQPIAf?s"%_Z.id5mJgG'/Y8b6:I<j/J?8onJIs*`?Ut,)A5HkR]<n
%2aiD';C#K6qkUAN2pA5UbH`F+^=%qmR;<IJ=LO=\3:"Bm[.;Wr7;K9GlTJK%!8UWb(\@-L']!\eT//O2QhNT*nu@#Nd4VT8X"36$
%DRm9.Y-4j`472%i]=K1NFrK=.k7Ec2m3ugKIt-KIL2KTXlS$);()s`LLo^Y>+`a4Y2;rg:aY5+_/%ZSb@OQ#++Yes9>4o"TW/6An
%R!S/HLV?^U8Q)7/_eOoaOK3UNPJM.2knU;iXlsIu1fK%%n#E%H,%1cIe9A#t2I<&\8#fVo;fItJ1PWXtVr7qB_CM"dQ4CWYcDW1W
%8WqECP*X]?ls2I&"ps2W:8aNT8&H@]<G<Z?&C!/-8^6?jcGK.^?\@FKrdgi<%qC^5NV?"A9't%L-+%^)[@n:d*;)Jd3F\J<.deR!
%@;:C>"B=jP?W>@?#VlVl4$gNQ,eB2_#,9T@3'i@<e-m.P(6.?$EZ*Jq)S"Z7IAgnf8[97LGa^]9mO1sI)oECpDhHuLTb"o:Ok];4
%N7nk[jZ3HL0[fWeH%BQji%>]LV;@0on#M:i7'f7+-nU0^D#^#&P@HRUAR4G$;Fe``m07^*QQ51C6`G*H%e4Ws.`$R-%Zb:GTDCE9
%Id8(8)Y2gFghj]"b*#OOC4-5eMh'7075WR*UAf>%j93L5f>JRTaR\"lOG$ZZeaM#9VQ$btf+-c;"mI#f7Pl%[Q"!Q7Lq4m3Z:%,q
%fZpn#T.HSm-u#j@%Yt@TVtV9s!kB>_Tg:fLG/!A,IR2]pdn]-XlD!nPc)U)7-kK"a3Qb\uB]E#NG7,_aYI5j7/SUG+^_C@G^ueS^
%PVeH1q>T*uV)$f>74bf08"VS@1^QY:j`28]B]Wb&_SVBc.hiBEk(ZlOOYSqPGY'[%,@LkACBpANVD.Y9o$K\+2k1)MjR2(,HC9K.
%2P#,O0QnWREK`0:/#*BiChk+h;t1!*lq2+$"_ch,AEX+U5;lNp\7&SY"hK8K,KT`[cocH29):1ff@VCsl-un&+8X7\"+.q"E(]O^
%hQMA*5_NlN^RNTW)o;8nlH@/*MT6m5*"g(":fIO"+;'4,!<`N$YW->g&PW]F9e"*C(m9@0[uNA3[bYEMQlJ4<kAD%1cnFgZf:2RQ
%#-HWf^QtA1fX8hs`hkZ22=tqoGD&4PC:Yt&$7*%hY!E*!^)6^^:Rc5J>9u.Cb$?74e/Zk25;XHg#IBZ#@p4jnV4:J^#(:.t^A`8M
%Tb!hq]8lNafB$W;?&4[QlIZ]W?FM-jK)c)&hjBT.fnSR!L`3^clGWYBWAu^<`Lr6^Bc2Q5;s,EU?#N8$0P\(ZIPE5?^a;j;bXhkQ
%lu9'<+!>2mbu^LY`e@l:qqNkK!Hi!hN]8Bm['::Hc62D:3([I9)Yt"+[HgAuR$2+5KKe8pC,+c)luPX?\?E9AVsKk/=eGjlf\#9>
%(3C*5$RAsE6Yb9GS6V,3S3tl2rO/IehtEEW?AM7GqDIJ(^U\jPB^!>NjDO#VipAM:8t#F!]-P`]3(-Hi^0#Lo%/%1d@cp',Kl``l
%bKqmU:<aC./d\loNbJ)kO?06*P.kfjoHA<kf9(M6-hmSdVn[/T9i\gDBCuORFP#`q^"jm\((<7YG;Z>`)!PF!>]W\'s&X)o<,i3?
%+`[]g^\I2L#)'uN3CJRtWEVfe=9#qiN(7KeDM.n&DBbu4ltHLr)1tA*1KYn^+0e^0&A6_p,+k1<_2sXKD:d:A=t%$^@q=o3i8?3o
%DOFOA6Ca+9;hI:+Hi)ESL-C8cm5i[n,b4Q#)&5TlV.cgF/oIaL]3J7O0"aT4Trp=1C5P0<1\IC;om6aii+V>l)!#SpI;EV`TKrjU
%=7en08Xb)Fer*5q==5,X(T023X3SgA,lQ$3':80X/$Dae(F/)bpUcF?JGatnTatXp]8cP>L*D+l<b!VSGbE\61DJNopMH)e%a>FT
%L4`8sc6;LtAgls5"PY@d3S7EN,k)hC)<qZVE(97RhT$IjKT9bB(PX7RaS0D&,!.(8_:-1\1c*W#%R)m5LTKC$Th'16KkZ6aV2P4n
%m>O8K1uuIj\_DB/^[k6[&MNWXS/!UW[=V,3S)(KWNu]tF-9NF(%'qQ,DMT,-SVT9kC=^1X\:,!_G\XHICKUkpp3Xfd:CYXi8N^;!
%Ljt@E!&9H>,hhdLp04>05%+\5ZDaXfGBM)I4%spZ2B=gD'-1!o[#Ho#O*ZINF0d.?&a=@Z8-PEjRm'B5c=.*o:WNW-aLe>H3J4IG
%hmDORHG.\Cn&kJndp4E@$a"]V?8(s?Q*Pkfl(9J3:tcP5eSd563,%V"WS/Y!`b!*U/L4!jKndmq+r8mYMe9Y"C5hqARR!,cU,BlB
%N'&@]0_,pkH&m\AhEOf%-`m"nhrG*h:N1"$S+p`(@Zm3,ejq$So6pTqU#Pebb=.`TCU\5IAVh7@Z?2Rs-Y2IRAG_n5DMq^9m+.K9
%KaI6d-X7MA<joMl_/=,C>F5EZG/Aqnn[YZ@&I$@^Knc8.&7ADPU),&c<8BMI8g:!mL4%NPe_8J_rfEsj!!K$u4hZ'"7ZCOUque7m
%\00doTnjs0p.Ins'-Yl/)oPoUH`[Nqfb+$+!lMq*/kSrA<+74]U+js(=)!rL2s&)%"EtPW:2T/*$2>8J9F5QUP,;=EhR*#\Y7qu<
%hMg.Vb:.\o&K<#J,u'JBrGtGP7*_E&qbhGa!0MeYijp;Mol^X/2B?O5^?6C^;?Pm7-;\<E8-Q'V3B@SD]RYK4Do;`56FS]K.\[$?
%_B/=rkb<\[IT$A"M%8CC8e'0<3"QiHC=\(?`"'`@15)Z[>F;5l.J-Cu"Hk1-Qr?"J?k&O#B=&W+K@?o<8Ei12#=k?g?2m`L`%L<q
%Q*l*.)9+5WqY`CW@^62rT%01b43Dsh\)3Nnn>P[^Sq#$69""(44$_MVOEdK/@G.>d-58j_+?[mNb\_j/q2Iq5@>fGR!uQI=B]`Yd
%B\eF=X(ZKc<Ms?3jgQ+o*AXupigq]8;/,oE7'JjO9qi(iq]U-S*JG'07buML+gJD0FqK@bO>fRp7M)WsVTFQ!+oB!+i)rM[K2t>2
%!-5N3H/B`kZJ(>C:C[1''p3QnT+r?"Ig#IB7+(HYmqK*Uo%!o=W/^)lC[_jHWKc%'>!14,RUfqPLe8[ZMn(i/:<coc?_Brj)#!c#
%[RR1ODNk$PR,4HL5%g,:F)J0FlfXt\44<]-l2FBJi]ZJulEbp\>.c(3?^pK0;NJrc:gPJA182=5*OlPg(_#)jlS_-i4]"L%:CL\B
%YSDG6[B1pho+"Zs0EYAYlE`jA'n[EJ.g@+fYif$q5]P[-LHOgC3?].2jc9!@7GTl(Nl)PNFXmYa5??;bh26b\aqA)g+6r[7R$:,.
%)"Suhdcu=/)d#<K/7'82D\=R1rmL)HGT0aL+tR%>Q>[E1a,A!D`p]nm44DZPUKM(L@H\E/\cs>Q[d;H^Sj=He_)KI"i!gW>.>6=r
%eGIoUWNTIN;S2h%C7-Gg[lFehmkYkOi^$BPQbXOYG-NUWc#JMq[f(7]6S<CR1en5Rnd_),f7rJuSIq><$<qK9JQ9I0>5au=nYCM]
%WI=<4]6O3Y]F_8Q=-q7;pUAl<PO@i"GO[f.Hq/YR/D9lkMb:se`efoU6uGn"o*Ud^0.@[J@i9=5k$UB%LE*GpjBs&o5@O]Z4,0::
%*d;PeB+-$G>"GT_1.85d*n2d41)Ph58t^pPcEEEVLg:o>:$i_+(MUB,j\$9?+SNqNa.#1.Q6U("'B3_,RgkC?\nf8Q\JRr7on5fV
%[&/Pal-Oa-W]<ZW?k_M>KaF:G]$L$_]&2=.oQ*KW,O*)$FQo.'E*ut`\_d9P?T=3Th+cLMW@J5)Kq%DN+835i$@>*uoYgG`UPBaQ
%YqsuP)c/eb6,YYOe"/k6.HMgQ4W<=kK4MJ$6>Em#RF'8S2-^8$SJkEh<ocO'B,"2N],a?AKnR>ac!)sZ]V<-Jm#jrD?)T_&V@Qbh
%6]^=m^u!;G?j3&:m!@Z=]"b_'c6tj"hO\Z;n%=P`iT7E9rOqmC_sHddG5]^uGS"1F)rKP>+1(AYn&'l@TdU0mQ'nkMjLl'10i(qn
%rPP&6"M"3dY;X*Rr+jXu4/-Idl])NeUTb(rN[@lA`&b0(g-rFP,j-\3m1/o.qn(E9=X0"ds3->A3Q1k/g;ITACR)sa=sfhtqsBJm
%F0MTCC5>2[Rm@=QBap0RYUIp6C/HU?W@/t(Vi,-4_0pqeTeK2o8Z7=.[H[pa1u@Xe_,7o^g9eRI-i8`V$DDmGllCL(5-Ln%1BCK5
%*CqGa0%3c:e>GXUpJ=56UYV?n"SpJe1n'\raI*Q'FmH40oQf#H`mAGU#Q(=(,-?8Sg$/^km\a)JORlY-ZS:'Lith;YcqUP4iPH<$
%ZCR)W/PZkO(Td0OTh'Wm_\kLZPdQ^U]f"aa@o3pEI;&&^>/^-m%E!/$)WVm4IL0lN'\eV>aIt^I@^N)k%`rWd$n]u.+_l:n#.;1m
%Du2KB4-+P]7MT%gCO_PXf]!o_]05H-T3(^U"km!Zc07j:;;NDMU:?T\-U\`4PnL/]B&dr%OhD843AS,.EplbN4<*_U#M*hdXA_LA
%.q5'j3Q.u6;9;\/%6M,'/Q0?Z<mh55L-CP^mP`oLYCXTQLZO%s8"[@/9,^4Oe$`Q,@ITPGm$i%$[5DEiG&q97Os6)\f0l#m8SuZ\
%gK!eq7<bXs$8<+2!E"lcmLBM`P8eO9&Q'hCUM-G^D!S[t<GmmCM#&F)klY/>hmS0Kl8McniI65OWn_2snnCVWO,9onrj9gT_s*rn
%),DCALg,`3HJr)&h+:'a+O<E(M/m7<aaQQ_mnmqo=4G+E(.!!,BY$Xbh(gtY*n^01!q$sR[u@2r#MgsUo2[#^cQBFe?t?&0e<`jW
%Cr@oTY;6&6I94[3`b\EXaC*fS"u6A)FeQ!:/FO3rh6t^%dE.$W"&;AWQk!=a;G]@T9DY>r63qD]?YLIIPDVeeE-[KbBg5!t`EK0O
%fGprSWpMbI,.[QaiVg=H`;24Y_SGE'P2_BK9VOf)*l\&4j%P=[`sI]fJl&;%,k2$V@3\TEQ719#c;uE<k$M]kqnANk#DBP&^aGG1
%5(B1<M"1Xp>;/c=g3!>\H;4!D#U[:Q6Qn7Am"nX4FH@]"<fDZJ1I^h4,),CI:"Q*\%Jc)]m2soKq8XGRq\Xf'F3PDoi$_iRo"jIW
%DFNPe!B2Ql\Rm[?Et.]m+R'W/CLEMthUC._e'ZiR;`o=?R;4FRR;:MBg27s_br,G48mb?&<>qSj*/qt;U4br7GE+h%Z'j`c)=2>N
%$!G<//:pQ]Td]XPNYfMQ[uc\om)UBlA/U8FO'28n<rE_'1/O2O8R(7UD[$FbU`o>un'-7%=1J!sOdGuso%-qFV1J5i7lEsbe=@ER
%"gnM`,^lJ`"b.Z$DOIB!6h>p(L<c3aOjl'f/L_%g_$*%taYF^r(:(9,m9'Pm/OP6[0fC\:EGcp]le%dt&C<13kT3[ph"@Z0ph?XN
%c'l8p*D/A+DK8>)*g#qKg<1CtlW.0#KXS90l[HBneR#XtgqIakV3L1=j_#go]j0geTIXXQk!b*,YlrcLa[u0[PkR_XY4hg,gA')r
%gR@"5hmj$_*XT1m=&\_Wc=n(I4I[)a.)0[T)uY>G=\e1JSJ)l_1eWnU,CqrSOcsZ\DVoDTGdq)JAnr+>8Xd5g.3n=43F8DCf@Fei
%4f\J.NGSaYL?2$.^P:/&qfU.`[LTlPf1A]X=Dn]'onl<)'oY0n(H)%?CZJi?FRB8/FUg]tS9>J>k]]2lqbo'O0cMqkJto$3Jd?il
%3>FRY],U0c%$GZaU[Ui8oApt)TQUh)<>=RG3X>OSjjVtWq&K$]c3J?iHb6WMfi+!qA/0TC$W:>%ZS02P=0_;)_")XGq(5-c*R2;(
%HXFb3ha6PAGcASV``s%9E7(u]!S-i"",6c<\d/Dl;%ee\VYMSkY<8RhHXq.%5-hnB^BVeun]IZQ:8;7EeAFt?+n+%1nUXGQ%-'8&
%%gd0NJ&kNA[jiU,KoT%qGb.TOqB.%+4Os=D7ccFo>['9Lr4$*d5,JYUL4c[)NZmlCdIDc_D@GP`hA[]$<#!C5]HTC/r?*74*#9BK
%RcA\mTGZ0X_W1cU?Cq'\*L^&_2[l#(T#`q1rAlu'd)h8Ugr=\N"S1>LoiRtBmjO/+C%G!0'[P-<OU@%ZeJ=Mlb[>C`Uj`cA);u%F
%pmdjAgb5GrJPL(kj#14T`'5K'oq;OGjk)/sQ6g#t2a+XP5<rj>qek6D^6XlgofNUJ+.<p+VHg!Q:kn:0bouE(Id?4+[JcE5m:lgc
%ILZ/#:U]^2m<E;6m5E[ZY:Y'RGE?&e\8*Tt7#\pYm"VB@TtJseD\f4(Pd+,*X/>(d``,\`JN'#@l65f(0Vq4"ok?X5<:18j/SQU\
%pR4Rq-\'rc8E3T_[ul+o-Y;>]n\RmbqtT-<U#G[88[@f!/cb&\*),Y+F0hanP]0='*$S]aW/dIJFV[iX`(Ts<d?$k1jDKVK@W#5B
%'9;n*9gUoH)C,s\CdPQc."N$j/$`e/;_o[BXtqYbLmo'X_^B2i8^o81PJ1okjH1=jgL-Z5k-ShtW9uV)H[Ss6".OJ;_#\<'q*a9\
%)S7>iI=!8\I1rK,Bt'rM*"@<5KA:=V?d$eL80*lJ\Yf\O[)*,,=,@@[pakr;>LhK@<6Ee!$loCfg<Ji_8"CPf]BMC;JnU8[Re;,&
%jR<5*ZH^m;LH`(m;U"=ZYZaGc7V9"JgT&To&2`H2Dg0<dZ<]\<KY2,jQr=J3HO@?5Kl5d".[:;K&1eKI;!Y/=m6]!!AdN(rHk:P)
%D<li-S[;Ai@U:+c4/+]6g;HpZB:mPb-T+G:@c+\/&q#2H*(Z*<DcVu,Hof4Qii-Qi2^G-K[k6m1p,DiZd?$k1jDKTucr?1e67qjn
%-Irg`-)%%kMBifPo&@8@$W^!1`i(&4p!.%kk7F7,Ncr6ZE^O0soH:t:P4!RLWSsNT8eS4_r8i73P@1*,pEn;^Lcian%s/D0Kj(%^
%pR-W.@%*=.T1/)$i-0LQBG&.oB\d=`$.6>Vih&#!a8K!c=K2jT%:cAlglLq@BDkOL=K;o>*Fl(*gf9Z\7-dBiB:3ZG"721i6uudY
%H#^fo"Ui`'-nmpr&c<PHZg?`YiX:C6?*KjSO;GJ^OC7%aE5Z7$(qrX+3gZm*$G#<FEn0T%>D:`H;4j!sBKhkkTL#?&hId1UB(8(6
%CaUK0NONVgoXmPoSD@JPDR8ne<8DJ0T/0*k]?;46Gu\,)..=Xj`Kb:_ZWg]7QM8>:KlVV/]\cL,'<,C[R'2L0Ft(L1VgK+,^VR0O
%A[18;g^m68GcG5TdNN'PTj=UeglN8^3Kd31Zp^;25Ub]i'UC5ImJ2'1ARp,'?AI$13F.]B="*ES)U689*/43a.Gj;5<7sT78Z7I&
%?)m<+o7U6%0CYSi3c=e<F264=E&TC#/.el:qsp2j0F"V\"q1%>_?dEP<]jE5#!,=P)eZd@V/>\Od@5G(o\ljMY4XB_=\_lVi#,8K
%;\RTRO#/EiI@t6\C0SgAdi5aOW$Zk1CS,ncKZlOTEEXq[7sBBrG&h%9c)>kFqAk[q[XID^c.X;KgAM8#.>N_0e5L7<L`JXdgoW)3
%*JLT%US^`j:q1F1Q=_H4"WG.2W*[M<_,9XF)#h7>L'M%SV4NY\b8O(SSC+8a@DLj5V*gr8.cSZoK7rIp'TR6%gka:),3KM5[\K=0
%KhMt"g"SO[CQSJF5B&IO@171cnbt#4e?7,7AA)%,&1(S%[XDdc_Q.u%$]@o<Al8,R6^6N0MaE++[EU.&EAKolNCmZ#Ll+uNlIR-k
%-#_@'#qiP4c8>_2<=eeHKSgn_0rgum#,hPO4(e@_]Fnh=H%BSW>q]7dNcK'Xme>fg4=WmSje#V]THMZbVG]aTc4!cbOs4hqA]%(o
%ij8!MV1i;da;-9>n!t@RaUg?%&I`]hU&GsS-[Zl5^ON9&Y!r^XM8r.c#W/!F3W]RBMMtP\bAW4#,]9b(OB?!N/*c4*@p@J\=GB5=
%W9m"b.Lc"hh1Y4]"]+2UHRb<'rH:a.PtU>jY$6g?RR>T,UX@48!n'3$pgaN$_1'mof0e55(<ob?$p@Ia;!"Z5<MMs'gY=]H8oo*E
%TX.&#5bYX9HEi/T;=<g0d18bsQAB-`ke-i+J5R1e<fV-(2Ulf:5D.2TX*"WG@JG:>g"W&76U$'][[f4Sc+-d-^-bKO?58SEp2B8V
%`n,Dqf.m7S7`4JEK[?YU4#\(po24'_D:]esN/#idgB*5%6i9:1kb4[Z6nY,.;>`aict"u/L>?MK.%m68)\'cWEXUmt8:"Rq26^^/
%M&0i=^WIA3cp9T.@PkAT9I<-"gPK\qYrc`K`F<-p2&X^.A'5+ZgU#N.I;JG8[X;u)^Jhgjd(2AeXl%/7%r'5M[em\lA$Ue4fU?e7
%L/I1uQOWqX((@r&mE`Cj</<?.THT]g7BDsCUC363<3X;P31<OcqH_Y5N?IrTE4!em-T6X6]JrI9:bf:O176g1'@!5]'-i<Z,nubi
%F8NVuDTH::_&#$n\.)f.;jJL"^R(`'WUmK2$RHe!'a0uqT$'-hY]lo1-GM31]:oZ:Uqau(5jiDBf2!B9GAj"t)'ub_Rrcp0$g@"1
%Zudb.HfMbXgU[1SXF5U7c9b0jU:]mAA($f<47C-+*pH8>Y.Ta23GP(hUc>^WkhV_&:^KD/ijpJjRlCpg>:4+5ii!sq>=7@E\Vma3
%oY*_N,Vf?@R3DJd'MTn!%:OII6Y;F$M#/L**EI$`Hm<Y<3Qe%tHG:J`hk&_fnUfI`gsJVM=_*]tA4]]t6Ma#?j$dcIK$N\0dj)4>
%n0jAg53.i?C[WI90@7.OSCcYBN-ad<qS&Kd-c?bni2pOYLsHC`-'<?^Y/bc*P]GN/Gl\c3-R+;E@:Qo[MB'Pq0J0kr"YIhhK]!jn
%;GL//ORtLrbo?M`#.`JZT+ofr*Y2JPqZlo-eTN7)>UC=aA/b'%\$NL+R=PkD=O[>,e]se7`]?EUqnB$c1nb0gMJ^8R)`Bi^39a6Q
%ADTfJFGJqdn[mY_]j3_PENN_c".HfD1hdFEVq-l@KFLbUL<'m&.>,GfQ"W(6(9J1\_cB7^;:1gA5:2\>]@=eBj!Yjb@$-=JJR"sp
%?>A9.:`tu]"hIak-i43ID:_uRC2>(X-STp$8>)I6Q.(lr[68c,-GgmpM0.<22(\^ME,#mQoJ<M:4H\sm-1sn9X+0#?7ftPVf:bC.
%"-4BAWkh)GiPtTG`ai^i3ULG.:6IDh#niXkGC4i(%r$Q'9mG,[h;m7_&+sp'ccg'gn,bba:!mQ$U6*!TNuW!<Zl`"5SD4Z_n!D!U
%Tlt`FVM>%$OiTONr=Xtp"Y^.Vg3/5"p<eO$9pRnRP%k&l691DSm!M7`'tm'2'0An0D3FLLiYD+$5'#%qQY:k:'n];GkZEmI./10;
%nL*B4$/[QoN\U0I!g1QJ/%U2Z8d!E>Lb4bOd3+j8?->o\_^7^M,<.]=GTIaY@CROsrQq?Xl#`cj)\$Ll9'eUg?fbsdX@g&7P-K:b
%bu$-"$(!S6PU85%Cd^W$>\)#^6?)0<k?2/m$0rQ;^E%q%3f0gu:CRt(NhV[ep]uHQ*b)M/#bt8'RLm#k<8F<u4+uL'$-)"K8GdR&
%Ztm;L8VAUK/'k(%6H,6bP,&Y)3]`g78@?$E"KVt8J`R;dm?0Hqo?]6mKH_$<<inqO?_Ns$gCaj1($f#67]A?C0Uq\.eO"N?d01;D
%?.?kXQ(M,Wp-(_jaG2]4VtN@(<#R%*TPA@4D?q$e3UiOY6b\3X.TN3R#n:q%,EJ^#o$TDZ6bh;<cl8!R34[dg+$Ft5BbYc0,TDX[
%M<m.b%b_Sc.#6\V5,TuQbsU0+Zf@9TClC8\dA#iPFp"#JgO=;R9601$Rs7G92p&$X*7EWgDMEN\ACM)n,1hldlBffa,T]->jG$L#
%;SUd43J+2:6LF-ZT$\mQcgE%o.!^lKZ^^_^[N_.B6>=$V[]c.;JPWA""cp]u;Xk,k#KLWUjc!Q?W04N%]'Zp0[nd`EF:#7EITp[8
%DA[K`1MS9pa^[Q]GnKhf:D3()a$/GB*9+rX.*cS)B'20ulN]Y(he:)@;eiehIf4Fe@DCW02:eKnr/n3KOol\)LngQ1?j#("`TZe(
%h6efZqb2Q;lE)L'eU6*_^7LM$H'dN^!uf9%oEsJAI8ds"(t?XE^H\mWfV#s%2,X\H9U/0KR;5=A!0_`h0nWfKD%EoJ!)/#Al7].n
%k<*XXkXS\5R;kr5bEce\WR1+chkO<6EU1ffp&O\@GG@0q)Xes)R-Z<^:cXo=mLZS[ni^0=6)HrHGB^DG.`X:96Z-'mX/:JY0(&%(
%<;^UggmV&(e.aR1JCGK-]l\FXH2;:4jhmgSpR'rBGae!12Dt.Y,airpHNe?/kEO$(1E(pEImLWla'OAZiKMtNSPSf#J8:l-?QD:]
%KoAQKZ3pi8\8^cY7e`/&7PP<datf,?4;f5%m4=p6?oSO0->o\H..q5(hilgr4`Zq.<Z[aUY[8.k^K/bNEOV"\Y&%cI/3RtWJZHq"
%MD)YV%fB$?fP-<c5D,)GkWF:X`@FRZU!Qd44\m+D"Ke0b.7tL$4M\i74_m*gU[L,CLH`,[0*h4gpVb,dNXPU@Tk/'nCjH8[gteAN
%ggcTF.p@77*dg;oq0_9FY4$ds]KEi[E2=\K^UN'9FH6`G6-cs(B>Kku:0I0=P(^Q&&JDW]%bqAerfC&+?Og>6Q&TB"\Phb_\-O^V
%_s-nu%0u@FYs#PhnD'?#H!,JbNRkU\?">Trgm3t*05HVGn#s+KTOnC32umsCS!T^kK%=^J*dgP'4WT?q&_+8]^)YpLgdBM_R]bG`
%L7q7Kinb'QBt1'84OG:9qEn`Hm5Fa:H\[\9m"7fS%bDYkpp?r@V,1S*\o)nDF:YTO1UL-rpkn+QQ(X)E)OgY:rdr"b]Z$MZ88G-X
%$e$5_qJ.HSnZb%/7)?*/?[P;`Sk,%bD=LcC4:)cdc?*AA+O)W\D][[Iq]>HsVP\NhXDV1>FV1+7HPElmlQT!]=T8_oYWC36PQmi<
%>uNZhmokmSk/7YfmYabR2+fu<9n&<tB,VAl`@HX0?^]eQ@sa#U4&"%f7u>6FQ!g$^1[,Y0/d,1^18[@9GF+bKd__31$[S[ti>oeD
%p2jVca+7Sc!Ie&3V(WeAf<\3SRug5sS\FIKgo.9kp3#?AIS(UK.i9!8M02:?;!JPTc!=9&Ok3a_R)0D<Xcjlq&*c(@B_B=""/ut!
%kpJru:rY<EI;iQ:]O?An!JQKNq#Emh,HK+FK40Z@igZ#PoW4@s\XH_Fh_e`VANW%.%77b?X>]89q9'%\Ms61ISa8GrX?!Ar!maSV
%Q5qYt<:MQMT\5iPp@#DkppU@&%BFanog@GVof^Dg2P?-)gJYc;e<=`R6hkY;<`*fh9oiZfKlO-TC*iNMSoHk(3Ji*#X,-W>&:WC5
%cM<tK[UE:PbQEReg=OMmK@[K38?OTP_Qi;_om,leq[JNB?TCmFIGK;<$5I(9JKE"[>l21.q\I"*k\JSiIKqA!nn]0h>h`ZTSf4=/
%nQ@2Z'/X<Z:l1UjL7MR<SYBWZf:WZQk5Kq,Tb!o^]8u^&f9`_L`NHUU;?%/.\Bhl>W\mnppDH@_;`f=k5Y@I#i@W75+Pr@A`7;)b
%.oIt<V5`EjO)5mWHQh_X5L6hKSn2eS2<j2TA&GmM0YEF9d=+:;FutKlQ.Ca:>Y8u+EUOp3TAr9tGol[VW"QH@o8'P^gE.3Tqscpo
%Pq>AlfFJn\k63K:aUrYXp=bLa1Ia9BfJ$kK;F??Wd[MG_HjXF/8JlN9?p'3Ul.np3<W8oQ%Fa246bTH0a@Y7.rq4^drc>gPeR-)i
%p]!/OrVh#Cc/8N@r/Z@-a8b]/gOK%T0AjK$i&C]*gY`&!^]*fY5Q%_BrUQ;)nb[h4mJm"<gMd,e7o96As).l/pA83GpJ6;<dkAI_
%qksJiVuI,-58lc]c#<U\5Q-APr/:R[2]/+O~>
%AI9_PrivateDataEnd
