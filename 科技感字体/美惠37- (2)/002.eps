%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: plata_50.eps
%%Creator: Adobe Illustrator(R) 19.1
%%For: user
%%CreationDate: 4/12/2016
%%BoundingBox: 0 0 1200 1200
%%HiResBoundingBox: 0 0 1200 1200
%%CropBox: 0 0 1200 1200
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.1.0 x29 R agm 4.7731 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c067 79.157747, 2015/03/30-23:40:42        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
            xmlns:photoshop="http://ns.adobe.com/photoshop/1.0/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">plata_50</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:creator>
            <rdf:Seq>
               <rdf:li>Iryna</rdf:li>
            </rdf:Seq>
         </dc:creator>
         <dc:description>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Abstract vector background with high tech circuit board</rdf:li>
            </rdf:Alt>
         </dc:description>
         <dc:subject>
            <rdf:Bag>
               <rdf:li>circuit</rdf:li>
               <rdf:li>vector</rdf:li>
               <rdf:li>backgrounds</rdf:li>
               <rdf:li>pattern</rdf:li>
               <rdf:li>tech</rdf:li>
               <rdf:li>processor</rdf:li>
               <rdf:li>abstract</rdf:li>
               <rdf:li>abstraction</rdf:li>
               <rdf:li>chip</rdf:li>
               <rdf:li>card</rdf:li>
               <rdf:li>high</rdf:li>
               <rdf:li>design</rdf:li>
               <rdf:li>electrical equipment</rdf:li>
               <rdf:li>integrated</rdf:li>
               <rdf:li>technical</rdf:li>
               <rdf:li>computer part</rdf:li>
               <rdf:li>hardware</rdf:li>
               <rdf:li>engineering</rdf:li>
               <rdf:li>line</rdf:li>
               <rdf:li>cyberspace</rdf:li>
               <rdf:li>computer equipment</rdf:li>
               <rdf:li>graphic</rdf:li>
               <rdf:li>electronics industry</rdf:li>
               <rdf:li>digital</rdf:li>
               <rdf:li>technology</rdf:li>
               <rdf:li>computer</rdf:li>
               <rdf:li>circuit board</rdf:li>
               <rdf:li>illustration</rdf:li>
               <rdf:li>creativity</rdf:li>
               <rdf:li>connection</rdf:li>
               <rdf:li>computing</rdf:li>
               <rdf:li>backdrop</rdf:li>
               <rdf:li>science</rdf:li>
               <rdf:li>cover</rdf:li>
               <rdf:li>internal</rdf:li>
               <rdf:li>connect</rdf:li>
               <rdf:li>art</rdf:li>
               <rdf:li>industry</rdf:li>
               <rdf:li>conceptual</rdf:li>
               <rdf:li>construction</rdf:li>
               <rdf:li>textured</rdf:li>
               <rdf:li>computer chip</rdf:li>
               <rdf:li>mother board</rdf:li>
            </rdf:Bag>
         </dc:subject>
         <xmp:MetadataDate>2016-04-12T14:16:45+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2016-04-12T14:16:45+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2016-04-12T14:16:45+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A8qYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUbaaPqN3EJYIqxFiiuzIgZhSoXmV5EVFaZZH&#xA;FKQsOPl1WOBqR3+J+5Et5W11QS1uoA6kyxU/4nkvy8+77modo4e/7D+pAXllc2c3o3KcJKBqVDAq&#xA;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&#xA;V2KuxV2KuxV2KuxV2KuxV2Kv/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:c1d7a2f1-6e04-5a4f-bdf9-6118ff9a625c</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:c1d7a2f1-6e04-5a4f-bdf9-6118ff9a625c</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:56bc2d26-4562-41cb-bed4-07ee9a405735</stRef:instanceID>
            <stRef:documentID>xmp.did:0F5A99264D6BE51194FFADFDE0B012D7</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F07763D45588E411BF89F345A28D8C9F</stEvt:instanceID>
                  <stEvt:when>2014-12-20T17:10:37+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:24845C695A88E411BF89F345A28D8C9F</stEvt:instanceID>
                  <stEvt:when>2014-12-20T17:11:02+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:28845C695A88E411BF89F345A28D8C9F</stEvt:instanceID>
                  <stEvt:when>2014-12-20T17:18:19+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:2CD1A38B5D88E411BF89F345A28D8C9F</stEvt:instanceID>
                  <stEvt:when>2014-12-20T19:26:10+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:436839A36D88E411BF89F345A28D8C9F</stEvt:instanceID>
                  <stEvt:when>2014-12-20T19:35:15+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4265C60ACE89E4119A65C8F5B8A1FEA0</stEvt:instanceID>
                  <stEvt:when>2014-12-22T13:33:09+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0F5A99264D6BE51194FFADFDE0B012D7</stEvt:instanceID>
                  <stEvt:when>2015-10-05T13:47:30+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:c1d7a2f1-6e04-5a4f-bdf9-6118ff9a625c</stEvt:instanceID>
                  <stEvt:when>2016-04-12T14:16:45+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>1200.000000</stDim:w>
            <stDim:h>1200.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
         <photoshop:Headline>Circuit board on black background</photoshop:Headline>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1200 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1200 li
1200 1200 li
1200 0 li
cp
clp
1200 1200 mo
0 1200 li
0 0 li
1200 0 li
1200 1200 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
0 0 0 rgb
f
689.541 983.604 mo
689.541 982.682 690.29 981.934 691.21 981.934 cv
692.135 981.934 692.88 982.682 692.88 983.604 cv
692.88 984.523 692.135 985.275 691.21 985.275 cv
690.29 985.275 689.541 984.523 689.541 983.604 cv
cp
842.771 965.463 mo
842.771 964.541 843.521 963.793 844.438 963.793 cv
845.36 963.793 846.109 964.541 846.109 965.463 cv
846.109 966.382 845.36 967.135 844.438 967.135 cv
843.521 967.135 842.771 966.382 842.771 965.463 cv
cp
980.246 1011.53 mo
981.166 1011.53 981.917 1012.28 981.917 1013.2 cv
981.917 1014.12 981.166 1014.87 980.246 1014.87 cv
979.323 1014.87 978.578 1014.12 978.578 1013.2 cv
978.578 1012.28 979.323 1011.53 980.246 1011.53 cv
cp
144.633 984.008 mo
144.633 984.931 143.887 985.68 142.962 985.68 cv
142.042 985.68 141.294 984.931 141.294 984.008 cv
141.294 983.085 142.042 982.336 142.962 982.336 cv
143.887 982.336 144.633 983.085 144.633 984.008 cv
cp
146.837 985.148 mo
687.333 984.743 li
687.834 986.429 689.373 987.659 691.21 987.659 cv
691.978 987.659 692.688 987.434 693.302 987.065 cv
702.673 996.44 li
702.673 996.44 777.882 996.44 778.654 996.44 cv
779.152 996.941 784.817 1002.61 784.817 1002.61 cv
822.712 1002.61 li
822.712 1002.61 827.41 997.905 827.903 997.416 cv
828.59 997.416 834.17 997.416 834.17 997.416 cv
838.55 993.032 li
851.123 993.032 li
851.123 975.69 li
844.907 975.69 li
844.907 969.473 li
846.534 969.285 847.859 968.14 848.313 966.602 cv
859.876 966.602 li
859.876 973.775 li
870.694 973.775 li
870.694 961.052 li
867.182 961.052 li
867.182 959.088 867.182 955.44 867.182 954.354 cv
868.899 954.354 895.243 954.354 896.961 954.354 cv
896.961 956.088 896.961 977.584 896.961 977.584 cv
968.305 977.584 li
968.305 977.584 973.928 971.964 974.431 971.461 cv
975.195 971.461 1038.52 971.461 1039.29 971.461 cv
1039.75 971.923 1043.24 975.415 1043.71 975.877 cv
1043.71 976.323 1043.71 978.364 1043.71 979.664 cv
1041.27 979.664 li
1041.27 992.718 li
1044.14 992.718 li
1044.14 1001.46 li
1042.86 1001.46 li
1042.86 1005.45 li
979.068 1005.45 li
979.068 1009.34 li
977.404 1009.85 976.189 1011.38 976.189 1013.2 cv
976.189 1015.44 978.005 1017.26 980.246 1017.26 cv
982.48 1017.26 984.305 1015.44 984.305 1013.2 cv
984.305 1011.2 982.852 1009.55 980.95 1009.21 cv
980.95 1008.62 980.95 1007.89 980.95 1007.34 cv
982.622 1007.34 1034.09 1007.34 1042.86 1007.34 cv
1042.86 1014.51 li
1049.86 1014.51 li
1049.86 1001.46 li
1046.03 1001.46 li
1046.03 992.718 li
1048.27 992.718 li
1048.27 979.664 li
1045.59 979.664 li
1045.59 975.1 li
1040.06 969.58 li
973.649 969.58 li
973.649 969.58 968.026 975.2 967.524 975.702 cv
966.766 975.702 900.666 975.702 898.847 975.702 cv
898.847 973.968 898.847 952.472 898.847 952.472 cv
865.297 952.472 li
865.297 961.052 li
859.876 961.052 li
859.876 964.721 li
848.424 964.721 li
848.071 962.841 846.422 961.409 844.438 961.409 cv
842.203 961.409 840.382 963.225 840.382 965.463 cv
840.382 967.2 841.483 968.672 843.021 969.253 cv
843.021 975.69 li
837.28 975.69 li
837.28 991.641 li
836.069 992.851 833.751 995.172 833.391 995.533 cv
832.704 995.533 827.124 995.533 827.124 995.533 cv
827.124 995.533 822.43 1000.23 821.935 1000.72 cv
821.178 1000.72 786.354 1000.72 785.598 1000.72 cv
785.095 1000.22 779.433 994.558 779.433 994.558 cv
779.433 994.558 704.228 994.558 703.453 994.558 cv
703.012 994.111 696.547 987.648 694.643 985.743 cv
695.033 985.119 695.267 984.394 695.267 983.604 cv
695.267 981.365 693.449 979.55 691.21 979.55 cv
689.228 979.55 687.58 980.975 687.231 982.861 cv
146.945 983.268 li
146.598 981.384 144.945 979.952 142.962 979.952 cv
140.724 979.952 138.903 981.771 138.903 984.008 cv
138.903 986.246 140.724 988.063 142.962 988.063 cv
144.801 988.063 146.34 986.824 146.837 985.148 cv
cp
.376471 .788235 .901961 rgb
f
958.527 955.44 mo
957.607 955.44 956.856 954.687 956.856 953.769 cv
956.856 952.846 957.607 952.098 958.527 952.098 cv
959.447 952.098 960.199 952.846 960.199 953.769 cv
960.199 954.687 959.447 955.44 958.527 955.44 cv
cp
958.527 957.827 mo
960.764 957.827 962.584 956.007 962.584 953.769 cv
962.584 951.53 960.764 949.713 958.527 949.713 cv
956.29 949.713 954.469 951.53 954.469 953.769 cv
954.469 956.007 956.29 957.827 958.527 957.827 cv
cp
f
820.811 954.723 mo
820.811 953.805 821.56 953.05 822.48 953.05 cv
823.403 953.05 824.153 953.805 824.153 954.723 cv
824.153 955.646 823.403 956.394 822.48 956.394 cv
821.56 956.394 820.811 955.646 820.811 954.723 cv
cp
819.46 962.799 mo
819.46 957.405 li
820.202 958.24 821.278 958.783 822.48 958.783 cv
824.719 958.783 826.541 956.959 826.541 954.723 cv
826.541 952.489 824.719 950.666 822.48 950.666 cv
821.278 950.666 820.202 951.203 819.46 952.044 cv
819.46 945.137 li
810.547 945.137 li
810.547 962.799 li
819.46 962.799 li
cp
f
799.886 947.685 mo
799.886 959.454 li
790.816 959.454 li
790.816 947.685 li
799.886 947.685 li
cp
f
764.561 951.345 mo
776.813 951.345 li
776.813 956.756 li
764.561 956.756 li
764.561 951.345 li
cp
f
950.252 945.452 mo
950.252 962.64 li
939.593 962.64 li
939.593 945.452 li
950.252 945.452 li
cp
f
989.075 929.726 mo
989.075 928.804 989.828 928.056 990.748 928.056 cv
991.668 928.056 992.418 928.804 992.418 929.726 cv
992.418 930.644 991.668 931.393 990.748 931.393 cv
989.828 931.393 989.075 930.644 989.075 929.726 cv
cp
986.69 929.726 mo
986.69 931.957 988.511 933.781 990.748 933.781 cv
992.661 933.781 994.256 932.443 994.684 930.661 cv
1071.38 930.661 li
1071.38 928.779 li
994.684 928.779 li
994.256 926.996 992.661 925.663 990.748 925.663 cv
988.511 925.663 986.69 927.487 986.69 929.726 cv
cp
f
826.222 941.993 mo
826.222 941.076 826.971 940.321 827.891 940.321 cv
828.814 940.321 829.561 941.076 829.561 941.993 cv
829.561 942.916 828.814 943.665 827.891 943.665 cv
826.971 943.665 826.222 942.916 826.222 941.993 cv
cp
956.856 941.489 mo
956.856 940.567 957.607 939.821 958.527 939.821 cv
959.447 939.821 960.199 940.567 960.199 941.489 cv
960.199 942.414 959.447 943.161 958.527 943.161 cv
957.607 943.161 956.856 942.414 956.856 941.489 cv
cp
1038.48 941.489 mo
1038.48 940.567 1039.23 939.821 1040.15 939.821 cv
1041.08 939.821 1041.83 940.567 1041.83 941.489 cv
1041.83 942.414 1041.08 943.161 1040.15 943.161 cv
1039.23 943.161 1038.48 942.414 1038.48 941.489 cv
cp
715.396 951.982 mo
715.396 957.394 li
727.332 957.394 li
727.332 955.623 li
729.557 955.623 li
729.557 955.623 734.894 949.31 735.404 948.703 cv
736.263 948.703 784.285 948.703 784.285 948.703 cv
784.285 948.703 789.593 943.394 790.095 942.9 cv
790.795 942.9 819.46 942.9 823.942 942.9 cv
824.353 944.7 825.965 946.055 827.891 946.055 cv
830.128 946.055 831.949 944.231 831.949 941.993 cv
831.949 940.083 830.616 938.488 828.835 938.06 cv
828.835 937.739 828.835 937.318 828.835 936.932 cv
830.676 936.932 930.711 936.932 931.48 936.932 cv
931.978 937.435 936.974 942.43 936.974 942.43 cv
954.591 942.43 li
955.019 944.213 956.613 945.546 958.527 945.546 cv
960.439 945.546 962.036 944.213 962.462 942.43 cv
1036.22 942.43 li
1036.65 944.213 1038.24 945.546 1040.15 945.546 cv
1042.06 945.546 1043.66 944.213 1044.09 942.43 cv
1071.38 942.43 li
1071.38 940.549 li
1044.09 940.549 li
1043.66 938.766 1042.06 937.435 1040.15 937.435 cv
1038.24 937.435 1036.65 938.766 1036.22 940.549 cv
962.462 940.549 li
962.036 938.766 960.439 937.435 958.527 937.435 cv
956.613 937.435 955.019 938.766 954.591 940.549 cv
951.064 940.549 938.397 940.549 937.753 940.549 cv
937.258 940.046 932.257 935.051 932.257 935.051 cv
826.95 935.051 li
826.95 938.06 li
825.486 938.41 824.333 939.556 823.969 941.011 cv
789.315 941.011 li
789.315 941.011 784.005 946.318 783.506 946.822 cv
782.739 946.822 734.529 946.822 734.529 946.822 cv
734.529 946.822 729.194 953.139 728.684 953.741 cv
728.391 953.741 727.845 953.741 727.332 953.741 cv
727.332 951.982 li
715.396 951.982 li
cp
f
764.561 980.94 mo
764.561 975.527 li
776.813 975.527 li
776.813 977.211 li
777.129 977.211 777.432 977.211 777.618 977.211 cv
778.123 976.708 783.904 970.929 783.904 970.929 cv
783.904 970.929 825.726 970.929 826.528 970.929 cv
827.072 970.345 848.644 947.219 848.644 947.219 cv
915.196 947.219 li
915.196 947.219 915.196 959.648 915.196 960.378 cv
915.647 960.837 918.68 963.875 919.138 964.325 cv
919.894 964.325 956.664 964.325 957.421 964.325 cv
957.946 963.798 968.638 953.104 968.638 953.104 cv
1051.13 953.104 li
1051.13 948.316 li
1059.88 948.316 li
1059.88 959.613 li
1051.13 959.613 li
1051.13 954.984 li
1040.78 954.984 970.133 954.984 969.418 954.984 cv
968.893 955.516 958.2 966.206 958.2 966.206 cv
918.357 966.206 li
913.31 961.162 li
913.31 961.162 913.31 950.711 913.31 949.1 cv
911.493 949.1 850.26 949.1 849.465 949.1 cv
848.919 949.685 827.347 972.81 827.347 972.81 cv
827.347 972.81 785.452 972.81 784.686 972.81 cv
784.181 973.317 778.398 979.092 778.398 979.092 cv
776.813 979.092 li
776.813 980.94 li
764.561 980.94 li
cp
f
764.561 963.114 mo
776.813 963.114 li
776.813 965.036 li
782.942 965.036 822.465 965.036 823.193 965.036 cv
823.738 964.476 844.672 942.606 844.672 942.606 cv
919.69 942.606 li
919.69 942.606 919.69 951.541 919.69 953.104 cv
920.083 953.104 920.61 953.104 921.134 953.104 cv
921.134 947.845 li
930.204 947.845 li
930.204 959.613 li
921.134 959.613 li
921.134 954.984 li
917.805 954.984 li
917.805 954.984 917.805 946.049 917.805 944.489 cv
915.98 944.489 846.261 944.489 845.475 944.489 cv
844.935 945.055 823.997 966.92 823.997 966.92 cv
776.813 966.92 li
776.813 968.526 li
764.561 968.526 li
764.561 963.114 li
cp
f
738.945 959.977 mo
738.945 959.054 739.694 958.306 740.616 958.306 cv
741.538 958.306 742.289 959.054 742.289 959.977 cv
742.289 960.894 741.538 961.643 740.616 961.643 cv
739.694 961.643 738.945 960.894 738.945 959.977 cv
cp
691.928 949.713 mo
691.008 949.713 690.258 948.965 690.258 948.041 cv
690.258 947.121 691.008 946.372 691.928 946.372 cv
692.846 946.372 693.6 947.121 693.6 948.041 cv
693.6 948.965 692.846 949.713 691.928 949.713 cv
cp
727.332 969.007 mo
727.332 966.885 li
735.519 966.885 li
738.81 963.588 li
739.354 963.863 739.966 964.03 740.616 964.03 cv
742.852 964.03 744.676 962.208 744.676 959.977 cv
744.676 957.736 742.852 955.921 740.616 955.921 cv
738.378 955.921 736.561 957.736 736.561 959.977 cv
736.561 960.875 736.864 961.699 737.36 962.372 cv
736.453 963.282 735.051 964.687 734.738 964.995 cv
734.539 964.995 731.585 964.995 727.332 964.995 cv
727.332 963.593 li
715.396 963.593 li
715.396 964.995 li
704.858 964.995 693.774 964.995 692.868 964.995 cv
692.868 963.621 692.868 954.891 692.868 951.976 cv
694.653 951.549 695.984 949.954 695.984 948.041 cv
695.984 945.804 694.167 943.981 691.928 943.981 cv
689.688 943.981 687.869 945.804 687.869 948.041 cv
687.869 949.954 689.202 951.549 690.984 951.976 cv
690.984 966.885 li
715.396 966.885 li
715.396 969.007 li
727.332 969.007 li
cp
f
704.1 948.041 mo
704.1 948.965 703.351 949.713 702.428 949.713 cv
701.508 949.713 700.759 948.965 700.759 948.041 cv
700.759 947.121 701.508 946.372 702.428 946.372 cv
703.351 946.372 704.1 947.121 704.1 948.041 cv
cp
715.396 940.205 mo
715.396 941.731 li
707.646 941.731 li
704.699 944.684 li
704.051 944.237 703.269 943.981 702.428 943.981 cv
700.192 943.981 698.37 945.804 698.37 948.041 cv
698.37 950.273 700.192 952.098 702.428 952.098 cv
704.667 952.098 706.486 950.273 706.486 948.041 cv
706.486 947.322 706.283 946.663 705.961 946.077 cv
706.834 945.207 708.123 943.915 708.427 943.611 cv
708.938 943.611 713.064 943.611 715.396 943.611 cv
715.396 945.615 li
727.332 945.615 li
727.332 940.205 li
715.396 940.205 li
cp
f
978.336 965.225 mo
978.336 964.307 979.085 963.552 980.01 963.552 cv
980.93 963.552 981.677 964.307 981.677 965.225 cv
981.677 966.149 980.93 966.896 980.01 966.896 cv
979.085 966.896 978.336 966.149 978.336 965.225 cv
cp
975.95 965.225 mo
975.95 967.462 977.77 969.281 980.01 969.281 cv
981.759 969.281 983.239 968.165 983.809 966.602 cv
991.048 966.602 1038.02 966.602 1038.78 966.602 cv
1039.31 967.193 1049.12 978.065 1049.12 978.065 cv
1071.38 978.065 li
1071.38 976.176 li
1065.13 976.176 1050.6 976.176 1049.96 976.176 cv
1049.43 975.591 1039.62 964.721 1039.62 964.721 cv
984.015 964.721 li
983.763 962.722 982.069 961.167 980.01 961.167 cv
977.77 961.167 975.95 962.992 975.95 965.225 cv
cp
f
907.213 965.703 mo
907.213 964.778 907.96 964.03 908.884 964.03 cv
909.804 964.03 910.552 964.778 910.552 965.703 cv
910.552 966.628 909.804 967.375 908.884 967.375 cv
907.96 967.375 907.213 966.628 907.213 965.703 cv
cp
904.824 965.703 mo
904.824 967.935 906.644 969.76 908.884 969.76 cv
909.693 969.76 910.439 969.521 911.072 969.109 cv
914.537 972.568 li
963.293 972.568 li
963.293 972.568 975.891 959.969 976.421 959.443 cv
977.185 959.443 1042.97 959.443 1043.74 959.443 cv
1044.25 959.953 1050.9 966.602 1050.9 966.602 cv
1071.38 966.602 li
1071.38 964.721 li
1065.83 964.721 1052.28 964.721 1051.68 964.721 cv
1051.17 964.214 1044.52 957.56 1044.52 957.56 cv
975.642 957.56 li
975.642 957.56 963.042 970.156 962.515 970.688 cv
961.75 970.688 916.079 970.688 915.318 970.688 cv
914.985 970.356 913.34 968.709 912.37 967.737 cv
912.722 967.135 912.938 966.445 912.938 965.703 cv
912.938 963.466 911.119 961.643 908.884 961.643 cv
906.644 961.643 904.824 963.466 904.824 965.703 cv
cp
f
875.229 977.877 mo
875.229 976.953 875.977 976.204 876.898 976.204 cv
877.82 976.204 878.571 976.953 878.571 977.877 cv
878.571 978.796 877.82 979.55 876.898 979.55 cv
875.977 979.55 875.229 978.796 875.229 977.877 cv
cp
166.591 996.181 mo
166.591 997.1 165.838 997.848 164.923 997.848 cv
163.998 997.848 163.25 997.1 163.25 996.181 cv
163.25 995.258 163.998 994.509 164.923 994.509 cv
165.838 994.509 166.591 995.258 166.591 996.181 cv
cp
834.527 1003.56 mo
835.28 1003.56 856.519 1003.56 856.519 1003.56 cv
856.519 1003.56 856.519 981.231 856.519 979.496 cv
857.98 979.496 869.885 979.496 873.183 979.496 cv
873.809 980.928 875.237 981.934 876.898 981.934 cv
878.796 981.934 880.381 980.617 880.822 978.858 cv
888.025 978.858 li
888.025 973.775 li
891.698 973.775 li
891.698 961.052 li
880.878 961.052 li
880.878 973.775 li
886.144 973.775 li
886.144 974.974 886.144 976.305 886.144 976.972 cv
885.086 976.972 882.227 976.972 880.849 976.972 cv
880.435 975.17 878.826 973.815 876.898 973.815 cv
874.751 973.815 873.009 975.497 872.868 977.607 cv
854.638 977.607 li
854.638 977.607 854.638 999.94 854.638 1001.67 cv
852.916 1001.67 833.747 1001.67 833.747 1001.67 cv
833.747 1001.67 828.319 1007.1 827.821 1007.6 cv
827.408 1007.6 793.151 1007.6 761.049 1007.6 cv
761.049 1006 761.049 1002.98 761.049 1001.93 cv
761.864 1001.93 763.475 1001.93 764.561 1001.93 cv
764.561 1003.85 li
776.813 1003.85 li
776.813 998.442 li
764.561 998.442 li
764.561 1000.05 li
759.168 1000.05 li
759.168 1007.6 li
731.62 1007.6 706.194 1007.6 705.84 1007.6 cv
705.314 1007.08 693.034 994.795 693.034 994.795 cv
168.844 995.199 li
168.402 993.433 166.819 992.124 164.923 992.124 cv
162.684 992.124 160.863 993.944 160.863 996.181 cv
160.863 998.414 162.684 1000.24 164.923 1000.24 cv
166.847 1000.24 168.455 998.88 168.869 997.081 cv
172.038 997.081 691.586 996.678 692.253 996.678 cv
692.778 997.203 705.061 1009.48 705.061 1009.48 cv
828.6 1009.48 li
828.6 1009.48 834.026 1004.06 834.527 1003.56 cv
cp
f
683.867 105.199 mo
683.867 104.279 684.616 103.528 685.536 103.528 cv
686.458 103.528 687.211 104.279 687.211 105.199 cv
687.211 106.119 686.458 106.867 685.536 106.867 cv
684.616 106.867 683.867 106.119 683.867 105.199 cv
cp
837.096 87.0581 mo
837.096 86.1421 837.849 85.3896 838.769 85.3896 cv
839.688 85.3896 840.438 86.1421 840.438 87.0581 cv
840.438 87.9824 839.688 88.731 838.769 88.731 cv
837.849 88.731 837.096 87.9824 837.096 87.0581 cv
cp
974.569 133.126 mo
975.494 133.126 976.243 133.874 976.243 134.794 cv
976.243 135.716 975.494 136.464 974.569 136.464 cv
973.649 136.464 972.899 135.716 972.899 134.794 cv
972.899 133.874 973.649 133.126 974.569 133.126 cv
cp
643.769 105.199 mo
643.769 106.119 643.021 106.867 642.098 106.867 cv
641.178 106.867 640.428 106.119 640.428 105.199 cv
640.428 104.279 641.178 103.528 642.098 103.528 cv
643.021 103.528 643.769 104.279 643.769 105.199 cv
cp
645.974 106.34 mo
681.661 106.34 li
682.16 108.021 683.699 109.256 685.536 109.256 cv
686.303 109.256 687.015 109.031 687.628 108.658 cv
697.001 118.036 li
697.001 118.036 772.205 118.036 772.978 118.036 cv
773.48 118.537 779.146 124.199 779.146 124.199 cv
817.041 124.199 li
817.041 124.199 821.736 119.499 822.231 119.009 cv
822.918 119.009 828.496 119.009 828.496 119.009 cv
832.88 114.627 li
845.451 114.627 li
845.451 97.2861 li
839.23 97.2861 li
839.23 91.0703 li
840.858 90.8818 842.188 89.7368 842.642 88.2031 cv
854.202 88.2031 li
854.202 95.3721 li
865.019 95.3721 li
865.019 82.6455 li
861.507 82.6455 li
861.507 80.6831 861.507 77.0347 861.507 75.9492 cv
863.227 75.9492 889.567 75.9492 891.287 75.9492 cv
891.287 77.6851 891.287 99.1792 891.287 99.1792 cv
962.631 99.1792 li
962.631 99.1792 968.252 93.5562 968.757 93.0532 cv
969.523 93.0532 1032.85 93.0532 1033.61 93.0532 cv
1034.08 93.5176 1037.57 97.0117 1038.03 97.4741 cv
1038.03 97.9199 1038.03 99.9585 1038.03 101.261 cv
1035.59 101.261 li
1035.59 114.308 li
1038.47 114.308 li
1038.47 123.062 li
1037.18 123.062 li
1037.18 127.053 li
973.394 127.053 li
973.394 130.934 li
971.731 131.445 970.516 132.972 970.516 134.794 cv
970.516 137.035 972.335 138.851 974.569 138.851 cv
976.809 138.851 978.63 137.035 978.63 134.794 cv
978.63 132.796 977.18 131.146 975.275 130.811 cv
975.275 130.218 975.275 129.482 975.275 128.934 cv
976.95 128.934 1028.42 128.934 1037.18 128.934 cv
1037.18 136.105 li
1044.19 136.105 li
1044.19 123.062 li
1040.35 123.062 li
1040.35 114.308 li
1042.6 114.308 li
1042.6 101.261 li
1039.92 101.261 li
1039.92 96.6929 li
1034.39 91.1724 li
967.976 91.1724 li
967.976 91.1724 962.354 96.7949 961.852 97.2979 cv
961.091 97.2979 894.991 97.2979 893.17 97.2979 cv
893.17 95.5645 893.17 74.062 893.17 74.062 cv
859.622 74.062 li
859.622 82.6455 li
854.202 82.6455 li
854.202 86.3179 li
842.75 86.3179 li
842.399 84.437 840.748 83.0015 838.769 83.0015 cv
836.529 83.0015 834.708 84.8213 834.708 87.0581 cv
834.708 88.7964 835.81 90.2705 837.348 90.8491 cv
837.348 97.2861 li
831.604 97.2861 li
831.604 113.234 li
830.396 114.445 828.079 116.766 827.715 117.128 cv
827.032 117.128 821.449 117.128 821.449 117.128 cv
821.449 117.128 816.756 121.823 816.261 122.317 cv
815.504 122.317 780.68 122.317 779.926 122.317 cv
779.425 121.814 773.759 116.15 773.759 116.15 cv
773.759 116.15 698.555 116.15 697.779 116.15 cv
697.338 115.709 690.874 109.243 688.969 107.337 cv
689.361 106.716 689.597 105.988 689.597 105.199 cv
689.597 102.962 687.775 101.143 685.536 101.143 cv
683.555 101.143 681.906 102.578 681.555 104.459 cv
646.081 104.459 li
645.733 102.578 644.081 101.143 642.098 101.143 cv
639.858 101.143 638.042 102.962 638.042 105.199 cv
638.042 107.436 639.858 109.256 642.098 109.256 cv
643.935 109.256 645.477 108.021 645.974 106.34 cv
cp
f
692.698 165.583 mo
692.698 166.507 691.946 167.256 691.026 167.256 cv
690.105 167.256 689.357 166.507 689.357 165.583 cv
689.357 164.667 690.105 163.911 691.026 163.911 cv
691.946 163.911 692.698 164.667 692.698 165.583 cv
cp
599.137 175.606 mo
600.06 175.606 600.808 176.355 600.808 177.279 cv
600.808 178.203 600.06 178.947 599.137 178.947 cv
598.217 178.947 597.468 178.203 597.468 177.279 cv
597.468 176.355 598.217 175.606 599.137 175.606 cv
cp
755.708 152.935 mo
755.708 152.015 756.456 151.266 757.379 151.266 cv
758.301 151.266 759.05 152.015 759.05 152.935 cv
759.05 153.855 758.301 154.603 757.379 154.603 cv
756.456 154.603 755.708 153.855 755.708 152.935 cv
cp
753.381 152.354 mo
707.425 152.354 li
695.003 164.77 li
694.624 162.925 692.987 161.526 691.026 161.526 cv
689.071 161.526 687.435 162.917 687.052 164.762 cv
609.725 164.762 li
600.867 173.627 li
600.34 173.374 599.758 173.223 599.137 173.223 cv
596.902 173.223 595.076 175.042 595.076 177.279 cv
595.076 179.516 596.902 181.336 599.137 181.336 cv
601.373 181.336 603.195 179.516 603.195 177.279 cv
603.195 176.347 602.869 175.501 602.339 174.813 cv
604.576 172.572 610.092 167.06 610.505 166.645 cv
611.228 166.645 678.328 166.645 687.129 166.645 cv
687.599 168.364 689.159 169.64 691.026 169.64 cv
692.014 169.64 692.905 169.272 693.613 168.687 cv
693.682 168.757 li
693.682 168.757 707.675 154.767 708.205 154.235 cv
708.915 154.235 747.769 154.235 753.554 154.235 cv
754.101 155.834 755.599 156.991 757.379 156.991 cv
759.613 156.991 761.436 155.167 761.436 152.935 cv
761.436 150.698 759.613 148.874 757.379 148.874 cv
755.34 148.874 753.668 150.387 753.381 152.354 cv
cp
f
724.445 112.838 mo
723.521 112.838 722.772 112.085 722.772 111.165 cv
722.772 110.246 723.521 109.497 724.445 109.497 cv
725.36 109.497 726.113 110.246 726.113 111.165 cv
726.113 112.085 725.36 112.838 724.445 112.838 cv
cp
724.445 115.222 mo
726.68 115.222 728.499 113.402 728.499 111.165 cv
728.499 108.929 726.68 107.113 724.445 107.113 cv
723.189 107.113 722.085 107.689 721.341 108.585 cv
709.723 108.585 li
709.723 113.991 li
721.54 113.991 li
722.275 114.752 723.304 115.222 724.445 115.222 cv
cp
f
1051.9 151.503 mo
1051.9 152.423 1051.16 153.172 1050.23 153.172 cv
1049.31 153.172 1048.56 152.423 1048.56 151.503 cv
1048.56 150.581 1049.31 149.833 1050.23 149.833 cv
1051.16 149.833 1051.9 150.581 1051.9 151.503 cv
cp
1047.79 154.726 mo
1046.73 154.726 li
1046.73 167.771 li
1053.73 167.771 li
1053.73 154.726 li
1052.67 154.726 li
1053.65 153.986 1054.29 152.82 1054.29 151.503 cv
1054.29 149.267 1052.47 147.443 1050.23 147.443 cv
1048 147.443 1046.18 149.267 1046.18 151.503 cv
1046.18 152.82 1046.82 153.986 1047.79 154.726 cv
cp
f
1040.92 151.503 mo
1040.92 152.423 1040.17 153.172 1039.25 153.172 cv
1038.33 153.172 1037.58 152.423 1037.58 151.503 cv
1037.58 150.581 1038.33 149.833 1039.25 149.833 cv
1040.17 149.833 1040.92 150.581 1040.92 151.503 cv
cp
1036.81 154.726 mo
1035.91 154.726 li
1035.91 167.771 li
1042.91 167.771 li
1042.91 154.726 li
1041.69 154.726 li
1042.67 153.986 1043.31 152.82 1043.31 151.503 cv
1043.31 149.267 1041.49 147.443 1039.25 147.443 cv
1037.02 147.443 1035.2 149.267 1035.2 151.503 cv
1035.2 152.82 1035.84 153.986 1036.81 154.726 cv
cp
f
1030.42 151.503 mo
1030.42 152.423 1029.67 153.172 1028.75 153.172 cv
1027.83 153.172 1027.08 152.423 1027.08 151.503 cv
1027.08 150.581 1027.83 149.833 1028.75 149.833 cv
1029.67 149.833 1030.42 150.581 1030.42 151.503 cv
cp
1026.31 154.726 mo
1024.93 154.726 li
1024.93 167.771 li
1031.93 167.771 li
1031.93 154.726 li
1031.19 154.726 li
1032.17 153.986 1032.81 152.82 1032.81 151.503 cv
1032.81 149.267 1030.99 147.443 1028.75 147.443 cv
1026.52 147.443 1024.69 149.267 1024.69 151.503 cv
1024.69 152.82 1025.34 153.986 1026.31 154.726 cv
cp
f
947.363 148.401 mo
946.443 148.401 945.69 147.647 945.69 146.731 cv
945.69 145.807 946.443 145.059 947.363 145.059 cv
948.288 145.059 949.035 145.807 949.035 146.731 cv
949.035 147.647 948.288 148.401 947.363 148.401 cv
cp
947.363 150.788 mo
949.601 150.788 951.422 148.964 951.422 146.731 cv
951.422 144.494 949.601 142.67 947.363 142.67 cv
945.124 142.67 943.306 144.494 943.306 146.731 cv
943.306 148.964 945.124 150.788 947.363 150.788 cv
cp
f
869.317 164.872 mo
869.317 163.948 870.067 163.199 870.989 163.199 cv
871.909 163.199 872.657 163.948 872.657 164.872 cv
872.657 165.788 871.909 166.536 870.989 166.536 cv
870.067 166.536 869.317 165.788 869.317 164.872 cv
cp
891.035 164.872 mo
891.035 163.948 891.788 163.199 892.708 163.199 cv
893.63 163.199 894.379 163.948 894.379 164.872 cv
894.379 165.788 893.63 166.536 892.708 166.536 cv
891.788 166.536 891.035 165.788 891.035 164.872 cv
cp
984.121 134.315 mo
984.121 133.395 984.869 132.645 985.789 132.645 cv
986.714 132.645 987.46 133.395 987.46 134.315 cv
987.46 135.235 986.714 135.988 985.789 135.988 cv
984.869 135.988 984.121 135.235 984.121 134.315 cv
cp
1010.85 134.315 mo
1010.85 133.395 1011.6 132.645 1012.52 132.645 cv
1013.44 132.645 1014.19 133.395 1014.19 134.315 cv
1014.19 135.235 1013.44 135.988 1012.52 135.988 cv
1011.6 135.988 1010.85 135.235 1010.85 134.315 cv
cp
870.989 168.929 mo
872.711 168.929 874.175 167.84 874.761 166.328 cv
888.932 166.328 li
889.448 167.656 890.639 168.634 892.086 168.863 cv
892.086 171.738 li
974.799 171.738 li
974.799 167.771 li
977.992 167.771 li
977.992 154.726 li
974.877 154.726 li
974.877 152.186 974.877 146.678 974.877 146.126 cv
975.326 145.68 981.604 139.398 983.414 137.587 cv
984.082 138.078 984.899 138.373 985.789 138.373 cv
987.572 138.373 989.071 137.215 989.615 135.62 cv
1008.7 135.62 li
1009.24 137.215 1010.74 138.373 1012.52 138.373 cv
1014.76 138.373 1016.58 136.555 1016.58 134.315 cv
1016.58 132.083 1014.76 130.261 1012.52 130.261 cv
1010.49 130.261 1008.81 131.776 1008.52 133.73 cv
989.786 133.73 li
989.502 131.776 987.828 130.261 985.789 130.261 cv
983.555 130.261 981.732 132.083 981.732 134.315 cv
981.732 134.978 981.908 135.596 982.192 136.152 cv
972.993 145.345 li
972.993 154.726 li
970.992 154.726 li
970.992 167.771 li
972.914 167.771 li
972.914 168.442 972.914 169.272 972.914 169.857 cv
971.099 169.857 895.787 169.857 893.97 169.857 cv
893.97 169.476 893.97 169.059 893.97 168.704 cv
895.585 168.172 896.765 166.663 896.765 164.872 cv
896.765 162.958 895.432 161.359 893.648 160.934 cv
893.648 160.461 893.648 159.919 893.648 159.486 cv
894.802 159.486 898.669 159.486 900.345 159.486 cv
900.345 168.09 li
907.348 168.09 li
907.348 155.679 li
900.345 155.679 li
900.345 157.601 li
891.767 157.601 li
891.767 160.934 li
890.12 161.326 888.876 162.725 888.691 164.442 cv
875.001 164.442 li
874.786 162.41 873.079 160.809 870.989 160.809 cv
868.752 160.809 866.933 162.631 866.933 164.872 cv
866.933 167.105 868.752 168.929 870.989 168.929 cv
cp
f
1061.21 111.883 mo
1060.29 111.883 1059.54 111.133 1059.54 110.209 cv
1059.54 109.292 1060.29 108.544 1061.21 108.544 cv
1062.13 108.544 1062.88 109.292 1062.88 110.209 cv
1062.88 111.133 1062.13 111.883 1061.21 111.883 cv
cp
1061.21 114.269 mo
1063.45 114.269 1065.27 112.449 1065.27 110.209 cv
1065.27 107.972 1063.45 106.156 1061.21 106.156 cv
1058.98 106.156 1057.15 107.972 1057.15 110.209 cv
1057.15 112.449 1058.98 114.269 1061.21 114.269 cv
cp
f
822.061 107.113 mo
821.139 107.113 820.391 106.356 820.391 105.44 cv
820.391 104.516 821.139 103.768 822.061 103.768 cv
822.981 103.768 823.73 104.516 823.73 105.44 cv
823.73 106.356 822.981 107.113 822.061 107.113 cv
cp
771.14 113.674 mo
771.14 113.061 li
774.328 113.061 783.311 113.061 783.921 113.061 cv
784.416 113.558 789.049 118.191 789.049 118.191 cv
811.23 118.191 li
820.331 109.096 li
820.856 109.343 821.438 109.497 822.061 109.497 cv
824.296 109.497 826.117 107.677 826.117 105.44 cv
826.117 103.201 824.296 101.379 822.061 101.379 cv
819.822 101.379 818.003 103.201 818.003 105.44 cv
818.003 106.369 818.33 107.215 818.859 107.902 cv
816.716 110.045 810.874 115.889 810.451 116.31 cv
809.716 116.31 790.57 116.31 789.83 116.31 cv
789.336 115.813 784.698 111.178 784.698 111.178 cv
771.14 111.178 li
771.14 108.262 li
758.89 108.262 li
758.89 113.674 li
771.14 113.674 li
cp
f
721.659 120.195 mo
721.659 125.609 li
709.723 125.609 li
709.723 120.195 li
721.659 120.195 li
cp
f
886.024 116.379 mo
882.513 116.379 li
882.513 125.13 li
884.273 125.13 li
884.273 137.857 li
875.522 137.857 li
875.522 125.13 li
880.628 125.13 li
880.628 116.379 li
875.203 116.379 li
875.203 103.645 li
886.024 103.645 li
886.024 116.379 li
cp
f
959.774 104.72 mo
959.774 105.645 959.026 106.393 958.106 106.393 cv
957.185 106.393 956.434 105.645 956.434 104.72 cv
956.434 103.805 957.185 103.056 958.106 103.056 cv
959.026 103.056 959.774 103.805 959.774 104.72 cv
cp
971.151 101.261 mo
971.151 104.136 li
962.102 104.136 li
961.815 102.179 960.143 100.664 958.106 100.664 cv
955.865 100.664 954.045 102.483 954.045 104.72 cv
954.045 106.632 955.378 108.229 957.163 108.658 cv
957.163 118.127 li
951.579 118.127 li
951.579 130.701 li
963.991 130.701 li
963.991 118.127 li
959.046 118.127 li
959.046 108.658 li
960.402 108.331 961.483 107.327 961.93 106.021 cv
971.151 106.021 li
971.151 114.308 li
978.15 114.308 li
978.15 101.261 li
971.151 101.261 li
cp
f
981.974 114.308 mo
981.974 101.261 li
988.974 101.261 li
988.974 114.308 li
981.974 114.308 li
cp
f
997.766 116.895 mo
997.766 117.818 997.013 118.567 996.093 118.567 cv
995.173 118.567 994.424 117.818 994.424 116.895 cv
994.424 115.97 995.173 115.222 996.093 115.222 cv
997.013 115.222 997.766 115.97 997.766 116.895 cv
cp
1000.15 116.895 mo
1000.15 115.907 999.783 115.014 999.192 114.308 cv
999.594 114.308 li
999.594 101.261 li
992.593 101.261 li
992.593 114.308 li
992.992 114.308 li
992.402 115.014 992.035 115.907 992.035 116.895 cv
992.035 119.132 993.858 120.951 996.093 120.951 cv
998.33 120.951 1000.15 119.132 1000.15 116.895 cv
cp
f
1003.13 114.308 mo
1003.13 101.261 li
1010.13 101.261 li
1010.13 114.308 li
1003.13 114.308 li
cp
f
1013.64 114.308 mo
1013.64 101.261 li
1020.64 101.261 li
1020.64 114.308 li
1013.64 114.308 li
cp
f
1030.22 116.895 mo
1030.22 117.818 1029.47 118.567 1028.55 118.567 cv
1027.63 118.567 1026.88 117.818 1026.88 116.895 cv
1026.88 115.97 1027.63 115.222 1028.55 115.222 cv
1029.47 115.222 1030.22 115.97 1030.22 116.895 cv
cp
1032.61 116.895 mo
1032.61 115.907 1032.24 115.014 1031.65 114.308 cv
1032.05 114.308 li
1032.05 101.261 li
1025.05 101.261 li
1025.05 114.308 li
1025.45 114.308 li
1024.87 115.014 1024.5 115.907 1024.5 116.895 cv
1024.5 119.132 1026.32 120.951 1028.55 120.951 cv
1030.79 120.951 1032.61 119.132 1032.61 116.895 cv
cp
f
1048.48 116.895 mo
1048.48 115.97 1049.23 115.222 1050.15 115.222 cv
1051.07 115.222 1051.82 115.97 1051.82 116.895 cv
1051.82 117.818 1051.07 118.567 1050.15 118.567 cv
1049.23 118.567 1048.48 117.818 1048.48 116.895 cv
cp
1047.05 114.308 mo
1046.46 115.014 1046.1 115.907 1046.1 116.895 cv
1046.1 119.132 1047.91 120.951 1050.15 120.951 cv
1052.39 120.951 1054.21 119.132 1054.21 116.895 cv
1054.21 115.907 1053.84 115.014 1053.25 114.308 cv
1053.65 114.308 li
1053.65 101.261 li
1046.65 101.261 li
1046.65 114.308 li
1047.05 114.308 li
cp
f
1016.67 154.726 mo
1016.67 144.474 li
1052.45 144.474 li
1061.04 153.061 li
1061.04 153.061 1061.04 168.012 1061.04 169.693 cv
1061.91 169.693 1064.1 169.693 1065.71 169.693 cv
1065.71 171.579 li
1059.16 171.579 li
1059.16 171.579 1059.16 154.583 1059.16 153.842 cv
1058.66 153.344 1052.17 146.854 1051.67 146.359 cv
1050.93 146.359 1020.32 146.359 1018.56 146.359 cv
1018.56 147.553 1018.56 152.493 1018.56 154.726 cv
1020.8 154.726 li
1020.8 167.771 li
1013.8 167.771 li
1013.8 154.726 li
1016.67 154.726 li
cp
f
1004.88 170.118 mo
1004.88 169.194 1005.63 168.446 1006.55 168.446 cv
1007.48 168.446 1008.23 169.194 1008.23 170.118 cv
1008.23 171.039 1007.48 171.791 1006.55 171.791 cv
1005.63 171.791 1004.88 171.039 1004.88 170.118 cv
cp
1002.81 167.771 mo
1003.26 167.771 li
1002.78 168.436 1002.5 169.243 1002.5 170.118 cv
1002.5 172.355 1004.32 174.175 1006.55 174.175 cv
1008.79 174.175 1010.61 172.355 1010.61 170.118 cv
1010.61 169.223 1010.31 168.401 1009.82 167.728 cv
1009.82 154.726 li
1002.81 154.726 li
1002.81 167.771 li
cp
f
951.579 139.607 mo
963.991 139.607 li
963.991 152.178 li
951.579 152.178 li
951.579 139.607 li
cp
f
907.348 102.218 mo
907.348 114.627 li
900.345 114.627 li
900.345 102.218 li
907.348 102.218 li
cp
f
956.194 164.392 mo
956.194 163.471 956.944 162.721 957.864 162.721 cv
958.784 162.721 959.533 163.471 959.533 164.392 cv
959.533 165.311 958.784 166.061 957.864 166.061 cv
956.944 166.061 956.194 165.311 956.194 164.392 cv
cp
939.327 168.09 mo
939.327 160.441 li
939.968 160.441 940.697 160.441 941.008 160.441 cv
941.503 160.938 946.416 165.849 946.416 165.849 cv
954.095 165.849 li
954.677 167.366 956.144 168.446 957.864 168.446 cv
960.103 168.446 961.922 166.63 961.922 164.392 cv
961.922 162.152 960.103 160.333 957.864 160.333 cv
955.772 160.333 954.065 161.932 953.849 163.964 cv
951.69 163.964 947.711 163.964 947.195 163.964 cv
946.7 163.471 941.785 158.558 941.785 158.558 cv
939.327 158.558 li
939.327 155.679 li
932.328 155.679 li
932.328 168.09 li
939.327 168.09 li
cp
f
758.89 102.537 mo
758.89 97.1221 li
771.14 97.1221 li
771.14 98.811 li
771.456 98.811 771.757 98.811 771.947 98.811 cv
772.448 98.3042 778.232 92.5239 778.232 92.5239 cv
778.232 92.5239 820.051 92.5239 820.852 92.5239 cv
821.396 91.9414 842.972 68.8154 842.972 68.8154 cv
909.521 68.8154 li
909.521 68.8154 909.521 81.2432 909.521 81.979 cv
909.973 82.4287 913.008 85.4673 913.462 85.9194 cv
914.221 85.9194 950.99 85.9194 951.747 85.9194 cv
952.272 85.394 962.964 74.7021 962.964 74.7021 cv
1045.46 74.7021 li
1045.46 69.915 li
1054.21 69.915 li
1054.21 81.2104 li
1045.46 81.2104 li
1045.46 76.585 li
1035.1 76.585 964.461 76.585 963.745 76.585 cv
963.218 77.1084 952.526 87.8027 952.526 87.8027 cv
912.684 87.8027 li
907.636 82.7578 li
907.636 82.7578 907.636 72.3076 907.636 70.6987 cv
905.818 70.6987 844.588 70.6987 843.791 70.6987 cv
843.246 71.2832 821.673 94.4072 821.673 94.4072 cv
821.673 94.4072 779.778 94.4072 779.012 94.4072 cv
778.507 94.9102 772.725 100.692 772.725 100.692 cv
771.14 100.692 li
771.14 102.537 li
758.89 102.537 li
cp
f
860.713 182.142 mo
860.713 186.545 li
862.471 186.545 li
862.471 205.962 li
856.901 205.962 li
856.901 186.545 li
858.827 186.545 li
858.827 185.167 858.827 183.331 858.827 182.92 cv
858.301 182.395 842.898 166.992 842.373 166.466 cv
841.602 166.466 719.742 166.466 718.978 166.466 cv
718.448 166.99 692.067 192.921 691.521 193.455 cv
691.521 193.98 691.521 196.74 691.521 198.004 cv
693.333 198.004 li
693.333 217.412 li
687.765 217.412 li
687.765 198.004 li
689.64 198.004 li
689.64 192.667 li
718.208 164.585 li
843.152 164.585 li
860.713 182.142 li
cp
f
837.778 172.672 mo
837.008 172.672 726.259 172.672 725.487 172.672 cv
724.956 173.206 703.478 194.679 702.946 195.215 cv
702.946 195.641 702.946 197.096 702.946 198.004 cv
704.472 198.004 li
704.472 217.412 li
698.902 217.412 li
698.902 198.004 li
701.063 198.004 li
701.063 194.43 li
724.711 170.789 li
838.56 170.789 li
849.822 182.047 li
849.822 186.545 li
851.969 186.545 li
851.969 205.962 li
846.399 205.962 li
846.399 186.545 li
847.94 186.545 li
847.94 185.139 847.94 183.246 847.94 182.828 cv
847.429 182.321 838.288 173.182 837.778 172.672 cv
cp
f
972.664 86.8208 mo
972.664 85.9009 973.413 85.1484 974.335 85.1484 cv
975.255 85.1484 976.003 85.9009 976.003 86.8208 cv
976.003 87.7432 975.255 88.4917 974.335 88.4917 cv
973.413 88.4917 972.664 87.7432 972.664 86.8208 cv
cp
970.276 86.8208 mo
970.276 89.0576 972.096 90.8779 974.335 90.8779 cv
976.085 90.8779 977.565 89.7534 978.134 88.1992 cv
985.378 88.1992 1032.34 88.1992 1033.11 88.1992 cv
1033.64 88.7881 1043.45 99.6577 1043.45 99.6577 cv
1065.71 99.6577 li
1065.71 97.7725 li
1059.46 97.7725 1044.92 97.7725 1044.29 97.7725 cv
1043.75 97.1816 1033.95 86.3179 1033.95 86.3179 cv
978.341 86.3179 li
978.089 84.3184 976.397 82.7646 974.335 82.7646 cv
972.096 82.7646 970.276 84.584 970.276 86.8208 cv
cp
f
901.537 87.2993 mo
901.537 86.375 902.285 85.627 903.21 85.627 cv
904.13 85.627 904.878 86.375 904.878 87.2993 cv
904.878 88.2197 904.13 88.9722 903.21 88.9722 cv
902.285 88.9722 901.537 88.2197 901.537 87.2993 cv
cp
899.15 87.2993 mo
899.15 89.5342 900.971 91.3564 903.21 91.3564 cv
904.019 91.3564 904.769 91.1108 905.401 90.7017 cv
908.865 94.1655 li
957.619 94.1655 li
957.619 94.1655 970.217 81.5703 970.746 81.0386 cv
971.511 81.0386 1037.3 81.0386 1038.07 81.0386 cv
1038.58 81.5498 1045.23 88.2031 1045.23 88.2031 cv
1065.71 88.2031 li
1065.71 86.3179 li
1060.16 86.3179 1046.61 86.3179 1046.01 86.3179 cv
1045.5 85.8086 1038.85 79.1572 1038.85 79.1572 cv
969.965 79.1572 li
969.965 79.1572 957.369 91.7568 956.839 92.2847 cv
956.08 92.2847 910.407 92.2847 909.644 92.2847 cv
909.313 91.9512 907.667 90.3013 906.698 89.3359 cv
907.05 88.7349 907.267 88.0396 907.267 87.2993 cv
907.267 85.0605 905.447 83.2427 903.21 83.2427 cv
900.971 83.2427 899.15 85.0605 899.15 87.2993 cv
cp
f
934.001 123.103 mo
934.001 122.178 934.747 121.43 935.67 121.43 cv
936.59 121.43 937.34 122.178 937.34 123.103 cv
937.34 124.019 936.59 124.771 935.67 124.771 cv
934.747 124.771 934.001 124.019 934.001 123.103 cv
cp
934.001 133.6 mo
934.001 132.68 934.747 131.931 935.67 131.931 cv
936.59 131.931 937.34 132.68 937.34 133.6 cv
937.34 134.52 936.59 135.276 935.67 135.276 cv
934.747 135.276 934.001 134.52 934.001 133.6 cv
cp
932.392 129.114 mo
932.392 128.774 932.392 127.094 932.392 125.474 cv
933.132 126.493 934.322 127.159 935.67 127.159 cv
937.908 127.159 939.724 125.337 939.724 123.103 cv
939.724 121.249 938.471 119.7 936.769 119.213 cv
936.769 114.627 li
939.327 114.627 li
939.327 102.218 li
932.328 102.218 li
932.328 114.627 li
934.886 114.627 li
934.886 119.121 li
933.496 119.397 932.363 120.379 931.873 121.669 cv
930.638 120.436 927.578 117.373 927.182 116.98 cv
927.182 116.643 927.182 115.57 927.182 114.627 cv
928.507 114.627 li
928.507 102.218 li
921.508 102.218 li
921.508 114.627 li
925.301 114.627 li
925.301 117.761 li
925.301 117.761 930.016 122.477 930.511 122.972 cv
930.511 123.666 930.511 129.891 930.511 129.891 cv
932.179 131.564 li
931.829 132.163 931.612 132.856 931.612 133.6 cv
931.612 135.841 933.431 137.661 935.67 137.661 cv
937.908 137.661 939.724 135.841 939.724 133.6 cv
939.724 131.365 937.908 129.544 935.67 129.544 cv
934.859 129.544 934.111 129.787 933.477 130.197 cv
933.064 129.784 932.602 129.322 932.392 129.114 cv
cp
f
923.734 128.349 mo
923.734 127.429 924.484 126.676 925.407 126.676 cv
926.327 126.676 927.075 127.429 927.075 128.349 cv
927.075 129.273 926.327 130.021 925.407 130.021 cv
924.484 130.021 923.734 129.273 923.734 128.349 cv
cp
914.494 116.784 mo
914.494 116.429 914.494 115.426 914.494 114.627 cv
917.69 114.627 li
917.69 102.218 li
910.688 102.218 li
910.688 114.627 li
912.611 114.627 li
912.611 117.562 li
921.721 126.672 li
921.487 127.188 921.347 127.752 921.347 128.349 cv
921.347 130.586 923.168 132.41 925.407 132.41 cv
927.642 132.41 929.461 130.586 929.461 128.349 cv
929.461 126.112 927.642 124.293 925.407 124.293 cv
924.454 124.293 923.587 124.638 922.899 125.188 cv
920.841 123.131 914.921 117.21 914.494 116.784 cv
cp
f
972.899 122.861 mo
972.899 121.941 973.649 121.188 974.569 121.188 cv
975.494 121.188 976.243 121.941 976.243 122.861 cv
976.243 123.781 975.494 124.534 974.569 124.534 cv
973.649 124.534 972.899 123.781 972.899 122.861 cv
cp
872.899 140.282 mo
872.899 141.206 872.146 141.955 871.226 141.955 cv
870.306 141.955 869.556 141.206 869.556 140.282 cv
869.556 139.362 870.306 138.614 871.226 138.614 cv
872.146 138.614 872.899 139.362 872.899 140.282 cv
cp
969.705 135.62 mo
969.705 135.62 969.705 124.971 969.705 123.364 cv
969.977 123.364 970.277 123.364 970.564 123.364 cv
970.819 125.364 972.509 126.918 974.569 126.918 cv
976.809 126.918 978.63 125.098 978.63 122.861 cv
978.63 120.624 976.809 118.805 974.569 118.805 cv
972.822 118.805 971.34 119.925 970.772 121.483 cv
967.825 121.483 li
967.825 121.483 967.825 132.127 967.825 133.73 cv
966.097 133.73 946.416 133.73 946.416 133.73 cv
946.416 133.73 940.478 139.669 939.974 140.18 cv
939.25 140.18 925.484 140.18 924.765 140.18 cv
924.27 139.685 919.71 135.126 919.71 135.126 cv
892.319 135.126 li
892.319 135.126 887.622 139.824 887.126 140.319 cv
886.533 140.319 878.383 140.319 875.283 140.319 cv
875.283 140.307 875.283 140.294 875.283 140.282 cv
875.283 138.049 873.463 136.227 871.226 136.227 cv
868.991 136.227 867.169 138.049 867.169 140.282 cv
867.169 142.523 868.991 144.338 871.226 144.338 cv
872.766 144.338 874.093 143.468 874.779 142.2 cv
887.907 142.2 li
887.907 142.2 892.602 137.507 893.099 137.01 cv
893.845 137.01 918.181 137.01 918.928 137.01 cv
919.42 137.501 923.983 142.061 923.983 142.061 cv
940.755 142.061 li
940.755 142.061 946.69 136.123 947.195 135.62 cv
947.95 135.62 969.705 135.62 969.705 135.62 cv
cp
f
1053.57 123.062 mo
1053.57 134.029 li
1054.34 134.025 1055.46 134.013 1055.85 134.009 cv
1056.24 133.616 1062.55 127.204 1065.71 123.99 cv
1065.71 126.676 li
1056.64 135.89 li
1053.57 135.91 li
1053.57 136.105 li
1046.57 136.105 li
1046.57 123.062 li
1053.57 123.062 li
cp
f
995.033 154.726 mo
995.033 140.335 li
995.033 140.335 1060.77 140.335 1061.54 140.335 cv
1061.86 140.02 1064.1 137.779 1065.71 136.166 cv
1065.71 138.828 li
1062.32 142.224 li
1062.32 142.224 998.746 142.224 996.917 142.224 cv
996.917 143.541 996.917 151.573 996.917 154.726 cv
999.155 154.726 li
999.155 167.771 li
992.154 167.771 li
992.154 154.726 li
995.033 154.726 li
cp
f
869.556 99.4697 mo
869.556 98.5493 870.306 97.7969 871.226 97.7969 cv
872.146 97.7969 872.899 98.5493 872.899 99.4697 cv
872.899 100.394 872.146 101.143 871.226 101.143 cv
870.306 101.143 869.556 100.394 869.556 99.4697 cv
cp
665.727 117.369 mo
665.727 118.294 664.977 119.041 664.057 119.041 cv
663.134 119.041 662.388 118.294 662.388 117.369 cv
662.388 116.449 663.134 115.701 664.057 115.701 cv
664.977 115.701 665.727 116.449 665.727 117.369 cv
cp
828.855 125.151 mo
829.605 125.151 850.845 125.151 850.845 125.151 cv
850.845 125.151 850.845 102.827 850.845 101.093 cv
852.303 101.093 864.213 101.093 867.509 101.093 cv
868.139 102.524 869.564 103.528 871.226 103.528 cv
873.124 103.528 874.706 102.213 875.148 100.455 cv
882.352 100.455 li
882.352 95.3721 li
886.024 95.3721 li
886.024 82.6455 li
875.203 82.6455 li
875.203 95.3721 li
880.468 95.3721 li
880.468 96.5659 880.468 97.8994 880.468 98.5698 cv
879.415 98.5698 876.555 98.5698 875.174 98.5698 cv
874.761 96.7666 873.152 95.4126 871.226 95.4126 cv
869.079 95.4126 867.333 97.0938 867.194 99.2036 cv
848.963 99.2036 li
848.963 99.2036 848.963 121.536 848.963 123.27 cv
847.242 123.27 828.074 123.27 828.074 123.27 cv
828.074 123.27 822.646 128.697 822.146 129.204 cv
821.736 129.204 787.477 129.204 755.375 129.204 cv
755.375 127.599 755.375 124.575 755.375 123.521 cv
756.192 123.521 757.801 123.521 758.89 123.521 cv
758.89 125.448 li
771.14 125.448 li
771.14 120.035 li
758.89 120.035 li
758.89 121.641 li
753.492 121.641 li
753.492 129.204 li
725.949 129.204 700.522 129.204 700.166 129.204 cv
699.641 128.672 687.357 116.388 687.357 116.388 cv
667.977 116.388 li
667.536 114.627 665.958 113.316 664.057 113.316 cv
661.819 113.316 660 115.136 660 117.369 cv
660 119.606 661.819 121.43 664.057 121.43 cv
665.982 121.43 667.594 120.076 668.007 118.272 cv
671.174 118.272 685.912 118.272 686.578 118.272 cv
687.103 118.8 699.387 131.085 699.387 131.085 cv
822.926 131.085 li
822.926 131.085 828.352 125.654 828.855 125.151 cv
cp
f
869.556 123.103 mo
869.556 122.178 870.306 121.43 871.226 121.43 cv
872.146 121.43 872.899 122.178 872.899 123.103 cv
872.899 124.019 872.146 124.771 871.226 124.771 cv
870.306 124.771 869.556 124.019 869.556 123.103 cv
cp
861.031 121.961 mo
861.031 116.379 li
865.019 116.379 li
865.019 103.645 li
854.202 103.645 li
854.202 116.379 li
859.146 116.379 li
859.146 125.13 li
857.698 125.13 li
857.698 137.857 li
866.452 137.857 li
866.452 125.13 li
861.031 125.13 li
861.031 123.843 li
867.243 123.843 li
867.595 125.724 869.243 127.159 871.226 127.159 cv
873.463 127.159 875.283 125.337 875.283 123.103 cv
875.283 120.861 873.463 119.041 871.226 119.041 cv
869.388 119.041 867.849 120.281 867.352 121.961 cv
861.031 121.961 li
cp
f
880.058 153.172 mo
880.058 152.252 880.808 151.503 881.728 151.503 cv
882.648 151.503 883.4 152.252 883.4 153.172 cv
883.4 154.092 882.648 154.84 881.728 154.84 cv
880.808 154.84 880.058 154.092 880.058 153.172 cv
cp
861.68 153.172 mo
861.68 154.092 860.93 154.84 860.009 154.84 cv
859.091 154.84 858.336 154.092 858.336 153.172 cv
858.336 152.252 859.091 151.503 860.009 151.503 cv
860.93 151.503 861.68 152.252 861.68 153.172 cv
cp
866.933 159.02 mo
875.36 159.02 li
875.36 154.391 li
877.876 154.391 li
878.398 156.035 879.921 157.232 881.728 157.232 cv
883.654 157.232 885.266 155.875 885.677 154.076 cv
888.476 154.076 910.802 154.076 912.452 154.076 cv
912.452 154.55 912.452 155.158 912.452 155.679 cv
910.688 155.679 li
910.688 168.09 li
917.69 168.09 li
917.69 159.96 li
921.508 159.96 li
921.508 168.09 li
928.509 168.09 li
928.509 155.679 li
921.508 155.679 li
921.508 158.079 li
917.69 158.079 li
917.69 155.679 li
914.333 155.679 li
914.333 152.19 li
885.649 152.19 li
885.208 150.428 883.626 149.115 881.728 149.115 cv
879.718 149.115 878.056 150.587 877.737 152.51 cv
875.36 152.51 li
875.36 146.608 li
866.933 146.608 li
866.933 152.51 li
864 152.51 li
863.681 150.587 862.019 149.115 860.009 149.115 cv
858.054 149.115 856.416 150.505 856.038 152.354 cv
854.019 152.354 849.108 152.354 848.545 152.354 cv
848.244 152.051 846.73 150.534 845.607 149.414 cv
845.607 132.287 li
831.604 132.287 li
831.604 151.861 li
845.394 151.861 li
847.766 154.235 li
856.11 154.235 li
856.58 155.956 858.14 157.232 860.009 157.232 cv
861.816 157.232 863.338 156.035 863.861 154.391 cv
866.933 154.391 li
866.933 159.02 li
cp
f
983.166 176.565 mo
983.166 175.643 983.914 174.895 984.834 174.895 cv
985.759 174.895 986.505 175.643 986.505 176.565 cv
986.505 177.485 985.759 178.234 984.834 178.234 cv
983.914 178.234 983.166 177.485 983.166 176.565 cv
cp
980.778 176.565 mo
980.778 178.8 982.598 180.62 984.834 180.62 cv
986.704 180.62 988.266 179.349 988.735 177.622 cv
1065.71 177.622 li
1065.71 175.741 li
988.808 175.741 li
988.498 174.245 987.357 173.063 985.898 172.662 cv
985.898 167.771 li
988.974 167.771 li
988.974 154.726 li
981.974 154.726 li
981.974 167.771 li
984.012 167.771 li
984.012 172.588 li
982.168 172.971 980.778 174.608 980.778 176.565 cv
cp
f
810.842 148.637 mo
809.919 148.637 809.172 147.889 809.172 146.968 cv
809.172 146.044 809.919 145.298 810.842 145.298 cv
811.764 145.298 812.515 146.044 812.515 146.968 cv
812.515 147.889 811.764 148.637 810.842 148.637 cv
cp
653.491 176.857 mo
653.491 178.739 li
698.022 178.739 li
698.022 178.739 715.865 160.897 716.4 160.357 cv
717.174 160.357 812.023 160.357 812.023 160.357 cv
812.023 150.827 li
813.681 150.317 814.899 148.792 814.899 146.968 cv
814.899 144.731 813.078 142.907 810.842 142.907 cv
808.604 142.907 806.785 144.731 806.785 146.968 cv
806.785 148.962 808.237 150.616 810.139 150.956 cv
810.139 152.698 810.139 157.261 810.139 158.476 cv
808.292 158.476 715.62 158.476 715.62 158.476 cv
715.62 158.476 697.776 176.318 697.242 176.857 cv
696.714 176.857 670.235 176.857 653.491 176.857 cv
cp
f
638.759 177.516 mo
638.759 178.436 638.011 179.189 637.091 179.189 cv
636.167 179.189 635.414 178.436 635.414 177.516 cv
635.414 176.594 636.167 175.846 637.091 175.846 cv
638.011 175.846 638.759 176.594 638.759 177.516 cv
cp
640.936 178.739 mo
653.491 178.739 li
653.491 176.857 li
647.69 176.857 643.058 176.857 641.077 176.857 cv
640.759 174.936 639.097 173.462 637.091 173.462 cv
634.848 173.462 633.026 175.279 633.026 177.516 cv
633.026 179.757 634.848 181.573 637.091 181.573 cv
638.894 181.573 640.415 180.375 640.936 178.739 cv
cp
f
806.251 985.517 mo
805.331 985.517 804.581 984.762 804.581 983.84 cv
804.581 982.919 805.331 982.171 806.251 982.171 cv
807.173 982.171 807.922 982.919 807.922 983.84 cv
807.922 984.762 807.173 985.517 806.251 985.517 cv
cp
702.906 979.55 mo
701.985 979.55 701.233 978.796 701.233 977.877 cv
701.233 976.953 701.985 976.204 702.906 976.204 cv
703.826 976.204 704.578 976.953 704.578 977.877 cv
704.578 978.796 703.826 979.55 702.906 979.55 cv
cp
124.116 967.662 mo
123.194 967.662 122.445 966.913 122.445 965.988 cv
122.445 965.073 123.194 964.318 124.116 964.318 cv
125.038 964.318 125.786 965.073 125.786 965.988 cv
125.786 966.913 125.038 967.662 124.116 967.662 cv
cp
806.251 979.783 mo
804.548 979.783 803.093 980.842 802.493 982.331 cv
796.18 982.331 758.387 982.331 757.684 982.331 cv
757.186 981.834 752.105 976.755 752.105 976.755 cv
727.332 976.755 li
727.332 975.527 li
715.396 975.527 li
715.396 976.755 li
706.787 976.755 li
706.296 975.065 704.754 973.815 702.906 973.815 cv
701.061 973.815 699.516 975.065 699.026 976.755 cv
692.135 976.755 632.719 976.755 631.989 976.755 cv
631.47 976.229 620.717 965.476 620.717 965.476 cv
130.837 965.3 li
130.837 965.33 li
129.68 965.33 128.752 965.33 128.105 965.33 cv
127.786 963.406 126.124 961.933 124.116 961.933 cv
121.875 961.933 120.058 963.756 120.058 965.988 cv
120.058 968.234 121.875 970.05 124.116 970.05 cv
125.926 970.05 127.442 968.847 127.964 967.212 cv
140.519 967.212 li
140.519 967.187 li
210.434 967.212 619.272 967.356 619.935 967.356 cv
620.461 967.882 631.212 978.638 631.212 978.638 cv
698.923 978.638 li
699.287 980.513 700.931 981.934 702.906 981.934 cv
704.881 981.934 706.526 980.513 706.885 978.638 cv
708.259 978.638 711.394 978.638 715.396 978.638 cv
715.396 980.94 li
727.332 980.94 li
727.332 978.638 li
738.885 978.638 750.926 978.638 751.324 978.638 cv
751.823 979.133 756.906 984.218 756.906 984.218 cv
802.229 984.218 li
802.426 986.277 804.144 987.9 806.251 987.9 cv
808.49 987.9 810.31 986.083 810.31 983.84 cv
810.31 981.606 808.49 979.783 806.251 979.783 cv
cp
f
697.058 1097.53 mo
697.058 1096.61 697.805 1095.86 698.727 1095.86 cv
699.648 1095.86 700.396 1096.61 700.396 1097.53 cv
700.396 1098.45 699.648 1099.2 698.727 1099.2 cv
697.805 1099.2 697.058 1098.45 697.058 1097.53 cv
cp
850.287 1079.39 mo
850.287 1078.47 851.037 1077.72 851.952 1077.72 cv
852.877 1077.72 853.63 1078.47 853.63 1079.39 cv
853.63 1080.31 852.877 1081.07 851.952 1081.07 cv
851.037 1081.07 850.287 1080.31 850.287 1079.39 cv
cp
987.762 1125.46 mo
988.685 1125.46 989.431 1126.21 989.431 1127.12 cv
989.431 1128.05 988.685 1128.79 987.762 1128.79 cv
986.84 1128.79 986.094 1128.05 986.094 1127.12 cv
986.094 1126.21 986.84 1125.46 987.762 1125.46 cv
cp
152.149 1097.94 mo
152.149 1098.86 151.4 1099.61 150.479 1099.61 cv
149.559 1099.61 148.808 1098.86 148.808 1097.94 cv
148.808 1097.01 149.559 1096.27 150.479 1096.27 cv
151.4 1096.27 152.149 1097.01 152.149 1097.94 cv
cp
154.351 1099.08 mo
694.849 1098.67 li
695.351 1100.35 696.89 1101.59 698.727 1101.59 cv
699.495 1101.59 700.203 1101.36 700.816 1100.99 cv
710.189 1110.37 li
710.189 1110.37 785.397 1110.37 786.171 1110.37 cv
786.669 1110.87 792.337 1116.53 792.337 1116.53 cv
830.227 1116.53 li
830.227 1116.53 834.927 1111.83 835.42 1111.34 cv
836.106 1111.34 841.685 1111.34 841.685 1111.34 cv
846.068 1106.96 li
858.639 1106.96 li
858.639 1089.62 li
852.421 1089.62 li
852.421 1083.4 li
854.049 1083.22 855.375 1082.06 855.83 1080.53 cv
867.393 1080.53 li
867.393 1087.7 li
878.211 1087.7 li
878.211 1074.97 li
874.698 1074.97 li
874.698 1073.02 874.698 1069.36 874.698 1068.28 cv
876.416 1068.28 902.76 1068.28 904.477 1068.28 cv
904.477 1070.01 904.477 1091.51 904.477 1091.51 cv
975.821 1091.51 li
975.821 1091.51 981.444 1085.89 981.945 1085.38 cv
982.712 1085.38 1046.04 1085.38 1046.8 1085.38 cv
1047.26 1085.85 1050.76 1089.35 1051.22 1089.81 cv
1051.22 1090.25 1051.22 1092.29 1051.22 1093.59 cv
1048.79 1093.59 li
1048.79 1106.64 li
1051.66 1106.64 li
1051.66 1115.39 li
1050.37 1115.39 li
1050.37 1119.38 li
986.585 1119.38 li
986.585 1123.26 li
984.925 1123.78 983.706 1125.3 983.706 1127.12 cv
983.706 1129.36 985.525 1131.18 987.762 1131.18 cv
989.997 1131.18 991.819 1129.36 991.819 1127.12 cv
991.819 1125.13 990.363 1123.48 988.466 1123.14 cv
988.466 1122.55 988.466 1121.81 988.466 1121.27 cv
990.139 1121.27 1041.6 1121.27 1050.37 1121.27 cv
1050.37 1128.44 li
1057.37 1128.44 li
1057.37 1115.39 li
1053.54 1115.39 li
1053.54 1106.64 li
1055.78 1106.64 li
1055.78 1093.59 li
1053.11 1093.59 li
1053.11 1089.02 li
1047.58 1083.5 li
981.166 1083.5 li
981.166 1083.5 975.543 1089.12 975.04 1089.62 cv
974.281 1089.62 908.185 1089.62 906.362 1089.62 cv
906.362 1087.89 906.362 1066.39 906.362 1066.39 cv
872.813 1066.39 li
872.813 1074.97 li
867.393 1074.97 li
867.393 1078.65 li
855.94 1078.65 li
855.587 1076.77 853.938 1075.34 851.952 1075.34 cv
849.718 1075.34 847.898 1077.15 847.898 1079.39 cv
847.898 1081.13 849 1082.6 850.538 1083.18 cv
850.538 1089.62 li
844.795 1089.62 li
844.795 1105.57 li
843.586 1106.78 841.267 1109.1 840.905 1109.45 cv
840.219 1109.45 834.64 1109.45 834.64 1109.45 cv
834.64 1109.45 829.943 1114.16 829.449 1114.65 cv
828.694 1114.65 793.87 1114.65 793.114 1114.65 cv
792.611 1114.14 786.951 1108.48 786.951 1108.48 cv
786.951 1108.48 711.743 1108.48 710.97 1108.48 cv
710.528 1108.04 704.06 1101.58 702.157 1099.67 cv
702.55 1099.05 702.783 1098.31 702.783 1097.53 cv
702.783 1095.3 700.964 1093.47 698.727 1093.47 cv
696.742 1093.47 695.095 1094.9 694.745 1096.79 cv
154.462 1097.19 li
154.111 1095.3 152.462 1093.88 150.479 1093.88 cv
148.239 1093.88 146.422 1095.7 146.422 1097.94 cv
146.422 1100.17 148.239 1101.99 150.479 1101.99 cv
152.314 1101.99 153.856 1100.75 154.351 1099.08 cv
cp
f
985.849 1079.15 mo
985.849 1078.24 986.605 1077.48 987.525 1077.48 cv
988.445 1077.48 989.193 1078.24 989.193 1079.15 cv
989.193 1080.08 988.445 1080.82 987.525 1080.82 cv
986.605 1080.82 985.849 1080.08 985.849 1079.15 cv
cp
983.465 1079.15 mo
983.465 1081.39 985.286 1083.21 987.525 1083.21 cv
989.275 1083.21 990.756 1082.09 991.32 1080.53 cv
998.564 1080.53 1045.53 1080.53 1046.3 1080.53 cv
1046.83 1081.12 1056.64 1091.99 1056.64 1091.99 cv
1078.9 1091.99 li
1078.9 1090.1 li
1072.64 1090.1 1058.11 1090.1 1057.47 1090.1 cv
1056.94 1089.51 1047.13 1078.65 1047.13 1078.65 cv
991.53 1078.65 li
991.279 1076.65 989.586 1075.1 987.525 1075.1 cv
985.286 1075.1 983.465 1076.91 983.465 1079.15 cv
cp
f
914.727 1079.63 mo
914.727 1078.71 915.477 1077.96 916.4 1077.96 cv
917.32 1077.96 918.066 1078.71 918.066 1079.63 cv
918.066 1080.55 917.32 1081.3 916.4 1081.3 cv
915.477 1081.3 914.727 1080.55 914.727 1079.63 cv
cp
912.339 1079.63 mo
912.339 1081.86 914.161 1083.69 916.4 1083.69 cv
917.207 1083.69 917.956 1083.44 918.59 1083.03 cv
922.054 1086.5 li
970.81 1086.5 li
970.81 1086.5 983.407 1073.9 983.935 1073.37 cv
984.701 1073.37 1050.49 1073.37 1051.26 1073.37 cv
1051.77 1073.88 1058.42 1080.53 1058.42 1080.53 cv
1078.9 1080.53 li
1078.9 1078.65 li
1073.35 1078.65 1059.8 1078.65 1059.2 1078.65 cv
1058.69 1078.14 1052.04 1071.48 1052.04 1071.48 cv
983.155 1071.48 li
983.155 1071.48 970.558 1084.08 970.03 1084.62 cv
969.27 1084.62 923.596 1084.62 922.834 1084.62 cv
922.503 1084.28 920.855 1082.64 919.887 1081.67 cv
920.238 1081.07 920.455 1080.37 920.455 1079.63 cv
920.455 1077.39 918.635 1075.57 916.4 1075.57 cv
914.161 1075.57 912.339 1077.39 912.339 1079.63 cv
cp
f
882.744 1091.8 mo
882.744 1090.88 883.493 1090.13 884.416 1090.13 cv
885.336 1090.13 886.087 1090.88 886.087 1091.8 cv
886.087 1092.72 885.336 1093.47 884.416 1093.47 cv
883.493 1093.47 882.744 1092.72 882.744 1091.8 cv
cp
174.107 1110.11 mo
174.107 1111.03 173.354 1111.78 172.438 1111.78 cv
171.515 1111.78 170.766 1111.03 170.766 1110.11 cv
170.766 1109.19 171.515 1108.44 172.438 1108.44 cv
173.354 1108.44 174.107 1109.19 174.107 1110.11 cv
cp
842.042 1117.49 mo
842.797 1117.49 864.035 1117.49 864.035 1117.49 cv
864.035 1117.49 864.035 1095.16 864.035 1093.42 cv
865.495 1093.42 877.401 1093.42 880.699 1093.42 cv
881.324 1094.85 882.754 1095.86 884.416 1095.86 cv
886.311 1095.86 887.897 1094.55 888.336 1092.79 cv
895.54 1092.79 li
895.54 1087.7 li
899.215 1087.7 li
899.215 1074.97 li
888.394 1074.97 li
888.394 1087.7 li
893.658 1087.7 li
893.658 1088.9 893.658 1090.23 893.658 1090.9 cv
892.604 1090.9 889.743 1090.9 888.365 1090.9 cv
887.951 1089.1 886.341 1087.74 884.416 1087.74 cv
882.268 1087.74 880.525 1089.43 880.383 1091.54 cv
862.151 1091.54 li
862.151 1091.54 862.151 1113.87 862.151 1115.6 cv
860.433 1115.6 841.263 1115.6 841.263 1115.6 cv
841.263 1115.6 835.836 1121.03 835.336 1121.53 cv
834.925 1121.53 800.667 1121.53 768.565 1121.53 cv
768.565 1119.93 768.565 1116.9 768.565 1115.85 cv
769.383 1115.85 770.991 1115.85 772.08 1115.85 cv
772.08 1117.78 li
784.33 1117.78 li
784.33 1112.37 li
772.08 1112.37 li
772.08 1113.97 li
766.683 1113.97 li
766.683 1121.53 li
739.138 1121.53 713.71 1121.53 713.356 1121.53 cv
712.831 1121 700.551 1108.72 700.551 1108.72 cv
176.36 1109.13 li
175.919 1107.37 174.334 1106.05 172.438 1106.05 cv
170.197 1106.05 168.378 1107.87 168.378 1110.11 cv
168.378 1112.34 170.197 1114.17 172.438 1114.17 cv
174.363 1114.17 175.972 1112.81 176.385 1111.01 cv
179.554 1111.01 699.099 1110.61 699.769 1110.61 cv
700.297 1111.13 712.577 1123.41 712.577 1123.41 cv
836.116 1123.41 li
836.116 1123.41 841.543 1117.99 842.042 1117.49 cv
cp
f
813.768 1099.44 mo
812.846 1099.44 812.096 1098.69 812.096 1097.77 cv
812.096 1096.85 812.846 1096.1 813.768 1096.1 cv
814.688 1096.1 815.438 1096.85 815.438 1097.77 cv
815.438 1098.69 814.688 1099.44 813.768 1099.44 cv
cp
710.423 1093.47 mo
709.502 1093.47 708.747 1092.72 708.747 1091.8 cv
708.747 1090.88 709.502 1090.13 710.423 1090.13 cv
711.343 1090.13 712.095 1090.88 712.095 1091.8 cv
712.095 1092.72 711.343 1093.47 710.423 1093.47 cv
cp
131.632 1081.59 mo
130.71 1081.59 129.962 1080.84 129.962 1079.92 cv
129.962 1078.99 130.71 1078.25 131.632 1078.25 cv
132.553 1078.25 133.301 1078.99 133.301 1079.92 cv
133.301 1080.84 132.553 1081.59 131.632 1081.59 cv
cp
813.768 1093.71 mo
812.064 1093.71 810.608 1094.77 810.008 1096.26 cv
803.693 1096.26 765.903 1096.26 765.198 1096.26 cv
764.701 1095.76 759.62 1090.68 759.62 1090.68 cv
734.846 1090.68 li
734.846 1089.46 li
722.911 1089.46 li
722.911 1090.68 li
714.304 1090.68 li
713.811 1089 712.271 1087.74 710.423 1087.74 cv
708.576 1087.74 707.03 1089 706.542 1090.68 cv
699.651 1090.68 640.235 1090.68 639.508 1090.68 cv
638.983 1090.16 628.23 1079.41 628.23 1079.41 cv
138.354 1079.23 li
138.354 1079.25 li
137.2 1079.25 136.264 1079.25 135.621 1079.25 cv
135.303 1077.34 133.641 1075.86 131.632 1075.86 cv
129.392 1075.86 127.573 1077.69 127.573 1079.92 cv
127.573 1082.16 129.392 1083.97 131.632 1083.97 cv
133.441 1083.97 134.959 1082.77 135.48 1081.14 cv
148.035 1081.14 li
148.035 1081.12 li
217.95 1081.14 626.789 1081.29 627.452 1081.29 cv
627.977 1081.81 638.727 1092.57 638.727 1092.57 cv
706.442 1092.57 li
706.804 1094.44 708.447 1095.86 710.423 1095.86 cv
712.396 1095.86 714.043 1094.44 714.401 1092.57 cv
715.772 1092.57 718.907 1092.57 722.911 1092.57 cv
722.911 1094.87 li
734.846 1094.87 li
734.846 1092.57 li
746.401 1092.57 758.442 1092.57 758.841 1092.57 cv
759.34 1093.06 764.419 1098.15 764.419 1098.15 cv
809.746 1098.15 li
809.942 1100.2 811.66 1101.82 813.768 1101.82 cv
816.007 1101.82 817.827 1100 817.827 1097.77 cv
817.827 1095.53 816.007 1093.71 813.768 1093.71 cv
cp
f
1075.88 660.929 mo
1074.96 660.929 1074.21 660.183 1074.21 659.258 cv
1074.21 658.334 1074.96 657.585 1075.88 657.585 cv
1076.81 657.585 1077.55 658.334 1077.55 659.258 cv
1077.55 660.183 1076.81 660.929 1075.88 660.929 cv
cp
900.46 628.706 mo
900.46 627.786 901.206 627.037 902.128 627.037 cv
903.048 627.037 903.799 627.786 903.799 628.706 cv
903.799 629.627 903.048 630.379 902.128 630.379 cv
901.206 630.379 900.46 629.627 900.46 628.706 cv
cp
1075.88 655.201 mo
1073.87 655.201 1072.21 656.669 1071.89 658.596 cv
1064.2 658.596 1016.44 658.596 1015.73 658.596 cv
1015.19 658.06 997.352 640.218 997.352 640.218 cv
997.352 640.218 904.678 640.218 902.832 640.218 cv
902.832 638.999 902.832 634.435 902.832 632.693 cv
904.73 632.356 906.183 630.706 906.183 628.706 cv
906.183 626.472 904.362 624.649 902.128 624.649 cv
899.89 624.649 898.069 626.472 898.069 628.706 cv
898.069 630.53 899.288 632.06 900.948 632.571 cv
900.948 642.099 li
900.948 642.099 995.799 642.099 996.571 642.099 cv
997.106 642.635 1014.95 660.477 1014.95 660.477 cv
1072.03 660.477 li
1072.56 662.116 1074.07 663.315 1075.88 663.315 cv
1078.12 663.315 1079.94 661.495 1079.94 659.258 cv
1079.94 657.017 1078.12 655.201 1075.88 655.201 cv
cp
f
788.039 702.695 mo
787.119 702.695 786.368 701.947 786.368 701.023 cv
786.368 700.104 787.119 699.356 788.039 699.356 cv
788.962 699.356 789.712 700.104 789.712 701.023 cv
789.712 701.947 788.962 702.695 788.039 702.695 cv
cp
801.33 687.702 mo
801.33 686.685 li
801.387 686.625 li
801.33 686.575 li
801.33 668.288 li
795.76 668.288 li
795.76 687.702 li
797.856 687.702 li
789.227 697.163 li
788.85 697.049 788.456 696.967 788.039 696.967 cv
785.805 696.967 783.983 698.786 783.983 701.023 cv
783.983 703.26 785.805 705.084 788.039 705.084 cv
790.276 705.084 792.101 703.26 792.101 701.023 cv
792.101 699.894 791.634 698.877 790.888 698.14 cv
800.403 687.702 li
801.33 687.702 li
cp
f
140.143 690.456 mo
139.221 690.456 138.472 689.708 138.472 688.787 cv
138.472 687.865 139.221 687.117 140.143 687.117 cv
141.063 687.117 141.813 687.865 141.813 688.787 cv
141.813 689.708 141.063 690.456 140.143 690.456 cv
cp
722.406 686.347 mo
723.326 686.347 724.076 687.095 724.076 688.019 cv
724.076 688.94 723.326 689.687 722.406 689.687 cv
721.484 689.687 720.735 688.94 720.735 688.019 cv
720.735 687.095 721.484 686.347 722.406 686.347 cv
cp
722.406 692.071 mo
724.646 692.071 726.465 690.256 726.465 688.019 cv
726.465 685.777 724.646 683.963 722.406 683.963 cv
720.492 683.963 718.896 685.296 718.468 687.078 cv
144.079 687.844 li
143.649 686.065 142.052 684.727 140.143 684.727 cv
137.903 684.727 136.086 686.551 136.086 688.787 cv
136.086 691.029 137.903 692.845 140.143 692.845 cv
142.052 692.845 143.651 691.512 144.079 689.729 cv
718.468 688.96 li
718.896 690.742 720.492 692.071 722.406 692.071 cv
cp
f
885.42 714.154 mo
884.497 714.154 883.75 713.406 883.75 712.481 cv
883.75 711.562 884.497 710.81 885.42 710.81 cv
886.341 710.81 887.094 711.562 887.094 712.481 cv
887.094 713.406 886.341 714.154 885.42 714.154 cv
cp
841.981 707.946 mo
841.06 707.946 840.31 707.198 840.31 706.274 cv
840.31 705.354 841.06 704.606 841.981 704.606 cv
842.901 704.606 843.651 705.354 843.651 706.274 cv
843.651 707.198 842.901 707.946 841.981 707.946 cv
cp
809.999 707.946 mo
809.078 707.946 808.331 707.198 808.331 706.274 cv
808.331 705.354 809.078 704.606 809.999 704.606 cv
810.92 704.606 811.668 705.354 811.668 706.274 cv
811.668 707.198 810.92 707.946 809.999 707.946 cv
cp
885.42 708.425 mo
884.705 708.425 884.047 708.626 883.462 708.953 cv
880.501 705.987 li
846.011 705.987 li
845.88 704.164 844.555 702.667 842.801 702.301 cv
842.801 687.702 li
844.61 687.702 li
844.61 668.288 li
839.042 668.288 li
839.042 687.702 li
840.919 687.702 li
840.919 702.377 li
839.271 702.827 838.045 704.282 837.948 706.053 cv
814.033 706.053 li
813.913 703.919 812.158 702.218 809.999 702.218 cv
807.763 702.218 805.942 704.037 805.942 706.274 cv
805.942 708.516 807.763 710.331 809.999 710.331 cv
811.646 710.331 813.058 709.341 813.694 707.935 cv
838.286 707.935 li
838.924 709.341 840.335 710.331 841.981 710.331 cv
843.649 710.331 845.087 709.321 845.71 707.873 cv
850.26 707.873 879.017 707.873 879.72 707.873 cv
880.03 708.185 881.272 709.425 882.06 710.212 cv
881.619 710.862 881.364 711.64 881.364 712.481 cv
881.364 714.719 883.184 716.539 885.42 716.539 cv
887.657 716.539 889.477 714.719 889.477 712.481 cv
889.477 710.244 887.657 708.425 885.42 708.425 cv
cp
f
979.145 676.434 mo
973.372 671.326 li
946.844 671.326 li
946.844 671.326 924.712 693.458 924.177 693.995 cv
923.551 693.995 912.967 693.995 909.527 693.995 cv
909.527 691.839 li
892.341 691.839 li
892.341 697.567 li
909.527 697.567 li
909.527 695.881 li
924.955 695.881 li
924.955 695.881 947.091 673.747 947.629 673.207 cv
948.373 673.207 971.973 673.207 972.656 673.207 cv
973.11 673.604 976.733 676.813 977.261 677.284 cv
977.261 677.738 977.261 679.023 977.261 679.742 cv
975.404 679.742 li
975.404 699.157 li
980.974 699.157 li
980.974 679.742 li
979.145 679.742 li
979.145 676.434 li
cp
f
1051.46 679.742 mo
1051.46 699.157 li
1057.03 699.157 li
1057.03 679.742 li
1051.46 679.742 li
cp
f
1065.86 708.666 mo
1064.93 708.666 1064.19 707.909 1064.19 706.989 cv
1064.19 706.069 1064.93 705.321 1065.86 705.321 cv
1066.78 705.321 1067.53 706.069 1067.53 706.989 cv
1067.53 707.909 1066.78 708.666 1065.86 708.666 cv
cp
1065.86 702.938 mo
1063.62 702.938 1061.8 704.757 1061.8 706.989 cv
1061.8 708.801 1063 710.323 1064.64 710.847 cv
1064.64 711.876 1064.64 713.746 1064.64 714.265 cv
1064.07 714.727 1060.47 717.665 1060.03 718.023 cv
1059.42 718.023 1049.93 718.023 1049.22 718.023 cv
1048.76 717.562 1045.22 714.027 1044.76 713.562 cv
1044.76 712.935 1044.76 702.412 1044.76 699.157 cv
1046.37 699.157 li
1046.37 679.742 li
1040.8 679.742 li
1040.8 699.157 li
1042.88 699.157 li
1042.88 714.339 li
1048.44 719.908 li
1060.71 719.908 li
1066.52 715.159 li
1066.52 710.981 li
1068.44 710.662 1069.92 709.004 1069.92 706.989 cv
1069.92 704.757 1068.1 702.938 1065.86 702.938 cv
cp
f
1030.3 699.157 mo
1035.87 699.157 li
1035.87 679.742 li
1030.3 679.742 li
1030.3 699.157 li
cp
f
964.9 688.391 mo
938.852 688.391 li
938.852 688.391 921.783 705.457 921.25 705.987 cv
920.633 705.987 912.228 705.987 909.527 705.987 cv
909.527 704.245 li
892.341 704.245 li
892.341 709.976 li
909.527 709.976 li
909.527 707.873 li
922.029 707.873 li
922.029 707.873 939.095 690.805 939.63 690.273 cv
940.296 690.273 960.048 690.273 964.9 690.273 cv
964.9 699.157 li
970.471 699.157 li
970.471 679.742 li
964.9 679.742 li
964.9 688.391 li
cp
f
989.828 676.892 mo
977.819 664.881 li
939.544 664.881 li
939.544 664.881 929.811 675.518 929.279 676.094 cv
928.543 676.094 895.188 676.094 888.843 676.094 cv
888.843 668.288 li
883.273 668.288 li
883.273 687.702 li
888.843 687.702 li
888.843 677.983 li
930.11 677.983 li
930.11 677.983 939.843 667.343 940.37 666.763 cv
941.172 666.763 976.283 666.763 977.04 666.763 cv
977.551 667.277 987.431 677.155 987.946 677.666 cv
987.946 678.028 987.946 679.01 987.946 679.742 cv
986.225 679.742 li
986.225 699.157 li
991.795 699.157 li
991.795 679.742 li
989.828 679.742 li
989.828 676.892 li
cp
f
834.108 668.288 mo
828.539 668.288 li
828.539 687.702 li
834.108 687.702 li
834.108 668.288 li
cp
f
145.87 681.271 mo
146.792 681.271 147.54 682.018 147.54 682.94 cv
147.54 683.862 146.792 684.608 145.87 684.608 cv
144.95 684.608 144.201 683.862 144.201 682.94 cv
144.201 682.018 144.95 681.271 145.87 681.271 cv
cp
145.87 686.996 mo
147.695 686.996 149.221 685.777 149.732 684.117 cv
157.861 684.117 747.055 683.351 748.789 683.351 cv
748.789 684.965 748.789 696.001 748.789 696.001 cv
752.797 696.001 li
752.797 697.404 li
770.3 697.404 li
770.3 691.839 li
752.797 691.839 li
752.797 694.116 li
752.15 694.116 751.288 694.116 750.675 694.116 cv
750.675 692.503 750.675 681.468 750.675 681.468 cv
149.854 682.237 li
149.521 680.335 147.865 678.883 145.87 678.883 cv
143.633 678.883 141.813 680.699 141.813 682.94 cv
141.813 685.177 143.633 686.996 145.87 686.996 cv
cp
f
846.994 692.91 mo
847.917 692.91 848.664 693.658 848.664 694.58 cv
848.664 695.503 847.917 696.251 846.994 696.251 cv
846.072 696.251 845.323 695.503 845.323 694.58 cv
845.323 693.658 846.072 692.91 846.994 692.91 cv
cp
842.935 694.58 mo
842.935 696.819 844.756 698.644 846.994 698.644 cv
849.229 698.644 851.051 696.819 851.051 694.58 cv
851.051 692.648 849.689 691.033 847.875 690.628 cv
847.875 685.766 847.875 657.898 847.875 657.201 cv
848.399 656.68 862.017 643.056 862.541 642.537 cv
863.297 642.537 891.493 642.537 891.493 642.537 cv
891.493 642.537 891.493 620.077 891.493 618.34 cv
893.35 618.34 928.724 618.34 928.724 618.34 cv
928.724 618.34 934.752 612.315 935.254 611.809 cv
936.022 611.809 958.556 611.809 958.556 611.809 cv
958.556 611.809 974.791 595.573 975.325 595.04 cv
976.012 595.04 1055.19 595.04 1077.32 595.04 cv
1077.32 593.156 li
974.546 593.156 li
974.546 593.156 958.31 609.388 957.778 609.926 cv
957.012 609.926 934.479 609.926 934.479 609.926 cv
934.479 609.926 928.449 615.951 927.945 616.459 cv
927.168 616.459 889.608 616.459 889.608 616.459 cv
889.608 616.459 889.608 638.913 889.608 640.655 cv
887.846 640.655 861.762 640.655 861.762 640.655 cv
845.99 656.42 li
845.99 690.665 li
844.239 691.115 842.935 692.693 842.935 694.58 cv
cp
f
1023.33 674.405 mo
994.76 646.321 li
869.813 646.321 li
852.258 663.879 li
852.258 668.288 li
850.497 668.288 li
850.497 687.702 li
856.066 687.702 li
856.066 668.288 li
854.143 668.288 li
854.143 666.909 854.143 665.068 854.143 664.656 cv
854.666 664.135 870.069 648.732 870.595 648.204 cv
871.369 648.204 993.226 648.204 993.991 648.204 cv
994.522 648.727 1020.9 674.656 1021.45 675.194 cv
1021.45 675.718 1021.45 678.479 1021.45 679.742 cv
1019.64 679.742 li
1019.64 699.157 li
1025.21 699.157 li
1025.21 679.742 li
1023.33 679.742 li
1023.33 674.405 li
cp
f
1011.91 676.172 mo
988.262 652.524 li
874.408 652.524 li
863.146 663.793 li
863.146 668.288 li
860.998 668.288 li
860.998 687.702 li
866.568 687.702 li
866.568 668.288 li
865.03 668.288 li
865.03 666.877 865.03 664.985 865.03 664.57 cv
865.54 664.063 874.68 654.921 875.188 654.412 cv
875.962 654.412 986.707 654.412 987.479 654.412 cv
988.012 654.94 1009.49 676.421 1010.02 676.953 cv
1010.02 677.374 1010.02 678.836 1010.02 679.742 cv
1008.5 679.742 li
1008.5 699.157 li
1014.07 699.157 li
1014.07 679.742 li
1011.91 679.742 li
1011.91 676.172 li
cp
f
1000.93 675.931 mo
984.026 659.029 li
880.019 659.029 li
874.216 664.832 li
874.216 668.288 li
872.295 668.288 li
872.295 687.702 li
877.865 687.702 li
877.865 668.288 li
876.101 668.288 li
876.101 667.232 876.101 665.977 876.101 665.617 cv
876.567 665.148 880.331 661.379 880.799 660.91 cv
881.57 660.91 982.475 660.91 983.246 660.91 cv
983.771 661.438 998.518 676.188 999.043 676.716 cv
999.043 677.133 999.043 678.69 999.043 679.742 cv
997.522 679.742 li
997.522 699.157 li
1003.09 699.157 li
1003.09 679.742 li
1000.93 679.742 li
1000.93 675.931 li
cp
f
611.294 720.693 mo
610.371 720.693 609.622 719.945 609.622 719.021 cv
609.622 718.097 610.371 717.349 611.294 717.349 cv
612.219 717.349 612.967 718.097 612.967 719.021 cv
612.967 719.945 612.219 720.693 611.294 720.693 cv
cp
821.204 689.72 mo
821.204 687.702 li
823.45 687.702 li
823.45 668.288 li
817.88 668.288 li
817.88 687.702 li
819.319 687.702 li
819.319 688.175 819.319 688.682 819.319 688.94 cv
818.813 689.45 809.938 698.32 809.431 698.83 cv
808.703 698.83 798.394 698.83 798.394 698.83 cv
798.394 698.83 786.3 710.919 785.769 711.453 cv
784.997 711.453 643.352 711.479 643.352 711.479 cv
643.352 711.479 636.951 717.875 636.442 718.384 cv
636.048 718.384 631.69 718.384 627.699 718.384 cv
627.699 718.362 li
621.898 718.362 617.265 718.362 615.283 718.362 cv
614.965 716.438 613.307 714.964 611.294 714.964 cv
609.058 714.964 607.235 716.786 607.235 719.021 cv
607.235 721.26 609.058 723.082 611.294 723.082 cv
613.102 723.082 614.623 721.879 615.143 720.243 cv
623.247 720.243 li
623.247 720.273 li
637.222 720.273 li
637.222 720.273 643.62 713.872 644.129 713.365 cv
644.901 713.365 786.551 713.336 786.551 713.336 cv
786.551 713.336 798.646 701.244 799.171 700.712 cv
799.894 700.712 810.213 700.712 810.213 700.712 cv
821.204 689.72 li
cp
f
377.867 695.903 mo
376.944 695.903 376.196 695.155 376.196 694.232 cv
376.196 693.31 376.944 692.565 377.867 692.565 cv
378.787 692.565 379.537 693.31 379.537 694.232 cv
379.537 695.155 378.787 695.903 377.867 695.903 cv
cp
706.654 693.149 mo
707.574 693.149 708.324 693.899 708.324 694.819 cv
708.324 695.739 707.574 696.488 706.654 696.488 cv
705.734 696.488 704.98 695.739 704.98 694.819 cv
704.98 693.899 705.734 693.149 706.654 693.149 cv
cp
702.718 695.76 mo
703.143 697.543 704.742 698.877 706.654 698.877 cv
708.894 698.877 710.708 697.057 710.708 694.819 cv
710.708 692.582 708.894 690.763 706.654 690.763 cv
704.742 690.763 703.143 692.096 702.718 693.88 cv
394.27 693.598 li
394.27 693.567 li
388.469 693.567 383.835 693.567 381.855 693.567 cv
381.539 691.65 379.874 690.174 377.867 690.174 cv
375.626 690.174 373.808 691.998 373.808 694.232 cv
373.808 696.468 375.626 698.291 377.867 698.291 cv
379.677 698.291 381.193 697.089 381.717 695.454 cv
391.41 695.454 li
391.41 695.482 li
702.718 695.76 li
cp
f
229.533 663.131 mo
230.453 663.131 231.206 663.879 231.206 664.8 cv
231.206 665.72 230.453 666.468 229.533 666.468 cv
228.613 666.468 227.864 665.72 227.864 664.8 cv
227.864 663.879 228.613 663.131 229.533 663.131 cv
cp
229.533 668.856 mo
231.132 668.856 232.502 667.922 233.162 666.574 cv
761.534 665.809 li
761.534 665.809 761.534 661.393 761.534 660.08 cv
763.314 660.08 807.163 660.08 808.935 660.08 cv
808.935 661.213 808.935 665.813 808.935 668.288 cv
807.376 668.288 li
807.376 687.702 li
812.945 687.702 li
812.945 668.288 li
810.821 668.288 li
810.821 658.194 li
759.652 658.194 li
759.652 658.194 759.652 662.609 759.652 663.929 cv
757.95 663.929 242.372 664.692 233.579 664.692 cv
233.522 662.507 231.733 660.743 229.533 660.743 cv
227.298 660.743 225.477 662.563 225.477 664.8 cv
225.477 667.036 227.298 668.856 229.533 668.856 cv
cp
f
219.27 669.097 mo
220.195 669.097 220.943 669.848 220.943 670.768 cv
220.943 671.688 220.195 672.437 219.27 672.437 cv
218.351 672.437 217.602 671.688 217.602 670.768 cv
217.602 669.848 218.351 669.097 219.27 669.097 cv
cp
219.27 674.826 mo
221.226 674.826 222.865 673.437 223.246 671.588 cv
766.429 670.819 li
766.429 670.819 766.429 667.155 766.429 665.926 cv
768.083 665.926 785.326 665.926 786.979 665.926 cv
786.979 666.521 786.979 667.47 786.979 668.288 cv
785.259 668.288 li
785.259 687.702 li
790.828 687.702 li
790.828 668.288 li
788.866 668.288 li
788.866 664.043 li
764.544 664.043 li
764.544 664.043 764.544 667.707 764.544 668.935 cv
762.795 668.935 231.141 669.706 223.168 669.706 cv
222.702 667.984 221.138 666.709 219.27 666.709 cv
217.031 666.709 215.214 668.533 215.214 670.768 cv
215.214 673.003 217.031 674.826 219.27 674.826 cv
cp
f
780.169 687.702 mo
780.169 668.288 li
774.6 668.288 li
774.6 675.977 li
749.799 676.041 li
749.799 677.927 li
774.6 677.861 li
774.6 687.702 li
780.169 687.702 li
cp
f
519.889 656.412 mo
520.809 656.412 521.559 657.16 521.559 658.082 cv
521.559 659.004 520.809 659.753 519.889 659.753 cv
518.964 659.753 518.216 659.004 518.216 658.082 cv
518.216 657.16 518.964 656.412 519.889 656.412 cv
cp
728.134 656.631 mo
729.058 656.631 729.806 657.381 729.806 658.306 cv
729.806 659.221 729.058 659.97 728.134 659.97 cv
727.209 659.97 726.465 659.221 726.465 658.306 cv
726.465 657.381 727.209 656.631 728.134 656.631 cv
cp
519.889 662.138 mo
521.695 662.138 523.213 660.94 523.736 659.303 cv
533.943 659.303 li
533.943 659.331 li
724.232 659.362 li
724.706 661.082 726.267 662.362 728.134 662.362 cv
730.372 662.362 732.194 660.542 732.194 658.306 cv
732.194 656.347 730.799 654.71 728.956 654.33 cv
728.956 649.515 li
730.998 649.515 li
730.998 636.464 li
723.995 636.464 li
723.995 649.515 li
727.07 649.515 li
727.07 654.399 li
725.612 654.801 724.469 655.984 724.16 657.479 cv
536.288 657.451 li
536.288 657.422 li
530.488 657.422 525.856 657.422 523.875 657.422 cv
523.557 655.5 521.894 654.023 519.889 654.023 cv
517.646 654.023 515.827 655.843 515.827 658.082 cv
515.827 660.321 517.646 662.138 519.889 662.138 cv
cp
f
1056.15 820.379 mo
1055.23 820.379 1054.49 819.629 1054.49 818.709 cv
1054.49 817.788 1055.23 817.036 1056.15 817.036 cv
1057.08 817.036 1057.83 817.788 1057.83 818.709 cv
1057.83 819.629 1057.08 820.379 1056.15 820.379 cv
cp
880.728 788.159 mo
880.728 787.236 881.478 786.487 882.398 786.487 cv
883.323 786.487 884.07 787.236 884.07 788.159 cv
884.07 789.083 883.323 789.829 882.398 789.829 cv
881.478 789.829 880.728 789.083 880.728 788.159 cv
cp
1056.15 814.652 mo
1054.14 814.652 1052.48 816.124 1052.16 818.044 cv
1044.47 818.044 996.708 818.044 996 818.044 cv
995.467 817.511 977.621 799.668 977.621 799.668 cv
977.621 799.668 884.95 799.668 883.103 799.668 cv
883.103 798.449 883.103 793.886 883.103 792.144 cv
885.007 791.809 886.455 790.151 886.455 788.159 cv
886.455 785.92 884.636 784.101 882.398 784.101 cv
880.166 784.101 878.342 785.92 878.342 788.159 cv
878.342 789.985 879.56 791.51 881.221 792.021 cv
881.221 801.551 li
881.221 801.551 976.068 801.551 976.844 801.551 cv
977.38 802.085 995.222 819.93 995.222 819.93 cv
1052.31 819.93 li
1052.83 821.566 1054.35 822.765 1056.15 822.765 cv
1058.39 822.765 1060.21 820.945 1060.21 818.709 cv
1060.21 816.467 1058.39 814.652 1056.15 814.652 cv
cp
f
777.955 862.148 mo
777.035 862.148 776.282 861.4 776.282 860.477 cv
776.282 859.558 777.035 858.806 777.955 858.806 cv
778.875 858.806 779.624 859.558 779.624 860.477 cv
779.624 861.4 778.875 862.148 777.955 862.148 cv
cp
791.243 847.151 mo
791.243 846.136 li
791.299 846.075 li
791.243 846.023 li
791.243 827.738 li
785.674 827.738 li
785.674 847.151 li
787.769 847.151 li
779.141 856.613 li
778.765 856.499 778.368 856.421 777.955 856.421 cv
775.718 856.421 773.894 858.236 773.894 860.477 cv
773.894 862.715 775.718 864.533 777.955 864.533 cv
780.188 864.533 782.011 862.715 782.011 860.477 cv
782.011 859.345 781.546 858.327 780.801 857.591 cv
790.316 847.151 li
791.243 847.151 li
cp
f
130.054 849.911 mo
129.134 849.911 128.386 849.162 128.386 848.238 cv
128.386 847.315 129.134 846.567 130.054 846.567 cv
130.974 846.567 131.727 847.315 131.727 848.238 cv
131.727 849.162 130.974 849.911 130.054 849.911 cv
cp
712.315 845.802 mo
713.239 845.802 713.991 846.549 713.991 847.465 cv
713.991 848.39 713.239 849.139 712.315 849.139 cv
711.396 849.139 710.647 848.39 710.647 847.465 cv
710.647 846.549 711.396 845.802 712.315 845.802 cv
cp
712.315 851.526 mo
714.557 851.526 716.378 849.706 716.378 847.465 cv
716.378 845.234 714.557 843.413 712.315 843.413 cv
710.405 843.413 708.81 844.742 708.38 846.525 cv
133.99 847.294 li
133.561 845.515 131.966 844.182 130.054 844.182 cv
127.815 844.182 125.999 846.001 125.999 848.238 cv
125.999 850.475 127.815 852.295 130.054 852.295 cv
131.966 852.295 133.564 850.962 133.99 849.179 cv
708.38 848.408 li
708.81 850.197 710.405 851.526 712.315 851.526 cv
cp
f
865.693 873.602 mo
864.771 873.602 864.022 872.856 864.022 871.933 cv
864.022 871.015 864.771 870.26 865.693 870.26 cv
866.613 870.26 867.361 871.015 867.361 871.933 cv
867.361 872.856 866.613 873.602 865.693 873.602 cv
cp
822.253 867.396 mo
821.331 867.396 820.585 866.649 820.585 865.729 cv
820.585 864.809 821.331 864.06 822.253 864.06 cv
823.176 864.06 823.924 864.809 823.924 865.729 cv
823.924 866.649 823.176 867.396 822.253 867.396 cv
cp
790.269 867.396 mo
789.352 867.396 788.602 866.649 788.602 865.729 cv
788.602 864.809 789.352 864.06 790.269 864.06 cv
791.194 864.06 791.942 864.809 791.942 865.729 cv
791.942 866.649 791.194 867.396 790.269 867.396 cv
cp
865.693 867.875 mo
864.977 867.875 864.315 868.08 863.734 868.4 cv
860.773 865.444 li
826.283 865.444 li
826.152 863.618 824.828 862.117 823.073 861.754 cv
823.073 847.151 li
824.883 847.151 li
824.883 827.738 li
819.313 827.738 li
819.313 847.151 li
821.192 847.151 li
821.192 861.827 li
819.544 862.277 818.317 863.735 818.22 865.5 cv
794.307 865.5 li
794.185 863.369 792.432 861.673 790.269 861.673 cv
788.035 861.673 786.216 863.492 786.216 865.729 cv
786.216 867.962 788.035 869.785 790.269 869.785 cv
791.92 869.785 793.329 868.792 793.967 867.385 cv
818.559 867.385 li
819.196 868.792 820.607 869.785 822.253 869.785 cv
823.922 869.785 825.358 868.771 825.981 867.328 cv
830.532 867.328 859.289 867.328 859.993 867.328 cv
860.304 867.635 861.544 868.877 862.331 869.663 cv
861.893 870.313 861.637 871.095 861.637 871.933 cv
861.637 874.17 863.456 875.987 865.693 875.987 cv
867.931 875.987 869.75 874.17 869.75 871.933 cv
869.75 869.693 867.931 867.875 865.693 867.875 cv
cp
f
959.419 835.888 mo
953.643 830.776 li
927.121 830.776 li
927.121 830.776 904.984 852.908 904.448 853.446 cv
903.822 853.446 893.237 853.446 889.801 853.446 cv
889.801 851.289 li
872.612 851.289 li
872.612 857.019 li
889.801 857.019 li
889.801 855.329 li
905.226 855.329 li
905.226 855.329 927.361 833.195 927.901 832.658 cv
928.645 832.658 952.246 832.658 952.929 832.658 cv
953.379 833.058 957.006 836.267 957.533 836.734 cv
957.533 837.192 957.533 838.473 957.533 839.196 cv
955.679 839.196 li
955.679 858.604 li
961.245 858.604 li
961.245 839.196 li
959.419 839.196 li
959.419 835.888 li
cp
f
1031.73 839.196 mo
1031.73 858.604 li
1037.3 858.604 li
1037.3 839.196 li
1031.73 839.196 li
cp
f
1046.13 868.115 mo
1045.21 868.115 1044.46 867.364 1044.46 866.444 cv
1044.46 865.524 1045.21 864.771 1046.13 864.771 cv
1047.05 864.771 1047.8 865.524 1047.8 866.444 cv
1047.8 867.364 1047.05 868.115 1046.13 868.115 cv
cp
1046.13 862.388 mo
1043.89 862.388 1042.07 864.206 1042.07 866.444 cv
1042.07 868.256 1043.27 869.769 1044.91 870.292 cv
1044.91 871.331 1044.91 873.192 1044.91 873.715 cv
1044.34 874.182 1040.75 877.122 1040.31 877.477 cv
1039.69 877.477 1030.2 877.477 1029.5 877.477 cv
1029.03 877.012 1025.5 873.475 1025.04 873.012 cv
1025.04 872.387 1025.04 861.862 1025.04 858.604 cv
1026.64 858.604 li
1026.64 839.196 li
1021.08 839.196 li
1021.08 858.604 li
1023.15 858.604 li
1023.15 873.797 li
1028.71 879.358 li
1040.98 879.358 li
1046.79 874.606 li
1046.79 870.437 li
1048.72 870.112 1050.19 868.454 1050.19 866.444 cv
1050.19 864.206 1048.37 862.388 1046.13 862.388 cv
cp
f
1010.57 858.604 mo
1016.14 858.604 li
1016.14 839.196 li
1010.57 839.196 li
1010.57 858.604 li
cp
f
945.176 847.838 mo
919.126 847.838 li
919.126 847.838 902.057 864.911 901.522 865.444 cv
900.907 865.444 892.504 865.444 889.801 865.444 cv
889.801 863.696 li
872.612 863.696 li
872.612 869.426 li
889.801 869.426 li
889.801 867.328 li
902.3 867.328 li
902.3 867.328 919.367 850.255 919.906 849.723 cv
920.569 849.723 940.323 849.723 945.176 849.723 cv
945.176 858.604 li
950.745 858.604 li
950.745 839.196 li
945.176 839.196 li
945.176 847.838 li
cp
f
970.1 836.338 mo
958.094 824.329 li
919.814 824.329 li
919.814 824.329 910.084 834.968 909.553 835.549 cv
908.816 835.549 875.459 835.549 869.118 835.549 cv
869.118 827.738 li
863.546 827.738 li
863.546 847.151 li
869.118 847.151 li
869.118 837.434 li
910.382 837.434 li
910.382 837.434 920.115 826.795 920.644 826.215 cv
921.444 826.215 956.557 826.215 957.313 826.215 cv
957.826 826.725 967.704 836.606 968.22 837.117 cv
968.22 837.479 968.22 838.461 968.22 839.196 cv
966.493 839.196 li
966.493 858.604 li
972.063 858.604 li
972.063 839.196 li
970.1 839.196 li
970.1 836.338 li
cp
f
814.381 827.738 mo
808.811 827.738 li
808.811 847.151 li
814.381 847.151 li
814.381 827.738 li
cp
f
135.781 840.718 mo
136.703 840.718 137.453 841.468 137.453 842.391 cv
137.453 843.31 136.703 844.06 135.781 844.06 cv
134.861 844.06 134.112 843.31 134.112 842.391 cv
134.112 841.468 134.861 840.718 135.781 840.718 cv
cp
135.781 846.447 mo
137.605 846.447 139.135 845.229 139.645 843.567 cv
147.773 843.567 736.966 842.804 738.702 842.804 cv
738.702 844.417 738.702 855.452 738.702 855.452 cv
742.71 855.452 li
742.71 856.858 li
760.213 856.858 li
760.213 851.289 li
742.71 851.289 li
742.71 853.568 li
742.063 853.568 741.201 853.568 740.588 853.568 cv
740.588 851.952 740.588 840.914 740.588 840.914 cv
139.77 841.688 li
139.431 839.785 137.776 838.334 135.781 838.334 cv
133.547 838.334 131.727 840.158 131.727 842.391 cv
131.727 844.627 133.547 846.447 135.781 846.447 cv
cp
f
1003.6 833.856 mo
975.031 805.774 li
850.088 805.774 li
832.532 823.329 li
832.532 827.738 li
830.768 827.738 li
830.768 847.151 li
836.338 847.151 li
836.338 827.738 li
834.415 827.738 li
834.415 826.358 834.415 824.523 834.415 824.114 cv
834.938 823.584 850.341 808.183 850.866 807.659 cv
851.642 807.659 973.499 807.659 974.263 807.659 cv
974.795 808.183 1001.18 834.107 1001.72 834.646 cv
1001.72 835.173 1001.72 837.929 1001.72 839.196 cv
999.912 839.196 li
999.912 858.604 li
1005.48 858.604 li
1005.48 839.196 li
1003.6 839.196 li
1003.6 833.856 li
cp
f
992.18 835.623 mo
968.533 811.981 li
854.685 811.981 li
843.418 823.243 li
843.418 827.738 li
841.273 827.738 li
841.273 847.151 li
846.841 847.151 li
846.841 827.738 li
845.304 827.738 li
845.304 826.331 845.304 824.434 845.304 824.021 cv
845.81 823.512 854.952 814.374 855.462 813.863 cv
856.234 813.863 966.982 813.863 967.753 813.863 cv
968.285 814.394 989.763 835.871 990.294 836.403 cv
990.294 836.831 990.294 838.285 990.294 839.196 cv
988.772 839.196 li
988.772 858.604 li
994.342 858.604 li
994.342 839.196 li
992.18 839.196 li
992.18 835.623 li
cp
f
981.201 835.388 mo
964.298 818.484 li
860.291 818.484 li
854.488 824.282 li
854.488 827.738 li
852.568 827.738 li
852.568 847.151 li
858.136 847.151 li
858.136 827.738 li
856.372 827.738 li
856.372 826.679 856.372 825.426 856.372 825.065 cv
856.84 824.598 860.603 820.835 861.072 820.366 cv
861.843 820.366 962.747 820.366 963.518 820.366 cv
964.042 820.89 978.791 835.64 979.313 836.167 cv
979.313 836.583 979.313 838.146 979.313 839.196 cv
977.792 839.196 li
977.792 858.604 li
983.362 858.604 li
983.362 839.196 li
981.201 839.196 li
981.201 835.388 li
cp
f
367.78 855.354 mo
366.857 855.354 366.109 854.606 366.109 853.681 cv
366.109 852.761 366.857 852.015 367.78 852.015 cv
368.7 852.015 369.453 852.761 369.453 853.681 cv
369.453 854.606 368.7 855.354 367.78 855.354 cv
cp
696.565 852.602 mo
697.487 852.602 698.237 853.351 698.237 854.271 cv
698.237 855.194 697.487 855.943 696.565 855.943 cv
695.643 855.943 694.894 855.194 694.894 854.271 cv
694.894 853.351 695.643 852.602 696.565 852.602 cv
cp
692.629 855.21 mo
693.056 856.994 694.655 858.329 696.565 858.329 cv
698.804 858.329 700.621 856.508 700.621 854.271 cv
700.621 852.033 698.804 850.213 696.565 850.213 cv
694.655 850.213 693.056 851.547 692.629 853.33 cv
384.183 853.056 li
384.183 853.019 li
378.382 853.019 373.747 853.019 371.77 853.019 cv
371.45 851.101 369.788 849.625 367.78 849.625 cv
365.539 849.625 363.722 851.448 363.722 853.681 cv
363.722 855.922 365.539 857.742 367.78 857.742 cv
369.587 857.742 371.106 856.544 371.63 854.904 cv
381.324 854.904 li
381.324 854.931 li
692.629 855.21 li
cp
f
219.446 822.579 mo
220.37 822.579 221.117 823.329 221.117 824.254 cv
221.117 825.17 220.37 825.919 219.446 825.919 cv
218.526 825.919 217.778 825.17 217.778 824.254 cv
217.778 823.329 218.526 822.579 219.446 822.579 cv
cp
219.446 828.31 mo
221.045 828.31 222.413 827.374 223.076 826.028 cv
751.447 825.26 li
751.447 825.26 751.447 820.848 751.447 819.53 cv
753.225 819.53 797.076 819.53 798.85 819.53 cv
798.85 820.665 798.85 825.268 798.85 827.738 cv
797.289 827.738 li
797.289 847.151 li
802.859 847.151 li
802.859 827.738 li
800.735 827.738 li
800.735 817.649 li
749.565 817.649 li
749.565 817.649 749.565 822.062 749.565 823.374 cv
747.86 823.374 232.283 824.146 223.493 824.146 cv
223.436 821.956 221.646 820.193 219.446 820.193 cv
217.21 820.193 215.39 822.017 215.39 824.254 cv
215.39 826.491 217.21 828.31 219.446 828.31 cv
cp
f
209.185 828.55 mo
210.106 828.55 210.854 829.296 210.854 830.218 cv
210.854 831.139 210.106 831.89 209.185 831.89 cv
208.264 831.89 207.514 831.139 207.514 830.218 cv
207.514 829.296 208.264 828.55 209.185 828.55 cv
cp
209.185 834.276 mo
211.141 834.276 212.779 832.887 213.157 831.038 cv
756.339 830.273 li
756.339 830.273 756.339 826.609 756.339 825.375 cv
757.992 825.375 775.239 825.375 776.894 825.375 cv
776.894 825.977 776.894 826.918 776.894 827.738 cv
775.172 827.738 li
775.172 847.151 li
780.742 847.151 li
780.742 827.738 li
778.774 827.738 li
778.774 823.493 li
754.457 823.493 li
754.457 823.493 754.457 827.161 754.457 828.388 cv
752.711 828.388 221.054 829.157 213.081 829.157 cv
212.613 827.44 211.053 826.159 209.185 826.159 cv
206.945 826.159 205.127 827.983 205.127 830.218 cv
205.127 832.453 206.945 834.276 209.185 834.276 cv
cp
f
770.083 847.151 mo
770.083 827.738 li
764.513 827.738 li
764.513 835.43 li
739.711 835.491 li
739.711 837.373 li
764.513 837.315 li
764.513 847.151 li
770.083 847.151 li
cp
f
509.8 815.862 mo
510.72 815.862 511.472 816.614 511.472 817.533 cv
511.472 818.455 510.72 819.203 509.8 819.203 cv
508.875 819.203 508.127 818.455 508.127 817.533 cv
508.127 816.614 508.875 815.862 509.8 815.862 cv
cp
718.047 816.084 mo
718.969 816.084 719.717 816.831 719.717 817.756 cv
719.717 818.676 718.969 819.426 718.047 819.426 cv
717.125 819.426 716.378 818.676 716.378 817.756 cv
716.378 816.831 717.125 816.084 718.047 816.084 cv
cp
509.8 821.592 mo
511.607 821.592 513.128 820.39 513.647 818.753 cv
523.852 818.753 li
523.852 818.782 li
714.147 818.815 li
714.616 820.532 716.18 821.81 718.047 821.81 cv
720.286 821.81 722.105 819.988 722.105 817.756 cv
722.105 815.801 720.711 814.161 718.866 813.781 cv
718.866 808.966 li
720.909 808.966 li
720.909 795.914 li
713.909 795.914 li
713.909 808.966 li
716.983 808.966 li
716.983 813.858 li
715.525 814.255 714.381 815.433 714.075 816.93 cv
526.202 816.901 li
526.202 816.868 li
520.401 816.868 515.771 816.868 513.789 816.868 cv
513.47 814.951 511.808 813.476 509.8 813.476 cv
507.559 813.476 505.74 815.298 505.74 817.533 cv
505.74 819.771 507.559 821.592 509.8 821.592 cv
cp
f
802.25 105.44 mo
802.25 106.356 801.497 107.113 800.577 107.113 cv
799.657 107.113 798.909 106.356 798.909 105.44 cv
798.909 104.516 799.657 103.768 800.577 103.768 cv
801.497 103.768 802.25 104.516 802.25 105.44 cv
cp
698.904 99.4697 mo
698.904 100.394 698.155 101.143 697.233 101.143 cv
696.311 101.143 695.56 100.394 695.56 99.4697 cv
695.56 98.5493 696.311 97.7969 697.233 97.7969 cv
698.155 97.7969 698.904 98.5493 698.904 99.4697 cv
cp
165.536 88.0112 mo
165.536 88.9351 164.787 89.6836 163.865 89.6836 cv
162.942 89.6836 162.192 88.9351 162.192 88.0112 cv
162.192 87.0952 162.942 86.3423 163.865 86.3423 cv
164.787 86.3423 165.536 87.0952 165.536 88.0112 cv
cp
804.637 105.44 mo
804.637 103.201 802.816 101.379 800.577 101.379 cv
798.874 101.379 797.42 102.438 796.819 103.931 cv
790.505 103.931 752.713 103.931 752.012 103.931 cv
751.513 103.432 746.434 98.3491 746.434 98.3491 cv
721.659 98.3491 li
721.659 97.1221 li
709.723 97.1221 li
709.723 98.3491 li
701.114 98.3491 li
700.621 96.6621 699.078 95.4126 697.233 95.4126 cv
695.386 95.4126 693.84 96.6621 693.352 98.3491 cv
686.464 98.3491 627.047 98.3491 626.319 98.3491 cv
625.795 97.8257 615.041 87.0742 615.041 87.0742 cv
615.041 87.0742 169.833 87.353 167.856 87.353 cv
167.535 85.4307 165.875 83.9546 163.865 83.9546 cv
161.626 83.9546 159.809 85.7783 159.809 88.0112 cv
159.809 90.252 161.626 92.0737 163.865 92.0737 cv
165.673 92.0737 167.192 90.8779 167.716 89.2339 cv
167.811 89.2339 li
167.811 89.2788 li
184.155 89.2788 613.552 88.96 614.262 88.96 cv
614.787 89.4834 625.538 100.232 625.538 100.232 cv
693.253 100.232 li
693.613 102.107 695.259 103.528 697.233 103.528 cv
699.209 103.528 700.852 102.107 701.209 100.232 cv
702.582 100.232 705.72 100.232 709.723 100.232 cv
709.723 102.537 li
721.659 102.537 li
721.659 100.232 li
733.211 100.232 745.252 100.232 745.652 100.232 cv
746.149 100.733 751.23 105.814 751.23 105.814 cv
796.56 105.814 li
796.754 107.869 798.472 109.497 800.577 109.497 cv
802.816 109.497 804.637 107.677 804.637 105.44 cv
cp
f
162.192 112.343 mo
162.192 111.423 162.942 110.674 163.865 110.674 cv
164.787 110.674 165.536 111.423 165.536 112.343 cv
165.536 113.265 164.787 114.012 163.865 114.012 cv
162.942 114.012 162.192 113.265 162.192 112.343 cv
cp
865.976 211.168 mo
866.896 211.168 867.648 211.92 867.648 212.84 cv
867.648 213.765 866.896 214.513 865.976 214.513 cv
865.056 214.513 864.303 213.765 864.303 212.84 cv
864.303 211.92 865.056 211.168 865.976 211.168 cv
cp
159.809 112.343 mo
159.809 114.58 161.626 116.404 163.865 116.404 cv
165.673 116.404 167.192 115.206 167.716 113.562 cv
167.811 113.562 li
167.811 113.623 li
189.949 113.623 619.898 113.3 620.586 113.3 cv
621.119 113.831 637.352 130.067 637.352 130.067 cv
637.352 130.067 677.102 130.067 677.866 130.067 cv
678.373 130.578 684.401 136.602 684.401 136.602 cv
684.401 136.602 819.618 136.602 821.477 136.602 cv
821.477 138.343 821.477 160.799 821.477 160.799 cv
821.477 160.799 849.671 160.799 850.43 160.799 cv
850.953 161.32 864.573 174.94 865.092 175.46 cv
865.092 176.154 865.092 204.024 865.092 208.89 cv
863.281 209.293 861.917 210.91 861.917 212.84 cv
861.917 215.077 863.738 216.898 865.976 216.898 cv
868.213 216.898 870.034 215.077 870.034 212.84 cv
870.034 210.951 868.727 209.373 866.977 208.923 cv
866.977 174.682 li
851.207 158.914 li
851.207 158.914 825.122 158.914 823.359 158.914 cv
823.359 157.171 823.359 134.72 823.359 134.72 cv
823.359 134.72 685.955 134.72 685.182 134.72 cv
684.677 134.211 678.647 128.186 678.647 128.186 cv
678.647 128.186 638.898 128.186 638.133 128.186 cv
637.602 127.65 621.367 111.419 621.367 111.419 cv
621.367 111.419 169.833 111.681 167.856 111.681 cv
167.535 109.759 165.875 108.287 163.865 108.287 cv
161.626 108.287 159.809 110.11 159.809 112.343 cv
cp
f
489.504 161.952 mo
490.14 161.285 491.201 161.261 491.867 161.899 cv
492.534 162.537 492.557 163.596 491.921 164.258 cv
491.283 164.925 490.224 164.95 489.557 164.315 cv
488.893 163.677 488.866 162.618 489.504 161.952 cv
cp
542.333 123.814 mo
542.333 122.894 543.083 122.146 544.003 122.146 cv
544.926 122.146 545.672 122.894 545.672 123.814 cv
545.672 124.738 544.926 125.486 544.003 125.486 cv
543.083 125.486 542.333 124.738 542.333 123.814 cv
cp
618.949 124.055 mo
618.949 123.133 619.697 122.382 620.618 122.382 cv
621.539 122.382 622.291 123.133 622.291 124.055 cv
622.291 124.978 621.539 125.724 620.618 125.724 cv
619.697 125.724 618.949 124.978 618.949 124.055 cv
cp
722.055 141.715 mo
722.055 140.793 722.806 140.047 723.726 140.047 cv
724.646 140.047 725.397 140.793 725.397 141.715 cv
725.397 142.637 724.646 143.386 723.726 143.386 cv
722.806 143.386 722.055 142.637 722.055 141.715 cv
cp
487.909 166.037 mo
489.523 167.587 492.099 167.53 493.644 165.906 cv
494.894 164.602 495.077 162.676 494.256 161.167 cv
502.927 152.094 li
502.915 152.08 li
509.832 144.858 528.524 125.339 528.973 124.877 cv
529.588 124.877 537.362 124.877 540.102 124.877 cv
540.574 126.599 542.139 127.875 544.003 127.875 cv
545.844 127.875 547.381 126.636 547.878 124.955 cv
616.668 124.955 li
617.082 126.758 618.693 128.112 620.618 128.112 cv
621.065 128.112 621.484 128.022 621.886 127.887 cv
636.616 142.617 li
719.779 142.617 li
720.19 144.42 721.799 145.77 723.726 145.77 cv
725.962 145.77 727.784 143.954 727.784 141.715 cv
727.784 139.477 725.962 137.661 723.726 137.661 cv
721.827 137.661 720.241 138.974 719.799 140.732 cv
710.859 140.732 638.121 140.732 637.397 140.732 cv
636.947 140.29 626.761 130.097 623.53 126.869 cv
624.237 126.137 624.676 125.147 624.676 124.055 cv
624.676 121.818 622.855 119.995 620.618 119.995 cv
618.721 119.995 617.137 121.312 616.692 123.074 cv
547.986 123.074 li
547.637 121.188 545.987 119.757 544.003 119.757 cv
542.047 119.757 540.409 121.148 540.028 122.992 cv
528.165 122.992 li
500.681 151.691 li
500.681 151.72 li
497.092 155.474 494.256 158.439 492.99 159.764 cv
491.381 158.669 489.169 158.852 487.778 160.304 cv
486.23 161.919 486.292 164.493 487.909 166.037 cv
cp
f
683.598 304.877 mo
683.598 303.957 684.348 303.205 685.268 303.205 cv
686.192 303.205 686.94 303.957 686.94 304.877 cv
686.94 305.801 686.192 306.55 685.268 306.55 cv
684.348 306.55 683.598 305.801 683.598 304.877 cv
cp
836.83 286.737 mo
836.83 285.818 837.579 285.064 838.499 285.064 cv
839.419 285.064 840.171 285.818 840.171 286.737 cv
840.171 287.661 839.419 288.409 838.499 288.409 cv
837.579 288.409 836.83 287.661 836.83 286.737 cv
cp
974.305 332.8 mo
975.225 332.8 975.977 333.552 975.977 334.472 cv
975.977 335.392 975.225 336.145 974.305 336.145 cv
973.384 336.145 972.634 335.392 972.634 334.472 cv
972.634 333.552 973.384 332.8 974.305 332.8 cv
cp
643.501 304.877 mo
643.501 305.801 642.75 306.55 641.83 306.55 cv
640.907 306.55 640.162 305.801 640.162 304.877 cv
640.162 303.957 640.907 303.205 641.83 303.205 cv
642.75 303.205 643.501 303.957 643.501 304.877 cv
cp
645.703 306.018 mo
681.396 306.018 li
681.894 307.699 683.433 308.934 685.268 308.934 cv
686.036 308.934 686.748 308.709 687.357 308.337 cv
696.732 317.71 li
696.732 317.71 771.938 317.71 772.712 317.71 cv
773.212 318.213 778.879 323.876 778.879 323.876 cv
816.771 323.876 li
816.771 323.876 821.468 319.182 821.961 318.687 cv
822.647 318.687 828.226 318.687 828.226 318.687 cv
832.61 314.303 li
845.181 314.303 li
845.181 296.96 li
838.963 296.96 li
838.963 290.748 li
840.595 290.556 841.921 289.411 842.373 287.877 cv
853.932 287.877 li
853.932 295.052 li
864.753 295.052 li
864.753 282.32 li
861.238 282.32 li
861.238 280.361 861.238 276.713 861.238 275.625 cv
862.959 275.625 889.301 275.625 891.021 275.625 cv
891.021 277.359 891.021 298.857 891.021 298.857 cv
962.363 298.857 li
962.363 298.857 967.986 293.234 968.486 292.731 cv
969.256 292.731 1032.58 292.731 1033.34 292.731 cv
1033.81 293.193 1037.3 296.69 1037.77 297.152 cv
1037.77 297.602 1037.77 299.634 1037.77 300.937 cv
1035.33 300.937 li
1035.33 313.988 li
1038.21 313.988 li
1038.21 322.736 li
1036.92 322.736 li
1036.92 326.727 li
973.124 326.727 li
973.124 330.612 li
971.466 331.123 970.249 332.648 970.249 334.472 cv
970.249 336.709 972.067 338.529 974.305 338.529 cv
976.542 338.529 978.365 336.709 978.365 334.472 cv
978.365 332.48 976.909 330.82 975.008 330.485 cv
975.008 329.897 975.008 329.16 975.008 328.612 cv
976.68 328.612 1028.15 328.612 1036.92 328.612 cv
1036.92 335.785 li
1043.92 335.785 li
1043.92 322.736 li
1040.09 322.736 li
1040.09 313.988 li
1042.33 313.988 li
1042.33 300.937 li
1039.65 300.937 li
1039.65 296.373 li
1034.12 290.85 li
967.71 290.85 li
967.71 290.85 962.086 296.474 961.582 296.976 cv
960.821 296.976 894.726 296.976 892.904 296.976 cv
892.904 295.238 892.904 273.745 892.904 273.745 cv
859.356 273.745 li
859.356 282.32 li
853.932 282.32 li
853.932 285.992 li
842.481 285.992 li
842.13 284.111 840.482 282.68 838.499 282.68 cv
836.262 282.68 834.441 284.5 834.441 286.737 cv
834.441 288.474 835.542 289.944 837.077 290.523 cv
837.077 296.96 li
831.338 296.96 li
831.338 312.913 li
830.128 314.123 827.81 316.442 827.448 316.806 cv
826.762 316.806 821.184 316.806 821.184 316.806 cv
821.184 316.806 816.485 321.496 815.99 321.996 cv
815.233 321.996 780.415 321.996 779.657 321.996 cv
779.155 321.493 773.493 315.829 773.493 315.829 cv
773.493 315.829 698.286 315.829 697.512 315.829 cv
697.069 315.385 690.605 308.922 688.698 307.016 cv
689.092 306.394 689.329 305.666 689.329 304.877 cv
689.329 302.638 687.505 300.816 685.268 300.816 cv
683.285 300.816 681.637 302.252 681.285 304.133 cv
645.81 304.133 li
645.464 302.252 643.813 300.816 641.83 300.816 cv
639.593 300.816 637.773 302.638 637.773 304.877 cv
637.773 307.114 639.593 308.934 641.83 308.934 cv
643.671 308.934 645.208 307.699 645.703 306.018 cv
cp
f
724.175 312.516 mo
723.25 312.516 722.505 311.764 722.505 310.844 cv
722.505 309.923 723.25 309.171 724.175 309.171 cv
725.093 309.171 725.848 309.923 725.848 310.844 cv
725.848 311.764 725.093 312.516 724.175 312.516 cv
cp
724.175 314.9 mo
726.411 314.9 728.232 313.081 728.232 310.844 cv
728.232 308.606 726.411 306.787 724.175 306.787 cv
722.921 306.787 721.819 307.368 721.071 308.259 cv
709.452 308.259 li
709.452 313.673 li
721.271 313.673 li
722.008 314.426 723.036 314.9 724.175 314.9 cv
cp
f
1051.63 351.182 mo
1051.63 352.098 1050.89 352.846 1049.97 352.846 cv
1049.04 352.846 1048.29 352.098 1048.29 351.182 cv
1048.29 350.258 1049.04 349.509 1049.97 349.509 cv
1050.89 349.509 1051.63 350.258 1051.63 351.182 cv
cp
1047.53 354.404 mo
1046.46 354.404 li
1046.46 367.451 li
1053.47 367.451 li
1053.47 354.404 li
1052.4 354.404 li
1053.38 353.66 1054.02 352.494 1054.02 351.182 cv
1054.02 348.944 1052.2 347.119 1049.97 347.119 cv
1047.73 347.119 1045.91 348.944 1045.91 351.182 cv
1045.91 352.494 1046.55 353.66 1047.53 354.404 cv
cp
f
1040.66 351.182 mo
1040.66 352.098 1039.91 352.846 1038.99 352.846 cv
1038.06 352.846 1037.31 352.098 1037.31 351.182 cv
1037.31 350.258 1038.06 349.509 1038.99 349.509 cv
1039.91 349.509 1040.66 350.258 1040.66 351.182 cv
cp
1036.55 354.404 mo
1035.65 354.404 li
1035.65 367.451 li
1042.65 367.451 li
1042.65 354.404 li
1041.42 354.404 li
1042.4 353.66 1043.04 352.494 1043.04 351.182 cv
1043.04 348.944 1041.22 347.119 1038.99 347.119 cv
1036.75 347.119 1034.93 348.944 1034.93 351.182 cv
1034.93 352.494 1035.57 353.66 1036.55 354.404 cv
cp
f
1030.15 351.182 mo
1030.15 352.098 1029.41 352.846 1028.48 352.846 cv
1027.56 352.846 1026.81 352.098 1026.81 351.182 cv
1026.81 350.258 1027.56 349.509 1028.48 349.509 cv
1029.41 349.509 1030.15 350.258 1030.15 351.182 cv
cp
1026.04 354.404 mo
1024.66 354.404 li
1024.66 367.451 li
1031.67 367.451 li
1031.67 354.404 li
1030.92 354.404 li
1031.9 353.66 1032.54 352.494 1032.54 351.182 cv
1032.54 348.944 1030.72 347.119 1028.48 347.119 cv
1026.25 347.119 1024.43 348.944 1024.43 351.182 cv
1024.43 352.494 1025.07 353.66 1026.04 354.404 cv
cp
f
947.098 348.078 mo
946.173 348.078 945.423 347.33 945.423 346.405 cv
945.423 345.485 946.173 344.734 947.098 344.734 cv
948.018 344.734 948.767 345.485 948.767 346.405 cv
948.767 347.33 948.018 348.078 947.098 348.078 cv
cp
947.098 350.462 mo
949.334 350.462 951.153 348.647 951.153 346.405 cv
951.153 344.168 949.334 342.348 947.098 342.348 cv
944.86 342.348 943.039 344.168 943.039 346.405 cv
943.039 348.647 944.86 350.462 947.098 350.462 cv
cp
f
869.049 364.546 mo
869.049 363.622 869.797 362.875 870.721 362.875 cv
871.642 362.875 872.39 363.622 872.39 364.546 cv
872.39 365.466 871.642 366.218 870.721 366.218 cv
869.797 366.218 869.049 365.466 869.049 364.546 cv
cp
890.768 364.546 mo
890.768 363.622 891.519 362.875 892.438 362.875 cv
893.362 362.875 894.11 363.622 894.11 364.546 cv
894.11 365.466 893.362 366.218 892.438 366.218 cv
891.519 366.218 890.768 365.466 890.768 364.546 cv
cp
983.853 333.994 mo
983.853 333.073 984.601 332.325 985.523 332.325 cv
986.443 332.325 987.194 333.073 987.194 333.994 cv
987.194 334.918 986.443 335.664 985.523 335.664 cv
984.601 335.664 983.853 334.918 983.853 333.994 cv
cp
1010.58 333.994 mo
1010.58 333.073 1011.33 332.325 1012.25 332.325 cv
1013.18 332.325 1013.92 333.073 1013.92 333.994 cv
1013.92 334.918 1013.18 335.664 1012.25 335.664 cv
1011.33 335.664 1010.58 334.918 1010.58 333.994 cv
cp
870.721 368.603 mo
872.441 368.603 873.906 367.519 874.496 366.002 cv
888.666 366.002 li
889.179 367.335 890.368 368.312 891.816 368.537 cv
891.816 371.414 li
974.529 371.414 li
974.529 367.451 li
977.724 367.451 li
977.724 354.404 li
974.611 354.404 li
974.611 351.861 974.611 346.352 974.611 345.8 cv
975.057 345.358 981.336 339.077 983.145 337.266 cv
983.816 337.756 984.633 338.055 985.523 338.055 cv
987.303 338.055 988.801 336.893 989.345 335.296 cv
1008.43 335.296 li
1008.97 336.893 1010.47 338.055 1012.25 338.055 cv
1014.49 338.055 1016.31 336.23 1016.31 333.994 cv
1016.31 331.757 1014.49 329.937 1012.25 329.937 cv
1010.22 329.937 1008.54 331.45 1008.25 333.409 cv
989.52 333.409 li
989.235 331.45 987.56 329.937 985.523 329.937 cv
983.284 329.937 981.465 331.757 981.465 333.994 cv
981.465 334.66 981.641 335.274 981.923 335.826 cv
972.726 345.021 li
972.726 354.404 li
970.726 354.404 li
970.726 367.451 li
972.647 367.451 li
972.647 368.12 972.647 368.95 972.647 369.531 cv
970.828 369.531 895.517 369.531 893.702 369.531 cv
893.702 369.153 893.702 368.733 893.702 368.381 cv
895.317 367.85 896.497 366.341 896.497 364.546 cv
896.497 362.632 895.166 361.037 893.383 360.612 cv
893.383 360.137 893.383 359.6 893.383 359.164 cv
894.534 359.164 898.4 359.164 900.077 359.164 cv
900.077 367.768 li
907.078 367.768 li
907.078 355.356 li
900.077 355.356 li
900.077 357.279 li
891.498 357.279 li
891.498 360.612 li
889.852 361.004 888.606 362.403 888.423 364.121 cv
874.735 364.121 li
874.518 362.088 872.81 360.489 870.721 360.489 cv
868.486 360.489 866.662 362.309 866.662 364.546 cv
866.662 366.787 868.486 368.603 870.721 368.603 cv
cp
f
1060.94 311.563 mo
1060.02 311.563 1059.27 310.809 1059.27 309.891 cv
1059.27 308.966 1060.02 308.218 1060.94 308.218 cv
1061.87 308.218 1062.62 308.966 1062.62 309.891 cv
1062.62 310.809 1061.87 311.563 1060.94 311.563 cv
cp
1060.94 313.947 mo
1063.18 313.947 1065 312.128 1065 309.891 cv
1065 307.654 1063.18 305.834 1060.94 305.834 cv
1058.71 305.834 1056.89 307.654 1056.89 309.891 cv
1056.89 312.128 1058.71 313.947 1060.94 313.947 cv
cp
f
821.793 306.787 mo
820.873 306.787 820.121 306.035 820.121 305.116 cv
820.121 304.194 820.873 303.446 821.793 303.446 cv
822.713 303.446 823.464 304.194 823.464 305.116 cv
823.464 306.035 822.713 306.787 821.793 306.787 cv
cp
770.874 313.351 mo
770.874 312.741 li
774.06 312.741 783.048 312.741 783.651 312.741 cv
784.146 313.234 788.784 317.871 788.784 317.871 cv
810.965 317.871 li
820.063 308.77 li
820.59 309.024 821.172 309.171 821.793 309.171 cv
824.027 309.171 825.851 307.352 825.851 305.116 cv
825.851 302.877 824.027 301.061 821.793 301.061 cv
819.556 301.061 817.732 302.877 817.732 305.116 cv
817.732 306.046 818.063 306.893 818.589 307.581 cv
816.448 309.723 810.607 315.566 810.185 315.988 cv
809.447 315.988 790.301 315.988 789.564 315.988 cv
789.069 315.498 784.433 310.855 784.433 310.855 cv
770.874 310.855 li
770.874 307.94 li
758.62 307.94 li
758.62 313.351 li
770.874 313.351 li
cp
f
721.391 319.877 mo
721.391 325.285 li
709.452 325.285 li
709.452 319.877 li
721.391 319.877 li
cp
f
885.758 316.053 mo
882.243 316.053 li
882.243 324.805 li
884.008 324.805 li
884.008 337.535 li
875.255 337.535 li
875.255 324.805 li
880.362 324.805 li
880.362 316.053 li
874.938 316.053 li
874.938 303.325 li
885.758 303.325 li
885.758 316.053 li
cp
f
959.509 304.399 mo
959.509 305.319 958.756 306.067 957.836 306.067 cv
956.916 306.067 956.164 305.319 956.164 304.399 cv
956.164 303.478 956.916 302.73 957.836 302.73 cv
958.756 302.73 959.509 303.478 959.509 304.399 cv
cp
970.884 300.937 mo
970.884 303.814 li
961.834 303.814 li
961.547 301.855 959.873 300.342 957.836 300.342 cv
955.602 300.342 953.777 302.158 953.777 304.399 cv
953.777 306.308 955.108 307.911 956.895 308.337 cv
956.895 317.804 li
951.313 317.804 li
951.313 330.375 li
963.725 330.375 li
963.725 317.804 li
958.78 317.804 li
958.78 308.332 li
960.134 308.01 961.214 307.003 961.659 305.699 cv
970.884 305.699 li
970.884 313.988 li
977.887 313.988 li
977.887 300.937 li
970.884 300.937 li
cp
f
981.704 313.988 mo
981.704 300.937 li
988.703 300.937 li
988.703 313.988 li
981.704 313.988 li
cp
f
997.495 316.571 mo
997.495 317.493 996.747 318.241 995.827 318.241 cv
994.902 318.241 994.154 317.493 994.154 316.571 cv
994.154 315.648 994.902 314.9 995.827 314.9 cv
996.747 314.9 997.495 315.648 997.495 316.571 cv
cp
999.884 316.571 mo
999.884 315.583 999.516 314.692 998.927 313.988 cv
999.323 313.988 li
999.323 300.937 li
992.322 300.937 li
992.322 313.988 li
992.724 313.988 li
992.134 314.692 991.769 315.583 991.769 316.571 cv
991.769 318.81 993.59 320.63 995.827 320.63 cv
998.061 320.63 999.884 318.81 999.884 316.571 cv
cp
f
1002.87 313.988 mo
1002.87 300.937 li
1009.87 300.937 li
1009.87 313.988 li
1002.87 313.988 li
cp
f
1013.37 313.988 mo
1013.37 300.937 li
1020.37 300.937 li
1020.37 313.988 li
1013.37 313.988 li
cp
f
1029.96 316.571 mo
1029.96 317.493 1029.21 318.241 1028.28 318.241 cv
1027.36 318.241 1026.61 317.493 1026.61 316.571 cv
1026.61 315.648 1027.36 314.9 1028.28 314.9 cv
1029.21 314.9 1029.96 315.648 1029.96 316.571 cv
cp
1032.34 316.571 mo
1032.34 315.583 1031.97 314.692 1031.39 313.988 cv
1031.79 313.988 li
1031.79 300.937 li
1024.79 300.937 li
1024.79 313.988 li
1025.18 313.988 li
1024.6 314.692 1024.23 315.583 1024.23 316.571 cv
1024.23 318.81 1026.05 320.63 1028.28 320.63 cv
1030.52 320.63 1032.34 318.81 1032.34 316.571 cv
cp
f
1048.22 316.571 mo
1048.22 315.648 1048.96 314.9 1049.89 314.9 cv
1050.81 314.9 1051.56 315.648 1051.56 316.571 cv
1051.56 317.493 1050.81 318.241 1049.89 318.241 cv
1048.96 318.241 1048.22 317.493 1048.22 316.571 cv
cp
1046.79 313.988 mo
1046.2 314.692 1045.83 315.583 1045.83 316.571 cv
1045.83 318.81 1047.65 320.63 1049.89 320.63 cv
1052.12 320.63 1053.94 318.81 1053.94 316.571 cv
1053.94 315.583 1053.57 314.692 1052.99 313.988 cv
1053.39 313.988 li
1053.39 300.937 li
1046.39 300.937 li
1046.39 313.988 li
1046.79 313.988 li
cp
f
1016.41 354.404 mo
1016.41 344.152 li
1052.18 344.152 li
1060.77 352.74 li
1060.77 352.74 1060.77 367.686 1060.77 369.371 cv
1061.64 369.371 1063.83 369.371 1065.44 369.371 cv
1065.44 371.257 li
1058.89 371.257 li
1058.89 371.257 1058.89 354.265 1058.89 353.521 cv
1058.39 353.022 1051.9 346.536 1051.41 346.035 cv
1050.66 346.035 1020.05 346.035 1018.29 346.035 cv
1018.29 347.231 1018.29 352.167 1018.29 354.404 cv
1020.53 354.404 li
1020.53 367.451 li
1013.53 367.451 li
1013.53 354.404 li
1016.41 354.404 li
cp
f
1004.62 369.796 mo
1004.62 368.873 1005.37 368.124 1006.29 368.124 cv
1007.21 368.124 1007.96 368.873 1007.96 369.796 cv
1007.96 370.719 1007.21 371.465 1006.29 371.465 cv
1005.37 371.465 1004.62 370.719 1004.62 369.796 cv
cp
1002.55 367.451 mo
1002.99 367.451 li
1002.52 368.116 1002.23 368.918 1002.23 369.796 cv
1002.23 372.033 1004.05 373.851 1006.29 373.851 cv
1008.53 373.851 1010.34 372.033 1010.34 369.796 cv
1010.34 368.901 1010.04 368.079 1009.55 367.409 cv
1009.55 354.404 li
1002.55 354.404 li
1002.55 367.451 li
cp
f
951.313 339.286 mo
963.725 339.286 li
963.725 351.856 li
951.313 351.856 li
951.313 339.286 li
cp
f
907.078 301.892 mo
907.078 314.303 li
900.077 314.303 li
900.077 301.892 li
907.078 301.892 li
cp
f
955.926 364.067 mo
955.926 363.147 956.675 362.395 957.599 362.395 cv
958.518 362.395 959.268 363.147 959.268 364.067 cv
959.268 364.992 958.518 365.74 957.599 365.74 cv
956.675 365.74 955.926 364.992 955.926 364.067 cv
cp
939.061 367.768 mo
939.061 360.117 li
939.7 360.117 940.428 360.117 940.738 360.117 cv
941.234 360.612 946.151 365.527 946.151 365.527 cv
953.824 365.527 li
954.411 367.043 955.875 368.124 957.599 368.124 cv
959.833 368.124 961.656 366.304 961.656 364.067 cv
961.656 361.831 959.833 360.01 957.599 360.01 cv
955.508 360.01 953.798 361.605 953.581 363.645 cv
951.422 363.645 947.443 363.645 946.93 363.645 cv
946.435 363.143 941.519 358.236 941.519 358.236 cv
939.061 358.236 li
939.061 355.356 li
932.06 355.356 li
932.06 367.768 li
939.061 367.768 li
cp
f
758.62 302.211 mo
758.62 296.805 li
770.874 296.805 li
770.874 298.481 li
771.188 298.481 771.489 298.481 771.678 298.481 cv
772.181 297.982 777.963 292.2 777.963 292.2 cv
777.963 292.2 819.781 292.2 820.59 292.2 cv
821.134 291.615 842.702 268.49 842.702 268.49 cv
909.252 268.49 li
909.252 268.49 909.252 280.921 909.252 281.657 cv
909.706 282.107 912.742 285.144 913.194 285.6 cv
913.954 285.6 950.721 285.6 951.477 285.6 cv
952.005 285.076 962.694 274.382 962.694 274.382 cv
1045.19 274.382 li
1045.19 269.593 li
1053.94 269.593 li
1053.94 280.893 li
1045.19 280.893 li
1045.19 276.263 li
1034.84 276.263 964.19 276.263 963.476 276.263 cv
962.952 276.789 952.26 287.48 952.26 287.48 cv
912.415 287.48 li
907.371 282.435 li
907.371 282.435 907.371 271.988 907.371 270.375 cv
905.548 270.375 844.32 270.375 843.521 270.375 cv
842.977 270.96 821.407 294.081 821.407 294.081 cv
821.407 294.081 779.513 294.081 778.744 294.081 cv
778.241 294.592 772.458 300.371 772.458 300.371 cv
770.874 300.371 li
770.874 302.211 li
758.62 302.211 li
cp
f
972.394 286.499 mo
972.394 285.579 973.144 284.827 974.067 284.827 cv
974.989 284.827 975.735 285.579 975.735 286.499 cv
975.735 287.419 974.989 288.168 974.067 288.168 cv
973.144 288.168 972.394 287.419 972.394 286.499 cv
cp
970.011 286.499 mo
970.011 288.736 971.828 290.556 974.067 290.556 cv
975.815 290.556 977.298 289.435 977.866 287.877 cv
985.108 287.877 1032.08 287.877 1032.84 287.877 cv
1033.37 288.466 1043.18 299.336 1043.18 299.336 cv
1065.44 299.336 li
1065.44 297.447 li
1059.19 297.447 1044.65 297.447 1044.02 297.447 cv
1043.49 296.866 1033.68 285.992 1033.68 285.992 cv
978.072 285.992 li
977.821 283.997 976.132 282.439 974.067 282.439 cv
971.828 282.439 970.011 284.263 970.011 286.499 cv
cp
f
901.269 286.976 mo
901.269 286.054 902.019 285.305 902.939 285.305 cv
903.862 285.305 904.612 286.054 904.612 286.976 cv
904.612 287.896 903.862 288.646 902.939 288.646 cv
902.019 288.646 901.269 287.896 901.269 286.976 cv
cp
898.881 286.976 mo
898.881 289.214 900.703 291.03 902.939 291.03 cv
903.75 291.03 904.502 290.789 905.132 290.384 cv
908.598 293.844 li
957.35 293.844 li
957.35 293.844 969.948 281.249 970.477 280.717 cv
971.246 280.717 1037.03 280.717 1037.8 280.717 cv
1038.31 281.228 1044.96 287.877 1044.96 287.877 cv
1065.44 287.877 li
1065.44 285.992 li
1059.89 285.992 1046.34 285.992 1045.74 285.992 cv
1045.23 285.485 1038.58 278.836 1038.58 278.836 cv
969.698 278.836 li
969.698 278.836 957.101 291.431 956.57 291.96 cv
955.811 291.96 910.141 291.96 909.377 291.96 cv
909.046 291.627 907.397 289.979 906.431 289.014 cv
906.78 288.413 906.998 287.722 906.998 286.976 cv
906.998 284.741 905.181 282.919 902.939 282.919 cv
900.703 282.919 898.881 284.741 898.881 286.976 cv
cp
f
933.731 322.777 mo
933.731 321.854 934.479 321.106 935.399 321.106 cv
936.323 321.106 937.07 321.854 937.07 322.777 cv
937.07 323.697 936.323 324.449 935.399 324.449 cv
934.479 324.449 933.731 323.697 933.731 322.777 cv
cp
933.731 333.28 mo
933.731 332.358 934.479 331.609 935.399 331.609 cv
936.323 331.609 937.07 332.358 937.07 333.28 cv
937.07 334.2 936.323 334.947 935.399 334.947 cv
934.479 334.947 933.731 334.2 933.731 333.28 cv
cp
932.126 328.792 mo
932.126 328.446 932.126 326.772 932.126 325.15 cv
932.866 326.167 934.052 326.833 935.399 326.833 cv
937.639 326.833 939.458 325.014 939.458 322.777 cv
939.458 320.924 938.203 319.376 936.501 318.892 cv
936.501 314.303 li
939.061 314.303 li
939.061 301.892 li
932.06 301.892 li
932.06 314.303 li
934.616 314.303 li
934.616 318.798 li
933.232 319.071 932.093 320.053 931.606 321.349 cv
930.367 320.112 927.309 317.054 926.914 316.659 cv
926.914 316.319 926.914 315.244 926.914 314.303 cv
928.237 314.303 li
928.237 301.892 li
921.239 301.892 li
921.239 314.303 li
925.031 314.303 li
925.031 317.44 li
925.031 317.44 929.75 322.155 930.245 322.649 cv
930.245 323.345 930.245 329.569 930.245 329.569 cv
931.913 331.239 li
931.56 331.843 931.345 332.532 931.345 333.28 cv
931.345 335.519 933.16 337.335 935.399 337.335 cv
937.639 337.335 939.458 335.519 939.458 333.28 cv
939.458 331.041 937.639 329.222 935.399 329.222 cv
934.592 329.222 933.844 329.463 933.209 329.872 cv
932.797 329.458 932.335 329 932.126 328.792 cv
cp
f
923.469 328.027 mo
923.469 327.107 924.217 326.359 925.137 326.359 cv
926.061 326.359 926.808 327.107 926.808 328.027 cv
926.808 328.95 926.061 329.704 925.137 329.704 cv
924.217 329.704 923.469 328.95 923.469 328.027 cv
cp
914.227 316.458 mo
914.227 316.11 914.227 315.109 914.227 314.303 cv
917.421 314.303 li
917.421 301.892 li
910.419 301.892 li
910.419 314.303 li
912.341 314.303 li
912.341 317.237 li
921.452 326.351 li
921.22 326.862 921.08 327.43 921.08 328.027 cv
921.08 330.264 922.899 332.084 925.137 332.084 cv
927.376 332.084 929.196 330.264 929.196 328.027 cv
929.196 325.794 927.376 323.97 925.137 323.97 cv
924.188 323.97 923.319 324.315 922.631 324.864 cv
920.573 322.807 914.656 316.89 914.227 316.458 cv
cp
f
972.634 322.539 mo
972.634 321.617 973.384 320.867 974.305 320.867 cv
975.225 320.867 975.977 321.617 975.977 322.539 cv
975.977 323.46 975.225 324.208 974.305 324.208 cv
973.384 324.208 972.634 323.46 972.634 322.539 cv
cp
872.629 339.96 mo
872.629 340.884 871.879 341.633 870.959 341.633 cv
870.036 341.633 869.285 340.884 869.285 339.96 cv
869.285 339.044 870.036 338.292 870.959 338.292 cv
871.879 338.292 872.629 339.044 872.629 339.96 cv
cp
969.438 335.296 mo
969.438 335.296 969.438 324.649 969.438 323.042 cv
969.712 323.042 970.013 323.042 970.296 323.042 cv
970.55 325.038 972.239 326.596 974.305 326.596 cv
976.542 326.596 978.365 324.776 978.365 322.539 cv
978.365 320.298 976.542 318.483 974.305 318.483 cv
972.552 318.483 971.073 319.603 970.507 321.157 cv
967.555 321.157 li
967.555 321.157 967.555 331.806 967.555 333.409 cv
965.831 333.409 946.151 333.409 946.151 333.409 cv
946.151 333.409 940.211 339.349 939.704 339.854 cv
938.98 339.854 925.215 339.854 924.495 339.854 cv
924 339.363 919.443 334.804 919.443 334.804 cv
892.049 334.804 li
892.049 334.804 887.355 339.502 886.86 339.995 cv
886.263 339.995 878.113 339.995 875.013 339.995 cv
875.013 339.985 875.013 339.972 875.013 339.96 cv
875.013 337.721 873.198 335.903 870.959 335.903 cv
868.724 335.903 866.901 337.721 866.901 339.96 cv
866.901 342.197 868.724 344.017 870.959 344.017 cv
872.502 344.017 873.823 343.15 874.511 341.882 cv
887.639 341.882 li
887.639 341.882 892.336 337.184 892.831 336.686 cv
893.575 336.686 917.915 336.686 918.661 336.686 cv
919.156 337.179 923.714 341.735 923.714 341.735 cv
940.484 341.735 li
940.484 341.735 946.427 335.797 946.93 335.296 cv
947.682 335.296 969.438 335.296 969.438 335.296 cv
cp
f
1053.31 322.736 mo
1053.31 333.707 li
1054.07 333.699 1055.19 333.691 1055.59 333.69 cv
1055.97 333.29 1062.28 326.882 1065.44 323.666 cv
1065.44 326.354 li
1056.38 335.565 li
1053.31 335.593 li
1053.31 335.785 li
1046.3 335.785 li
1046.3 322.736 li
1053.31 322.736 li
cp
f
994.763 354.404 mo
994.763 340.015 li
994.763 340.015 1060.5 340.015 1061.27 340.015 cv
1061.59 339.696 1063.83 337.455 1065.44 335.84 cv
1065.44 338.504 li
1062.05 341.898 li
1062.05 341.898 998.477 341.898 996.648 341.898 cv
996.648 343.22 996.648 351.251 996.648 354.404 cv
998.891 354.404 li
998.891 367.451 li
991.889 367.451 li
991.889 354.404 li
994.763 354.404 li
cp
f
869.285 299.147 mo
869.285 298.228 870.036 297.479 870.959 297.479 cv
871.879 297.479 872.629 298.228 872.629 299.147 cv
872.629 300.068 871.879 300.816 870.959 300.816 cv
870.036 300.816 869.285 300.068 869.285 299.147 cv
cp
665.459 317.051 mo
665.459 317.971 664.711 318.72 663.788 318.72 cv
662.868 318.72 662.12 317.971 662.12 317.051 cv
662.12 316.131 662.868 315.378 663.788 315.378 cv
664.711 315.378 665.459 316.131 665.459 317.051 cv
cp
828.586 324.833 mo
829.339 324.833 850.579 324.833 850.579 324.833 cv
850.579 324.833 850.579 302.509 850.579 300.766 cv
852.036 300.766 863.944 300.766 867.243 300.766 cv
867.869 302.198 869.296 303.205 870.959 303.205 cv
872.857 303.205 874.44 301.892 874.882 300.129 cv
882.081 300.129 li
882.081 295.052 li
885.758 295.052 li
885.758 282.32 li
874.938 282.32 li
874.938 295.052 li
880.201 295.052 li
880.201 296.249 880.201 297.577 880.201 298.248 cv
879.146 298.248 876.287 298.248 874.905 298.248 cv
874.496 296.445 872.883 295.093 870.959 295.093 cv
868.813 295.093 867.067 296.772 866.929 298.882 cv
848.694 298.882 li
848.694 298.882 848.694 321.21 848.694 322.948 cv
846.972 322.948 827.805 322.948 827.805 322.948 cv
827.805 322.948 822.381 328.375 821.879 328.874 cv
821.468 328.874 787.213 328.874 755.109 328.874 cv
755.109 327.279 755.109 324.25 755.109 323.202 cv
755.926 323.202 757.534 323.202 758.62 323.202 cv
758.62 325.124 li
770.874 325.124 li
770.874 319.713 li
758.62 319.713 li
758.62 321.316 li
753.228 321.316 li
753.228 328.874 li
725.68 328.874 700.254 328.874 699.899 328.874 cv
699.372 328.346 687.09 316.07 687.09 316.07 cv
667.713 316.07 li
667.271 314.303 665.688 312.991 663.788 312.991 cv
661.549 312.991 659.729 314.81 659.729 317.051 cv
659.729 319.288 661.549 321.106 663.788 321.106 cv
665.717 321.106 667.323 319.754 667.736 317.955 cv
670.903 317.955 685.644 317.955 686.313 317.955 cv
686.839 318.483 699.117 330.759 699.117 330.759 cv
822.66 330.759 li
822.66 330.759 828.085 325.335 828.586 324.833 cv
cp
f
869.285 322.777 mo
869.285 321.854 870.036 321.106 870.959 321.106 cv
871.879 321.106 872.629 321.854 872.629 322.777 cv
872.629 323.697 871.879 324.449 870.959 324.449 cv
870.036 324.449 869.285 323.697 869.285 322.777 cv
cp
860.762 321.64 mo
860.762 316.053 li
864.753 316.053 li
864.753 303.325 li
853.932 303.325 li
853.932 316.053 li
858.876 316.053 li
858.876 324.805 li
857.433 324.805 li
857.433 337.535 li
866.186 337.535 li
866.186 324.805 li
860.762 324.805 li
860.762 323.521 li
866.977 323.521 li
867.329 325.402 868.977 326.833 870.959 326.833 cv
873.198 326.833 875.013 325.014 875.013 322.777 cv
875.013 320.54 873.198 318.72 870.959 318.72 cv
869.12 318.72 867.583 319.955 867.086 321.64 cv
860.762 321.64 li
cp
f
879.792 352.846 mo
879.792 351.93 880.537 351.182 881.458 351.182 cv
882.38 351.182 883.131 351.93 883.131 352.846 cv
883.131 353.77 882.38 354.522 881.458 354.522 cv
880.537 354.522 879.792 353.77 879.792 352.846 cv
cp
861.413 352.846 mo
861.413 353.77 860.663 354.522 859.739 354.522 cv
858.819 354.522 858.07 353.77 858.07 352.846 cv
858.07 351.93 858.819 351.182 859.739 351.182 cv
860.663 351.182 861.413 351.93 861.413 352.846 cv
cp
866.662 358.698 mo
875.095 358.698 li
875.095 354.073 li
877.611 354.073 li
878.132 355.71 879.65 356.907 881.458 356.907 cv
883.384 356.907 884.995 355.557 885.408 353.753 cv
888.208 353.753 910.533 353.753 912.182 353.753 cv
912.182 354.224 912.182 354.833 912.182 355.356 cv
910.419 355.356 li
910.419 367.768 li
917.422 367.768 li
917.422 359.639 li
921.239 359.639 li
921.239 367.768 li
928.241 367.768 li
928.241 355.356 li
921.239 355.356 li
921.239 357.757 li
917.422 357.757 li
917.422 355.356 li
914.068 355.356 li
914.068 351.871 li
885.382 351.871 li
884.941 350.106 883.355 348.793 881.458 348.793 cv
879.449 348.793 877.789 350.27 877.471 352.188 cv
875.095 352.188 li
875.095 346.282 li
866.662 346.282 li
866.662 352.188 li
863.73 352.188 li
863.409 350.27 861.749 348.793 859.739 348.793 cv
857.784 348.793 856.148 350.188 855.768 352.028 cv
853.752 352.028 848.843 352.028 848.276 352.028 cv
847.977 351.729 846.46 350.212 845.339 349.096 cv
845.339 331.97 li
831.338 331.97 li
831.338 351.538 li
845.124 351.538 li
847.495 353.909 li
855.844 353.909 li
856.311 355.635 857.872 356.907 859.739 356.907 cv
861.549 356.907 863.068 355.71 863.592 354.073 cv
866.662 354.073 li
866.662 358.698 li
cp
f
982.895 376.241 mo
982.895 375.317 983.644 374.569 984.568 374.569 cv
985.488 374.569 986.237 375.317 986.237 376.241 cv
986.237 377.158 985.488 377.914 984.568 377.914 cv
983.644 377.914 982.895 377.158 982.895 376.241 cv
cp
980.508 376.241 mo
980.508 378.478 982.33 380.298 984.568 380.298 cv
986.435 380.298 987.995 379.022 988.466 377.301 cv
1065.44 377.301 li
1065.44 375.418 li
988.539 375.418 li
988.228 373.923 987.09 372.741 985.628 372.344 cv
985.628 367.451 li
988.703 367.451 li
988.703 354.404 li
981.704 354.404 li
981.704 367.451 li
983.743 367.451 li
983.743 372.267 li
981.9 372.647 980.508 374.283 980.508 376.241 cv
cp
f
801.984 305.116 mo
801.984 306.035 801.232 306.787 800.308 306.787 cv
799.388 306.787 798.641 306.035 798.641 305.116 cv
798.641 304.194 799.388 303.446 800.308 303.446 cv
801.232 303.446 801.984 304.194 801.984 305.116 cv
cp
698.639 299.147 mo
698.639 300.068 697.889 300.816 696.968 300.816 cv
696.044 300.816 695.293 300.068 695.293 299.147 cv
695.293 298.228 696.044 297.479 696.968 297.479 cv
697.889 297.479 698.639 298.228 698.639 299.147 cv
cp
165.268 287.691 mo
165.268 288.613 164.52 289.36 163.598 289.36 cv
162.675 289.36 161.929 288.613 161.929 287.691 cv
161.929 286.771 162.675 286.025 163.598 286.025 cv
164.52 286.025 165.268 286.771 165.268 287.691 cv
cp
804.368 305.116 mo
804.368 302.877 802.547 301.061 800.308 301.061 cv
798.606 301.061 797.15 302.117 796.551 303.609 cv
790.239 303.609 752.444 303.609 751.741 303.609 cv
751.247 303.106 746.163 298.027 746.163 298.027 cv
721.391 298.027 li
721.391 296.805 li
709.452 296.805 li
709.452 298.027 li
700.845 298.027 li
700.354 296.338 698.811 295.093 696.968 295.093 cv
695.119 295.093 693.573 296.338 693.083 298.027 cv
686.196 298.027 626.777 298.027 626.049 298.027 cv
625.526 297.5 614.775 286.751 614.775 286.751 cv
614.775 286.751 169.565 287.026 167.587 287.026 cv
167.27 285.109 165.605 283.632 163.598 283.632 cv
161.36 283.632 159.54 285.456 159.54 287.691 cv
159.54 289.926 161.36 291.75 163.598 291.75 cv
165.409 291.75 166.926 290.552 167.447 288.912 cv
167.544 288.912 li
167.544 288.957 li
183.887 288.957 613.281 288.634 613.993 288.634 cv
614.521 289.157 625.271 299.913 625.271 299.913 cv
692.985 299.913 li
693.345 301.785 694.988 303.205 696.968 303.205 cv
698.943 303.205 700.583 301.785 700.942 299.913 cv
702.316 299.913 705.449 299.913 709.452 299.913 cv
709.452 302.211 li
721.391 302.211 li
721.391 299.913 li
732.944 299.913 744.986 299.913 745.385 299.913 cv
745.881 300.412 750.962 305.491 750.962 305.491 cv
796.292 305.491 li
796.483 307.551 798.201 309.171 800.308 309.171 cv
802.547 309.171 804.368 307.352 804.368 305.116 cv
cp
f
161.929 312.022 mo
161.929 311.102 162.675 310.349 163.598 310.349 cv
164.52 310.349 165.268 311.102 165.268 312.022 cv
165.268 312.941 164.52 313.694 163.598 313.694 cv
162.675 313.694 161.929 312.941 161.929 312.022 cv
cp
865.705 383.991 mo
866.625 383.991 867.378 384.744 867.378 385.664 cv
867.378 386.586 866.625 387.334 865.705 387.334 cv
864.785 387.334 864.037 386.586 864.037 385.664 cv
864.037 384.744 864.785 383.991 865.705 383.991 cv
cp
159.54 312.022 mo
159.54 314.258 161.36 316.08 163.598 316.08 cv
165.409 316.08 166.926 314.884 167.447 313.244 cv
167.544 313.244 li
167.544 313.301 li
189.684 313.301 619.633 312.978 620.316 312.978 cv
620.852 313.514 637.087 329.747 637.087 329.747 cv
637.087 329.747 676.834 329.747 677.602 329.747 cv
678.107 330.252 684.133 336.278 684.133 336.278 cv
684.133 336.278 819.348 336.278 821.209 336.278 cv
821.209 338.018 821.209 360.473 821.209 360.473 cv
821.209 360.473 849.403 360.473 850.161 360.473 cv
850.684 360.997 864.303 374.618 864.824 375.142 cv
864.824 375.837 864.824 376.847 864.824 381.711 cv
863.013 382.114 861.649 383.729 861.649 385.664 cv
861.649 387.901 863.471 389.72 865.705 389.72 cv
867.944 389.72 869.767 387.901 869.767 385.664 cv
869.767 383.774 868.462 382.195 866.707 381.746 cv
866.707 374.36 li
850.94 358.592 li
850.94 358.592 824.852 358.592 823.092 358.592 cv
823.092 356.855 823.092 334.395 823.092 334.395 cv
823.092 334.395 685.688 334.395 684.912 334.395 cv
684.407 333.892 678.38 327.864 678.38 327.864 cv
678.38 327.864 638.633 327.864 637.864 327.864 cv
637.332 327.332 621.099 311.095 621.099 311.095 cv
621.099 311.095 169.565 311.359 167.587 311.359 cv
167.27 309.437 165.605 307.965 163.598 307.965 cv
161.36 307.965 159.54 309.785 159.54 312.022 cv
cp
f
511.842 337.915 mo
512.48 337.249 513.541 337.225 514.204 337.862 cv
514.874 338.5 514.897 339.564 514.261 340.226 cv
513.623 340.897 512.561 340.913 511.895 340.279 cv
511.23 339.642 511.206 338.582 511.842 337.915 cv
cp
542.065 323.494 mo
542.065 322.572 542.813 321.824 543.735 321.824 cv
544.657 321.824 545.404 322.572 545.404 323.494 cv
545.404 324.414 544.657 325.161 543.735 325.161 cv
542.813 325.161 542.065 324.414 542.065 323.494 cv
cp
618.68 323.729 mo
618.68 322.81 619.428 322.065 620.353 322.065 cv
621.273 322.065 622.021 322.81 622.021 323.729 cv
622.021 324.653 621.273 325.402 620.353 325.402 cv
619.428 325.402 618.68 324.653 618.68 323.729 cv
cp
721.786 341.396 mo
721.786 340.476 722.535 339.727 723.459 339.727 cv
724.38 339.727 725.127 340.476 725.127 341.396 cv
725.127 342.315 724.38 343.064 723.459 343.064 cv
722.535 343.064 721.786 342.315 721.786 341.396 cv
cp
510.247 342.005 mo
511.864 343.551 514.436 343.498 515.982 341.878 cv
517.234 340.567 517.418 338.64 516.592 337.13 cv
525.268 328.058 li
525.256 328.048 li
532.169 320.826 528.255 325.018 528.705 324.555 cv
529.32 324.555 537.092 324.555 539.834 324.555 cv
540.307 326.277 541.869 327.553 543.735 327.553 cv
545.573 327.553 547.113 326.314 547.61 324.633 cv
616.4 324.633 li
616.815 326.44 618.423 327.786 620.353 327.786 cv
620.795 327.786 621.219 327.698 621.621 327.565 cv
636.347 342.297 li
719.511 342.297 li
719.92 344.099 721.531 345.452 723.459 345.452 cv
725.694 345.452 727.516 343.628 727.516 341.396 cv
727.516 339.155 725.694 337.335 723.459 337.335 cv
721.56 337.335 719.976 338.651 719.533 340.414 cv
710.594 340.414 637.851 340.414 637.127 340.414 cv
636.682 339.964 626.49 329.773 623.264 326.543 cv
623.968 325.817 624.407 324.823 624.407 323.729 cv
624.407 321.496 622.589 319.675 620.353 319.675 cv
618.451 319.675 616.868 320.989 616.427 322.748 cv
547.719 322.748 li
547.367 320.867 545.721 319.435 543.735 319.435 cv
541.78 319.435 540.143 320.826 539.761 322.672 cv
527.899 322.672 li
523.021 327.651 li
523.021 327.68 li
519.432 331.438 516.594 334.407 515.328 335.728 cv
513.719 334.636 511.507 334.815 510.118 336.268 cv
508.568 337.887 508.63 340.459 510.247 342.005 cv
cp
f
696.477 468.168 mo
696.477 467.243 697.226 466.495 698.147 466.495 cv
699.07 466.495 699.818 467.243 699.818 468.168 cv
699.818 469.09 699.07 469.836 698.147 469.836 cv
697.226 469.836 696.477 469.09 696.477 468.168 cv
cp
849.708 450.027 mo
849.708 449.107 850.456 448.354 851.376 448.354 cv
852.296 448.354 853.049 449.107 853.049 450.027 cv
853.049 450.949 852.296 451.695 851.376 451.695 cv
850.456 451.695 849.708 450.949 849.708 450.027 cv
cp
987.184 496.09 mo
988.103 496.09 988.854 496.843 988.854 497.763 cv
988.854 498.683 988.103 499.434 987.184 499.434 cv
986.26 499.434 985.511 498.683 985.511 497.763 cv
985.511 496.843 986.26 496.09 987.184 496.09 cv
cp
178.732 468.061 mo
178.732 468.985 177.988 469.736 177.063 469.736 cv
176.142 469.736 175.395 468.985 175.395 468.061 cv
175.395 467.145 176.142 466.393 177.063 466.393 cv
177.988 466.393 178.732 467.145 178.732 468.061 cv
cp
180.938 469.202 mo
694.272 469.305 li
694.771 470.989 696.311 472.222 698.147 472.222 cv
698.916 472.222 699.626 471.997 700.24 471.627 cv
709.612 481 li
709.612 481 784.817 481 785.59 481 cv
786.093 481.503 791.757 487.169 791.757 487.169 cv
829.649 487.169 li
829.649 487.169 834.348 482.471 834.839 481.978 cv
835.529 481.978 841.105 481.978 841.105 481.978 cv
845.488 477.594 li
858.059 477.594 li
858.059 460.25 li
851.84 460.25 li
851.84 454.035 li
853.472 453.847 854.799 452.702 855.251 451.168 cv
866.813 451.168 li
866.813 458.341 li
877.63 458.341 li
877.63 445.615 li
874.12 445.615 li
874.12 443.649 874.12 440.004 874.12 438.916 cv
875.837 438.916 902.179 438.916 903.901 438.916 cv
903.901 440.65 903.901 462.148 903.901 462.148 cv
975.241 462.148 li
975.241 462.148 980.866 456.525 981.368 456.022 cv
982.134 456.022 1045.46 456.022 1046.22 456.022 cv
1046.69 456.484 1050.18 459.977 1050.64 460.439 cv
1050.64 460.888 1050.64 462.925 1050.64 464.228 cv
1048.2 464.228 li
1048.2 477.279 li
1051.08 477.279 li
1051.08 486.026 li
1049.79 486.026 li
1049.79 490.018 li
986.004 490.018 li
986.004 493.898 li
984.344 494.41 983.127 495.939 983.127 497.763 cv
983.127 500 984.945 501.817 987.184 501.817 cv
989.419 501.817 991.243 500 991.243 497.763 cv
991.243 495.763 989.786 494.109 987.886 493.776 cv
987.886 493.178 987.886 492.451 987.886 491.898 cv
989.558 491.898 1041.03 491.898 1049.79 491.898 cv
1049.79 499.075 li
1056.8 499.075 li
1056.8 486.026 li
1052.96 486.026 li
1052.96 477.279 li
1055.21 477.279 li
1055.21 464.228 li
1052.53 464.228 li
1052.53 459.662 li
1047 454.141 li
980.587 454.141 li
980.587 454.141 974.967 459.762 974.46 460.265 cv
973.703 460.265 907.605 460.265 905.781 460.265 cv
905.781 458.529 905.781 437.035 905.781 437.035 cv
872.234 437.035 li
872.234 445.615 li
866.813 445.615 li
866.813 449.283 li
855.359 449.283 li
855.008 447.401 853.359 445.97 851.376 445.97 cv
849.14 445.97 847.319 447.786 847.319 450.027 cv
847.319 451.761 848.422 453.237 849.96 453.814 cv
849.96 460.25 li
844.216 460.25 li
844.216 476.204 li
843.007 477.412 840.686 479.732 840.326 480.095 cv
839.64 480.095 834.061 480.095 834.061 480.095 cv
834.061 480.095 829.363 484.787 828.872 485.286 cv
828.111 485.286 793.294 485.286 792.535 485.286 cv
792.032 484.779 786.37 479.119 786.37 479.119 cv
786.37 479.119 711.166 479.119 710.391 479.119 cv
709.947 478.673 703.481 472.21 701.576 470.307 cv
701.97 469.685 702.206 468.957 702.206 468.168 cv
702.206 465.927 700.387 464.111 698.147 464.111 cv
696.166 464.111 694.515 465.542 694.167 467.423 cv
181.043 467.321 li
180.695 465.436 179.047 464.004 177.063 464.004 cv
174.824 464.004 173.005 465.824 173.005 468.061 cv
173.005 470.298 174.824 472.12 177.063 472.12 cv
178.902 472.12 180.439 470.883 180.938 469.202 cv
cp
f
737.052 475.805 mo
736.132 475.805 735.382 475.054 735.382 474.134 cv
735.382 473.214 736.132 472.461 737.052 472.461 cv
737.973 472.461 738.726 473.214 738.726 474.134 cv
738.726 475.054 737.973 475.805 737.052 475.805 cv
cp
737.052 478.191 mo
739.289 478.191 741.109 476.371 741.109 474.134 cv
741.109 471.893 739.289 470.078 737.052 470.078 cv
735.801 470.078 734.696 470.656 733.948 471.55 cv
722.33 471.55 li
722.33 476.956 li
734.149 476.956 li
734.89 477.717 735.913 478.191 737.052 478.191 cv
cp
f
959.975 511.368 mo
959.055 511.368 958.303 510.612 958.303 509.696 cv
958.303 508.772 959.055 508.023 959.975 508.023 cv
960.894 508.023 961.643 508.772 961.643 509.696 cv
961.643 510.612 960.894 511.368 959.975 511.368 cv
cp
959.975 513.752 mo
962.212 513.752 964.031 511.933 964.031 509.696 cv
964.031 507.46 962.212 505.639 959.975 505.639 cv
957.736 505.639 955.916 507.46 955.916 509.696 cv
955.916 511.933 957.736 513.752 959.975 513.752 cv
cp
f
1073.82 474.85 mo
1072.9 474.85 1072.15 474.097 1072.15 473.181 cv
1072.15 472.257 1072.9 471.509 1073.82 471.509 cv
1074.74 471.509 1075.49 472.257 1075.49 473.181 cv
1075.49 474.097 1074.74 474.85 1073.82 474.85 cv
cp
1073.82 477.238 mo
1076.06 477.238 1077.88 475.414 1077.88 473.181 cv
1077.88 470.942 1076.06 469.121 1073.82 469.121 cv
1071.58 469.121 1069.76 470.942 1069.76 473.181 cv
1069.76 475.414 1071.58 477.238 1073.82 477.238 cv
cp
f
834.671 470.078 mo
833.751 470.078 832.998 469.327 832.998 468.405 cv
832.998 467.482 833.751 466.736 834.671 466.736 cv
835.591 466.736 836.344 467.482 836.344 468.405 cv
836.344 469.327 835.591 470.078 834.671 470.078 cv
cp
783.752 476.641 mo
783.752 476.03 li
786.938 476.03 795.926 476.03 796.529 476.03 cv
797.024 476.522 801.661 481.16 801.661 481.16 cv
823.843 481.16 li
832.942 472.06 li
833.469 472.315 834.047 472.461 834.671 472.461 cv
836.905 472.461 838.726 470.642 838.726 468.405 cv
838.726 466.168 836.905 464.35 834.671 464.35 cv
832.434 464.35 830.61 466.168 830.61 468.405 cv
830.61 469.335 830.941 470.184 831.469 470.867 cv
829.33 473.009 823.484 478.857 823.063 479.274 cv
822.325 479.274 803.183 479.274 802.442 479.274 cv
801.947 478.784 797.31 474.147 797.31 474.147 cv
783.752 474.147 li
783.752 471.228 li
771.498 471.228 li
771.498 476.641 li
783.752 476.641 li
cp
f
734.268 483.164 mo
734.268 488.574 li
722.33 488.574 li
722.33 483.164 li
734.268 483.164 li
cp
f
898.636 479.34 mo
895.12 479.34 li
895.12 488.095 li
896.888 488.095 li
896.888 500.826 li
888.134 500.826 li
888.134 488.095 li
893.239 488.095 li
893.239 479.34 li
887.815 479.34 li
887.815 466.614 li
898.636 466.614 li
898.636 479.34 li
cp
f
972.386 467.687 mo
972.386 468.609 971.638 469.357 970.714 469.357 cv
969.794 469.357 969.045 468.609 969.045 467.687 cv
969.045 466.769 969.794 466.017 970.714 466.017 cv
971.638 466.017 972.386 466.769 972.386 467.687 cv
cp
983.765 464.228 mo
983.765 467.108 li
974.716 467.108 li
974.425 465.146 972.755 463.633 970.714 463.633 cv
968.479 463.633 966.657 465.452 966.657 467.687 cv
966.657 469.601 967.99 471.198 969.773 471.627 cv
969.773 481.094 li
964.19 481.094 li
964.19 493.665 li
976.602 493.665 li
976.602 481.094 li
971.658 481.094 li
971.658 471.627 li
973.014 471.3 974.091 470.294 974.539 468.99 cv
983.765 468.99 li
983.765 477.279 li
990.762 477.279 li
990.762 464.228 li
983.765 464.228 li
cp
f
994.582 477.279 mo
994.582 464.228 li
1001.59 464.228 li
1001.59 477.279 li
994.582 477.279 li
cp
f
1010.37 479.859 mo
1010.37 480.784 1009.63 481.532 1008.7 481.532 cv
1007.78 481.532 1007.03 480.784 1007.03 479.859 cv
1007.03 478.943 1007.78 478.191 1008.7 478.191 cv
1009.63 478.191 1010.37 478.943 1010.37 479.859 cv
cp
1012.76 479.859 mo
1012.76 478.874 1012.39 477.982 1011.8 477.279 cv
1012.21 477.279 li
1012.21 464.228 li
1005.2 464.228 li
1005.2 477.279 li
1005.6 477.279 li
1005.01 477.982 1004.65 478.874 1004.65 479.859 cv
1004.65 482.101 1006.47 483.916 1008.7 483.916 cv
1010.94 483.916 1012.76 482.101 1012.76 479.859 cv
cp
f
1015.75 477.279 mo
1015.75 464.228 li
1022.75 464.228 li
1022.75 477.279 li
1015.75 477.279 li
cp
f
1026.25 477.279 mo
1026.25 464.228 li
1033.25 464.228 li
1033.25 477.279 li
1026.25 477.279 li
cp
f
1042.83 479.859 mo
1042.83 480.784 1042.08 481.532 1041.16 481.532 cv
1040.24 481.532 1039.49 480.784 1039.49 479.859 cv
1039.49 478.943 1040.24 478.191 1041.16 478.191 cv
1042.08 478.191 1042.83 478.943 1042.83 479.859 cv
cp
1045.22 479.859 mo
1045.22 478.874 1044.85 477.982 1044.26 477.279 cv
1044.66 477.279 li
1044.66 464.228 li
1037.66 464.228 li
1037.66 477.279 li
1038.06 477.279 li
1037.47 477.982 1037.11 478.874 1037.11 479.859 cv
1037.11 482.101 1038.92 483.916 1041.16 483.916 cv
1043.4 483.916 1045.22 482.101 1045.22 479.859 cv
cp
f
1061.09 479.859 mo
1061.09 478.943 1061.84 478.191 1062.76 478.191 cv
1063.68 478.191 1064.43 478.943 1064.43 479.859 cv
1064.43 480.784 1063.68 481.532 1062.76 481.532 cv
1061.84 481.532 1061.09 480.784 1061.09 479.859 cv
cp
1059.66 477.279 mo
1059.07 477.982 1058.71 478.874 1058.71 479.859 cv
1058.71 482.101 1060.53 483.916 1062.76 483.916 cv
1065 483.916 1066.82 482.101 1066.82 479.859 cv
1066.82 478.874 1066.45 477.982 1065.86 477.279 cv
1066.27 477.279 li
1066.27 464.228 li
1059.26 464.228 li
1059.26 477.279 li
1059.66 477.279 li
cp
f
964.19 502.576 mo
976.602 502.576 li
976.602 515.147 li
964.19 515.147 li
964.19 502.576 li
cp
f
919.96 465.182 mo
919.96 477.594 li
912.955 477.594 li
912.955 465.182 li
919.96 465.182 li
cp
f
771.498 465.501 mo
771.498 460.091 li
783.752 460.091 li
783.752 461.776 li
784.068 461.776 784.367 461.776 784.556 461.776 cv
785.058 461.269 790.841 455.491 790.841 455.491 cv
790.841 455.491 832.659 455.491 833.467 455.491 cv
834.009 454.906 855.58 431.786 855.58 431.786 cv
922.131 431.786 li
922.131 431.786 922.131 444.211 922.131 444.944 cv
922.585 445.397 925.62 448.436 926.073 448.886 cv
926.832 448.886 963.599 448.886 964.358 448.886 cv
964.882 448.358 975.576 437.669 975.576 437.669 cv
1058.07 437.669 li
1058.07 432.88 li
1066.82 432.88 li
1066.82 444.181 li
1058.07 444.181 li
1058.07 439.554 li
1047.71 439.554 977.072 439.554 976.353 439.554 cv
975.832 440.077 965.14 450.767 965.14 450.767 cv
925.295 450.767 li
920.249 445.725 li
920.249 445.725 920.249 435.276 920.249 433.668 cv
918.431 433.668 857.198 433.668 856.402 433.668 cv
855.853 434.25 834.284 457.375 834.284 457.375 cv
834.284 457.375 792.391 457.375 791.622 457.375 cv
791.119 457.878 785.336 463.661 785.336 463.661 cv
783.752 463.661 li
783.752 465.501 li
771.498 465.501 li
cp
f
985.272 449.79 mo
985.272 448.87 986.022 448.117 986.944 448.117 cv
987.867 448.117 988.615 448.87 988.615 449.79 cv
988.615 450.71 987.867 451.458 986.944 451.458 cv
986.022 451.458 985.272 450.71 985.272 449.79 cv
cp
982.888 449.79 mo
982.888 452.022 984.703 453.844 986.944 453.844 cv
988.696 453.844 990.175 452.726 990.743 451.168 cv
997.986 451.168 1044.96 451.168 1045.72 451.168 cv
1046.25 451.757 1056.06 462.626 1056.06 462.626 cv
1078.32 462.626 li
1078.32 460.746 li
1072.07 460.746 1057.53 460.746 1056.9 460.746 cv
1056.37 460.152 1046.56 449.283 1046.56 449.283 cv
990.95 449.283 li
990.699 447.283 989.01 445.729 986.944 445.729 cv
984.703 445.729 982.888 447.553 982.888 449.79 cv
cp
f
914.148 450.264 mo
914.148 449.344 914.897 448.596 915.817 448.596 cv
916.741 448.596 917.489 449.344 917.489 450.264 cv
917.489 451.189 916.741 451.937 915.817 451.937 cv
914.897 451.937 914.148 451.189 914.148 450.264 cv
cp
911.763 450.264 mo
911.763 452.501 913.58 454.325 915.817 454.325 cv
916.632 454.325 917.38 454.076 918.01 453.67 cv
921.475 457.134 li
970.23 457.134 li
970.23 457.134 982.83 444.539 983.355 444.007 cv
984.123 444.007 1049.91 444.007 1050.68 444.007 cv
1051.19 444.515 1057.84 451.168 1057.84 451.168 cv
1078.32 451.168 li
1078.32 449.283 li
1072.77 449.283 1059.22 449.283 1058.62 449.283 cv
1058.11 448.775 1051.46 442.122 1051.46 442.122 cv
982.577 442.122 li
982.577 442.122 969.977 454.722 969.452 455.249 cv
968.689 455.249 923.019 455.249 922.256 455.249 cv
921.923 454.918 920.274 453.27 919.308 452.305 cv
919.661 451.7 919.878 451.012 919.878 450.264 cv
919.878 448.027 918.057 446.21 915.817 446.21 cv
913.58 446.21 911.763 448.027 911.763 450.264 cv
cp
f
946.608 486.067 mo
946.608 485.143 947.359 484.397 948.279 484.397 cv
949.201 484.397 949.948 485.143 949.948 486.067 cv
949.948 486.991 949.201 487.74 948.279 487.74 cv
947.359 487.74 946.608 486.991 946.608 486.067 cv
cp
946.608 496.569 mo
946.608 495.644 947.359 494.896 948.279 494.896 cv
949.201 494.896 949.948 495.644 949.948 496.569 cv
949.948 497.489 949.201 498.241 948.279 498.241 cv
947.359 498.241 946.608 497.489 946.608 496.569 cv
cp
945.006 492.082 mo
945.006 491.743 945.006 490.059 945.006 488.443 cv
945.743 489.457 946.93 490.124 948.279 490.124 cv
950.516 490.124 952.335 488.304 952.335 486.067 cv
952.335 484.214 951.083 482.665 949.379 482.182 cv
949.379 477.594 li
951.939 477.594 li
951.939 465.182 li
944.938 465.182 li
944.938 477.594 li
947.498 477.594 li
947.498 482.088 li
946.109 482.362 944.975 483.343 944.484 484.64 cv
943.245 483.403 940.185 480.342 939.791 479.949 cv
939.791 479.606 939.791 478.54 939.791 477.594 cv
941.118 477.594 li
941.118 465.182 li
934.117 465.182 li
934.117 477.594 li
937.911 477.594 li
937.911 480.728 li
937.911 480.728 942.628 485.445 943.123 485.939 cv
943.123 486.635 943.123 492.862 943.123 492.862 cv
944.791 494.53 li
944.439 495.133 944.223 495.82 944.223 496.569 cv
944.223 498.806 946.042 500.625 948.279 500.625 cv
950.516 500.625 952.335 498.806 952.335 496.569 cv
952.335 494.332 950.516 492.514 948.279 492.514 cv
947.472 492.514 946.721 492.753 946.087 493.162 cv
945.675 492.749 945.213 492.291 945.006 492.082 cv
cp
f
936.347 491.314 mo
936.347 490.397 937.095 489.649 938.015 489.649 cv
938.938 489.649 939.688 490.397 939.688 491.314 cv
939.688 492.238 938.938 492.99 938.015 492.99 cv
937.095 492.99 936.347 492.238 936.347 491.314 cv
cp
927.104 479.749 mo
927.104 479.399 927.104 478.395 927.104 477.594 cv
930.298 477.594 li
930.298 465.182 li
923.299 465.182 li
923.299 477.594 li
925.223 477.594 li
925.223 480.53 li
934.33 489.637 li
934.097 490.152 933.958 490.721 933.958 491.314 cv
933.958 493.555 935.779 495.379 938.015 495.379 cv
940.254 495.379 942.075 493.555 942.075 491.314 cv
942.075 489.081 940.254 487.261 938.015 487.261 cv
937.066 487.261 936.197 487.604 935.508 488.152 cv
933.451 486.096 927.534 480.178 927.104 479.749 cv
cp
f
985.511 485.828 mo
985.511 484.91 986.26 484.157 987.184 484.157 cv
988.103 484.157 988.854 484.91 988.854 485.828 cv
988.854 486.75 988.103 487.498 987.184 487.498 cv
986.26 487.498 985.511 486.75 985.511 485.828 cv
cp
885.511 503.25 mo
885.511 504.175 884.759 504.919 883.836 504.919 cv
882.914 504.919 882.165 504.175 882.165 503.25 cv
882.165 502.331 882.914 501.582 883.836 501.582 cv
884.759 501.582 885.511 502.331 885.511 503.25 cv
cp
982.317 498.585 mo
982.317 498.585 982.317 487.936 982.317 486.333 cv
982.59 486.333 982.89 486.333 983.179 486.333 cv
983.428 488.332 985.121 489.882 987.184 489.882 cv
989.419 489.882 991.243 488.063 991.243 485.828 cv
991.243 483.589 989.419 481.773 987.184 481.773 cv
985.434 481.773 983.951 482.89 983.385 484.448 cv
980.435 484.448 li
980.435 484.448 980.435 495.097 980.435 496.7 cv
978.709 496.7 959.028 496.7 959.028 496.7 cv
959.028 496.7 953.089 502.637 952.581 503.144 cv
951.861 503.144 938.096 503.144 937.372 503.144 cv
936.882 502.654 932.319 498.09 932.319 498.09 cv
904.927 498.09 li
904.927 498.09 900.232 502.789 899.738 503.283 cv
899.141 503.283 890.993 503.283 887.891 503.283 cv
887.891 503.273 887.894 503.263 887.894 503.25 cv
887.894 501.018 886.075 499.194 883.836 499.194 cv
881.602 499.194 879.779 501.018 879.779 503.25 cv
879.779 505.487 881.602 507.305 883.836 507.305 cv
885.38 507.305 886.704 506.436 887.392 505.165 cv
900.519 505.165 li
900.519 505.165 905.214 500.474 905.709 499.977 cv
906.452 499.977 930.795 499.977 931.541 499.977 cv
932.034 500.466 936.592 505.03 936.592 505.03 cv
953.366 505.03 li
953.366 505.03 959.305 499.088 959.807 498.585 cv
960.56 498.585 982.317 498.585 982.317 498.585 cv
cp
f
1066.18 486.026 mo
1066.18 496.996 li
1066.95 496.99 1068.07 496.978 1068.46 496.978 cv
1068.85 496.581 1075.15 490.173 1078.32 486.954 cv
1078.32 489.645 li
1069.26 498.854 li
1066.18 498.883 li
1066.18 499.075 li
1059.18 499.075 li
1059.18 486.026 li
1066.18 486.026 li
cp
f
882.165 462.439 mo
882.165 461.514 882.914 460.766 883.836 460.766 cv
884.759 460.766 885.511 461.514 885.511 462.439 cv
885.511 463.358 884.759 464.111 883.836 464.111 cv
882.914 464.111 882.165 463.358 882.165 462.439 cv
cp
179.117 480.342 mo
179.117 481.258 178.368 482.008 177.45 482.008 cv
176.526 482.008 175.778 481.258 175.778 480.342 cv
175.778 479.418 176.526 478.669 177.45 478.669 cv
178.368 478.669 179.117 479.418 179.117 480.342 cv
cp
841.463 488.124 mo
842.218 488.124 863.456 488.124 863.456 488.124 cv
863.456 488.124 863.456 465.794 863.456 464.058 cv
864.914 464.058 876.82 464.058 880.121 464.058 cv
880.747 465.489 882.176 466.495 883.836 466.495 cv
885.735 466.495 887.318 465.179 887.76 463.419 cv
894.961 463.419 li
894.961 458.341 li
898.636 458.341 li
898.636 445.615 li
887.815 445.615 li
887.815 458.341 li
893.078 458.341 li
893.078 459.535 893.078 460.868 893.078 461.535 cv
892.023 461.535 889.167 461.535 887.786 461.535 cv
887.375 459.731 885.764 458.381 883.836 458.381 cv
881.691 458.381 879.944 460.06 879.806 462.172 cv
861.575 462.172 li
861.575 462.172 861.575 484.501 861.575 486.236 cv
859.853 486.236 840.685 486.236 840.685 486.236 cv
840.685 486.236 835.258 491.665 834.757 492.168 cv
834.346 492.168 800.091 492.168 767.986 492.168 cv
767.986 490.567 767.986 487.539 767.986 486.492 cv
768.803 486.492 770.414 486.492 771.498 486.492 cv
771.498 488.415 li
783.752 488.415 li
783.752 483.004 li
771.498 483.004 li
771.498 484.607 li
766.103 484.607 li
766.103 492.168 li
738.558 492.168 713.132 492.168 712.779 492.168 cv
712.25 491.637 699.967 479.358 699.967 479.358 cv
181.37 479.358 li
180.931 477.594 179.346 476.281 177.45 476.281 cv
175.209 476.281 173.388 478.101 173.388 480.342 cv
173.388 482.575 175.209 484.397 177.45 484.397 cv
179.374 484.397 180.981 483.045 181.395 481.242 cv
184.561 481.242 698.521 481.242 699.19 481.242 cv
699.716 481.769 711.999 494.049 711.999 494.049 cv
835.538 494.049 li
835.538 494.049 840.961 488.623 841.463 488.124 cv
cp
f
882.165 486.067 mo
882.165 485.143 882.914 484.397 883.836 484.397 cv
884.759 484.397 885.511 485.143 885.511 486.067 cv
885.511 486.991 884.759 487.74 883.836 487.74 cv
882.914 487.74 882.165 486.991 882.165 486.067 cv
cp
873.64 484.926 mo
873.64 479.34 li
877.63 479.34 li
877.63 466.614 li
866.813 466.614 li
866.813 479.34 li
871.758 479.34 li
871.758 488.095 li
870.313 488.095 li
870.313 500.826 li
879.063 500.826 li
879.063 488.095 li
873.64 488.095 li
873.64 486.809 li
879.855 486.809 li
880.206 488.692 881.854 490.124 883.836 490.124 cv
886.075 490.124 887.894 488.304 887.894 486.067 cv
887.894 483.83 886.075 482.008 883.836 482.008 cv
881.997 482.008 880.46 483.245 879.963 484.926 cv
873.64 484.926 li
cp
f
814.862 468.405 mo
814.862 469.327 814.109 470.078 813.189 470.078 cv
812.269 470.078 811.519 469.327 811.519 468.405 cv
811.519 467.482 812.269 466.736 813.189 466.736 cv
814.109 466.736 814.862 467.482 814.862 468.405 cv
cp
711.516 462.439 mo
711.516 463.358 710.766 464.111 709.846 464.111 cv
708.922 464.111 708.169 463.358 708.169 462.439 cv
708.169 461.514 708.922 460.766 709.846 460.766 cv
710.766 460.766 711.516 461.514 711.516 462.439 cv
cp
178.147 450.979 mo
178.147 451.904 177.397 452.652 176.477 452.652 cv
175.553 452.652 174.807 451.904 174.807 450.979 cv
174.807 450.06 175.553 449.311 176.477 449.311 cv
177.397 449.311 178.147 450.06 178.147 450.979 cv
cp
817.248 468.405 mo
817.248 466.168 815.427 464.35 813.189 464.35 cv
811.485 464.35 810.032 465.403 809.429 466.9 cv
803.117 466.9 765.322 466.9 764.621 466.9 cv
764.124 466.397 759.041 461.318 759.041 461.318 cv
734.268 461.318 li
734.268 460.091 li
722.33 460.091 li
722.33 461.318 li
713.723 461.318 li
713.231 459.629 711.691 458.381 709.846 458.381 cv
707.997 458.381 706.451 459.629 705.961 461.318 cv
699.074 461.318 639.657 461.318 638.927 461.318 cv
638.403 460.79 627.652 450.04 627.652 450.04 cv
627.652 450.04 182.447 450.317 180.466 450.317 cv
180.147 448.399 178.483 446.923 176.477 446.923 cv
174.238 446.923 172.418 448.743 172.418 450.979 cv
172.418 453.217 174.238 455.04 176.477 455.04 cv
178.286 455.04 179.804 453.842 180.325 452.198 cv
180.421 452.198 li
180.421 452.248 li
196.765 452.248 626.159 451.92 626.873 451.92 cv
627.398 452.448 638.149 463.199 638.149 463.199 cv
705.862 463.199 li
706.223 465.076 707.866 466.495 709.846 466.495 cv
711.82 466.495 713.464 465.076 713.822 463.199 cv
715.194 463.199 718.331 463.199 722.33 463.199 cv
722.33 465.501 li
734.268 465.501 li
734.268 463.199 li
745.822 463.199 757.866 463.199 758.263 463.199 cv
758.759 463.698 763.84 468.781 763.84 468.781 cv
809.169 468.781 li
809.361 470.838 811.084 472.461 813.189 472.461 cv
815.427 472.461 817.248 470.642 817.248 468.405 cv
cp
f
816.682 525.996 mo
817.315 525.33 818.377 525.305 819.044 525.943 cv
819.708 526.577 819.732 527.636 819.094 528.304 cv
818.458 528.969 817.397 528.994 816.734 528.356 cv
816.067 527.722 816.044 526.663 816.682 525.996 cv
cp
846.898 511.573 mo
846.898 510.652 847.65 509.9 848.575 509.9 cv
849.491 509.9 850.239 510.652 850.239 511.573 cv
850.239 512.493 849.491 513.243 848.575 513.243 cv
847.65 513.243 846.898 512.493 846.898 511.573 cv
cp
923.516 511.81 mo
923.516 510.89 924.266 510.141 925.185 510.141 cv
926.11 510.141 926.859 510.89 926.859 511.81 cv
926.859 512.732 926.11 513.482 925.185 513.482 cv
924.266 513.482 923.516 512.732 923.516 511.81 cv
cp
1026.62 529.472 mo
1026.62 528.55 1027.37 527.804 1028.29 527.804 cv
1029.22 527.804 1029.96 528.55 1029.96 529.472 cv
1029.96 530.396 1029.22 531.144 1028.29 531.144 cv
1027.37 531.144 1026.62 530.396 1026.62 529.472 cv
cp
815.082 530.083 mo
816.697 531.631 819.274 531.57 820.82 529.951 cv
822.073 528.646 822.255 526.72 821.429 525.211 cv
830.107 516.136 li
830.091 516.125 li
837.008 508.902 833.097 513.098 833.54 512.632 cv
834.156 512.632 841.93 512.632 844.669 512.632 cv
845.144 514.354 846.702 515.629 848.575 515.629 cv
850.409 515.629 851.949 514.394 852.445 512.712 cv
921.235 512.712 li
921.65 514.517 923.26 515.867 925.185 515.867 cv
925.634 515.867 926.055 515.781 926.456 515.646 cv
941.183 530.372 li
1024.35 530.372 li
1024.76 532.179 1026.37 533.529 1028.29 533.529 cv
1030.53 533.529 1032.35 531.709 1032.35 529.472 cv
1032.35 527.235 1030.53 525.417 1028.29 525.417 cv
1026.4 525.417 1024.81 526.728 1024.37 528.491 cv
1015.43 528.491 942.691 528.491 941.963 528.491 cv
941.515 528.045 931.326 517.854 928.1 514.623 cv
928.805 513.891 929.245 512.906 929.245 511.81 cv
929.245 509.573 927.425 507.753 925.185 507.753 cv
923.289 507.753 921.704 509.068 921.263 510.829 cv
852.554 510.829 li
852.202 508.947 850.554 507.516 848.575 507.516 cv
846.616 507.516 844.98 508.906 844.601 510.747 cv
832.736 510.747 li
827.858 515.731 li
827.858 515.76 li
824.268 519.514 821.429 522.483 820.165 523.808 cv
818.559 522.712 816.343 522.896 814.956 524.348 cv
813.41 525.959 813.468 528.538 815.082 530.083 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.1.0
%%For: (user) ()
%%Title: (plata_50.eps)
%%CreationDate: 4/12/2016 2:16 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Bj4fPdOoo2n*B9=i,g:Oi2h2(P$i)s8=VqqOJrn&lif@nMMLWFrp]jZ;hMG&H%<ljh&DjW]AKLs\ZI0WUf+1l<%?_=^Y'[8
%CA$02B)Bp)S<[<`*QuUQJ#m#VFoVH!qL6l)U.hOl*Ais\J$7V0-G<`jh.V"ZX1@698h9YIEX'9XEZ^K7U]!]#ZVd].^c-rfs*204
%8@I:/Au2+-neQfE0n&u&#@Bb#pc%0jnP0ajK;@C[DF!%-mf)fP]h.Q/rbpceIWAKXot-K<^"rOjLd_\5!EX]2F=R1j<487%iI;7)
%A$2&d<X+OI\!^0ki6VC3%]`^Sm<0'*d8p?*ACLQ0nN[#>*Mn;ahhmEn^FD/<(]Ng_gmlFPm-U(B%>P;o<mL<qB1I>WO#2C.!d,,G
%n1\R")O5b<P8.2#hTr=ns.fT](5=iBK!+4r4m8g*=SXr%7<+^h*;F^pkA=97<qDjZ?;LQ&c+QXt[A5=MZdA(]eGg!,Q?%cU@=QWp
%]'ihq5)``3=NkjV\m7rI:gR/+h5J]eC4t#b7>\oSpFPP26adp9S;Pj%Pd^-pcn&7I-HLG?BOnT9Zjth\e5`.en8l#Yq`-1q_Z,r)
%;Subt3-*0Y#_&(Vd_q$3Yo9]3<Zg<Pm/]<:G3`f6euBD$^r::93;%R+?;le$3k:(H6WN:omJgYkJ"j\CID;D],QY>p>^WZY]Tmtp
%J5'siC;k?0-_cCrg]V5-_)c8:cc!$P+7pLO1$AmH#WR:^L(EQ$XSA-3^#@kCj1WG4IXL!h%lueSe+PHp=t%nS-V4fZeP1)^lXFa_
%r[Im)I&5\&]]+9?>-Q.L"cR?,ISUmLN`Im$b>RA,UXH/aF7_h'@CcA!r)*R$<0^Q>l$pcR-d6ETWV3;,.Pk'(,mCZJZ8?\,7GD*M
%/%+1#a`mLb<'g(,GM'#s@8cUPNQ-K:=M(%ur_+rDZI^2jPCr89GL,6SK2/6M1KJENi#f2E)Kf/T#M!_j,ZE%3p!sCgKN5V^5MFp$
%lrYj=.*8$VdY!IR?TfL6<hTIe`I!mL3UA.cX4BpVM>sP7!4d]d/2\1n0Oe\N9'<inc#%V/^%:#f]A6"n+7jj5P5ZF!KO8=:URuX4
%].KmmZrKt2\3Z4Cr65qbQ@:]o-2;JG>*/on<NF$;S00(0/T^DO"aIad5KUj&#="\*m7+e@9P`7B4]j`;C*Pb6g$:#RUujt.3]Cr8
%bb*=''(E:ul#1KojPB\rQ?Vf`244&hI\k_[s2lPQE:-Nf/Wbt&K0d2CW!2$qG#6l:*Lp1l#n=3lH(_20O("C*GL;\@/,*-"iZA\k
%SqE9nUY>?"rB%Iqs8)5rr!"u%qR]_1U4Q>.rk.6g[G8Wkbsi(i>_,`Tb$f6S)D4Cn6FU/:/lOp:2eq0E74"JZiuQc(di\*ErLZV=
%r4$-=f)<SCirc6eF_2Ec^![aR;WgXMm(>QV>cZ<6@aG3[E-\J*q#`W*"#Zh.9bESCPWpscn`P"Xn1t.Q5AuR8_Tm.pd5eBMgK0S:
%Y@X@1$f)LOD:1g09E/aq:.]VkAX@s-U\&Rb;Pm/8p'9CeY\%+ijQb.OYHAk2[.5.ZW7=)qf0LdpR[bFa6[qCfaYlcK'QMFK<4)qT
%h.j^qHR>KZ_D`f"o9Ok`=XTJ@ZJA6(%"M?a#go@:2an]=YH*NG-G;\iMom1NAe[.eqJ9NikGs;IEd3krd/&.caPY(7TT4I9OmPn1
%Y)3XOU5IeAQQ<F<h.lMN/bKN6pE]TpS\$cHX/=aB,S!O0S/YfgA:sQr.a,&$rha"`Z>t'm*g`&=gtLPJRmM/XVVF"j0Is#j2`Kjt
%)5c2'[fX-gj%[/BRi?E)@*E1aQnrF"Aag\aD7R2/2n.o2[bTZ(S(hssr-5]oQHM\AN7`/$c7Q9_Z4Ship=s9NHdXl5YLM9Ur7)$o
%ZY8gs:.[qC/_DF,=9H6cXd&`iV^UCq7ZLgQVW^'T$mt@@1TWGuY7,`jHDS#0RC_Y6Rkq9Q/W3`7h4S$!6:2Nf?FrM.So&aH^%?'3
%T(\?H-*(I/fD7,I2Nt2SJZ:Cno2Y$9aWK]0m1s3(q:WjK)\hCO9[V-N8LLJI)O53Fh<OY`XXm.)qT4`EB4WH0ld&><Q!B54ouTo?
%Qm(gk2s?i6Wl[Q7P)U]GicCOe?]fnuZ9+Gl;Z?iM5&J_i`ODoWCNA.2@GApm`g#5q@+8g5j51`qq"Kd6(jkXrX'a07iEH6X\oAkd
%L9f/FAl@m(F[lM$"nC)\.G&[p>j"dg\n>X+CnBs`E_Mr*aC#ljADsYK)e?'%1q6\%E,Ubk%,:Bm,U\U<K/_UC9U[Ja#5dOrW-%A(
%o4HFsEhGNn46(0>/AK2"5P9A5UY_p("nU"/^Dd#agKUlAl+PAg]?(A-STN0j*6FVuG-Wd.gGp@*CG4gI54^1pZ/jQH.E]]W5g-OH
%2)FdSPWL`143,<`]<U$`P(.+(W12]!\./0jm!OP'h;(]*50,K'ZJ^_qR^[faCNW<0GUmXmgCc-*JVI;`.poctSTE"rQsl2I68R\G
%M6SUU(?T(B3Z%eF$a3cZNGQUgf?%l#GdVQB!b-)cqTclNZaRY^3"#?p?Aq+jTPI98]ZMLAVgY])l4aC>,'7HO76u[91SZB+ZA=3;
%gN[<m6,C[=+IuYueGC,D#E%]0<\%l(,Ro&.+NnK8a<ro8?Qm>/_=d%3rT'j>bJ8bDXB-rjphn&fcl"TQDpofeP=;k'g29ihpH":+
%28R=H?<90D\`GXu:gJgN[b7m,DF=Caos.S8jA4P*o4hb!cRd5I/3(o6@JWE8#54ND)95O<>p^ho>J?Y=0MA<M,\3'Re%RlK>f!#R
%Ua6m<m%8=aoe^/4dO@?,Q6g"<EH;fJW4.p^L<*p[EiSo%@g7Nad@2>[Rukd=2-#oFXc?3RAY;X1]d]sbm8b!cWmsCVE61,L6'PFF
%VT?n&%s@GRj)9a4X!omKh\;3<`ZLJ<PB9c&LA!.RN'`b%h@rO!G(b<+M`'%VlL"GTgMUVci`,9ajrsnCeZpI_i_h^I'kSTK,WX&D
%"c@=ZC0=M>ok#O:]_m!Hi"dSMX58_)P\;+p1)1!s(2fQupVf6-AX`P'e_:XlP"Fk4qc^bbOXO@qiQYaYat8)=0T0>+[B4)]@o98t
%=HlAkc!sWM=7g&X%;$k$j]6%(RImuQO%%/7g1G32RE)$qS#p`^@o;TB5V,MSc"H<1ofO"$lJu1B2T2>#P&&O\3c8^a8eqo+[8m6.
%T$khl9MHk5EK(-GPB/b=an%:,'$b-!p(BI2c:%T4]su0*goC:+Kq76:j\n2=Mk-fQ\:8(0[`h@@T3I^0kAO%QIA;DeH<FkBEpYo.
%/XX_h$pu_8CNI$EQYSB#f=&8@bgj,UV62+(WH5$sQYQP:WA[i/DO%LcQYLT@p5bMSqMESh?Q<Z4Mo%'`&H'#8R58sc3+#/,?Uj"%
%).aY:q(eBlUZ#dk=8t'jlnp7WO)MpQ9]+"g)1q[/(ABW(o4_cSMQ6L,65^!,Rl&k5o6nhdns4U&QCQN1P98X<,,.+iV-hB0"@+Ja
%;l'(IR$m)OZK?FHk':\?*jVr3rpupBirmC3-`+)SU_*@BAjX%r.EU7YNg6r!pofs8s'(,jiW!29+*)kWNJa435d$=@A_L+YPAF#s
%:V1Xs]:S]m+5#mXb\[=?0`E#s-uR_+91GU5m:,#-7n;$X5IoV:[!Q2lmLCQqn/2uE77l</8q@C7^5FNNG&`04Q%ara@6b#+mL<>#
%)/,CZ/nWJg9fENFk/s@5^-P,s>OS1CPC=:p4&`cOon;gnm#mc:s-_RcDdhM>^MK+(`Iit^cL&gY"3kc\h<smlgQ:63If=+Z3'[E`
%4#6F!h]('=kO4SXc[Y-@^[q'SCQ^M=s.-am?W+?%"PC!11+HW%1Z'WC*gq2*IX^E@5P)Q;O2oJ:q:=i/Vh6PHDbRh]aQt-7aI#cX
%.",#nrCe,hp)dA"eu543pS#Ap'iTp#TPjOW.@rH6UW%Ba'[0SnkqM\INTiYFV"p[1$?fiYXu)&4[ks`Rbr2p#qklPp484i]4_-K@
%eD*DL6QWO,$HLpr2N;U[q1Gs$jsFRiJ*j>,,crrNXcbQo]BX%r[GU<;7abZ0-FL7)\'g^iY!)NOh*fDV%,T4(!WU=+W6rcEQu%R6
%crBgb]fG:PH<JW,ij.VS]4jl[Z3/:[BAI6;8r4";ZIh9PP3oS<52#6I<DZN'f<Epu5In<61-:%kIs+)l],#t_PFGLX-TUd9Kh#kF
%FI?mAMd-KGHM:q'K^.@_13^CT*A;KSbM;VCGJ)-?0E94d$Jd9"GS+7!o"WBh02l\<2D28pB.7A"mQd4&OKR9!"(==:Zj5jH-(;?0
%8NZSLqJEi93u&6\^Io]nG-ZrU#m-tefgHSok/esI,*Ho:CuT($PeZ>UMs66AS:UXD;=EsRl4_LJk*tBF$aaX**9W`WVIO\;B4@=h
%bqZg1T)*m*R[3Hem#CTF9XcMSdl$91Spb=EIHdW]['4V!E*fNOs0re>n'$t0A[[hAbB<Le)8kUgfr%:cR/-(7)'4[:9p.P,I)V^:
%a')VZaRIn5'q4RP1%itqI<sU?qR@HT8M-].T!^Gj9/QV]D1MXsG&O950PrUe>9D%[>A1Lk6F0t`rm`!7Sn*a!8djM*Nb<]AaSDT;
%b7qZ:b2!ad/%2($Qn8*l%B>'6Lrc;%hOm'2r"umdL%O/]nW39O"EQfI%,!Hnn&L6%JKH*E%<FbRe69Gi[cZb%N4C$?g1Fsba-c`Y
%B#Ka](0\J9.CNu/TA9_Km'Kurp+)+]m<Y'PB)_5@JOuoW&X'0'_7<D@MaNYF./1SE^YZ.hndud@1R:,(2_n[02G2j@EENo^[0Fl]
%=C/aTU.R(d;aada$u(o#._TB)S,=*KX_JX#D5d@hbCt59Tofe(SnMf/BP<uN.*H4H.h`A'&bbfY6Xr'2S'<a"jYK"Ce8JtskM&q<
%OIULKbq-I@'tYnerq`ut2s:+L:>2AUbOKX5kai2$+I-Qf.<t0aT4B^hVqkh\)j?lKUoX38Qb;I@dO`uLm0`X27*^_oHt=I4b/:ou
%O>-XL?>>B^SohSoQ@-"0",./9eA"U-S$h:0>OBAS&=kV05&BQY3jE[Mh7fhY\LfaG[Tk^CRp0qmZWcMBgt\?f>B=k$mcLU]%/SN0
%R_'$[garpF]@HU[L9(tCB[:7_C2V>Ac+1AF2`Kp^k1na^>Hn(\A^4j2B1C+U(&Ja`FP2J;IZs2J]3RMa<jHOdF*m=5fQ.pK1/IdP
%hmR_S1)N"B]Fn.QhTU@RM=tMIjC_$obS,EM'4f<#ADBG%N14fV2aC[1#Hq3))O9U,>)o;"Vc'YkJ$*DS'__Af)d0i'U>/K5@`EW*
%Vd;c(UgquAd5Ec:9Wk*2A`,)q')&nZ^=o[Sr\j2@1[l%(5=%`*mJ$1W^WAJ&Z7YZ`;[:iF-C)S!I8a,DELuEhIR?57^2fW,e;5.D
%@#ASkY\:;tUA*`T(jEl)g_=lK,(FokmV/MdA7\B>ptUK"h[$uH8tlu^$F_0%<0/9Z:sslDATSK!AT(7?\f%;8jkoan+Oe/=>4REu
%Vc''rF?/+?o((\k&J>:ZYqaP"2O@i2Q&go2@lk_0jMob9L1Mr`]Cfg7h+Fh=T_`3%m`cK@J"T,MXd=kD;+f5@-^s?hs#ck95feSG
%<f1dce,,U&`D?<$o/FZ<:]Ke*S_a=hWQD@F?=`#uM]631/2U$m+(N[U:,`WG@M9.g]Gjg51=._SN'W)EF#6k-p&94man1,"9^RqN
%/`JYb.GaXbO,\I8Y>V"VQ^McP;_6:mI<3V!_gHNq%N=K!j4"IpWS\MqBaN,[`nB5gB@2>oIr'(-Q(G`\(=(3Qr2mZ"8WL<73IG_r
%X5^TL,LNW@-LE^(R(Y8#cOB,U1S0u4=b5inj>E;2)/eUgn\9'nV9%3:d[sYfLFbCm.r4E/Xlo1rmuiL()3tnW2t$?MCMgZ%`9l!5
%DJO-KgO4ink&Y(7gkOSs.iHjdWD>/:pN`0EKUgkJ^^\^0:,6hT@dC1jW85V(1BWCXGa*_H*T"qT^p>%LE4rfMqA!ORGu&W2okAiK
%10jUE[8f'T$MA8iLQL+OS0m(ZHM7XB+4E-crQ7]tfprH<Um&u@DF"CIAT^3UV/KJ)C_'_"rL"?E[u&5t@F!$OFuF\2B="(>1]-kR
%ZcsEu%NuJjn(Ae+/$7ZBQBr;_OQUPQlf3;+g=0o/f=h>B'93U#l=Mp<\a*b\lqkc-U!]633<(GBc9j/_Se0)[W<_%&"R1ADa0q#;
%>.*uW,f4q^No.3JHVb*HW*'`-Ao^pjl+d/eY;[Ku/`P[])?]d'0"kcs*@fRm-V83^46W6u?<:<qZ_X)FmFIqk=8eNH?]11=UOL3%
%L+%B#DDrWSIg=Nq0g@m/biM9KJ-`JCIfjBuqM,bYlJWq@%bV?js-?+RVu?(fmsiQr'tX>GbR!'Xp%YQ;rhDp^_F;$))>Km,@dOQ-
%c5U.)>-eJ,AuCceKrj&^r^V]'iVu)@&D;j=jF'6"]I4#7"KlNm<LEM)-]7DS0_E$)JNms0FF521E,7apkmu[0Eut`kNJsD(n.Yip
%')q_;fH2e0\_"C<?`[N"(\htlQO's'K+:eD33og7cS5ok7dAN6[T@/grI2W%m@=eGO_%CV]tgqXURl=J!Kn7GZ"83TWsbQoTn6Uc
%99*L!4J^uS^MuN`++F%;??P&]/\J":;W?m>D@e=?cs3PVM!>b5:LN8As$"="]m9`b-@XV%<25W)IQ\Gr")S7sN".ueq%#J$KG+6.
%n?[DgDI?KE:D[&!kbJt^Vb?FBTF$oYWR?PV\psW[!m&pe:Li\o5hhXGr&f7kK>Qk:pV3`j05>(HG'*cZ;K_!un\ToZn+cWL\$pOW
%/cg[rLF[65Zo:/>T//]2-hS6=ludG9.$TE/4\5EfBM:/iQX5&b.YqrL>?@kl:p/3K?6iULl(XcjU44Ifr:^;5WQ',]387]id2A3`
%ARq4b)k[&o$\d-gZ\nu<3uq"TFB/X[I_.TDipUesdFDP,[6`S86-s0*eGmM!3Oh+Hl[R`_gU38mVghA@J'WWjmksC\gEX^T#;"?E
%qamW($-ClW+JrIYY7T"cELC,YVG='KM/SumX6I2NlC2"M&pdS6c./(Fi7*CO;aM/=Ra$$Q13u^LIF'Lea_?76><faR%niH2rFfqF
%#a126HDW'MVaH5iX_fQad7jD%)CS[:6"f3W\hePG_F'KCkHr[7pt9I/8I]t88?:MY]drI%FtWI+JBB_4jN<b=fq<AOjS%;u5tCM/
%nCht9=\#Smc\k\mJ?&!+=1,t>XBFdn$tGPl>qQ+9O<*agC:3$ng$?$BMUoX>Xt](KF8M5/5O$c!/ZJ:]c\YQBi`r>75A=31[2e:O
%cT/NL2$3KiEl4HD0p8<$X7t>-8j@m,'(R8P?M^B"eoH,ac^f45ku_\3j'8M18\2H=]fBc)^fMhlYXfjg!BQJuhWKWNl89u]dN&%r
%lVFD2c?3&qrQ:jIh'D+>/'%3aKs/l1I?"@fEmq=W9oG:fn!2a\)?SY1qn6mq9=hkc\\mLSIVu2emoN9LNI(WfaN>IBr7`n5rM0Tq
%6M9tlRPuU";V:Hi8aecQ5ao7=IKI/:cmI08@!Bud!$c%QKU2!hWbVCAp#XNG)srh]@mB2d)SJ^L+1=6uCL.D_XIW\ZpH%XBa'1,*
%:bn=iG#o(T%b06!"ii8t:4>tWA,+m&SYi.d]\]TrP$G3JD-s*NgO^I,Xh:64m\6ql4_Q\5kT;*V,QiK9;h(Ij?YT3!3Ts57Qa%c`
%huYo`;*$mfcsA(#M=u;e*#@$Yb/^VKqau6B;O/ZK.'-!=kP,$F(#Sq+f2=ikLf%SupBO:M7AUNI;/TGc%:m!j'c=+oUnsd4Uq9P\
%b3H_`inS"lA(b@UZkT&ulj71TO\;_QHd_;SHbVL3\c+m]R!e">(c>FE^o/!ZXFBDe<?(T@#QaR9r!DrR%#-9DT9Y:Cfp,JI4;oU3
%gq6dh?48k"K@A<GT9jQrlcMZ5A_"A$3j_482&O!%OcHM+Y,6EVA@UFI(AF#)]iEg(2:C3CE6sICYLVCM\I'X_m;=MTNFAU;j#?A>
%q7EGs%)ZE`Ecn;PT5OJ5^.l#hC@ZH=(/:$L8Du#or&Uh-#>IpeI9ABpXcnBSq[2kn/U?.3ENL$rXfHkNB2P\6Lhp!(CpS&abt-Mn
%+VP=oiFGY4G,Rf!k\Eg2bHMh5I)I#=BlLRF<-EJ1eQb7>G&D*ai#8AEV6:diXu#*_ET-EiFqkrG8ffKEkOJ<?8R?<.T[92<X.mLC
%5p&?\l\\SGfTWn[UeLjtk3rltm9S4'-SS=4=-TJZW\id32jp*E`_'p/>ZIJn??<X`N<L-KbP'%Qla33=jn495RD>7r-mNYf)MaaP
%WnACO'7Y15\lqp/?e]J=%>QFS$GmNHJQFLmIjfm55fI:0#pn>sCAY"D^!!pF9%4'uQLN7V/S!Us<"050QVU-cX'J`lFO7%f;<&[-
%[#bh=^##SZ9P#`V<bbiE;N),g/t&nX1Z).Mcbd<l5sG$,3<<7bX14JmD;jFOmbVl?\_iqairg*=]'[smWfB.#>6/&)lE/7>N+uge
%V:timEQO;W-/8CiUjIg&3N;bB(&VHkd]Sr*S2Dtj-`C^d:J^TK&s>0"`:D/FpS'TEIN4>Zon-QP><8a+C6R&^M8kQ7#hXfr]!e`"
%CT?!)jD/!:8W%VW`n--f76-@r0.GYT+lbC_fmD,G?!/]LX"$,I8irU3eU3@17(Z?"N;^CFFpaqAmXgH]4!-tV8fE`bnLOg>l:ooB
%ndVg!ABDJIZ#MDODg/R[>$$sVC;%-i_d)'VbQZoZfT0dXPFoB`(G)BM"D5R?>@U?@K-?#jDfVhXa,VZcMZaYo<B"0#<)?sWEl;3+
%,&0]QIb#G#ar.5qS-UM/V0,[->r#_iYgR#9Ff#(X`NE0WFENF(WJK?U_<ejo%P4&P&18/8G=gb2/`6!I_*Fue@WlS0;c".QgYI>i
%flG!LaBlDDBQM((q9(cp'TrJ.[Pb<,>uXR7]<^A`=&@VOFrJo'QO#)o<,M:\j^fjiY;ZlTB`aPR@?!l,_f1E`QOuJEf%!q6($f;t
%ih[&W`E7A#$fdDU_"%AL?S.taj%nHb6/JB*4X>q<fn6IX<:.+Idq#EdRM0hJ!3Rg'eUgu.C_n*h-^AT<Z3`?f$%8kb\o_;Wl`.hu
%<g,fSdX%(M[-C5;_Ko"tXeX?G5@822+oSoIVgI,=FbgKnlO?V;2<g-jXWER>\6$]c3N8cVG'TKVE`PJ5jlN>cIfk"5mg:,QK!=pT
%Y,JI2@ssW,_!uFT$MMaq@&PH>N>@gPqIm]Yp<-Q:Vo+7L<\,4<qn`7e4cnsmC8b6Y7'jB$#t<00MON+D6'e*Qchkii[o`ScC$[/%
%dj-M:mE2a;p*)Zg<bf,hjsmL%3.2Y3Ji<&fX"nu/$=3Xg:..Rc1>?9A^pP-AcSDjSa)fn6?D'OW@%PB/cjfe$4&AO%Q)jft$_MV]
%N<'@0FuT.sfgJ*2[o_9IQ<)T`%#n2:71["q:?SX?2O:0!K2!Z"-Zjm]VZ*%nAbdaahRZDRP%D*Q]fqhP8+kpRWTtXtK;G*=FH[]3
%auNlDj^>?&[!sb'a*H+UTd(K\[F34VW%ZSCEpRe<c;f2c,@B2VG1*/6I-t:$.YduspcG81TC"qI"5K#S[rP'BNk\CL\C.]U]p5Y-
%pq*%SiQF5p33AhWo]Q'fXJhTKlK$'ij;Jd4mO'(*_AkGu<Bcu>iRK+8n4p#P>.pqp>8HVB&chejf031TWqUOdecfCKa\UhOaV@Wn
%[9N*)V3i0"\:;KcV>,k#4KQU41VTKO]uL"*F#Q""9CV6+LR5#+ZKN?C5s(EK6*f]_\)+c(O3:.jQnWD7-O5']?^5L\_[t#?ArYo\
%Qog4k%NdgbP=rB_CE/mNen70Q`Y60hIuiE!.)P]3^s,(sh=r6EYM61&ot9$s-7.SSN\hdhhi8d`-+NH<!:=lW6BbK@eW/+@FLHo-
%C7OQr2Fj,h8s/bGhF]0hdd]9sPqD6=KDr3<iZQ\M?rPbBVb$uQ8*[tMO>Sq!.eB#JC(VUl"oq0(dSCA!#L/H5V;@:BGnhbsV'Tlo
%2PGb)*ReB$L<*MR9DNO3K[dMo'0#f;^:DD(W6&1EQ'H/iqsYEA._<85?AHLCX(F=1-<QbTU?m;k=gZ(=)pd$#O<atH:9+`MC7).1
%+'ouD1"P2Rob6ntD1brA?0I>mpL<_Dch7JG'N$9FRi'f\D8pAb'8C`'lYFYjN:TE](<N7.1-O5.ASn@:/u98/X89AZ0&FH:4#J*;
%j'[,%ZU@&aj-XXR`51nikcLu</%;,?o'5eF2KsqX1S$7@j]\s!VZqKlrNr/fY?Z"gZYP9W8=9k/E@*(_@g6_%>J*YQ@_s[-d'=#/
%DYp6X03<TLh>^1F-meM+6AG]Z#c1ZNG!m3HScU=Ygg*S_:2/!ketjg"3%44]7",Hdfbu.=\F2T8IIMMrrV_q8CR#FR0AQlF/"7L6
%kKWVKZdt\6gNSr"*Z"(,I.(D2m_r4GGBMs%o;Ae*B<1.O*kpLp%]\L]QLd/KDgU>HbNbA,Qd1o!HQ-a-o8bf\QTMm?hCIbD1paGf
%^=/@D?M6>(?G%k.XF&&TZ2Wfu[?T!%4<&"8>l+d9L8F;7X5Tu>rR1EnS)1'.j[-:ZmM0mTqWCLIK=cd'P'?Bnk4cm5pWuUue9ZBq
%[^LNkHl='>rVTmYYa@YDgo=[uoukAO`V,XXeR#u#<*I"#fNrf/4,%9[]XGSkUm+Wh]FQq?)iYB/VjllJid(=@2Fcc^K2U5Ps4CG'
%p@(4H"J+rq^Rfjj_d<q'P]ge'G;`Nsn+R.o.sG4QM%>m*!1JbZ0.^,4WrCb,ijj9G[U-K45$6NdZi"ZSU\O?7FtjjsH@#5SmeL%o
%>.MG`l:Y?Zj`>=n[N8MeDZ/G$eb[ma[EZ_iB+J(T9>:oCjb!e&OFY<0[?p&/1_Zr2IG$$UWXkRl:L:4f%\(3rWJBHmhPj`C<d3o,
%McDj@Z<DS-4+`S&+"#rnf;bt(MiTABanG$J$S0EBAg?)H1(>>KpG[sklZ_6)/]U';CFJRt%dlLiMs[]@lUSA/X3SiC03%DhepS\*
%C%1==:<VhYIIO\!6hPQm@PLss%!kl'>P=DqY=jp,lOUGm/:Hem1BILEQ"m!:d#<,<l]+L8=F.Ql0)f%(^\*K-(RMVFEG`ukB*UEk
%K=1@Dl.3.=H?T!M<:p13qHE:`S$+Z<Boet%h+_67"/Rn_VHrtk\mR0RfuI!I8!nd=ZZJmY%EdQa0DH6/Y8.U@hj6s5O'hk<W`1%r
%gC-j6]oDdSIs>&I/T1!A:(QVS2L^$V4bI?)]oRrh4J8<ug8D&_Hg,4mqbYr$/q&5!>c`Dc*j;+mn"4G5:ES7DL/5R<iI7o2)N5/T
%1g^u@bE#tHQPOA?G]`"Ko+F;(k]cT9Q_#3tIP=>hK;c)\G1ci&E;6_'(aX'5E4(giPOY>n7oja4.qlDJ8L(Z-eaB%ihq"EbXR4n'
%>iLD/DsQ.(i/pOQ9:P>DlgT:iK<%eNS.'#%BBQr/N>#3b&(Skoo>:#jS+pTDWO);8Hf=Ts^0n&bIW?4mI9l$-Qm34Pp>]\1iB_+]
%GTQ3YCb:qDgPT?H*IM[eYW:@9+erqjl=rK_ipJE7cd'"GiEGp1INeXM]H<`#]bcYQU[hcaDlkR_`8d^@^.;QFTp`dVle2sWS#:7?
%Zi'?&>^r`O<poe(n.ZYaQ=Dr$^"9%Ge)/ndghX!.Qi'Y)daRC:0Wg'R%Hsg`DJtg<E&1VL4X/RC[pL+,;lcb8h`?fV^\;Ngbsq#t
%>rXtHE"D5Y[?O_=fii:.EOHsjKV&YLVrnTLZS)hIK;J.L&=n`Udt]RXk\p?g7H2nGLDNj_6OU*3*4jlDB2:^a]`2"nn]p#.hVGC/
%b]44$qhLd_dJ(Z'3_;9<046T95l7Cc^3R!1WGet)[hgkus(VL173<;t>;X`E>:5'*KdT+AX.<ne=(LNKIWu&;9FaN!7,O<]G'^&/
%^T2SW9mb7^>WDNPZ7(0]$f<kn?PN*.jP(9fKCXXhqpXK5E%j9De?;ggAJu]9NG`n3!Df,t:`k0lJ$rQtL#K)T?0c)%o7lpQTt(@,
%WGPhBlrnu?HMR)&%"E\M$<Uk,a6^-,q?!/6McRc_Y85E@o#pLkf4)D5+,S<T$X=:qf%Gduch?>$mj0S1$?nloBa:o-?4f'D/.L4)
%F[,iaj[H9s]#/s5hGGlO$#52DV(/`SMjjs1M;!b<C'HmE*i66m_l]6V`TTR89[2a5g?1-d]B`;Yh)"iPkCPmdeGd>:%69O9Dm_mh
%+oV'&NND5W5n,G)A'W[#q7Z3,%*aH?`jt\GNYce;PlLY\%[Aam>Yb6]R>0?!Ri^t8,\jVY$dlb>aXY95`]oSEBPo0$a!JCgktYBZ
%9C^3hGgR&Obdd1PEbR5gLhKatiN_E8%&-TN`_[,u0]DM`BJ?R+m#JMXRGcCeNE3;JDY:nG?8lWAbc0^__^`2Z%*#e',??.?L?h*;
%<GLj3Ql@Sqh;Q)2BkZ!\0QA#/V6d?hiq7Osr/[5-VF;'?K19Vp>@.e^j^1Cg'#M">r6<^t*u,9H?F@4#*[ZYM#FmjOrXfrMY^;t,
%\%fWU\@R+O;'*2(.lgalU^"&D&+l:<`Q%een'6g`YK%SdeVbL[G]2&Q%)9P9g"attOeqe_m\$t">!1<bdb2e&1Y)m,Fr#R+S"=&L
%=a)fb*\PCMo>1F(d]6G62Kb0@O-@G0X0fKYn?mUpb&(X`Bq*?uO_M)s`bHKsYC,)B&-)M$f>Z'DW#g)iWlp0Y2hP[S75HO_c',J3
%nn@?C;Ro>LH9$f3fEgm2[qJjLmW?\TlrQ#oj2Q9>Ph!4)$9i_(fh2/3li#]JfJ-?u5aV40rAV_h#0V]7W;k:ja^DYMFYICV'dSeK
%CVrL<HD)mWW0-P_&G,DZre41<5.oYr%9F"(Wp8.Q*b91^MsJ?#V,s/&6YKouAFo3.k=;"[msjScWbf@rDMM_V8iKb+qk"(rnthoG
%@7?.q)BLk_@L<IE(ZA5dHs#$LpBoOoQ7;F(lH(<@K89)5&3NS:_=Po@E;#]9")(/l#GYR!G"^.7mO,6ahQEXNUC)K&pRcYY4c/3q
%2=HN-Dg?pDZi3c,S*,KX`l8X=IeL[^mQ]HK2W!8HKfOMT."Up"n?-^?31hhk(=.KBZO/iZ5*dbh,nC.A;$q,G]NtY,Aae,A(Wn5]
%%:;%IS0rO1%k5h/X0lQW_Pqiq=OP%JpA3?Yq6ZH,qs0S=GIP%b"'hGCrO<_"IkBQ)r&G+bjd2HTpGV`8`K/8&U8rp-pBtos*#tYD
%/q8-Gh%di_IUIjGK9JI!grVLHpNDbg:t'H1%^l:;2\"$-S@Q>\m@M)a<aWUk7P1]Ecdoh(!Ec^(j5Q)"q/0j:`MPTH[-Zmu]fX4r
%I/[<*f3YST59+u6o(<&gCKnt$h-XO'fRC3;m"+AH%gLC$XTdJ0rq?'Uigk.de_O=lq:aPIs*!YClM8jo*Ho?q40cCEX%-D8031[u
%]8sZ4:)i;a4'PLkBY'@dg9N;?-R_*M/WkE==06"7q'dt(``c/W)2#?L4tY?4omkg./"],,f_SGbW\T2c5caYH*SATt13W'J`E*Ku
%Z>)mRhOkQbr4(?3]_Z<nGV5W$H;c?ERdm[o_1c74S:>.9MD+Dgk-WRNo/+c'"891:J)[XYh]=%PW*\gRhJD9ID5d*"7Cia]_em,5
%(Oastrd+T#FT:^Q`fJBJ$gAFMSoPpoi8EI?(lW\EpRnjpPK0<\VIi3dq_OZ8@LFi]T`PtCJ)*+=pN%r*Y.Io[f%8`AA'e?/;"gD3
%DH3%)h[84,r"_]ZqhXnIdCssOA,Y)m#Gmu'rUZn9oH@Rdqe5H"Y^a0iNU,a+o.T(bKjF$0$4Li,:EGjG5*m@b#-q#n5ZY'1N9bq7
%pu(#Fp@6rD+%rLcA=JSBhK%lB_VtWr4A#sBH?"-.!]VG(Fm\hX_>0I!4kNg0HWs.(Jl@*4_tiR;DgpM%]%?DK9p]:WcgCr7nhqD?
%S,QiF`VAiZ*Gaj0o6!o#]&f)^p\":0e(+<4\$&*L>:s`Y5/)7uN]<f(^BDf_I;+31mBTV[O2<j+[G@N#CWY2I$hCp3^,]DuD_8F_
%fcVVi]5Z\HIsKo;5C/.I^8Jh[KU;-#?uL==cK`Z\i5>0GS)Vi%+U/Nk+5K#N6)FRc%l:oh6W4pm<E:/1pcTt9V=Tm*o8n`]qC2cB
%D#\ab?>>^QV'(\Qr-J*4l1En<]3,++Se(bdm1rl$GM;'oM<5"fDms$>`32rYgP+J6X]HHWRiPcd(O]Lpf]]KV"-h.OL%%b&:$FM6
%p3>n%dXNr-V"+3I_aDcS^4%W?cZ^JiTU@?pC/OWLhc0?D>L.IL<dFNeE5uriHr8NW/;3OWl''/ae$hKqUfhGgrk>nS>qC@`gFdB6
%mD$1*`82r]O"Uk#M\I4\h`*[PWGJc)qHA).0&QVMA+b7j[LmYna5kA_e'+,apk\&?G\QV//$5oQRC0+\DnKs?4Un$u_#<E9VmVTM
%Cq1ZG[sI8tIg\C0rP?M$l/=n.r+YY@:s/7Y<]4"9I)"#bGPKKmnEY7u.#r2nFo.rli).F)'D=e'$6D)HT-n!\al,uWI7.E.%SACg
%p3NRsPO5LF`I%@:!CqV:Z.[o\lAm^FgL"AN]D+c$e=+&N6I37S3o&]Sdck0Vlp9sEW@c)[hNr0,mr.*/[F)\b[9kt3GOo>>2MQYP
%C_7255&;$2T=J\S8c&]LL(N1MXEna@qs_::3W@!Cl1rg*$0WCL^n0<GdAL;Sn(RKP:@11_TYI2-peXT6^S2l+=Ah%dH;*B`>$-a]
%mb3"aQC`RZm+Rp]=Q@^[2V+LDmco^.C.IbpmBJR2<c@e4nFW9\<Ua'r]g\&lO(j>@;-1MM4,7<)WF*-XXf\V\Ju2W?Mdscm@3IaX
%]aaT&ENd_AS1[KK#"JVm1oZK=:o^V'e^mGHm&c$RmUTM,#5=%dRBurl^V/0Qja>]1=O+8?\%l2)XKCd.Y$]n-dJ4pn0=Og+$^dET
%J)"_anY9&DQCbbeoMQVNfS7+V2StH#A8-i%d/Zrh_FF\B*W)lfVsE0'<o$jIqSf2:fk>KA%GCOqVeKB2aju<Vr_V587?moR:hWf@
%4O^fuLHS[H^Kp8oQ?Ri.U]PZn8@ra*2q6'(Xm3++(U/#LFLS`Rr>3?iaH%/7AMU18:7Db8J9ClT:b'm1Xl)(Xn#\]H3&Yi7U9XE@
%CMEP%&rbf$Q-7<5I1>N4eNISl4$Tl^BI7TprPj.nHVmkkLMJu=]Duq's!YV7MSIOCZh1X!.9;$5742"+ADuq88$l[\4KdRI>o1)T
%/@Bo]GT;7L$lU)DLU4*LoXrerKCkGrKpO;[7JgAs\!F*ZBEH`]MgEiJIl'a1,ROFNR[Bgj:l%k-BA*h]iqLpVapV#IgXb*C+R'@D
%iqB.qA*o3HN0uX1]c99'p]-QKKC/&c1LTp/_-u_G2@de`VNF+oiAL,OHO#e"p"+nMjUITHZUZUB)<0&GlJU:S6F;pU'ii4\Lrj%S
%C*fA+7BI=F^&)gaL!PW0MW^UI^S2&.lc/d*pM9$DX7]iKF6DN.:f#iK4P8@iqsk4RddZXejXgG1K$aO>!Sd*XVm,(Jh]!cMnmS<&
%pu0iQX-YGXs4trF39_oF!;8U1LW>#_]'U!q(8$i:r8?3"jhYm.i9?:m>@8d@qQ[`J>np&$b,SE78b"':>#3cjHOlF6CkTQh-l;u2
%ntd0EeCs5eWd!lZ>u;ZjeQT)$\E[$7m;4a^m)/!.5(.+\h"3Ojs,W)Nq0FgKrq9oBNY*6Aa`q!'/K]9q)>]"joK!$!aQ_`MpFuL5
%((.1-ZX,-EN%2S':"g>i\.,4i,LC5@%U]]0h?OYeG+a:!SG'[9pb"[._\ZZrHnPTlc1cs^'1_oRHe>Yc<j,o5^ZfEl<#VsbL[0_l
%8+jpQp#V7<2@Iq'%bCBINmuFU:%b;RUG!ucW.%sD@r56S]<>Q!\a.p=*!s[Le(\5<Y=Lj\<Sk4"UP\kmlhgYJXghZoqYK1K*QXh;
%O(6=^$f:9"r[rjuH2G(-Q#A>Lf@jHZ@+!kZ]sq/T><?biaC$*5A%r1Qi:Ze2i9GZ][T5R]B:Ib)G=?"mqUai8_I9G<./<>4o'?Zb
%cjO60XkRH?Be>C;i4:pO]m*HO;ZCuCA%/fh1B1bnC/1eHI9ShkW3);-)TDG<C4PEYrU'%H_Q1oek@X23Ea'Ia_h0#+189deWkW[s
%\E,4qBf,bpQ&-;7noRN;b,:W^04[Yd<mC9_XDV%PI:"V6T&&)SrjM=8_+!lul/eI796F'3If+>*BD9AoYkm>7#uHh%$f)C3:<8E]
%(-77Ks'(-lIae8n_<Ti0RA-#FpipN=ohl4!DeU*?dU@'pqXaqjp$P-/?Mn^,o=aqc4^-:\[hn8Wc[RMdSlbgAbPuqc96pih_-B%3
%?+Nt`bEXKJV[P<@qffrEcOO.CFnm^JF$8bfBi4g:l37n,o&9Q,2O>B.H_jdu5(h<MjnIj/T[Bre)G+?c9@/0OO/LjGB_;/sC3u'!
%$^90UG?PeCI'c>WQaerN>4!?&Tr2,_j5Ve;%IY,#!>u6djB$nKnV@bU2iMgd'BSG[S=GXRq;dll/Pt]%]pL=ZLd[n]>h\Rh4!c#;
%9-6N8VSP<JipY=.B%YL@I+F)00Db/CG,!?G0-t1X7#2p^b5V5Lk!J3haA"5.J!TnQTsFH!rK[A0qTHVX^\mEFJGS$:Y*Q;U@Hb4@
%J5,3DcZ`WdrcH&n$Z197.#J;Ra-I_Nr+M5["o64KinR-Gq=#,</bC<E_S#3G#^Z<nEuf'2_8u9\%.]u'Kt/=`Tlqn$jo[hkE^=O)
%*ErWGn/YnV)#6WU-Qb_hnm"*RaN_>_*AM(.St@P4nupDlJt[hQMkO!,p9?!L\FNKbAL/7L&QJ/.)K^W9j1Gg'_.`2g?7lA<,!,o_
%C^Vc&J>YU1nup,SntBp@3a>-6`0keQJe5rHGB4&/((F#t56fb:j@$d-EMPi:WOs7iYsPZ0(Q*KCbfs@p6N\;'G2D@VNWVX5+2ks'
%#^RQ!*BFk]+O5>-'/CKeIFf.2'DYBUnmL8N(oK'Dni$&2j@+@GG&\j\!6B=sfV),*$3L_glX8oXX81OoBL+jrgrH1@S[X!6.R\nC
%Db"t)&VUFj#hHQsq0C9g13L[]]0<Pk"CsnT&L>a0Zg&[Rl4D0f@)YLjC1naD<=j,:+*fhY3)m'BKaNK.,I+Ke&d[85\8a,24lACp
%5TWsIKEYda`P/CH[Y7t:ET77XEtm=H#(7aVoO?4,j'YI)"TgiVH,-b7L-bo/cmefH`Ibbg\;jl&#RXs[1aL?O!E@/__@d?Q5_I6,
%*90p',67n9HgYD]Q4q^,8_amtGR4jZq2W_;$lfjIQbjks:jrub$dD#@,8_1]Qp^F]i!I><)l2!q"Chc(*Q=6D6X)1!-QFTImN`P6
%0G"$kb]@=2pk/@k0`4%Rnm5l&Al2@.N`N!:Bs$\TN3ibQ@[/&?!^R@d/[leu.$+^UC`'r3I]gL0$#Pb.#)30mQMV4_,?NsO#EE<[
%0^tY=b9Da::nK.9JUuQ^hM6MJ9Irk*?sSYZMu[Y@M;65J&>)D,PrNKA@$?BE]H:A*-*X#N@&jjC`VU2Q:f%..\afi`AZ1?8OKb7j
%j!n_?@useV/6%?jS5>FT+Aftk%l>!M#O%)+^dc2rWur$W$3fZ-!3I1#"8`,t[*&U!Kp_RUM3\TMQbH)?Ns/thG:^"k7'Q!hd3ra`
%2G&5Q!"VO22]g;M773X]j2U+6pFE2"h`<GjY&+jUI>)n=!#>g@1BW4d'K@gsX3cq5*4(ZNXJ!@F"<mC[!W`P$-`58\*F`%YeTXk,
%lA;V$*ESr-`WVkJ0FHS@)@NlWjBK.OK.Q\X(>+.RC)ddD[K;22(M#3XmK0"aSun]b;:po,+[R@BS<sE\0Sk>tL*Hp]!S7\^#*";;
%I"84.L7o*4TVKn0B4/gDAi\AG,%Q!QD2F.eqLD;)q@9RW%nV2#IR?V=)C6;*/r4)-6OBIC"Xo23OAXa:rWlnMofZ>45n!<MH@pqP
%Io%B:"]@.7W%LD\>hZtj,IM#CLQKDH"N=nFlCrl<6,F7H<E#S6liZ,g^!cL]LY"X;?`B2<!W3R0=[?4p/.-ZNYE76B@GDH8>aohC
%R.gUE.^BO)HaLg\?^r6Lq18AYNAgG5<54r_MAd:a7Uk/tCfgeTrNQQ,nQVA%`sqZmTJQq^'<2F-fP,F57(!aB,rut6:8Lr,_/]uM
%h:()C&@DngYsjgP'a.!H8S*V@+pSh)0fDC]C_@-#&?I*qSOi'HEu9m6:BLIp2C/uB:e_M@U!Y@k;6QM&jZ,djR).F7NS8J&*=NA\
%QAh2M;4.N>_3V)[.NnRcoe%hpBTSL=cs!9.0U)\Zp&WgVRL$f'%0@P=.(4EY#B:T8-DYD_$H4kk41qR'-4\_bBNSYBesJu9e;Jp!
%j+ib6e>QlgDPY+SQ[4oG0r&:NJ=rtkVH$O,Bqc_55UrLEp)QUfTRr!MpC9Y`r;3_2/Pe#(lC5ciZE-YAqSo5UJ@?*'16BGW(E&2>
%W6-'7ls*^j;34g;67S#sar$`r^D'gF"%8X27aVEm)"TeLfef!a[/`bG3SXYK(l4tANfC%QUe=:5H>JH%eU[up1JY>-!;]T:9bpX?
%QSja6ai$Di`srJt<Q%()5iarp5r3Z!#f5%'J=$]!:d\*Z5a.+C1sl&@"=>144QK9A!nXue?#+S6VA\+7CTUG?iMTL,OedlNe-AjH
%=/J8eUDbUD-S%je5>#ThM+[_J@HZW(5fpeK4UoAV,<l`_/m)Pr!U5#1.&pc@QoeJo+Sp%Idb>KJI1(D9B:q5AG"eB<>+Gl^';3^Z
%K;uMIN"LBV0LoZkLB/oi+m_QA-m[rMM$H*jq.;1dP?+noa$URQ1a+4l.fgdf"!MBFV%Be?#?4fpk:S>'#f_QQK[/l`lFTg4+/U13
%Mh4I"MA:EM8Of_]Urfd]@]KGd/&I0;gn\3+<[@rJb'!m<\nt(i;r^_8FQG6p=]Pre?&3=FKI)UP'89-lX]"LK=L8)r(90kcPl`-b
%6/?#;6PY:!`Ku[b:-na/.MOde&"#nk/muq"Dc]25G\%-/Jr5Mo\e06'"+ipo*T&6,!D<VT$60H`7>CNhAdi1NLtC<^<7Xke>;&c<
%L`9@0]`AQS((2u:_@gIAS4(OI$5On5(Wp>!j&&eYC*c%jOE$Y'aI1K+6"#eiA`FS+-;\#?Yo/UKRQ"iS<c1W'HVb^(Sm$sk&@,uk
%1_%rg*=P@Eka]@]*],^NJD=B<,9#"=,S:_KkWKDlgF26ib69"r%hGa,KS##E?J"3-jJW>])<WIQ>W-!q"9N<P8=HPg#Si>M1l0PE
%Y'%he?41"BlafJTM+^E6bA!^R_CZr8E+HcV>m#7P/#32)L/XcXX>1U4',]&PCkaJ_LKJ[k+>fZtf`mR9$jP+>oXYa2HDEeG8e:WA
%<>E`W$cAacTKoO4=jaR_SEbT-fdNP([YrK:m0tm(k&sRLBG8qDOQ?MG$jU'=c9r5@`,QXs:A9CV"C9BE@r_j+ZJ\oj-plN%0#uTH
%#!j,ek-#/-5i@;6MT64fK3&U&e<*p2kU_7q;22;4*i!"m7nZ?'=i-OG_%KcFJcn>>_EU-l.^DlnI1dNmdtZp3!S3/2RM5=nq';%f
%4(2KMKM\VYQmFqTon'\Sfpmf^a;3>Mpa[+AXG-dFYjl.=JK<)G8&4<o+a[)D>VnAkG0DHjb_L(P'SEBj,>Ug;"hLAl(:h%CkXQPK
%]G0)\d8uD]pCHXqP!OIdjl2,]LBZZ"ckSoA^6jt_oa,9)6qIUZH-7Q'3"?>^Og'XYg:GYG8BtF6!u6pES`mj].gSJnEm]nFeH+a9
%Pq(PM!s2jf`sU)Z&0,r/Y>mj.%Ud"4>!(g*'F//PO3!e`f"Y&ro_H:CN%-uO:JQX*V1bhq.1Ja@,uS@ZZ4[77gOkNMcW'A"S0a^/
%M%L&O>#eO]MQ0Pn5gan?%15,LW__?UaR?OY9DM'%ZIU1Y*E9k>C!u9'ma?C`Jk^Ka-&Q'>EG.\C>^Rn?qA(*=@(V>>8DFAQ,R@=P
%-dVr;Ret0p/KYFtB\>em&g\71?50nY.GH+I4E4nj8cilS,`gSA!kD^tY#f.rkM!YJTdX*dIGtQ)6VAD@jh,O-!WoLM,s_g6/]e-L
%U0%W*Fm(&CE1;n260ko6.*RAf1rO9lVMf(K<21*u2m#Jf7u09j_)`i"$%WeMSO;a+jg"]FVK!8V$84:4X(-/Y))+`j!;7>'$*q%f
%`Vn5.9l:bL<Lh?;+j3nde:t_ca/DnR7-jDb$0.<]lE";<X@+"m)adj9X=?so77U?TNM*Z$;;-`99UW$:T]i<s5Vm!uSbdA*,GJ>5
%BgH=*VU]CBlB%$`Y%uQZ$?]d[`^9!a.]CEZWuIa6\B,_T7cZOqHYIO<V+IA')+q0q,(9;//tf5s9l2=@7)<!Z#HBg*9)!96"cWSY
%)RS3p4SqUKN!Lq:p.cB%,fluT8C_N2A\t,/*<g9.5XV.Kh_^<>THF84#8!"B[M-UuMNI"!A:Y3oG3!<JY4aQ4&K+tlJTsQh'smHI
%674K3js/&=dT%#S:'3\mPgC#_Q<9h*:bpMh1lYIA1)1i%.\Opm@giB0>D\XT'UY'o<&?#=\=\jM&8\_&Br_5u*;?]YYp5gpV\/hB
%K/RGUFBS]tm%Q&Hbl^e9nOf&>Z%+qZ$A&k38BK;p"V_*FRhIF.&9Sh'Q5`,XCq17+@p9f8inBM!QVEj!<!#k2BMQ1+^c3=DdgfA5
%$2-VTHX;$Z)[[sPJ8oICG4DIA7bJX9(AS(mMB-+[ppSM+!-ur52saXtc*I_ip-VVCBf98*.-N2r[,bZF(Q,9uJIt5(eMP;h7Uk)/
%,T;eJ:'W^,jMcM@Y+Qs\iBjGq&!Zu*aI97kC3Eu&=[$%?_S0)"mb?gi;pZ-Fk&t9lPA1o/X`3g?0tCsPGQZZp)RW!`:ikmD`EsZ:
%&k:Y)^hC1D\O16KM4.EL53m6#<[rda,Z4+fnPCY?lA8f[<082-Th?p=rIAGpd,>!G5Ei14&SAP=KMh3;!&G'QD_pej)Br2a:9_W*
%PQDF'Cnk6o#JmRD0-oUPKmH(h+^Y_*+))aV8%%HQf/k$RCFHVYp@1jDd?5bt<J*Ej",3t:ffG<FT%H#R'cIX&@d!t6<"s=kXtQjl
%@Fp*eN[_sS()m[!4N)CU*T@O`g0(ZDgbg-Qgnd*GP\pcTJdr$S"pf'7*8?'/"J<p="-%Og;%#SA7tenA=J#_?i1g&eK:;1c\-rbk
%.mbnsZm>iZCIfU0Nc,X(Ur=<]/4QE[0\%mI1"3$-7@QET:Xe#_hSgoB[:U^aAO:&\dL(TN,or5U3XsNk<@D`j!$W$Z19rT!/M0Ag
%J2k8aTIGne_1Ejb!@(0D4d34,ll$cB&mK$2W7;j))WYgFG2:g%d*RKs)>Q=fk#2(SJM):m9T*9[.OlifLdf6P=VA[ZL+r6n#bqp)
%TuM3hZnBBW$Mkh0Bf^o2%mSuj@75e;h.G[ZK.1L4d_69fCsjK2#!H/p>tE=TD^!\D#=ABaj\.tU*&&fb&To8VJCB)eAK9(LVmU6#
%C/k@ImkBJ@4\u_I=L)iLYpl]V3,M"%ULGC5a/s7(`m\W:LPeeq.7-:nFIXgso8$[m-BsOp!`=HDM,gqebk-4f!g8>PSf\jSOUG<G
%8?5[NeuT@=m]"o<,"AMB4WYERLj"nR\iG^Q50PZP0G,o'A#q7]YDX"oOVkq;fuQ&YK%u5m>Hc>&PR'oZ'IDu?eZ(u>JrrU8j:kFU
%V61/<k(8JL[(9+\06^KE\C^TNOLlDl'tWaD!=LCMip!D^Jr_fSEbG_X#WHeJJe`r9=<\)MXtG[2pI:HWBVE9.GfG%uWGNNr:kLSG
%8O:ib6#u+pg>k9"euX&Q9S<PB;(drZ,un.VWE+-Q(*\$T!-0:7J-.u<#q]M=F/..qL+K($5[7gg0N&Q'Q$+/\Du0[Q*"/rt?uqPK
%U9P[6)B+2[0)]f>UaB":<^X\?Z[Kk.,3(u**p'Y#UWFIDH=QJ'LI#+Va:GFl"klT!q*?T=R*WE`MCP,q:]M]73ZUh*7Y*n7kd:^'
%Uc5>BQ/99_TV<X4DOB-t!@FKnh3JoOlL7rZNeZoX70?m$lX0k0bs>$h7>@"Z7/3#i9GN6R`P+mU:4Y,1&KYma<DMDJ^dBhQFCPb+
%=.!R>r\,*WNamN4hDK!cL2;E;pb[bb@YB'cHYc5'#J5YEr9bE^Nd;\]0J_X08&Cp;=s3Chn4PLk?NWeO<tl8%o"Ka4T;Jb@`KOba
%5B:SPAU?f7`&Ld@+-L&C!d]GPDFoN3OqAZPF2:D4j8A#/M.52WJghKt:2UIFk\$i-Nk4:V2Y]Y5(lf[@']irKi%lJ8U\-5GW%%l<
%*U-E5"_"S?K1N1?K2eaj'F#D,bOt-c>fFWcWa,X^^cp.1=\^2.ei$.f\2Ao=VrNUGUEdpYM2#hQJJK]J<3R''oJ+/J9CIdlY]CTJ
%S$&Y*[+"UZ%%kRJ3qQ\`58ZX"Rn'V/eA4N2D"%OHmfmo[@LsQuCG3PW+7kTsEiO(MOlt<gpbE=c,4YdEV'@:+b,8\3j/7SZZ(a4V
%EdUqf)P_:<$V&o:P&#5S-#,B;$s9V7>)=GB?(b"IL0;O!M:qIt6=NCJb6k*Cc*:Po0^#ce!=R']fRZD@m@G>3W#/HnLdbC3+1N;#
%`sWY9EhS([<u4[7C05<4Y"C1/Jp]bq;370g3:[7<U>q`u=<(?]i-@:C[N)8<"DAL(/q5?]K*o.W.!?o_H`1rKOC6loIiG;JUE8.1
%aD2JfXu&/0Fd:+Io6=G8XTVe_k`X>IN"tnDl-P#[W5maaKOQ[<A=)V1;?f69-dor?Jf+(?gQ>g1#3fWk:nS69^0ViD*9[OVRUr;;
%rKWi_(K13-CDn@<>[/AAdtN1W#A%F668ntHS8VLX3:[11&lBLWel*DSVM"`L#2tgNN5\*73r5H$M^20(("oJ5T[3j^i99'm(F`&P
%E"^$\V*oR+7pL-N_6sq:MqFZ$7HHu]BZ&KSK6O'r0<3CaN%D]1Kb,8'dPahN5.6@]pQ"]VB\>e]qir"1'Cu7D=B*&ZK<;EYAN[!E
%&E/X8>X&8^=BOib^_bTr.)oI]7$Wi1;llZ)m.-/Mq?@)9nTYiBDfMuM`PE$iVSrRj)&%ZnG`JlMKS4"c4E2B3PliaR7H0W"LJGZ6
%9O/g834?_:0nPZd.3r(Tco>Y3Z\%DD>(C$V`-csJV4huk#VTV%fLJ,pF7%TpQg)S"9BU#69#k$Vr4d=cfnpaiL@#$&[I"hKc7sW/
%1^jg)*QDJufH^mL@>!+GCqa$q5%h'gJjU6(Tbj)`FGgWWY/)a:[,Gtp!68JPHCcqZE?0tch'EDH5T'3-4,>LT`R']>'dgl(Ch"/f
%N&Z&Ia)I6&7n2(H*D]qI$9;EETR5J$/]8^ND4sjX-U]"I=1f`3(4;NIc]YcPl->QRWgkYZQ_BjdUR0<cC[d;@YrbEe7e5gr(UMaA
%9Qe;qhXT-hJ.H5T;h[^#E'CC`Dh4T\<&L^1qDo1s%eZPmO3dRX,/.>JoWj6)L4P1L!+q$A1m*fm#K^Tr!IYCG-6)fL*8f-eiSYEj
%F)f85dl@8kA:U&B$cL1sf9Ls2]ERg_9n:Vu'(\QjiGIgM$eP^d)3H-KY\BgTS"hkjEM9o3+*l4EIG+fl_hVk;O\sEKP:'Yd,lrG>
%,j)Eh:oagL5fon4-Qr7^FY#,C\t@P36Dk)\^s12^`BcOk05m:e^oB(T,XVj36R5qo$]%2,8iY!O$KD".gGQ!0&2u-5<sabT<j,5&
%gs_`m2uN=IV$.SKBm%>CNmVA=cPJJAW:$b,dS1ce_uQ]K),XM*!T1E,XdiYOY&N=PG_I(]M$(DZl12fm35&63i$D.A$&sP1Yb_p5
%*K]_=Or?eAJ6FG*;*mR3C,RmV3]DstLV61b7>M$f;hu'!\FMO>T[:#qY(YNiN3k<758MWVG"=e6"dV.cT2'OeCK.BSYB1`r,(pNp
%_af*r'b>^-L^TP+0a3!d9='"UaTbZFL_Y1gn3#EJ-D;h4,!OtF-pib*_Jp]%TGHE7nLSqc@r[YD][(0Lg!`P-,?]u0*>M!oL4n9r
%V[jCklQE8bnn<lLfHTa%*/Krj4HY(<5h?lk=lVe)Z#Hh@#k0B]4J@f1*/9A7UastdL]er]5K5r:L#B'db!VkPW'J#2i7hEi:kn<j
%FuWD)?54S_=+K:B4@b^2C^h?k!XV<f+Zes1[OolE5UN]85oF^=:8f9oNM0m=rF9.P3=`J_83reT.OY!81-=:DYo9@n,&RMH-liHV
%&/tA,Y=#a0o3!o"N.*FBZ[q)@$/=\<&_DR_parj+JK:)d158/)RnSKd17qLY:m;-;ktF?JMiA<8EGa,j`'@uH%;IT>.:<<%'F*V]
%;\3[t/k7C,-o)]H,,NJfLnN.IiGKg=A>I^IW63dNfW*@,K!]Q3;6/CbUc5>N]YfEj"8(YN!#&7=HfXo6G7oa;3]\q"b<qt`N<Z\?
%*)mBg$`kKCnhYLZ?::MlU:,dHM:;t<Blg"4emTAuSGHs(ZV:HV'2W2I0k-1snP=ZE:'.EUj#rifYfW_]HC]9hMHX*J_ufQ6,K8k\
%EeGemjRZ=aFOKX]epGg,'O_%cG[h>JL/s%"\A;Pej"[tVg5NNsJ!*&f&>^MNZ%-ll8-ISj$93/0#,tEW'7lEk9UDPIA<-mK&t.c4
%kYA<G!kICfMt!lg8;Sh[V@-]?[pZ?_MWuON/s%Q\No4S^<Qq4W6EGqn56]tSN`^!fZ%uH]\kOA4'u6"gFG4*BKLZe->154p8da',
%5+Ab<NX'F6q<`Jp@g67tIDK^[Cr7inh0uela\4*>.a3[8M?]`8%i'sG^_,$u.24WAcGkr4UdU$^CV]*MM!VnmCWi@m)fu3!VO6uZ
%)l=Wm=+uC=$*kgI+j?A4@'iN5'fd'I=H/GV"ALf(Eqi<5.C";ZC^3)NoR3%_!_$[XDLX,!LfH!m'PlGm[o_Y>nU8?t`F;S0'h"1?
%K"!19%f7(kF'?@[50se>4C=V=frDo>MD,s#8@oL#'+u%J$W%!8=ajL%%\:D^-j<#r\rnsO&.E]>PVoDb#O@j%=UHM3B.n.QLStgN
%[fS.f/f_I*VghGX3c)Lo^_8*.AoB@[gQ.;2j&YJ+3c,5O`^#(uqhXmUUopdVW[ZJCb"H%eXWW@^E?YRcUQ;GM74l@Y%gW71:Pqn)
%9bb+U`XI-WC50&]@Gk&I(qgOnoh+=b8IJ_]OAr8U6/#^[W/$^uJTJ3`>`LtugNCup%!i0-Jr5Mo\e06Wi4cYQK-8/:NT-JYModH1
%.%,CGQ45!B,!)Ieoa:A;@Hb*&(mO8&3ei0bH>4e/THfJ0[-A@$\#W?Y5?1o[`!Ecf7RdQ9p/icLRg+\?;9\@eL-h_j`T]kQHq:^P
%JQ1;TiM`]^(s]?92B].p+ke9:K66]QX"$HD:N)>G.X+j69,>ss&bQPG=;<8:>\7#X+_[h8+:Js]P@;FCRY9*+&sGtOlrN49%)-&;
%Joni-:q9t5D/rWjX_Q$TlX!ak&WtX&6LD8g+5[eSJ(l>nLr1r6\bcZ:/5dKkjBogRRt*kp.23<=p<b/kqj:%5YW*gC(#!fo^nUTW
%p1-`cC^lno9,3D=JE6!3%]?(3!7<8XgB.hefTK`1U=^:*OqcqsE)MeDmLXJ-;#gJ2cZ__W3I%eM+j*KO+R#M[.2L%]W>5'E73`c#
%YCT[)OcX4G5#l:?G)00<k#fJFDQR%JiP8PRB.?Wl^iDkQ`j@WE;U+K?^esWQjTs0Zp=Qin^Tc&p_B=.d_uuhfO"&-Xd::rNTqd0U
%EL]*!F3"h^KR?NM(l1OLr"cU=;F7At%Ib4,DG;W0P4r+<D_Z<59]?tS=2JQ@WeBc'iWZ2;?0KmC83eA*d'E1@:b1aKl;N;)O<*+m
%LgpP6*.+2\c8n<8RJ8Ol/S)jk^-YVY'hL%mlIr`bN^S70=]Q.D]oX%a#5P44;"#Z_WZD"sk8K0I8U?2:0R*^SRg3+4+^XsSBrE:V
%jYHp'8Ql[hdCEeHq0;6ON^Y5SE!j$'T8H/Ro:5s[CXm\BD'N5j!hiYC\Ur7=/mk-hWn]"EEhd)3;a@Pg1'c8,1l">:'#GoEp`j4&
%.7R-6f7uXWe00dKjDWM!1$A#PX4*ba(c2rf,D[8O2@iSUN)ggi%or(/Z'5;mdkI=DE-:.!_l!MA=VOPO79-$,^sEeXeVf<ZL?P[C
%Tu)5Uf7oEY+?oF0"[mqK^>OVi<=n36_FU_&LNK5e;!sr^Ril/K[:9$PZkIQ@Mb\^CDo=S/1r.I"Q\0DE1)>`f<dM18YL8f4!Fo?H
%?-%V2X3cPH<Lj>NG/`ko;3("mCW"dsbEP$hWeumPdD*&]U-dEh6LD;Mf+E0U=_2]mOD\A-dS,m=8?QR1hHW6rdh%HgA+`TJ.%hQk
%8"A.aVm_t\>\d;*oVn=WPYDNH*3Y&%$lAu3U4l_)_ApuZmrck=BbX`/:toPi71l:3lop@gd\17$5r^DA#;;+Jjp6nSPnq*.s6B([
%;NkhS*,$dYNJ4&N+:A:"F@[KGKjpc94FU,WiAhpMb3NOd+So+cC"!E`?:Me4<MptQ?%o-r9WM*&N6jY@]g)f374Jf$cp[^F8l.&9
%WY-qR0LdpRdY3IcaOt="!#q3uNjqnD"M<Z&-]6),iW)a+(.g<uKO&gTVF,SVi:>j36G8b-Al:Ek5^X"tH6-XB^c6.sZr)Z[`?<*H
%9V[Jk,!&],;IN&T)Otsa0CMhK!0*GpYqG<cl1%N(`LF?8]f?4*S?_C#ll9j)0%Wko=`rFD<Y^1fY&4&*;:qao8j&eIWF6!J$H@8l
%ptgC%-0@AQ%]P"jW%)<Q\=9LkU*d!\PjkrZMO1/!2Sid$0SO#k[YNO-_$3]`I;S]kf]778;2kGc)"T!Bri[YMhIP0)5[h["VQe'D
%Gib2crtGjP0cr<Ab_jE@9maKQOpj=jW)6tmiu4H]e!4S2)EjjjD(r#Gd:?Q?bcD_a36PdFdlB*.c/;U7>j".[5tkMK)"f?!TIWH0
%^.PG!\PJ3``hf\bBfV.]`UtGiO6'7e&5Nk)>j?R(SS*bB'Psuuk3ohp2H_&d)7`1j@#)VoNCe8GRpDY6Kc/p=_AZ(`&B'mVUmOcu
%[tg@cEs2!cRT@iMpPuU!'kT;*_.c,RO/&ptNLnP62OMu_=/$?=1T:SV9]^f('3Z`HVPG)'MBQi>D4;h+prDGn"W;uiBZaDV^6JTG
%QtgH;HDoJ!&YbYAK]Y"*8f*Hg.>C2`O,ff,]J2&j:P%Lo6V`,KdnL^-)FB&Xl#kH@Nua`oD'Uc#ldVAg&:TO?+*m<GbIN!D:9RAX
%W`9Lm]h9kK8Jn:(dgPh$@I0H-=\CL8]18lZ7-Rkgh.0$A##3'%Zn<d=ca5BCW`C"ofo:qS8Vk(a@jrUgLaj85@Bs41K!],).!qjA
%91]toFUW3HF!krA$[2m0#S\NFLtlJhMG^?24$s)A\\]hm5ZL#3_?@_N(s$)m.F&&gJ[fqDJIN`L8I+UY#V<%WP8gbS`q9m`7*$rM
%i444q?D/&6^b7",8"5Zn:-pgHMJ)@![:U&OM,LDu$H%^n_oLR?nO/V6J_3^?cgY3IqSa<],)\6aMo/0"*JM=9Gb9d9)(D)kO6"J"
%Se)ug@Y?23&WrZ6]Xp_F#CYNN;MHKN%"_eB\sK-+9`;#Z<m/L`#C(sUp;MRd"d7<u5DEWE.[CdG*JTRXALFGYgTiEV.&GXk/DJ#m
%dX"<,]#B5s<]"2M7].;LChI,sVq^4W($naX$)9tJ:L&n!"iao%S;blm$8-)8/-QlG&VcMu%P:_-p]=5_kgjL2;a,q5?u'GD;3%lB
%TAukkC<3asI<nkB@Wdp7$6g"E-kl7;L`-O47DBjslO,oH3EuV=U[^3BMU_-4jsLS(Md=/W1:O9<)Z4K4>oM;HAVB?UB2:uOka=b;
%'ZA:!'8_+Qp`[XZYRaj/pbYl>6!G7\3SNK>r749L&5W'1aRWgSU6Lrp\M,dkh:@^5#6SI%!`-nC+98:h+^FIoT6k:NK:uAr@o%nH
%47E"XpR%*aX^D\r75]oC/(=q\/Z"'g[[%pE6XI\i)):h1U6inu']2oQk)+]YPnog+j')u3(LU^4+iO73*-<n9`LNYGa%GXiN^lIf
%$,cuXnt8cF!u:!Q)hZCDm5T295&jMpB3f>bE/Ajh,*Z!6nCS>&'ff0X6UrG)()JHFrF0Y49)46$.Q@tBj2j$e9A^$ZKG.#A!KLIr
%o<-I;,.7mue00f!1_ak!@*"D//_sGtp>;mQeCp497nF&=jq-m"O:/g,^iABeK`mglO<GBopoFbcgT$p5$4Kq,_@/`3@%WK7N#FGM
%K;Gnh>@@B>lD5u1W)6QT&2'"10gV"5ljlf('a2lqaX:AG9O/L5_gr,P6edUn@Nf<\eS:7t/r(`"HE>^C#h.O,6_O0(/Z<uf<]<@B
%33Ph"2!]URf:"%Df-fd5,o`INZl,T")lQ<tOb?-&6N1q[U+5?J,7deDJon8q:nP.4]t/`TX0lOC;ADhhOsbjUS0B/ZD1l(I$pi+j
%\]eL/:tb@MO$Y,1jCrC))[CbfcAEX;+E2uU)Pa;ug,NcEm($/fUebc-)[NQuZCj[AXDX9ZYmuW+(=sGOH0teiMi5AF6e<0OHb92&
%*dWe07g$Y.%?Z_g$HDt-+b_2B)DT+E-i7/V/MZr,7O$Pa.ggWRm<c!5V8A2B2)t!%W`%5#9Xl68[9r<K"A5+"(J@q+&uK2e5)!XC
%(Z$0aN/gID'k8<"ZoZ\]4kK%e`-=rrOd]'!lA2?([2MubS.Pq&SQ%Hr>"6UTGNomrr1GAW_Z2'A,]l'sZfd(:-dV</MQ%kTK33mW
%>F'kuS6Ctk*[&NWE1p"C=8$IW\6ujd8>Wg=X3`W:m,524"E0@>+uU3D7IUD!ZiVSMbAisb8X,gTi*?e;dn1Y(@+ntCDS0]f"+Eq"
%ca^j=0d-/YLQ:@u6T/QhQITE^"tFIn])o#'Wtp)<<Y`RM.i_9I<i85e],D$r223b,jLT^F0]Z:M&X"dcL@f"/^W(gdPV8EGJu+^L
%B/_g4e+S>WW&?0>R"F`a[L"0@]b@"F'[sYjU#kPNVT.ejB\u_=A9R'C,FE-K,F6t4D2VN2O!_aNZtuBPH4fWSZZo)<O$ZT.,pSbs
%ZF?-M7\:lEcIq8_5W65$,YIu)R2Tc"OlpgWB+9Q@lke3Q_e?tB0N^\-<H4udibPf56"+g!eL=%-=.s=5<HT`.,P3IJJB+nq8(oqi
%#g!aJrtL>\pouc"TK</h23c/4b>Wp-Y:[2lO^i>Zi93[u_ncX:ZtuBF4rbdg3Q/rE6?9Pp7km9U(Y>]9a"EqAN^o'I/9s$g4KA.7
%hT^00M5]O!@TbSp*Xc`?)paTg%u]c%ilXX;6pY%!rD6g25^1=(C<Iho$[tTMNH.J:)hp76j6:U<=5+@S9Gsl$$N]ndRU4?N#t!1i
%*E=,S'Hd8NRYD%Ai1*HNj#O.a/RH)pLcIWb^_Jr/]EbC/\.ONiEg.\B`:/gVn_F=@,jG\(>eq]8W$1<herrq`ZSJH3k*s\Qd^DR4
%J4?\DCG*@%ArB>B83;MT(X6(rB\>YY)_cMbLdLe_U"T[;0g)2P3M_9`0rD;+1f7Vm>_3*:HcG[rO_o&kJ?!(%+tkVW#5f[V?Cc[i
%Y#)'A=%TS*Dogm[40;ch<Q0nV#-*lL<]<@KP&o\>is9ojXA&fILDAXuQ_F8oN7L(tOQk?,SEGD9<&]S?T3k",>Rg>:(I8beLlejS
%Ac9\H0j^l!US5CM<:>%tLf[e-TLKBNo_&`fK(W-Q*,24Jc7;GI=ljQJ)KQO,]^7B?4ui>OZ]3kZZJaS1LqZU6*/PT/-L)O/_"n'C
%hM)?hE_sZWUTcI\&g4d30(pCrMSRHrWa?C5Ic6d,:2CX:`,ih"FUHR;6_Sa;"&B0/l9nm@hQ@3.dQ<g3<+MfTNR4_l!@82Z>q7hb
%JIWV8ltf<?9qDJ,GP=Smk-[J2U4>T4NE-d1<0+Sa085Bd8*_4!J`u7$D0L4.C9V)T_ShEDam4'J*XI*lX[+FOq."<fVQea#?cK?H
%J;m1jaV$dP0O[apbGob'#U\u4Vc7>siW0-V(CqOkL\bb]o4d*K.\0h)FS$PFPtmRnL+o`LFL8)9L\?`Q<BY1S'J*8r*Jo]M/TRQL
%IFFK-S[&L'Yu6E8Gn47^WA%gm'J.gt;5IB47dFet)BDP1C':A5Nm^*?BTKKpR`bl\R0,B+Afn4enNA<Yq\l?\W57_'@:U@M`i(oj
%jg-Dulsj9ZB+!(E@L>&O$;a`;R,5CYV]EadBho('6'1Pm>UnlF_rsDDe^n3^KT/uc#IG_5OUdk)N^ni9CkP,DBm'fR@5U$8?OV>@
%UH6@!C,cZg_,lddcS:@;I8VMA7$S[&%&\\UhU\]#f7;G`^0J%*VF<@odOIb$f/F@)cu2RQYtteIk`4"iEM8o_gk7,5;i[Sh`:FTK
%_ZM@BEH2sAOu+5:@cAA,_PfSSKW@/rVm-[4.gdr-J3u.>,2(:E7Q!qkn_'t!EhI.aZ802k7*\De>6V3!+GUX'2BU@UkU=/ba!hWg
%)/2GCL<Ss=SRr5Xk/XG.2%6D.pVYt92)o,\V.2Im1$,=[0GRh]/TFh$Th)U+2F>u2pBoQOA<^Ll[:Mk*fod(B"bg:a1Y[K/6=\"[
%B9uAucoe-4*eCiOX?i41'&Uj2MN7pu='#*#:C]/a^JMk$(!'TA'!$nW$/Q+k8K2a5OeSL`e1eRQ"_02+Sg6t?<@Q1Y7H"QXGbgVg
%G!n5mKc7k0`bkjZNLc5NQkkj*%Al:)RW'Aj-Nacn4BDCDKV'7]C3V#D_h3e=6Jj>O`d\Pe<Ml-D2[[RrTEo$t<0\="'AM[)0Z5'2
%h,FOmOfH,-_DQsCo.ItO=0H=a(ZI:+Sqd+&BlSn*'B;rlL/[-J*Tdb'K1P.^'W@<T83:c4O3/B`A*Y.Y2.9=E'8j:/$34b.W.cio
%o#\rEIL"[/Osh[Q%cYhm+IV[_L!XSR%//Z^.3AFX*')%?'0[dp&8tV?S"_?8AsCaS,87[T^lLRn&dgH2UNamAoq06_jS#laSJTsV
%A':p/G^?>V*ih>%p7b..iN6(_%SnJmhe6(V_M]aYOJmaPVn/`j#Cb[](YJrea>)V.[#n-PS=r>*]MEET)C2J4lJH(++?egs;qaSI
%2St^V&P$A%Hkc2"Qt(u=9iMMk!4?.'"-#hDi/pls1)s5,^-Xj,9bWe_`_2=3A3_jl<bMoKJ7tT1(HH1nWaM@k3BCDFV]]i.2:Q:7
%X&g+Amp'd45f0KH4.$d_A>Ib8d&T1b[;ue4F-eb,1r_&PS9.CECQ&KQ\1P\pWhR9?&6Z(K&G$9\$kt_X)TQWfhZ[pVj"jf=-).li
%EVZ[Ghfe"W)[+50Eg/FO+@ggN+s$d#VD,rFE`Zb^*Xq\J3=@sHp%9?\o-@Gh5tmf,41Kj_]K?tD>CjdnKL+;ThSu<\&j,m^=+G3f
%A!dV:N#ML3<JATuO,N67<=.[^%35/G&6n3\eN]idf8`CEJ>FsjM_$WB2o7C6PYN/2F9Dq$CKM.s[GeE"&WHsVFPHAFYK('[O;H#5
%q!JC+R0o#sq4]eo;?0Y-@d(?&MS+;`[Xe2%C^XNM^;JRm0n2NC.K/I!0UZr[Jmrd->bC20Y1+C5C-cN.BaF,Ar1[SX.8!1`OrurF
%7;k\1LeIVh$K0#O@#g#t*SUFI#4bq/nlrDm2h__`0#f[FV>q4%oP,gq`:"slmQ!u+KRmUB%Rb184SqD,X*I_pd@mm=Z$OT'f<dO8
%$7pY!@`??39i$MJ-oAa6Mto%5"4ua:b42DtmtE_Fh(N@U5f7b-C=Id)A(`sF("^NLaQ4'G*PuV'imDXdJN?+>JPSq0F'>;CN%p@q
%-(kU!V"B7(]Ra[9\p9!]3@(o`CJZ:?5&/t!.`9F3?G2R4JE(BRLVj]P>:[ai@DZ4*'2L+BBH.o/@.3`d1'QVC4?o?lB`mSXi"R_X
%+=nbaB6_NsQ6V7t*KM*R6m?om6kh:LKH-%]8+cKmD'j]WV@T;;AM[[`8(k#7Aq8jJJVFN"TJ?ZZCMa^'];Q2E>Up(e;\&J=MgYI]
%k1fEn.0C$)Hm$DgBu:o6BIi%7.cTGEAobk@Er=KR"4%=5Jg#nuk`D5DHs];f,h,:YTuP_P$-p:?*]7`;`S944:bR5H*,1ag"H11t
%E:D\>+"]0D09$+Nk<lm)*_,f[C!1$l@o6a<UBc>;$&hB6)URa3=dPdFa"HS;b?(!PaPkM?,(E6I0M;C@$^Y0qTu?X!L@-JA'o*=5
%0fp@l4SUhC`?pZJ0pWcf'?nTmq0c_7(EP5=:gup$<&lrP5;nZ?_Ik-AXp>GZIVONH189Tbs![SJ*`bpq>hX!sBopN-V>_q,r1kV(
%R%+H(Vq[k2XbniB0Ou1IofYmRCn`(W%ast0q&2dA(e*_#*MVV>.7F-NrR:MN+ADo[Ok5^h&,;:5Qhat&Q8=Vojb_>q'a_&LV9c&`
%gi9qr0pW<^"KHh[5bqaZ9;PRCd`K[l::,IZLYP1Vp)71tK'5Bf,87E_d[a_*=*d_'m>M%FHl^8$&Q#;*&Q#<=8eKSm%>4c\s4%!/
%YO+<rZjHR2oRAi4[o!<#P^'IB]7BFsFI@abI,5pJs8OJk17?7,H.s0OS3icZF&AZ"nWM+Tj<?F\K#kgcdKL*LGOr7TWHmg9VUlT4
%3!SS+qW4,0PbNo<N$jEubB_Ibhm->PQE::uZ9A2HRt?+!7!rVjdr;$*k1u7$?p2Ms0mk\L8CnP2d-\c.8J3Ta/H#=/QR"l0;C[5_
%Nt6,;+H6c:DC1^bnl`JG0#"5(#-*^mBh/LIU"DR<l0EqoG#O+E`9&OO$J;Lk]RF-Xh)NmIjE0?k#3/9t:9]`L"XtOGUE<iq&)/Ba
%<.O^6RIl!%5^bN=)BR$f2PE:Q,/ni^SMAMQAXOYhJ(MOBG$u4tVAY$18qc;A&>UqQ-,dodp.#I]`=@jIlr]!D%@d(o0?T8B[ljE;
%qpFt?$98f&4"XqL@lBG+""TO&XD^;q6\C_15hW!Dc/eeB[+RD:hbTZBe:AX;:2Uf[Ig^P75ftu3?V2D4K%2Wmi6bf`j4/N-qPS`f
%4!!!eOjil]bXs5'm@Fku3((HeMRl@nqo.pZr7S`V=_Q[`XQ['+*sN)+@-hEA5WV:8AtiRk0c=D""UeR%f2S1[R,"'JI(pJJkJ3iX
%9S/QY8!>pa5cc*YCaVQU9(PE<-jUX*@Mb`<BL\@[c!ZhcG5gtEUZ1oXVj=])NDa%rlULVX6_![8P>*kb;4hR2P_LdU1L4aGmJ)"8
%^a;)Vbjj'/N+7(WT<)"S\iA>.4N/`G^KOZJ2d:ElK+-@t[,lgAir.sZM"B-`2"%;-Ft&jH<JcCubD"f*_nHh<+>FM!-"P9YDgbEo
%1bNHj4GW)mr'H_g0&J(+U"C>V'*p2IUbI>[k0Q0ndaS:c;po"fF:)#'"R7<jP\f_O]h!H8145:[-bKp!;E[?[8%]p?h%,F0\p)O0
%Yq34WrR<8)eX/_oWgRH1rhd)@21Hp4eup>+cH[N^"j5F+HI(`@Sb#@,(^6^::LC#nVtEm^M+>C/Y`cc@_5PtcB'?%e^jF\=Rh\^A
%We+?#^t3)fTnh[GLXG<5NRa-*htGQmhZY(LWWKF>7+0"U7N4inIJ$\)+^Pk!/lrk>"j5.G.'flNad$.8TB<0mZDZoq2[dnh=C&*>
%e]8cda1^R8*-P5EY(5GbK8k['C1r"q;/iroWXG&HgRtu=bgdk*gV-onA:4HafPJF+lF!I\k-"Z)\Qm'&TMPO#;R>`p\rcEi/1:s6
%pE3oM-[Cd[RYN>^_KH*CI&'CEiR[Xh2C3RQiK'lJS3O(?c/Su\&Dr_J@o,s\c>*t;8&%UuHSQUU-Ao&;ap8)F[9>4J2nX@Yi*7'n
%o[H:%oH1'j0XG_uD5--t5nX'9BXY22)#]%BXgkMYrYDfoSnu@Q(.fMXEF-8$Z*&!FVu*VVAK3*hAaV7=67-9Np`^t^_TLfMlf<VO
%Yn?U4p'1Ju'IF2=:2lh2#k&*@.lGBZ)cV75&-XY@<j"&OIZQi5#EL5rX2@nl_i=Qq%JbY+%7\0I`iSU1]q7JIA2]^?W=(le/ehp1
%L-[YiEmHIQn\cft8i3Mjo'4^2?1lF<I^D==ShMbu+nNj`W8(A2M*bi5BiZ1XS[`7kR)NZt%JW^/8oXuchQ:_UK5T0f:6cu5MN6_:
%;+G6;0Ul;]gjQijLW#psa41bT^[=J42X$u.Ls"slTic&;"Ne_oH2*ccWMcrUBUk;K_28F(g9Rs"Q_<>g#Nt^L8#P_(YVjj:2Qk0S
%e't8sSSjj=oV9^PHk!XiZKVe!_lX/@<W#)G[9.<3V_BPTf@+0B%fJZH#tb3P7ETM)Q!f>',ql%7SQ._A0*>LG1OYu>Mn'.O]YuB^
%`d,:mITZO:Uf?P"Kdm*NdmlbqKDC96epACZ,@fpdPlUO]nUcSmQ]'Is/l99"U,ZjK`h-5d$(FgWo5u':9rFmA'Oh=0/IkupA^'`0
%.3O]_C(*a4g#RDroV$JACH+l45VWuch'U0.27ecS5A6C5M:7$cRD-A/+ani1S<`Q2AG9*n[FlZ\'KuW(ru-;h(<]8knn>8l)tG>C
%LViZ!7l#1.R&<ZQ`TW(#n%TPF(eXZ(Jppe4lSJ^b&rN56VjqmT6&(s<mWQi)08P!QQQoLs;!o0a@Y\-Jng@F]GH-P^FRG6FXCKll
%7_qV/0WTP9YH:IX%mGIAXq\qOAp1RU",H-hj\aco=^GroNe0&o6<"aLO4uthnW*G2;ftX>?'^&rOVqR*#%tbc`iSU1^"K_,b2(=G
%:WJLQ'f.f/..bgB;QC@-c/Q<FZmXSlhhRl9.<%RgU>.oZf#-VMlM<<DqpNfOVQ>F'?'SdBBWkaD^+=P3X\&oEh;iNHVpp;kkM<=$
%-[Mdk;sGT5niXTM1378a&q4!EL40qrEP#K)(i/Cj7d8u\RIZc-]DbtJpk_G%48rPEmVq[=cNXiWp%=0X=:<m/_a<]A'&l=)hc%Oa
%dERJ1.ACmJN62GrSq-QV=A%!$n*$0m^F]Q#VH`ST>md#(QB4+,JLI/T;T%6fIrY?QAu'l]*X-m^)6ZD^E*I!Gep*2ONgR:j;YZSf
%-(>M=S4`;[_k%[mBP6W)@k=SS>0tZXAm#Y>5,?ZH0iG&Fcaf/B`0?aD$+#\6.0kp(3XpI*$\M_/9A?>6YWiIW/sg-<(4B_^1Ek%7
%hN'@glC-,:+5ue^c",Bi_hqsJnL'HrYq2"i"!:T86V64++lfN.aFYN;Xh=YY[Jm+H`J'S()*mEnbIDff:2C]0daBZNQVD'Y1p\u>
%5]hjp48RoF>h"!t6<M&oL6s`lQ'+tS=/YCqpV_!&W0m.)SH8^gXF7LPTG5%;E4k??[>ULFR\^.0g7\G?X@j3]W]C+Oa-%_S>$?hP
%OC7*tmYMXg[J_MgJ44cF737&pq**HXF=g[F)jD^&rP^e]$f)Md\[j>?Tt<EC*_I;k.SB=@NRnDROWi8Bq:P+2b+nD=g6ZGF=.>o+
%osS6rJbP+;p*4CflS-"-\R2r]I>D(l*4OPLHf-!/["*Z5&h[S?\8"b%M4a4M<K2Ub+'P9(M<+/Ug%cY<6%GZ8r^f=uP?b[oZJG&"
%qJe+kS&b$X4Z$IR%OfjogC?=!YBZ&/A6S5tGjGg<o<]Y=[PrD<k14]Cb(Y1nfW,n1iAP-%Ml!:,ps?BF/f.;k>i^[.,itgk/"9f>
%rJCKUoY.YOh[LXTcmOQa\eqdEq_?%P<bD9o/9pC'kNW-12\d%4X[n\@Wk0MoOKWGU^Ps2&"eusA]!qAsVgt%5pL?b*rc`oi"WD[*
%%o82dh8:(@N@aDo.-=1VW+lsWicEf.+CG2u7Vj)-ZX'/#,6_E-N6HmYAb"L2Reb(9!V'E+[r5eV>C6RuZ5POPn/%O82.enncS5A?
%Z!1kS^="P6!f%$&f6jGu>Qd6JQ])t-Bs&UBL!Pu\AR2[>/Q&C2^A#-Z.b$WJl(<5$S).a<WD0g]-o`e&ISuY4f^Uadd]IpPSbQ9S
%Y+%U^$Cc/K6rh(g8_m5!d5NWhC^oMijQC$f8Wa1U1T&Wd9^OqfF^uS>o.u7I3dhoD0^g!`]"Ge:B,&k@6umE22p%DWa"-uZXB94i
%fCe"QO!!)?Unim&bSr@/LtH3KVppYrRu)):YY2p%=f@S$Rn6:"YMKsLcllVoP[KNu11ZTXc,qRCYrOuKCli'rKDU@3I4f-TDQYaC
%8cm9e:24#BFeZc<[.N+<dWHr_9NnR3+GRE(/B:%:n0M`XI#2@1cP5BAp#Ul)'?e/Q\U4?Oo3J1r5?#a[qf5c1Bl<<PDU4puXGO*H
%FLh)+L!"-*Jp]^F)0?!!JoODA4qo$Wd8RZD`or((#erb8>fH4J#H7njE4_HP)q-_3IG3o=e*6&Gk5]AVa_.&XW393%,a6uK40"'3
%:\2<dAj0`u"7bjq_Dhp0DX9l1gNAZqV->LEV,tRIAsY1W5@QXL#/O2&3GIK.OH,[12j1"C(q_:T^Ngk;3#6\YQZ'0b?jGqcZq2F+
%!J+iD4,:]K7uD8.f[q7FTaVu>/9K%#Gcn]765]FP8#8m4]#::(NdES+a9:8Jb]+pMG92:E37eP."cJl=k'0pb-FF]cIb*A;L;VUT
%G+"G8:VPr4,^rg@.`!<Hemc@3,d%#es+[+KTI:b)'L_jfnR--4QVcbOaRil7P['\hPK9)M";CV1B#//7eb7j'>P[teT%iR@8CT-Q
%1U#WI8t&5tmEgN\N]mgp0:ICWW\$bf#`8E,9""IN9p\Qb5Mb3J(lap5]s[R_;/G-e2ggltqX7$nCBeMI9=c.nU>%4L!)H@[_!VXl
%if.;fPj:N@2J?[=.t^Tf$p\ZQ3qm(sFo6L#QZW6^n3`Z!dLWM1_Wai)09n$0[U"[`G*P7s"U<?X>$"KVgGM?;lSHf:cB.#]9U?Ym
%$Np8mE@Td%r_lk4>5/Jr<:^JY2,AUEPM&%*(UIs0YBe".SF[kr.O>iUPo*SKaTe>_;O.;kQE$O;26$utpQK;iC4oh2,!?N7*#CL'
%eD9u7c#U,kZa/2+7]2$/kWX\Q(dJ#s8iJ0X!o9I[dCj!SUaH==:Tj4-iChrL,Hk6k(5,lP=`\]nicY(OTZo>jUUi'<WI.u=:YiA7
%TGL;HnESlbHiNg>PJ7%`ci<V9%pT>nBl/?mbBVk7)umCS$K!=$%<XE5]%6i+s7u]ohu4^_FuGp+_j02D0L;T2^i_DdfVVB?[RAk6
%`>tXkIui1j[L8(O#ZO<'"b]A%90k?g3Q7cJNfjeLV[$rN-NHZe\al=.76F`;qoiYm;Ea&D:jti!:Sf=)Fdl'-#UIDEG()l7pklYd
%3bH41HM%*9/tmCC6t'Uq63nu:f[=fhnQ`!k=gs]V9.)`f*_NZ+&U`X5os\5[.XlKca#F^M9<--ji!?2T#5<*0dOYk/a=Q6*+9&"m
%e>@FniMg<3^SCP;P[(.NHi_"^^O6._s7jRJcJ'(Ziflsd^T$\Zhu!!K4m*Sr^50,jOs(CdSEOXMhG'hnKMMT#.>#`^DkUdjmM2<0
%>1P]cq%CEV;?D],`K`;hd(uDi7dYY>P,uuoajX++<nH_l1L8TEJ(l7iPmYBLM+T^Tj&*mQVj_oUC@G9Y4oMOj/%7C_-I6Tug@Y&8
%M"$FD)SD<G4<7@"'du;%TG<d%j%lZ`DVOp"1ge^n4U/[1=YO#5CO9j^-`bOI\6K78R:I_\9UI`l8@1`;Q**DTUp+q7blj^=_;^2X
%h)I\=<BabUR2;>_!XUa5!*F\C*EPirh!\;Nbn&!n$qCf=o,r_cBZepdiF@EMASuRD1@^/R1f_=7]C#&ddd3o`MCSr>DH@u2d[FQ;
%1"N1PSf[":'2teg*`9Yh=WNU<Lj@euA[C7:fb:IkRFV.kG"W4Jr:[#1BM8(97($$nDK,]'[p.E:`4)$/>o*4_Jf[9KLm:jt'pND9
%=fG?>"#6T)'74)HYUP)qZ9h/,Tn;Gq2dcuE:q[&N]adF@e0CY7I_+!kQco3%L`-sueX]R[(R$7ZhXgXY[39Moj8S&<Nqh)HcDsi/
%VPcOV>DESDO@21gI7^[Q2"j>]#U:Uc5$f["q+VA&i).[BQEC$<BokWm23&+(,?h7/n<+C(6^MQaINkTjhRbU/kcS+U<"j99(?93&
%TgR3p]tJ=s8&sTQ@*ArO4/LH^Y8ob@'n>[Ha&9.1dRU=?ROZn$0"u<V:p-C(gNU!a,SXU!qJFT>>92>liI?N[bmj9bH:Nr-H.Rq8
%39iV4Y!$n?0d\Y[7\_Mh*mQ44J#m);&]-f]8KX\)Y&eNRki[n%<iT)NmZa3lOrB=NfJ<)pVG*5L^tX%32Iq3Yj;r'YYiSJR=O<`,
%+19)?r]1:[?"a-fRl8u>@)G9]gb,*P\r(dOiH<?aaVj4/1=H](?F`+T&C8rcA07\mQ`8n##FAS!7WI7Wo*1u$fo3E6l=o<&I`V*[
%X!)pG45co"#IBhns%p?^UW,]_2ENn2mg"H1\[Eu+]mNsMr,':DkZA1`G!_h$$^<7_E8FpN2B22;>-l"5(VR&QORUJ;=b;o1\VB<7
%E;tK091#V=-@0>/T<#lG(t,5!AW?2Wblk4K\Rm=,WO>(fZ9d[P7<PpOYH@c-L8#.O;Uu?%jd6[cW^MG%*CXj:XG76=#N!Wso:R'&
%MbTLM+$lPPQ@'OXrUf"#;rdR3k_2,R#&[3\J[@,82hRND)OKDQ^`dg;3gGKN(`]PriABgr[0>IFMOnNkfZa*T8HOI2Ni^'4T.>X:
%BAdmJa&#<l@]S$5Xn`7=OWV`KF^F6G=L-&9%A7eMpF1EHWY(7?ocpaAa`&hJghKo;dJp%u!Wc;<P!@ETGt]e5&9BU"]DNU+PHQtK
%=99[S.Mh[@O0q9<V8=d7UI\%_K:*=ti((iTALN+aj2VOF;tUM'<QB!dn/5^LB1f]'[ki5[YIGu<HtIMIFsdL]Q!GGqc-MP"7GrI'
%BW4_moSCikl\r*EJq5bb@0__jakaQN4>N>WCp93RE.aPp)[\2^30fSjY&8kf^I]Vq@L4\%Kk`:1hV,=FIn[u[W0?ss<(S3:c=6DV
%L=&kEpJ;8M+<uJe9NTpCf`"%:[4()N-mtHd;'pu='88@AdH$@R1F\4WbXhiFDZ:sEl=kI&mIL';iLt5]LKT$%oprrS&eR??ranEZ
%nGRZEd5?.$h.*f.f!lMM"7`0S,8l9nKBB&%$1.%EJ7Eb3r;"$(*X^>f77[.2bpkN-Me@q*,=qbuiBm)-BTBsMEB[5QDrQ62:iF1*
%2UDh!m0I$'):RWnIs]o@-GEhGQ>LZH$Q(NGrI2RpHI+0Zs#52i!6("E^[ed^>mc5ZcI`&RK.NSiIcXC=Je@cd+/7k7`[H1J08f4)
%7g']=LMu4ji&g$9gT*`d*bAhV%8&o0:#kJJ-E7sm"*"lFZq1cN1ZU*BH0RV8g"DE:j2[&Kd%#jhDn,+DOYb>FdTNd+JmpYU".0,U
%I]T;d?1640/TnhhS2(rt7-F3'LnZSDl9&p!Q:l4+6Q<M4Nnk`9m2T5R.<cF87?OsddikC]]Ca1["fH&N#53&Nc,P<s.#:_^`'s4:
%lA(>P^e-mJ1;!,V2(4UG%-/nX(fsCD"DA8oS"O7B;bT&e1A\<5A'A*JjdZ[\!:qJ(n.@S!eP>:Hjnj#P&Gt%CkUs2i?d$i](*VYH
%&nYLP^4tb%_bR?bL&tTCB%]WnA#X*tW[I\E'd/,GKX\:,T<LmqNb_6(Mm3<8Q'N,Bg*t@'kQr9TEij\/q_5G,Z-Y*"h:EIoj9P8*
%cR6G;=JOP8fdJO"cu>6c^QUhJ0LA8DWT`FncPr*-[fRr<e'ps-G5l)Dc56q3M7E,R\DqrBRr/CIWZXWplLnPkcuk<h7gbE%KO#m/
%@*0n.+@9lTqs>\$l\.3EPPk*l4'gJ,.n>;<)9eh>/j1)$%8WMm][igrj-`^gp*-.&-cm]1pF81,c!1'n_9hV]#9<M0f^U"E"d\;o
%@kkuh_5XZjV<Bq#qkM<Xnq1)L;L7CRX$5q4lGiU0dZ)PH906/8LUKE!=*1MtQpXA6"dlrNpYcsi%b#0D=d*9^$VS[47(ZD;QQ!+P
%0?`Y#OIa"-$Q>W@X2881q@ZG&:3>?&Wc5E.^"Kja^G[kb`jl'GK!DOGJ2QnQfMW[fF:b*KAfYAWD6Ds9RnCsWd&G%'d\N(G\"!]&
%7S(6n3k`M?Sak<ORo)#2'/dM5>gEOCVKUZO8%ILnC^P,hN;_A$^qRRBElO[lYG/#GEMH<W]lKAGb@>A*?1ZKBjcI^IEqM/.=YD]p
%Ml$^'.c9"[d5qZpo\&WjmDuR(]AgP?Q%Oe)PUEl6jt<A'g>A$@7RpZ2<mNl9YcW-4g)Yq'Xo)>2hLhM9MYhHg!BsEla:MuK[`+:7
%Ztm$r_H?-jb!Auiap?bQqr9/h&;9r2R(HVoa"-'.FtF1GZD2$W6nl4eU,$PV/8E$DMqB'5>R=c'hl4l%dCs;l:OA\6kS^5),k.M3
%J#jqHZPB,c/[;NFj@O??5L.KbaPUMB9c]qM%HpaR=?N1XBgGu":;Yh.hH,arh<7D:TBj`>HeL[.N!<,n4h[A$Q&3K)AIST$C@.fH
%EBK,"Ju.cOZ[pbI1l=bTU<<5=J,6g$=PgV"N(d:C]4)bV@Y4_8lb1TG<+R%tq!1WIPje<SL5oEB\Lo\??s!FsTtrRW^p\:I"%/[<
%bD[hAh^RjD2p8f!N7PAu"t@.JcpOn5:Z&7p$&'_[D*JZpG#nndRI-U$a-k[k\/hj_FXG%X2p=JK%_#Rnhds+;/NeG1]$NI'9cB:?
%/T&lBO3R+Fi/_MrlIB\43hL,X[UPkjV2,#qr;A86]S>hD?8`Y<s0,-YB<s618[BSHC<AW8__Nt.PSEYZfO=c+'A9FobU^I;gnDg;
%Fh-%do))>Kk_]F0s/QKo8'.OuOsaKg`^SX8gK*B`qPdgtC`?mV^fjLjZsF3]S^aR.4V_Mch*6doY@go3r^Gp'BnookFbBV.-/9YZ
%1S?@t(dHME(U3#PN7mCV'3,`hiS(4aOn;`g7XnE/8lUUG&"(8#:Yck;*k*"UUG5X-Hb2N<P<`nPRH&J^kPQ'+A7<=\h=lT*cMh<E
%KOZQ^.&ab^U9F9o!r)%0A7EJq8:*<NGVP8ar#C(_mcV7<38W9%keJe%N`^TN+h/E(ditnm^/rG'UL]93h-=V)Ch0^>0`'56";`.6
%<b;'I0H9h-:qtaWkqgU3,@!tu&`<(U8PrgZrrI=*E_[&:C`H]o0U?5'%elH_\3h_D/B>oE6ml>jN`0h`3,$C.km1'h6>i9.?`3YX
%kUD;d_oDO$\]%N1T_TtmHIIT-.75fjHKJhFraY`.?po$ZS:rQ];N(Q)^u86,a2G8O.:&i-Sr_iH84KZ?*Y75$"BL+oD>)T-bg)f"
%B1DQ[;6/N;l%?feP;!0\i2W97jnDm0V,)\-+9&>gDJbl"d"<@90YRHJ@rj`nRH*O7RD7`+:+100?Z8j\+(40hlLkiS@t-W5$\:f<
%>G!/R&+6WsQt7R.g\pWd!+4_dACA%?&Las^@9\Yt"^GmZ0F!FZ%iDO(BU=(K1B0F"M4K7fI[[fU,XLM,=j..^%&T%s_Q(01r>q5L
%J2MKuIq4:$i*GBqJe*9?\Ot/9f5bju]_4?]7qTT\Ou'AWNZjSQ<dm.NfkqR*#G4T2\Ml76i?T7p];4*cXOWU7BV0YHUp;N?*\Tmt
%mQ.M]s.Bn)RSu^a)NAr&0gGu>+5M_J.k)#`6fVdV-M@jt?SK4SH\hjNfQ,(l#NI@]p[SlTnL<no<1Jh`1\l2nR94cf$):R1[@XFP
%m2(Q+9E-`dT>up\d:c?Uq;-;$$t7R`'HkE>2WPd_i(]55N0tT*)W2Enk>t#H"a\I>F-_Kc;]TY5M:ojbHCid;0J-:nof-;@m**Xi
%cB>.eZc;a*Ip*Op/?q3LE*2qD=9gWL#^1B/1X_fYnmIbULPAK5`kjP9;$,L*3c=G0g6BH6Ze`pte'IJ(2YU/ER\O;+C=hr7!BaV5
%kMg$'cIpnj3.@qG;sIp#CuBB@n)%i^JiT";>KrOBD./.;#8VRZXQQJ"-?YhgSB!?>Hcj+mC@t\d+q]BEKtL#;/=oAGplCj"I/5c1
%O)bVP#^4N2/lnQn?FhX!ZI<9"<"IUp2IAG93..Id/_!RRA$2^Nmo]-@&:g-07o>.4RYSaJM"K?oKJ:PX6"-crf]1llTK\n!Wo.`F
%1N=D%=%W'\p6==8WGk@)9#p8h5`d'mC):KE(f.^A3pq0cPcO./3TmG)_p>"uIdZB&o_`o,9-<a;TT,7CRKg<sJ9r7[pqFT7iuRS\
%UN,X!no9tu7odPTgE",-<T+6(empQ4j%f+eRTtq.K0K'J@Qh**qG0<:ng+c^Y3,/2Juhdfq*fL.ieq=T:-Ci/8FVa8]C.:snq8[J
%#dn1"+kaiZ\(:1a-YC(L1XJg]5N_V0N:3I6lBs9"`tt6e!)CF<D@ODaYKr)@;RROcpM^RCe]!?er)ss%:9CX+\Y^RoIu5='0trJd
%(6YJOmI[Bq1%:bsCWm#C%Hs#'h6p(0V't%[diGID&3-'p9]sY1XVM>;(T^-$auN,-:+"Xu2h+<Z*V_.GrcudTLi77bq.;RJm*(bk
%3+7c;d#ab4_HP*e-]K06r-T%:%F539-YZ,Z-'g0Rn@Ze@j(uno7[q_Ar_gn'8nplu\h16M^,+63T<nF3@Wl+_X[7&f[TH\8*U=V)
%]:VT#M]Qkkm58LA/tT?*B<K\;o:b9S>0HjLa-#EQjiI?F%<IA8G!UAW%_A5ZQMYR:<L2sIb,Y&ijm"];DW(4rqY="\o(?at19l6"
%K]e>l.VFCjgE,[gs(b1JO3*D:%eYG7aDT,D@6_bN4=LeWjFp_iF,d#5[W@>,aG2l1QWUrQd%cn[RED+ZmY+pnU9X\;Z>k!C"]f*.
%d7crfb7ok#J7iG1f[*A#?VNRf9Z##Q%^Bt=lKSA:0&So0jNs(=]K,BYOJG6X_!]goX`_V8_"6YQ33V1\PalGfE^`qT+0#Z.J"4R>
%ZMZT^4_=8KTCep"Oi`jUS^h9cf1csi$>;\5$k,7Zd#@@$5-""A!P5\*7UifM;X=q!5CH'?[IJK\;CJmB7tE)Qg<>NoPkOD>?(Rp+
%=CEn8"nk/BrKGt#`-s+Z;+;&$F1\5rU"2qH9'FRJ%j^mQB2:V$?s<E'W6]UJ)5J911RqHM$@5u3*%0Z<OfD)^_V7#5/a#qqc(3fP
%1Q)f3SglcK&Fjj+G6LA#7RabG>d4##M!>''/f8]S'OFgEnMEjX=\&DS]Y>lYD=G,Cg8S_h]Ggtook#Gkh%Aq(aXj2CP02a!a_ZAa
%JNHRq\]1\t7<a#56M`8LS/@nt_.GTn<*c0Y_@rhoS/%p0]J]T8()_*"[/*c]7/sD(Q91;A"m+\Ukn.kM]p^iSM,m7oMKL70>l(RP
%Tue),i!r&Rha6:Q^s`k)60turm;`phAT.X218r*7D;<_fg<.M#W<`pC?)3(TCJS"@o]JJu/Nk@gPA.Sb&E7nGFn`???PjO;Z;0o4
%iTW.20uTX"jIYX/-s^pmCml6-h8ZUM+l4oCE#P'!S;;pa.a`Qn]S!FfjCe=_$R>bKI/B:e0"M*L9R#A1$4k6V0eb>N$@AZc`D[/U
%8]ETeUPpW32=oQXo[M]19q2P#$T^i/"j5HAe8EX69?h]smt]3ngFgLprkjuNR!F.G7p,?#P9U%44=r%X&[%6.Y(be5gg-Z,&`W5Q
%3cm2,1T'J!ibpbSmYuhFKcU#lqg0OE2RTCOSuKZE^%uGHc_159YS8q@,m&k*RcZA;F1?Dmr7(/'Gt.!Q1XT,jP@;/K$Pm@F*B$Gn
%gcP`)3f2m8-QThkq,;FrO?.ZuXs:M1c5V^o`QUqJ#*.W.gtj3.W#s2ODU52LQsY/mE,pR-CO4@tK&:l@RX=Z'Wet%i5IhR4N;K(Y
%n![_%H9'VlA<cs_V@:)]eI?d\jQd`DDg+hmP6u3)-C(US.'=M2hI';AS+5'9Rt]<AgSS%"Z<A5iGaWYd]#_S<qdE8,P']gJ-8h;m
%)oiVZ]M]7t`1F7b81YRa.$7J76Ku(<gAOHWZOuZ.rA=7l&&+gH$)`_=hk-5&A5XQHQkD],ObRlq\@R8eJ#$t:TF=RFUGqekYGPL.
%;CH\Qg,M?L_<(YOUaj]Q%sf`"(FAlt&=N`NjA[85bT\FI<OVKL9f%6Ri/&5rTA];;c&V!O;r3jmbjkQ4>%!"UB>?&^V_sXJ;NSb#
%3so*g2HVebZjkUOIo=`[@^n1kAAtqDLTJ\3#e+l^?&auf;c0^)mcSVW/`u<kO+hXE#YmT9mQ>0LBLSp2&YV2WN6=8-8n(:H7[2Y5
%Qj0u3*]$^GM;]%#d*q:gc[biJl^m<-F<%.?T3E(lF:I<QJNMb81NO$t"YVqX@VndpIpTKq24g-M%ntp`BL6BgEr30S*q(^Gm-]2M
%4L>C>-B`Me(%#eB4X]^AjWdSu.BsheCC`uB1ATTfYk0Up-)4sr2J.8-.KgjW:8*rm#i*&OoXR&0b3PcWhBNaT(8%"p$^@h6FH[h\
%W\-c%[p^W.:oX=MV3Nur-qSPU$N1%FL'-s^/#1mJK3gUtbgi9T_G$:Rns!t-fG?"fE6jdQ8J_j"2j`fu9mCNT=luIUk%DJ<ICjM'
%9MdW^^.^lXFqXK&:=XXEdWO#+T]Xooqcq.:l2p)5#+[[ie]h^=[FYqRUPGFu3jT,a3RT9DmoHnR=d]9#G<4KD=#3og?E*aXL>9h-
%k7">_,p(1Y"j0mU3c?XNRgjUXBhZkf)UZ,8Z.DDF(P@aM3.=3V#-PEVb%o!co1C2&/`Qhi^fP/h^7C/6+?TsaJI2m[oN.FpDNNY-
%-3PRf60"jfg;\a4au]Qa&"))IN?ZKDV*7U2I&:LAYSI[/JM-S:SZI-%*?+*llG4@M'fn-,X'956lcG6EOb\gNghVqNVD:A^k#)]o
%A3_d?QKY#pQc%99Lhn&i&$Pamb9OUH<p5tkBLl3E79npR=QVE2hbErL.'kum;bc(AU\"q"C5AJSR9G)eR-=t:<87q.n_]%t$Sj1t
%E`V(:]&\X8+)>mG.`_7`T3B)?=NYo/-tOJH;5WoI=\fB1[BH[S`J;I6KY(9I9\U:4RA3k60SP$t!5LM0c1m<CL&>L]FL8Q^;ZZIg
%CH:`>pSh`81+@B4.heo&M)GLer.>G$3sgCb%>u'nq!OO3e+^_>j(PV\LOOd)1nJ<HYqH=lP'B@d6G/^6nO._+:-T8:8<bS[L`@RV
%9Ob=Ar)hm99J1,<#e]d=8/)OPjM'Q[P/DGU?SMFQC`q_Y3#P*>i"1a(kJYor/m`NtcEMe;9[3bWYB\Mq-JV=p!a)Hh:tP3=_N9u>
%_NqnR34a)gBu\rah`d!H&tK!Wl%/kMSPSbj:3@u(K/-3>gGi6Bgfh][9j)5D[$G%$D<tu_9DZZ=-t:6jZ<!Ar\pE;EdAV)okI'8'
%V=#9JBk7)7?Ga_a:Y].23bI<H#=^"HE2j&GUj,;^AsNkJ]e`_OOraA4hF6@jn[iQEGgV-N6lQBc2ZHc.6tJ4,UmS@s$B5:Z;s6Wm
%K[&?:BfYG?eGP:M+0`jqV]%`tD1s#H$O$(S!\#sPR^kj)Oc^@Qd+>mDVo8CW1\&FU#DP[<e-)5$f?qq8d.;Y;E2k6XcUXGe_l2NM
%9s<r6.56]@+LNE/l0kgQIu0%*l-inA^jcbJZR\1n\\;'3W'I"g0J,55hCO9QYN>+11IUGW^<Ai)NAu5N5DfRtRZ/?oUMT&B4q]\V
%4ed\W'Ho"KQW1E(E6<:HHY@G*^mcrN#;oL>#/:,nA:>o&hO+kL"1<Vig+d!9/mH^i=V57^"QV$,\l-`2'&pWXaJ4t4m..g6BZO%r
%7<?9LEBd3p9:#sR4!!-<cLI/P2+6?u9Wc@7.jA.^kr\%nr088@V5'"IP(VoK))Zf=WJ4up7XL^K_i8*u<=0IJ-.2Z",H74i!4B[R
%k'kGmMF@Vf(G^W_U^bLq=pT,n5\Yj?>pQhp&BsBqi_1&821Ys:X6:W8R9@KV3IIp4Bu/&EK2"\3?YO>#EXeY?Bal!:0+CuP+ZX9)
%$%_Ma^ZcTU&09Y[>'sXCd*8T]$c*Kg<5qWCM31"rWo;m?dk+YhBsqZ'!ZdsVl,>]0gA+Fi=$I(I@G9_D1--[do4#PMZme`"76c(`
%:jJ=irjp;>qC>R*7b8!&BTULJ%LJb=&3&[OaRGM\Ym_*;HA8"P]9;>j.X9):,1dSY?Sk]n\#=3$s'%QL)=gR-PI#HeZ-D`0X6(U`
%kZjQX&Vu<TDbrH,<pY[7&d=GcBbZ58K%ULD\qKF]:Qnj6MNE#Bj#V28U[!#*\u?Xum*MKDhr;\pKUVQB`\mt1/B2QNI"M8>VIZ87
%_A<Re6cu#hf,8=u?U>QuH9[k!=@D#ZTi="nV"ZQO@/ptWG;L^(CT[j8/g"%cF0E[C8MP3@[pC2eCR%gZaqZPAOGU^/f=g>,q>`V$
%c2<B:.`j4MP7IAC0nn.Gs%2:/B8[T(8E#",RmDW*-.-=&=Of0l(o(i4"Loh1b;b,"NVo10LI6_>9@88]e@CoQ.,7?A6!H:kei0aD
%CN^i#n)A6K>/Z%MVg'ig;X[6A5:q=0[WLt1'e)-#Hd2?_$?*LkBT^f/ElAp?e;CGKnt0aM#'%S3A!Vf9<Ct.riNEZ9nn+C+Bo41%
%1=:S4dM`NfY=u\gL*(LT77T:d@sn4(qSDoFYPcU>>5[`Y%X0!YlYJOV+7>gjm(`CKQm-oEHlBDmS:tflPePm?0?kiC2X-ptMi'Xa
%KTGraUY$kc9!0X?^1P`;F&C\._HTt1edfaHXJ26mZX@tOe"(emAAFLpiLIf`SkPR?M21Q@g1<$pRANsteHago=t42l2'Ei>I<?]*
%FK+6k'AG1IC?M)6-0<U7:)Pd9o\3OY;GeK,+jCZ5M]l[bK78>oA<<G;9GJ#6jN=lndrE,DAXQeb,!kg=n_f\&R2;!Nle(!HU=g"4
%CpsBLm!1#$`?Aj0e>6AOQg3&:@MumuaIl5UgU]`_]PR0MGUm+tGJ$lfrTl>JhWM>rHX)l"1)B,GZ:kS4pdnbWNumbX^Qh`/U.?dc
%].=Zb:%0dOe5>.5pZgBH0R#b6Y3OaC5Nl"]A`oK=BVi1>-DuNu=*-==b^sl378mm1UcHWZ!qeU>!0jJD&U6i7ZQd$Bjc3D;Q*.2?
%V"qZcIQH[]ZMQN;@^9o3N:"?mVTSB+_X>`;b@)48<gO0K9Pu,LY"7u7jUR+lo[b^*D!?#F_!9\PK%KuAIHq9L0'Ac;Nm*_o`b.`F
%s'NmKQu/FO#H`d?'UpNZ(.s)*X6\kiP:]N`FV$OPCFf:M/lK]1a75QM2,s<4r'EOg@mZLpDQg"m*j[ZO=?Arq/lfOZ$ICr)NkRd@
%2N09rduPO%ZX3rkrih'D'"Z+X"rua^;XTjb,4r^+$('pVfELKpFe\Epk16,Ya3='r65+N7`'PRZ8L=e7Z"[UkVM(U8^Oom8J%)fj
%?9<9$XtSEgh2BgV_o0ZUK61_Z/YdTcWD=XegNH(/C$lXjW7%*LB:<Ud[':$^?YI2=,tsp=](]_-"`\4L2c!4%>.cp<r@?M&8t!^H
%DZDRd_.hIuVSIPP;:9m@2I+.0UAs;n.a%q?+E25F\7lk)jF(J;q^Ys+@AhsOYp!"WCa+h*s!ak.oJbL,/Ja.On8O]S.bgW%`(l0m
%,YCTBk\)<W1=;/7,nn8kp]7sqL?t]N8lTul1m)DZT*R=BB&KB_$A3mZ"<4dak?=)e`?si")JGdj"c;&hq'O@<>I0u0<(Gj3N/#>s
%rcV2nl(MMseK+E[NdOtSpuN"-j*`A"g6j;Ze0(:rNgmPSKARo;Z1I3g0]B'SqKSc0IdorPFW?eA((*D:K=r.?%<mDMmmX2/910@!
%]O]Y=jL4$S\a-=nd6=SX5!YGfKLil`W+!bT!WdO6dglKXd(RDNG5=ED\_qrZ#DG[jjHUeNVL9)A(NFQOp,u9c%Ak<!OWJ\&.uH8'
%e5"arF\l%("Bt4ZLA3A3dgo1Wh16bM(FWR5Tt8(=DDpOg]q>5=Ts%*$kN^G'^WI>ODP2so#<Z-OjZmXRqG?Y3R=^R!661C]3DFLI
%boJc%6mO(!arL%Qi+6uY%sE$)VTf5KdM33SQ(Gq_C_eSDc'hLa\Xc0Aq>FT`JR`kkQ\n\s52N6KQ]uC9U-T19K3Sf;:"jD->R!!u
%K`p2k*K7GgT'q!3'.B`h/6ocn,GD_l"fYMX+4nXM'=pVD(s"KnB=d>$WslS=ZHd7fq3iN*+k2us:W3n$4qq(=^VkSNo0>nYL480_
%fEGlhI6/'i][;11nG6A894)I`f0tS/m$A7g30-JT:LmYgM]FH!orph;jn[*Mh2_gZ:\&W;n[J8s*QFis2Cp[`7<O1PFb@sYN9Y"2
%hV,$628:?!lhCX+`Qh&+/6!<RHa#)5PWM@],#_^KmZ?"6^9/XYef;hR_')HaXtEPbDU<Z];;H'.>C/RC>K8HlI22')IW>*\3KV+/
%ESZg"jnRG.H'Z2--q,>"gkG=lj$]^2;P`E+Sn?Bj8kj@bUJ4?YR%lc91+8=geZpj,]3W^EXk]H7Ras7*j=?OYX\=6*Y$KcI`b*)!
%?$a$"o.s\']:1*Gq*H5WCKfq$J[pg0ZlUPXS5<'bhd9r6[%e#,pG_C:MQf^4]D(6S?&F&MoRkb$Hj^#Q4@B_,"3ejsN]C5*jK>d_
%eX,<&:GS,L0'L0,X:Bdn)4`RZ51:k'c!6h6]_=%IN3N,]GCM0u:^>jacjkpK=o>5Q(c+d.Q0>'p:Ti!?J:(WiCsfp3gIkZVi]H4_
%0WRhp5E2=bK;gnM`d<%sIFc#GNP[*`$tFN3=P(ZJkk'DXW1>j_jX<-L\RC5Y<S,%u"PccEWdg+`Qt,\sU")p31V2]d"8(uh?4pf.
%/&a%C\joP!Nu\+3TB-bn?e_t&CaQcU:jgj(LiOOhnYSU=Ggjp`oKUg$L@4J$?`;I]*`@@mLQ`7Qd>!sD%8_FgL\i>Vjk+t'N\]ZN
%LGu(VKG/a_pR>_=1h%\%$h%G;HZ[n*Di0!Qj=**\Xm@>M]-#\n2ok?Q&67)AP9JD%B8'iN<86b]n%CN,dHR5R/Md2UPjpTG)?j#&
%&0U*i:+5""U:[3M;KW[d6bcE@AV_r'QGOd[]XQ7Wlo8<W6MY=h3c?^PS'?1rDg]s7,<*RSrq*hLh#21#3(Ej=.1k-rV%Xmlk"#_e
%_Ysn3$qDrcQp\qeQg!eFgO1e9?.:7Qn8P<bh@7&Vh;)&#?5SF,25T+=L\=!88Ao"/>3kV?GB`\glh'^:Mf]194*_O,=`E[3BX8;#
%V`b$b\4?3@N9(rjlmfs-&Jh4m,1'ER"n._>;JP42TlcS+c=Aj[PKq[1-d/l<?AK]]7A]qli)tIAK`fGGRP:6R2LL1^,f.4c;"Q2h
%#en\k!Akj.AGo2A?W`5M_Q\A(V/J:6X_mcn3shYncsCieCSq>`Mq)*N5[ahC][9+?oF',fkA9/M3\D3V#ZSZ8JHV<J]EMXnOuE9L
%B_^TT(g."S.%Ya`UF5nTo2+d%GaW:\lCqKg7bu<`$._g`SuK0OhqpYWB+?/X]asNG[`iH@gUed9$>#(B?Vp$:M4-e6Y&5Y?;803,
%VdBD.NMYD=?B<eAji[k!pGZlWNHf6@Sje)e<Td!p4Z;[aK&XHn@gt'.mZp__Rfptt4P)LL*AWp5@>OB[>Pb-pYkrFaX=g3r,m*r1
%V:rQon#_S;!F\TMrqHHQci<h@>%0DXK$7?d%oo"$9i/W]+&Ga,SU1NY6g>*5C5<]5r!t@BgM+d!&6#6_G[eb]d*.`rqD3s"S@#H8
%m!nDlr'dHG#[8SRp7J)&Zu^6.cq3BVF7NBbYn#"f,pOZOJ:g]cLQXe".'--HD@jtKb=+sh2!l7T,53l<S2ad6n5(s>QN@M6`t[;.
%#Gup5abBp@%HrhD3lk7Hl7@-teB<]>Fju^R\nn+Y:3<c0<raDMF,mE]<r-j2\[6/+_3cX84_QR!R*uXCQmW&8m+OjWjhY/G8qYpP
%)cBKT@i.qnh*nCoR=m+n*'u!$(foWr(m6Os>-J*LMS%Q8!0u>@SMAasUBP`-V4uN-e=CBcX"8)U^33dq<WC6"VV_@HTk)ar*&u*;
%hquQE8oaQ$'d9Y0=P/.o$qsE%_9c-:=+3',i+\BgW\.-9JjG0TNi1UhM9M@G\?)C%\q8hs//YMYg>6$1o^K2374,UAiT.9Ig(X&e
%;mi$aJH:9/9<Ta@W($CX:Te[r;o%s]N'0=qNNpF4BX9hT\]S=Ui^)T_B8rlND_;!"ogcG3MX//WMkeA^9(,r@M=D'Ko'h\[XJD&e
%QM'U6M&mGDB_tgWZi3Gm*Zibmd8Ask)/+in#FqH#=s32J1Br0^?Ts;*_FQ@B2f&d[%Sh]AgjOir_.$%eA:%pt:5IV=$CJsM->`I5
%7s3GpA##Hplf`%%%Bf,n+ME"[lHST,9%ON09`S^5)@dPH6&Bq@=KLHg'"R4fkSfVu^gp<0gj==Jn(f+Ui):";-ZsPE`(j,:GLFJ:
%MhB*Vk[g!Ngn`OuqO(;'1g2U`k;R#:WL'^l(Zglo2-8pN\`e_<k.I^-_-9i&I5UG/q[YfS0DN<?JaB9dbpUI:YU&e-,8FFiN1*e1
%4S9&=J`N$qY>od5GeQ_mg90b_:<_o[Q3oB(Pma&0%`N\XTh4dUb%^AjTiCiRibj!5p^ktDNP"/@#th1LWJ=@2%bCk4\LLb26l;S)
%"giXKK#a_W=H3se]UD)e=s*aj+VQZkRShUHSj2J.Nh4\%[@<)+`DX+;3r49d[c2O79$d=DFLfa]m.aHhn?RuWkqU6EIHq,`bELcu
%:(h`@W:%VEG:*QW)^Jc"`SV<N]d,!g,"DNpWuFs.cIXrG2"asc6)B1&SEk6=Jb!r9c5V`-Ai&;tCU8!F-pq1a^Cge&*beM_U+H8K
%JioOE./0""bu?,jFlnjPYA<@$]2;g[._(u#G#Xf)\o+6kK;gnM`d<%s$mP1OPRp'B20T5%@ks,[\3ggSW\d$%oE`1$4>d7&4o#PI
%0:M1<'Lb^a-4bELV)s`G:fi>fB0T.t'6E5eHQ,)B[T73(B6'ahq+DT"Es7'=6n_n\RdfG1KK[Ts]$u6DkMuJ4lRpqFeK>M^R_[!-
%XIRGi:,S:$?_(EQdI]i&SMj5apCV]Wm@F1p-[K`C`X_)]HdtQ#6`^ur7^Yd,oQ7pclc97gCW66-WhTPu7[KFE:NOZ6CAGM_Fn[00
%iCK08CZqa#>_4]0+P,4U='%[U&r:p)Qm3T&dH5Bp1W#s]5]o?Y^W'H_DL.mt$#FXBlPSs$TU5/42&Cr:9=Je3k=$NX\F?eZSRk]1
%=)/#8R+[P'FsJn63F7.B$Perr5q/1ZQf-\oS%%or*h'UL>"s>P>tMZ0L.)`.V"+EkGC==0i:2[/dPX2\>Gn\8@U"d-9d;#KO1A\V
%:Yl\5gZ7(U$P!NiUrj\<CDoPZ)!qnMc,&F_N61Zil9nACs1d!LP\8mLk^[dhWY37m.!OO@Vp#jc\l5>'q7;<^o?*Ml$LT5c(=a^q
%Y+)BI@&hMAn_RS8NSK0H6"#ZA:1=pN+'Q-nR7-%X'"$E=F]mbq7H5iTZe=*`Q\*3Kb>NJ6nn!I!gPb?/)r;KK:Eal+U15:7OQ:%:
%.IW4nm;U//H$2ZfK4_]')4@N]M6qY96ViCLki=]<7#%bU/Ce;Gf*scZ0WLVeG\_6AdK<Z%<750O[B<H"JY^]!6K4ZUdZ-%cN(1X;
%dbErl`@LUHJBh)_;C!Wh&nKY_?0&i4fI=];(h/sGX<4m?1\@FR1oIqi8Fr%s0uc0+jIZBRC\URV9d"9#A]O6I4m(4J6OaOA(fX#W
%cOT2`Gk%3oJBeQM*E]K9W.%&)rWr.k-VkZc01$UBU]*/hH&E\d!QheNLeFNcKa0YU=uKoEGbCf`aC[U7(:FP*NR>d5Oan0,q*<oG
%F8C(Q"'oYtrq2[_YOgrc]!H@/oCBXH:7&W`rCX<nref/n5Lo^Qk"1s]\nZ1q<U=e:EAi=Y;`.(]GPKbRLU+.a7Hi2'FrY]T$aWGG
%-?FK#+tK,N#7_8$(5u`Aopsh#]!.o1rPE5KnXh>n$R]*F;lL;'GD4D"6[D.&:p_]A>69:\`Z.,M9>uUVpPI_\&nMteIu]^BosSJK
%Wsfn.F[O,+^d(NR$cZX?(1-.uOJ$l2e^??gk5@P0pO)":pB\ER&#:O_N:Aj><`4<XnHIr!+BVea.1WmFCI=#tLZpWm)s.k[W*Z;r
%-1cK&RlhZ3Y#coJ*0Ls&17E-I#(nub\>:f/GKtl:+*Wneao22*dn"8Ujj.4P])$G"bPX*"SPj;g1W,Dk@EXuNpenKV;Pd*nbLMU:
%kKW#PF4"UR=LlR^bLH^8NCK2\TXV?o;papG=i-*M;tsmBQH-XaCBk3ZoYRQf$VlsPC$3-V5m.dMdM,T9IEk\'HmlnS-Mn`?jk.Ns
%KnK:3k@XRoV>+H$X%>Cl1s3lfVGp(O"HJJOh1(ln^JH>h?2\?7r^(ICA5,,E`AtoWRuXq?XZZoQE%;?YG0@c[Fg/$N,?'Kg*9C:!
%4CUZBbCe-)j#%(scSSFX;8[%8hVJ3p0[lmTh0U_Mr(Z2WHftUlN$SnXWTge%dZ&M]ra?#eb"Oe4;Fk5FVB(Wa+2M,;WB8'g:=f23
%m[']E-PQGl$YM;#6LL1X`r+.>>=,'=ca:'Ya+sqbY5(:ZG`qG6aH<b<``$W*SU)>W\YB*r?VKI$PE)]TNB0nbhDp\"_<fYY(P/=.
%T]70@lL,P-d<sGXRON*rpoK_Z2ApXsKGgWZ)of!W?7)jDF14L<SQ`2"1tRh8f4SiHmU;Ni::Z8#)uZ&:[m[iopDc$)dAZ"[9f4Ip
%\%B,WcB/Yendt7bebUUuhOlqd)5$hg0$1p1fn00](`$f@R%;W=6en:S%NJ)/fT<k0hO>1pd$?)sX-[kYV<!F<#t*;<bT<0PM=f1)
%FWQiuTs=WShg]*(_<]+R)]3E__G-ktKJp@V#=A;#^%\;3o7X(<IdYA;Gn5m<k+:^eq%-Ok-[HMeAp@80;R32VX%p<),>UD+TtYsi
%$WFIp'@#a&rnNE+qd^V><*AjR[r.F33U*`:(1$9;eH/Sq7;Lt>Nb6bR4JR:&5qSBJ=(eCmI,2$#+NpZn^J_mH/&5CqTR>Rgo*1u$
%fo3E6k(O7"lnXD\p8T0s!Z<#h&ORS2\ORa)rRfU]1.A:%%%p+Yo22B!\1$LCqi0as_FLG@FK#9_kj-k8Y\II8#ZNn.$e]`.k?nX.
%RQ\$65J12QIE50[H_c>)2KM)Qi(C\idDM;M[ISAG;<:aU4d.!dO#(kRWPjb@Ofi]=SUE+8/1i_^Zamsdeo77G0NK(3=Go)`;jCIR
%HH,H&B:^<!0$@HIG.)RBa34$3orp+%3hEI-i(DS5+]U^K_`cuYJb6TJcr0J3e!2+U*\;NK4c^LV0_GtcQ'r^We(jJl4MJM#)$O;\
%\D47eL"8fAi98Z7B13a@0RiZK:3e:38aNS,GRiI"WIdqO-Qn;$+QZ!]_KpCIW\aLE=Ak*,XJj7?Eqq<=.@nX6>Q`OjLbUA<#0f>f
%)BQ+_CJP<KkKSIfcsC#c>/_AUmYD9*9I$faa.R_&KCc>=eUEbHd\3FSIAZ:Lee@qN8Wd93mAefI1M@-Y;"X""kU8qk<uKH\WY`?A
%qN/A:e2s=V,DX+]2"s&LX;*rsr]legWqjkgUK-HmN%XMB<jZ$/@BNpIN5@80GXf)4/tW&H#VLj;a38,akc.O"Up]C8&Za:[pE>:_
%-WEbY,l`$AT]`OPi;A)?PD[[+YH<o1A(eK?mF=$k1V>,0+/DP9.&59&+_<lE(ZZ7lrWXI\qJ&VpFQpinY<GnND(j(B.]$"R!+3=M
%Yn=ZAYs0ijW>^NT<Jn/OHdr+r8fo);M;NJL`'#Q&$03n$lBqE2UJp;MS73dZWB>6E[\h=$28nh#%F0RQN*Yb[gtFNY0a`;TR8t&e
%5C'ohIIQJG:=lq9:5e:0aCoeT4\*"WgJ)>b2ahTD_R!Z3*C/NP*et(,c+]GcGO#Se;@K%U@eW=Qd#0^\3)n#`Sd4_,J:8F/dYW(G
%%<@&>N_3Aq`8BG+IHLB_Jo.uEXF-Eq<<eWc1oHC/$Qau?/'*+d`u?m!S$u/f87E=uFWWYLAJ]3(_%"NurHW"n&?UncRq6??Bt:fJ
%;+LGnLA9NH&&=ptBqcTH\j6)&60A\HFgDs(mFBWG^EUiDKCF*KLL':@'F6/JF`m+m1WiuJ./^GjR]AMl`0d`DLqgp;<IK-.*56!@
%l2p)5#+[[ie]h^=[J,:e&Rt3R)#+W[R(9K,3*Bf%RhX87F:I<$Kr*$[59;c*:okQsfZR:b0L$R)`fTG^5er'2Fp"Er7WB6nX.C#>
%;!g;p4PT*g5LP*;H:[3SPP\srT?51:?N.=BHUr<2%[uR&jArn4lhhiHZ,Lt1^b:p\:_l0Jn?VmT;!?RW)b*;NY6#5p]#e0.&1fN]
%/Sq6.99IJ2[rV+n[uJ19RV@dfEHUIForPTHTOLFZ.>FFOn3$E@fHj<Yh(O@E1-26`qc'Am;cqNBj%iY:SaO18-EBH3l_18+Mj(P)
%(8hT<h-8_GB9_g5d7]KU\[kEX=8BF^Sr/`.#A5[QC9pcC6MXaeoc$TTGr+=3qrs$qL@W&u0?O^8GUg<19i$(2o(PReNPBg4mu51:
%;Hg[E7$9-V*)"SO;rpa.YfB)8>a7!1T_miZC[*[6is5o4GB5d8V#!*UOWXCD#Gb:.7MX6o+mF'&J0W&1Qd7\U&gq(T9u#)PL+XFg
%=)-V/T?kV!)W)[3hX7dT,$c]m4u8Q@[ui(oAGLm"-ARAc[<8YH*8t\i&,0$`@&+n>N-8cSr'u4*pHgn5&kD/@aE^)aO&YU8/ooL^
%/.+\i)pEJji1\7AeMV^/He6K6F1N[YR#ljJZ#@?aEXF'@H*j&43YKRoQ09iej](&q\7Nd+AV^eI8h-HW'LWY-,?:(,IMe9o)iX&o
%1Z$k*T/0IF.2T7BeP)?W+2U8))u;f-G)hGRCTn/H?\&^+(h_S%2.cbl6'DE@8sc3>f:.3A-!f9p"()2L%=,6daB0it:o>*6TVGYW
%)lEo`o,U=8'C6l,$=d*@Rn4]?e2I'FD`;Iqh@rAkmF=+u[#6,a_Met\MVdRChC\3_7+c3>c]3iKUYp]njIAVXp.8\jKUP<tq:hR/
%a,"[5!cY1[(3Wd-JF/-#@Z5(g+lZFC<njQi4MF^(Qfkoq_]f*[#J/Eh=3L"1Ku,>$7je,0Qk20,B>?+EQL6u/n?$2`0DU!g(A(55
%bBiW_AMpOZqg,p'?56Omf]5u&@87D?DFYk$MIkM/#hM@#6tSKt4]5q`U2iEA)YbO^7T*T9oL'4-mb\ufn*?QMF$oR%k,40l%+WLB
%aBKig2nT(d2j/T+UEAohVolc+_nqQ?+laq)2)`+O-O!,U0[]l<KfqNLArZleWeU:QpblDN\J]f0[0=^>%6Errf&ggoD5s0pIPI0/
%PW4J8DEE&g;,L</]("E9=-R#bU0TM!\[iqsXF+;@I&S1`($3#$J[;X)\Mm4G2]#J>$f7?k;oAX#@mH+tQ#>VD/H*p$q-@]s!K5\G
%qAAQ<1kjoC]>;MkG*e&W[Y\b0*-OV?'Y5O2*Y)VIVr-D97Ss?upd\]G3>0k/k'0>C_Hq[!',)GqkWN&+i6sGIrWDiHHa;YI/iG%Y
%QV@0VTR#>oDWX(P"f@pP6jGASKl0SrgWDp1O<IYd/E6NbmK9eN@Wn<0M*mt*;66.)2QD?0".e;PGWu6TR@t>:KTN4aQOos]g2HuL
%]fajpeUWk%eYq:RcNn?Xc\!Ub:uIH<o6p#sB88i="[`^r72b_rq;gc_H&$.)cB%B*'/#!#k,S"7'>^XqU)2nACo+:C&e`EmFAIXJ
%:^^Q3kU4<2"&>o1+p@MHdaI6In8aki@T"q%bXFr@!t7_!*6c2kP)oe"/Ct/[O&sspB=T&69A)ZA68SB8W&kqP.M["NUT]1I8-i<A
%KFhG/*/Ra<@2j?5laqj>o!3N=EhT,t+f^5X^,+hZUjYls?2,m%Qrp*/9uKdcU`_E9qQH2OZSniDDY^=-n2@8A#,J+ALVST@ZWVbr
%'IV)3Xrl[_)GP+GR*/oC$I0mJnNnMq[p0oeJP<2[e!e.l;g8,]G%iYKaWncUiF)jFK>WHe_pN?-ZcS<I[H<&]Wn;s7l!o6#oJApr
%NMNmgN483BR0\4f+.0CL""hT!5MF0IqZ99ukE!<Rr`#"P4ah`Jpc0<8]eYKd*o8fU8n<C"!Kk<fhqtLBMG.u7N@Pq+&*Jqs@e8_p
%<Ng8h"+^37k3RTc50N'?Dh`M+AXp+jlN>'n7-U#moaO&qi%FqT;o-YoO/"T\ISh&`%<DJKr^:%eaiQLOnOC_(Y'Z(9ZVe'/f4M&Y
%kW[&[3aXt$;aeUS]N[--FK#)ioqaG_ibUb/fDVM)(Y4pbeR]Gc0iRH(Y50MI=60CDY?Rm.>J@pVcl6DY]s[KbYpq)N*PoKMLAY>V
%-0gm3_[]NW4P/ea'.m-M.d1rk^,)f^9p<Jd;[h!/@+*(G[?KepOu,i8jflT*Pj0J9FHWa5iu/7&883P1Yr;]sQbX0CDmgWnjDV/h
%,nNDY@(8e)5DT3p6kDt/Q<G9t_?pIWi3Z/2ko.)g2&GpLkgVUA[Mfc$S`m7$f:6<<ER.2_<Kh*+^*s=MF8U4(i-Qf(T'3B5PaKbW
%+2#[A#k*`5@XbP2p;WUN6Q'+4n[T81?SBaXij;nWqMC5l>%D,/d/2ZDZPjjd?u81N&KH!NT@C,M15nU230"]6a#&$DU,Bsj_THk+
%lS:"P;IKbCnYb3U#GY\uK\B:/6Kte4DVCg?eeL3(fS%]2k6,.S-?OaTLJ/mXnNcP+YN9]VR7dIN]=T<.R)61;Ni(\2Ubk4*r*lD8
%$41h.?p$Sn60+'<\*31[&9FT6`M?20f[YH\TsI'HMONIrpB(45S<5X]p)/PF1ME5f+M*&!:4\dN,g]np)3DoboH#L[]'t^$,CRTJ
%&%;8G!X@^o>-*9&>#rJ,i>^?TEuDX.Nn8'<M'pFRi@(&41.t18@F.Y_KA<GLWg`qPh0,eE3+R+dj@)VZr>dF;pZ.u9.Q=mr%+`LR
%R'(2fBqHGP!)gX3&sKl;5l%uWk7'n'hMTq)l:Jq:A=45H]jE;dI4SLiG\_Yo(^quhQ;l44.&jdCnS0hma-4(cbqMR8r[M4*d'>W(
%"eusA]!qCQD#$rlmd/22n,$s>:db6d*HInPLRf9r#:C0$YdXWRpX"7rVZCA=J']sjC"ucOH+kngA*&&^3/<Jos54)qf0LiTg2SAs
%GFf1Fi0e1ia6rqE05Yj)S2^P];VT'q_*^ei)SNW%O;mPParUmB"j8crdC?N5!(8V!i@mc8LDT)I](/Mr=(TXEl%ec$VE"Uh)i&%k
%I[<-,^uq)90Dg@%n&C(!0dGL-\G/oB/rH'/,O;'.hSj<(IU=&t\JM=]mL+h&*q[%Th+31Q'68(B%$3j1^2)D0e$PmJQ44f+BMu\&
%oF$5Yiuk$&T^K;Tm6K]2QL9*BXMe$JZN0RkDkT;6`A'.)c\\h@>;p9%+r)Y(m\)tj0O=iW.A&(Mg+3C$"$Z@@7Y,tRE-T&A+<)$O
%lW@YmatU8*,[$.C3dPOB.:LV'&8>kP6YdJFX0AGO!,NBe"3JG(c=9U0^X2,,&7XETnu(A#:D&!kG,C,2pCORQct>^=Zb,u25uo!%
%-Lc08o=3W]'mQ4q*IC0sIU)dPp2_O!6!*,OVFY+M@:6;>om>VISAdW2VuG]^^Vtb[(':fb/?dd&@_Tc!Qb?G[OAoEM"2`Gm/VuYZ
%lhid7jl(Q[rWFn&mc@aRXrQuL3m=mp$Gs*p!=dR&]+YbS8oA`9\B)[@q^p>K5n5E7k3mZ$JWd=0+Y8jNO9Z!$jpOe+kI,HXUY<EX
%JQEVA9o2#A\o(MDiZ,R[rbs=!QT0IKj@\q[W5JKKA$_3eGH-LiI![6*=_+,^iq!'TOiHlhB>bmHom@)HQO7=HT3ot68iJ)2"Hg&C
%#Tn0fBFXJ613`CrnB*nc[0=\0D:!Y--qKAiC+D&kk0"[K1GHSY=YLaKX*\WaR1O=8U"u&b*PX*V=smcX<_'J+<''_eBll4CUT7Yr
%;Sb`W_bjX"r(SNZj`dln;Te*K;+(7,j6jS<dP=hshH2iM6.ec6O0\))33bi7q1[&ArX%!4-dQmhpdLcH304MW0>3FC[QqF&c&rQ4
%m?)F+8CUS)J\VkI4)]&'Rn]98]ei^Uk?<WqZM^;sSX-&b@^aLe$;,ekI'iJ(-,Lc6UtdXc7=4+4K5Y'6=g6\Tl&t8Y^))'c0)]t7
%NXE8eX4uoR2fC4nHO.Sgl(/h(?VoSIY]6o:l:dM%,==EK+C'Tn_fKEfi5uFUk<jS\=B$cI?Ud&@%6:l/>`u_"X\JX'eV^QGDL%;u
%IulFW8$t:-kn&9KS*O=PVbS`f%?LqR;]l,Ab9jdIb*)uK-@sr@1jQt59"Bb0P<m[]h^pj^Z25Ce)k2JpP05tHfbRcnN#6pM`Qmcq
%6Us"rQq8B3eNcCNrH!3ig]KG4h&$?W)QOLm^q!(l;2=YeOD]o=rtJ1-Z(8KMFug\nJk[n1SBpgELicTE'TNW9-MYY?5"kn-'-mZ8
%j#Y%ce--AQ2!iRhB!*(T-T[Th()F\![[QDiTig2Z('7?/M`1At+g8N$SJ0S:6ai(0'JTZYUpCIaJLEsa![4l01*b+.h.$AS&/",[
%&a4f6DbLITQ_,VYA=?$pa-l.CaPP2F"W0cWKo^`V`Q^^!S5Wk7VkF3N538lL_q#*WmMeLXGUAe\J^(8Dp-ZZW@_7(oLVAouW)B^(
%gl$t3esLaA^qo,T=B=\jF*G&HA='0R_INhU!lY:,MW^FJqH,0d5^IW;QYuVK^1#)\(V,1R\8%B)NE/K'1.n<<B)N)gQm?m>lGg;j
%q4kaUl9K_&f(Jf9n_M$QOiRh8*mTZM.W^NbY;le%lna!$XP^]>CC*/#%ZXd/\Qi4ia])E)I*J<\Pi"+YMJF)b<coZlAc1]1iJ6)*
%:2.WO761LKBs!3>p_e3g3;i!#Q+;3=$DJq-G@L(pil?m2)"k1f\_+"Nm42K!0p[b,Dto'RmXkOtHaRd:l'Xm[csJ1b(NWQfl)>/G
%iNZ`F1GEuiIq9=8[h8AQee$h54T4=Xh!2$Qh:%Q^g;dpNfRs_ri0fCR;:%tr>XFBk3G"/)nhNq#P<KbN#M(_jJ#8Q;CcP^m$h!1>
%h&0^Ci*^oPd#@o=!tJ0Wq[p4I`^o0ik['g$VfL--dl"@J):sHo]uuS*C"H*Ql4o(d/nPHDJ"_fpSDW+jSS1]X]*0+&@KdY5i,A-^
%pp0f'0b'o$_`:VH]EJO--ZZu=5F->)5^ft`3,[g1fpu"m[$R5CXYQ^3?Eg^PkS*i)Rms(J\]BT@]<qI2E%aEJ8NLR7oJY*Xad)In
%;:e'*dcNakKkXP5PtOD%O2OVXE-55L%/j2eO4(QT3oD7Ele"nTJP/"V3&/,=i1nsJ0;Z9H10e[dZ&7VQ.OJkIJ*r<`^R01"3B`dG
%L=k9)iUFN'Og>V5nG<fWAYEgo^F^5iRL6W.B&OWf6/mSnmFH`n(06+VU^p>ug!!ejL5^\<EJ]$rV%aE_^"`_:23+79(0@huVBlq;
%+@2OI11bUXk"Fo[fsK="b%)R"V1L\Lm!7^l^@;.o@:52Nf[="">o;[hn"'M>$elrR+Z\FUSNb3hFMX\NE3if:WNneZ(_VL)n=K)h
%D=CRff>h9T^\,4.`F]3a>qaHMR[-anpkLut9Mn*\7["<o#ik3LR(H-`H-Qp-4366P>TJ2jY%=:Mo$hu@\]@](F<$EG=.jrgT_%TG
%[b6DE`gZ2oA%qJTjr"'/dS!%uN4hiH#m>2B1c#DVE-JS'=UHgkD'N,I:mr1527m_.NABeBFCaI3H,8rdQAZO&g>895VPA%^R?nF-
%617>bZ0IA!gX>SU3b>L<Eg$i2V/+9)"\PP!5lYFoD>n+CbGJ&hh;9b#XdIYP[e>?mJEb.^DhhQh-D)!LWIe_b:aDkuCuZ#+%B]#K
%2BA(0]Jo*+V9G1(gR-L)r^k^aA>VY0D,\:,]M1-5h;`r/g8N>P/'p`1*7CeZ'D/P+phDWYq12M<Z4SY[n:gRbRVsuUhD02kK6V`P
%MifpsHLD@<Wf2WC^:4fnV/-4gG8Zc(b"m*,%7u:Hq(jPU/BrTlQA3UO]@d<C$XO1Tb`to0>W(`X]ieVtiiT>T]R1jiVs&Y_E2S%1
%Bd/<"nN-2M`AKF0h=Gl2qooqi<.a1;OM,nX#`_<R&5[_')p6PQ@mRqLL,9p'm?*h]iNm=mapT53[Om;afdZ+dfm]Ol:%i\b6b7=!
%U36U-WslFA4lL[]Vg\NS617T2XT\&2hPG!/[K!sKSDdA8&qW08$SA0]3pX&Xc'`He0Xp@GZC?kFW\LcTBn>4L%#q']&b3$Y.-kq3
%p,&aC]?MamRPS`,Du%H1>2kt4h?l[ZD69-G'mSu/35o8.m5M\$GrQq2[n_n,*<!D<gF^Q%\+G8[b>Xrkodut/45/*f@<V#&K=SV2
%lG7HfQ%X"DhbV`=Cq4f-o00GTe$'k[H%4O@DnVJE&uJcXCVmDr'o5UkCEJM4/\UhsdV-fmS&pZN.YB<i$TpLP<#M5\4kSOsj$lu!
%NX!H=nCI;or>";cN7MA5.o,,l2Lb$lJX;CBn"]2qGF`jCnse`QGeq#Ih3PNs:CA-^;^[rGH)+26a4a45,B^f>UjQL[.Y>X<".kE[
%#1m6;WslFA4Q1RTPh50c\+fltQbEg-_c>RiC;R;e6.Yk>Y=@94^3VWZ7$NU1'-,7s#$]dsG]p0e1-/fhZFR0YNM^S6%>sTRf(KW&
%F[5%i$W?bV_T)`tZ#fgnqhW.@3`Oke2.1#qF\C@"-$n!j/1Q9`n[u?Il(X4-9DBT+0Hh1L;NGFI=]pi.d7!s$U:/a0pU6r!@_ShE
%\0=+n.\4)B&?)FD)S:/Q+K:T%^8mon%*Z8n;gS05\q]uapuld_&I#cg,Xcd+no]T1)iX&o1Z$j_TmslX<F..O1mp?LOEd:-`(?X(
%DJLD?[3=o;1qdUWqZeT%&4;"+%u)XlS$@aUNL@J<^F`:%6;fmWqniRKP(jVq7<oTigpPt!RZ-6V_P1\JiP#fi:Hm5aU/IqIB>S"h
%)Gj9uh=pK2iXgIcNo/1iQ[]nb!\qj-bgV<ihe@Z9*@.fU8&,cO`4+R'-n&WZ)8\P_*EC*D:htE_JBktfYhTdtnq4!_ka+:P:4t6O
%K4+P-VLmV,VI9\nj.;>TA&i,5["I04a:?M`]pq4--[ln5hQ0i\A\4@h+g,mm6TQ10*SpKi!;oa%8n<TTdT:'i8=il[kCJcLMHNuT
%b'VK'aaA(q:K&'2Ni"57FdrAfM-LYgN>K,pnMS,"e*i(a+aQs^B)Wjt>_,\"On<PNAd6M\kE1\iQCrO^/YdOrR:8n,Mscl4JFBKQ
%Fg.QJ$0$Vn.ECCp?UsC*:SafGA"cPVhu79"HqEr!rX4F<he!Y4M3r`P,H;)BH+IjYf5/lq^nG&/b!a3ZM">Od\mNK]n/aMC;m!!#
%X?S>3b[Z?5lH%_7@k1%)?o0Cs?5@WThA\qi6t%jhq8^#E[9MML=,+m6k#O"_:1!=RKC86H8dP5IThi?GB$BCU:\13HZk#e`(C5'U
%3n_Wi9b^*AeHP,!1$ocLBe)uH'D6gOpL"2T[YG'-gN.ao2,9kpK[9QpHuSiFmgnTG9lkq))1ZPkXZ17QP][r9Z2,r@5"$]n=Ekqp
%.k/mTBf&,id7sl?QjF3b'jDm.KIBqSW0l,#%1/%.8t@/'Z`N9Rk/@*S"$cAi(Pra^]J0YChcItUIQ,-V@V=\SZ+YE.2Q"k53MpOu
%Mj?A:7#dV2OZ;i%9q\=PS4[c]T.Y"T^RhnP-"g_"IBSX=@g,P_=1Qn[Yu9F?-d$;,WJPnpN/',!"+Dj:j1#_aV<TgniAdcR4P+2I
%bEn4/ORI*'N)k1?DlpEgL#H4_Zb-1='HqLQ2FH&=/CiBQH_X5p8I>THg)rf(r`&AdoLuD?:`fLc??.73eKLc>*Qn8%%6ZQMp^PN#
%d>V5a>C5a'<*65JIsDT^qOL!^EmR6a[P*&Qks7/XY"f-2dnPbc&kWZY;8;^%S[U7X2a)t=K3g5h_lJ-&mmm7Ch6d-HkD,rH\6&-r
%[PRHubXBaoHi#077U09U#UHth^<EMXB--]EMQ7VXM%D:rf:E@:1RGojWP6=A<<L:T7?-R*hcdT"T'=RF8+R^*FgEWC:@Gb;3ZtfO
%CFlgbecNa7YhEqrNEAR-m4FBqchDfsGD+40iRrGrCR)`%f.h:#BN."Ho@ED,k>58o2*5*<]]\_bTh0'P<R#(MK=27gVn7LR<3JIb
%(2$&)IusbtR?*9sUFH<K^8@.@VL&Qr53ln".%Nmf\+7AW[5kkqY[\G;UV^Mo0%':OV)+(-r)ld.UaP$A;XVD:c^]$DqD+gm't78f
%O;dbQF(_XnQWRe0XHBD)Ja#^ob/)?RcKr3PK[OEFKf,q],Ha6FgPR^-Co:bqUlN#<M!006XV]eT?53$bYjb/npSK=#;We,;e!_&L
%36#IPc(rQPY<Cr7fH//?Q$s)Z:+u@a(`kZ74$#//83s/Q]5:IH5N(*,W!nLWO$g&S+/sJDa/>O-8F`;AJo"H\X"Mq,L(r9&quCji
%a<[6OmM8)a/I56k8H"@,4"b:/.E?(XoqZV>qT@%)!p-HeS[TEcbso@S29#Y:a>/YXh6ZKZ5!]IaRQk7BdJZb@K#acmp#nJZBeCFu
%<X:32KV\?0fa36o(5ebO\5n]_djO`3/J^e!-3#8cZu:&c@IqI\B:A:JOn3Tns%'Vn7H@rmnRn;*aP)'ts2r6t>VU_0=Bni0cBQ#4
%DbR-<0[emS7ZL+,N185r0Xm6>:l_-5,EngkWSkHeDYi`$_9980A4'098#H#MH%Z&-imQ&j`UB)FfId\ecJ](d@bfl%HO;j@SbRT0
%AYX,lRp;2Nl3gjGhbBmA$fudW<l8PFks;cfSj%+ihhqrLg\oY78S<egH,K6@`9T2T=D79HKe:^_;a8`MaF3LqBjAQ&^,@SRrQY8C
%'_W!G=eiOZj[09#[<%B_o[K?JHX4co)%^h*JT?MO$MhDbrCOE5Go9B3l)KK0p,9(-k!mSKhHCjc)baY^<&Pi_mm>JJ`EL3mpccOl
%9&=?3rH-)I0=_".[7tOWM-e?<E"bjPd%@-E**tlM7OMYOq2^!)CjjKd"ASVQY^\gY2n8ebE9m6+[Jh4+[4A"f](7&q6G0Tl]=`U]
%mAdA;&;pcpkV4[t*hJ2&m91(_K(6WgF`1&6TC"luDeNpJT6np3?f$?1W)GnM?"(q@XrKTi3b<,RE3nIO0pGpKT_pWu?5>SaW\XmW
%I,4:+au;9f7PeY!Ds`P0^Md4Mg3t/jJ&^0\+1hoO`-eFTm(dtm%nh,*L"?*Qh\G>..Ik*dL*-V)Y5)Dqb?)`ZCh9KdYCFCR]f\$Y
%1CWa4A7Zd2J*_,[JeKe'3>4(?%X![*SM!nbk.Df/%A/N%bkHkEFZD/#-6s;oI_ka&f]fs+7I8L_WO![2`(.ntjQfp^_WCU<.c2?@
%ZJifc`qB0O0%`?.17:H+"3^G)5"-Na1M?)QZs%4p>[t#"aTT'@B;s<CZfUKB60A''P0oeunZCoF*V6;*HsXN#S/[MmQ?RgbIL\-j
%I6tJu$-sE1\dD/XU$#74ns=QM*@=OGMB^V?-brSj@eo9qqgB[+@OoLI*2JFXl$N6Mi#enE>!@\Vq1HOuX'(?EdP]D9m86(`5H!p^
%JkK0>GeVq]UI8$&LhF9j(3mi9f@jLQ[AqK$<12D0/-F49SZ8495@$F%.Hs<sBJaC'q;1g-J*_<hb%17D^i7l7p+cM0D)>HN`5nB/
%H+#K^.u$_qYLfD#%8?kQbu2Q7<e4t6UnUgXfCW&sp*72Gj*!*0EN&^fZXfD^p'X=k*%D)&#)uEj.qFKGkVsu=;u,"!cJ7=u>*sRT
%fiH>A'`7LfYjT691RMZIHtLn<LA*W5Ilnl2&fLQ2">><tjX1=X.:1qqQ"kG8Rs8p=K,3?AcgQ+XjLqn4:!\nIQ)W+\o_$;=Ck'(p
%G0I;L/oq9NE=>&nhV5Fng<T'f%,<B]f?I&`FcOsQrF37H[knl9jQpSU%e`Sj.'bN_^,T+1Cq4l/&:<2eMDAf`d"Y'u0!?n6j#=qV
%r7J$mnFDCqq0g*Dq8N-;\_R1s_qu8h:k!!.]KDdOVtK6DGRWj$1^enmEp_a]f?0U7DoEh/5Hnos<Aei4=C-h=rH@%'.QUdrC4'f9
%g(>[L_8''NdMR`#_!#MoJA[G?CI\i+Br^-A/P"s-_[O(&-CWEkdZO?<l8:[ff)*#bKj.FI+dPXn^FS-)F6=^H1ffea62W/jif'\O
%3"bk]E,9,]c$=\4pG\WC5f!oed=3n]og<):;*MP>"&paL[uZFoUE3/T1.tlIf;0;3SlJB472&A&dmgA;A9<Ph,>lImeN^%=qe>L)
%)c,'BAB(lIB#Z6DGE\`hDc]%Kd+-[DU4hktl6E4>GFcT2cOPg7=b;D$\("qQmI5*[iO*gfb`j@-Ks72-b+S"t3dn(d\S)\1k\o?m
%G5Z[S9oI9\1>/)kS:=UDPR.K4T;oC93)(Nr>^k%Sbk`!u)HLg%5ZUi#.)"Ml;Q2-IB1X9;FUabTb&;57b`/sohV+G-lKNu]ONdE:
%VMLphoC>#;p]BD$15/nTIM<8X:<o>seCIe7*5T!l8t\"P]"O"q[1gV'Nohh!b)JPu*3`.J.^_#C*FhSdKglXgGu>[TCf-/od]XLl
%-[]IWl-+U+[m>1k@fKH57aVT3^GFX9i+_1j.*?ObNoGT,$!f37kTPY@AN/S[T]>Ulp4RT^dCfAmDVY`t@W5nbXK5D<6%gUBWrB?\
%f&"H4n70FV8/ij51>3as_tW2a(=>c$?Z:WW5k/65e*NtG,=/El";A*=.=lrDc(N;&'T2,q&*?^f5_aDZ<Wb!r586+BU!5p0e_i$!
%J6FD_Kl@fp&^3?"V3cS_dUc<eIP6fMaJbKhj[;=2<_snmk^[8"Kn^GkI#LuA])GVV^G9%fb/@^94,BZH8gbqh6dTW(0,,MSH't6%
%?=MFWXO?'R<b^Ihj5W]"iK35o7@N4I&Tmo^_Cg6Ikd"l;5IH=*Be4h#M4X8pAu;D0YZ[-$MAALCIS;ojXBG`K,otN08jgp:@DA4Q
%a[)_097M^7Or5DopP&M#8W+EX3V7OpDqUCMr-6&F)!A&<8EMVq?1DXN$!+M%]dCbr6Fq60HuY7MME*0/oGhTdki8dLU?8Q9_1s=>
%&u=1t[8LUK0,2+fk0K8uLEjNnq;.iR]NskY@6]5,"kfj1D#RYN8AIl<g!oURKhhF?/mZEC;i^4uE2A/Q3D?=8!mQ)7OND4^5In5*
%fSt"'mb5PRm^uXY@Fk,*e.8uDGdd>6OmNi;ra"bOSa6WX5^j'3hI)r/+:($4f.7n,*T>itV11)9mdGWeoF3OI'h0["iUD9Zaq[%C
%9,sC>M^!DVU2<F5;dX3llq4a$mPq<r8D>/[4L7BQ<L6QReYJ.N]3A0>R2l#MdoY2j[;W*hS\r/LWNFG6p#RDl,%V.BO+8;q[i'a.
%E@\1[i67C&:%i'q(Mso*P],N_8d#E7E],i63Cs6_;L>974O'47,#SOo[B";E(fZ]_=;^`AqgKhPi7;rFDhY.Rh@fY3P%-R";Znst
%/3,UiTquK6_D\j&"?e$bIVKXp>K(1r!Rp]C%A-&CEBf1GXPZ5797nU`>>nVPJup,X.o"jNd8LuOlebJ/=('R,pg!CJK%)W">jKG;
%;J*\^/MJ8+hd>'p+IhfAOF9erS<XJRApI2&AJ>Y"B`"-1m8Ik\pfagM_B6eRH*M%7=7t.o&#0MU5<I,97qZH2h\X:#Y_bX8nAsO:
%H^Ak'b`eQ.;/A`bk9r#M;99(%JH]%>H=WO3clT,8;^OS`%9nZ34;'Y,'1"fbl,k?/eb))t%'%>_o?JfZ^b?>p]D3lV5&&m>KZWit
%S%d3*)^JnIpmE`l9G>Yeg9mb(/Q:nC8:,rR8e1qL;^>HcLmM+T!$%%N6.^W/Ls@I.S4,G"SG6pVr'AgKRF:f9e!,1#$F`pqrlXGV
%B@?W\CC,LVRG+#$"jKgKH5L4@Vb7Jc9`s9$'@5sS*CHPa:mJ^hF9F#anRRMDRmZ4IU.%pe)8W:jaEiI`;s#5nF;"'0+_nhg#XX8p
%5*/9u6-OIi$RuGZd#oMK`:_pGh#1=>ma5;J!J9S%0X?-JZ^>t6=jmNLJeRQGe!<5)HdQg%<o\6XoMjGT,et,uD/L^^Z(5K.h(7]i
%2ug)lpZOecq2>3\crPCTD;23XDkkTR)PTleQt<YdGGU'`'N22L=D/Zf6g)L&kc&LVr'mD'b_^FiMWt9)B,L8I]u"BKX+T1[eop;h
%L?pAc%F0RQN*4t@HSnQr5PU&D4p]6[+R=!X%SRTkn"mKCZ9F"GCc3p2$C$>!T_CobYU*-c`:s,^QOKul+UU[XAp&$OrA7_%(Z&"p
%>S!CkpQ[K\,9q*s`e)XcKcrjT3"I`0o,raccb4h+9+Bi6n<l0DN]-[CRq\FB],VIXiH&I^SJc01S[0)1DPQqOeE)nme8L=UE2tZ%
%;d+P##D?A9`_jkK45hh3-d>V*p^qpR2:6HhTZe'pre\ecf6je$O*jYlr97o7hGg^]!_W*R6MWAFj(39jenTOEf^*_B:9jQ%o1b^f
%Ru*99rQg7ZPD:,=(&+:<oXiO`-96=?0Uo3$'Y7:ZOeJ[b;to^K"fnI":=TNj%l.)+H0=IISFQ/m%G?s;)k7(Qj/fi$p3ukjlL<.H
%O,*^?-rp$sQmPdWk%?0`-EM&\]DeS-KNZJG0cs<BC#MJ;'glc;""%&'CQOD!3T@3r[<88"eBEVJ;S*]a>ps#F?fCgqAT;!dp)%cF
%S$aEeDT@\P=*=/"EC(O);o)`_FBlf8X_@HUJ(i_5hoecYTIOo[*C_+Y`A1qu<AorXA+M-Vb&/1U*C`'+EX)>,QiRj*G3+D5ZOHTo
%/;QHsob!F![OWI]g9E1)g<&SsGXhHKSlRe7Y6Qg@>=@BuLZAC[>&,Mb:?`[Wn<;$JH#3d1?`U545f*`WJfu1</?5H4NV8+5EZS`p
%]"FLmqN2;9U/78&6-qfC5ulbnR::(Bf`mgfUg%"FQ;nXWVS;EXWAn(&3M#93jW74*-'U#$'WS`8i/jt6m15m#o<M,_$H]&/-PaO-
%,Wd8FPd!"o5+!s/OMU;3CW>,5258QThOLW*1hkG@H.T*;C&+fcb,`(=2(9kN'7cYW@N!?b3>Ec\>r)q1^^\Ni9oeDXb]3)m]J$mK
%N7!D$)'0iXHZ,h-I(&5`(qM\3`+Yp:oYXN"?](@>]`-;KH9K"N4lMumO;1k^PpPADV-&jdO-->QhiiqZQ`J#p!+p)!Q<o\&<OYkK
%f_gaSpI0Y269OYtAuXQ<X6Qgd[MTHF:`hND=1Tok;\BF+1f1=?=Dc,qX!V<p"fL!e<#6qnej53,39KL$\le%:MO7]#DpO>1)eNAo
%NQlo]nBmG0R`ginXr(s-:%9'`ntV0bQm!&#]-PU=N:&G\C%%BWS_($7Pf0^g;Nq3>_2q1!gk=+:ZFGNq8R:Y_2].l)Vr(E1EC+I`
%l_MpY97k"K3(^MZ9.B?>03[c3ccl;U+F(%D4ZV=E$Bb'g=j?.bB6"ZGkq4>>f4=;<G=`bq@dZV2TuGQ2$Ts3IeVt'=+m2m4*up6J
%:h+`P(ok3LmE-?h#_HqAX-:Dmh:tgI@H:"eBQ9XU&nkVG313WgZf**6!G5K),\WJeJUC:<iLpd(WT!4J]U[Xu.uEpmXLh,&i8?:f
%\3m&uQ!ga.Wm=HH[k4P)AVBi%dk8[$FK(ZP&ZS>6:XhKncI%\.:GTDf_R2'LF-P/[k\@X_-72_u$=[-"Qs&iV)WB?1!VO1]\`eJN
%,sCLJc;K9Y10r=tbj`(p2!aPTYduK0WF<,t6f2S-fh4e/M3]s78[+pr+TtS8-ANV>k?S/b:/6uf>^kn:=A4$[ZJ:#YaW!D6F?#+/
%OsGr,jkq(Xh,/i^cES9K\iG,]eI$EGjK%52O_Nc$qG.<NNht+cYWQTjDLtjQrF\V".:?0/fW\`"9>Jrek6$;@@(Bl5j6Gkb8DChJ
%;Nfm%N"D5A`";iI&qs</4ih/e"AmkL>P)!.Wb^Rbj0ZYW7hRh5k3;g7gRq*g>@'XY5=2m*+NMcRk5Ui)j^0lKE'ebsVtN4odKPZ,
%,C4=`2FXbW<Q%Cef4PDiPBjkq-lF3<^o"Um`1PUHn$1%%*HE,Yq@GgD@`5H@pFQclc?t'-7Krc9HU:O+G'@<E=V,lWjI1EsfD#0A
%A-At2Y2jPY@ZcEKgJONpm*]I_["mCOHX2N:)*nMFpcX25Z)*oFI-(sY(Ff;lVbdGm,@3hsKr*)P@[j5d^c/uPo^nBD\`hmf(]T#c
%)7kek1pLkCn&WNVf9`tGk&3jD:mn@G4gX#^G^mq^<VM0TH`jK*8N+=56[WRf%/-+n&#ja6l8"g3.T*cHPWu^i]/^<l1XgIUn[ELj
%Zf#Z=XR3F#cRJgejZbk!kS3g(d]RhnfG)[mUl@M1$7qZu.-3O@<)k'Qk&]5U^gjkE[rYO@Zk[<+NV"!#__TES[V"+ahUG?h&W!/X
%)O82A-[ll#"4h+JYqIp=XO!t,?YHSC+VX5nbi/4rF#Ad"1l(JU1Z%!Sop+YXdSop7c)8d#;#^0R2G]lq%#Gqof"dX0G$-kkNOKd<
%\&f=>920bi+5UTDk5@t4m'CFbXS>:'(JPu)3er38?B1GPMaff=;-ZQBE+47Uk@9QEY.^eZVGigTmA)"M@N0C;e!VG%qBT[Pq;"G=
%Jb%7rC8W>f2EOQ'(QC5;HuE=D[D6R)DsG@RCs':s;BJWd4RhX'/9'%X8l$<i8R'UZ%GK(G#i=2CV`(*VM'V'cgK2(,)qp?Xff2:h
%qV9"Z\Poq#eok>(hkD4!/&>fq?4FGAWraspiW//)2Huilh"^G91W=>8N9^l:4Ic<L[e;;df&XnlqZ6OXgs#im6A'TG`T#=[(]ssP
%+>8]"lBT^UDN>8%bSWKQ$2XCrLra*RcU04")Z@Y:aWde\9L_JuaB7T^dk+GZSd1^pkIc4H5GPX075nSD^IPVabmC!acs3nfpH@5p
%:ALl$n'TqM1=WJaUZgY`?jK)YNa3<%4RTL-)H#].EZd^n\3jqRF;ma<3nk?\\;bM?`'$-H6"([\"@/e8VC,.LqY/dO%A!BC_'s(;
%;m_OOpLq!c/],6O=&_2[UKZ8Ecp[H<mas/WA)p*[:NN*7,6-!RD[]g0(ibEM^q"eJjWjKl/V,l?OlS2`><C!V:Q`1lCC1__UVb6X
%@4aaW$BgUAb5`Cr\tq\#'T@r;XSJ)tm6->W;-Y^0A3l%m-ZDT[@*(>&>.!$T$kmq8.lmLfEW,,0Dt2<`@a$Or](8l8)t["sqKUE,
%26em6ms:iKn9aR8BjQ1XDl;]2(#LW3g)i*X7@Gm2EM:K]U!]1lDp[<`.I2WgZHI\QQ@R>?cfci;HT#Kim.mV(f:K&+"]H)ighU,2
%'APWO,P*u&d!pNt;UeH;M<-#5#&]aXqc"'9\<fB^$Ri]BK^*+pA,\gTU$9Oob'CO2JP<a6oA(uMlmP1.Ngc[jdu9lq*.s-jqg&#A
%k;AN*oi-_)+pSp0kB%UGS$/t(b&\M5[4QAJP2S%:q%A-mnEgOrrbjZrU@Y_pk0L!:".C[Ap,K]P\='EqS5GPr&L?XNGK58Ha(NKI
%]LT:i1rO:gUQYj,eD.No.'BZ_b<C95=D=a!J)sI*YY*-d0uDZM9B"Z20P^I4JXVZVC1-6!`XdIZ0C@+lYH+2K1.T0u8UFkuTVtj[
%RqZCZF%nL-r*4mBH:;/V;)"Fnbe:ABqYpl@aMkJB*7mZ4F$N'm=NHTqZTTUJiODL2mU'gB9+V<g\gepp/dOa$6#J;@p0@STd,s>>
%@IB@j<.:u9phd%((JN(mF0FuEIf&<#IeWlk>d/VSrUh8B96$n5^;'iSE8KQ'YEoNG*>&-E@^oZt_tG1$5paYbX>-una,IT1,GVGJ
%B2+8D#R_8P,tU>05/aKBD9OfL=O>EP_#;iFCU:aB_A0%qn4=gtrU-tB6lY]nfO_jK<iKr]^Vr'fP_:Z2APP3=,*(JAfSbIHL19%*
%D_mh+'Skc,-T"tV9;@aFMXpa@.>;t*IGh@glFsgB&#Ph5kNj9T+K<*KFXlTI,KUpGjmD<;hju^paQPnsGC,'dXYp'#X/:9[.tb$8
%-%X&[A?P[NW!Yre*?HB1T_QZNpsBb.)`]lX%qj4POgi3,b'^E!1no<oH?^XM!T!;#'kuMt/dNISO05EXSeqIuPcfnY*uIo&i<h7I
%6+X,Zk6^(qWboI?Tu5[OMD7KN#:=hUKS"`(*VlMFJX/)&ej+.,BU'bI7'<N'jPU',=N.%eduWg-5b0?K#DDQO(=Og$]1<gVVc&[D
%\B:2/R(7O:1f6n4iSEq6du]nr(UjW[\hnDfgleE[:.Zk-elH%%OXN9!]In(282"1r/B6eWal=IV>H477&em\_s#0F"VJ*l/gjG%B
%7UJO%mLnPWR,uY(L2c'%kL7m'1Sict"ip:OHe9f)HWSZC/b&=@7_rZ*9-P"]#qW";j/qh3@VXE3>DVgH3Ad`/VTEuqN%*F[HXGt(
%ZthpF<cIgN)35Y(Y4`lGUKDn,]%(+1LQk9'5o^u9KoDp]X'a/+\U`+a9IQd3CYU7Pf.=:oq6:.oVbt3+0O!Gd?<XCRJY"Aq;tc[c
%3kWbZ>A^k1,P?'q$RnSe5<S19'Ei\pT<&on?.]H?%surL2gep<L:9A3(<*"N_q%IRmF8Kc34Y::2*OhQe4&HF:gTH\DX*iCLFV`F
%:/;A#*3+7p'!o*Y$q:3?W%%^XF05n@Ssok9;[#\-BSHm#^UEm]q8q4o>h;j(k`IT)]:O<(TSFW5lKG#GRb!KucrU`as1rOiWs?&K
%96j](#'tVcG@]Iino8Lb:RA@4H@T\?He)0+%1Xco.[-#=>h'Y:1BM,439QDZHoX?#K//Bf4ka<o]+,nOj"=P1&/)[oO"4XU&B't^
%h3+FphRBn9]&&$M&p=u`j^Qn)@[H9_>&pf3%SOD:F/=6?<CakV=[ai_k_CQ7p8XbqhjKM#Ga^%XY9IDN\6)CVfYVB)"W9Isgmau>
%Vt-,sS.i.=IERCYQQ&bC5U(A21ru&uT\[7k#sq)i4,YAk8Pb0q6+J:;>SAchF7m`W%c)8iA$hXPfKF:ZQjY<,2c.",G$P.a/Tk_r
%Y@=_>9s=_D&rqU;h-mD?o^4=&1^$C]V7OJXQ+EW`OS)r(6"U\?6D0*EdM&u("](nsT&Y.R;05.m^]OA+FOlUK!1f/2*qWf\fRWm>
%9qAZ$T0A\``@s:uT'-_:1*gWK8.FY__&!_f=]`.hVi<H.7KgY!GsKhJ)2g\1mUDe^8SKY?`U)X3Zql^65*\E@j@&RDkP=P;SVtmh
%Yk),E\Tf,S3U.XG?"'LtKjhH;S"SQ/!^1Y3T<'p4:Ws=aEjn,5>tp;f7HpVRWIXOq"!*X7CSM1h:">/X*Qk`5,S\jT=20TOb>.^d
%UngOsJjIl*,o%E1f#(`XnRZ<sf,iTb0(S_82`NY]do+$;3&C<WhH2(t+SPIMro;Tpr/\3o<b.KE$+lRLbQI(oUBC?=37CsiWS;\u
%%7pn;6`<\EYW4Ab(_N%L:a1!gV[;k,!#5t7;g5S`P)VBj)gneNmal<g+L"G;]`1BrV%'d[['h1Dn2O,Yp=uf<=2j9f8`NmS2LqlA
%5af&QKWp's\1N%o/!`m;OrR<m2)G3<?k;;LkSp[-.iL(\+u5sG0lX8bT#8_p]U;YfFOMYj4QKp,;@]?eWJD+LF%pL4-Q\ilc-`"W
%9@LHm,!$e281M(,o&uOh\TL^Y-AV$C41&>VJfr]kO;*BW!$+Z?U%GNn%M-Jc(?NiuT[+hM(D;C'%)Rts[<k^Pk#*2blL&pEGo1@l
%CFA1\ZnX<6U0McinUa.u=.dYINf-M]PgI)oLcCg/d+`e["R*.3():Y^d"3TCVm=4EWEL_^^T_J%fAI>/]TI6!l\tD:A8$*H[/]c+
%m)3Yh]k7..8'Z8Hgh_bsG!J.-O$$7=Qtp@/'+L,:>\hegDQJe!Sj=C?ODS(O#m+C$q)lHU<tZ9b68@Z!%ce1MMk3u$/Jgg)eEI\k
%r(pF&a&OAiGR:2e)FdGYLOn<87`[Zd#V(81OtQ16a[h'-+V(YtA47==iA9:P."P;"_PE42W%/+9m;P7&K6V&XkFGm=-8c^AE`5)o
%9p_95cWi&d]RX"^.;lW>9u1Bb-Hoa6a.V+(gr!L2G(17R&D0iQj?$7])+(BsLkL&">u(jIi?X7L6c2>6q;"q#!2BCr]%>KChb<QS
%Rt0pEqVFD^*](AuH)iZG_IHRa<8Z0o0neSbp_GF'e^WVjC`n#E%M8')MP31L+aZ!"^G/Lii9s.[7]E?c0_NjhF!`#Yage<.0HN$]
%8NRi'1)#r.+:M-D1p\+=6+%npBpf=^Eh(?"-kFBa&brs+?eLs3\ajeNidcspHGS)>2tu$4]nhR&ThR+F19N\[1O?`H"MXpL`LE[$
%D/[mTB+W*oOX=BeLmg>LgWTh3caCa?d@t>1RmUN1CKA^+2<_2(HNcpUBZ;b#dU%84f_lNASFffKU-_5mJgh;AJ:Y+TqVA#f-#AaQ
%`?B!2E(<ldC5q]r(:&nn#a%L^/H/Dn&je[h6a$JO4U)iKMQC;o\6bRILG+=4(9FS)eaUc5m>7l!&M%5n#@KlVa-As$kY3kj\Q#5D
%aCr-dL=r<53B3Fl5S!!qG:5^&JmFg@s4uoV"W+,IFb<JJSudIt)iY.\Q+O'1&\3(mL_M%GSFT@(&EdO%AEiNlg*D?fQii\dP0a?l
%FYj"#V*$^W.DTs)#d!B"X]rs-$YnBqriE%8S_FBAg.F*G7tE',:<=k0%'a9Y,+15Hmiq1WT##taDu1%qc[Gum=d0`YZsI@PA/O?K
%WTWd`4VgHu&;:`Jg\;fn,@u(F.U3K,9GU1QdcGKI\b2-i+bdHbEf)bkRgVb$;Wko*:SZ(KgC0[:6ZA22(SMB'eRWE5=tGWRT:aJ9
%T-6Q0&f:3LmHQmTm\4o<J5B?Gme/nh$cbt+9]5RD?K3@<,]T>;I^Wo[?<.R.-CTZ'P7#gQ0LINi3ql!l5dgB\97BHo3_4fVd&Rdu
%?kB\q^+CCe!ObB62+oZI0bgg&;%-e<ZpS;erIM5Xhlb]ti:B(?\`a7Lk!!:@OQ5*%$?1#)n83oL`OahU$c(bmq@-'+^Ior?DF]gb
%E*m^Y]8<T(O8fgJ,FIpN-=qXK+S]t/:H`'$YL):O5Z@0BOW"MVAKgN9(PG=Z"HeO1@=cl.nQ4N`TM_qs(?@qXj'U9Q&dg*1PP'+R
%Xe=[:4Fn1`1IRmi'L*^3-DOWihkl!%!%#H.+H'Y*<coo&fn!JuI+9h;KZ/.k?V`AoXZU:hlC*\Xk"kL=NKI(j.0)TKF8*3L*foob
%i2L?q7dA"Mp&PB@p/kUm(>7%mc'Hu\@.c6+YMOpVB("T'!Ce'mkCAFcbKt5*U$uTTOp27f5'd/@<)'rK5b*`:$6SO;2GZS;<0Sp(
%Umsn'$,'&HSlB4*rd]03Q],4\=0@!JW%o)'E&'.(@R9O9<I-<#GpjC`OLoo<.oTkE3Loh70n_FXpB4LWUG_am6<>2c5[>*L)=&-]
%96^O*=(N$BejK?+C0?E?%f(X,TX=(*4M;4=4GfcLQ'L<`Mbh3_o^*pA?JG"01]Q!4kTn0SZ1V"I*Q:c>dOt^.N<Y(p0!m#]e&_SL
%35!F;--8q!3Wq4j"!#!4I(4Xl'BI3-!Ki+hR+uPbLG0tcEF=d,-NZ_&9#8J*S=%?Z5e&[n$U::+g358SnV,sjERhh_!q52bM>i8>
%gU4q6HninDB&'X/$^dF(lhCge^h14-Eem"9,O;%mc\todRNi]*j9pq;opRE&%auT5j&O!k*5&Hn[[$,35ZZP>iEa1,CO,j\:EkL$
%21B7`FTYmAn@)LO=0O-!_2egP#W#glZQ-FVJhOV/'iQTlRrUHhnW+PK#88V]c1mgN>dH](oN[1HgX?eF7DTZ7K5NdE'*1=92Z2Hh
%JH5@WhU[]j4e>O!<)<bG:gf#%!VpRL`*+1mU<<_@:?^A9L>m%Qg;&dHb1<`PNNC"mYm0`r;85s^>2e%=>,rlGXT&I5rRWr)oM+,4
%nk"iC@TX0bBac=:ml1A3EQ>V=ATMfD5r1\ff-$u0;Y3'dXQGF8joW]O%<PQ'b`-5I[+BO.fE<a<R][_M`14U#U9uU_G$WHDmT`p@
%%)G=Bq0)-<U>0X6[Ua5?H'+K@%PCX7G<Lr'2'2))?!!Lr]hpC@9ZCD-l>2^&'I1UkopAV*3<8)LgT'p@"uPD/b+Q@5T#J]F"oG^)
%SRjPm:s>"=m35_HF'Yfaq7-\I-,hAo$:Zh+\X3$(nJejKR92#+LUC>1#pu&(CI/sN`S<\b6^%'Z.QT(gmSE&HK]1T('?sds:!Y[&
%^P*^7oqk[(+t4*j8%n&UCCN(fCHR0ZA`%M]MJGH'gPd20:c)o*G)>(CN%,2OFqK]#7YRX/)DC+CNFb=kqJ-g]Q1*20g]n20$FBlA
%?rbBHHCkN"PnH'GgV=LO;lpJ>X#@Z]e.`'0B>r.0joW]O%<PQ'b`-5I[.d9JlTFcJ"fE=<3cn$G%_E8<%0tU4Oc6CUgg2#k\I!iq
%WG=N:kd:Sei-(JT,30bJ<q0FMnD!4oq5Ibe>:ZcYP+F_M;7j%ig@3hKe3WY4c0Jc:P8>^n%2A&;7$tg8J8u\71fZ$P;i\P%%f)n<
%c]MOf6%"Z2=^jCLK&jaa7lH^,r!<Qg.N%<B))(B*kIt3"Q+"1I@W*U_e6IZH^_]HdH1a/.LbltS&=0%E:h.OXHO=A>)^ZWnR!u`+
%A=H2SWjC"e':,8]i2EJV9Po&hG3UU,T<Gf).+%sF>uu-``7DM&dH):D1H)q5J<>S_m9c(!<S=OQV]2M*(X$WXMh6AhDmRR$VPaY=
%'b-ASTU3+%>JEpkT>X,mDWBa`>W,dmTZFjjT5A9-Y2PP:_qi-=nPf]jIBiH3JRd<r8:#T$'!Kgu*,W:kD[r#Wkfqc5GWXD)-gHS^
%5Uj1bK;[!A5$nCQ^d=V>p1o_%E^6U3bh%b*'+tF;fqJl5N#m'P-Ym,S6)-S+etK\o_L62P\/5`#X9FcZ)CX(>Yag<&;.8].i`=W:
%M;9_4gVMXqE#bo$BSEL[;]k(bRM8n>G*okL)cq73D`7to"F;7]jkPk&6DTN';#2aR^uOX+FfNH#RXOG7<*lIfT#IJ>)0hXd<P`f:
%V:_Nfl3G]4nEjN%c4R%T;qO:uTaoUfhIWtPl,!I#)L*e7akp]\aL_RVaY3mU+kF-X+Uks:m7HJq/IEQebRJ=gjei;DC,a@*'4.+G
%df=Q-@NlP3K#'p'bif?_:OCe%IR)/pmB'[-rKBWfH>"6YV1d8m":K)7Tcn`Od-H6U2_>U]hm=lH7I+D&LmrK"F9V1USLs1D^\%WP
%21qNh$(O2Pi!Z]2Pnbm"O!Y65eg^7KUZC0da,Do&Jhfi51KWIm(+>a$fg:6HLd\[$B?Mp1BP15g4[\"oS0ib-"]9\S9@FOWQ;WI1
%:TBV%![/f$Y1*L?h(LTdYdu9kbhN,=a-j`,/6!8up,m%2cjoS:`Sk:-PO8;ibeM2.RG$^)C=To;_+d?8K)5U>!LI+7B_4t";Im#E
%3F,?O+3`*dKI-qRmk42%!DW"\2r,_'DbSTTM\,b>Nu:&3V#VE*<D?43=9`eq0^*C]VGAV5V7>P\jq<pT6\*c&GP&(Tm#]_8Id/X5
%JTLKR_.\L)HYI9>D\.f5YA#Z^Ohp:n"?tVIIRL(enndu5m&g`E+Hkr=iI0_>i:-r>nf+iLK!DK*:Zc!hARX858,0Nb^Uk6gGcl@@
%H]K'6A-=9jV:7H.GPtB#A,n*j)&TJHQo17XeUX&2P(s$JB-NBICBI=abiGj%FbfbPFg3Ja;(u<afR&%udh)RdI9eSOT45UWb_<_:
%F#kC,:XkpOe>[&7WEmbNGe%Kd_Wf2%^uj5]YQZCdPO94.:J\-V<6lt\=ue.J[QI%!oiL2SRl]#.L8S?FqVo6ncTUj<[RS@2K>S>"
%btedn1(X3=dQaJT1LD`KN(W.i>I?Q<>p7%Z5F5i,f$s/.FZ*%L\f\Z_q!gD<!hLq"9I]':4;gFEOmU7<\1(B*f+)n,?+EET&sg.:
%^bL_^&(+ut$oU'hO-`^HG"\3c$B>o>p0QYL1b(dsg\7$fiFn1CU6H^ETVZtr0aV;kRGb,Gh#n1M`PCW&'(?`(@5:;U4FJ-3URnIG
%BO_m,DY@:A%e&_mQU(\N<%H_qeZ0A`doT=IDIC9MQ&areNS!E)*h.(!nlJ&QBp_udg+.rXJPAp7n>IJBrH2JFL>Y7WTc!CZ3ktg"
%:E-,=c]j3&]^\ee9W*,\c*uIs%r;XJQe<S!j0Kpu3Q'=pf8oYcob2/>cO#?_K1RM(PCZH3F261s_dmleoG-s7M2J1)UI!#_9A@pm
%C@&S`@_H!Rh50SG#<M7c5mfOt7PaHK9Y^U79!Qb1mWq%8b8aXD$pqjl$AtHPs8D>E9g'sG$+M?iFQo:17=5$U]C6kH`EY0eVNeIm
%$:t*p$">+:JD`=QH>>7%W#1S_Oq+;u?-bqR59(5)m9;p=*BS;X+*)`[b@tM/^/X?sePkNqj,SchLQlo1L`5Jo6HLH<B(-,l71k9F
%d1s[:@<PDAA3#V"GUgXh)1i\R"R%t/c'/!p'A+0PFrh;"pDMk'rorC1kIO]JW-t^Ac/94]>&rZg=bI$-H\*C^e,,MMC_HUFQQc\%
%PE?A0ps?Ennq#pN+,?!&po,OYOdPV?qA)BG?56a-3,)H,+!I-MdHk?eGb81e8,4kUgIF!n`:AKj&4o<`R?nI)WQ"^&2ADui*@U"3
%Uk5$X7!#=N#(;u6S[AX+l?#m?PlE7)bM0%eJk4cC3f]tp3F=dV3s:;`Kh?*W:]V*3;G^e4l5.#b%a-UKj3tehd+Xl%]pf:6]JH%(
%Th#\6W`I!81:U=^.ZG?:(,ETLguo/h*g"bnm$;f/]LMb?:e9$"6'eE!5Rbfn/,.mo'?!0_'BWg<8<r+Lrh\hf7W]t3SFf7bhgprk
%r3P_;W:En#I!^G]79/73IUkI!$t"aYesct-7'd<ggF/<+-GEko['6Dc5<;O-B=UJmEs?4H*`1uM+l.#tNG!R.RSN>;4b!Z'mc)XJ
%k8M>!4!U&2CL8`e5$q':M5GNKe1C_`&OC^3iTqY>-p=0fA'j%FY?EBL+N-n;2OOroCQpL]q=Q8+Wfm)!4].#TCohBHfVlPhH>;NQ
%$gVrC$lu0J#/8-:DG4Wr&R2!Kk?<r?%2s;'osb3]:bSVmeWkOsC_elsi]hSpR$R)#=!Wj9*5@=*CW0nKFYD0hL#\30,85s<.t;^s
%IpO3pXamQqqC[(U3;In&aV6Y=6XV%)Mj*V^[h6QTLs<tjSAud^nJ*rOT8$[*,@iY(I#bj_BVdOf]3jjiBC(k96t"o\6lGY#3in;I
%^tB1,8q9UEBgFa<jl6X=-;U6:<Ui?n1U%q'JqRD8QB<80/i-YW!0K'Q=]t3EC_dKILj_gO.r+gqm#m:0Rm`<S9]@Dh'm)0"m!NT`
%B:"T'5'7T&)<MHC=eQ@o+R?CYrRT>9M@daE<lqVb%([S[;Y4.JptO30UYlsk@I@^2j>gd'VM%#AV1Fr8CS3imY$bD#"B2GJa>eF(
%-&L!FK",RD<b@^<d.B3t?'PCGR=jqk4qD'FGLb?G2i:&IL96f^^7/C8kh4tPj4M'0DBtpVf#\=PMC;(.j?UncSqZuH.k?2jn4#kg
%2Z+7m]q$XiCq:c8O";&r4c37_*";^</!U[IY*PY;5jY;/Gr1+BOEgntH$kOILoX5T("RN#q4PWlg?V6c++K12jnXF=$PXmN5Cq#u
%e4)2TRlqnKMNC#jD!k!,\s4DMGs:1,?E?l5jg.FmCX77u5D1ndeO\a_,5@Q(Z(#6UA4?DQK?&#n;C?!Bd_DmfI,Jaj`cJ`rRU6KU
%DJT-.AdaPP>b=fcJ`;X%fu#]]IKb;9+S#`?_.*>BfZ?AMD@AY'oGe/-)'[8lch`$(-E\`!Np#<LLsNS*h<b;HbZ1iULh,]TV:C6*
%4,q2`"]Cr_55!QIUGrIsJ>Q0U"\4%a`WA^B%IdQ`GB0rtKPag@[qR*+FLP#EOM<2g=BI^/alK3'$?\W[dG\T8RdLFh@KE2*F0dk2
%8LE<<3f,R$]8&M!hOMWF1-s/$C2%Z5*>@Ee[785CK3W_L;62ipF-m:[J$qTs=!OLf))L7Lr6R5&E`;'h_.^Y=pX3$9MoQoeVOQHD
%<&=tBg@60X6Mcg+dX^K3&-YT$_H]??L7M/`j^`Gj*F^+PSnl^N,,/I_S=+_<n%7,-WKW61dR\[r#3et1cj@GdKVYRTP%D<ici8RY
%8IA'.MKsW2Ade)@CjrGS#,V1*bps&12VJDQIk1aW]M&4m2%q>rj@J`M-K+6JTpUpA;D<@Q!U`PtN5Y)-3b[&if.!lBe\iV[.aP=6
%"lYElTmiA%:jQrN3$BIL?8@9mBEp_B4P-:=k&`]H7_qGPD[Gqp(!Vh&2RW^8-/WI?1e$&:\-(JJq&/%q+rjrN:7cBY2U,p^@n%8U
%]M\5i5$s6?c4)Ob%6?Wr-41r9M-GQc(Jt*[JKc?MqWhRmDk_aB%qq'>86%>N7Pfe0QhJ-4CWnupC]]4onhG]WP%3-8+HRf(4^cr1
%kQU7MYL#0tFq:i9`&JeNUu7PWVrJ$;V:EQjF8Vle&r1_gp/p#s(icih,2oCX6WgZ`il^I;0q2thIUj+dpZEH:QWM%kLf"^n:n?%g
%c(ja,>=%?2OW7kD1mPY5Tsk?)iq"=1G_ZbL],32YMl<44d]F7al4>j1#]r'AB"Vi<_=!sO;.Tn;Yp_sg"98p/f`e[Rd/b"RZb(0H
%^,9$R0'36c%R'^O&XZC[5*^/l01A0OJYKuBBjfF)Ia3m'B1HXeBiUkmM>=!ABt>8j4lNs:MO/Jl%[oSHqDM5STHH`2''GcG8_Z%S
%=O4VZ<[a!<kK5(34q2\!*/1EamX`T8ptHP=XWnY#,\1+B2j^30gk8#c!AUXm*!-9:V/GP."6+C&3H\69_cRHbe.LIU0`ARO(I7da
%\[\?u9IGFEr('gR)Vg18#2+G.(baIshP:G2@9SZu8$SdXi3u"QUeh94DM4*Mh\@r`"F?AUhbY&nTWLTM<)+8YO(bCAU-N`=V?!/d
%?h7EZ?B`>2],Z3hluE0s&b%\Bc!s5$grmc5eEV;dlBj^)V_RD<PU"D!O:,rRdFm5=E^q)lfqQMg[^D8lQ(KLY5E*1!Z"UqWp!Qam
%N^h6bc^Kn4`>'6/&k4,h]R$u&e#[8FGuZFq0a`qk`\83*R]R51.Jb%YGj78Z+"G2kZ<fOE(+h450+H0"+(jEbD&&i>^gi+mgY<=c
%=+.SS*A@bW(ZoFQLr%&#X;kG?QnI`$dn/ZS!-:"B(=p(/irj-lG$nc<>tn'R_q9Uo4TcmMX3\QD8-tkkE%5Yl1H[*BFB9%L!)L`G
%Y:o;-$4&+?p&a_,'p<]+&TAcF]hN4*/EYBBT;Al0+>c7YhK(]1AlYi*5Qt-IA>%"\m,9i4@E5>&L-sk@ejI8`&U*-?j$7G2kiRi6
%9[eIuc"*.'h7:a1Y`6htW_F%tVQPd0YEiZ:b5B<.'7-.pXHaG]kkAa+E!UpcHZZQ4m2aokIR^rf!tp:>.pP/I#UB_?3P_&4gIjk/
%UbXp`KJ_::aZhq6=fJ=-?!7.X\-]QqfL>WF%f%U0f9-Nioi4[UK<[+\kY^=+gblh<),LFIfei=ZTqEAJ!$rdZO)sYcT^I8#l_kL@
%b)r?h'u@+/+#ruUa&-uOCH>CblD<%1#CCI((8=Vt2\regm23=#%Y4nJ:_R&-d+NM<P9G$OaU'iK8B]QsMPSTfUFID$n]a9-nAGj/
%!__C&];,q6>NGNd\[FmQ*fAW_X=J3cIht&_Q+EKF^U/.XGh.DREI:OM&QE1#\fL[uFV-EH&he2kJ2-T#PTW:IKBV\MP=So`IfNX`
%p.^rpI?F@ldJDhK>m^e*Jl"qIh1YAkKL2%kK&#C5QP>+J\93BEoW[IQU%Hjq4_"(fp+il^P4$+E!A0k%mDWbR>>^:JPt@Y"N$=Wo
%3D:(8;eUd_(8upsi,!Q.08PU0hGeY$W:_lcXu"+e:^g/khJ&S"(%/LN?`ttSatULe:L61jg1*TRNDG?mfX3c1p'W0(iiO)?QVrNX
%kbNfL`glp:/ti-I#)^?a8<9(\5sXPqAa1KEh5.8_'o[a>).Ds0^"Ve29dZ`!MLdo;E0X'UG+Ks"J4,ck5_GrIB.>n7=^`p*HgEn6
%Z`sXR!+g5KbEAJ:qCT70UYoh)YkHl)2pMuq-$EjkU1?TO$-g:Z+^4U]c,!&HV">_!/:^pPcAuWK[XrbL]%'U?'Z:.i)D\)FUU,Z!
%&+<BVa6K^03-EoH;'Zl]HkU^Gm-Dr>#aso90-@"1rEqg.HSIaMNsif5Kc`=M]1<7MRLd[8e22nW4).@LK$,86-B;/Ege$/*@bp)A
%D5Xr+;l06#jPWh,3TO*\p6dkk1M5i-.\^<7ba>qgi/.2l;(:QRF69pWcOKo'Y2C^qRV(-B)]OFrUs?-D.c<5^nI.18`_"Qa6)VR)
%(jfKKM_YPqU'C+?Ssq$_:"BqdpZd=3aH?V\QnYqNdU>epFQfmchE'.1XPdbYR!W`9SQYmi4];&@7).fmf#Ins5kJ5S><ARVZ/ZFM
%,_oGGJ)RA*b:'m1*Z3A]+OrPO<%rY!*cPRo7_a^ccn9SQ^#o5W>X.$lW0g>-r[lK>ZbmFP;M.?CfJ-c@-)[/_@NE/,BVH,0=R?>M
%=b',!DJ5WgD:d1/.jmE%+]#!BW10?Sk**k,nmfpWO!o8JNQ!T\e8`d?kC1%A:Y?A,i,YL!)*6TKRX_rAQ61lT/d.i@8A;W.*kE/s
%VjjM,!_Nt?"hpAXF[/0u@l='(n:<ZF'W7cc.jT@)$*4T0+,@?F.CscF"ZPOe+?QTR82UsW-adj(c2m?B?6ree(+`,'%s>t%5b$&[
%;6YBu+ISpmUrt;9+8NC^\c#Q=Mg!("hO`->'^2_$khuQ&6ABtI$9;3hMj4%`[O248#Us7Og15M&,Z!&g<s-&--eFQI=`14%L(4pR
%EZ'b<fB?DRbXQM,6!<q>Ui)Tj''R*uq=&td=RLO^k#U\P9[DhBVojo<BNoIZUTs/^)IVg=#u)Du1iV?IWRXP[2qP%ZB_?m0nSdgZ
%l%n*!NT70X(%'Y/&2JnR(+$"J^-/>#)<afYcJ&q'66Hq%VFc\GEp\dP::!J\be$a!kN8J#nM5gUoAO6DDtsBYbU>4T(S*s;,DU+S
%np,m*A-WOkE-&kThXW?::`buA?/S@Ok.n"V+Z*d5+oLH#hC+[oB!u"aX&jk$CCHMN1s)]`lCgJr7T^>5rcod-)5/4[Y#I]^i&SNc
%RnHSJ&i+3WQu(&_OImJ)U0Ku;R%!!r?JB6c1f+0h9$$=HTWVc*)PCf;\W0,DU7l)5,fV%@7`!WXJWdQoP(#ke?"bJ,%69HUdn%%j
%;8FXtbo#SLgAC<*Fq(b]a54B\+9:]b$GJ<q"P3heb\'&RUf@\+4#<ZT>AQbsY+H15AD>ZaXp00&[$08rAPbfB>m(4:=/T=8'+]?i
%\>os/N/,%el[J&r[(DrjkZ1B,VjU(n>tf5O5t<,L5e:aqn4i@5F*Bq"T*4S#\H8u6YpU5L%acjA<"t`Vs0hDn5Wu3CR$\O<Y=4pb
%";sKn*Q1u"PQl4grBk0XN.REPMBGR&G&glh<kGfCK6t8uh@cPATh9utT@Xg%KHSmn.?90[K*NA7;&KU\(UN7c3_:#JL5]9c'Fm\.
%!j&`M-A/3e#p/`,]t(R-2ZDc.]YKM3C1`ZE*Dq=-_o-MEM@['kKF3R4Gi:Ze4!S6ppQLNpSfEnkm#-j#Mud44nQIXuj=nDED_PB`
%"qS:fd_d*;>?JA1:NKBD5+kCG]m2[C?0tqJjVdIZD1Un[Adk'.95]=p[+[f*rtq\6F"?j%JJ3:9<<C64onA#fa.I[ehK[t/_nL.`
%b)aHum%>)!mmI:[F<:_DAS>)L'_[E8?;iQLBRpC6+W&pjMo?Mrb+ZH;\u6:1$EiF[]IU`IHh-.4GiuKl<)hG'>[85\R8E/-Vc&C4
%@1ZR-,R7YTAj&VQ6PsZJa0!B?'h&&\V>?Fm>6R"!(K8.c7G>ihBQRBB6W"dJ0OiNRLW?Ps78N+jL)LQ<g5&bkl[l;m9mK9MZ?8p8
%\s\<BfO>Y0.m3/D&jY?):7E!b,Nt9k!]:1'He5dgW&sALMAra1;g7UDfeU*,jYV7*Mn3tdHCjZuSdA^%i.9b*d:5XC]*5GcfSXaQ
%`Z&"s\=5sM@2_QU"-SRcV-BH@#+!;K^mJ3e85CS9;6cEBO($*$F0B4+l)dM]T:9],ptP4A@NQqX)-r3&`%UNi7I9WaCCl9CJNZr"
%$6BOqcK52N__Y,2dC"I8F1W4er*4mLgSj$Y(sNo[?J92,VrHZU9Upf^mkLSq2T1]>[m^T5)l1s+,Ldir:hUoO)9(g*i)Q.;O?M4H
%;F`\$R'j,.Nlcf;9M4WT6%&+!?keQ3%!+)hokgKPOlIR:1WeEA9S#WSh`+)f-IoOajOdiNV52Z>Bb;3m-maqZShR=(Lq$`06!teQ
%T/%`7j(2Rc3^9#QcG4lo5C)q.![7?^:uTDN"oN'lmi/Pa+$P,k/k*j]G<h\Vpj1EAfL+e+Qad"me*hbcTDiX)a$9S!J)5YMQX>7>
%]>(t.huC/mrq,N+s6Z0Qo7)8gmAJk?l*%l"e$!,nr;"Zgq:dQPqt9tpJ,9#jDnl;EDh%TMf<;sgn%\cV&H$5>i:k"dj59m'T76O<A@qjE~>
%AI9_PrivateDataEnd
