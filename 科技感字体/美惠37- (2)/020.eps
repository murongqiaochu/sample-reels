%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: plata_8.eps
%%Creator: Adobe Illustrator(R) 19.1
%%For: user
%%CreationDate: 5/12/2016
%%BoundingBox: 0 0 1200 1200
%%HiResBoundingBox: 0 0 1200 1200
%%CropBox: 0 0 1200 1200
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.1.0 x29 R agm 4.7731 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=100 RasterRes=1 GradRes=1 Text=1 Stroke=0 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c067 79.157747, 2015/03/30-23:40:42        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
            xmlns:photoshop="http://ns.adobe.com/photoshop/1.0/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">abstract vector background with high tech circuit board Vector Illustration</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:creator>
            <rdf:Seq>
               <rdf:li>Iryna</rdf:li>
            </rdf:Seq>
         </dc:creator>
         <dc:description>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">abstract vector background with high tech circuit board Vector Illustration</rdf:li>
            </rdf:Alt>
         </dc:description>
         <dc:subject>
            <rdf:Bag>
               <rdf:li>circuit</rdf:li>
               <rdf:li>vector</rdf:li>
               <rdf:li>backgrounds</rdf:li>
               <rdf:li>tech</rdf:li>
               <rdf:li>processor</rdf:li>
               <rdf:li>abstract</rdf:li>
               <rdf:li>abstraction</rdf:li>
               <rdf:li>chip</rdf:li>
               <rdf:li>card</rdf:li>
               <rdf:li>design</rdf:li>
               <rdf:li>electrical equipment</rdf:li>
               <rdf:li>integrated</rdf:li>
               <rdf:li>technical</rdf:li>
               <rdf:li>computer part</rdf:li>
               <rdf:li>hardware</rdf:li>
               <rdf:li>engineering</rdf:li>
               <rdf:li>line</rdf:li>
               <rdf:li>cyberspace</rdf:li>
               <rdf:li>computer equipment</rdf:li>
               <rdf:li>graphic</rdf:li>
               <rdf:li>electronics industry</rdf:li>
               <rdf:li>digital</rdf:li>
               <rdf:li>technology</rdf:li>
               <rdf:li>computer</rdf:li>
               <rdf:li>circuit board</rdf:li>
               <rdf:li>illustration</rdf:li>
               <rdf:li>creativity</rdf:li>
               <rdf:li>connection</rdf:li>
               <rdf:li>computing</rdf:li>
               <rdf:li>backdrop</rdf:li>
               <rdf:li>science</rdf:li>
               <rdf:li>cover</rdf:li>
               <rdf:li>internal</rdf:li>
               <rdf:li>connect</rdf:li>
               <rdf:li>art</rdf:li>
               <rdf:li>industry</rdf:li>
               <rdf:li>conceptual</rdf:li>
               <rdf:li>construction</rdf:li>
               <rdf:li>textured</rdf:li>
               <rdf:li>computer chip</rdf:li>
               <rdf:li>mother board</rdf:li>
               <rdf:li>motherboard</rdf:li>
               <rdf:li>black</rdf:li>
               <rdf:li>blue</rdf:li>
            </rdf:Bag>
         </dc:subject>
         <xmp:MetadataDate>2016-05-12T13:16:17+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2016-05-12T13:16:17+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2016-05-12T13:16:17+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A8qYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWwCegr8sVt&#xA;1DirWKuxV2Ksr078rfPOo+SrvzrZ6Y0vlyxZluLvnGDSOgdljLCRlSvxMFp18DirF/Rm9Ez+m3oh&#xA;uBloePIivHl0rTtho1bHjF8N7rMDJ2KuxV2KuxV2KuxV2Kp35K03QtT82aTp+v3x03Rbq5jiv74E&#xA;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&#xA;U4fLt9O4j1XTpZzaw+otSJYQeqE1/d05I2w+E7a2FyNwkIE8xdfL9XR6TMBjHDngc8BvCQjxGu6X&#xA;n/S5SHPcKMl9+Y31q5gs7291FLaVoXurL1Z4WZevF1XfImeeyAZSru3DZHDoOGMpxhAyF1Kon5J1&#xA;5XvPNyzXL65Drk7LFWwt0iuBHJMDUJIygMoanHbxO4zI088tnjEz3c+br+0MWlIiMJwDf1G42B3j&#xA;ptz+DK7awuorOC71i+tobqcHkXb92WABKxtI78woKjlXft8NGObGBABmRZdLkzRMzHFGRjH5/GgK&#xA;vfb572A+mm/9XWx/4KLD6f50WP7z/U5/a6mm/wDV1sf+Cix9P86K/vP9Tn9rqab/ANXWx/4KLH0/&#xA;zor+8/1Of2oPW7W9FtLc2zXuoTTQsbSewjtpLeNlV6Ncs4DheSj4+RWgKjdaCvLE1Y4pbbVVfH9b&#xA;fpMkOIRlwQAl6hMyEjy+kDa6/hoGyD1sxfUtVtdR0i40S8s5Y9V0+zml1GScR8lu7dxxMZQeBZSK&#xA;AcTT4iOWYeTIJRMCPVEG/ePx+ObucGnliyjNCQOOc4iNX9Mh1v4HrvvsPSyD/nIP/ePyt/xjuv8A&#xA;iNvmT21yx/H9Dq/Yr68/vj/v3lOkaxeaVefWbUg8laOeFxyimifZ4pV/aRh1H0jfNNiymBsf2va6&#xA;rSwzQ4Ze8HqD0I8w9L8j+eF8tKLq1Mlz5OuZAt7ZMfUn0yeT/iUTfst+17OCDttJq/C3G+I8x1if&#xA;1fjm8j2v2R+b9Mqjqoj0y5RyxH3SHUdP6vIn/N/y/wCWNP1Cx1Ty9cRPaawskzW0LK0cZQr8SUPw&#xA;q/M/D2INPAUdp4ccZCUDtJzvZjW6jLjnjzg8WKhZ5nnsfMVz8x7zz7NY9Q7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYquR2Rg6Eq6kFWBoQR0IOIKCARRTvzjNLB551yaB2ili1O6eORCVZWW4YgqRuCDmTq&#xA;iRmkR/OP3uu7LiJaLECLBxQ/3IZ75V812PmXTxpeqApqMBM8EkJ9OVJV+L61aMqsUaorLGqn+dVP&#xA;xLmy0+pGWPDL6h+LH6R8R3PNdo9mz0k/Fx74zsb3BH8yfeP5sif6Mjykp6Ros+n65NqH+5m2uZC4&#xA;nv7PVrL1ZOTVNWDQMwYiu7ZWNMOO5CXv4o/scifac/C4ccsYFVRx5AK7v4vuS3zZY+cfMa2zXOlW&#xA;cd3ByE19HNZJNcbAK0pVwS22+9PADIamGXLVxFjr6d/e3dm5tJpeLhyTMTyiRMiPu2/b72YeSL7z&#xA;GbUWHmFI0mt042uoNcW0nqRiv7idfV+LqeLH6erBs7STyVw5OnWx8jv+Pv0Pa2HT8XHgJIkd48Mh&#xA;R/nR9PzHy6cJtqGpaDpsqSateyKLgEwkXaqjFSORDIzAkd9+++XzyQifUefm4WDBnygjFEenn6N/&#xA;tVTqnlr6u9w8Qlt4VDM164dVDGg4zSNGqgk/ZLb9t+p8THV9PP8AWw/L6jiEQakf5or/AGIBv31t&#xA;125Iw675QuEleGzspUgXnOySW7BE6cnIuPhHucAzYjyEdvd+tnPR6qJAMpgnltLf3ehHaNq/mLzD&#xA;qB0z8u7ODV9aERuL1riWP6rbWytxRGkSRVLFiAiq5IqS37RzHz9pjGPRRkfl9jn6D2YnqCfHuGMc&#xA;q2kT3+ofPbfpsNgGnfmd5h/xEvle+sreXXIXePVPR5xQ2skbcZIvieVpHjI4tx6t8K16m3D2lKUh&#xA;CgZda5D9bi632axYsUs1zhAchKjKX2Dhvz5Dc1yZG/nF0t2uWjAt1QymbhVPTC8ufIPTjx35dKb5&#xA;mnU7X0dKOywZcN+q6q975Vy5+SA/5WPYXFjcXNtdQm3gFLi6j4v6RYErUBpCCVRiDwI+E7H7Jq/P&#xA;RIJBFByv5CnCYjKJ4pcgdr+wd46jmOXMEWs2kF5F60rF+TLKJY5VikZn4okkFwSwjlPNFVuRVqqj&#xA;FkaOQY+WIkLP49x7/wCw7UXY6XLKBobdKIsbWSJR6x2JIqxRlGpCcHneqaWdN8x65D6dxFz0qSQr&#xA;dvHLMXZEEjO8UkynlIGI+LpmryY+DJIb/R15/peq0+o8XT4jcTWUD0ggczVAiPSujK/+cgo5Dp3l&#xA;eUKTGqXCs9DxDMsBUE+J4mnyzM7ZHph8f0Ol9ipDxM463H/fPGc0L3yN0nVrvS7v6xb8WDKY54JB&#xA;yilib7UUq/tK39o3ocsx5DA2P7XH1Omjmjwy94I5g9CD3/jk7VjpLXfqaWJI7aVQ5t5qFoXP2ow4&#xA;+2q/stsSOorjk4b9PL7l03iiNZKMh1HUd9dD3hBZW5DsVdirsVdirsVdirsVdirsVdirsVdirsVZ&#xA;1bS2cvnO1842kljdW51BNTudIv7iK3YSLOJpLZ/UI5ITsHAIKncVquZmWAySM4kereiap02kzy02&#xA;OOHJGZOMCIMYmQkAKB25HvB5HvG7I/zo8zD8wfOUHmDTodN0RYLaK3AXUbVpZHjdn9V3Qp8Q5hR7&#xA;KN+wrGnkOsf9MHIl2hAijDIR/wALl+phvmHVtOtrS0tNI1W/u9QhLfpC+Msi28hIG0KkhuKsDQkC&#xA;oy3PkiABGUjLqb2+DjaLTZJylLLjxxgfpjQ4h/W6felem6tfTX8EV7q1zbWjuBNP6sx4r3NEEjfc&#xA;pynHkkZAGRA+LmZ9NCMCYY4yl0FR/TX3o1NQg/xI1q2u3baGJmVb/nMrNEK8XK8XZa7fsH5ZYJjx&#xA;K4zwXz3/AB9jjnAfy/F4UPGr6ajz6jmB9vxZppWp6JcaVZ217qyXdpY6072s92UMrW0Id42KTFCB&#xA;J0+Kg336Zn48kDEAysCfXuHvef1GnzRyylDGYynhFiN1xGgd43y8u7ZAeWvO/ki21TTYPNukza/B&#xA;a3/q6hqElzK4lQTMeYtuQjk+E/ZY0I+eYc9TAwMSOKW/qs/OncYezcwyjJCYxY/T6BCPLa48XP5P&#xA;UfLGnflt+Zf50avYeTOGg+WbjQ3ju7ZIFhF3Py9J3trcFBFxjmG9K/Cxp8ROU6fP4ZO1ginO7Q0H&#xA;5gRo8MoSEgavkbrpzeaWHnif8qr/AFjTvJt96nmCK9uLG41wLHNbT2cMhEZjjf1I/iKhvsmhrRiD&#xA;TBxw8Oq9d8/JPg5zqeMy/ciO0R395/t+HUj/ACVINZvodfltPq96wnbUtSnlLSX9xLKjySgHitA5&#xA;bk1OrKtTmz0MQakBw0Offy/H2PM9uZJx44Snx8UgRED6BUufmenuJoJFJ5r8rxeZdTmmtmluJdWu&#xA;JINaSQuEs5C0ahYxSqqlKCp2PsMoOoxjJIkb8Z9Xk50eztSdPACVRGKIOOv4xR599/b7yyLRbPSB&#xA;bX2kWmlCOR7ezmkh+sVXUI4kulaaGYjj6b80TkFFGb4gKGmXijGjER6Dr9X1bg/L9LqdXly8UMss&#xA;ljimL4f7sk4/TKPeKJq9wPTdhL/L/njy/JdXOhXNudM0suyWInPJVU15wXAkbiqs7MaVCjkQaUWR&#xA;KsOrgSYEcMen6j+K+wjL1vZGcRjmjLxMleqvslGt7Ar+kavfeEhul+VfKkOrfWtP1QNOwcfVRqNj&#xA;cI8TKecLoBK7xlKhq123PjlmPT4hK4y37uKJ+HucbUdo6mWLhyQ2238PJEg9JA7ASvl5/Jn8a6Jr&#xA;Okt5e1ki40+dvQs5nIDpIhKrEWqSJUKkK3X9lqnd9l6Jx8Oe8en47/x7+ZJzYMvj4vTMbyHQjv8A&#xA;6p6j4jbaPA/PXkrUfKWstZXP7y1lq9jdDpLGD+DL0YfwpnNavSSwzo8uhfTOx+1setw8cdpD6h3H&#xA;9XcxzMV2rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirZJIAJqB&#xA;09sVprFV/qy7fG3wqVXc7Ka1A9jU4bRwhZgS7FVSOeaNkaORkaJucbKSCrbfEtOh2G+EEhjKANgj&#xA;mm/mTzjr/mQWn6XuBcNZIY4X4KrEMQWLFQKk8Rl+fVTy1xm6cHQdl4NJxeEOHjNndJMx3YOxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:46b7100a-dbd4-a149-a25b-ce9499616126</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:46b7100a-dbd4-a149-a25b-ce9499616126</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:44bd3b45-a2ce-426f-b194-d281d6f74fd6</stRef:instanceID>
            <stRef:documentID>xmp.did:B63AAF57E0BDE511B2BBC0EB12123494</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F07763D45588E411BF89F345A28D8C9F</stEvt:instanceID>
                  <stEvt:when>2014-12-20T17:10:37+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:29845C695A88E411BF89F345A28D8C9F</stEvt:instanceID>
                  <stEvt:when>2014-12-20T17:19:01+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:2E845C695A88E411BF89F345A28D8C9F</stEvt:instanceID>
                  <stEvt:when>2014-12-20T17:33:07+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4365C60ACE89E4119A65C8F5B8A1FEA0</stEvt:instanceID>
                  <stEvt:when>2014-12-22T13:34:24+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0B5A99264D6BE51194FFADFDE0B012D7</stEvt:instanceID>
                  <stEvt:when>2015-10-05T13:38+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:B63AAF57E0BDE511B2BBC0EB12123494</stEvt:instanceID>
                  <stEvt:when>2016-01-18T14:38:14+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:9E646C19F2BDE5119314DC75DE111CE2</stEvt:instanceID>
                  <stEvt:when>2016-01-18T16:45:21+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Bridge CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/metadata</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:C1809509F8BDE5119314DC75DE111CE2</stEvt:instanceID>
                  <stEvt:when>2016-01-18T17:27:51+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Bridge CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/metadata</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:46b7100a-dbd4-a149-a25b-ce9499616126</stEvt:instanceID>
                  <stEvt:when>2016-05-12T13:16:17+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>1200.000000</stDim:w>
            <stDim:h>1200.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=0 B=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
         <photoshop:Headline>abstract vector background with high tech circuit board</photoshop:Headline>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1200 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1200 li
1200 1200 li
1200 0 li
cp
clp
1200 1200 mo
0 1200 li
0 0 li
1200 0 li
1200 1200 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
0 0 0 rgb
f
1009.87 609.159 mo
1009.38 607.313 1010.49 605.421 1012.34 604.938 cv
1014.18 604.452 1016.07 605.557 1016.56 607.403 cv
1017.04 609.25 1015.94 611.142 1014.09 611.627 cv
1012.24 612.11 1010.35 611.006 1009.87 609.159 cv
cp
1019.66 607.163 mo
1018.59 603.098 1014.43 600.671 1010.38 601.737 cv
1006.31 602.804 1003.88 606.957 1004.95 611.023 cv
1006.01 615.082 1010.17 617.513 1014.24 616.446 cv
1018.3 615.378 1020.72 611.223 1019.66 607.163 cv
cp
0 .862745 1 rgb
f
1009.87 579.072 mo
1009.38 577.226 1010.49 575.334 1012.34 574.852 cv
1014.18 574.365 1016.07 575.47 1016.56 577.316 cv
1017.04 579.163 1015.94 581.055 1014.09 581.541 cv
1012.24 582.023 1010.35 580.919 1009.87 579.072 cv
cp
1019.66 577.077 mo
1018.59 573.011 1014.43 570.584 1010.38 571.65 cv
1006.31 572.718 1003.88 576.871 1004.95 580.935 cv
1006.01 584.994 1010.17 587.427 1014.24 586.358 cv
1018.3 585.292 1020.72 581.136 1019.66 577.077 cv
cp
f
1010.3 552.217 mo
1009.81 550.37 1010.91 548.479 1012.76 547.993 cv
1014.61 547.51 1016.5 548.614 1016.98 550.461 cv
1017.47 552.309 1016.36 554.199 1014.52 554.683 cv
1012.67 555.17 1010.78 554.065 1010.3 552.217 cv
cp
1020.08 550.218 mo
1019.02 546.157 1014.86 543.729 1010.8 544.792 cv
1006.74 545.859 1004.31 550.016 1005.38 554.082 cv
1006.44 558.141 1010.6 560.571 1014.66 559.505 cv
1018.72 558.438 1021.15 554.28 1020.08 550.218 cv
cp
f
1010.36 505.524 mo
1012.02 504.589 1014.13 505.181 1015.07 506.846 cv
1016 508.509 1015.41 510.619 1013.75 511.552 cv
1012.08 512.487 1009.97 511.897 1009.04 510.231 cv
1008.1 508.567 1008.69 506.46 1010.36 505.524 cv
cp
1006.1 511.247 mo
1008.16 514.911 1012.79 516.212 1016.45 514.154 cv
1020.11 512.099 1021.41 507.466 1019.36 503.799 cv
1017.3 500.142 1012.67 498.838 1009 500.896 cv
1005.34 502.951 1004.05 507.588 1006.1 511.247 cv
cp
f
1004.67 381.755 mo
1003.36 383.143 1001.18 383.213 999.782 381.907 cv
998.39 380.603 998.319 378.415 999.622 377.027 cv
1000.93 375.633 1003.12 375.559 1004.51 376.865 cv
1005.91 378.172 1005.98 380.356 1004.67 381.755 cv
cp
1004.75 646.144 mo
1020.61 629.309 li
1028.18 627.586 li
1054.82 600.967 li
1054.82 483.043 li
1036.65 466.618 li
1036.65 410.909 li
1029.04 403.346 li
1029.04 385.415 li
1020.38 377.483 li
1009.32 377.483 li
1008.32 376.305 1006.49 375.191 1005 374.315 cv
1001.78 372.415 997.995 371.898 995.44 374.622 cv
992.886 377.351 993.022 381.63 995.747 384.186 cv
998.474 386.738 1002.02 385.642 1005.31 383.878 cv
1006.51 383.233 1008.19 382.118 1009.19 380.94 cv
1019.04 380.94 li
1025.59 386.938 li
1025.59 404.785 li
1033.19 412.348 li
1033.19 468.154 li
1051.37 484.578 li
1051.37 599.535 li
1026.45 624.435 li
1018.81 626.171 li
1001.29 644.774 li
1001.29 674.955 li
989.841 685.463 li
992.177 688.009 li
1004.75 676.474 li
1004.75 646.144 li
cp
f
1007.59 475.925 mo
1007.37 474.027 1008.73 472.315 1010.63 472.095 cv
1012.52 471.872 1014.24 473.229 1014.46 475.131 cv
1014.68 477.028 1013.32 478.741 1011.42 478.963 cv
1009.53 479.18 1007.81 477.821 1007.59 475.925 cv
cp
997.923 643.97 mo
1017.15 622.983 li
1023.78 622.983 li
1048.35 598.194 li
1048.35 509.465 li
1017.72 478.376 li
1017.63 476.878 1017.01 475.017 1016.48 473.5 cv
1015.25 469.969 1012.69 467.128 1008.98 467.56 cv
1005.27 467.99 1002.61 471.346 1003.04 475.056 cv
1003.47 478.768 1006.89 480.217 1010.54 481 cv
1011.96 481.303 1014.11 481.542 1015.66 481.218 cv
1044.89 510.884 li
1044.89 596.774 li
1022.34 619.526 li
1015.62 619.526 li
994.466 642.626 li
994.466 672.03 li
989.716 677.376 li
992.302 679.671 li
997.923 673.344 li
997.923 643.97 li
cp
f
1010.61 398.233 mo
1009.32 396.824 1009.41 394.637 1010.82 393.348 cv
1012.23 392.06 1014.42 392.158 1015.71 393.57 cv
1017 394.978 1016.9 397.166 1015.49 398.452 cv
1014.08 399.743 1011.89 399.641 1010.61 398.233 cv
cp
1016.81 415.954 mo
1016.81 404.065 li
1016.81 403.866 1016.78 403.676 1016.75 403.487 cv
1017.14 403.245 1017.51 402.972 1017.86 402.653 cv
1020.96 399.82 1021.17 395.012 1018.34 391.912 cv
1015.5 388.809 1010.7 388.597 1007.59 391.43 cv
1004.5 394.262 1004.28 399.07 1007.12 402.173 cv
1007.91 403.044 1008.87 403.678 1009.89 404.089 cv
1009.89 415.954 li
1009.89 417.861 1011.44 419.411 1013.35 419.411 cv
1015.26 419.411 1016.81 417.861 1016.81 415.954 cv
cp
f
1024.37 443.501 mo
1026.17 444.143 1027.1 446.122 1026.46 447.913 cv
1025.82 449.715 1023.84 450.657 1022.04 450.011 cv
1020.24 449.374 1019.31 447.395 1019.95 445.594 cv
1020.59 443.799 1022.57 442.859 1024.37 443.501 cv
cp
1017.23 452.416 mo
1017.63 452.247 1017.97 452.005 1018.27 451.721 cv
1019.58 452.157 1021.23 452.377 1022.61 452.547 cv
1026.32 453.003 1030 451.967 1031.25 448.447 cv
1032.51 444.93 1030.67 441.06 1027.16 439.804 cv
1023.64 438.551 1020.83 440.973 1018.51 443.902 cv
1018.06 444.47 1017.55 445.212 1017.09 446.003 cv
1016.29 445.7 1015.38 445.688 1014.53 446.047 cv
1007.38 449.073 li
1006.06 449.634 1005.27 450.913 1005.27 452.261 cv
1005.27 452.71 1005.36 453.165 1005.55 453.603 cv
1006.29 455.363 1008.32 456.188 1010.08 455.44 cv
1017.23 452.416 li
cp
f
1039.6 599.211 mo
1043.95 593.767 li
1043.95 531.238 li
1032.96 521.196 li
1005.56 521.196 li
990.511 505.936 li
988.048 508.364 li
1004.12 524.653 li
1031.61 524.653 li
1040.5 532.765 li
1040.5 592.556 li
1037.94 595.753 li
1002.37 595.753 li
989.878 606.546 li
992.14 609.163 li
1003.66 599.211 li
1039.6 599.211 li
cp
f
1034 592.296 mo
1037.91 587.271 li
1037.91 533.781 li
1030.1 527.317 li
1002.52 527.317 li
992.224 517.158 li
989.794 519.619 li
1001.1 530.775 li
1028.85 530.775 li
1034.45 535.408 li
1034.45 586.086 li
1032.3 588.838 li
998.97 588.838 li
988.099 599.031 li
990.462 601.554 li
1000.34 592.296 li
1034 592.296 li
cp
f
1025.12 567.227 mo
1031.85 561.786 li
1031.85 539.808 li
1023.59 533.298 li
1000.78 533.298 li
992.2 525.13 li
989.815 527.636 li
999.394 536.755 li
1022.39 536.755 li
1028.4 541.487 li
1028.4 560.137 li
1023.9 563.769 li
1004.96 563.769 li
988.026 581.599 li
990.532 583.979 li
1006.45 567.227 li
1025.12 567.227 li
cp
f
1011.32 432.794 mo
1005.66 432.794 1001.07 428.313 1001.07 422.788 cv
1001.07 417.26 1005.66 412.783 1011.32 412.783 cv
1016.99 412.783 1021.58 417.26 1021.58 422.788 cv
1021.58 428.313 1016.99 432.794 1011.32 432.794 cv
cp
1 1 1 rgb
f
1000.11 462.263 mo
994.44 462.263 989.847 457.785 989.847 452.258 cv
989.847 446.732 994.44 442.251 1000.11 442.251 cv
1005.77 442.251 1010.37 446.732 1010.37 452.258 cv
1010.37 457.785 1005.77 462.263 1000.11 462.263 cv
cp
f
1027.32 499.059 mo
1021.65 499.059 1017.06 494.581 1017.06 489.054 cv
1017.06 483.528 1021.65 479.049 1027.32 479.049 cv
1032.98 479.049 1037.58 483.528 1037.58 489.054 cv
1037.58 494.581 1032.98 499.059 1027.32 499.059 cv
cp
f
153.032 259.344 mo
154.94 259.344 156.489 260.891 156.489 262.801 cv
156.489 264.712 154.94 266.258 153.032 266.258 cv
151.12 266.258 149.575 264.712 149.575 262.801 cv
149.575 260.891 151.12 259.344 153.032 259.344 cv
cp
131.813 191.664 mo
143.649 203.674 li
137.286 221.348 li
137.587 249.279 li
146.888 258.555 li
146.647 260.159 147.161 262.453 147.655 263.912 cv
148.851 267.451 150.681 270.679 154.417 270.679 cv
158.153 270.679 161.183 267.649 161.183 263.912 cv
161.183 260.176 158.063 257.965 154.417 257.148 cv
152.761 256.776 150.714 256.355 149.186 256.508 cv
149.46 256.234 li
141.028 247.828 li
140.751 221.936 li
147.64 202.797 li
135.272 190.244 li
135.272 109.984 li
99.5928 74.6943 li
97.1611 77.1523 li
131.813 111.43 li
131.813 191.664 li
cp
0 .862745 1 rgb
f
162.304 233.4 mo
163.677 234.727 163.716 236.914 162.388 238.289 cv
161.061 239.664 158.874 239.701 157.499 238.373 cv
156.124 237.048 156.087 234.857 157.415 233.484 cv
158.741 232.113 160.929 232.074 162.304 233.4 cv
cp
140.171 168.432 mo
153.569 186.19 li
158.325 191.606 li
158.325 228.646 li
157.075 229.66 155.901 231.597 155.261 232.95 cv
153.663 236.328 152.739 239.922 155.429 242.517 cv
158.115 245.111 162.397 245.037 164.995 242.352 cv
167.589 239.662 166.88 235.905 164.827 232.785 cv
163.964 231.474 162.892 229.887 161.782 228.902 cv
161.782 190.303 li
156.247 184.008 li
143.63 167.273 li
143.63 107.698 li
111.515 74.7168 li
109.036 77.1289 li
140.171 109.104 li
140.171 168.432 li
cp
f
171.665 307.023 mo
173.036 308.35 173.075 310.537 171.749 311.912 cv
170.423 313.287 168.233 313.326 166.858 311.998 cv
165.485 310.672 165.446 308.482 166.774 307.108 cv
168.101 305.735 170.29 305.697 171.665 307.023 cv
cp
162.811 89.0957 mo
170.427 96.457 li
170.427 149.178 li
168.419 167.666 li
167.845 302.143 li
166.536 303.114 165.288 305.164 164.62 306.573 cv
163.022 309.953 162.101 313.546 164.788 316.139 cv
167.474 318.736 171.757 318.662 174.354 315.973 cv
176.948 313.285 176.239 309.527 174.186 306.408 cv
173.364 305.158 172.352 303.662 171.3 302.672 cv
171.866 167.949 li
173.874 149.459 li
173.884 94.9883 li
164.21 85.6387 li
134.526 85.6387 li
123.075 74.6738 li
120.685 77.1738 li
133.138 89.0957 li
162.811 89.0957 li
cp
f
181.474 290.848 mo
182.849 292.174 182.886 294.363 181.56 295.737 cv
180.233 297.107 178.044 297.148 176.671 295.82 cv
175.296 294.494 175.257 292.307 176.585 290.932 cv
177.911 289.558 180.099 289.52 181.474 290.848 cv
cp
168.866 79.5879 mo
189.155 99.0547 li
189.155 167.181 li
177.63 179.766 li
177.63 285.987 li
176.331 286.967 175.095 288.996 174.433 290.398 cv
172.833 293.775 171.911 297.368 174.599 299.963 cv
177.286 302.559 181.567 302.483 184.165 299.798 cv
186.761 297.107 186.05 293.353 183.995 290.231 cv
183.169 288.973 182.149 287.462 181.087 286.472 cv
181.087 181.109 li
192.612 168.525 li
192.612 97.5781 li
170.259 76.1289 li
139.593 76.1289 li
137.458 74.5391 li
135.392 77.3076 li
138.444 79.5879 li
168.866 79.5879 li
cp
f
94.9854 454.644 mo
93.0752 454.644 91.5283 453.096 91.5283 451.185 cv
91.5283 449.275 93.0752 447.727 94.9854 447.727 cv
96.8975 447.727 98.4443 449.275 98.4443 451.185 cv
98.4443 453.096 96.8975 454.644 94.9854 454.644 cv
cp
209.626 320.932 mo
183.104 349.184 li
183.104 407.068 li
160.49 429.685 li
117.161 429.685 li
100.392 445.475 li
99.0049 444.514 95.7549 445.172 93.874 445.809 cv
90.3369 447.005 87.1104 448.837 87.1104 452.571 cv
87.1104 456.308 90.1377 459.339 93.874 459.339 cv
97.6104 459.339 99.8213 456.217 100.638 452.571 cv
100.901 451.397 101.194 450.023 101.29 448.776 cv
101.591 449.097 li
118.531 433.142 li
161.923 433.142 li
186.561 408.5 li
186.561 350.551 li
213.061 322.326 li
213.661 289.191 li
201.546 277.941 li
201.546 109.09 li
217.395 92.3789 li
217.395 75.9238 li
213.936 75.9238 li
213.936 91 li
198.087 107.712 li
198.087 279.447 li
210.175 290.674 li
209.626 320.932 li
cp
f
125.71 478.465 mo
123.8 478.465 122.253 476.917 122.253 475.008 cv
122.253 473.099 123.8 471.549 125.71 471.549 cv
127.622 471.549 129.169 473.099 129.169 475.008 cv
129.169 476.917 127.622 478.465 125.71 478.465 cv
cp
210.767 266.732 mo
216.528 272.494 li
216.528 326.684 li
195.206 348.294 li
195.206 403.605 li
129.378 468.815 li
127.833 468.746 125.89 469.193 124.599 469.631 cv
121.062 470.826 117.833 472.658 117.833 476.394 cv
117.833 480.13 120.862 483.159 124.599 483.159 cv
128.335 483.159 130.546 480.04 131.364 476.394 cv
131.741 474.71 132.171 472.624 131.997 471.089 cv
198.665 405.047 li
198.665 349.711 li
219.987 328.102 li
219.987 271.065 li
214.224 265.301 li
214.224 110.637 li
226.325 100.264 li
226.325 75.9238 li
222.868 75.9238 li
222.868 98.6719 li
210.767 109.046 li
210.767 266.732 li
cp
f
214.024 516.085 mo
215.399 517.411 215.436 519.601 214.11 520.974 cv
212.786 522.349 210.597 522.388 209.222 521.058 cv
207.847 519.731 207.808 517.544 209.136 516.169 cv
210.464 514.798 212.651 514.758 214.024 516.085 cv
cp
224.31 337.186 mo
210.188 351.164 li
210.188 511.219 li
208.888 512.196 207.647 514.232 206.983 515.636 cv
205.384 519.015 204.462 522.606 207.149 525.201 cv
209.839 527.796 214.118 527.722 216.716 525.035 cv
219.311 522.349 218.602 518.59 216.548 515.47 cv
215.722 514.214 214.704 512.708 213.645 511.717 cv
213.645 352.607 li
227.769 338.631 li
227.769 122.104 li
235.548 114.611 li
235.548 75.9238 li
232.091 75.9238 li
232.091 113.141 li
224.31 120.631 li
224.31 337.186 li
cp
f
250.817 75.9238 mo
247.36 75.9238 li
247.36 85.6387 li
250.817 85.6387 li
250.817 75.9238 li
cp
f
244.085 331.522 mo
245.995 331.522 247.542 333.069 247.542 334.978 cv
247.542 336.889 245.995 338.438 244.085 338.438 cv
242.173 338.438 240.626 336.889 240.626 334.978 cv
240.626 333.069 242.173 331.522 244.085 331.522 cv
cp
232.091 324.292 mo
237.919 330.999 li
237.765 332.585 238.239 334.707 238.708 336.09 cv
239.903 339.631 241.733 342.855 245.472 342.855 cv
249.206 342.855 252.235 339.826 252.235 336.09 cv
252.235 332.354 249.116 330.143 245.472 329.324 cv
243.899 328.972 241.97 328.571 240.47 328.661 cv
235.548 322.998 li
235.548 153.848 li
265.804 124.109 li
265.804 75.9238 li
262.347 75.9238 li
262.347 122.66 li
232.091 152.398 li
232.091 324.292 li
cp
f
428.257 625.618 mo
429.925 626.548 430.522 628.653 429.593 630.321 cv
428.661 631.989 426.56 632.587 424.888 631.659 cv
423.22 630.726 422.622 628.624 423.554 626.953 cv
424.483 625.285 426.589 624.688 428.257 625.618 cv
cp
243.325 163.724 mo
244.192 304.928 li
244.197 305.617 li
296.186 359.665 li
354.399 359.665 li
360.026 365.412 li
360.026 550.554 li
409.419 600.235 li
411.145 610.006 li
422.903 622.479 li
422.114 623.793 421.577 625.673 421.335 626.991 cv
420.655 630.662 420.685 634.374 423.946 636.194 cv
427.21 638.013 431.329 636.842 433.149 633.578 cv
434.97 630.315 433.321 626.866 430.536 624.376 cv
429.202 623.182 427.513 621.714 426.048 621.162 cv
426.239 620.979 li
414.37 608.39 li
412.638 598.567 li
363.485 549.13 li
363.485 364 li
355.854 356.207 li
297.659 356.207 li
247.645 304.215 li
246.79 165.137 li
305.567 105.652 li
305.567 75.9238 li
302.108 75.9238 li
302.108 104.234 li
243.829 163.215 li
243.325 163.724 li
cp
f
462.561 633.59 mo
460.811 634.36 458.772 633.567 458.003 631.817 cv
457.233 630.069 458.026 628.028 459.774 627.261 cv
461.524 626.493 463.563 627.285 464.335 629.034 cv
465.104 630.782 464.31 632.821 462.561 633.59 cv
cp
253.989 171.793 mo
253.989 296.272 li
253.989 297.412 254.438 298.51 255.245 299.32 cv
300.483 344.845 li
301.296 345.662 302.397 346.121 303.55 346.121 cv
363.421 346.121 li
373.28 355.98 li
373.28 538.89 li
373.28 540.034 373.733 541.132 374.542 541.942 cv
457.528 625.215 li
457.735 625.424 457.96 625.606 458.196 625.764 cv
458.124 625.826 458.052 625.891 457.985 625.951 cv
455.229 628.472 453.011 631.446 454.519 634.868 cv
456.02 638.285 460.013 639.84 463.433 638.337 cv
466.854 636.831 467.622 633.087 466.903 629.419 cv
466.487 627.299 465.903 624.544 464.696 623.448 cv
465.157 621.967 464.821 620.292 463.649 619.114 cv
381.925 537.104 li
381.925 354.19 li
381.925 353.043 381.47 351.943 380.659 351.133 cv
368.269 338.742 li
367.458 337.933 366.358 337.477 365.212 337.477 cv
305.349 337.477 li
262.632 294.491 li
262.632 173.585 li
322.741 113.474 li
323.552 112.664 324.007 111.564 324.007 110.418 cv
324.007 75.9238 li
324.007 73.5352 322.072 71.6016 319.685 71.6016 cv
317.298 71.6016 315.362 73.5352 315.362 75.9238 cv
315.362 108.627 li
255.255 168.737 li
254.444 169.549 253.989 170.646 253.989 171.793 cv
cp
f
391.843 265.432 mo
392.241 263.563 394.075 262.371 395.944 262.769 cv
397.811 263.166 399.005 265.002 398.606 266.869 cv
398.21 268.738 396.372 269.929 394.505 269.532 cv
392.638 269.135 391.444 267.299 391.843 265.432 cv
cp
268.683 182.891 mo
268.683 266.15 li
290.009 287.762 li
290.009 305.607 li
312.892 329.697 li
335.737 329.697 li
350.663 314.701 li
352.157 312.994 li
375.753 313.283 li
384.806 303.581 li
384.806 278.195 li
390.581 271.637 li
392.005 271.982 393.868 271.985 395.405 271.969 cv
399.14 271.926 402.651 270.414 403.431 266.758 cv
404.208 263.104 401.874 259.514 398.222 258.735 cv
394.567 257.957 392.102 260.732 390.196 263.945 cv
389.423 265.246 388.466 267.335 388.343 268.945 cv
381.347 276.892 li
381.347 302.217 li
374.267 309.805 li
350.608 309.518 li
348.138 312.34 li
334.302 326.238 li
314.378 326.238 li
293.466 304.227 li
293.466 286.342 li
272.142 264.732 li
272.142 184.322 li
336.241 120.287 li
336.749 119.777 li
336.747 119.058 li
336.747 118.859 336.688 99.0898 336.747 91.125 cv
336.765 88.9326 337.28 87.3711 338.28 86.4893 cv
339.458 85.4492 341.058 85.6191 341.058 85.6211 cv
364.06 85.6387 li
367.798 85.6387 370.645 84.582 372.519 82.4941 cv
375.099 79.6172 374.729 75.8945 374.712 75.7383 cv
371.272 76.0977 li
371.276 76.1211 371.477 78.5 369.923 80.209 cv
368.731 81.5166 366.759 82.1807 364.06 82.1807 cv
341.394 82.1807 li
340.72 82.1133 338.179 82.0078 336.048 83.8486 cv
334.243 85.4082 333.315 87.8467 333.29 91.0986 cv
333.235 98.2168 333.278 114.705 333.288 118.348 cv
268.683 182.891 li
cp
f
155.063 105.648 mo
153.692 104.323 153.653 102.133 154.979 100.76 cv
156.308 99.3848 158.495 99.3477 159.87 100.674 cv
161.243 102.002 161.28 104.19 159.954 105.564 cv
158.628 106.937 156.438 106.976 155.063 105.648 cv
cp
162.108 106.098 mo
163.706 102.721 164.63 99.1289 161.938 96.5332 cv
159.253 93.9385 154.972 94.0127 152.374 96.6992 cv
149.78 99.3887 150.489 103.143 152.542 106.266 cv
153.464 107.665 154.624 109.379 155.813 110.339 cv
155.96 121.604 li
159.417 121.559 li
159.269 110.209 li
160.433 109.156 161.507 107.369 162.108 106.098 cv
cp
f
142.56 362.93 mo
142.956 361.06 144.792 359.869 146.661 360.266 cv
148.528 360.664 149.72 362.502 149.321 364.369 cv
148.925 366.236 147.089 367.428 145.222 367.029 cv
143.354 366.633 142.161 364.798 142.56 362.93 cv
cp
146.122 369.467 mo
149.856 369.424 153.368 367.91 154.145 364.258 cv
154.923 360.603 152.591 357.012 148.936 356.234 cv
145.284 355.455 142.819 358.23 140.913 361.443 cv
139.841 363.248 138.395 366.57 139.339 368.022 cv
140.281 369.475 143.636 369.494 146.122 369.467 cv
cp
f
159.417 476.388 mo
159.417 478.296 157.87 479.845 155.96 479.845 cv
154.048 479.845 152.501 478.296 152.501 476.388 cv
152.501 474.478 154.048 472.931 155.96 472.931 cv
157.87 472.931 159.417 474.478 159.417 476.388 cv
cp
147.27 476.94 mo
147.27 481.138 150.675 484.544 154.874 484.544 cv
159.072 484.544 162.476 481.138 162.476 476.94 cv
162.476 472.739 159.072 469.333 154.874 469.333 cv
150.675 469.333 147.27 472.739 147.27 476.94 cv
cp
f
261.7 348.492 mo
261.7 346.584 263.249 345.033 265.159 345.033 cv
267.069 345.033 268.616 346.584 268.616 348.492 cv
268.616 350.402 267.069 351.951 265.159 351.951 cv
263.249 351.951 261.7 350.402 261.7 348.492 cv
cp
271.677 349.045 mo
271.677 344.845 268.272 341.44 264.075 341.44 cv
259.874 341.44 256.47 344.845 256.47 349.045 cv
256.47 353.244 259.874 356.647 264.075 356.647 cv
268.272 356.647 271.677 353.244 271.677 349.045 cv
cp
f
280.577 292.783 mo
280.577 294.692 279.03 296.24 277.118 296.24 cv
275.208 296.24 273.661 294.692 273.661 292.783 cv
273.661 290.873 275.208 289.324 277.118 289.324 cv
279.03 289.324 280.577 290.873 280.577 292.783 cv
cp
268.431 293.334 mo
268.431 297.533 271.835 300.939 276.032 300.939 cv
280.231 300.939 283.636 297.533 283.636 293.334 cv
283.636 289.133 280.231 285.728 276.032 285.728 cv
271.835 285.728 268.431 289.133 268.431 293.334 cv
cp
f
311.362 293.537 mo
311.362 295.445 309.815 296.994 307.905 296.994 cv
305.993 296.994 304.446 295.445 304.446 293.537 cv
304.446 291.625 305.993 290.078 307.905 290.078 cv
309.815 290.078 311.362 291.625 311.362 293.537 cv
cp
299.216 294.09 mo
299.216 298.287 302.62 301.691 306.819 301.691 cv
311.017 301.691 314.421 298.287 314.421 294.09 cv
314.421 289.887 311.017 286.483 306.819 286.483 cv
302.62 286.483 299.216 289.887 299.216 294.09 cv
cp
f
339.501 296.994 mo
337.591 296.994 336.044 295.445 336.044 293.537 cv
336.044 291.625 337.591 290.078 339.501 290.078 cv
341.411 290.078 342.958 291.625 342.958 293.537 cv
342.958 295.445 341.411 296.994 339.501 296.994 cv
cp
338.415 286.483 mo
334.216 286.483 330.811 289.887 330.811 294.09 cv
330.811 298.287 334.216 301.691 338.415 301.691 cv
342.614 301.691 346.019 298.287 346.019 294.09 cv
346.019 289.887 342.614 286.483 338.415 286.483 cv
cp
f
369.47 296.994 mo
367.558 296.994 366.011 295.445 366.011 293.537 cv
366.011 291.625 367.558 290.078 369.47 290.078 cv
371.378 290.078 372.927 291.625 372.927 293.537 cv
372.927 295.445 371.378 296.994 369.47 296.994 cv
cp
368.382 286.483 mo
364.183 286.483 360.778 289.887 360.778 294.09 cv
360.778 298.287 364.183 301.691 368.382 301.691 cv
372.581 301.691 375.985 298.287 375.985 294.09 cv
375.985 289.887 372.581 286.483 368.382 286.483 cv
cp
f
400.265 290.078 mo
402.175 290.078 403.722 291.625 403.722 293.537 cv
403.722 295.445 402.175 296.994 400.265 296.994 cv
398.352 296.994 396.806 295.445 396.806 293.537 cv
396.806 291.625 398.352 290.078 400.265 290.078 cv
cp
399.179 301.691 mo
403.376 301.691 406.78 298.287 406.78 294.09 cv
406.78 289.887 403.376 286.483 399.179 286.483 cv
394.979 286.483 391.575 289.887 391.575 294.09 cv
391.575 298.287 394.979 301.691 399.179 301.691 cv
cp
f
400.265 321.365 mo
402.175 321.365 403.722 322.912 403.722 324.824 cv
403.722 326.732 402.175 328.281 400.265 328.281 cv
398.352 328.281 396.806 326.732 396.806 324.824 cv
396.806 322.912 398.352 321.365 400.265 321.365 cv
cp
399.179 332.978 mo
403.376 332.978 406.78 329.575 406.78 325.375 cv
406.78 321.174 403.376 317.77 399.179 317.77 cv
394.979 317.77 391.575 321.174 391.575 325.375 cv
391.575 329.575 394.979 332.978 399.179 332.978 cv
cp
f
400.704 399.131 mo
400.704 401.039 399.155 402.588 397.247 402.588 cv
395.337 402.588 393.788 401.039 393.788 399.131 cv
393.788 397.221 395.337 395.67 397.247 395.67 cv
399.155 395.67 400.704 397.221 400.704 399.131 cv
cp
388.558 399.683 mo
388.558 403.881 391.962 407.287 396.161 407.287 cv
400.362 407.287 403.765 403.881 403.765 399.683 cv
403.765 395.481 400.362 392.076 396.161 392.076 cv
391.962 392.076 388.558 395.481 388.558 399.683 cv
cp
f
399.724 357.279 mo
397.811 357.279 396.267 355.73 396.267 353.821 cv
396.267 351.912 397.811 350.361 399.724 350.361 cv
401.632 350.361 403.181 351.912 403.181 353.821 cv
403.181 355.73 401.632 357.279 399.724 357.279 cv
cp
406.239 354.373 mo
406.239 350.173 402.837 346.768 398.636 346.768 cv
394.438 346.768 391.034 350.173 391.034 354.373 cv
391.034 358.572 394.438 361.978 398.636 361.978 cv
402.837 361.978 406.239 358.572 406.239 354.373 cv
cp
f
396.806 418.756 mo
398.718 418.756 400.265 420.307 400.265 422.217 cv
400.265 424.126 398.718 425.674 396.806 425.674 cv
394.894 425.674 393.349 424.126 393.349 422.217 cv
393.349 420.307 394.894 418.756 396.806 418.756 cv
cp
395.72 430.373 mo
399.919 430.373 403.325 426.967 403.325 422.768 cv
403.325 418.568 399.919 415.162 395.72 415.162 cv
391.522 415.162 388.114 418.568 388.114 422.768 cv
388.114 426.967 391.522 430.373 395.72 430.373 cv
cp
f
393.892 477.589 mo
393.892 475.681 395.44 474.132 397.349 474.132 cv
399.261 474.132 400.808 475.681 400.808 477.589 cv
400.808 479.499 399.261 481.046 397.349 481.046 cv
395.44 481.046 393.892 479.499 393.892 477.589 cv
cp
403.868 478.142 mo
403.868 473.94 400.464 470.535 396.265 470.535 cv
392.065 470.535 388.661 473.94 388.661 478.142 cv
388.661 482.34 392.065 485.743 396.265 485.743 cv
400.464 485.743 403.868 482.34 403.868 478.142 cv
cp
f
154.811 297.547 mo
152.899 297.547 151.352 295.996 151.352 294.09 cv
151.352 292.178 152.899 290.628 154.811 290.628 cv
156.722 290.628 158.269 292.178 158.269 294.09 cv
158.269 295.996 156.722 297.547 154.811 297.547 cv
cp
153.726 287.035 mo
149.526 287.035 146.122 290.44 146.122 294.64 cv
146.122 298.84 149.526 302.244 153.726 302.244 cv
157.925 302.244 161.327 298.84 161.327 294.64 cv
161.327 290.44 157.925 287.035 153.726 287.035 cv
cp
f
198.985 302.043 mo
200.895 302.043 202.442 303.592 202.442 305.503 cv
202.442 307.41 200.895 308.961 198.985 308.961 cv
197.075 308.961 195.528 307.41 195.528 305.503 cv
195.528 303.592 197.075 302.043 198.985 302.043 cv
cp
190.296 306.053 mo
190.296 310.254 193.698 313.658 197.897 313.658 cv
202.099 313.658 205.503 310.254 205.503 306.053 cv
205.503 301.852 202.099 298.448 197.897 298.448 cv
193.698 298.448 190.296 301.852 190.296 306.053 cv
cp
f
156.263 420.111 mo
154.354 420.111 152.806 418.563 152.806 416.653 cv
152.806 414.744 154.354 413.194 156.263 413.194 cv
158.175 413.194 159.722 414.744 159.722 416.653 cv
159.722 418.563 158.175 420.111 156.263 420.111 cv
cp
155.179 409.6 mo
150.977 409.6 147.575 413.004 147.575 417.205 cv
147.575 421.404 150.977 424.809 155.179 424.809 cv
159.378 424.809 162.781 421.404 162.781 417.205 cv
162.781 413.004 159.378 409.6 155.179 409.6 cv
cp
f
159.083 179.837 mo
159.083 185.089 154.825 189.346 149.575 189.346 cv
144.319 189.346 140.065 185.089 140.065 179.837 cv
140.065 174.584 144.319 170.328 149.575 170.328 cv
154.825 170.328 159.083 174.584 159.083 179.837 cv
1 1 1 rgb
f
154.155 212.484 mo
154.155 217.735 149.897 221.993 144.647 221.993 cv
139.394 221.993 135.138 217.735 135.138 212.484 cv
135.138 207.232 139.394 202.976 144.647 202.976 cv
149.897 202.976 154.155 207.232 154.155 212.484 cv
f
181.663 157.903 mo
181.663 163.156 177.407 167.412 172.153 167.412 cv
166.903 167.412 162.645 163.156 162.645 157.903 cv
162.645 152.65 166.903 148.395 172.153 148.395 cv
177.407 148.395 181.663 152.65 181.663 157.903 cv
f
417.702 568.567 mo
417.702 573.823 413.444 578.076 408.192 578.076 cv
402.94 578.076 398.683 573.823 398.683 568.567 cv
398.683 563.317 402.94 559.06 408.192 559.06 cv
413.444 559.06 417.702 563.317 417.702 568.567 cv
f
420.394 608.138 mo
420.394 613.392 416.136 617.646 410.884 617.646 cv
405.632 617.646 401.376 613.392 401.376 608.138 cv
401.376 602.886 405.632 598.628 410.884 598.628 cv
416.136 598.628 420.394 602.886 420.394 608.138 cv
f
258.456 93.3486 mo
258.456 98.6016 254.197 102.858 248.946 102.858 cv
243.692 102.858 239.438 98.6016 239.438 93.3486 cv
239.438 88.0986 243.692 83.8398 248.946 83.8398 cv
254.197 83.8398 258.456 88.0986 258.456 93.3486 cv
f
362.476 311.076 mo
362.476 316.328 358.22 320.584 352.966 320.584 cv
347.714 320.584 343.458 316.328 343.458 311.076 cv
343.458 305.823 347.714 301.566 352.966 301.566 cv
358.22 301.566 362.476 305.823 362.476 311.076 cv
f
167.544 129.459 mo
167.544 134.713 163.288 138.969 158.036 138.969 cv
152.782 138.969 148.526 134.713 148.526 129.459 cv
148.526 124.207 152.782 119.951 158.036 119.951 cv
163.288 119.951 167.544 124.207 167.544 129.459 cv
f
145.935 374.069 mo
145.935 379.324 141.677 383.578 136.425 383.578 cv
131.173 383.578 126.917 379.324 126.917 374.069 cv
126.917 368.819 131.173 364.56 136.425 364.56 cv
141.677 364.56 145.935 368.819 145.935 374.069 cv
f
293.202 74.4004 mo
293.202 79.6816 288.921 83.9668 283.636 83.9668 cv
278.352 83.9668 274.069 79.6816 274.069 74.4004 cv
274.069 69.1162 278.352 64.834 283.636 64.834 cv
288.921 64.834 293.202 69.1162 293.202 74.4004 cv
cp
f
727.462 395.182 mo
729.371 395.182 730.92 396.73 730.92 398.641 cv
730.92 400.553 729.371 402.1 727.462 402.1 cv
725.553 402.1 724.004 400.553 724.004 398.641 cv
724.004 396.73 725.553 395.182 727.462 395.182 cv
cp
677.468 545.739 mo
676.314 409.123 li
696.646 387.691 li
713.102 387.691 li
721.26 395.059 li
721.212 396.588 721.655 398.485 722.084 399.754 cv
723.281 403.291 725.113 406.52 728.848 406.52 cv
732.584 406.52 735.613 403.49 735.613 399.754 cv
735.613 396.019 732.494 393.806 728.848 392.989 cv
727.125 392.602 724.982 392.16 723.438 392.368 cv
714.434 384.235 li
695.162 384.235 li
672.847 407.754 li
673.996 544.302 li
627.607 590.119 li
628.766 711.873 li
632.223 711.838 li
631.078 591.551 li
677.468 545.739 li
cp
0 .862745 1 rgb
f
676.754 579.828 mo
678.66 579.904 680.144 581.518 680.064 583.424 cv
679.986 585.334 678.375 586.818 676.469 586.736 cv
674.56 586.658 673.078 585.049 673.156 583.139 cv
673.234 581.234 674.844 579.75 676.754 579.828 cv
cp
813.755 424.111 mo
815.105 422.765 817.294 422.765 818.644 424.111 cv
819.996 425.461 819.996 427.651 818.644 429 cv
817.294 430.352 815.105 430.352 813.755 429 cv
812.404 427.651 812.404 425.461 813.755 424.111 cv
cp
673.157 589.475 mo
674.586 589.537 676.32 589.25 677.764 588.988 cv
681.44 588.32 684.646 586.24 684.802 582.508 cv
684.879 580.623 684.174 578.887 682.98 577.609 cv
695.039 563.822 li
695.039 470.522 li
736.682 428.031 li
808.952 428.031 li
809.949 429.289 811.85 430.486 813.184 431.145 cv
816.533 432.802 820.107 433.787 822.75 431.145 cv
825.393 428.504 825.391 424.221 822.75 421.578 cv
820.107 418.938 816.342 419.581 813.184 421.578 cv
811.85 422.423 810.234 423.475 809.231 424.574 cv
735.23 424.574 li
691.58 469.11 li
691.58 562.523 li
680.003 575.762 li
679.468 575.6 678.906 575.494 678.322 575.471 cv
674.588 575.316 672.625 578.463 671.283 581.951 cv
670.652 583.588 669.963 586.295 670.43 587.891 cv
648.646 608.238 li
648.646 711.856 li
652.105 711.856 li
652.105 609.738 li
673.457 589.795 li
673.157 589.475 li
cp
f
782.635 453.502 mo
783.986 452.154 786.174 452.154 787.525 453.502 cv
788.875 454.853 788.875 457.041 787.525 458.391 cv
786.174 459.743 783.986 459.743 782.635 458.391 cv
781.285 457.041 781.285 454.853 782.635 453.502 cv
cp
713.193 542.877 mo
731.921 525.015 li
731.921 490.699 li
764.334 458.287 li
778.659 458.287 li
779.686 459.21 781.041 460.031 782.064 460.535 cv
785.412 462.191 788.986 463.178 791.631 460.535 cv
794.273 457.895 794.271 453.611 791.629 450.969 cv
788.986 448.328 785.223 448.971 782.064 450.969 cv
780.384 452.033 778.256 453.426 777.472 454.828 cv
762.902 454.828 li
728.463 489.269 li
728.463 523.535 li
709.736 541.398 li
709.736 597.326 li
661.9 645.736 li
661.9 711.857 li
665.359 711.857 li
665.359 647.156 li
713.193 598.748 li
713.193 542.877 li
cp
f
754.973 484.622 mo
756.324 483.273 758.513 483.273 759.863 484.622 cv
761.214 485.973 761.214 488.16 759.863 489.512 cv
758.513 490.861 756.324 490.861 754.973 489.512 cv
753.623 488.16 753.623 485.973 754.973 484.622 cv
cp
719.531 546.31 mo
736.82 529.023 li
736.82 499.156 li
748.678 489.406 li
750.938 489.406 li
750.938 489.353 li
751.971 490.298 753.36 491.141 754.402 491.654 cv
757.75 493.313 761.324 494.299 763.969 491.654 cv
766.611 489.016 766.609 484.73 763.967 482.09 cv
761.324 479.447 757.56 480.09 754.402 482.09 cv
752.721 483.156 750.592 484.548 749.81 485.949 cv
747.438 485.949 li
733.363 497.523 li
733.363 527.59 li
716.074 544.879 li
716.074 599.641 li
667.379 649.49 li
667.379 711.856 li
670.836 711.856 li
670.836 650.896 li
719.531 601.047 li
719.531 546.31 li
cp
f
725.867 548.048 mo
743.447 530.464 li
743.447 507.225 li
749.541 502.23 li
770.635 502.23 li
777.449 495.926 li
777.449 478.864 li
782.51 473.56 li
797.331 473.56 li
797.331 470.102 li
781.031 470.102 li
773.991 477.478 li
773.991 494.414 li
769.281 498.772 li
748.305 498.772 li
739.988 505.592 li
739.988 529.031 li
722.417 546.606 li
722.128 602.941 li
674.291 651.211 li
674.291 711.856 li
677.75 711.856 li
677.75 652.633 li
725.579 604.373 li
725.867 548.048 li
cp
f
756.769 521.766 mo
757.168 519.894 759.006 518.703 760.873 519.102 cv
762.74 519.5 763.932 521.336 763.533 523.203 cv
763.139 525.072 761.301 526.265 759.434 525.865 cv
757.566 525.469 756.373 523.633 756.769 521.766 cv
cp
731.922 551.51 mo
755.939 528.053 li
757.298 528.309 758.945 528.316 760.334 528.302 cv
764.068 528.26 767.578 526.746 768.359 523.092 cv
769.136 519.44 766.803 515.846 763.148 515.07 cv
759.494 514.291 757.031 517.065 755.125 520.277 cv
754.258 521.736 753.172 524.168 753.273 525.82 cv
728.465 550.056 li
728.465 605.68 li
680.654 653.49 li
678.902 711.803 li
682.36 711.906 li
684.067 654.967 li
731.922 607.113 li
731.922 551.51 li
cp
f
783.902 490.918 mo
782.551 489.568 782.551 487.381 783.902 486.029 cv
785.252 484.681 787.441 484.681 788.791 486.029 cv
788.921 486.16 789.027 486.303 789.133 486.447 cv
789.785 488.273 li
789.84 489.223 789.518 490.191 788.791 490.918 cv
787.441 492.27 785.252 492.27 783.902 490.918 cv
cp
737.109 557.295 mo
758.537 537.24 li
768.438 537.24 li
777.16 527.225 li
777.16 508.625 li
787.822 499.118 li
787.822 495.723 li
789.078 494.725 790.275 492.826 790.935 491.493 cv
793.174 486.964 794.188 482.019 786.66 479.531 cv
786.403 479.445 786.107 479.44 785.847 479.515 cv
778.435 481.644 778.617 487.147 781.369 491.493 cv
782.217 492.832 783.275 494.456 784.379 495.457 cv
784.364 495.457 li
784.364 497.566 li
773.702 507.074 li
773.702 525.932 li
766.865 533.783 li
757.174 533.783 li
733.651 555.798 li
733.651 607.701 li
685.529 656.398 li
685.529 711.857 li
688.988 711.857 li
688.988 657.818 li
737.109 609.121 li
737.109 557.295 li
cp
f
751.988 557.699 mo
752.387 555.831 754.224 554.637 756.092 555.035 cv
757.959 555.431 759.15 557.269 758.752 559.137 cv
758.357 561.004 756.518 562.199 754.652 561.799 cv
752.785 561.402 751.592 559.566 751.988 557.699 cv
cp
743.449 570.356 mo
751.511 564.057 li
752.795 564.25 754.285 564.25 755.553 564.236 cv
759.285 564.193 762.797 562.682 763.575 559.027 cv
764.353 555.375 762.021 551.781 758.367 551.002 cv
754.713 550.225 752.25 552.998 750.344 556.211 cv
749.432 557.746 748.266 560.363 748.51 562.012 cv
739.99 568.67 li
739.99 611.44 li
691.582 659.85 li
691.582 711.856 li
695.039 711.856 li
695.039 661.281 li
743.449 612.873 li
743.449 570.356 li
cp
f
789.359 524.578 mo
788.008 525.928 785.819 525.928 784.469 524.578 cv
783.118 523.229 783.118 521.039 784.469 519.69 cv
785.819 518.339 788.008 518.339 789.359 519.69 cv
789.488 519.818 789.595 519.963 789.699 520.106 cv
790.353 521.934 li
790.408 522.884 790.086 523.854 789.359 524.578 cv
cp
764.385 628.006 mo
776.584 614.553 li
776.584 539.74 li
787.553 529.896 li
789.094 529.256 790.697 526.779 791.503 525.151 cv
791.627 524.898 791.746 524.646 791.861 524.393 cv
791.879 524.356 791.896 524.322 791.912 524.285 cv
791.928 524.252 791.94 524.217 791.955 524.184 cv
791.961 524.168 791.967 524.154 791.973 524.141 cv
792.052 523.963 792.127 523.785 792.2 523.606 cv
792.227 523.543 792.254 523.479 792.279 523.416 cv
792.291 523.387 792.301 523.356 792.313 523.328 cv
792.391 523.123 792.465 522.92 792.535 522.716 cv
792.554 522.662 792.574 522.606 792.594 522.553 cv
792.676 522.3 792.75 522.049 792.816 521.799 cv
792.826 521.76 792.837 521.723 792.847 521.684 cv
792.859 521.631 792.869 521.578 792.881 521.526 cv
792.922 521.356 792.957 521.188 792.988 521.019 cv
793 520.957 793.016 520.893 793.025 520.828 cv
793.031 520.791 793.035 520.754 793.041 520.716 cv
793.068 520.537 793.087 520.358 793.102 520.182 cv
793.107 520.119 793.116 520.056 793.12 519.993 cv
793.135 519.746 793.137 519.5 793.125 519.257 cv
793.123 519.225 793.122 519.19 793.119 519.158 cv
793.116 519.098 793.107 519.037 793.102 518.979 cv
793.088 518.824 793.068 518.672 793.043 518.519 cv
793.033 518.464 793.025 518.408 793.014 518.352 cv
793.005 518.307 792.994 518.262 792.983 518.218 cv
792.947 518.06 792.9 517.904 792.85 517.748 cv
792.832 517.693 792.817 517.639 792.797 517.584 cv
792.712 517.348 792.609 517.118 792.487 516.891 cv
792.474 516.865 792.456 516.842 792.441 516.816 cv
792.406 516.754 792.366 516.693 792.328 516.631 cv
792.244 516.496 792.154 516.361 792.057 516.231 cv
792.023 516.185 791.989 516.141 791.953 516.096 cv
791.916 516.049 791.879 516.002 791.839 515.956 cv
791.726 515.822 791.6 515.691 791.47 515.563 cv
791.426 515.519 791.385 515.475 791.338 515.432 cv
791.304 515.398 791.275 515.365 791.239 515.332 cv
791.059 515.172 790.871 515.023 790.678 514.887 cv
790.625 514.848 790.571 514.809 790.518 514.771 cv
790.357 514.658 790.176 514.552 790 514.443 cv
789.851 514.354 789.707 514.262 789.545 514.174 cv
789.353 514.07 789.142 513.973 788.932 513.875 cv
788.754 513.791 788.58 513.707 788.389 513.627 cv
788.168 513.535 787.924 513.449 787.684 513.361 cv
787.528 513.306 787.391 513.244 787.227 513.19 cv
787.232 513.203 li
787.093 513.156 786.972 513.106 786.826 513.06 cv
785.185 513.489 783.912 514.082 782.922 514.781 cv
782.793 514.868 782.668 514.963 782.544 515.059 cv
782.478 515.111 782.403 515.16 782.341 515.214 cv
782.167 515.36 782 515.516 781.84 515.682 cv
781.799 515.725 781.766 515.771 781.725 515.815 cv
781.676 515.869 781.631 515.923 781.584 515.979 cv
781.433 516.156 781.294 516.339 781.17 516.527 cv
781.14 516.57 781.107 516.613 781.078 516.658 cv
780.938 516.883 780.814 517.114 780.707 517.35 cv
780.683 517.404 780.662 517.461 780.639 517.518 cv
780.56 517.707 780.493 517.901 780.435 518.096 cv
780.416 518.162 780.396 518.229 780.379 518.297 cv
780.317 518.541 780.268 518.787 780.236 519.037 cv
780.232 519.072 780.232 519.108 780.228 519.144 cv
780.205 519.365 780.194 519.588 780.193 519.813 cv
780.193 519.889 780.194 519.964 780.197 520.041 cv
780.203 520.259 780.219 520.479 780.244 520.699 cv
780.25 520.742 780.252 520.785 780.258 520.827 cv
780.291 521.086 780.342 521.344 780.402 521.604 cv
780.419 521.675 780.439 521.748 780.457 521.82 cv
780.51 522.026 780.57 522.231 780.638 522.435 cv
780.659 522.502 780.68 522.568 780.702 522.634 cv
780.793 522.893 780.893 523.148 781.004 523.404 cv
781.027 523.457 781.055 523.51 781.079 523.565 cv
781.175 523.774 781.277 523.982 781.386 524.19 cv
781.423 524.262 781.46 524.332 781.498 524.402 cv
781.637 524.654 781.781 524.904 781.936 525.151 cv
782.581 526.166 783.346 527.348 784.159 528.297 cv
773.127 538.197 li
773.127 613.221 li
762.852 624.549 li
734.668 624.549 li
696.191 662.731 li
696.191 711.857 li
699.649 711.857 li
699.649 664.168 li
736.092 628.006 li
764.385 628.006 li
cp
f
732.912 700.072 mo
731.561 701.424 729.373 701.424 728.021 700.072 cv
726.674 698.723 726.674 696.533 728.021 695.184 cv
729.373 693.834 731.561 693.834 732.912 695.184 cv
734.26 696.533 734.26 698.723 732.912 700.072 cv
cp
737.715 696.152 mo
736.717 694.896 734.817 693.699 733.484 693.039 cv
730.135 691.385 726.56 690.398 723.917 693.039 cv
721.273 695.682 721.273 699.965 723.918 702.606 cv
726.56 705.248 730.326 704.606 733.484 702.606 cv
734.818 701.76 736.434 700.709 737.435 699.609 cv
754.183 699.609 li
765.769 712.988 li
768.382 710.723 li
755.764 696.152 li
737.715 696.152 li
cp
f
876.467 429.762 mo
876.866 427.894 878.703 426.702 880.57 427.1 cv
882.438 427.494 883.629 429.335 883.23 431.202 cv
882.836 433.068 880.997 434.262 879.132 433.864 cv
877.265 433.465 876.07 431.629 876.467 429.762 cv
cp
868.488 442.44 mo
875.117 435.947 li
876.553 436.315 878.463 436.318 880.031 436.299 cv
883.764 436.256 887.275 434.744 888.055 431.092 cv
888.832 427.438 886.5 423.846 882.846 423.065 cv
879.192 422.287 876.728 425.063 874.822 428.276 cv
874.06 429.559 873.123 431.602 872.978 433.201 cv
867.076 438.982 li
842.014 438.982 li
833.637 445.015 li
833.637 490.787 li
831.043 494.965 li
831.043 711.856 li
834.502 711.856 li
834.502 495.952 li
837.095 491.773 li
837.095 446.783 li
843.128 442.44 li
868.488 442.44 li
cp
f
848.965 462.197 mo
847.59 460.872 847.553 458.682 848.877 457.307 cv
850.203 455.935 852.393 455.897 853.768 457.223 cv
855.141 458.549 855.181 460.739 853.852 462.114 cv
852.526 463.485 850.339 463.522 848.965 462.197 cv
cp
844.299 575.547 mo
853.23 568.629 li
853.23 466.697 li
854.369 465.639 855.414 463.895 856.006 462.647 cv
857.605 459.269 858.527 455.676 855.839 453.081 cv
853.15 450.485 848.869 450.56 846.271 453.247 cv
843.678 455.935 844.387 459.691 846.442 462.813 cv
847.379 464.238 848.563 465.989 849.771 466.938 cv
849.771 566.935 li
840.842 573.852 li
840.842 695.598 li
859.242 713.107 li
861.627 710.602 li
844.299 694.113 li
844.299 575.547 li
cp
f
694.935 584.496 mo
695.334 582.627 697.172 581.435 699.038 581.834 cv
700.905 582.229 702.098 584.068 701.699 585.935 cv
701.305 587.803 699.465 588.996 697.6 588.598 cv
695.732 588.199 694.539 586.363 694.935 584.496 cv
cp
698.498 591.033 mo
702.232 590.99 705.744 589.479 706.523 585.826 cv
707.301 582.172 704.968 578.578 701.314 577.801 cv
697.66 577.021 695.197 579.797 693.291 583.008 cv
692.528 584.291 691.594 586.33 691.446 587.93 cv
654.412 623.816 li
654.412 711.856 li
657.869 711.856 li
657.869 625.281 li
693.579 590.68 li
695.016 591.049 696.929 591.053 698.498 591.033 cv
cp
f
822.314 492.105 mo
821.92 493.973 820.082 495.168 818.216 494.77 cv
816.349 494.371 815.155 492.535 815.552 490.668 cv
815.95 488.799 817.787 487.61 819.654 488.006 cv
821.521 488.404 822.714 490.239 822.314 492.105 cv
cp
821.93 483.973 mo
818.276 483.193 815.813 485.969 813.906 489.181 cv
813.3 490.201 812.588 491.702 812.243 493.081 cv
806.84 497.848 li
806.84 578.838 li
782.06 601.602 li
782.06 618.516 li
768.362 632.615 li
737.847 632.615 li
703.107 666.465 li
703.107 711.856 li
706.564 711.856 li
706.564 667.922 li
739.252 636.074 li
769.824 636.074 li
785.518 619.92 li
785.518 603.119 li
810.298 580.359 li
810.298 499.408 li
813.468 496.613 li
814.926 497.219 817.261 497.227 819.115 497.206 cv
822.85 497.162 826.36 495.651 827.141 491.996 cv
827.917 488.344 825.584 484.75 821.93 483.973 cv
cp
f
816.167 628.965 mo
814.815 630.316 812.627 630.316 811.276 628.965 cv
809.926 627.615 809.926 625.426 811.276 624.076 cv
812.627 622.725 814.815 622.725 816.167 624.076 cv
817.516 625.426 817.516 627.615 816.167 628.965 cv
cp
808.74 619.971 mo
806.1 622.613 806.741 626.381 808.74 629.539 cv
809.587 630.873 810.639 632.488 811.738 633.492 cv
811.738 648.176 li
815.197 648.176 li
815.197 633.768 li
816.454 632.769 817.65 630.871 818.309 629.539 cv
818.809 628.527 819.246 627.498 819.543 626.477 cv
820.23 624.117 820.154 621.816 818.309 619.971 cv
815.667 617.328 811.383 617.33 808.74 619.971 cv
cp
f
782.277 704.574 mo
780.368 704.537 778.849 702.963 778.881 701.055 cv
778.914 699.144 780.49 697.625 782.399 697.658 cv
784.309 697.69 785.83 699.266 785.796 701.174 cv
785.762 703.084 784.186 704.606 782.277 704.574 cv
cp
787.734 700.096 mo
786.6 696.539 784.825 693.281 781.089 693.217 cv
777.353 693.15 774.271 696.125 774.207 699.861 cv
774.143 703.596 777.223 705.861 780.852 706.744 cv
782.613 707.17 784.824 707.67 786.379 707.447 cv
792.719 713.143 li
795.027 710.568 li
788.484 704.691 li
788.533 703.184 788.131 701.34 787.734 700.096 cv
cp
f
748.568 685.012 mo
748.568 683.102 750.115 681.553 752.025 681.553 cv
753.935 681.553 755.482 683.102 755.482 685.012 cv
755.482 686.92 753.935 688.469 752.025 688.469 cv
750.115 688.469 748.568 686.92 748.568 685.012 cv
cp
758.543 685.563 mo
758.543 681.363 755.139 677.959 750.938 677.959 cv
746.74 677.959 743.336 681.363 743.336 685.563 cv
743.336 689.762 746.74 693.168 750.938 693.168 cv
755.139 693.168 758.543 689.762 758.543 685.563 cv
cp
f
791.459 688.469 mo
789.547 688.469 788 686.92 788 685.012 cv
788 683.102 789.547 681.553 791.459 681.553 cv
793.368 681.553 794.917 683.102 794.917 685.012 cv
794.917 686.92 793.368 688.469 791.459 688.469 cv
cp
790.371 677.959 mo
786.172 677.959 782.769 681.363 782.769 685.563 cv
782.769 689.762 786.172 693.168 790.371 693.168 cv
794.572 693.168 797.977 689.762 797.977 685.563 cv
797.977 681.363 794.572 677.959 790.371 677.959 cv
cp
f
710.232 398.656 mo
712.142 398.656 713.689 400.206 713.689 402.115 cv
713.689 404.026 712.142 405.572 710.232 405.572 cv
708.32 405.572 706.774 404.026 706.774 402.115 cv
706.774 400.206 708.32 398.656 710.232 398.656 cv
cp
687.285 554.891 mo
687.917 554.246 688.266 553.381 688.266 552.481 cv
688.266 455.328 li
710.48 433.533 li
711.144 432.881 711.518 431.993 711.518 431.065 cv
711.518 409.887 li
714.555 408.891 716.748 406.039 716.748 402.668 cv
716.748 398.465 713.346 395.063 709.144 395.063 cv
704.945 395.063 701.541 398.465 701.541 402.668 cv
701.541 405.162 702.748 407.368 704.602 408.754 cv
704.602 429.611 li
682.388 451.408 li
681.725 452.06 681.352 452.947 681.352 453.877 cv
681.352 551.074 li
635.449 598.217 li
634.809 598.877 634.455 599.764 634.469 600.682 cv
636.197 711.91 li
643.113 711.801 li
641.406 602.014 li
687.285 554.891 li
cp
f
771.658 456.644 mo
771.658 461.897 767.403 466.151 762.148 466.151 cv
756.898 466.151 752.64 461.897 752.64 456.644 cv
752.64 451.394 756.898 447.133 762.148 447.133 cv
767.403 447.133 771.658 451.394 771.658 456.644 cv
1 1 1 rgb
f
814.62 471.831 mo
814.62 477.085 810.363 481.34 805.111 481.34 cv
799.858 481.34 795.602 477.085 795.602 471.831 cv
795.602 466.578 799.858 462.322 805.111 462.322 cv
810.363 462.322 814.62 466.578 814.62 471.831 cv
f
842.281 518.676 mo
842.281 523.931 838.025 528.184 832.771 528.184 cv
827.521 528.184 823.264 523.931 823.264 518.676 cv
823.264 513.424 827.521 509.166 832.771 509.166 cv
838.025 509.166 842.281 513.424 842.281 518.676 cv
f
803.635 565.623 mo
803.635 570.875 799.379 575.131 794.127 575.131 cv
788.873 575.131 784.617 570.875 784.617 565.623 cv
784.617 560.369 788.873 556.114 794.127 556.114 cv
799.379 556.114 803.635 560.369 803.635 565.623 cv
f
768.963 607.338 mo
768.963 612.592 764.705 616.846 759.455 616.846 cv
754.2 616.846 749.945 612.592 749.945 607.338 cv
749.945 602.088 754.2 597.83 759.455 597.83 cv
764.705 597.83 768.963 602.088 768.963 607.338 cv
f
805.111 626.521 mo
805.111 631.773 800.853 636.029 795.602 636.029 cv
790.35 636.029 786.094 631.773 786.094 626.521 cv
786.094 621.269 790.35 617.012 795.602 617.012 cv
800.853 617.012 805.111 621.269 805.111 626.521 cv
f
822.977 656.06 mo
822.977 661.315 818.719 665.568 813.469 665.568 cv
808.214 665.568 803.959 661.315 803.959 656.06 cv
803.959 650.809 808.214 646.553 813.469 646.553 cv
818.719 646.553 822.977 650.809 822.977 656.06 cv
f
714.956 87.5703 mo
716.294 88.9346 716.272 91.124 714.908 92.46 cv
713.545 93.7969 711.353 93.7725 710.019 92.4111 cv
708.683 91.0459 708.706 88.8564 710.07 87.5195 cv
711.431 86.1826 713.623 86.2061 714.956 87.5703 cv
cp
710.985 82.8066 mo
709.755 83.8115 708.587 85.6357 707.933 86.9248 cv
706.241 90.2588 705.218 93.8232 707.832 96.4912 cv
710.445 99.1621 714.729 99.2061 717.397 96.5928 cv
720.065 93.9756 719.464 90.2021 717.499 87.0244 cv
716.642 85.6416 715.567 83.958 714.442 82.9521 cv
714.442 73.3848 li
705.505 65.46 li
703.212 68.0459 li
710.985 74.9375 li
710.985 82.8066 li
cp
0 .862745 1 rgb
f
468.849 225.403 mo
466.938 225.403 465.392 223.855 465.392 221.946 cv
465.392 220.034 466.938 218.488 468.849 218.488 cv
470.759 218.488 472.308 220.034 472.308 221.946 cv
472.308 223.855 470.759 225.403 468.849 225.403 cv
cp
701.331 101.536 mo
689.515 89.7207 li
589.826 89.7207 li
561.3 118.247 li
513.777 118.247 li
481.48 149.206 li
481.48 207.733 li
472.456 215.745 li
470.923 215.692 469.013 216.137 467.738 216.568 cv
464.198 217.767 460.972 219.596 460.972 223.332 cv
460.972 227.068 464 230.096 467.738 230.096 cv
471.473 230.096 473.685 226.977 474.502 223.332 cv
474.884 221.636 475.315 219.532 475.131 217.993 cv
484.938 209.286 li
484.938 150.683 li
515.167 121.706 li
562.73 121.706 li
591.257 93.1777 li
688.085 93.1777 li
699.899 104.993 li
719.532 104.993 li
726.259 97.5947 li
726.259 66.7529 li
722.8 66.7529 li
722.8 96.2568 li
718.002 101.536 li
701.331 101.536 li
cp
f
500.507 187.882 mo
501.841 189.246 501.819 191.435 500.455 192.771 cv
499.091 194.108 496.904 194.085 495.566 192.72 cv
494.228 191.356 494.253 189.167 495.615 187.829 cv
496.981 186.494 499.169 186.518 500.507 187.882 cv
cp
699.302 108.738 mo
686.623 96.3496 li
592.683 96.3496 li
566.172 124.299 li
519.229 124.299 li
496.606 146.923 li
496.606 182.794 li
496.981 182.794 li
495.593 183.675 494.212 185.79 493.478 187.237 cv
491.787 190.567 490.765 194.132 493.379 196.803 cv
495.992 199.471 500.276 199.518 502.948 196.902 cv
505.614 194.289 505.011 190.512 503.046 187.335 cv
502.035 185.703 500.724 183.653 499.38 182.794 cv
500.063 182.794 li
500.063 148.355 li
520.661 127.757 li
567.657 127.757 li
594.168 99.8076 li
685.214 99.8076 li
697.894 112.196 li
723.228 112.196 li
732.887 102.54 li
732.887 66.7529 li
729.429 66.7529 li
729.429 101.107 li
721.798 108.738 li
699.302 108.738 li
cp
f
531.625 187.882 mo
532.961 189.246 532.94 191.435 531.575 192.771 cv
530.211 194.108 528.022 194.085 526.685 192.72 cv
525.349 191.356 525.372 189.167 526.735 187.829 cv
528.099 186.494 530.288 186.518 531.625 187.882 cv
cp
696.155 113.925 mo
684.053 101.532 li
594.716 101.826 li
527.152 170.56 li
527.152 182.794 li
528.102 182.794 li
526.713 183.675 525.333 185.79 524.599 187.237 cv
522.907 190.567 521.884 194.132 524.499 196.803 cv
527.111 199.471 531.396 199.518 534.066 196.902 cv
536.734 194.289 536.13 190.512 534.165 187.335 cv
533.154 185.703 531.843 183.653 530.501 182.794 cv
530.609 182.794 li
530.609 171.975 li
596.171 105.276 li
682.601 104.997 li
694.699 117.383 li
725.222 117.383 li
738.651 104.582 li
738.651 66.7529 li
735.193 66.7529 li
735.193 103.1 li
723.837 113.925 li
696.155 113.925 li
cp
f
563.139 159.714 mo
564.477 161.077 564.452 163.267 563.089 164.602 cv
561.729 165.94 559.536 165.916 558.203 164.552 cv
556.865 163.189 556.887 160.998 558.251 159.663 cv
559.613 158.325 561.807 158.349 563.139 159.714 cv
cp
690.972 120.262 mo
679.734 108.738 li
598.322 108.738 li
558.558 148.944 li
558.558 155.518 li
557.561 156.552 556.659 157.995 556.113 159.069 cv
554.423 162.401 553.4 165.965 556.014 168.635 cv
558.629 171.303 562.913 171.35 565.581 168.735 cv
568.249 166.119 567.647 162.346 565.679 159.167 cv
564.669 157.535 563.356 155.483 562.015 154.625 cv
562.015 150.366 li
599.764 112.196 li
678.276 112.196 li
689.514 123.721 li
729.249 123.721 li
744.702 109.198 li
744.702 66.7529 li
741.243 66.7529 li
741.243 107.702 li
727.879 120.262 li
690.972 120.262 li
cp
f
621.598 157.984 mo
622.935 159.349 622.914 161.536 621.55 162.874 cv
620.186 164.211 617.994 164.188 616.66 162.823 cv
615.323 161.459 615.346 159.27 616.711 157.934 cv
618.072 156.596 620.264 156.62 621.598 157.984 cv
cp
689.515 125.74 mo
677.407 113.632 li
643.117 113.933 li
617.63 139.895 li
617.63 153.114 li
617.767 153.114 li
616.485 154.09 615.252 156.001 614.573 157.339 cv
612.882 160.673 611.858 164.236 614.473 166.905 cv
617.085 169.575 621.371 169.62 624.038 167.007 cv
626.706 164.39 626.104 160.616 624.14 157.438 cv
623.205 155.932 622.014 154.067 620.78 153.114 cv
621.087 153.114 li
621.087 141.31 li
644.579 117.376 li
675.989 117.103 li
688.085 129.198 li
731.864 129.198 li
750.463 110.905 li
750.463 66.7529 li
747.004 66.7529 li
747.004 109.456 li
730.449 125.74 li
689.515 125.74 li
cp
f
703.557 144.038 mo
702.205 145.39 700.018 145.39 698.667 144.038 cv
697.316 142.688 697.316 140.5 698.667 139.149 cv
700.018 137.798 702.205 137.798 703.557 139.149 cv
704.907 140.5 704.907 142.688 703.557 144.038 cv
cp
707.081 138.872 mo
706.13 138.108 705.007 137.439 704.127 137.005 cv
700.78 135.349 697.204 134.364 694.561 137.005 cv
691.92 139.648 691.92 143.928 694.561 146.571 cv
697.204 149.212 700.97 148.57 704.127 146.571 cv
705.963 145.409 708.331 143.858 708.901 142.329 cv
728.108 142.329 li
757.092 114.371 li
757.092 66.7529 li
753.633 66.7529 li
753.633 112.902 li
726.715 138.872 li
707.081 138.872 li
cp
f
669.333 147.787 mo
667.423 147.751 665.902 146.177 665.936 144.269 cv
665.97 142.358 667.544 140.837 669.455 140.872 cv
671.363 140.905 672.886 142.479 672.849 144.39 cv
672.817 146.298 671.242 147.819 669.333 147.787 cv
cp
680.507 151.385 mo
675.524 147.114 li
675.449 145.789 675.12 144.343 674.79 143.31 cv
673.656 139.753 671.88 136.495 668.144 136.43 cv
664.407 136.364 661.327 139.339 661.261 143.075 cv
661.199 146.81 664.274 149.073 667.909 149.955 cv
669.96 150.454 672.622 151.051 674.144 150.482 cv
679.227 154.843 li
726.409 154.843 li
763.72 116.647 li
763.72 66.7529 li
760.262 66.7529 li
760.262 115.239 li
724.955 151.385 li
680.507 151.385 li
cp
f
693.686 75.5811 mo
695.597 75.5811 697.144 77.2139 697.144 79.2246 cv
697.144 81.2373 695.597 82.8691 693.686 82.8691 cv
691.778 82.8691 690.229 81.2373 690.229 79.2246 cv
690.229 77.2139 691.778 75.5811 693.686 75.5811 cv
cp
688.311 80.3975 mo
689.506 84.126 691.34 87.5264 695.074 87.5264 cv
698.808 87.5264 701.838 84.333 701.838 80.3975 cv
701.838 76.459 698.721 74.1279 695.074 73.2666 cv
693.413 72.873 691.358 72.4277 689.829 72.5938 cv
682.199 65.4873 li
679.842 68.0166 li
687.498 75.1484 li
687.378 76.8057 687.853 78.9785 688.311 80.3975 cv
cp
f
687.273 60.7158 mo
687.273 65.998 682.988 70.2803 677.707 70.2803 cv
672.424 70.2803 668.142 65.998 668.142 60.7158 cv
668.142 55.4326 672.424 51.1494 677.707 51.1494 cv
682.988 51.1494 687.273 55.4326 687.273 60.7158 cv
cp
1 1 1 rgb
f
787.354 203.496 mo
786.003 204.845 783.814 204.845 782.463 203.496 cv
781.114 202.145 781.114 199.956 782.463 198.606 cv
783.814 197.255 786.003 197.255 787.354 198.606 cv
788.703 199.956 788.703 202.145 787.354 203.496 cv
cp
1006.46 136.599 mo
976.915 166.979 li
867.438 166.979 li
834.013 200.013 li
792.463 200.013 li
791.605 198.602 789.412 197.197 787.927 196.462 cv
784.577 194.806 781.002 193.819 778.359 196.462 cv
775.717 199.104 775.717 203.386 778.359 206.028 cv
781.002 208.671 784.771 208.029 787.927 206.028 cv
789.221 205.208 790.781 204.193 791.79 203.13 cv
791.79 203.471 li
835.435 203.471 li
868.86 170.436 li
978.377 170.436 li
1009.91 138.003 li
1009.91 118.185 li
997.239 105.466 li
997.239 75.7197 li
993.782 75.7197 li
993.782 106.895 li
1006.46 119.612 li
1006.46 136.599 li
cp
0 .862745 1 rgb
f
723.105 323.591 mo
723.105 325.501 721.558 327.05 719.647 327.05 cv
717.737 327.05 716.19 325.501 716.19 323.591 cv
716.19 321.682 717.737 320.134 719.647 320.134 cv
721.558 320.134 723.105 321.682 723.105 323.591 cv
cp
871.471 172.454 mo
831.416 212.218 li
717.178 212.218 li
703.76 225.321 li
703.76 310.111 li
713.654 318.749 li
713.131 320.328 713.709 323.049 714.271 324.704 cv
715.469 328.243 717.297 331.468 721.034 331.468 cv
724.771 331.468 727.797 328.438 727.797 324.704 cv
727.797 320.966 724.68 318.757 721.034 317.936 cv
719.86 317.674 718.486 317.383 717.24 317.288 cv
707.218 308.536 li
707.218 226.776 li
718.586 215.676 li
832.84 215.676 li
872.894 175.911 li
982.102 175.911 li
1022.59 135.714 li
1022.59 75.7197 li
1019.14 75.7197 li
1019.14 134.274 li
980.676 172.454 li
871.471 172.454 li
cp
f
775.87 319.261 mo
776.269 317.393 778.103 316.203 779.974 316.6 cv
781.839 316.997 783.031 318.833 782.633 320.699 cv
782.236 322.57 780.399 323.761 778.533 323.363 cv
776.667 322.966 775.474 321.128 775.87 319.261 cv
cp
873.186 179.658 mo
834 219.422 li
723.386 219.422 li
710.532 231.645 li
710.532 295.515 li
735.313 320.973 li
735.313 330.736 li
744.342 340.728 li
755.949 340.728 li
767.791 328 li
773.398 324.996 li
774.795 325.8 777.396 325.822 779.434 325.799 cv
783.17 325.757 786.678 324.245 787.458 320.59 cv
788.234 316.938 785.902 313.345 782.248 312.565 cv
778.595 311.788 776.133 314.565 774.226 317.774 cv
773.644 318.751 772.967 320.169 772.605 321.497 cv
765.65 325.223 li
754.443 337.273 li
745.877 337.273 li
738.771 329.405 li
738.771 319.569 li
713.991 294.11 li
713.991 233.13 li
724.768 222.88 li
835.448 222.88 li
874.634 183.116 li
984.995 183.116 li
1028.07 139.438 li
1028.07 75.7197 li
1024.61 75.7197 li
1024.61 138.021 li
983.55 179.658 li
873.186 179.658 li
cp
f
753.071 323.591 mo
753.071 325.501 751.523 327.05 749.614 327.05 cv
747.705 327.05 746.157 325.501 746.157 323.591 cv
746.157 321.682 747.705 320.134 749.614 320.134 cv
751.523 320.134 753.071 321.682 753.071 323.591 cv
cp
964.526 183.979 mo
939.457 209.624 li
851.305 209.624 li
836.322 224.319 li
741.503 224.319 li
722.059 244.068 li
722.059 297.353 li
743.521 319.096 li
743.178 320.704 743.715 323.165 744.238 324.704 cv
745.434 328.243 747.266 331.468 751 331.468 cv
754.737 331.468 757.766 328.438 757.766 324.704 cv
757.766 320.966 754.647 318.757 751 317.936 cv
749.621 317.628 747.975 317.287 746.576 317.266 cv
725.516 295.935 li
725.516 245.487 li
742.952 227.778 li
837.734 227.778 li
852.717 213.082 li
940.912 213.082 li
965.981 187.438 li
988.152 187.438 li
1033.83 142.054 li
1033.83 75.7197 li
1030.38 75.7197 li
1030.38 140.614 li
986.727 183.979 li
964.526 183.979 li
cp
f
753.388 356.655 mo
751.478 356.655 749.93 355.108 749.93 353.196 cv
749.93 351.286 751.478 349.74 753.388 349.74 cv
755.3 349.74 756.846 351.286 756.846 353.196 cv
756.846 355.108 755.3 356.655 753.388 356.655 cv
cp
968.828 192.911 mo
946.065 217.116 li
855.938 217.116 li
840.952 231.233 li
747.862 231.233 li
728.688 250.102 li
728.688 293.874 li
744.941 311.053 li
786.431 311.053 li
794.67 319.804 li
794.67 332.784 li
789.947 337.273 li
765.989 337.273 li
756.588 346.999 li
755.133 347.026 753.441 347.426 752.277 347.821 cv
748.738 349.016 745.512 350.847 745.512 354.586 cv
745.512 358.319 748.54 361.348 752.277 361.348 cv
756.012 361.348 758.223 358.228 759.043 354.586 cv
759.457 352.737 759.945 350.395 759.615 348.841 cv
767.455 340.728 li
791.328 340.728 li
798.129 334.269 li
798.129 318.434 li
787.924 307.595 li
746.43 307.595 li
732.144 292.497 li
732.144 251.552 li
749.277 234.691 li
842.322 234.691 li
857.309 220.573 li
947.56 220.573 li
970.324 196.369 li
990.161 196.369 li
1042.48 145.229 li
1042.48 75.7197 li
1039.02 75.7197 li
1039.02 143.774 li
988.754 192.911 li
968.828 192.911 li
cp
f
1001.35 207.091 mo
1002.69 208.454 1002.67 210.643 1001.3 211.979 cv
999.938 213.316 997.749 213.293 996.412 211.929 cv
995.079 210.565 995.098 208.376 996.463 207.04 cv
997.827 205.702 1000.01 205.726 1001.35 207.091 cv
cp
997.526 202.215 mo
996.242 203.188 995.006 205.104 994.325 206.444 cv
992.637 209.778 991.609 213.343 994.227 216.012 cv
996.84 218.681 1001.12 218.726 1003.79 216.112 cv
1006.46 213.497 1005.86 209.721 1003.89 206.543 cv
1003.07 205.22 1002.05 203.617 1000.98 202.601 cv
1000.98 201.126 li
1052.27 150.29 li
1052.27 75.7197 li
1048.82 75.7197 li
1048.82 148.849 li
997.526 199.684 li
997.526 202.215 li
cp
f
751.648 290.978 mo
751.648 292.888 750.102 294.435 748.191 294.435 cv
746.279 294.435 744.733 292.888 744.733 290.978 cv
744.733 289.067 746.279 287.52 748.191 287.52 cv
750.102 287.52 751.648 289.067 751.648 290.978 cv
cp
1009.63 197.956 mo
1009.63 215.079 li
1004.46 221.689 li
873.321 221.689 li
854.593 236.134 li
753.865 236.134 li
737.619 253.608 li
737.619 282.089 li
742.08 286.55 li
741.768 288.159 742.302 290.574 742.815 292.089 cv
744.011 295.628 745.842 298.853 749.58 298.853 cv
753.314 298.853 756.342 295.825 756.342 292.089 cv
756.342 288.353 753.224 286.142 749.58 285.323 cv
748.172 285.007 746.483 284.657 745.068 284.648 cv
741.076 280.656 li
741.076 254.966 li
755.373 239.591 li
855.772 239.591 li
874.5 225.148 li
1006.15 225.148 li
1013.09 216.271 li
1013.09 199.395 li
1076.54 136.22 li
1077.05 135.714 li
1077.05 99.1162 li
1092.04 84.1318 li
1092.04 75.7197 li
1088.58 75.7197 li
1088.58 82.7002 li
1073.6 97.6846 li
1073.6 134.274 li
1010.14 197.45 li
1009.63 197.956 li
cp
f
754.158 265.085 mo
752.246 265.085 750.7 263.537 750.7 261.628 cv
750.7 259.716 752.246 258.169 754.158 258.169 cv
756.068 258.169 757.615 259.716 757.615 261.628 cv
757.615 263.537 756.068 265.085 754.158 265.085 cv
cp
1079.36 138.007 mo
1015.39 201.019 li
1015.39 219.692 li
1009.07 227.776 li
887.631 227.776 li
862.492 251.406 li
825.76 251.406 li
819.996 247.371 li
766.04 247.371 li
757.41 255.427 li
755.944 255.444 754.225 255.851 753.045 256.25 cv
749.506 257.446 746.279 259.277 746.279 263.012 cv
746.279 266.75 749.309 269.778 753.045 269.778 cv
756.781 269.778 758.993 266.659 759.81 263.012 cv
760.217 261.202 760.697 258.914 760.406 257.36 cv
767.404 250.829 li
818.905 250.829 li
824.669 254.864 li
863.863 254.864 li
889.002 231.233 li
1010.76 231.233 li
1018.85 220.88 li
1018.85 202.466 li
1082.82 139.454 li
1082.82 102.294 li
1098.95 86.4473 li
1098.95 75.7197 li
1095.49 75.7197 li
1095.49 84.9951 li
1079.36 100.845 li
1079.36 138.007 li
cp
f
982.311 213.745 mo
980.398 213.745 978.853 212.199 978.853 210.288 cv
978.853 208.377 980.398 206.83 982.311 206.83 cv
984.223 206.83 985.769 208.377 985.769 210.288 cv
985.769 212.199 984.223 213.745 982.311 213.745 cv
cp
981.2 204.912 mo
977.661 206.107 974.433 207.938 974.433 211.675 cv
974.433 215.411 977.462 218.439 981.2 218.439 cv
984.935 218.439 987.146 215.321 987.964 211.675 cv
988.366 209.879 988.84 207.614 988.564 206.061 cv
1047.09 148.105 li
1047.09 75.7197 li
1043.63 75.7197 li
1043.63 146.664 li
985.646 204.085 li
984.164 204.088 982.4 204.505 981.2 204.912 cv
cp
f
991.988 134.755 mo
993.326 136.118 993.303 138.309 991.938 139.644 cv
990.574 140.981 988.386 140.958 987.05 139.593 cv
985.711 138.229 985.734 136.039 987.099 134.703 cv
988.463 133.366 990.651 133.39 991.988 134.755 cv
cp
984.962 134.11 mo
983.27 137.442 982.247 141.006 984.86 143.676 cv
987.474 146.347 991.759 146.392 994.43 143.776 cv
997.097 141.163 996.493 137.387 994.528 134.208 cv
993.598 132.71 992.416 130.857 991.188 129.898 cv
991.188 75.7197 li
987.73 75.7197 li
987.73 130.239 li
986.607 131.276 985.564 132.92 984.962 134.11 cv
cp
f
1005.54 96.4863 mo
1006.9 95.1494 1009.09 95.1729 1010.43 96.5371 cv
1011.76 97.9014 1011.74 100.091 1010.38 101.427 cv
1009.01 102.764 1006.83 102.739 1005.49 101.378 cv
1004.16 100.013 1004.18 97.8232 1005.54 96.4863 cv
cp
1012.87 105.56 mo
1015.54 102.942 1014.93 99.1689 1012.97 95.9912 cv
1012.11 94.6084 1011.04 92.9248 1009.91 91.9189 cv
1009.91 75.7197 li
1006.46 75.7197 li
1006.46 91.7715 li
1005.23 92.7754 1004.06 94.6016 1003.4 95.8916 cv
1001.71 99.2256 1000.69 102.79 1003.3 105.458 cv
1005.92 108.129 1010.2 108.173 1012.87 105.56 cv
cp
f
919.076 192.159 mo
920.402 190.784 922.59 190.747 923.965 192.074 cv
925.339 193.399 925.377 195.587 924.05 196.964 cv
922.723 198.339 920.534 198.375 919.159 197.048 cv
917.789 195.721 917.748 193.532 919.076 192.159 cv
cp
918.626 199.202 mo
922.002 200.8 925.596 201.722 928.192 199.034 cv
930.786 196.347 930.712 192.063 928.026 189.468 cv
925.339 186.872 921.58 187.581 918.46 189.636 cv
916.865 190.684 914.865 192.043 914.035 193.401 cv
906.041 193.401 li
906.041 196.858 li
914.972 196.858 li
914.972 196.822 li
916.035 197.804 917.523 198.68 918.626 199.202 cv
cp
f
939.103 193.202 mo
939.103 191.292 940.648 189.744 942.56 189.744 cv
944.468 189.744 946.018 191.292 946.018 193.202 cv
946.018 195.111 944.468 196.659 942.56 196.659 cv
940.648 196.659 939.103 195.111 939.103 193.202 cv
cp
949.077 193.754 mo
949.077 189.552 945.674 186.148 941.474 186.148 cv
937.276 186.148 933.869 189.552 933.869 193.754 cv
933.869 197.953 937.276 201.356 941.474 201.356 cv
945.674 201.356 949.077 197.953 949.077 193.754 cv
cp
f
1065.28 84.9912 mo
1067.19 84.9912 1068.74 86.54 1068.74 88.4512 cv
1068.74 90.3594 1067.19 91.9092 1065.28 91.9092 cv
1063.37 91.9092 1061.82 90.3594 1061.82 88.4512 cv
1061.82 86.54 1063.37 84.9912 1065.28 84.9912 cv
cp
1064.19 96.6064 mo
1068.39 96.6064 1071.8 93.2021 1071.8 89.0029 cv
1071.8 84.8027 1068.39 81.3975 1064.19 81.3975 cv
1059.99 81.3975 1056.59 84.8027 1056.59 89.0029 cv
1056.59 93.2021 1059.99 96.6064 1064.19 96.6064 cv
cp
f
1065.28 122.916 mo
1067.19 122.916 1068.74 124.466 1068.74 126.375 cv
1068.74 128.284 1067.19 129.833 1065.28 129.833 cv
1063.37 129.833 1061.82 128.284 1061.82 126.375 cv
1061.82 124.466 1063.37 122.916 1065.28 122.916 cv
cp
1064.19 134.532 mo
1068.39 134.532 1071.8 131.126 1071.8 126.927 cv
1071.8 122.727 1068.39 119.321 1064.19 119.321 cv
1059.99 119.321 1056.59 122.727 1056.59 126.927 cv
1056.59 131.126 1059.99 134.532 1064.19 134.532 cv
cp
f
1077.56 168.261 mo
1077.56 166.351 1079.11 164.8 1081.02 164.8 cv
1082.93 164.8 1084.48 166.351 1084.48 168.261 cv
1084.48 170.169 1082.93 171.718 1081.02 171.718 cv
1079.11 171.718 1077.56 170.169 1077.56 168.261 cv
cp
1087.54 168.811 mo
1087.54 164.609 1084.13 161.206 1079.93 161.206 cv
1075.74 161.206 1072.33 164.609 1072.33 168.811 cv
1072.33 173.011 1075.74 176.415 1079.93 176.415 cv
1084.13 176.415 1087.54 173.011 1087.54 168.811 cv
cp
f
898.935 185.052 mo
904.19 185.052 908.445 189.308 908.445 194.561 cv
908.445 199.813 904.19 204.069 898.935 204.069 cv
893.685 204.069 889.429 199.813 889.429 194.561 cv
889.429 189.308 893.685 185.052 898.935 185.052 cv
1 1 1 rgb
f
872.685 233.429 mo
872.685 238.68 868.432 242.938 863.178 242.938 cv
857.927 242.938 853.668 238.68 853.668 233.429 cv
853.668 228.175 857.927 223.92 863.178 223.92 cv
868.432 223.92 872.685 228.175 872.685 233.429 cv
f
848.661 254.888 mo
848.661 260.142 844.402 264.395 839.152 264.395 cv
833.897 264.395 829.644 260.142 829.644 254.888 cv
829.644 249.638 833.897 245.379 839.152 245.379 cv
844.402 245.379 848.661 249.638 848.661 254.888 cv
f
1117.4 108.774 mo
1117.4 114.025 1113.14 118.282 1107.89 118.282 cv
1102.63 118.282 1098.38 114.025 1098.38 108.774 cv
1098.38 103.52 1102.63 99.2656 1107.89 99.2656 cv
1113.14 99.2656 1117.4 103.52 1117.4 108.774 cv
f
187.267 839.303 mo
187.664 837.434 189.499 836.242 191.37 836.641 cv
193.235 837.035 194.428 838.875 194.03 840.742 cv
193.634 842.609 191.796 843.803 189.929 843.404 cv
188.061 843.006 186.868 841.17 187.267 839.303 cv
cp
372.753 1085.38 mo
308.352 1022.27 li
215.003 1022.27 li
163.719 971.203 li
163.719 866.828 li
185.679 845.41 li
187.138 845.846 189.171 845.859 190.83 845.84 cv
194.565 845.797 198.076 844.285 198.852 840.633 cv
199.631 836.979 197.3 833.387 193.645 832.606 cv
189.991 831.828 187.527 834.604 185.62 837.816 cv
184.913 839.008 184.058 840.854 183.819 842.394 cv
160.261 865.373 li
160.261 972.641 li
213.574 1025.73 li
306.94 1025.73 li
371.343 1088.84 li
494.87 1088.84 li
500.847 1095.75 li
500.847 1121.4 li
504.306 1121.4 li
504.306 1094.46 li
496.451 1085.38 li
372.753 1085.38 li
cp
0 .862745 1 rgb
f
216.806 809.094 mo
217.202 807.227 219.039 806.033 220.907 806.434 cv
222.774 806.828 223.965 808.664 223.568 810.531 cv
223.171 812.398 221.335 813.592 219.468 813.195 cv
217.601 812.797 216.409 810.961 216.806 809.094 cv
cp
404.487 1065.61 mo
405.837 1064.26 408.025 1064.26 409.377 1065.61 cv
410.727 1066.96 410.727 1069.15 409.377 1070.5 cv
408.025 1071.85 405.837 1071.85 404.487 1070.5 cv
403.136 1069.15 403.136 1066.96 404.487 1065.61 cv
cp
195.919 984.963 mo
226.69 1015.36 li
314.011 1015.36 li
370.199 1069.53 li
399.685 1069.53 li
400.683 1070.79 402.581 1071.98 403.914 1072.64 cv
407.263 1074.3 410.839 1075.29 413.482 1072.64 cv
416.122 1070 416.122 1065.72 413.478 1063.08 cv
410.839 1060.44 407.07 1061.08 403.914 1063.08 cv
402.581 1063.92 400.964 1064.97 399.96 1066.07 cv
371.594 1066.07 li
315.405 1011.9 li
228.108 1011.9 li
199.376 983.516 li
199.376 882.396 li
208.379 873.758 li
208.665 822.158 li
215.523 815.296 li
216.951 815.646 218.827 815.648 220.37 815.631 cv
224.105 815.59 227.614 814.078 228.393 810.422 cv
229.17 806.769 226.839 803.178 223.183 802.398 cv
219.53 801.621 217.066 804.393 215.159 807.607 cv
214.384 808.915 213.422 811.015 213.304 812.627 cv
205.215 820.719 li
204.928 872.275 li
195.919 880.922 li
195.919 984.963 li
cp
f
788.253 1050.63 mo
786.903 1051.99 784.714 1051.98 783.363 1050.63 cv
782.009 1049.29 782.009 1047.1 783.363 1045.74 cv
784.714 1044.4 786.903 1044.4 788.253 1045.74 cv
789.603 1047.1 789.603 1049.29 788.253 1050.63 cv
cp
234.061 763.328 mo
232.151 763.307 230.621 761.746 230.641 759.836 cv
230.657 757.928 232.222 756.393 234.13 756.412 cv
236.04 756.434 237.57 757.994 237.552 759.906 cv
237.532 761.816 235.972 763.348 234.061 763.328 cv
cp
782.79 1043.21 mo
781.412 1044.08 779.733 1045.18 778.74 1046.32 cv
772.952 1046.32 li
761.283 1035.67 li
618.1 1035.67 li
601.1 1053.68 li
544.775 1053.68 li
538.727 1058.37 li
489.472 1058.17 li
454.168 1022.43 li
454.168 1006.39 li
445.318 998.519 li
410.072 998.519 li
403.409 1004.04 li
347.04 1004.04 li
248.126 906.031 li
248.126 876.057 li
261.292 863.387 li
261.292 821.389 li
239.995 799.711 li
239.995 765.039 li
240.789 763.602 240.23 760.727 239.762 758.541 cv
238.977 754.885 236.804 751.746 233.065 751.709 cv
229.331 751.674 226.271 754.666 226.231 758.406 cv
226.198 762.139 229.406 764.004 232.933 765.236 cv
233.909 765.579 235.265 765.935 236.538 766.063 cv
236.538 801.125 li
257.835 822.803 li
257.835 861.914 li
244.668 874.586 li
244.668 907.475 li
345.113 1007 li
345.62 1007.5 li
404.654 1007.5 li
411.317 1001.98 li
444.005 1001.98 li
450.71 1007.94 li
450.71 1023.85 li
488.02 1061.62 li
539.906 1061.83 li
545.96 1057.14 li
602.588 1057.14 li
619.591 1039.13 li
759.941 1039.13 li
771.612 1049.78 li
778.644 1049.78 li
779.663 1050.99 781.496 1052.14 782.79 1052.78 cv
786.14 1054.44 789.716 1055.42 792.359 1052.78 cv
794.999 1050.13 794.999 1045.86 792.355 1043.21 cv
789.716 1040.57 785.945 1041.21 782.79 1043.21 cv
cp
f
523.719 894.555 mo
525.609 894.822 526.926 896.568 526.659 898.459 cv
526.396 900.352 524.646 901.668 522.756 901.402 cv
520.864 901.137 519.551 899.389 519.815 897.498 cv
520.078 895.606 521.827 894.287 523.719 894.555 cv
cp
517.445 898.566 mo
517.752 902.291 519.505 905.684 523.201 906.205 cv
526.903 906.725 530.323 904.15 530.847 900.449 cv
531.363 896.748 528.425 894.486 525.086 892.809 cv
523.403 891.961 520.495 890.919 518.913 891.457 cv
486.585 891.457 li
486.585 894.916 li
517.323 894.916 li
517.265 896.113 517.354 897.428 517.445 898.566 cv
cp
f
526.524 1043.65 mo
525.245 1045.07 523.06 1045.18 521.642 1043.89 cv
520.224 1042.62 520.113 1040.43 521.396 1039.01 cv
522.679 1037.6 524.863 1037.49 526.277 1038.77 cv
527.696 1040.05 527.808 1042.23 526.524 1043.65 cv
cp
281.336 901.574 mo
279.964 900.252 279.925 898.06 281.251 896.688 cv
282.577 895.31 284.767 895.273 286.142 896.602 cv
287.515 897.928 287.552 900.117 286.226 901.49 cv
284.897 902.865 282.71 902.9 281.336 901.574 cv
cp
520.716 1036.9 mo
519.58 1037.54 518.03 1038.6 517.035 1039.73 cv
510.113 1039.73 li
457.072 984.68 li
403.186 984.232 li
397.853 991.154 li
350.737 991.154 li
285.171 923.318 li
285.171 906.442 li
286.474 905.465 287.715 903.43 288.38 902.025 cv
289.977 898.646 290.899 895.055 288.21 892.459 cv
285.524 889.865 281.241 889.94 278.644 892.627 cv
276.052 895.315 276.76 899.07 278.813 902.193 cv
279.639 903.447 280.655 904.951 281.714 905.942 cv
281.714 924.715 li
349.271 994.613 li
399.555 994.613 li
404.878 987.705 li
455.59 988.123 li
508.645 1043.19 li
516.673 1043.19 li
517.654 1044.42 519.618 1045.57 521.2 1046.46 cv
524.453 1048.29 528.246 1048.74 530.753 1045.97 cv
533.257 1043.2 533.044 1038.92 530.272 1036.42 cv
527.496 1033.91 523.979 1035.08 520.716 1036.9 cv
cp
f
540.673 993.891 mo
538.802 994.279 536.972 993.078 536.584 991.209 cv
536.198 989.338 537.396 987.51 539.267 987.121 cv
541.135 986.732 542.97 987.932 543.354 989.803 cv
543.742 991.672 542.543 993.498 540.673 993.891 cv
cp
281.336 837.756 mo
279.964 836.43 279.925 834.24 281.251 832.865 cv
282.577 831.492 284.767 831.453 286.142 832.781 cv
287.515 834.107 287.552 836.297 286.226 837.67 cv
284.897 839.043 282.71 839.082 281.336 837.756 cv
cp
547.724 987.762 mo
546.964 984.104 543.388 981.75 539.727 982.51 cv
536.07 983.271 534.933 986.801 534.479 990.51 cv
534.288 992.06 534.251 994.463 534.84 995.983 cv
528.172 1004.12 li
518.052 1004.12 li
470.92 953.238 li
372.053 952.685 li
355.182 961.91 li
332.973 961.91 li
300.695 931.338 li
300.695 862.65 li
285.171 848.619 li
285.171 842.622 li
286.474 841.646 287.715 839.608 288.38 838.203 cv
289.977 834.828 290.899 831.234 288.21 828.637 cv
285.524 826.043 281.241 826.117 278.644 828.805 cv
276.052 831.494 276.76 835.25 278.813 838.371 cv
279.64 839.626 280.659 841.133 281.718 842.125 cv
281.714 842.125 li
281.714 850.156 li
297.238 864.188 li
297.238 932.826 li
331.595 965.367 li
356.065 965.367 li
372.927 956.148 li
469.399 956.69 li
516.542 1007.58 li
529.81 1007.58 li
538.06 997.51 li
537.925 997.399 li
539.368 997.142 541.077 996.393 542.477 995.758 cv
545.883 994.215 548.482 991.418 547.724 987.762 cv
cp
f
224.149 840.787 mo
222.241 840.775 220.698 839.225 220.707 837.316 cv
220.714 835.406 222.267 833.861 224.177 833.871 cv
226.087 833.879 227.626 835.432 227.62 837.344 cv
227.614 839.254 226.06 840.795 224.149 840.787 cv
cp
787.635 1065.36 mo
788.915 1063.95 791.095 1063.83 792.518 1065.11 cv
793.938 1066.38 794.051 1068.57 792.774 1069.99 cv
791.495 1071.41 789.31 1071.52 787.893 1070.24 cv
786.47 1068.97 786.355 1066.78 787.635 1065.36 cv
cp
229.821 835.965 mo
229.015 832.313 226.82 829.188 223.085 829.176 cv
219.348 829.16 216.308 832.174 216.29 835.91 cv
216.28 839.646 219.497 841.49 223.031 842.701 cv
224.245 843.119 226.04 843.549 227.535 843.547 cv
238.925 854.541 li
238.925 910.293 li
342.421 1013.3 li
342.925 1013.8 li
407.583 1013.8 li
413.688 1008.44 li
439.786 1008.44 li
445.523 1012.52 li
445.523 1027.26 li
484.987 1067.22 li
541.646 1068.11 li
547.71 1063.2 li
604.478 1063.2 li
620.471 1045.71 li
757.345 1045.71 li
782.441 1068.76 li
783.054 1070.28 785.535 1071.73 787.449 1072.8 cv
790.71 1074.64 794.503 1075.08 797.006 1072.3 cv
799.504 1069.53 799.282 1065.25 796.506 1062.75 cv
793.727 1060.25 790.208 1061.42 786.949 1063.25 cv
786.04 1063.76 784.864 1064.55 783.923 1065.43 cv
758.692 1042.25 li
618.947 1042.25 li
602.957 1059.74 li
546.483 1059.74 li
540.443 1064.63 li
486.454 1063.79 li
448.981 1025.84 li
448.981 1010.73 li
440.892 1004.98 li
412.384 1004.98 li
406.279 1010.34 li
344.353 1010.34 li
242.383 908.856 li
242.383 853.072 li
230.407 841.512 li
230.665 839.963 230.212 837.736 229.821 835.965 cv
cp
f
372.063 835.965 mo
372.806 834.205 374.834 833.383 376.593 834.127 cv
378.352 834.871 379.173 836.898 378.429 838.66 cv
377.685 840.42 375.655 841.242 373.897 840.496 cv
372.139 839.75 371.317 837.721 372.063 835.965 cv
cp
720.199 922.758 mo
722.056 922.31 723.919 923.457 724.368 925.31 cv
724.814 927.166 723.673 929.035 721.815 929.481 cv
719.959 929.928 718.092 928.787 717.646 926.928 cv
717.2 925.074 718.341 923.205 720.199 922.758 cv
cp
372.127 841.83 mo
373.044 842.648 374.444 843.682 375.772 844.274 cv
380.409 850.818 li
449.487 920.193 li
449.991 920.701 li
488.55 920.846 li
505.045 939.289 li
713.425 939.289 li
718.696 933.213 li
718.628 933.153 li
720.167 932.975 722.114 932.059 723.677 931.291 cv
727.032 929.643 729.546 926.764 728.67 923.131 cv
728.44 922.177 728.015 921.322 727.452 920.592 cv
727.472 920.506 727.501 920.427 727.514 920.34 cv
729.025 909.967 li
729.299 908.074 727.992 906.318 726.102 906.045 cv
724.202 905.769 722.457 907.076 722.181 908.967 cv
720.852 918.072 li
720.739 918.094 720.626 918.109 720.513 918.137 cv
716.879 919.014 715.853 922.578 715.518 926.299 cv
715.394 927.677 715.412 929.718 715.86 931.21 cv
711.848 935.832 li
506.591 935.832 li
490.1 917.393 li
451.434 917.248 li
383.148 848.701 li
379.452 843.486 li
380.251 842.148 380.677 839.979 380.993 838.238 cv
381.658 834.557 380.841 830.828 377.399 829.373 cv
373.959 827.916 369.99 829.521 368.53 832.963 cv
367.079 836.406 369.333 839.35 372.127 841.83 cv
cp
f
375.641 896.111 mo
376.825 894.611 378.997 894.357 380.496 895.543 cv
381.999 896.727 382.252 898.902 381.065 900.4 cv
379.88 901.894 377.707 902.15 376.209 900.967 cv
374.712 899.781 374.454 897.607 375.641 896.111 cv
cp
595.041 964.935 mo
596.324 963.519 598.509 963.408 599.927 964.69 cv
601.342 965.969 601.453 968.156 600.173 969.572 cv
598.894 970.99 596.709 971.098 595.291 969.818 cv
593.869 968.539 593.762 966.35 595.041 964.935 cv
cp
381.885 902.461 mo
383.035 901.715 384.608 900.459 385.51 899.197 cv
406.209 899.197 li
438.321 931.635 li
481.057 931.635 li
497.913 950.525 li
554.933 950.525 li
570.492 969.111 li
590.321 969.111 li
591.304 970.338 593.267 971.484 594.846 972.377 cv
598.102 974.215 601.896 974.666 604.398 971.894 cv
606.904 969.123 606.691 964.846 603.917 962.338 cv
601.146 959.836 597.624 961.002 594.362 962.824 cv
593.227 963.458 591.679 964.523 590.685 965.654 cv
572.107 965.654 li
556.547 947.068 li
499.464 947.068 li
482.606 928.176 li
439.764 928.176 li
407.65 895.74 li
385.334 895.74 li
384.235 894.655 382.322 893.705 380.772 892.961 cv
377.399 891.34 373.588 891.141 371.271 894.072 cv
368.954 897.002 369.447 901.254 372.378 903.574 cv
375.313 905.889 378.748 904.494 381.885 902.461 cv
cp
f
345.56 805.676 mo
347.053 804.486 349.224 804.731 350.417 806.223 cv
351.611 807.717 351.366 809.894 349.87 811.082 cv
348.378 812.271 346.201 812.027 345.015 810.535 cv
343.821 809.043 344.064 806.865 345.56 805.676 cv
cp
350.2 813.275 mo
351.591 812.773 353.593 811.808 354.728 810.68 cv
379.975 810.68 li
389.336 820.082 li
389.336 849.242 li
453.382 912.906 li
453.888 913.408 li
490.171 913.408 li
505.514 929.348 li
587.096 929.348 li
591.051 925.758 li
588.723 923.197 li
585.759 925.891 li
506.987 925.891 li
491.643 909.951 li
455.313 909.951 li
392.794 847.805 li
392.794 818.652 li
381.41 807.223 li
354.886 807.223 li
354.016 806.008 352.512 804.767 351.271 803.769 cv
348.352 801.428 344.685 800.369 341.766 802.701 cv
338.844 805.031 338.361 809.283 340.691 812.207 cv
343.024 815.123 346.686 814.547 350.2 813.275 cv
cp
f
777.525 1033.02 mo
776.245 1034.44 774.06 1034.55 772.643 1033.28 cv
771.221 1032 771.106 1029.81 772.385 1028.39 cv
773.666 1026.97 775.847 1026.86 777.269 1028.14 cv
778.688 1029.41 778.802 1031.6 777.525 1033.02 cv
cp
282.62 863.889 mo
284.526 863.861 286.095 865.391 286.12 867.301 cv
286.147 869.211 284.618 870.779 282.706 870.803 cv
280.8 870.828 279.231 869.301 279.205 867.391 cv
279.181 865.482 280.708 863.914 282.62 863.889 cv
cp
781.256 1025.78 mo
778.477 1023.28 774.959 1024.45 771.7 1026.28 cv
770.542 1026.93 768.953 1028.03 767.964 1029.19 cv
612.899 1029.63 li
596.912 1046.86 li
542.37 1046.86 li
535.745 1051.51 li
492.49 1051.51 li
461.083 1019.97 li
461.083 1002.89 li
447.874 992.019 li
409.806 992.019 li
402.889 997.293 li
349.194 997.293 li
267.501 915.666 li
267.501 884.271 li
278.743 873.56 li
280.333 873.7 282.464 873.196 283.845 872.711 cv
287.37 871.465 290.571 869.59 290.521 865.856 cv
290.472 862.119 287.403 859.131 283.667 859.18 cv
279.931 859.229 277.764 862.377 276.991 866.033 cv
276.661 867.604 276.286 869.528 276.392 871.023 cv
264.044 882.793 li
264.044 917.098 li
347.762 1000.75 li
404.057 1000.75 li
410.974 995.477 li
446.635 995.477 li
457.626 1004.52 li
457.626 1021.4 li
491.055 1054.97 li
536.837 1054.97 li
543.461 1050.32 li
598.421 1050.32 li
614.413 1033.08 li
767.731 1032.65 li
768.733 1033.85 770.651 1034.96 772.2 1035.83 cv
775.462 1037.67 779.253 1038.11 781.757 1035.33 cv
784.255 1032.56 784.031 1028.28 781.256 1025.78 cv
cp
f
391.413 1106.3 mo
391.016 1108.17 389.179 1109.36 387.311 1108.96 cv
385.444 1108.57 384.251 1106.73 384.65 1104.87 cv
385.048 1103 386.884 1101.8 388.752 1102.2 cv
390.619 1102.6 391.811 1104.44 391.413 1106.3 cv
cp
101.977 809.945 mo
100.067 809.91 98.5479 808.334 98.5801 806.426 cv
98.6123 804.518 100.188 802.996 102.097 803.029 cv
104.007 803.063 105.527 804.637 105.493 806.547 cv
105.46 808.455 103.886 809.979 101.977 809.945 cv
cp
391.028 1098.17 mo
387.375 1097.39 384.909 1100.16 383.002 1103.38 cv
382.247 1104.65 381.323 1106.67 381.163 1108.26 cv
374.388 1114.63 li
315.739 1114.63 li
304.189 1102.41 li
304.189 1052.25 li
287.185 1035.24 li
195.13 1035.24 li
121.361 960.193 li
121.361 821.352 li
108.163 810.281 li
108.263 808.735 107.849 806.773 107.433 805.469 cv
106.298 801.912 104.524 798.652 100.786 798.586 cv
97.0518 798.521 93.9707 801.496 93.9053 805.234 cv
93.8408 808.969 96.9199 811.232 100.55 812.113 cv
102.223 812.519 104.294 812.982 105.831 812.838 cv
117.903 822.965 li
117.903 961.607 li
193.682 1038.7 li
285.753 1038.7 li
300.731 1053.68 li
300.731 1103.79 li
314.25 1118.08 li
375.759 1118.08 li
383.26 1111.04 li
384.7 1111.41 386.63 1111.42 388.212 1111.4 cv
391.946 1111.36 395.458 1109.85 396.237 1106.19 cv
397.015 1102.54 394.682 1098.95 391.028 1098.17 cv
cp
f
373.67 1045.13 mo
375.579 1045.13 377.127 1046.68 377.127 1048.59 cv
377.127 1050.5 375.579 1052.05 373.67 1052.05 cv
371.761 1052.05 370.213 1050.5 370.213 1048.59 cv
370.213 1046.68 371.761 1045.13 373.67 1045.13 cv
cp
375.056 1056.47 mo
378.793 1056.47 381.821 1053.44 381.821 1049.71 cv
381.821 1045.97 378.703 1043.76 375.056 1042.94 cv
372.632 1042.39 369.349 1041.71 368.124 1042.94 cv
366.897 1044.16 367.618 1047.71 368.294 1049.71 cv
369.489 1053.24 371.321 1056.47 375.056 1056.47 cv
cp
f
751.974 1104.55 mo
750.127 1105.04 748.235 1103.93 747.753 1102.09 cv
747.267 1100.24 748.371 1098.35 750.218 1097.86 cv
752.064 1097.38 753.956 1098.48 754.441 1100.33 cv
754.925 1102.18 753.82 1104.07 751.974 1104.55 cv
cp
749.978 1094.76 mo
745.912 1095.83 743.485 1099.99 744.552 1104.05 cv
745.618 1108.11 749.771 1110.54 753.837 1109.47 cv
757.896 1108.41 760.327 1104.25 759.261 1100.19 cv
758.192 1096.13 754.037 1093.7 749.978 1094.76 cv
cp
f
721.887 1104.55 mo
720.04 1105.04 718.148 1103.93 717.667 1102.09 cv
717.18 1100.24 718.284 1098.35 720.131 1097.86 cv
721.977 1097.38 723.869 1098.48 724.355 1100.33 cv
724.838 1102.18 723.733 1104.07 721.887 1104.55 cv
cp
719.892 1094.76 mo
715.825 1095.83 713.398 1099.99 714.465 1104.05 cv
715.532 1108.11 719.685 1110.54 723.75 1109.47 cv
727.809 1108.41 730.241 1104.25 729.173 1100.19 cv
728.106 1096.13 723.95 1093.7 719.892 1094.76 cv
cp
f
695.031 1104.13 mo
693.185 1104.61 691.293 1103.51 690.808 1101.66 cv
690.324 1099.81 691.429 1097.92 693.275 1097.44 cv
695.123 1096.95 697.014 1098.06 697.497 1099.91 cv
697.984 1101.75 696.879 1103.64 695.031 1104.13 cv
cp
693.032 1094.34 mo
688.972 1095.41 686.543 1099.56 687.606 1103.62 cv
688.674 1107.69 692.83 1110.12 696.896 1109.05 cv
700.955 1107.98 703.386 1103.83 702.319 1099.76 cv
701.252 1095.7 697.095 1093.27 693.032 1094.34 cv
cp
f
648.339 1104.06 mo
647.403 1102.4 647.995 1100.29 649.66 1099.36 cv
651.323 1098.42 653.434 1099.01 654.366 1100.68 cv
655.302 1102.34 654.712 1104.45 653.046 1105.38 cv
651.382 1106.32 649.274 1105.73 648.339 1104.06 cv
cp
654.063 1108.32 mo
657.726 1106.26 659.026 1101.63 656.969 1097.97 cv
654.913 1094.31 650.28 1093.01 646.613 1095.06 cv
642.956 1097.12 641.652 1101.76 643.71 1105.42 cv
645.766 1109.08 650.402 1110.38 654.063 1108.32 cv
cp
f
755.212 923.928 mo
755.212 925.836 753.665 927.385 751.755 927.385 cv
749.843 927.385 748.296 925.836 748.296 923.928 cv
748.296 922.018 749.843 920.467 751.755 920.467 cv
753.665 920.467 755.212 922.018 755.212 923.928 cv
cp
743.064 924.479 mo
743.064 928.678 746.47 932.084 750.666 932.084 cv
754.867 932.084 758.271 928.678 758.271 924.479 cv
758.271 920.277 754.867 916.873 750.666 916.873 cv
746.47 916.873 743.064 920.277 743.064 924.479 cv
cp
f
808.442 942.729 mo
808.442 944.639 806.896 946.185 804.983 946.185 cv
803.073 946.185 801.525 944.639 801.525 942.729 cv
801.525 940.818 803.073 939.268 804.983 939.268 cv
806.896 939.268 808.442 940.818 808.442 942.729 cv
cp
796.296 943.281 mo
796.296 947.479 799.699 950.885 803.897 950.885 cv
808.098 950.885 811.501 947.479 811.501 943.281 cv
811.501 939.08 808.098 935.674 803.897 935.674 cv
799.699 935.674 796.296 939.08 796.296 943.281 cv
cp
f
690.776 964.672 mo
690.776 962.76 692.324 961.213 694.235 961.213 cv
696.146 961.213 697.693 962.76 697.693 964.672 cv
697.693 966.58 696.146 968.131 694.235 968.131 cv
692.324 968.131 690.776 966.58 690.776 964.672 cv
cp
700.752 965.225 mo
700.752 961.021 697.349 957.617 693.147 957.617 cv
688.95 957.617 685.547 961.021 685.547 965.225 cv
685.547 969.422 688.95 972.826 693.147 972.826 cv
697.349 972.826 700.752 969.422 700.752 965.225 cv
cp
f
450.858 1111.85 mo
449.448 1113.13 447.263 1113.04 445.973 1111.63 cv
444.683 1110.22 444.781 1108.03 446.192 1106.74 cv
447.602 1105.45 449.789 1105.55 451.078 1106.96 cv
452.368 1108.37 452.267 1110.56 450.858 1111.85 cv
cp
444.534 1104.11 mo
441.435 1106.95 441.218 1111.75 444.052 1114.86 cv
446.885 1117.95 451.695 1118.17 454.797 1115.33 cv
457.896 1112.5 458.111 1107.69 455.279 1104.59 cv
452.442 1101.49 447.634 1101.28 444.534 1104.11 cv
cp
f
487.78 1111.42 mo
486.369 1112.71 484.184 1112.61 482.895 1111.2 cv
481.603 1109.79 481.701 1107.61 483.113 1106.32 cv
484.521 1105.03 486.71 1105.13 487.999 1106.54 cv
489.289 1107.95 489.188 1110.13 487.78 1111.42 cv
cp
481.455 1103.69 mo
478.355 1106.52 478.141 1111.33 480.973 1114.43 cv
483.806 1117.53 488.617 1117.74 491.718 1114.91 cv
494.817 1112.08 495.032 1107.27 492.2 1104.17 cv
489.363 1101.07 484.555 1100.85 481.455 1103.69 cv
cp
f
425.619 1057.88 mo
427.256 1056.9 429.38 1057.43 430.363 1059.07 cv
431.345 1060.71 430.815 1062.83 429.174 1063.81 cv
427.537 1064.79 425.412 1064.26 424.43 1062.63 cv
423.446 1060.99 423.98 1058.86 425.619 1057.88 cv
cp
419.844 1064.11 mo
422.005 1067.71 426.671 1068.88 430.274 1066.72 cv
433.877 1064.56 435.045 1059.89 432.885 1056.29 cv
430.727 1052.69 426.057 1051.52 422.451 1053.68 cv
422.173 1053.84 421.915 1054.03 421.667 1054.23 cv
412.247 1046.67 li
410.758 1045.47 408.579 1045.71 407.388 1047.2 cv
406.192 1048.69 406.428 1050.86 407.917 1052.06 cv
417.426 1059.69 li
417.833 1060.01 418.292 1060.22 418.767 1060.34 cv
418.789 1061.63 419.133 1062.93 419.844 1064.11 cv
cp
f
712.823 999.678 mo
714.734 999.678 716.281 1001.23 716.281 1003.14 cv
716.281 1005.05 714.734 1006.6 712.823 1006.6 cv
710.913 1006.6 709.366 1005.05 709.366 1003.14 cv
709.366 1001.23 710.913 999.678 712.823 999.678 cv
cp
347.091 903.205 mo
345.181 903.197 343.64 901.644 343.647 899.734 cv
343.655 897.826 345.208 896.283 347.117 896.291 cv
349.026 896.301 350.565 897.852 350.56 899.764 cv
350.554 901.674 349 903.215 347.091 903.205 cv
cp
711.736 1011.29 mo
715.938 1011.29 719.342 1007.89 719.342 1003.69 cv
719.342 999.488 715.938 996.086 711.736 996.086 cv
708.825 996.086 706.298 997.725 705.019 1000.13 cv
676.177 971.502 li
668.549 971.502 li
652.492 976.1 li
645.534 978.19 li
558.269 978.19 li
537.09 953.236 li
497.69 953.236 li
480.835 935.832 li
437.146 935.832 li
412.077 911.566 li
360.71 911.566 li
353.394 903.514 li
353.522 901.997 353.12 900.004 352.763 898.383 cv
351.956 894.732 349.761 891.607 346.025 891.594 cv
342.288 891.58 339.247 894.594 339.231 898.33 cv
339.222 902.066 342.436 903.912 345.973 905.121 cv
347.313 905.583 349.358 906.053 350.931 905.942 cv
359.181 915.023 li
410.68 915.023 li
435.748 939.289 li
479.369 939.289 li
496.226 956.693 li
535.489 956.693 li
556.669 981.646 li
645.786 981.646 li
668.794 974.959 li
674.751 974.959 li
704.159 1004.14 li
704.396 1008.13 707.692 1011.29 711.736 1011.29 cv
cp
f
684.454 1004.83 mo
682.588 1005.25 680.736 1004.08 680.313 1002.22 cv
679.891 1000.36 681.06 998.508 682.92 998.084 cv
684.783 997.662 686.634 998.828 687.06 1000.69 cv
687.481 1002.55 686.313 1004.41 684.454 1004.83 cv
cp
682.782 994.979 mo
678.685 995.91 676.119 999.982 677.048 1004.08 cv
677.978 1008.17 682.052 1010.74 686.151 1009.81 cv
690.243 1008.88 692.81 1004.8 691.882 1000.71 cv
690.95 996.613 686.877 994.049 682.782 994.979 cv
cp
f
801.334 1031.94 mo
799.427 1031.94 797.876 1030.39 797.876 1028.48 cv
797.876 1026.57 799.427 1025.02 801.334 1025.02 cv
803.246 1025.02 804.791 1026.57 804.791 1028.48 cv
804.791 1030.39 803.246 1031.94 801.334 1031.94 cv
cp
807.855 1029.03 mo
807.855 1024.83 804.448 1021.43 800.251 1021.43 cv
796.05 1021.43 792.646 1024.83 792.646 1029.03 cv
792.646 1033.23 796.05 1036.63 800.251 1036.63 cv
804.448 1036.63 807.855 1033.23 807.855 1029.03 cv
cp
f
555.661 916.898 mo
553.905 917.65 551.877 916.834 551.123 915.08 cv
550.374 913.322 551.188 911.289 552.943 910.539 cv
554.699 909.789 556.731 910.602 557.481 912.359 cv
558.231 914.113 557.417 916.146 555.661 916.898 cv
cp
550.533 907.662 mo
546.671 909.315 544.877 913.781 546.531 917.644 cv
548.183 921.506 552.65 923.297 556.513 921.644 cv
560.376 919.992 562.165 915.523 560.514 911.662 cv
558.862 907.799 554.393 906.008 550.533 907.662 cv
cp
f
597.255 992.879 mo
596.503 991.121 597.317 989.088 599.073 988.34 cv
600.829 987.588 602.861 988.4 603.614 990.16 cv
604.364 991.912 603.551 993.945 601.795 994.697 cv
600.039 995.449 598.005 994.633 597.255 992.879 cv
cp
606.644 989.461 mo
604.991 985.6 600.524 983.809 596.661 985.461 cv
592.799 987.113 591.009 991.58 592.66 995.443 cv
594.313 999.305 598.783 1001.1 602.646 999.443 cv
603.415 999.114 604.097 998.67 604.69 998.144 cv
614.089 998.144 li
615.044 998.144 615.817 997.369 615.817 996.414 cv
615.817 995.461 615.044 994.685 614.089 994.685 cv
606.919 994.685 li
607.431 993.025 607.382 991.184 606.644 989.461 cv
cp
f
243.22 990.68 mo
241.886 992.049 239.697 992.08 238.329 990.754 cv
236.96 989.428 236.922 987.234 238.253 985.863 cv
239.583 984.492 241.771 984.459 243.142 985.789 cv
244.512 987.117 244.546 989.309 243.22 990.68 cv
cp
789.763 1080.66 mo
791.042 1079.24 793.224 1079.13 794.644 1080.41 cv
796.063 1081.68 796.178 1083.87 794.9 1085.29 cv
793.622 1086.71 791.438 1086.82 790.019 1085.54 cv
788.597 1084.26 788.482 1082.08 789.763 1080.66 cv
cp
481.105 1073.92 mo
543.799 1074.58 li
549.856 1069.79 li
607.933 1069.79 li
622.63 1053.78 li
754.279 1053.78 li
784.538 1083.97 li
785.083 1085.52 787.622 1087 789.576 1088.1 cv
792.838 1089.93 796.631 1090.38 799.133 1087.6 cv
801.632 1084.83 801.409 1080.55 798.633 1078.05 cv
795.855 1075.55 792.335 1076.72 789.077 1078.55 cv
788.19 1079.05 787.05 1079.81 786.12 1080.66 cv
755.708 1050.32 li
621.109 1050.32 li
606.414 1066.33 li
548.655 1066.33 li
542.613 1071.11 li
482.557 1070.48 li
441.634 1029.34 li
441.634 1016.16 li
436.538 1012.77 li
414.779 1012.77 li
409.703 1017.52 li
340.277 1017.52 li
321.05 998.504 li
272.257 998.504 li
260.269 986.832 li
248.077 986.832 li
247.097 985.535 245.076 984.299 243.68 983.635 cv
240.306 982.031 236.716 981.104 234.114 983.783 cv
231.513 986.467 231.58 990.75 234.263 993.352 cv
236.945 995.949 240.704 995.25 243.827 993.201 cv
245.091 992.374 246.607 991.352 247.601 990.291 cv
258.863 990.291 li
270.851 1001.96 li
319.627 1001.96 li
338.855 1020.98 li
411.071 1020.98 li
416.147 1016.22 li
435.491 1016.22 li
438.177 1018.01 li
438.177 1030.77 li
481.105 1073.92 li
cp
f
507.01 910.693 mo
505.102 910.684 503.56 909.131 503.569 907.223 cv
503.577 905.313 505.129 903.769 507.036 903.779 cv
508.948 903.787 510.487 905.34 510.48 907.25 cv
510.475 909.162 508.921 910.703 507.01 910.693 cv
cp
612.36 879.951 mo
612.36 779.816 li
629.554 760.801 li
829.242 760.801 li
835.074 764.693 li
836.996 761.818 li
830.29 757.344 li
628.018 757.344 li
608.903 778.486 li
608.903 878.471 li
588.618 897.795 li
545.461 897.795 li
529.901 915.144 li
517.083 915.144 li
513.438 910.598 li
513.345 910.672 li
513.394 909.204 513.013 907.373 512.683 905.871 cv
511.877 902.219 509.682 899.096 505.947 899.082 cv
502.209 899.068 499.17 902.082 499.153 905.82 cv
499.142 909.553 502.357 911.396 505.893 912.609 cv
507.349 913.109 509.64 913.629 511.247 913.394 cv
515.425 918.602 li
531.444 918.602 li
547.004 901.254 li
590.003 901.254 li
612.36 879.951 li
cp
f
671.054 916.328 mo
669.152 916.49 667.478 915.078 667.316 913.178 cv
667.255 912.461 667.417 911.777 667.745 911.195 cv
667.975 911.195 li
667.975 910.862 li
668.544 910.078 669.427 909.528 670.469 909.44 cv
671.345 909.364 672.163 909.633 672.817 910.118 cv
672.894 910.178 672.967 910.241 673.046 910.295 cv
673.69 910.862 674.128 911.666 674.207 912.59 cv
674.367 914.494 672.958 916.166 671.054 916.328 cv
cp
951.206 883.965 mo
951.206 882.055 949.659 880.508 947.748 880.508 cv
716.383 880.508 li
715.397 880.508 714.458 880.93 713.8 881.666 cv
699.422 897.795 li
681.795 897.795 li
680.938 897.795 680.114 898.113 679.476 898.691 cv
672.647 904.867 li
672.116 905.346 671.769 905.955 671.61 906.602 cv
670.683 906.817 669.74 907.104 668.903 907.369 cv
668.559 907.477 668.222 907.602 667.892 907.736 cv
654.721 907.736 li
654.721 911.195 li
663.514 911.195 li
662.925 912.196 662.622 913.357 662.734 914.68 cv
663.051 918.4 666.323 921.164 670.045 920.848 cv
673.769 920.531 675.322 917.164 676.214 913.535 cv
676.426 912.674 676.622 911.538 676.679 910.427 cv
676.892 910.305 677.099 910.166 677.288 909.994 cv
683.129 904.711 li
700.972 904.711 li
701.958 904.711 702.896 904.291 703.556 903.553 cv
717.934 887.424 li
947.748 887.424 li
949.659 887.424 951.206 885.875 951.206 883.965 cv
cp
f
256.885 740.815 mo
256.903 738.906 258.466 737.373 260.376 737.393 cv
262.285 737.412 263.815 738.973 263.797 740.885 cv
263.78 742.795 262.218 744.328 260.308 744.309 cv
258.397 744.285 256.864 742.725 256.885 740.815 cv
cp
946.522 1007.07 mo
948.974 1004.63 li
875.51 930.863 li
875.004 930.354 li
770.319 930.354 li
757.605 941.883 li
503.36 941.883 li
486.504 922.748 li
446.683 922.748 li
404.755 880.074 li
336.873 880.074 li
300.695 845.113 li
300.695 821.367 li
268.458 789.863 li
267.501 748.594 li
267.492 748.279 li
266.415 745.602 li
266.929 744.073 266.435 741.512 266.009 739.519 cv
265.224 735.863 263.047 732.727 259.311 732.688 cv
255.575 732.654 252.517 735.646 252.477 739.385 cv
252.444 743.119 255.649 744.984 259.178 746.215 cv
260.284 746.604 261.872 747 263.28 747.072 cv
264.052 748.988 li
265.032 791.352 li
297.238 822.822 li
297.238 846.58 li
335.475 883.533 li
403.307 883.533 li
445.233 926.207 li
484.94 926.207 li
501.797 945.34 li
758.939 945.34 li
771.653 933.813 li
873.569 933.813 li
946.522 1007.07 li
cp
f
692.105 915.133 mo
693.961 914.688 695.827 915.828 696.274 917.685 cv
696.72 919.541 695.579 921.406 693.722 921.856 cv
691.865 922.305 689.997 921.162 689.552 919.303 cv
689.105 917.445 690.247 915.578 692.105 915.133 cv
cp
689.346 929.348 mo
691.194 925.418 li
692.606 925.1 694.239 924.326 695.582 923.664 cv
698.938 922.016 701.451 919.137 700.577 915.506 cv
699.702 911.873 696.052 909.639 692.418 910.51 cv
688.785 911.389 687.759 914.951 687.425 918.672 cv
687.283 920.235 687.321 922.657 687.968 924.155 cv
687.15 925.891 li
606.465 925.891 li
602.905 923.115 li
600.778 925.84 li
605.275 929.348 li
689.346 929.348 li
cp
f
395.348 973.529 mo
396.098 975.285 395.283 977.316 393.527 978.07 cv
391.772 978.82 389.742 978.004 388.99 976.25 cv
388.239 974.494 389.054 972.463 390.809 971.709 cv
392.106 971.154 393.552 971.459 394.522 972.362 cv
394.522 972.426 li
394.592 972.426 li
394.903 972.732 395.165 973.102 395.348 973.529 cv
cp
787.534 978.19 mo
752.096 1015.36 li
512.815 1014.5 li
468.296 968.969 li
394.664 968.969 li
392.76 968.06 390.491 967.937 388.397 968.832 cv
384.534 970.484 382.743 974.953 384.396 978.815 cv
386.047 982.676 390.517 984.467 394.379 982.815 cv
398.241 981.164 400.032 976.695 398.379 972.832 cv
398.319 972.691 398.247 972.56 398.181 972.426 cv
466.841 972.426 li
511.356 1017.95 li
753.571 1018.82 li
789.013 981.646 li
855.408 981.646 li
947.972 1075.49 li
950.434 1073.06 li
856.853 978.19 li
787.534 978.19 li
cp
f
524.565 984.342 mo
526.453 984.619 527.765 986.371 527.487 988.262 cv
527.211 990.15 525.455 991.459 523.566 991.184 cv
521.675 990.908 520.369 989.152 520.646 987.264 cv
520.919 985.371 522.675 984.065 524.565 984.342 cv
cp
320.043 899.551 mo
318.764 900.971 316.578 901.088 315.159 899.81 cv
313.739 898.535 313.622 896.346 314.899 894.93 cv
316.177 893.51 318.36 893.393 319.783 894.672 cv
321.204 895.947 321.319 898.135 320.043 899.551 cv
cp
330.87 895.74 mo
325.024 895.74 li
324.177 894.375 321.964 893.088 320.22 892.109 cv
316.958 890.279 313.167 889.838 310.669 892.617 cv
308.171 895.394 308.394 899.67 311.173 902.172 cv
313.953 904.666 317.47 903.492 320.728 901.662 cv
321.735 901.096 323.067 900.188 324.049 899.197 cv
329.375 899.197 li
376.391 949.231 li
481.476 949.231 li
498.248 968.518 li
518.376 983.11 li
518.024 984.596 518.146 986.648 518.272 988.318 cv
518.555 992.047 520.291 995.447 523.988 995.988 cv
527.684 996.527 531.12 993.971 531.661 990.275 cv
532.197 986.574 529.271 984.297 525.94 982.602 cv
524.693 981.965 522.769 981.223 521.212 981.096 cv
521.307 980.963 li
500.727 966.1 li
483.053 945.771 li
377.886 945.771 li
330.87 895.74 li
cp
f
189.719 869.088 mo
190.117 867.221 191.952 866.029 193.821 866.426 cv
195.688 866.824 196.881 868.66 196.483 870.527 cv
196.087 872.394 194.249 873.588 192.382 873.19 cv
190.514 872.791 189.32 870.957 189.719 869.088 cv
cp
427.124 1028.77 mo
425.213 1028.77 423.673 1027.21 423.68 1025.3 cv
423.686 1023.39 425.24 1021.85 427.151 1021.86 cv
429.06 1021.87 430.599 1023.42 430.593 1025.33 cv
430.589 1027.24 429.032 1028.78 427.124 1028.77 cv
cp
793.341 1102.99 mo
777.468 1087.79 li
777.468 1082.37 li
749.644 1055.26 li
623.28 1055.26 li
609.018 1070.47 li
551.566 1070.47 li
546.163 1075.87 li
480.824 1075.87 li
433.446 1028.08 li
433.39 1026.75 433.079 1025.23 432.798 1023.95 cv
431.99 1020.3 429.795 1017.18 426.057 1017.16 cv
422.323 1017.15 419.28 1020.16 419.263 1023.9 cv
419.253 1027.63 422.47 1029.48 426.007 1030.69 cv
427.618 1031.24 430.237 1031.81 431.833 1031.36 cv
479.382 1079.33 li
378.798 1079.33 li
313.101 1015.79 li
226.235 1015.79 li
184.464 974.443 li
184.464 879.805 li
188.065 875.174 li
189.526 875.631 191.596 875.646 193.281 875.627 cv
197.017 875.584 200.528 874.072 201.306 870.418 cv
202.085 866.764 199.751 863.172 196.098 862.393 cv
192.444 861.615 189.979 864.391 188.073 867.602 cv
187.431 868.685 186.661 870.312 186.347 871.754 cv
181.007 878.617 li
181.007 975.885 li
224.815 1019.25 li
311.702 1019.25 li
377.399 1082.79 li
497.856 1082.79 li
508.194 1095.71 li
508.194 1121.4 li
511.653 1121.4 li
511.653 1094.5 li
499.518 1079.33 li
547.596 1079.33 li
552.997 1073.93 li
610.517 1073.93 li
624.779 1058.72 li
748.239 1058.72 li
774.01 1083.83 li
774.01 1089.27 li
791.954 1106.45 li
822.087 1106.45 li
840.159 1126.31 li
842.716 1123.98 li
823.618 1102.99 li
793.341 1102.99 li
cp
f
524.569 1109.75 mo
525.957 1111.06 526.027 1113.25 524.722 1114.64 cv
523.418 1116.03 521.229 1116.1 519.842 1114.8 cv
518.447 1113.49 518.373 1111.31 519.68 1109.91 cv
520.986 1108.52 523.171 1108.45 524.569 1109.75 cv
cp
788.958 1109.68 mo
772.123 1093.81 li
770.4 1086.24 li
743.781 1059.6 li
625.857 1059.6 li
609.433 1077.78 li
553.724 1077.78 li
546.16 1085.38 li
528.229 1085.38 li
520.298 1094.04 li
520.298 1105.1 li
519.119 1106.1 518.006 1107.93 517.13 1109.42 cv
515.229 1112.64 514.713 1116.43 517.438 1118.98 cv
520.165 1121.54 524.444 1121.4 527.001 1118.68 cv
529.553 1115.95 528.456 1112.4 526.692 1109.12 cv
526.048 1107.91 524.933 1106.24 523.755 1105.23 cv
523.755 1095.38 li
529.752 1088.84 li
547.6 1088.84 li
555.162 1081.23 li
610.969 1081.23 li
627.393 1063.06 li
742.35 1063.06 li
767.249 1087.98 li
768.985 1095.61 li
787.589 1113.13 li
817.769 1113.13 li
828.277 1124.58 li
830.823 1122.25 li
819.288 1109.68 li
788.958 1109.68 li
cp
f
618.739 1106.83 mo
616.842 1107.05 615.129 1105.69 614.909 1103.8 cv
614.688 1101.9 616.044 1100.18 617.945 1099.96 cv
619.843 1099.74 621.556 1101.1 621.777 1103 cv
621.994 1104.9 620.636 1106.61 618.739 1106.83 cv
cp
786.784 1116.5 mo
765.798 1097.28 li
765.798 1090.64 li
741.009 1066.07 li
652.279 1066.07 li
621.19 1096.71 li
619.692 1096.79 617.831 1097.41 616.315 1097.94 cv
612.783 1099.17 609.942 1101.73 610.375 1105.44 cv
610.805 1109.15 614.16 1111.81 617.87 1111.38 cv
621.582 1110.95 623.031 1107.53 623.815 1103.88 cv
624.117 1102.47 624.356 1100.31 624.032 1098.76 cv
653.698 1069.53 li
739.589 1069.53 li
762.341 1092.08 li
762.341 1098.8 li
785.44 1119.96 li
814.845 1119.96 li
820.19 1124.71 li
822.485 1122.12 li
816.158 1116.5 li
786.784 1116.5 li
cp
f
592.026 1034.2 mo
590.271 1034.96 588.241 1034.14 587.487 1032.38 cv
586.737 1030.63 587.552 1028.59 589.308 1027.84 cv
591.063 1027.09 593.097 1027.91 593.845 1029.66 cv
594.595 1031.42 593.781 1033.45 592.026 1034.2 cv
cp
817.228 1027.36 mo
808.769 1014.93 li
762.881 1014.93 li
757.516 1020.76 li
598.563 1020.76 li
594.46 1025.89 li
592.356 1024.3 589.49 1023.86 586.896 1024.97 cv
583.033 1026.62 581.24 1031.09 582.896 1034.95 cv
584.547 1038.81 589.014 1040.6 592.877 1038.95 cv
596.738 1037.3 598.529 1032.83 596.878 1028.97 cv
596.827 1028.85 596.765 1028.73 596.708 1028.62 cv
600.225 1024.22 li
759.029 1024.22 li
764.396 1018.38 li
806.939 1018.38 li
813.771 1028.43 li
813.771 1089.23 li
847.974 1124.62 li
850.458 1122.21 li
817.228 1087.83 li
817.228 1027.36 li
cp
f
403.063 924.924 mo
404.415 923.574 406.605 923.57 407.954 924.922 cv
409.306 926.269 409.306 928.461 407.958 929.81 cv
406.607 931.162 404.418 931.162 403.066 929.815 cv
402.569 929.318 402.259 928.709 402.126 928.07 cv
402.175 927.692 402.157 927.323 402.089 926.968 cv
402.175 926.221 402.49 925.496 403.063 924.924 cv
cp
398.165 931.035 mo
398.348 931.063 398.53 931.076 398.71 931.076 cv
399.215 931.076 399.696 930.954 400.136 930.752 cv
400.907 931.33 401.745 931.871 402.495 932.346 cv
405.655 934.346 409.421 934.984 412.06 932.344 cv
414.702 929.701 414.702 925.418 412.058 922.777 cv
409.412 920.137 405.841 921.123 402.492 922.781 cv
401.72 923.161 400.759 923.724 399.892 924.373 cv
399.685 924.297 399.471 924.238 399.246 924.203 cv
389.308 922.631 li
387.423 922.342 385.652 923.621 385.352 925.51 cv
385.055 927.394 386.341 929.166 388.227 929.463 cv
398.165 931.035 li
cp
f
541.048 1103.82 mo
539.639 1105.11 537.451 1105.01 536.162 1103.6 cv
534.875 1102.19 534.973 1100 536.385 1098.71 cv
537.792 1097.43 539.98 1097.52 541.267 1098.93 cv
542.558 1100.34 542.455 1102.53 541.048 1103.82 cv
cp
558.769 1097.61 mo
546.879 1097.61 li
546.681 1097.61 546.49 1097.64 546.302 1097.67 cv
546.06 1097.29 545.786 1096.91 545.468 1096.56 cv
542.635 1093.47 537.826 1093.25 534.727 1096.08 cv
531.623 1098.92 531.411 1103.73 534.244 1106.83 cv
537.076 1109.93 541.885 1110.14 544.987 1107.31 cv
545.858 1106.51 546.492 1105.55 546.903 1104.53 cv
558.769 1104.53 li
560.676 1104.53 562.226 1102.98 562.226 1101.07 cv
562.226 1099.16 560.676 1097.61 558.769 1097.61 cv
cp
f
586.315 1090.05 mo
586.957 1088.26 588.938 1087.32 590.728 1087.96 cv
592.529 1088.6 593.472 1090.58 592.825 1092.38 cv
592.188 1094.18 590.209 1095.12 588.408 1094.48 cv
586.613 1093.83 585.674 1091.86 586.315 1090.05 cv
cp
595.23 1097.2 mo
595.061 1096.8 594.819 1096.45 594.535 1096.16 cv
594.972 1094.84 595.191 1093.19 595.361 1091.81 cv
595.817 1088.1 594.781 1084.42 591.262 1083.17 cv
587.744 1081.91 583.874 1083.75 582.618 1087.27 cv
581.365 1090.78 583.787 1093.6 586.717 1095.91 cv
587.284 1096.36 588.026 1096.88 588.817 1097.33 cv
588.515 1098.13 588.502 1099.04 588.861 1099.89 cv
591.888 1107.04 li
592.448 1108.36 593.727 1109.15 595.075 1109.15 cv
595.524 1109.15 595.978 1109.06 596.418 1108.88 cv
598.178 1108.13 599.002 1106.11 598.255 1104.35 cv
595.23 1097.2 li
cp
f
742.025 1074.82 mo
736.581 1070.47 li
674.053 1070.47 li
664.011 1081.47 li
664.011 1108.86 li
648.751 1123.91 li
651.179 1126.38 li
667.468 1110.3 li
667.468 1082.81 li
675.579 1073.93 li
735.37 1073.93 li
738.567 1076.48 li
738.567 1112.05 li
749.36 1124.54 li
751.977 1122.28 li
742.025 1110.76 li
742.025 1074.82 li
cp
f
735.11 1080.43 mo
730.085 1076.52 li
676.596 1076.52 li
670.132 1084.32 li
670.132 1111.9 li
659.973 1122.2 li
662.434 1124.63 li
673.59 1113.32 li
673.59 1085.57 li
678.223 1079.98 li
728.9 1079.98 li
731.652 1082.12 li
731.652 1115.45 li
741.846 1126.32 li
744.368 1123.96 li
735.11 1114.09 li
735.11 1080.43 li
cp
f
710.041 1089.3 mo
704.601 1082.57 li
682.622 1082.57 li
676.112 1090.83 li
676.112 1113.65 li
667.944 1122.22 li
670.45 1124.61 li
679.569 1115.03 li
679.569 1092.03 li
684.302 1086.03 li
702.951 1086.03 li
706.583 1090.53 li
706.583 1109.46 li
724.413 1126.4 li
726.793 1123.89 li
710.041 1107.98 li
710.041 1089.3 li
cp
f
772.899 957.5 mo
772.899 955.59 774.445 954.041 776.356 954.041 cv
778.267 954.041 779.814 955.59 779.814 957.5 cv
779.814 959.408 778.267 960.957 776.356 960.957 cv
774.445 960.957 772.899 959.408 772.899 957.5 cv
cp
955.346 1033.48 mo
881.724 959.141 li
880.099 957.5 877.891 956.578 875.581 956.578 cv
786.111 956.578 li
784.948 956.578 783.841 956.81 782.827 957.227 cv
782.417 953.413 779.19 950.445 775.269 950.445 cv
771.071 950.445 767.669 953.85 767.669 958.053 cv
767.669 962.252 771.071 965.654 775.269 965.654 cv
776.036 965.654 776.775 965.538 777.474 965.327 cv
777.53 970.052 781.372 973.867 786.111 973.867 cv
871.978 973.867 li
943.06 1045.64 li
944.751 1047.36 946.976 1048.21 949.203 1048.21 cv
951.402 1048.21 953.6 1047.37 955.286 1045.71 cv
958.679 1042.35 958.705 1036.87 955.346 1033.48 cv
cp
f
775.657 917.947 mo
773.318 917.947 771.417 916.049 771.417 913.707 cv
771.417 911.363 773.318 909.465 775.657 909.465 cv
778.002 909.465 779.899 911.363 779.899 913.707 cv
779.899 916.049 778.002 917.947 775.657 917.947 cv
cp
885.954 904.771 mo
774.01 904.771 li
769.234 904.771 765.364 908.643 765.364 913.414 cv
765.364 918.188 769.234 922.059 774.01 922.059 cv
882.287 922.059 li
942.983 984.914 li
944.683 986.67 946.941 987.553 949.203 987.553 cv
951.364 987.553 953.528 986.746 955.208 985.127 cv
958.641 981.81 958.735 976.338 955.42 972.904 cv
892.175 907.41 li
890.544 905.725 888.302 904.771 885.954 904.771 cv
cp
f
803.897 999.031 mo
801.557 999.031 799.656 997.131 799.656 994.789 cv
799.656 992.445 801.557 990.549 803.897 990.549 cv
806.24 990.549 808.138 992.445 808.138 994.789 cv
808.138 997.131 806.24 999.031 803.897 999.031 cv
cp
843.726 1083.67 mo
843.726 1005.85 li
843.726 1003.72 842.938 1001.67 841.518 1000.08 cv
831.45 988.846 li
829.81 987.016 827.47 985.969 825.012 985.969 cv
801.978 985.969 li
797.205 985.969 793.335 989.838 793.335 994.613 cv
793.335 999.387 797.205 1003.26 801.978 1003.26 cv
821.151 1003.26 li
826.438 1009.16 li
826.438 1087.11 li
826.438 1089.31 827.281 1091.44 828.793 1093.04 cv
867.134 1133.67 li
868.835 1135.47 871.128 1136.38 873.423 1136.38 cv
875.551 1136.38 877.685 1135.6 879.353 1134.02 cv
882.828 1130.75 882.982 1125.28 879.708 1121.8 cv
843.726 1083.67 li
cp
f
192.245 914.508 mo
192.245 919.762 187.988 924.016 182.735 924.016 cv
177.483 924.016 173.227 919.762 173.227 914.508 cv
173.227 909.258 177.483 904.998 182.735 904.998 cv
187.988 904.998 192.245 909.258 192.245 914.508 cv
1 1 1 rgb
f
207.156 960.412 mo
207.156 965.664 202.9 969.92 197.647 969.92 cv
192.396 969.92 188.139 965.664 188.139 960.412 cv
188.139 955.16 192.396 950.904 197.647 950.904 cv
202.9 950.904 207.156 955.16 207.156 960.412 cv
f
351.828 1098.04 mo
351.828 1103.29 347.573 1107.54 342.318 1107.54 cv
337.068 1107.54 332.81 1103.29 332.81 1098.04 cv
332.81 1092.79 337.068 1088.53 342.318 1088.53 cv
347.573 1088.53 351.828 1092.79 351.828 1098.04 cv
f
372.49 1037.4 mo
372.49 1042.65 368.234 1046.91 362.981 1046.91 cv
357.727 1046.91 353.473 1042.65 353.473 1037.4 cv
353.473 1032.15 357.727 1027.89 362.981 1027.89 cv
368.234 1027.89 372.49 1032.15 372.49 1037.4 cv
f
333.483 804.723 mo
333.483 809.979 329.225 814.232 323.974 814.232 cv
318.722 814.232 314.464 809.979 314.464 804.723 cv
314.464 799.473 318.722 795.215 323.974 795.215 cv
329.225 795.215 333.483 799.473 333.483 804.723 cv
f
336.174 844.293 mo
336.174 849.547 331.917 853.801 326.665 853.801 cv
321.412 853.801 317.157 849.547 317.157 844.293 cv
317.157 839.041 321.412 834.783 326.665 834.783 cv
331.917 834.783 336.174 839.041 336.174 844.293 cv
f
214.177 920.396 mo
214.177 915.146 218.433 910.887 223.686 910.887 cv
228.938 910.887 233.194 915.146 233.194 920.396 cv
233.194 925.648 228.938 929.904 223.686 929.904 cv
218.433 929.904 214.177 925.648 214.177 920.396 cv
f
256.264 882.236 mo
256.264 876.986 260.522 872.729 265.772 872.729 cv
271.026 872.729 275.281 876.986 275.281 882.236 cv
275.281 887.488 271.026 891.744 265.772 891.744 cv
260.522 891.744 256.264 887.488 256.264 882.236 cv
f
129.71 909.574 mo
129.71 914.828 125.454 919.082 120.201 919.082 cv
114.948 919.082 110.692 914.828 110.692 909.574 cv
110.692 904.322 114.948 900.065 120.201 900.065 cv
125.454 900.065 129.71 904.322 129.71 909.574 cv
f
182.735 822.094 mo
182.735 827.348 178.479 831.602 173.227 831.602 cv
167.976 831.602 163.719 827.348 163.719 822.094 cv
163.719 816.844 167.976 812.584 173.227 812.584 cv
178.479 812.584 182.735 816.844 182.735 822.094 cv
f
850.519 767.178 mo
850.519 772.461 846.237 776.744 840.953 776.744 cv
835.671 776.744 831.386 772.461 831.386 767.178 cv
831.386 761.894 835.671 757.613 840.953 757.613 cv
846.237 757.613 850.519 761.894 850.519 767.178 cv
cp
f
653.566 781.209 mo
653.566 786.492 649.285 790.777 644 790.777 cv
638.719 790.777 634.434 786.492 634.434 781.209 cv
634.434 775.928 638.719 771.644 644 771.644 cv
649.285 771.644 653.566 775.928 653.566 781.209 cv
cp
f
734.411 904.359 mo
734.411 909.643 730.13 913.928 724.846 913.928 cv
719.563 913.928 715.278 909.643 715.278 904.359 cv
715.278 899.076 719.563 894.795 724.846 894.795 cv
730.13 894.795 734.411 899.076 734.411 904.359 cv
cp
f
639.216 845.93 mo
639.216 851.213 634.934 855.496 629.647 855.496 cv
624.367 855.496 620.082 851.213 620.082 845.93 cv
620.082 840.646 624.367 836.363 629.647 836.363 cv
634.934 836.363 639.216 840.646 639.216 845.93 cv
cp
f
654.721 815.242 mo
654.721 820.525 650.438 824.809 645.155 824.809 cv
639.869 824.809 635.589 820.525 635.589 815.242 cv
635.589 809.961 639.869 805.676 645.155 805.676 cv
650.438 805.676 654.721 809.961 654.721 815.242 cv
cp
f
657.425 876.185 mo
657.425 881.469 653.144 885.752 647.859 885.752 cv
642.578 885.752 638.293 881.469 638.293 876.185 cv
638.293 870.902 642.578 866.619 647.859 866.619 cv
653.144 866.619 657.425 870.902 657.425 876.185 cv
cp
f
657.425 910.078 mo
657.425 915.361 653.144 919.644 647.859 919.644 cv
642.578 919.644 638.293 915.361 638.293 910.078 cv
638.293 904.795 642.578 900.514 647.859 900.514 cv
653.144 900.514 657.425 904.795 657.425 910.078 cv
cp
f
604.638 919.644 mo
604.638 924.928 600.356 929.211 595.072 929.211 cv
589.79 929.211 585.505 924.928 585.505 919.644 cv
585.505 914.361 589.79 910.078 595.072 910.078 cv
600.356 910.078 604.638 914.361 604.638 919.644 cv
cp
f
577.901 960.904 mo
577.901 966.184 573.616 970.471 568.334 970.471 cv
563.05 970.471 558.769 966.184 558.769 960.904 cv
558.769 955.619 563.05 951.338 568.334 951.338 cv
573.616 951.338 577.901 955.619 577.901 960.904 cv
cp
f
669.474 973.863 mo
669.474 979.146 665.188 983.43 659.908 983.43 cv
654.623 983.43 650.342 979.146 650.342 973.863 cv
650.342 968.582 654.623 964.297 659.908 964.297 cv
665.188 964.297 669.474 968.582 669.474 973.863 cv
cp
f
631.868 997.494 mo
631.868 1002.78 627.585 1007.06 622.301 1007.06 cv
617.021 1007.06 612.735 1002.78 612.735 997.494 cv
612.735 992.211 617.021 987.928 622.301 987.928 cv
627.585 987.928 631.868 992.211 631.868 997.494 cv
cp
f
518.93 970.471 mo
518.93 975.752 514.648 980.037 509.364 980.037 cv
504.083 980.037 499.797 975.752 499.797 970.471 cv
499.797 965.185 504.083 960.904 509.364 960.904 cv
514.648 960.904 518.93 965.185 518.93 970.471 cv
cp
f
486.585 1007.09 mo
486.585 1012.37 482.303 1016.66 477.018 1016.66 cv
471.738 1016.66 467.452 1012.37 467.452 1007.09 cv
467.452 1001.81 471.738 997.523 477.018 997.523 cv
482.303 997.523 486.585 1001.81 486.585 1007.09 cv
cp
f
433.969 970.471 mo
433.969 975.752 429.686 980.037 424.403 980.037 cv
419.122 980.037 414.837 975.752 414.837 970.471 cv
414.837 965.185 419.122 960.904 424.403 960.904 cv
429.686 960.904 433.969 965.185 433.969 970.471 cv
cp
f
391.387 929.211 mo
391.387 934.494 387.103 938.777 381.821 938.777 cv
376.539 938.777 372.256 934.494 372.256 929.211 cv
372.256 923.93 376.539 919.644 381.821 919.644 cv
387.103 919.644 391.387 923.93 391.387 929.211 cv
cp
f
369.813 964.297 mo
369.813 969.582 365.528 973.863 360.246 973.863 cv
354.961 973.863 350.68 969.582 350.68 964.297 cv
350.68 959.016 354.961 954.731 360.246 954.731 cv
365.528 954.731 369.813 959.016 369.813 964.297 cv
cp
f
346.331 935.615 mo
346.331 940.896 342.048 945.18 336.764 945.18 cv
331.481 945.18 327.198 940.896 327.198 935.615 cv
327.198 930.33 331.481 926.049 336.764 926.049 cv
342.048 926.049 346.331 930.33 346.331 935.615 cv
cp
f
269.128 988.563 mo
269.128 993.846 264.848 998.129 259.563 998.129 cv
254.281 998.129 249.997 993.846 249.997 988.563 cv
249.997 983.279 254.281 978.996 259.563 978.996 cv
264.848 978.996 269.128 983.279 269.128 988.563 cv
cp
f
259.563 944.979 mo
259.563 950.264 255.281 954.545 249.997 954.545 cv
244.716 954.545 240.431 950.264 240.431 944.979 cv
240.431 939.697 244.716 935.412 249.997 935.412 cv
255.281 935.412 259.563 939.697 259.563 944.979 cv
cp
f
415.465 1042.98 mo
415.465 1048.65 410.984 1053.24 405.46 1053.24 cv
399.933 1053.24 395.454 1048.65 395.454 1042.98 cv
395.454 1037.32 399.933 1032.72 405.46 1032.72 cv
410.984 1032.72 415.465 1037.32 415.465 1042.98 cv
cp
f
575.608 1103.1 mo
575.608 1108.77 571.127 1113.36 565.602 1113.36 cv
560.074 1113.36 555.598 1108.77 555.598 1103.1 cv
555.598 1097.43 560.074 1092.84 565.602 1092.84 cv
571.127 1092.84 575.608 1097.43 575.608 1103.1 cv
cp
f
605.077 1114.32 mo
605.077 1119.98 600.6 1124.58 595.072 1124.58 cv
589.547 1124.58 585.065 1119.98 585.065 1114.32 cv
585.065 1108.65 589.547 1104.06 595.072 1104.06 cv
600.6 1104.06 605.077 1108.65 605.077 1114.32 cv
cp
f
641.873 1087.11 mo
641.873 1092.77 637.396 1097.37 631.868 1097.37 cv
626.343 1097.37 621.863 1092.77 621.863 1087.11 cv
621.863 1081.44 626.343 1076.85 631.868 1076.85 cv
637.396 1076.85 641.873 1081.44 641.873 1087.11 cv
cp
f
488.313 893.188 mo
488.313 898.467 484.032 902.752 478.747 902.752 cv
473.466 902.752 469.181 898.467 469.181 893.188 cv
469.181 887.902 473.466 883.621 478.747 883.621 cv
484.032 883.621 488.313 887.902 488.313 893.188 cv
cp
f
299.496 983.43 mo
299.496 988.715 295.212 992.996 289.93 992.996 cv
284.646 992.996 280.364 988.715 280.364 983.43 cv
280.364 978.148 284.646 973.863 289.93 973.863 cv
295.212 973.863 299.496 978.148 299.496 983.43 cv
cp
f
262.257 814.316 mo
262.257 819.572 257.999 823.824 252.748 823.824 cv
247.494 823.824 243.239 819.572 243.239 814.316 cv
243.239 809.066 247.494 804.809 252.748 804.809 cv
257.999 804.809 262.257 809.066 262.257 814.316 cv
f
251.668 853.801 mo
251.668 859.055 247.412 863.31 242.159 863.31 cv
236.909 863.31 232.65 859.055 232.65 853.801 cv
232.65 848.549 236.909 844.293 242.159 844.293 cv
247.412 844.293 251.668 848.549 251.668 853.801 cv
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.1.0
%%For: (user) ()
%%Title: (plata_8.eps)
%%CreationDate: 5/12/2016 1:16 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Bj2NJdPcD85M%dm6#LUK5d#M9Ca0MDf[sTIHeVXn!bAZG/`#ginG`+pG=6%CC&uI?m?,?Nb^''(Tu\N8,@f'$]6Dk2]k4+l
%4C)n([@FRD9=A>53W>*4YQ)4]pK;@Jg:7EcfIHV6eRj$/h'uJfSW-[`ea>!O2L^mZ\X0-kqPBGR:p&>RJ*,>JV=HXS.;\lO>IAd"
%X4;*P]"&r%1!i)C`c!ofME8Q1$kJE-)[&4#G.TR?lC5iMJ%BM-M5fH`F.`0,VmT:/?0^!Ec-PuH/Sk[?og/8F,X5+<b;l'k2b-*p
%MUdngYMPO!F"%n'fq$H_MhTsS"X"h'(!o3(s3FUCPCM7_!mpsOZLRsmBZ#>YD^X`14;hdMYD=nQ5mXQ^kL7b;C1%P]!6?-U&hA3/
%D-YR`h(!>D?s.b>[j;!7q%&HYHbbH?jlARnVr_%V36js4R.hTsG8TL[=!=L=>lCEurGt!nXBMW'gM/eXmI!:-hm@5,GGlVWHhD.N
%9s`EIPm\EEb?hht<N:2Y:HR4/Q[!]`6M\A'j07#sX`fOE>P0&G@Q>5NUV,kLG"P!!?p%X&Z?oGc*k'qr<0qFY$&LF0Q8/$m%kI+s
%s$p"Igg&bsfK5$-df3hC_0Lgd&EjY<l#B%+f,jJDDS('qCG%\'X^E+RMIiEgCR(,o6RN\lJ%4flAGff9s%c@ZQD*'82DlehF0tJc
%i-d-Unc2$q2Cf`K#'QepJ$'I:2sETW>Gpc<oH3uMFj[ftZnUG%<JqdFRcsNRs7]-7MiRMr4o4\_]@FOGDP"67om_%:9'a!UHWr(G
%>A`*S8oFCu)uX812ok):GM"O5W=SiLJs.k<0'9A%OQ^L^F7LihjaZRq2bSKYZm7la%KsArr1dG6>o4Ri?BuZ,lD8*lS`:fT%X2Z;
%cn?\KVmK)><kIfVoh!AJ6-I-Y0[;r`=!/>E>r,HXgZqlN[eAQ?V.KrKV(sW@X^7oTcrmF$kaW]YgU6'8lag#1%aBZ8V0;UZ<r3m6
%?E'5g!M6.:KC`ieHoBWZK)R,<n!1IsUfaYA8gdb>q.I9EfKt.#l#EId.sBW!?(BHf\b1-LF-\n([H^?P,CWEX14S>VcnZg`h.jR4
%gD"sg7o]hI"-V<$2A82VdV@9&o]%cfU).FJ;BnbWabd_EkMXZ!nbc/L3"n(hr+I(ZlEsA3l.q$ZdE/AQld^V0SSg<KLc[$Vj@67K
%s%g`t.I^-8dOu\rjk[O3Oa$8/(#&>5DQ.WLs-6%,@II!,9p1LHK3kZa9b2KLE<2OfGApToW:D]Zb_*8qs+kcuWC*#<Y19\`,sNH`
%I7dD?$g[%cnonu>rq69Pc7:Z/q!V[o$p1B:rc-1Y/%N4*)YGHU\4!AgPgeWR1gD<E6G$MA`$q>/lBQP#aV[e@iAR[Dj@B-GqZCBX
%O)qa@h4;kT4J5H=Vu9/9Pj1DcF]PW8Sol^&CR,lj7PiDIM\Ah1TAZ@Ne0qtL&X.p5^G:o@f4:*7,6J6:`^`@RD.1=P^7M&4547bN
%AY?.9HX'Mc[Z:dgMmLioI6Dk`8d;;G[$Y^MP9psT^%O0@[EWabqR)Dcf<.Tkq05YChX[itjg`g>DRHP&HUN.F1HBtM0&iDe.;SVq
%]B*qpO(t!@BHiLqVIo.e>9bB`HI=j5LH&'FgA8%o73%?>on9`RSR+I;ae9;&$Cf6$CgT'_lQq#Qn2d7Obk^OhTAWGC2(q%.IA.fc
%j5M[N)qU5"\u<&1jLJip,t/gj5mOMu]3Kb6+bqUQP\GomIU:Y3l`aHViOJf[=g7"1r<+/WX!bHCR4C4IjNLl>8KqU*b"\$LkKR8B
%PBMe!q>.-mX`JQR\I:+ePkoD<3-OH-c$['i0/rLaB"m'EQb1)JS9M;e\P2'XM(c@!g]27F)\EbOc]P-3?N$X&5<(/n>(=gq='EGE
%qtJF:QUu<)3o*E5qF?O'Gr$>_-Mk793j/30do97^2*W\c3h9HR\UHP]PAN6k@(/`DM--0^&%[om2-%YpS$F&qM3hPNPESbLHc9]d
%ij6ABZq]X2YJV&D2.)biQ2GoN\_ki5B7A@:`!-t5fF2UI"">&:Ej&eaDuOn,C0$g,\8JgufEf\rhaX["l'?dU^9l"lkfZf#e*489
%9',>(\Wi'uqp8t2rBDJ.N3_3MN2?L]!e&Lml&osf)._$gHc*:WM2Vc8LWQOA7)lttOR_eEgDG:>>-ki)/]+pjl_\ZpFMj-E)lD'I
%q8p.^/2JubMIiY/a!Hdq0$>t`&g2g135<\I2E(_/j'o,A1gCdrl(c(aBF!\TbsI%Efed5:+m3@b+?q#g-XIaXg9p?OUY<tU;k>J@
%p^?]T@u<Elq4WA-Er:t6J'rH)cU<)WV5E9a[=)5t8ku4jPPq01bl.=5Z^=bgbc6%[P%3CF.N^kW/X%7,bf!j%*n:+[\[8WhC=Uqj
%e`sn*Ua'f(*L!&?E36`XWml>tG$#uLCND!`]\%EQIC#D@C6jF*^Z1JO.P:\-r:jjsAug?"L0"j@.&dMp6Y9eDil0PE&73-8$J)$$
%1)"!o-1BdseAGn0#WM"g4%$_nHHu7%DJB$K"$X\(YW)&\Hm[.-oWrFHYo'D2G(58#f%KG>7GC5cmQ]"V]hFFFa["(W.%Vl;T]!-P
%(A"nDX_o5%=aLp]Rf!5M)kf<R1U,F%8?30;r/A!$:JrE)nnI-ce8/1O#Ltkb=sQ`nC8f7akhFFF+oHW^L7=-)gD"FoMgD@-`M[BU
%Q7f%4jYTTZ?&$kf<-UIg\"Rh0J(f=#?;E9TRDgB#L_D?P-XK;SLoF+0NZ,e;K>1$uaVW.'&e^B[h_OT<Un<YuQ[>Y$]oNSaO6J[t
%)2PifjXDPpbB-MS'5^l%OQp>_-8*dHB#Ls#RRqfR]Q''s5roiN-%isA$Eb[m!.S6A2I"E7XB-m<H]?ks$2Zp/%-2Djj_%u=8sYft
%"D_7Q[&`ODA_<YJV1oLFB%`aYFb2LB8\<No,3p(_CeU/2")MQ=s'"HXTiD&uoHV7^+[_r-C1f@P"ERfneSEEE.Dt88EiEBbB8&.g
%PbO2gZR@\HND)*PnQ3un#!C,<'[8+)-Gi&!hkWl//At4TpgR9\1.h#h9Un!)BDk;L1bd*7H*^Zg7GC5[U6KRo/P6dfVFC/OGqDVm
%drJ&q;)0lVjO^-]#j#4'8[TsLLmcefb\C#S)qnn)M_\_Tc8>bR2mX8GP=1pc*HdQ\;6g`h/Je#df:lg0Mb-,R2mjEtI$8;BZ4JfD
%VuE=4dS+.F9r>W%$)oZ)]q"N2o.j<jc$!Rm*iGBsNVK?V)!;<FeGFrRm@tl?$$5_L7u4$>Iq=K3c!L5aqh&H=mc2JTq9$oTY5O;a
%$YFE2_\12Sg.\ZojP!SS[EUTqB'.gl1=rPYe<s:*8[\S8WAZQ`DNqCaPA2nQp-1.Zb`'or)"QFF[Nl`Vi'0rX:/q@7G)UnL(ko;+
%P[Ol1a(TXTqKU#hEdi`E4s>5:;[o@M4"b=8J*,3HHaUVgot>\9a3bal4AHeJ\#YM>V9^bfgZ'lnAu0fOCL7#!c+^KdMe]4qbk-XE
%JNGL4DU?!Pf?)"bUGS_oRt+"ClmtgiH^/2:<8G?V:c]D;$fu\trpEE-j#KOgHc<71[SQq2EqFi3oJc``/+c3sf3A\$T*OpC0>:,K
%Blp\ql1\P(FN7=PS*<<#;cCW,NL^$f1B-N/;,$nInk0/:Zt>FUSsW*9cfJ3fU=CF=FglR_SGEcXff0/OL8Ji<V*KcCht^ig,]bbl
%1q!BN"r],;.J;*HNR;jn5f7009RSb-P>+C[-#u1=*V,D[n\jb3;S1LCCK.oK<;]_[`h-0Z;l(^gdGp-D6:jp^,2t!EG%uncAiK[#
%q;5?SG;Ad)@sE6;dWg&'s./8$BDLFfrca\.*OS8@r9oXE'#s^J7q@,jCF,`%3Qq4nBOknqj!D%%mk!W`bPD.ER?PJ.WL]RO3n93j
%P;Hf+$]bb)(`0OWW7L::5HcH>?9:=9'#INa%rc-RE3R12XOO>7i?7/Rp3kS'ZPkTTnm;3HbhB./oqP<mm$i)kX,co`;G*?+RRP;\
%Yf84\2N*[q1Oa6Hh)c".9kp&3p@7!BQu!Nbqa^RKQ.'oag0>dOZ+<95X*33#q4lN@=1^!MC1X6l/i><,CX;!Qj*5Sl6Su,QVgi9:
%2]9,8'B`3sRS*U_21"*%4uV%@!B'#,__f=N#9n>!C5fPYV'qADNj<r-P3qWfmeK;Z9U87so</P-HSPbaL7=.h&7da&HF?$M'cV$G
%5%Eb22tf_Z`+Iu'M%1WlF"l1W+-S$NB7ZCPi+3[Kq%[Gc!\^mqbC?(_=l<jP!\Z%I,(UOFL#MgM/FYF2*p>0EnhYi`nJN-%Vp8pa
%!_<R=H(+"(dS7>OHfL]cpaI#-(2t+gA=Dr,-F,`F0RIVF12*'Ia!S+=0^4WmA1p??I'%X'+.DtYTCNh_XkqkaeLo*Tc'75k$ac=B
%S.$WRdZrieG_tZ4]one8S:$#G27df$!n5D?Ja"QUFnY[[m.I2pZ0D;44%0BeV+U("fgfdpg9(8]Y>3>[j\Lh,0_O&N1OLUVP2T'1
%N&30<b!O!WHD$=R^F&o(9YC"4SXaf%?(?Xm[?=B4:YV;pAK(RbI=T)=]/S1VR'`EpW?9<TH"].^6aL(ame%QG<m=Z*PTYuZj4R`S
%ErN.?16nO^]Q"OiAG[7#a^Ro&d?MdC6l)P@N&L)'=r_&Gf^]K0@g'+t`YA5*;]j&9DEo0d$OsF%`l*27drskdEK"$?A(#O4(<;f]
%0r?4Vn\=+XF\A,PY&:h#G1&".];>A)<\6tX\[8tl4d,6R6;mV$Y3$Tt`G@`Uq_cEj:3EUCrSFS5b?=an!W6rbQK;\SB!8I4N;5u@
%X4/Ke\;4n.%_B&cq6G6Y?\AE(LUDFTgA8%oG,-l]ZDQcPk:FR,FKn&WBIFOhNr>ZF//!F*36s"q-K&m8g"SWUDpR(nk/h.AS[;U\
%/E2`<`^`UTNuiFJ=mYk5po'RnQ'CCcoY$MH^>R>`4<*pn!^DIRp2R92H?#C+K!X')/tlkSf@Mdg#u_J:rOGR-ZTr5j(rjfMprZ"M
%PSALV+_AO6]s<_R/,#Ej<'k>U**mafs*lH&e@j-YS$mEjQ+(XK-pC"@c7BU3BUafK4HA%<X4j!;E^LaQk0*_T:X.+QRsB'2Df4^^
%c+LSq')i]\\I<*M:&!df@!S-)cg\<YPe(oR.%@bg1O!a!cHY.T!A\9Tgru>$3UWDeZeW)bj@kCl[q+@rLFsMX1RDu7>e5-]<op\o
%b+])Y\j(Df5$F&aiL)jM0`ER=))'?4a_0P/r`tB6qj=^6-)U0;M(oWeF+i.0o0C<?K$e]rjQ&DabK'9Rq0XJ9T[lQ2>jMAkc4o""
%FFVfH7&^pX\G.]:kLc]p*+bpY>)puG(iLm"dGK9uAesHte,qM5%`TpI3rI@b`m'Z`e,?tm%'P/ZmqZgJRf#>;/7-2$MfCK,T4aRp
%\_#Ae_3_<f+sqkn%E:hDjtCNkPY7Fg\3B8!;3di<Usj+OPfhOXAG)_D*8(:IN6L26SJo2+r<pJ$4Q%5jG\a6]Vgi7d%i`#g'9R/:
%EDlXWXjP=V%nn[t71ZGj0tbX"X3@JNNGX?>Ct[ph?TA]6!]s#^:T$(:iV_so_J]?qd:u]<flP&*-J78(PPkf7Fh#Q;@%E^/s+@3)
%:OOhk=4LGKRS]Om7FPZZc"s,(Hm/ef*_`t=1b2ConC[\8Bq:Y%SHZWTU%`MT)326F5T1GcAM?U!0?`\UdGR_W%@93fdmo$Pfed5:
%-0Jdf,h_4LPHP]om997c;9ea$JuR1Y2m!@r?L.$EC6uqOB$,+F"klX1:54ldl,k^g%?mq7J'oj8.EKV4-o9[=rOQte,KR3P%8NqN
%o4qmWo^'UOS]+QK`!q+3k@T-Br$FW^48[U`Zoq!&mGg?.CpQk3_aKIsFdM'TL8g9nG0X"c)td86\Xm"(1X#=:Lsp=K-=1CLV:M1f
%.[m5:9(6tpQWK`caVGOKb<!56:ON*:)fan#6W="S`_m#1I,Z6i=LngBAGj"edoa]Er@cu^*Tu[Zi^Y?pcLsptY2mTff_pL%3Un9o
%W<@1qiJi3oGe/e=IVs'NT%30YT08c<HeR8R%(?P@m1`:.6%.2bpA:%gH`P^=A,KibG.:a;cEb&\&Y4#a)%m`ZnCt&'a$/iE99ZJa
%Zb/Mf@cSjj=[(&4\XUlV:M4K%DDnh>^+`b5CN0Wl3-[sOY[)!e:9o7=@01`RVsEnd;3/gW4K$&V(9SU[,s;WaN7o:)Gq7D11Cr[;
%o'<Bqo%0+.rh:;.j@>="(:J)GBX:i55).!0+/#B1Xl^\t_GAZ4.JS5^[+7'`q:GY[]&;Hiq/*=lU]9cQLKS:WKhC[@RTj_)3bQ!i
%V.Su!g<T)o.l><4Ia#p;)l7koFt*i)TcUXGonW1s?MSEUcO]2[Gr6`hU455=J@%u3#7<)QiB3G:fae&^QGrl:r9p8MIk8>Lg>)kD
%#i;9HpnHI<ZcW6aTq)!Jr(nTBp6f%G'sS(;fn3JgU0^QUXP>H-UW]1s^\9$>p?=eehi@glb0_;^le:D7k.Sim,5`%-SejH[L[BhV
%n)Fr!p4Jb4n@^gU^4:*Cjja/Lpt'T`lPm\>Uuf_3b^K>(jXU;)+89bCB]KLpOK6=9`[3pj=<N7GldosV<3LJW<?Z8KR&PonMl5nF
%QA(0A[cIZ80D8kuo$gY%54)8RSSjo!a0^)air-WsT`%+Qli6\$UD@e9*PX2&Ia0u*\(lIDjdsp#XZs*jqn;Zeg4Z>q@uVLtF!!IP
%0<(WB9hlsB_`o4?BH4MHkj&1(L!ThlZ4YT^Mlh$'5or\(e>3>ZHh:,:^odBET1UD[Tl3I!I(Aqpj@"Lr\%;Bj7_)4;gc`6s9XoF+
%GH][[qP2R.XB]Nc&2J^Ef&oe?e*6nqe1Xgc*9SlR<,\&JX4KOZ`&#f>M\AD7ENP'.XBf2T9";eq#M&5mVBuD=-MfsK'`\!'>\T&N
%4j(2I2$B=&SW#*]4a'<iH(hJ?7s;-;grWrKcrodZ\uisTLqd<>U<B)?X?>]C3euBKotPKa%^%J#qJX^CAf^!Yae'6^hbtZ>47ueQ
%k(n$3+cl6RI^N.iK&gb*(?Sa:?Pf:Hi\GprQm\#FCO#cQ>u0([L!VUOK[@&iBs4\A;!/_oQk5]WeuZ>a=4)*ElB5GX;a'C5[VMem
%a&dOA_i6"_KOEI]+_CWco46JbUtR/)*fXpD<$C;e+.,b"+&D$B77Ba&nXP0d07ML<eS59#pt"Za;R7ligNG3+`/r*j]?'B(R]!jI
%Bf3BO]'*F5rZ"%iY,2#o>h&<Ob>Y'SX56TAOsAO+Fj:5#V0YiX!&r7<^*lu2KBKR^dH[U9(:J:<?FQ3S06OkVG4"2;_1%e']cajh
%Vc>BmX#VpBfeZ[]^>h4NZ4:lWeF"Be9'o62?[0mWK\sD=kOU$GriKKcGM6p\94d&$\Vnm)[@QX5)SLH#YF<T[TQH=6^F6L0ELo4k
%<=&Q\eH)6_StJCUI,FTMVo$`ePK:\MW2K#t_S=^*c;,V``$C:A[f\R0'3reZ)l;[=V9VBa)B#$Nf<0:sm6@V]_s1Ubgh*D6/KNI.
%[I0*LP;eBp[qM8BeL'Z$pX@A)_2dSI@GWZ<S[3tMH#%Ku<FW>,Z-.P)G'i$QifpN=pt-Xr/d>(Qn`)h"3:gcis897\3\JtWWu&Hq
%-gfVm-7a;'&:1#dXS#)kI=^<nB37cn%GFLmdN@"[QZe<W.e+86Tn?g_.G&>O[)MN@ruu>?V.k&VKE`2`/O-],Fg$I(bO&:/W7J0:
%SW7*keu\!ph0/*HeYtp5I(th-W7IT+]#4S*I'pXnm-r>r'lno<djg^L@#@-a'B9Y\-\g3(g^`mUhL';1]Wf*"X4K5p]re`J:%[`W
%1'<0Q;R9TNdAiEl):tWV7ppQpSYH9"VfM+5<Cs\J9%[p?-?MPc>Pk2lPiU4([)_<9h92&+3h&3ZS9T<dbdE(o.3_<[G=mA7a>u?8
%Ce@"KjVTXDkLK6'q)jeOG'_pP1`F-[)U]u[`g]_G]0\S[XXDj`EkqWgUXlO52X<TUo-R+F+:\$$[o>tL>rj-sC%-],:e3V1SXe4/
%8skM".C\#rC1RN8k8q?PFo-[?-Y\>GBL0bjmGd#'q6m9CR]TOOjD%CQb,WlXkkt(Y>,h05L.(o$h^<00*3&=@`2g`Id.(N<!n]Y9
%g85GA*]G3D2O%V&mh76>\@_$.*;#'olS>ibo^mgNEI<9]@f51hOb)hH1=.)Xh&V`\""Iu*n),Q/#2%P0N:_D7dTAlXUY"WhN_:gH
%R(>*b^U9*n>-F-0F#muW%cWZ:LOjUX<gsdh]2NQdbsDA%&#+6mCDY$u-0Nn<nZJ,Aoq?dO6:AA:6-46iC?gfBRPIWWI\+$/\!nbI
%S=q3_GAdU#g/d)S#$+2W<*]thicX"&fiB*E\r@?hL48//1#Yk)Mpo[k^/8X;G?Q@AH#\fKe]8=$1%`U"rhric8+1T#,hc?NFV;f,
%PY6th?Z9A;QbbY&UPA&UlhQG1`N,B1iTP`AY4)j$m0_X,8qYW5]pX9a(R8c_Q,H4N3GM2?0%p[$WeDcF26PM[Z(H50DBY^BTt&1M
%o5SjiAm[fD1eSB\X[,H2?RJK7A*3/O#8cH=lb]$gFU`NKR)RSh(ApAAS0K)M_ck/&s2Yr0AF$TU@5bK2Nc6HD(ijTo0#tPPmA.(S
%\fcK.GCt-->ek%>Z!JZW/(ID^ZoQ:l*@We*<A<^\4rL\L;QF0&.RX\h6qgl:h#$hUR,iQTham.qb>??`->e)GOc$4'!,>t7OcCo`
%?\R:<jBM!i)/?!s+)rRg$0h>n<r:bVk34!,gMJ/tcJa=Mo2g"+6IL]ugU\)Y04H9A?&SKu23`:,(\R?[.tj01Q(+<pH'sc*[<cRS
%>tu\_=M8g=@6#%]<<TPGWj7+qV,.A"#=Vm!1,,J[n2:cr'tD3Ph-)a#6@$Vd<"5&(LCH!]MltFCf--F6Xc)La?u+<64Lu$+D%uAC
%4"d&Zj&3L1eHY`:&uM\>*kQ49FWIceC,4F8`_8-qV_cGFCsHS@3BCkto9K/0dSGrWg*a#]d*WtBVg"Z$8U&[%FbnheJBoX.iu1VB
%X)XTYdh8Ab=(B(-,s/PV%1`K%<)<+ShWd#q.jY=YQ?.`33@g4.;nZqRJ5tt\VUM@:V0b&)^B(]\PjJG9,2XKC91/IVB^HtdhY&Tg
%4WQl&"Au-g,9f"&hbliKj^!L2$Ld7W&MYg/qoP14[P#^(8K>b6>daNh;<_YMLC?#P`W@;:\s#Ei0\T+%=h]br"A)$$3l;Pd+l#u%
%RH.\W5eGTs-oXgMC@4gq+J4!^4jIoOaRuatI\/]H\%DD3I-qO.1-_m,G+E@GNA;mg#p*0MGnlZc:D3:P2h#"GJ>JX8mTJQ=ot0f!
%NGglMAq\-!j)'.N^T-t?CAXfq])KF+-]j/3drq\lX"ROh<`Gr)n<b*!7CUu:\=h37<h0+*C1S?$,USU]W8U2`7ae=t)#l2WT6hi=
%oJU"lKUDYD?*F!)e$n&A^Z3P!;Db%XYIJ_^_#h7"QQd?e1E%@]MA09E2Ph&T7BMurQ:FPGh<][a?F@C68n9"JMrnD3\7R-Oc@"!*
%i>dR>!<#Wib5?KD@+&B8^PY#m)YqE)$\0WO*SJ?:?K8OuWn"Kc\W2o6<7Mo1G0'lj97'o)d[ij3?BU"`fN79Vl+1jYA:q9"k-imA
%f91h)BgV'XjQX+TG,mo!iQkR%Hm^f$7WYIK;Va;-n`m]qOD[mrG.KR$VQU;(NG-^0dFI8JP*-TUdcVf\iZmZ@3,I1b=R^NH1r:2G
%1?^&<>Kp2pN4'<q.3,hr\:ub#frrdnclZt?APLeUK[(Vu6M.mCm>]B$l8U2X)g*2k>?[eucR;@JWbKI@lqan+G(l/MmA-'3`1K+@
%qq!eKQ`ZLp$>]J%N&#KF0@g\qH.T95q2D1T]k!J4PX&\3'Zerj/p2A15H=+rhcchn`0Is'd")ib6tqsH71Qu`h%Kl@UPr(&gW_M<
%k<VCtJJUhSm4[GuC\$4]X&<8t!F>PCHa/$*,2s58f?^[fG_Fc96`q=fA_P>(@oaYn3\^0A6'prR;VP%4QS3/QNcoQ[*pYMFb/n&h
%O:cPRE?/X`k^"-S\nXZtKNSLa+fs8-b+2)Q#&Q-k5&Y5e5IKo>4<phf,:b<8IR['Y>&qQ6\4YGrrHVF\k"mQnVmt7#_'5K6G1nRg
%6-PTTpegH?dl9pm>!>Hr+ZcM#G,/DNa$3b@g]a,,3F]NKj?&?QBh5/"V-5ZVCJ)4/@>ll%B],\=-IJIO[a7m^R]CFr5Ufbf8\6&m
%PG:8b#pHD+_0p*fn92.ZWIhK5)-MqhI+4oo[nb?XeN16Io,MtKo9ZLjD$6-Y[>X@Fh0iLp>r0S?-i&j4a3!=nKlgo(Z#:QHf-X,e
%ck!==X!Xj''Z9XpU")Gu0$>us)UDfN:#Vh+dY1ZXeZ)]jVLG8VCin1l.N/"[ZKr3@fVdHEr?kRLpbib?;nKC%2=8O%%Q:c),JQe;
%CkZflht<T-hYX[aqX2c0Q.#QKkO-%>V=h7ie&L)3C%KpIX]p^)pGZi`I-48ok1O?cH[5#'e&O,T-d+Tdhg`2fmZk\l:$6)0fCll3
%QIRF5/"S@sGLfg/j<(J*/m`YN3\R"Y1sF[rcE4OpHJVplIJ.u"D:P[.Ct'Lh/f4-Tqklekm8Q9rJ73H`mW/*mBt*m)o=F[9BsH#u
%m;r]i#Ml_?a2.0"<mePNDZ*f<r];$qG[`g#*nf;=0Kog#^AdbOiG^%Ap@;'T]]IITX63]Zf9SMo`^4\8DJs=YC#t#&iUtq$8m>4V
%q>;jMYHQL60;#><FZ7U_O*9E<I(`T4gH4<E<hJ/s-QUU13u_O%^U34.Hf'b9Q0hfA9@:41KnH5V9prrs;Pcn$`8B\mb*uuBp"[QT
%GI4YZ\Ei!U=F[aRF^].IrgU$LC@B"!\'JubXd%#*F8T$BfK@hIPG)jZ@4?$EmX/<CI<f.%YMXbKJ#U-NH`sYpE:5joQsX'CIcf'4
%_91NYCP?BrIUh?abE[ikj7c'O0RVM5E=;1)[_6XoCaWMSMpFJ'C$!5/eaT,F<L.D>%nj:Op<,sI98h?nHFVQ<)F!NC?/+"<^&;hi
%1%t.!6?2m$E;OXbdJC/QqR5s/ff?eFRJVEf]LsM5%NaEF[X8G="g=CtWlOGgo>-T!d'o8\bPlndAas2Cp"n9%Ko^'Z'B"X!g^Bn(
%0\5c4gE-B)iUPL!qJ5c[jpT#_=PWg(]f@1)D;sLJf#$IfRu:&3alt&#dCVoL/!Y%V^@6"e1T(.pf6odj@BDaiVXQU:Jj&jA+';O(
%@K*D%iXmh&M>el/n1j]=/fYYA/JLu%^A,EF.c%kG*ZVq?*Uhg4s/*$4Z+a:%3N.@5qu1m:P_N?84rbWcJpn+X+#f8IKt$C)qnhc%
%n_:[NNS:l"iQ=aPmci<BaTJ$`nF>*agon*5!Mb;9N>I<)SHggVMY!)LZ9!<6jTpA?\ek1o$W#WF^'dMnK;c/cEnL>mE;7*#)^]H1
%EK-71S+44@96YMD-YR]+Y<HcOXP>s]^90XK>$JbF\]b;Z?WX^o`$5d.(Y2g\QbiXc?X.Ynok"L,4?;a"Gb%*Z\Q$n!Sed?XgWVUW
%$Pt=#\)pFlj9sQ(iC@P[cBhP!8cOYN^&>IP20\LuIcE!35Mo_ua`"$R9'>,"MhTElAd+.)7]3;,O,1D2^N"S.fa1a&DtXRt8*A^d
%53tG5^[:@b\#5]gMoY@dD2HT>0/dL2_Vr\\!XY@:EH-Ei_tg8,19,p"oL!jiLM,)@S>Y5e@J8sRD9_P"=14"c7q^fNe$"!4,:/?5
%.\CNo(B&28=PA2HZ6sQTHb7@o(*A"=Gd.1L>A:1jRr;Mb_mB)]W/h`&8I$'$Mlg(+f"IpL;do^elom<(HuD/MfJum)F1um>s&hVY
%D4QMSgjK"uR?m%n_Mc`qmag+VU\BlE?]2t]ft5+j]B)dPhS$f*iMV"oXhM0bdOiuW(a_[b4h"JDcfZoq>H:Qe3CD;Ggj`-UQ\BO>
%+hDOV\@4Kmkkhtko*kO(L7[^cV_l6T_%8s*F^\jnF$fH0I+r#;HhC0gK<NT[e?<lNle:X1NBEn^I7s-=kMEfKZ$0/,kT,!6YD`mX
%7ZbVn]=`Me[`gk4%mR-Zg"g=riJZ-$lZr6RRe:-mYt=tpXBR@E8jWH&ro$^JJ%^>*YgSsHZVT2`"bna/9<.*3\^M#Dnf.Nb+7DcG
%eQe.X*D(/c>D2`]TDn[f'GQ7KTnZ,c#V<;,*i;dSm),3>dc1(JV5U79F2I:R(RbI;,F!58R+D33J\Y6'9G\4lk(B_!9R:[-SQ3'Y
%e=TS/l&!gcH$=ItYhhL9s*Q;`X3'DJI9G#,\bb#^"Bj06pL!/k^(f#7`A%8&20sb%Fu'>G+s"\6oi/+29i^/%HE<I5Daad^rMM=Y
%ZO_d3T#>3iAD%`q62o;<WaGZ&$/XUR\V*,Ki/Nf,G"fJFIMlHFrdfhB[9c0P08<dFK5)Ni>ZYMKK5.fKl(SV":6!bR8K[o[0i"b\
%r984YW9@#HIK*Ep9tFp7>:[mP/d7j_A(6W<-POaD%STpbZ+d3N!Q*/8pU*]4X8ZF]1H6u>rNq]Wa4$$_`JhG]MI9RD51:?s51nD8
%0hEKUBYFFm^J4KrE;9,qF)1/looT*%'?ATEEM5tXo5nX2lcTg^>IP[7U"6=1nT(EWJ>G><cP4^WhVEX%\l&?F['j+$s*dacRpfh%
%h7_"f*Rbd,GfT4^]X<3LLSn<<?(-6e2W<Ndr9pW5lgr/ugM:`rcc$i9^&=#2(GEM+Rj>*X<=A]KipPO:QhE.mg\P*kmN6%l?&RfG
%<rH]Sl0DAcnCNH1c$pp-p$K_1H1CC_HEcTa)6TgLIXG>#51k7KRTsYo4n$ASg*l:RpLr1JmS(fUr)YknEIFm1,%fS+#Oafj[a]Wu
%ErYk8-3aR0CjH'@J)\+On6FUrq@B-`%%`A8#89R4!cd4%pNahec;P6#Wor-_e3:OUH`kSipWqIE_G-@HmHV\O*pdf\O6bKf`>@jV
%I2ZPnGl@<hV[)Okmsa]1WGF_IC54%"b&gXNq]?%ro#:!7@4>JB3$)0a[0;9HZg_g[kHM2fjor"Q*E1qEF=*@M*3uB$KA]%9%\BiT
%K@<W_)pg:<HS@S4l>H.Vq;!NkZe)5`J!B3$`U;35hi?`A@E!TDhs\i:50W;?-#B.g%dIg;eGSsN?/C(:l`@e1'e=M%n3N>jleK*!
%38f0H^V+X\qlOFun^3J2J^8Tc3"IIBIf=A=*0n2N00(H(n/K*CT0&*OV*?4fD_5$/FUMFH][)cOf!e[=J'TLUKNheI5IeD7g$I[B
%3d9UR,lG&pkM`<e/FP].J%`>"kKJEh]M_\qICNL+rT`;m>]Te\]5OiUk12[G4RX<Z=Z[GqqU<`-[664N5+VkOs3j?a0F;B0XgQnr
%DnP1un"0"S/(ToLYAaJ#XHRm=gZX%Z@f=ukf3>`N`Aa>lIJ`Nu9-IVeZ'>0*k^Ce/$KA1)0!;U3Hi@jI_>L#tU?`g[5`:mSWN6!"
%XeY\rB;!d\><Vu6>^Q3kiSO.Y_Ej0g@Jl,<h2p/SToNbY`TQUn?PTIJo?FD^a+BbMjM'KV*FgHFggcVj0q7K(ZCAi_Y<KtG9Q5s4
%>ATjHe2k!f_[fD4aJdbh^+muGL1l+bn*=2Rbk3]6mACmVlAW#b8%2ej$I""PlP<fSYUd#GO']K!'J#/f;7#39Drf2.Z&0LHDMrO=
%C>F3+Q[jWTgYP*aQ`FK^<Rju1gO$G:cgTW<ks:MM&K4-YI.\i_]Qs/2mO+J&l)hA^lX/ce'm>m^+3EI!c<XV4GT/^-FS#:da'-5h
%_t*[<]D,!Pn!q7F$K&P039\uWJf:f'S(5b:]>mEPZ)g4aSBPo;(TcL%hH]uI7,baKliT,ZH[BW&ad[Xrm7-Kl])VJP^@;!8hJ$Eu
%E+'.;k3g^EiVL)jBq#<c.%!L8MqakI*l%j1B,$NZWs>Ds+!'4MF0Ke/qqd+f#qahV4h@t%Hp0JRa!OS3"k^II]mEME&c]:[Ep)@s
%`2F`Vec!eU_Lpdbe9BQKMkfquCN&Z`]?/D][*>MXK'po"SAKFK0Yc-3g\k@-p8=ghWfKR0Ea8A#\!*$;gATVVajsZIC_]/sHSC>e
%5!4=GL0=?-qXjYb=Do:7YKAB-""5\M0D"?HG?]N=\l.9fCjiZ^9_rqk^u,"d[*a;@+*cZU@5Ghp[l^Bi?Cm"!o-AS\FQ:okgF!(3
%U2h@C>G'!4rk;/i^%U89)c]s?SlYV,?E<2cabYAddm8Bo"HU"*5?f_jGPorU<ZCkrp9!>r_:R7-mC,/@n[Gu3BKk9jNFF0i)t;^%
%X*bMo4F(TVG*b-pXKAR2QtEmtgZmQtHR\AK6E_-@c]qSNPPFI]c&^EC]n%Jh^U<MPOtH1b6_SY2qZ)Q*cSC=l`W,j!SN]d6agT#8
%NunPn-n^A&$_)p*0]$Ghnu-g(\cX61;FA_'g$Po$_WTCMNO@76B6PEMgP,F]H!rO%iPE"2[ti_7Xjpn4Qk%7"gV9jB^T3s/72P>9
%%V:Y;B%*/t_#$R5[!.h$<jD]$HWbc#J([qK*'ScTIImEtb(jN:>`tPF*JF2p'9@OQ\+]OVY\/(W3-a:1k4^B!CWioqSK!kVrT>m0
%D6(4@;E)_.rEaH)MHFeY54%$Uqt5_WeLt;&E`YDF7@ro?MU0"Y3lT(uXj,Dl4*TQn7t16IhUm8C%l;Jrhaj</Iq/Xr`L\<JkM7F'
%mdOZTjKMAXTQS[:NoG6Fo@Kma[r/l]CZ#->/Y9?'q%7unP9)lX7rmhlf#GfF2a'Xa^Oa?8,((o<f@HMeheJJ;T:Zjj5/(5I]-@e2
%Ea+"iZ'4glZ8K*sGm=THG=[Yd`Tl_)3"ioYe433\7.,]<q8dKX]H^qNl*nO4^$_%BroAHDp$p"<o2'2fM#OD:1`"O)/:J!K^[X2i
%rmH_V&/k1t@2Op#qIRi1*3#`_gY-@ZQMi->]p,-2Z!R/4iPE\hg4p2cKi[/CmZM!loj:+RoeAs+Q$'\9Eks'XH?emZVBaj9rG$7'
%3rhk-hWiO/5&:uckK2:j@]cibB)+gK0<RIMpo]_q>;5[NiMNLpf'8cSe0`5QUZW_k)[f&Kkjs*`>e@nFL.[7+a@q6tH4V+ob=a4`
%m=\Lr<q5b6]X;(L?[Nm`o*nGN<;H(HZ*eo8[-q"]Jc&?CQ`A,@gd\Ti.dXWf]#DYEmhK\)SbJ:]pZWV<k2'_G\)9&f3k*gIS'h5A
%5mucNZi(nfVcQV3p[4/fs"-c9U_-YD99S2%H/<KKF+p<mnnrMWp\k5riKpCAn/f??oD%;T%DA#K2)Gc+N;d^3[D"M:)X)ge*F+$n
%EL+@X]\8=ZZ@Z5(h"_ebJeFdk<'?[s4oYO(bc?N,gWQY?f%!l,8+hW<$-]'V(;<#h/4<8q>pRjb[cX/7^"opM1cd/;ja.H2H@Ock
%qXO:aS!P\"T9QDTU9dpWN\=-:%Dh&uj6P,L1'1\2b"8ej*YcPp#K;HfM^6?eS:`61G<7u2A,K_MC[I@RrLe@:\Xnc_p5F8Ci$H#]
%*d["2Og=hhE3QiAHZT%Vff'?2k[qC"gJK+tb5VZE0c4:RdSJ-Q\p%J["E31FIN*u:2P+cUIB*2L([SW=e^s5UienVR^En0g_.Kq#
%[S$9Pf2b)M+cA1)]jNjYhod;;5G"&W5.N*.fDToA,.[>pXY^"V\)N>//ogpYonu\q<>P]&I1-XIH;0([%W62I.\?LQDl\f0heU'g
%mgh=u9mZ;WCNZ\ZQnje(M3u`N8]e?"ni?F3/Nd2EIk,Oo!mTft7X.aDXhn&P\FX8\NJK2g.cnQZVt=A8]tS#!5(3J$I?XB%]:R%B
%"Qe1#j5/A=cb2,6E85*hBrSXfkj`8P)fG3/"_:+u*\P.$h1%4^BHEdh&inRqjVOi2>1';'kj.spfsP15["][jP)+J@97Ks3p9&B0
%-9Otg00Wb?[R7tlhXuR_Z-m":Oj:PB3X'<leV+T+jn2fl^Ns"0:jZ;N?2X2$]auc5UVD.5:rB1hZ'-eEID%qho\1W1CV=!*IIR_k
%f@(74$)_]:YC@d&;>mk"HIqut(\cnN\%>k6EN?PDjo*jOP!)G[7c8b*hX#^fVM*4>f'erK^,=eRBl0/gH%5eSr-U)4DSKLcLOCk8
%rL.PRQWs3@X7(Gk>l##&Y']Wm-%cA9?PZEFLW.Pki;8G\P=O\"c]Rt0CA/7+o^^oPcHYnMq4ls4g5"De]-SK&qbK8OEEOCOl]&6Y
%b#35k^@?*V%'Z8R^Ydn:Ha+W#DtZ@I[YuNrMkC<3N2XQ_of%pB2uQ]Lp'ps4`l,1j8%Ngsj^ZNn(\XY1X3r)^=l(]XrO,gA5.S)1
%ol]]/K1#0UnbK:#/"N@$r92>Hp?o9c@/9bjA"oj3V//Y23$gMT>6keXrgTetIQ-<b_=I!>RAuSNph4+-j[)Y=DdedRdU?dpr:h.P
%p#b,MSbUIlV`XG54*]11[qCN]kJ%]@ccTP;o)ClP=)tRk_$`96?*;rKjGNjXV_6bg96Glrapsl^3tGcPs&bK<Pu7KCQWD4#+Wi>V
%[fgX=i@;0l&Z,#rhB$o<l_;m&mP+[37s8Xlo6R=(0=Q7!mBOBH\D99niN"Jq>W+\mrDA!rX*8=qokIq!'r'[7NUQ?FI%o^T54Sbi
%ragI*L2Slh=++oX&Kq!1N,uE@jnOHo3?QV=j+%$b*+S0uq:n`/=+VbUl?VbUgI59`_*0&Z+k8UtoJanhAXMZn50Lk$++!r7-;h;"
%?TS%OYOVP7f8K.\Z+PJ>!35t-,@:]0;89#Y,sS%"li2;2qS*7uT'li[>/V[r-]CE?KGU7^,-+D^,9I(akkXL"6agRHq7r&^geqO6
%Grot^$r5_/n&JH3Ya`,K&]),mkB[/:<^$eGEe7G>2e8#@&)GUWQ-n:mnucj,!'C"tEm^?PM'A:5%.^[L+HI9h_Uu;f[rCe(\#-FW
%WU8lNaH9nI$qR$Fn(WkkNoTsW?pWZ@!];m\gkku3>.Yrf`H&&-kdZ0Pj>bS8M"!1'j_355>I*jLBSCG6*8'rW6CHJN^X`'h9#<\Z
%-77#.TjqT"3,`<BL'"u%2*tIs,+XS_U=]Xnc[1\RYEO1d!7YD]gdj"/d;DHL+CNNnrWu';(:oM_p\c3GR.&(H%-(Kn?DB2mH#>0s
%P-KH"SQEo+lp)?=MOd:G`&4QsPBT,1LAnK8nJ)l8Sn`+F5%ZuPpclC)&)IT@gTo,HG5<?o(P[Qim"`O"[aiF=1a&?#cX:6I,YEKZ
%WLo1Kd)h&d(n#4,LB/!#gEn#+@%_*'#Pjb,aN(PuRuH](Zlr0UR>gK&1a"-pccCRrdpJ-Wa*pFgjSF:PS.P[8q:H3f)THb%p_]bf
%\/8fHYohC#F?PhIrQr_X^,*jM!5!gNQu%`4?4_l=)e0T6%_Mg#`glf0)iT_%Z@";^)&Y-cZNh?#NuX<HDBC+p:>/Pe,:A`U;F[NH
%[N[8oDri#/>XPbTXTDP=$g9F$NfY"'q$5+i^5/!^$0)kuH63%H,b2rmR@l_qJ*[Kj\eam"%7JBoS[3]d%"+*>YAW]P4H(AEBX#u%
%dscrQ$g=e@G%E]8SU]S:Gre<4_T&s/TeuN!&@6I$@q&4<E_&LW7aV*,fU+"g%[BiED[0.V`fV":`Ge1;*S$Mf^IRl*AT^QQ5S+PZ
%U_E,V#oa+Mj9aJJi^g>UAP;@)p07X;OmC+3A3.X8(GhQPP[#_:En_$c<u/l;A$t.,YQ2K@*#m/B5nGb>4ro5WC#oo,.N97MMDGGb
%s.sO*>_E('E)=*:QH*#O\q%RA'5\MW=B,A*1bh'-qH9jRRSE]3ZkAGP2D5HGTlgiuQTX+OBXkj=6mT&T,o@Y]3/WlQG%$:?fLg6*
%<f]LP*9AD(<9N'=pG,nd-dnO1L?EPlL[5iQ6mo+>a(n;"P=4Tr6\PIh7b0DZ[Wai0aU*bYO28ae&IU9DTkd/MC.G!#ag)7UkKnT$
%ce$=1KWjJk6)6KB-k]L?g4LM'qs9]ZN7QPND'@@%m3pp^.q0)UIsFoTb&YKFT791e@Qsfo@Q.1j3j,UX/MW%"dMJY`+c@d14u$t9
%jA:pW7JX,uA5A=+5k95sI2e%Y!uO6qJJ65+h-i""&@(WfJ0Tk/(eht(El9j\WC#cj!:3-,<1-#-+<Pj8:.nnYJ!#=&"@Fr,6;o,K
%8dUZ+7iY,_fafE@a9Q6Gc'm4S=Fgljg)q"t4'IP(Ut>mf&V4d'P<?-QQXUb5\W\9da^fam2M>jNW,Xl$C-0N`#U;f]GRAF!WJS$)
%6gt.o,5kGS(UOVkLQ;fL4L28K'V:CZ>>L'X\-PJ6XAP.%BH,r]&I=+Zi(I:1CD]W\"LT%#',"dfJuhEa7iqu)'d033L(E<4h>(lp
%!UPX<!lg1H*ZI!j]-OUqA"GYR"d#s^'fE=@!g\Nf<fM]5-5AlUp4GN4)&YnYX'O8b#K+Xk_a/5QM,Y0AZ:S1%bXHX96Q3TZm)Po_
%?/;ubS0d/kAI%ZP2'%Os7L3h)m\i9jU56A;j6uXNJn`h-7.QFZ6sA)MV\)$]Hc/b7903P!)A/T0MYGS@7Ei^i[PRcimJIT<el,`c
%g_AaP_kNad#R.N5[+8c[kEo;<5;Ru[JFR+&/B<n(0k(0@n_>N&AF%?U#/_+qQI?JG,7k6L1M9oei\A>ZO$Yj-Ja4^c_mZh$JDi<,
%U2bR*0mk5k=Njr/nMGJ14(K?==QlgM\:1*0^&bNhU$Uk#mQ`Cd.77!oCn-7.__qlX=pVBhKJ?c?W;U,0T3Mmsf;HTpA'OWpQk#jG
%021i5^-gO294Y<4/ZYRr$a7``ViC@+S-K00#j.%^/S55lBZ,sWmA#d7"`&X)1nm8mU8)gn(D&$UW;T7)GCYfUS6?@3:(;j9fQ'@s
%Ome7k,R%=[o3PXmUF,#:F\GUDAY:BGK-C@V@P76r9C+Vma16>gI2cWg5Hl"l;GP8*C^W_Aa'OiPW]bme`#ptL=bb=$O((0^ouu:\
%:-U]J$sDN([u36(6?:'P'Gu6[?9a[E@'S+8,A7[Z?iW`D_BKXf$^8pQBW-+fZGa.e#0%:-g?IY(&1UN=4+d?YN?k4bB'0e2(H\5^
%-noA*F,qRlT6'.W&B53rL^mXYj]D`ldI*er(:J%H7G.L%0ELD?@88#j=.tR<L:5pVTht.XJK\K)!Kt:]MPU>Ko%877-LicsL;a_U
%ARu;>IM%rH>f[C7;%qWc03q$Wqg656s4RHKTNj;a/j?rC7R,O'Y0P;mR$9\^+N)8?E<I&1^2h[hBH)KS@,90BMWD*o*N13;Z"li`
%7k@hu7;Rh_(AMe4VTA"C8_Q[p\@9g/Ca7neE*Jc$lK#H0SQFRN'8aWp1C7bnb/tkQ2Mn-8!Fs_cD#c[22#!MB$Ou*PR&qPn=AE8)
%81V=*4<lA`eGb;N_;olZA];/A'rINr87pX*#a:P6BJ<]Rf[U??:Lcb=dK8"SZnh]Z2%([;5dU/([W4ol.ppX<F"`4n69'ML1Jq)*
%8@ojNP)Wi0Hj(:GLeBdcD8[\:#4%Vk1_7W*AtjNGfT!].NIt3l_s#+CR!2+e$@NMRA-#Yc*,n;t)+NU^8aR'i(0^Uf9C9=0agT55
%qcR$]39D7oisq;4(YasDSUG<+1M@dCbD$:\nc"?W#:rCI56I/Mg-`&qMG#eT4Nqtc5QpQZ!+ZV05qM"5`pUGA:kO9;PHj-Zqe-An
%Nt@`\WX>R_[RaAP\]is,eg.0rOAFS;SaA]<7%Wk)f>G<<fl]%[4*P58;hmQ+%>Z'Ng<=UYnYumhS)geiFcf@+1$g&m)08V!PaO,N
%q3(qR=d_g3bO"VZ'VM$CDAG7bGB0Hlh]4"FI'IO]qCF!gNE?3SER.9EX!C)(ci`DXd?d\K9?C$B)E/@c3O!(G)-W>87I_`+$_gJ&
%X:HU0Xg)ga=s5BF=<bC>3_1=E^46:uLH/p&aT`soa)PAek(kQZm4/VU'r%)bfH<9F"ls`l"s>hJ[AW1A&1q.`TNsY?[cDfaE\*'I
%1S0s0H%VX_98j5`@<#fnY`X_h2A?[R0]#:\Ujul5l@_U8*B"b)5`>f`.W&6-FRhC9>BUS_QH(OE.amAUVY(GKM/\\Fb0aY2gr+$O
%#,0U##A=ZbZi!Y>+kbl`/7ot;CuNEPPdFI,K;[^L4H@a=-rL401d+8"5;-O1fT@#,`NP)SnL`i'ikRft&=DScnZgOR`lU\H@7Ql$
%dI]Wp3u%=Ii_#gRRL(>,?hnRF>`gf6`Qk;IaTiAC0+Rhn5F;N^e:f9IKa_Wf1jK'p7pgAPmik0%Sba$og;EZ-Crd'.NW]q.hpK0P
%_cth"AY1"R';o^C'PX2rQ+Wj6]^.%r7HL99RdQ,@l@8N3E+D?<9-BJ:g^QuVjh$[mF$e&GkngQ3T@;A,CIq3fei"4&TU/)`E>+9G
%E$Q/'A'pVc*BPi-B;CWT6`a7B92o;_`ZWg54f:hk@09oh;\9r*-&H+Xn\52HOj$KcMlrhMg5u_NmmnuroO/gU]U!@:nP[5j*mI]J
%pqH2H0!QsuZdW^$1O?&#l-1IcV-#s4O:@H*-e;A"'p(I(K.f4sH4ci#[ED?$9k4_,QkXD-&/Br(?VE.l-57A80o_1FU1Sg3kHOK-
%/#NUQ*1&6[h[LiaP'Fg<^iZH96<GGj+V)Kl3'_aY&13U$'H"\78n2<bDib:fc"'%uZ^S.N6HHYHB/OCuOLESP<\]YAe"+lZrQf@.
%>B3V%A#TMN4"WV#[8..'Kk&S._D>#sNrnnRP&uD5Q'64p"%INt%Xk-\W+\Cr#)2=T\Y_o%[q^!o9?_(0D]>W#`;RdElS/G5NL`D"
%=f2.oe-m#icRLndF.:Er07^IkE9)u\/Y6N?-"P1*0L(d%Zj@p-?S\kje3d3k60LMsc3#70?cfebUlD`XN3i^"8K<Rilg@H60lS4:
%:!r<);_j6mIsP*tr\J=UHm0]f:qIcf2ELqt$15'!'I+-$gO6:3GhT)T^a-63>a'>fRKH>:V.=ZWdk4'/g&7kFi-`u2I9daFF7^0:
%:,M>n-"r\>Is,tV-Auqdo==VaqZ$QlV/9$;*4$hHS.>Z90HrkZ<n?5+L5Kir.QGd'94U&\#oBZPB4i3iG%jV^hAua&#S&jYS1lVG
%:s%!COQ\BMC_&]gZD#3qjD)Sl+V6h0%?R&KHp$$^0]!h5_B,V@@>H.,]0o[-9f!stpZ]3@-3R%?Oo[)[^a&4p75a:gBf/2rYQbeA
%8Vi/tg-_[r7lgn35r,O&Ye;M]K!WGd(ik0qTjl$8%FYP)Q]+Y52O:EaK7$=GQbAdB'#5Jg"d.d>Jk]sU&RSKd/2CQm3/:5eZ76'5
%ap3)@#gYaMXfMCc4,/Zf_G2No=m3q*VOOk"ODn1pKNN.m#\2/BND:A4<q3SgO_c<n;`lr@"^(_dSrcc*R*PFO'pq=)?ft:kped".
%M?-&oUa69$J9nT>E7!)%Jj9I80s1_#>M<N+Z;!_jI6$b1G6Z,*f751]9Y*m=(nt*M6@TuqdoC=0J/TOFa.]qj!6U*h,dFm)*:5d(
%Qe0gr#+uI*<q:0^(OT2p$'`[$!$MXjR4u]7a0ep?eCVN(LYXg\1d+/+SGOEZT)'e"A$1!#WQCB`*F<J[@NmJgOQtir)h%!f*nQ#F
%L!X<0qiB&fJOle=GCcYCA[HTZZ(/C%l8!SqdVD*9;CZ:?0:iL(8lQ%:Au3ObOiZH:7`9:Y#ieO=%SI@%JHu6IUg^AbqQh?C?(a/#
%S.aNfmc"Kjm=CV5E("o7OG"@]K\8D[9#[W'Mp>_3r"9]oE5"I,,k]03-/=DDSL5eBol4#;!2gE;R%9AP@@jA^HT)GflQ0fA)mTqS
%VdrALj?o<:!(ja-gDS`o[R==3e8@\64\hfE"Is$$JOnN5Kq:OrMo@?k@G)3&&RBerD25A_n^mlI6pJ2[C.(#a%Ae.,'0K's$`@6S
%1Po>?^H16[O;/s=4A>%=UP/U.4?^&2b,DQd,l>-<F=B]8PjE2f@kerQQ%h.c=X3C:Nc*49&XPDda96aJJs+@?4`i[rN=r\8=)!.#
%Psi9.!NJ%/"qc=J-B+s^2'@-Hp!L](6:Gdi";9'>PjZUb[U#`XTED$>"/UW&3A#E1A2U:C#pa-fPpTb8kp"OtWp8Y!:mJO-`*lk)
%KUUj64=@S!L^R4j#g_2QKoX4pEm5U<a.[[Pl$OYle`5BE2BiT`[0i"0a5K@NNbqb>55%rm:?W$lZ-$#EF/\D[&Z(Of*/PF4)&Lf"
%?klegGUa)6!m*Y@GmDlrD&6.qEQJg<>%5jg.YFSNA7lVFQmW?.ca"mk<5UV)[[,nRjP(99%eUfHA=ZlM@='t@AK,>7k!)UcnQ)kZ
%N-'Z(dud2D61f.$NSDIIHAKhYM"<#c2fLVV5jZ6p,.,6/2ru;Ace,[jAV/&A@5IZa.'(?]GTQ>Uj&"C-T@Au./Q,dk`_tNGonZGe
%%f;6F?tK0\5\rX9fC;=c>$=f/@GhCh:h!2RIh`JZH'QR=,-$8TK7Gu_:@?M\UP0#-jiLqaW.tM:'u@h`&K?7V=,'DP/X;S($71dk
%V@nHTZ-uZjW3'CqZ4rZKP^pV4#&u3t'E^jpd56e^R1r8o7&RnDZ68uTQ1AlL0GE%cnSUiX<eM><Faba@i?As_NAD=uWtMHQAatS!
%?m\LU7]6j'-$th@nJ@NJ@/XP?;1W#J"$6LB_mCs%bhs]J'*bFJEYFY`"Mtoj1XUF,`1V3TgS-#\a-p7DGT\t&VsK@O+7lR&8pg0@
%6uY)P\S*?Rfd''_15!(HcA=]LUqdI[/\H]iX]A2q"lZ5AmRJ+n$:"g3EX/4Vd0-r?`&+fOY:>/ZLr]6(!+LNFE5_tp/@G-q?`"gT
%b*WK&c"_>+aGC'*kpS$6Cm6@WP<7d>3E@\r&?_c4BII3GaJmA.KW5YXTH6i^8O$?u7(X&Mo3`"s.L9p-e%Q?Mi$N@f1)+'YWSj2E
%r'b)6-O.Y3,hu>O0s7R7PtVF5F7TZtkX[.#+P]<ub1.>(s$c]7KclqBMKrrM!!D2Xf[?#iYbt><O:8&gATh,VeP9Vn;O5-^WN%)(
%SZ8`46pS^T7^CI-Ea2i6W[-2k/j`*DN+UDmSYWpJ<>nWj`@>JV<27V=6fk77(lU#F^$10t61uVVL\fkVO@s))7['K5LpGE5KN4]o
%'N?\%J?ucX'MqJ]PC!e,d2RbE.2p1*hb]#4_:>6Lo+]8W/8d3FcHqLS.VTGa=r:D9pelN:LQ4QrI^q&S>VD6rTQTu_cPoc6%0V^$
%T\a#j*lhI]-:%-b35QmHBkVVk@S>N,==+&h/;*dn]-=Ch,<?iB6dRNKWbhi4bIb-^"CdCY!qjKpY*-m;d5X`Ri&Urfo&7T/Ycn.A
%TI=hW?6"kJSjJ9NkdW-o60Hn*=OVQ*<TV7!:bHOg<.G#Bgmmn$Q#1'4MBXD^2%(O`$^-XnUe2e:!-Z;cEO;/<.*r-#NqPHF&@m+S
%4gsc17,:\h#72Z<:_q_15SC)eQ@Q4V"^F+p)9?6`FANG+5uCkIRs;*4ZeuDB1gAR4#&iCdY-"3/Nu^8JF-M<sPBE[pPa\7+/LgXT
%,I+72P_4<KEYuaEibYrt:0]?I&+'t12.?@rlC_3YalT2\NUps]J9l&a+>hT&KrFPi%bG<3k^]J!'=\-@o-ff-M)`I:&r9\GG,u4W
%0HWq#A]Bd=8Q3A;CWQ'7;OZ;NgKe]/,uE>^R+kJLWA+af%#?S)3:CDcFk*l9UGk_)7"(7b'qd*_/(MWD>-+eYUU(YFNg`<-m*a`'
%&dBa)FaT=skFsNZ%E7jP."N4(/GX/Q-$N$2hk%(t,pjiOElG^)cDN`06#aKekNe>=!KNH#Y<qWU.n-fTl9XKc,2](=:%+`A:@`+(
%j:cdnS[ssG5Ub9FZmDis"a\5iL9QfUGrdT#b/H8p*!nd$XlW0V#4/EDO$\W<Y&iO6>+DUGeq?q1E@':f>MXJ`[_BI3#N?:p`OMW'
%WN.m)s'g-7q.clgo!4sR,XZ8e1n%sU*R$D!q[[5=Z=)sMK#;[q"u.NoP)Ve+>EZoRe3#F@?*HmS&kGaY^>P$n"RN<=1DjR1iu!>Z
%Fd^A6N489c9Q8i;>b$H:$'<2RRBu>Nra_MndNUM`.'h+VPb++T,^Y^0A9:e\#eTNGl9fU0W+B9@<<<S]E#C<]j9d27;.5q*f`L@,
%Pkk*=Kr_mPaoX]qTeMbI[ljm]BQfcuoIr:9*CX5$UfSI-JV"gnFY]:J!?-NA[/!7cdJUpF\B.Lon_tM/(_jq&*'nU:Tu<*D#EYu]
%#jAL^^`bWC]-'L3Sg#:T[cdp)O^Vf4BZ7B$JgucEG^)f1UBFg67(hljNK,#N5\LPk6Rd/;Lr:HDV+,[1C/'dEXoWYjOG*&OFUQfa
%.$u_AMuj]8o!kj*W^M4L^LPPeD?1='g(%k9&eNg")s/l,AK*/+1d,im/,g-RJM3:<9@31^eP2b"Sg/?u]K$U\e'5`!rmU,4M"T&l
%SMlP&k:npD]"j'-jVZFoW2j/A$I7[9#d+R,4a'PU-aa4k@8I+q+tX.CAmah\YVE#,E(`^Q:oAQ<I,='<JXBpo^gq1o?ci3Nko?PD
%4BL8SLc@J*Q(t<!3ug.E?)QCBL5%1P(sm41N<:2LoOBe>#Y5r6Um_Su/61Zf,5d/1=s)7,QV"7uO6_c#('\Rs=$e#N5N^nq_[Mhn
%bQ'%nNt37Kg(<<?)Ch(h"#_deS;2+h/q".!Ym"5]JCpsA/[78N2<dE$Er[aV/M"]6?4rJ2BH'cJk#&$S'1h8Spm^%qjN&^j,e8op
%_'jG8>L4Q<.46_neg>?A$07a*[[5;V#3F>k&>_9$ZfC8-#G[UfR(2PGMC:t;^p/,dRZnhTrJ>ej`@T8?nsC[&<+-h52Q5=p>9-HK
%=L"g4ZTYiV:91QNJMGYO*]U;TEEJ4pcW/@e*th'Y)l6A411%,ES,+-#J4D7Y77;0l^s3',,:Y/bAcB-9oDi#?*9['[![F&t&ih/\
%'etm79VI45i(O-;5E>s$(eH#l=W[."iCKd)%il?OVP$1D!_ggA0W5nq0mo+:2ipHPD]i[*!f0^L\q)0T3o5/&<h,t]/4",%\\VUO
%f2#L!"kZdM=d$Q-Pd:ML,^W8U;M_VbS-H6@H!EiVQqs4@^+TYtkYSF@JIp*dn?AGA"4%.TAk.qE9"'iRQWbPmW5nhS7LFh,+P0-e
%[K-h+1cS%U]+UfqjJn)ibbliY=6M;q1P+UTW@>HhdH,Y22f'34FA^0iG/nc!:=J=!@N-HNDE.Tg5oY],jd(LQU.8HeP"R/nb!o9W
%R6l<\&dPui8tt#`Kq8B;li<9qnHF)@&SBPo8;sSo30AZg4FZ,f`I;&B,d.;18Dt0`HX,!l[K&e3LGWlgW0SV)7IDgl4<K)i63(Kj
%[b<l>Kl^U`m[dbf!&J#rq&0:$L+NXjI;mRe(lhN3#^,oi)&]`B*DUKFieEs<ObLYCORs`]@*Q3gllK2rEra#8THi02(5:Z'J^?e3
%!S7bqs$Gg%mh;!&qat"i[To0?2qAu`AUB!#+F7MKH:[Y,V4nhM`J14@CuMrdLe,fqGau:PQ$e62JLO72%;l6QL&oKUi[c0o+-sYf
%hL5fc6DPJ/604Ot+Nh42Pmc"D3PKR86mL@'M1d[)#=LX;+e<?[[OSZQE[<OoV]2S$G8N^X00ned6jhWZ@4CqG'<&4E!e+TE6Kkl,
%%n4pjQVpN0I1fn<H_g*n].@2(Q!^=07h:n&\MB;3TD44tQlnLP-6sp';c9MY=71NI>^j=t$/$uM>[0AAM*hFiG&U=<(pfj$T](2"
%2q2-0&2bZ/OT95\g#+7p_cPGtO:U;\"[bEf)75#uU(X?eZ_Y<F=;l&oqBKrYgmDp[=S:#_W)SmPm'&P/"l\f?V'%!Lc1,f9k6_9n
%jU"(1J"b#X5R4NQaG=YHiAbn,'&r;AFQCoFY+^)kX\-O*)EbY?"0Rt@!/r>Hg!dB./0_6uNfYPWf9-1E`j<&+ikmU)gemp#elXPR
%Eo%(BWaS4+Wj7%%ZU#:on)AE./]96W4t'X:.XL%,]#Fkj&>r>*F]J:;+,[om/urtP@Nd,8eMjUrcr[;X[CFf5pC(#Y=KVec/Vf-8
%Pd%HMPVPh'%W8e?qIM(TSb^)6`!gc.OKZuM*XC%/a^SM?PL,nOI"5$un#L[Xhs:RIa0E5/^eff^K\YtUOs8to;-LiG79rZ<,5e@]
%X`+m#JJ3_e45Nr_Z;kHBSjYn3M6G/a[]1BZ%E5)gaopb94!/]$[2`1Ba8naA/*`"mpdh`1djS7BG.<8:,1F%G.Mo*^!=4tn`8qq%
%i!+)!A?^<7%^*dk&r02Td/T-+k^i#abB,AOQ)'?Clo#f9>[1]1652.t8Rf7.m[&1/nAjVX[`^S9PWlTn3K$7p6BOPL$J;.SFm1=h
%.:F%`&(&[c%$OYtWDIC<7K/_t2rQb"lM_Ej:gB6XTNo6>,I.u;D@5II.)ZRC7@F7:jLPshCufS1!01ZK'Vf&rrCDZ_KEO;R<]OE+
%$BljS<H/jWXS<[-CAt_O/@l0aC7qfLoi+bF@l_&.dLSoc1/BM9RNWb$4q9e'5aTGAS-Q\I'#EpTP][V<X@cVjW[)_,m2h9=p`X0H
%-\P%ojV4_@69t>!(!Ha@1+[m2_tY+k*=[[,%CK=V,!uc31IP^!`D[/gdn"7I(<$aTj`r,em6Gc:aJjPd&"r:+TNOQ7"j^4.1Gk1r
%'\03;+<jgJKuLMu577b;^c>`>%NsV`nKcWm/s]T!,'>gL+U+j(N`:\Yjf9]?qn-UtbZ40[S:@%XL@FLg2@E.7((f(bJ[r8tH"3XL
%2]O8OrJoCLp63os8.X[#L\23q!(;d2<-\hcOT^VG%g0b4@$X6T;PG_^Yg>sJ*+Rou%&B7q",?^uj&3C?BbMB%%"N-?nd'ib3spFh
%Uf2]\E`8eco+b%=:n%SYNpj?UaXOiD"Ke"iaD!#%nXM'H$oqF'UMLdMZ]qVd('cT:<?Ia>Aeupdm@1+eo4+&6M-]qBlYed7Lc+;7
%8:>W'NnOZAb.o1\`MXTf=2Yj/qI)eHd]^j`h-rn:lC^[=Q)70`QjYJJ)3H#i5RrYbf-j>C`Q=F1!$DLO7uLmD[bPr[Onj&!2h5/o
%UOZeiUUd-PlCi`[SI7'soMKl=b=4$Xgu$(?O'(;F=TIii$??V2T^"q1q?F4"!XF,IKgAtSNX]ED?.Ln,-%?a-EDccgmkjPqH;^U-
%EP)ho*#"DIEVtNk*^Y#.1pGM5`=RE*)%bX<b_&QKd8Y",g)L@fHsO#q3#k.K<lsGd#aBh`+M=d3K%Q49cg"!f'',JtW&Fs<4X+6b
%Ha,Q/=;&1=$99-]>gD]8!$5ZT>1`-jq1rE$D_s856uZ!;c0n;MOXaFOFf@O1-,L?9Imn31So1hG5*o?.HpmAln:7Dh?IK0>LJf@P
%3[o@4#p);n1=SKZnH>XB5=PVuor:F\X'+G\kg51]/MW?FJfCj?k$/4F\F+$TWD)/8#r[]cE\ukNHpaRl[>dH/T3#r<E\NcT'49)D
%kR^cG3G;`pMZp>F>gLQ<CA'2eF(5Ssdog!CK41on*A=SjUaWA..TI2_6p`liFp25^Z.[h5aDs\FK5ai&M?i"*ob!3bo2?O$&_)hO
%/p4F!ZF$2QOA;MI:i%Ps7m/X>.An5',c*pJU;WVtM('LKYOG1_Bl>Fk%pKgsX.cPXhWQQl?b"+S$G_9@PLEV<?+R(F;YpTX&p%=%
%&1OTN!nCel.*r`$Ja62Rr6dnf!N6YY]&,boj@)k>Y6:SSjH^,!':[#.M`)2c6TV"EE5Qd0$!K+_Up!'68,7`*L#g3.<,-^L\=!Y'
%@6Z/TZ-H`&d8lI_*G@5P!HG\%Q9@n2+:TUuPOrI;e?I^bJblP)bXm0QeYO^)<"1=8jeJ]>+JqOP]a[nUY_@^F%t(c$?4#<2P/K2M
%!C$VPYWu.7:CF2[iSYJE&Im_[Kb>@Z&b3_Rd+;D-;1g?='GQ9%mU[6K+c_71U+r_REEbT>'JCUQm;7[19;2R3G=A(*'RH7a:eVt4
%CZKM:_%O?b?D:]u8O/YHUe5tC`(3PpZo8(4UN4fdLl+A%_R)698FrUrl*(Jm/F:U09CYmuP2:q,2-D00<-ep@Y'ed/d1>ogBL*X\
%5>*=HGZsDQC(7!J,Q[G*HkcWPnWK?[['pa6?9C-><Z^e`['N<bSrH#\,9<?#/jV=-:n8'E3f5fiGm7W00eF,?1SKpjc$]7Oh>3en
%LJgfNV,0X7#&uWM<ps(eLrkiMBm0d&960Y/1f@DEddFUn*(c*2g]UTB9U/:*JJr(_mRGQ=n-9/]LaJLED`T`OU%$-OEcWf1:]U3[
%UKb62+AYZVTX"]]q:0-l;8;C(FI.U/\D/urgALl2fc/eHM>E!-+E!Xn:EpcWW8<9.*PinhG\>o105ErN`3t]LaKE$6&tA;p$8OQn
%J8/sm\k@<<&)5-/GXBdN9TF`*Q?QZah@,K#C^No!QZQk:0hAFg*k4&B*2`InQQfC@Ge1d47W;jYLCK?M_Zj*-M:%gL\9(\[K;"QI
%gP!.S'h:`#.DQcU"mW')>pTU^&itn)Jk/&neAiGXIc*Fr;hQqemZFZ"$8T*3JEjgA\k@60)7PYa&B*S<E/KHV73mXRG@uGbEDpO+
%_5'/FN$3LAhI,du%L8@'=$J]?Q`b0:W:XK/!sZj!.0HS.eEBVF\hU;&*I).[6`_^\/5.EFfu&=WUDcrl4eoK>L`pM'E<r9i*+2G5
%"=Y;&\/UkulJZ4VO_*sm#td/!JEi+dH;!u])7<7'`&c=S+PQ\+F0b0^aQ*j6WYm8M/nMM#C(:13\3AS%pQ!kB1%#<$'EguRW88p9
%P&?Kj<?#NCVKTouf$I$6UmQ'\VE9Z-IEAoCqegom"u2d.Oc8-0,)3&0RQkac4-Xd3PWpuYh0.kMGUH/r^0opoZ\Q_BDk[:UkmYl@
%#I/2bP6U]bLOlCJ4mC2o-)6no2*7Ql9u@6?7rejSim4@kECU()GFbc@;$CE\4F)RbO$/S9i>d^->pQ*]F'Jn6@ugb]mX!<P#ti5q
%Tk]0kG6o-SoT%oA4FG<BNh<)")JGL7IcrX5F-.PCjmm<E%T<Thd$MO)W%@6c-;O^)L#T'Wh5-cT>eQj=MVG-^\9)qbJ.)P#(cMIE
%*g$c+L^%k!]+OZFn;,SH9?'l$Y=kS14Bf8&a?O`c*d4&l+sOlWQi7X0ccXkKfMY+=?-kL@e"C5VDOWu_NYHLg8U'q[^irAuE>+GZ
%\FKb9W(ENED?RWtGQ_Yc<?7j-13@));P5=)T:dm$ae;B<%r65Y6_]\]Ua1KoI18SKZM/'W-HO[)"dhR)"?UMHkREpaOT`e1)H<$/
%Y3)XU-5EPm@;8LM"LiOLM@9R'NiFF!P<0'b4K:0K4q`(*hZn1u!^Ri=%CPk;::gW"ZYW1Q<?NX0<i%JV'IS^cEG9VD-lpomWX5-M
%-"IG34&X2q._L\V6H('\.OFI#aGPS-(K&C(KhVcm8bg2Ri^sGnU)L_u^=8,\UM>lk'jTI[,"@]p_+hO76,pD]<)(a':/N`>C`e.?
%d>Xbc?_0po47\0P;J7PN;:Nd5JPAu;/Kkd"G.Jo29(g1-`2keZ@5URr1\EkPMWh',X0f>MP)a9Deb"gW1_Ct2*@X0oPmCj3[X)lE
%KXqe?#-!cZ_j*D7MW3).O0L3s8o1NZkRtg)(TJh<R34Aig1(;G<#LD;*MQl]D&MAKOP1("5n,]md+s\S[uWm]<VD&8hmoJhd1>p3
%N@Hm_L(!"j;Q5M>#@pmm8;VZcN44ONU2l#9l-9F2E>:n\)Y;u?7W3Md_"2&W=:J/s:!G=[9W?CP%8f2:h;Z%E+3\:pI+M$Qo&R'9
%"I`r.@.SE[g]VonL/lpN%QaLoW`Zs^,^'-c_"%2V)Ehs>;CM^5KLudXeB`nuh&.>F>Q^uRQun[X0hcLmcG`G.2kdmHh2i&$glG%"
%GWAAX"ho<-_>pFXPmMToeJbbU99QUC\-f#E`S(Ph&9[fHd9R)7a%`8L"OlcO15>!5`?VYedMcSYQ7n:P)Gju"IH8pf=.W:KqDYqh
%%#$/Wf,B;RYGJsVQ9oSnd?ec(l0\tA*k*]p+#O`cV:rHZW4R-GNcs<i#mdSp9[H$uM,W5iT\&6:]L47d)_e?@7IBrpC'bGmP)fW_
%eK66e5*2L)XbDM(nf:#>UGk;^M[u^(UFHi(UYcG8&:L)Nf%laeFBfKZ->7QM<"'F%;MOthq89$LT9r>JN?te%VbeX$e_?%-&A\Fk
%(a-,)/G6kl$H:WdGU@-KnAk;K''ZnEV"24a\pK$bC*:gPVqn0lF'JgI-^](DO>0FIT*u%eYtim-r0Edt0i(^.$'aO:U;FI<aTMe3
%pGWL/4sn8.1[,Bn;Ia%+A6]RAE^79H"#3hs_!!BSRH(0kA:dBs.2bMFVEE9Gq+r\AkZfNj<4&][X9M/.<#r2^Opa4i"7^#XOuN:O
%&9Ec-5"]B/>0=!=]1YG9=B3A7Tq6Wn2si3(e2r!@YSs<8l=tbS@S3'RCl$T#J,S8jZkX\1i=?<rY8nNXFk_PLC.+*@7KTk?R%Sbn
%;hN4jas'i:.AH./ZIQ<D"6?9H\YW-@%J]JIZoe7JN$"GIC/A&urPX+\K8cV<@=$Hji7iH\?HpV2QS]V/:mC<di>+W<a'Su0pXF#.
%]$+#iKdIp+_tmD)MMQTe>]c3RQ\+k>lMPFr,Mu3R]#,>qpi?H"\/J>4Vh<J%'1@I4h;'cuZ4IR7+lD8M"*M)Ud0IWPCT'&,3L2]m
%*tKP=fRh^fjL/Y%;EhS&WgQ-*3EP)c<o"W94g'[)BrEP#`#IN`WDU`HN2o5]2k=?.BFq)R)l?[g"M>f<4Bt$[[VYS%n^JKD>*%Rn
%K36&Ne9Te2rHYR\`!bNSk;l&=D"X4jUpgK$7o`m0!igIFd_9Z(P&7LHcih:fTP'T8)O0LSL5D0q5V]sm7:=giD"I`Q\]a"-qF3(e
%!r:e8#DHEQ=%tqk\\4pL(,[9CZ)'EZpQe.qTOk[]/jTBfIbGV'LgcFD@qnP;DT0]P'!u3K8QS8i$MeR;Gf:P@n8>!CWh)33!^A,P
%F6)*=\=+"&WP*n&?8,?>q'KcCKNsp;\k4,h)VRl8QELclg(iIT$A,u82$cq*W?m?L!D.LQPUaclW$`FJn8O5^^&X8snHo<2h8je>
%V9%AMe-Gqkc\F.[-QltiW!?677'7>ZA!V;)K%.#9>urF>O0@ddS`,tUH/^h%<J/FlVlX[L253C)l>;>X[0F-3cX4+N0g6Bh2>X#H
%5QpO-#K\nVq+A'^#3ouC$)fDY!NBl*$)/ZJ_&0k^&2bq@-:!#K$2&XZ?\'Ss82LP$+C;cmFpVVM6djdEZ"b$KWGlCIjH;H:kL@DS
%"qVr#S7,[Ci$&iI<JWV<>*Pg+31Q\f=sRd-d'Thfi[+'&VSGG[09LF3X-+l)8Hr,o1eX^BOcl+[r<s8dG2tmeO?1+jkQQe%iTp#=
%MV.tdOA?_!<H$(ZRK3$L*g[j:Tk$:m)T%`Iq#6We`Ab8R^.O>;ii0e:L<?VkeDMPZ!DoF%"HcrP%rn#"Y8neOlV$>SLg/ZoNSpjc
%Yt\oG>jb_bpoD-6:S:6bfLS;Ab4ie:'@4YZ)HV($cO-PB^/5?<W[U5P>gCQ#BOb*h*>Tg2=P`?Nn^Ss]L#N"5<[`&P\ZdF<Hc)U!
%+A4!in7l5O=)UG?8%J2U@kW,r+c',@\K?\V6KQr2Gc/iRf?`rg9Fc0k[]5g"JDuP99>1H1pI&?!_u3)S_K76F8)`N`'Q,9Z%QkU5
%Wc-,>:*lf_W<55-d;K-u)4+I0%\?:Kq=5Xq"410<WMIlP:X7UtiXS]eR%R!a;THDDTnjZaLe4DuGoZj?Z.aNZ"N7q39+)E\'DL)E
%:4rD_25#8I8TuU$_t8tF'4?IRd\ItaP'K68SpXV0Tq$o$UZh4/q$;1EE`d1mcH]esiE(c5rrAC_`?N9D5Vr`j:RtR7;huq>"28Hj
%(0fk@U]&s`7GI_Q(@G<edZi5=CbBeB"L4h/o-Y*Z-tXD54NXQi2J+1(9*u-i^c:m#3;n5kNe=RGEN;9"'HpT=o=JL\craUXk(c+q
%H1)#dkfNShE7K[oX9c*Zi`lK5O!i4CA?5Sjqumi_2hF!6N:6:,TkI^V,[C7uQ:U\hNgcZ&XVR"p1)6=]9Npup.\]Op!UN?@!KLm`
%2+ISH-!(p$o/5:"K]0lc>lBHip2g$CYn.K)%]kK9c=.t]*YmQD!QB7D;CJ``XhTJ/$H;T4Tg!?Y3:cQcJG0+*K]qH2T=QP30CYtd
%NR(P`Qj!2EXMnNa$@NM;!6M/#)&,]F].e6'H6e^&b6@gRTJ,ZMh[U099p!-AM@U\@""D$>7@uYp7=n9d5eUk_>YIhR$i'C/q>OAB
%Qfc)@T)*U1]+=bDBaSE3k0#QB!NmtXrhWG=pajoXKJ#L$cK?j>]gTRE*+)(o@@u)nZ:Jo5YZHKG+EoK\5&;]UaCinaJhUWZ2qg$J
%`(HUGLZTbiBnA[^_ecc@V-252P(X,))RDt#l#]o]7j<Rtf-r,9^^ubTkTI05&^bdBo"bj&D36q[`R#HMJbSpinFDhpgb<>`%/=UQ
%OXiAgb/00Y,bITu\^[*O03#6:kk8+TH8+Ct`)"QlAdg5EaO0[2+$!s[L3OPA.$3g)']8/ql2d/KM!=G:kUuEo0Z$N)NM(EIZtCU4
%QKM#5]Xkiji[Gg)"8QXs>BhQMH:W.rnm#8;cO95@W_mfE3Q-gGD1[3b9NHVC'DDLK:u],)$Nj$)Cku<"]Z:*;FClAhGGt9U9Dep2
%a;TfJonZuf;Cit`_;o\'Am9YB30X`(Eb/?<r%]a>"+i\GXi&h57'Mq0Adj9!&XEu,&aKOl(kT_oF'i-E4TNTrL5"-tW]7`l+K1&g
%rZM[a^=2=dS20(se0/^9=^3,GTkpJR$,rN7EWU*gC8gU"LGAj@0u7\DpQ4L9C'0?PV0_&Z5ck8"Gr#5Eq7R:gJk4a/#k/`^Y+K&&
%%Iim2?[=D.$OM*(+D7)!9S;^3VsR3A.u06p_5l&hZAc_\[C3Zc>O2:CV@N]Z''k$_ZgOC4o8s/H%"SZpO+D[`qQ3Vjje+]/j638!
%5WOUO;:97`Cf$H"qmt;7DhRWKJ2I1YF:Q"_\tT(e(Z#[A?/iO8$bDh>?[GCi@sc4TXEOO0l0I,p(:gROVk0YuE].X1?QXYf2u@ql
%bFJ;S^`LsMm(d4P(r\2j'(s":$L&3e29IrD.FHS30?Ud_KEbh9G"AZI^g\Kf75[-EODmF/NH!h>%/q#DrF0eiB5JNP-JkpoK&Xm.
%'l$3Ch>%ST@leI'->rFKR+-_DWGW4Q+`&u'9.`#Wn\_KJqmFsGg=@op\FrbOc&%:%!H=p:gc)5^^_k"c]nX629FKs+aV)t8qU_'J
%F/+h<Xk!gId,41&R^1cH7&(e]Vd*:mp,1s/%Z1eh@6HmU3S4:f2CNT@M>uCA%TPMV:\eQImaII.e6EYqfRm1SEJam6I><rm"S]J7
%7,JPRATQ_2of&]GXPP8k]gK\-eEpG\J=Kp&E'4>,8Dnl49t?t0c24pE^QuE:cWE^pjDSu*\VjCQ9%MVR!kW[lE)0pcZJm>?1>`TV
%!LVqR(/ZUimXeZ*oqjgP:G*GZZqHnKl;j0`bS.r%ad%99:K:;1c:[R0MJXI@.Hh4(Q;BIuCJ!s_.$*uJmD`0bl7Wk,_c+E6^!6&2
%9ZnZ+NQMfUH(n,K`<h]-M`Cg1BY#_9_C`[l<".(!;[7Oo<=hnuTH@3tA01'I8cg[83Ba`o]jWV8R6UZ;@lm?9[mOuQn(2";r=lf-
%0h!h\HKr[mcG6src?@0hZV&LMbEp/PJ7caB1!$>l,7#Zbh@:E4qU+QHYc(A%;>RtPF'4Y6C=8@8a==0PTnYON>^MA9:Jl8=#S5GS
%U2KV=i<+ulX*bI>qVe:.WV)F;L/SMMTp?6hSqOe1hU2o<Z/jEHYI*3fAWUVc?k0IJ#-1OPJ-SJ3>tqIMneJ#5B*g%[\F0!K2FN81
%lKL1k[S_4Tk'R'nY$@jMmV6<P0Ndf]eUkG@_@poc4K2aXBPlNoZDngeGlbZe^\219Ch!:BbA__)kc:J^I/C3R&Z@eTK)qJ2HCOir
%<7/UE:5c*fI-cRM)6DTH-Qu^2qe*#+JE2R&(JdQpZKi`im!b%E\XPqbSth!u5CQi5!;Z31S(A_9r(2.giNgYHV6'L`daL.eLXLPi
%NZ@je,j2b1<G]=kBuDmJP.XR).B>MWV/9q[;/4'aS\RNSV(eE7Q'^6&jS=*G_AM7]_6VX3gCC9_X$CB^DI[=U)P1F^-KE0sT/fS;
%(0eBD!1ZDO=ei2ekekA:OA1Du_CaC%BK9%h@4Epb(96.N4XT?jiGZ]C3440V'J!o-K%`35noT&\/hnilJ1Q5iSJi0f2@gI-eN$jM
%dG:Oa@#*)DD%=3./.%]$!*/*ri:doW@.@R^&2U?OfMT#L:qCb.'!=G9E%[h:kr-g$q#kmukE%_0J(liiD\Ve!K]:\cbDP6kN*.6h
%DY.r$$/anF5T>`OV[m$J,dUml'hViQpYugLj7%hTFD>=$p0Cf)#Nc@ooGtO:CZLFjQ_GsqF[(+]<<_5'W[gP_.;*okf8@H6s0si$
%5sSul@1&Zr*?j!Tm#h!:L_e7%k"=7!B8fj7&L`:U3l<:O:'V1(]+4RMN8ME@1X^,pb#It_=3#4>pUbcV?>+OW\pFpPN;_-iV_Z`+
%;U.qhD`eTh!tiKa#29g'[=IbQ'<lN_CZPFM*dG4F:DUADIt\AXXMSL!Ob8e/"2^gbithqQei$c*72p+dUqU7pbd&oTkjWl,3]tUq
%ONUsC9ksaWIE-=Sb>#p49k#NfkUbF2E+Yk>J;Q4C]qACg%kE0@6_Xf"qt[Nl`qic0LbOtRHUlh)m>g;l"UNSjaP:%Y_phkMqKK;D
%;T\XiqOe:\Oo6*+^@GdW4i<A_?,!B^II0.!C]QRu0S0&5RGUjbL'=PHCgsc6po>MbG:G"9JJ<UL(ng;nVE)[E`#%H\;]aZuQ<Y=)
%Js$[mqfmeV7&@e:-8rdPB]s<WE?A:Gc;#Bn3KW(0WE&Yg[r:j>j).BlHcXRL46[@o\__2N5l]]VMUJ?+l,&^[R=La1EM-ji7h.Ms
%9Aog7F<AXZ5V^5,s-r5h=ROM8]N'7=]'R.^<>c't-R$(I!V&]NLd;Y\lGsQ6-sdLSN&i8#1BM"m&>:qtAU$g@?YE11SRP\dBS$;;
%N0T@MOk4)7n@_QHBo-:BoMkqWdB>?8GY#-5(,*lX"r730qH_Zb#*P"aFrSag^6EAtncA:n8aL7;4I-Sr],#LkL[sX2N'k@do%r>;
%pr+QTDZnaW9U,&pTP)\?D1=A/EiKB:8J5LC)IFsgF&p.DjHu%A*)R]2O@N'oaRZa@=/2jR$A]H?_Xh`8!uRqPd;?%>JL7c#8gV+^
%ic[.'C(7,Dn!YN6.26*#6;?po+YuIFnEiccn[1:S@=D]4,#nLLRXdeRZA$qe#m0s.#Cd-iP--J_!s>)*]pFE'QcX6s\km4=6M)-*
%70NteJ-KP4R(SH;Y-LZ5kS5*NX/7=mS8Lm9ObIscb7Hk2Zh^jgO:e3R8nF6#1QLSSJ/0X/+$rj"VY\00Io=c[Y"LtXBYPdTI"+cU
%W>.33-T>jYK@&oMDOYqP.!k?b,'rN:8\L>UK,CqT[l8NBMO31=(/jTSWaGhSdc*p`,6EJ,V`lsc#UDFrrIuVS8JF0t*&]unA%t4>
%7oK'Jdb371T5lhqkQ,<E+aWp',%oP$K7>dF^"i3K/]Qq8Ms"19Pn\?%*0bSuU-rLNHtfngUgt[Imh'],Ghh;aiBqE[d+$[IH7.,&
%`D8<Y6AT"_.]R.22!<n&"bb2;_]<B7II;:QJr?$>kOrpb/B):j:",O=2^)dqC9_Yo*?B1*KW"1fYTP+@HAZVRU9g@O8+mTuTeLYM
%dl6nK[^IkTLUJ?B#"/&t]F&#FA19QN@UEVY>W'W:;pWgn#K/G"?ct^!:f<B-87hj;KCtrSkIerkj`Bg3WZ5>J*6[*CNe`:V[n^KB
%'?Y*G-2!/RWS%>K`d%pN>GRh:<I_-,lbR?I8*g7k9H>U3,`)FS5Vf!o4jhRoQeKkSNNkNd=?j3ad(\J+3qTW&TB)]B*kkcXr+<7G
%Ph]K5Fu[JU9hnVdI&Ut.PhCY4N5qch0:hK.VDrW^6]qpA"DJ663#g$i;Y*>@!9-or2-u+rmu[0I%q47@@@9tHT+J,65ht-#7D?.'
%@GHQeP!Xo@V7-3KdW^5EXg/:C\V)VAb:E_n&2#7JKa4ZUn@+@T_#MeX2jt>.5i.r4KD"^SX!WstNEO1%Sd[Nic_2JOG?91V&KOIC
%e`M.gecd:9c/2[T'b8S:HW5&GqF]I7)OdRVdW3)6dP2S=Xq"5?`[-$"fj[:`A(XqiO&HE@XE"+/b@qh5kHKq4<*lD0n!G4+?UFNP
%c183j\CT4Bco)VU<#D-`6t/qfS*MV/5LuZoh;ueT06<SH_1`@L%A4AI3^P]aW"e<_^:%cYT54%7U*_X)d+8=<)t/SB,F@`t\)96q
%,B!pJk8l@o\gkMm;Wg-7#iFUud=;q\kQNuR-YY(lqmt@#$g'9frf3R&msfFA*-RWfQ].aYB\3=G3AS+JUBL9ma8ckDC(6l^2AZb:
%469jT#=rUcG9c()OM^QsGPKUR:DPa76<$<!P_SS"TSjCFW_FP:_dKjqieN?K8gsR[_ijQ):ol:qCZW/Re88\:j_jXOD,dgt3MDXh
%qgro$!E?r.N701P`r]?s76m6AUB].pYE?9f'P@+@MBZDR3?:GZ[tC<7NhI@0ea(*_>NSn:eHf7ul9N3eO5f7@9lbsGciHe3:fgoY
%0fk<4mW/jC<fCLN@sG.:e1h.SKJ\21n:)Y7PS^=;B7f1X_!k2dVm+$2m7#Afcfq)j;g@=?\H,TdO-f3mAo*tB6^=*=],)Oq=bhY\
%7?>'C3_U@\W,\gXo3Q!+nq#FT,qKW/UrD9Ldg'E4Ufc8[ro9Y)MMHUeKOh9<Tr/Nn]A$_HDArE\cu$_0Oo5m0&-\3G?bu@,95\C5
%\=q+7iZ\au)H(VO1\g$uL[8bE_r75^?"O=-:T%Rk?\8m9dG#UgplQHSs$O"nBPVW=R.;CbeFM2o+7&11GrV/RMY%W(>(:';YkEU;
%m>8$E>2O@Q9$l5Mg5k%>;40>_;KtR[n(FjTq4AKDlQJ77BYR\E\Y7R9a0kLo#tBroMZY&H^88k*Q#nTZ(`c4WCOCgVQp&Q(c451C
%3dk^cJ\)*L&F9/Wg^)*lf,OW0+fp.`/)W5$DeJ>F/*:/OOY7%D7RsGtXEU%D3@jie&76OUMs?s<GI2qX;=TWM>!n'YJ7CLS[!Gu7
%j9A(HiBNUjH%YUdGdgA-q7dCOe*noj8+`QSHG-Z[*DEki'`IH;nDdF?N2?H4E46tYL69AK?)?laTUHTS>Rkap[sJS#`J&>C=4[oL
%Vk#+D!(mj.UH!EblDcA8h=(C@orIG#,?l[WXlG.O/u35)Tc9eUMUJ+=LaD6Q9E"E0.W[ajfXnLVk(;LB16!It:@Sa?8=\i2G2,Wq
%pMh?e9UXdY5@K2=*Imt_15Z<gX.3[r,]/HI$[:7B$m4U]VZM,5E!\%C+Zi,*oL2k-FH(u/NZaIW-B:61f-C4$Lr)YEE10Ur0g#>^
%?tnPJ"_N.d'S+Un!CAIb_:M!C^Ea_10baiWQP=06A2+U6?(]E"V5t2apL)4nQ3*9F^`dcL<NA)5G)7jO!`0VZ@8TRc*(ICb$>j9J
%c01JG,I=#M]ta&/]@$p;FD0^Qb:C^6Sd1-T-252QDAqqtc9hd]d8S=;`+:s$GArV:>XO99a#cg=;,+bPc>I+R>Vk"U]FBQQRA6mZ
%ACGDH;#,P\5W]jS]P*%dYLc<ss,Ttl;<8UjTFqGAkmirKU00==[=qsV%LkV0fDlm#PG9H0ZPQOi=!Gp`\D@a;fmKd_E$a8(LM+h&
%_7FI;KqjBZ`V:1i<?)N4`/q2;ipEKWLYA(h/UlsPgRKd+7Ol0hi\mQ$Ri,a0U'BI&asfe3Zr'K7nsdfS%E,&;0s.e',QgmpP"?#0
%l/d"(L_#>p+/N-FGSc84euHXM@!$4PaF(eQqPZ9/G84/K\L-dQ9A)gA=>]gL8u&bQHqdn\O+r^PWn$p1GS(;&TdfVBiED)BTZqIa
%)'qh7Kb;sQ\Dau?EUadjs#*\^6dLHe!!Wb,j$G7nc\?J]]r2)3.e:E8@_JnH.Q-^eE*i@<Hp\cfUH*@K9rT.QKD;h+rdu0^o"k&\
%!g\+1M2ER:oLE16CQqfmJQbQs[/QeU$oWCFID+)^G;6j1SC-a`c'$jU0#EBt9E`'U7Gi>Aj7L!mb([rMd(CYmQ+XtcEHos_mn?G>
%4\&>AK#u+\C(@!f.bV\EKh040l0c_7_)A/("2tbHT\mkM9MQaAlkq]Sf1D1:0X+96BdjkcE1L!FR]&!;TGLimoLGXM[e#H4_`Q3_
%OIP6un,pH*TJ:k+O*'dMglHS;7P4nj(>-!:8f_%=/h]rXDB!',0c$pZ([)V0&0qGQ8iPU;e/b&8V*pt3.NRF(48R/BlCN^uW(I>f
%:6<Yr1Y-j,CcTGi'md_9B4;39HP=(DFQQmSjR6aWg]JE]?E>RIQ%&BJh,pIA\EA*t*aCr+V^gOMS0H+53?qH?Ar@qtEM\[99Uk*W
%H^OKY.=t7b+8"AKJE&_SEQTi7K9)Q8\qD^PX[>bJ6\jRL"fK`*Y#,B^/+/Cg<Fm*.Rt3$Ydb2++*et8<Mh)@4:GA!;ChSWW%St;.
%UZrUta>c[5`CW(.+OY35I[&^.OJph.YW7ddV49J^inQWAj8r=mHMPQYLl)D2k!534G^3LAo.?MMbENg.\3A3G^258C?F;?eSJ5gL
%mTpZF$<(2<ed$Lh"KnF^Yg&OSh8_0]1=L-t;/kLY(cE=e^*FCB?50_('t\ge+FTdn*LR7D5LC^Zr+%-AMO4d<;q3ni7_pM6M=OlC
%7X9o'g-83:Lq(]r:.H0Xj.n>!(#%6+:j8L?3^EtN3O:MnF[52X][jESRSfUsLLb>*fn_?,\@1^n=BM:R&#PO?(EM`Tf1PsbE,N!"
%cZU6+FDBfr#IMpOVlrD_.F6Lt3T>[ZJ1@lj%]-#*Q'+`C`EAEYc#c3"#R?1dONJ:o"&1N._,/cmU)>!9G_Iu58W@N,1;taXhmX$+
%76YI*jk1"i?"M6R<Ls5g&3$u2SUI!Pa"ZhF!s]n0+3bm2Vq3Dfo[s8E'Jmo*P.7u,MZ\[Zm7=<iq03\>7>)@B9<N-U)Ht_5d:GWm
%C\4q/cBg;1NM7n;=)%_B.JK\=JS+BIhteONM$S>?^Csp(jcS=>IO#TTT++:igo-3&]RNt=ART'7&jSk#7e,JUlNDZH>-s9WS(B*Q
%$-`D-WL[pRC:n9lK[q\2`5""^6:QJk&9cNhYI"gU6pc-VA38jBF&[9Ud-[n=BXc]X-n`(`obZ-MVSE50n.&I;?MA6Yd^6QWJJ"<;
%J@c_?6`\'#Q!LHZreMMNLA^<%Ri`#<R^66\LB8[l(H-2knhJe5-^chq3i"1@REWNiKIiW$'"31+5^?]"4n:>lQ3!tj96#^cT+Sn2
%Lps+)jhFP>7(BIJ%kS&8oe8-3LH'EO3p0X6-9V,'_:2s[9._bf:_V>&I1!!5_.4jM@16B8BE>f#ec'ZXq"36hbEEjIY]=N>^jmQl
%K3K3U2%7ng8k3YBe+s"+?%8HVOn-$BcD4)235.d0?)"-r@%ZRZ$A1lU:eE%P_rsJHqn0X)%u#8O$lpcB`n:Bn2CVKX;[/N.MW'hf
%J3ZW/cS<=^2_ml(F`J\rfK1AHA:D6$`N\:g@j_+o.K8`%gZ[]I"=qADV;^S<T'!07N1s=YMkkX]3X11j_4@9r+b#0'M+Wn7pY):"
%7^8XNg2D2Q3,`;VW0*,\Q#>@QfkQ#ll;'A5ED`gic2T(=pZIC%_1]kPLd5Su-A'HP1633h-=n."gCI.%+?aXe6[l2M'500*E4aq^
%`/sl,L3W+A_"cm>NO[g%rk=@#35iocM/VWi94s1UJVOUED]a4V[L^$EnQ#"h`L"1Y\p[tV%TnSYrn6s`m!%3t2J=K$gh=(_^0>^<
%:J^`$J[;,+V;LKt+t%IgD"!ceM=lc!YO/@tLbHMK+62C1c8L\pe<Sj=<udf62nP4>GrHR7g?o\mrmS>8:BB7li^Y6d)Ea<-TtETT
%=s^\6g$Zq!``fo?YdMD@\P`,oEhqiiLOMMo+I@DK(3#Dk$SsWb1Qicaofo&[h:#`Bf'))(5eJ=$9(]f'Fpu!8oO(8(_U@LGHm:)!
%jFpISMW(-_6DDuGi`^hV)n7&_QA\ZN[i_3a;8)E6aSsC&ZTJp[,e'l@F)&OhYNR[rkt@'oR\g_6,7VuuXE0r5g>^(JB*#7ec5&F5
%W`bBEPj&nZd\R#56P0qg\OPRD'MTriAf4J$!([\&*4fA\?P$\2Z_8EsHuO=(DRQa:5'T-=&.Wba,YU)&?kqt"nQ:jR<JCXj?UsW-
%[lT-V6:iR:GqdDpo2.?NL#S;;YGRg(O-)Mg[/+gMgh8FS@GME#P=s:$g]d5K>NBMq+UkVNc(K3k%GIDcU!^Yu]<*$%qKpQd="30i
%>-1IQ.BMa%Q!em4m?H?=\Zno:CJB0X`;,\U\fgE@9aM-\&"+-Uj7p4A%E3C6m>[^c(#<a4!=bnuhTlW:fA6sA5MS:9\,4q;05;3\
%"JP[VKlp)81CcBqU6]o_3Rau3_q+'3b_E_QY1-B*V)Jb!fTXp2gCZ[C,6QXJCNu%-^[B[91,QG[#5"%9`U-ko]K6_7Hg.Y>6V1$@
%(KnB8S9L_6Kd2:ajK\LQ6\bKRBikt"JF$(2l.FAa3eZ#0f'R?'T$(nfeA=Q,mB@qHa((+eb.DrhZ`Rk[YJ6Y$><$YZ$6W*>E;'Q'
%++fme1PflRr$qB5QmEE%N!-%&YFcuKOFcD6Y8d!VI@(<0:upoUf/8#r#@*;u`1tXQ$Ztj%Dt^Z4l9?8PddKLP./D+P%htU67%$??
%l"&7#o$4:V]<q>dkTer9Z?,FUQKd5s^>07;F*WGKdA6,\qf\(eiSj'NmXdX^r2>2@&%Bj'mJcf<#"$Ng\74Y4qg"jfdGKM4#<KJ0
%B8PKOGX3F@hfMTL5=Ag,,9,rl)\gWsa@[!8FP>Mu4(nkh[$]Hd"/<PA2)*CjF2$I'J,LRQ[NpJEdF!-iX1?U>!"^,HEX>#-LrU,'
%G9>1%:-kkFgcrH+,7hcfh%gW!rFdD#V9T.cA%Pesf4')?5^'oQFmFfecf0+t40,j[Io17bJ"tt[X]gE-&7%d/P(C2YFZ(XCUTOn]
%Gr[oUPpS*\09bI-S,e]c;,DLrNmem4;NR&Dl"O<L*>akK16K4hg710f2#e)8%N;(7MC06#n5[O@!mMa@F*P'hGM<gC#O'Hf9*7d'
%/9&Q&9%&DAjRWmMpEZSa=PJhT')I5F3ccnb_LOE__I(M?8:!';>^XZ+(YH&B?ArQj)G&gXpofA[+>h9SRPn,Ik^.g2]u\OhrUp75
%L1='n$//-0`K/_*%QKXbMG=upZ7Q"upB7?@Y+npf$%HA<.f05mq%3%K<@^9U&6t7(W;&)"4)G-@+^mT@,7-n*/3c=cIu"KSV*I*e
%Oc!kln.FY"N]YU&`R,N;N;BEdqtK5%T_f2]k7d$Dm'u,\K#0_ld7sF)&6W-C4,?:8L>5Nl2N$]X9[KI4C.D\Wl'R9Q$uFr+73RDW
%7C+F+P+<4`!&!#$kTNP_;9HL<8FtcjQmcR-HF0g/q[Y++U;BTGQITDh;,gM1LJoo?]^]r$D@hso?.Wio]0`QPFf2McQ.luDmCS&)
%<LDurrt#@s#E,lSW>h[C:m?n.S,Ior>u<a<1#J-q6F)dYP,Up9&g984d3G6[^[OEMric'Q/Gsb9JYGUCLE+'-PnX&ugY3gG##"]I
%,*<1WL]=4T#;,gl=GhT:Y[ZiP4`PS8i='\#T.!*-Y`erp[(5fVfT<e41qhl=k;[el;3%cI(Q?jt,AdPZqfS9E.m[n.1JW`C\A$!-
%b1nE/1b?S\O2[dX%\9UQ^_(X_LC-ps[l[:lgR]A27t\I\s7[$cZBG+FFrReOG=/-Vp[.Bdr9<Z#c"'F;l$?u0_ja:ddkW_KN"V/1
%'W]jj[VudU5_"Y"Y"[AKT."3d#Gq;jdgU`#b%FoA7&eaEB[sh>Tino7'\VM)ERGO#+%0\*gN52R9C*Sf!Z3LX8M0@.A/:?TG0[%R
%#7hekm;lG6lD(9&a\e%"2o98D7s@G/!7?R%WPCBSY+;Hb6eJHEQm<_>-"T=k2pS;9I]E_ed*IJ*B-hHRL<=.@cTl-[@o\>KrC>h5
%_W/J&gPbpF[FiuMID3E)KcV+h2??6u$>Uek$g]a,1r6=rF?P.3A9N'PR1GL5'a)4I+=!(e#H)]8YIsrV-d+.IHiAlMEQA:jeT&bG
%H`RA%lR*_9'uZmYDH^[J4ST4u=F\'qp2,Arl`!Anq?g_'Q):8k)meI!dYWu`6E833s"*LA>cT[(3Rc-i`5akbYJlDe*/F^oL]N'<
%Q%QY^/0u#GjeX80'r^UU&I>)^C^F-a&g0pY&SO0R1;2#)-A!XWT,It.BJEino_*EQBI5-t+QF_9M^]$'*hF/$P[\Scae%_#ng]f"
%a?jNVWfZ,md!^G]YAg;p_\RXP;uQEk8%qH)fcs4;VCAb9hEL2'd%EEj1$P+``'&<=H=l6^?ZVh+j72B*o,4,I<b,BT5(eKa:UeSo
%A3_igH-^cG8!=u,F$=(`e`W1Cfee5+b%D-t[H(c=6XR+8j7AZ.q/FXTj42t!LE8tU8rc@;i8gh?a6\+i#=p]*]OfB>jX#*'M:9AP
%"T];&Ys$GrX?2+t<3(s0E1aKco>UX>=7F.S3%`X9/WTB:CBT+$NluhtPE&mt9k:%%:q#GVaFKW`G>I9>7HX?$N;#j`TmIt^]T>"%
%@j5EQ[\3_B:Ljr8DSp66'*=eK9k4b(X<MZY7-5^VW]cKt&Cn!f'DYF:?fuDG[jTfUVP-B0gEUiF&)mGQY5AC(;)A/]M5Bb^X_*V+
%mEX`W8NsGJi4MrS+KLLHCT3O_MmF8C:bHVfn%Y%M:]daA@hmrP<aiP3.N/Pp<AMAsY'AOV)6FJ]*lFPc?*JD5aXUqR@(*j<VURV2
%bL_bi)pU-bC_QW(>9KujTd>XBdCI8CMeM[\A::C`2(bup2n!PR(9:[W(bEB*[H+,sDF!;3d1`d;LU8#q!?>m#Cm34_[*>kN4N-d!
%aBOVA4ie2>1HS]rdk+@?;Q&^@6MIH]:9u<T_=MWb1d7pD_-r>)n(7*<cd/H(aMNrk*e*`&acZFT!kQE0p\mO9jXF<E$-,&2/&ohj
%pO4N@8%g<fQP^p.0qpFfMEh3Rb]F7(dDBlPLF!1"kj>W#hnVni,`;e\_Du]e[s.?6S"q>"K]W:t<3%#+TF4'tk5@qc?\>k.(dCq6
%WT(t+?*o7Ci1F:GL1.JTks>FYk*l"24B8c]M'@*$e?j(43<"UiOk)N\W>FAcbKl_QV)\KBKrgk/O3)5<i6%jlLG,a&&lg/bFVMN*
%VLIQ/*L0XIYc:1.W<gWM]!`oTQjWQi@W[7P0Ckl8T^+QOI;R2mC&Xc,>M=Q,?+WmT9-A[NQ5sI4BJNM!G\qX#pfT2_#f`8KQ"o.(
%`k:X_D_DIF:1dqDh_4XlTgsT7q5k?pc+-j.4RUMI+@q]/5A6hafUAEd!%98k5`pI]5PKGl,lU%Ne$_><qA$qP5T^E,FZ:qb#3#=B
%d+mb=H;3D/(3\:?`N)rA0ikEq4<R$A(8a$'-Ee_b*\6SR_8f$Y-!EbT37r?m4WhZ#R9EK*X3*ukV+E9S%+h"/3h)KM6q@><RHu_P
%C"HsW(2$(F5j)a>T_9r3E>k/rNJA;0n5!t0rG>i)F4Rg1lH5/m]/B_QGYM3Uc@RggR3[YL^u6CI&1SiOPR68VQu,STZD@:kZ6`"4
%datq>?/&s&QE`&]6ee8sQ2&!t$\*I=*H?E3S9ZK'7Ss*cS8";KUFaE"nocInVFV,qacus"^PHsS5?"j'#=)7b\0(o7k8>JaHp9R4
%dG:?$I\,[t5L=h'=,ZU_K@iG'XkOGaI+e1p^0eY5mSjBLPKHFp7*B^%P&n")>Wq4a7$?RZUWF&[8BB^pQhik/@`o6?%e'q=m/?=_
%$jOm[)'ZdZdXG?0i,6LCXl_gM/TEi2"875V%57[-h7D0/Z8udu7n[)]Zn4qcf>o#O'>0EeZOn=ZV6Sl3c8lLemiJ$)7mAI.6QQ@l
%_/G2\7ROm#,[J<b]^.?$HW:#A2E1gC]T"+,QZIiq'^-)pI:;JPPhT_H!hRU#iuceW3HY<O9dLBj]@>@gW0U]S%21H+rG"q\Ok1fG
%>fIe0k,Q?fHNn:+.,-X8IWPDo]YZ=)k)pfqD<DPPY,7WZ6n\XpVi>Is2bicH\kdlhA*b3uZ.lm@*6[HcUCgl+qt41^HU4,bQ5:nr
%r2<qS%=4]F8C\'UGble1;%fVE"U5!K1-_eL&o14)/ml6VF!=Tr#=CW(^6dhI6&lc1$&N\XA?e=uGMmXd&upE<n-J1[jgCf\L'BEZ
%Kb^q]!f:71qt%;+YEK(:oiP9EVpjsh]J(uRXPhU<+HopE-k=<cbXS@.A0;uU"Ob2r5e+IpY_5*30cT'6RAD5Al+,F]R3RcdhMY:#
%n)ng4g)hW`'crsX1hYK:)KgkkE8P'9B^-thlMH_p6$!7h]VoP#$;F,E]lr,9[:"F1!5KdT6B\plc98J/U!Em1+n'<"_S<;IZ_ubn
%f3ml-krB-T:+W%=1(B:["W6s;b;[@;MdDkVZ4%K*6JQ<X*qOhi+Pq?i8%e'bfjVYjIB,US:L)gm=PW1Zr9lg5pgGZ%qNiKtQCTie
%XGH]D!%Ui,W]%r=_;0WVL0]+'$h,\jqr[km='lRUI%qXj"ZUF^.`*&%lV@-&rj875^dk0BntGTSeaR^Z5Q1KWs&6K$]Z`:!A&ag$
%hrFAVB*Xd4qLITm+co&fd@:FKhk<B*gr->Z_.YW7T+CR9`qgPVZ7-7#/D(Wr'@]Z(i,NT<0`XWrbri"3OcSLZWT/*i%#b6=A\CTR
%N5qbC8U0NTOQ(jIb_!!M[%rfOCD5@2C"uT[%!Wukh9D2L>p8,<I$n[<o?o&kU'n[.UI1huW?S/`Pf>F&VOBfGqFe"@0Y2)rR]@ET
%:DC&gjq,BY?*\"2-`bto-[:('l#3#GC,J1PkbS_K<[Z+&l9N4k>+0KXDNleMfu=\a!EQ=O"](qic4V^bTnW\7f)pI>J@gMm2&$'4
%Fk`>*U`CHo?*GDCViHmMkr.`HK6\d:;BUm[X9:G^12-g,pm<Oq&D(Zm>,ua."G8R_(NVNHK;-W:CI8nJHUpD+;uZF`AMYBde^MA[
%o:UmXHC_:N*$sYSK5&4'F'#UCM&oeL5E)T(A8V$ok4;F%i7eBE3qG/;8nA4*BKiH2X4eV;/r=+sU-`d^1F4D.kFCCO]&^qd%QWN0
%$V\FtOO4;DhKGnr@38k'8&h(]hY+j)0jEFn?BH8^T"C\OMTb%'dW/jL&00JsMo.S&cUWWgbql","mQM?[k*?/"*T<27"FLXrmDBP
%]Vc2'e;Ec$R]*:TqARGoVM5g7,E_VT+<mqf#7=[)Th0K;:)tQ,9GW>R2Y9>!jgK-tVXs3^DmT1#OM]3Fj;l3*S`^2@n$&bP)N*FU
%"*C0ba\niQ.M[NRT-me[(rEbD;a,iU!rE<H6GDdiI5K#,'puEO2CV8UGM<Zneb$%1:[;k7GJi""T8tl%;/eGI(I-\9&\%YlgXdmF
%_cqf:Rg;&p8t/.G+uqi4[sFdiC*[.4+c'#grIr,8>EqK?c,oA\o=gi15#tt2c@[ZAh-:HcV<NJKah/u.<Y=]]W3le4*,4u2KZn!T
%>$Rg)T7qA(-CN0SmZL!+;7/s0MCP1Mntnf8>J]ddl@t'>&?f2_U^hON7]epd!\ls):D6rog8MnnAp0.mN5WXRd!qPE.52,d75FG@
%0r\#I5t+a.]Z;XbKd9dc3b.G20B/aNTLue!?Z9_"K`MZ$6sBZ!2.R'RPuomTTrBbqdum>0ddd!uqH^%r<,'B8^cY:WcX7NABD"a1
%EGBPHnL=R+.!BZr?YHlfiq'P,AeHp0\knhCA;r^u?6k<JTJ%&8\RZBXc5u2W((I=M_imqkMVR.1@YC#9EU@t72@dgFHsR<OCeUu"
%f*So>;&uhSc5aJEH;e'UK4fM4q:,''6P^t<(8EW%]p!3pJ81=-+/&qb+ZQGI)qt</*lA;DEp_tDghO.WCrUcQ"lI4s^0">qg;ece
%`+;2U)19qE]%_2'2E_i/f&Sl7BR]45b7ZZECeA.rA_I)C.c=fV5roS;OK(bZd?Yf+bDP92">S<Q6a&m4OU$aL"uXG"Yrp5DKi>6G
%9u:^PLs4iYY$Y1&o&H48%0/p?;S4,k(9kMMKBd/!^sD>s-Oc6fSOn(\*>lR&gB7\.Zu+U5l'@(<D3GF_*k@tQRio;B/SE``I,o12
%'YN8NB]H!A?2Ou_+;e__B"'Hen<bk++/CZBh17;@mg!$6QU`^k4d/dd"8oXHjV2ieTVun+P83/p26A31=$5U3+Q^=4P6GF4:F+\a
%;:E!c!"s2&:>M]-r^7j/!-B9.r?!/pB['l=M%\_::<&+hIN@VKaoE/6$J7S%QOU@5J^Q^rYI\Q`HnM!H*l\T#DKKu=5A[J1^[ANR
%S+3eX@;Th)$_([Rlt3nHm>E'(SVZ&!mHs5^0N?DPN"Hu!=;a^e,<o$S>jM;qPZ#`R%E/=p#_UE0Nf=LR='RM(1_%"gs!;3L46X2J
%n-57D=,P.WEq<Tp3l+-+*W:P@+XHX\f)Ce]UWD^=+ZqSeU#WE>L47ql72V&Z:)S.Nn"Q$Zi'NJ1-=*9PLT%>R:<\UU23\gUNT>mp
%0q78kUYp0l@UoA[8/ZtZdgd*5._N1n3jdZt8KU_s,_9^RpJV1jW#LMp]RMoBk`KX/X+LGjTsd1mHAfjH)`!=67fjFZS"jAg3.MlE
%G[N"Maf:S$r*aBXIEV0S7'Dl.XI5U%?$#s6EFK=Si)O@I)@&3h]/\C47'dEef>pQ>d%2Xt;K^AkKGXIP;SG"W7S0lXm3n8!L3_2m
%,B0W@qUZ5lFjVUf!ll'Tjlg?.%E[hjL0j!]U&nNbWkQXiIP-RX-&hg.MAT5uLV5*WZ0(lVlg4YZ?7HUNP<)]b<:CR5H(dp3e'#em
%?s%],ZD^+Ho`@:A1U,]<\B*@sgjhSWGKKp=Id$F=rH:-,4a08gJbSP42u`OFD8i"TI*hPM:;n,!1'8A`TfWgdfgIrT+Vm$LBk^>@
%DNW-EDdt6=YFM8n;ed(+(O+n2G:PhF4Q9Vhbp4<2X)D4AG^+*c(kud!Sd/B=*3q7_E4!0K/4Fn4YFK'Yb(&$-fTA$S0!$NC8<$3P
%@9,EOS*f5*6q(1MP8*'G_NMljnJ[d4H=;RZ-)JNWc7`LQ_^@fJ*5,UnaM<I\k55BH#!*M=Au`M=B6!X]p\rRu_IH$#n(1@G%=c)^
%#o=^okchb94t:Ck?=\@QKJbg[/fOuJ7Cnp]mfYcTQNNZF+F4RCMQW]hnBDPr:E&,tf]5)irl?UjMZtFV+k<;!7Oe[I!b)Zn[Gqr:
%M(\.pikY"NdMuW.=F\7O7fIN(AbaaA9RE%B;gLf\*cO0r:q;C?SGC;])AXlYLEY'7^8'>*Qs5\<<eaoOX]7pQ\-JIrYJmsO:;q2h
%Ji*mt`%blV^]t8D,VW9B*-$ArBpa&ofHFA`ouU>%W!Lgj_@FFEIUnrsJH?UsXnV,5@R>m8)YU*aYNH,^nZ"'_p\H&5iVM7XIBO[F
%SpR5g5#rFgc*!Rnc7u9*4a39PAD9Is1-eG,iMNS'Lu`NBUZdHXm">o\rR/<@S9A@ANOB=I7Tl1lNj+SM[a?P1e#"@r';$[NdcAJ5
%9>;\\-ONWJJpI-QHe$9Y:Di[aYAaYEd[;J>a@'3I"-aG`?WZNE=dhCA)L1^%KKW#XJ"humB9eF%8&9sF%c=a.LMj*U<SB*JGL9aq
%4+b"'@8=d)rm&@#^4#:iE>UM-n)oOZKKq'77Q?r/<.X-Z@C_=#q6ZljQJ2q.OsmfoD31CU\RH718jR1HDAT:LgN3,Ue%:1sLNb].
%mJchRFlDW7A]YWUCL5:PcXUrJlpK!erI2WQ+O=$<RhnX^-YGI>+eu5M:_+9,EFs'aC:tLXoRLu&hGKSQA0*4C[`p@=-rTdI",$5V
%>SA:DeCL]G,@2et;GCH"n^*apAMp%c3A2#f&hd%6Qll]Z7Y9OkIB&:d%0HDe'VmW$C`Y2l2N4,"RI-CCGpRMop&<oH_Bs1jVER`j
%j.o,W58@uXq'hbtjT2@3D5roV"!ijJoS[alE@O!@Sds.;^6QhoRH"O@JlRm)N=8p<<U<49s$AFWO7YR&Er%gEnd,hrUGsZTbB8T$
%ZspMr1(me&]rR17lnFBb)2m1UWMo/l<!e&KNs,kZj%4!68&O*YrL?#IIjh/nL1=+E<hc<\T\#O1,Sn#iZSY8V`&-q/HVc,g]]'-d
%>3igB(aY;-%beKu*HoW`:CS^I_:mT1+'PI]^YOJ_cb7`V^id9>Mr1(R4$A+;@obpY@u[:DmK?&tfZYJ.]sqrbU.>@r'K:-FNY]jN
%%BW7ta6d\bn_edHS(hudqUhDnC;Tqe*rGEjpbEsm,C;Tj('k:=i1Rm`Mod.d>hYkD$-*c'#t:%bd3Jd6=m8*CD(PTTNH9!Q:QmtW
%9>%$-aL,%g7'3Ijc1cS;/VkDe5;:a;eDu9(5SSZlq(s%c$Q"We"Z)]9!C)I8.TEiQ:cQB-9;ad`465J%O166#&$\=,]29+:1**gD
%#3>5"pW`EL.,/h#D'AdT2`-tIhedMqDf8tf1X&$p5%b+mIMB.$GCYWm#]37ikK!XTc%t0[f:)`VU(l.1W]S(KO.,#:_bjNO-m<-K
%i$^-hO'EZAST>:/:^,A`YLSZR+`8`B$Hl]4=qq.4Tqt*d=>/gd_c;L#P6`$R,abjNTc)(u@1i]C`4g2!TK@p`$F@eQ!ccDV\AF6]
%%P=;R-_?R"'S"cs]jKXf4u-c8S]Cb.o&WAI;?856^oS2=kRb#Vb0IY#`%Wt<Q&%-SoHW?F*;uDp-E\DS<^DKN`TCj^Vm1uC1)mM>
%MhI>SQ`Zh"CR%qV-6N&B'ueCfS@,eu--kZV"ENj%G@.I8j9%+j"sObFI`'n"qTW;e@W5XUYmO7e.._2=V-rH!"E'%DH1DKKAXkb6
%aJIMfZ2FC)1u>krVDsNKDhl0L&f1DE=-/*Y39S)p_B:^767\XdV$scGeX4fl*i:H^eRPWI.F7ZMZK%.0qM2&>GRJrb;H4S]DbRL"
%O/7FUdP0pCeVQ\)FC<1rH@+89LEEA@9o[7S,b)k].L@,IojC\?Zt?]\5ecdIb^'V(Mr2a&0%kpBJtdk8NM`ZG0m'Zk]I+)C[HQ(u
%'J&eraYdmoA@78&EjF4FWeAQ@UQ6E6:AYKHUbFQ<k\A6(5C`P-[X,f!Q^Wr;Zskb,&Lc0NFGOH^&P&;?kECpjkDA76(=bHKZpV.D
%'D.@5_PPJa'9K"=E,J+ek@E#F6=b.+5UWnk,<MM#p'HW#:m-#=^NZuL\uqi2%'D]omNUdC4DU/"J0TU_*uTlg,c6>F(/J$8bj5Z*
%qZ/T$kQ&O0<A*J77[$r2BM^gl.i:)dbKbVUBmlY6rI+M=MTSPqboNHmLn?#OS":mX?>gik9*KnQ@>C=K+_6ECG2AD9g\\r6N:9%T
%DE4Bb+DGa<_b_j5Equ3Q1ab`U\S=p,C.(^0<_-XQ2Mr9NbU,B!R8LP["WEd'LO(H>j\?V^B0/X=HKjeN?tGcupW$_giTGb9T)b"<
%=fP-`Sb,FGEDTliVB-;(CQE#cog9MlRZH4Z:ct)rhItNWk.Y+^SE,,`G<r`^2/rHOh7:&Ohu<$G,b'b:s'9\i6_RP']j!n+l'Xel
%W02XI3=ZZRLlEl:>I+437:OfYgPt8OBQqsXHe[AR:X\!-"8XFUn+Nk*DOlU<rU'"<N_A?3Ud^@"=YB?F9/E^'6hEFrS>LAIm5@Mu
%BWng&>,7(]h$ucMaL^#q)\B2AS<D0aqhGUCNlUO)BRfG:mforLh;.kThoDVGWa-i37A%\?UFS=2;"dH@'0<$5!5]+PHRs9M#0qBJ
%=;j`Qg7B4EY0AS!\,Gf<`Pq4f!Bm'ectHb@D!St,^AabF#7NPo4jO/7i9eG"/3XqH\KNAiXkeAWYtha9NtJVHH%auq*nYOuCd234
%J%Ofsm8(LUe^"&PGBa&[r-bN69MfWAL.\,n(kAP"*CLF>rAVd\hpBOTa'SGKi?W('nROr3iNiD97_sPg)r%!4UN[[G)m6@Amdob+
%J`T2`)EJ`MZ2FD$(WArXdrjX+P>8s6<FnW,G[MFG<BSsT:K&MChm_Ap5@'U/\7^MHp0/`UmAuA()reh\1Y30+hV@l&g[W=?krm=J
%cjVYLnH!!("<Lo.__OQ?YD#Djh>Ic@R(toZ-o)V;nP]]?bi^Q:Cb3lj%eh3n;>2Xs;8J^YT,uY*SjYO0ror74qj)a/ILhuN?1J$Z
%-VIr7e**_Cj-e-OT`ZLcM0LY`/_GcVDmr#pSrS5?6`2DEhRB8@$2!$M\I88,2;&m2pCG:W&<#<1d/D`/N<\7K>MXPgn!A]O_,o3_
%;8`f#qK\gDN`f1:1DC8s+Ns_l?tCtS,9i)qVq)@jO!V+"FsDJ$7qG?ti\1IuFLr?)AC%eN1n]oQh<%O(e.;"3XP<^@XPZ>^iG=2M
%+-EUr#MK[,;,K)J#(M65#KsZp'WM]-UKYK5U>LEelqZ5OG=1n*>^N4gqr'rIh$tn2n>pNR%HsRUVJb>giSBK9]>+<pM`<-j1?A]W
%U'gi]@@Z)FI#a%$.3q_n7>BG$%3FBo`\<NpKJmt#rUf#.KkKpub70B-IiPHo3%O.#h(jj/D%@/5cX+l/J%0WAh=#:&^](t`A^8p&
%ldEp;L;2%,G*,A7_#6Kpn-%:'U^8?BmI843H3oq0ii#)gd@(>G5Y!4i%1n%q!!A"#]obU8_KBUkj;7F$#grF:LW`:%EnLIF4d7gY
%<!(8p*&r(EA3jL#b;`('8@3(AESu-0F@[,4ERJ3]Ak1"oTJNcW9pq,UJP<&ABo`HJI0#1EllUWeX943YeV;NYqb,HDd$\%ANn5&I
%D.1_o"RJ^^5j#-m4!-J/kA]/>58*mkWkk3i+ct?]8.=B;33f1l<<[qXgb.#"\Q7rR^2B/,dk@**?V.8Y6Ns^/V6CecZOO'mM4jkc
%MsI)`D(,$s3ID..7TfUR^^%O6n\?KpIN+L.mmD4F66W+llmBACHB<W01?ua.:Ne'J9%0E&CcDdIFa^$^QcH@^K%_2G:l3:66q,f,
%rs%"K.ZkrSNZ(U=ime27L+<9gSEr)pge,^3qcnmWPVa,\ik6<M6P1`@N'bnG`I^U40nVLdo?uAPdhI8iP=J#%k7]4%&d"P=$M"F,
%WYE!5em!R<rH>#(GUb4Z1R"M%_f:IT@6J18T,gO:6<+ifaPe700q\S:H\i^_*3b:g*4:;pP@.uU.`6Y9&Pd/9!R$^[![]$_M`i]u
%Dc!__f@0c+s0G]W7_DX)[kRT<Y(5"#&;9+QR%Q0s)WuBs$d.>orUR(K/Z[B;T`C1MUKUOC"Q%k^4*-\?0?lT/H+m^9O/fReIrl[V
%6Wm@Pf)43015iA_0H8-qFr*,?\PJDaOZ.S"3h/[^fOaoiKGfpS`*VooP!hIX1c7M6D46ueXKl!3=,"GkfR&4QR/t`d-P[a?#!il^
%Oqh-7'jf"H*/4?H)D-?3k[XB`%V6gSg?JMt<_\99'o'"X)bMC&#_TNR$2=m#$<6"g.W0=!U.@"Z>*'dJ;::#,#`hV01Q/M%&/maD
%YD(sBB/<MS:38Fq<W>muP8$Fu,oN/->+K#FWE"VrIjeREn]+^:Ua>[EemI^m+#)jB(rn+,r%`o62%M!tQp[VLc@lI+h-e8q$5=_G
%RPj2_nh<-`mG(uKHRdC7T]&Ejcj)I/WH5ZiK!h$OpHtT6";T%l0fO9bqn<h8OnOD(&K;K[H0MZ$5)`/"2Z,pJ<L+*1C58<)l8IXk
%Z@jt;K>M&uaGZQHN)kcr!@lY]6a!+t:pKY8im8+[q;@2\JlIGC0I'V))id;=0;li6BV\J/rJ+8k/H<R4>P^Sc>p!:;,2%h\Zac58
%%JhD?,<UT3iha7?>6'Qro&Z2hOglLp$<e/(!(dkuF%Vrp<45b#-"QqQCup@VkN^MYb9#>?2bY,,f^4j8bk>@m>;'l/dG&*VfF6f%
%A\J!K*a[G(g0peB.Zs!]?AVfs.!Ju3><,6@&P&g"X)HHZAISQp*_i^rTK&..#F@#+A9`T>%Z!"A5T.,^<es[o<i-'WCs"CbJMBKH
%15D6?`s%KPJQ:,^UkeK`2VX]3&7`^s"Y3T0XXJA2!;7'0UF/i%s):p@!`tWd"Jg@d@%Hh1i`ar@AR//NAiLE!kAfE.Fq&VVRMhpt
%#9%(WP6pDPAR?$1ee0R<'BtPPel\YHd$GW*R!q<k=nGOrh`e><<0;d_c9NaO9Itq5$:Tq&_jIAjbdtRYc"17/[7.*)5cGrQ=`2h8
%=8YFs\Bp()D+l]#+n1LLHD,s"J*i@5Q".HGdTCjHm?A3upKZc&+AI**LCA-rFKj;k1T$F::`3>X`]@KJ&2(IcP2fb>]2UMV0Ij&l
%-FfVHfu$ZlUgs0-"qrTVbWN9<#fUK/-X\*>jl7>VPY&8"6]3$O*`F*RY+pi5R+bPMK_%2a$ge7m-;skRaq#d]^6Pt"]X]DK>'6_W
%Q'"8jXV'l\]FVbb9?cCXL]#h1fuR!$4pHei]`]NBXLfqs_Kjhj#e'5i9:-at<#$?HU%n5h**#SnoV:Y$h&mb@EC4&++4j\F5K`DP
%k<MpA$.m]FCDV0ZVgm=dc+TREWQodCFX'I^&bCVi#_bTR(Ze\^`/>AaF8+$9k9%78=_VtGRI/\ljFT+/h+mh.,k]VU!kF*OS:HJ'
%BUD4Y0o"L?AXD)tc+qgS"@"!#3b."KV2>DE`re*ZY!V:;6t&I^oN(F4apUBJU6\G),8>OfTug>TjoAg,_Fg^7o'19%;WOs/[k@\o
%f=]BM_]t0_KEp(n#ejXUkJO;RIQn,O(U1RH(>[X!prDJpc@a0$2JfebDr4nqJ;U@+**VjBZ@p)U;!PMc&p)D!TGWN#92-,\!(Wb]
%qc?4pRaa)WW\^<>!+iiDaK8*2Q6'YjDLgdSR"s445>n$'$QE#EBHc5=W/<<K]#KMWm^iaj"0DGg,)9ijb$>J[#[me.,R<E^0BeLg
%N4Oc;XKX$j<tuiG_!6o-5Hr#OcF;Ye]($0X:4ag6"m>>FMB#03^eB$!akL>pg[,B<Y1iataa<-q!G+BNmhVn5Hl/tXb2qqcJdT,Y
%WrV6#`7nii'^@K1<'#$;Bm@&TR+*R\7+haJ\LEaOPRB?54[_337nf<iJ4/1)(ZfDLV*(DV@$MsqKd(X0@hAs%OoOh8gSdfd=p20i
%6N!c-NX7iR<sFm2J-hWd&;Rk=`XL_5#rL:#8DX0[ji?(c"6Q3,_k%g5A?n?GM%5\A_[SLk7$5.(.dB.eL`P1*:a@L3a9SIe/E%%L
%!bF.@9_=\d4bHl@\g>[X';d&a<MiGeWtk5hLFFd;E#$bG_\h<57M^h19As)/1C2V'TEAN!fCT[?ZA?Ybn!(U1B&u-?/F/DK#)c-D
%S4SPql8eJ:-A)=s<X?\OI3Z7dYopKAP&n8OIT9;*cnQ+0Q'92(HT;&BIt3iPo*5V0Oeh;t6G^P7NgYaM,V4O=Lehh?<-;*gNP]iW
%FO$)rHFR3`[DUrF,p7$_i".7V>\p^D;l;,K@XFPni4b.*6o@fEJPpP6GmUAn)KR)CleGHSXIF0Kb$MUg!_B&e'EDhJE<F"ng$_Xd
%$;)Dj4Aj3TR0-QWJK5AK`Pc0$3@eHY\aCX.C[qDRQX,jC_I=rt]>ASgo&8?)gl2dZp5Kf@Y2paRmHHrn#A*C]GYoQ_-coepV7K5h
%J\s9HFAZP,^FPW*#K.1kar/^:LZ7eq[aM`,k/mr;!tCsr5HZjk'l2`,RPl4]i"\_`VZf*2"R&g3l)WZ/AYDq#!s'pbMG]DaS-i-i
%DMQg2lN:-iR64L$_9ns.OM#s#4GPl!'M0Y"1Fj>FXCgS@!`?jbrm+1.g#Z.1<8?ECM9lb;goto&n$i#AAcVoBRI6FV`^cLMSobEG
%m&o.o\nhuOXkrpR[^\[NKUq'1F;^?I>)X++$t.?0'%uVBCq)Y7NZ:+EK8s:LD`f^,BhaJoIob,(1*7G&EHm?AagXo\pq!oD'[3("
%$;[Ul=uAk5#,7n)Uan7]qoa,J<4._PflXfuj7(4dJ6@qqC@Mu%Y-&"^Y_?gWc0ACa\!(Sa5QKp'Cj-nE8:YZn5>h4*-Wa&F:XCJ<
%TZH'OLNmVu%&fb@#&L5l[3$>#_@#koXpk\G"d6pp%1+bMA/>*O+lU\n1Nm\-9Hu(LhN4D$P#VZtgQ>AYmrmHIhuho=]f2_i.Hg8K
%7tLdTcP6,6KEH_[p*2D\NhWp'9nuA,WRZ/K,Gp';TJiD0W6M<a1\Yc$i:d>ll-Gd;M>F'u0okN,%s1-MdFGrRi?Zr4W"`O@7VE6"
%Rg0:M)^u"*Q%5t8N)H9GkQ2[Ul.EMG!e*r__3,9b7>Be87PYrb-Ya&08ia)cHgM$[8(\Q<)2"C-H%s.<>^b`V10Ac\XHW^!:"+p'
%Ko[2X!s4dYDfgfe1*")\3Q7!Mmum4PnPBr-7dX^G)51NSm6$csn6Xs5:\Iulgj(lF;VH=95hN'FSVQJmG4"-J%h?J_'APY[UPa0H
%Y+5elVT-qlk@*G<_d=>ns#ne[?FoEMVmp9]5NKm^lJb;UEDR-q0,OVEb#nAjog9YaJElXi:@][7fGZnj'0I;:/,8g%<Xb#pI!A'u
%R<4cPTdhE!#735i?om?&98&n9GaTd%8)7NST2@BSktk'+TR[=!='SD1$4Y!`j/&q4gC,'T<%[+rVd'-jki'j?"L7#I;.B;*6);?l
%<)sSK,0oP,5G%iYTr=F^2nOs'ibg,LROjB`LRtq&J?eYN<u>-)E:-N`k1fOd6`J.^eYF92Tr-2&AB:)p[8N/P"[Idm/YZc,R:W<k
%3A3m]G0!S6-+UgJPWIoFA^&Ao>'<m7BJX&pQ>hltUg,5:D\PgWias7mQJ%sf/R'YE&%G$sOJt1^M8$g*YEDs<aW"ZZ^'#l8G:$HS
%O@+6F8hLkkD5F0i?'&V.m4K5N!boX%a`<+DZ:gJS(Q=SOHR;$SFn7#X=E?mB36gBeX$2,e%#E7CeNm3E"+f^h\L>\(Y]S8f#]F-/
%Q)<=2m`:8nP.TqIlXDhc*([gCU`qdc6_T%TNN^6,i/8PB'"U!YJNMNHGu>qNaX)l)5DV/E3TXkJJ=%u2c%1ii)N^^^Oem],_&tcK
%&NeOF5Z?kU6'MX4k!USooiRLUNGsuDc(6VjD?]n%>d]d\P5b4[+''h%/".2]iR))n\JmYAr"PCSP7/Sd0%]_5^L9Mh_c$R+c'3@2
%F6_-2]c`'-HC,6<#\a;cEg>+/e`(`?!J>ff[1=<G*o[DcWjR_ujc!1g(+^Mk<&:O&4Zr<i>SAV?T!;KB+S)ffDEDR1$A<"RNJpef
%=^tR3SHK.AZClem8CJFnNBDHmX7A5hp$(ZjL7&Ea,>cR0-Q(gDgnL2^0DCEU.YmS:O_6dJIQYoOJo)&/cYT)I>=oHD+*4\[ddi_k
%:M=o9BgV_:=Ld4]qLHBB>LslV"tcOqG%KH&'j2+I[:'CV@>@8(<)R_A$W/27Is-6jCk<Hh=bonW4nr1.U?j!WkQFjaejWCPX'#7%
%+&1sdi^bbB8=BI`)$sVP/rKXG>RE:uPDaX[OiL3^)u6>>0:OK9:=`^d!$pqA`5!E8#G*2+oZ0SjVl0iD-E9,h*^VpKhjM$B`t:%B
%kZ?D>G-.'jk9FDo%O@enf1j!91I[O#9"R?D4h3*X:$iGO!$tG<:6#O&_$<#Kc:)nW3aLEoH$49HZ*J2S8F3$rn<:nu!ibQt+b)bA
%MM5G]l`();rmq<F+U*?LVD1Z4KoYWp7qLrM#sEGWFAbu!Hkn[P:GZO3(6\9N;od8d8-TOO*@^W9-`GrJe*NsadmRdB!QApVLdc9N
%(mp`pm8XH+&?G'bdV8!d6kXIF?jl70cJ]LrbTpH]*2CEfs3=f"B*>i)CU(^U+n5Wj4jnKBr[8dB8Zc`!Dfh)M#]:(mqkZ5)ZK@*\
%F8d6)H5/IiLONoC!9%AiUiP*#nt?^Hlmf`k6pgMeAHM5\V<BWa%(J,E^JP>@E00$*%jmZLr#jLnd+b0R1\,]g$K*n*`\pFNd[H]:
%;Fd%J[5fGBJZ,h+2T-$_B6l+)$O'<Us(cP(VDY^=E5I[(OeHI6nN\_cd"rGm:+%-R>rc%:Vr)m;T1FV8,XiXnn?\GAI%<SP>0Si5
%Mjr[\Wpi._gVJ&p]2+6iQX*?)CP8(8(b/VtYggSgjfbVZS?X;pO2Z.Wb%]%t=\89GT'*=mjsV9>Sg0u[J(LNFG>#bQA4A$YTKaUd
%b^l+DG*Pg#rp]!dTYu*J#rgNRku"OF*;KB/`hXKuUC$&k$pY*k.p)kON+3TFR+8sHJ$O.NnuR"/BeI%H#2lEh6U)>R-#)U_>;YeD
%e4Jc3M2IfVS^jd6c`,"mEhA7F%8mgn-n8(iY2-Ig`-&eQO:4uAb1lH&WtS_*5mO<s#Q#2>*7Ng@WMhY)?RbFG",TGoH#7b["#_+<
%e?M.b'JPEFKji4#=H$Ut/dXabef@W2mQ[KqPQ!g_#J%])I=9koTT22MBh=JOr6\bI&8>$ki;3I9/=N69jn8F)bkr];*^!GMg%(n.
%/O5n\L(sfq#gh)ZY'#Wgo0hQEAtX0N]4"Fn1n^kT]p_$?3]kXQS?$U$78fqQp-;Ce&ZP$;;uOp[KSO](\2S0L9>q3bnZ5TCK%:Pi
%K3Src1n\Ol3<ZqG4,mcB^*(eum(I;G;?GQm/_E=e7/IL@f6gUDH'UXtUm?Es"I#(r$nal#k+#=M<?)=Ic.$I!/7L)14M)n@EQ_=6
%W:VH.M4r"$XN^G%hT:W[.SO&$Yc)6@cu2oDk/mHA6ukX0^7_^D][f0e.e'QR.\El3_P;)!hR]C'PHrcVR!2t@N%5P/SmVlQ3<EBO
%,^G'Q0=%Mnc,*(hqeE]E]4[QKj!^+HBdHdiTG*P#9HaSfn-&0]>^7L+7@lUPTns.1"*^7S1aTJ_$6pa?778i!ZQk"io8V%\TPLhJ
%q.X3uh]<h/";;<dB4FgV**[A3;N_lhQgOqacq4WL^Gq5[Vu^f!.#rmheehALTVMiU%Kq:rI=n+FIC9SN,-BoWWU0C>1.>=>"qugi
%(7LtBDEjt/MAEOe+0MCglN*u<s2jX;U^DLTVD6t5<rGg,A'qG+jbRQBEuEP=M10D/!6*]`1ICNZ25=m1n/_dt[;YT\8Ot&U,&mi`
%s7O'[@XIm04jI0t%Y\u.\.8h<4i_UXRU_^$K,H76LP(&_gj!D8Q3Yu03_Xf_=@8"BlBeZfXkD(PjX(7R/:#Zg+]-(RrBtZWie%e>
%p7;GG$dLfSK<*9Xpp(>'J#Qd)?Ed8O\JYlYn/Fjn"X<Mr4c1!m[RlK0QH#2X"k6[]Vh_*c3jSfE'ShsX^?o\=3_]-jU=6MGBa"W<
%^Hs38;B%_VGjD?U0;8F]IS5HqNQp_*eVt=qP==Q^WDL7fj"ZU51ulM<Fl;TVB0B*3SSGI@H!9i;<,9&61.e;$.6g[%bDV"4$n/'`
%9042JI!XeOR'"=7g<`R#)ZoFc8#Vhs]e+J6Ch8,-K1VFZSQhWj&AH^(GBjdg^WI?#LqWj%WC^NQm(5//%'l\qh2H_$7BV_"JCt$!
%2jL^;TcS"j08"FPkV=Rg8(H(f-h_$O0ggWS0Em>U#=_)U0#62[SVu?"dqekp2Q.f/?7tPQ!0ZC`\tdAOVGk!lY;"CNMd4N[8%`F*
%7slsT#;XuZ@QW%1DQbKqKj@B-U)9;@<1"nS=DR)rZS/Yt1HHbq,t9o-Bg:U).[!2kC;NSp,"U1t1mJ-$d;Grfc>:BR_T42TJPs_*
%[h+m*aWIbdTsGUc3\22QY]#.le.h'ZkB@+.YR/NpdG>aCV_^(gcfGI#]@Uj!XB;CC4VTCDX1^S'6c]1L02YLZ/;;&Fmjp\sE;$$'
%:YYS=e<_n'[itk:WIc]09J,$&8Ce)V]!2:2`$/QF><>W=YUum=_hb2TP_PEsit.bJ<YGia_<$iAc:F!Xnm8p'XGKqnq%ssHUd\/6
%NM?mY16[@kYm:l'*pG`)[I^W;"#4`u:>gX=9<ajeN9@K7&Wo8(7"cq'F9&-?>f%7Hisg3b9oS;A;`pN_73%%_W\Q&i?M:UZ;,m6j
%MkSo2LcU(Qf9%nsOEtdD)9KR@q#TKF:]'-UX+F"M.\X\PDf1aK'+YdK+l\eR(Nm""S,Jlg[+^j;:NgjmWsqL_YX91Gi=7+L0MWst
%k(^rcjRhdm>S$3-5&.OW'b%)J4`,."Mi/pGP!jN@\$U(#2DmTg=-)iQq'kfj68BXhgq%i&G'4R_;hB?bs,%2\<GRSW#m4Z@m-u4E
%?5ilY2Otg%ENHIIF0g-pGZ-2g0*IXDH!F(,grk1KZ:>0^KuXtcoH@KB`.OoS0?IOFKb8L%hjk(ffX)NOp9e1?OWP/pkgeXj,=.iG
%kbOs_UgKi&N%Z7mRhlc)=NoF#2!8ah%]4pM12o<=KFk3_n@9%H!gV5PY\nS5Uf2@RA^0SIQgX-MTH7H_Or1npeuGZsjolD\*q0fI
%i!4[f?Du@RcE:iVk'Mm&7\F5#(OZ3`L&\;#&!(C/`^t]reVm8e]@#*IX0X9#BYU4D(H'C+hi-bRq>@0I9j(A#]tB8OXLK\V588;/
%&XI'V=JbDekAPMs-Cr(>+Z$p8-9<Zg.ngu4hZB]Ejh722q4i6eI2[m6]L3V-X_iA>ZNLIpL^%BOT.$Im,neS(PR;(60KAqUX$0`T
%iL71!-JVbkO+![/7'Z4a"VJm$0eN/+1$!8Trhn5$6/_8fR&XIaaV6fFpNMhAj,Ol0.$LLmBl3M$XpbZ\SiKUn(aFI4B1b:.QaUO1
%.1R&BUfKSf(R+eo2+TUmBm.o=34XXX,X`Lmg;3OqMM;4j&k+cZ/+iocem(Ve'K/"BZ3#^T^3D(%;n+N:ch26fMe:%PmO:`NGbi2#
%KA)rkOH_;`3uEDgNQk0UgQR5V-dsl^RDJ0>;s"H#(#9T(_6SN1=ktJG1X31L-G'dW9]>_u6h4GDYC<[Y!J@frbPRU`\%roiFH(`"
%-_44;Lig.S#(oR3g>,Wq!_EO,:oKpG]*b&L:P\PkeBF#\e_h&ui8bgeUC)p30JX)0bD&%"nuP]")FbOgC)M/:,\2Tp&hI]Ma^mPT
%.aT?#EJjMF_BBnMf!btcfnGZ\d7%Q7=%Ji\Ka!-=RUKkENR,GcCTc(qi1[&F06W?j:)47^E:&bD)oD*.;H([m`Ai+I#W[Z>Oa=T8
%(rk''Q/onmC'1kH'i6mV:uesKZCHR/BIY'cf=>j(HfK$?m2I3?bj/.?1ZHG*,nH-9VE:<ke.!Q5(>jnh-<rT-<?^N^P*6_(3(5G+
%1Y[Kk\/Gl%Z&()A]'m.P#(m=c;o;L?(HW*redtIS?/]KXZ_ganYC]!,iKe!`(_$pj&*V8o<YgrII-^QCXL:1*6+&YS=?lB2S"1*=
%*H=Z*$OXa^7Y#@bq/t!SH,*E4*o?E@LY_4rqnoD:jAS)tlDu![j@^?7.G@$[Ghh8<><J$j2)Jg?[_%.0h.sDeG\D*aqgGl<ZtJ.P
%]c8i>knq<PJ,/e!?=)E9?Dh)5P5<HDOVDGrDD3&@Vj&^q'jqmVL5(;eG1.@`M]]+Qm<1A/jg.03Y`H.8aM`B%oM?f[^Z,bd*kfCj
%OnTmb^ARBlgX3^YPs@$]c;$U(!>l('W=W]T:f<V*2"(Mm=%&J;E'M!1i+daPc=o6s3jV"-1['O[-S'B8%"`cM/DH5!?,NsE=D:;P
%BfL5dj%#Am>_gmrPOfAO>-\@l!RE%Xc0D*B5["!:>K?I\,dIe(,te?67Ld\]+9"BmW/ZBaEqaY0UBhkjChi"k._I5]L>iSF9TuCk
%;k178d(PC9W:2n9`"@-<0j5hn8+X!lZ:%_r*aR(,O=EMB,K?GVDunW)4@(f]VeCM[Ot-,*gJF0)hd(^N3QNg/bA&+ZB3bkr0lkPf
%o=^,'S/bc/1NKF_St7/3krBBJ]13A%e*?CA_dnPM*odI[.e8)WEK_U5q&D=-ASI3FK)fuC6$/*UQYo$>f*IO14D>lrn4K%fYQ;-t
%MR`Db5p4k4DPICn;#BU?;0,n\F!!9@dAf#!5&/M[Rf>9\dZQK%7h&qj@Ttub%>*bgD35_oGl'PChkT>1j"I1)J^(8,N7Z)UfCaS2
%W,#FbQmQ%FTb;ko2&2EL"8baK#VW;/g4P<c":_E(A#1@7PWE:o1ad%<1l-@r\h`_/LY,,)^!L=gGFZ9EKn)&k./t;k2!9f%"hhT*
%Zkh\m53g,h&TYE)^kq[(>K=3mdq0&%`-EbEs.d'bUD8i;3#4?.1hX;!_X$'?[\57EPBio1gUF^#Jf^/'/<s:@f^W@leR^DCkqfiR
%W7fUr4QMqAoXhD=QF'.[(t_cH\YWV;n!n@49[?b/-u@-=5RNQ9+'\e!*If"d=M\4!/V3mK]H>YA:,X.jGPu8[6[@A7ik\SGC:3<a
%j^*."")uk+pD(CKerGKmG:6<'T8`4T)m+1kd+mc63D3\*mHsIM2NXJ0RTeO]k&=g-EDM$2o/6$&Rp/'FnAh<+qgPQ@^jk5;]oSU;
%6LA%lZ-X$18iTX-B=[^;PJi8X&[lgsXQ[h^$H]c_HjX*uE):DY1R6XJZr(ckco)%VGXieWH$OOL6TlD0`_Tk]J7^M;;iTnMlL]Fs
%7jjllI(@@5NJXDVekZJRhn&f%hdl2Da@%U48ACoe/SBo,V*9DGaF3Q>6R`$(T`[;<gTO'l[B<_NOIp7!,gaH:cL/<,gm5E^)Ygi%
%YZ_gWg6s+mqV0>O2,eo[B%;DW-.3g9U2>"0V4&hZ$8@]QkW)qq7qUeScJ\Xgk/5cjh)6\=`2F,>;O$'WGKk]iT$K:d;,']mDuK+l
%7,70JDr4"g%fC'2EH(4+M0?R&nFW1u>2[&fYN#ngdt4_Mi)m'1WV6qLdkR9#gP5L&\8m-o+M.R+mM1UPgHu)>.'p^k$Zt]%h!V#F
%g[O-H^6#ILPa8+:ZD0jfi/A&$8qaM@fOtMhoXScL?Nm/)'U-%VGhR5Mh<p$q>[DcPjqr$G@k&/QM!sL2`+rEVmiUEB=L\1VhmWXG
%fF7R'Ul#+65WF/:b5G-!iQ:(r4`NiS;h%(k;e/VZ56NW6Co)9d%J""Sm>Xm&HYg1W:.j<5)j#8Q2_`U\(V\Y]c9@2N6cH5scp>+l
%cP'$qi.TVqI%O?Xe2Dpg[32n,MQ^n^7/CqQhX6-r>k]Vm-Kj$1]-/DDJ*pF_m(Iu9LNb].mJcbPAUHbIai.+j\X;b_O=6DffHg*>
%(!6RMn8-MiU>D*[cDY75GUNWB@TcPjQt@.*`6&aj]9GK78>3R8_0N1C=4rVZn/,NMUXTlrkHp78M#^>i3A35?/Nd*Lo":Xc6Ilr>
%eKM4,9,F)B>L0e;!d,uYc;AN%)uO]A5`o,ulH**T93G_t^j&C'TpVLr/S.f#%T0>3"9U%T$Dk:QL@^I<,i2nX?\%msEj"a5q<bK)
%pfcX>(c*^!*a/!4-'+e(B9jLnN/5HY_f/ug(8lEnb!,*?hR`\EFMP2=,DTj\nV5-4ob"9^0*dH35J+*2jX[!N`uB&Q3]%JcGq8Nm
%&CL0%O`&"37MsZ)&/"=b)Tta&Ue%_3aY7o5((.0bT?"PZ<:Cu-KVtWdpQ:K.AX"lDGU>gFTVO_a+d/l*f(FIX+E:NG[iG8PS09Q0
%KcSMu:pP'3F3%&V\P<Q"0KR2Mj428)+["5j9/*e9hoi"*RV)eGE:EiXeKE=>GsL^bZ;7re;M4ZoP9+?PZs1[]r,UrPi2*4d@GP_8
%Qr+lV-W=Qi^%M5=fYI5XX>4"E/:j/*;I0]J,P$j;Ee34HQSSVq*<n4?ME#[XM0b.N1./&<VAdH7dW(Y]a*b"@b\Mu>;:F,G8%@fH
%F\I[dQIH\dJIEET)Wm#M&NYM5+19qM(r53u'R20na&Xe:$qQtPK>iSKK@?/BqA^*D0@]%gf#!^H%/T$Elp90DoCgVO$qd]JU2WPb
%L%c004T'uR6/f]59+Qe2>q<G?-0sd6D/N6QPX]So=[<&WciLEm$7HY!E1F(V...PC\!?3G*Q]P-;']R7>Walar\7?9E`6nOA"Qn#
%W]KO@mRlX)i9?0iJ5\4tAqc'aG$K6n0DNgcASl12oCJS)"W*&\I'H3oEPZ%']s3[Gl/ous"nFm(H;mIH.?K.T>F2WEASs;Y`%&]^
%>K37b[#`Yp[8J.XfGmE&N9X?TFT'abGt)Wca>,-LfZq)!,)pcCQs2\KMj*tPnmX?2n,ru%Y0XU$1`,B;]:Z_YHBs:kWV6p)r#3L,
%lF(i:8X=celiFa'c*^G20+ikMf5klg1md_?XAM-.6C_PC%L*/lp3;g_4[Y\?LY*qXE^M"QmXg=!MOr+RO@K$J70ZZ`+XU*bEg-X^
%61.%'VSMGpWRQ32b//U8@.Yq\MhMsf&%&3E/N&]n!JuC1^,*`!6!3Lu'>T[oOTGHX4?K3K.tS%:6'D2qJTFX>Q#?mUN$tL^9<3dq
%m)b3m8-u^`In3*u*>[CnZ]urH)Q=^2r\<Y%9+ij--BjdI1qEK3jV1t+S&:<2Il'/Y0`q8X0Q03A'kM9LlcM*+5bJUMkN6oOr9>Yu
%X7HD$Pg"a=gg\OskZk\nO>eoE"0>+Koc>O\DA((">_!'QL_pZ0%5X?Kfq\Va>,NFgNHGRG0!X:I,%65tXJ(3\FgTUS:?=4Rs""D%
%=HTVDLNVKFYkkUiXE,OZlitd:\i&"0/*-85jkYf&Djgr/V,X_2B+t5%*EEe0X1:l08'pn+&!nY/ZG,h%>u?5XG_ct6;ASem.rZYr
%AG3o]^UZ<eK]tiW*An-3A.o8=_?\KU<'#qqn1M(H=$o8X*$H`9Y[^fR@NQnA0"B%mJ)?B_]9L:GT7(4^r)aHboi!UO>'etEa0qo7
%n7lXlEpM&DNk`-+_:]cj81=m'im:Aj=fp\)de)Zoc/!(h3d(tLl^kpcTHLX8'EF/\-#;LH*t+,9+Y.:M$q3odP:B-RQMMqg[Aiqt
%%=-qN-OEp!(Fqn4?jpsba("l(E]Y8<rS`_n>V4cU?t4KHp$P?fA]["ResuTaWs[fon>6bt!?':KmuY1B+>%Qn;C@s;%>c_/#W=:1
%4cS]P;FMLaOc1!s??:c]([[ot!4UD]Jc`Lt'nD$BLo=6K(g.fqnIa-4XZcdb#7`f)qDs>MlZ=-4Dl6s^$cr@cC'RF)bt26O%5*NP
%0uZC*Bek*FrJe^?_Dh+L44BI$(CU>"csqno5-VS2dQ7l3-8ra>QJ(?[mGS)n)0\%2roMt,\Dpf>+5Y-2^VLgPANB_1n&\i0%>OZ#
%OK\ni<Ua!I#YFjNMr2ksZ5335OtE^$aT:)()1mqD04DMbq[Ic5Ie&4_'DMAm:L<nq11VlcmOZId%pr!%2+s92M1.dSIjI&$@tGf-
%bQ7P)gm((5FL^fEM_[YITN3Sl.;'M>-g"M\5<k_5[5bEFnc!W=apLI"/XND%K&8P/$D*e8iTWrr>pVhLP_tPilXI#Z>4g7rD3/#?
%a+SmG8J(F/X/NkTA1sorI$o/,'og^`!%PC*>/TNu2k-5.!U^"hIIXX0@6te50QHSs-8fUOn.IoWs0Y5nY^Zs49[$'*OD_"#A+;f"
%)V)t.-B`j\XAb'"So-3@jHm$`D*OZq(MU/!PqA!>?Ya\tUC:?K)3j-q:AU#@A$2W"!.(2a@$M%.4?S/abJo+GVe")WFn$sc'q):&
%ZI:9r(oN0HJc^^lK'leU/0r'ui`L,D>4TYR3A.3qC3Q<iU,HJC-HujY:E/5!()>OiK#42_]7D_STgl=WTRc,$U1,0[fc=h%SUPZt
%TRJism@;&%5M+8K1T\n-MUmlgI"]ug%MXo*M::pY?ETX`\IX1c!@_3,%G`>g.eTU5^io"9J0-9<*k+-6;p/eV=.g4@@KM;':jO[n
%ZM2JE1IU%giEga9n7a.K"1c]5L^,W<,u6\KZGmD$:Q8,t&Vb+.*r,Cdm!ccl<S0b#B-rWQq7$,dR-QF(r?#oX<@U%jmZL=0(9a3:
%"/+Y+ZW8Q-OL9eH;'3s(_7*6%rtC,hX6K$'.aspnKTL)M8aS3ZLoaEm*miVUaod@qR'X[a*Pq3A^l]"2_=#)^'fnreQ.&UEmBh1W
%T.-^!#A'Po+i;_<'$t'qcb,f;UG).C<`(W_':N;gE0/0/ngNO[YCO!)?[c.]2"UM7\oqqP+8+*Yl8TSj#:%sjqW><!`ms:.$^gT9
%+oo1qQ:6jFO-MT?#-h4IQU9;0\l=#;;EEq5q?7t4^@HV_QSHEjVt8Im3%_F+p\;!q5daB$;@[Y#I4O%3nApaSOpTlOXP6ITIUs6D
%Tq5SG4.RbdU65!S`r9D@0)YOj#Xi-;aT(\teTnhkft7r/9?<r=3n+7CWPK1`]5kESZAfkW44n&>%B2IS!**T"9!2YJ,og4P.R9`"
%m6;;c;/&;Z!&HZg)ACPrSt):\WYgGUOHHpqi*%D]aMsl.=@3*.D_YL4\uo$%#\sd27Qr;3Tdh$E@:91F+W]\1:FXLCpJnMsH%cRW
%0qED@NZe]9;b@rAOCP6%1^Z=<'j)Tn:fbT-`Wbq`,NRg9M5qXN+(G6$jmdLNO4sk&FE%(WXdGkF7r=#+CQ-/hnQPg%b*7tc!=udD
%06i;goa?Kf5=XJPUA;K<cV6LF4<]b2Eu^r.H0UQnh5Tcbc4I;+-u`:S<'-A`>$e+kVKDui*c_Z$dd;(c__(saL?2PJ/K1Ce&-O&]
%QHUZt2!*rf[2g"mKkTIcMRbp:_u`u63Ybj9FuKM]g4U<SUen^G>^K4TBbug/BpT^C![2D;<]Vl;5TqX=<Ihl/9pD-8CJa3)`c,be
%.cSnK-+FmeQoR[u&Br@+Hf>W:rP[KU,VDXaiZ/KYk<sZnLl3ctTmfu18?)JAmi^Qt8:kKU!e%bnQbL0OT<N%/Uc#`+#_$s(F*X,H
%[R!]H%Oc;/.0BLNC;h/]:Gc9IM:JE=GK@A!<6e>9R:5`\_Q-'k?*T><Cq]d6O\\<T*&H.t]QL!%H0e$3jT[)F_>t2=j]h#kb*maO
%d#:"rc.?NSZKfEM^VT9qb+jX=LOgqb_K/)r9I+@s2c;_7"otoLXd61243F$<LWc[\@TgQo`o..4'SOj!0qHM+EY'qA.m:dD#F[H5
%"tC9nX9kWZmYk&(oMo6_,>qN@VJ=8%UqPg9G"h"Iiau^?ngm57@Q[VqO>mb>7DO4#l3\@15hTPU;^#_A=>/gDH[Wo7q*JG(L^-9(
%ic$1\a?h[ik^aLR>.7>R\&=\6.X=Nk`qHi'U;^Y5lB>Y0r^\c^W_>Z\Qfi>Q4^SSl2MBfV3B6(CLh^-XXR<pZV-u#/,rPJQ9MbJH
%=5G])@n_2VAn9tr\r*m6EB@;"Jr]-Zl80$11+R/^:><FLe7.?LKOOH"gR$Gu630L-b9JYhZQ2c_:nJl+9$eTu-VjWubq\"XO=tm9
%/[lY^GDQ1EWu`[q%'"e)#mk>i1X?[qNInTUcDUoX9j]jlFZt)FLSK&$"XFH[YoFgDiKV"Kk9c"T)ogs?[n0Gn@;U7^k=L"-?\Bn5
%9^%n)jcH"h=BFm/0Sf=BGfO;go;6SCCKB-Mf0m.G57!WE[3m&657Rlu:+hjBlhY&.T=Q)l>'I[_SMP6,IYg'ZoDV4o+6YR.=ULAO
%R_1Y/DDWr!lQgJ,em-imo=2(^.A@,]=kaDRBMk<V%\g>gH&0E_!;8>-NAX/(1hq=le1G5--<L%[:qoWE?6Wa'R85;?K0#X%Er]3Z
%T8OE>mgtY$Rnq`2KVW"!>-HEF=MI@F]AWdaQ[]K4cm8hS3Yt>Y"TJgqJsYK]?>c$DUb,+coRS3,3AqF_$`6<IFnfKf6^<l[s&,Op
%Um^]XH-Hc9r3\J$o5=m&H"qGnc';kJ?Y96X$%S\'_G4`JV=,>'`p-2RM6(+_\KD15/EFo3MtCac#i9i2/qMLBAA%X._!<s8!Kj2$
%)N.t6<16_2&UL4-*0_t,T"PKB4lJHa%YlTCN'/L3&m?.f4ie9.bec`aaj1[qac.k]6M<)fF(M.L4,.p,T]e5*W>_&"Z^b20;S@24
%Mn&gJHt1P;KM,+_jdoW\JU$T0$+>3q<R#-S>6^*`eJr6D[!t:$gEloUF)pom7CfZ25f-aIB#eoWJ<(b'NADYLO9__nBfOF)-i93+
%ORdE5BJljVhkVEe>h_GhoA3?qOje_%_J+![Alm+kIY4"f*+[]!<giD-?N(VNMn;C-cmMH-")S(ji6aa==lCkqomAgL5;i*6MQB)^
%rDK8%nrPWuno09rPZqb"&(3<!iT'AL=*Hr2,R5S2DTC/@0oeX;0Kr.U5$T?a\tgHmeBqY9juT&s%;6K06BNm@M2C5ZPpd$kHok>/
%!:*#fC7tuM$9_7TB76%BJ@h:CfB<E;M@r@.3d]ElV>f,H_48$\@llMqE$"5"n$','9'nng-=mk*XP>%+#Kk.!^X4/fp3@$DCuo)%
%<7_&F%4uEsB$!#k9;i?^gp:-8LJ)qW;8i8Jn"FLdEL0V.MY$s#SYjiE[/'Etg_+4)5>ddVZH#9$F5\'Q50:t&d'r8MRC0!u/%Lj3
%Y<8RZUP`SP]a?6bUE"75:sM+YUkfBjYZOP58bF`nP3nN*$Y(o#(,&GZ@-T;8)InGS!V@7ne^/:t10QD%\-2?,b_[S*&3-++)\FK&
%^ok'X\"ar@hql'Opnt4$>O[]TpbS_VP-Vd876;$Vd41$=q!%\b8A#Xb+1rV_0Nhu/)0Nutjo3<uQ3tX`Be&3i%1o?a&B$;+W[_u^
%O^6_&0M\i=JLH#X\sgh>Tku!PSThn%,T"hVXV2ViPR)J;Sa^ak5=WHW,?F=*iLs(E*SF$Bhug://_oKrlWUm9g&JC)-\gs'dDfDW
%O:GMB$U<#Q_**T&T&HgWGCP9NU8L<[Xe:H\F,2WdI)587lQOpn`fk]a?P5@7FP=h\`L;SNAoAlWT8+$l7($Uad3N@t?-X+JaM_[O
%6T/=MZ3s\ebC,n@Y!uRp3>nr&-X,XWI/ZgPPfZSh_MmK"i#PuK$>=P"'i%1$=lY3:bhqj&E?l,)HI;kES=/g!+#ntb/-_UU5m4%[
%TKTZar3*'kJE7EH_,ek=W)H!<P(Wkh%66Er$oCf@T[0<7NF1@kS4?^64d=q7"XOK4M'SB_$A5il'!%%,Wb5@,i@53A/BAmlZ.d(Y
%7\c%LJsoT5#OadXS\l?.FE+'KKe]];=E=;ZYC%o14#\%M//arlEGF"Zpn9<rjD7*DR.[9H#Y;fDgQ8jgT\jebAB2&bh\Ra:+H<PX
%XaCVhC;/fa[2WhTgC;Z[5"9jm3#G''2O)mlaJ?n)MaUFpU@%G5=t'&^][<(^[*:gkoVdl#`0Osq/p)E0(tYfhE;\&j:A;lg>$*@j
%K0+-5qabKlR`kW]kV]/J>f[7:,UF.]<V,_38feNg<pRK\OCsroGi94:bKRjF(?t7QFQU5N(>EHO=gh)S'RGTI-jMD)A6#Rt245de
%1qkD9.FA)]IE%$t,:TZai7?9#$6$Xkd[)tc@<,#d0k@EVij!Pr3cu7N^<<-f2I+-5m!Yj&,+OY.EQ12XF`6b\aLQMC-ljR0pmIFa
%`c7#j750?+g!"CcOVZ*>[a(\l,eqG?=fk;KXIP^Ga!;lPj")QlBF5PhGJZ/3+c>;6"_t:j._c`e!uTX'Yb[%SLKRjqoW0R>/-lV$
%`PAG11dak:DhR!HLXpi"V7pj*[tLG(!r!3QlBE;e7"u+u7h:glJJUXb<.(a(V)UD->rbN-LC"t<.<+NLCk?Fak\Y9)!E+n[7f>^R
%qAcOQDi,1%LLmb/O,%YA'`/IS2AZ@&q9^Aab,38cB<1jZ+dE8Qe.R4Q.K<D4AQ)t>7kpO,i&jdcCa%Y4WaQH;\c$X'dh:nq&Bet1
%7C2)>K:X;-WN>9`SD`@E#9P\G@##Nj6fO<:Yn%Z+6:P>oiX<qbEH)+3fikCP!cjN<8,pl-I:8lfM#HY5&<`IY+Wg'FGD-@?X]a\D
%1C79l$]32p7=d0F'gEHdLUSb*&JHB8(e,!gfV7)AOZ1dr0ICb)rJ.9&_i;/U9QgOj7Fn/cH-@QM8M9EX@g7IjL!^]/-)*W[rO<&M
%0guseR$$t^<T^^/4*<5CT1VpW/WNjfpPuYCji&:l3:mcXKVmBMUjKo`YGr8:V&#hmR0,CWk+e'c`+oV&Q*U&H#ZCQ(>7-Jf8MG0h
%eEoDNeq88KC0ukQ%>tn4FSF%o_AhYrDFLjO8m)gC<"B=+e4"`"8ZhqlG.tIQ0^."]7_eMW[b,$P:UhHJ\(;_.TK:!M(QA8aa\-+#
%++>Ka3ik3E_thU)8Z!:@^@okq@!3AHK`\P9BU,C0+m5q&0jLZrj*X%jK3C#+&-W(@7e5-ZdUCsd4V*OD?*3/.3=CBG^eiuUnl38k
%A0qsE7slJIA#:8TX!/ll,@bndbEkLY'Fmc"rE/U_TFI60/"gI?:17a@G"(Rmo,=0Ab#l)giKl>Pbg"/"-ETfb:+p@;))W'2!D8t2
%-GZ16D3cjIUfeX>($+47:dho^48p5;,mW@k,7g@/$lrRe#=(iGA7>rN!a.27g4GtT.>g>5*DoQ=bKqgBcQ?m;PEnb;8p?8Q"B)=Y
%hdA]a![T9A8`#jCk_W5V[:h/$rH$YN</%akigetC)T\qrq=,FJ$AS,dgmZnrZK%_pX\Isu_:]dPK`6$D8SL42:I1EFZd=bFE;p<t
%StWsPSXfSjUTeOuIJ?i?]6/_BYgZZ:IB;>B<B5_*6."*gZTm/^(pQ2K.BH]0J"^M>./+lOI\cuI6TlelG?Ep9245DaWd>jN@8LVh
%*X&c?QCk:MES,TSl/kRfThs4I"\%uh(us`iSI>piI%5[o9^p2O_p,+E.Ep^%NpFR.Va>i.\/^W6FJ^B(JoEKYl%5I]aID6p&'p11
%p\S.o]dIXi&62,pWLf[I>F5=rEq/n0b#t\b/,ib?=/<ET!JH5brncFUbAp!3_17mi+79gU\fkUjA!N$Q#f,q:A+?R?KZlZEQ\D8D
%dmnj+@FAW8:p,5Br(@lb't'.DrO;+H.ks?e8`RCM^'Yl\m.O&/@bo_4F5`N:V?RtL-QOa#/pP`\.94G'9DBAQ[kK?L9UODl``<(1
%<D5-XC#&:5<TUJi*V4qgO7@cLgOj',.lLE"]aL>dR.(g<^Qr8L/ZZT?C=ZWgje];e*gr^3'Q`#1)AXj)Ko/lTGnDMT6(htn^--l2
%ekn\MDiGH-37(4FGf#DQ\UnHq:!ITrm<d3n2OO2i"rFD:@;a;N@fLBAE.0=hPbXb`;!-LSY)EGNB*b`QHm'"bLK1/jciiCK9%9(5
%FETeQ,&RGc"@0r*?t*koSYpPCEOi&Z:u>Z4QE@l"8fPj:5S>kH]F^i4<Zm,kH<>r?X9ok'R0k23%f0c+8rD]JclVKH_]!EdAhiE.
%r5_E8]!X]FeL3L+/[Xl.R_i'PEQklMZ"LmTrNeF%1eKO4?l;nZBs$0ZniL*W$n?8jG\aM<TsV8GahIe)9`Lte`dsJP?2+fI/6;B#
%-16?Dj]eUb9(4!o86SrXX9dB^W*M5oR-u`KS]J,b%!#A?;)(J\W2EkQI*a:K(s#rKf.Spt>IJ,+>?bZRfB9]A\iMUSXeG"!YF*h*
%dlB\'>2ETmZBrJLP:S(ELF"aPGbU2VgVfqjPQ83NAR&aGP<sE-p`R/Oj>pDCf\!uYFUOnb.GfLnDamqDb6UD,4n?BZC/]#$^E%f0
%Y>EACi\<FNEj]Y)RBHmnH0ojlLL(0T9k9fV\/bTOjKSs_IYZl%2q+9S_";I_3d]&gp1j^fMDUisk==5&L62,>1fm&u(aQ=V?C=hP
%B[jY#l8_bAUQ/\PLFaJHU@:[0(X3$f1.JoO;E4qO!&gd&nN[r2M3qC`XJ9iMm:`OK4Vn7@'nN@NV)0aTe]""(XU]Z_)mqob;N+$K
%,HrIr3TPlAo-_.rZ7;8TcU.1t[Bo<Ultr.Ma%RZKr]nN(:#Dr3/X]Shh<^S``?f.<.-kL1\!Sp@%r9E.`L+]iGi:69%m02&p\ciU
%pW1\\e(0ek>]OB,]qGBmD$9R,7*`]UrQtg:J\A:-mnAirA:pN(W+?qJHbVAl+mV:+,FpLY7RUk$b_S?N"(.!e&Wg%)iFK$DpiR`L
%$<P5*7OfIO0R`Y>PUYkT#j.se,YLgm=e)RPpbajs`*B[q:Y7Ro.7S)'KN5K93:]I%M@CM+_J5Ofd=K9Y\Lt.f4CZQSK.54i-3S2T
%B$@u8;psd>WPA6@j6[bWDnOe*1!rgZ_;ZBC$'S_`?i`8ePg\N5f@r]+mM&0D%niFZGBipT+qrUpJ8+_8C=4<?JMkZg1*fSLG@4GS
%D*='Y(%"?QDP_TVI`D02ib,OUZfU$4Cq&/F9R/WtC)64:f#*ART;dmehs>ZZ8WgRmqJra?;;0ib5M/WZ=Y/2(9L0VD0fXB^]0`EM
%2*!0i;tnr7kL]fn&K<F'VJ(!SU>2"R]b3Lk$uq.H$BqbZ5W<3l/J_(O<;#/-/YZd7(WD+0CjSc9\AN8UMX$\-YC>7I`kcGJ1Xhq;
%dr=D0NXL8T9/PRbm.@a#mN<eDA)t8`fK[K&onX6(TPX%t6<SW-a*an+'-b3GI*o_H>[NP22Y*P0XpWb0*_r2USd_t_+$+#ZUn*dM
%o.DrX`R&[/(sk,NfHRUM![]NgQss9DL>nMPba]HQ1'f.M2IdGT._Ugsh[O5KG>iu-ntBY!$!9[=krp)I[.^o:/FsaJc\,*u"GlTi
%!#Y;gQ'TmgSZ1=,kbPnRY(j[^=mUc[E5DE7LgbGU_/[<C<(VH+M33,o?`m>S,kj3WQU?QATCX6@2,k3k!lXFK'$F,#:=ks3%Qj\6
%otXE;e01Z/nBuH?S?P-nUX#):+1,Q4&k?FZPo"5SP6:Tl))sW6AHZC2[>haJT`XHl(%.W68+Da`7-P+`FFXd]!*Z2f#mfu84p`!k
%',jh62s6W?5/uq-,c5WV:4o<s)?LeN1M0Ah^8KJn>rA!,'1SprTth8Lq?Y3jqk\XY1/j93<2oi58W"&5a1Jb2SKK(R_XX6h216k^
%:DL^07;Nch^t+/C'6MWsUIu?.^r(1i)VguF+`upEk,>HUd$(PGaD.s4#o=N$EC4=Mp\<1UQVNZbKg6cTD1Ertk<k2O#ZE53cnXhs
%>raBt0U\Yid)qsdmPW9A$b`3r6Jn#/oA-gD.E7)R0BAQke]aLer8nH>de*=AK.@'"N$]JtV0Bd?ol%mTG8OG0Q[tid".73)M<uLj
%!ZZ))S-Ru[>a#OdI,s3r;;I4c&tYT&/SGP>MrrFa_(@9!Wq\RhL?$mu36]F$9aSZ:V&^og_E&*.0&me-KtIQ?:.om@K@>H@=M$#e
%:XQJMb?0Fhcdr7icW=^6m]g'\l0D4b;6WQRrt,91hDI)CXpWGU4+lF;d>$W?p4s@\,%:cQ*?#?$L+.r--TNYpfU/tm%H^NCV''?T
%*q,R%o$P1f34+C_@TN.<f$E\>ZuGCpIpTXCV@"U-,$m!c/$up>[.i3RnV/\]`Kkh5Et(s-A!5qhil.T.a01ami6\)\@m/6`LuAJ`
%gpro]!p$Iqj^U';j3A#>K(fiJi-,<+P$:[B"hgE#]AFEf=Q\t<dI;qLkD=?+@k-Kr,jM`JJYT's&'U=_f^sLbco*%i'c*>^?ueBk
%g'(pSa\Cc0rO""2k%b@/.7(<0*%#0^J`+m39=0,Qc6Y4X@Wu\+;>Gel.>T#=@=pABWj0$nGSl(5X)9STm5@aRcs_8a>f<G#/%'q%
%S;OTUUQYLLJW*;b6L=)K0>p$H8gl"lAd$`W!a_`"75Z`!R/osdHrf(^ij`]7ao'N2m]b+\Nf!I<1>5\9ZFGo6[OH>m'X5RZ&$[Qn
%IM-,S\2Q8c'K$$W;^,5\iEd"Z7c78)>1t\:ccGrj'%]j7IqU`o\'Y#MO7t02DluZWA@L?e9u'-#j$!2&it."C'hjKY#Xq/[N(b2d
%qL$r7h267b.PBu@_Q,fMnka-IWAZQ/LBOj&>.EpEXQFDM#bU:YURkIpe;W[mhUna]K*+Wjk-i88Iir]g^RKNIZJjOXX;&2uMCcQn
%"U]cI:8TEPq4^1`AXD1\,c?_"NZp&ggV/I=R!mhB-GlppcXa2o02baT2)W=PG*D-$lG+5?8Tu$A6>!QDGU7:IU2VEL+e(]LPA`-M
%nG6.YA.#s:4%t7b`GQdE'Q30X=Vhh,8VTc#%\*Mn8C26)`k=HjiSE>@,/kCe)YI5jk95:.%uM<ILlkMf.]j+XFr:,QUro'A]ts?o
%ST8X7JL%rpn3U89&[cFMNT<BL3_Wd<X5$1ig"GK1%;)lV'Crs]-UgSG;:@H6a2!dY)@=`h7Y7P[@*'EYoRS(qqc2lMn3ZXrR6PWX
%lY0,6Jp(KkZJDV>_g/lm+Aa`QYJHY'Iir7VS>$"@NL8l`<D@sqad)&VfoRrE#3-a?;'\8<NlOhm>L2:[]up-n/:r_Ic1#)(nFE*a
%KB^5])!et!f>E&b9HUkqdi@9'9kF-HFhOH,9>um];H0'F_;Y).M)#tiP>UZSc^W'B:d"L(>HMPbC3!TpC0q!n>&`Dnk*86F'/_[k
%\?i:$%#KW0e$5D7Q5#oa;,c0QoD/ObOHW]"o8.o.)31b\"5T$b8-NPdQRT6*f3QEd>+AjG#=Y)Do'rV@_9>&sitT)>POe_T\l9.a
%/raVUmD1hUnnG%92<`C;q,0W'.(7#i&M%YOW[aptD*[H2MotC$\1'U6Lde)_jHB?u"J[^?&*8#gh1B*:Ga>"!4gUpj.D2CoW4O%r
%#O6\+mg^!/K!]ABAUc$=p1F:)893q;!@hpJn"V)jgpQT@K#MeN1*8B<,6_@&jL/l%2I,F()(mB@_Le8)Hj^-r?@97b<XP$mP/-ke
%cf>NtI.d6W[2glC(.Xrh/C;EX>4j5uRFak$d&P_R*e`=hJae42hX=N%TB*VdK$YaG/*OA:>aa:[dr.Af\Wi9:JRu/+IG29YnXWb\
%=Ms0M3^pP:+$JR/;7^jFnV@m:E1:RRSsp(eF#=5S6Z\oCoMF+[1P^pWQ.#*RDa7Ej:pE2`[:5BdD[J?<]GsE.REsB1@+mB!]"';i
%D+Ihcr&eap-KJ1k0kNd.66FK.hVf40WoRsY=@7Fo99P/?8/::!LauAkhfsUk9ZNEVpd@sjMdS\[GG`DlfMaaK$1=r6VL6qc?u[=R
%H5QNHH1UZG970au'T72QJ`*m-NhK:^R$'.bH`VtG5?[ia@AA)'RjifF+R)jR#3=[^0MJs!B.V<5<`&+h^`6PqX7<quo\ED8b)3kF
%TUa`t)!iq]Ycc`n_6Yo8%P$"t9NNOea"h8p)I*LP?SVla5N9@>*,#'kJstk:A(19`?/@;I+TWW1[dXM.6H9RaLj@7Kk!6\;Pa(g_
%Kec#S<ARJ`;93H7^rqRFF-%mr1fh%E@331`f>93Y32hH\fJ)Kt-%Q[>S>(8l0P^9nGIkU;*Q@CO0'?VP6McC'oS@XGhZ-5PUEsMa
%<'G$s/EPmbJ$t4:5%uKMIq"mBHUt0"e%2d,"lu_)l`)B`'Vrr/S,Et&XXk=p[YX&CdT_T(4hu^,'u3S,6B0'RKD-IS/%C=e+0m8D
%]O.2r`8$$YE!W)4)ar@0-7^H9D6HsF!4t4"3j^/V;b&3`9"I"rq=T2lAE#rf:[u`]&5Ih*^R6UNqX(3dfZe[[Drt9=kl8XsdD(hD
%rqocq\W^_G(/_V)m\oe;Ob`7#'Vm8;=#_DK<U]4'ODfpQPs-nTE1\?nOldSCIX,e)+C)boUmWI&lI!4$i\Y'S0:LE2dam_pT53ZZ
%OkRJ6GK4P$,>=.[\gea\YnE@,i9_6%2%lo`2%u'MSmC`N%H5p6"#eDHaSfGfq)6CF04mYM3Tph.)qaura@Y),@%_?T@IDBfFX&$L
%i*R^?8!.T]\A@[9P*6\up$4esXq.'0OAO;jXY>F0i2ki(n2r'=HC6<8HfsK"G%PkQ$+CYqH*-hZ0'NUcT[gEq1JGNN]C3m+ANU,;
%o0JhD*F?t)5_X>Zk[O]`'aYH@R(b[:N/Nk!(2],03,@p1IP]Z]kl$\07`(AePhdT/i)5]@h?1[WD4oRhcSJ8/RChnpNsEnY`@bng
%OD[RZifAsZAO%BULl%"fk#3`r6C04/R$(M[a/k.hEt*0)]J`UWMrVgA3A@C(@NkVCkYfNq#$;=U)J/>Z^2YAU/++CM3cOb."&J$]
%bUB@Ilu3*)Fp(]On>f=F;QZ:;gslm[[G7aHYm)d'RF/fQT(?Q12?SGO)@1h&0t(n!'*qeqoCUdYN65*fjnY?kgecGfJVaN_On08L
%5M/.odi>XcJFF>D_LGi#k;h09dTf)c0<T.?NnpXQ.<?aA`(RB3%1(S:!4-+'>aTl/YA_?oARlFU;2==S6_?jek')D46fl>38V^@g
%1aoAk:'^rRn&'iCd?)?"Wp0n3"\$2=[a8<38Bi+]Zk5$-r<@A#iPboCL2Cs>mWH7T&L.oMr8hM<^nY>5Po3%,$ngCIi8?aBqg8[\
%%J(`@3);`>BLW3=C$E&5MCs0gTo5Wfbo4kJ#\1>M"2_H'\nW(g$=hshe$I@0$>Wg?*LJn!/)+^l/Q_EZ-QcAOeIEuN%#+mf,e;*Q
%i+>j.6CM\OqrP5B199u&2KNE%>'dYI\/WWM7C/FMg3T<kn%tter^Fq?AD@(la56$KM2(G1&-JVe$M3Jf_hphGNs`rA]#78ld=l=k
%r$@X5Qaq^Bhb+3u5Y$7oR^ptRo[[qG\@)U/%GTs\h!9?q"%P8QMEKj!S1G<"5URXMJQmLbe4'V,bd+VUH^`^O_iM1Y4C?hMH'G-0
%NT!3?i:HWWr6T%m\&a5Kge2[^N@N]4f[J9l*%qPO(?]i0VrJKBNh1EG4\pU.++Z(t2W:E4W$J'0@W*c<qPk]r9LMC7jr1V&oL#<_
%=@EioRA1*,MHd.=KJ(6L1r*jndjT:@oCX;XAf%N!^f8=jnAbuD6_YBr'qtt=SNI&K?;"E)F=G78ZuN5,^t3,'Q:UYj.hd$(FgHdS
%4If'Hdt#)e4M#@]AesN8-Q>:(+Kmos-r?B+\=oRRUc8H*:=qY""sTki.2sSh(!rd=a?o+A&:OlHBpH5\U0h5r.!Ctg1G!UgF%#k!
%lSfqk>6E*(22sHe3o@FZ_<Q\Lq.OX!L,';LXXD3S/RjZDRD8QF-jiEk_I)P<)M;i1l=t>BUo?bV9>=:3im7t^_D8N9+pVde#'B)E
%k+QA(2Q\\-3n*P96'=>om\nTGWZQ$Zr0E3@-$6a*eM*k%ed<9eoIIbo^[5WKE"ugI1n`T/W.m0b2"s%6hZXWJmX#oEj+^=Sj[V):
%K,Q_U+BMc]/CWAsAlbQq^GeMn>LFR$X?l7QF`_Ws9Gi[b[m']fX2-)jB:G9J]pYp=_@"OFOa(ef>s.Q=-5).M,b(Ou-!^RmpU3F=
%:5LZsD@W4lCmV,BAZ\8[7qq1%8^h8]&J+YmX4omYBal`MeKiSslYO6M^i?CL,bp4=rp8jJj3R<*B6e!+dSR98q%+m7RT$=,miRBM
%<P'E];U\g%js7KU.*-A!QHRqC>j0aQ5e+*hQOR^?@I/->nY&@m1Mn=Ed+fUp;?r55?.:s=8$XQfb-dA@9naF8@76c@Qb%8r*Fnit
%/1-[2?`laPl7.WGLqn[mT@n?RQYJ;-j4:BX0<Di^ftRoZ_GZLTQgs*rl<V01MNM<nA.c%>2TTeE_?-RX?O&kC@'3-AlU^uK)Tp*Y
%<44V!bID]KIo&#6CfjV,CThg09d"Fl4_=hO+#am=n[inb=b6U@_Am[J0499QYUM8"###W3$Hf5:b$(^J>AR,XNN5."JAemE.Z7r8
%ZrZ&j?';_F.'$dG@$l;3ZZ!iG]C`S9LlV<T@eY&%6mnQ_;I2atelDoBY/RN6%<8bHDbHfJD+PE[&$]8q8):anCSHeA)qH:_h!8d!
%)aH1!(gMLN*]J19!kDT:]2.Y;H"fa`=Zi)Q?(qX0-&Ilr.I4=3h-<85MqcW^Mn#15:L3:qIJqk"ZXK>.R!YC-Do?gVGbEp$O#q[Y
%FZUfQ7Uc+;h*U5V<@dGGr-Zfook$*e;kl=R25K++%7Psi_EZ9`G/?dhD;>CaT6-*s)Wi<nh!8d))c5P0Wa^cgZb5[F6U<F7D]Jl_
%8e_MqfSIql[qSaEJF"#YG$m32@0WcQb?R?\0AX-l%P"YsjsEU[>JC2E;RZ9!ZXK>.R!YC-DSuZuG>XABY4-ho:fb00T`&.af.VD5
%j@Osn=Z)lZ_&irf2>RrdiKC"8Bs+,m(Y:Qe<o&!V[i\M4C&J6XM)*ceb_BtT@IA9P^(Fpu.:qFlY(I^]di,quX?6]cg9:[jUtoN`
%X_KhKWaM8G./LWQdUb8rM4-GXhT=&Jr<@A#lIuEbL,FrIpGuZ20p$doW@if05`7%.3daK,'4U&#qe,3ZM)bbdoijp=Q,SG^?bi>J
%$jGKAGf/>2-.:1k_,lW3>rOd5,.dU\jH<tu$o/d1ab7KSo8_9(ptHgQS5mr7p^T4Hc`1N38/l/-qI]HqL0Z8/P%mm1MF=m/9*/Y/
%A+'7-dt_A_acKDs9Fb#F7#=\3SeqtZ1!XN:dj^2nAff">2&$2P-_F[)FFuq>HPdsqOK%;&bGXB"=I>/DY2-7X-t:u_V45,+mbR'R
%J-Ra,DA)hBA7+uc"7r3C"r_HQ:mcVhGMeZSN8?,skA`j$5R)5V7b[MeauANVlUR8VGToDlk&fCIP3-JmRqu2KIYhPW@E:!N$_`uA
%!m5OFAe[^)7h%;E[TS@(f87O[r340lBIeANHed"9"V`*12]X\L=4fom5#3`Q7^s,(9kBsAn4%%jA(bUY468@_;4OcHCFX*Brb!No
%opX5Rg4,*b)V,nVh!8MLEC"!"@VC%iIb[d:^eG4eO-WVm7h#$63p-X!QTTLP/]sOlLHND,\H^S-^S,%[At60N`@e=dgU;HGJD%0(
%Olg!5HTBU`OWGtS;#g*"muEDP8-X+Nom(376:Z2^8fs]p+mGI]0'Qeb]A;1,&l7kpBrjVnX)09.[C50q1H3rT>honO9!6QQZ^O3!
%H_"q?J4F5%<TsF%"&IH"EA39mDo`)&TQW=!heYQEjU$\]3mAf]?KN/*Gm"R^/-jqR3J-/"XYbVf]P*U085h/teK+FO5Q#JLqO>7u
%o]L_;s7_kpqniq/rp_)]J,@\Js8M-Gs*ae3oB.Ljj$.tjq:e.6p@UZMle??-pu1DNIf5mWT>(<qbHJ[1rVbJXSq$V/o5EOcqYRJ2
%IJ`Zgs7l8:J`*98i5Zr>oT.<^ruXg='G^~>
%AI9_PrivateDataEnd
