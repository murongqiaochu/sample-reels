%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: plata_4.eps
%%Creator: Adobe Illustrator(R) 19.1
%%For: user
%%CreationDate: 5/12/2016
%%BoundingBox: 0 0 1201 1200
%%HiResBoundingBox: 0 0 1200.0010 1200
%%CropBox: 0 0 1200.0010 1200
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.1.0 x29 R agm 4.7731 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=100 RasterRes=1 GradRes=1 Text=1 Stroke=0 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c067 79.157747, 2015/03/30-23:40:42        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
            xmlns:photoshop="http://ns.adobe.com/photoshop/1.0/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">abstract vector background with high tech circuit board Vector Illustration</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:creator>
            <rdf:Seq>
               <rdf:li>Iryna</rdf:li>
            </rdf:Seq>
         </dc:creator>
         <dc:description>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">abstract vector background with high tech circuit board Vector Illustration</rdf:li>
            </rdf:Alt>
         </dc:description>
         <dc:subject>
            <rdf:Bag>
               <rdf:li>circuit</rdf:li>
               <rdf:li>vector</rdf:li>
               <rdf:li>backgrounds</rdf:li>
               <rdf:li>tech</rdf:li>
               <rdf:li>processor</rdf:li>
               <rdf:li>abstract</rdf:li>
               <rdf:li>abstraction</rdf:li>
               <rdf:li>chip</rdf:li>
               <rdf:li>card</rdf:li>
               <rdf:li>design</rdf:li>
               <rdf:li>electrical equipment</rdf:li>
               <rdf:li>integrated</rdf:li>
               <rdf:li>technical</rdf:li>
               <rdf:li>computer part</rdf:li>
               <rdf:li>hardware</rdf:li>
               <rdf:li>engineering</rdf:li>
               <rdf:li>line</rdf:li>
               <rdf:li>cyberspace</rdf:li>
               <rdf:li>computer equipment</rdf:li>
               <rdf:li>graphic</rdf:li>
               <rdf:li>electronics industry</rdf:li>
               <rdf:li>digital</rdf:li>
               <rdf:li>technology</rdf:li>
               <rdf:li>computer</rdf:li>
               <rdf:li>circuit board</rdf:li>
               <rdf:li>illustration</rdf:li>
               <rdf:li>creativity</rdf:li>
               <rdf:li>connection</rdf:li>
               <rdf:li>computing</rdf:li>
               <rdf:li>backdrop</rdf:li>
               <rdf:li>science</rdf:li>
               <rdf:li>cover</rdf:li>
               <rdf:li>internal</rdf:li>
               <rdf:li>connect</rdf:li>
               <rdf:li>art</rdf:li>
               <rdf:li>industry</rdf:li>
               <rdf:li>conceptual</rdf:li>
               <rdf:li>construction</rdf:li>
               <rdf:li>textured</rdf:li>
               <rdf:li>computer chip</rdf:li>
               <rdf:li>mother board</rdf:li>
               <rdf:li>motherboard</rdf:li>
               <rdf:li>black</rdf:li>
               <rdf:li>blue</rdf:li>
            </rdf:Bag>
         </dc:subject>
         <xmp:MetadataDate>2016-05-12T13:11:10+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2016-05-12T13:11:10+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2016-05-12T13:11:09+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A8qYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FVazs7q9u4b&#xA;S1jM1zcOscMS9WdjQAZKMTIgDmWvLljjiZyNRiLJTaHyb5gm12bQkgT9JQoZWiMsYUqEEgKvy4ty&#xA;Vhxoe+XDSzM+CvU4Uu1cEcIzE/uya5Hvrlz26pIysrFWFGBoQeoIzHdgDbWKXYq7FXYq7FXYq7FX&#xA;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&#xA;irsVdirsVdirsVf/2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:9e0759e0-a892-df4a-9c99-dcf53e0e57fa</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:9e0759e0-a892-df4a-9c99-dcf53e0e57fa</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:f4722555-5710-48c5-971b-fff458a5613c</stRef:instanceID>
            <stRef:documentID>xmp.did:FAF2B7FBCDBDE511B2BBC0EB12123494</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F07763D45588E411BF89F345A28D8C9F</stEvt:instanceID>
                  <stEvt:when>2014-12-20T17:10:37+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:29845C695A88E411BF89F345A28D8C9F</stEvt:instanceID>
                  <stEvt:when>2014-12-20T17:19:01+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:2E845C695A88E411BF89F345A28D8C9F</stEvt:instanceID>
                  <stEvt:when>2014-12-20T17:33:07+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4365C60ACE89E4119A65C8F5B8A1FEA0</stEvt:instanceID>
                  <stEvt:when>2014-12-22T13:34:24+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0B5A99264D6BE51194FFADFDE0B012D7</stEvt:instanceID>
                  <stEvt:when>2015-10-05T13:38+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FAF2B7FBCDBDE511B2BBC0EB12123494</stEvt:instanceID>
                  <stEvt:when>2016-01-18T14:34:38+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:50E8F119F2BDE5119314DC75DE111CE2</stEvt:instanceID>
                  <stEvt:when>2016-01-18T16:45:22+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Bridge CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/metadata</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:B690E609F8BDE5119314DC75DE111CE2</stEvt:instanceID>
                  <stEvt:when>2016-01-18T17:27:52+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Bridge CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/metadata</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:9e0759e0-a892-df4a-9c99-dcf53e0e57fa</stEvt:instanceID>
                  <stEvt:when>2016-05-12T13:11:10+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>1200.000000</stDim:w>
            <stDim:h>1200.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=0 B=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
         <photoshop:Headline>abstract vector background with high tech circuit board</photoshop:Headline>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1200 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1200 li
1200 1200 li
1200 0 li
cp
clp
1200 1200 mo
0 1200 li
0 0 li
1200 0 li
1200 1200 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
0 0 0 rgb
f
91.6309 513.21 mo
89.7207 513.21 88.1738 511.663 88.1738 509.751 cv
88.1738 507.841 89.7207 506.294 91.6309 506.294 cv
93.543 506.294 95.0898 507.841 95.0898 509.751 cv
95.0898 511.663 93.543 513.21 91.6309 513.21 cv
cp
404.25 734.847 mo
394.211 723.771 li
290.427 723.771 li
209.752 643.31 li
209.752 527.558 li
199.81 515.888 li
199.81 505.524 li
190.248 494.046 li
105.736 494.046 li
96.1211 503.659 li
94.5137 503.317 92.0566 503.853 90.5205 504.376 cv
86.9814 505.571 83.7559 507.403 83.7559 511.14 cv
83.7559 514.872 86.7842 517.903 90.5205 517.903 cv
94.2559 517.903 96.4668 514.786 97.2842 511.14 cv
97.5938 509.761 97.9365 508.111 97.959 506.713 cv
107.168 497.505 li
188.627 497.505 li
196.354 506.774 li
196.354 517.159 li
206.294 528.829 li
206.294 644.745 li
288.998 727.227 li
392.678 727.227 li
400.793 736.179 li
400.793 787.776 li
410.773 798.36 li
413.288 795.987 li
404.25 786.405 li
404.25 734.847 li
cp
0 .862745 1 rgb
f
210.096 515.411 mo
208.722 514.085 208.685 511.896 210.012 510.521 cv
211.337 509.149 213.525 509.11 214.9 510.436 cv
216.275 511.765 216.313 513.952 214.986 515.325 cv
213.658 516.698 211.471 516.737 210.096 515.411 cv
cp
410.301 732.866 mo
398.143 718.368 li
299.503 718.368 li
214.291 633.511 li
214.291 519.981 li
215.458 518.928 216.535 517.134 217.141 515.858 cv
218.736 512.483 219.659 508.89 216.972 506.296 cv
214.283 503.7 210.002 503.774 207.405 506.46 cv
204.81 509.149 205.52 512.905 207.574 516.028 cv
208.491 517.423 209.647 519.128 210.832 520.09 cv
210.832 634.948 li
298.074 721.825 li
396.527 721.825 li
406.844 734.124 li
406.844 783.896 li
420.723 798.372 li
423.22 795.977 li
410.301 782.505 li
410.301 732.866 li
cp
f
428.689 775.675 mo
427.096 776.731 424.952 776.296 423.895 774.702 cv
422.842 773.11 423.277 770.966 424.87 769.909 cv
426.462 768.858 428.605 769.292 429.662 770.882 cv
430.717 772.476 430.281 774.62 428.689 775.675 cv
cp
245.359 484.228 mo
243.472 483.936 242.178 482.171 242.469 480.282 cv
242.758 478.396 244.521 477.103 246.409 477.392 cv
248.299 477.681 249.594 479.446 249.303 481.337 cv
249.013 483.222 247.246 484.517 245.359 484.228 cv
cp
401.074 705.833 mo
317.986 705.833 li
251.245 638.7 li
251.245 486.698 li
250.984 486.698 li
251.852 485.276 251.683 482.321 251.369 480.53 cv
250.725 476.849 249.404 473.382 245.711 472.814 cv
242.02 472.245 238.565 474.778 237.994 478.474 cv
237.428 482.165 240.176 484.825 243.654 486.186 cv
244.926 486.685 246.441 487.251 247.787 487.5 cv
247.787 640.128 li
316.547 709.29 li
399.646 709.29 li
426.725 736.229 li
426.725 765.422 li
425.309 766.161 423.783 767.764 422.881 768.925 cv
420.592 771.878 418.915 775.188 420.982 778.3 cv
423.043 781.415 427.24 782.267 430.355 780.204 cv
432.327 778.896 433.096 776.884 433.059 774.698 cv
434.953 777.149 li
446.176 777.149 li
446.176 773.69 li
436.652 773.69 li
430.183 765.319 li
430.183 734.796 li
401.074 705.833 li
cp
f
299.43 515.081 mo
299.827 513.212 301.662 512.021 303.533 512.419 cv
305.398 512.813 306.591 514.653 306.193 516.521 cv
305.797 518.388 303.959 519.581 302.092 519.183 cv
300.225 518.784 299.031 516.948 299.43 515.081 cv
cp
484.916 761.157 mo
420.516 698.052 li
327.166 698.052 li
275.882 646.981 li
275.882 542.606 li
297.842 521.188 li
299.301 521.625 301.334 521.638 302.993 521.618 cv
306.728 521.575 310.239 520.063 311.016 516.411 cv
311.794 512.757 309.463 509.165 305.808 508.384 cv
302.154 507.606 299.69 510.382 297.783 513.595 cv
297.076 514.786 296.221 516.633 295.982 518.173 cv
272.424 541.151 li
272.424 648.419 li
325.737 701.511 li
419.103 701.511 li
483.506 764.614 li
607.033 764.614 li
613.01 771.526 li
613.01 797.175 li
616.469 797.175 li
616.469 770.237 li
608.614 761.157 li
484.916 761.157 li
cp
f
331.387 538.724 mo
333.235 538.241 335.122 539.351 335.601 541.202 cv
336.081 543.05 334.971 544.937 333.121 545.417 cv
331.272 545.896 329.387 544.784 328.908 542.937 cv
328.428 541.089 329.537 539.202 331.387 538.724 cv
cp
342.176 684.222 mo
429.481 684.222 li
461.032 714.909 li
467.786 714.909 li
467.786 711.452 li
462.438 711.452 li
430.886 680.765 li
343.574 680.765 li
335.96 673.403 li
335.96 627.737 li
318.995 611.171 li
318.995 560.161 li
330.341 551.448 li
330.341 548.974 li
331.834 548.636 333.56 547.727 334.68 546.995 cv
337.807 544.948 340.467 542.366 339.531 538.751 cv
338.594 535.134 334.902 532.962 331.287 533.898 cv
327.668 534.837 326.313 538.409 326.435 542.144 cv
326.487 543.775 326.58 545.775 327.058 547.208 cv
326.884 547.208 li
326.884 549.741 li
315.537 558.46 li
315.537 612.626 li
332.502 629.194 li
332.502 674.874 li
342.176 684.222 li
cp
f
328.969 484.872 mo
329.365 483.005 331.202 481.811 333.07 482.212 cv
334.938 482.606 336.128 484.442 335.731 486.31 cv
335.334 488.177 333.498 489.37 331.631 488.974 cv
329.764 488.575 328.572 486.739 328.969 484.872 cv
cp
516.65 741.388 mo
518 740.04 520.188 740.04 521.54 741.388 cv
522.89 742.739 522.89 744.929 521.54 746.278 cv
520.188 747.628 518 747.628 516.65 746.278 cv
515.299 744.929 515.299 742.739 516.65 741.388 cv
cp
308.082 660.741 mo
338.853 691.138 li
426.174 691.138 li
482.362 745.31 li
511.848 745.31 li
512.846 746.566 514.744 747.763 516.077 748.421 cv
519.426 750.079 523.002 751.065 525.646 748.421 cv
528.285 745.778 528.285 741.497 525.643 738.856 cv
523.002 736.214 519.233 736.854 516.077 738.856 cv
514.744 739.7 513.127 740.753 512.123 741.852 cv
483.757 741.852 li
427.568 687.679 li
340.271 687.679 li
311.539 659.294 li
311.539 558.175 li
320.542 549.536 li
320.828 497.936 li
327.686 491.074 li
329.114 491.424 330.99 491.426 332.533 491.409 cv
336.269 491.368 339.777 489.856 340.556 486.2 cv
341.333 482.548 339.002 478.956 335.346 478.177 cv
331.693 477.399 329.229 480.171 327.322 483.386 cv
326.547 484.693 325.585 486.793 325.467 488.405 cv
317.378 496.497 li
317.091 548.054 li
308.082 556.7 li
308.082 660.741 li
cp
f
217.69 781.462 mo
215.779 781.462 214.232 779.913 214.232 778.005 cv
214.232 776.093 215.779 774.544 217.69 774.544 cv
219.601 774.544 221.148 776.093 221.148 778.005 cv
221.148 779.913 219.601 781.462 217.69 781.462 cv
cp
166.168 730.632 mo
164.258 730.632 162.709 729.085 162.709 727.175 cv
162.709 725.265 164.258 723.716 166.168 723.716 cv
168.076 723.716 169.625 725.265 169.625 727.175 cv
169.625 729.085 168.076 730.632 166.168 730.632 cv
cp
148.723 546.085 mo
147.351 544.757 147.313 542.569 148.639 541.194 cv
149.964 539.821 152.152 539.782 153.526 541.11 cv
154.902 542.437 154.941 544.626 153.613 545.999 cv
152.287 547.37 150.098 547.411 148.723 546.085 cv
cp
219.078 772.349 mo
217.392 771.971 215.302 771.54 213.766 771.717 cv
176 732.63 li
173.258 721.425 li
167.395 716.679 li
167.395 587.128 li
152.699 572.288 li
152.699 550.838 li
153.949 549.825 155.125 547.887 155.767 546.534 cv
157.364 543.155 158.287 539.563 155.6 536.968 cv
152.912 534.372 148.63 534.446 146.033 537.134 cv
143.438 539.823 144.146 543.579 146.201 546.698 cv
147.067 548.017 148.145 549.611 149.259 550.595 cv
149.241 550.595 li
149.241 573.708 li
163.938 588.55 li
163.938 718.329 li
166.277 720.224 li
165.887 720.161 165.49 720.12 165.082 720.12 cv
160.881 720.12 157.476 723.526 157.476 727.726 cv
157.476 731.925 160.881 735.329 165.082 735.329 cv
168.163 735.329 170.81 733.492 172.006 730.856 cv
172.863 734.362 li
211.495 774.345 li
211.43 775.888 211.877 777.826 212.314 779.114 cv
213.51 782.651 215.34 785.88 219.078 785.88 cv
222.813 785.88 225.842 782.851 225.842 779.114 cv
225.842 775.38 222.723 773.167 219.078 772.349 cv
cp
f
197.809 785.78 mo
195.896 785.78 194.351 784.233 194.351 782.323 cv
194.351 780.413 195.896 778.864 197.809 778.864 cv
199.72 778.864 201.266 780.413 201.266 782.323 cv
201.266 784.233 199.72 785.78 197.809 785.78 cv
cp
143.99 513.352 mo
144.387 511.483 146.223 510.292 148.092 510.69 cv
149.959 511.085 151.148 512.925 150.752 514.79 cv
150.355 516.659 148.519 517.852 146.652 517.454 cv
144.785 517.056 143.592 515.22 143.99 513.352 cv
cp
199.196 776.669 mo
197.197 776.221 194.631 775.697 193.099 776.207 cv
141.462 724.78 li
141.462 661.126 li
127.198 643.837 li
127.198 595.501 li
136.717 586.558 li
135.852 526.304 li
142.623 519.532 li
144.06 519.903 145.979 519.908 147.553 519.89 cv
151.287 519.849 154.799 518.335 155.576 514.681 cv
156.354 511.028 154.023 507.435 150.367 506.657 cv
146.714 505.878 144.25 508.651 142.343 511.864 cv
141.586 513.142 140.658 515.168 140.503 516.765 cv
132.375 524.894 li
133.239 585.081 li
123.74 594.005 li
123.74 645.079 li
138.004 662.368 li
138.004 726.218 li
191.629 779.627 li
191.726 780.956 192.083 782.403 192.433 783.435 cv
193.628 786.974 195.458 790.2 199.196 790.2 cv
202.931 790.2 205.96 787.171 205.96 783.435 cv
205.96 779.698 202.842 777.487 199.196 776.669 cv
cp
f
377.938 786.649 mo
376.027 786.649 374.479 785.101 374.479 783.188 cv
374.479 781.278 376.027 779.731 377.938 779.731 cv
379.846 779.731 381.395 781.278 381.395 783.188 cv
381.395 785.101 379.846 786.649 377.938 786.649 cv
cp
242.936 785.687 mo
241.027 785.687 239.479 784.14 239.479 782.229 cv
239.479 780.319 241.027 778.773 242.936 778.773 cv
244.846 778.773 246.395 780.319 246.395 782.229 cv
246.395 784.14 244.846 785.687 242.936 785.687 cv
cp
379.323 777.536 mo
377.385 777.1 374.912 776.595 373.367 777.03 cv
359.21 761.157 li
265.753 761.157 li
247.51 776.159 li
245.904 775.777 243.391 776.322 241.824 776.852 cv
238.285 778.048 235.06 779.88 235.06 783.616 cv
235.06 787.352 238.09 790.382 241.824 790.382 cv
245.563 790.382 247.773 787.263 248.591 783.616 cv
248.9 782.238 249.24 780.59 249.264 779.192 cv
266.992 764.614 li
357.66 764.614 li
371.408 780.03 li
371.73 779.742 li
371.713 781.247 372.145 783.071 372.56 784.302 cv
373.756 787.839 375.588 791.067 379.323 791.067 cv
383.06 791.067 386.088 788.036 386.088 784.302 cv
386.088 780.567 382.971 778.354 379.323 777.536 cv
cp
f
178.519 517.134 mo
176.609 517.099 175.09 515.524 175.122 513.616 cv
175.154 511.708 176.729 510.186 178.639 510.218 cv
180.549 510.255 182.07 511.827 182.036 513.737 cv
182.002 515.648 180.429 517.167 178.519 517.134 cv
cp
245.151 725.483 mo
246.523 726.81 246.561 728.999 245.236 730.372 cv
243.91 731.745 241.723 731.782 240.347 730.456 cv
238.973 729.13 238.933 726.94 240.262 725.567 cv
241.588 724.194 243.777 724.155 245.151 725.483 cv
cp
183.974 512.657 mo
182.84 509.099 181.066 505.845 177.328 505.776 cv
173.594 505.712 170.514 508.686 170.447 512.421 cv
170.383 516.157 173.463 518.423 177.092 519.304 cv
178.65 519.684 180.563 520.116 182.06 520.058 cv
181.766 520.37 li
197.217 534.987 li
197.217 549.899 li
185.98 561.642 li
185.98 640.433 li
240.439 693.597 li
240.439 721.431 li
239.479 722.491 238.621 723.951 238.107 725.036 cv
236.511 728.411 235.588 732.003 238.275 734.601 cv
240.963 737.192 245.244 737.118 247.842 734.435 cv
250.438 731.745 249.729 727.987 247.674 724.868 cv
246.623 723.269 245.26 721.261 243.896 720.434 cv
243.896 692.138 li
189.438 638.974 li
189.438 563.03 li
200.676 551.288 li
200.676 533.497 li
184.591 518.282 li
184.963 516.682 184.468 514.208 183.974 512.657 cv
cp
f
234.844 755.407 mo
234.459 757.278 232.629 758.479 230.758 758.093 cv
228.888 757.706 227.685 755.878 228.072 754.005 cv
228.459 752.138 230.289 750.935 232.16 751.321 cv
234.029 751.708 235.23 753.538 234.844 755.407 cv
cp
176.957 546.388 mo
175.584 545.062 175.546 542.874 176.873 541.499 cv
178.199 540.124 180.388 540.087 181.763 541.415 cv
183.137 542.739 183.174 544.929 181.847 546.304 cv
180.52 547.675 178.332 547.714 176.957 546.388 cv
cp
239.217 757.446 mo
239.974 753.788 237.367 750.991 233.963 749.452 cv
232.494 748.787 230.688 748.004 229.201 747.789 cv
229.201 692.151 li
180.793 643.743 li
180.793 551.256 li
182.096 550.28 183.336 548.242 184.001 546.837 cv
185.598 543.46 186.521 539.866 183.832 537.273 cv
181.146 534.677 176.865 534.751 174.266 537.437 cv
171.673 540.126 172.383 543.884 174.435 547.003 cv
175.362 548.414 176.532 550.144 177.729 551.099 cv
177.336 551.099 li
177.336 645.175 li
225.744 693.583 li
225.744 750.784 li
225.955 750.784 li
225.776 752.112 225.834 753.619 225.967 754.708 cv
226.423 758.415 227.563 761.944 231.221 762.7 cv
234.88 763.456 238.459 761.106 239.217 757.446 cv
cp
f
900.416 726.413 mo
899.066 727.765 896.877 727.763 895.526 726.413 cv
894.172 725.063 894.172 722.874 895.526 721.523 cv
896.877 720.175 899.066 720.175 900.416 721.523 cv
901.766 722.874 901.766 725.063 900.416 726.413 cv
cp
346.225 439.106 mo
344.314 439.085 342.784 437.524 342.804 435.614 cv
342.82 433.706 344.385 432.171 346.293 432.19 cv
348.203 432.212 349.733 433.772 349.715 435.685 cv
349.695 437.595 348.135 439.126 346.225 439.106 cv
cp
894.953 718.989 mo
893.575 719.862 891.896 720.957 890.903 722.097 cv
885.115 722.097 li
873.446 711.452 li
730.263 711.452 li
713.263 729.456 li
656.938 729.456 li
650.891 734.149 li
601.635 733.948 li
566.331 698.208 li
566.331 682.167 li
557.481 674.298 li
522.235 674.298 li
515.572 679.815 li
459.203 679.815 li
360.289 581.81 li
360.289 551.835 li
373.455 539.165 li
373.455 497.167 li
352.158 475.489 li
352.158 440.817 li
352.952 439.381 352.393 436.506 351.925 434.319 cv
351.141 430.663 348.967 427.524 345.228 427.487 cv
341.494 427.452 338.435 430.444 338.395 434.185 cv
338.361 437.917 341.569 439.782 345.096 441.015 cv
346.072 441.357 347.428 441.713 348.701 441.842 cv
348.701 476.903 li
369.998 498.581 li
369.998 537.692 li
356.831 550.364 li
356.831 583.253 li
457.276 682.774 li
457.783 683.274 li
516.817 683.274 li
523.48 677.755 li
556.168 677.755 li
562.873 683.72 li
562.873 699.628 li
600.183 737.401 li
652.069 737.612 li
658.123 732.915 li
714.751 732.915 li
731.754 714.909 li
872.104 714.909 li
883.775 725.554 li
890.807 725.554 li
891.826 726.771 893.659 727.917 894.953 728.558 cv
898.303 730.214 901.879 731.198 904.522 728.558 cv
907.162 725.913 907.162 721.634 904.519 718.989 cv
901.879 716.349 898.108 716.989 894.953 718.989 cv
cp
f
638.688 719.429 mo
637.408 720.847 635.223 720.954 633.805 719.673 cv
632.387 718.396 632.276 716.208 633.559 714.792 cv
634.842 713.376 637.026 713.265 638.44 714.544 cv
639.859 715.825 639.971 718.013 638.688 719.429 cv
cp
393.499 577.352 mo
392.127 576.03 392.088 573.839 393.414 572.466 cv
394.74 571.089 396.93 571.052 398.305 572.38 cv
399.678 573.706 399.715 575.896 398.389 577.269 cv
397.06 578.644 394.873 578.679 393.499 577.352 cv
cp
632.879 712.681 mo
631.743 713.315 630.193 714.381 629.198 715.513 cv
622.276 715.513 li
569.235 660.458 li
515.35 660.011 li
510.016 666.933 li
462.9 666.933 li
397.334 599.097 li
397.334 582.221 li
398.637 581.244 399.878 579.208 400.543 577.804 cv
402.141 574.425 403.063 570.833 400.373 568.237 cv
397.688 565.644 393.404 565.718 390.807 568.405 cv
388.215 571.093 388.923 574.849 390.977 577.972 cv
391.802 579.226 392.818 580.729 393.877 581.721 cv
393.877 600.493 li
461.434 670.392 li
511.718 670.392 li
517.041 663.483 li
567.753 663.901 li
620.808 718.97 li
628.836 718.97 li
629.817 720.196 631.781 721.344 633.363 722.233 cv
636.616 724.071 640.409 724.523 642.916 721.751 cv
645.42 718.979 645.207 714.702 642.435 712.196 cv
639.659 709.692 636.141 710.858 632.879 712.681 cv
cp
f
652.836 669.669 mo
650.965 670.058 649.135 668.856 648.747 666.987 cv
648.361 665.116 649.559 663.288 651.43 662.899 cv
653.298 662.511 655.133 663.71 655.516 665.581 cv
655.905 667.45 654.706 669.276 652.836 669.669 cv
cp
393.499 513.534 mo
392.127 512.208 392.088 510.019 393.414 508.644 cv
394.74 507.271 396.93 507.231 398.305 508.56 cv
399.678 509.886 399.715 512.075 398.389 513.448 cv
397.06 514.821 394.873 514.86 393.499 513.534 cv
cp
659.887 663.54 mo
659.127 659.882 655.551 657.528 651.891 658.288 cv
648.233 659.05 647.096 662.579 646.643 666.288 cv
646.451 667.839 646.414 670.241 647.003 671.762 cv
640.335 679.899 li
630.215 679.899 li
583.083 629.017 li
484.216 628.464 li
467.345 637.688 li
445.136 637.688 li
412.858 607.116 li
412.858 538.429 li
397.334 524.398 li
397.334 518.4 li
398.637 517.424 399.878 515.387 400.543 513.981 cv
402.141 510.606 403.063 507.013 400.373 504.415 cv
397.688 501.821 393.404 501.896 390.807 504.583 cv
388.215 507.272 388.923 511.028 390.977 514.149 cv
391.803 515.404 392.822 516.912 393.881 517.903 cv
393.877 517.903 li
393.877 525.935 li
409.401 539.966 li
409.401 608.604 li
443.758 641.146 li
468.228 641.146 li
485.09 631.927 li
581.563 632.468 li
628.705 683.358 li
641.974 683.358 li
650.223 673.288 li
650.088 673.178 li
651.531 672.92 653.24 672.171 654.64 671.536 cv
658.046 669.993 660.646 667.196 659.887 663.54 cv
cp
f
425.65 599.852 mo
427.559 599.858 429.1 601.411 429.092 603.323 cv
429.087 605.233 427.532 606.774 425.623 606.767 cv
423.715 606.757 422.172 605.204 422.181 603.296 cv
422.188 601.388 423.74 599.843 425.65 599.852 cv
cp
417.764 601.892 mo
417.754 605.626 420.971 607.472 424.505 608.681 cv
425.618 609.063 427.215 609.45 428.627 609.512 cv
428.903 610.188 429.384 610.787 430.063 611.187 cv
438.806 616.319 li
439.355 616.644 439.959 616.796 440.553 616.796 cv
441.74 616.796 442.895 616.185 443.538 615.089 cv
444.506 613.442 443.954 611.323 442.307 610.356 cv
433.563 605.224 li
433.016 604.9 432.417 604.761 431.826 604.759 cv
431.693 603.801 431.487 602.817 431.295 601.946 cv
430.488 598.292 428.294 595.167 424.559 595.155 cv
420.821 595.142 417.781 598.153 417.764 601.892 cv
cp
f
336.313 516.565 mo
334.404 516.554 332.861 515.003 332.87 513.095 cv
332.877 511.185 334.43 509.64 336.34 509.649 cv
338.25 509.657 339.789 511.21 339.783 513.122 cv
339.777 515.032 338.223 516.573 336.313 516.565 cv
cp
899.798 741.14 mo
901.078 739.724 903.258 739.606 904.681 740.888 cv
906.1 742.163 906.214 744.349 904.938 745.767 cv
903.658 747.187 901.474 747.302 900.056 746.023 cv
898.633 744.747 898.519 742.562 899.798 741.14 cv
cp
341.984 511.743 mo
341.178 508.091 338.983 504.966 335.248 504.954 cv
331.511 504.939 328.471 507.952 328.453 511.689 cv
328.443 515.425 331.66 517.269 335.194 518.479 cv
336.408 518.898 338.203 519.328 339.698 519.325 cv
351.088 530.319 li
351.088 586.071 li
454.584 689.075 li
455.088 689.577 li
519.746 689.577 li
525.85 684.22 li
551.949 684.22 li
557.686 688.298 li
557.686 703.04 li
597.15 743.001 li
653.809 743.886 li
659.873 738.976 li
716.643 738.976 li
732.634 721.489 li
869.508 721.489 li
894.604 744.541 li
895.217 746.058 897.698 747.505 899.612 748.583 cv
902.873 750.415 906.666 750.858 909.169 748.083 cv
911.667 745.308 911.445 741.028 908.669 738.53 cv
905.89 736.032 902.371 737.2 899.112 739.03 cv
898.203 739.539 897.027 740.329 896.086 741.206 cv
870.855 718.032 li
731.11 718.032 li
715.12 735.519 li
658.646 735.519 li
652.606 740.411 li
598.617 739.567 li
561.144 701.622 li
561.144 686.513 li
553.055 680.761 li
524.547 680.761 li
518.442 686.12 li
456.516 686.12 li
354.546 584.634 li
354.546 528.851 li
342.57 517.291 li
342.828 515.741 342.375 513.515 341.984 511.743 cv
cp
f
889.688 708.798 mo
888.408 710.218 886.223 710.331 884.806 709.054 cv
883.384 707.776 883.269 705.589 884.548 704.171 cv
885.829 702.753 888.01 702.634 889.432 703.915 cv
890.85 705.192 890.965 707.378 889.688 708.798 cv
cp
394.783 539.667 mo
396.689 539.64 398.258 541.169 398.283 543.079 cv
398.31 544.989 396.781 546.558 394.869 546.581 cv
392.963 546.606 391.395 545.079 391.368 543.169 cv
391.344 541.261 392.871 539.692 394.783 539.667 cv
cp
893.419 701.558 mo
890.64 699.06 887.122 700.231 883.863 702.062 cv
882.705 702.709 881.116 703.812 880.127 704.972 cv
725.063 705.403 li
709.075 722.642 li
654.533 722.642 li
647.908 727.292 li
604.653 727.292 li
573.246 695.753 li
573.246 678.667 li
560.037 667.798 li
521.969 667.798 li
515.052 673.071 li
461.357 673.071 li
379.664 591.444 li
379.664 560.05 li
390.906 549.338 li
392.496 549.479 394.627 548.975 396.008 548.489 cv
399.533 547.243 402.734 545.368 402.684 541.634 cv
402.635 537.898 399.566 534.909 395.83 534.958 cv
392.094 535.007 389.927 538.155 389.154 541.812 cv
388.824 543.383 388.449 545.307 388.555 546.802 cv
376.207 558.571 li
376.207 592.876 li
459.925 676.53 li
516.22 676.53 li
523.137 671.255 li
558.798 671.255 li
569.789 680.3 li
569.789 697.183 li
603.218 730.751 li
649 730.751 li
655.624 726.101 li
710.584 726.101 li
726.576 708.854 li
879.894 708.43 li
880.896 709.627 882.814 710.741 884.363 711.612 cv
887.625 713.446 891.416 713.892 893.92 711.112 cv
896.418 708.335 896.194 704.062 893.419 701.558 cv
cp
f
503.576 782.083 mo
503.179 783.948 501.342 785.142 499.475 784.743 cv
497.607 784.347 496.414 782.511 496.813 780.644 cv
497.211 778.776 499.047 777.583 500.915 777.981 cv
502.782 778.378 503.975 780.216 503.576 782.083 cv
cp
214.14 485.724 mo
212.23 485.689 210.711 484.112 210.743 482.204 cv
210.775 480.296 212.351 478.774 214.26 478.808 cv
216.17 478.841 217.69 480.415 217.656 482.325 cv
217.623 484.233 216.049 485.757 214.14 485.724 cv
cp
503.191 773.948 mo
499.538 773.169 497.072 775.942 495.165 779.157 cv
494.41 780.429 493.486 782.445 493.326 784.04 cv
486.551 790.405 li
427.902 790.405 li
416.352 778.188 li
416.352 728.024 li
399.348 711.019 li
307.293 711.019 li
233.524 635.972 li
233.524 497.13 li
220.326 486.06 li
220.426 484.514 220.012 482.552 219.596 481.247 cv
218.461 477.69 216.688 474.431 212.949 474.364 cv
209.215 474.3 206.134 477.274 206.068 481.013 cv
206.004 484.747 209.083 487.011 212.713 487.892 cv
214.386 488.297 216.457 488.761 217.994 488.617 cv
230.066 498.743 li
230.066 637.386 li
305.845 714.477 li
397.916 714.477 li
412.895 729.456 li
412.895 779.565 li
426.413 793.862 li
487.922 793.862 li
495.423 786.815 li
496.863 787.192 498.793 787.197 500.375 787.179 cv
504.109 787.14 507.621 785.626 508.4 781.972 cv
509.178 778.317 506.845 774.724 503.191 773.948 cv
cp
f
313.148 785.942 mo
311.799 787.29 309.609 787.29 308.261 785.942 cv
306.91 784.591 306.91 782.401 308.261 781.052 cv
309.609 779.7 311.799 779.7 313.148 781.052 cv
314.499 782.401 314.499 784.591 313.148 785.942 cv
cp
305.726 776.944 mo
303.084 779.589 303.726 783.356 305.726 786.513 cv
306.496 787.729 307.439 789.18 308.433 790.187 cv
308.082 790.187 li
308.082 797.175 li
311.539 797.175 li
311.539 791.163 li
313.017 790.405 314.523 788.071 315.293 786.513 cv
316.948 783.163 317.935 779.589 315.293 776.944 cv
312.65 774.304 308.369 774.304 305.726 776.944 cv
cp
f
336.723 785.683 mo
334.813 785.648 333.292 784.071 333.326 782.165 cv
333.358 780.255 334.935 778.733 336.844 778.767 cv
338.752 778.802 340.273 780.374 340.238 782.286 cv
340.206 784.194 338.63 785.716 336.723 785.683 cv
cp
342.18 781.206 mo
341.043 777.648 339.269 774.39 335.533 774.325 cv
331.796 774.259 328.717 777.233 328.649 780.972 cv
328.586 784.704 331.664 786.97 335.296 787.852 cv
336.721 788.196 338.433 788.584 339.863 788.606 cv
343.307 791.077 li
343.307 797.175 li
346.766 797.175 li
346.766 789.302 li
342.858 786.501 li
343.101 784.903 342.641 782.651 342.18 781.206 cv
cp
f
358.502 787.157 mo
356.592 787.124 355.071 785.548 355.103 783.64 cv
355.136 781.731 356.711 780.21 358.621 780.243 cv
360.53 780.274 362.052 781.851 362.019 783.761 cv
361.984 785.669 360.41 787.19 358.502 787.157 cv
cp
363.955 782.683 mo
362.82 779.122 361.049 775.866 357.31 775.802 cv
353.576 775.733 350.495 778.712 350.43 782.448 cv
350.365 786.181 353.443 788.444 357.074 789.327 cv
359.011 789.799 361.483 790.35 363.037 789.934 cv
373.319 798.503 li
375.535 795.845 li
364.697 786.815 li
364.664 785.404 364.313 783.803 363.955 782.683 cv
cp
f
383.678 640.976 mo
381.789 640.696 380.485 638.938 380.764 637.05 cv
381.041 635.161 382.801 633.856 384.689 634.134 cv
386.578 634.411 387.883 636.173 387.603 638.063 cv
387.324 639.95 385.566 641.253 383.678 640.976 cv
cp
389.667 637.243 mo
388.999 633.567 387.66 630.106 383.965 629.56 cv
380.269 629.015 376.828 631.565 376.281 635.265 cv
375.736 638.958 378.496 641.602 381.982 642.944 cv
383.771 643.633 386.045 644.465 387.634 644.343 cv
395.989 653.948 li
398.6 651.681 li
389.855 641.629 li
390.041 640.187 389.887 638.451 389.667 637.243 cv
cp
f
303.82 484.567 mo
303.425 486.435 301.587 487.63 299.719 487.231 cv
297.851 486.833 296.658 484.997 297.057 483.132 cv
297.455 481.263 299.291 480.071 301.159 480.468 cv
303.026 480.866 304.219 482.702 303.82 484.567 cv
cp
303.435 476.435 mo
299.781 475.657 297.316 478.429 295.41 481.644 cv
294.724 482.799 293.892 484.573 293.625 486.085 cv
286.674 494.005 li
289.273 496.284 li
295.461 489.235 li
296.919 489.674 298.956 489.686 300.619 489.667 cv
304.353 489.626 307.866 488.112 308.645 484.458 cv
309.422 480.806 307.089 477.214 303.435 476.435 cv
cp
f
338.336 575.954 mo
337.01 577.327 334.82 577.362 333.445 576.038 cv
332.073 574.712 332.035 572.524 333.361 571.151 cv
334.686 569.774 336.875 569.737 338.25 571.063 cv
339.625 572.39 339.664 574.579 338.336 575.954 cv
cp
340.322 566.921 mo
337.635 564.325 333.352 564.399 330.756 567.087 cv
328.16 569.776 328.868 573.534 330.924 576.653 cv
331.973 578.25 333.332 580.249 334.689 581.078 cv
334.689 589.073 li
338.146 589.073 li
338.146 580.138 li
338.111 580.138 li
339.092 579.074 339.967 577.588 340.488 576.489 cv
342.086 573.108 343.01 569.515 340.322 566.921 cv
cp
f
181.607 677.077 mo
181.607 686.009 li
185.064 686.009 li
185.064 677.077 li
181.607 677.077 li
cp
f
353.813 637.755 mo
351.966 638.231 350.078 637.122 349.601 635.271 cv
349.123 633.419 350.236 631.536 352.087 631.058 cv
353.934 630.583 355.818 631.694 356.298 633.542 cv
356.774 635.392 355.663 637.276 353.813 637.755 cv
cp
357.037 627.624 mo
355.549 626.743 352.29 628.331 350.527 629.477 cv
347.4 631.523 344.736 634.101 345.671 637.718 cv
346.603 641.335 350.291 643.513 353.91 642.579 cv
357.527 641.646 358.889 638.073 358.77 634.339 cv
358.691 631.854 358.529 628.503 357.037 627.624 cv
cp
f
203.692 734.538 mo
205.019 733.165 207.207 733.13 208.582 734.454 cv
209.955 735.78 209.992 737.97 208.666 739.345 cv
207.342 740.718 205.15 740.755 203.776 739.427 cv
202.402 738.102 202.363 735.913 203.692 734.538 cv
cp
201.705 743.571 mo
204.392 746.165 208.675 746.089 211.271 743.405 cv
213.867 740.716 213.158 736.96 211.104 733.839 cv
210.056 732.245 208.697 730.246 207.34 729.415 cv
207.34 721.419 li
203.881 721.419 li
203.881 730.352 li
203.916 730.352 li
202.935 731.416 202.06 732.904 201.538 734.007 cv
199.941 737.384 199.019 740.974 201.705 743.571 cv
cp
f
301.572 739.448 mo
302.898 738.073 305.087 738.036 306.461 739.362 cv
307.835 740.692 307.873 742.878 306.545 744.253 cv
305.22 745.628 303.031 745.665 301.656 744.339 cv
300.281 743.013 300.244 740.823 301.572 739.448 cv
cp
307.161 746.774 mo
308.756 745.727 310.756 744.368 311.586 743.011 cv
319.579 743.011 li
319.579 739.554 li
310.647 739.554 li
310.647 739.589 li
309.584 738.608 308.096 737.732 306.994 737.21 cv
303.617 735.612 300.025 734.69 297.43 737.378 cv
294.835 740.065 294.909 744.349 297.597 746.946 cv
300.285 749.54 304.041 748.829 307.161 746.774 cv
cp
f
387.174 743.284 mo
385.265 743.284 383.717 741.733 383.717 739.823 cv
383.717 737.915 385.265 736.366 387.174 736.366 cv
389.085 736.366 390.632 737.915 390.632 739.823 cv
390.632 741.733 389.085 743.284 387.174 743.284 cv
cp
386.091 732.771 mo
381.889 732.771 378.486 736.177 378.486 740.378 cv
378.486 744.575 381.889 747.981 386.091 747.981 cv
390.287 747.981 393.692 744.575 393.692 740.378 cv
393.692 736.177 390.287 732.771 386.091 732.771 cv
cp
f
382.48 765.794 mo
380.57 765.794 379.023 764.243 379.023 762.335 cv
379.023 760.425 380.57 758.876 382.48 758.876 cv
384.391 758.876 385.938 760.425 385.938 762.335 cv
385.938 764.243 384.391 765.794 382.48 765.794 cv
cp
381.395 755.28 mo
377.195 755.28 373.793 758.685 373.793 762.886 cv
373.793 767.087 377.195 770.489 381.395 770.489 cv
385.594 770.489 388.998 767.087 388.998 762.886 cv
388.998 758.685 385.594 755.28 381.395 755.28 cv
cp
f
365.996 446.55 mo
367.906 446.55 369.453 448.099 369.453 450.011 cv
369.453 451.919 367.906 453.468 365.996 453.468 cv
364.086 453.468 362.538 451.919 362.538 450.011 cv
362.538 448.099 364.086 446.55 365.996 446.55 cv
cp
364.911 458.165 mo
369.111 458.165 372.514 454.763 372.514 450.561 cv
372.514 446.36 369.111 442.956 364.911 442.956 cv
360.711 442.956 357.308 446.36 357.308 450.561 cv
357.308 454.763 360.711 458.165 364.911 458.165 cv
cp
f
355.383 666.458 mo
354.049 667.827 351.86 667.858 350.492 666.532 cv
349.123 665.206 349.085 663.013 350.416 661.642 cv
351.746 660.271 353.934 660.237 355.305 661.567 cv
356.675 662.896 356.709 665.087 355.383 666.458 cv
cp
901.926 756.438 mo
903.205 755.021 905.387 754.903 906.808 756.185 cv
908.227 757.458 908.341 759.646 907.063 761.065 cv
905.785 762.483 903.6 762.599 902.182 761.321 cv
900.76 760.042 900.645 757.858 901.926 756.438 cv
cp
593.269 749.7 mo
655.962 750.354 li
662.019 745.563 li
720.096 745.563 li
734.793 729.558 li
866.442 729.558 li
896.701 759.746 li
897.246 761.297 899.785 762.782 901.739 763.88 cv
905.001 765.712 908.794 766.157 911.296 763.38 cv
913.795 760.604 913.572 756.327 910.796 753.827 cv
908.019 751.327 904.498 752.499 901.24 754.327 cv
900.353 754.824 899.213 755.589 898.283 756.441 cv
867.871 726.101 li
733.272 726.101 li
718.577 742.106 li
660.818 742.106 li
654.776 746.884 li
594.72 746.259 li
553.797 705.12 li
553.797 691.942 li
548.701 688.546 li
526.942 688.546 li
521.866 693.298 li
452.44 693.298 li
433.213 674.282 li
384.42 674.282 li
372.432 662.61 li
360.24 662.61 li
359.26 661.313 357.239 660.077 355.843 659.413 cv
352.469 657.81 348.879 656.882 346.277 659.562 cv
343.676 662.245 343.743 666.528 346.426 669.13 cv
349.108 671.727 352.867 671.028 355.99 668.979 cv
357.254 668.152 358.77 667.131 359.764 666.069 cv
371.026 666.069 li
383.014 677.739 li
431.79 677.739 li
451.019 696.757 li
523.234 696.757 li
528.31 692.003 li
547.654 692.003 li
550.34 693.792 li
550.34 706.546 li
593.269 749.7 li
cp
f
636.728 660.12 mo
638.616 660.398 639.928 662.149 639.65 664.04 cv
639.374 665.929 637.618 667.237 635.729 666.962 cv
633.838 666.687 632.532 664.931 632.809 663.042 cv
633.082 661.149 634.838 659.843 636.728 660.12 cv
cp
432.206 575.329 mo
430.927 576.749 428.741 576.866 427.322 575.589 cv
425.902 574.313 425.785 572.124 427.063 570.708 cv
428.34 569.288 430.523 569.171 431.946 570.45 cv
433.367 571.726 433.482 573.913 432.206 575.329 cv
cp
443.033 571.519 mo
437.188 571.519 li
436.34 570.153 434.127 568.866 432.383 567.888 cv
429.121 566.058 425.33 565.616 422.832 568.396 cv
420.334 571.173 420.557 575.448 423.336 577.95 cv
426.116 580.444 429.633 579.271 432.891 577.44 cv
433.898 576.875 435.23 575.966 436.212 574.976 cv
441.538 574.976 li
488.554 625.009 li
593.639 625.009 li
610.411 644.296 li
630.539 658.889 li
630.188 660.375 630.309 662.426 630.435 664.097 cv
630.718 667.825 632.454 671.226 636.151 671.767 cv
639.847 672.306 643.283 669.749 643.824 666.054 cv
644.36 662.352 641.434 660.075 638.103 658.38 cv
636.856 657.743 634.934 657.001 633.375 656.874 cv
633.47 656.741 li
612.89 641.878 li
595.216 621.55 li
490.049 621.55 li
443.033 571.519 li
cp
f
301.882 544.866 mo
302.28 542.999 304.115 541.808 305.984 542.204 cv
307.851 542.602 309.044 544.438 308.646 546.306 cv
308.25 548.173 306.412 549.366 304.545 548.968 cv
302.677 548.569 301.483 546.735 301.882 544.866 cv
cp
539.287 704.552 mo
537.376 704.544 535.836 702.991 535.843 701.081 cv
535.85 699.171 537.403 697.628 539.315 697.638 cv
541.223 697.646 542.762 699.198 542.756 701.108 cv
542.752 703.021 541.195 704.56 539.287 704.552 cv
cp
905.504 778.773 mo
889.631 763.567 li
889.631 758.148 li
861.807 731.042 li
735.443 731.042 li
721.181 746.253 li
663.729 746.253 li
658.326 751.648 li
592.987 751.648 li
545.609 703.856 li
545.553 702.525 545.242 701.01 544.961 699.729 cv
544.153 696.077 541.958 692.954 538.22 692.94 cv
534.486 692.927 531.443 695.938 531.426 699.677 cv
531.416 703.413 534.633 705.257 538.17 706.468 cv
539.781 707.021 542.4 707.589 543.996 707.14 cv
591.545 755.106 li
490.961 755.106 li
425.264 691.569 li
338.398 691.569 li
296.627 650.222 li
296.627 555.583 li
300.228 550.952 li
301.689 551.409 303.759 551.424 305.444 551.405 cv
309.18 551.362 312.691 549.851 313.469 546.196 cv
314.248 542.542 311.914 538.95 308.261 538.171 cv
304.607 537.394 302.142 540.169 300.236 543.38 cv
299.594 544.464 298.824 546.09 298.51 547.533 cv
293.17 554.396 li
293.17 651.663 li
336.978 695.028 li
423.865 695.028 li
489.563 758.563 li
610.019 758.563 li
620.357 771.487 li
620.357 797.175 li
623.816 797.175 li
623.816 770.276 li
611.681 755.106 li
659.759 755.106 li
665.16 749.71 li
722.68 749.71 li
736.942 734.499 li
860.402 734.499 li
886.173 759.608 li
886.173 765.044 li
904.117 782.229 li
934.25 782.229 li
952.322 802.085 li
954.879 799.759 li
935.781 778.773 li
905.504 778.773 li
cp
f
166.81 578.606 mo
166.81 583.86 162.555 588.116 157.301 588.116 cv
152.049 588.116 147.793 583.86 147.793 578.606 cv
147.793 573.354 152.049 569.099 157.301 569.099 cv
162.555 569.099 166.81 573.354 166.81 578.606 cv
1 1 1 rgb
f
304.408 590.286 mo
304.408 595.54 300.151 599.794 294.898 599.794 cv
289.646 599.794 285.391 595.54 285.391 590.286 cv
285.391 585.036 289.646 580.776 294.898 580.776 cv
300.151 580.776 304.408 585.036 304.408 590.286 cv
f
319.319 636.19 mo
319.319 641.442 315.064 645.698 309.81 645.698 cv
304.56 645.698 300.302 641.442 300.302 636.19 cv
300.302 630.938 304.56 626.683 309.81 626.683 cv
315.064 626.683 319.319 630.938 319.319 636.19 cv
f
287.972 762.886 mo
287.972 768.138 283.715 772.396 278.463 772.396 cv
273.211 772.396 268.953 768.138 268.953 762.886 cv
268.953 757.634 273.211 753.378 278.463 753.378 cv
283.715 753.378 287.972 757.634 287.972 762.886 cv
f
463.991 773.815 mo
463.991 779.067 459.736 783.323 454.481 783.323 cv
449.231 783.323 444.974 779.067 444.974 773.815 cv
444.974 768.563 449.231 764.306 454.481 764.306 cv
459.736 764.306 463.991 768.563 463.991 773.815 cv
f
484.653 713.181 mo
484.653 718.433 480.397 722.69 475.145 722.69 cv
469.891 722.69 465.636 718.433 465.636 713.181 cv
465.636 707.929 469.891 703.673 475.145 703.673 cv
480.397 703.673 484.653 707.929 484.653 713.181 cv
f
326.34 596.175 mo
326.34 590.925 330.596 586.665 335.849 586.665 cv
341.101 586.665 345.357 590.925 345.357 596.175 cv
345.357 601.427 341.101 605.683 335.849 605.683 cv
330.596 605.683 326.34 601.427 326.34 596.175 cv
f
368.427 558.015 mo
368.427 552.765 372.685 548.507 377.935 548.507 cv
383.189 548.507 387.444 552.765 387.444 558.015 cv
387.444 563.267 383.189 567.523 377.935 567.523 cv
372.685 567.523 368.427 563.267 368.427 558.015 cv
f
193.412 669.974 mo
193.412 675.227 189.156 679.483 183.903 679.483 cv
178.65 679.483 174.395 675.227 174.395 669.974 cv
174.395 664.722 178.65 660.466 183.903 660.466 cv
189.156 660.466 193.412 664.722 193.412 669.974 cv
f
192.463 692.435 mo
192.463 697.687 188.207 701.942 182.955 701.942 cv
177.702 701.942 173.445 697.687 173.445 692.435 cv
173.445 687.185 177.702 682.927 182.955 682.927 cv
188.207 682.927 192.463 687.185 192.463 692.435 cv
f
215.688 714.317 mo
215.688 719.569 211.43 723.825 206.18 723.825 cv
200.927 723.825 196.67 719.569 196.67 714.317 cv
196.67 709.065 200.927 704.808 206.18 704.808 cv
211.43 704.808 215.688 709.065 215.688 714.317 cv
f
326.685 751.362 mo
321.43 751.362 317.175 747.104 317.175 741.852 cv
317.175 736.599 321.43 732.343 326.685 732.343 cv
331.935 732.343 336.193 736.599 336.193 741.852 cv
336.193 747.104 331.935 751.362 326.685 751.362 cv
f
160.34 618.501 mo
160.34 623.753 156.082 628.011 150.83 628.011 cv
145.578 628.011 141.321 623.753 141.321 618.501 cv
141.321 613.247 145.578 608.991 150.83 608.991 cv
156.082 608.991 160.34 613.247 160.34 618.501 cv
f
241.873 585.352 mo
241.873 590.606 237.617 594.86 232.364 594.86 cv
227.111 594.86 222.855 590.606 222.855 585.352 cv
222.855 580.101 227.111 575.843 232.364 575.843 cv
237.617 575.843 241.873 580.101 241.873 585.352 cv
f
188.869 764.815 mo
188.869 770.067 184.612 774.323 179.36 774.323 cv
174.107 774.323 169.851 770.067 169.851 764.815 cv
169.851 759.563 174.107 755.306 179.36 755.306 cv
184.612 755.306 188.869 759.563 188.869 764.815 cv
f
294.898 497.872 mo
294.898 503.126 290.642 507.38 285.391 507.38 cv
280.139 507.38 275.882 503.126 275.882 497.872 cv
275.882 492.622 280.139 488.362 285.391 488.362 cv
290.642 488.362 294.898 492.622 294.898 497.872 cv
f
631.093 646.249 mo
631.093 651.53 626.811 655.815 621.527 655.815 cv
616.246 655.815 611.96 651.53 611.96 646.249 cv
611.96 640.964 616.246 636.683 621.527 636.683 cv
626.811 636.683 631.093 640.964 631.093 646.249 cv
cp
f
598.748 682.868 mo
598.748 688.151 594.466 692.435 589.181 692.435 cv
583.901 692.435 579.615 688.151 579.615 682.868 cv
579.615 677.585 583.901 673.302 589.181 673.302 cv
594.466 673.302 598.748 677.585 598.748 682.868 cv
cp
f
546.132 646.249 mo
546.132 651.53 541.85 655.815 536.566 655.815 cv
531.285 655.815 527 651.53 527 646.249 cv
527 640.964 531.285 636.683 536.566 636.683 cv
541.85 636.683 546.132 640.964 546.132 646.249 cv
cp
f
503.55 604.989 mo
503.55 610.273 499.266 614.556 493.984 614.556 cv
488.702 614.556 484.419 610.273 484.419 604.989 cv
484.419 599.708 488.702 595.423 493.984 595.423 cv
499.266 595.423 503.55 599.708 503.55 604.989 cv
cp
f
481.975 640.075 mo
481.975 645.36 477.691 649.642 472.409 649.642 cv
467.124 649.642 462.843 645.36 462.843 640.075 cv
462.843 634.794 467.124 630.509 472.409 630.509 cv
477.691 630.509 481.975 634.794 481.975 640.075 cv
cp
f
458.494 611.394 mo
458.494 616.675 454.211 620.958 448.927 620.958 cv
443.645 620.958 439.361 616.675 439.361 611.394 cv
439.361 606.108 443.645 601.827 448.927 601.827 cv
454.211 601.827 458.494 606.108 458.494 611.394 cv
cp
f
381.291 664.341 mo
381.291 669.624 377.011 673.907 371.727 673.907 cv
366.444 673.907 362.16 669.624 362.16 664.341 cv
362.16 659.058 366.444 654.774 371.727 654.774 cv
377.011 654.774 381.291 659.058 381.291 664.341 cv
cp
f
371.727 620.757 mo
371.727 626.042 367.444 630.323 362.16 630.323 cv
356.879 630.323 352.594 626.042 352.594 620.757 cv
352.594 615.476 356.879 611.19 362.16 611.19 cv
367.444 611.19 371.727 615.476 371.727 620.757 cv
cp
f
527.628 718.763 mo
527.628 724.429 523.147 729.021 517.623 729.021 cv
512.096 729.021 507.617 724.429 507.617 718.763 cv
507.617 713.097 512.096 708.503 517.623 708.503 cv
523.147 708.503 527.628 713.097 527.628 718.763 cv
cp
f
411.659 659.208 mo
411.659 664.493 407.375 668.774 402.093 668.774 cv
396.809 668.774 392.527 664.493 392.527 659.208 cv
392.527 653.927 396.809 649.642 402.093 649.642 cv
407.375 649.642 411.659 653.927 411.659 659.208 cv
cp
f
374.42 490.095 mo
374.42 495.351 370.162 499.603 364.911 499.603 cv
359.657 499.603 355.402 495.351 355.402 490.095 cv
355.402 484.845 359.657 480.587 364.911 480.587 cv
370.162 480.587 374.42 484.845 374.42 490.095 cv
f
363.831 529.579 mo
363.831 534.833 359.575 539.089 354.322 539.089 cv
349.072 539.089 344.813 534.833 344.813 529.579 cv
344.813 524.327 349.072 520.071 354.322 520.071 cv
359.575 520.071 363.831 524.327 363.831 529.579 cv
f
184.331 339.012 mo
182.42 339.012 180.873 337.463 180.873 335.555 cv
180.873 333.643 182.42 332.094 184.331 332.094 cv
186.241 332.094 187.789 333.643 187.789 335.555 cv
187.789 337.463 186.241 339.012 184.331 339.012 cv
cp
132.809 288.182 mo
130.898 288.182 129.35 286.635 129.35 284.725 cv
129.35 282.815 130.898 281.266 132.809 281.266 cv
134.717 281.266 136.266 282.815 136.266 284.725 cv
136.266 286.635 134.717 288.182 132.809 288.182 cv
cp
115.363 103.635 mo
113.991 102.306 113.953 100.119 115.279 98.7441 cv
116.604 97.3711 118.793 97.332 120.167 98.6602 cv
121.543 99.9863 121.582 102.176 120.254 103.549 cv
118.928 104.92 116.738 104.961 115.363 103.635 cv
cp
185.719 329.898 mo
184.032 329.52 181.942 329.09 180.406 329.266 cv
142.641 290.18 li
139.898 278.975 li
134.035 274.228 li
134.035 144.678 li
119.34 129.838 li
119.34 108.388 li
120.59 107.375 121.766 105.436 122.407 104.084 cv
124.005 100.705 124.928 97.1133 122.24 94.5171 cv
119.553 91.9219 115.271 91.9961 112.674 94.6831 cv
110.078 97.373 110.787 101.129 112.842 104.248 cv
113.708 105.566 114.785 107.161 115.899 108.144 cv
115.882 108.144 li
115.882 131.258 li
130.578 146.099 li
130.578 275.879 li
132.918 277.773 li
132.527 277.711 132.131 277.67 131.723 277.67 cv
127.521 277.67 124.116 281.076 124.116 285.275 cv
124.116 289.475 127.521 292.879 131.723 292.879 cv
134.804 292.879 137.45 291.042 138.646 288.406 cv
139.504 291.912 li
178.136 331.895 li
178.07 333.438 178.518 335.376 178.955 336.664 cv
180.15 340.201 181.98 343.43 185.719 343.43 cv
189.453 343.43 192.482 340.4 192.482 336.664 cv
192.482 332.93 189.363 330.717 185.719 329.898 cv
cp
0 .862745 1 rgb
f
164.449 343.33 mo
162.537 343.33 160.991 341.783 160.991 339.873 cv
160.991 337.963 162.537 336.414 164.449 336.414 cv
166.36 336.414 167.906 337.963 167.906 339.873 cv
167.906 341.783 166.36 343.33 164.449 343.33 cv
cp
110.631 70.9023 mo
111.027 69.0332 112.863 67.8418 114.732 68.2402 cv
116.6 68.6348 117.789 70.4741 117.393 72.3398 cv
116.996 74.209 115.159 75.4023 113.293 75.0039 cv
111.426 74.6055 110.232 72.769 110.631 70.9023 cv
cp
165.837 334.219 mo
163.838 333.77 161.271 333.247 159.739 333.757 cv
108.103 282.33 li
108.103 218.676 li
93.8389 201.387 li
93.8389 153.051 li
103.357 144.107 li
102.493 83.853 li
109.264 77.082 li
110.7 77.4531 112.619 77.458 114.193 77.4395 cv
117.928 77.3984 121.439 75.8848 122.217 72.2305 cv
122.995 68.5781 120.664 64.9844 117.008 64.207 cv
113.354 63.4277 110.891 66.2012 108.983 69.4141 cv
108.227 70.6914 107.299 72.7178 107.144 74.3145 cv
99.0156 82.4434 li
99.8799 142.631 li
90.3809 151.555 li
90.3809 202.629 li
104.645 219.918 li
104.645 283.768 li
158.27 337.177 li
158.366 338.506 158.724 339.953 159.073 340.984 cv
160.269 344.523 162.099 347.75 165.837 347.75 cv
169.571 347.75 172.601 344.721 172.601 340.984 cv
172.601 337.248 169.482 335.037 165.837 334.219 cv
cp
f
344.578 344.199 mo
342.668 344.199 341.12 342.65 341.12 340.738 cv
341.12 338.828 342.668 337.281 344.578 337.281 cv
346.486 337.281 348.035 338.828 348.035 340.738 cv
348.035 342.65 346.486 344.199 344.578 344.199 cv
cp
209.577 343.236 mo
207.668 343.236 206.119 341.69 206.119 339.779 cv
206.119 337.869 207.668 336.322 209.577 336.322 cv
211.486 336.322 213.035 337.869 213.035 339.779 cv
213.035 341.69 211.486 343.236 209.577 343.236 cv
cp
345.964 335.086 mo
344.025 334.649 341.553 334.145 340.008 334.58 cv
325.851 318.707 li
232.394 318.707 li
214.15 333.709 li
212.545 333.327 210.031 333.872 208.465 334.402 cv
204.926 335.598 201.7 337.43 201.7 341.166 cv
201.7 344.902 204.73 347.932 208.465 347.932 cv
212.203 347.932 214.414 344.813 215.231 341.166 cv
215.541 339.788 215.881 338.139 215.904 336.742 cv
233.633 322.164 li
324.301 322.164 li
338.049 337.58 li
338.371 337.292 li
338.353 338.797 338.785 340.621 339.201 341.852 cv
340.396 345.389 342.228 348.617 345.964 348.617 cv
349.701 348.617 352.728 345.586 352.728 341.852 cv
352.728 338.117 349.611 335.904 345.964 335.086 cv
cp
f
145.159 74.6831 mo
143.25 74.6484 141.73 73.0742 141.763 71.166 cv
141.795 69.2578 143.37 67.7363 145.279 67.7671 cv
147.189 67.8047 148.711 69.377 148.677 71.2871 cv
148.643 73.1973 147.069 74.7168 145.159 74.6831 cv
cp
211.792 283.033 mo
213.164 284.359 213.202 286.549 211.877 287.922 cv
210.551 289.295 208.363 289.332 206.987 288.006 cv
205.613 286.68 205.573 284.49 206.902 283.117 cv
208.229 281.744 210.418 281.705 211.792 283.033 cv
cp
150.614 70.207 mo
149.48 66.6484 147.707 63.394 143.969 63.3262 cv
140.234 63.2617 137.154 66.2363 137.088 69.9707 cv
137.023 73.707 140.104 75.9722 143.732 76.853 cv
145.291 77.2334 147.203 77.666 148.7 77.6074 cv
148.406 77.9199 li
163.857 92.5371 li
163.857 107.449 li
152.621 119.191 li
152.621 197.982 li
207.08 251.146 li
207.08 278.98 li
206.119 280.041 205.262 281.501 204.748 282.586 cv
203.151 285.961 202.229 289.553 204.916 292.15 cv
207.604 294.742 211.885 294.668 214.482 291.984 cv
217.078 289.295 216.369 285.537 214.314 282.418 cv
213.264 280.818 211.9 278.81 210.537 277.983 cv
210.537 249.688 li
156.078 196.523 li
156.078 120.58 li
167.316 108.838 li
167.316 91.0469 li
151.231 75.832 li
151.604 74.2314 151.108 71.7578 150.614 70.207 cv
cp
f
201.484 312.957 mo
201.1 314.828 199.27 316.029 197.398 315.643 cv
195.528 315.256 194.325 313.428 194.713 311.555 cv
195.1 309.688 196.93 308.484 198.801 308.871 cv
200.67 309.258 201.871 311.088 201.484 312.957 cv
cp
143.598 103.937 mo
142.225 102.611 142.186 100.424 143.514 99.0488 cv
144.84 97.6738 147.028 97.6367 148.403 98.9648 cv
149.777 100.289 149.814 102.478 148.487 103.853 cv
147.16 105.224 144.973 105.263 143.598 103.937 cv
cp
205.857 314.996 mo
206.614 311.338 204.008 308.541 200.604 307.002 cv
199.135 306.337 197.328 305.554 195.842 305.339 cv
195.842 249.701 li
147.434 201.293 li
147.434 108.805 li
148.736 107.83 149.977 105.792 150.642 104.387 cv
152.238 101.01 153.162 97.416 150.473 94.8223 cv
147.787 92.2261 143.506 92.3008 140.906 94.9863 cv
138.313 97.6758 139.023 101.433 141.075 104.553 cv
142.003 105.964 143.173 107.693 144.37 108.648 cv
143.977 108.648 li
143.977 202.724 li
192.385 251.133 li
192.385 308.334 li
192.596 308.334 li
192.417 309.662 192.475 311.169 192.607 312.258 cv
193.063 315.965 194.203 319.494 197.861 320.25 cv
201.52 321.006 205.1 318.656 205.857 314.996 cv
cp
f
279.789 343.492 mo
278.439 344.84 276.25 344.84 274.901 343.492 cv
273.551 342.141 273.551 339.951 274.901 338.602 cv
276.25 337.25 278.439 337.25 279.789 338.602 cv
281.14 339.951 281.14 342.141 279.789 343.492 cv
cp
272.366 334.494 mo
269.725 337.139 270.366 340.906 272.366 344.063 cv
273.137 345.279 274.08 346.728 275.073 347.736 cv
274.723 347.736 li
274.723 354.725 li
278.18 354.725 li
278.18 348.713 li
279.657 347.955 281.164 345.621 281.934 344.063 cv
283.589 340.713 284.575 337.139 281.934 334.494 cv
279.291 331.853 275.01 331.853 272.366 334.494 cv
cp
f
303.363 343.232 mo
301.453 343.197 299.933 341.621 299.967 339.715 cv
299.999 337.805 301.575 336.283 303.484 336.316 cv
305.393 336.352 306.914 337.924 306.879 339.836 cv
306.847 341.744 305.27 343.266 303.363 343.232 cv
cp
308.82 338.756 mo
307.684 335.197 305.909 331.94 302.174 331.875 cv
298.436 331.809 295.357 334.783 295.29 338.522 cv
295.227 342.254 298.305 344.52 301.936 345.402 cv
303.361 345.746 305.073 346.134 306.504 346.156 cv
309.947 348.627 li
309.947 354.725 li
313.406 354.725 li
313.406 346.852 li
309.499 344.051 li
309.741 342.453 309.281 340.201 308.82 338.756 cv
cp
f
325.143 344.707 mo
323.232 344.674 321.712 343.098 321.744 341.19 cv
321.776 339.281 323.352 337.76 325.262 337.793 cv
327.171 337.824 328.692 339.4 328.659 341.31 cv
328.625 343.219 327.051 344.74 325.143 344.707 cv
cp
330.596 340.232 mo
329.461 336.672 327.689 333.416 323.951 333.352 cv
320.217 333.283 317.136 336.262 317.07 339.998 cv
317.006 343.73 320.084 345.994 323.715 346.877 cv
325.651 347.348 328.124 347.899 329.678 347.483 cv
339.96 356.053 li
342.176 353.395 li
331.338 344.364 li
331.305 342.954 330.953 341.353 330.596 340.232 cv
cp
f
148.248 234.627 mo
148.248 243.559 li
151.705 243.559 li
151.705 234.627 li
148.248 234.627 li
cp
f
170.333 292.088 mo
171.659 290.715 173.848 290.68 175.223 292.004 cv
176.596 293.33 176.633 295.52 175.307 296.895 cv
173.982 298.268 171.791 298.305 170.417 296.977 cv
169.043 295.652 169.004 293.463 170.333 292.088 cv
cp
168.346 301.121 mo
171.032 303.715 175.315 303.639 177.912 300.955 cv
180.508 298.266 179.799 294.51 177.744 291.389 cv
176.696 289.795 175.338 287.796 173.98 286.965 cv
173.98 278.969 li
170.521 278.969 li
170.521 287.902 li
170.557 287.902 li
169.575 288.966 168.7 290.454 168.179 291.557 cv
166.582 294.934 165.659 298.523 168.346 301.121 cv
cp
f
133.45 136.156 mo
133.45 141.41 129.195 145.666 123.941 145.666 cv
118.689 145.666 114.434 141.41 114.434 136.156 cv
114.434 130.904 118.689 126.648 123.941 126.648 cv
129.195 126.648 133.45 130.904 133.45 136.156 cv
1 1 1 rgb
f
254.612 320.435 mo
254.612 325.688 250.355 329.945 245.104 329.945 cv
239.852 329.945 235.594 325.688 235.594 320.435 cv
235.594 315.184 239.852 310.928 245.104 310.928 cv
250.355 310.928 254.612 315.184 254.612 320.435 cv
f
160.053 227.523 mo
160.053 232.777 155.797 237.033 150.544 237.033 cv
145.291 237.033 141.035 232.777 141.035 227.523 cv
141.035 222.271 145.291 218.015 150.544 218.015 cv
155.797 218.015 160.053 222.271 160.053 227.523 cv
f
159.104 249.984 mo
159.104 255.236 154.848 259.492 149.596 259.492 cv
144.343 259.492 140.086 255.236 140.086 249.984 cv
140.086 244.734 144.343 240.477 149.596 240.477 cv
154.848 240.477 159.104 244.734 159.104 249.984 cv
f
182.328 271.867 mo
182.328 277.119 178.07 281.375 172.82 281.375 cv
167.567 281.375 163.311 277.119 163.311 271.867 cv
163.311 266.615 167.567 262.357 172.82 262.357 cv
178.07 262.357 182.328 266.615 182.328 271.867 cv
f
126.98 176.051 mo
126.98 181.303 122.723 185.56 117.471 185.56 cv
112.219 185.56 107.962 181.303 107.962 176.051 cv
107.962 170.797 112.219 166.541 117.471 166.541 cv
122.723 166.541 126.98 170.797 126.98 176.051 cv
f
155.51 322.365 mo
155.51 327.617 151.253 331.873 146.001 331.873 cv
140.748 331.873 136.491 327.617 136.491 322.365 cv
136.491 317.113 140.748 312.855 146.001 312.855 cv
151.253 312.855 155.51 317.113 155.51 322.365 cv
f
300.828 1117.13 mo
298.918 1117.13 297.37 1115.58 297.37 1113.67 cv
297.37 1111.76 298.918 1110.21 300.828 1110.21 cv
302.736 1110.21 304.285 1111.76 304.285 1113.67 cv
304.285 1115.58 302.736 1117.13 300.828 1117.13 cv
cp
165.827 1116.17 mo
163.918 1116.17 162.369 1114.62 162.369 1112.71 cv
162.369 1110.8 163.918 1109.25 165.827 1109.25 cv
167.736 1109.25 169.285 1110.8 169.285 1112.71 cv
169.285 1114.62 167.736 1116.17 165.827 1116.17 cv
cp
302.214 1108.01 mo
300.275 1107.58 297.803 1107.07 296.258 1107.51 cv
282.101 1091.64 li
188.644 1091.64 li
170.4 1106.64 li
168.795 1106.26 166.281 1106.8 164.715 1107.33 cv
161.176 1108.53 157.95 1110.36 157.95 1114.09 cv
157.95 1117.83 160.98 1120.86 164.715 1120.86 cv
168.453 1120.86 170.664 1117.74 171.481 1114.09 cv
171.791 1112.72 172.131 1111.07 172.154 1109.67 cv
189.883 1095.09 li
280.551 1095.09 li
294.299 1110.51 li
294.621 1110.22 li
294.603 1111.73 295.035 1113.55 295.451 1114.78 cv
296.646 1118.32 298.478 1121.55 302.214 1121.55 cv
305.951 1121.55 308.978 1118.51 308.978 1114.78 cv
308.978 1111.05 305.861 1108.83 302.214 1108.01 cv
cp
0 .862745 1 rgb
f
101.409 847.611 mo
99.5 847.577 97.9805 846.003 98.0127 844.095 cv
98.0449 842.187 99.6201 840.665 101.529 840.695 cv
103.439 840.733 104.961 842.306 104.927 844.216 cv
104.893 846.126 103.319 847.646 101.409 847.611 cv
cp
168.042 1055.96 mo
169.414 1057.29 169.452 1059.48 168.127 1060.85 cv
166.801 1062.22 164.613 1062.26 163.237 1060.93 cv
161.863 1059.61 161.823 1057.42 163.152 1056.05 cv
164.479 1054.67 166.668 1054.63 168.042 1055.96 cv
cp
106.864 843.136 mo
105.73 839.577 103.957 836.322 100.219 836.255 cv
96.4844 836.19 93.4043 839.165 93.3379 842.899 cv
93.2734 846.636 96.3535 848.9 99.9824 849.781 cv
101.541 850.162 103.453 850.595 104.95 850.536 cv
104.656 850.849 li
120.107 865.466 li
120.107 880.378 li
108.871 892.12 li
108.871 970.911 li
163.33 1024.08 li
163.33 1051.91 li
162.369 1052.97 161.512 1054.43 160.998 1055.51 cv
159.401 1058.89 158.479 1062.48 161.166 1065.08 cv
163.854 1067.67 168.135 1067.6 170.732 1064.91 cv
173.328 1062.22 172.619 1058.47 170.564 1055.35 cv
169.514 1053.75 168.15 1051.74 166.787 1050.91 cv
166.787 1022.62 li
112.328 969.452 li
112.328 893.509 li
123.566 881.767 li
123.566 863.976 li
107.481 848.761 li
107.854 847.16 107.358 844.687 106.864 843.136 cv
cp
f
157.734 1085.89 mo
157.35 1087.76 155.52 1088.96 153.648 1088.57 cv
151.778 1088.18 150.575 1086.36 150.963 1084.48 cv
151.35 1082.62 153.18 1081.41 155.051 1081.8 cv
156.92 1082.19 158.121 1084.02 157.734 1085.89 cv
cp
99.8477 876.865 mo
98.4746 875.54 98.4365 873.352 99.7637 871.977 cv
101.09 870.602 103.278 870.565 104.653 871.894 cv
106.027 873.218 106.064 875.406 104.737 876.781 cv
103.41 878.152 101.223 878.191 99.8477 876.865 cv
cp
162.107 1087.92 mo
162.864 1084.27 160.258 1081.47 156.854 1079.93 cv
155.385 1079.27 153.578 1078.48 152.092 1078.27 cv
152.092 1022.63 li
103.684 974.222 li
103.684 881.734 li
104.986 880.759 106.227 878.721 106.892 877.315 cv
108.488 873.938 109.412 870.345 106.723 867.751 cv
104.037 865.154 99.7559 865.229 97.1563 867.915 cv
94.5635 870.604 95.2734 874.361 97.3252 877.481 cv
98.2529 878.893 99.4229 880.622 100.62 881.577 cv
100.227 881.577 li
100.227 975.652 li
148.635 1024.06 li
148.635 1081.26 li
148.846 1081.26 li
148.667 1082.59 148.725 1084.1 148.857 1085.19 cv
149.313 1088.89 150.453 1092.42 154.111 1093.18 cv
157.77 1093.93 161.35 1091.58 162.107 1087.92 cv
cp
f
236.039 1116.42 mo
234.689 1117.77 232.5 1117.77 231.151 1116.42 cv
229.801 1115.07 229.801 1112.88 231.151 1111.53 cv
232.5 1110.18 234.689 1110.18 236.039 1111.53 cv
237.39 1112.88 237.39 1115.07 236.039 1116.42 cv
cp
228.616 1107.42 mo
225.975 1110.07 226.616 1113.83 228.616 1116.99 cv
229.387 1118.21 230.33 1119.66 231.323 1120.67 cv
230.973 1120.67 li
230.973 1127.65 li
234.43 1127.65 li
234.43 1121.64 li
235.907 1120.88 237.414 1118.55 238.184 1116.99 cv
239.839 1113.64 240.825 1110.07 238.184 1107.42 cv
235.541 1104.78 231.26 1104.78 228.616 1107.42 cv
cp
f
259.613 1116.16 mo
257.703 1116.13 256.183 1114.55 256.217 1112.64 cv
256.249 1110.73 257.825 1109.21 259.734 1109.25 cv
261.643 1109.28 263.164 1110.85 263.129 1112.76 cv
263.097 1114.67 261.521 1116.19 259.613 1116.16 cv
cp
265.07 1111.68 mo
263.934 1108.13 262.159 1104.87 258.424 1104.8 cv
254.686 1104.74 251.607 1107.71 251.54 1111.45 cv
251.477 1115.18 254.555 1117.45 258.186 1118.33 cv
259.611 1118.67 261.323 1119.06 262.754 1119.08 cv
266.197 1121.56 li
266.197 1127.65 li
269.656 1127.65 li
269.656 1119.78 li
265.749 1116.98 li
265.991 1115.38 265.531 1113.13 265.07 1111.68 cv
cp
f
281.393 1117.64 mo
279.482 1117.6 277.962 1116.03 277.994 1114.12 cv
278.026 1112.21 279.602 1110.69 281.512 1110.72 cv
283.421 1110.75 284.942 1112.33 284.909 1114.24 cv
284.875 1116.15 283.301 1117.67 281.393 1117.64 cv
cp
286.846 1113.16 mo
285.711 1109.6 283.939 1106.34 280.201 1106.28 cv
276.467 1106.21 273.386 1109.19 273.32 1112.93 cv
273.256 1116.66 276.334 1118.92 279.965 1119.81 cv
281.901 1120.28 284.374 1120.83 285.928 1120.41 cv
296.21 1128.98 li
298.426 1126.32 li
287.588 1117.29 li
287.555 1115.88 287.203 1114.28 286.846 1113.16 cv
cp
f
104.498 1007.56 mo
104.498 1016.49 li
107.955 1016.49 li
107.955 1007.56 li
104.498 1007.56 li
cp
f
126.583 1065.02 mo
127.909 1063.64 130.098 1063.61 131.473 1064.93 cv
132.846 1066.26 132.883 1068.45 131.557 1069.82 cv
130.232 1071.2 128.041 1071.23 126.667 1069.9 cv
125.293 1068.58 125.254 1066.39 126.583 1065.02 cv
cp
124.596 1074.05 mo
127.282 1076.64 131.565 1076.57 134.162 1073.88 cv
136.758 1071.19 136.049 1067.44 133.994 1064.32 cv
132.946 1062.72 131.588 1060.72 130.23 1059.89 cv
130.23 1051.9 li
126.771 1051.9 li
126.771 1060.83 li
126.807 1060.83 li
125.825 1061.89 124.95 1063.38 124.429 1064.48 cv
122.832 1067.86 121.909 1071.45 124.596 1074.05 cv
cp
f
210.862 1093.36 mo
210.862 1098.62 206.605 1102.87 201.354 1102.87 cv
196.102 1102.87 191.844 1098.62 191.844 1093.36 cv
191.844 1088.11 196.102 1083.86 201.354 1083.86 cv
206.605 1083.86 210.862 1088.11 210.862 1093.36 cv
1 1 1 rgb
f
116.303 1000.45 mo
116.303 1005.71 112.047 1009.96 106.794 1009.96 cv
101.541 1009.96 97.2852 1005.71 97.2852 1000.45 cv
97.2852 995.2 101.541 990.943 106.794 990.943 cv
112.047 990.943 116.303 995.2 116.303 1000.45 cv
f
115.354 1022.91 mo
115.354 1028.17 111.098 1032.42 105.846 1032.42 cv
100.593 1032.42 96.3359 1028.17 96.3359 1022.91 cv
96.3359 1017.66 100.593 1013.4 105.846 1013.4 cv
111.098 1013.4 115.354 1017.66 115.354 1022.91 cv
f
138.578 1044.8 mo
138.578 1050.05 134.32 1054.3 129.07 1054.3 cv
123.817 1054.3 119.56 1050.05 119.56 1044.8 cv
119.56 1039.54 123.817 1035.29 129.07 1035.29 cv
134.32 1035.29 138.578 1039.54 138.578 1044.8 cv
f
992.489 164.902 mo
990.577 164.902 989.03 163.356 989.03 161.445 cv
989.03 159.533 990.577 157.987 992.489 157.987 cv
994.397 157.987 995.946 159.533 995.946 161.445 cv
995.946 163.356 994.397 164.902 992.489 164.902 cv
cp
812.376 82.2026 mo
966.55 82.2026 li
1004.73 120.948 li
1004.73 145.962 li
996.379 155.27 li
994.803 155.142 992.732 155.608 991.376 156.069 cv
987.837 157.264 984.61 159.094 984.61 162.831 cv
984.61 166.567 987.64 169.595 991.376 169.595 cv
995.112 169.595 997.323 166.477 998.142 162.831 cv
998.5 161.23 998.906 159.263 998.797 157.752 cv
1008.19 147.286 li
1008.19 119.529 li
967.999 78.7456 li
810.976 78.7456 li
791.38 97.7632 li
746.532 97.7632 li
746.532 101.221 li
792.782 101.221 li
812.376 82.2026 li
cp
0 .862745 1 rgb
f
993.694 129.123 mo
995.031 130.487 995.007 132.677 993.644 134.012 cv
992.278 135.349 990.091 135.326 988.755 133.961 cv
987.419 132.598 987.44 130.409 988.805 129.072 cv
990.169 127.734 992.358 127.759 993.694 129.123 cv
cp
819.29 92.0005 mo
960.806 92.0005 li
989.75 120.389 li
989.75 124.337 li
988.51 125.337 987.328 127.178 986.669 128.477 cv
984.978 131.811 983.953 135.374 986.569 138.044 cv
989.183 140.714 993.466 140.759 996.136 138.145 cv
998.804 135.528 998.2 131.754 996.233 128.577 cv
995.385 127.206 994.322 125.539 993.208 124.531 cv
993.208 118.937 li
962.216 88.5435 li
817.893 88.5435 li
792.824 112.813 li
746.532 112.813 li
746.532 116.271 li
794.222 116.271 li
819.29 92.0005 li
cp
f
989.798 194.006 mo
987.888 194.006 986.34 192.458 986.34 190.548 cv
986.34 188.637 987.888 187.09 989.798 187.09 cv
991.709 187.09 993.255 188.637 993.255 190.548 cv
993.255 192.458 991.709 194.006 989.798 194.006 cv
cp
801.401 73.8496 mo
970.302 73.8496 li
1014.53 118.361 li
1014.53 161.738 li
993.522 184.358 li
991.969 184.275 989.994 184.727 988.686 185.169 cv
985.147 186.368 981.921 188.198 981.921 191.932 cv
981.921 195.67 984.95 198.7 988.686 198.7 cv
992.423 198.7 994.633 195.58 995.452 191.932 cv
995.826 190.266 996.25 188.206 996.089 186.675 cv
1017.99 163.096 li
1017.99 116.934 li
971.739 70.3916 li
800.628 70.3916 li
790.192 75.3115 li
791.667 78.4385 li
801.401 73.8496 li
cp
f
1050.41 248.176 mo
1052.32 248.176 1053.87 249.723 1053.87 251.633 cv
1053.87 253.545 1052.32 255.09 1050.41 255.09 cv
1048.5 255.09 1046.95 253.545 1046.95 251.633 cv
1046.95 249.723 1048.5 248.176 1050.41 248.176 cv
cp
1024.04 168.922 mo
1007.04 187.424 li
1007.04 223.191 li
1021.82 239.82 li
1036.54 239.82 li
1044.1 247.916 li
1044.23 247.79 li
1044.12 249.359 1044.58 251.402 1045.03 252.746 cv
1046.23 256.284 1048.06 259.511 1051.8 259.511 cv
1055.53 259.511 1058.56 256.482 1058.56 252.746 cv
1058.56 249.01 1055.44 246.797 1051.8 245.98 cv
1050.09 245.598 1047.98 245.162 1046.44 245.354 cv
1038.05 236.363 li
1023.38 236.363 li
1010.5 221.874 li
1010.5 188.772 li
1027.5 170.269 li
1027.5 113.767 li
979.741 65.5117 li
977.283 67.9434 li
1024.04 115.188 li
1024.04 168.922 li
cp
f
1020.57 194.04 mo
1018.66 194.04 1017.11 192.493 1017.11 190.583 cv
1017.11 188.673 1018.66 187.124 1020.57 187.124 cv
1022.48 187.124 1024.03 188.673 1024.03 190.583 cv
1024.03 192.493 1022.48 194.04 1020.57 194.04 cv
cp
1033.55 172.024 mo
1022.47 184.493 li
1021.38 184.646 1020.29 184.925 1019.46 185.206 cv
1015.92 186.401 1012.69 188.233 1012.69 191.97 cv
1012.69 195.706 1015.72 198.735 1019.46 198.735 cv
1023.19 198.735 1025.4 195.617 1026.22 191.97 cv
1026.74 189.681 1027.35 186.646 1026.39 185.283 cv
1037.01 173.34 li
1037.01 110.881 li
991.888 65.5088 li
989.435 67.9473 li
1033.55 112.31 li
1033.55 172.024 li
cp
f
1041.9 177.21 mo
1036.16 183.662 li
1035.65 204.729 li
1034.1 207.685 li
1037.17 209.286 li
1039.08 205.617 li
1039.58 185.014 li
1045.36 178.527 li
1045.36 107.718 li
1003.66 65.5117 li
1001.2 67.9434 li
1041.9 109.136 li
1041.9 177.21 li
cp
f
1055.1 189.873 mo
1056.43 191.237 1056.41 193.425 1055.04 194.762 cv
1053.68 196.097 1051.49 196.076 1050.16 194.711 cv
1048.82 193.347 1048.84 191.156 1050.21 189.82 cv
1051.57 188.485 1053.76 188.509 1055.1 189.873 cv
cp
1051.12 185.105 mo
1049.89 186.11 1048.72 187.937 1048.07 189.228 cv
1046.38 192.559 1045.36 196.123 1047.97 198.794 cv
1050.58 201.463 1054.87 201.509 1057.54 198.894 cv
1060.2 196.28 1059.6 192.503 1057.64 189.326 cv
1056.78 187.944 1055.71 186.262 1054.58 185.256 cv
1054.58 105.128 li
1015.77 65.519 li
1013.3 67.937 li
1051.12 106.539 li
1051.12 185.105 li
cp
f
961.845 195.236 mo
959.934 195.236 958.388 193.689 958.388 191.779 cv
958.388 189.869 959.934 188.321 961.845 188.321 cv
963.754 188.321 965.303 189.869 965.303 191.779 cv
965.303 193.689 963.754 195.236 961.845 195.236 cv
cp
828.22 100.934 mo
951.269 100.934 li
973.903 124.324 li
973.903 176.594 li
965.217 185.575 li
963.727 185.571 961.942 185.992 960.732 186.401 cv
957.192 187.599 953.968 189.431 953.968 193.165 cv
953.968 196.901 956.996 199.931 960.732 199.931 cv
961.121 199.931 961.488 199.889 961.845 199.825 cv
961.845 208.476 li
965.303 208.476 li
965.303 198.102 li
965.024 198.102 li
966.246 196.853 967.067 195.085 967.497 193.165 cv
967.899 191.375 968.37 189.121 968.099 187.569 cv
977.36 177.992 li
977.36 122.923 li
952.734 97.4766 li
826.825 97.4766 li
801.47 121.894 li
746.532 121.894 li
746.532 125.353 li
802.864 125.353 li
828.22 100.934 li
cp
f
960.105 128.302 mo
962.015 128.302 963.561 129.851 963.561 131.76 cv
963.561 133.671 962.015 135.217 960.105 135.217 cv
958.194 135.217 956.646 133.671 956.646 131.76 cv
956.646 129.851 958.194 128.302 960.105 128.302 cv
cp
869.782 111.02 mo
936.06 111.02 li
953.97 127.433 li
953.699 129.04 954.225 131.388 954.727 132.871 cv
955.924 136.411 957.755 139.638 961.49 139.638 cv
965.227 139.638 968.255 136.609 968.255 132.871 cv
968.255 129.136 965.137 126.924 961.49 126.107 cv
959.656 125.695 957.336 125.21 955.781 125.525 cv
956.341 124.915 li
937.404 107.563 li
868.229 107.563 li
846.956 131.476 li
746.532 131.476 li
746.532 134.934 li
848.509 134.934 li
869.782 111.02 li
cp
f
1081.56 250.148 mo
1083.47 250.148 1085.02 251.695 1085.02 253.605 cv
1085.02 255.516 1083.47 257.063 1081.56 257.063 cv
1079.65 257.063 1078.11 255.516 1078.11 253.605 cv
1078.11 251.695 1079.65 250.148 1081.56 250.148 cv
cp
1060.34 182.468 mo
1072.18 194.479 li
1065.82 212.152 li
1066.12 240.083 li
1075.42 249.359 li
1075.18 250.963 1075.69 253.258 1076.19 254.717 cv
1077.38 258.256 1079.21 261.482 1082.95 261.482 cv
1086.68 261.482 1089.71 258.453 1089.71 254.717 cv
1089.71 250.98 1086.59 248.77 1082.95 247.952 cv
1081.29 247.58 1079.25 247.16 1077.72 247.313 cv
1077.99 247.039 li
1069.56 238.633 li
1069.28 212.74 li
1076.17 193.601 li
1063.8 181.049 li
1063.8 100.789 li
1028.12 65.4985 li
1025.69 67.9565 li
1060.34 102.234 li
1060.34 182.468 li
cp
f
1090.83 224.204 mo
1092.21 225.531 1092.25 227.719 1090.92 229.094 cv
1089.59 230.468 1087.4 230.506 1086.03 229.178 cv
1084.66 227.852 1084.62 225.662 1085.95 224.289 cv
1087.27 222.917 1089.46 222.879 1090.83 224.204 cv
cp
1068.7 159.236 mo
1082.1 176.995 li
1086.86 182.411 li
1086.86 219.451 li
1085.61 220.465 1084.43 222.4 1083.79 223.754 cv
1082.19 227.133 1081.27 230.727 1083.96 233.32 cv
1086.65 235.916 1090.93 235.842 1093.53 233.155 cv
1096.12 230.466 1095.41 226.709 1093.36 223.59 cv
1092.49 222.277 1091.42 220.691 1090.31 219.707 cv
1090.31 181.107 li
1084.78 174.813 li
1072.16 158.078 li
1072.16 98.5024 li
1040.05 65.522 li
1037.57 67.9331 li
1068.7 99.9072 li
1068.7 159.236 li
cp
f
1100.2 297.828 mo
1101.57 299.153 1101.61 301.342 1100.28 302.717 cv
1098.95 304.092 1096.76 304.131 1095.39 302.802 cv
1094.02 301.477 1093.98 299.287 1095.31 297.912 cv
1096.63 296.539 1098.82 296.502 1100.2 297.828 cv
cp
1091.34 79.8999 mo
1098.96 87.2617 li
1098.96 139.982 li
1096.95 158.47 li
1096.38 292.947 li
1095.07 293.918 1093.82 295.969 1093.15 297.377 cv
1091.55 300.758 1090.63 304.35 1093.32 306.943 cv
1096 309.54 1100.29 309.466 1102.88 306.777 cv
1105.48 304.09 1104.77 300.332 1102.72 297.212 cv
1101.89 295.962 1100.88 294.467 1099.83 293.477 cv
1100.4 158.753 li
1102.41 140.263 li
1102.42 85.792 li
1092.74 76.4424 li
1063.06 76.4424 li
1051.61 65.4785 li
1049.21 67.9775 li
1061.67 79.8999 li
1091.34 79.8999 li
cp
f
797.683 81.7393 mo
797.683 86.9917 793.429 91.2476 788.174 91.2476 cv
782.923 91.2476 778.665 86.9917 778.665 81.7393 cv
778.665 76.4863 782.923 72.23 788.174 72.23 cv
793.429 72.23 797.683 76.4863 797.683 81.7393 cv
1 1 1 rgb
f
1087.61 170.641 mo
1087.61 175.893 1083.36 180.15 1078.11 180.15 cv
1072.85 180.15 1068.6 175.893 1068.6 170.641 cv
1068.6 165.388 1072.85 161.132 1078.11 161.132 cv
1083.36 161.132 1087.61 165.388 1087.61 170.641 cv
f
974.037 215.745 mo
974.037 221 969.78 225.254 964.527 225.254 cv
959.275 225.254 955.019 221 955.019 215.745 cv
955.019 210.495 959.275 206.236 964.527 206.236 cv
969.78 206.236 974.037 210.495 974.037 215.745 cv
f
1043.2 215.745 mo
1043.2 221 1038.95 225.254 1033.69 225.254 cv
1028.44 225.254 1024.18 221 1024.18 215.745 cv
1024.18 210.495 1028.44 206.236 1033.69 206.236 cv
1038.95 206.236 1043.2 210.495 1043.2 215.745 cv
f
1082.69 203.289 mo
1082.69 208.54 1078.43 212.797 1073.18 212.797 cv
1067.92 212.797 1063.67 208.54 1063.67 203.289 cv
1063.67 198.036 1067.92 193.78 1073.18 193.78 cv
1078.43 193.78 1082.69 198.036 1082.69 203.289 cv
f
1110.19 148.708 mo
1110.19 153.96 1105.94 158.217 1100.68 158.217 cv
1095.43 158.217 1091.18 153.96 1091.18 148.708 cv
1091.18 143.455 1095.43 139.199 1100.68 139.199 cv
1105.94 139.199 1110.19 143.455 1110.19 148.708 cv
f
1096.08 120.264 mo
1096.08 125.517 1091.82 129.773 1086.57 129.773 cv
1081.31 129.773 1077.06 125.517 1077.06 120.264 cv
1077.06 115.011 1081.31 110.755 1086.57 110.755 cv
1091.82 110.755 1096.08 115.011 1096.08 120.264 cv
f
953.435 983.537 mo
954.786 982.188 956.974 982.188 958.324 983.537 cv
959.676 984.889 959.676 987.076 958.324 988.426 cv
956.974 989.777 954.786 989.777 953.435 988.426 cv
952.084 987.076 952.084 984.889 953.435 983.537 cv
cp
814.595 988.387 mo
813.245 989.737 811.057 989.737 809.705 988.387 cv
808.354 987.035 808.354 984.848 809.705 983.496 cv
811.057 982.146 813.245 982.146 814.595 983.496 cv
815.946 984.848 815.946 987.035 814.595 988.387 cv
cp
815.165 980.965 mo
812.009 978.963 808.243 978.324 805.6 980.965 cv
802.959 983.606 802.959 987.889 805.6 990.531 cv
808.243 993.17 811.819 992.188 815.165 990.531 cv
816.486 989.879 818.36 988.699 819.366 987.457 cv
948.634 987.457 li
949.631 988.713 951.53 989.91 952.864 990.569 cv
956.21 992.225 959.788 993.211 962.431 990.569 cv
965.071 987.928 965.071 983.646 962.431 981.006 cv
959.788 978.361 956.022 979.002 952.864 981.006 cv
951.53 981.85 949.915 982.9 948.912 984 cv
819.153 984 li
818.154 982.887 816.517 981.819 815.165 980.965 cv
cp
0 .862745 1 rgb
f
634.438 1004.43 mo
633.087 1005.78 630.898 1005.78 629.549 1004.43 cv
628.201 1003.08 628.201 1000.89 629.549 999.537 cv
630.898 998.188 633.087 998.188 634.438 999.537 cv
635.793 1000.89 635.793 1003.08 634.438 1004.43 cv
cp
639.242 1003.46 mo
647.461 1003.46 li
647.461 1000 li
638.966 1000 li
637.962 998.902 636.346 997.85 635.012 997.006 cv
631.854 995.006 628.087 994.362 625.446 997.006 cv
622.805 999.648 622.801 1003.93 625.442 1006.57 cv
628.087 1009.21 631.662 1008.23 635.012 1006.57 cv
636.344 1005.91 638.244 1004.71 639.242 1003.46 cv
cp
f
586.813 1071.57 mo
585.458 1072.92 583.271 1072.91 581.924 1071.56 cv
580.579 1070.2 580.586 1068.01 581.94 1066.67 cv
583.294 1065.32 585.482 1065.33 586.83 1066.68 cv
588.178 1068.04 588.17 1070.23 586.813 1071.57 cv
cp
587.41 1064.15 mo
584.256 1062.14 580.495 1061.49 577.844 1064.12 cv
575.193 1066.75 575.176 1071.04 577.81 1073.69 cv
580.448 1076.34 584.023 1075.36 587.38 1073.72 cv
588.474 1073.18 589.95 1072.28 590.999 1071.29 cv
598.986 1071.29 li
598.986 1067.83 li
591.875 1067.83 li
591.018 1066.49 589.01 1065.17 587.41 1064.15 cv
cp
f
516.084 1065.42 mo
517.438 1064.08 519.627 1064.09 520.974 1065.44 cv
522.321 1066.8 522.313 1068.98 520.956 1070.33 cv
519.602 1071.67 517.415 1071.67 516.067 1070.32 cv
514.725 1068.96 514.73 1066.77 516.084 1065.42 cv
cp
647.043 1059.94 mo
648.326 1058.52 650.51 1058.41 651.925 1059.69 cv
653.344 1060.97 653.455 1063.16 652.172 1064.58 cv
650.892 1065.99 648.708 1066.1 647.289 1064.82 cv
645.871 1063.54 645.76 1061.35 647.043 1059.94 cv
cp
521.524 1072.48 mo
522.21 1072.14 523.046 1071.66 523.835 1071.11 cv
524.469 1071.84 525.396 1072.32 526.44 1072.32 cv
546.9 1072.32 li
547.88 1072.32 548.815 1071.9 549.471 1071.17 cv
564.288 1054.74 li
606.303 1054.74 li
617.258 1065.3 li
617.889 1065.91 618.729 1066.25 619.611 1066.26 cv
641.653 1066.55 li
641.671 1066.55 641.685 1066.55 641.701 1066.55 cv
642.599 1066.55 643.411 1066.2 644.026 1065.64 cv
644.924 1066.28 645.947 1066.87 646.847 1067.38 cv
650.102 1069.22 653.894 1069.67 656.4 1066.9 cv
658.905 1064.12 658.693 1059.85 655.921 1057.34 cv
653.144 1054.84 649.626 1056 646.364 1057.83 cv
645.44 1058.34 644.238 1059.15 643.287 1060.04 cv
642.822 1059.8 642.305 1059.65 641.745 1059.64 cv
621.069 1059.37 li
610.098 1048.79 li
609.454 1048.17 608.592 1047.82 607.698 1047.82 cv
562.747 1047.82 li
561.769 1047.82 560.836 1048.24 560.18 1048.96 cv
545.363 1065.4 li
526.44 1065.4 li
526.011 1065.4 525.604 1065.49 525.224 1065.63 cv
524.219 1064.63 522.769 1063.69 521.554 1062.91 cv
518.4 1060.9 514.639 1060.25 511.988 1062.88 cv
509.337 1065.51 509.32 1069.79 511.954 1072.44 cv
514.592 1075.1 518.168 1074.12 521.524 1072.48 cv
cp
f
604.151 997.688 mo
605.435 996.271 607.62 996.16 609.038 997.44 cv
610.454 998.721 610.565 1000.91 609.284 1002.32 cv
608.005 1003.74 605.82 1003.85 604.401 1002.57 cv
602.981 1001.29 602.872 999.104 604.151 997.688 cv
cp
603.957 1005.13 mo
607.215 1006.97 611.007 1007.42 613.509 1004.65 cv
616.014 1001.88 615.802 997.598 613.029 995.092 cv
610.258 992.59 606.735 993.752 603.473 995.576 cv
602.384 996.183 600.917 997.191 599.921 998.271 cv
590.932 998.553 li
591.04 1002.01 li
599.341 1001.75 li
600.288 1003.02 602.329 1004.21 603.957 1005.13 cv
cp
f
654.907 1029.42 mo
653.01 1029.2 651.651 1027.48 651.868 1025.58 cv
652.087 1023.69 653.804 1022.33 655.7 1022.55 cv
657.598 1022.76 658.956 1024.48 658.74 1026.38 cv
658.519 1028.28 656.805 1029.64 654.907 1029.42 cv
cp
661.08 1025.25 mo
660.685 1021.53 658.846 1018.18 655.134 1017.76 cv
651.422 1017.33 648.065 1019.99 647.637 1023.7 cv
647.212 1027.41 650.206 1029.6 653.584 1031.2 cv
654.295 1031.53 655.223 1031.9 656.177 1032.17 cv
656.306 1032.87 656.643 1033.54 657.204 1034.07 cv
666.713 1042.97 li
667.377 1043.59 668.225 1043.9 669.073 1043.9 cv
669.995 1043.9 670.916 1043.53 671.599 1042.81 cv
672.902 1041.41 672.83 1039.22 671.435 1037.92 cv
661.928 1029.02 li
661.732 1028.83 661.519 1028.69 661.296 1028.56 cv
661.296 1027.45 661.188 1026.28 661.08 1025.25 cv
cp
f
626.066 1086.67 mo
624.717 1088.02 622.528 1088.02 621.177 1086.67 cv
619.826 1085.33 619.826 1083.14 621.177 1081.78 cv
622.528 1080.43 624.717 1080.43 626.066 1081.78 cv
627.418 1083.14 627.418 1085.33 626.066 1086.67 cv
cp
626.638 1079.25 mo
623.48 1077.25 619.715 1076.61 617.071 1079.25 cv
614.432 1081.89 614.432 1086.17 617.071 1088.82 cv
619.715 1091.46 623.291 1090.47 626.638 1088.82 cv
627.71 1088.29 629.148 1087.41 630.19 1086.43 cv
638.53 1086.43 li
638.53 1082.98 li
631.149 1082.98 li
630.31 1081.62 628.267 1080.28 626.638 1079.25 cv
cp
f
788.399 969.906 mo
790.155 969.153 792.188 969.969 792.939 971.727 cv
793.689 973.481 792.875 975.512 791.12 976.264 cv
789.364 977.016 787.332 976.199 786.582 974.444 cv
785.829 972.688 786.643 970.656 788.399 969.906 cv
cp
791.972 981.01 mo
795.83 979.359 797.624 974.891 795.97 971.027 cv
794.318 967.166 789.852 965.373 785.987 967.027 cv
782.125 968.68 780.335 973.146 781.987 977.012 cv
783.637 980.871 788.108 982.664 791.972 981.01 cv
cp
f
553.813 1000.72 mo
555.169 1002.06 555.184 1004.25 553.843 1005.61 cv
552.502 1006.96 550.31 1006.98 548.95 1005.64 cv
547.596 1004.29 547.582 1002.11 548.926 1000.75 cv
550.267 999.387 552.455 999.375 553.813 1000.72 cv
cp
578.448 966.836 mo
596 966.836 li
608.102 979.678 li
666.678 979.678 li
694.711 951.627 li
945.416 951.627 li
969.188 927.127 li
1030.68 927.127 li
1030.68 923.67 li
967.725 923.67 li
943.954 948.17 li
693.281 948.17 li
665.246 976.219 li
609.595 976.219 li
597.493 963.379 li
577.01 963.379 li
549.489 991.068 li
549.489 996.104 li
548.349 997.102 547.255 998.799 546.386 1000.19 cv
544.405 1003.36 543.788 1007.13 546.444 1009.75 cv
549.102 1012.38 553.387 1012.36 556.01 1009.7 cv
558.635 1007.04 557.629 1003.47 555.954 1000.13 cv
555.31 998.851 554.162 997.042 552.948 996.027 cv
552.948 992.492 li
578.448 966.836 li
cp
f
489.77 1039.98 mo
487.865 1040.09 486.228 1038.64 486.114 1036.74 cv
486.002 1034.83 487.456 1033.19 489.36 1033.08 cv
491.266 1032.96 492.903 1034.42 493.018 1036.33 cv
493.13 1038.23 491.677 1039.87 489.77 1039.98 cv
cp
557.672 1024.2 mo
566.923 1015.42 li
566.923 992.553 li
575.366 984.986 li
668.039 984.986 li
696.856 957.201 li
948.89 957.201 li
971.221 933.43 li
1030.68 933.43 li
1030.68 929.973 li
969.724 929.973 li
947.394 953.744 li
695.461 953.744 li
666.644 981.527 li
574.042 981.527 li
563.466 991.006 li
563.466 1013.93 li
556.294 1020.74 li
502.673 1020.74 li
493.267 1030.14 li
491.665 1030.05 489.516 1030.67 488.136 1031.23 cv
484.675 1032.63 481.565 1034.65 481.784 1038.38 cv
482.006 1042.11 485.209 1044.96 488.935 1044.73 cv
492.668 1044.51 494.689 1041.27 495.29 1037.58 cv
495.545 1036.02 495.83 1034.11 495.671 1032.63 cv
504.103 1024.2 li
557.672 1024.2 li
cp
f
589.942 1113.16 mo
588.035 1113.15 586.492 1111.6 586.502 1109.69 cv
586.51 1107.78 588.061 1106.24 589.969 1106.25 cv
591.881 1106.26 593.42 1107.81 593.413 1109.72 cv
593.407 1111.63 591.853 1113.17 589.942 1113.16 cv
cp
695.293 1082.42 mo
695.293 982.287 li
712.486 963.271 li
912.175 963.271 li
918.007 967.164 li
919.929 964.289 li
913.223 959.815 li
710.95 959.815 li
691.836 980.957 li
691.836 1080.94 li
671.551 1100.26 li
628.394 1100.26 li
612.834 1117.61 li
600.016 1117.61 li
596.37 1113.07 li
596.277 1113.14 li
596.326 1111.67 595.945 1109.84 595.615 1108.34 cv
594.81 1104.69 592.614 1101.57 588.88 1101.55 cv
585.142 1101.54 582.102 1104.55 582.086 1108.29 cv
582.074 1112.02 585.29 1113.87 588.825 1115.08 cv
590.282 1115.58 592.573 1116.1 594.18 1115.86 cv
598.357 1121.07 li
614.377 1121.07 li
629.936 1103.72 li
672.935 1103.72 li
695.293 1082.42 li
cp
f
752.134 983.19 mo
750.782 981.838 750.782 979.65 752.134 978.301 cv
753.482 976.949 755.672 976.949 757.023 978.301 cv
758.372 979.65 758.372 981.838 757.023 983.19 cv
755.672 984.541 753.482 984.541 752.134 983.19 cv
cp
1030.68 982.271 mo
1008.65 982.271 li
1007.64 982.271 1006.68 982.713 1006.02 983.484 cv
993.402 998.273 li
780.723 998.273 li
763.441 980.912 li
763.141 980.609 762.794 980.386 762.429 980.218 cv
762.009 978.621 759.512 976.981 757.593 975.768 cv
754.436 973.766 750.672 973.127 748.026 975.768 cv
745.386 978.408 745.386 982.691 748.026 985.334 cv
750.672 987.975 754.246 986.99 757.593 985.334 cv
757.731 985.265 757.878 985.19 758.027 985.109 cv
758.171 985.351 758.335 985.583 758.542 985.791 cv
776.837 1004.17 li
777.485 1004.82 778.366 1005.19 779.288 1005.19 cv
994.996 1005.19 li
996.008 1005.19 996.971 1004.74 997.627 1003.97 cv
1010.25 989.185 li
1030.68 989.185 li
1032.59 989.185 1034.14 987.639 1034.14 985.729 cv
1034.14 983.818 1032.59 982.271 1030.68 982.271 cv
cp
f
757.023 1003.54 mo
755.672 1004.89 753.482 1004.89 752.134 1003.54 cv
750.782 1002.19 750.782 1000.01 752.134 998.653 cv
753.482 997.305 755.672 997.305 757.023 998.653 cv
758.372 1000.01 758.372 1002.19 757.023 1003.54 cv
cp
1034.14 997.685 mo
1034.14 995.778 1032.59 994.229 1030.68 994.229 cv
1015.13 994.229 li
1014.23 994.229 1013.36 994.584 1012.71 995.221 cv
997.73 1009.93 li
777.046 1009.93 li
764.862 998.502 li
763.658 997.37 761.851 997.273 760.54 998.177 cv
759.629 997.426 758.54 996.723 757.593 996.123 cv
754.436 994.121 750.672 993.482 748.026 996.123 cv
747.571 996.578 747.199 997.086 746.901 997.622 cv
735.489 987.463 li
733.189 990.047 li
746.075 1001.52 li
746.212 1003.04 746.862 1004.52 748.026 1005.69 cv
750.672 1008.33 754.246 1007.34 757.593 1005.69 cv
758.452 1005.26 759.545 1004.62 760.481 1003.87 cv
773.315 1015.91 li
773.957 1016.51 774.801 1016.85 775.679 1016.85 cv
999.143 1016.85 li
1000.05 1016.85 1000.92 1016.49 1001.57 1015.86 cv
1016.55 1001.14 li
1030.68 1001.14 li
1032.59 1001.14 1034.14 999.598 1034.14 997.685 cv
cp
f
756.158 1025.17 mo
754.808 1026.52 752.62 1026.52 751.269 1025.17 cv
749.918 1023.82 749.918 1021.63 751.269 1020.28 cv
752.62 1018.93 754.808 1018.93 756.158 1020.28 cv
757.509 1021.63 757.509 1023.82 756.158 1025.17 cv
cp
1027.24 1014.25 mo
1019.89 1014.25 li
1018.88 1014.25 1017.93 1014.69 1017.27 1015.45 cv
1008.62 1025.49 li
775.584 1025.49 li
774.22 1022.98 li
773.737 1022.08 772.878 1021.45 771.883 1021.24 cv
762.334 1019.27 li
761.369 1019.07 760.423 1019.29 759.677 1019.81 cv
758.766 1019.05 757.677 1018.35 756.729 1017.75 cv
754.089 1016.08 751.028 1015.36 748.55 1016.71 cv
736.789 1014.71 li
736.208 1018.12 li
745.787 1019.75 li
744.663 1022.24 745.117 1025.27 747.163 1027.32 cv
749.807 1029.96 753.383 1028.97 756.729 1027.32 cv
757.597 1026.89 758.703 1026.23 759.646 1025.48 cv
760.021 1025.75 760.454 1025.94 760.933 1026.04 cv
768.908 1027.69 li
770.485 1030.6 li
771.09 1031.71 772.258 1032.41 773.524 1032.41 cv
1010.2 1032.41 li
1011.21 1032.41 1012.17 1031.97 1012.82 1031.21 cv
1021.48 1021.17 li
1027.24 1021.17 li
1029.15 1021.17 1030.69 1019.62 1030.69 1017.71 cv
1030.69 1015.8 1029.15 1014.25 1027.24 1014.25 cv
cp
f
766.329 1043.14 mo
764.978 1044.49 762.79 1044.49 761.439 1043.14 cv
760.089 1041.79 760.089 1039.6 761.439 1038.25 cv
762.79 1036.9 764.978 1036.9 766.329 1038.25 cv
767.679 1039.6 767.679 1041.79 766.329 1043.14 cv
cp
1027.24 1036.98 mo
771.181 1036.98 li
770.55 1036.98 769.967 1037.17 769.457 1037.46 cv
768.635 1036.83 767.715 1036.23 766.899 1035.72 cv
763.742 1033.72 759.977 1033.08 757.333 1035.72 cv
754.692 1038.36 754.692 1042.64 757.333 1045.28 cv
759.977 1047.92 763.553 1046.94 766.899 1045.28 cv
767.728 1044.87 768.776 1044.26 769.69 1043.55 cv
770.144 1043.77 770.644 1043.9 771.181 1043.9 cv
1027.24 1043.9 li
1029.15 1043.9 1030.69 1042.35 1030.69 1040.44 cv
1030.69 1038.53 1029.15 1036.98 1027.24 1036.98 cv
cp
f
757.023 1059.75 mo
755.672 1061.1 753.482 1061.1 752.134 1059.75 cv
750.782 1058.4 750.782 1056.21 752.134 1054.86 cv
753.482 1053.51 755.672 1053.51 757.023 1054.86 cv
758.372 1056.21 758.372 1058.4 757.023 1059.75 cv
cp
1032.14 1053.59 mo
764.727 1053.59 li
763.396 1053.59 762.249 1054.36 761.672 1055.47 cv
760.684 1054.31 758.986 1053.21 757.593 1052.33 cv
755.179 1050.79 752.411 1050.07 750.058 1050.99 cv
744.593 1046.67 li
721.226 1046.67 li
721.226 1050.13 li
743.391 1050.13 li
747.291 1053.21 li
745.422 1055.85 745.662 1059.53 748.026 1061.89 cv
750.672 1064.53 754.246 1063.55 757.593 1061.89 cv
758.907 1061.24 760.771 1060.07 761.78 1058.83 cv
762.388 1059.83 763.477 1060.51 764.727 1060.51 cv
1032.14 1060.51 li
1034.04 1060.51 1035.59 1058.96 1035.59 1057.05 cv
1035.59 1055.14 1034.04 1053.59 1032.14 1053.59 cv
cp
f
768.746 1076.22 mo
766.845 1076.39 765.17 1074.97 765.008 1073.07 cv
764.846 1071.17 766.258 1069.5 768.163 1069.33 cv
770.067 1069.17 771.738 1070.58 771.9 1072.49 cv
772.06 1074.39 770.651 1076.06 768.746 1076.22 cv
cp
1035.59 1067.62 mo
1035.59 1065.71 1034.04 1064.16 1032.14 1064.16 cv
774.639 1064.16 li
773.246 1064.16 772.051 1064.99 771.504 1066.18 cv
770.004 1066.22 768.126 1066.78 766.595 1067.26 cv
763.397 1068.27 760.728 1070.36 760.436 1073.47 cv
737.653 1073.47 li
737.653 1076.93 li
761.064 1076.93 li
761.064 1076.91 li
762.241 1079.38 764.85 1080.99 767.736 1080.75 cv
771.462 1080.43 773.014 1077.06 773.905 1073.43 cv
774.072 1072.76 774.227 1071.91 774.315 1071.04 cv
774.423 1071.05 774.528 1071.07 774.639 1071.07 cv
1032.14 1071.07 li
1034.04 1071.07 1035.59 1069.53 1035.59 1067.62 cv
cp
f
756.675 1096.74 mo
755.324 1098.09 753.136 1098.09 751.785 1096.74 cv
750.434 1095.39 750.434 1093.2 751.785 1091.85 cv
753.136 1090.5 755.324 1090.5 756.675 1091.85 cv
758.025 1093.2 758.025 1095.39 756.675 1096.74 cv
cp
1030.68 1075.2 mo
792.13 1075.2 li
791.182 1075.2 790.272 1075.59 789.618 1076.28 cv
775.918 1090.76 li
762.496 1090.76 li
761.686 1090.76 760.952 1091.05 760.362 1091.51 cv
759.419 1090.71 758.253 1089.95 757.246 1089.32 cv
754.088 1087.32 750.323 1086.67 747.679 1089.32 cv
745.038 1091.96 745.038 1096.24 747.679 1098.88 cv
750.323 1101.52 753.899 1100.54 757.246 1098.88 cv
758.169 1098.43 759.364 1097.71 760.344 1096.9 cv
760.936 1097.38 761.678 1097.67 762.496 1097.67 cv
777.408 1097.67 li
778.359 1097.67 779.268 1097.28 779.92 1096.59 cv
793.62 1082.11 li
1030.68 1082.11 li
1032.59 1082.11 1034.14 1080.56 1034.14 1078.66 cv
1034.14 1076.75 1032.59 1075.2 1030.68 1075.2 cv
cp
f
753.986 1118.8 mo
752.085 1118.96 750.411 1117.55 750.249 1115.65 cv
750.188 1114.93 750.351 1114.25 750.678 1113.67 cv
750.907 1113.67 li
750.907 1113.33 li
751.477 1112.55 752.359 1112 753.401 1111.91 cv
754.278 1111.83 755.097 1112.1 755.75 1112.59 cv
755.826 1112.65 755.899 1112.71 755.979 1112.76 cv
756.623 1113.33 757.061 1114.14 757.14 1115.06 cv
757.3 1116.96 755.891 1118.64 753.986 1118.8 cv
cp
1034.14 1086.43 mo
1034.14 1084.52 1032.59 1082.98 1030.68 1082.98 cv
799.315 1082.98 li
798.33 1082.98 797.391 1083.4 796.732 1084.14 cv
782.354 1100.26 li
764.727 1100.26 li
763.87 1100.26 763.047 1100.58 762.408 1101.16 cv
755.58 1107.34 li
755.05 1107.82 754.702 1108.42 754.543 1109.07 cv
753.615 1109.29 752.673 1109.57 751.836 1109.84 cv
751.491 1109.95 751.155 1110.07 750.825 1110.21 cv
737.653 1110.21 li
737.653 1113.67 li
746.446 1113.67 li
745.857 1114.67 745.556 1115.83 745.667 1117.15 cv
745.983 1120.87 749.256 1123.63 752.977 1123.32 cv
756.701 1123 758.255 1119.63 759.146 1116 cv
759.358 1115.15 759.555 1114.01 759.612 1112.9 cv
759.825 1112.78 760.031 1112.64 760.221 1112.46 cv
766.061 1107.18 li
783.904 1107.18 li
784.891 1107.18 785.829 1106.76 786.488 1106.02 cv
800.866 1089.89 li
1030.68 1089.89 li
1032.59 1089.89 1034.14 1088.34 1034.14 1086.43 cv
cp
f
632.588 1044.32 mo
632.806 1046.22 631.45 1047.93 629.552 1048.16 cv
627.657 1048.38 625.942 1047.02 625.72 1045.12 cv
625.646 1044.49 625.759 1043.89 625.992 1043.35 cv
626.184 1043.23 626.364 1043.09 626.533 1042.92 cv
626.866 1042.6 627.116 1042.22 627.291 1041.82 cv
627.72 1041.55 628.21 1041.35 628.751 1041.29 cv
630.648 1041.07 632.365 1042.43 632.588 1044.32 cv
cp
523.544 1040.15 mo
522.188 1041.49 520.002 1041.49 518.654 1040.13 cv
517.31 1038.78 517.316 1036.59 518.671 1035.24 cv
520.024 1033.9 522.214 1033.9 523.56 1035.26 cv
524.026 1035.73 524.319 1036.3 524.461 1036.89 cv
524.449 1037.01 524.425 1037.13 524.425 1037.25 cv
524.425 1037.53 524.468 1037.8 524.531 1038.06 cv
524.448 1038.83 524.13 1039.57 523.544 1040.15 cv
cp
527.883 1033.8 mo
527.315 1033.8 526.785 1033.95 526.313 1034.19 cv
525.596 1033.66 524.831 1033.17 524.142 1032.73 cv
520.987 1030.72 517.226 1030.06 514.575 1032.69 cv
511.924 1035.33 511.907 1039.61 514.541 1042.26 cv
517.179 1044.91 520.755 1043.94 524.111 1042.29 cv
524.943 1041.88 525.999 1041.27 526.918 1040.56 cv
527.227 1040.65 527.546 1040.71 527.883 1040.71 cv
583.783 1040.71 li
584.169 1040.71 584.554 1040.65 584.919 1040.52 cv
600.813 1035 li
614.015 1035 li
621.644 1042.85 li
621.964 1043.18 622.337 1043.43 622.732 1043.6 cv
622.984 1044.67 623.356 1045.78 623.696 1046.75 cv
624.935 1050.28 627.492 1053.12 631.198 1052.69 cv
634.91 1052.26 637.571 1048.9 637.136 1045.19 cv
636.701 1041.48 633.288 1040.03 629.633 1039.25 cv
628.948 1039.1 628.089 1038.98 627.209 1038.92 cv
627.053 1038.6 626.862 1038.3 626.603 1038.03 cv
617.959 1029.13 li
617.308 1028.46 616.414 1028.08 615.477 1028.08 cv
600.232 1028.08 li
599.844 1028.08 599.462 1028.15 599.098 1028.28 cv
583.199 1033.8 li
527.883 1033.8 li
cp
f
933.451 969.648 mo
933.451 974.932 929.17 979.215 923.886 979.215 cv
918.603 979.215 914.318 974.932 914.318 969.648 cv
914.318 964.365 918.603 960.084 923.886 960.084 cv
929.17 960.084 933.451 964.365 933.451 969.648 cv
cp
1 1 1 rgb
f
736.499 983.68 mo
736.499 988.963 732.218 993.248 726.933 993.248 cv
721.651 993.248 717.366 988.963 717.366 983.68 cv
717.366 978.398 721.651 974.115 726.933 974.115 cv
732.218 974.115 736.499 978.398 736.499 983.68 cv
cp
f
664.018 1001.73 mo
664.018 1007.01 659.732 1011.3 654.451 1011.3 cv
649.167 1011.3 644.886 1007.01 644.886 1001.73 cv
644.886 996.446 649.167 992.164 654.451 992.164 cv
659.732 992.164 664.018 996.446 664.018 1001.73 cv
cp
f
605.174 965.727 mo
605.174 971.01 600.89 975.293 595.608 975.293 cv
590.325 975.293 586.043 971.01 586.043 965.727 cv
586.043 960.443 590.325 956.16 595.608 956.16 cv
600.89 956.16 605.174 960.443 605.174 965.727 cv
cp
f
592.857 999.992 mo
592.857 1005.28 588.575 1009.56 583.291 1009.56 cv
578.011 1009.56 573.725 1005.28 573.725 999.992 cv
573.725 994.711 578.011 990.426 583.291 990.426 cv
588.575 990.426 592.857 994.711 592.857 999.992 cv
cp
f
684.544 1042.57 mo
684.544 1047.85 680.263 1052.13 674.978 1052.13 cv
669.697 1052.13 665.412 1047.85 665.412 1042.57 cv
665.412 1037.28 669.697 1033 674.978 1033 cv
680.263 1033 684.544 1037.28 684.544 1042.57 cv
cp
f
722.148 1048.4 mo
722.148 1053.68 717.866 1057.97 712.58 1057.97 cv
707.3 1057.97 703.015 1053.68 703.015 1048.4 cv
703.015 1043.12 707.3 1038.83 712.58 1038.83 cv
717.866 1038.83 722.148 1043.12 722.148 1048.4 cv
cp
f
737.653 1017.71 mo
737.653 1023 733.37 1027.28 728.088 1027.28 cv
722.802 1027.28 718.521 1023 718.521 1017.71 cv
718.521 1012.43 722.802 1008.15 728.088 1008.15 cv
733.37 1008.15 737.653 1012.43 737.653 1017.71 cv
cp
f
740.357 1078.66 mo
740.357 1083.94 736.076 1088.22 730.792 1088.22 cv
725.511 1088.22 721.226 1083.94 721.226 1078.66 cv
721.226 1073.37 725.511 1069.09 730.792 1069.09 cv
736.076 1069.09 740.357 1073.37 740.357 1078.66 cv
cp
f
740.357 1112.55 mo
740.357 1117.83 736.076 1122.11 730.792 1122.11 cv
725.511 1122.11 721.226 1117.83 721.226 1112.55 cv
721.226 1107.26 725.511 1102.98 730.792 1102.98 cv
736.076 1102.98 740.357 1107.26 740.357 1112.55 cv
cp
f
655.586 1084.71 mo
655.586 1089.99 651.305 1094.27 646.021 1094.27 cv
640.738 1094.27 636.454 1089.99 636.454 1084.71 cv
636.454 1079.42 640.738 1075.14 646.021 1075.14 cv
651.305 1075.14 655.586 1079.42 655.586 1084.71 cv
cp
f
598.749 1033 mo
598.749 1038.28 594.468 1042.57 589.184 1042.57 cv
583.902 1042.57 579.617 1038.28 579.617 1033 cv
579.617 1027.72 583.902 1023.43 589.184 1023.43 cv
594.468 1023.43 598.749 1027.72 598.749 1033 cv
cp
f
559.417 1063.43 mo
559.417 1068.71 555.136 1073 549.852 1073 cv
544.57 1073 540.284 1068.71 540.284 1063.43 cv
540.284 1058.15 544.57 1053.86 549.852 1053.86 cv
555.136 1053.86 559.417 1058.15 559.417 1063.43 cv
cp
f
571.246 1095.66 mo
571.246 1100.94 566.965 1105.22 561.68 1105.22 cv
556.398 1105.22 552.113 1100.94 552.113 1095.66 cv
552.113 1090.37 556.398 1086.09 561.68 1086.09 cv
566.965 1086.09 571.246 1090.37 571.246 1095.66 cv
cp
f
612.796 1068.86 mo
612.796 1074.14 608.515 1078.42 603.23 1078.42 cv
597.949 1078.42 593.664 1074.14 593.664 1068.86 cv
593.664 1063.58 597.949 1059.29 603.23 1059.29 cv
608.515 1059.29 612.796 1063.58 612.796 1068.86 cv
cp
f
302.945 1031.69 mo
302.945 1033.6 301.396 1035.15 299.486 1035.15 cv
297.576 1035.15 296.029 1033.6 296.029 1031.69 cv
296.029 1029.78 297.576 1028.23 299.486 1028.23 cv
301.396 1028.23 302.945 1029.78 302.945 1031.69 cv
cp
451.31 880.554 mo
411.256 920.317 li
297.018 920.317 li
283.6 933.421 li
283.6 1018.21 li
293.494 1026.85 li
292.971 1028.43 293.549 1031.15 294.109 1032.8 cv
295.309 1036.34 297.137 1039.57 300.873 1039.57 cv
304.609 1039.57 307.637 1036.54 307.637 1032.8 cv
307.637 1029.07 304.52 1026.86 300.873 1026.04 cv
299.699 1025.77 298.326 1025.48 297.08 1025.39 cv
287.057 1016.64 li
287.057 934.876 li
298.426 923.775 li
412.681 923.775 li
452.734 884.012 li
561.942 884.012 li
602.435 843.813 li
602.435 831.819 li
598.977 831.819 li
598.977 842.375 li
560.516 880.554 li
451.31 880.554 li
cp
0 .862745 1 rgb
f
355.71 1027.36 mo
356.108 1025.49 357.943 1024.3 359.813 1024.7 cv
361.679 1025.1 362.871 1026.93 362.473 1028.8 cv
362.076 1030.67 360.239 1031.86 358.373 1031.46 cv
356.507 1031.07 355.313 1029.23 355.71 1027.36 cv
cp
453.026 887.758 mo
413.84 927.521 li
303.225 927.521 li
290.371 939.745 li
290.371 1003.61 li
315.153 1029.07 li
315.153 1038.83 li
324.182 1048.83 li
335.789 1048.83 li
347.631 1036.1 li
353.237 1033.1 li
354.635 1033.9 357.235 1033.92 359.273 1033.9 cv
363.01 1033.86 366.518 1032.34 367.298 1028.69 cv
368.074 1025.04 365.742 1021.45 362.088 1020.66 cv
358.435 1019.89 355.973 1022.66 354.065 1025.88 cv
353.483 1026.85 352.806 1028.27 352.444 1029.6 cv
345.49 1033.32 li
334.283 1045.37 li
325.717 1045.37 li
318.611 1037.5 li
318.611 1027.67 li
293.83 1002.21 li
293.83 941.229 li
304.607 930.979 li
415.288 930.979 li
454.474 891.216 li
564.835 891.216 li
607.908 847.539 li
607.908 831.819 li
604.451 831.819 li
604.451 846.121 li
563.39 887.758 li
453.026 887.758 li
cp
f
332.911 1031.69 mo
332.911 1033.6 331.363 1035.15 329.454 1035.15 cv
327.545 1035.15 325.997 1033.6 325.997 1031.69 cv
325.997 1029.78 327.545 1028.23 329.454 1028.23 cv
331.363 1028.23 332.911 1029.78 332.911 1031.69 cv
cp
544.366 892.079 mo
519.297 917.724 li
431.145 917.724 li
416.162 932.42 li
321.343 932.42 li
301.898 952.168 li
301.898 1005.45 li
323.361 1027.2 li
323.017 1028.8 323.556 1031.26 324.078 1032.8 cv
325.273 1036.34 327.105 1039.57 330.84 1039.57 cv
334.577 1039.57 337.605 1036.54 337.605 1032.8 cv
337.605 1029.07 334.487 1026.86 330.84 1026.04 cv
329.461 1025.73 327.813 1025.39 326.416 1025.36 cv
305.355 1004.03 li
305.355 953.587 li
322.792 935.878 li
417.574 935.878 li
432.557 921.182 li
520.752 921.182 li
545.821 895.537 li
567.992 895.537 li
613.672 850.153 li
613.672 831.819 li
610.215 831.819 li
610.215 848.715 li
566.567 892.079 li
544.366 892.079 li
cp
f
333.227 1064.75 mo
331.318 1064.75 329.77 1063.21 329.77 1061.3 cv
329.77 1059.39 331.318 1057.84 333.227 1057.84 cv
335.14 1057.84 336.685 1059.39 336.685 1061.3 cv
336.685 1063.21 335.14 1064.75 333.227 1064.75 cv
cp
548.668 901.011 mo
525.905 925.216 li
435.777 925.216 li
420.792 939.333 li
327.702 939.333 li
308.527 958.202 li
308.527 1001.97 li
324.781 1019.15 li
366.27 1019.15 li
374.51 1027.9 li
374.51 1040.88 li
369.787 1045.37 li
345.829 1045.37 li
336.428 1055.1 li
334.973 1055.13 333.28 1055.53 332.117 1055.92 cv
328.578 1057.12 325.352 1058.95 325.352 1062.68 cv
325.352 1066.42 328.38 1069.45 332.117 1069.45 cv
335.852 1069.45 338.063 1066.33 338.883 1062.68 cv
339.297 1060.84 339.784 1058.5 339.454 1056.94 cv
347.295 1048.83 li
371.168 1048.83 li
377.969 1042.37 li
377.969 1026.53 li
367.764 1015.69 li
326.27 1015.69 li
311.984 1000.6 li
311.984 959.651 li
329.117 942.791 li
422.162 942.791 li
437.148 928.673 li
527.4 928.673 li
550.164 904.469 li
570.001 904.469 li
622.317 853.329 li
622.317 831.819 li
618.859 831.819 li
618.859 851.874 li
568.594 901.011 li
548.668 901.011 li
cp
f
513.837 434.818 mo
512.485 436.172 510.298 436.172 508.948 434.818 cv
507.597 433.47 507.597 431.282 508.948 429.931 cv
510.298 428.58 512.485 428.58 513.837 429.931 cv
515.191 431.282 515.191 433.47 513.837 434.818 cv
cp
673.592 382.493 mo
654.574 363.042 li
608.169 363.042 li
541.606 430.9 li
518.642 430.9 li
517.644 429.643 515.743 428.446 514.41 427.786 cv
511.061 426.132 507.486 425.147 504.841 427.786 cv
502.202 430.431 502.202 434.714 504.843 437.352 cv
507.486 439.995 511.253 439.353 514.41 437.352 cv
515.742 436.509 517.358 435.457 518.362 434.359 cv
543.059 434.359 li
609.62 366.499 li
653.12 366.499 li
672.137 385.947 li
688.108 385.947 li
710.294 364.772 li
960.564 364.772 li
986.931 338.838 li
1051.9 338.838 li
1051.9 335.38 li
985.516 335.38 li
959.15 361.314 li
708.908 361.314 li
686.725 382.493 li
673.592 382.493 li
cp
f
515.42 342.525 mo
514.07 343.878 511.881 343.878 510.53 342.525 cv
509.181 341.177 509.181 338.989 510.53 337.639 cv
511.881 336.288 514.07 336.288 515.42 337.639 cv
516.771 338.989 516.771 341.177 515.42 342.525 cv
cp
802.38 296.44 mo
803.73 295.088 805.918 295.088 807.269 296.44 cv
808.616 297.79 808.616 299.977 807.269 301.328 cv
805.918 302.68 803.73 302.68 802.38 301.328 cv
801.024 299.977 801.024 297.79 802.38 296.44 cv
cp
550.393 342.007 mo
592.102 300.586 li
797.765 300.586 li
798.8 301.759 800.554 302.853 801.805 303.473 cv
805.154 305.129 808.73 306.113 811.375 303.473 cv
814.016 300.83 814.012 296.548 811.371 293.906 cv
808.73 291.266 804.963 291.906 801.805 293.906 cv
800.382 294.81 798.633 295.947 797.655 297.129 cv
590.677 297.129 li
548.968 338.551 li
520.175 338.551 li
519.167 337.315 517.305 336.145 515.99 335.494 cv
512.644 333.84 509.067 332.853 506.426 335.494 cv
503.781 338.139 503.781 342.419 506.426 345.06 cv
509.067 347.702 512.834 347.064 515.99 345.06 cv
517.352 344.199 519.005 343.121 520.002 341.997 cv
520.002 342.007 li
550.393 342.007 li
cp
f
809.247 333.792 mo
809.646 331.926 811.483 330.734 813.352 331.132 cv
815.218 331.527 816.409 333.364 816.012 335.231 cv
815.615 337.101 813.778 338.292 811.912 337.897 cv
810.044 337.497 808.852 335.659 809.247 333.792 cv
cp
483.276 371.827 mo
481.926 373.177 479.735 373.177 478.386 371.827 cv
477.037 370.476 477.037 368.288 478.386 366.935 cv
479.735 365.585 481.926 365.588 483.276 366.935 cv
484.629 368.288 484.629 370.476 483.276 371.827 cv
cp
720.704 317.839 mo
601.702 317.839 li
552.143 366.786 li
486.958 366.786 li
485.977 365.97 484.775 365.252 483.849 364.794 cv
480.499 363.136 476.923 362.15 474.28 364.794 cv
471.638 367.434 471.642 371.716 474.283 374.359 cv
476.923 377.001 480.691 376.359 483.849 374.359 cv
485.632 373.23 487.918 371.73 488.567 370.243 cv
553.56 370.243 li
603.12 321.297 li
719.249 321.297 li
742.589 345.176 li
804.604 345.176 li
809.011 340.182 li
810.239 340.342 811.624 340.343 812.814 340.33 cv
816.544 340.29 820.057 338.775 820.837 335.12 cv
821.613 331.469 819.279 327.876 815.625 327.097 cv
811.973 326.318 809.512 329.095 807.602 332.307 cv
806.61 333.976 805.325 336.922 805.876 338.508 cv
803.045 341.718 li
744.044 341.718 li
720.704 317.839 li
cp
f
481.295 402.988 mo
479.386 402.988 477.836 401.441 477.836 399.53 cv
477.836 397.62 479.386 396.072 481.295 396.072 cv
483.203 396.072 484.753 397.62 484.753 399.53 cv
484.753 401.441 483.203 402.988 481.295 402.988 cv
cp
827.231 337.441 mo
827.63 335.576 829.467 334.384 831.334 334.782 cv
833.202 335.177 834.394 337.014 833.996 338.88 cv
833.601 340.747 831.764 341.941 829.896 341.544 cv
828.029 341.147 826.833 339.31 827.231 337.441 cv
cp
559.908 381.772 mo
599.384 342.007 li
676.378 342.007 li
687.901 352.38 li
819.308 352.38 li
826.804 343.81 li
828.075 343.996 829.544 343.994 830.795 343.979 cv
834.529 343.939 838.041 342.427 838.82 338.772 cv
839.598 335.12 837.264 331.525 833.61 330.747 cv
829.956 329.97 827.492 332.742 825.587 335.956 cv
824.63 337.565 823.39 340.369 823.798 341.992 cv
817.736 348.923 li
689.23 348.923 li
677.705 338.551 li
597.947 338.551 li
558.47 378.314 li
499.404 378.314 li
484.379 393.338 li
482.95 393.383 481.317 393.77 480.184 394.152 cv
476.643 395.351 473.418 397.181 473.418 400.917 cv
473.418 404.652 476.446 407.683 480.184 407.683 cv
483.919 407.683 486.131 404.56 486.949 400.917 cv
487.37 399.041 487.86 396.66 487.499 395.107 cv
500.836 381.772 li
559.908 381.772 li
cp
f
510.571 402.114 mo
508.669 401.963 507.248 400.301 507.397 398.397 cv
507.546 396.492 509.21 395.068 511.111 395.218 cv
513.016 395.367 514.438 397.032 514.289 398.935 cv
514.14 400.839 512.476 402.264 510.571 402.114 cv
cp
847.984 343.28 mo
848.38 341.411 850.218 340.222 852.088 340.618 cv
853.956 341.015 855.144 342.852 854.749 344.72 cv
854.351 346.588 852.514 347.777 850.646 347.382 cv
848.778 346.984 847.587 345.147 847.984 343.28 cv
cp
561.34 389.941 mo
603.131 348.058 li
672.593 348.058 li
683.837 359.014 li
838.503 357.852 li
847.453 349.627 li
848.749 349.83 850.263 349.832 851.548 349.817 cv
855.282 349.775 858.794 348.264 859.57 344.609 cv
860.35 340.956 858.018 337.361 854.36 336.585 cv
850.711 335.809 848.245 338.581 846.338 341.797 cv
845.421 343.34 844.239 345.992 844.509 347.637 cv
837.146 354.402 li
685.231 355.547 li
673.997 344.601 li
601.694 344.601 li
559.922 386.47 li
525.833 386.088 li
514.668 392.58 li
514.765 392.746 li
513.267 392.61 511.413 392.9 510.155 393.218 cv
506.533 394.136 503.175 395.708 502.883 399.433 cv
502.59 403.159 505.372 406.413 509.096 406.706 cv
512.823 406.997 515.269 404.06 516.369 400.489 cv
516.907 398.748 517.546 396.555 517.408 394.988 cv
526.749 389.556 li
561.34 389.941 li
cp
f
482.225 345.4 mo
480.313 345.368 478.794 343.792 478.827 341.882 cv
478.862 339.976 480.435 338.455 482.346 338.484 cv
484.254 338.522 485.776 340.095 485.742 342.005 cv
485.709 343.913 484.132 345.434 482.225 345.4 cv
cp
821.329 304.114 mo
821.727 302.246 823.564 301.056 825.433 301.452 cv
827.3 301.849 828.491 303.685 828.093 305.553 cv
827.698 307.422 825.86 308.611 823.993 308.215 cv
822.126 307.817 820.935 305.982 821.329 304.114 cv
cp
487.682 340.927 mo
486.544 337.368 484.77 334.111 481.036 334.047 cv
477.299 333.979 474.218 336.955 474.152 340.69 cv
474.088 344.426 477.169 346.69 480.799 347.571 cv
482.438 347.971 484.458 348.423 485.985 348.307 cv
494.443 357.853 li
546.367 357.853 li
598.233 305.699 li
793.384 305.699 li
803.18 314.201 li
817.364 314.201 li
821.065 310.5 li
822.3 310.664 823.696 310.665 824.896 310.651 cv
828.63 310.609 832.139 309.096 832.918 305.441 cv
833.694 301.787 831.362 298.197 827.709 297.418 cv
824.055 296.641 821.593 299.414 819.685 302.627 cv
818.711 304.268 817.45 307.143 817.929 308.747 cv
815.934 310.743 li
804.468 310.743 li
794.674 302.242 li
596.796 302.242 li
544.929 354.397 li
495.999 354.397 li
488.403 345.818 li
488.524 344.262 488.104 342.256 487.682 340.927 cv
cp
f
451.537 370.134 mo
453.447 370.169 454.968 371.743 454.934 373.65 cv
454.9 375.56 453.327 377.083 451.417 377.048 cv
449.508 377.015 447.987 375.439 448.02 373.53 cv
448.052 371.622 449.628 370.101 451.537 370.134 cv
cp
690.715 332.9 mo
692.066 331.551 694.253 331.551 695.604 332.9 cv
696.955 334.25 696.955 336.44 695.604 337.788 cv
694.253 339.14 692.066 339.14 690.715 337.788 cv
689.363 336.44 689.363 334.25 690.715 332.9 cv
cp
449.989 379.22 mo
452.05 379.719 454.722 380.317 456.241 379.742 cv
464.573 387.536 li
485.794 387.536 li
498.759 376.009 li
555.573 376.009 li
595.627 336.821 li
685.915 336.821 li
686.913 338.078 688.81 339.275 690.144 339.933 cv
693.49 341.589 697.066 342.576 699.71 339.933 cv
702.351 337.29 702.351 333.009 699.71 330.367 cv
697.066 327.724 693.302 328.367 690.144 330.367 cv
688.808 331.213 687.191 332.265 686.188 333.364 cv
594.216 333.364 li
554.161 372.551 li
497.447 372.551 li
484.48 384.08 li
465.936 384.08 li
457.606 376.281 li
457.519 374.984 457.194 373.582 456.874 372.576 cv
455.737 369.015 453.965 365.757 450.227 365.691 cv
446.492 365.628 443.412 368.603 443.343 372.339 cv
443.281 376.072 446.361 378.338 449.989 379.22 cv
cp
f
658.998 386.595 mo
660.349 385.247 662.537 385.247 663.888 386.595 cv
665.237 387.946 665.237 390.139 663.888 391.484 cv
662.537 392.835 660.349 392.835 658.998 391.484 cv
657.647 390.139 657.647 387.946 658.998 386.595 cv
cp
664.458 393.63 mo
665.526 393.102 666.956 392.231 667.995 391.261 cv
691.737 391.261 li
712.484 370.243 li
964.771 370.243 li
988.257 345.772 li
1051.9 345.772 li
1051.9 342.314 li
986.782 342.314 li
963.297 366.786 li
711.039 366.786 li
690.292 387.805 li
668.978 387.805 li
668.146 386.442 666.093 385.099 664.458 384.064 cv
661.301 382.064 657.535 381.423 654.892 384.064 cv
652.251 386.706 652.251 390.988 654.892 393.63 cv
657.535 396.272 661.11 395.286 664.458 393.63 cv
cp
f
655.661 428.852 mo
654.31 430.205 652.122 430.205 650.772 428.852 cv
649.425 427.503 649.425 425.314 650.772 423.962 cv
652.122 422.611 654.31 422.611 655.661 423.962 cv
657.017 425.314 657.017 427.503 655.661 428.852 cv
cp
660.466 427.884 mo
668.685 427.884 li
668.685 424.427 li
660.188 424.427 li
659.186 423.327 657.569 422.275 656.235 421.431 cv
653.078 419.431 649.31 418.788 646.67 421.431 cv
644.028 424.072 644.024 428.353 646.666 430.997 cv
649.31 433.64 652.886 432.652 656.235 430.997 cv
657.567 430.338 659.468 429.141 660.466 427.884 cv
cp
f
625.375 422.111 mo
626.658 420.696 628.843 420.585 630.262 421.864 cv
631.677 423.147 631.788 425.331 630.508 426.749 cv
629.228 428.165 627.044 428.274 625.625 426.995 cv
624.205 425.716 624.096 423.527 625.375 422.111 cv
cp
625.181 429.556 mo
628.438 431.393 632.23 431.843 634.732 429.071 cv
637.237 426.302 637.025 422.022 634.253 419.518 cv
631.481 417.015 627.959 418.177 624.696 420.001 cv
623.606 420.607 622.14 421.617 621.144 422.696 cv
612.155 422.977 li
612.264 426.433 li
620.563 426.176 li
621.511 427.444 623.552 428.637 625.181 429.556 cv
cp
f
449.061 398.974 mo
450.973 398.993 452.502 400.556 452.483 402.468 cv
452.466 404.378 450.903 405.909 448.993 405.89 cv
447.083 405.868 445.552 404.306 445.574 402.397 cv
445.591 400.489 447.154 398.952 449.061 398.974 cv
cp
679.244 366.044 mo
681.152 366.097 682.657 367.684 682.607 369.595 cv
682.552 371.503 680.966 373.007 679.059 372.956 cv
677.146 372.905 675.642 371.314 675.695 369.407 cv
675.746 367.499 677.337 365.993 679.244 366.044 cv
cp
447.865 407.797 mo
448.789 408.121 450.052 408.451 451.264 408.596 cv
451.443 409.254 451.815 409.867 452.378 410.338 cv
462.463 418.757 li
463.085 419.272 463.869 419.56 464.68 419.56 cv
528.646 419.56 li
529.534 419.56 530.386 419.22 531.027 418.609 cv
551.926 398.772 li
564.953 398.772 li
565.86 398.772 566.733 398.415 567.381 397.775 cv
606.136 359.583 li
664.147 359.583 li
670.641 365.683 li
671.315 366.317 672.183 366.621 673.046 366.61 cv
673.104 367.951 673.421 369.42 673.744 370.468 cv
674.843 374.036 676.587 377.31 680.325 377.413 cv
684.06 377.514 687.167 374.567 687.271 370.833 cv
687.368 367.097 684.313 364.805 680.689 363.889 cv
679.378 363.556 677.818 363.188 676.46 363.103 cv
676.444 362.201 676.083 361.307 675.374 360.643 cv
667.886 353.603 li
667.244 353.003 666.396 352.669 665.518 352.669 cv
604.717 352.669 li
603.809 352.669 602.938 353.025 602.29 353.663 cv
563.534 391.853 li
550.548 391.853 li
549.66 391.853 548.809 392.196 548.167 392.806 cv
527.269 412.643 li
465.933 412.643 li
456.811 405.027 li
456.346 404.641 455.807 404.411 455.251 404.305 cv
455.133 403.225 454.905 402.094 454.693 401.102 cv
453.911 397.441 451.736 394.306 447.998 394.272 cv
444.264 394.234 441.205 397.229 441.163 400.968 cv
441.133 404.702 444.338 406.565 447.865 407.797 cv
cp
f
452.573 345.734 mo
450.662 345.701 449.143 344.124 449.177 342.218 cv
449.21 340.308 450.783 338.786 452.695 338.818 cv
454.602 338.853 456.126 340.427 456.09 342.338 cv
456.058 344.247 454.481 345.768 452.573 345.734 cv
cp
839.624 310.922 mo
840.019 309.053 841.856 307.86 843.728 308.26 cv
845.592 308.656 846.783 310.494 846.384 312.36 cv
845.989 314.228 844.152 315.42 842.285 315.022 cv
840.417 314.625 839.227 312.789 839.624 310.922 cv
cp
458.03 341.259 mo
456.895 337.701 455.119 334.443 451.384 334.376 cv
447.647 334.313 444.566 337.288 444.502 341.025 cv
444.436 344.759 447.517 347.022 451.147 347.902 cv
452.544 348.243 454.22 348.622 455.632 348.658 cv
464.826 357.853 li
485.572 357.853 li
491.624 363.905 li
549.815 363.905 li
602.258 312.039 li
789.616 312.039 li
799.843 321.297 li
835.131 321.297 li
838.858 317.223 li
840.204 317.466 841.821 317.474 843.186 317.459 cv
846.921 317.417 850.434 315.903 851.21 312.249 cv
851.986 308.596 849.656 305.003 846 304.227 cv
842.346 303.447 839.884 306.222 837.976 309.434 cv
837.093 310.922 835.978 313.426 836.134 315.078 cv
833.607 317.838 li
801.178 317.838 li
790.949 308.582 li
600.838 308.582 li
548.394 360.447 li
493.055 360.447 li
487.004 354.397 li
466.258 354.397 li
458.669 346.806 li
459.008 345.203 458.517 342.782 458.03 341.259 cv
cp
f
790.034 328.065 mo
790.034 326.155 791.581 324.609 793.491 324.609 cv
795.399 324.609 796.949 326.155 796.949 328.065 cv
796.949 329.976 795.399 331.522 793.491 331.522 cv
791.581 331.522 790.034 329.976 790.034 328.065 cv
cp
800.009 328.62 mo
800.009 324.417 796.604 321.014 792.404 321.014 cv
788.204 321.014 784.801 324.417 784.801 328.62 cv
784.801 332.816 788.204 336.222 792.404 336.222 cv
796.604 336.222 800.009 332.816 800.009 328.62 cv
cp
f
999.23 383.958 mo
999.23 382.047 1000.78 380.497 1002.69 380.497 cv
1004.6 380.497 1006.15 382.047 1006.15 383.958 cv
1006.15 385.867 1004.6 387.415 1002.69 387.415 cv
1000.78 387.415 999.23 385.867 999.23 383.958 cv
cp
1009.21 384.509 mo
1009.21 380.308 1005.8 376.902 1001.6 376.902 cv
997.401 376.902 993.997 380.308 993.997 384.509 cv
993.997 388.708 997.401 392.111 1001.6 392.111 cv
1005.8 392.111 1009.21 388.708 1009.21 384.509 cv
cp
f
1021.93 380.497 mo
1023.84 380.497 1025.39 382.047 1025.39 383.958 cv
1025.39 385.867 1023.84 387.415 1021.93 387.415 cv
1020.02 387.415 1018.47 385.867 1018.47 383.958 cv
1018.47 382.047 1020.02 380.497 1021.93 380.497 cv
cp
1020.84 392.111 mo
1025.04 392.111 1028.45 388.708 1028.45 384.509 cv
1028.45 380.308 1025.04 376.902 1020.84 376.902 cv
1016.65 376.902 1013.24 380.308 1013.24 384.509 cv
1013.24 388.708 1016.65 392.111 1020.84 392.111 cv
cp
f
575.036 425.143 mo
576.393 426.488 576.407 428.673 575.066 430.032 cv
573.726 431.39 571.534 431.402 570.174 430.06 cv
568.819 428.718 568.806 426.532 570.149 425.173 cv
571.49 423.81 573.679 423.801 575.036 425.143 cv
cp
599.672 391.261 mo
617.224 391.261 li
629.326 404.102 li
687.901 404.102 li
715.935 376.052 li
966.64 376.052 li
990.412 351.552 li
1051.9 351.552 li
1051.9 348.095 li
988.948 348.095 li
965.178 372.595 li
714.505 372.595 li
686.47 400.643 li
630.818 400.643 li
618.717 387.805 li
598.233 387.805 li
570.713 415.493 li
570.713 420.528 li
569.572 421.527 568.479 423.224 567.609 424.617 cv
565.629 427.786 565.012 431.556 567.668 434.18 cv
570.325 436.806 574.61 436.784 577.233 434.126 cv
579.858 431.464 578.852 427.897 577.177 424.558 cv
576.533 423.275 575.386 421.468 574.172 420.452 cv
574.172 416.917 li
599.672 391.261 li
cp
f
510.993 464.407 mo
509.089 464.518 507.452 463.065 507.338 461.161 cv
507.226 459.255 508.68 457.618 510.584 457.505 cv
512.489 457.39 514.127 458.847 514.241 460.751 cv
514.354 462.657 512.9 464.294 510.993 464.407 cv
cp
578.896 448.622 mo
588.146 439.845 li
588.146 416.977 li
596.59 409.411 li
689.263 409.411 li
718.08 381.626 li
970.113 381.626 li
992.444 357.853 li
1051.9 357.853 li
1051.9 354.397 li
990.947 354.397 li
968.618 378.169 li
716.685 378.169 li
687.868 405.952 li
595.266 405.952 li
584.69 415.431 li
584.69 438.359 li
577.518 445.163 li
523.896 445.163 li
514.489 454.568 li
512.888 454.48 510.739 455.095 509.359 455.655 cv
505.898 457.056 502.789 459.077 503.008 462.806 cv
503.229 466.538 506.433 469.382 510.159 469.157 cv
513.892 468.935 515.913 465.693 516.514 462.007 cv
516.769 460.442 517.054 458.534 516.894 457.053 cv
525.327 448.622 li
578.896 448.622 li
cp
f
685.241 426.157 mo
685.241 431.435 680.956 435.722 675.675 435.722 cv
670.391 435.722 666.109 431.435 666.109 426.157 cv
666.109 420.872 670.391 416.589 675.675 416.589 cv
680.956 416.589 685.241 420.872 685.241 426.157 cv
cp
1 1 1 rgb
f
626.397 390.15 mo
626.397 395.434 622.113 399.718 616.832 399.718 cv
611.549 399.718 607.267 395.434 607.267 390.15 cv
607.267 384.868 611.549 380.585 616.832 380.585 cv
622.113 380.585 626.397 384.868 626.397 390.15 cv
cp
f
549.106 404.915 mo
549.106 410.201 544.824 414.484 539.541 414.484 cv
534.259 414.484 529.974 410.201 529.974 404.915 cv
529.974 399.636 534.259 395.351 539.541 395.351 cv
544.824 395.351 549.106 399.636 549.106 404.915 cv
cp
f
614.081 424.417 mo
614.081 429.701 609.799 433.984 604.515 433.984 cv
599.234 433.984 594.948 429.701 594.948 424.417 cv
594.948 419.136 599.234 414.851 604.515 414.851 cv
609.799 414.851 614.081 419.136 614.081 424.417 cv
cp
f
822.613 497.234 mo
820.245 497.234 818.329 495.315 818.329 492.947 cv
818.329 490.581 820.245 488.662 822.613 488.662 cv
824.98 488.662 826.899 490.581 826.899 492.947 cv
826.899 495.315 824.98 497.234 822.613 497.234 cv
cp
822.613 558.818 mo
820.245 558.818 818.329 556.899 818.329 554.533 cv
818.329 552.166 820.245 550.248 822.613 550.248 cv
824.98 550.248 826.899 552.166 826.899 554.533 cv
826.899 556.899 824.98 558.818 822.613 558.818 cv
cp
822.613 589.006 mo
820.245 589.006 818.329 587.087 818.329 584.72 cv
818.329 582.352 820.245 580.437 822.613 580.437 cv
824.98 580.437 826.899 582.352 826.899 584.72 cv
826.899 587.087 824.98 589.006 822.613 589.006 cv
cp
791.493 527.988 mo
789.127 527.988 787.209 526.068 787.209 523.701 cv
787.209 521.334 789.127 519.416 791.493 519.416 cv
793.86 519.416 795.78 521.334 795.78 523.701 cv
795.78 526.068 793.86 527.988 791.493 527.988 cv
cp
791.493 558.818 mo
789.127 558.818 787.209 556.899 787.209 554.533 cv
787.209 552.166 789.127 550.248 791.493 550.248 cv
793.86 550.248 795.78 552.166 795.78 554.533 cv
795.78 556.899 793.86 558.818 791.493 558.818 cv
cp
791.493 589.15 mo
789.127 589.15 787.209 587.232 787.209 584.866 cv
787.209 582.499 789.127 580.581 791.493 580.581 cv
793.86 580.581 795.78 582.499 795.78 584.866 cv
795.78 587.232 793.86 589.15 791.493 589.15 cv
cp
790.918 488.662 mo
793.285 488.662 795.204 490.581 795.204 492.947 cv
795.204 495.315 793.285 497.234 790.918 497.234 cv
788.551 497.234 786.631 495.315 786.631 492.947 cv
786.631 490.581 788.551 488.662 790.918 488.662 cv
cp
759.557 497.234 mo
757.19 497.234 755.271 495.315 755.271 492.947 cv
755.271 490.581 757.19 488.662 759.557 488.662 cv
761.924 488.662 763.842 490.581 763.842 492.947 cv
763.842 495.315 761.924 497.234 759.557 497.234 cv
cp
759.557 558.818 mo
757.19 558.818 755.271 556.899 755.271 554.533 cv
755.271 552.166 757.19 550.248 759.557 550.248 cv
761.924 550.248 763.842 552.166 763.842 554.533 cv
763.842 556.899 761.924 558.818 759.557 558.818 cv
cp
754.505 523.701 mo
754.505 521.334 756.423 519.416 758.79 519.416 cv
761.157 519.416 763.075 521.334 763.075 523.701 cv
763.075 526.068 761.157 527.988 758.79 527.988 cv
756.423 527.988 754.505 526.068 754.505 523.701 cv
cp
759.557 589.006 mo
757.19 589.006 755.271 587.087 755.271 584.72 cv
755.271 582.352 757.19 580.437 759.557 580.437 cv
761.924 580.437 763.842 582.352 763.842 584.72 cv
763.842 587.087 761.924 589.006 759.557 589.006 cv
cp
851.285 580.437 mo
853.651 580.437 855.57 582.352 855.57 584.72 cv
855.57 587.087 853.651 589.006 851.285 589.006 cv
848.917 589.006 847.001 587.087 847.001 584.72 cv
847.001 582.352 848.917 580.437 851.285 580.437 cv
cp
851.285 550.248 mo
853.651 550.248 855.57 552.166 855.57 554.533 cv
855.57 556.899 853.651 558.818 851.285 558.818 cv
848.917 558.818 847.001 556.899 847.001 554.533 cv
847.001 552.166 848.917 550.248 851.285 550.248 cv
cp
852.149 489.078 mo
854.517 489.078 856.435 490.996 856.435 493.363 cv
856.435 495.73 854.517 497.65 852.149 497.65 cv
849.782 497.65 847.864 495.73 847.864 493.363 cv
847.864 490.996 849.782 489.078 852.149 489.078 cv
cp
837.923 608.648 mo
841.219 605.038 857.207 588.044 860.983 584.325 cv
866.315 579.075 865.362 575.104 865.362 575.104 cv
865.362 488.045 li
865.362 476.774 865.948 476.141 853.327 476.141 cv
767.431 476.141 li
754.81 476.141 752.37 480.231 752.37 491.503 cv
752.37 591.256 li
752.37 602.527 756.538 613.284 769.16 613.284 cv
829.286 613.284 li
829.286 613.284 833.033 614.004 837.923 608.648 cv
cp
0 .862745 1 rgb
f
1030.69 667.027 mo
1032.6 667.027 1034.15 668.574 1034.15 670.484 cv
1034.15 672.396 1032.6 673.941 1030.69 673.941 cv
1028.78 673.941 1027.23 672.396 1027.23 670.484 cv
1027.23 668.574 1028.78 667.027 1030.69 667.027 cv
cp
1009.47 599.348 mo
1021.31 611.357 li
1014.94 629.031 li
1015.25 656.963 li
1024.55 666.238 li
1024.31 667.842 1024.82 670.137 1025.31 671.597 cv
1026.51 675.135 1028.34 678.362 1032.08 678.362 cv
1035.81 678.362 1038.84 675.333 1038.84 671.597 cv
1038.84 667.859 1035.72 665.648 1032.08 664.832 cv
1030.42 664.46 1028.37 664.039 1026.84 664.191 cv
1027.12 663.918 li
1018.69 655.512 li
1018.41 629.619 li
1025.3 610.481 li
1012.93 597.928 li
1012.93 517.668 li
977.252 482.378 li
974.82 484.836 li
1009.47 519.113 li
1009.47 599.348 li
cp
f
1039.96 641.084 mo
1041.34 642.41 1041.38 644.598 1040.05 645.973 cv
1038.72 647.348 1036.53 647.385 1035.16 646.057 cv
1033.78 644.731 1033.75 642.541 1035.07 641.168 cv
1036.4 639.797 1038.59 639.758 1039.96 641.084 cv
cp
1017.83 576.115 mo
1031.23 593.874 li
1035.98 599.29 li
1035.98 636.33 li
1034.73 637.344 1033.56 639.28 1032.92 640.634 cv
1031.32 644.012 1030.4 647.606 1033.09 650.2 cv
1035.77 652.795 1040.06 652.721 1042.65 650.035 cv
1045.25 647.346 1044.54 643.589 1042.49 640.469 cv
1041.62 639.157 1040.55 637.57 1039.44 636.586 cv
1039.44 597.986 li
1033.91 591.691 li
1021.29 574.957 li
1021.29 515.382 li
989.174 482.4 li
986.695 484.813 li
1017.83 516.787 li
1017.83 576.115 li
cp
f
1049.32 714.707 mo
1050.69 716.033 1050.73 718.221 1049.41 719.597 cv
1048.08 720.971 1045.89 721.01 1044.52 719.682 cv
1043.14 718.356 1043.11 716.166 1044.43 714.792 cv
1045.76 713.419 1047.95 713.381 1049.32 714.707 cv
cp
1040.47 496.779 mo
1048.09 504.141 li
1048.09 556.861 li
1046.08 575.35 li
1045.5 709.826 li
1044.2 710.798 1042.95 712.848 1042.28 714.257 cv
1040.68 717.637 1039.76 721.229 1042.45 723.822 cv
1045.13 726.42 1049.42 726.346 1052.01 723.656 cv
1054.61 720.969 1053.9 717.211 1051.85 714.092 cv
1051.02 712.842 1050.01 711.346 1048.96 710.356 cv
1049.52 575.633 li
1051.53 557.143 li
1051.54 502.672 li
1041.87 493.322 li
1012.18 493.322 li
1000.73 482.357 li
998.343 484.857 li
1010.8 496.779 li
1040.47 496.779 li
cp
f
1059.13 698.531 mo
1060.51 699.857 1060.54 702.047 1059.22 703.421 cv
1057.89 704.791 1055.7 704.832 1054.33 703.504 cv
1052.96 702.178 1052.92 699.99 1054.24 698.615 cv
1055.57 697.241 1057.76 697.203 1059.13 698.531 cv
cp
1046.52 487.272 mo
1066.81 506.738 li
1066.81 574.864 li
1055.29 587.449 li
1055.29 693.671 li
1053.99 694.65 1052.75 696.681 1052.09 698.082 cv
1050.49 701.459 1049.57 705.051 1052.26 707.646 cv
1054.95 710.242 1059.23 710.167 1061.82 707.481 cv
1064.42 704.791 1063.71 701.037 1061.65 697.915 cv
1060.83 696.656 1059.81 695.146 1058.75 694.155 cv
1058.75 588.793 li
1070.27 576.209 li
1070.27 505.262 li
1047.92 483.813 li
1017.25 483.813 li
1015.12 482.223 li
1013.05 484.991 li
1016.1 487.272 li
1046.52 487.272 li
cp
f
972.644 862.327 mo
970.734 862.327 969.188 860.779 969.188 858.869 cv
969.188 856.959 970.734 855.41 972.644 855.41 cv
974.557 855.41 976.103 856.959 976.103 858.869 cv
976.103 860.779 974.557 862.327 972.644 862.327 cv
cp
1087.29 728.615 mo
1060.76 756.867 li
1060.76 814.752 li
1038.15 837.368 li
994.82 837.368 li
978.05 853.158 li
976.664 852.197 973.414 852.856 971.533 853.492 cv
967.995 854.688 964.769 856.521 964.769 860.255 cv
964.769 863.991 967.797 867.023 971.533 867.023 cv
975.269 867.023 977.48 863.9 978.297 860.255 cv
978.56 859.081 978.853 857.707 978.949 856.46 cv
979.25 856.78 li
996.19 840.825 li
1039.58 840.825 li
1064.22 816.184 li
1064.22 758.234 li
1090.72 730.01 li
1091.32 696.875 li
1079.2 685.625 li
1079.2 516.773 li
1095.05 500.063 li
1095.05 483.607 li
1091.6 483.607 li
1091.6 498.684 li
1075.75 515.396 li
1075.75 687.131 li
1087.83 698.357 li
1087.29 728.615 li
cp
f
1003.37 886.148 mo
1001.46 886.148 999.912 884.601 999.912 882.691 cv
999.912 880.782 1001.46 879.232 1003.37 879.232 cv
1005.28 879.232 1006.83 880.782 1006.83 882.691 cv
1006.83 884.601 1005.28 886.148 1003.37 886.148 cv
cp
1088.43 674.416 mo
1094.19 680.178 li
1094.19 734.367 li
1072.87 755.977 li
1072.87 811.289 li
1007.04 876.498 li
1005.49 876.43 1003.55 876.877 1002.26 877.315 cv
998.72 878.51 995.492 880.342 995.492 884.077 cv
995.492 887.813 998.521 890.842 1002.26 890.842 cv
1005.99 890.842 1008.21 887.724 1009.02 884.077 cv
1009.4 882.394 1009.83 880.308 1009.66 878.773 cv
1076.32 812.731 li
1076.32 757.394 li
1097.65 735.785 li
1097.65 678.748 li
1091.88 672.984 li
1091.88 518.32 li
1103.98 507.947 li
1103.98 483.607 li
1100.53 483.607 li
1100.53 506.355 li
1088.43 516.729 li
1088.43 674.416 li
cp
f
1091.68 923.769 mo
1093.06 925.094 1093.1 927.284 1091.77 928.657 cv
1090.45 930.032 1088.25 930.071 1086.88 928.741 cv
1085.51 927.415 1085.47 925.227 1086.79 923.852 cv
1088.12 922.481 1090.31 922.441 1091.68 923.769 cv
cp
1101.97 744.87 mo
1087.85 758.848 li
1087.85 918.902 li
1086.55 919.88 1085.31 921.916 1084.64 923.319 cv
1083.04 926.698 1082.12 930.29 1084.81 932.885 cv
1087.5 935.479 1091.78 935.405 1094.38 932.719 cv
1096.97 930.032 1096.26 926.273 1094.21 923.153 cv
1093.38 921.898 1092.36 920.392 1091.3 919.4 cv
1091.3 760.291 li
1105.43 746.315 li
1105.43 529.787 li
1113.21 522.295 li
1113.21 483.607 li
1109.75 483.607 li
1109.75 520.824 li
1101.97 528.315 li
1101.97 744.87 li
cp
f
1032.72 513.332 mo
1031.35 512.007 1031.31 509.816 1032.64 508.443 cv
1033.97 507.068 1036.15 507.031 1037.53 508.357 cv
1038.9 509.685 1038.94 511.874 1037.61 513.248 cv
1036.29 514.62 1034.1 514.659 1032.72 513.332 cv
cp
1039.77 513.781 mo
1041.36 510.404 1042.29 506.813 1039.6 504.217 cv
1036.91 501.622 1032.63 501.696 1030.03 504.383 cv
1027.44 507.072 1028.15 510.826 1030.2 513.949 cv
1031.12 515.349 1032.28 517.063 1033.47 518.023 cv
1033.62 529.287 li
1037.08 529.242 li
1036.93 517.893 li
1038.09 516.84 1039.17 515.053 1039.77 513.781 cv
cp
f
1020.22 770.613 mo
1020.61 768.743 1022.45 767.553 1024.32 767.949 cv
1026.19 768.348 1027.38 770.185 1026.98 772.053 cv
1026.58 773.92 1024.75 775.111 1022.88 774.713 cv
1021.01 774.316 1019.82 772.481 1020.22 770.613 cv
cp
1023.78 777.15 mo
1027.52 777.107 1031.03 775.594 1031.8 771.941 cv
1032.58 768.287 1030.25 764.695 1026.59 763.918 cv
1022.94 763.139 1020.48 765.914 1018.57 769.127 cv
1017.5 770.932 1016.05 774.254 1017 775.705 cv
1017.94 777.158 1021.29 777.178 1023.78 777.15 cv
cp
f
1037.08 884.071 mo
1037.08 885.979 1035.53 887.528 1033.62 887.528 cv
1031.71 887.528 1030.16 885.979 1030.16 884.071 cv
1030.16 882.161 1031.71 880.614 1033.62 880.614 cv
1035.53 880.614 1037.08 882.161 1037.08 884.071 cv
cp
1024.93 884.624 mo
1024.93 888.821 1028.33 892.227 1032.53 892.227 cv
1036.73 892.227 1040.13 888.821 1040.13 884.624 cv
1040.13 880.423 1036.73 877.017 1032.53 877.017 cv
1028.33 877.017 1024.93 880.423 1024.93 884.624 cv
cp
f
1032.47 705.231 mo
1030.56 705.231 1029.01 703.681 1029.01 701.773 cv
1029.01 699.861 1030.56 698.312 1032.47 698.312 cv
1034.38 698.312 1035.93 699.861 1035.93 701.773 cv
1035.93 703.681 1034.38 705.231 1032.47 705.231 cv
cp
1031.38 694.719 mo
1027.19 694.719 1023.78 698.123 1023.78 702.323 cv
1023.78 706.523 1027.19 709.928 1031.38 709.928 cv
1035.58 709.928 1038.99 706.523 1038.99 702.323 cv
1038.99 698.123 1035.58 694.719 1031.38 694.719 cv
cp
f
1076.64 709.727 mo
1078.55 709.727 1080.1 711.275 1080.1 713.187 cv
1080.1 715.094 1078.55 716.644 1076.64 716.644 cv
1074.73 716.644 1073.19 715.094 1073.19 713.187 cv
1073.19 711.275 1074.73 709.727 1076.64 709.727 cv
cp
1067.95 713.736 mo
1067.95 717.938 1071.36 721.342 1075.56 721.342 cv
1079.76 721.342 1083.16 717.938 1083.16 713.736 cv
1083.16 709.535 1079.76 706.132 1075.56 706.132 cv
1071.36 706.132 1067.95 709.535 1067.95 713.736 cv
cp
f
1033.92 827.795 mo
1032.01 827.795 1030.46 826.246 1030.46 824.337 cv
1030.46 822.428 1032.01 820.878 1033.92 820.878 cv
1035.83 820.878 1037.38 822.428 1037.38 824.337 cv
1037.38 826.246 1035.83 827.795 1033.92 827.795 cv
cp
1032.84 817.283 mo
1028.64 817.283 1025.23 820.688 1025.23 824.889 cv
1025.23 829.088 1028.64 832.492 1032.84 832.492 cv
1037.04 832.492 1040.44 829.088 1040.44 824.889 cv
1040.44 820.688 1037.04 817.283 1032.84 817.283 cv
cp
f
1036.74 587.521 mo
1036.74 592.773 1032.48 597.029 1027.23 597.029 cv
1021.98 597.029 1017.72 592.773 1017.72 587.521 cv
1017.72 582.268 1021.98 578.012 1027.23 578.012 cv
1032.48 578.012 1036.74 582.268 1036.74 587.521 cv
1 1 1 rgb
f
1031.81 620.168 mo
1031.81 625.419 1027.56 629.676 1022.31 629.676 cv
1017.05 629.676 1012.8 625.419 1012.8 620.168 cv
1012.8 614.916 1017.05 610.659 1022.31 610.659 cv
1027.56 610.659 1031.81 614.916 1031.81 620.168 cv
f
1059.32 565.587 mo
1059.32 570.84 1055.07 575.096 1049.81 575.096 cv
1044.56 575.096 1040.3 570.84 1040.3 565.587 cv
1040.3 560.334 1044.56 556.078 1049.81 556.078 cv
1055.07 556.078 1059.32 560.334 1059.32 565.587 cv
f
1045.2 537.143 mo
1045.2 542.396 1040.95 546.652 1035.7 546.652 cv
1030.44 546.652 1026.19 542.396 1026.19 537.143 cv
1026.19 531.891 1030.44 527.635 1035.7 527.635 cv
1040.95 527.635 1045.2 531.891 1045.2 537.143 cv
f
1023.59 781.753 mo
1023.59 787.008 1019.34 791.262 1014.08 791.262 cv
1008.83 791.262 1004.58 787.008 1004.58 781.753 cv
1004.58 776.503 1008.83 772.244 1014.08 772.244 cv
1019.34 772.244 1023.59 776.503 1023.59 781.753 cv
f
537.135 85.7603 mo
538.473 87.125 538.451 89.3135 537.087 90.6499 cv
535.725 91.9873 533.533 91.9624 532.197 90.6011 cv
530.861 89.2358 530.885 87.0464 532.25 85.7095 cv
533.609 84.3726 535.803 84.3955 537.135 85.7603 cv
cp
533.164 80.9966 mo
531.934 82.0015 530.766 83.8257 530.111 85.1147 cv
528.42 88.4492 527.396 92.0132 530.012 94.6812 cv
532.625 97.3521 536.908 97.3955 539.576 94.7832 cv
542.244 92.166 541.643 88.3921 539.678 85.2144 cv
538.82 83.8315 537.746 82.1479 536.621 81.1421 cv
536.621 71.5747 li
527.684 63.6499 li
525.391 66.2358 li
533.164 73.1274 li
533.164 80.9966 li
cp
0 .862745 1 rgb
f
291.027 223.594 mo
289.117 223.594 287.57 222.046 287.57 220.137 cv
287.57 218.225 289.117 216.679 291.027 216.679 cv
292.938 216.679 294.486 218.225 294.486 220.137 cv
294.486 222.046 292.938 223.594 291.027 223.594 cv
cp
523.51 99.7261 mo
511.693 87.9111 li
412.006 87.9111 li
383.478 116.438 li
335.957 116.438 li
303.66 147.395 li
303.66 205.923 li
294.635 213.935 li
293.102 213.883 291.191 214.326 289.918 214.758 cv
286.377 215.956 283.15 217.785 283.15 221.521 cv
283.15 225.258 286.18 228.286 289.918 228.286 cv
293.652 228.286 295.863 225.168 296.682 221.521 cv
297.063 219.826 297.494 217.722 297.31 216.183 cv
307.117 207.476 li
307.117 148.873 li
337.346 119.896 li
384.91 119.896 li
413.435 91.3682 li
510.264 91.3682 li
522.078 103.183 li
541.711 103.183 li
548.438 95.7847 li
548.438 64.9429 li
544.979 64.9429 li
544.979 94.4468 li
540.182 99.7261 li
523.51 99.7261 li
cp
f
322.685 186.072 mo
324.02 187.436 323.998 189.625 322.635 190.962 cv
321.27 192.298 319.084 192.275 317.746 190.91 cv
316.408 189.546 316.432 187.356 317.795 186.019 cv
319.16 184.684 321.348 184.708 322.685 186.072 cv
cp
521.48 106.929 mo
508.803 94.5396 li
414.861 94.5396 li
388.352 122.489 li
341.408 122.489 li
318.785 145.113 li
318.785 180.984 li
319.16 180.984 li
317.771 181.865 316.391 183.98 315.658 185.427 cv
313.967 188.758 312.943 192.322 315.559 194.993 cv
318.171 197.661 322.455 197.708 325.127 195.092 cv
327.793 192.479 327.189 188.702 325.225 185.525 cv
324.215 183.893 322.902 181.843 321.559 180.984 cv
322.242 180.984 li
322.242 146.545 li
342.84 125.947 li
389.836 125.947 li
416.348 97.9976 li
507.393 97.9976 li
520.074 110.387 li
545.408 110.387 li
555.066 100.729 li
555.066 64.9429 li
551.607 64.9429 li
551.607 99.2974 li
543.977 106.929 li
521.48 106.929 li
cp
f
353.805 186.072 mo
355.141 187.436 355.119 189.625 353.754 190.962 cv
352.391 192.298 350.201 192.275 348.865 190.91 cv
347.527 189.546 347.551 187.356 348.914 186.019 cv
350.277 184.684 352.467 184.708 353.805 186.072 cv
cp
518.334 112.115 mo
506.232 99.7222 li
416.895 100.017 li
349.332 168.75 li
349.332 180.984 li
350.281 180.984 li
348.893 181.865 347.512 183.98 346.777 185.427 cv
345.086 188.758 344.063 192.322 346.678 194.993 cv
349.291 197.661 353.574 197.708 356.246 195.092 cv
358.914 192.479 358.309 188.702 356.344 185.525 cv
355.334 183.893 354.021 181.843 352.68 180.984 cv
352.789 180.984 li
352.789 170.165 li
418.35 103.466 li
504.779 103.188 li
516.878 115.573 li
547.4 115.573 li
560.83 102.771 li
560.83 64.9429 li
557.373 64.9429 li
557.373 101.29 li
546.016 112.115 li
518.334 112.115 li
cp
f
385.318 157.904 mo
386.656 159.267 386.631 161.456 385.268 162.792 cv
383.908 164.13 381.715 164.105 380.383 162.742 cv
379.045 161.379 379.066 159.188 380.43 157.854 cv
381.793 156.515 383.986 156.539 385.318 157.904 cv
cp
513.15 118.452 mo
501.914 106.929 li
420.502 106.929 li
380.736 147.134 li
380.736 153.708 li
379.74 154.742 378.838 156.185 378.293 157.259 cv
376.602 160.591 375.58 164.155 378.193 166.825 cv
380.809 169.493 385.092 169.54 387.76 166.925 cv
390.428 164.309 389.826 160.535 387.857 157.356 cv
386.848 155.725 385.535 153.673 384.193 152.814 cv
384.193 148.556 li
421.943 110.387 li
500.455 110.387 li
511.693 121.911 li
551.428 121.911 li
566.881 107.388 li
566.881 64.9429 li
563.422 64.9429 li
563.422 105.892 li
550.059 118.452 li
513.15 118.452 li
cp
f
443.777 156.175 mo
445.113 157.539 445.094 159.726 443.728 161.064 cv
442.365 162.401 440.174 162.377 438.84 161.013 cv
437.502 159.648 437.525 157.46 438.891 156.124 cv
440.252 154.786 442.443 154.81 443.777 156.175 cv
cp
511.693 123.93 mo
499.586 111.822 li
465.296 112.123 li
439.809 138.085 li
439.809 151.304 li
439.945 151.304 li
438.664 152.28 437.432 154.19 436.752 155.529 cv
435.06 158.863 434.037 162.426 436.652 165.096 cv
439.264 167.765 443.551 167.81 446.217 165.197 cv
448.885 162.58 448.283 158.806 446.318 155.627 cv
445.385 154.122 444.193 152.258 442.959 151.304 cv
443.266 151.304 li
443.266 139.5 li
466.758 115.565 li
498.168 115.293 li
510.264 127.388 li
554.043 127.388 li
572.643 109.096 li
572.643 64.9429 li
569.184 64.9429 li
569.184 107.646 li
552.628 123.93 li
511.693 123.93 li
cp
f
525.736 142.229 mo
524.385 143.58 522.197 143.58 520.846 142.229 cv
519.496 140.877 519.496 138.689 520.846 137.339 cv
522.197 135.988 524.385 135.988 525.736 137.339 cv
527.086 138.689 527.086 140.877 525.736 142.229 cv
cp
529.26 137.063 mo
528.309 136.298 527.185 135.629 526.307 135.195 cv
522.959 133.539 519.383 132.554 516.74 135.195 cv
514.1 137.837 514.1 142.118 516.74 144.762 cv
519.383 147.402 523.148 146.76 526.307 144.762 cv
528.143 143.6 530.51 142.048 531.08 140.519 cv
550.287 140.519 li
579.271 112.562 li
579.271 64.9429 li
575.813 64.9429 li
575.813 111.092 li
548.894 137.063 li
529.26 137.063 li
cp
f
491.512 145.977 mo
489.602 145.94 488.082 144.367 488.115 142.458 cv
488.148 140.548 489.723 139.027 491.635 139.063 cv
493.543 139.096 495.064 140.669 495.027 142.58 cv
494.996 144.488 493.421 146.009 491.512 145.977 cv
cp
502.685 149.575 mo
497.703 145.304 li
497.628 143.979 497.299 142.533 496.969 141.5 cv
495.836 137.943 494.059 134.685 490.324 134.619 cv
486.586 134.554 483.506 137.529 483.439 141.265 cv
483.378 145 486.453 147.263 490.088 148.145 cv
492.139 148.644 494.801 149.241 496.322 148.672 cv
501.406 153.033 li
548.588 153.033 li
585.898 114.837 li
585.898 64.9429 li
582.441 64.9429 li
582.441 113.429 li
547.135 149.575 li
502.685 149.575 li
cp
f
387.252 192.719 mo
385.9 194.068 383.711 194.068 382.359 192.719 cv
381.012 191.368 381.012 189.179 382.359 187.83 cv
383.711 186.479 385.9 186.479 387.252 187.83 cv
388.6 189.179 388.6 191.368 387.252 192.719 cv
cp
606.355 125.822 mo
576.813 156.201 li
467.336 156.201 li
433.91 189.236 li
392.359 189.236 li
391.502 187.825 389.309 186.421 387.824 185.685 cv
384.475 184.029 380.898 183.042 378.256 185.685 cv
375.613 188.327 375.613 192.609 378.256 195.251 cv
380.898 197.894 384.668 197.252 387.824 195.251 cv
389.117 194.431 390.678 193.417 391.688 192.354 cv
391.688 192.694 li
435.332 192.694 li
468.758 159.66 li
578.273 159.66 li
609.813 127.226 li
609.813 107.408 li
597.137 94.6885 li
597.137 64.9429 li
593.68 64.9429 li
593.68 96.1182 li
606.355 108.835 li
606.355 125.822 li
cp
f
591.885 123.979 mo
593.223 125.341 593.199 127.532 591.836 128.867 cv
590.471 130.205 588.283 130.181 586.947 128.815 cv
585.607 127.452 585.631 125.262 586.996 123.926 cv
588.359 122.589 590.549 122.613 591.885 123.979 cv
cp
584.859 123.334 mo
583.168 126.666 582.144 130.229 584.758 132.898 cv
587.371 135.57 591.656 135.615 594.326 133 cv
596.994 130.387 596.391 126.61 594.426 123.431 cv
593.494 121.933 592.313 120.081 591.086 119.122 cv
591.086 64.9429 li
587.627 64.9429 li
587.627 119.462 li
586.504 120.5 585.461 122.143 584.859 123.334 cv
cp
f
605.438 85.7095 mo
606.801 84.3726 608.986 84.3955 610.326 85.7603 cv
611.662 87.125 611.639 89.3135 610.275 90.6499 cv
608.91 91.9873 606.723 91.9624 605.385 90.6011 cv
604.053 89.2358 604.072 87.0464 605.438 85.7095 cv
cp
612.768 94.7832 mo
615.434 92.166 614.83 88.3921 612.865 85.2144 cv
612.01 83.8315 610.935 82.1479 609.813 81.1421 cv
609.813 64.9429 li
606.355 64.9429 li
606.355 80.9941 li
605.123 81.999 603.953 83.8247 603.299 85.1147 cv
601.611 88.4492 600.584 92.0132 603.201 94.6812 cv
605.815 97.3521 610.096 97.3955 612.768 94.7832 cv
cp
f
518.973 181.383 mo
520.299 180.008 522.486 179.971 523.861 181.297 cv
525.236 182.623 525.273 184.81 523.947 186.188 cv
522.619 187.563 520.432 187.598 519.057 186.27 cv
517.685 184.944 517.644 182.755 518.973 181.383 cv
cp
518.523 188.425 mo
521.898 190.023 525.492 190.945 528.09 188.258 cv
530.684 185.57 530.609 181.286 527.924 178.69 cv
525.236 176.096 521.477 176.804 518.357 178.859 cv
516.762 179.907 514.762 181.267 513.932 182.625 cv
505.938 182.625 li
505.938 186.081 li
514.869 186.081 li
514.869 186.046 li
515.932 187.027 517.42 187.903 518.523 188.425 cv
cp
f
539 182.425 mo
539 180.515 540.545 178.967 542.457 178.967 cv
544.365 178.967 545.914 180.515 545.914 182.425 cv
545.914 184.335 544.365 185.883 542.457 185.883 cv
540.545 185.883 539 184.335 539 182.425 cv
cp
548.975 182.977 mo
548.975 178.775 545.57 175.371 541.371 175.371 cv
537.174 175.371 533.766 178.775 533.766 182.977 cv
533.766 187.176 537.174 190.58 541.371 190.58 cv
545.57 190.58 548.975 187.176 548.975 182.977 cv
cp
f
498.832 174.275 mo
504.087 174.275 508.342 178.531 508.342 183.785 cv
508.342 189.036 504.087 193.292 498.832 193.292 cv
493.582 193.292 489.326 189.036 489.326 183.785 cv
489.326 178.531 493.582 174.275 498.832 174.275 cv
1 1 1 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.1.0
%%For: (user) ()
%%Title: (plata_4.eps)
%%CreationDate: 5/12/2016 1:11 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Bj2NJdOoo2cZSo1OP:]kODA2'gIMTdChtf`IDJ6"5Xq6NFLUGNo@m'r&XfIF+e\%5O!I3`]MBUhauptZO/T[7MlhH7>&0]D
%>CS6fN80S1)+KYcA*/a-rcRu'ZeAa8]r6pQ2fuZ0X3toSc/*?9<Je<CoiAcVkq;/MJ!QS7QfSnWV4@Doea'>%F2`I9E^kHa>OLH^
%XWD>f3fS/5kN*-Wg5"JZ9p^1R!;N&Bro$n15l4E^7n]P\H/?64`T37c*r\+mBeMNHFaK["YL[H;R7G`CQ7#&g8+!V[5_CZO9`!Wd
%rKo*(a5qc`-ZeDSXm"*fHk&LpjEB7-FLd`.':Jb_6iBg[AHjkSs)6#ts$(1?r\+1djm8K^oBbn20S^q`4<s%!oWtATR-,drA<%I_
%'0M'hm<Z;ZnV)71:Mt&Arh&79FCVlaDJ0tihP#'1QB;]q>S-aWa.e(\@G\@kj2!lKJ(12WQZLKIE]*-\lR[.(qmCq&[D`uWIb<u<
%UX#?@X[ac%0eAR$GhK)dF_X,X@'a2%gJ)LKs/T<CPWL6iO-$YIn)Gm`F$Vq3X+"Qjr%eE6R;.nUG18Wf^#c*=:<\fCk0c8:T)<$X
%D>O9GWI^W3/.6ZWfmNXG9KbDnYaPXR@5L-.O6bLG]\Mc$:28$b/#3ge6VjEBdn[#+^f]L:"nE`V3ZfXH0@^$"(/DoslU=O]'@T!I
%J!n*#,QDd+;f=Lnl`CA/Ul0^<$1")Q+R6'Bp$:NXr#6*mDl^Q*i:'a)3n0T8ppYadP2Cl/h0P]BI+i<-gKVq_eo1SW.o]_C;=8:#
%l*WQoa48tjd<GH-Hu=u%AaZ3iY0\$Xn$l*+>\hYm0d,ki'BS:VlHB4Ws)45&oOs)1$jI:,7e;\>hJ+DBQ?HD#goZp4j\ChcL^2_<
%rB\2_l'qrFU1)PuT4ptcQ8T`kO2>ag`kS<8ihn<(lLt(fBRb*tbu<o9h_&!oG\ct5rI`s1]ghI4^XB)%ANJH1>4^NA(fp(srbQ`&
%E:;>U4<WQb#2MM%HBlt<@28E!)0iXG4!hlZ265R.8EHIrlbXAD/B`k8ANI)[::YdVX5o//IeP[Cct_+kd7=*Uc]n?eImVJ?gZV(s
%k"\kKF+.0?@!G!^S'kr$B8_+rRYcK`VHNQ-CfG1<kq75.QaYTIZV3?n>s$2^N;GgY8$.*>gPA?q6?_VTe11-)s(AeWAKl-k'jf[o
%1J7Z]T9B=`l]cko/55Nhm0^OR=0'cOn+Xta[f0>DC59DcXu2%ok4\\[?8QobX[X7MDf5T^glD/sFj'a"OR=:^fH^u5>.Tm/RYLaM
%s7Rm=\K7QEL[j94Abt$UQeS]70]Ki?[0kubEp)U#5HX#/rbBrPo]$RT,41m1LT'/U2(Wi1jl&+_dosH=M435:b!"N(ee\:As7CbL
%g[sNrBc)'WEtA"Zd,mp2d3%Ir?aVqSC+#pm$edJ]%;A9^cj^d=H96TXK/2d_[2[_0Z>AX+%,:PmZFB<Z_\R]]D[S._KbJe'eN5hS
%kKZ+cL:sEeO)()9Xi!K=I9JfkYMNTfRUK92[$Y^LP=?44rQZ!([EV<coiXhh.o.B2Hp"SdDn&kejf$so2ET<I54(JURiH0-Y0C*N
%n#Y2\lr8;m5GB^T1"geVHYU"_HSlE[YMNHLgVM1!AT+R!j4YKEf@:i+7,<;TMo_S2AgB8NXkC@'bu[jAkhmqbO]_5:-U5G6;JTV2
%g/=^gXi?'#:c>K17]RPPb+uRZfZTrP\2L_Ol?=`*;_^:C\Y;bV2"p[\3`q`VZ4,(@(Ti98YH&K/YS8,@<bAAe"E%kLb"^;"AuaW3
%WH-9XPrnDu8X?QpC=TmS8"%PnU/.a@QN:T/]%fuGS*=rL?#HO_c#gK8XNNU_9:*i/SLMtJQE2$uc"5YJK^3]TknKmWUAFk'\_?n$
%k.8tLL=O%gQG#tl3md7o9@4h=%d)"]1aecRCL9U)r^E>lMP]I5jaO[C.lWA&mr#Gmjp^HSbsE#CPH@,PZ`p=l(jT&gk:uMVX*&gF
%NI$r(L+.T;41r&%I-#L,_MI?TE)t)QV\eYN.6d@0T#EUdg5ShR2DT*F*EDt/EbFF9G,lK<ZXDVb/n<XDpAM,&Rb_<G>5K7\);"jC
%`9DC@S`=`:g96aI@:ZD6N2HVFgAmu7oIiP1rrPKY1hsV_)Faq"1[3VtBk5r;K^6OOe7[LT^GB]dhd`!-G$D@dD`aGBC[p".@peb\
%D'_,7V9j9X]>2WH0X6RJ`ZiGlO07[-Qo#/3JM!Bt,[;]M"-(<S>$:Q<OT?`8#A9bGQnphI*ph#*6P^GX2F\0s%>$\3gp#S5ohHH'
%08iVOWjq%AoTtW\p=/+h"#K*7+!(?Vn^d#.HD`'dj(6_#M/\VV.ICYqBK,NHId&=o;*M<7T97k_Dc2g\Rpdt6DV!$b?P@>,r1?R7
%=DtV4`D.-G4+fWcVT1EZq$^unST;-hcZ6q7iOCML>!p9C)l]=_PYe[pHh]ZPfqe&tT;E^F9\sT.g8CliR"7h'TGfR1@hVYXD?BA)
%74D?&\sF<)qCcOn2]s/";^1"m5OT$[QK`\PA'!*n<=aJ7UL8"J@XKNHRe4(,A<@_,1qPt>D!NXa?gV\SZMT]gBJ3<%GVX)I=r>SM
%(FZdA^*WSYZ:;<a3NP@O;GDT?ac0]!7iBZgHDjhuc!6$-NQ8#\_>1He>&H6nqL2E,:Q&cR7@ia"Y5Ra!n.8oUJ*4G&RG3s@h0-J:
%M=;s_Qf[p?ZCFCPL<JL9S-hu'n85,Z\Ne?gT3#rus3)[Ll@osH&LX/?A[&..&!%VrJ\b\^j5c,0QP#(rVJhmj@a\URQK6o%XS7jn
%nhE;25/UuMH?dSP`\<rnr^9tV#c.;6V2:,?J(!<nSReH9Wnk1nP(>Y>2AK$eMKa%$k(_TNCQm"D1BZp-/!YRYIu2',[Bi9]EG`nD
%J;2T*Q%c$a\@0eA=BEXa6.K]Z++DFS4`SpWk01l:<[/!Sj(;dgZ4%XZ.uXDY)W)UYofpVa1HZEc'RJk97Zg#@Nb_;\=u.X@8=lfF
%lP4eJ35_<l9uj8:Paf'M-5sPlX&a0A$F;;fZUg=;:s^[N.2!rMAu<Op0oJGf,l;C)baS15I\T+GR&*R7//C\AD'EFd.Q8dl--Knt
%L%S,b/4p,oE_9e<1*P3/a.h>pk#o5dYp`a51Q+\i`M38h\BQQ?A\rP[.frObAh6P$ME(,gl6aKEAD,268CZ*0Mj!<W-N/)Be6%sX
%9o;B]ZC,EPp&ChSAf>/o1>V%LW5^gcEk71lAW#uGh8Jq#VjO'6pnb#.k6c*+rPHG&@>Sd:*<*hkU1r[q=Y,$.8j?f==E`^g^3n0T
%1GcUc*P1CXkZW]cR*i;Z?(96LWM"#G*J2MR[@8JF7C^hb<LZjns)"bo'@q&cYVr7k1TL.5:">CJTu/V[[jUQ61*",[lB7\f#N4qd
%?2kf<ZY,N]#\MCrp5Dm/iu0p:6NE`pH7r2*?_ZqtUp9rf:CHR@reg!Qp%$GH1#tGl)D66.7dIps$e&.hV:M_;a0k'K+5T\FFg[ub
%YEZ#@7\]:[[W[;gdTf3WB16N(m;)i]d[41!E)r699Y7lePu,&/e3^]l97OD`b'75ic<RW5SE\ION?%oS$N3^!mgB#Tq_`(2j3p8r
%;t4GI7&-7E9u$^[U-"tAge8e.T:-o%Ctnbm%-*ri(WF=*P[?t[VU^Thn\n0_IBKpqm8fQQf:Dn0FQu)dBB(6?l[!bR8Hgjdqp$h"
%,pb2HNQ,QqaKUGXHqLA$3+EYn1[O(p:o;_`m)e*O(++&[7NQSEa`ufj@_#G'SMm3K()B,7]^^;AAZC"90.O\\,FIOK3[1_P[o3qK
%1s>N\q1!&VhoYNjNhPt#UuCmgs#]iPcMYF5s6n2346hQ4rne[n-&h@cO73-R`_&]lEouta:s7FCgIl-BhjMf7k4?9pR$0hWW?!)T
%]?tr*8K>%("inp](`0LVN9^)eT3#s9?9:17;1k\P$?0V0iGaRW8Z>iA_g]Ttp8QVQP8Z3<np]bh`7h<I8iNA]g,J8d<^#mj`0<%G
%BP&EGbo/AGfuueVcfi%[GjijM2Q:;ofuJGPB!RhmllXVR<_b\Qe6F.G0j5aW<BFosr)%7[UY\TjWii]ijlV8Gm@!oh*$oea=>Q^5
%r@=YV.FE<Tj?1MfVt.T<NIL>jNt%s7TPcc%1JOjgL59]&)Inb$.>ae(X^n$&7!g_JHJXZ3,aia4rb@YPPK@K[^<>.M6&%=k=*kCW
%f_I/['6Z!+@rI#pCh>l"B_.@8#@l$WQo(Nu1VCp?0/LMhYLr!]n1lf4r7?-M1V?D:iC0/;`:0M&0Pl6,)."Xl".^<9Y%)\oT5\dk
%id<)mJ@)MEVl@*Ih6`F#)cpY2=t9Bmi%RpK1u6+tZ4mS3'q:SL4\U1,M(F"@oO8Ke"48Hf/)JoF'>O$8*b1A`Hb8CnKg)RUF.?Wi
%2Ihc2+f%dmF1_gER'*ERbS]F%1R+ltNO&sc2ld#/2=>TfI;)`1Bj>?J5?"Ins0Q$JrAjaGbtZC(cVSb!QBaZh,/Md,ZY0&0A2V8k
%9"E?Z:b0^10&cu44o@2%cXYt6=6oXk)ti\=3`.aZ8Y3@L^VbEr?do,UcL'I^ARNr(k,*SYH`!Lm3"=->NOr8%k\685E[Yfb/rjR*
%=gmp7XdU[I9skqlAsQ+L_e-3q;I^E;Z>CeD:ch.7p4(>I0e9\[_sA5sb`4DH3mH1/0nL?Pa2kQAR2odH2;Mtno.rJJb`4Dl2`%dM
%bj60F@`S9$dEm4$9G(>b>sCF=PUjFfrDfna-/Mo'?$RL]n71-LjWBNF),J1e5"#:;UN/<IlpO)7;6uES%iB%GY.\DGXOQSqFpKi&
%aHT;fCcnjp2-]sk>-Dt/4Z$^n5eDYP4k&7cXiL.210CiZVTa+Ic.mEH5:\RT#uS`LBIF7BT,$N,[Bg/fc82NGF7Jp^]f&Y5!UI8E
%C1JK;gh_@"amd]Q?7UrhhAY9(B!mf-]UMm&V"#=PY#@7B<uHGsqOOC1SbV2$)[0m):G1;Cps[hMW<lL4WkD`%f?@'[`J/B=!kpF,
%B1`6>Z>=*h_nE?l@2A2e)6SXD+ED^(rr<"[AZ9m==>k$a"=%j?>Z6$)ka\%e?L;SR/Fdsk2_SoYVTYOj!&IpK^]%t[g>#AkRqZq"
%D/Q5qS_q<aU,J?(m(_f=g^OZ&1\)DU.nlp'QXOM_F`+)%c.':l3]FF*R6!9*kAH;@kM@b40%5!@7%IO;Dh(0@D%e^jDDG2&GHFp=
%Uf5RU#&h(:GLJ`ZO?qin'kA/2b!j;QqC24Kgsjr@R+96IeWlN=\e8N.gs%!Ks%J!&nJJ%e,fn)Ob*S1SjiZ7K:-bq)\Phbl>g?m6
%mIl"[ZWO2,]5ce8`m:ncbra(XT4rR?Rm=WcHprOg:<^r'3N3O$-68&-Wcbl!j8.#pD:AHs]F<=TeFtiP>>>*gG8;c=\Au)jma'?U
%C$p-:@IU,:W(:r]_]?b)^W^';g96_sM/fNGj4[Lf8<Rl*F'Pk9=gsZ65#YkhUMXQ@hX8n_V<hP#^>T97012k8W)!B8BHBpU*?0jB
%1Q[gk^MAgX-@]FYEa8KMeh`&L4MOL9.b.WjfZrVb?Mp&r@3VqX=Sm24EuEi<rZ^^K?gUlMas><(mkV]\O'_01jONj-Ach9l[/1pZ
%mB6,ik[,';3GCm(-5910:c+Amrpb^/.s`o"6I@>LH,=FmfA\hI*]c*#s$H,3m%QD[b<VhBTiVG,jQn)*IVKD=AFJKOi\7>pfTX"(
%/?IoKN1;0*h/i.t@_#G'SMm39T.--WmWd34OR'=2DRjqa?"V(r-^^ROR,_]_.?i$sZg;,KRH$04Or8nBI"jE:NRQ2mVpU)Yqq0i&
%$9c.YG"g51r6eS=,t?\*)Ep+GX5Z(K_!LDlDpqaMkfVmJ;_57LH"!F:R>/m]VI:rf\=#/&s$lr%6a#8ts-_tol%[[VZ6l/W4f.#k
%9-Th%QqD<YccaMgg16D(RjB*2e.Nk<4sOs8DeSEOA1V;RaX=en`mRS[P4@k>9Olc$c@78bG+>acMMk1+Sa2[F?ce98Z+Gbg3Un?q
%Xor.f_2YN#4P`:+f=RN/7l<*GB9/rgSk`TkL2=_@HUUjd:u=*]rVeeACt:XW[!td'%JS"8=`/F5XHQ[;KB%PBr&1VO1"CToe7>oC
%XR&Y-)7`=0QM5Gim\Zc4di"U6)pQTr:X"]+%1Ze]#B^.Z3osuJ36RX&-4o@D*LB!sH;(d*3>HSA@,6&Rl'^dGeEq4r>G5AqBfLSY
%?Y:OJ^F$ni(TlVa+$mJBfJ8H(NFk'I(_X_kJ.>qoR_(B`Q`+%bn7$K;CF4Q,m9d'Nr*(;YmFM1,h];\M$SA;RD&l'U@]/*Hc+PYe
%b9p.7\'q>))R&ul-blgNlh/tg0Qbk;T[g&,V#U-=V^$Y>31nBp"jn[FbP;<G]3p'>_*olEkKkC$ir@miq#;!,qrcQQb&;u/D]]_1
%]C[.O1g>Gfq-SB2F.W^[b!agp&F-nP1uUC*?Yd%7;;B76mGL2ibR+;r?Nt&%rf_Q^^iP)IrScG<8QoQZ$*58b+272'^.!O=[Vr]/
%rif)J$i(=b$$5PC(e."j^&Nq=4f?'/'C8LUT%qNEV_:NBqA]CCLF5DE=)!4*,n;b,icBnX8o41c1YXM5UL#U:c0ZSBD?@`6,s.],
%@%iTp3$,LE3h]tAC8l9Hp1StoYJZ*)3]ucgrP*?FkoYBOf5>0LiQ]'rg/@5!XOD49]gkQ[.K*WDOeMX?('hI2pN/RJfVUO(d,Fnb
%8s@#HM*u1Ta8MWiUK/C&rP'Ti)M29PK3EAr<TuG5@k![iF<Gc<+)1e[(&pt4<!"??m>.Afk$HOsk$S.j@K)s'/n-V\%keY2mN0[0
%CN^6g.!N6Q=3:fu(dD9)F2t?GVZ/[L8(Am(3Qil%>EuPYb&U"b'&@YL+uX[FCZ5G3=%BPo>Jcg,W:u0nP@:6.k5Q])r9&iUW?cZ]
%0\]IS?t@FP1:#^-fFd*=6t,nPlsp-6-Ni>4cUtt,CGdGhr;BM-?1+"%jai3843W_as,D6/IrtbBIsX=;lR@%=s-s)eScVO@Xk,$]
%LQ%]<Bq,_.U2p3q/SFsh0Wu\jFlCHp>i%0Y.lWj[CW!fH_=r])^V-[$m`JpNR=.EqZ]kb6YDcBB(&XS`4V@)s>HQ*BF4BK;Cp>!$
%pNAU*PH/Q%]U8;]-:Wr%qC#rerYkB=a:ZAI-=S!TW)p-bJFsF(-N&o@F1\HR,aiU(d5k!NMY/Bt!Z0`@"uk&s$<sBqMle]Z2YGh8
%m;hfo?Ts<e]<-7kXmpK-D;'^cUY;m4<@^Rj.]n#00U"W(7_*k($nKqFq>o6???!M]XU`+lDS+F<m'X'_/+e1jgg7PGM`S7q8&OBX
%[e,.3C>Dq(gl$1u(p\=d>.^)1"n=U+\T4Tle1,[B3NhqEZ`&<PMNQ5RV#@e!^"c2W'd$GMD4#+*gJK?MXYotJ6-SVE/tkiIIf+B"
%KB.:rW)fbWs,MhQqYUCp"4)+,pYoJG\P?t3\?b?j-]7Hgb1!n%j(g1iEU'E6#Bnm'UZm*8q+&!-T/racjm7/bDUeJ,arNm"ol;#%
%>-E<QX4MY^cb6tgaM1<ue;Kc;B08pBQS<[&:C?E:)0J_b"QZW.m6u\ArPU:c3pcKcD8MO=?23(o[+[mN2Y#fKA@^dIY5\62]ld;W
%mmZVm]fR&lGt^]q38S=Q+'@iiW7-J%[sO]=,Wg*m$VPt;Poe`ubuEg^j)Y_Wfr%`O[HWRB_>ZmUE'hb5%M9-iOue%scg-#t\!Gd/
%reTi@N)!0Q?>E$@DQhMM)t;?uid@3:mRQq_jW5QF9cnMd8mVFA1dd;XDRV+W3fkQ93n`Km)CVK6K\Z4j7Qsssm]<Y#frs!blFi0<
%\0h&p`&><I2Ts?O/Ou^:mUeSB*^,)GGA/)c'02?%j&S%WSfgM+?!:'oDR]=0oT\Re+h5S4?bMAb99I2a'II-K(1Zb$?tp?Ce%=^+
%C*]>iDDWXfmc#!8b@a\W>WI`,XuU`EM.SSoX`]Yr,[7qG7U&m(Z)A^NkK!u(U.27fh.bGi%c3ZpBqj#E897Gc_66MP6o,L$OR+B"
%g$^")fD^YiMY9t_FfJ;]"@D8m^2!>h^[%5n9b4V(kiu45n$7<saiBjP!I;c:Rf&CM[#+/@e'"[nlSfFjmE9m7e64kAgK0Kg"P/4G
%"5O>MpAr`<&htGI*JA!0&XL*E@6)q_7m2e/'U^X-C3D:U4hdD15%l0Or8CkRJ]/<41l'fQ%+E`M(::?YIuT(Hl`3cM`k:AGN,stK
%T?U@Q2qZ6iJP,P'Hg<)`q)Sg@-c8jFE*HfM&C@RneKIE/ksd7b4%Q"9E7=5XXaNT=Ecsl5^6N`PIdUOf2+5MQ@OG4dW-=l<YUSN6
%n)nu^BWHF6asEFnq:cj>Kr0uY`+YDJ&(QcZLj7JC???oP[9fU:\KNQ;`$0T7IJ]g[Q>`!LBAM//EF)W)@5`//r=ShI\b;dn4l*d.
%NJOqr=6dei.1n<il@+;4&KaC"c&J0lgT0M<1)?KkN/"+J7<@!3TrMDH[U!_]40CNKYG,=9E`@%=$sJ\&dWW6tg0JmKe4@ibq-W@J
%XcZ[U9p;Ha^bPFhE)FfC;0"Kc:odcPSm]9-P)+"D2_U\+)Y[G&`(H">>'CU[\9u-@5)#DGKOaXVX1>!t\Pe2nS^%D[LAoF0.Ra[f
%LX5GK<`boa%+\<JnlH8Zh!Q-tE&6'IYFsIsW*;>tNm`2Cd``qIN4O+)DV7(ReZWEs6AE*=VQM34l2*HTja&<3(s'f826!sOFR;4n
%.PBH\R`:L)nYjU`AW8e%I&g0j6*6[.&P'8l-@UHulMQ!"4<8=ZEn^kZoDHNSq9(Kh2:BcXe$uV"-Y(/k?.n_..sBXK[-O!LQOkZ]
%<,$M/`FWf6X47G!eA]%q$`fWK)3.'A]PI\oYp.b;/g\YRejU_5V$P;iKQnjc`[,I.j*S2ji!JKspHgc3oH#d/&1tJH#@H#[dV6+m
%C'.V>7cMfqm5g*>]dr9"Z?oR=F>(8AZm_&I2-79T-22O^j!:\I+>Y<EP+hPV,oIUK=#0%]*B/?@CAeM)-]QiNj48M)d;Z^8s!W>[
%p8Ha2dWSOnT2A=CC(ON$DpsY?b-3p3h?nQ[ag'YPE!Qo0oe`ihX_qU\EkK69FH.8_:WoQQ7$jG[>"(U,FIKSN_&\LTDlB'gMY@)#
%cDPN%!u(Z1Zd(SQhK1DaH?-1Q"Uu2n9N\)[iS1$!R.@Cn8dt1Z=^a$8VtK*Y>.3.Mb:!k0k[&H2gnNNKAe,dEG_H8e>')\*a5CRM
%rFY.HA<B@(g<`!$OZ:t$ghb!EQV3cQWBX?#8L\EB9n#=!HP[^aem"sH=*("sp>>9(I\+ma@9o\,2+XlC8q3T=8nnKgX4FolbBP9e
%H<2"L0,;8,/R,p;=Q)oRo**r6WR*"E/FL=1[TiVZWp`EJj(P+^]*U]Q=H&hpb#Lu\\T5$V4:T3S/4!K^YAKX7$6ABMhN)`kbX<PX
%$"TFgI&@B/l-gW\rtbCU?(s^_)Qtn_b^J3FfDEeV>FjR,;<CA')XM%E[!B1,"M9t?&WOXFh&`C]9!(=I&rlX[er4Ih,H7[1[SM9(
%l>7.Ifn7)71"c0%QjO"cpJW-Y;9^[LJ('Ao*tO)og'br&2TLH's"V[t^e.0op>E=83,4apF\P6+g<08BeL$=DJd#KBp:,(=?*UoP
%,RNWV($KYr\ZmAiS[f6][bIh6ie&'s6KtJFI+r82eY&i0B<-*^4V6+4A#Gnrjdc6rFd66'G:5o9?;7fk.u[FPHDG_+q)mZ4Ur0..
%<5]/d"FUgdSQZ+#r[qoEE(5]n]$&8tZScts>Hk%?N`pp;Yqn2MYL-.m*@Yo<Fk9rPB+I-KqH_>=M9EHr3@L+2oc?Rq>,/(C-qZY&
%CIUh\[8:A68kc"'>`3meoq'=_'oL%#-`+JmRXSG8"PqI\FUlH^/'tVC9$<2H\>;hIO9c6u;Ke,D^$YC:W71]LLNF*.EgL]dkXD#r
%BpO[2&%pTM'`fg0NDZgeRMFi._h9?=/rk,0?\&/XppVnhV0kTs]_$Mo;7t$`E<3+5,O>RP@J9JXb@Ve<mD[R0.h6-]R.4S!7ri"J
%P@3Vk+)DpWG58WXo.]:KaWUMC&CYN(eT.nAikQ7Mfnm]YZOC\^A$tH1l9riSk`SO3H!?4+e@au&Pc.'3Up(j')*-elaUo",S[+a^
%o/(4E&1^#L\D5:o,+dtH=t[f^ba#g8;=^8lSiBOuT-N;+"4Mb3dP!KIcW39^-BUD\-l7HKdk"UU%!kgS2061&oZJP6n\lJB*"UDl
%rTAJY$ri((2%C9JkNZXCpCgtUF@S_B"LYk_\Y]OK2,!9c(^q`IX8*$^qR#P=nR+YjDQ_kZ6XFm6@eQmWTLu-5^<50#]#*g(8_uGS
%LC?+:&g&Bp9C7e>AJD=iPbslk>\[?"=VENEXijG>__PM`B;.Cm!];k=Mq6'gM8$#ZQeJ=>&RdTOC3:C']G<*2J/b@f)l`ke<$]3N
%=Q.cpCpBj;fu!abelL^p8=cl'VZ'laaj.Rq$`i_;h-VVG?[QbKgK?#/Fe1KdQVX'ZSo<IhS@cOB/*FNg]Jn.p]\CVFDk9.Akr`,*
%rd=b->,P`t2`Ih)_-PN0DAu'SoY#@PB\Z`pq3lf;[^t,ZY'")R%r%K?Q0hcrh<K9hGk14op=cM[mB>+_4g(%?q>2Q&k1ZteTF(SF
%k1sVKj3q?!qj4&KEG;])BPhr$>Pl+_Ku`';ras9_o<.l%IfCE_;`Zh.+,q9-NZT>>DdS"j>W>j3^V+mCA@pqVCTD*;?e1OTq8Pa8
%nSWhtmV2?]VW%.#r'jad3r\]q0@nb?n!B)nVnMb%s.buCO`0td'm'8mg?On!mpmPEFEd]Lak%=,Fmhh7X1EGS\.j>*;qPHgh3:@@
%03A$-:&'-STs@O8?dGjH3eo5dKtI&lL#T/PD[U@HpYTei8,W[Rh`ef'\l,MlcgY"Q@H2V0<2MR5LLn5!]CTmMp@W^==MOaor_dCf
%F2+rmJ+!V#0Yb'er7%TX]Tos5edB[ErPl^LQR`UF`ofiLhga9A[L8YKQFUtCCrShC9$b+fl/_d>OoN]bWlqgCLLn&-oAuaXV8]B8
%pNIR^LC`-`f@IE3Dnk%/$saQG-uFD'DEmjH>@/1Ihc;rn>=Z0;n@4OKGA0^2]a)#d/YB\"hWlMKl>c?1hHNk`qR3tPQsXaG/3PPf
%hV5]Nn?IU[4T+]68)YdONH+UfQG``)GeCSer`X`ZnNts505c0$dB!l0(1H]ZA)Zt<NCBo?jQ)FAkhW#aQ0S*F?hlV?("7Ch79<8P
%XbtHb-%$R]_45kZLK9PT0_\VQFNDKsV#Q;3IIt6T$4!Er$`2m=07I`%bP1H>]q[Ni_qhrnh\:7bMn>hGrS!=?+((=0BUY[eiS[NB
%oV5Ld\8c17]Ic25$TjiSn*^b<CYug\/'!X]-_'GB%no%%a5;8oYM'mg)!q99]I<,_5BsG9R]jGee'Ve[:B2fiCZf%X4F(01+^99Z
%"m*.WKAQ'NKBKrIq99?hDW2r6A\@KedR3EN$ee`RjbJhVe[m3[\()iPA+T;\c$6JhD0<0Q3:^HsU"B^e%c:@aE0HWh014+La_A61
%kChY:O6ZQ7e&('bPOW7-TtU#6F7/fl^0n#`I'i&)HsN#&UeeqpmtK0OgqEFZqPgrJ[^!'-h]1Q)]n6hI-8t`?<?UQF]ro@<g>))k
%oomjaY.mk[ZWHW\>4747@J<q'D//RtT5H23*egAl,s7)lXOB"[K9t*l+uYM";K;TOfr4RadmUgG+8fVp4<'Sp4`t)&8"\Z+k59+F
%A[CHHZka]IrJ'#CK<<P8.`\"t-.aer907'[p>jJ2D\m]Md_g"j#K?/FC84mL^24Sp:>as&0jZEL"11!&>Hb-QHV=@9_VXhIIHpOf
%?I<!05#nD"^3"c&R7HR[SI.sDGl.K.VW]kSM_>>/k1[qPpRq9<8k71k]>C&LQ#=1h]u&XBVg@jG^9l&4D86rAc(IAg\Zo=#RqpV6
%=.bq&#u^eCmm/sZ/Ata*Ut[_dqAXL:I_6V=StTMBcuVAMKGGElT5,!c>?KSD*Y\LTgieTf^](4:s6]WnqDBgO>?cNaSu3pmh@`!(
%^/m-Up(%Q.r<$^%.lRZ,,=l=H;d$g^=-e64%mR-Zfi`7irep>aj*C+BRdjjiYsJDh(6',B[30r^s6qG4^YV1%=EuJ)1J`n`"4JNb
%Q;u6IF!p:bkBHc<52;DuWk4ig#*RBfS(-lJ*rYcF,Y_7u[[JOL+Bg&rib9=-i@ttgO*`uRX-V7UA5-/HO$\c_Bk4,(,aL;pg_Z=r
%NVCE@T_n4-`JYe/FaI,Z%ZMjJq=Gr[rHW<oQ!1kH6N?j\8=h0S5PK:p+6;_Q`$*3aI_>\QO7K\43*].@^9,fWHelj^\r"6[eubkH
%]P+:ErMR^4W)=uem0<S)Ug`o3eE7Wfd;H6p$h$C\dR1$A;uZu<nD.?"*gbg)a'7<?I1>]-r-@fC4O'hrP3qgKkS$PS)N@7Y.jISo
%fBNbLLGleblD,bca%.j2nQKMAT,snB`HX0(qoA8F#$7,)=uebT.IH@R7QhX^1=6R"+Gm*\f6;?rBQ2ef^(P/TeDJI3&ssHlrh,If
%a-622KoCC2C;Y(*r2)4G]XO[9i[nR`ZIeuGdk]m7_SOtCc-<Znd/iJ4a&\@QKS:amc]db@D_F=+Dr,f%#?s!YUZFa6!)%N,Sgg54
%]t=7*AA.^0E,D@jp>_b6[Y0Uup3&)iGET8Q_E1eBTWP%J*aWUGA82%"aFq00o:H7]0;X^I\(BKnT*s7Hqg0DX04+Q)-FZr:N!apV
%da$SGf?Ot]g\P*k9M`"1Wl=NZUOK_aoPLolr9M8Xk<G*'qR4(7=Zgq2oG4R*KPG3:O%r<pK8jLGOc'CAkP]@=2G-%-*:+rX];/t'
%qC<9<YeJdO(:!8^!:Lrn[a]WuEpn&M$\JFJZFp))5>b`BBJ(i$rJ/Ng#0fSpK/')Q@<8/FV_mJ<B*/SiW967ge31ITH`"`YpWnaK
%i=:l_0[u(\4BULl)V;=AV&)Sh50Yd2<.)CQks=k4h(Lo,Q&Xs&9n1)Y,uk]"rl<lRHthoY?QP^W'Fu1T\q39?RK'_0I8JRAo7G>\
%SuLZ3?mQWR*-.j94mt]7%\=I%hT7.r%;;2]H>n>4d8&rjg"hJ@g$;Y*5:Z<W@de%.pS0EI=E.ZDa5+HpLKV<oLs=DcIXQ'a\tAmS
%.sk'8XL1!r6D_sK4G`46cC?DD"4kN!gZtc0D_9Fq%hCN)I*'ilo:Q0(Z^2&qW9bQenO$H6hXIptAj*^_p`[Y&A%C<l)n;p2.8AMH
%DQ[l)cGu^TRpWom\@oH#m,N@pGJclmppGA0iMXJpCd0SehHemDk!(\/WMT;Qgb$0f[Jq!l\c1RDG?Z)/l^m(-ooF9Um<65C[(?uo
%L8NPJF(k8sH>8lq`lu]8:?V8/Zi'CM':rXOGd?lL$K/L8*3O3+#2a,2T,!oGd4cBoFDn#DiR?CF\FO)Xro(ZgOfoKf>ME7blhpb[
%g#dq_7>FFc4&USEX%d&)H^gL[o=%K"=*nfWk\G8,h<TcAbGPaF2<'ALG=M<0XZgC_Gd^RthKeTb@G6">\[Cs0R`7!@2-RG$CjC_]
%bS&T@F4Epl#Bn85T5e<dGfHO2[Z8sTh3uCHLS[cl<,DJ7*uZne2'=XAlW_<OoeX&$Vs?#$ggo(HDS6)dR/aDF/%kXb<okqU]m*O/
%<?'nk7_uXm8Y(??Ph)J_(?W!R](J$9"p;-=]mJfm8)N`'lDU<A4tP:VHR935hdflCVNElG]a;Dh*.GTuM3`X3C[FX^lWhZN:1NW8
%)XQ:j98=*sJHq`^*'O4%91q0:^H\u\Y?:Sn#m;[Vh95M@R\*5OJ(<D32SST!*Kn@H!nq]X^JS,f4r9a"n26?FGCdg?C4?'Rg?Ok\
%pI\YLg8C\Bp3j[EqSDSk@IIT4'CY)Odk?1?bcGuN!fSh#7h86sT=,h,!nlT\7&sD`7kHqb\9DS8oC2Ie&#EbsZ=5u,ZWMN;2a>>,
%c[ZA,G]@cuN%cLSIHC7Lroo5A*Fc'rh2R*nhJn_9iP+$$`NO&qn+:qreD#)i-b$bFp*Q$@U3hu/9)Wr5QEg,Il)GXHB";a0IJNj:
%Ge&"toh1J@((6V.&'l;Ug0CYK]0OiHHte$*Hs*MZ&,]LoQ(=Tq/()uE1UanI^H,MsD(N+ZRRAK.Z`rn9IX0Z24h-Prhd^,:%[V'W
%M7:,[(%LFCp\sFRX7`qtL(HcK5!$/:O\#F\O)B:27m_#k6Q(/1iHM5&bPm\;pQ2;.qSMhFD>ndg>,lMQ!s)P1jO`.q9#phd>3iTR
%n$n&.c;()/GcN\/On`gEHTS?%4+)>Ocn+N7DnK1V.CPFL\Q[bQgfe>>m"7X.(&T`8=/FsHgV]#3;=EAgObVaTpCBe1q"g]23o,(3
%6VF1J/4K(n57a&UbBgIZ5aBBN4F7d.KP-!uK7Y35Yrm;63e#lgP8:0lf)+h-k'H"0al`HRakj?cO3F^mq!b@=\k1kspU.I8>NO,[
%;D59pU<C#q?X%sqSZE"^c68Z47ng6tbs1.`,$`hbc+6u=s3d[D5-;S9/3NWu4p/RqnT!YXHs8L+c&F>Lr3$Ds^>E.AH[O19%0"n+
%hCn!bW_7-NYJ-VT,^9+2JbT%RF'Z=oick9p@)3RTC_/g)?,?L9_pdi82gsJDP<=t?48mU6YMF)1nRuuRFoK\B2h[;8IM<__O59Cu
%oD3Z?B4i;hJ6F\jM!-jC8VT<O=?8Y0O?R=t2\Jo+X8D#5e%;*Y?EA9eJ*iM]>FkZt]FB^YT$5)4oR:l[pk_.Y7U!QX`8JO\/#(YX
%SbM#WL?5"tQC^:S)j/nfH=FFe]`$KBa'IAggT%u?!r<eaidE7Zr<buf^G+"H@lKPK?uA/I4"Kbj=F0hWY[\Gcd`.oLXfXd)hbH@-
%/KN5GeVB!61qJSe]uP&]NIne7i\a8]3FWnE`Cp0@BcW.C;SR-f2`E4(PGV[/c]:&hqZVKLjX/g$LYY:tE'/?\1j&RIJr@X9,GE7>
%=amnh'5p%DG:V.+9jtfJRu8=QCpu?LoUHG\"iGYlq3k.GS$>idcuD]oce:U*j2Dc:4\r<Hl%cZ-]-"H%Z1-uQa6/9]+u](i=SLG8
%Ybn*6U)lE1re!C*a56C8nS0H.CXQ8Ro%CZQXOl4aL@kBHVBo@?dDh<RH9Wk9X!'Y%ThmC4n7g[4Zc=K\[C1FY`LS)N/O5m"j(5.`
%%8V%`U[l%kKf#?)S^!.%n(FoJo&JE[2QP:Wa,PH?8A"oi%7I!(;Sc##h]$jTE(k>0TX"'*@q"R"!hJ<%V9@RUIS'"u`>tCn1I#Vh
%RO4X)h:cUlF$;%G&!+/KnH6^6riuH;,Q,OiB&Rb(@lPTq+J%08UUf"J+/$H_H<@em]W,LJh.lPcrm2mAl.+D`pEpo6i+]Y*8,CZr
%h".AOlfO[+G9pG,f:ZF<bpTE<r1h*f,ua"TPpf?fqh<t,I?NM"9R]4?/jCR(Y[smUpS6"f+`9Fk4\YL(IE[X1Y]BXq_gN0;pGY%_
%:'fPIqZkZPdF_sRQqmce_Fqb>G8:K6X"OkXMedDn-P)ZFBc'?!.fJ68$c,a?GDM.5&<[WTC.:YTXBP;R^A7=Xn=QdH><i'cr>dB?
%mq\u-mB<?&033R`rQ`=:+K'(Bmqo/.I!J'lWW.:\YSM^fM!0=N,;sr)0'q-EG:A\[I_XI)J,al[`H.NQs)tY1MRr'qJDH:c_-t(b
%ZebWJogbhlfDBu=Z2_As4oXtZK@H\%5;lS%.gd_8=r!5M9qE%nlRJH8pYNc^2?3C`#:%Sf^9%5/e^c3<p%Fr[9*:+9Ej](2=LQ?_
%G)Q#>oAJm1O7/Q[2ne4dr[1EHI6Hk6If%PX70LYZ<h>VGM['`!7e4D*rks?BaRR0EGBE_#jpKA.PAX(W;F>o@)U&p0E>tlshi_7A
%[81H1i@^8&fDWOh$IdiH%c6scKB!?cf"Q(Ojr<beAknlg[s,csg.&PZXM/Es%&nV\`VZ\@V$FD`Q.<ha08bHkE=:g_X'msbC1B9g
%U=7^1UdVs,P-Kn0_Tn'Pn@P9>^e%Y-280![GX_7=V>RLh*@gKpNUM'M2o8U4j6QTk2ai"Y5)a1Tc$Qegl+8,tgRFfg*.2hA\'j!/
%Gk5hCjnsMNDf36p@"j$]N;]2UJX;l#$*3NBgfXCaS.qN<p/1qqC0qcQ$4!Eq"7O9gnrlS>6-k\e[;)QdN(80_#k-nhq<UuC9C9Xa
%"M2PSZ2.6YW,^3%p?VD#[H^Y(X1nRN8.72Rf:Qu"cFkV1\=;<8Mljo0Ub(_99I"<!;;I5,K+3#i-<!imKJ;qtb*Hp^9_fO2q1U\?
%gSh":1Wpa!Dr2?=bpTuD2o!UcZ1'/*Q_*(q2?jQ=K-,PJg"L_[k:OGuF%!Ws2O3W"#cHn+EruVUaFEe<_rmhdhcmhn,u`<V)]gVJ
%]Nba,odq`C><:tc<$"9!U#+R?h[/1VI(Bu_]RqP*CO68TIf=-Ai3^qM.f\u-DfK6WKaKiN*KJn@k"8m?;[;_^;Vc:mfmY`[oAKN1
%@SOt<'%,TXK.'k/j?mC(9A0gkY"B0Y+uC@ggHu.Pg>uq:_u+_9m*qJ:oklEiC%^N=A"@\NeND%6b:=AS)t''mLgKf@]ir#h(!]f&
%3^7uN><G9FBt9-4]jNe6,sE*^faRF_+&dRn#ljS8S7r-erb,-R"a'Y*[suYBl^Tu-gMZRRd"4`PfRC/,U6C_jLX]M9C)g.C2f\dO
%/G'LGk2C4i^&Jb(.(&[!NiqtBT'Ld?8Csf+lGj>jQTqt@.m_pH2X,_1c&R;N=9#aZ4m;LkgK8V*$P"aQo^PdbHu=cd1ps3.i*!eS
%Wm;/8L4e9^-/Wn:J`HQ.JK5BIUcg@+QC[bu_o40-86`N9_eH%]k'bk(/U<AI[uJa-!F<mp]<9IF1CWjU)D&FrRh#R(=rM.cH.R'V
%JJrgWTrB#8MW)&g"0$iiHZg;GHME5ZM>h\TF$kk::>RjF?\#TL41W_\)m8?1,X@&[R_lIG'*N=G2Qa7TgV3eC*sSU;(?:m-/tf>X
%1_W1Q]OTScLhY;RL=1&AUiZ/[1Ijh.JV,a4rHsE]K*aE2_CN#n8);B6%)Xf0-pR4F>j1?&2:Q#'!kP(bAiOVQnBieo4l0"s2bdI<
%+L6/oN+n!VFe#1u2a'?.)SpCRBS.F'=>9rSQ.S&Fl0mr=M4q:c;]WA:/Zd==>ZQpsXO'X.4braj\,rMK_N=;D2J2cD7lFY78!Gk?
%FU6Orcj"gE2>_rs"pR7CbN!0]A#-kV\iN%ao!W0ZW(fbuR"2bi[D"3p.%I1sEXXl9e*fQYQ%>hIRX*4;pl9#I'2KmH1UdcW#18`1
%T5T@baReaDKHGig=>GF&1lDt,#34pB)GI"O\847q3d.foRl>pQ3DonkcSpC=<Q,'^ZA3X)iCuO],LhD2#S,ED$s]-9&af'=+VD'r
%U':`XESQ+Q!Bk&HYehP3i@tmQag5])_S6f32++ql78/Lk3%hBn!;Z2,QKdK;g!hf5D)sceIlN1[,AuFIfbX5lio$8+h?aH$//jo_
%!^DJ`TQc%I6JmaJgC9u4XX12'+V$\-2q/Bq<^VE6(;G?#?%Tt4cm#:5`%.WPKkNr/_[KgR7u.Z=l2't"]t?We8`(ZZKVmIkA'q9,
%CjM-1b+Y1j^3La)1<Yck>fV.*cm*'1*I[WIhV_OmqToUl/U:B=I[4oMTlbU61j1#*DHb<sOJl:n](,o:?Jbfui-,@I`_`=$kc8ph
%X4KBtQ,&:!a9Vo@]Ic>2d.QKY*?n]Q0,tHrjU2YW!]L@?7h8O;R9.F79kgCo.po0A[r!clh?b@7CUoH,&_kUib*csb?O(,*q[ug%
%glOuKas%[4S!GR#,]mc#gc#dDF7V<8Pl$(2"R;;d0E;`RH,g^N5m5]7CDa>4;/a`6oj&1k"iM,EjM2m_=q/EP]-]7)QQK9OW1/B"
%JQ`FK8L=]KQ%u#SS1Z_`">9)5a=0CHG!1@,g)tAJJETgT6oo,<&0,kE*4Q^'#P&">?;=&;"=2"WM=h'"4]mL72N&6/:C(@^En1_?
%A:>qWnnKc1K'VCj*M:sfTcnu#e"MD>I<mR=_RZk0(B\9#"e'OYQ:"!!&(9D>No7J0i'MZ7Zs>Ia=%nQ$[%nic63',gkWM!ST*qnF
%/Ar^O')8=h>^g`KaMUu%Rs86^:C`K2-d8k!(?-']%hE&9.Fg_8OjRBWLS,\3"$J&`&lKSJ6YY?tTa76ZcS+/LBGhj_2FK6TUp5m@
%JQ@r<<0>etL*kcG:Y4m\.NOUK'<CY/3X'h%BLJ0t<_6q=JJD8I8b9Xk!F`*eAonk"BHUWfjcT&nf^tD6QWY[BBSOFWle"H8*"BpJ
%Vs+bh(Gtl;(]dJK#._Au\m37hFnDNrE,G%/bA5'/31d_+MkG1"TjmP6TUorP_bdoi7U[:=D2.`qPihX+OW_ub[Np8FjL*gj&]A.h
%"S@Oib@*S$S49;,i3V[g3(\>?+OUf&Gr/Q0=W6gYf+/"\D5LisPXJ[L/^Sr<<YqPg^q9ZQ6W4QR_1hE8"SDhj/U24Y#Wb.44bj:G
%5U>jj;A:kH^*,X!9<HkKFTk[l7&Fd\Lm45FZ!SYNNWfJ(.R`iT6F[5mIc@)MRpM4e3C5)2`&ngF`H]4Cmi*Hb0FBn=\kaZrbZB1(
%=$@cVd8M)=n=f:F*_?\uP);@B>.?nK('8`3##F7;h,slSQfuO`Lgu#P<<NVUQ@OB-4N)+@Y:Uql$9'QSb`19C-pgX@KWCdq8MYL<
%9?r23Th3-SH/Qdib:m)'+En=sl$-cF6rfK:Ob1/t/"RmsXqgfu\EInn,qG*N\1=3n@?,3_c5d(m#pT`mLkpp&5p1ISfS^34h?mM=
%]$T&Fi_GdKd@/#`O!qD14Nua.J;7in"fO*6^'SVQdj-Z2DT'tNf>Bpg)i!g<r+1Kdn?hgKPVDFHk-,)>\BKncB8"!nG[S.:O$9<m
%6"rS7Tc7,Xkc*^LSdcV>Mu&_a@\i7HhIGNM/Jc&@gm('<%JAq!dHLuE[p3@n6kRXFA9B#Z)7DU0V8l!X,%DhUNp/7n+FPe:b+(<l
%V7d^8W5u;\ai,U"Zp,5&`_]GCNshUEm`JV;"Z"*u&%>%PB9KFFRFD%0Jqt!e\I7+NPB'M+k^`c*j:U@N%7jX?rCI-RbH^-TpgT)#
%OF/3JB(J8B2`-aOlVS`.&N+am^9l7A^4+-i)\e'XOk*RU.il6[o`9+BAo9.@K8t"S3X8:\_a%1=m)#u$>NT;oH,Okr4D1-t3&ll;
%`6\);4]>^r$H,c2/fgs#>I\+-,t/>f^n61E(IEth\k7ePkjWCN^_G9&W<,L7nh)[G0Tm95kR]2A9pcER6M-IY'1j%g)dhQZ%2g:!
%.1m<un>6oLoaDEh\3E,BL[U145"B<'#q3KN&98UT8]]i%,Toql\i$F2*ZI*^0TjjM+M)lkNug,1'\1\[&M>ci+QFjrL;qi2&%Vub
%MLo]oh9/MZ][^9iD>Kp=Z;-396Gqf+7-hW*YVqCC2F9Lb5/PB+Kk1VTq;@4?'asdn0!ef5820RE+nVo?d/\k(JY:?r8PTH1%D\H<
%aLD;GL[R"G"*6>%@7**lJn!Y])FtdYA'.(NHFc!fgC<`=RU_^T0?^]OfgE^[64eI3Tjt!O5.II7W,iHJ'6F5pA-\^0:=u;S6J%kT
%ZYWZq#\mdb^amlC3^B$@P7l(^cX9J;8?/N=3lr?3_"aEj#uoM$M@_BZiY#j"FuoqdO=smR(n^8KJ1NG-ZobZZR#pgMM8n"UZ_g/q
%$^L,aW9=@dN'Z_mpJkit9BPo,f^:.K5kL9gnE=<MbqoRjfPjA$*+h18?U>;9Rna:t]uacX'_7JDMmDL1Y`1.:Kc%`P'YP%/,Gr93
%c%4I+it]Bca//s2KkrFmb@$bH6KkX3j-(s)pnXRnOQ0JYVrqh\Rj-sS'G;1?P$R=bM#1D^(fn).+F<mXDlUMq0k:*P,CT5)ct5t7
%"0`>pV%/"W]"[6_P?eDtUH;n<'s*/O;P+3pM'3^q:f^=e.AuLKBN`b#5ds/^,p3k6HJ6M0#Z=!*bT2;`q%G+5*P%lrd8EfR36c,R
%#]X[eJUD<]V?R5?b__?<[OTDEK6g*cV+E?TV?U'c$-G"-LhIXbg]Z[>A1:R%+=5k'$!A<k,s^.D#"n*cAF'GmS0g-cb*Xi^XG*E;
%?O,S_/SYQRRuk8QD*d%b?-hSeCGX*6A<I5#?_>B?=]CF.i>9Gd.Vg`^33ZUrHa]jb2E6sGNhQeHlJPM^7(Ik!X+S)$!28jV&;VoT
%?-F3F'NNkf-V1]u:a=KfL766gl?DL(?>Ssfs&]rqNJ0\8U*YnU"cESXJRFsuf3sIh4TH$W,Wd]s>@KiC.*9(4OcpoT'F;Y^4^gem
%1LG0I+#\:MGED[Q@"jGT7.Ndo)iU?gkr#!gSPV*hO\54EreQ<%,iPgN=(f<4`tT>CO]=iEg-V2:hbY0.1*@eH#e070Pf7fR.2tTu
%&r./Y7P%RAq9k\J<CA*@g>E)@gFrjL"!b,]m>d<i:!mVgqO6T%@d[X&kU75GY`r:GO(#tE7hBg1K+4H$!@7<l0NLL!23i@0+uqG.
%=J8=OePa!2%t2c(D-2"8,K9DqUe(tsr$<VB=fg8nf'6@(85'O-3%X0:0e"#+>p<,!S7K2f>0%IpfYl^X84-Z"IW\j6N^lO3f]$JR
%@*qU?$Gba'nNE#??q>L/7$'#dGi0uAL>(;00SlPOU3Fu^d+8`[\4mb[d`SC>Z!:5G!(ZCl-A4UR!JB#+@FAtdrm8h'&Ij.s2.7KA
%,_8D!RtTTE)p;KPE'oidOp5gGRb:NUI>K).<20^#1hk0,rEVDa%h:7VrZJKbaAK4rLmnIq0s(S#3sG:coiJV6.l;I$E59j8Pl2NC
%]1$M^`X3)7LrdN1q9%AHPbi,F*2`TAJp@A>-<`,,Hh7_`du2u.<O%C4SZ]%K-:&3J>u0@WK$m;$HXL;B4@#uo0Wg*!Zuh<LgYh(7
%Ya;S(_rm@YC(BLU6o%ljKn]X5`/amFIG5Nq)N-`4@Y8l,Z[b3XFrW`$Z4?$oaoMoI^]G*f*)c!.1T.]rnoO=9"'*?`=&`^,+"6UU
%8o4UVBRUf\&hdLBckhAh'Ru`m8=W4RSnPV6Z>9T,S2UJFl(kMZ*?q^kH%'W6@AsYp&?o-f".eDnBF$N&#VAq+U`'H:f1V'l=K">5
%U?]m3&^$Pm\"UjN(Oee<HP\RT;1FC0_U&SZ^uutj@9d:nM=i.H-6^/YLooQ:$Btp?oh=*U.6Nhn`"\(o@%fdE-@?[TEVj2`3knfX
%$'QsoJ`%$3)VY`rcdDA_6VUI8I<bf9G>A4'&VL`S"qjR^/t<acVK/DC\\XLKU/5,(8;VL5S'@+K`K9/N0i5&)*bqqUiEaUo_.1Et
%`O9o&V[[WhqT=l$T^7KA`A15UCt`J.'F<%9*_Q[5Et2XO)@T,SNi6ZZ9?aG&(#ae>[1+%kT]cNXi=_g%]Er8a^j*B*2U:]6"@#B:
%LDdB^M^Ba\OAEiKYq,G]PV%68pe!AN;_3AS6hhJ9R/h,uaLnKh_A6*>_\P#2TcVEcU-+pTfe?62.r5G]61Hr_f+9EMHcfU[P.VA3
%Ze2GOR^oXE(q*m&O9TN4Z\!1QJIW!j')*#2Lkgh2jThpm"Vs=PfB&>d+;QO(e\sud5XATC?@<Rkfi4gdF_he(VZ:p0S-F%)QuM#,
%7TXp6NgO/+_LXX^HTjO&+\VZhfj`9$@UR*-FH0X/.^k#p0D9/@UV,TJoe^YD+nVgk!r<_cZk5Ah?%*lG8=0DS7IfMZI;gDckCpl>
%<8<]I&T!R>Phh?QMB4F_VHcLjl$/I19%pEr_`S"IQX`iS.um1<5^a"iX=nrBnIS_4$@5),<^>fQm.=cca[@s_?jlj>_]'_Yc$FD<
%bL,<+#YeICk>2g-C<]S/3;<c!JdR]d#9(P>!AJ@-IKGDR!bTQ9(tlY<!sV]D0Pl91d)NlEiemhQ`61e./6chf\3_-*h@M5=L(ge2
%=T)>u'4MKe6"i"Kf+qOW8:Y;S3adh:VlQd&a%3G9iYj:U%/'_@EO<&Le/U>0@6Hh$?euk?+mqQ)UN"0uBsOj3LQ*-IP-HT?Xj*-h
%Kb6CHljBm2EPW:=0dU8V"IkY=-D2JU_T.)WetD(L61BfdntHan6k7p_/hn@$VKb@_Gr;NEK[Q2p$OnE0OEd%[*%hO9baX:*$]Ki[
%Cua<"7p3e:V0H7b,drOpWJ%ArE"ma=:`+$+;*"dJMredp_#R/A\/"!.T_lV8_k+PmK7[,S7\DRPjAC1t]Kt$bkbpJCI94W;nBBU[
%Tf<,n.P-sF/GAPL)6L%Z_$8'7"U53!M+'g<-oG=l8;[LG!3+&';b]N*5o^:\YuZ+Q.deIO=+`!.Alg775so#"Xs!cGF9dh4nXQE;
%L$d\-`_,5-^0PW](*d.3`2JEAJ66Mt;3p&TqnG61hlS&_PjQ=/D@Am\fV/F).,U>BP%:=UF5IT'`__lf.mVSj0e:ZZQ"#Ke)[N2A
%8GiP)6e8E6hYT?M&fV?tfPGt<NL47nQj/O'JTi#c^)1$CN#Mt_3JH8:D#ckcTZ"JL-lncK[?QLdkeN-u"MRs#JH<peb\r7'IiK:*
%?H_>dL(aA-bq)[qkO?_Aa:\RoA(:Qo8BaD03*MU9>7tSAk1(RhetS,EK8,sU4:Hr`J.hH#TR)0AiSn^Ehlj=Cq7]mi&Q+0g%42Hh
%Hk6VlZ9Z`0NF5(b9S.)cP;-5LTVe*p'#ObE?t)aPX$IID;YhMX6Nf]RrTW8RTZ"JLBY;-*\A:)Km<=e:Mms<PI-,F?$4S\_DV@-D
%P9j<e!;:^gju@moCkAIgR2I--E34qA8Or\&TSc-@W9H@g3KQ<'LrRe]ONQ2d-t.?C]Te7&L/\(t1Q_B!P6naBYd.*KI04%k"Omf%
%`:0f>l.7'>P,K%;VPIIM%R<^B9Ga)=EX!q-NSD<V/Q7#TFB!,Z$A2A-5sJu>8pKP4$!q`-VO*#])N+bPAdA)mA.K-p8tpP8:c?MM
%.fOPZfLV_!5YR8YO'PX[%RX<K9ES<CBSV<d!>_X;m/AAG+Gqg3Jg+DWlm.DL"G>Z@6C:5E7B4FD69]Q7Q8&q`E!/hE6jSJ8$uc=q
%[)&Q8ANSL?p+t?G31Lno?@k/0XR]5_YK%\5W'PtN=Se/<6OFtp?6G@oQ5_;pV<)\JOf_%b$WG`MKYD0!7oHL5ELB+k(5'[qm1CC)
%?-eNk#;R&WG!W^@ciiJBP`8@Gq)8nBUgaN0$(=c=d*jIs(I50Sd2>tVQ5SX\*V&8Akt!E:qr#(s$+;#?ij);^7=]5]%.ZAg%YeOc
%!B;P=/r!tV.g%TQ,rERM(12irNC*\Sn[NPm@='-iF^0nm3&>FX5EQZf^4`4I=GU-GPUbHjT'=F]?,cUjf!0V!kH\73@ZRm`+s!rP
%NnCKIDZ-@Bc*l:0>I+W+6Us_l9UYfEpp`r@!(],$c%0!6:_d#KZ6^6\q3FE7)\RM>A42AZck];d:'N"a!i7VRo^[^!YlB7h915O/
%#`k%Ejf!ok&6"G52I20/`b:AYF80R@)mS'nXoZ%f`Gu&:.P03]JI4I60&eMdPJ^7_(lMd*Tc1@gcj5&B'lMYH.ZSQ$Eo<l"UJTl!
%2_6JO(>N\Al=N8!5T200>7BWfVBV;02`C-?@c8!B9*+io\LLAZk9;Y#0&kS-i58Q-ZOV]q6ATN(5)+_CG[^]Q#[MS<8It0=>'VSQ
%Oc>>A;gMZ%UsiaS9)\ga=*As$p[A:j!qnMQK\-`tppqjukc09<9bJR3T:\#3ep;.I<nn%X#;HkTW^AOhTs"gn`6I^joTj"XXDE1@
%c#`4UfU>,r\AWsPCq994O_Es%&dfS0Fp>hm/5Btm/:j>r!Z*gO5s[li*<B_8:/JN"ppSk_b]JWbX`X6keIsKUp_g?UbnK55^jtHc
%/bXFq!^Re\FR]4e`T&(#T1u*'KRaUM-ntk4L%9c633Li73;2c&l6gELFIIeQO:dcPe790I&bE4-6HKd/d*(FY'>AjNQ%:G.e:N?&
%IOr3HLYjVCaq.H9_jj7+QEkdG^D.?X9O!*6Pj=N!P"VPjV!,t#40i$A^4='k63]58(`OUV1Bumi_9R1PT?;2tfg*bS>p?"t89'1&
%.D!77P8:b2"+<h(?1H\rbSMD1WUb09iq_NH^4AB)n,\ONGEoEBXUOoC!YYdX=+,@s@`&u%XbI296G*i1`:S0L#KQ6_<1l0[$P]NC
%J]/75%\<`kM;,ScNhDY'(e8BeIOkbAabR1@4\JVu$!KEm.j7UEF9>Ecg&B)KQN?nu*D'-#cqNl-U%DdqLo1`hgdH*$==ELUBddF*
%4j?Y<d1I)Wd[a!T>mb>nWXKUDY!^Aq"?G1P_uMf!6#SBTbdMAW'!nXU[LtjN4lFl%GWQN^#T=M:M\[H;&k/(;Jsl2kH;H5MEH3$,
%9HaV#2$pZRIDIOt>=ArHTLdqD,mje\`e4S]g@U,M#Zsr^[FnauE'O[SK?tZkdT[,R'g)\E0*cP[M#)]^&Kj0rlk%7SE!b7$E]G`q
%StB"WW)INp1Us,%l";m_(_QlO.L)$PL2=gA/3n$D<)G3`58ia,kZ4?Y!/>P[pAbh[%J-$>j6?>(&f)$%JF!j\T.h11e9Dc\Q=3s*
%Oq)SM;g!fG8qIE^:uT8Fi5E/QNj<b7(HsWgJ65R%0l$am2::BM#[6C^#=9S8frnm.pn/F,lDVOS3?jKCo%H>B6P6`pWdGF+4J!cg
%W)GJQQ(Vh%D&!`d1LFc58nrl$)ALi!.jfAVeM&dM!Bj(h3Vp)D0EhkPZ#T@k)WXsB>>?F[Oo^A58/<Rif+]=3LL;VZEJW7(?$XL8
%.&:5^Ug:FY-R*:-R$\;=W^oAW'ppH@ZAKP%fo]+[1t35#1Q1"Xc3tmD$%o<QR@mY:Ys[0#X0RD@$"m@4V!%N^d"!@1)1ZR]'.Gc"
%e7#oP^*0E3ZI'?P*gYP+#\8`>0_].`2(#Wa2kC.TC%)=8.Ajok3J9Ggi<TLUi93'<mH#(:+p,P`"7*ZM%nYQGL`2QVANV10;X)=5
%%`UfmVfInUeDbEjgD5ghUBNso<%8;P.h@^aat\D_,;]p-M)L,Q/$VDX%FQPT9Gu(i:<@qChf.*j(E50i6#:6PZ62/:ZZ6bR!NWb/
%[FflP4=jHt(_3Wt>Di3BMGLHU*+f2sT]J1jXqbB&,f_C$1ac$D5p?sg]:+<igbk\?&:lXJ%L#J+GL.#eTYclA$qZ7Y`qc0ci9;9q
%1DOA%i^%A\C5Saj":!'5i?<c06NlrGQlS`m1#%T%fFZ+q`6\VP'7j4PR:q8B+aO@)_%],0g[kV^W3cnuP<1d]#)6o)iBbPt(r2>3
%47lOm$VjG'&-F&E3Xl7G'$;CB)lnh3+C1%^XsM[1RE6\g>dRW:V'n(H6/%3,*CCPBZZ?OWT\0[,E#GDEkfIN`XqsWL7R\(:HCsLh
%:F2!R"B^p7$'5['fT(e&qJpO#>9mo&`dQGt7>M'pA;(!k@@&\EL-G?cD:2M%e0&]M`l8sM#89]&J]XWJ'M%@T=GfZ-&A48U4U-M2
%4/&d>(ecXj&T]WOAkp<%o*0rBUnk90"O.$`%c>"(4?J(JRQDXhQEu73>^=1m4NPXGLS^]<@V,Hmi50"MQ..C3)E,N8Um]u/(,OY,
%<<5")@^'5R#s0HcG%cO9`6ZSYQ!6I0Q#GT#J9n0G!oY1CdC2f7cfT40%0p#\GW?I$b-Q3t3c[NSdpjDM83YJ3Th(/fIS#D+ADu`5
%hiHTu\4M^KG$u5CRE]?9[,A3kHn"7cV3o.,*D^-P:u+K!c[?f^:GaJalkk6aTP?9DF+!4fX&pjsD<3$5M4*trrV-^gFj*&G#&K%a
%I5*X[G9@A7(T&=##EI4F!C:D[q9@&R^rE=3-QM[u-jo'O58CC.\t95@7P&M[FjTQ-%fpSPIG*+H&Xk'WD3!ku\cL5Ib@=Gc'al:$
%Q2T-soQ7H[(3G[8([Ec.ZEl%?!(=$C0bgJ6YrBIRJ?pal(--'W@k3b:f"hZ],;qW@BY0rF1rOHUR?%HiBH]Ug)Ee4Y\1jh,0).CT
%WudK0<e3Anq@"((#:b<II5u/^F*)FM674`P'5<>e%fcYnkY&S-AW)hOr-/WZg]Lj?3(m%OD?pA/AI>>cI?_&fr.3DUA%B_gdSNKM
%*-M?D^`fB*P3$;DSDF>GfTVtWA6a-0i=bRu;ot14Cc]!d$q14%)`3Yaa52ahPk0L.@#1ip`NV^8]0lb[8MMIm3PfI?^'!Bp#HS+l
%%sKtj25i,=L^u#PCCir9YpI5%OBIB$*\\NG(6tR=_.t/D6MjRJ)T1(n1ZgQV1P9+:@jnrqK%9&rU'.MOQ22K,)G=-h^hh50/5,0a
%+W>mA8mio[h'@8?%,=SZ+XGg*#3?uFeDNkd]GXM`LB3XG+JBJ<:#!heiZ\6I;8k*%Q<Dg55m(uep,I0F'<rf:Q'i(lJK52W09N8B
%MDA]E56,h"ALUA?@=;]bK`!t"o`.tT1n^?nc;7Fc\e0@bj!#-"\[M(q"2n*Ek9:O61B,MM,E5dKeWB"fKp(X-8P2m0n0!E^%[2g5
%/-^+&L_<Lg(jZK2L'\@-_HGeC3K0YFHCD`*.NrAF^gR4P\*SX_(sn=CY/#S*(ni3A-9)Dh:cShi^gTo@Oqc@b#$%#nq_a-0"BC#u
%mo=?Ef2<4d:/QckijM2";;r%s2*KAM7*Y3`Q.H/mkrYE.#I.7]0E;hLK]fm4=3t%D#qgd+!]Mc0d3,_glM++k0c15]Khr1MDBci`
%qtd1OFsS?E@U%c^Y*>L9X*9X7kcm/$1M(@GiC<0W"H.7n<Gc3eA(k@3aok(7,H%m1LgdG7_)r,?PRA]YD4`>oaKni$%;K*dr]*83
%;,FdHKTLMmA?;,=n+kcN`&36E31TXHWQm:/?-"4SZuQAUP6Ig,Tp)#2$HEhV+p#qr]$KJCF>\kN"df>5a9rQ7WWC!0+WO7_ZMXh2
%qg^+dhWCISDU21TYq6;NLb5Y1E^eF9^5bf&pDA*G-:C3:<I!%6F+W@eVU=%cXhsHG:9WdH)/bsb^nimk&I_[j"q!5N.N-+R_&Q\6
%3uEVr#p)q+I!MZKL-bqA8Y2u<cp<KB!*Q"#-<q$)gp.eM!'bX8*Y%5j<#)XaATK)k!@']o>Z#8VcD0F,?9k3V1/\:Q)U(ULp^$4Z
%cn%X4#tk8&<H9g`("I]*XpYh6=;h^fhKf3Bf`fl\;mC?OKb$K[(EB!$@rIO.9;(gfCqTuT\MY*NT&M7Gp*?4OeLa2hkL#q30dr,r
%@`R#s"NlaH6R?_4M>1,iT3+Bs`-+Y)k^a=cM'(<lTY*2dC+>Yj86R$MUnOT%"(aSi7<GBg*^`mL-.9(Ee:F;IVfST7,kDqg(l'!I
%-7:E&VSd*JF[Rj&7:kU40@*I7RB.9F??%A;OE-mk,QgpiHU'T<)bUr^&P&`A4pIF7ScijcaL*:nd+!Hc2WE>[J0OgtqB)2#*V!\Q
%"VfP)5Zb:*K"AZ!-=@1QMl!5BS0>c%`Ib%oNkupaa]W>V:)*@DCh\Aa%.te)M51Mp]h7XtfhK(14@)DMZ<PgYP!^W;cKC8jf+UNO
%QUokjU$tt5[SBXtL4@'bU.>2:'LDJ&?j45a9ED`Y=U7AT\7#Ao;p7Id.NJflQ)E&S""di6L9_W5;[$km7(bN!AR2,:LKlckeR1AX
%<BmWk(T0sUN.@!4YHid`.Lj4'UaKmZW9R>*ii+1j'.N0j``Rr^RjupBUT1S&;]2;s;5KP7=-1\i&d5$,@&GIW%4[:T+AQq`ALSBs
%/0%it#"b(*BQP^5JF14N."hmT6K0Raj^,46=4tSn$)nV<-!p-DR#j&&T_8VG,]Mn;YA>ef%`*g6b7[=u!:%D(YH;gt.Pj))`<g++
%"6J[(h@pZB'J,/4i0Endn['R)JD,6PiY=pX0G#lHKoH<ldG&,!G#cnET2u>B@TqnR3$btP'`plQ#s`fhf4G0-95k3mY0V,&DMVdA
%)e(g-)-cS8JW5CRS@f0&Jn'NIScooomm)/PJ[`KkOG:r(Er`H]JDU^gj[2D5bAqd>@M>H/CW,2:Y]PJn3"fbR]IMS"@'\mUFa7Q'
%SN)`%2EV:=RfFlj!N1mEDJmCA<Ks@DW+5!^Q*l?Wod]&7:q/u20%+C4l?9841Pe[XiRA<:N(9Nj+b8Yp*_ct:TdVBQD&i&DK-cqM
%]*a9H/^A5MO!Y<JR0oVQs)?$kpX;_']JdDG*_I_%cjklMj[O'/U`\?WdPXqI#ILQU^*9C^_3PM+,iAf2G0ci2$re&<R8h`^C=7@$
%Hj=W0Z#0gqoX+Zr0k,3WFG9)H+>?d""(6p<ZE76pfi;RmE?uEg$k6Q*`c^JiKR'O6OFfO-WenRR;oKa]6'$rl,_7Z)8^/nA<0?lg
%-qnX'WssEge/a,)2YLmT.bcuf`J&8C44MuO]m@hZRXu`^f(3!Z7*u+W)2;U,Q$UUX#D7pdU8jVRIYK=E9\0t,a)OGp;fO&?GX+bq
%B4bs"*MaZ`cmIR.qSNBJJA&q2*>Qu=.7+#SW%3XsGUdTiTre+,E@XonL6M+4><*mE,^.gp8s'UkeJ5=u\nI(3+:4XX#duXqKo'AN
%J5debUXJ[tBgr^A&.caB;#iU+qqDiS!?d`N3(J'.at'Ubj1)UQ)de+"_Fc$jD$WB<+25c=<"c`u(F4\u;c$--j1l.5`QmL/d@M'%
%dn^p1KW>QZTb)>JETF?+D!HsU?ciP!:72$i$NXKmi&F8sq5>HW>RH:]'U#2I!jJhpL'"e3$>U''?ErhKd*X=tUjh8_#Ejp[WkoAL
%EX:a^6S*f<_!g,]WM-2H=b1KoS8P2UM@6@WW-elJa;`:r-\c/!;Y^;(@2S(A&;kps:8KL#Ni&"J>Io9mVeXg<OQeI[);!KjcTF,^
%#J01PA5$?n_:c,'8c^;0]Z1jaWFh15J7PtnQNLf\1-GWX<KJiW`*=N2e04LfcH3D88JA'eTM,k)F`_meN^dUo+q&2!%6.//Dcb59
%`&pmYp`p^`6-Qm`Lq"d3aCu4LS2GgVNX(n#`W7ErY5%kq/oJP3ZD"9l"(Z\NU=([DH1^2:.st]?UT6pR':6KM7K='ZV5P;NL(_?*
%%[CWW6)cZZ6XZ?oFTQW'GW82fYmCafiDM*L[QB)YTldOWEWiVMJsr>U1]<MRF`mTlQdrEA)HFio$.e!V(;>[%7bMq)e@A%b&pJks
%;NqrrO:]S9Z6c^V+f8_Xi7(msAOj]s[h32fg#sk59Ji8CMc:HJ2U]WB"NRK&nY!V)<)hj<Kd%r"0JS<*)Mg@Y%V&UmMhjB3$H`BI
%Wfi-kA-Lfk(=#g.Ji]4#1!=hY!(dK+Y-nH3LO<c:!fM.a<(4r.4.as;<QWW(#I8D>'b5-Cas33M)Zd6ErZB9LMhTC60J]GKTo,En
%76c3WklJl`6:dK14TlM!^b0o8=>NU0(ll9XW,9`GG"aD8>QAJ*Mo?`d=4LW^:n8+iFu4kP!i1.CqRhC-6P.)X<]JEfW$`Ue4Fk<G
%@OqE-elaZm.!,<;91Ac_#p?ijKQ8Faq@ZUh'QJ%q'aQ["JV,UA'rJeG6ApIOP#16#8rRWF$-d+]VhMcKASU^P_AGUkW67pQ=$_6(
%eA5*nE\'@@6%?GrV<!pF@P`]e`\DRu]QW"Mm7\s]O!%F>hd!>-bm/p]WDHVb]^,bs^r>i>>gZ]@FMfCt^o,*G>CdL8<eZs(pr-+P
%bj)\Z'uD:sKjTRT>SS'\L#IpTFDsRI_[0t9eC9e;&qJW4?]gf2VAFsoMAh)!q>a85`W1b'SujM<l]Tu9R+`ON]8FE57k4JI@V6Xb
%><*'2P2cIlUh_n'9uJo/iYS4,gg[]A#,7*>W#"VZ.Vi)NPb8SZ,Qg=BJ@Cq><jD[W/"YcU1"r#'9"WP)&VlR>UkV/Xli`Lh;EGf]
%Kn1A1.b3n+c9N0s,d:7>.[,?u,#l`A`;+\-Z_OUSa;^=:G!m`FmY8(KX-51#^g%<[SagTUm5`Qo>7SHU;$il6E;gORa-1IR!Qj."
%.Yjt`)<flNd"lQ0ES7K3\=E[2C7YnBZs<el71X%0/Y:o%9<mH*QOFri@Eq@(;Hie@Aot.OaU.$I<DYUa3?=Vagf5F>GI;N50$nHg
%$t1M]0KfFtGPk$(NpA"\4TpWK2h"\ZG.HfQ;M.=hZg5T;K`Qa\97q]YAlNZ2cDO9d/9.()ql7.:mMes\WtKi;AILhVod9Ne>dKe:
%cS9t6Kq.&b85lrCkTa6"L<;E0a\NP`IED;99gEITnNdDRR$<kn%$721YW]=jL7qiu$5RA^$JH:'!t^qNUtUH]V*Y<_)#?K/5Sh>'
%/Pk8f#UQpPLN,A]ZI-Q0+lE%prin+W6CFZR7)4,,c.OtkC]Y3>nOE;C3eGVR'N<d^6PJnh2*3)WD_r/nedPQ:g<m/7quD\#=OYX)
%%+s*bG+PIE)0"8i&_E16@c".#k7(Xe[PA:A0WA9_fcVFn,/6]r+>uhdIm,sU:)?OcElC'eIZo?$MIKVO\,_UG[b4n?<maWBLSZJr
%X[]XF.A=gsoTBb+aDMi0#[((4G.+MgS8j5cPPlfjp,WP?&aC_=5WD)Y,+]:5Abd7q,ocN1SNrI/i_1jJkDLt4+J$15`hXYE&,6-4
%;ciY#!_Ei5O;-GY_-D9,3O5.cKtiHE/^(PeQc<[-!]KB@\fa1u`Y&k!`>T0,HGrs$5Rjr08!969b5cjHc"WeTob6HsPsWXT+&"#N
%YZVn09*n-.ifC_0.jBNo'5"!N6)ZT[[5>m"p"XYFM<?9K++LKtnL#PV4,KMG+OtI7/5n"N#d@C&9OL40:=BrBjJer.-@G8[qA\N5
%PZa9F[]A8:jI2htV=8bBbrO"I"[>Au9bke.?t5'Z+[#iP`.3TYfIkGlZ0rm@h%Lkk%UBM"N-DAGHUb*(q%@"^I]oN.1Ctk$"`d7_
%$NitHQ-]+oD$4,iK&_>`YD;`qE=jV)X+N@8)5b@cT`lY\'#E4TO5LqBcIr'4p&klVo2IuaYJ9MEq8@Mcpu2NO(Po9b%$!k6<G?Xe
%eC<iO_u@4#/&(gfZ[E76,($C3U^=s5LgAY2lJ7TN73$d;MNq\nEsJ*tY_#F56]]!9U8!FRnuAb-LH+0a=XYTIePUo,\!'W-cF8G`
%inR*QnIdh#69g34D]R_fWD-p%TYu3[ic;j)e!qrtZR7hICc*tP9e4XnecbFkC(R,R"hXO)>,?[!]J=:M6:@ToNQ'#M^0I$M?7)1I
%_"j?;]SZ\]5"pD:=:#4QE*j;3i%!h.8-(FG:Ip^6fQCHeHZ$G?KiM=\e0:H<'7Wu4HEfm^GDU_Qpa?-aDN=Q]%'1*:!e@ogke^L-
%[mHoTZ')p+bR0V`:/lOa%kOm:j=8\EOH7/LciYX73f//]FT75h5j#OtW[HpE9g;J%mL4g='dtJkKb$(]2(8P\iZKK&$oQ+)6FNXQ
%\Age02;js2SsUl,dG&II^Z#A+UrBsN+NIiS@6KNc>j0=]-t5/ddqZfe-ZKf[$VBg&$%X'ES\^GAY<_csG66R8;apoPQ$c`3BPT*]
%X.m=<+dsY>4,Fh7*-$o,-OW`VJA:`lhs5>CpJ]Vf$%8Ai#2t1Bjb0=T7grT96,G=P5`fZGWbs8$3?4d:B>NpLT6sS\ZQtET`,8)&
%VM6RON+B^82)\RZn[3GR;c9NL0C4MsLass]+e.;[ShK%L9"pOk9f@qt4Tm/E1T@PZe[U(8I)5s<qQ>33&;$jF&jR/=-*idq31/`^
%aJA1=JT?.@Mc?RIE&?7Jd!q]%\M&IOE<uo*RVWg96$7,Und\c^YW6$R4WUWhJtkAHn.;g!4(n%[-n-5Cj!<,PgX0BK^sOQsn%&$c
%ae42[m"RA2TaU./e1b-5"_EQ6QL\TC#aP[t9?aXE&m$0Bg=+.k_'p0E?3)>/V*ef=:64DA"$R0$I:/kF:RP"=Dq7eFWimQOiJmf0
%Lq_KJe5c`#3W<@7Rb0o\_MrA)5JPeN^*4Y&lkRV(A*otPJqCcM0u0V/nXoTfHQc@LYW[$^D4*50+:o[7EJW[fV90ueOTeu#$$Y<Y
%81!ABE%;K(4QKH:>TEqQ[ehd[prZRU15*V<@88@*33#r=KCAFLTl<>*'pu5Y'4ED_%3Gu?OO"L_4:fS!6t"E$4\*K%=(DtZ/`?>Y
%VM.h]E7cU\4a&a$l/cV+C>6n#!ND+hFBC8ESld+Fb5le0,4PD<8dVQ,;OVhl:jj5p`Pg/-]E3qbji[V?Ya),TPN,c1@gU=[+'Cnf
%.S$Ypb,*$HTh\J('B;\a&=dT0Ll]tE6HT22%CT9q2C4X0it+OX)a#.I$H^[m)Ma3>j/$^D&@um?YR!Tim*9Nm"PlL$469l5@aV';
%kl?2I>;8;Qk,E8&qMl%a!kUgn@JM#G]'Ao;PSF\(S-M5@!3H_R8V?`Il8A<8U;*i$C6V.d`G!p#lZJRpoG1sj^mU395H5X@5\F#K
%M$21a5<36lG$Ooi,a:O,B"8g0)bpDcXV]aOI0;r<WC&_KU$;h3k79$D(fL,N'`k-6Yg8&LeD#Ln;MCDR'&,V0oTMaWKXQQ"Wcl=%
%1o)%d)@#*ri4JMZjqN:F"B#;q^ZE8%\:>fo'M=Lo<CK4Y8HCoKFi3.S8'Zi#K^q1h,>gF-7p#Iu3e1f*E&pA5bMqu:E\J4X6!84@
%3&3ud;I'#(A^h8HVCGiOK\[5e*@\f#,'l$\nf)7uKi=8L6XUJ>YD05uBoo+(p0d/@WZ;%OWjFmuQMf*'5dsZg"G#`4,p79IO]kTu
%63F(#+O$:6/?j.Ke)`Pd6#V-?#[/t,LS:kKV;cK6&1[Ct'n822=Mp#s?Ep75;Oa$tCurH3dWiRR$Dft[(BP4A3h?hVZM5rjSdL2"
%J]I]1-hX$n&?-)"j:#=1LHVgc%R28hR]6Jm?bZ)iiqlV>W6[c.47JT9+bQ.Io%.718VSEH<91@Fh2&*M&;_10,jU6#L;c3Qcc(".
%pp4,g;lX55Q7il]I(tP)s.?_Yf<HWW[`&(JqB)ln19qH:K+-1E>X2?$K%^s"SNo:8s,&[MP*+qWHP"Oj3B($1i"3_5O)$])FH_3-
%Y9n.TA!X7WHGEMbaH^6F;=&e"lpju>F28;*(/0Lm%]TnTU=@?InYJ"nq@5eHo*=."e$U,qF/M/@>JK?AH9eADn+$85R%%tO[m=65
%$_7B)c-9t8chF,q?Y5Y@S#'l?[pa?s6>:a:;3XPi\-5<dK<S2i^$+S2>!p(D23QL,5VJNG%QaLMmtUYW=(<2TFh5pW\nGnSiGG_>
%f>lrA]W^d?8mH<Y->)44Pan=SRW6='Ktusk"_/<]2/$b5*/9D7=e,chdUs+'iqC8<.6^s?aO]SYkL`g>ErtedIB8BDh@()6AIZR"
%)86g!3`1R:M/4-TW\jP<:o5ed(U:cn;=^bF#b6^[=hPa4CsJ]bSNj.eFh6:1d->ZS@r/3N3J7(*IPc"rlk_&:#t>HQTRu)iRUL^l
%J0e2A6LIFAYX=2_=8>$,$8*[&Cou8roj\0#eS@E.X4j71Ig?uSe&tg6$ekL6ckt\U/nXW3fmRQk<(ilM#=23@`UQr5%UbeTk+d$T
%PD%W1Jlki,$,T?=1!h3CdFK9GpTSOOr<DoBGEFAgr@hIPgR;?nhX<ka!,$@g)K56G'SSA9pubDa%Y("F-E_gGI*9Ug>1A5>aHA)d
%,:%;6(thben1>9TK9j9]k4&!JM?#Q^lrE4f&<5\Y+@BXd$_sUG=>YB\8Z>R/:mG0^"K;Q[C=8Q.FYFAb1#U:bX%63o40Y!<69i7n
%aBU4];5RFqndQ&VIb5tOA3rEee]9?[FCK6YjBhU)P(.VMAboOa?kYlYF#n4N;_B:=:^3+mZ<>,j28\$Y80A,RRb3,[;D6)L4b>3C
%_7LDC[Du^!V8aoEhPG"MN[eW1JRY6C"@$0!OnfDud$'*qV90F%*!I&_AR(`]$l4`[Hh8QcSO?/2212FAQCE?n$V`OUK%VeTE_a8?
%-LX/qbW%&$rLD*-3&nkenN]CM^u.DXl'@>ukG>Q%*<l*Pj(;,]U9JSdpmnq[aGGKb8qic-(6J&"9J0/n<=]l0r?MXN%?B'd^jnle
%!:o&%DB@-L'+`A$'o$PU@7tQ416Ii<!I.XBDo`Wh`YPuc7ZB*gT5"d48uYJd;RSQ.q9XN6SDfYi.t87uLHs]l/'<!&^2bCA=Hrg%
%:rj_I7q/bAGG<t-Xq';+jK0noh[,)<0<@2YnG]^ge8m`nAcVT>NDNaHE#s1+P!tHUg(+mq(mTEKR*22s'>,aiHc`rCLu7M2_=enP
%kh&iUp.'ra=h6P^PGjq.,KTctea@bETpSHK[Rl7/6R-5T>$Z4Z!)YIPS;4IfJV/iG7imD?F!f8S3Y1K>`CT&-"&oMH?')i=Knb5#
%&1>aLH=;R"BBHV3%OK]+;SM""X"+<'7hhWkc58Bt?`.2jUm[kb(L._MKKsERcL;fh\E*QEI^LZg4qL?'8>hdE<6^]XJnk-.Mjr2p
%Y^<?2/8J@/&S@&iam=71*!\0HaUk<(DOM-+C)=9ieae-g+)Xqd#eQ`J1B3Pqf7EcjWM:-g\t:uA[sY8V=r9iq,!a:3cF^DVN`E_O
%-T@SA,A,#>F+PJH:Q)Lr5[T1\()CfN=IPXV?HVLI#mRKgn.Dr9H5/#/Q/[Y=f!&4_EY,ri6^;@@n09UiJYh+hm6pLh]QK08ZmBs_
%a7DrZZBY'/afKqdAkUjr=[Scl8s;9!k]-O$,]616'4lu5Qau1X+Y1U!E,8^_([ibMZfrX09::#&\&_4:bc'pJ7\/\r'Jg)l*8PfA
%cWEI'`AP_@6QX$DNo4%!\gM8eQE<ik(5OH8DmlN&OrX]n`gKc))TX>A`Mc6`:PV'NTg;'Q-9P9K!`(bcpK!TN&XMp-Y'_QD2&aVN
%@'=uN3K7$HGts!V&6DJ6i!uB5h>7a<Nu5fT;-akoBU`m535J@03D\-f<[oId5\g]k8tFHbBbp"rl&Y;JdJ"*WS\!mSA&Jo/%!+L[
%Pi1s4*Um4(K*gt4CBc\8Ufe59?5B;Bb"d/S22%VK&fno!$BGYu:%7?j&2W;68RG$`]1<NbE@?DN&@2da\'Z288'fgY-*"&rb=.<h
%SW&qd7ucZS&!MF0A>ttj*ab7#erQes\3%6?#?NNuKe@FIO9J*I='@/6qY/\ooFjMhJ7G1X45ta'QVL;c"iS\[mL0m>@us"hs$`+R
%Xg(j.cLk,DO[u!b"J*PPk'5DK?rN$ON5hmHks%l7_l8RkYGt2o<7Ub`ZAIk/[5'OU2\`:NWK?f0;K,FKST6b+\44Qi#,8JnZVB1"
%qBXT]Q:A6TfP-5.6[4Lc68I/3NqJ.DKW&QZ3"p%tW+[cEO&BDjXXlh)q`</8i@AIH&8duZL:gbE"=S1'8kTjnOg?jR&MXK[9<9)8
%`%aM@X]Zd22F4(i>8?!%^'s'I18]be6r(&(a>RBu,ZQ#_!"52oj%>/^&[epPmV)3MG1t-#7aq]ABIH'Lrh73tO%\69Z5aPn_S]gZ
%J+6Q<=D\oY-Jdco;U4eOAI1ZZ*Q*iBG*<_K;*2pn#>oUaZRYhT.oe>f%[/N3.ce][c=:%2H]X\sCcu#A/q+]RVia`#17sZC199?l
%aD@SkHm=5gW!_U)oGOsfW*1=5.i@Xbc7>1d\4TQ-.Y]@%(q53dT,C\Rcf(rR)!U-?7e1(UJ[[t?X2HR4_c^\D\0RL.(c=F<Zo!C%
%Rj;>HT8BAb-N9mdfKpXMi$,sN%tE=^?4mt[n^%JB-mQAKHlP=7<X$<KU^luJFq6=\5>\RL..7\L?(3,YWKG2='Z(IR?r95bFN'FQ
%h*Q9(H=K(d^S'L`]<">s'Ii>%1;kW>L%%>n66p/^190Wd\Nd^#Go'LJ;5Q]U),VFJ6p&C(fGtDJ4lY\g0,,Vu.7,rF.?[q);0iL]
%;,tF;#(C8mW;U*\Lqkep&r.jTa(t&-31mrMT%_q!O0cX9!0EgQeKX+<UulcdXUf-WAtXfi'r;rWSN:\PM@oDuR1(4U[kl2HLoY2W
%R;^l7bU+W8>ZVn"EM<^@$K['PpT42,k!6%78.Iu)2W6gjg$JKGL,SQq94:-Le<"nH5$KO>T[`5J4,T2[?!t$aF*f,=[.(\)C4YFL
%m1P23)&LS`,=I$J9A3uJCEh6o,TRG>/]/<a@($V:^[:TIj'TU[bO@h<hPr>jXRCtrdQ,MSmhs]AF[6T#fnu1H-lH;qL&SotafaCt
%IpldL^Vp0Oa8_od[46]#C.cr#D^ZJ'mcst_BUs:j=?I;=TI$!@C]\p^J?Hi=og=rc:i4BhD'IBn9>uJl(7@e([T\oX>+Gli;PdWZ
%DZ4UE=Z#k:g&'S&5BUM+Kng^+k?r+>Q2C6Yk#"]7_:/2g[4Iu;+t!9]k7;pIhnb<>^bJ4I2mg1.e(,@F?u[B.]`r"+WJ;;R2MGi4
%_d*-Q5V9q,F_Y%JB`C1kkX7B`OW#Ja$KtniMLuqrAO6aF2^*D.rklW2k>u^4MLI^V5S&VMYNBk(d/2C45eO_l!9Xm%a[L:>o@8c?
%h;lGrVtT^M]?=+E@)HG>CtuN<c<sYo#malQX:rm:M]]f4./*5bg]f?;hM,&9G&PXU,(K+5Da7Q%F+Ek;CDsOip\F)CSB*H&oI#0(
%2i11=7u%EaJl=s4C.tEJY?O.q.:PV?geb;]4AaDC\baZhDM-a5971bLRjF)s3Q.KJPhl0FkU"X^%rhMe9k-*U5$u'\4pa[i2J(b7
%*Hdqe@W&/*MR3M%$Luk_-jg4^C*UlBbTF^gUb%GWg]k;r5!)UQP;,4K22>!C>,>97!TD]h_"kl*NS3+aI!nKFBlX<."(\j4-[LSR
%"!P>"%L3@Z6TZ\[OKm(:Xd.#==S$0uq4Oh!g=i2X$^EB0FE^Qd<bissjM%8":'f1kdB+M93NVB"-gS5Ak&T-J5Y7D>k;k1OMcLqV
%Ok-ROr(8^Y<`ON4Ng`MeEomo02-$)YDM.ecjfqX$D)P:fbi[X@5gn2$5^#J@JFeP3)RI!Kq<CBoEctt,DK9gt4O=JsN@\09Fp70K
%pEisAARs@_Fq!TB(L^Q5KOIH*PI%e'7DF4nTu_aT.Z5(nRR><W>JC3P<6rkmS3PdU(X9Y>2dSoGn_7.gqt,eKW4D@0-jHWj*-UD:
%MO>[h"+$q1(F/U^+'oPc]is0`]W,s)'Ho,KO0%J?7tpYmeaJ1d*^%10]/>GugA>]7F.tpj$,',Gp&@/%+k[UHV@JlD^'@:aW?/2I
%oMY'ER3j;M?osJ7,F[@1pPZR5PU*=A\lNmm.4Kc42^%b)"uq+BVD4QeTC4fgUXk\^%m24PUWX]eeQ5FYn<36:>1p:k75Z9D.]hci
%CXd;$#4uruKK/kl%k7(6F)Pq^HbUL<"'j*qBtVdD)l$,W+["nmZu-ul5[j#kpR[A4?p-f##0NZu?"u^U&Sbinbo`O#`bhh0aM%/l
%"Vq]9Con^`=9$ig5ZDK-Gk6.6`1jZK\U%?(P[>\g7q%#R%TB!4g5Kaq*p.E2OYa;</-p#I?]g@(IgAi8C<4``()5TqfnCKY/@Xao
%lht&&!TD]h_"kl*[:nrEZ<dgpp(C.d4/XX?TqIs2n:u=LB%:EiHU.tq@0b&1I,)>GmJLD!9lFfb6.%@Y`JH?HT]f-jF7aJ'C[X3T
%QV+W2JFeP3)RI!Kq0Fnlh$mU,*AplIG*L2k)'QhOI']W@V1ESa%KiGeO.<"pm6AP`OW>QJS&jr]HHAL[fJ?TEE"I%;YAP^U;e:o+
%rG\602"s1<YD5@BrI:j>%]d9jToMH?m`,Np/cI/JTZ<0@m]/&aj*mJ>H7<\W+?2g*j!HGQr#lKXD/Us*GPRDM;%Ut-\%9;];li<'
%*L<O;DBkW8ga3c\^!0K!R7c2+Y3VBVE'Fl;9;0Bi5?mn'Gi9i^boFp]eR,orc>5]Jh&m/2X18\^ZZ>Vk13p#$fij"7"krb&D*Tbn
%13n9=LN=*Uf\9C($=Is/l+$pT0YSIME\]l!Q`[d/P]OGg!VfG)28=Sgs$O03^XdVuhu6U0j7,FEI^UoE%;>`[RnGU42SI^Om5_"]
%S?olhL4[MV-=,!]W0hB'_$b:'^cWs]jFgi[kZc&r5@htR6_n=8$]9C?;ItR1?j1`Gfiej9W7C9g?K,+/Z.hOq/>BN_ZdihNaU**9
%ld=,Zo0fX>@*sgN/L'G;lpZ^n@iiUB?E/gEo&FquC+,fm[^JKip8+cn7MU#jcZur'PnDsd>H\(dd5AT4__m;(gA>^b)Gj.N9OdoC
%7;>=5?j$"T9L"MJIr5Bi@Z%OD]G(OB2!Ofl-?2TQM7,=`S\A>\5U[mf(u_sT%Tf[eH4B'aQ>qt'rc$+j2YTC<gZjpf4KNKVE9lZf
%%d"6fP8-:e%\&%?XbBUP/0YW:6rsT714jBBYXR*pg"M1je!C,gNIhUm<04.<`cE??F`eYM9=Y*Fhu)H'_ee^WWdY,Paa>L'n)oNc
%3mnT]mEm&fLA<K<bQ5BkRcPs>q88ZgA=Tc=LjOP!k0bZ&m1D:a[>&ch&oapi"*uC7guFkg>a(Q"^!G9-A%"IU[P.obs#eYUM?/8:
%X\/3e'*l3<_59+&*7cQRKs0AS+jR7A()5TafaTM?<na!(SE.8m%HM(%=Uf<KDOXh:p-)\&$ZLGJ`P5F'm/)'Ym8VWIPCakc+6KL(
%K<GH=JFHRSg#b7,UECYd<"lBNOF-)a$S:$.>ANi/?/=p=nf6Nah)7!sp-.)pSXC$'b8&FF%!r%5pWjMTU?O06"_<`m>YK1aX^m0:
%?A_3!YK$9'Q@gLrhe[1_N^X8g:lq\$+`hE/=Y1&,>l=lFj'`F:rbtSA2YTDmYW\;NPFJ*Rq=?ih"&q6$'rnF<FNQ/u1Es=1H7<6$
%Uo<U7E#t1rDmm*9k`q2]e04TkCH6Vh<jr,*om;)XLYL=Q\bFeB2>gh]otQGMs6]j]o0<6CkJ.&K(=`OdcS_j5/l0DhkF1K3"<ln2
%J"U&>,eASkZ(UG-Pa*>)GpH]Db/3H%"&Qcu@0MqD=kN[`Q3nal6%<<W#Wa[g8Mi&N:8#,i00!_q"qWplY`KGtT+qR7cud%_k2KMM
%*\/-G&k6Vrn-qh!F8'SbPhLh+pSAiu;\Pm:mTVX3XRbO5ErKQmHcfrL\\UXid!uf7LHpi@Y6R1h!<3(S=P`rnLgmKJU]<TEPan"7
%"<g8AnMa.Y"-%RZIP<PS6#gt<0e(6bh.*s5%hK<25ntW_=L3AT#rs>&f8M,O-^69[oU[6_(5$#*.DDGOII\&Jd!PrnIXk5rW_/s2
%#]q%l3a!(=4]*]VQSOL5lT'0>+B)<(:k1SfM*aB-`9;\;1fC&@dB$&u?NXncW0ch*q/d<j-Hc]8ll1U:?K[X`e3'@-F2PCF[seF*
%B`Y4<o(GG;ft&=qo;*'c%[daTNE/9FF+pIKGH?Vp/]5:^`*bbSO0-f^)1Z6CiA/)CliA7ZnD,3f"c+_[0Lh3CKP$Uh\aH2sK2%B-
%=]fR_n"=B:gY;h_g95n1og@rdN#s?U$R4^kB^^.4ZYI1I3Mk#bod8(trcY6Q<br6]RN>#h_A0W/YaX[&9F$Jbh(o,NJRUD^:aTmP
%_/2o#g4OuNcRLj.6!X)[n7Bj6/<PR=Wpg]_cF?-&MDBc"!RZc-\d+=Y15!W3_igt8Fmls1!s+mRI.%og7>=)p#T<Oo9>,s7_ca6^
%Qr<IL*TclI:`OO+R7q3B['2peb1Pg\Tk:XgRnGf2pO3QsW@MJ(qdHg+]/@'jXksSI!H-0$1u@E](P-*r?>h)&!l6duT'X(=U0-ch
%We0)_Y*TTs$@VH90N_9jBlD1K)>6f7n^46!V>CcV'=2Q#/SOTrTlYIZ\N,GSahHV!O]+V,>2t-->=FT=KLoZ%jIo-sQqk`-8HV)g
%r58-(3e?nd0Z+&Y-<!%@+)'q3%qD9'QqtFO99cD<a93.a#T^Jk:f*/>BACij*#$S[Tt_0',bF`5>&snk6892C*\Y$U0oD;m,$p4"
%Q>e1ki$Pej`D"2)GaC?1R%1ClZ";0IN6@,@,Y.AS1LY?W+O!R:52BGqfj\*9QjU/0)HRpk,YQnLOrQRVK`]li)+/UJh<&5AL`1&"
%j%V_"<]8MPb=Eg]IFkurk.rSE<)"J=%Gm_8KIkbQV"<(Fb'L?q`0@?BD_h5fL"Yq@P-bpI&9K88>_j%bp'Zu5O48Z1,b7mAD*k(,
%dMu[EP>o@HKCcegj346PJ4-\5dP$'dC*GB=+ag+>3P1L[#B?0r%>\%pN7o'bT5`tq75)G/$Bi`Z+2M%)kQ[2:i</Jof&K(g_V")U
%M*%bqMWr#BHX'B;"Sj.^n)4//>Sml(G.^csPVr:+-(Rp4.`sr?K]q14/<enFA;V$&=WQ+^Ltk$<"(EP$qE[WO@n#ZT&a.t]%1EVD
%4OmF8!+$SBip&1M@b8akRu?j6EI@\0T:etj.)DuY5ka.L%SNU.>\QRq=`mjll@cQ+2Q3QTSNhUSQ`>dVXVK<bDqtWi;Ac;/:YQC)
%/UhJQ6!Lf3>f3&5X\$1Mp;<#O8/p9g[<doSs!-W$"?<3+6iID'OobW>_+.Uo3`?%//uNAK0gWD.$H/1H,q?3ZJI`<iTVO[il.Ysk
%jB%/=aHXN9#Shqj14\S$!bi8R;86*/bAJh$-X7V'_4Vj,nEKEiU,9AG/0gpWJ.4WKB[GI5,]P$BL29hqgONV58oR>\N$!X*S-]AI
%UVXbLfoGT=Hafu[0&`.3L%WBVM(OY0K^dOn,4cP9b(]JR^T..(`0#Z2Rn_EB$aa](cot8;s"N">Dh27FE]UAaX50V[#VsMngs\ef
%k<GnhiJWm*R"XQkm#YPEAdS_]efS?$(QntgL8`$$Uib)6[Oo%?CoY##@f-eB;1>s28ns-iIMYU77s4rh=0`7R\+a=1Dl4eH\Wl`I
%mDA4L+7X<4o5T?j.H+Qm&MSQCK36lFGVLiCP.PtHL@!K]`<YO3",[)DhTGgbfFqsU=KQGef'Pfepf;HO(2pOeNLILJh$`rm/mWi^
%a(mBM29_MMr.!A<4*4##GW?+--jgftiot7gb7:K^>H\(td5G@Lr*c4=Suk`NdHs9`ph"S_(2pPX,dp`-g8^e\ALH7O.,!1:m!g+=
%h-odE$ku+0h1(b>0kXC/`i0r?UlY:48Bqc8P`"Aj+b7(ClVL#b.O/"KlkFVqQ;$Ou8jGDC6XA#/lVs/aJmbkf:R24#-s[MY,4/VZ
%d=e>rVDciCAX+>[<PWOrl'.'\n$iT.JWKQM\+0Yi(_4.iX1UPl<6"03]#\FR`<+.=M4jNu_Erc3rOqYKKJFZa"0?`pO&YT[Qc!>1
%m*Z0>G<+=D'L!$P$8kokOZJn<6/gA6q]duO7<gW%Hj&q-PC"1F0/aN`EC.nR>U5!M/n/5u[9mJA,0_kK;c*B\,rI@f^.$U$8uHg!
%dk&<HIAg7UVW8a`YH3Z,=2N%'gl.CS197MkI_?30.G0nQaY5*1\jhmbqF#$sZi\d0NZ+Yk1e(6)2PMPfrb)ejY"YcQVH3uL%f[2u
%W&EQKK(85F;se3P.s5AomhA6@oL=(t;+WE`S3-g.rRfKDBu&Z)\bOl`-0aM-_TH0M40Z'uUg$+J!c(GsVjV\Q@c;hj5eh),1BU%2
%D%>V02$fhNcN#1b^="de,d"9rF&$>Q^!..r^V8%E_Wj.X@2i-jl4g(`ST3d;M^YZ#$*tY6VV5u4A.V]$o-):i@TjrXi@`*po:VaN
%#tVDMQN^]`edPlNo?q=r-SWuC"XnR$.Ju?#la(W<8kbp)&tODU[\1:Zn&*8*=09pT.@\g&IWPp1koao.jYX5`/W.C]a+N@?)C/Uu
%Pndi)Okq"u=Tp8fN[!'5r^'3o8J;^E3M\9`7"mT6-^mD%q:7&/R/eMRXL-U`Er-j,5OH`p80hAlN.0c>D`6?[)/re6nd7E/XV<FZ
%SCn*+V_u@u+]f>E.:J#6nHUMM&XI!"JsR+0m/s7,N:c$k`Sq(g8J*n<e-U(qG)68Ss"`UVc-q7Ge$!X3N8^@7iaPi+f>R<PlnD15
%b&C7C\Bq5'.5CKRGS-KQJr/`6h%rkT0?!)KNoJF"Z@lBuCPtqrS1YA,+"40+q38dV7@3Eqn4^d98U\?G+q3GG_I=uJ+=6q0]9o(C
%l_lcL$0b!^+d'b^9#,l:0a%PN93$cU/Zk^Ze4c\_-_3$RQ_alqh1uK-+4gCn^uH(<=_L+\@Y"Y(ph[8);Y1.2=q3AC1RFPkP%9B&
%]57"kMF&[(^GULa.7KU0MPNig.'cNf_Cl3].V5-ki]4B?<H+2b17g@/ahf%bPY3V6(1<,4I*okHTR7Vl72!jdU3[38fo`0sb&@h,
%G(sAa.FBh(I#/%Le6L1U-F[iO?]Kok97*-r;+*4g<:N,nJ,dJ-Ea$N)l@i53C>1G(NqrJ\hmU%&krdmEj%'h=]qq(S8@Xg#Je(AV
%j&rN;9LD3Zk_+!7qfG%CPq]>mN-/n6iMD&EKr]eP05?^&&O256^HDtD^ZCm9V?4:S/dJm@-'b_^'CIc'aMKXn]*';`X8L@K&Erij
%XgYPLm1.SE(R0-(80d[?Sp79hE#dg`Q!?TFFNBf!`7"4Dc[EWm,=.1g>0PeRXP<&Dcc1<ZWS]74%VfYH]U>\46#WB'(M^+O(/2IW
%aIRc:9pp6!m)"_01/HhMW9/KUT1;3Wb?;Y-]g9#0hH/5#/:!@pZ%t$*=#mOjN#e9qh4Nu8`kF=FTJ_P7H%*%\@2EH7#>HQDU\nn-
%XG2U-aao<&LTG.`1+^b<:%l_209[l1'@&r!"2KQ-bE55Jmm0#QTPW?iIAJS34-;Ci`enM;"u0O`6VKl6`M8*',:lT_X&)&%:f;+l
%DV5uG"\qXXI)t<pP`#*7$l7m!7gJT_FsYNBDOZ2IO=YjQ;/d&se=m,tWoMgB7g#DDIkXAR-$\Ek%Ga5!%j,@e^m]&,Acu1'^u7-+
%Xo)]P\eqLW7hZ#LjG;e5ZrNpNV,2oH1sr1OpFW!"C0N+nSlhjYV]Uj@.Is15:!,jYGLZm[D+#5o04#f=1nU(K&s$Wc.G@Q@Q]o5]
%$L]a`INPHaBcYN96^;*O9*%t?P7\=/",^q<%]g2QZllT<>dT>ukmUc37"qEqAVr"8#MHfIV!Sq4QA=kE_Zc7fj/GBjVI"f(W-6S`
%KbFd+.W(Q2k&P1OWlfQK<`tBKeQfBlL0.h].XAs9(03=n('P'ZUg%0DV`i72@$rO*#Je&)o(/D)$ll4TRV?tJ,0!8*.F7(mCYi-)
%7QP>qmtiSP-2X_TUf[_]MaXIj6-%n?]`M`0m:LPF8le_+3b`l^r^L-u,R#_ZC_)1mm#6mml\It=EYk$O*8.GKr.%Ta[aL;2OjA39
%9Atb$/FIas%r5eH\\(^]/PF/g,dtfKgLgnKJO,a)]nM3D3XGb;qYBRjD14_8Ua5HmSW^+=M"f7H3%bqTFa1_K&9T9['b1o)-(:/U
%Q*3R,\NSc6arJ]83UJJ$l_DFQr&@AsjHkM@KuRa$a-t/0;6QnKbC7"i?kXY+/[?c>9TiQQ;VAf($Cat8rKuo<;*#fHmK2<tOtH0S
%[KqY@AV"B@G\OIp+c;4(G^rcD(\;&cFqZTFK7sIOQb^/0V*h7*q&J9U_6,CUi1gGX>b>;5jmdbnPp=#h/Y99Y3R`I#HR1$#7f:VT
%_-P<T&HkLB2W;'m)1gOA&Tr?cA.8Va'SD!DnW%0/_ma1_&BkeZ#`f%GR$nmCNa;0%L8q,FLBbUq+q@'l%S_2;le3>N3Dsf51[lh.
%?d1eG'MK8jX+Mf7n^8]61I(q5EQ+&**'L',If9bQ5oBc:>76<`q<1-U\Lb2?EgW7rY5pXQ`hT"fgh%>H]he@*o%%QO^#?gNH/m3a
%FY7JWd<2;^$:3eA0qV<DE^I:iESp&kS3JPj;nndU+SX&l-OQ1ojM@t/F=9ajlSfqK]*:6E\>D!MH_9caRF95^lmjl\Y+1X'C6WiV
%@*kq(XNehVPf"J/lspHlcu+DA^Ot');5(>("\#o/gBF#\&$oG4aH/jgk3=fH)N<hJjq"r#7;M@uokUMDmhW>aR^7Jb.#JAYC^<W`
%SJ`Pl*csc.3#r(+NIf3nq[X4DZ*3:*'`Ha"&h%"jVl`I(%M=+**>u3@JG:>N!9Xm%a[L:>oC\#L-$Me0-8@mf4OM?7HSa:d.T(1V
%LP4nWm(+RtiqaP*6g:Or>8uWu?h1Q@L!'eEHs:A32ap@*l89]U\oVubLMIC+\bF5B/V&#7(F.4Nas0+]'QZS)>!sQ+_+uVMGprCH
%UgIq)4R9;r(9Sa2TS..XX18C&^Pk?[kb2"j22D)"Hus/BJPmOqr+qj*[.QW9fG)l[HuQ3o!qFSMFXd]',#rBT&uHOOI&$pj<F9Cr
%IY9Zl7?br]2TT1P2ET;#1#'%>j;d[>AKWWfCG`?m]/BT@f_\):rpL?@-V7NOltJL=Se]li&`O5oP&HYo2@k6o@*Cld?pJe$ItsOV
%R%7&rS'b*t\:l=Dks,593V'Mh_3]e*d7=qCh7!Mj\P!4O)VCe>0/6Z$&7?_WMIU&h,PPoXo#$lXQ5%8L6PhD-P?8:lJXnUqj8iU[
%OC4T@Q6a+b*PS_jpV:)R][ZK=VcQ7gZ:WaN&h+eL7Qbu-=Y*uSa\d+J3.#+r=R/"ZjKq[<J7QVc#gfXjS/HQIX/J__n6jBion6a.
%VbGF';U%^+Q`>JSM!W7o(';])R_p7$0I/qs;BSqt8Z41G9<FWrRpcoe$Xl#AJl"ll!_l-0b"R\Y7Y&Uh/d&Gj@CXk\dr(aO2Q<^J
%419Hb_!mocnS7MXP*<<Oq6VSo5osH_q9kaH;5OQl!n.c/L_quEQoPFm'gJoB4O"BNkMJ/rD!fUsm;PDdCWKSFh-''!_s,]uEuVQ1
%]V0D&X2-f[[i%8$jZ$M-RnGeRBf.G3luum&Q'LHD6@^6.N#l)X)T<4D.E$IL:o2P5NfR=00!CE7BBP_UgNm7=YDbS@O71JfkOE9+
%T41f>3g&6n_]2b=)khJ<Ic=ZRpd:)LUno+U7eG[/&d=M*^N)/8hg,ju6._hTL:6SCW!#H%m\gaWF:b-2"RA[('JIEb7WVs?7t*2<
%?)ArZrl3a5]\\i=id,`&*JURM%8b#@`B49pP(\^K%N4t5U*lV0#'75;a?P!OU,$tfh0%<h3A0bn7gMXln`3"A,"e!kkKk"['tACt
%;i]430IdbW%Z+=mm2!64q@Qdt7BAVUe%$re.95)#eY2Psk^Cm<J&>PKnq^3;nTD(A"l_)%]`*FhL)qd37sZQ`?TP?(DP/MM(^h$U
%#,93JI(LS+\'?V:O<%n#7PbN7GrjcW>-NH4q>S1$EnYf`P/g"t6tqt1`X[`Png-#*$[6D4L4LU2M,.Z;6)U(IRSsKmK*A-BM)<UD
%b.LWF1Q1:eG?5N(U,_^K3e:^5]GRnIYGU'0*d]PHHS0U,Zf5L[>orgZk'J**SXEK(4-X-&oQCotHGc)Znl*a<QqI_VNQF8>6:;*`
%[<Y;\`U2-]dig6Y0EnNX1=b^\&StoaG'=]tYTFNG._,aOjp4)p)E5I#mOpbQc4pVEqT=tcB]p68pW&&G43$A9lSm]NIF^VV#k33'
%6,cYT*aP"Dmk.(2W>!#@OB_c@Cq,8P)k"GL4R@l-jl]4<?;+n^(!Y1sUC(R\_3sE'`l%qscsk3,S[)Y@9*\4i(BT3k(CsG7P56jM
%nqU@s3k1;eIjgD=ThEZM")S4.'Z-b9fuL/r$,=NoSlob/EEocfYG')?[K@orK!9'j[7&=#_=EoMT*#t7/imCIbPbGr8\iu*fo^fh
%hpP4XR+Ie0-d#^qS9K6<W.a=b8ZsRCe)AloD9ZSrll:c:FX4^)P7tXmE6EHm%70=f;*um_*N$RBe?dTg:uprJFFo#c`k^Q[VlWM9
%D-.C#OJj*9YIZ?T.SsRpS`4m'ql4I5j!I,?$R@Wb%,o@K?r*-dKK56r'dgmg0nq)T3--i%iJR;s7'n/(2m9>.hFF6r4*huC13hLk
%hgB8#dQnbP?SE/LQL2E80`2,BquDViQpX^hQbu=T*BbCs'sX=CC/[.X6_Qe)N2[Qt+$#Z"5r>":Dl:.dDQLpfD$<F@Z3^%M_O7/5
%5:U?>'`,0Y[_ie^6T"+NehE4=:3lj"+sIKfF:!/s6t`(tWlK6h.//jBUC<"+ETcVVkK7Y30<I?AC/p%@GZ4-K2mWf+TCQSTM0gm-
%D\\f29Or][Ml?jU<SJdi,'u#1%*qu`70[s&#b6=8W=Me;7tqZJlNEJ-3OJ`7iU26W8VNa`rqp5uN56Z&1U/''lEl-#\eJhtFN.8:
%[Q;R36\[rX2D43jJ1^sj#/b(Zhm*']AtU%E3HSFNAlD^A[>8+3@,_`-[':\8JqK;_C/.s"WJN##pXDE]`8i?C63Wp<&kW5Jg2NHV
%>!Eo3p"K<mlDZ"s@saZD8n&1Pa@9a_12;6qZH+.q.97E"T5lG<)/`1)U.WF(flU?U(#p"lpFl0->93]$;*b+Blk3[_17Aa8qc!#T
%,smuh/R)%=V1+@3$(fSkC!f0%7joad^!>od;k;Bqg)c<!)CBfRKVa\4Ssa1Tq?-Wa7J7:\>K&SE#^,T(<nNIFCbH(](J)&gl22?Z
%*9"T&p#iW2PfOi).&J$.b!(28DDC+H]VXoho)O,rARaDupLd?YI^E`H)]$?e0^DN8R0*=ag^=u[);u<Qgh8Jd+!?S=qY'^HaiB\j
%Ua%/%fMUufZ0:J6`7tnnDdQq*UVe'RNL(<DRK/oden"1i=OPQhaSP^H:5#pGDoX$Lp0pB,*!&[Z+\^Uigt&o*6_R_OcD<@?@U31E
%'hS]W>$>I:CjHV:gGE;kWpN$&PB1EOor9Y_!3nsFeb$p6'q7Ng0-HGY<f?-;<*Ae@LY<P)Vd5UV6Or^H1[QU>eA6@^oMT6GdIs]e
%i?;H*Ztf/;MLWp+(C79Z0Qo,91]!%T%SgK2KVcmjJa*Lp6iC2AgTsIL`Y-HY,g9KkdLmhWOc;@t"43k'>W&(g&\ZNgdmELTKGM;N
%GX5kGO<"rl7hUu:`3<o6,+on7+KUPp9p>B2%"K-d.I"elY,$ht\^K"AapGnq5qMp!/ad/tnl'kqf]bFePH5Oe`0l-i6hYE'asNW6
%k4qMDU"":L0#6Yj/;>YtRWb'f,3f>>V_qj#]4KCWW[%Q2Gdf4[F1)88>EoUHPD?[J*0<oPG%Hqu(0HS#GKRMql.,5qQW;#<+>6l?
%IMCJ6j;5W;,7(32-8G30N68rU)*OkH*QZl=%Q2@h_md^[6`n&Q&SKgqXb9>0V^m?[H"%\pNp7=F:Qdj@-9knY#_QW1RM]FQ4DRB;
%bmQ+h\/gs?2u\2np_Iucjbn&>rR+:0o0AKQcYQ,`hoWXMdDkq$Q@DE^ge*+0Se.3+'mS@iGH$NSi20ucA2'6YKo&\4\\(Y&#)%JJ
%'1O+je/B\)8/SRlCPk-J1`3J1%K["87:@m-i&idVS1Q9'9VlCj>*uNZ:tIs?JuW)(r'6YgqTo^>e91oB^!&-m6Mr>Bb=Jm\%c"1A
%9jp+gj&A.0\S=Zd,aZ[TiuN;5$JIJaljQs;<"7qNT_TY<O&m+R(%!oO^<1="b)M,&Co)bTlYdOJ[1_B`O=k.("rc!QF.bXR#Wd\\
%6mU@VRYsoSZU4qWTp'@`7i)1F.oW63(;2qX`RHr4li\be&;%2e7q=!a%fFaZV.#)6<"tTAA9&P5V[l\>]Zp=<$-toO<,Xd=8B,0=
%r.;QQ$t]Zo%fhB1AgpIfIE3fL&-e&E%mF9XhMTn_mRlBkHXQ91:G8(mOHM$Wh;U_<OS7mb@P?msBp@q]gMEV+:D:2V)B"3KLE9"P
%W$7XY_"UQKR#m5OHGG9\@p2MpH!n87IA&&@Dmlc]E/34+/0BEQQq@kB7buc`SWAs][HMd#%Kk&Xf+7%,<bidh*:KWIQOFLkj>=Cf
%md_X>m1uZH=]Yg?,-bVZHcbbTLGhlBn6N8Yg2(^unhcVM..<0?Rnkl-loNgH%ZIT$%<DGiS',X=_mKA/8tWOT"LefYeaIHGi[c'j
%jU=E[QJ)D"!+BCR>po?/V7\2/@cgHhT>?;)1q@&B4/]Jo\=X>7Zo<hFa!arqpDt/IVDZ`rdqqFXaU`Imh]B8R+])EQYfXB(6F.>X
%8SC=D..^`KV*L=cV[;NEpp;cG,WPP8\\pi<F/,rqiZ9R:Idd4oE]dT(&bUV9"2V/X&2SU$1:fri9E5/naXp`Y5D.2RoXKFo#2s\D
%"=nPU94:=>-,AFKR>4s]@us^I\d\e'hE*VMXD[pk'abs@G%o;Fh$#SVh'/4$&2"n#7QH;B/X+!N.AVscT:/R1::kRHRG*\?nbn-G
%qCDj^fQgUV"S?GLpiOF\_YLNj(T3$q%bMS^er8n%.c1%7PjM4[Tbfmls,F`ET'tL.#o=ZOd)M<@+^`<!Sq`)^%Y>a>#7)jSG]s:5
%f1rN#M1Ubog^@h3%8eJN<c,9_"+"\GWKPd)_\t;dC2Q@b^DlJ.Xk)V[hIl^O'C9Ee>DKK(8(Cp-UfC.Y>>o,)W(#uLjU4/8kY!IA
%X!SU8pX6KgPC`TO4/GO6s+:/ig.70>i=HL;CEX7-oL[t22FI6HOGD+Dk=!IX;WC\XO_<h0$*.quX$.[4CH)E\k(.0/ihZnO#3e6%
%c;=__H]]PHAH\'+WM6rh'DkGTq#bctLeg=N<kNueHK.OOeK"pt7H&+lKP"H\7c@$OV/j5g;ak+V@[,pS>9Ht]b1b;5Q--:inem+`
%Y2ZS$:8K!/]bVYnkE_&3I:NV9cLrG_P6O=Y4_"d?#>G3;'fYre,/_4=R^18ED!O;Mlo>]fc8#)`!+j))J476$kQ3W?8UA1('&,UL
%6#iY23dIH/-qDmq9R-E^V3ei;>X4YuN.r5Z7:'Rm=sq(_qe>BCl'TC*_Fb#W-Wef'%$3tj3`S7m+.EbC?Z<?,r`ei[V8U)=q,b0g
%glf3CJ22WcCYl'73>HQ',7I@k5e*"]pC"%!d0?d^Bma@IR&*[kH2-6>4+t>*--m%&b,",_PqiS9rk<mUIKT.2Q@!NJE'u9q-3W58
%%G-PEnU&%/!atEdKK>S3U@D&PV2B*:rS5?$b^$UCTBa,lbFd4VBf6>fJ&*g!(8\MOK]A3e&79=rdbj:W]Z(&dY]Q7B`%7BWiteDq
%`r&T:&&0cVI4$a^L._:BTn9Qn-r#e&A"ksGbY*oH=Si1d7(V_8)iB\QY5DpJmJb_NVokX6gONU6<7eC-4I*;6Anqe.]A69oD`5&$
%n2AmZnPo"`(1%Q37QuOC_]E;)]/uYA1_\/BLC`C6,:=qo?hCZiR$GS%Z2FAMoX+Yk.jN(p[>@L?cRbnS5o$1bgc@GmLmboCjjNBn
%4KEK5DCd;4<Bftc6OW;%*W.&cLm&_jRrH][#T#jML*H;MnSu&Rh<Ohcl>7k,WRueCgO!9]LrGe2KdKf'+="^mn^q(7OI3XO0<')M
%O81WcgHG<^La%p$U>RcQ5*;O&T2qGk%s^CG<<U*'^Xe`$U9f?DTPYiR@E+WB51#-q3F5d1$Wj!/[P:G#L4\%2+\:XNZs<A<P2[ko
%\=.)AK!]9Yb^CM[f4$B&&'K%Kc[8;3C$ILt;V1>U^hf9N_Mla6X%<.8RIU"ZK2\^Z8%i_X&R4/L,b2JP?ZYo^R$O9mW9q@45E\F6
%Xi1b(4(%IqkA5.-cJ-Q-DXS4WCCnm:IspS):oit8+NKQ'-ErQ-(9gUP9UH(Oq6Gj!Z4GB?5BuD]T$'X*G>O!h\.ElhhcLX7MXHIU
%Y_`hL[;&n2*=hrVR_0mp5s$P);ja*\o^]TErNQ5U=%@<%p&p$?NO=k]*hC3iWeaVRXR9VRc'L4qH,8`V1^W*/H-_iOg(f2U]IW/-
%r[&%hQUO62e@Ha+-QKsX_jY:Cg(ROE0L$U8Wt`sMn)*cB-U;c")'&sscZ<!fO<.UKDe+X,$krY)0X,-ML``$=m\NQ`EAlHLAn^Yc
%cmtENdqIkScgZalp(mAcH@tB/=,Sf"hc"t`09U+J,,7&oGTk9BA3<.JY]<u9V(/M4M`bc8ik`n_>UG(j:%JH[T$8N"L^6Z)U;0KH
%GhE7(]7n-IQ#M8`Wm_cpj)]VD"k,n'N@SSk)4B[PN@$/LNrsOL)ns'B4YCZVj1!28(D9[,.E4t5]mhuB#[o[I9b&1:%]Vi$;n:n6
%*Ss>444>$ubcb.78@l-ma[l$/Y45.h;Oc;Bl$:e+XA5LW7VaO&hFL(%_P)TZGIK%T=u_\mX8jUB92G/rj]gF9j'Y^Gd9o'A(LXZ2
%M^,,(Us>J-k*dMGj1N@%ncc`/jSE:M1B$6@E9?D>hCF.#mGC)UGsgjI"pchhZ6EVKO`"M-$ld19)rA<To1#gam_`k+9-ubr_o]A4
%.9'?8*&>ml8[cj`cdPePeXYHO)mQYi*a[hX]k,;;iX7,W0o?Z"mBq6bd[_C;,!#YT;`QK=@ObK7&M[%CO7PQ_i3S'Ecr64g'X\i?
%%sN\1f5A\l<l!JF5H0\=^58!S[LU9B5RB^@(oaYc8m*GI0%8)ISc=O%<ST">/etsJSA37ChR=8r1/UAV(&Jc1_LL;XEe3"s)4;Oi
%-cGq08bu>;K,^oH"!r^@4dWf:mSC,S#X_Q&isn!Ck!okIl80JH]6-29:bB]MOL4\uj@E99\(6lPZ.tD5X=?FB-'tigcLGZ1iV8@@
%_a=,(oKMrohe:NH`-fA+"^<@TV"/\!e-qF[kQ"^<U0UV^ALJdGJ5&:S0X+d;l]$usc2"*'ZL&d5`n:d4C<e!:)MN)Rl\ZO@r#'b]
%]"1PoDhjC>cIa."*7F`gcY=Qb00@Qod.M)Jr/@$"dJ$)Clb2&^Wg!ATei=q].aV$uKnljnJI+EVi(9>W(5f5K`/h#\'NIT0iiV*g
%?JZ<8SZX'[V(eCn<l`e[L;j3pF)r8goDNbBJ36LpCcJ:'5`3%&3.U/4*hhJrTCgYdYlbn]K-r(k>UPK--mPZPZ&lC='=oqN5k%i^
%FpK3l5S7cW85FJ_f<i$sj_Jns%2hMBq(4"<HM_+]P5m"VDRJL*D>c($k-`Vm?aZ9JQlHNGJ*T&R\l\j6;.i!/-k=7F@pmN($,Rp9
%+RC*"UQS2WKLOZ3G#N6-(<E7maFZ2Z_'os:!?fXF)+2W*kM8ra7Q^_h+WsS%[RpH%4f>iiT=ubGkkd,[C`VS6;,#*)mguT=CrK(T
%>UYo3e9r+BW]X</6qd7;Z2=\U+A]S0k1(G6J@?<aBBqK!Dn@:Lkknk[R@ggr%GLYakT&MqDGB/.^*!$jk3RaS<b]BE6SS\"Z^)8d
%4(HqJBoXIi"dOIm:k-DXKQRM.#SALb?1hd_Hid'0Ql$g49h^76TiI$H'qmkd[7XqfWE:T9i7)@a/4=8'kF!24UeAkChPclbK_A78
%%ucSDW"HfE'MMkEVPm6^IUINk)sgO:2CTE'bXAO0+2*m;01S#8(Yf-c%V(KhpL2nk[]ZRc".$!PD$f4`Fh#h/8s+($<YkB0#@>c8
%*m@m.DSW`mb)#u"B%eW(]9&TVlOlBdeFP^kq$j)/>Bch$&Y*(H;]O9';p??e_7)=tCOI@?\<QM&Nb.qrIM#!"`8GXVlHWCd+M'(/
%)pH*DQI;#jL#G9Y<g4T!f=t]!m)Up8S%KHUqrn!I[#Fo^+s5QgMX6+n5+C?3^%Vu-"5TDN'7-/FkD^FgOm./".);)qQ;<=D\%LcT
%L4IAq9c\&Ua)<rd)IopX]Voub7X-:pA!oMHZFnD=I8nfqZt@sHbcCX&+m:T]>7:7E[IT_ZK-UN@d<qD5ZAKl0k6=pH2^A_Q)!aH.
%%7AnNWPZhEpC9\qMDQ&34XTVY4BP;N6n5q\CbQ>RSn:CH,Rh=\HQOgQAEkB1%!AV%1+k[nnuO!f!^B@0_HVWoamD)cCa%ZBHC&8T
%Wa'2H'6V$H=138aRm5lJ9!)M&3,AYNSsf2W=bp"1H=i#O+BAXkrZb+Mmq_$igW%''P'`(a<9t^A%D#S]G3l`3PD&=Bng3R9pc>bt
%,$eVXo"mttBHhj2*pGh@KZs;B4M,sHpE,If@X.^N2<pgtM2Y'D&e@t^2):WpE8ks*IDeEuWR<c@,SW$Ekk+.?.DbamJ)"\`2Q5J=
%0UrR+?&-jl^<f^bqb;SPk!fl6!;*]<T:-Zc^l5Mu"5'mn63S!#c4IYi(MdZ\-7C,&]i:Slc4,p;pna+6X^#>7'72khW>\,pi+L?!
%Q9Vd%;GfoB)b-WtS"SPiDD&A.EK1QJ-\`i=TI)$:'LScpcLW5s,g1EBrq(::*QFjX9o$o0ET"L:os@(k4\(h*"HbsqVUD6%)qHJN
%P)Dm@Rb1t2I`sL-Y1W#X_DnJ^Km'Pn6Ga;g\u<if^"DH)5kt9q)\8N9L7g_,k++>9Iofm)-\N&D([T3.MX)oU7O(s[pW#/!Db!i2
%,Y&ajAJ"M(j*.:UE6s^oAG?a8PU6\/MMbc'RYD"0NkC3$>b!(?`!>k]C.aL/7e.7r5\9rQnU@9Yr,bLe&uh%dMJ81hSPUH5mUU+K
%j+fVgbaB;`9?Rl<!jmJt6lemp0Et@f:]3Ka]Y-T.c&e3.(\H#UCpM5h1lUB'J^s*.rgsQ>HPM)hEqaZu>6<C%Y0Q[Ke^=TU+!(gV
%EhrVJLZS!5cLa&eR3V8uk*Td+Dc:`D,Yg;K'd.#3BdV"D7^ZC@YsjM2?S#3'db6bdObpc!pS].ap/=@Nb7M.OgbAL%nf;5M<U%\R
%PE!f\jjAE_08jupkkaP4ct`-"mWpD)n5^_jb"uC,kt$to+tSipU+RBTI?/P@?/0t3+,euir=Cm/6noW4XhUShRfWYFbOo\$[[)ph
%7ZH)45h%.Df]E^R.7J=HZ]%<R.TS9HDY)ao0pHdB*3P.G%;"pBHNb,S'b.PK'\.SXC=1c3F*e9*f]1gmMs9ULD_GQAj8/!u]@l9B
%N9:De%\uBRSIDpfk82on#[(9]2Pccu0%Ph0_/L<[<k-VjpR`Y__4IFTjG(5>QS0#-l[]/4cn@GLKJn!ZF>;+u-Pl!"'0XoBkCg8j
%hrc%8kf<jkA!XNeXAj$jD.A'?Q]o@<f-sGQ4IN$*:[DY<jX^q0[i:6+c3?3QH4G3H?ngbCh]H_IX?E=cO1k](Oi,(A5MbH=9n&IR
%X:tCkBH0*5`ouS%%&L+P$Bi86FLgJtA.U%=f7AXADae(4'P1>rj,d?+)s6"p_I4:L[n4P5B9Q"14.j1k(,+2?>sDU.>"u`WrVqWq
%oLe`RXj%hX2uHNlnNl3k+A_P+H9)BESL"Z<GG_.V%JABLlq96X7bAiZQ%I>:+C+5="5B#Y5Sr+R[k?lC\8SjJi_:T7/g7oG%=!@Z
%o&%.c]hof2G5DadZNnZ.i]^@AJROdC?51gn:rk<r>:GG8;&3VO-L*\.Br)Y9L*M:c!KIGr#<8#-9%a-=h78CMmMFGajLfMB%S2mQ
%l1lU2I8eNiR(^$t79]HZCeqCIeCMb'a@cs&@!j80K9#,F+-3Rm-,oC_r\,;K82e3uLpfj?1/qQb09[#$!CkU_'D^U\%UK6b(2bD*
%N">`uhHijXmYDM[#nLB)W=cWYMpdOZk/i%&FWm`65q#BFkZ<1542RFa?"1HE')_-Y$!m:<Mdi`sW)b9Ke`?Ft9PBE2Il<PJe]A$7
%:u:B9[fL,s@T:]&4md>8Jbu*/n(8(k1g["A+RdYLCq(-L--60r([_jE0]ASTSomf4=*/QD.R!Z*-FCe*5FWC\Z1Ti63KU`'ISfVT
%kjqU36'0'FC48PK!:hX7o_TGNE:!`ZVG.#D7XD<p7;fB=+^g?k<QI2ZNbG8h(-/)@3fWf9\<[sCI\R@/Na6pDi:oTZ#`d?"hk,Uf
%K5oWJoMQf.&L8tBE9`"C6Ot\$!Kd\T:;#*dZg=XA@Pl=I\5=nsNViN2B;j<IgsOd-GWkkEigq#R5J6X'CVMdsLG6Z/:U%,:^<%r`
%cEUB;f'_#Z<_c$q1U0&ABlA@R;fgMQqP<6?JK7oPlZ'SQ=>m3)-3msLXRU+'N;WKfrC?B*X-4!MZ$_r3L\4gg^$eqY;mr>@^h73X
%,GCM?Deb'CXH[Su4RVT9YA5J?ipeQW]tu]Q8I7R$:fJ#>9C0Jm#sIP;Ucc2g8D;#2k_MtEH5W*YJcS:p2?\D;`FA0D:;l0L#Oue%
%'SuZ&+ts^eMVHJqcVTf;q-.9Ho[?CoWI*/pCp39$Fb[Z'E4]_*FWJTgoY8cu?-UhGq):d9nk&J&d<5$Ej_kr0Ki("plCkEb,JQrq
%]Ha9T;aTk?r8n%9_l1cn..P$>9(-t.7<j0`%V8E5YcJeDCuth>c$WbF*(Oe\h8t\I9++H47McQ44!pr,J2Ki78k;)#O"7r'>^#B<
%H3UY:cN"$Nqe^eNpntM-)AE@0@+pP`_>D@M+"-iq6;u.JG&Oh0dg&u.d08Ak^HSs]Q.H&H_`_9;<AA7$?#m@'g`jXI@X&k6l/N([
%4eSNC/C\?a&Q!*KJ,qYF20K^)`^)oM8#u$aop"uV'I7WD*%O[,LV\RN.K`'B$stp7@]a%,oG^DdgTAa0qRaM.-:nZO->g8dYYctQ
%dlRDD=C/cL'9eaT^b27<J`/"=Z_Eg.5:q&bBE2H,B]fg#`8I&Pa[)J=NAlX`22'2G<t(>4e(Yc5O17o0AtX@X`==IU3&tu-1dlYN
%1GGp-`i-DX'hH6XVf<7!1690HAun->Q:^Oao'%&13sV1r`!;6M=ArNJO%`L^npFJT9J\nBjMbqk6#X[8<__PoU]T7cgNh)-R:,cE
%fS=[=9dP\F#=W8F?G!L!petcF1_N$q^C$)2+g:fYB+8$>L6^\:'QR/D-fBTlGcn8>h#RCU(@_T]^D#uHQO^o%K8IJsMqAq-7N1T'
%lHg'#CHm_BFb?roOJ1do]RVM80=8o"_?]r==E(N22aD4TmaLH!='SN0Y=#AFY5SUr:u#Fu$>/HJ#'W*^&sC6a/NqAnF7j%:OL5X4
%'KuA$1?TcDJ]Cn.D/@C)`k\:9qHA?'%goNNPof"bFJVu:9C=r&8@fU_4bdiN%B>"MPaE-.@4fEScH#mSE1!6>d'"/_c');LH@ukZ
%X:\\Z]^n?.`S4)k8_66kN!U/[pFT+>::O=ZZg=nDSZteU?+bgp<aclT\.".%0X-6t3lHr-o,ZIt=rC5JifpJlcBX.A5FMJ_qo-@M
%!tiYcNHUjP:IqSEQt/@3nV-8%GG#e9g!P5@"1bEbGZXG30Q4Xi$AtK?(Rhm1CGO.nqBDDK`HaSV:RGKjO^<O^F[iq=V0e7^Z@snN
%r5;97M0'W^(@lI!9c^;V,f;]*18b@08[+Cu5cIKa1(-S.>lX_hbb\Dh6)TR")V=1a;B$#L?ITM7rhMmb;`BDLHBYR:Nlul+l3R#h
%2CQ=4W'DOFO24d>U^M2rN=kqlkh2KMLFQmp&4804'FGBBWUMUBVFjc*nlapZdu=]M$,-8HH^Rf!CC+#U#460D9VlQ/A-\"`dV^kb
%D:T8Y)(HO<jsjX&]HWa-$pfo*.)Il@'3\[UNhWBBPH4i4"@kl.@<-B+[cqju;LgGZ%O[<6SnR6]n@&(^HWVo^E*:)7h]e#[bQ>b>
%H%(tAPqtkq!KMW*C>i=P=+6X:\Pc+U$Rg8,&!psH9V;rR1.QchKm*?Z3@bl$_e?WBZbnep(jGJ)hiEQ_$85e/_ht.&Ur8BIbXHM8
%9`!3nD991o)6uZp$1F`c,;ZX'C,n'RK1UQ%Q;Inl/=-+NF;j_9nlUc/&]3=oNB%[sZ:Z@%.MjT6@]C*FcBh:0Ks3!.%nnEh"jnFF
%Gn)e^Q">Ao#]e!tdL`IZ8g&X%0Sse,Tp6H^V]c]+i"!bojDl)fjg-6A"gKf%:dPVtPQ5!OIt9Ep*[Z+KLI;cm.LIDh[_=W<-%+*7
%6gEOJBMcD$ZZnkdNHU/W.POO%S5%R;k>+Z`+&?[4cn[/-68gTW?%XnT85;4jBalUm)jhY-3ek[d)IbN4UKIM1JXG7'n"')Hhh$K&
%5,/Sl7LuX\oaf&=L]bF@]F,s:PoH:`V'n]=9T]0M3ZI2=&$'d/fC]RG</_9Ar/\#1:f:G(%3#mV$6fggLY+c*PRkmUOi>8hPG^hq
%3u4=V[-/J>hG754MGc#k@Sq.KlQV3nB9OoFaS&o):BcIQj1a,]M`gDmKCTgj(_j<pi\Tg!(I""-5"tn'hTda7o;07Ff\<r)U)CTo
%n5_e]E`j:ncQRe<YumuCicpn>+&"G%bqc'b"2h!f3GWs]Zj@mrCcrr/m+rg$O,n?]<J4&MO*lGEEE39h/\j'*Je7a@ap#,98RsLn
%*q=_kOu+u3KYN#QH,cl"^mE>d^;5TJH#`PZGXI*d'/^_2/.lLjl.,51(W(E\.S-!/M,#Wa\lLUt^'G.4.WW75doA@LpU`;t!@#?N
%G5f9^h;Ihu]oBXBV7ico0Bb-bM/@n&+.)?bk\*7:Se!XWY]R^45Zub-'Cd;R+E68D"ZHgAW#6A6:N>+_qpPFa0kLdH&pP87o)01_
%M5%YE3eKfdl;=(5fbYIa;QACiR"Z2L_V.f;:@"p`H(jk$TsLXf7D3)BdZa0%-F$f^n0@IHK*R-_2FChfP0YWHoO4cS9#1U`M*?R9
%IE`ouOcTd3^7d'iG5<?b90hK>,pPhoESn_DPMtKl+<^7`+2+1pM*WEo67=m4D_,4_'R<EZi[nJqA`N4l>^oh!m8JCpd(o-c4#ct#
%#nh?'osdseE5MO2&!Qs&0n\qeQ;s_V;-AY-5p'_>h\*5*(r9Zi$06#1cmjhK5U3E"$Q_?a`XUQJ\3;eZYFCm.a=QN7kgRFpK`?cB
%d@>S7F%\R6"$MPWf5]N/aC,h8070?GLbVGlh^0f()PX)L>T6iiZSJ!^q&/6C",a;&)tJQsE7^pF\74)D'\]@_6Gr:o:oQql!&Q=\
%#F0ibcEDQpYU#[:pL#PA9Z-Nc,80O&9'd;#Y=$[O,f/M\d7VdU&g>dB;=HK,Rd5DS'l(,Nh2+EIXL(3[LNU[YLWA^1\o9WMTH[$0
%'ZikD5SZ2\+BLZ>\]r/,dPn8T0V5>rTOXhI$!-j?)%Yel_+=]>BLB*7lJE\Mo+q@^M1lZ^@B;GHIl%LR%T/!JpcU?o]MgJ8lAMR*
%N=*@Tr894;`.!BWKp6@Y(E5%2EoJ=!^B%+HgWu"b&^&Zr##R]Me/T6Si59hd!.E.f)r6e+;u"<c(g/p+_/fN`cC`A_Ho.<\&7[S>
%2VoXTUCEWS9NJ([*N&fTROHuGMGnK5'CN)BDYFAs,!B=1pfDbAFs[SY4]-H01A<u4pZD!h,lA%/ZFe^LCIl>>7$.U>g[8HP-=qN]
%":@",?lP!@mZd`7br#>jDVP'sCr'r-c%"757%).kdTXGB]<DMd+4FnQ0,;kU4Q-sOR,oQKAuDpo:XU4_UBc%H:P?hGXB)M-$iIr&
%=__Vf9VB!6_hmmWlO;m72/^^RW00IA%se0`$0@)-FC@$kOVi,gd*kO8G`qbfcmaMdSIb$SX?*Bam,#<N/IAdIYc=:)<Z$@Q`LQ6-
%=dm8)'^9c9C_]mk(WdTZ@6:Al@nqdUoE#e'#u6R_lO'KF(>Ds_hk.BpG)5(iL7qYaq"0W=#SLkrL.+uD&en+%rb#qR9VAsu2R&u*
%;[b\=8H;rq\d-L7rFB/o1nA+@P*84bbWYG*]=JkD578EEIPbg"]`u"LlX_'Ob&g"Vk+)pQJB?QLEFsS9Y,G1\LNL.(;u`XCNCeiZ
%o.4<);$^rZ5p-IijTpBOp/kd.+pF(onVMFYp*=dL*t79BKjQd:Bb2jS;'9%q?8_G"p^H$,#*3UuT\&^pfuOq"=e1RK^iZ*('bJs'
%B"\FpOM_e]2AdupAWjp.Z\02kna6pt12CB#A>BgU0_:"B8+0V/r,m0sQE\VsG-WS]Ds4@(UpY1KKKbr$Q,K[P_?$,SUp,`9QsA%g
%Rif@Hq^IBPA;>I?r_gUTh6ZTeY&9Ce"fATUls4oV_+W:6#hXcl*t@Ak3Kge&4\+V!<Q>V.clAI`XqceEf;h<-)Wmu,Jp-aImN7%h
%IJHL]@`]&DeDJ]lMi/']BXWU9UG'2B^23s%oaQ@Wot0F=E.]:o8!KZ[RPE!fHn1Hmppqp#ps[)>#L!p&O6,gAlM<9&16gId;MSE9
%!Q"a$>Wut5MW\NG6?b9npj*mF96"Pq>N?D/VCDl`rK7GK#eSe#L0=#ZdA5I80cf%VT4\)]d+IgSmc*SBRHlah9piCPN6>*I!iE'L
%(u>[[Q:#+O:6*^_?.POqUGV#Q^+MShW1p;dp-<V7T,N5Q1)a^L!RY+R\@#s/-H5E_SJIq\+QnKpQiVF%?TbrUWRC-QOZb="iS_Ou
%dJ0!='ZmC9N<D[*\L+"h?9%P[>7B#072>Y?s)gdkM8uB1EDh?Q\+`1-X-X3G"q?i,HPU2t-#d^,+MneWUG*60:<[(U([!^9rR"8>
%4[GZuJ3'ZY8:68Pr^*V/',Lr5FlGh5p\[)M_ZKK2ON[m$9'M$pPlOjQ0oG-j-HmN+h!rtg/s`N$89<F'G;8BiKikLo^rR5TPHhl3
%"?&9_KYPK19t/:M!uha)5Y)e]83.6Nmp,Jps,tmp:tZaAjOX03Ljd.n^=NZaa=1;&Q[HRZ%.n5h;=PT1`4#8NEc.]IXgggG?1=FH
%o!iAI5?]8*879XmMW&FaPE?A,lM2u;r1Vm/Jrd@`n:[l/(d:4Qm6s13b5ktrB-E)no]TgPCFJf-(c.eTSb/+^rS'jini#7KVq6=(
%F:_HE?5r7p_>T@WjgRJ3G[O\peJ2gHb[l=q/WA-2>"HU`\\M<QrCB*U<C\/^Ri(/n0C1D?%h(?d6q$Dr4PVM`b,Wfe*.B)T)c8<c
%!hB\iYlO=\]\;mONHdo`P2+I&[K/DhU!dZX9=a6M],`,.rHb&^\Cl":c9l=@X)3XDp*e+_-6$73$OV^`2&R8STj4KUORrR[$7sul
%Go1??NAm\`?H"FG@IUATn1?s=V`hhZ8DVI.ptt"P/aU6sdM@q0+9J[Mb<TGWj-h9t65J6YB.r^>L-2QHp?V64lf]Bi`^a>nes[`Z
%5s3*+3l;D1kc!N->3+$013K@d)$/K(_+8j!1g#\W!h>\d:LE&::qG&m\,bK"O971E?0TD2L`!Y7^LE.4Yop=Kc$WM$X4M55r"N-:
%p_-+q4\sPaGb1T[JNpU0#ZB4Ih7];CkMa:%#ES#nI^nUMJXKpe00>Jtf@Ng5p>]+Q+N0@)YX9o7G!(>m\X)gP5fEq]_eV@"(,QQ@
%a0Tc3m_*Gh*6m6>59>dA?$Ft5**Y+3MJ[A:#P,fU[_W*BD\BRYU%A1:j^3TOisONT:@#Y<0r?I+Olp[H!gr$0gj5XV,fN)6^C/k+
%KjPmDc6T!li8tb?+h[RYN5#o9lJb,JBt\_c(@X^\O'0nY_,E/7o&hRjf6'QS@:',KHfj`)`B3@_=VeTMioB:g%lf'm6U5BBJhtYT
%^c4'm`/RK3J0+ai?hXeiM^ga`%>Rbc-+iAGj=uIRXWBO)q`4nM$1\tMi'QrF.AKphZCREQWPU65U!/k?:Xf/:,k9g7*5;SCNJsqT
%W$P`l$<e>9%G.TUU3i6c:]'5IVlQl1J'gJS$R=QliJs@OV6:/GoGW9BLS+1B%RHKPO8NrTBVUqE4@9q.MX+Z&B?mcI(S[N3]>cMg
%g0A+-PX`Jl0t^,]W5M=B*D91;ksYS*b4.a__?u:t]"k1*)6jmq[BJ#kL'"9+ODITIeLe&oTJ>()<=M60rb<%`6F$IcfD^6Y,<5'<
%Y(Khe;?ruLPW6=,0"1S5;`eq'Aj)Sga2<Zgjrps\a*#BK:b2LlT"$G-pftC`CNdqMN\/u*GhbqIl@Kh;Mr15(B[=`:LZ4Y,P+eWm
%QC"gF(#rHL2Y?t<CPK3uSi/,(oO6n^fcaXiJc^G/(/<=:@B\HG,Qb^D-agM352eF!M:,:`S^N>M&0@SJmR*L4E9!dOZ&H`B^hUgs
%+IC(/jro%W:@'FTnA)IQ?CE^.<[eEq`m=&:lH;PL:<LaAG.O4-p@ML!DgG!"NIFW8=(=AbIsd*<)g9)HkkjC^<q`bIK0gS3j16MW
%+BTRnV0HioaMa!MUf0sNGj.e23WP?`p**:`U?!MaC&_drrVcDG"96&1"+P,M7"NrpIt>WK14A)>rud*renhFMO3;@sV^R_ki0CVs
%`TTfALs+*%,uGYKXlYD8)#t`h^O15%i^<)/pp23aZ#BNWbU1dKT:H[Gd![;M>GL&I]r(/.H<F@/jaG.@[EC]22@.caSF8CHf#S/%
%4cArsJ2%j?a(>'%/pn5O=?o="!P#"SgGO=An^DU&4;58#T[>j(LV?(2qjKmK2T5Z`H>*o-@2J_YeO?hgb;pC:+Q&_)%_.&ElIk7)
%_2KLAAI1U$![Dd(m)dk9q&f(p'qnKp_[(6.Jh(V:UaWIg7tdlFV/4c/>+3sg]68p"EeFqjg)1"/D1@@e4Wa&JoF+TEYS6!oDoFhQ
%N5hb.K*PoEH`9rfZj7+j7]AM1ig,>qIIKL)X!Fpa^D9i-hmQZ-Vc10ei(Z]*V>/hOe-e?[bmL(=gjXiFUTl.10'g9EodV5`SE%(b
%Knr4>9tO`>YbbFsl!J`OPT$@c4>8+u5G!Q0j>`cHQ,_"V]+&C]gVER(QPL>7CrdU@gT3U]$0s2'>X:sWTAOm)m_\RRSgo]ur;6d!
%8g0X[,_iE4bscId@VI7W3#HoL_a/IiR]"BsoBgZOQl6bn^Q]tlMeoUW%i'<+8S(uTeq&!5c3!7^\4q@?,3sd5$\WO\ClmgOC,fr]
%f?@2%q"kl_<9DnLg>UEMrrBK4X`IKVC^?e'p^_4RkD0sEfuA%-X*OoQb@S`a\k^e3Ak4%l"aJR[QpALu*(cq>YB(&JiPrpL#9l,X
%@[n@=[l`"DEUX#;3tCn@1W?7%jV'%+-*W20"9u?h^*EdWI=MJ"qZ$s#\Lr[6ppc-(_[==,007$[j^Ne6"a)W-J`UUF.r"X_2@'p&
%>NYHNSM[@m1Pa5rT8UgO=,`.RiEW!U7GFKeiT6?kC_t$ni@;Dk<sR2XUg&EgS29VtWR6)Sl[rr>A4*++kA]\o!M)?nhe2p143b]m
%MjT!K2!4&L&,9@[TOL]#0VTZ.B1T*j1.#ZKkRc;AV,UQ!:orN46]92N^h%qcE!cZ?#ua-u0p5Zi:#]93._i3VQ7EB_Xs(j+F]L9i
%pPX]_6cSq;Sk=ftR/0"J*>72>blB`a?%m@>b!I9XJS]h+V4r8Edh9JbRPt*Cn?C0[(QA6bCE+i#<D+_C/;6_1n2BpZj*eqA7="d2
%Ng]GuX<@,B7;:mB`I+'rr73M*J4[tKPQ9_i([V.GN;^/:ba+-:H1lI$#Oa7[8(Js#Z2!idL^cA*0d^LEr,mt"FkuKTT\if'-bc[f
%JSu<+*gC3?I=Ug_:9N.gD`V\Vc,ScC\:8s1%O*S6mYN%e7+e5k45qJ^S%ptC_f0#qgZ/s&a1XlGBOapa4tr1]4W[BSLg(4S4WQ*M
%oGCCigX,\M+iijp=T*'g*7+N+s'rgq8d+qbNM"o/^V;>k!.HR'Jm:0C?<LLX^btH\fjKK8LV+/#5AFaLZp_<Nl@#AVSkYsN#h7Nq
%j<k@3LdH+`#3LNsgrj!GW4*5EHtm+#`(-f_:LCF0lc&ED1MEQLE&rV?(ND3(K*56$#j1(ts&U:l`q.hW9k0>Q"bB[lemRl)IYk<p
%V-Ejl149OB>!+JTA-&kMHbsfnd5T>cHV.0Lrr*';"sVdk-2NuV$AXTbE+$h,(Je,<;)hU3-6_Y^JhA@1pgbG+W60n0%?,0O-:((;
%gVUT[KWTTp"m5mDj+pq$<9V_cVk#C-GbQE^LCnZ"=app9@_1"QH$M<'Ujq0k=nBpJ#Om^2?g0/CJ[poO#ZYOA`cNJ6MKU:h3^Fc!
%b)GYsAE%%A$3W^LP9"fJ`s/`S!QP#lrERPcE7'tnR!.f!l>(Q573JpHPkKQ:5O`N")h/n0?(C7'c\mQ/Xb<AKPuq1ZnjhijUK=41
%>frjmojJlqOVI^Um9KWhB>WU8YuD2$BT\&Odr%8,QAifZ<tC@JEEZ$1M&')^jOWmj90%`kj5rage/3413";.7F8BT-&=5=`RT->o
%ld[+fl[Z)i+QE0hkn+:/$g,gR+`]7F!-^>Qn?3Fb?RG@%;4l#i)lfQ;CWV>ZYbV?aN5r!-Y<e*b3mCL/[?]^brHc(WonO(TiBF66
%jL.tlk2#!D'KU<2Hj'ogL:A7$Hl+4?Yi9&7/2W_k&bUp<6p%J9$nA]P;sZW`@'BjrW(&?%.uU]`g%!m!b<r^KUqqiJ#m&Wh7nASH
%s$)*o8+7fUg)\a=*bK#gh$;LsU^6O2ZXV]NAMZVI\u%V"J^bt9a[aj2J^okQ*li/](-HK3#aA1HAP5#AW[o?t1!(#;X09Op(??FT
%bU^Y*G6Jl"baSi<*@8Q`hLG5P-KM@4JZ`>M!l)\s'r%h&Kk+S?$haSG$R?%Sq5]tGK1""%UbRB<9[6,GD7V.<Nl!(TVK1,g)s7"H
%CZCh=1qhha!6Ye8I:+3ZS4*hlJ!JD?qAH_fg3f!!BklUZISXKt1\Y(A4pnfg4VPqe&cH&'a^Ig!Yi2R;2hSZ(Aj*uDhOR5rC,@8l
%W`d0,@"><'$:WqW;jlTlZ#Fs!8Erj\Bu.6!qO@W#=G44.@\%5Z9T%(,opoZj5^;lSr>,0)OgcS[[iR9a"8j4"2:a,hmgV/`B8^us
%RcbFc!h22F"(lg>)BXZI0q?!f.>m3K+f!i%ck=()Y"KC\%VN(?[e%35Tu1tU$M%BC/)C&`58KIi6!S"9:fq@,QNRODYi)mFXCAAX
%722j;lML0u[RUL6##<*GO(oruk_STmdfLIH]b:MK_/W^_?ZS8=W:9]*M!UmGs,o&f<)d*l:,X2TUkgLsf#QSYNb.FV,bb<jQH!'4
%fT'H[8*n<5[Xu)jEROH56P<K5E@h'83kip3F\#TV=XW%Vl1]GE%S"ZY03I(uk:\B,Jq(W/7B*180G^2[<_J;R8Aj<N]gmY^`AO6g
%OW6(q(B<@*kr*=rpTdO#=os-UGOlq2*paO,iTZ:T\.b,;4;9fZ/PS%e97*V:&h.5>aTTGSj/VW/ah`O6Nb6,qLXs_jCQrt9^C3D-
%r2GPub3t\iq!`P3+%heTLn,EoE1i7YJ-E0]8XuY,"K#Y\ibQV1Ep%%Q!L#bb'1utJZu>L,YV45._Z*)oq?X!%4e&r2F8V-mGCa!V
%+J*=$-($V=[%Cs/_Nu[5ViuPgJ,!\M32(0ZhuDl;&ckZg6YRM%fWqQM#7=BTEqti>-M-<.b^,,)ea@Bm6SBarkS.8d9JbFL2Rf@C
%Qd7;Ve0MNckk7.5DN3Sr28&_;2R@)_IBn/j#R!3a0QOO_FRer&9uVM;WET)V'8FjC\Uso=J\:'nF23;'%#:2@$DX^4Eh@SuTeKW#
%9lk(ZbZ#!n>eL>pB@lA0&*FX=CMu$%Xp5Q&o;W:AH2RSlS]]gIe+)O`9\]XQ$GG,H@JM*+f4hbb9*>_m&ob4fA+'7@.Qi4E@7>Q%
%860IN:p$<:KLb2Bf+7%D<bid(mFQnKGSS#E$OSZMcNCkNRnp"Yq4<qYB:,luS:2\9-2eMoan3o@/uRKM2mnb2ntcI,K*YQZe^\E7
%RZqLO18's;:8ag]p7aDr2tpaXH3MA]P*lDLUc_V+G#Zl!QW'tPD)bd=9rsdtLL*Sj%bA2d9*?`5q.@&pZ.V(.?DnP0=+c<=VQG.;
%4HYu9PVg>O]5<#EgA@,J*#M:T,!V;Nkg(pWP(g2a=4<;!RugV!Xqc$jfLnUrD+H7J56ZgEb3@=7Nk+nN')r&g!(!?AX\#<c_@*aF
%*Z,sU#!.7F9kZH\@I?<:+lpW(A?(BV-d7IjpHaLS/T/p]M$W@?!C2Cd^i55Q;]f@2-/"X9aD>n7U3Af8_*qGthB[au(^RRq%JfdY
%@E&iP8Oe%K-6<uFo#O9Gi6N'k&dJ%VK]"prP#4Y%SQll`YH_Rj]hu&GD*La&(N`2\1q@%!*9%&YL&KjRQn_-9ZLo7Un!,cWq9sb`
%dH$(nqlQAYj=F%Za3PER&J-LE\=Z;mrZtSe:f1N&=c<U(QVs)a^&N*\VjT,Sf]HXg^dTsdH^!CEU'G4O*mdQc5n%i6Eh?pMpgN<'
%mpm?kIX]+F?f!h22.kuWY@1/hq+fKof0i\u46Fh\mfYOMGmh&-8Mg[ahWd4rk;uh]gnll3r%N16Zh-19AJtK#QGh^h_*Jf;e"h.U
%#15kOb2s>&$_nPY9],RA.E!@`Wb.GVk2's"#l#0K)/cZ;$)\`DML4fC]u5=8"._[4-8_4i0_`)54(Ds4F8G'VG'Pb,=DD<8e<O0[
%dukECGGW\MQcDmaIHFr2g#S0q]46Vqh>#id-:''bq/l'gYa9C>A"`FkCHf)DpPJd,d'^#nl9\oD:UI/8/NHWO^;G^OpgQY`['5m!
%B^0`)k>./\f/T8T0mCp`(L4l)Z8Dsg3L%e%pV:)^E*70kqWXHpD"2r5INosP$"&(FVZ$+:<A>Kuct8<)0,=lR\QS0*=0?gV0+iOF
%Pn$n\Kqsmm.@X$aD"di@YKVY1*Jdp`XDS=TqptY_?D_D`5hAg+Gt*u>k3hhoV5P^I4L;,<ShMuIDFr26>AUh9^BBI.G+N,M09IXl
%)gDER.QQb*[O-2LH@IC0I)8<Ml/!\#U*8Z@mldnAGcYAIo;DIJh;kKEl`L(422i#K$N@e>1-0End9P98fMGQsl@d/IYNEo]*15X`
%otR/ATs_*F7J.7X,pEq]U,Ee0F98;@ZaSsT,JPCBmoV!fq8tCh_C1#.7[4APpKdG&b%3=g>DEQ"*+*q11erJIML]pQ6Zp4iREb0)
%U/knd;@MAWUHi@J7cuE@QRV9d.!5!p<p)OQ:/)_JBQ@!8RV6C#SB3cP%oHZ=fkq1U(_TpA==htTV%!.](O7@FDZA]B?`pfSHmt*9
%H\VjY>V<d%a7GCoN;d0<pV:8tM9RANiIcXm[\M&8;AiSQFd`/N'QgaWhX*#XJ_U!W(=t8:G0pXX.K9Q?[(de:5a3o#TXc\i5H`S^
%SrL=QAg"pY+ec]t0A*,;=]KRN0H]n:`lC%ZAffStX1hbB>X*)fAR8(p0_`l5(Q>A.#W1A,KJ=(BHLF!NY-0_0JG0@=PFq":_8CPM
%:mLbEhChmWj`X/]$'NBG_j88^;/h>ZhJT$T7lNPspZ\O4V?b7cb[?\bLf=Z9C!7F=*A.[I#<Jn9b+Veq:Fi[048WrOaYu=6pnV0r
%N8XP'o!mjt6Ch$#Q1s<X\,ti5WSqS/Lr1mIC0?l"5ppSbMh`'%,iF8fiF"Ia$8<k6)]i(jCmstg$V8@W3J6_Bh-XQpE@MP63q$ug
%5g9ljj?\PcSjj@#.L48+eO!npNl4fO8XO"l1?\Lp;m6Y)`\et^7e[9CFnl-\GhRiT6Qb(`E;fgUCN_E5c(&3Kr$Yr7ZE_+.e+47(
%aYCBEYQNWC%)9lWCtftbMkQ!a%7bnEBH;B13m8CdRQBds%W<86at_@XcW':8I%W/OP,5mFY:>CS)7<.?G%Cop*NkpSNpQ]g<i6D_
%:+m6,dt[ZOkh/?@n1>,.Pou[1n,).:g^c9\>g.k#`:DqZK2M-jdY[EGJ`Rm.G'LZ-+=JM(RN,f_3TbW]1O(`<bbMC36]/LD->Hq$
%X>1GTo'ngWBQC_EHfH5dW6E_O8I'tF"Tab"i2*\[F6&\K)\Wg:1!Uq;M>)jVMV*HsKLVRtZ=o\U<&u-4QEGfo_\>[TEK^869e@2(
%OdMS*el$N&Z@8IJjt0eSB$#l78/ir`Yh=Wm0JrkHIl;\MknBp2!R)-hb^"o:NPgj#Z[R`MbZ$4R8`^KkRQkQVU.Kr&4g-X;NkMf:
%lZK&e:G8'ghLqF?gNqc8.I;T@D+QVuG.-6dBr?L=g.k]h'F9!&i9(HLU6-uTH]fT5[?s)B(8q2Cf7]MY:b:6Hd=_`RjI<nkQBbsE
%Wk<V+l:^)m:DE4U8P@_;lJM/"bN?HiL`U)IEX28EEF]Ajh9p5PUF=rkbaa\1YZf1&F?_>gc,^=CImHp9"TS=aAu4dkF2`WYg^!]o
%;I"n@QXI2<+W-J$/('$W_s_1fasIr?7cU$!q9pg)IrBAJQ>!SA;i97sSC5^6q^r_&"._[4-8_4i0_^V58J_ou30Loe5Dn5ohTN^K
%oBgK`+<`,h"3j?;\.M#PR#V5`G7[B>aJKOIH0B]].,A%M+L+VYC$=t\<Di%C4\/]E$V'tdd,eVlbkqX:n1/3!'c,qT.AQ:95%gPN
%",88L,T$q!PjX:n++adb+Lj9GfjiLQ]chFHQO0sO-pYa/cp`f_7=P=IoN2nUX=RY>FZ\0[b#rrq9t2W^"&25s531-7Smq.OYa6WY
%Yii*[G#@b/8HsMDM_LU5pCaqD1DNLW"mfEi,aKe\((7W58c,[ofViYlbI'qLH:+mocso[i)fK\K5OckQl`M\B%Df!\lMsTl-ICOV
%(2?ag%:[J8LpRuBP,D<fVm%-5.W8>V+.k>:m+&[72\<e\FL2I4_H3<P8ZEj)5]K3?XtgJ']E?<`]jDmljq?!):iKsgAda$WTJ2sr
%In(*JDPG=/&n#98!5:[g$BJ,nbZ$Mhn=*X:#?,Y?+iAP?>Bqg)>!/IRL#b<N?poC[Ktb#%niB1fn!s^G-1*\FmAE[S6'!?/[eIMR
%*p;,6SBcnXY;>k/C25bIL+pu\J>.'D2@53E]TfC+SM&>+Gt8lV;9'2i&\h(sonPM()+R/1iJCkN_E8E/#em4*TQ!2.3FQH-^b1LM
%0Waf_8_mU.OBKOET*RS(ZQtDg;)pj,AAMAI0IX3GdGn@X/3NGW)S4LCkd2A!cf.4+-K,9NB4iU2<FRHFE6,-]<3"u+4m)^r'\_US
%)%MK'%(]rc!%og5***jLc:&sdA2p=/&3pD3r^+B=6*IYpdM-ipX`>uW%7F2h>/3aSWC*>b3l6o/!`s3e"m[M6F^()7HCuC(AArGX
%^Z@5W$];,BWo@CEWXF>o<*PJ+-o*>=eb959W7YX'*C5prUUP")\:qJ,^HX@44g't1PW&/'8T[M",b&cYT83[/.UU4RG3F`ifD2M7
%L+%^MfN>tSZU7=@rp<j/a$pL3liadLXGGV-(,X)0Gd`LpJ*UWt@OU^:r?Pepm/_3U?ao)K.V6YrVuf4E>kJih!f;[!HpaT[6B3Lr
%.X!IcUl$RT)[8!Z^NSgNFP<#<s*l2iUq4i4'SZ`'5a4)A'k'+kS/j"ac5OZ_7iCGp4W*%sK&Fk(H&l9.4UO1_VMZdHZ22O-P'rBc
%;.P@T__pN<Zf#iB,(njDFc#Vm'His%G870U0Rns<n#TD_#W*/Qf0k%X%JoLsGK;%H<C_Gg%l?:M$VDMI+*aIB`F?6HKW5[/\\Dh3
%IqbbFnARg^71^1TQ+%0)N8LTUbm*FQZf![;^l-#_=(d-s1'o+BHPX/sL]ceGZ]ijiG7>$u+O61<6f&pH@0s4-eftl$N>J81D?[9i
%fr5L;*_k'gr]4LkTU5?Ga2Pb5&H-RM$SEN!^\e'`F0/Ep!W1iGk7+uGkVOCS11U/A5PM"^*IqjVes!HiB*G9[*XWebn(kX2YsC,$
%kG-.mg05X,ni5K<C8WHF3Nu*MY]KIT$*2*DoZjG0isHJroEH>=o/**4f,+)k^()SV2[C9%#Sbp_/`s,,Q1%HZ+V*8c2O"Bi0gD6u
%0hK*_e]EL,:u:C4iJbFB7$9a9,YN%a>te9D-i.Zj/Vu"d#qV;L#q#\gNU["LWM<jD-IE`h0$rEA#U,$P89n>CL:=BmQ7%Tl>7dQr
%qn/["#4-lQ7o,41:ucmbM@uK@22=B4oO:-$etD.Z:dE>n/;'B`nUo05:0?EYo`u$Vml/\e]5>L`UV2Npr'p(-74eTnE`+1pl*d<#
%'_sr3.=l4[Q2Cn$V'n0sSnq8lU<HHJhZLg+AQfEN(RCEf`^YNERe"]**=dQM#i`=MWMctq!bENdgaoOb,pWT7Y167F.*fPjJ!@eb
%!ZLLOLQdR\XhmbjqeH;^<DC$\&c*MVb&m=n)JX8s@X8j2!=R_+mqo"^4<]hb1RddPAG*\kq<bom0e\ZG6^KgKVh1\AOdmMkIlS4@
%g(0OJj#+Xe*h5]WO2[uk7g9O9fB%+1;[$g`EU%@8U1*p7IFI-kYbCN4C-.;KQE"l$ecq=f=\^3PiXOHM2t279]>Eh;Fn:sGB=W+;
%=Zj6N=F#.DR]G7]cQZ>_LspM4UoB=32A.4cpp1ETIhYm^Z;d^b@mP/]n'ffAKWiD$c28D4AGld5jp'B?LOfsgG7okIF:re<5BBc@
%_X7D,//La^"/T]>$^<M!fa$oUSRlcN=HLM^U+BPa8^$$ifjf+j!c+q@,T(Rd0n^<,l9iiPllWD3d/N!a`a.5>[hj^bi7YTmIM>mS
%-j6J2K@$qH-#0E2mXDK$S4TMhI@rQDQu*6">,WOq>07n5TJ2tD0I?1u6gi0YYYNoGJWg&H_`R$]%d76PSM>O9WmK^Y<rlf\*kk;c
%:YB14i`:lrPKlRkUVn%4r2@/]f.kYb;bW[D^*aC(=EqN1%ol']@5;(3'DnDg9qRi.f`0H"43M`c6,_[Pfi.Qnq":R!p)H7PSol`7
%!FcD>jY3Orob8B9L%VHV=_`@E''FgPO:Q.'-1WgSk:45Cf^W'sY[Gd\00J3rQbL#*r=fRef6r>0#I?Q%TSd-W("(=\4N[:H5W&8o
%JlB<f6(CR_I5iiGQ.@J'70lXb0_%%?cE3_[kuuA[E+5c<KVD"=0I!#HNtI/\qOGo*B;1Ps[i[LCEas/a]VD:=\>R$lDFX>HE.^eX
%Q&3"AD@*NjPC]QaplS'HKe_Are?':&1j@^Ka$$rUd:@@[rk`83jjjDMMo_0e4$?B!LXE*g$]AE?3Hg:0NU+=2<l9'0EJ'c6Y#?Mh
%&AM*l#+?Z>LT6-EK+!sV!I`$!bCtiD@3eN],fG-/ni$5C9sQGB4OB?U<2K$#CisK$1!,T+13U,_65t-*DO?:?*n!,6O/*O,KF^Po
%fQUGj/u-+K_fmA#a6Ik8?9O_+`nM#4,g;>32JDE#U2,:c\M]B@q0kB=@E"oRZEOOl('fQ(,'BW<"4B(Y0nDL7*d/"fdJ<$H,Z>33
%aC/MZQJ50d5/(5<;.>];3uuM^L4^D$)hRLS=d'7"6Hg1mX-m1K8ot/HZtsAff2:>>s'^&l;/CKCj@jQ&nn?"KMVOsb&%?Wc];G9J
%;f[$KK8VE(hDuZCFdPN[k>@)aB*`50fd8`&[c:+8b>?^`juZ[V/^-8b'9IHj9,%fTfhGfS"V!k6*8*6g)@IU8,SrLlm7i$s:"nk)
%7ktP?Nq2rf^LdN&7oPO6\Fm5:&=V<q86=6Un5OORM*]mi7M[<(\*SIAJlc']MY%4s<Jh+kT+QstXuPDi$;jHU/6/;4:oIdZYl/-h
%1(bjC3Lm<6B&ki7`flnh`"S5B.cb.r31d@1?iW$8$uPl"6d]TQ+YO[/^-65+Z3T;YV]c1hX#T*YUm'H^$EiS:$A5p$=r%VN[Q#.<
%!/ZC8oAZ@;D5;FZTH%@A1QLtV`n\m^,U:e*KOmQRnjbd`('run_k5,S,QSSD%cWt)NVFqfjH/Dr/g6<!%2\QDS]mbGjr*Sqlj*"0
%F&n^g-E0&TS"sup6(0bNRG\=i84;5CW0g5;RpQdYW0o@d7MAAWJKfo;edp4="3Ftt"WVR,#(cDlFN$iAJ>=%pL1'/6j.!;+%1j+P
%ie%t=`\\OYO%+*tCPA)qX@jrIJ7U8Q%mY3\U*,s7TTDJ-_bseH=\99p>-]7d^gjRAQIOuOC(?<Y(Tl"[7Q<1FA03/q.<lF>L);&S
%K.Y8u$ot+YM8,uei&OLe-76R"E>76^V^Sp"cfN!lW*"#94i2LQ9IVh2U-,;a2%H*(cFMS&=X2=ah,`G?`Xa5$>pIWVcLE3;n:X&%
%Pd/OOo3$JD0rot.)d;J,;/?.=_=LXsVlu`P,/-bnk)#goR"QFnAJlgnV%?6.Aj\XU+c<i*O=l"9RFBAiF[rdu[Vka:E.YCEoDgTe
%Ytlh^6',g+&:TdF-S>6u?:un_f#d=4BuB[beeuNe6&4qsR7jGACh2?WQ^h<:GYZ>XljUcK1.n.pSVXJLV_.ZQ[F?l\#m$"("d]Hn
%2>KUR$OqSNO%U*CEuSs@QcTpQ%o001B@.8bTh?C'/'XC!NB#P5(8cOK:<efnc?[$ZD6s%[NF>Z,0fS$AJt5EFiQ)q(Pn]GL4M[!J
%CW2Vq]er8ZciL1-[reTSX3F[Jkl;fKi+j.LPPN/e@cGH1.X!l_\7oO,i<OuimKMg,]]]X+B$e^&rq-!4eq_d"%QX;tpi.]F96r\"
%q!e5u,F&_P$!F^aM04ruTr/aM?r_&/_1R9gS2;((jM>e)NXYV9&=!3'\fm,I#>R($p,H<Ool,j7:n:P:''Wq]!(*^pn#E&B,g%tR
%ARNT@F#YQb@Mt(VUYA+I=[N)bIlmOn'jHtL]6QdD_jT".Mf92V%])N#":<LA'90qAlV\?DX2M-7L&PD`ehV<Ua;t"!H?.rFgu7^W
%\NQ5n(TDK+nS"Vl3*=,rIkk(Ve+L<N=Sdq2?'X,LU775s$J>iO).',fIIHRPfj-.,ms6W_0ee)+cp2E#5W^`l_bIUQC4q<FR?VH^
%VtsE@HbY+$S9[&sKAr&n[]8):1nkOd82gV3nR5\_#i)]u,)S@UCfW07qjAin;uI1aN=(H,hO6-F/$g\<K-7X1f7:E&Eq2nkCCGo:
%>7u(u%6&"MZt-jSYJ^1^dSfHc4%q,e8YD6759b'H)uI67f)f_m`Fj7A73h"Dr'@M8r%PQ;I*6DM;t4F0Fb=R)G$sNUkd-0:&96(F
%n,65$+J%ROb-<UoWk?>803q5e!A+aS6ub'o?KVSV1"j4TPX2V.)iCFZ7l)qe*h"ON27]Q6neRmoWrp@hm)Eh/%@I?8pot"\KhNk+
%\B@`oKYOs)gZZNck+MiZ1qS=XI1/d=<2r?K#bZ_191mB>gaI^6C5dI7F6"d7"t>COImrsh:Te_!=kqc7$KlCRFg2@ep*a>rjQu3j
%Zuj.o;l%J/L8ruZr7dS/VGeb7'STZE!'n/<PhVODN%m)X:rTfG^!MiEm1tIqR<JEh@jM/]L:m30%V*/TQTC]H?=396pP!c]B#DGp
%`c5+;E![3+D;A!!GC1j$5igWH.''<TUFVc_l-.b5C)QD1^qum%>r5sqj^Ot^YD-#uKS@Mh\D4>E>r=sfKH%1`];S9L@/>;OaWGj+
%E#=3h7C"8^Of,:>YV.[=!@W@OOEB>c:=ib@.Gj:TbR(17K<dN^?a]867qj0j\qY+b[-9b<G8)k6[FrOI=/+O<f(46-?J8J*%/&SG
%fL"Q<7Q8S*'('Z/3bQ%!=@IMhPsUN?JB4BP%Z^!kd\@>Q"iSAg\4dAMjrq?,)J<"_M0m,BR+Vi*4[c[9J79j;kW(5n*5XIBXnXL4
%pQB:Ql[C)Md).qml1<(O<u"EoND7mkgllUkqPKR-]J#7hTYMXN%sQ3]^i]a%'@0_CCEViLQ@0Kckd6"ile@cWS>*DFZr=V$$c5ns
%7mQimVBslJ8jN?,6/4&3A2Q>qLb#4`mHQQFBXQm&YE'Xe;!&ZW!KuC391sn4_AiHdUIE1h:R.S7o7k+LNV)ligW@=s",5A4]PSrt
%5V>+Z`g'S*"utirEhoK['[02WRk/fri)g0C!<[Q6hnjufr!OfTD?iJHI)Y<$W,LMPdOAmR*I*g*.No`9'OiV,K*Y23hm.1V:u6"*
%!Bl8HF#ef[nU7Wk`jH,qAdB)a-WN4i?0\Nn@s$7M+kL:Y%bVWk\(2e/q4U!PHm</69CZ6-"_mfk[7V"%LR1JDb(b)/j1!i2KL-t(
%nts(opM#2q?'QHb-(>,,98o<;5JXC^IS(`VPFW*nSPqiN.3>Y/fM/=t5k1iP$1CtgO+>1,Nh2BP\Xe3*@hCIiP2@TZo86?ahL?[#
%j(fD\P6Mh"PtGmiZM_K--$0IarC(*>CdrC>2U)lj(Eg@7<l_k%ZO6LWaoEl"$Zg,B.?'JTT%FQ;4m>ISm/HSS2-16O.ioE65GKJC
%A%$&XKDGXqm"_j+B.)iIg[%ibod+WFV(uYlcsY(Wq$(KC55kPC+<T\2W3]6,/EPiG[6s%9+Du'K*0A.t>=fgR<3[E:$aF3r'>B,m
%#Ba^6XJ2Pq2_EcL37.rmL-(,Id!l:^l'jCQYk,VRp$k<R]3rl=1=D!J,q2@#^'-.IE4RRDeKmlN:f(_3>!pRU_If[todOoY1KL1#
%`1%Ri+H8UYJ_*Shc(4:,aj(eg-F3afF[B7IOTO]eNYB*7Y0d5)U`mdiL9D0FTjkf>&2i@_>UL:ZbJP#EkXI't4<9U,7/2YD8B(]G
%&h'3@G$U[^F"C/onZ,T3V]32]*KD=]X@j?8-3,5d<Zbq=UQ#Sl"hq3O1P*p]#mNR>0Ii]$"I];Yn41g/*Rp9a:4Q`kpH(OVLO6$Y
%9Ibu\b4eUY.3o+rBq-;X@]BHs<='g0n=Tm%SG$u=Bi7i].;d]nW^tYJV[QM5pF[C7LssSa#h_]:G^kPXmP)DZ0'tip[rd*gn.b:;
%+H!]r[731]OK';/QsNW<9J#+@L8287=r@]C0=in!37sV'WLIfHcO9Lo:a7?34+qRJ'3)+730\`K(h9u4Jk)poTS(5g$CB?^f/e'u
%M`TocJ1k-9.iE?cI"-SPbo0Fb&%l4&GuE1E#9"*u4qNnSXUt?.88!X(0@YC3BKcis_cA:O!<\o:^d'&&XY%V:oM[Kmg*2X3Q6s3b
%DC(8j*^K+K^P.TP<=I2oS>^rpPr#Us`hXE;oo%\L>.i94jR4K2",R%%8(GmA<9cAf=;8K`WoXNk6n8up9'8J'4oJ;OKg[lfiZ&>P
%<*$>U*/I!49F\#n/EoIod`YY\N9<#N!1\)lq(beRS2Bc;Pi,c1VOC<%i\!>YiO`)$9J8mQjO$7q4Wl&BU0i[m0;@$.b8,]hA-Rc_
%OYg#JLO-T7TqfsiCJFO4M&;F\=877((<T*+N*XDEOG")qkIKI\,MOet1@lIX;MTK%q0Jnc(@"nQ$T'F&CP9B52J8["HYf,;Sgqhi
%d&a,E@GYIB>:i,V?!DS&=cO6-fTP:i]t:/).+86VBIW8i.u&Dr>Ub6L;g/tY$ADmuQrgLK%'>B!c9@tcN3UNEVQ_mlq6=P"k5fe-
%<8E)G0)F!Zb_(Nj[F.a)iiYYWS>la,TitV4ph<`sV/7hSBbk<3:/o\?I-^0`2ujHmoBB"B7JgXXD_>>D_7Le'];MX$Gi+]"7KtG(
%lh&^\Hd\I.+Ci5g;`Jo@Oeb'jBjhPDap+e4I^B9R/L[`!!,!DT6sS5VG9Ss"@GWZ)ZEh,">`5C'msq4EWQRdL:`W3(X\9Y\L^/o_
%AX:"K3o)6p=`-Db&'ZaeTKHedX@l\g%k']1AW;sDPVi$F7>"h9?jtsJ^S=7m7E=,Ph<2a5J-4o5*$j%2iXuf'^gIKP%P^[jk!@E0
%)(^jRIEtOiar%9oprg_n5's_B5g&M7\i;Zg1Xp$q5.o9tN&O1_>#r-!-&61:iV,=U1tp0Oi9[bZckOUA]]?;+Wh+="UGD`aV'\g4
%m(idD1/-bck4;ILdiHE=NLNGB+`r>3.W6a+j2oE'>oVpfIcq"KX<]U`:lugO/ua,bRIc/b+H#tKDhc)nL%'gtpGd[tS(B%8BupgX
%Q_T$GIcsu]9+Ud$WM@!8\OUZH6hmM>F-&JAQ=&;8\9s\+K%;o;[9,Ub^IbJ3S\mUP/1M1m4\S)+PZ!(*&dB6$HV&:Knfehebj@7C
%d#G?iWalp0#B+"lA7g8KKP'hA76^!IQ?0^,cndH_JB88hRJ5"<H9/YI$49P`a`\IK#;B#HHXP0c,:M92Micf>'A8p6JEk$>?H.]p
%AQ]*tI%fUgV08hH%pQgjjULh0+$+(SrlP_./nS9J+D4HMPh5q.kHse/ds;FV+6dtDen5d;>Op@sLRS9PDhgHnkSS7a\Y=#LE3ta;
%c0PjX7tAsH`09>JlOXJ::bD!$>!GE,.VW;([")8\02#h%'ObcJ@1c*nm>)%u3eVEqq]$'9nDYL8)n$$\rukef2K#:mNbFVk"1^;R
%S&Z$/ak1<9Ut%;?kJ.Q<*bK!k5BKEP:u$f,?L*`KAqgf7d462.U3=3[]p/HD)Rt:,]<R6?lgM^u+of&DXi&p#^V7OmpdrTFS/\i1
%nWkN<L+RMfY$*0jl,*U^La!"Q\JfdF&[JG4m7%=dpd/]DPT[6f\J6?oM;bAE/&Td`^NV`?'TeoUT0']p.n:k:=\_bgGS#5Daj@2N
%jHOV$dJMEJ269o9EVsNlWAt['1"ED02d3&)\WtgHKXfPa80@;$$B9J=injS1\6'=5AH).(o-WHI$*%dfSJNCWH@Y^^hr(oj<e5Uk
%mAe&j'3Cr&8,K4K>aCIO@_cI7!VU-n&jpToqAn,p8a"<-a<t',Ek6(lkM1o^ig^6)b]uJ*S;.`*c9pDrcCsZkOad6_?/s_h]tAlL
%RKL.U\-q)?H0b1AU-Xm%BUY5MPMEKM\RKGW:2!SFf88Z'TBWi3T87[%Io-c2^'9WL=t#jK-?g0G%cf)>UTU<<o_CR&%)l.78nKUt
%,JXaW[VCYfoQr6'XY"#E]:mLJVYS5QN<n%VdSnsu3lY#>$&6mdKG`)HHbC,rFYP9I'[#kq7:X;pT._<8^o:cI>taG"X=g"WW&$m'
%$JQ<_!AA.R'a(pY3WLVkXO,]&0%d;Lq&9G@aYKoi1"$egSUlrB74rU!9EC:>Vo".Ph;c!,WnjR9N=#b;:M%.7'H4)TOKS+f1)2uN
%d<5?;4iH#2V:;HH,DNH5YC<j3KFo1QqTD1*[8Ao#)fP'>@LiCg-sM_:U,L+fjO;B5f4c7V<>cA@+0p-A\VK'#B4R\PnB4aYd(^CJ
%-0Q43o5&_kN!E*?N372fn6:sk#MjB_Q#e@,PL*1O:fHUnN,OWO)GAbhD]tVK4D`rsQ[krhk`?@HUYktGF9#^WW;\@IB#ghY9;+U3
%(++V4]V-0aZS0-je%PFPFFbKn7dmX=,0>K$I:<(mg.`6O<)@H4VmCJ7A\d\0p`4UokU,2OrAtAX1pa@&]-s'g\)UrFb;l5T0jV[R
%8_!<uiuAphmO3Z`H,"EqT15ohd;pkeR7cj.Se4dN;$fghaf4dT3slL?51oAQW,3C?:Gu8T]g!@`E%$;07j2dgJea;[M,C7.Z,@+X
%V@\k7I)G05MNA3%8)_8lk!VUQkiE2A&JsS&Zk_)^Ic(sc'^OhYO=n(<70P(bKHYCG'Jsu$JNeeU)Prk^4@q$d=]jl`L=AMFmUk5T
%lD7hYA`NqkA+P,@Q#,n3,mn#?bX%S#NM`</mWhCc['\EZkMs^GVZgD1dNQJ)j=mV1_pW30jU@<rW6tYU,8tV;0F]o4`QdsQ^D*!,
%]G28m-:;C,K.Ld,bJ9i_J:LEi2>:(tfP"m/*Ae$\aO^*$h0+Jud!6<Me1G)/Eg9XnH(1e%;4,#-cj,^J4`kih'n;=3NH%UkOq0#O
%;F#4+@[a9sVLK=@"n>!V^6uf&$[TqEVB"XnLTMF3qCZYQ?8)7f2@9q7AGP$"@9(_NFP#gip$8Z0l\D0T?JKmW2,6io2j^F:2$_'M
%RL_,iq)[j*\Vg<<=L3mK1'Hu9a]RNrmmq6B=tD6j<p`QP]nYNHO5h`)2pBjeC,OoqDE0q;m8pn)X/PcqC(-c!:%DNhnP<$oq$*8.
%*#UYs0J1I)>i_qb&VXLg5d5@p=YWDD*M:Z"HW[+]aD-.FqCE2Qa2H'2ZkZo[C0enRnHE[`rnZkW0(#dE[LU*L1?>J[Fj&AWSC2D.
%FA0M+n0+NqDBkK3]qucq8Yi'YC85`(hW.`h/jcT3-$Nl%_/R>)n'\?s0k#"!etJF$dB%c^LV"@/gj<sHJ!dk,hj1d'H>,.1J1Rm,
%mT/OD1Yh1YO;mW'4Z#EF%^-Sf.C;Db5ZE$qE=GjbKbfm7H5Q&n]omJFZtcj&OIBj2ric*jUP1"ObWDI<lo,2oK-a2Yh4&f%`c@;L
%cqe2=mue);qPg:Ontf\A1R^,4*:XP]8.Ep&'AuZ_C_p9QV6]lT-u:)T80IjjYNl]qo.g\Ia5'Finq)=Jepng))uZ!Rs.HUA=bfcN
%@:K3n.)!aV_p`j(R0:5<B.2U36:\H]oN/d;@t"^1.JIIY5;l]aDA.mP3uBg:]3^8k\Xqq<]73?b/nDt->_#/S!VHZbic[9;qQ&F;
%3t>9TYjK?+mRs7Bb*VAN@#P:`#in'^m=l=gP[4]aG-m+`58Ij7mTA^SHm;N&Dl)s8,1</]fLA3()mm'@P.^VJHhl6>#4f.tXo"-5
%INc?/&',$q:t:PKA]0SI_-BoOCl^rm!Ed*@4^3VW,ZM?@Dqls[p#)sQ)M8N$,17.,C8'Ep>fI?ph;L^ec^WIR#jpbBeCkRoZeAp&
%]0RIj9etS#qhK.ATa#?M(SFTC5eV`B\CHSJrq\mijonO$?<po^<)aSlX6:K$!H'sn.<KS3m/L9S."^h.5l`9fbUP"`<h]3'dAD0H
%:`0*eTa"V!3l#`B%GO,%XnT]h]D8lHHir4AJtlb'I:#HWDp4#PB?&B,&S%qYCPHQpTC'2^U&kt-%&gWe'Xi>Wf%'5!J<Ms^*H8K6
%Tt>)"T6Xj8.-kSs)ZuVV[(V.P`fPa+eEbIu)"nJAs)rA_$M=VQ)n:g\h0A7h%0S;I'Pm\GaKj*Qh&^5KBSY@0#uG;25eT=m\CI0N
%D.jDqI>imf^DkGGcKrs\'WMV@[r3(lHh"eY4pjkR;4\O%Ee;UA?agF0E(WME3-[3K[0'<k&!`,W@&CP6-ts.IY0io/#%!=ciJ5Lp
%j#7SY$V73PT\d+RRWm]'UMh@g%u&R%[A-dSf!a=(fUa%h?+`h9N?0S)kJ;'+qUt/"QP>NX@6hM7TeLE`HS=9fmmlZFqs0bXrE@8.
%7`*im6+[2!8Ua>!$H$G\>J,En]&b4A,ZGUWDqH[Y[Jmk+-6Fs1i]Q\8!J7Pp7C*.4E*>%'HV5gh$DL-X>uh9N\Zc_3h6I(&!p5SL
%Z$pAM)N3?HW&LC+^egPFj1W3G!tht-B_`9DGQ3uQ)PA4[#1TI":n!6CU"6Uf6F5:i<o6qT)[TLKeCt`Go,bPgp%oTE]5b<+Tt>++
%E/r:/S0Mdh=t%[Wi_XPQSTi8p&&!Id\.+.<"6p?N`N=$jp\1P/]K8G.5ndr=9CHK29pQA')D:1<V)]YaommnuCmN,@fP'E!:sT`E
%78=`;YXuZkq>h%750(3AqNl]YQQ-f)0j/?3UJ>#P"#9$M&.q`u02uX8R#@apUM_e2]*Nsk2hlXU*E%osL%062;UN$=rcFOC6'q?;
%)\ag[0\R!E!)"$`!;tRj&lurnR3!p6f8&"VM3_`_LEQg$>pq;.Aa.&K+TIY]7Wt!3&kT6=,EIpO=>lO4fJ4r!Q;*6dbYq/Tc/a\<
%X9P)DB\Un;Zgm+?^G,E]*DSA-d\bOo/;rYp-l@QT-m0+8:YN;(qq?X6/"PjIfU(B+F=T>1+brEY?[8eF,["S;cimdD#F-DgP4$:$
%6YqOWqeg@R>XBtSN*pUXO0q(3mM`cSIBK2S\(cW]!u>\0n8@GB13D`^muIr-o^CkA)1!n(S8*kC-.P8Hg#78n?DWUSVNu7O"-MO<
%ZlCe?-)Kus7,D'Am&fkYM#)g"nOk;UZPG=kN%@Mi%6-.#G`;I:C1N[,eo&HIIjqQFM2r5FQn>5+2H"2T8081f5,K83"#2O/+dp*B
%d7#%I+(r"-Ma[uZ-Mlh1=Aee*$ThpKi9/6gJB!eR=J*K#HE*H^ZEj$nEY/]bFX,+V7KNUN*"r^!HS1\4#en4q:h/O`(6Ps6T6@js
%^EDn1Q=2PCWQO'f%ufabDFhs:Sck2@Ekpb%9A-fF=rFR1NLml%^0pA5DH]AX"t+Rc#TSqi'TS0Sq$0F.dMlSGamZ5IdOANSV50`J
%S1^9?rq&&=]<K,H)kQ!s?t9W;.aMi>S:"(/;a7ZK:Q(W+K4&-Gf?0$)MR";fj(:K/QqIXGYWZ!%%N)jC+8YrGgTX;;>e#;E$!UHJ
%"-Yg$#K^(QjW%]".a>.fFKTE!X2l#?D9Z,X;0R[0_?ibP;80dUj?"M`/XNSumU/I#)Gms2ndL*<%G;7uemaamojebnm&LD.HFEI4
%g'Mjfl`cI`^ESR@(NnlfS#foD4!E?_T\eW8!+42XRU=MM(a^6lAi$o\ZC:@r5_ChjYNT.DkWFp7+#@'S/&E]R<2uFP%^=1q4U][A
%hq:A*^DJ,kn)H;/56bWB1!E=5iGK(pLoJqW[2+^BUbY_3ZEk/"iel*9Z9%/i?&*,Fh>)X5,I,gZBTgdHD4Y3UYs#SoFD*]&V=aSr
%_J\*AJaoOB`(9R=6o9.5PC<]g(,R0G;hub?6F*/J(3T6M_YGe*E1Okc`+eN5.Jt!&di)Z+>+M>YW9C$49=@%sI_e9`eAUkn`oN/N
%.5@=+<qlif55.WcCGDBCLb?o8TEA\'ksNL`pLgfm0+>(LJX":.'ZpJAMS>n4%7=kb1*PeEZa1INK4X1`0URl(5<N#oBdl<_8jfWa
%[mMN;(+=$e&mJRnnP*k0\?5Xa8Kk-1-W?H+<87m&<jt\fbj&%a*@/e(e[</VVjY)W^h'?In-g*5QFPgV14*eL<[\bp+F*J>mYJ`T
%^tDJ&FJ1Q;RHMV6_r<RqpIaMFb8Q>:%F:K^lNGc[d[;e-SXn6jTrt<ek(7#3>\bDq/gPMSeWbK42gSHBY%seSf`mhR+^TJPOM%@=
%o#uqt/A"l.C4*QJk=de]=Kr,03IDEe5-M*Cc32;p:J/iL4l%n2l)9uB(,T4MrPFFeqW2%@Bqqf<*u:ZR)=G3Jf,T?0MB'WdLA#qu
%(FVK0-)-I,nL:.Q3b\po:!MY.jk#GCA'7H/s0D;M)\=?f/fAI8mn7)&`Daf![jD<=C=8]U(*=X'>'Jhch<&+]aH"cNTuc4lP_.4J
%V0TlQPN.Dk@;Kne>c$_!';+=jD2BBWSE)SPB]/ZSh<tVsbPh6g;k(*._'IaMZU4L3-J3t0[";p>5fdDNg$Bo/C8mmd>l^X&'O[lk
%+ai%8>;uJa)i5GjK-6!LAh,L`gP8AeTQfNA5J+npI)),1P8&hu>FL%U7A#Ap[=2!G`dr$)nOJ\haD4g'j2Sg,E."D,LU7KNKtkO0
%rD4M#(lV[NiP:<97PH$!q(S7s8]Z#u9N/gG=fCHNW&!M*??.n62NYctldlNa8\kZnYHWn7icedHOk#j7\P"@lcb;Kb_#Mjo1,q>c
%i<P3IaT:l-+ri,"%"0/jKbL$=m-l<>:'hgHSa\GN!-.ia2ZsC90ShGgM&U:GRmLhs9"5D^3qUkT?=oMm6U*)FBc@AdDKIaSQaSsF
%hV74gA6?]$n2(iAo=um$3X/)1Sp$_b\0H*>*ACPp$8.*Jle5/-)iT^uA0@1Kk;cTJ*1)(rJim)ERXsUXo+_Ka]tf.-*k<e3G'(oV
%p6&NK[I/_YBsHf*jUFl7';6VB;1?,SbBT$+aN+*2k2EW:Y1U"G2-ZZ.nYa:aJXA>:0(;icn?faV9is'K!@`6h:\CY++]rJ_/ie$8
%X@Bl!i=&II%Z,u)'(U=#@95SM?`MfF(5pV7&K#u,//Xhf?M8(VVK6EZW7/8obZU?VR&+RY\h`@1/#d'0D^Re:d(F$kSmb0UP^Pc7
%/!OZY?<Eh\$hku6*2aCG%rbkkIs[Ym\5@o/.9R*,L@k*Mb)8&2U5,7Q6?+t<@7Z:k46GisXHE%Nc/cT@il6/t2qV:OMtG:WFo,n%
%-W61-5_Al@5:j_Y)ZUCVhC#)nY$^\kQrI%Li+?`fH+dUQCu`C4l(F00*O68TN>crW"CkW(p7*/$K!H_jQG<]P6!;,m+7j$3/:K+p
%OGU3c;/F\j9-D/pnYPj%%AH5OrW\)_HQH8<Wo.Z5f^`e\9/:HuH>E^=0fbpf)>>/dcJ\5&_jMlYTA)/Z?0(>K_Qo;1c4%*#qi0p-
%8Js6Fe1^dm>F9AbBOPO__Wf)\hAno/a`d$*CS"btPi1^o"Z!X%jlX&"Djq+1M;J>r+d%hRceG/o78dg:gKM.)2!EhaW!9"bO7t:H
%,r'`h'g#PsK^n&od+]%FCGB[#^Dlb<I[LI?p_XB[6m>6JW=\A(V7Y=:YfX]6Q0`QG1Vcu1RM;uL5tWuOh!g`\#,Xke.m_o-"8&m_
%720an[@elg)ap8A@8^(>GQ%&dKn]k1efT\q@(sj]#,IS,]\+1!/A76RbLl</E_.Hc`[BufEn&(m33%b=N`(9VcN[jbRHg:%a3U15
%a>N-SqT&c.I"Kk<9:(\T;/+%rl*nmV;m:D(["aCR)Q4ZZ]CH+\d%P%"81XHGf**hCT;I<A85#fNVQ3Y3h*C99@:N,8=1&F!^#8eh
%6hM5`"XZ%e@*uY#c!iZOe*t+i3a/JsAP>C1PcaKmF#0O$(t0WZl0USJ,An_i3&s?r-a%"qeI>$Xa`Q'lJ;)XtjU:`?=WR#m`E:a^
%nsEu_A5X5@#trF#cECI3c`m)c?5R^<A`=EBXjd8gBFOu0TZ]^C*uAkh'X&N3ETZ]+jeMImKF]pF)Fc2)_7ls%IsV+L9B$7i+'==Q
%rLFhrW#EK=K4k>7[`Qu[)nkE)2p7^,0%@:.`A-iCkR&\;b[H9:F.rk#%80qlY@6%S,<lMR"3u._da7Ma2:1R>M34M=rEqB9s)c[%
%Ton8mPs+":0e!:_8*m\@Z6r..,A9dM1:SWF*SV.G0tU%Y]aqV]=06'OH20W/[eD#`4!^3&iDtNb/`djb8m4ZV%-1XeOs.5!QL/n#
%CD^dBjLHZt!_:'/Qa?+*%MlrJolY;/26qXF@mD;948V'+hn/m#jH)*I_E?9mqMO%k&8@,lV]e0T"Be5U<gI(jNqoQFYp95^aZX(p
%N[4m'Fh?Mfd6mntZ,CMoTWrOXgrQI,mU(_*X:jFeI6XY-Ct&R(Dik$$j[l097d1*Hro!Sb:>CR!3DKa'r8h?^p9DPqPsmZYK<sRW
%@YqOfDfm#]Ak?q'rorjr0(H(,cduurl&47m8pc"bEU@[(Cf+jVP4$&lCVcd2h6S6>cq0d?T2pfQ/b*9WPqQrrELcc1%\lE!,mGo$
%^>Rg@0/.M1^#.`92q^Hh!@K>6QVCb^I(%t6A(/;u3tlj8diP_=7?GO.@;97UZA#%tWKToq[\ISER!T95L5nL#G0@oM*P9oEi761S
%AE_Beh]Go0.4q7[Jr,/.I:(mi/qV%-U4Z\n,@$C4JJp$&?5E5i'cQ=/j%h<O>e(S9OTDfBrI&31de:Np+,_B\kdT7d;sgWZqkq%n
%]?'`\hc:8O>S^Q0*MsAX%C@Zcpau8Un0'[n)A<u/J&@4G9RY[bH5u8qPLUOdG>*E8b8Rj>lEk--aGn0m"2#P`Mqf>!n,)^ePDr!5
%M1m>XJ(^Mk$h8u5-R@drY5?'"%p2sCUc3P@W?W18Kfub6EE9\]0>A9uA(s5%23\/9-o,28p&M:NmNQk1hYVadHVR6)a$`]7Phb@k
%o"p"?_St"FnAJfhU)R.OiOHP6%*j/?hhjO\MuHbh@EVLW:\FM+DE7&mM&X',^>[nn<T<Gl>L.5JK(#DT&h'.2Vt)HH#PE\2kce\a
%f?Eod.m7TcKj'keB&^N45>A#?N(%X.CNlK(iN.uAYt179jGgN^GKf/rCZtb3kiXGd^$jQ/nNY[.0!d;=^f)3<H0/d_6T:S^nn<Vn
%*XKV3YaS4\A)8`Y^@A*tT[Mm7M@A.B]jN`*[nXO[<e3r:2Y4%ga8Fn5c.kP>h,u&<p"K_I_KHHHUc(lqr,me:J]u.g=;>!sV[[BI
%BFpN"k/+La_:3FVGmHr>'oLe6fC%gU_Zsc/=CO-(SQNF4DB-'-m[o5OHAV)RpG$Zb_iK-;`KV!D0]IY^Jh<7s%heIgo)\ThI(gB)
%c5F0am@Ws?"kbOC\M::95KO$q:Ipc</eU1k:3Y3ng)]c.[>++AL469Lhtui:!nMQN@<Q0p#3Z$<2n4c"K<I/CUid<tE1\mf\cbQ]
%kb0^.n3]TS1HI*%(bi!p?S<7$3X;9?X2LUKar@@(8Gd9^ErU0(Af(7!DiMj,Km?2/mJkKLn*?6_D+`Nm).>%1Snh5gPR'ZY#Dh/t
%I@\;,n=[i2lTZq]kJ4-%ABE3-dN.ZV2@[=`1$;eI+%XA8Y2R3PP.9Hg1Sj69:d8AQ?"a$@:6,`^)3_`8JIRm?!IR&hF^R-b(9\"*
%VkO8CS2A>r3C$WfP&N0C`Wh2dEf,LS]E><.@h62>BCT:1%lg"C-M\2!7i.pb=s0p;h<9-i;+Q2D98Z6Pd\h)WO9(!Jm7QuSLE!O'
%Q59@G%O)o#2M7Ufi4)ah=u9S-dP)t[[,1?hHm!2>9RlhtTcbHK:n-*SGbW)ED'n@t6JZtP:F:Dl-%rfonAE-l<5?Mm`*c8^Is$JO
%?Ye:EQPdUNjW"8=+jiT;LR(t,(bd_D+.S0!M!"AW#9SUt`;RcTIo:k5=&MZ1?4J;=,<@;RF39`T5g[#4YEi'b<`u)?I6id@"7Zqt
%.Nk"jXS3[YY`i[EWb8D@2EaF*I+BRmEa'-PNA4dmX%[[SZnP<IB-\g!6V+CYA)u%q1Ck$k]=(GRlNsT#$gKKi#)HMqHAY2!b.rq`
%P]&E(jT\\`]2hF.C+sR[n@JuZ]^o*:\@%aBPV/`?>,NgjYND7".Pm`L"]m;$=ci4&A9iTB.l!)6rN@srd(8dXD)?fV^Iq)B]XpUR
%A_HH2XUm6I<rjml)$F(OQF&aQ^^qVtq?S:3%"3#%hdsEM,3(YHYMRZ8l%g4#AfH5NaH9?\43p<o>\oHDPNs]!U-]m@1%eQFq6\Yh
%Bn1o5]H*E,K<ddO<c'*&c,9J,0.8=]7YE=GL?iHFoE`,?LJSt^V'%])ofC%EpO!A-LL?'T\)K:[lOBdOE#6!pn_W0Ddik.>;aTbh
%E%bB=CE59r55n0]!*0gUA,uhTjb`V!+,P.rAa*_DE*bghPj,;"f-`2br#Heg5++a.k2VJFb>*9+4WI/mNtY[DGupeM8YX'#XLp]1
%d!!S/%_U\_`kMWm8aLKe5Kf(K@(a1-S_m%jPs@bo:\tplO1;@O-ioUW8]<e3490rqo>GgmQmK7/9hCGjjpCu5C>_*u;KXt"[0*rX
%:0Jl8;hM+_Vh5&<.<!nG0i(e!UCd<0Y#>P+ajsiA-l`fOZ4GiJDklg81i=-W=_E9:FWD[>R\jXi72t&Z&5A^9"+]iH(RZ=#RR;%M
%+Qts+4cnSi%bactgZf.kU=GY=iVqfm*?0un5tshprWk7da$^#?`<G)T?J1s3lTLaM(a*CS:'7\]`%qH.+kH5fVh7WE3LQ5$1G^J-
%nO$Vq#r1J+.u\lRFAg'DkA(ub?sQ^4-%_@W>gnq/q!"Kf<%Mf(Vuao9CD[>JghOoG;[Jk$61)'`_q'C+=:uF,V@AV&lW[/W:5<@\
%Mj1Lm<?;WEc7:qeAY:W5`"#^:!sb1DUfHq0_4Xfs:gB@n<MGBLL>j!/]%XceR3#7e],`0fFS`N7p1p?N<+PH@`(fd=h7F\g3XWC+
%h%#VARGqh^Ve+L_S%Y9QkJ#]5QB88QHb7m<d@P]s1H3Q=^2<UJD62?,Y=1#9@CLk.SoVqi[oXqD]FX9oR74O9.6\Fi_^i;T"]N5j
%5QPr;\2@?pWA=cW8ka;7=)XEUb8l9=4$D.-BGjmO.n=O4[9I&$!sVhj4=hWl!deTh?L.(OBi2kjN+a&C+`9@YBh?Ip_@Bn/9%Fcl
%^/U'-D$tu\9%V8?_U[Hcp)_4GV3g4Z%qDkVX\@WiJES/kpMa8N-L>0j@>ik60[n,,rj"]bhUfe2m*]`;jD$QX<-\&6eo2+^f9[jT
%!5Y_6"@`sgYP6'4%E6+3(UPrJZN)6X#J1nA8YmJ'Q-,1VLc3!No!9et--2>j7K3L/rcoLg9]/S'eV%Vl94Ht[M=6a`=Hfhq1YO#h
%Z%Or!fZ))($?7'tV%jO]pW?DRR<,]Z76q2-pF9-_?Jk\=eORnu2?buOOs@k%K5Kb`Z/0(fE="?&ckE'Yj`/8D[#R;-XR'[Xr8F?r
%q^DR$ciU8'U=6n#C_B=P+-F?/Z:776)_TOa:@C'qL";lP2YW>+\?(GlnI(=<Yp!?rr>q?I_eO"`9`E(PpSIQY\DZ?NKm+Z]WA0S-
%O;O"?<(<7.\;f&oP"sDf)E]RS(EN+tdZ#V3k[3GP7A=d-PuoBr<AQU[Q#E*&ihf9%:8_*@CW(^)YiNl8-1mEE,[l@O?3`]k1GYFn
%=+=8?9X7$]6K6dmAueYcX_U-BHMb3@pIsR$I*d7?k#;cU23(AX@p'<SB.fEO9Qd@fnQ7m2A;k'pL/rU?Ak*TsF@V)iEaY0pIdN?b
%H0,/5o"cPIJ]-8Gh71"+B*RZN.AAI0k?u<-`=,0Pm;b?3q5Kt.WGSan)Pb>a6MO$NM(.'DN!'[,FWiHL3kaDFD48_4W=77NTT\#k
%mLa0(W(CMuY3TDNfkh(`kM<F7<O8(!DcboA2RW9.eGobmTc@hiWLoLSSI3'bph^`!2GI2Xi#Z3hbpI"bW```$\_c5r.>Rj.!<E*a
%2m?NS]+9.**Z!\HdG(gp$5@aidpZ#/X=@G_o!JTb*uAPAb36-&?9$ZN=9;%r9n&&>SCXGi5oIqPgerNeQ^&d$)pe+gA%YUnUQ+fr
%oD5.:OTRXka!)N&?ti3$;6H^4GLoh"R3IG@o.=-d4d2p1eTK0u3F;(riW\1Bbe_3\?*/h?C[eI8O72>4N(;JT0`B:`Pe/7F_D;^#
%6sUiZ$-N;6:&gtDAM7CA#i)"@I%>Zp;VsH!UHJK'K<nE4%V`P"j/3=bV6"krCK:0BTTV`i&\^[n\7tb+-'\/,ZbJ8\/U%h<DWi$,
%PN0,o,39HV?CmHR<N6qdHPDD=Hj+Z+K*rerj\\2%%(O)K&b[_a&SGEe-<i)ZY3s"P8=i):U_MBS"(b7DT;p5X$&g?F,h=hU-n>lE
%VmlG0K)XaP_Q6<D*2(3$ZIcQDc=Jp"nE?C;"lW:4Xrr*"Fl'*>6(np3:4SCT2e>@Wc*qW'5EL%7$X-8Mn*e`"5Ls<WZ*ms,`58G#
%ae%%2:?#!EK8'p/X$lOBO?*Q1:o.L^T._Vk=dp+O<@K3/iJOTdZafpQ6;#8Z!?Z05jq::DQ7A[*<I,GJ)#1tk4ZpgeG7]p%1b-bP
%g:*t+Jq`9?P"J`P^f\ji*lb\j8WI5jCi5PO.a`ueT$u.g@?_W/M/J4#K0SX(\V(PlEk#f-k]9t2,$DFL_eJWSe8qPP4r,&\_(_e[
%B.u%nhTYu;P@7loki^t_a4gS;I<q?GX$Vqki0?1)*[pBHj<YjjgmmaEAq?%'K+"=hZSt`CD@k]P*>p8"rlV`]O5-rDP&"A([;;Uf
%MLC!tmRSn$UN*bq_4bl)=h\"?]5B&VW<pq+KUrof_"9J(3;BX\l2:(ugP:d94GJ\b1l?7<^;GsUBFt`.8J`Y"f(tCTS4KHRGOlF'
%=\rK[7D^'>Fp$a3K!u=u19Q"<lGBO8R<"O=k,$[#l-_g`l!RDmXXo4ki/*DJ>Er)4Hj_h<?2.5#,KMQ(':E8X<j-EhPO@#pE`47t
%DZ,9m-,"=HfoSgBna0!$ZpStWM5f)O%9>F:jradE0*[/DFP$=fASAfQ%?ei2`)p`N,1qXnE"FPb1hg_R5j3s2_d+3(Y@Y%)";J;5
%_kafqV9bJWGLS\kG::QFk3mj,+\nVSEih7Rdj8orXMNY4bW)NIl$iT+f3#Fs$Q.XYWebR4Zg;LA/OKKgSjfq^-T;hFLjV9?a)<uM
%g3TG*/6AjtG#L<[9tl$:N,L2qZ(Tp9n%F.\c,_@i:$=aD4fRd'Vhses<J.iP`bpVDLTX*%$Ylr^.;gX+%dm$B;^gm&VSS(A7=+Ag
%pk'%abkF_/ANoWT;);np9W(&M!LY\MNO\%/I\mBA1mZnSV<&jf,*`/kF^Mu0la4Wfq[,=b?m2f\k0t=U\'IBZf*$$ZB+/,`fY7_N
%,MbXC(_VL,ECqCU'XZqLI"T=EAT2@g%T,Fb;MVOfIeX,3KJC+dABq:4G$W4\*HIVQ*hpo"$9/+r-gE+I]Cei[Bh,h3i6fd#L>SkC
%F'$VlJ4cc`+=+W'bVh'-\%4?Ajt$bk3ejj.N)1<]q"(^tk!U!$9>#`;n'a],Ikth'gk15>)D%_>HZ1g!!/_\\#7%uLnE]JXd:h\j
%PCn."^^Z:&D3bFI5.,tI`s0F:f]UF&8AC*m-XihV4,TQLb)OJMb#7kj\MaI"8V4c7VBLsomP<oBK+tp+<H6%rIRfZ>E/[)*Eh@F!
%(j+5Y&'[>tI9aZf6if&?]3iREH6t)drA'I*5\_D8b<S5EbJ>h6A<4kOCQ9bF-m?1^$,3/fEcaEPnWX%/nH;RJ']b9%BW7g,i-9i)
%)0/8i)1`&l[CP>>HP_1P$H+%j?LS,Udk=kPr9?H[eq_k/_W[s'LQ2[:6"Qid%,Fm[(q^(7og9)mO$l6gDM092$F7s?Qo\OI/\1ab
%H@f]k8W\uDdn-=+9RRJS%R,\#QB'j_3\2XUdj+NP-ck>4J]Jt`bEJJ<.5J9P[u*Lt2%.$KT6Cj7GO8g26hsE*L_^R_17-KGl;=:X
%9WpUW+K!\<R"9Km+sNL/:$;X#m9_Wag8es.Elk@=`bXe8Gc@(EX!P)#drp$Z@s/XE7t;lU%+C$j><=TqKq?tm[$bL%bP`)Kfp9hI
%ELlmE(&&ib,ni?&V_>(r%[1sQ1us4KVY#aF<U]m7>.(T8Qq3^uHR,70;*[IKik.A[oPshk/"Bnu%_^)Y9WG&a6dXselaMc+OOn:9
%>`LSCi;"T3LMMGjJmGQI0,`$:Jbt57F'dXKJ)_I+Q&NbTDdNO#<7dBg/F('f?.7`g`huoLa@j6,VP)\YX35t"9&!0Kb;H$`VSD7M
%'SdJTAo^u=a@kARf"CZ;[GMA'Fmo"DDYDGmlLIHTB3.J&/>.%[>:ANO8P"cb?3eu9&7j="^7,.ob$Q!CKBN@on#k4RJ#JA5if.`*
%TGJB;?#)^=H+Pp%_g>bjfFR]IhuE:4rTW5<a84]mjfe^_o9]LSlYdje(\"@&r6&Grr@bqanj!0+YJ:&-5Q0^4^\mE$5CWFo?iTh\
%?iKT]s1\L)j"J1GqY,L;mC-GPr;D-CmJd1&8*bdlrTR\gdoGT2"%?+q[K~>
%AI9_PrivateDataEnd
