%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: plata_3.eps
%%Creator: Adobe Illustrator(R) 19.1
%%For: user
%%CreationDate: 5/12/2016
%%BoundingBox: 0 0 1201 1200
%%HiResBoundingBox: 0 0 1200.0025 1200
%%CropBox: 0 0 1200.0025 1200
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.1.0 x29 R agm 4.7731 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=100 RasterRes=1 GradRes=1 Text=1 Stroke=0 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c067 79.157747, 2015/03/30-23:40:42        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
            xmlns:photoshop="http://ns.adobe.com/photoshop/1.0/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">abstract vector background with high tech circuit board Vector Illustration</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:creator>
            <rdf:Seq>
               <rdf:li>Iryna</rdf:li>
            </rdf:Seq>
         </dc:creator>
         <dc:description>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">abstract vector background with high tech circuit board Vector Illustration</rdf:li>
            </rdf:Alt>
         </dc:description>
         <dc:subject>
            <rdf:Bag>
               <rdf:li>circuit</rdf:li>
               <rdf:li>vector</rdf:li>
               <rdf:li>backgrounds</rdf:li>
               <rdf:li>tech</rdf:li>
               <rdf:li>processor</rdf:li>
               <rdf:li>abstract</rdf:li>
               <rdf:li>abstraction</rdf:li>
               <rdf:li>chip</rdf:li>
               <rdf:li>card</rdf:li>
               <rdf:li>design</rdf:li>
               <rdf:li>electrical equipment</rdf:li>
               <rdf:li>integrated</rdf:li>
               <rdf:li>technical</rdf:li>
               <rdf:li>computer part</rdf:li>
               <rdf:li>hardware</rdf:li>
               <rdf:li>engineering</rdf:li>
               <rdf:li>line</rdf:li>
               <rdf:li>cyberspace</rdf:li>
               <rdf:li>computer equipment</rdf:li>
               <rdf:li>graphic</rdf:li>
               <rdf:li>electronics industry</rdf:li>
               <rdf:li>digital</rdf:li>
               <rdf:li>technology</rdf:li>
               <rdf:li>computer</rdf:li>
               <rdf:li>circuit board</rdf:li>
               <rdf:li>illustration</rdf:li>
               <rdf:li>creativity</rdf:li>
               <rdf:li>connection</rdf:li>
               <rdf:li>computing</rdf:li>
               <rdf:li>backdrop</rdf:li>
               <rdf:li>science</rdf:li>
               <rdf:li>cover</rdf:li>
               <rdf:li>internal</rdf:li>
               <rdf:li>connect</rdf:li>
               <rdf:li>art</rdf:li>
               <rdf:li>industry</rdf:li>
               <rdf:li>conceptual</rdf:li>
               <rdf:li>construction</rdf:li>
               <rdf:li>textured</rdf:li>
               <rdf:li>computer chip</rdf:li>
               <rdf:li>mother board</rdf:li>
               <rdf:li>motherboard</rdf:li>
               <rdf:li>black</rdf:li>
               <rdf:li>blue</rdf:li>
            </rdf:Bag>
         </dc:subject>
         <xmp:MetadataDate>2016-05-12T13:10:28+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2016-05-12T13:10:28+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2016-05-12T13:10:28+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A8qYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FVW2trm5mWC2ieed9kijUu7ECuyrUnDGJJoc2E8kYDikQAOpVL3TdRsHVL61mtXcVRZ42jJA&#xA;7gMBXJTxyjzBDHFnx5BcJCXuNobINrsVdirsVdirsVdirsVdirsVbIIpUUruMVaxV2KuxV2KuxVU&#xA;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&#xA;sVdirsVdirsVdirsVdirsVdirsVf/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:6c4a6ad9-6713-bf47-b7a8-35346e7f2436</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:6c4a6ad9-6713-bf47-b7a8-35346e7f2436</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:7f068cda-bd3f-4c0b-9e50-ca5102cb43ba</stRef:instanceID>
            <stRef:documentID>xmp.did:F7F2B7FBCDBDE511B2BBC0EB12123494</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F07763D45588E411BF89F345A28D8C9F</stEvt:instanceID>
                  <stEvt:when>2014-12-20T17:10:37+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:29845C695A88E411BF89F345A28D8C9F</stEvt:instanceID>
                  <stEvt:when>2014-12-20T17:19:01+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:2E845C695A88E411BF89F345A28D8C9F</stEvt:instanceID>
                  <stEvt:when>2014-12-20T17:33:07+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4365C60ACE89E4119A65C8F5B8A1FEA0</stEvt:instanceID>
                  <stEvt:when>2014-12-22T13:34:24+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0B5A99264D6BE51194FFADFDE0B012D7</stEvt:instanceID>
                  <stEvt:when>2015-10-05T13:38+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F7F2B7FBCDBDE511B2BBC0EB12123494</stEvt:instanceID>
                  <stEvt:when>2016-01-18T14:33:09+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:56E8F119F2BDE5119314DC75DE111CE2</stEvt:instanceID>
                  <stEvt:when>2016-01-18T16:45:22+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Bridge CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/metadata</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:B990E609F8BDE5119314DC75DE111CE2</stEvt:instanceID>
                  <stEvt:when>2016-01-18T17:27:52+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Bridge CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/metadata</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:6c4a6ad9-6713-bf47-b7a8-35346e7f2436</stEvt:instanceID>
                  <stEvt:when>2016-05-12T13:10:28+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>1200.000000</stDim:w>
            <stDim:h>1200.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=0 B=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
         <photoshop:Headline>abstract vector background with high tech circuit board</photoshop:Headline>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1200 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1200 li
1200 1200 li
1200 0 li
cp
clp
1200 1200 mo
0 1200 li
0 0 li
1200 0 li
1200 1200 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
0 0 0 rgb
f
238.641 1041.1 mo
239.04 1039.23 240.874 1038.04 242.743 1038.44 cv
244.61 1038.84 245.804 1040.67 245.404 1042.54 cv
245.009 1044.41 243.171 1045.6 241.304 1045.2 cv
239.436 1044.81 238.243 1042.97 238.641 1041.1 cv
cp
115.481 958.56 mo
115.481 1041.82 li
136.807 1063.43 li
136.807 1081.28 li
159.69 1105.37 li
182.536 1105.37 li
197.462 1090.37 li
198.955 1088.67 li
222.551 1088.95 li
231.604 1079.25 li
231.604 1053.87 li
237.378 1047.31 li
238.804 1047.65 240.667 1047.66 242.203 1047.64 cv
245.938 1047.6 249.45 1046.08 250.228 1042.43 cv
251.007 1038.78 248.673 1035.18 245.02 1034.41 cv
241.366 1033.63 238.901 1036.4 236.995 1039.62 cv
236.221 1040.92 235.265 1043.01 235.141 1044.62 cv
228.145 1052.56 li
228.145 1077.89 li
221.064 1085.48 li
197.406 1085.19 li
194.936 1088.01 li
181.101 1101.91 li
161.176 1101.91 li
140.264 1079.9 li
140.264 1062.01 li
118.94 1040.4 li
118.94 959.993 li
183.04 895.958 li
183.548 895.448 li
183.546 894.729 li
183.546 894.53 183.486 874.762 183.546 866.796 cv
183.563 864.604 184.079 863.043 185.079 862.16 cv
186.257 861.12 187.856 861.29 187.856 861.292 cv
210.858 861.31 li
214.597 861.31 217.444 860.253 219.316 858.165 cv
221.897 855.288 221.528 851.565 221.511 851.409 cv
218.071 851.769 li
218.075 851.792 218.276 854.171 216.721 855.88 cv
215.529 857.188 213.558 857.852 210.858 857.852 cv
188.192 857.852 li
187.519 857.784 184.978 857.679 182.847 859.519 cv
181.041 861.079 180.114 863.518 180.089 866.769 cv
180.034 873.888 180.077 890.376 180.087 894.019 cv
115.481 958.56 li
cp
0 .862745 1 rgb
f
170.691 1084.66 mo
169.368 1086.03 167.178 1086.07 165.804 1084.74 cv
164.429 1083.42 164.39 1081.23 165.718 1079.85 cv
167.045 1078.48 169.232 1078.44 170.607 1079.77 cv
171.981 1081.1 172.019 1083.28 170.691 1084.66 cv
cp
128.161 1038.3 mo
147.069 1056.09 li
162.573 1056.09 li
167.061 1060.82 li
167.061 1074.71 li
165.657 1075.58 164.278 1077.81 163.565 1079.32 cv
161.967 1082.7 161.044 1086.29 163.731 1088.89 cv
166.42 1091.48 170.702 1091.41 173.298 1088.72 cv
175.894 1086.03 175.184 1082.27 173.128 1079.15 cv
172.38 1078.01 171.472 1076.67 170.519 1075.69 cv
170.519 1059.44 li
164.056 1052.64 li
148.438 1052.64 li
131.62 1036.8 li
131.62 971.234 li
252.13 851.297 li
249.692 848.846 li
128.161 969.798 li
128.161 1038.3 li
cp
f
153.018 1033.23 mo
154.899 1032.89 156.691 1034.15 157.022 1036.03 cv
157.353 1037.91 156.098 1039.7 154.218 1040.04 cv
152.337 1040.37 150.544 1039.11 150.212 1037.23 cv
149.882 1035.35 151.136 1033.56 153.018 1033.23 cv
cp
138.245 969.796 mo
138.245 1023.95 li
146.882 1032.85 li
146.608 1034.49 147.667 1037.11 148.515 1038.66 cv
150.309 1041.94 152.674 1044.8 156.351 1044.14 cv
160.031 1043.5 162.487 1039.99 161.839 1036.31 cv
161.188 1032.63 157.733 1031 154.001 1030.82 cv
152.682 1030.76 151.124 1030.71 149.798 1030.89 cv
141.702 1022.55 li
141.702 971.234 li
260.775 852.82 li
258.337 850.369 li
138.755 969.29 li
138.245 969.796 li
cp
f
156.904 976.181 mo
158.241 977.546 158.22 979.733 156.856 981.071 cv
155.491 982.408 153.302 982.385 151.966 981.019 cv
150.63 979.656 150.65 977.466 152.015 976.13 cv
153.378 974.794 155.569 974.817 156.904 976.181 cv
cp
152.653 971.661 mo
151.527 972.698 150.483 974.345 149.878 975.536 cv
148.189 978.868 147.167 982.433 149.78 985.102 cv
152.394 987.771 156.678 987.817 159.346 985.202 cv
162.014 982.589 161.41 978.81 159.445 975.635 cv
158.518 974.138 157.337 972.288 156.111 971.328 cv
156.111 965.471 li
265.455 856.697 li
316.171 856.697 li
321.576 851.294 li
319.13 848.849 li
314.74 853.239 li
264.027 853.239 li
152.653 964.034 li
152.653 971.661 li
cp
f
153.169 1011 mo
151.806 1012.34 149.618 1012.32 148.28 1010.95 cv
146.942 1009.59 146.967 1007.4 148.33 1006.06 cv
149.694 1004.72 151.883 1004.75 153.221 1006.11 cv
154.556 1007.48 154.534 1009.66 153.169 1011 cv
cp
266.037 859.58 mo
167.924 958.567 li
167.924 984.92 li
150.368 1000.7 li
148.77 1001.2 147.046 1003.79 146.194 1005.47 cv
144.502 1008.8 143.479 1012.36 146.093 1015.03 cv
148.71 1017.7 152.991 1017.75 155.662 1015.13 cv
158.329 1012.52 157.726 1008.74 155.76 1005.57 cv
155.135 1004.56 154.395 1003.39 153.606 1002.44 cv
171.382 986.464 li
171.382 959.99 li
267.48 863.038 li
319.944 863.038 li
331.117 851.261 li
328.608 848.88 li
318.458 859.58 li
266.037 859.58 li
cp
f
185.726 972.416 mo
187.062 973.78 187.042 975.97 185.677 977.306 cv
184.313 978.642 182.123 978.619 180.788 977.255 cv
179.45 975.89 179.475 973.7 180.837 972.364 cv
182.2 971.028 184.391 971.052 185.726 972.416 cv
cp
269.502 865.341 mo
182.264 952.29 li
181.755 952.798 li
181.755 967.636 li
181.774 967.636 li
180.536 968.637 179.358 970.475 178.7 971.771 cv
177.01 975.102 175.985 978.667 178.601 981.338 cv
181.214 984.007 185.497 984.052 188.167 981.435 cv
190.835 978.821 190.232 975.046 188.267 971.869 cv
187.362 970.411 186.218 968.614 185.027 967.636 cv
185.212 967.636 li
185.212 954.233 li
270.931 868.8 li
321.061 868.8 li
338.853 851.304 li
336.43 848.839 li
319.646 865.341 li
269.502 865.341 li
cp
f
183.848 1031.51 mo
185.729 1031.18 187.52 1032.43 187.853 1034.31 cv
188.186 1036.19 186.931 1037.99 185.05 1038.32 cv
183.168 1038.65 181.376 1037.39 181.044 1035.51 cv
180.712 1033.63 181.966 1031.84 183.848 1031.51 cv
cp
271.061 871.97 mo
198.036 945.599 li
198.036 985.056 li
192.77 991.235 li
173.499 991.235 li
166.771 998.622 li
166.771 1020.24 li
177.976 1030.38 li
177.06 1031.83 178.353 1035.12 179.347 1036.94 cv
181.139 1040.22 183.504 1043.08 187.183 1042.43 cv
190.862 1041.78 193.317 1038.27 192.67 1034.59 cv
192.02 1030.92 188.564 1029.28 184.833 1029.1 cv
183.722 1029.05 182.442 1029.01 181.272 1029.1 cv
181.476 1028.88 li
170.229 1018.7 li
170.229 999.964 li
175.028 994.692 li
194.366 994.692 li
201.493 986.329 li
201.493 947.023 li
272.502 875.427 li
325.39 875.427 li
348.083 852.82 li
345.642 850.369 li
323.962 871.97 li
271.061 871.97 li
cp
f
187.484 1016.22 mo
185.572 1016.22 184.026 1014.67 184.026 1012.76 cv
184.026 1010.85 185.572 1009.3 187.484 1009.3 cv
189.394 1009.3 190.942 1010.85 190.942 1012.76 cv
190.942 1014.67 189.394 1016.22 187.484 1016.22 cv
cp
275.257 877.157 mo
204.519 949.06 li
204.519 995.374 li
191.647 1006.61 li
190.046 1006.4 187.808 1006.9 186.373 1007.38 cv
182.832 1008.58 179.606 1010.41 179.606 1014.14 cv
179.606 1017.88 182.634 1020.91 186.373 1020.91 cv
190.107 1020.91 192.319 1017.79 193.138 1014.14 cv
193.477 1012.63 193.869 1010.78 193.817 1009.31 cv
207.977 996.948 li
207.977 950.477 li
276.704 880.614 li
329.14 880.614 li
356.734 852.813 li
354.279 850.376 li
327.702 877.157 li
275.257 877.157 li
cp
f
217.286 1003.24 mo
218.66 1004.56 218.698 1006.75 217.373 1008.13 cv
216.048 1009.5 213.858 1009.54 212.483 1008.21 cv
211.109 1006.89 211.07 1004.7 212.397 1003.32 cv
213.724 1001.95 215.913 1001.91 217.286 1003.24 cv
cp
277.558 883.784 mo
213.945 948.557 li
213.45 949.063 li
213.45 998.374 li
212.149 999.352 210.909 1001.39 210.245 1002.79 cv
208.645 1006.17 207.724 1009.76 210.411 1012.35 cv
213.101 1014.95 217.382 1014.88 219.978 1012.19 cv
222.573 1009.5 221.864 1005.74 219.81 1002.62 cv
218.985 1001.37 217.967 999.861 216.908 998.871 cv
216.908 950.475 li
279.01 887.243 li
332.315 887.243 li
366.245 852.807 li
363.784 850.382 li
330.867 883.784 li
277.558 883.784 li
cp
f
215.948 1039.24 mo
214.038 1039.24 212.491 1037.69 212.491 1035.78 cv
212.491 1033.87 214.038 1032.33 215.948 1032.33 cv
217.858 1032.33 219.407 1033.87 219.407 1035.78 cv
219.407 1037.69 217.858 1039.24 215.948 1039.24 cv
cp
281.892 889.547 mo
228.437 942.807 li
228.437 1021.08 li
219.669 1029.59 li
218.117 1029.51 216.145 1029.96 214.839 1030.41 cv
211.298 1031.6 208.071 1033.43 208.071 1037.17 cv
208.071 1040.91 211.101 1043.93 214.839 1043.93 cv
218.573 1043.93 220.785 1040.82 221.602 1037.17 cv
221.977 1035.5 222.399 1033.44 222.239 1031.91 cv
231.894 1022.54 li
231.894 944.241 li
283.319 893.005 li
335.769 893.005 li
375.751 852.813 li
373.3 850.376 li
334.33 889.547 li
281.892 889.547 li
cp
f
248.447 973.919 mo
249.782 975.284 249.761 977.472 248.396 978.809 cv
247.032 980.144 244.843 980.122 243.507 978.758 cv
242.169 977.394 242.194 975.204 243.558 973.868 cv
244.921 972.532 247.11 972.555 248.447 973.919 cv
cp
284.477 895.886 mo
243.705 937.246 li
243.705 969.239 li
244.376 969.239 li
243.181 970.258 242.057 972.019 241.42 973.274 cv
239.728 976.606 238.704 980.171 241.319 982.841 cv
243.934 985.51 248.218 985.556 250.888 982.941 cv
253.556 980.325 252.951 976.55 250.985 973.372 cv
249.935 971.677 248.561 969.527 247.163 968.734 cv
247.163 938.664 li
285.921 899.345 li
338.357 899.345 li
384.967 852.817 li
382.525 850.372 li
336.925 895.886 li
284.477 895.886 li
cp
f
492.311 872.412 mo
493.649 873.776 493.628 875.966 492.264 877.302 cv
490.9 878.639 488.709 878.614 487.374 877.253 cv
486.038 875.888 486.061 873.698 487.426 872.361 cv
488.786 871.024 490.978 871.048 492.311 872.412 cv
cp
488.341 867.648 mo
487.11 868.653 485.942 870.477 485.288 871.767 cv
483.597 875.101 482.573 878.665 485.188 881.333 cv
487.801 884.004 492.085 884.048 494.753 881.435 cv
497.421 878.817 496.819 875.044 494.854 871.866 cv
493.996 870.483 492.923 868.8 491.798 867.794 cv
491.798 858.227 li
482.86 850.302 li
480.567 852.888 li
488.341 859.779 li
488.341 867.648 li
cp
f
246.204 1010.25 mo
244.293 1010.25 242.747 1008.7 242.747 1006.79 cv
242.747 1004.88 244.293 1003.33 246.204 1003.33 cv
248.114 1003.33 249.663 1004.88 249.663 1006.79 cv
249.663 1008.7 248.114 1010.25 246.204 1010.25 cv
cp
478.686 886.378 mo
466.87 874.563 li
367.182 874.563 li
338.655 903.089 li
291.133 903.089 li
258.836 934.048 li
258.836 992.575 li
249.811 1000.59 li
248.278 1000.53 246.368 1000.98 245.094 1001.41 cv
241.554 1002.61 238.327 1004.44 238.327 1008.17 cv
238.327 1011.91 241.355 1014.94 245.094 1014.94 cv
248.828 1014.94 251.04 1011.82 251.857 1008.17 cv
252.239 1006.48 252.671 1004.37 252.486 1002.84 cv
262.293 994.128 li
262.293 935.524 li
292.522 906.548 li
340.086 906.548 li
368.612 878.019 li
465.44 878.019 li
477.255 889.835 li
496.888 889.835 li
503.614 882.435 li
503.614 851.595 li
500.155 851.595 li
500.155 881.099 li
495.357 886.378 li
478.686 886.378 li
cp
f
277.862 972.724 mo
279.196 974.088 279.175 976.276 277.811 977.613 cv
276.446 978.95 274.26 978.927 272.921 977.56 cv
271.584 976.198 271.608 974.009 272.971 972.671 cv
274.337 971.336 276.524 971.359 277.862 972.724 cv
cp
476.657 893.58 mo
463.978 881.191 li
370.038 881.191 li
343.527 909.141 li
296.585 909.141 li
273.962 931.765 li
273.962 967.636 li
274.337 967.636 li
272.948 968.517 271.567 970.632 270.834 972.079 cv
269.143 975.409 268.12 978.974 270.734 981.644 cv
273.348 984.313 277.632 984.359 280.304 981.744 cv
282.97 979.131 282.366 975.354 280.401 972.177 cv
279.391 970.545 278.079 968.495 276.735 967.636 cv
277.419 967.636 li
277.419 933.196 li
298.017 912.599 li
345.013 912.599 li
371.523 884.649 li
462.569 884.649 li
475.25 897.038 li
500.584 897.038 li
510.242 887.382 li
510.242 851.595 li
506.784 851.595 li
506.784 885.949 li
499.153 893.58 li
476.657 893.58 li
cp
f
308.98 972.724 mo
310.316 974.088 310.295 976.276 308.931 977.613 cv
307.566 978.95 305.378 978.927 304.041 977.56 cv
302.704 976.198 302.728 974.009 304.091 972.671 cv
305.454 971.336 307.644 971.359 308.98 972.724 cv
cp
473.511 898.767 mo
461.408 886.374 li
372.071 886.668 li
304.508 955.401 li
304.508 967.636 li
305.458 967.636 li
304.068 968.517 302.688 970.632 301.954 972.079 cv
300.263 975.409 299.239 978.974 301.854 981.644 cv
304.467 984.313 308.751 984.359 311.421 981.744 cv
314.089 979.131 313.485 975.354 311.52 972.177 cv
310.51 970.545 309.198 968.495 307.856 967.636 cv
307.964 967.636 li
307.964 956.816 li
373.526 890.118 li
459.956 889.839 li
472.055 902.225 li
502.577 902.225 li
516.007 889.424 li
516.007 851.595 li
512.548 851.595 li
512.548 887.941 li
501.192 898.767 li
473.511 898.767 li
cp
f
340.494 944.556 mo
341.832 945.919 341.808 948.108 340.444 949.444 cv
339.084 950.782 336.892 950.758 335.559 949.394 cv
334.221 948.03 334.242 945.84 335.606 944.505 cv
336.969 943.167 339.162 943.19 340.494 944.556 cv
cp
468.327 905.104 mo
457.089 893.58 li
375.678 893.58 li
335.913 933.786 li
335.913 940.359 li
334.917 941.394 334.015 942.837 333.469 943.911 cv
331.778 947.243 330.755 950.807 333.369 953.477 cv
335.984 956.144 340.269 956.191 342.936 953.577 cv
345.604 950.961 345.003 947.188 343.034 944.009 cv
342.024 942.377 340.712 940.325 339.37 939.467 cv
339.37 935.208 li
377.119 897.038 li
455.632 897.038 li
466.869 908.563 li
506.604 908.563 li
522.058 894.04 li
522.058 851.595 li
518.599 851.595 li
518.599 892.544 li
505.234 905.104 li
468.327 905.104 li
cp
f
398.953 942.826 mo
400.29 944.19 400.27 946.378 398.905 947.716 cv
397.542 949.053 395.35 949.029 394.016 947.665 cv
392.679 946.301 392.701 944.111 394.066 942.775 cv
395.428 941.438 397.619 941.462 398.953 942.826 cv
cp
466.87 910.582 mo
454.763 898.474 li
420.473 898.774 li
394.985 924.737 li
394.985 937.956 li
395.121 937.956 li
393.841 938.932 392.607 940.843 391.929 942.181 cv
390.237 945.515 389.214 949.078 391.828 951.747 cv
394.44 954.417 398.727 954.462 401.394 951.849 cv
404.061 949.231 403.46 945.458 401.495 942.279 cv
400.561 940.773 399.369 938.909 398.136 937.956 cv
398.442 937.956 li
398.442 926.151 li
421.935 902.218 li
453.345 901.944 li
465.44 914.04 li
509.22 914.04 li
527.818 895.747 li
527.818 851.595 li
524.359 851.595 li
524.359 894.298 li
507.805 910.582 li
466.87 910.582 li
cp
f
480.912 928.88 mo
479.561 930.231 477.373 930.231 476.022 928.88 cv
474.671 927.529 474.671 925.342 476.022 923.991 cv
477.373 922.64 479.561 922.64 480.912 923.991 cv
482.263 925.342 482.263 927.529 480.912 928.88 cv
cp
484.436 923.714 mo
483.485 922.95 482.362 922.281 481.482 921.847 cv
478.136 920.19 474.56 919.206 471.917 921.847 cv
469.275 924.489 469.275 928.769 471.917 931.413 cv
474.56 934.054 478.325 933.412 481.482 931.413 cv
483.318 930.251 485.686 928.7 486.257 927.171 cv
505.464 927.171 li
534.447 899.213 li
534.447 851.595 li
530.988 851.595 li
530.988 897.744 li
504.07 923.714 li
484.436 923.714 li
cp
f
446.688 932.629 mo
444.778 932.593 443.258 931.019 443.292 929.11 cv
443.325 927.2 444.899 925.679 446.811 925.714 cv
448.719 925.747 450.241 927.32 450.204 929.231 cv
450.173 931.14 448.598 932.661 446.688 932.629 cv
cp
457.862 936.227 mo
452.88 931.956 li
452.805 930.631 452.476 929.185 452.145 928.151 cv
451.012 924.595 449.235 921.337 445.5 921.271 cv
441.763 921.206 438.683 924.181 438.616 927.917 cv
438.555 931.651 441.63 933.915 445.265 934.797 cv
447.315 935.296 449.978 935.893 451.499 935.324 cv
456.583 939.685 li
503.765 939.685 li
541.075 901.489 li
541.075 851.595 li
537.617 851.595 li
537.617 900.081 li
502.311 936.227 li
457.862 936.227 li
cp
f
342.428 979.371 mo
341.076 980.72 338.888 980.72 337.536 979.371 cv
336.188 978.019 336.188 975.831 337.536 974.481 cv
338.888 973.13 341.076 973.13 342.428 974.481 cv
343.776 975.831 343.776 978.019 342.428 979.371 cv
cp
561.531 912.474 mo
531.988 942.854 li
422.512 942.854 li
389.086 975.888 li
347.536 975.888 li
346.679 974.477 344.485 973.072 343 972.337 cv
339.65 970.681 336.075 969.694 333.433 972.337 cv
330.79 974.979 330.79 979.261 333.433 981.903 cv
336.075 984.546 339.844 983.904 343 981.903 cv
344.294 981.083 345.854 980.068 346.863 979.005 cv
346.863 979.346 li
390.508 979.346 li
423.934 946.31 li
533.45 946.31 li
564.988 913.878 li
564.988 894.06 li
552.313 881.341 li
552.313 851.595 li
548.855 851.595 li
548.855 882.769 li
561.531 895.487 li
561.531 912.474 li
cp
f
278.179 1099.47 mo
278.179 1101.38 276.63 1102.92 274.721 1102.92 cv
272.811 1102.92 271.264 1101.38 271.264 1099.47 cv
271.264 1097.56 272.811 1096.01 274.721 1096.01 cv
276.63 1096.01 278.179 1097.56 278.179 1099.47 cv
cp
426.544 948.329 mo
386.489 988.093 li
272.251 988.093 li
258.833 1001.2 li
258.833 1085.99 li
268.728 1094.62 li
268.204 1096.2 268.782 1098.92 269.344 1100.58 cv
270.542 1104.12 272.37 1107.34 276.107 1107.34 cv
279.844 1107.34 282.87 1104.31 282.87 1100.58 cv
282.87 1096.84 279.753 1094.63 276.107 1093.81 cv
274.934 1093.55 273.56 1093.26 272.313 1093.16 cv
262.291 1084.41 li
262.291 1002.65 li
273.659 991.551 li
387.913 991.551 li
427.968 951.786 li
537.176 951.786 li
577.668 911.589 li
577.668 851.595 li
574.211 851.595 li
574.211 910.149 li
535.749 948.329 li
426.544 948.329 li
cp
f
330.943 1095.14 mo
331.342 1093.27 333.177 1092.08 335.046 1092.48 cv
336.912 1092.87 338.104 1094.71 337.705 1096.57 cv
337.31 1098.45 335.473 1099.64 333.606 1099.24 cv
331.74 1098.84 330.546 1097 330.943 1095.14 cv
cp
428.26 955.533 mo
389.073 995.297 li
278.459 995.297 li
265.605 1007.52 li
265.605 1071.39 li
290.387 1096.85 li
290.387 1106.61 li
299.415 1116.6 li
311.022 1116.6 li
322.864 1103.88 li
328.472 1100.87 li
329.868 1101.67 332.469 1101.7 334.507 1101.67 cv
338.243 1101.63 341.751 1100.12 342.531 1096.46 cv
343.308 1092.81 340.976 1089.22 337.321 1088.44 cv
333.668 1087.66 331.205 1090.44 329.298 1093.65 cv
328.718 1094.63 328.04 1096.04 327.679 1097.37 cv
320.724 1101.1 li
309.517 1113.15 li
300.95 1113.15 li
293.845 1105.28 li
293.845 1095.44 li
269.064 1069.99 li
269.064 1009 li
279.841 998.755 li
390.521 998.755 li
429.707 958.991 li
540.068 958.991 li
583.142 915.313 li
583.142 851.595 li
579.685 851.595 li
579.685 913.896 li
538.623 955.533 li
428.26 955.533 li
cp
f
308.145 1099.47 mo
308.145 1101.38 306.597 1102.92 304.688 1102.92 cv
302.778 1102.92 301.23 1101.38 301.23 1099.47 cv
301.23 1097.56 302.778 1096.01 304.688 1096.01 cv
306.597 1096.01 308.145 1097.56 308.145 1099.47 cv
cp
519.6 959.854 mo
494.53 985.499 li
406.378 985.499 li
391.395 1000.19 li
296.576 1000.19 li
277.132 1019.94 li
277.132 1073.23 li
298.595 1094.97 li
298.251 1096.58 298.788 1099.04 299.311 1100.58 cv
300.507 1104.12 302.339 1107.34 306.073 1107.34 cv
309.811 1107.34 312.839 1104.31 312.839 1100.58 cv
312.839 1096.84 309.721 1094.63 306.073 1093.81 cv
304.694 1093.5 303.048 1093.16 301.649 1093.14 cv
280.589 1071.81 li
280.589 1021.36 li
298.025 1003.65 li
392.808 1003.65 li
407.79 988.957 li
495.985 988.957 li
521.055 963.313 li
543.226 963.313 li
588.905 917.929 li
588.905 851.595 li
585.448 851.595 li
585.448 916.489 li
541.801 959.854 li
519.6 959.854 li
cp
f
308.461 1132.53 mo
306.552 1132.53 305.003 1130.98 305.003 1129.07 cv
305.003 1127.16 306.552 1125.61 308.461 1125.61 cv
310.373 1125.61 311.919 1127.16 311.919 1129.07 cv
311.919 1130.98 310.373 1132.53 308.461 1132.53 cv
cp
523.901 968.786 mo
501.139 992.991 li
411.011 992.991 li
396.025 1007.11 li
302.936 1007.11 li
283.761 1025.98 li
283.761 1069.75 li
300.015 1086.93 li
341.504 1086.93 li
349.743 1095.68 li
349.743 1108.66 li
345.02 1113.15 li
321.063 1113.15 li
311.661 1122.87 li
310.205 1122.9 308.515 1123.3 307.351 1123.7 cv
303.811 1124.89 300.585 1126.72 300.585 1130.46 cv
300.585 1134.19 303.613 1137.22 307.351 1137.22 cv
311.085 1137.22 313.296 1134.1 314.116 1130.46 cv
314.53 1128.61 315.019 1126.27 314.688 1124.72 cv
322.528 1116.6 li
346.401 1116.6 li
353.202 1110.14 li
353.202 1094.31 li
342.996 1083.47 li
301.503 1083.47 li
287.218 1068.37 li
287.218 1027.43 li
304.351 1010.57 li
397.395 1010.57 li
412.382 996.448 li
502.634 996.448 li
525.397 972.244 li
545.234 972.244 li
597.551 921.104 li
597.551 851.595 li
594.093 851.595 li
594.093 919.649 li
543.827 968.786 li
523.901 968.786 li
cp
f
556.425 982.966 mo
557.763 984.329 557.739 986.518 556.375 987.854 cv
555.011 989.191 552.822 989.168 551.485 987.804 cv
550.152 986.44 550.171 984.251 551.536 982.915 cv
552.9 981.577 555.087 981.601 556.425 982.966 cv
cp
552.6 978.09 mo
551.315 979.063 550.079 980.979 549.398 982.319 cv
547.71 985.653 546.683 989.218 549.301 991.887 cv
551.913 994.556 556.196 994.601 558.866 991.987 cv
561.534 989.372 560.93 985.596 558.964 982.418 cv
558.146 981.095 557.128 979.492 556.057 978.476 cv
556.057 977.001 li
607.346 926.165 li
607.346 851.595 li
603.889 851.595 li
603.889 924.724 li
552.6 975.559 li
552.6 978.09 li
cp
f
306.722 1066.85 mo
306.722 1068.76 305.176 1070.31 303.265 1070.31 cv
301.353 1070.31 299.807 1068.76 299.807 1066.85 cv
299.807 1064.94 301.353 1063.39 303.265 1063.39 cv
305.176 1063.39 306.722 1064.94 306.722 1066.85 cv
cp
564.701 973.831 mo
564.701 990.954 li
559.535 997.565 li
428.395 997.565 li
409.666 1012.01 li
308.938 1012.01 li
292.692 1029.48 li
292.692 1057.96 li
297.153 1062.42 li
296.841 1064.03 297.375 1066.45 297.889 1067.96 cv
299.084 1071.5 300.915 1074.73 304.653 1074.73 cv
308.388 1074.73 311.415 1071.7 311.415 1067.96 cv
311.415 1064.23 308.296 1062.02 304.653 1061.2 cv
303.245 1060.88 301.557 1060.53 300.142 1060.52 cv
296.149 1056.53 li
296.149 1030.84 li
310.446 1015.47 li
410.846 1015.47 li
429.573 1001.02 li
561.22 1001.02 li
568.159 992.146 li
568.159 975.269 li
631.618 912.095 li
632.128 911.589 li
632.128 874.991 li
647.11 860.007 li
647.11 851.595 li
643.653 851.595 li
643.653 858.575 li
628.67 873.56 li
628.67 910.149 li
565.212 973.325 li
564.701 973.831 li
cp
f
309.231 1040.96 mo
307.319 1040.96 305.773 1039.41 305.773 1037.5 cv
305.773 1035.59 307.319 1034.04 309.231 1034.04 cv
311.142 1034.04 312.688 1035.59 312.688 1037.5 cv
312.688 1039.41 311.142 1040.96 309.231 1040.96 cv
cp
634.43 913.882 mo
570.462 976.894 li
570.462 995.567 li
564.147 1003.65 li
442.704 1003.65 li
417.565 1027.28 li
380.833 1027.28 li
375.069 1023.25 li
321.113 1023.25 li
312.483 1031.3 li
311.018 1031.32 309.298 1031.73 308.118 1032.13 cv
304.579 1033.32 301.353 1035.15 301.353 1038.89 cv
301.353 1042.63 304.382 1045.65 308.118 1045.65 cv
311.854 1045.65 314.066 1042.53 314.884 1038.89 cv
315.29 1037.08 315.77 1034.79 315.479 1033.24 cv
322.478 1026.7 li
373.978 1026.7 li
379.742 1030.74 li
418.936 1030.74 li
444.075 1007.11 li
565.832 1007.11 li
573.919 996.755 li
573.919 978.341 li
637.889 915.329 li
637.889 878.169 li
654.026 862.322 li
654.026 851.595 li
650.567 851.595 li
650.567 860.87 li
634.43 876.72 li
634.43 913.882 li
cp
f
720.803 1026.71 mo
721.204 1024.85 723.04 1023.65 724.907 1024.05 cv
726.774 1024.45 727.963 1026.28 727.567 1028.15 cv
727.17 1030.02 725.334 1031.21 723.467 1030.82 cv
721.6 1030.42 720.407 1028.58 720.803 1026.71 cv
cp
709.147 1044.92 mo
720.694 1033.12 li
721.889 1033.26 723.219 1033.26 724.37 1033.25 cv
728.104 1033.21 731.612 1031.7 732.393 1028.04 cv
733.169 1024.39 730.836 1020.8 727.182 1020.02 cv
723.528 1019.24 721.067 1022.01 719.159 1025.23 cv
718.157 1026.91 716.854 1029.91 717.454 1031.48 cv
706.674 1042.5 li
709.147 1044.92 li
cp
f
600.528 964.933 mo
598.617 964.933 597.07 963.388 597.07 961.476 cv
597.07 959.566 598.617 958.019 600.528 958.019 cv
602.436 958.019 603.987 959.566 603.987 961.476 cv
603.987 963.388 602.436 964.933 600.528 964.933 cv
cp
602.622 955.361 mo
601.471 955.506 600.292 955.803 599.413 956.101 cv
595.876 957.296 592.65 959.126 592.65 962.864 cv
592.65 966.599 595.68 969.627 599.413 969.627 cv
603.153 969.627 605.364 966.509 606.18 962.864 cv
606.676 960.653 607.268 957.744 606.444 956.319 cv
606.842 955.888 li
662.67 899.769 li
662.67 895.538 li
670.834 888.104 li
749.266 887.819 li
767.706 906.26 li
854.721 906.26 li
879.995 880.719 li
877.536 878.287 li
853.278 902.802 li
769.139 902.802 li
750.694 884.356 li
669.491 884.651 li
659.211 894.009 li
659.211 898.342 li
604.348 953.493 li
602.622 955.361 li
cp
f
362.548 1038.24 mo
362.583 1036.33 364.155 1034.81 366.066 1034.84 cv
367.975 1034.88 369.496 1036.45 369.464 1038.36 cv
369.43 1040.27 367.856 1041.79 365.946 1041.76 cv
364.038 1041.73 362.519 1040.15 362.548 1038.24 cv
cp
857.01 908.688 mo
766.508 908.688 li
746.909 890.406 li
684.125 890.704 li
648.266 927.452 li
648.266 949.053 li
623.919 973.394 li
584.445 973.394 li
576.517 981.324 li
576.517 998.626 li
566.241 1009.99 li
447.296 1009.7 li
412.714 1043.71 li
374.968 1043.71 li
372.128 1042.14 li
372.239 1040.59 371.822 1038.6 371.402 1037.29 cv
370.268 1033.73 368.495 1030.47 364.757 1030.4 cv
361.022 1030.34 357.938 1033.31 357.875 1037.05 cv
357.811 1040.78 360.891 1043.05 364.52 1043.93 cv
366.108 1044.32 368.056 1044.76 369.565 1044.68 cv
374.079 1047.16 li
414.13 1047.16 li
448.709 1013.16 li
567.775 1013.45 li
579.976 999.96 li
579.976 982.756 li
585.877 976.854 li
625.35 976.854 li
651.723 950.485 li
651.723 928.86 li
685.59 894.155 li
745.555 893.871 li
765.145 912.144 li
858.483 912.144 li
880.014 889.716 li
877.52 887.321 li
857.01 908.688 li
cp
f
337.76 1045.17 mo
335.851 1045.14 334.33 1043.56 334.364 1041.65 cv
334.396 1039.74 335.973 1038.22 337.88 1038.25 cv
339.793 1038.29 341.313 1039.86 341.278 1041.77 cv
341.244 1043.68 339.671 1045.2 337.76 1045.17 cv
cp
858.762 915.088 mo
762.196 915.088 li
743.75 897.616 li
688.17 897.616 li
653.452 932.634 li
653.452 953.372 li
626.231 980.31 li
590.018 980.31 li
582.567 986.407 li
582.567 1002.62 li
570.004 1016.04 li
450.471 1016.04 li
409.548 1055.81 li
363.564 1056.09 li
357.796 1057.12 li
344.313 1044.18 li
343.953 1044.56 li
343.884 1043.22 343.552 1041.74 343.217 1040.69 cv
342.082 1037.13 340.31 1033.88 336.571 1033.81 cv
332.836 1033.75 329.755 1036.72 329.69 1040.46 cv
329.626 1044.19 332.705 1046.46 336.335 1047.34 cv
338.576 1047.88 341.537 1048.54 342.952 1047.67 cv
356.68 1060.83 li
363.737 1059.55 li
410.959 1059.26 li
451.876 1019.5 li
571.503 1019.5 li
586.025 1003.99 li
586.025 988.047 li
591.252 983.769 li
627.655 983.769 li
656.909 954.813 li
656.909 934.058 li
689.612 901.073 li
742.373 901.073 li
760.817 918.546 li
860.188 918.546 li
881.44 897.464 li
879.004 895.009 li
858.762 915.088 li
cp
f
596.587 1015.22 mo
594.68 1015.22 593.13 1013.67 593.13 1011.76 cv
593.13 1009.85 594.68 1008.3 596.587 1008.3 cv
598.498 1008.3 600.045 1009.85 600.045 1011.76 cv
600.045 1013.67 598.498 1015.22 596.587 1015.22 cv
cp
866.498 927.005 mo
755.903 926.72 li
738.616 908.688 li
693.946 908.688 li
664.977 937.231 li
664.977 960.298 li
633.995 991.839 li
615.625 991.839 li
600.101 1005.55 li
598.585 1005.52 596.726 1005.96 595.477 1006.38 cv
591.938 1007.58 588.714 1009.41 588.714 1013.15 cv
588.714 1016.88 591.742 1019.91 595.477 1019.91 cv
599.214 1019.91 601.426 1016.79 602.245 1013.15 cv
602.629 1011.42 603.073 1009.27 602.864 1007.73 cv
616.934 995.297 li
635.448 995.297 li
668.434 961.712 li
668.434 938.679 li
695.362 912.144 li
737.141 912.144 li
754.424 930.174 li
868.014 930.466 li
881.495 915.774 li
878.948 913.435 li
866.498 927.005 li
cp
f
481.618 1034.81 mo
479.71 1034.81 478.161 1033.26 478.161 1031.35 cv
478.161 1029.44 479.71 1027.89 481.618 1027.89 cv
483.529 1027.89 485.075 1029.44 485.075 1031.35 cv
485.075 1033.26 483.529 1034.81 481.618 1034.81 cv
cp
604.192 1025.26 mo
607.346 1020.93 li
607.346 1012.19 li
619.544 1001.02 li
637.743 1001.02 li
675.637 962.87 li
675.637 941.597 li
699.69 917.684 li
734.243 917.684 li
752.108 936.802 li
870.288 936.802 li
881.459 925.329 li
878.981 922.917 li
868.829 933.345 li
753.612 933.345 li
735.745 914.226 li
698.264 914.226 li
672.178 940.159 li
672.178 961.446 li
636.305 997.565 li
618.2 997.565 li
603.889 1010.67 li
603.889 1019.8 li
602.432 1021.8 li
487.793 1021.8 li
485.148 1025.15 li
483.628 1025.11 481.761 1025.55 480.505 1025.98 cv
476.968 1027.17 473.743 1029 473.743 1032.74 cv
473.743 1036.48 476.772 1039.51 480.505 1039.51 cv
484.244 1039.51 486.456 1036.39 487.273 1032.74 cv
487.665 1030.99 488.117 1028.81 487.886 1027.26 cv
489.466 1025.26 li
604.192 1025.26 li
cp
f
372.892 1110.3 mo
370.983 1110.3 369.434 1108.76 369.434 1106.85 cv
369.434 1104.94 370.983 1103.39 372.892 1103.39 cv
373.708 1103.39 374.448 1103.68 375.038 1104.16 cv
375.598 1104.72 li
376.061 1105.31 376.349 1106.04 376.349 1106.85 cv
376.349 1108.76 374.803 1110.3 372.892 1110.3 cv
cp
374.996 1100.73 mo
373.843 1100.87 372.659 1101.17 371.779 1101.47 cv
368.241 1102.67 365.017 1104.5 365.017 1108.23 cv
365.017 1111.97 368.045 1115 371.779 1115 cv
375.518 1115 377.727 1111.88 378.548 1108.23 cv
379.034 1106.06 379.618 1103.22 378.862 1101.76 cv
436.612 1044.28 li
488.159 1044.28 li
501.415 1031.89 li
606.332 1031.89 li
613.397 1024.83 li
613.397 1017.05 li
622.758 1007.69 li
640.336 1007.69 li
681.11 966.619 li
681.11 944.714 li
701.428 924.122 li
731.123 924.122 li
750.141 942.606 li
873.176 942.606 li
881.467 933.966 li
878.971 931.571 li
871.702 939.149 li
751.545 939.149 li
732.528 920.665 li
699.983 920.665 li
677.653 943.296 li
677.653 965.193 li
638.897 1004.23 li
621.325 1004.23 li
609.94 1015.61 li
609.94 1023.39 li
604.901 1028.43 li
500.051 1028.43 li
486.794 1040.82 li
435.185 1040.82 li
374.996 1100.73 li
cp
f
402.1 1101.23 mo
400.188 1101.23 398.643 1099.68 398.643 1097.77 cv
398.643 1095.86 400.188 1094.31 402.1 1094.31 cv
404.011 1094.31 405.558 1095.86 405.558 1097.77 cv
405.558 1099.68 404.011 1101.23 402.1 1101.23 cv
cp
873.417 945.446 mo
747.206 945.446 li
727.616 927.005 li
704.305 927.005 li
683.417 948.195 li
683.417 968.537 li
642.926 1009.99 li
632.557 1009.99 li
607.774 1035.2 li
501.21 1035.2 li
488.533 1046.87 li
449.303 1046.87 li
404.573 1091.61 li
403.308 1091.73 401.962 1092.06 400.988 1092.39 cv
397.449 1093.59 394.222 1095.42 394.222 1099.16 cv
394.222 1102.89 397.25 1105.92 400.988 1105.92 cv
404.724 1105.92 406.936 1102.8 407.752 1099.16 cv
408.219 1097.09 408.77 1094.41 408.167 1092.9 cv
450.734 1050.33 li
489.884 1050.33 li
502.56 1038.66 li
609.223 1038.66 li
634.004 1013.45 li
644.381 1013.45 li
686.873 969.944 li
686.873 949.613 li
705.75 930.462 li
726.243 930.462 li
745.834 948.904 li
874.926 948.904 li
882.93 940.284 li
880.397 937.931 li
873.417 945.446 li
cp
f
507.936 1049.96 mo
506.024 1049.96 504.478 1048.41 504.478 1046.5 cv
504.478 1044.59 506.024 1043.04 507.936 1043.04 cv
509.848 1043.04 511.394 1044.59 511.394 1046.5 cv
511.394 1048.41 509.848 1049.96 507.936 1049.96 cv
cp
621.319 1040.25 mo
511.105 1040.25 li
511.105 1040.31 li
509.657 1040.34 507.981 1040.73 506.825 1041.13 cv
503.286 1042.32 500.059 1044.15 500.059 1047.89 cv
500.059 1051.62 503.089 1054.65 506.825 1054.65 cv
510.56 1054.65 512.771 1051.53 513.589 1047.89 cv
513.882 1046.59 514.204 1045.05 514.259 1043.7 cv
622.764 1043.7 li
711.227 954.091 li
878.766 954.091 li
878.766 950.634 li
709.782 950.634 li
621.319 1040.25 li
cp
f
528.587 1057.14 mo
526.677 1057.14 525.13 1055.59 525.13 1053.68 cv
525.13 1051.77 526.677 1050.23 528.587 1050.23 cv
530.499 1050.23 532.046 1051.77 532.046 1053.68 cv
532.046 1055.59 530.499 1057.14 528.587 1057.14 cv
cp
881.661 957.896 mo
712.378 957.896 li
624.782 1045.43 li
535.598 1045.43 li
532.796 1047.54 li
531.192 1047.31 528.925 1047.82 527.478 1048.31 cv
523.938 1049.5 520.71 1051.33 520.71 1055.07 cv
520.71 1058.81 523.739 1061.83 527.478 1061.83 cv
531.212 1061.83 533.423 1058.72 534.24 1055.07 cv
534.577 1053.57 534.967 1051.73 534.921 1050.26 cv
536.749 1048.89 li
626.213 1048.89 li
713.811 961.356 li
881.661 961.356 li
881.661 957.896 li
cp
f
544.492 1064.32 mo
542.581 1064.32 541.034 1062.77 541.034 1060.86 cv
541.034 1058.95 542.581 1057.41 544.492 1057.41 cv
546.403 1057.41 547.949 1058.95 547.949 1060.86 cv
547.949 1062.77 546.403 1064.32 544.492 1064.32 cv
cp
629.389 1056.09 mo
717.563 967.345 li
880.221 967.345 li
880.221 963.887 li
716.123 963.887 li
627.95 1052.64 li
551.266 1052.64 li
547.794 1054.66 li
546.318 1054.67 544.572 1055.08 543.38 1055.49 cv
539.839 1056.68 536.613 1058.51 536.613 1062.25 cv
536.613 1065.99 539.644 1069.01 543.38 1069.01 cv
547.116 1069.01 549.327 1065.9 550.144 1062.25 cv
550.524 1060.56 550.954 1058.46 550.774 1056.93 cv
552.202 1056.09 li
629.389 1056.09 li
cp
f
563.8 1069.14 mo
561.893 1069.14 560.342 1067.59 560.342 1065.68 cv
560.342 1063.77 561.893 1062.22 563.8 1062.22 cv
565.712 1062.22 567.259 1063.77 567.259 1065.68 cv
567.259 1067.59 565.712 1069.14 563.8 1069.14 cv
cp
881.661 969.938 mo
717.278 969.938 li
630.256 1057.25 li
572.626 1057.25 li
568.239 1059.57 li
566.628 1059.25 564.207 1059.79 562.69 1060.3 cv
559.151 1061.5 555.925 1063.33 555.925 1067.07 cv
555.925 1070.8 558.954 1073.83 562.69 1073.83 cv
566.428 1073.83 568.636 1070.71 569.456 1067.07 cv
569.777 1065.63 570.136 1063.91 570.132 1062.48 cv
573.483 1060.7 li
631.692 1060.7 li
718.713 973.394 li
881.661 973.394 li
881.661 969.938 li
cp
f
580.742 1075.37 mo
578.829 1075.37 577.282 1073.82 577.282 1071.91 cv
577.282 1070 578.829 1068.45 580.742 1068.45 cv
582.652 1068.45 584.199 1070 584.199 1071.91 cv
584.199 1073.82 582.652 1075.37 580.742 1075.37 cv
cp
880.221 975.888 mo
720.454 975.888 li
631.702 1063.87 li
589.001 1063.87 li
585.591 1065.92 li
584.015 1065.39 581.287 1065.97 579.63 1066.54 cv
576.092 1067.73 572.863 1069.56 572.863 1073.3 cv
572.863 1077.03 575.892 1080.06 579.63 1080.06 cv
583.364 1080.06 585.577 1076.94 586.394 1073.3 cv
586.69 1071.98 587.016 1070.42 587.065 1069.07 cv
589.959 1067.33 li
633.128 1067.33 li
721.878 979.346 li
880.221 979.346 li
880.221 975.888 li
cp
f
601.487 1082.05 mo
599.576 1082.05 598.029 1080.5 598.029 1078.59 cv
598.029 1076.68 599.576 1075.14 601.487 1075.14 cv
603.399 1075.14 604.946 1076.68 604.946 1078.59 cv
604.946 1080.5 603.399 1082.05 601.487 1082.05 cv
cp
609.055 1070.5 mo
606.366 1072.61 li
604.794 1072.07 602.044 1072.65 600.377 1073.22 cv
596.837 1074.42 593.609 1076.25 593.609 1079.98 cv
593.609 1083.72 596.639 1086.75 600.377 1086.75 cv
604.112 1086.75 606.323 1083.63 607.139 1079.98 cv
607.426 1078.71 607.743 1077.2 607.807 1075.88 cv
610.25 1073.96 li
637.45 1073.96 li
725.623 986.652 li
880.221 986.652 li
880.221 983.194 li
724.2 983.194 li
636.028 1070.5 li
609.055 1070.5 li
cp
f
481.618 1101.23 mo
479.71 1101.23 478.161 1099.68 478.161 1097.77 cv
478.161 1095.86 479.71 1094.31 481.618 1094.31 cv
483.529 1094.31 485.075 1095.86 485.075 1097.77 cv
485.075 1099.68 483.529 1101.23 481.618 1101.23 cv
cp
483.976 1091.62 mo
482.745 1091.75 481.451 1092.07 480.505 1092.39 cv
476.968 1093.59 473.743 1095.42 473.743 1099.16 cv
473.743 1102.89 476.772 1105.92 480.505 1105.92 cv
484.244 1105.92 486.456 1102.8 487.273 1099.16 cv
487.694 1097.28 488.186 1094.9 487.823 1093.35 cv
489.398 1092.4 li
608.077 1092.4 li
620.178 1080.01 li
640.905 1080.01 li
729.942 992.413 li
880.221 992.413 li
880.221 988.956 li
728.526 988.956 li
639.489 1076.55 li
618.721 1076.55 li
606.62 1088.94 li
488.438 1088.94 li
483.976 1091.62 li
cp
f
223.22 1106.41 mo
221.308 1106.37 219.788 1104.8 219.823 1102.89 cv
219.854 1100.98 221.431 1099.46 223.339 1099.49 cv
225.249 1099.53 226.77 1101.1 226.734 1103.01 cv
226.702 1104.92 225.127 1106.44 223.22 1106.41 cv
cp
f
831.995 1013.7 mo
830.643 1015.05 828.456 1015.05 827.106 1013.7 cv
825.754 1012.35 825.754 1010.16 827.106 1008.81 cv
828.456 1007.46 830.643 1007.46 831.995 1008.81 cv
833.346 1010.16 833.346 1012.35 831.995 1013.7 cv
cp
826.532 1006.27 mo
825.006 1007.24 823.108 1008.48 822.186 1009.75 cv
813.04 1009.99 li
813.129 1013.45 li
822.711 1013.2 li
823.762 1014.28 825.366 1015.26 826.532 1015.84 cv
829.879 1017.5 833.457 1018.48 836.1 1015.84 cv
838.741 1013.2 838.741 1008.92 836.1 1006.27 cv
833.457 1003.63 829.688 1004.28 826.532 1006.27 cv
cp
f
732.282 858.896 mo
733.629 857.55 735.819 857.55 737.17 858.896 cv
738.522 860.249 738.522 862.435 737.17 863.787 cv
735.819 865.139 733.629 865.139 732.282 863.787 cv
730.93 862.435 730.93 860.249 732.282 858.896 cv
cp
737.741 866.321 mo
739.075 865.476 740.692 864.424 741.694 863.325 cv
762.805 863.325 li
773.116 852.804 li
770.643 850.386 li
761.354 859.868 li
741.971 859.868 li
740.973 858.611 739.075 857.414 737.741 856.754 cv
734.391 855.1 730.819 854.114 728.174 856.754 cv
725.53 859.396 725.534 863.681 728.174 866.321 cv
730.819 868.962 734.584 868.321 737.741 866.321 cv
cp
f
537.385 989.62 mo
535.472 989.62 533.927 988.074 533.927 986.163 cv
533.927 984.252 535.472 982.705 537.385 982.705 cv
539.296 982.705 540.842 984.252 540.842 986.163 cv
540.842 988.074 539.296 989.62 537.385 989.62 cv
cp
536.273 980.787 mo
532.734 981.982 529.505 983.813 529.505 987.55 cv
529.505 991.286 532.535 994.315 536.273 994.315 cv
540.008 994.315 542.22 991.196 543.037 987.55 cv
543.44 985.754 543.913 983.489 543.638 981.935 cv
602.159 923.981 li
602.159 851.595 li
598.702 851.595 li
598.702 922.539 li
540.72 979.96 li
539.237 979.963 537.474 980.38 536.273 980.787 cv
cp
f
547.061 910.63 mo
548.399 911.993 548.376 914.184 547.012 915.519 cv
545.647 916.856 543.459 916.833 542.123 915.468 cv
540.784 914.104 540.808 911.914 542.171 910.578 cv
543.536 909.241 545.725 909.265 547.061 910.63 cv
cp
540.035 909.985 mo
538.344 913.317 537.32 916.881 539.934 919.551 cv
542.546 922.222 546.832 922.267 549.503 919.651 cv
552.17 917.038 551.566 913.262 549.602 910.083 cv
548.671 908.585 547.489 906.732 546.262 905.773 cv
546.262 851.595 li
542.804 851.595 li
542.804 906.114 li
541.681 907.151 540.638 908.795 540.035 909.985 cv
cp
f
560.613 872.361 mo
561.978 871.024 564.163 871.048 565.502 872.412 cv
566.837 873.776 566.815 875.966 565.451 877.302 cv
564.087 878.639 561.898 878.614 560.561 877.253 cv
559.229 875.888 559.249 873.698 560.613 872.361 cv
cp
567.943 881.435 mo
570.61 878.817 570.005 875.044 568.041 871.866 cv
567.186 870.483 566.112 868.8 564.988 867.794 cv
564.988 851.595 li
561.531 851.595 li
561.531 867.646 li
560.299 868.65 559.128 870.477 558.475 871.767 cv
556.787 875.101 555.76 878.665 558.377 881.333 cv
560.99 884.004 565.272 884.048 567.943 881.435 cv
cp
f
793.147 872.361 mo
794.51 871.024 796.698 871.048 798.036 872.412 cv
799.373 873.776 799.348 875.966 797.985 877.302 cv
796.62 878.639 794.432 878.614 793.094 877.253 cv
791.762 875.888 791.782 873.698 793.147 872.361 cv
cp
800.477 881.435 mo
803.143 878.817 802.54 875.044 800.575 871.866 cv
799.719 870.483 798.645 868.8 797.522 867.794 cv
797.522 851.595 li
794.065 851.595 li
794.065 867.646 li
792.832 868.651 791.663 870.477 791.008 871.767 cv
789.321 875.101 788.294 878.665 790.911 881.333 cv
793.524 884.004 797.805 884.048 800.477 881.435 cv
cp
f
823.979 872.054 mo
825.344 870.717 827.53 870.74 828.868 872.104 cv
830.204 873.47 830.182 875.658 828.817 876.993 cv
827.454 878.331 825.264 878.308 823.928 876.943 cv
822.59 875.579 822.616 873.39 823.979 872.054 cv
cp
831.309 881.128 mo
833.977 878.511 833.373 874.736 831.407 871.56 cv
830.549 870.177 829.477 868.495 828.354 867.489 cv
828.354 851.595 li
824.897 851.595 li
824.897 867.339 li
823.665 868.344 822.495 870.17 821.84 871.46 cv
820.149 874.793 819.125 878.356 821.741 881.026 cv
824.352 883.696 828.639 883.741 831.309 881.128 cv
cp
f
809.282 888.063 mo
810.647 886.729 812.836 886.753 814.172 888.117 cv
815.51 889.481 815.487 891.669 814.123 893.007 cv
812.758 894.343 810.569 894.319 809.233 892.956 cv
807.895 891.59 807.919 889.402 809.282 888.063 cv
cp
816.614 897.138 mo
819.282 894.521 818.676 890.747 816.711 887.569 cv
815.854 886.188 814.784 884.507 813.661 883.501 cv
813.661 851.595 li
810.202 851.595 li
810.202 883.349 li
808.969 884.352 807.799 886.181 807.145 887.472 cv
805.454 890.803 804.43 894.367 807.044 897.038 cv
809.657 899.707 813.942 899.753 816.614 897.138 cv
cp
f
838.387 888.063 mo
839.748 886.729 841.94 886.753 843.274 888.117 cv
844.61 889.481 844.588 891.669 843.227 893.007 cv
841.862 894.343 839.67 894.319 838.336 892.956 cv
836.998 891.59 837.024 889.402 838.387 888.063 cv
cp
845.715 897.138 mo
848.381 894.521 847.782 890.747 845.815 887.569 cv
844.957 886.188 843.885 884.507 842.762 883.501 cv
842.762 851.595 li
839.305 851.595 li
839.305 883.349 li
838.075 884.354 836.903 886.181 836.25 887.472 cv
834.557 890.803 833.534 894.367 836.149 897.038 cv
838.762 899.707 843.045 899.753 845.715 897.138 cv
cp
f
597.358 987.675 mo
599.269 987.675 600.815 989.223 600.815 991.134 cv
600.815 993.043 599.269 994.592 597.358 994.592 cv
595.446 994.592 593.9 993.043 593.9 991.134 cv
593.9 989.223 595.446 987.675 597.358 987.675 cv
cp
596.246 999.285 mo
599.982 999.285 602.194 996.165 603.01 992.519 cv
603.299 991.234 603.618 989.713 603.678 988.38 cv
631.098 988.38 li
662.67 957.892 li
662.67 935.214 li
692.204 905.683 li
740.323 905.683 li
759.348 924.7 li
864.829 924.7 li
880.024 908.599 li
877.508 906.225 li
863.336 921.243 li
760.78 921.243 li
741.754 902.225 li
690.77 902.225 li
659.211 933.782 li
659.211 956.425 li
629.7 984.922 li
600.431 984.922 li
600.431 984.938 li
599.005 984.987 597.378 985.373 596.246 985.756 cv
592.708 986.952 589.48 988.783 589.48 992.519 cv
589.48 996.256 592.509 999.285 596.246 999.285 cv
cp
f
474.149 968.034 mo
475.476 966.659 477.663 966.622 479.038 967.949 cv
480.412 969.274 480.45 971.462 479.123 972.839 cv
477.796 974.214 475.607 974.25 474.232 972.923 cv
472.862 971.596 472.821 969.407 474.149 968.034 cv
cp
473.699 975.077 mo
477.075 976.675 480.669 977.597 483.266 974.909 cv
485.859 972.222 485.785 967.938 483.1 965.343 cv
480.412 962.747 476.653 963.456 473.533 965.511 cv
471.938 966.559 469.938 967.918 469.108 969.276 cv
461.114 969.276 li
461.114 972.733 li
470.045 972.733 li
470.045 972.697 li
471.108 973.679 472.597 974.555 473.699 975.077 cv
cp
f
127.376 1068.45 mo
127.376 1070.36 125.828 1071.91 123.917 1071.91 cv
122.005 1071.91 120.46 1070.36 120.46 1068.45 cv
120.46 1066.54 122.005 1065 123.917 1065 cv
125.828 1065 127.376 1066.54 127.376 1068.45 cv
cp
115.229 1069 mo
115.229 1073.2 118.633 1076.61 122.83 1076.61 cv
127.03 1076.61 130.435 1073.2 130.435 1069 cv
130.435 1064.8 127.03 1061.4 122.83 1061.4 cv
118.633 1061.4 115.229 1064.8 115.229 1069 cv
cp
f
158.161 1069.21 mo
158.161 1071.12 156.614 1072.67 154.703 1072.67 cv
152.792 1072.67 151.245 1071.12 151.245 1069.21 cv
151.245 1067.3 152.792 1065.75 154.703 1065.75 cv
156.614 1065.75 158.161 1067.3 158.161 1069.21 cv
cp
146.015 1069.76 mo
146.015 1073.96 149.418 1077.36 153.617 1077.36 cv
157.815 1077.36 161.22 1073.96 161.22 1069.76 cv
161.22 1065.56 157.815 1062.15 153.617 1062.15 cv
149.418 1062.15 146.015 1065.56 146.015 1069.76 cv
cp
f
186.298 1072.67 mo
184.39 1072.67 182.842 1071.12 182.842 1069.21 cv
182.842 1067.3 184.39 1065.75 186.298 1065.75 cv
188.21 1065.75 189.757 1067.3 189.757 1069.21 cv
189.757 1071.12 188.21 1072.67 186.298 1072.67 cv
cp
185.212 1062.15 mo
181.015 1062.15 177.61 1065.56 177.61 1069.76 cv
177.61 1073.96 181.015 1077.36 185.212 1077.36 cv
189.412 1077.36 192.817 1073.96 192.817 1069.76 cv
192.817 1065.56 189.412 1062.15 185.212 1062.15 cv
cp
f
216.268 1072.67 mo
214.355 1072.67 212.81 1071.12 212.81 1069.21 cv
212.81 1067.3 214.355 1065.75 216.268 1065.75 cv
218.177 1065.75 219.725 1067.3 219.725 1069.21 cv
219.725 1071.12 218.177 1072.67 216.268 1072.67 cv
cp
215.181 1062.15 mo
210.981 1062.15 207.577 1065.56 207.577 1069.76 cv
207.577 1073.96 210.981 1077.36 215.181 1077.36 cv
219.38 1077.36 222.784 1073.96 222.784 1069.76 cv
222.784 1065.56 219.38 1062.15 215.181 1062.15 cv
cp
f
247.062 1065.75 mo
248.974 1065.75 250.52 1067.3 250.52 1069.21 cv
250.52 1071.12 248.974 1072.67 247.062 1072.67 cv
245.151 1072.67 243.604 1071.12 243.604 1069.21 cv
243.604 1067.3 245.151 1065.75 247.062 1065.75 cv
cp
245.977 1077.36 mo
250.175 1077.36 253.579 1073.96 253.579 1069.76 cv
253.579 1065.56 250.175 1062.15 245.977 1062.15 cv
241.777 1062.15 238.373 1065.56 238.373 1069.76 cv
238.373 1073.96 241.777 1077.36 245.977 1077.36 cv
cp
f
247.062 1097.04 mo
248.974 1097.04 250.52 1098.58 250.52 1100.5 cv
250.52 1102.4 248.974 1103.95 247.062 1103.95 cv
245.151 1103.95 243.604 1102.4 243.604 1100.5 cv
243.604 1098.58 245.151 1097.04 247.062 1097.04 cv
cp
245.977 1108.65 mo
250.175 1108.65 253.579 1105.25 253.579 1101.05 cv
253.579 1096.84 250.175 1093.44 245.977 1093.44 cv
241.777 1093.44 238.373 1096.84 238.373 1101.05 cv
238.373 1105.25 241.777 1108.65 245.977 1108.65 cv
cp
f
272.287 1131.12 mo
272.287 1129.21 273.833 1127.66 275.744 1127.66 cv
277.656 1127.66 279.201 1129.21 279.201 1131.12 cv
279.201 1133.03 277.656 1134.58 275.744 1134.58 cv
273.833 1134.58 272.287 1133.03 272.287 1131.12 cv
cp
282.261 1131.67 mo
282.261 1127.47 278.858 1124.07 274.659 1124.07 cv
270.461 1124.07 267.056 1127.47 267.056 1131.67 cv
267.056 1135.87 270.461 1139.28 274.659 1139.28 cv
278.858 1139.28 282.261 1135.87 282.261 1131.67 cv
cp
f
521.104 1112.02 mo
521.104 1110.11 522.655 1108.56 524.563 1108.56 cv
526.474 1108.56 528.021 1110.11 528.021 1112.02 cv
528.021 1113.93 526.474 1115.48 524.563 1115.48 cv
522.655 1115.48 521.104 1113.93 521.104 1112.02 cv
cp
531.084 1112.57 mo
531.084 1108.37 527.679 1104.97 523.479 1104.97 cv
519.277 1104.97 515.875 1108.37 515.875 1112.57 cv
515.875 1116.77 519.277 1120.17 523.479 1120.17 cv
527.679 1120.17 531.084 1116.77 531.084 1112.57 cv
cp
f
865.194 1044.92 mo
867.106 1044.92 868.651 1046.47 868.651 1048.38 cv
868.651 1050.29 867.106 1051.84 865.194 1051.84 cv
863.284 1051.84 861.737 1050.29 861.737 1048.38 cv
861.737 1046.47 863.284 1044.92 865.194 1044.92 cv
cp
864.112 1056.54 mo
868.309 1056.54 871.711 1053.13 871.711 1048.93 cv
871.711 1044.73 868.309 1041.33 864.112 1041.33 cv
859.911 1041.33 856.504 1044.73 856.504 1048.93 cv
856.504 1053.13 859.911 1056.54 864.112 1056.54 cv
cp
f
864.204 1074.58 mo
866.118 1074.58 867.663 1076.13 867.663 1078.04 cv
867.663 1079.95 866.118 1081.5 864.204 1081.5 cv
862.294 1081.5 860.748 1079.95 860.748 1078.04 cv
860.748 1076.13 862.294 1074.58 864.204 1074.58 cv
cp
863.118 1086.2 mo
867.319 1086.2 870.721 1082.79 870.721 1078.59 cv
870.721 1074.39 867.319 1070.99 863.118 1070.99 cv
858.92 1070.99 855.516 1074.39 855.516 1078.59 cv
855.516 1082.79 858.92 1086.2 863.118 1086.2 cv
cp
f
865.292 1111.47 mo
863.379 1111.47 861.834 1109.92 861.834 1108.01 cv
861.834 1106.1 863.379 1104.55 865.292 1104.55 cv
867.2 1104.55 868.748 1106.1 868.748 1108.01 cv
868.748 1109.92 867.2 1111.47 865.292 1111.47 cv
cp
864.204 1100.96 mo
860.004 1100.96 856.6 1104.36 856.6 1108.56 cv
856.6 1112.76 860.004 1116.17 864.204 1116.17 cv
868.407 1116.17 871.809 1112.76 871.809 1108.56 cv
871.809 1104.36 868.407 1100.96 864.204 1100.96 cv
cp
f
494.177 969.077 mo
494.177 967.167 495.722 965.619 497.634 965.619 cv
499.541 965.619 501.091 967.167 501.091 969.077 cv
501.091 970.986 499.541 972.534 497.634 972.534 cv
495.722 972.534 494.177 970.986 494.177 969.077 cv
cp
504.15 969.629 mo
504.15 965.427 500.746 962.021 496.546 962.021 cv
492.35 962.021 488.942 965.427 488.942 969.629 cv
488.942 973.828 492.35 977.231 496.546 977.231 cv
500.746 977.231 504.15 973.828 504.15 969.629 cv
cp
f
620.352 860.866 mo
622.26 860.866 623.811 862.415 623.811 864.326 cv
623.811 866.234 622.26 867.784 620.352 867.784 cv
618.442 867.784 616.895 866.234 616.895 864.326 cv
616.895 862.415 618.442 860.866 620.352 860.866 cv
cp
619.266 872.481 mo
623.465 872.481 626.87 869.077 626.87 864.878 cv
626.87 860.678 623.465 857.271 619.266 857.271 cv
615.065 857.271 611.663 860.678 611.663 864.878 cv
611.663 869.077 615.065 872.481 619.266 872.481 cv
cp
f
620.352 898.791 mo
622.26 898.791 623.811 900.341 623.811 902.25 cv
623.811 904.159 622.26 905.708 620.352 905.708 cv
618.442 905.708 616.895 904.159 616.895 902.25 cv
616.895 900.341 618.442 898.791 620.352 898.791 cv
cp
619.266 910.407 mo
623.465 910.407 626.87 907.001 626.87 902.802 cv
626.87 898.602 623.465 895.196 619.266 895.196 cv
615.065 895.196 611.663 898.602 611.663 902.802 cv
611.663 907.001 615.065 910.407 619.266 910.407 cv
cp
f
632.637 944.136 mo
632.637 942.226 634.184 940.675 636.096 940.675 cv
638.006 940.675 639.553 942.226 639.553 944.136 cv
639.553 946.044 638.006 947.593 636.096 947.593 cv
634.184 947.593 632.637 946.044 632.637 944.136 cv
cp
642.612 944.685 mo
642.612 940.484 639.207 937.081 635.008 937.081 cv
630.809 937.081 627.405 940.484 627.405 944.685 cv
627.405 948.886 630.809 952.29 635.008 952.29 cv
639.207 952.29 642.612 948.886 642.612 944.685 cv
cp
f
718.792 941.047 mo
718.792 939.138 720.34 937.589 722.248 937.589 cv
724.161 937.589 725.706 939.138 725.706 941.047 cv
725.706 942.956 724.161 944.505 722.248 944.505 cv
720.34 944.505 718.792 942.956 718.792 941.047 cv
cp
728.77 941.599 mo
728.77 937.396 725.366 933.993 721.165 933.993 cv
716.961 933.993 713.559 937.396 713.559 941.599 cv
713.559 945.798 716.961 949.201 721.165 949.201 cv
725.366 949.201 728.77 945.798 728.77 941.599 cv
cp
f
765.454 1019.12 mo
763.542 1019.12 761.995 1017.58 761.995 1015.67 cv
761.995 1013.76 763.542 1012.21 765.454 1012.21 cv
767.364 1012.21 768.913 1013.76 768.913 1015.67 cv
768.913 1017.58 767.364 1019.12 765.454 1019.12 cv
cp
764.37 1008.61 mo
760.169 1008.61 756.764 1012.02 756.764 1016.22 cv
756.764 1020.42 760.169 1023.82 764.37 1023.82 cv
768.567 1023.82 771.971 1020.42 771.971 1016.22 cv
771.971 1012.02 768.567 1008.61 764.37 1008.61 cv
cp
f
655.829 1091.01 mo
655.829 1089.1 657.375 1087.55 659.286 1087.55 cv
661.194 1087.55 662.745 1089.1 662.745 1091.01 cv
662.745 1092.92 661.194 1094.47 659.286 1094.47 cv
657.375 1094.47 655.829 1092.92 655.829 1091.01 cv
cp
665.803 1091.56 mo
665.803 1087.36 662.401 1083.96 658.2 1083.96 cv
653.998 1083.96 650.594 1087.36 650.594 1091.56 cv
650.594 1095.76 653.998 1099.16 658.2 1099.16 cv
662.401 1099.16 665.803 1095.76 665.803 1091.56 cv
cp
f
677.584 1091.01 mo
677.584 1089.1 679.131 1087.55 681.042 1087.55 cv
682.954 1087.55 684.5 1089.1 684.5 1091.01 cv
684.5 1092.92 682.954 1094.47 681.042 1094.47 cv
679.131 1094.47 677.584 1092.92 677.584 1091.01 cv
cp
687.561 1091.56 mo
687.561 1087.36 684.155 1083.96 679.954 1083.96 cv
675.758 1083.96 672.356 1087.36 672.356 1091.56 cv
672.356 1095.76 675.758 1099.16 679.954 1099.16 cv
684.155 1099.16 687.561 1095.76 687.561 1091.56 cv
cp
f
246.522 1132.95 mo
244.61 1132.95 243.064 1131.4 243.064 1129.49 cv
243.064 1127.58 244.61 1126.03 246.522 1126.03 cv
248.431 1126.03 249.979 1127.58 249.979 1129.49 cv
249.979 1131.4 248.431 1132.95 246.522 1132.95 cv
cp
253.038 1130.04 mo
253.038 1125.84 249.636 1122.44 245.435 1122.44 cv
241.237 1122.44 237.833 1125.84 237.833 1130.04 cv
237.833 1134.24 241.237 1137.65 245.435 1137.65 cv
249.636 1137.65 253.038 1134.24 253.038 1130.04 cv
cp
f
471.042 860.423 mo
472.952 860.423 474.5 862.056 474.5 864.066 cv
474.5 866.079 472.952 867.711 471.042 867.711 cv
469.134 867.711 467.585 866.079 467.585 864.066 cv
467.585 862.056 469.134 860.423 471.042 860.423 cv
cp
465.667 865.239 mo
466.861 868.968 468.695 872.368 472.43 872.368 cv
476.163 872.368 479.193 869.175 479.193 865.239 cv
479.193 861.301 476.076 858.97 472.43 858.108 cv
470.769 857.715 468.714 857.269 467.185 857.435 cv
459.555 850.329 li
457.197 852.858 li
464.853 859.99 li
464.733 861.646 465.209 863.82 465.667 865.239 cv
cp
f
776.479 1112.82 mo
774.928 1112.82 773.669 1111.56 773.669 1110.01 cv
773.669 1108.46 774.928 1107.2 776.479 1107.2 cv
778.032 1107.2 779.29 1108.46 779.29 1110.01 cv
779.29 1111.56 778.032 1112.82 776.479 1112.82 cv
cp
878.766 1019.96 mo
859.694 1019.96 li
771.606 1107.52 li
769.577 1109.54 769.565 1112.83 771.586 1114.86 cv
772.6 1115.88 773.932 1116.39 775.264 1116.39 cv
776.586 1116.39 777.911 1115.89 778.92 1114.88 cv
863.973 1030.33 li
878.766 1030.33 li
881.631 1030.33 883.954 1028.01 883.954 1025.14 cv
883.954 1022.28 881.631 1019.96 878.766 1019.96 cv
cp
f
609.577 1111.96 mo
609.577 1114.41 607.594 1116.39 605.147 1116.39 cv
602.704 1116.39 600.718 1114.41 600.718 1111.96 cv
600.718 1109.51 602.704 1107.53 605.147 1107.53 cv
607.594 1107.53 609.577 1109.51 609.577 1111.96 cv
cp
705.084 1086.67 mo
707.528 1086.67 709.514 1088.65 709.514 1091.1 cv
709.514 1093.54 707.528 1095.53 705.084 1095.53 cv
702.637 1095.53 700.655 1093.54 700.655 1091.1 cv
700.655 1088.65 702.637 1086.67 705.084 1086.67 cv
cp
595.53 1111.85 mo
595.53 1116.63 599.4 1120.5 604.174 1120.5 cv
692.745 1120.5 li
694.991 1120.5 697.149 1119.62 698.764 1118.06 cv
711.044 1106.16 li
712.723 1104.53 713.67 1102.29 713.67 1099.95 cv
713.67 1090.2 li
713.67 1085.43 709.801 1081.56 705.028 1081.56 cv
700.253 1081.56 696.381 1085.43 696.381 1090.2 cv
696.381 1096.29 li
689.245 1103.21 li
604.174 1103.21 li
599.4 1103.21 595.53 1107.08 595.53 1111.85 cv
cp
f
454.009 960.927 mo
459.264 960.927 463.519 965.183 463.519 970.435 cv
463.519 975.688 459.264 979.944 454.009 979.944 cv
448.759 979.944 444.502 975.688 444.502 970.435 cv
444.502 965.183 448.759 960.927 454.009 960.927 cv
1 1 1 rgb
f
427.759 1009.3 mo
427.759 1014.55 423.505 1018.81 418.251 1018.81 cv
413 1018.81 408.741 1014.55 408.741 1009.3 cv
408.741 1004.05 413 999.795 418.251 999.795 cv
423.505 999.795 427.759 1004.05 427.759 1009.3 cv
f
403.734 1030.76 mo
403.734 1036.02 399.476 1040.27 394.226 1040.27 cv
388.971 1040.27 384.717 1036.02 384.717 1030.76 cv
384.717 1025.51 388.971 1021.25 394.226 1021.25 cv
399.476 1021.25 403.734 1025.51 403.734 1030.76 cv
f
365.017 1057.41 mo
365.017 1062.66 360.759 1066.92 355.508 1066.92 cv
350.254 1066.92 345.999 1062.66 345.999 1057.41 cv
345.999 1052.15 350.254 1047.9 355.508 1047.9 cv
360.759 1047.9 365.017 1052.15 365.017 1057.41 cv
f
672.469 884.649 mo
672.469 889.9 668.211 894.157 662.961 894.157 cv
657.707 894.157 653.452 889.9 653.452 884.649 cv
653.452 879.394 657.707 875.141 662.961 875.141 cv
668.211 875.141 672.469 879.394 672.469 884.649 cv
f
209.273 1086.75 mo
209.273 1092 205.018 1096.25 199.765 1096.25 cv
194.513 1096.25 190.255 1092 190.255 1086.75 cv
190.255 1081.49 194.513 1077.24 199.765 1077.24 cv
205.018 1077.24 209.273 1081.49 209.273 1086.75 cv
f
713.952 1048.93 mo
713.952 1054.18 709.698 1058.44 704.442 1058.44 cv
699.192 1058.44 694.934 1054.18 694.934 1048.93 cv
694.934 1043.68 699.192 1039.42 704.442 1039.42 cv
709.698 1039.42 713.952 1043.68 713.952 1048.93 cv
f
813.78 1011.58 mo
813.78 1016.83 809.526 1021.09 804.272 1021.09 cv
799.022 1021.09 794.762 1016.83 794.762 1011.58 cv
794.762 1006.32 799.022 1002.07 804.272 1002.07 cv
809.526 1002.07 813.78 1006.32 813.78 1011.58 cv
f
464.628 845.558 mo
464.628 850.84 460.344 855.122 455.063 855.122 cv
449.779 855.122 445.496 850.84 445.496 845.558 cv
445.496 840.274 449.779 835.991 455.063 835.991 cv
460.344 835.991 464.628 840.274 464.628 845.558 cv
cp
f
680.157 845.558 mo
680.157 850.84 675.873 855.122 670.592 855.122 cv
665.307 855.122 661.026 850.84 661.026 845.558 cv
661.026 840.274 665.307 835.991 670.592 835.991 cv
675.873 835.991 680.157 840.274 680.157 845.558 cv
cp
f
744.334 425.088 mo
742.422 425.055 740.905 423.478 740.938 421.57 cv
740.971 419.662 742.545 418.14 744.457 418.173 cv
746.366 418.207 747.887 419.781 747.85 421.691 cv
747.819 423.6 746.243 425.121 744.334 425.088 cv
cp
750.526 424.451 mo
750.456 423.117 750.123 421.653 749.792 420.611 cv
748.657 417.053 746.881 413.797 743.147 413.73 cv
739.409 413.665 736.329 416.641 736.264 420.378 cv
736.2 424.111 739.276 426.375 742.911 427.258 cv
744.993 427.762 747.704 428.376 749.213 427.764 cv
754.364 431.443 li
782.149 431.443 li
782.149 427.985 li
755.471 427.985 li
750.526 424.451 li
cp
0 .862745 1 rgb
f
206.338 390.515 mo
204.429 390.515 202.879 388.967 202.879 387.057 cv
202.879 385.147 204.429 383.598 206.338 383.598 cv
208.246 383.598 209.796 385.147 209.796 387.057 cv
209.796 388.967 208.246 390.515 206.338 390.515 cv
cp
686.063 430.58 mo
650.178 430.58 li
596.151 376.119 li
257.718 376.119 li
247.776 366.178 li
224.281 366.178 li
210.179 380.877 li
208.608 380.762 206.569 381.225 205.227 381.68 cv
201.686 382.876 198.461 384.707 198.461 388.441 cv
198.461 392.18 201.489 395.208 205.227 395.208 cv
208.962 395.208 211.174 392.088 211.992 388.441 cv
212.356 386.818 212.767 384.822 212.642 383.305 cv
225.757 369.635 li
246.345 369.635 li
256.286 379.577 li
594.71 379.577 li
648.737 434.037 li
684.602 434.037 li
698.866 448.732 li
778.403 448.732 li
778.403 445.274 li
700.327 445.274 li
686.063 430.58 li
cp
f
672.915 452.869 mo
671.563 454.218 669.375 454.218 668.024 452.869 cv
666.674 451.518 666.674 449.33 668.024 447.98 cv
669.375 446.629 671.563 446.629 672.915 447.98 cv
674.264 449.33 674.264 451.518 672.915 452.869 cv
cp
240.305 391.99 mo
238.953 393.339 236.766 393.339 235.415 391.99 cv
234.063 390.639 234.063 388.449 235.415 387.102 cv
236.766 385.75 238.953 385.75 240.305 387.102 cv
241.654 388.449 241.654 390.639 240.305 391.99 cv
cp
667.454 445.447 mo
666.003 446.365 664.215 447.529 663.25 448.732 cv
652.319 448.732 li
589.647 387.789 li
245.045 387.789 li
245.045 387.99 li
244.032 386.762 242.183 385.602 240.875 384.957 cv
237.524 383.301 233.952 382.315 231.308 384.957 cv
228.665 387.598 228.665 391.881 231.311 394.522 cv
233.952 397.164 237.718 396.522 240.875 394.522 cv
242.323 393.605 244.103 392.447 245.069 391.248 cv
588.244 391.248 li
650.917 452.19 li
663.471 452.19 li
664.512 453.338 666.223 454.403 667.454 455.012 cv
670.799 456.668 674.375 457.653 677.022 455.012 cv
679.661 452.369 679.661 448.088 677.022 445.447 cv
674.375 442.805 670.612 443.444 667.454 445.447 cv
cp
f
236.334 416.644 mo
237.681 415.293 239.872 415.293 241.22 416.644 cv
242.57 417.994 242.57 420.182 241.22 421.533 cv
239.872 422.885 237.681 422.885 236.334 421.533 cv
234.983 420.182 234.983 417.994 236.334 416.644 cv
cp
241.794 424.065 mo
243.302 423.11 245.168 421.893 246.103 420.639 cv
267.659 420.639 li
286.244 402.053 li
583.472 402.053 li
654.788 473.801 li
776.948 473.801 li
776.948 470.342 li
656.227 470.342 li
584.911 398.594 li
284.813 398.594 li
266.227 417.181 li
245.649 417.181 li
244.6 416.088 242.975 415.083 241.794 414.5 cv
238.444 412.844 234.867 411.859 232.225 414.5 cv
229.584 417.143 229.584 421.426 232.225 424.065 cv
234.867 426.708 238.636 426.066 241.794 424.065 cv
cp
f
176.299 415.994 mo
178.208 415.994 179.756 417.543 179.756 419.451 cv
179.756 421.361 178.208 422.908 176.299 422.908 cv
174.389 422.908 172.841 421.361 172.841 419.451 cv
172.841 417.543 174.389 415.994 176.299 415.994 cv
cp
175.186 427.602 mo
178.925 427.602 181.134 424.484 181.952 420.837 cv
182.182 419.815 182.427 418.643 182.552 417.533 cv
182.571 417.553 li
191.146 409.185 li
214.598 409.185 li
222.426 399.647 li
222.426 384.217 li
230.167 376.984 li
244.328 376.984 li
252.974 385.628 li
592.406 385.628 li
647.879 440.736 li
681.167 440.736 li
694.998 454.352 li
776.948 454.352 li
776.948 450.894 li
696.413 450.894 li
682.581 437.279 li
649.305 437.279 li
593.833 382.17 li
254.405 382.17 li
245.761 373.525 li
228.802 373.525 li
218.967 382.718 li
218.967 398.409 li
212.964 405.727 li
189.736 405.727 li
181.6 413.672 li
180.155 412.813 177.021 413.453 175.186 414.074 cv
171.647 415.272 168.422 417.103 168.422 420.837 cv
168.422 424.573 171.451 427.602 175.186 427.602 cv
cp
f
206.643 417.42 mo
208.555 417.42 210.101 418.967 210.101 420.877 cv
210.101 422.789 208.555 424.336 206.643 424.336 cv
204.733 424.336 203.185 422.789 203.185 420.877 cv
203.185 418.967 204.733 417.42 206.643 417.42 cv
cp
205.532 429.029 mo
209.267 429.029 211.478 425.911 212.298 422.264 cv
212.57 421.051 212.876 419.623 212.961 418.344 cv
219.524 415.391 li
228.737 406.385 li
257.709 406.818 li
267.659 396.867 li
585.218 396.867 li
656.965 466.885 li
778.403 466.885 li
778.403 463.428 li
658.373 463.428 li
586.625 393.408 li
266.227 393.408 li
256.297 403.339 li
227.351 402.906 li
217.546 412.486 li
211.866 415.045 li
210.386 414.26 207.329 414.893 205.532 415.502 cv
201.993 416.697 198.767 418.527 198.767 422.264 cv
198.767 426 201.795 429.029 205.532 429.029 cv
cp
f
707.131 433 mo
707.165 431.092 708.739 429.569 710.649 429.603 cv
712.557 429.637 714.081 431.211 714.044 433.122 cv
714.01 435.029 712.436 436.553 710.528 436.52 cv
708.616 436.485 707.096 434.908 707.131 433 cv
cp
715.985 432.043 mo
714.85 428.485 713.073 425.227 709.338 425.161 cv
705.6 425.096 702.522 428.07 702.454 431.809 cv
702.393 435.543 705.469 437.807 709.104 438.688 cv
710.503 439.027 712.184 439.408 713.598 439.441 cv
718.94 443.113 li
782.149 443.113 li
782.149 439.655 li
720.012 439.655 li
716.661 437.352 li
716.909 435.754 716.446 433.492 715.985 432.043 cv
cp
f
725.264 428.246 mo
725.297 426.338 726.872 424.815 728.782 424.85 cv
730.69 424.883 732.213 426.457 732.178 428.367 cv
732.145 430.275 730.571 431.799 728.661 431.764 cv
726.753 431.73 725.233 430.153 725.264 428.246 cv
cp
734.118 427.289 mo
732.983 423.731 731.209 420.473 727.473 420.406 cv
723.737 420.341 720.653 423.316 720.588 427.053 cv
720.526 430.789 723.606 433.053 727.235 433.934 cv
728.739 434.299 730.575 434.723 732.047 434.699 cv
737.538 438.359 li
782.149 438.359 li
782.149 434.901 li
738.584 434.901 li
734.817 432.39 li
734.998 430.808 734.559 428.678 734.118 427.289 cv
cp
f
762.352 411.963 mo
764.26 411.995 765.784 413.57 765.747 415.482 cv
765.717 417.391 764.139 418.911 762.231 418.879 cv
760.321 418.844 758.801 417.269 758.834 415.36 cv
758.87 413.453 760.442 411.93 762.352 411.963 cv
cp
760.805 421.048 mo
763.221 421.635 766.493 422.371 767.739 421.168 cv
767.745 421.164 767.747 421.155 767.753 421.149 cv
771.704 423.664 li
778.403 423.664 li
778.403 420.205 li
772.709 420.205 li
768.379 417.451 li
768.356 417.488 li
768.223 416.378 767.959 415.25 767.688 414.401 cv
766.549 410.844 764.778 407.588 761.044 407.522 cv
757.305 407.455 754.225 410.43 754.161 414.168 cv
754.094 417.901 757.174 420.165 760.805 421.048 cv
cp
f
276.452 419.99 mo
276.452 425.242 272.197 429.498 266.943 429.498 cv
261.693 429.498 257.435 425.242 257.435 419.99 cv
257.435 414.736 261.693 410.48 266.943 410.48 cv
272.197 410.48 276.452 414.736 276.452 419.99 cv
1 1 1 rgb
f
579.18 544.796 mo
577.333 545.284 575.441 544.179 574.959 542.331 cv
574.473 540.484 575.577 538.595 577.424 538.108 cv
579.271 537.624 581.162 538.729 581.647 540.575 cv
582.131 542.425 581.026 544.313 579.18 544.796 cv
cp
577.184 535.009 mo
573.118 536.077 570.691 540.233 571.758 544.292 cv
572.824 548.356 576.978 550.784 581.043 549.72 cv
585.103 548.654 587.533 544.497 586.467 540.434 cv
585.398 536.372 581.243 533.944 577.184 535.009 cv
cp
0 .862745 1 rgb
f
549.093 544.796 mo
547.246 545.284 545.354 544.179 544.873 542.331 cv
544.386 540.484 545.49 538.595 547.337 538.108 cv
549.184 537.624 551.075 538.729 551.561 540.575 cv
552.044 542.425 550.94 544.313 549.093 544.796 cv
cp
547.098 535.009 mo
543.031 536.077 540.604 540.233 541.671 544.292 cv
542.738 548.356 546.892 550.784 550.956 549.72 cv
555.015 548.654 557.447 544.497 556.379 540.434 cv
555.313 536.372 551.156 533.944 547.098 535.009 cv
cp
f
522.237 544.372 mo
520.391 544.858 518.499 543.753 518.014 541.905 cv
517.53 540.06 518.635 538.167 520.482 537.685 cv
522.329 537.198 524.22 538.304 524.703 540.15 cv
525.19 541.999 524.085 543.888 522.237 544.372 cv
cp
520.238 534.585 mo
516.178 535.65 513.749 539.809 514.813 543.868 cv
515.88 547.931 520.036 550.359 524.103 549.292 cv
528.161 548.227 530.592 544.071 529.525 540.007 cv
528.458 535.946 524.301 533.519 520.238 534.585 cv
cp
f
475.545 544.31 mo
474.609 542.644 475.201 540.536 476.866 539.602 cv
478.529 538.665 480.64 539.255 481.572 540.923 cv
482.508 542.587 481.918 544.696 480.252 545.63 cv
478.588 546.563 476.48 545.974 475.545 544.31 cv
cp
481.268 548.567 mo
484.932 546.509 486.232 541.876 484.175 538.217 cv
482.119 534.554 477.486 533.253 473.819 535.31 cv
470.162 537.364 468.858 542.001 470.916 545.663 cv
472.972 549.323 477.608 550.622 481.268 548.567 cv
cp
f
351.775 549.999 mo
353.163 551.309 353.233 553.491 351.928 554.886 cv
350.624 556.279 348.436 556.349 347.048 555.046 cv
345.653 553.739 345.579 551.552 346.886 550.157 cv
348.192 548.761 350.377 548.692 351.775 549.999 cv
cp
616.165 549.923 mo
599.329 534.059 li
597.607 526.483 li
570.987 499.845 li
453.063 499.845 li
436.639 518.021 li
380.93 518.021 li
373.366 525.624 li
355.436 525.624 li
347.504 534.286 li
347.504 545.346 li
346.325 546.347 345.212 548.179 344.336 549.665 cv
342.436 552.89 341.919 556.673 344.643 559.227 cv
347.371 561.782 351.65 561.646 354.207 558.921 cv
356.759 556.194 355.662 552.649 353.898 549.359 cv
353.254 548.154 352.139 546.482 350.961 545.477 cv
350.961 535.63 li
356.958 529.081 li
374.806 529.081 li
382.368 521.477 li
438.175 521.477 li
454.599 503.302 li
569.556 503.302 li
594.455 528.222 li
596.191 535.856 li
614.795 553.38 li
644.975 553.38 li
655.483 564.827 li
658.03 562.491 li
646.495 549.923 li
616.165 549.923 li
cp
f
445.945 547.075 mo
444.048 547.296 442.335 545.937 442.115 544.042 cv
441.893 542.144 443.25 540.427 445.151 540.208 cv
447.049 539.984 448.762 541.345 448.983 543.243 cv
449.2 545.142 447.842 546.854 445.945 547.075 cv
cp
613.991 556.746 mo
593.004 537.521 li
593.004 530.886 li
568.215 506.319 li
479.485 506.319 li
448.396 536.951 li
446.898 537.037 445.037 537.655 443.52 538.185 cv
439.989 539.419 437.148 541.974 437.581 545.685 cv
438.011 549.394 441.366 552.056 445.076 551.626 cv
448.788 551.194 450.237 547.779 451.02 544.126 cv
451.323 542.712 451.563 540.559 451.238 539.005 cv
480.904 509.776 li
566.795 509.776 li
589.547 532.329 li
589.547 539.044 li
612.647 560.202 li
642.051 560.202 li
647.397 564.952 li
649.692 562.366 li
643.364 556.746 li
613.991 556.746 li
cp
f
368.254 544.062 mo
366.845 545.352 364.657 545.255 363.368 543.845 cv
362.081 542.435 362.179 540.247 363.591 538.96 cv
364.998 537.671 367.186 537.769 368.473 539.177 cv
369.764 540.589 369.661 542.776 368.254 544.062 cv
cp
385.975 537.858 mo
374.085 537.858 li
373.887 537.858 373.696 537.885 373.508 537.916 cv
373.266 537.53 372.992 537.158 372.674 536.81 cv
369.841 533.712 365.032 533.496 361.933 536.329 cv
358.829 539.163 358.617 543.972 361.45 547.073 cv
364.282 550.171 369.091 550.388 372.193 547.552 cv
373.064 546.756 373.698 545.801 374.109 544.774 cv
385.975 544.774 li
387.882 544.774 389.432 543.226 389.432 541.317 cv
389.432 539.407 387.882 537.858 385.975 537.858 cv
cp
f
413.521 530.3 mo
414.163 528.503 416.143 527.567 417.934 528.208 cv
419.735 528.849 420.678 530.825 420.031 532.626 cv
419.395 534.427 417.415 535.362 415.614 534.722 cv
413.819 534.075 412.88 532.102 413.521 530.3 cv
cp
422.436 537.442 mo
422.268 537.043 422.025 536.698 421.741 536.402 cv
422.178 535.088 422.397 533.438 422.567 532.06 cv
423.023 528.347 421.987 524.669 418.468 523.413 cv
414.95 522.159 411.08 523.993 409.824 527.511 cv
408.571 531.029 410.993 533.842 413.923 536.155 cv
414.49 536.604 415.232 537.121 416.023 537.574 cv
415.721 538.375 415.708 539.286 416.067 540.138 cv
419.094 547.286 li
419.654 548.606 420.934 549.396 422.281 549.396 cv
422.73 549.396 423.186 549.309 423.624 549.122 cv
425.384 548.378 426.208 546.351 425.461 544.592 cv
422.436 537.442 li
cp
f
569.232 515.069 mo
563.787 510.714 li
501.259 510.714 li
491.217 521.712 li
491.217 549.104 li
475.957 564.157 li
478.385 566.621 li
494.674 550.55 li
494.674 523.054 li
502.785 514.171 li
562.576 514.171 li
565.773 516.729 li
565.773 552.294 li
576.566 564.79 li
579.184 562.529 li
569.232 551.009 li
569.232 515.069 li
cp
f
562.316 520.673 mo
557.291 516.763 li
503.802 516.763 li
497.338 524.569 li
497.338 552.144 li
487.179 562.444 li
489.64 564.874 li
500.796 553.563 li
500.796 525.815 li
505.429 520.222 li
556.107 520.222 li
558.858 522.364 li
558.858 555.698 li
569.052 566.569 li
571.574 564.206 li
562.316 554.331 li
562.316 520.673 li
cp
f
537.247 529.55 mo
531.807 522.815 li
509.828 522.815 li
503.318 531.075 li
503.318 553.892 li
495.15 562.468 li
497.656 564.852 li
506.775 555.274 li
506.775 532.274 li
511.508 526.273 li
530.157 526.273 li
533.789 530.773 li
533.789 549.706 li
551.619 566.642 li
553.999 564.136 li
537.247 548.222 li
537.247 529.55 li
cp
f
402.814 543.345 mo
402.814 549.011 398.333 553.602 392.809 553.602 cv
387.28 553.602 382.804 549.011 382.804 543.345 cv
382.804 537.679 387.28 533.085 392.809 533.085 cv
398.333 533.085 402.814 537.679 402.814 543.345 cv
cp
1 1 1 rgb
f
432.283 554.562 mo
432.283 560.227 427.806 564.821 422.278 564.821 cv
416.753 564.821 412.271 560.227 412.271 554.562 cv
412.271 548.896 416.753 544.302 422.278 544.302 cv
427.806 544.302 432.283 548.896 432.283 554.562 cv
cp
f
469.079 527.352 mo
469.079 533.019 464.602 537.612 459.074 537.612 cv
453.549 537.612 449.069 533.019 449.069 527.352 cv
449.069 521.687 453.549 517.093 459.074 517.093 cv
464.602 517.093 469.079 521.687 469.079 527.352 cv
cp
f
608.518 114.354 mo
606.608 114.354 605.061 112.806 605.061 110.895 cv
605.061 108.984 606.608 107.438 608.518 107.438 cv
610.43 107.438 611.977 108.984 611.977 110.895 cv
611.977 112.806 610.43 114.354 608.518 114.354 cv
cp
921.137 335.99 mo
911.098 324.914 li
807.313 324.914 li
726.639 244.453 li
726.639 128.701 li
716.696 117.031 li
716.696 106.668 li
707.135 95.1895 li
622.623 95.1895 li
613.008 104.803 li
611.401 104.461 608.944 104.997 607.407 105.52 cv
603.868 106.715 600.643 108.547 600.643 112.283 cv
600.643 116.015 603.67 119.047 607.407 119.047 cv
611.143 119.047 613.354 115.93 614.17 112.283 cv
614.481 110.904 614.823 109.255 614.846 107.856 cv
624.055 98.6484 li
705.514 98.6484 li
713.241 107.918 li
713.241 118.303 li
723.18 129.972 li
723.18 245.888 li
805.885 328.371 li
909.565 328.371 li
917.68 337.322 li
917.68 388.92 li
927.661 399.504 li
930.174 397.131 li
921.137 387.549 li
921.137 335.99 li
cp
0 .862745 1 rgb
f
726.983 116.555 mo
725.608 115.229 725.571 113.039 726.899 111.664 cv
728.223 110.293 730.413 110.254 731.788 111.58 cv
733.163 112.908 733.2 115.096 731.873 116.469 cv
730.545 117.842 728.358 117.881 726.983 116.555 cv
cp
927.188 334.01 mo
915.03 319.512 li
816.389 319.512 li
731.178 234.654 li
731.178 121.124 li
732.344 120.071 733.422 118.277 734.028 117.002 cv
735.623 113.627 736.545 110.033 733.858 107.439 cv
731.17 104.844 726.889 104.918 724.292 107.604 cv
721.696 110.293 722.407 114.049 724.461 117.172 cv
725.378 118.566 726.534 120.271 727.719 121.233 cv
727.719 236.092 li
814.961 322.969 li
913.415 322.969 li
923.731 335.268 li
923.731 385.039 li
937.61 399.516 li
940.106 397.121 li
927.188 383.648 li
927.188 334.01 li
cp
f
945.577 376.818 mo
943.983 377.875 941.838 377.44 940.782 375.846 cv
939.729 374.254 940.165 372.109 941.756 371.053 cv
943.348 370.002 945.493 370.435 946.549 372.025 cv
947.604 373.619 947.169 375.764 945.577 376.818 cv
cp
762.247 85.3711 mo
760.358 85.0801 759.065 83.3145 759.356 81.4258 cv
759.645 79.5391 761.409 78.2461 763.295 78.5352 cv
765.186 78.8242 766.481 80.5898 766.19 82.4805 cv
765.899 84.3652 764.133 85.6602 762.247 85.3711 cv
cp
917.961 306.977 mo
834.873 306.977 li
768.131 239.844 li
768.131 87.8418 li
767.872 87.8418 li
768.739 86.4199 768.569 83.4648 768.256 81.6738 cv
767.612 77.9922 766.292 74.5249 762.598 73.957 cv
758.907 73.3882 755.452 75.9219 754.881 79.6172 cv
754.315 83.3081 757.063 85.9688 760.542 87.3301 cv
761.813 87.8291 763.329 88.3945 764.674 88.6436 cv
764.674 241.271 li
833.434 310.434 li
916.534 310.434 li
943.612 337.373 li
943.612 366.565 li
942.196 367.305 940.67 368.907 939.768 370.068 cv
937.479 373.022 935.801 376.332 937.87 379.443 cv
939.93 382.559 944.128 383.41 947.243 381.348 cv
949.213 380.039 949.983 378.027 949.946 375.842 cv
951.84 378.293 li
963.063 378.293 li
963.063 374.834 li
953.54 374.834 li
947.069 366.463 li
947.069 335.94 li
917.961 306.977 li
cp
f
695.405 118.277 mo
693.497 118.242 691.977 116.668 692.008 114.76 cv
692.042 112.852 693.616 111.33 695.526 111.361 cv
697.436 111.398 698.957 112.971 698.922 114.881 cv
698.889 116.791 697.315 118.311 695.405 118.277 cv
cp
762.038 326.627 mo
763.411 327.953 763.448 330.143 762.123 331.516 cv
760.797 332.889 758.61 332.926 757.233 331.6 cv
755.86 330.273 755.819 328.084 757.149 326.711 cv
758.475 325.338 760.665 325.299 762.038 326.627 cv
cp
700.86 113.801 mo
699.727 110.242 697.954 106.988 694.215 106.92 cv
690.481 106.855 687.401 109.83 687.334 113.564 cv
687.27 117.301 690.35 119.566 693.979 120.447 cv
695.538 120.827 697.45 121.26 698.946 121.201 cv
698.653 121.513 li
714.104 136.131 li
714.104 151.043 li
702.868 162.785 li
702.868 241.576 li
757.327 294.74 li
757.327 322.574 li
756.366 323.635 755.508 325.095 754.995 326.18 cv
753.397 329.555 752.475 333.147 755.163 335.744 cv
757.85 338.336 762.131 338.262 764.729 335.578 cv
767.325 332.889 766.616 329.131 764.561 326.012 cv
763.51 324.412 762.147 322.404 760.784 321.577 cv
760.784 293.281 li
706.325 240.117 li
706.325 164.174 li
717.563 152.431 li
717.563 134.64 li
701.477 119.426 li
701.85 117.825 701.354 115.352 700.86 113.801 cv
cp
f
751.731 356.551 mo
751.346 358.422 749.516 359.623 747.645 359.236 cv
745.774 358.85 744.571 357.022 744.959 355.148 cv
745.346 353.281 747.176 352.078 749.047 352.465 cv
750.917 352.852 752.118 354.682 751.731 356.551 cv
cp
693.844 147.531 mo
692.471 146.205 692.432 144.018 693.76 142.643 cv
695.086 141.268 697.274 141.23 698.649 142.558 cv
700.024 143.883 700.061 146.072 698.733 147.447 cv
697.407 148.818 695.219 148.857 693.844 147.531 cv
cp
756.104 358.59 mo
756.86 354.932 754.254 352.135 750.85 350.596 cv
749.381 349.93 747.575 349.147 746.088 348.932 cv
746.088 293.295 li
697.68 244.887 li
697.68 152.399 li
698.983 151.424 700.223 149.386 700.887 147.98 cv
702.485 144.604 703.409 141.01 700.719 138.416 cv
698.034 135.82 693.753 135.895 691.153 138.58 cv
688.559 141.27 689.27 145.027 691.321 148.146 cv
692.248 149.557 693.419 151.287 694.616 152.242 cv
694.223 152.242 li
694.223 246.318 li
742.631 294.727 li
742.631 351.928 li
742.842 351.928 li
742.663 353.256 742.721 354.763 742.854 355.852 cv
743.309 359.559 744.45 363.088 748.108 363.844 cv
751.766 364.6 755.346 362.25 756.104 358.59 cv
cp
f
1020.46 383.227 mo
1020.07 385.092 1018.23 386.285 1016.36 385.887 cv
1014.49 385.49 1013.3 383.654 1013.7 381.787 cv
1014.1 379.92 1015.93 378.727 1017.8 379.125 cv
1019.67 379.522 1020.86 381.359 1020.46 383.227 cv
cp
731.026 86.8672 mo
729.118 86.832 727.598 85.2559 727.629 83.3472 cv
727.663 81.4395 729.237 79.918 731.147 79.9512 cv
733.057 79.9844 734.577 81.5581 734.544 83.4688 cv
734.51 85.377 732.936 86.8999 731.026 86.8672 cv
cp
1020.08 375.092 mo
1016.42 374.313 1013.96 377.086 1012.05 380.301 cv
1011.3 381.572 1010.37 383.589 1010.21 385.184 cv
1003.44 391.549 li
944.79 391.549 li
933.239 379.332 li
933.239 329.168 li
916.235 312.162 li
824.18 312.162 li
750.411 237.115 li
750.411 98.2734 li
737.213 87.2031 li
737.313 85.6572 736.899 83.6953 736.483 82.3901 cv
735.348 78.834 733.575 75.5742 729.836 75.5078 cv
726.102 75.4429 723.02 78.418 722.956 82.1563 cv
722.891 85.8901 725.969 88.1543 729.6 89.0352 cv
731.272 89.4404 733.344 89.9043 734.881 89.7607 cv
746.954 99.8867 li
746.954 238.529 li
822.731 315.621 li
914.803 315.621 li
929.782 330.6 li
929.782 380.709 li
943.299 395.006 li
1004.81 395.006 li
1012.31 387.958 li
1013.75 388.336 1015.68 388.341 1017.26 388.322 cv
1021 388.283 1024.51 386.77 1025.29 383.115 cv
1026.06 379.461 1023.73 375.867 1020.08 375.092 cv
cp
f
698.495 278.221 mo
698.495 287.152 li
701.952 287.152 li
701.952 278.221 li
698.495 278.221 li
cp
f
720.579 335.682 mo
721.905 334.309 724.094 334.273 725.469 335.598 cv
726.842 336.924 726.879 339.113 725.553 340.488 cv
724.229 341.861 722.038 341.898 720.663 340.57 cv
719.29 339.246 719.25 337.057 720.579 335.682 cv
cp
718.592 344.715 mo
721.278 347.309 725.561 347.232 728.159 344.549 cv
730.754 341.859 730.045 338.103 727.991 334.982 cv
726.942 333.389 725.584 331.39 724.227 330.559 cv
724.227 322.563 li
720.768 322.563 li
720.768 331.496 li
720.803 331.496 li
719.821 332.56 718.946 334.048 718.424 335.15 cv
716.829 338.527 715.905 342.117 718.592 344.715 cv
cp
f
818.459 340.592 mo
819.786 339.217 821.973 339.18 823.348 340.506 cv
824.721 341.836 824.76 344.022 823.432 345.397 cv
822.106 346.772 819.919 346.809 818.544 345.482 cv
817.169 344.156 817.131 341.967 818.459 340.592 cv
cp
824.047 347.918 mo
825.643 346.871 827.643 345.512 828.473 344.154 cv
836.465 344.154 li
836.465 340.697 li
827.534 340.697 li
827.534 340.732 li
826.471 339.752 824.983 338.876 823.881 338.353 cv
820.504 336.756 816.913 335.834 814.317 338.522 cv
811.721 341.209 811.795 345.492 814.483 348.09 cv
817.172 350.684 820.928 349.973 824.047 347.918 cv
cp
f
904.061 344.428 mo
902.151 344.428 900.604 342.877 900.604 340.967 cv
900.604 339.059 902.151 337.51 904.061 337.51 cv
905.971 337.51 907.518 339.059 907.518 340.967 cv
907.518 342.877 905.971 344.428 904.061 344.428 cv
cp
902.977 333.914 mo
898.776 333.914 895.373 337.32 895.373 341.522 cv
895.373 345.719 898.776 349.125 902.977 349.125 cv
907.174 349.125 910.579 345.719 910.579 341.522 cv
910.579 337.32 907.174 333.914 902.977 333.914 cv
cp
f
899.368 366.938 mo
897.457 366.938 895.911 365.387 895.911 363.478 cv
895.911 361.568 897.457 360.02 899.368 360.02 cv
901.278 360.02 902.825 361.568 902.825 363.478 cv
902.825 365.387 901.278 366.938 899.368 366.938 cv
cp
898.282 356.424 mo
894.082 356.424 890.68 359.828 890.68 364.029 cv
890.68 368.23 894.082 371.633 898.282 371.633 cv
902.481 371.633 905.885 368.23 905.885 364.029 cv
905.885 359.828 902.481 356.424 898.282 356.424 cv
cp
f
683.696 179.75 mo
683.696 185.004 679.442 189.26 674.188 189.26 cv
668.936 189.26 664.68 185.004 664.68 179.75 cv
664.68 174.498 668.936 170.242 674.188 170.242 cv
679.442 170.242 683.696 174.498 683.696 179.75 cv
1 1 1 rgb
f
804.858 364.029 mo
804.858 369.281 800.602 373.539 795.35 373.539 cv
790.098 373.539 785.84 369.281 785.84 364.029 cv
785.84 358.777 790.098 354.522 795.35 354.522 cv
800.602 354.522 804.858 358.777 804.858 364.029 cv
f
980.878 374.959 mo
980.878 380.211 976.623 384.467 971.368 384.467 cv
966.118 384.467 961.86 380.211 961.86 374.959 cv
961.86 369.707 966.118 365.449 971.368 365.449 cv
976.623 365.449 980.878 369.707 980.878 374.959 cv
f
710.299 271.117 mo
710.299 276.371 706.044 280.627 700.79 280.627 cv
695.538 280.627 691.282 276.371 691.282 271.117 cv
691.282 265.865 695.538 261.609 700.79 261.609 cv
706.044 261.609 710.299 265.865 710.299 271.117 cv
f
709.35 293.578 mo
709.35 298.83 705.094 303.086 699.842 303.086 cv
694.588 303.086 690.332 298.83 690.332 293.578 cv
690.332 288.328 694.588 284.07 699.842 284.07 cv
705.094 284.07 709.35 288.328 709.35 293.578 cv
f
732.575 315.461 mo
732.575 320.713 728.317 324.969 723.067 324.969 cv
717.813 324.969 713.557 320.713 713.557 315.461 cv
713.557 310.209 717.813 305.951 723.067 305.951 cv
728.317 305.951 732.575 310.209 732.575 315.461 cv
f
843.571 352.506 mo
838.317 352.506 834.061 348.248 834.061 342.996 cv
834.061 337.742 838.317 333.486 843.571 333.486 cv
848.823 333.486 853.081 337.742 853.081 342.996 cv
853.081 348.248 848.823 352.506 843.571 352.506 cv
f
677.227 219.645 mo
677.227 224.896 672.969 229.154 667.717 229.154 cv
662.465 229.154 658.207 224.896 658.207 219.645 cv
658.207 214.39 662.465 210.135 667.717 210.135 cv
672.969 210.135 677.227 214.39 677.227 219.645 cv
f
758.76 186.496 mo
758.76 191.75 754.504 196.004 749.25 196.004 cv
743.998 196.004 739.743 191.75 739.743 186.496 cv
739.743 181.244 743.998 176.986 749.25 176.986 cv
754.504 176.986 758.76 181.244 758.76 186.496 cv
f
993.973 82.8335 mo
992.065 82.7988 990.545 81.2246 990.577 79.3164 cv
990.61 77.4082 992.184 75.8867 994.094 75.9175 cv
996.004 75.9551 997.526 77.5273 997.491 79.4375 cv
997.457 81.3477 995.883 82.8672 993.973 82.8335 cv
cp
1060.61 291.184 mo
1061.98 292.51 1062.02 294.699 1060.69 296.072 cv
1059.37 297.445 1057.18 297.482 1055.8 296.156 cv
1054.43 294.83 1054.39 292.641 1055.72 291.268 cv
1057.04 289.895 1059.23 289.855 1060.61 291.184 cv
cp
999.428 78.3574 mo
998.295 74.7988 996.522 71.5444 992.784 71.4766 cv
989.049 71.4121 985.969 74.3867 985.903 78.1211 cv
985.838 81.8574 988.919 84.1226 992.547 85.0034 cv
994.106 85.3838 996.018 85.8164 997.514 85.7578 cv
997.221 86.0703 li
1012.67 100.688 li
1012.67 115.6 li
1001.44 127.342 li
1001.44 206.133 li
1055.9 259.297 li
1055.9 287.131 li
1054.93 288.191 1054.08 289.651 1053.56 290.736 cv
1051.97 294.111 1051.04 297.703 1053.73 300.301 cv
1056.42 302.893 1060.7 302.818 1063.3 300.135 cv
1065.89 297.445 1065.18 293.688 1063.13 290.568 cv
1062.08 288.969 1060.72 286.961 1059.35 286.134 cv
1059.35 257.837 li
1004.89 204.674 li
1004.89 128.73 li
1016.13 116.988 li
1016.13 99.1973 li
1000.05 83.9824 li
1000.42 82.3818 999.922 79.9082 999.428 78.3574 cv
cp
0 .862745 1 rgb
f
1050.3 321.107 mo
1049.91 322.978 1048.08 324.18 1046.21 323.793 cv
1044.34 323.406 1043.14 321.578 1043.53 319.705 cv
1043.91 317.838 1045.74 316.635 1047.62 317.022 cv
1049.48 317.408 1050.69 319.238 1050.3 321.107 cv
cp
992.413 112.087 mo
991.04 110.762 991 108.574 992.329 107.199 cv
993.655 105.824 995.842 105.787 997.217 107.115 cv
998.592 108.439 998.629 110.628 997.301 112.003 cv
995.975 113.374 993.788 113.414 992.413 112.087 cv
cp
1054.67 323.147 mo
1055.43 319.488 1052.82 316.691 1049.42 315.152 cv
1047.95 314.487 1046.14 313.704 1044.66 313.489 cv
1044.66 257.852 li
996.248 209.443 li
996.248 116.956 li
997.551 115.98 998.792 113.942 999.456 112.537 cv
1001.05 109.16 1001.98 105.566 999.288 102.973 cv
996.602 100.377 992.321 100.451 989.721 103.137 cv
987.128 105.826 987.838 109.584 989.889 112.703 cv
990.817 114.114 991.987 115.844 993.184 116.799 cv
992.792 116.799 li
992.792 210.874 li
1041.2 259.283 li
1041.2 316.484 li
1041.41 316.484 li
1041.23 317.813 1041.29 319.319 1041.42 320.408 cv
1041.88 324.115 1043.02 327.645 1046.68 328.4 cv
1050.33 329.156 1053.91 326.807 1054.67 323.147 cv
cp
f
997.063 242.777 mo
997.063 251.708 li
1000.52 251.708 li
1000.52 242.777 li
997.063 242.777 li
cp
f
1019.15 300.238 mo
1020.47 298.865 1022.66 298.83 1024.04 300.154 cv
1025.41 301.48 1025.45 303.67 1024.12 305.045 cv
1022.8 306.418 1020.61 306.455 1019.23 305.127 cv
1017.86 303.803 1017.82 301.613 1019.15 300.238 cv
cp
1017.16 309.272 mo
1019.85 311.865 1024.13 311.789 1026.73 309.105 cv
1029.32 306.416 1028.61 302.66 1026.56 299.539 cv
1025.51 297.945 1024.15 295.946 1022.8 295.115 cv
1022.8 287.119 li
1019.34 287.119 li
1019.34 296.053 li
1019.37 296.053 li
1018.39 297.116 1017.51 298.604 1016.99 299.707 cv
1015.4 303.084 1014.47 306.674 1017.16 309.272 cv
cp
f
1008.87 235.674 mo
1008.87 240.928 1004.61 245.184 999.358 245.184 cv
994.106 245.184 989.85 240.928 989.85 235.674 cv
989.85 230.422 994.106 226.165 999.358 226.165 cv
1004.61 226.165 1008.87 230.422 1008.87 235.674 cv
1 1 1 rgb
f
1007.92 258.135 mo
1007.92 263.387 1003.66 267.643 998.411 267.643 cv
993.157 267.643 988.901 263.387 988.901 258.135 cv
988.901 252.885 993.157 248.626 998.411 248.626 cv
1003.66 248.626 1007.92 252.885 1007.92 258.135 cv
f
1031.14 280.018 mo
1031.14 285.27 1026.89 289.525 1021.64 289.525 cv
1016.38 289.525 1012.13 285.27 1012.13 280.018 cv
1012.13 274.766 1016.38 270.508 1021.64 270.508 cv
1026.89 270.508 1031.14 274.766 1031.14 280.018 cv
f
148.341 83.7661 mo
150.252 83.7661 151.798 85.3145 151.798 87.2231 cv
151.798 88.8174 150.716 90.145 149.249 90.5459 cv
147.599 90.5977 li
146.046 90.2578 144.884 88.8789 144.884 87.2231 cv
144.884 85.3145 146.431 83.7661 148.341 83.7661 cv
cp
373.186 93.147 mo
375.097 93.147 376.645 94.7783 376.645 96.79 cv
376.645 98.8027 375.097 100.436 373.186 100.436 cv
371.278 100.436 369.729 98.8027 369.729 96.79 cv
369.729 94.7783 371.278 93.147 373.186 93.147 cv
cp
100.429 106.245 mo
118.208 106.245 li
135.2 87.8037 li
139.655 87.8037 li
139.668 91.9893 143.065 95.3789 147.255 95.3789 cv
148.92 95.3789 150.456 94.8369 151.709 93.9287 cv
153.317 93.8779 li
164.819 106.245 li
202.761 106.245 li
207.931 111.82 li
207.931 126.31 li
218.976 136.501 li
271.749 136.501 li
333.124 75.126 li
349.3 75.126 li
366.981 93.4053 li
367.007 94.9404 367.415 96.7334 367.81 97.9619 cv
369.007 101.694 370.839 105.095 374.573 105.095 cv
378.31 105.095 381.339 101.899 381.339 97.9619 cv
381.339 94.0254 378.22 91.6953 374.573 90.8311 cv
372.688 90.3867 370.298 89.8662 368.745 90.2559 cv
350.767 71.667 li
331.692 71.667 li
270.317 133.043 li
220.325 133.043 li
211.388 124.794 li
211.388 110.466 li
204.27 102.788 li
166.325 102.788 li
154.778 90.373 li
154.39 90.3857 li
154.686 89.5703 154.858 88.6943 154.858 87.7764 cv
154.858 83.5752 151.454 80.1709 147.255 80.1709 cv
144.292 80.1709 141.731 81.8701 140.478 84.3447 cv
133.685 84.3447 li
116.692 102.788 li
100.429 102.788 li
100.429 106.245 li
cp
0 .862745 1 rgb
f
401.534 151.483 mo
401.931 149.614 403.769 148.424 405.638 148.82 cv
407.505 149.218 408.694 151.054 408.298 152.921 cv
407.901 154.79 406.065 155.981 404.198 155.584 cv
402.329 155.186 401.138 153.351 401.534 151.483 cv
cp
400.542 157.74 mo
401.929 158.027 403.655 158.036 405.099 158.02 cv
408.831 157.977 412.343 156.466 413.122 152.81 cv
413.897 149.157 411.567 145.565 407.911 144.787 cv
404.257 144.009 401.795 146.782 399.888 149.995 cv
399.054 151.402 398.007 153.721 398.026 155.367 cv
383.821 170.214 li
338.337 170.214 li
310.097 197.587 li
169.163 197.587 li
141.5 170.214 li
100.429 170.214 li
100.429 173.671 li
140.079 173.671 li
167.741 201.045 li
311.499 201.045 li
339.737 173.671 li
385.302 173.671 li
400.542 157.74 li
cp
f
376.645 212.857 mo
376.645 214.769 375.097 216.316 373.186 216.316 cv
371.278 216.316 369.729 214.769 369.729 212.857 cv
369.729 210.949 371.278 209.4 373.186 209.4 cv
375.097 209.4 376.645 210.949 376.645 212.857 cv
cp
315.288 227.265 mo
338.341 202.773 li
360.251 202.773 li
367 209.101 li
366.909 210.658 367.364 212.651 367.81 213.971 cv
369.007 217.51 370.839 220.736 374.573 220.736 cv
378.31 220.736 381.339 217.707 381.339 213.971 cv
381.339 210.234 378.22 208.022 374.573 207.205 cv
372.918 206.835 370.878 206.414 369.351 206.564 cv
361.618 199.315 li
336.849 199.315 li
313.795 223.808 li
115.837 223.808 li
99.9111 208.721 li
97.5342 211.234 li
114.459 227.265 li
315.288 227.265 li
cp
f
339.589 220.513 mo
339.985 218.643 341.823 217.451 343.69 217.848 cv
345.558 218.246 346.749 220.084 346.351 221.949 cv
345.956 223.816 344.12 225.01 342.253 224.613 cv
340.384 224.215 339.19 222.379 339.589 220.513 cv
cp
331.522 233.605 mo
338.515 226.775 li
338.489 226.749 li
339.892 227.058 341.67 227.066 343.151 227.049 cv
346.886 227.006 350.397 225.494 351.177 221.84 cv
351.952 218.187 349.622 214.594 345.966 213.816 cv
342.311 213.037 339.851 215.811 337.942 219.023 cv
337.12 220.411 336.087 222.685 336.075 224.327 cv
330.114 230.146 li
112.979 230.146 li
99.9463 217.113 li
97.5 219.556 li
111.548 233.605 li
331.522 233.605 li
cp
f
373.186 240.519 mo
375.097 240.519 376.645 242.068 376.645 243.978 cv
376.645 245.888 375.097 247.436 373.186 247.436 cv
371.278 247.436 369.729 245.888 369.729 243.978 cv
369.729 242.068 371.278 240.519 373.186 240.519 cv
cp
333.278 239.945 mo
338.038 235.047 li
360.259 235.047 li
367.007 241.274 li
367.104 242.605 367.459 244.056 367.81 245.092 cv
369.007 248.631 370.839 251.855 374.573 251.855 cv
378.31 251.855 381.339 248.826 381.339 245.092 cv
381.339 241.355 378.22 239.143 374.573 238.326 cv
372.552 237.872 369.95 237.34 368.427 237.88 cv
361.61 231.588 li
336.577 231.588 li
331.815 236.488 li
109.235 236.488 li
99.9463 227.195 li
97.5 229.64 li
107.804 239.945 li
333.278 239.945 li
cp
f
376.645 275.098 mo
376.645 277.01 375.097 278.557 373.186 278.557 cv
371.278 278.557 369.729 277.01 369.729 275.098 cv
369.729 273.19 371.278 271.641 373.186 271.641 cv
375.097 271.641 376.645 273.19 376.645 275.098 cv
cp
100.429 257.808 mo
331.959 257.808 li
339.165 265.303 li
359.979 265.303 li
366.981 271.667 li
366.966 273.168 367.395 274.983 367.81 276.211 cv
369.007 279.75 370.839 282.977 374.573 282.977 cv
378.31 282.977 381.339 279.947 381.339 276.211 cv
381.339 272.475 378.22 270.264 374.573 269.445 cv
372.795 269.048 370.563 268.582 369.013 268.841 cv
361.315 261.844 li
340.638 261.844 li
333.431 254.352 li
100.429 254.352 li
100.429 257.808 li
cp
f
339.095 276.779 mo
340.444 275.428 342.634 275.428 343.983 276.779 cv
345.334 278.131 345.334 280.318 343.983 281.67 cv
342.634 283.02 340.444 283.02 339.095 281.67 cv
337.743 280.318 337.743 278.131 339.095 276.779 cv
cp
100.429 265.879 mo
316.509 265.879 li
334.286 280.693 li
335.282 281.952 337.186 283.152 338.522 283.813 cv
341.87 285.469 345.446 286.455 348.091 283.813 cv
350.731 281.17 350.731 276.887 348.089 274.248 cv
345.446 271.605 341.679 272.248 338.522 274.248 cv
337.37 274.977 336.007 275.862 335.011 276.797 cv
317.763 262.422 li
100.429 262.422 li
100.429 265.879 li
cp
f
402.644 188.218 mo
403.042 186.351 404.879 185.159 406.747 185.558 cv
408.614 185.954 409.806 187.789 409.407 189.656 cv
409.013 191.525 407.173 192.718 405.308 192.319 cv
403.44 191.923 402.247 190.086 402.644 188.218 cv
cp
100.429 271.066 mo
310.12 271.066 li
336.632 295.557 li
384.048 295.557 li
392.918 288 li
392.918 201.785 li
400.837 194.253 li
402.302 194.76 404.462 194.774 406.208 194.756 cv
409.94 194.715 413.452 193.202 414.231 189.547 cv
415.009 185.894 412.677 182.301 409.022 181.522 cv
405.368 180.746 402.905 183.519 400.999 186.732 cv
400.295 187.914 399.446 189.742 399.2 191.275 cv
399.081 191.149 li
389.462 200.304 li
389.462 286.402 li
382.772 292.1 li
337.985 292.1 li
311.474 267.609 li
100.429 267.609 li
100.429 271.066 li
cp
f
444.763 139.774 mo
443.413 141.126 441.226 141.126 439.874 139.774 cv
438.524 138.425 438.524 136.235 439.874 134.885 cv
441.226 133.536 443.413 133.536 444.763 134.885 cv
446.112 136.235 446.112 138.425 444.763 139.774 cv
cp
448.868 132.352 mo
446.228 129.71 442.458 130.351 439.302 132.352 cv
437.968 133.197 436.351 134.25 435.347 135.348 cv
346.382 135.348 li
296.821 185.487 li
175.483 185.487 li
145.517 156.96 li
100.429 156.96 li
100.429 160.417 li
144.136 160.417 li
174.103 188.944 li
298.267 188.944 li
347.827 138.806 li
435.071 138.806 li
436.069 140.063 437.968 141.26 439.302 141.919 cv
442.651 143.575 446.228 144.561 448.87 141.919 cv
451.511 139.276 451.511 134.994 448.868 132.352 cv
cp
f
374.875 157.136 mo
373.526 158.486 371.337 158.486 369.985 157.136 cv
368.638 155.785 368.638 153.596 369.985 152.246 cv
371.337 150.895 373.526 150.895 374.875 152.246 cv
376.226 153.596 376.226 155.785 374.875 157.136 cv
cp
369.413 149.714 mo
367.647 150.833 365.386 152.315 364.714 153.789 cv
339.2 153.789 li
301.165 190.673 li
172.036 190.673 li
144.375 163.876 li
100.429 163.876 li
100.429 167.333 li
142.974 167.333 li
170.636 194.131 li
302.567 194.131 li
340.603 157.247 li
366.257 157.247 li
367.247 158.08 368.472 158.813 369.413 159.279 cv
372.763 160.935 376.339 161.92 378.981 159.279 cv
381.624 156.638 381.622 152.355 378.979 149.714 cv
376.339 147.071 372.571 147.713 369.413 149.714 cv
cp
f
341.903 246.972 mo
343.255 245.625 345.442 245.625 346.793 246.972 cv
348.144 248.324 348.144 250.513 346.793 251.861 cv
345.442 253.213 343.255 253.213 341.903 251.861 cv
340.554 250.513 340.554 248.324 341.903 246.972 cv
cp
341.333 254.008 mo
344.681 255.664 348.255 256.648 350.899 254.008 cv
353.542 251.367 353.542 247.084 350.897 244.439 cv
348.255 241.801 344.489 242.441 341.333 244.439 cv
339.651 245.506 337.524 246.897 336.741 248.301 cv
100.429 248.301 li
100.429 251.758 li
337.927 251.758 li
338.954 252.68 340.31 253.503 341.333 254.008 cv
cp
f
338.55 187.357 mo
338.948 185.488 340.786 184.298 342.653 184.694 cv
344.52 185.091 345.712 186.929 345.313 188.796 cv
344.918 190.665 343.083 191.855 341.216 191.458 cv
339.349 191.061 338.153 189.224 338.55 187.357 cv
cp
342.114 193.895 mo
345.851 193.852 349.358 192.34 350.14 188.685 cv
350.916 185.03 348.583 181.439 344.929 180.661 cv
341.276 179.883 338.813 182.657 336.907 185.87 cv
336.065 187.285 335.011 189.622 335.043 191.27 cv
334.942 191.166 li
319.599 206.231 li
165.423 206.231 li
138.048 178.858 li
100.429 178.858 li
100.429 182.315 li
136.616 182.315 li
163.991 209.689 li
321.013 209.689 li
337.364 193.635 li
337.293 193.563 li
338.718 193.908 340.579 193.911 342.114 193.895 cv
cp
f
448.739 119.101 mo
448.345 120.968 446.505 122.16 444.64 121.761 cv
442.772 121.364 441.579 119.53 441.976 117.661 cv
442.374 115.792 444.212 114.601 446.079 114.997 cv
447.946 115.395 449.138 117.233 448.739 119.101 cv
cp
453.563 118.989 mo
454.341 115.335 452.007 111.743 448.354 110.966 cv
444.7 110.186 442.237 112.962 440.331 116.175 cv
439.341 117.841 438.058 120.783 438.606 122.37 cv
430.815 130.162 li
340.038 130.162 li
292.495 178.858 li
177.839 178.858 li
151.333 150.909 li
100.429 150.909 li
100.429 154.366 li
149.847 154.366 li
176.354 182.315 li
293.95 182.315 li
341.493 133.62 li
432.247 133.62 li
441.81 124.056 li
443.019 124.208 444.372 124.211 445.54 124.198 cv
449.272 124.155 452.784 122.641 453.563 118.989 cv
cp
f
128.452 213.51 mo
128.452 215.418 126.905 216.967 124.995 216.967 cv
123.084 216.967 121.536 215.418 121.536 213.51 cv
121.536 211.601 123.084 210.053 124.995 210.053 cv
126.905 210.053 128.452 211.601 128.452 213.51 cv
cp
116.306 214.062 mo
116.306 218.262 119.709 221.664 123.909 221.664 cv
128.106 221.664 131.513 218.262 131.513 214.062 cv
131.513 209.861 128.106 206.455 123.909 206.455 cv
119.709 206.455 116.306 209.861 116.306 214.062 cv
cp
f
159.454 213.51 mo
159.454 215.418 157.907 216.967 155.997 216.967 cv
154.087 216.967 152.538 215.418 152.538 213.51 cv
152.538 211.601 154.087 210.053 155.997 210.053 cv
157.907 210.053 159.454 211.601 159.454 213.51 cv
cp
147.308 214.062 mo
147.308 218.262 150.71 221.664 154.911 221.664 cv
159.108 221.664 162.515 218.262 162.515 214.062 cv
162.515 209.861 159.108 206.455 154.911 206.455 cv
150.71 206.455 147.308 209.861 147.308 214.062 cv
cp
f
339.959 87.3584 mo
341.87 87.3584 343.416 88.9092 343.416 90.8193 cv
343.416 92.728 341.87 94.2764 339.959 94.2764 cv
338.05 94.2764 336.501 92.728 336.501 90.8193 cv
336.501 88.9092 338.05 87.3584 339.959 87.3584 cv
cp
100.429 145.976 mo
174.263 145.976 li
181.739 152.003 li
182.661 152.746 183.81 153.151 184.995 153.151 cv
279.679 153.151 li
281.036 153.151 282.337 152.62 283.308 151.669 cv
337.28 98.8047 li
337.793 98.9141 338.327 98.9756 338.874 98.9756 cv
343.071 98.9756 346.478 95.5703 346.478 91.3711 cv
346.478 87.1709 343.071 83.7642 338.874 83.7642 cv
335.125 83.7642 332.019 86.4805 331.392 90.0498 cv
277.56 142.778 li
186.825 142.778 li
179.349 136.751 li
178.427 136.008 177.278 135.602 176.093 135.602 cv
100.429 135.602 li
100.429 145.976 li
cp
f
187.811 171.391 mo
185.899 171.391 184.353 169.843 184.353 167.935 cv
184.353 166.022 185.899 164.474 187.811 164.474 cv
189.72 164.474 191.269 166.022 191.269 167.935 cv
191.269 169.843 189.72 171.391 187.811 171.391 cv
cp
285.925 164.177 mo
193.431 164.903 li
192.151 162.509 189.628 160.88 186.724 160.88 cv
182.524 160.88 179.12 164.284 179.12 168.484 cv
179.12 172.686 182.524 176.089 186.724 176.089 cv
188.974 176.089 190.987 175.107 192.379 173.555 cv
289.497 172.794 li
335.403 127.542 li
407.532 127.015 li
415.938 120.423 li
410.603 113.622 li
404.52 118.395 li
331.834 118.921 li
285.925 164.177 li
cp
f
457.751 253.775 mo
459.405 253.775 460.751 255.113 460.751 256.771 cv
460.751 258.426 459.405 259.768 457.751 259.768 cv
456.097 259.768 454.753 258.426 454.753 256.771 cv
454.753 255.113 456.097 253.775 457.751 253.775 cv
cp
398.379 313.682 mo
398.386 313.682 398.394 313.682 398.401 313.682 cv
399.964 313.682 401.462 313.078 402.589 311.998 cv
413.257 301.768 li
414.382 300.69 415.046 299.217 415.114 297.658 cv
416.022 276.315 li
428.815 262.978 li
459.056 262.978 li
462.399 262.978 465.106 260.271 465.106 256.928 cv
465.106 253.586 462.399 250.877 459.056 250.877 cv
426.233 250.877 li
424.585 250.877 423.009 251.551 421.868 252.74 cv
405.706 269.586 li
404.688 270.648 404.093 272.045 404.028 273.518 cv
403.126 294.717 li
395.978 301.572 li
330.263 301.336 li
308.927 278.934 li
307.786 277.734 306.202 277.057 304.545 277.057 cv
101.731 277.057 li
98.3897 277.057 95.6807 279.766 95.6807 283.107 cv
95.6807 286.451 98.3897 289.158 101.731 289.158 cv
301.952 289.158 li
323.278 311.551 li
324.415 312.746 325.991 313.424 327.64 313.43 cv
398.379 313.682 li
cp
f
185.604 140.789 mo
185.604 146.04 181.349 150.298 176.095 150.298 cv
170.843 150.298 166.587 146.04 166.587 140.789 cv
166.587 135.534 170.843 131.28 176.095 131.28 cv
181.349 131.28 185.604 135.534 185.604 140.789 cv
1 1 1 rgb
f
428.36 113.447 mo
428.36 118.702 424.104 122.957 418.853 122.957 cv
413.601 122.957 409.343 118.702 409.343 113.447 cv
409.343 108.197 413.601 103.938 418.853 103.938 cv
424.104 103.938 428.36 108.197 428.36 113.447 cv
f
108.29 199.03 mo
108.29 204.313 104.007 208.596 98.7236 208.596 cv
93.4385 208.596 89.1572 204.313 89.1572 199.03 cv
89.1572 193.747 93.4385 189.464 98.7236 189.464 cv
104.007 189.464 108.29 193.747 108.29 199.03 cv
cp
f
225.927 576.992 mo
226.671 575.232 228.698 574.41 230.458 575.154 cv
232.218 575.898 233.038 577.926 232.293 579.688 cv
231.55 581.447 229.52 582.269 227.763 581.523 cv
226.003 580.777 225.183 578.748 225.927 576.992 cv
cp
574.063 663.785 mo
575.921 663.338 577.784 664.484 578.233 666.338 cv
578.679 668.193 577.538 670.063 575.681 670.508 cv
573.823 670.955 571.956 669.815 571.511 667.955 cv
571.065 666.102 572.206 664.232 574.063 663.785 cv
cp
225.991 582.857 mo
226.909 583.675 228.31 584.709 229.638 585.302 cv
234.274 591.846 li
303.353 661.221 li
303.856 661.729 li
342.415 661.873 li
358.909 680.316 li
567.29 680.316 li
572.561 674.24 li
572.493 674.181 li
574.032 674.002 575.979 673.086 577.542 672.318 cv
580.897 670.67 583.411 667.791 582.534 664.158 cv
582.306 663.203 581.88 662.35 581.317 661.619 cv
581.337 661.533 581.366 661.453 581.378 661.367 cv
582.89 650.994 li
583.163 649.102 581.857 647.346 579.966 647.072 cv
578.067 646.797 576.321 648.104 576.046 649.994 cv
574.718 659.1 li
574.604 659.121 574.491 659.137 574.378 659.164 cv
570.743 660.041 569.718 663.606 569.382 667.326 cv
569.259 668.703 569.276 670.745 569.726 672.237 cv
565.712 676.859 li
360.456 676.859 li
343.964 658.42 li
305.298 658.275 li
237.013 589.729 li
233.317 584.514 li
234.116 583.175 234.542 581.007 234.858 579.266 cv
235.522 575.584 234.706 571.856 231.265 570.4 cv
227.823 568.943 223.854 570.549 222.395 573.99 cv
220.944 577.434 223.198 580.377 225.991 582.857 cv
cp
0 .862745 1 rgb
f
229.505 637.139 mo
230.69 635.639 232.862 635.385 234.36 636.57 cv
235.864 637.754 236.116 639.93 234.931 641.428 cv
233.745 642.922 231.571 643.178 230.073 641.994 cv
228.577 640.809 228.319 638.635 229.505 637.139 cv
cp
448.905 705.963 mo
450.188 704.547 452.374 704.435 453.792 705.717 cv
455.206 706.996 455.317 709.184 454.038 710.6 cv
452.759 712.018 450.573 712.125 449.155 710.846 cv
447.733 709.566 447.626 707.377 448.905 705.963 cv
cp
235.749 643.488 mo
236.899 642.742 238.474 641.486 239.374 640.225 cv
260.073 640.225 li
292.186 672.662 li
334.921 672.662 li
351.778 691.553 li
408.798 691.553 li
424.356 710.139 li
444.186 710.139 li
445.168 711.365 447.132 712.512 448.71 713.404 cv
451.968 715.242 455.761 715.693 458.263 712.922 cv
460.769 710.15 460.556 705.873 457.782 703.365 cv
455.011 700.863 451.489 702.029 448.228 703.852 cv
447.093 704.485 445.543 705.551 444.55 706.682 cv
425.972 706.682 li
410.411 688.096 li
353.329 688.096 li
336.472 669.203 li
293.628 669.203 li
261.515 636.768 li
239.198 636.768 li
238.101 635.683 236.186 634.732 234.638 633.988 cv
231.265 632.367 227.452 632.168 225.136 635.1 cv
222.819 638.029 223.311 642.281 226.243 644.602 cv
229.177 646.916 232.612 645.521 235.749 643.488 cv
cp
f
609.077 664.955 mo
609.077 666.863 607.53 668.412 605.62 668.412 cv
603.707 668.412 602.161 666.863 602.161 664.955 cv
602.161 663.045 603.707 661.494 605.62 661.494 cv
607.53 661.494 609.077 663.045 609.077 664.955 cv
cp
596.929 665.506 mo
596.929 669.705 600.335 673.111 604.53 673.111 cv
608.731 673.111 612.135 669.705 612.135 665.506 cv
612.135 661.305 608.731 657.9 604.53 657.9 cv
600.335 657.9 596.929 661.305 596.929 665.506 cv
cp
f
662.307 683.756 mo
662.307 685.666 660.76 687.213 658.848 687.213 cv
656.938 687.213 655.389 685.666 655.389 683.756 cv
655.389 681.846 656.938 680.295 658.848 680.295 cv
660.76 680.295 662.307 681.846 662.307 683.756 cv
cp
650.161 684.309 mo
650.161 688.506 653.563 691.912 657.762 691.912 cv
661.961 691.912 665.366 688.506 665.366 684.309 cv
665.366 680.107 661.961 676.701 657.762 676.701 cv
653.563 676.701 650.161 680.107 650.161 684.309 cv
cp
f
544.642 705.699 mo
544.642 703.787 546.188 702.24 548.101 702.24 cv
550.011 702.24 551.558 703.787 551.558 705.699 cv
551.558 707.607 550.011 709.158 548.101 709.158 cv
546.188 709.158 544.642 707.607 544.642 705.699 cv
cp
554.616 706.252 mo
554.616 702.049 551.214 698.644 547.013 698.644 cv
542.815 698.644 539.411 702.049 539.411 706.252 cv
539.411 710.449 542.815 713.854 547.013 713.854 cv
551.214 713.854 554.616 710.449 554.616 706.252 cv
cp
f
566.688 740.705 mo
568.599 740.705 570.146 742.254 570.146 744.166 cv
570.146 746.074 568.599 747.625 566.688 747.625 cv
564.778 747.625 563.232 746.074 563.232 744.166 cv
563.232 742.254 564.778 740.705 566.688 740.705 cv
cp
200.956 644.232 mo
199.046 644.225 197.505 642.672 197.513 640.762 cv
197.52 638.854 199.073 637.31 200.981 637.318 cv
202.892 637.328 204.431 638.879 204.425 640.791 cv
204.418 642.701 202.864 644.242 200.956 644.232 cv
cp
565.601 752.32 mo
569.802 752.32 573.206 748.918 573.206 744.717 cv
573.206 740.516 569.802 737.113 565.601 737.113 cv
562.69 737.113 560.163 738.752 558.884 741.158 cv
530.042 712.529 li
522.413 712.529 li
506.356 717.127 li
499.399 719.217 li
412.134 719.217 li
390.954 694.264 li
351.556 694.264 li
334.7 676.859 li
291.011 676.859 li
265.942 652.594 li
214.575 652.594 li
207.259 644.541 li
207.388 643.024 206.985 641.031 206.627 639.41 cv
205.821 635.76 203.626 632.635 199.89 632.621 cv
196.153 632.607 193.112 635.621 193.097 639.357 cv
193.087 643.094 196.302 644.94 199.837 646.148 cv
201.177 646.61 203.224 647.081 204.796 646.97 cv
213.046 656.051 li
264.544 656.051 li
289.612 680.316 li
333.233 680.316 li
350.091 697.721 li
389.354 697.721 li
410.534 722.674 li
499.651 722.674 li
522.659 715.986 li
528.616 715.986 li
558.024 745.172 li
558.261 749.16 561.558 752.32 565.601 752.32 cv
cp
f
538.319 745.856 mo
536.452 746.279 534.601 745.111 534.177 743.248 cv
533.755 741.389 534.925 739.535 536.784 739.111 cv
538.647 738.69 540.499 739.856 540.925 741.717 cv
541.347 743.582 540.179 745.434 538.319 745.856 cv
cp
536.647 736.006 mo
532.55 736.938 529.983 741.01 530.913 745.106 cv
531.843 749.201 535.917 751.766 540.017 750.836 cv
544.108 749.906 546.675 745.83 545.747 741.738 cv
544.815 737.641 540.741 735.076 536.647 736.006 cv
cp
f
451.12 733.906 mo
450.368 732.148 451.183 730.115 452.938 729.367 cv
454.694 728.615 456.726 729.428 457.479 731.188 cv
458.229 732.94 457.415 734.973 455.659 735.725 cv
453.903 736.477 451.87 735.66 451.12 733.906 cv
cp
460.509 730.488 mo
458.856 726.627 454.39 724.836 450.526 726.488 cv
446.663 728.141 444.874 732.607 446.524 736.471 cv
448.177 740.332 452.647 742.123 456.511 740.471 cv
457.28 740.142 457.962 739.697 458.556 739.172 cv
467.954 739.172 li
468.909 739.172 469.683 738.396 469.683 737.441 cv
469.683 736.488 468.909 735.713 467.954 735.713 cv
460.784 735.713 li
461.296 734.053 461.247 732.211 460.509 730.488 cv
cp
f
110.749 481.842 mo
110.769 479.934 112.331 478.4 114.241 478.42 cv
116.149 478.44 117.681 480 117.661 481.912 cv
117.645 483.822 116.083 485.355 114.173 485.336 cv
112.263 485.313 110.729 483.752 110.749 481.842 cv
cp
800.387 748.098 mo
802.838 745.66 li
729.373 671.891 li
728.868 671.381 li
624.184 671.381 li
611.469 682.91 li
357.226 682.91 li
340.368 663.775 li
300.548 663.775 li
258.62 621.102 li
190.737 621.102 li
154.56 586.141 li
154.56 562.394 li
122.323 530.891 li
121.366 489.621 li
121.356 489.307 li
120.28 486.63 li
120.793 485.101 120.3 482.54 119.874 480.547 cv
119.089 476.891 116.911 473.754 113.177 473.715 cv
109.44 473.682 106.382 476.674 106.343 480.412 cv
106.31 484.147 109.515 486.012 113.042 487.242 cv
114.149 487.632 115.737 488.027 117.145 488.1 cv
117.917 490.016 li
118.896 532.379 li
151.103 563.85 li
151.103 587.607 li
189.339 624.56 li
257.171 624.56 li
299.099 667.234 li
338.806 667.234 li
355.661 686.367 li
612.803 686.367 li
625.518 674.84 li
727.434 674.84 li
800.387 748.098 li
cp
f
378.431 725.369 mo
380.317 725.646 381.63 727.398 381.353 729.289 cv
381.075 731.178 379.319 732.486 377.431 732.211 cv
375.54 731.935 374.233 730.18 374.511 728.291 cv
374.784 726.398 376.54 725.092 378.431 725.369 cv
cp
173.907 640.578 mo
172.628 641.998 170.442 642.115 169.024 640.838 cv
167.604 639.563 167.487 637.373 168.765 635.957 cv
170.042 634.537 172.226 634.42 173.647 635.699 cv
175.069 636.975 175.185 639.162 173.907 640.578 cv
cp
184.735 636.768 mo
178.89 636.768 li
178.042 635.402 175.829 634.115 174.085 633.137 cv
170.823 631.307 167.032 630.865 164.534 633.644 cv
162.036 636.422 162.259 640.697 165.038 643.199 cv
167.817 645.693 171.335 644.519 174.593 642.69 cv
175.601 642.124 176.933 641.215 177.913 640.225 cv
183.239 640.225 li
230.255 690.258 li
335.341 690.258 li
352.112 709.545 li
372.241 724.138 li
371.89 725.624 372.011 727.675 372.138 729.346 cv
372.419 733.074 374.155 736.475 377.853 737.016 cv
381.548 737.555 384.985 734.998 385.526 731.303 cv
386.061 727.602 383.136 725.324 379.806 723.629 cv
378.558 722.992 376.634 722.25 375.077 722.123 cv
375.171 721.99 li
354.591 707.127 li
336.917 686.799 li
231.751 686.799 li
184.735 636.768 li
cp
f
256.927 665.951 mo
258.28 664.602 260.47 664.598 261.819 665.949 cv
263.171 667.297 263.171 669.488 261.823 670.838 cv
260.472 672.19 258.282 672.19 256.931 670.842 cv
256.435 670.346 256.124 669.736 255.991 669.098 cv
256.04 668.72 256.022 668.351 255.954 667.995 cv
256.04 667.248 256.354 666.523 256.927 665.951 cv
cp
252.03 672.063 mo
252.212 672.09 252.395 672.104 252.575 672.104 cv
253.079 672.104 253.561 671.981 254.001 671.779 cv
254.772 672.357 255.61 672.898 256.36 673.373 cv
259.52 675.373 263.286 676.012 265.925 673.371 cv
268.567 670.729 268.567 666.445 265.923 663.805 cv
263.276 661.164 259.706 662.15 256.356 663.809 cv
255.585 664.188 254.624 664.751 253.757 665.4 cv
253.55 665.324 253.335 665.266 253.11 665.231 cv
243.173 663.658 li
241.288 663.369 239.517 664.648 239.216 666.537 cv
238.919 668.422 240.206 670.193 242.093 670.49 cv
252.03 672.063 li
cp
f
626.764 698.527 mo
626.764 696.617 628.309 695.068 630.221 695.068 cv
632.131 695.068 633.678 696.617 633.678 698.527 cv
633.678 700.435 632.131 701.984 630.221 701.984 cv
628.309 701.984 626.764 700.435 626.764 698.527 cv
cp
809.209 774.51 mo
735.588 700.168 li
733.963 698.527 731.754 697.606 729.446 697.606 cv
639.975 697.606 li
638.813 697.606 637.706 697.838 636.692 698.255 cv
636.282 694.44 633.055 691.473 629.133 691.473 cv
624.936 691.473 621.534 694.877 621.534 699.08 cv
621.534 703.279 624.936 706.682 629.133 706.682 cv
629.901 706.682 630.639 706.565 631.338 706.354 cv
631.395 711.078 635.237 714.894 639.975 714.894 cv
725.842 714.894 li
796.924 786.672 li
798.616 788.383 800.84 789.236 803.067 789.236 cv
805.266 789.236 807.463 788.4 809.151 786.732 cv
812.544 783.373 812.569 777.9 809.209 774.51 cv
cp
f
891.719 752.156 mo
893.629 752.156 895.176 753.703 895.176 755.613 cv
895.176 757.523 893.629 759.071 891.719 759.071 cv
889.807 759.071 888.26 757.523 888.26 755.613 cv
888.26 753.703 889.807 752.156 891.719 752.156 cv
cp
879.725 744.926 mo
885.553 751.633 li
885.399 753.219 885.873 755.342 886.342 756.723 cv
887.538 760.264 889.368 763.489 893.106 763.489 cv
896.84 763.489 899.87 760.46 899.87 756.723 cv
899.87 752.988 896.75 750.776 893.106 749.959 cv
891.534 749.606 889.604 749.205 888.104 749.295 cv
883.182 743.633 li
883.182 574.482 li
913.438 544.743 li
913.438 496.557 li
909.981 496.557 li
909.981 543.294 li
879.725 573.031 li
879.725 744.926 li
cp
f
1075.89 1046.25 mo
1077.56 1047.18 1078.16 1049.29 1077.23 1050.96 cv
1076.3 1052.62 1074.19 1053.22 1072.52 1052.29 cv
1070.85 1051.36 1070.26 1049.26 1071.19 1047.59 cv
1072.12 1045.92 1074.22 1045.32 1075.89 1046.25 cv
cp
890.959 584.357 mo
891.827 725.563 li
891.832 726.251 li
943.821 780.299 li
1002.03 780.299 li
1007.66 786.046 li
1007.66 971.188 li
1057.05 1020.87 li
1058.78 1030.64 li
1070.54 1043.11 li
1069.75 1044.43 1069.21 1046.31 1068.97 1047.63 cv
1068.29 1051.3 1068.32 1055.01 1071.58 1056.83 cv
1074.84 1058.65 1078.96 1057.48 1080.78 1054.21 cv
1082.6 1050.95 1080.96 1047.5 1078.17 1045.01 cv
1076.84 1043.82 1075.15 1042.35 1073.68 1041.8 cv
1073.88 1041.61 li
1062 1029.02 li
1060.27 1019.2 li
1011.12 969.764 li
1011.12 784.635 li
1003.49 776.841 li
945.294 776.841 li
895.28 724.85 li
894.424 585.771 li
953.202 526.286 li
953.202 496.557 li
949.743 496.557 li
949.743 524.868 li
891.463 583.848 li
890.959 584.357 li
cp
f
1110.2 1054.22 mo
1108.45 1054.99 1106.41 1054.2 1105.64 1052.45 cv
1104.87 1050.7 1105.66 1048.66 1107.41 1047.89 cv
1109.16 1047.13 1111.2 1047.92 1111.97 1049.67 cv
1112.74 1051.42 1111.95 1053.46 1110.2 1054.22 cv
cp
901.623 592.428 mo
901.623 716.906 li
901.623 718.047 902.073 719.144 902.879 719.954 cv
948.118 765.479 li
948.93 766.296 950.032 766.755 951.184 766.755 cv
1011.06 766.755 li
1020.91 776.615 li
1020.91 959.523 li
1020.91 960.668 1021.37 961.766 1022.18 962.576 cv
1105.16 1045.85 li
1105.37 1046.06 1105.6 1046.24 1105.83 1046.4 cv
1105.76 1046.46 1105.69 1046.53 1105.62 1046.59 cv
1102.87 1049.11 1100.65 1052.08 1102.15 1055.5 cv
1103.65 1058.92 1107.65 1060.47 1111.07 1058.97 cv
1114.49 1057.46 1115.26 1053.72 1114.54 1050.05 cv
1114.12 1047.93 1113.54 1045.18 1112.33 1044.08 cv
1112.79 1042.6 1112.46 1040.93 1111.29 1039.75 cv
1029.56 957.738 li
1029.56 774.823 li
1029.56 773.677 1029.1 772.578 1028.29 771.768 cv
1015.9 759.377 li
1015.09 758.566 1013.99 758.11 1012.85 758.11 cv
952.983 758.11 li
910.266 715.125 li
910.266 594.219 li
970.375 534.107 li
971.186 533.298 971.641 532.199 971.641 531.053 cv
971.641 496.557 li
971.641 494.17 969.707 492.234 967.319 492.234 cv
964.932 492.234 962.997 494.17 962.997 496.557 cv
962.997 529.261 li
902.889 589.371 li
902.079 590.182 901.623 591.281 901.623 592.428 cv
cp
f
1039.48 686.065 mo
1039.88 684.196 1041.71 683.006 1043.58 683.402 cv
1045.45 683.8 1046.64 685.637 1046.24 687.504 cv
1045.84 689.373 1044.01 690.563 1042.14 690.166 cv
1040.27 689.769 1039.08 687.932 1039.48 686.065 cv
cp
916.317 603.523 mo
916.317 686.784 li
937.643 708.396 li
937.643 726.241 li
960.526 750.331 li
983.372 750.331 li
998.297 735.335 li
999.792 733.629 li
1023.39 733.917 li
1032.44 724.215 li
1032.44 698.829 li
1038.22 692.271 li
1039.64 692.616 1041.5 692.619 1043.04 692.602 cv
1046.77 692.56 1050.29 691.048 1051.06 687.393 cv
1051.84 683.738 1049.51 680.148 1045.86 679.369 cv
1042.2 678.591 1039.74 681.366 1037.83 684.579 cv
1037.06 685.881 1036.1 687.969 1035.98 689.58 cv
1028.98 697.525 li
1028.98 722.851 li
1021.9 730.438 li
998.243 730.15 li
995.772 732.975 li
981.936 746.872 li
962.012 746.872 li
941.1 724.859 li
941.1 706.977 li
919.776 685.366 li
919.776 604.956 li
983.875 540.921 li
984.383 540.411 li
984.381 539.691 li
984.381 539.493 984.323 519.725 984.381 511.76 cv
984.399 509.566 984.915 508.006 985.917 507.123 cv
987.092 506.083 988.692 506.254 988.692 506.256 cv
1011.69 506.272 li
1015.43 506.272 1018.28 505.216 1020.15 503.129 cv
1022.73 500.252 1022.36 496.528 1022.35 496.372 cv
1018.91 496.731 li
1018.91 496.755 1019.11 499.134 1017.56 500.843 cv
1016.37 502.15 1014.39 502.815 1011.69 502.815 cv
989.028 502.815 li
988.354 502.747 985.813 502.643 983.682 504.482 cv
981.878 506.043 980.95 508.48 980.924 511.732 cv
980.87 518.851 980.913 535.339 980.922 538.982 cv
916.317 603.523 li
cp
f
1065.34 989.201 mo
1065.34 994.457 1061.08 998.711 1055.83 998.711 cv
1050.57 998.711 1046.32 994.457 1046.32 989.201 cv
1046.32 983.951 1050.57 979.693 1055.83 979.693 cv
1061.08 979.693 1065.34 983.951 1065.34 989.201 cv
1 1 1 rgb
f
1068.03 1028.77 mo
1068.03 1034.03 1063.77 1038.28 1058.52 1038.28 cv
1053.27 1038.28 1049.01 1034.03 1049.01 1028.77 cv
1049.01 1023.52 1053.27 1019.26 1058.52 1019.26 cv
1063.77 1019.26 1068.03 1023.52 1068.03 1028.77 cv
f
1010.11 731.71 mo
1010.11 736.963 1005.85 741.219 1000.6 741.219 cv
995.348 741.219 991.092 736.963 991.092 731.71 cv
991.092 726.457 995.348 722.201 1000.6 722.201 cv
1005.85 722.201 1010.11 726.457 1010.11 731.71 cv
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.1.0
%%For: (user) ()
%%Title: (plata_3.eps)
%%CreationDate: 5/12/2016 1:10 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Bj2NJdOoo2cZSo1OP:]kODA2'gB[p?2DuEA^0i)jO:dYWV7Sl4T&5"VNlWb_#m!IjHR(=lkC*3b;!o3J6q6"G]@uU/.^d:d
%C@eXJgk&9#^LLD,qN%2RIf%aQ]?b6(eP<]<Q+&<fMkYZ)5TFKFCmKE\eOFb\h(2VhS[E(Cg$UERep`o'\X0.&qPBGR:p&?=J*'et
%V=H)..;\hc)mt!7UY.g]F`Tk*@\A(`S_nOf(Cbo0)'0i8Se5Y>g?m=OBPa8apZ\\<,sh?V1S8ika0e[O?0^"0NA%VO>1a6oke1`3
%,X9X`M`I:+2a]glMUeJ"YMPO)F8]/3B6Q7h+m*h"/O2AP/"h`8rh$%d-i^KI"JGe8-YtV$rtkZXEc00dH$4@gR)>$jJX,hSqUn^d
%luNg?1;f$g$1:m@>4ke&aqkl@4o)Vlq1$V<kf.]LgsEI!]LV:p*%N,O\L7sZSjWMfj1OcZ`r17er_]`q\X7_E/QJffFe+50GH^^Y
%]!_`/e.91)HF<^K;<uZP"Up=N/m^FdeN1,,&$Snana.56jo;=rqka"+[7eToXS6ZKMn(7(j]1bcX7W_*`3[u>gT>4#^\O1^8im>G
%g6qEj4PQ&aXLq4++"]?jF+NB0mP%j9s,X90k8RH#?p'CFk6Z-64+rsTmFlQ^Z09,JJoMbYP^V8g<VdOO3k7f\_aET3j8WTeIqmqa
%%,Gg/Tm's-#AYt%gpci-pFu8dUU&H5_i8d-cW.jY"qa8:H)uJ^s+>fr+aP`J(BtklC/Tgj!sASsY?1:!FKe^4d>q)Xc!G1lERapR
%?SdC.o<=[1>:k&gD7\b"DYrobrF7`E_fV=$DjSU'#5pVtP:tHiZW@Q+qeT>TngjCpJ*R%m97J-hiZJ+""M3IbUKVTEN.Ig2Q4\?+
%V+.GTiuaEb[q^E>0-rZWrfCeqmCpn'-6Z$?NeL!^2?VuHd_PYBMQ&Ym?FRMTZ1I*,Fk^\sb&k;(HCb%$ZrX@BSaMct[DP]$\lEO9
%>7&2>mI$Ukp*oFC;D%PZGa:Yi:934Aal'B1qO\2/;sKs9@&Z%6S`E?'TDe)m'acM8Lhe:tZ/^#,F]'aQ<nk=58T);rX='bRq)t.f
%r/H1mc]$WB<niW$L@"+$XK'+pKZ#dFcPXuooGTV$rA[BTk_!$Ae;2RZ5gbq,g&&*D358HTb_1q%5L0h/oigN0);Tu4&EVEap$1D[
%::H[K`U/q9EPp'MrDR`3$@JsSqW5%;^O*F7r9djm6FX\\/Y0<A^Tqf?h#1*P6+eq]f;j%pI0+>Y[@mQ^p.e5^.Nc!7\^qqO59LhZ
%b0Yir/#B:`acCdeT+[LV6@4$Gr1.&fJ%^?BonjG.rju8_6dI3hIpVZo;JtX#Z[.7Q>bG#kS^ZO/2k6e#Km('bfVX$oX&n$*#.JPl
%%l[(e,sUBRh4N=XrA\:kf%o$7_`\pFEL^q=8#b?DX\Pn(j-/m7m2DfWBgsW"%HkcX4+@<a1@.K<)qAQ+Cuqi/g\>Qs\*u2k(4M9]
%$Vf3+%=@p9*??lFZV?ZmDlM<_g1=^aTMTQtPRd&\[o]V@fG,=LB3Xo9n\f=KI7QhEUKkM//>Um_Vi_BO)Cis8rmb45/9Rs3mHT`R
%m5tbN%^[>.k+&Jrf'&ZAQb0(YW`dEjCcn^\24AmJ)C^eMDlpqEi9/4f[oDZjD%>WLou>_9:9U6Xjj4Gm17O3QCgXX5X#YWOs!jmS
%XSMFN+6-"n2(kW3'^J8i;.19"NN9M8CfT49ZJ75%V;HAo)qo*$g?%TuEB.R?U.dL&EdD.5XM\(A#'0N.X'j3<l30:$<f_8o;c@QB
%[kfo'`b>fZ;f8+!3H&ZT*OSP9bL^)YCRpr)b[iKU-e+I*J?`$WDJI?hD7QVt2mqbE[bM>#jh.'ob@TDQK\1;Qc4.#?Z>F'pm5_Io
%<i^^Ll[("U9(UACkXl4"2ZNbZnM7905c7g8<r]+<12eM9fk`jPI3$mc(J1V5es`4sHC[g5e6'D/GN5eaB0`pu(62K7D[X.>75S"6
%.%@N)a4PI:k0[&(g:`.X-CEAnH#F?fj`RN=aQ>#EX-,\C0"+t^Eoq!tMf2G")k!F;A_9VU>40p6mIe4tbso+'"maHX);,5#mr,>]
%k]BJLg0_V<W:lQ$:T)ZW+-k"!]lGP@7])VMH2<#t%3Wf:min"m0/3$<j/*3uAS'd[j),=\<i0_m\NNVUIAUlZ42WuU4`VQQVcdeW
%\$C:hk'u2Bp69CG;L65K.QuDU$VVcI@k1ZY,'$Z\k^$*dET7$:`5:b-b-cL4BJ_3gb-He\*$D4DG[kU+S@Vksi/[OQZA=Uk&PA.#
%0\iq"L8B'qHZE0SAr.s4PZ7R7na[:fT"80??n*/rUVe04fm4Z7n"f#d]WAQ&X#S4Xe98,2g<I9k?b2,/QHqD2BBXO*S!<$pB@tD;
%]/;D'f9eWWs(<BiX>QL?eTS@smgS0rS"@Z2k;,6dDO2i\?BuP]%7bQOPo;.Gh+6;eVPKYlfYcT$ai8HVs"scNAbp#Fh)[ie_[JkH
%%*ak_)]O,^Fq^7p07&4-Y'ZQlYQ'dYE!,Z>1HgC1GOj#jDj_UA*l0@d?U`ldS-=6A+3%s1XDt.\.uVD,Ts+>LjL.fjpT(ue`U!N@
%/Cr"_#bDHoR2!Ini<9Q@b&9#6-#7]$Lst(a+P$67OPC,hH'eW7-APf:fZ\KJeS'OQ)1kY"-`';->2QC3q9pNj@Su="N,!jS)'Xac
%hr"5^,F17,>,P@RQ)jZoc-'"#,"9d[M2'1b3h-IKVuLV4gpoZ:e=Tf\R/bC)Om7[2bn8!&7V2(g9ob/N6%QjZ`T-$;AX>-.n`FbX
%mUFtN,Ko-(M6-H6_=KBA<1dST2a'=c-tA^k&V$N,9*S:BK\F@5dbj[V<f]%V&(PPs>KOZ$N(kU^^Z$8=\[d:bUY97RfuS\iV/j+j
%f"328TA#^\GZ<Gg1SA/&94]8\26(N#X)':t\=cHjL(?L\\XoV](ea"dG4R6mYN'4>6a@+9?o*`>f,WTf9(bDA5;NiY.14m/4/5Ck
%/P!4FHEC$rAU$=90%J/?XDinWop^ukZ7%SFB:4#6r3';?%4KH/&5=rX`kjtkhkWr1/=W%ApVes&AXr\)R4rF3C&LMN1b_Rn]P0!U
%g=o`jU6KRo/kVGS9T&&%n6D1dWo\opU1?Tjn]sY7&]1l%PB'O+ChB,o1<i8`Db-@30$9R73`dT"grs#f9H8'=A^jGs7EMj'8^XIa
%4VoEn?&UjfgsfSnnkI7qag.=+U&'6o8i);a24<n')I-d:G<+?qo.jm%9lFM3MGm3o7JtS6N,f(\Wd\Abo:X/^@1N9F&()ZFY:La0
%Br.Ga(G*1<+()`oQ'j(.]+/0UVL0u5&PW#SPcmgWg-kG<oeo+5lIsK\f;c@1.9E!Z[Jt*H2HA=GPd34/C/_;/5L%a&LsWsDinNL:
%,T2X#57P_0;ugl07b9#_E(WS;NaPIK;_gu(N,RhU$jh<el.o#nHq)jfBk.0!T,-.[rDfuge4W":7e#P[gi0f04_nA+G%&gV\'u=]
%l;=['nV9&%BjIiUWE[SG6c3S!Wib*M\hmLY`G&2<@65E\U,7$/,b.o3):>U)?mV%4$aig6hU:;`KJFGqb1TFJQ*Yo8YEbm_>GAms
%s';?@Ekga>aQP1:lVr6L2q@,(IFIZ"@-EUt5<%&H`[<*i5MLA\(Xr.,,=F9[0?PqY<0J4hb"+8IcC`;)ZW=D"VX&Eo,!PZAo!;1K
%Ji16RM<"^US:.:Oq3&tF5bjH%&2NV2U6nhn&)IRlk6u^I.$Z6h#C!iTO@=tqN_kI8;_oJAR944U\gM.@DAEgK;6o_<6=lm%j=`!s
%GU%n&,R,HqH++HN$oECs2i[i4j1jUlruFDa_/[BSC&E/ns../ZVt&YYr--d&:#iuIqF_[#diK)%G-%O!RcH<f4/SUO1&%#.A%pEZ
%mkj0RD)E\nP#FG'l?0+Bbm$b\7MZt*f4.e$p9Rr+2ugO:MtPfo8XC>HPYlre_[Zo5N(cmhar0n.<jGN/*gtT@JX,u`8#4^Jh,_,_
%R.J%3QaDX_Didf<]VDH]/9,H!4_.J%ffs!@Ars])2qb^Paeg0KS[uq?DR+c1:0BVq=0%<,dLrTR,eIg3c)!X>c$He0e?2i<RdF#5
%_RT<hIl<1I3uP]!eN3XZUVFoa4#1t#A_9rGhmKdspS*]XVDt5d3FXpAZ,Vf[/Z9R4btTXETs:G9Sr#j^4,\C@Wg644Bs7Qe,/#@f
%e*)1GOV'k`)UPOuL0*_hQdI6D(R_Ne_C%6a+-!]*8CPCGhgUM';k5sUVN."Bj5j?YF6\"<3aVgO]:(ce-H#AJgaqH0;-k+5^J#Y$
%@r-]k*A?#a]SoUr\2eguA)fi.;o[9SH]W.!PM-sWB&Zu@qUFIX9$T9H`?ql)#acBs(lph=Ha/DYHPlKd'A4&H`a:4PfKp7dn5CAQ
%dabrkV:pVXXJp.Y@tllVNoQh/N4X&A$'gm\BpD?qjS0+IM33eH$;<CZ!n0$pF]s3->((*aB_jqlVeGOp<,)=lrCG1-H^14slI>H+
%rn+.P'E=Rc_hTEd)89(mNCJV*=nZfs*(]JUYAkqNZ0,H<USCSl$Yj?V.iDL\Us])un*tnT#5C9hHS^Y4EP%X.qQ]CdKm)K-1u#G+
%?B(X+eSLX@8]+Cs4PS&bSNgnT9PJ1?h5E6<@/Cg"P=:fVTdl=E'3URR&aHb'COV4VZ/lqe`sAPkN!Ze(-Jjdqh#KZ/Q9@q?(h7@G
%:)_AQr>8Ht`jjjKe;l?W@n_\#j+#*9l]s;;>hsN!m&42>G>%U1c!$E\F6Ro1GpL:gA4u$631FP;)70,IokP%1Sa&\VqP.,/PdB!C
%"78Ud[k*f0)SNIo6HhYL4f(%UO(qUQk$GOJ/RRQL9mI#kDSK5u['s$#Oc`TI:Y*IKH-W^`S'L`*Kn_?+lGs>BA`<.-i]P,%2?q-G
%VR:\%^7LJ=k/jE,*OVAL=kFfT)r47EI.XAlbbDR*8%4CjXe[LiPH'm)3p4h3ap.eoa3T4<IFtTa>b#?&i3`@&"a_-co<h8(_M#F6
%YP6+Rl6sp:_mihU?^\>Y+UMLY[PI"0?<O]j:%fKd:dSM$3On;Os8S0nWI'n62JM+Q.rX6K=+#bhS>dlBm;4C:nK>$)QaJWWjj$GJ
%W@djOVjaSB2mqeFf%ecDRp'mr\+%.Gc"0`KDn7fM"4P/hI"p&V'5Gg(f\+cES!nCsF)Ga<%;]Nhc:uQoRq'b>2p7`7[%.LXk8*D'
%@*iK>`71S%&!QEeZWT;+Qa2F`Rr6R.[#Yu50R0Gu)+OYe,3&e%$2G"b`7L9Af#O<3Q'f@u&gQ2ec!arY9S&/M32>f8aN8YK(D#i.
%o''%I5g<?/>jMAobiILFFFVlJGc=]T;;kg#c`p7S*G+$PUl`t.&8rblkjR&YR6!@KQ!gKC_$ISTLC68Jh(7D@g#'ur;#Nb0?ZW@&
%i9tr(Yn@7fN!ePC4N[6>]rjO-^2Or+0fM)E@9!-Ir.V8dE[d1jQYJ[`?"M)&l1E\"V/eHZ[aNEu#4-iHNQg;7SJ\o%r<pJ$gu08a
%W&7PVe%[ZLLQ/_eA!(X5G#J0\mAuX'*gj;SeUCWmN1_NDY>V!M2:`AJZ:1,CJ)s"a$#D'<5+1,0#5ZkWKO+VYeSJ2@l#Z%"N3U6p
%(OHU>omE+*_E(]arWcH8COIf2=63SF)cN:W7?aDZ9m*1[Hm*io+&'%>1egdfF5Qr(Us;qo:7^4Ud!@[bW/Z'?BJ_42b+O]`?52!e
%mD0b14^:r+-FF)&]_@LVPamb1P%=<6Nk\OE[;4T^ZYHA`'MOa5]P0sYoicR;<4gL11DPp[bg<6(EBKJME>OX<p+YpOnX<M#<'ZJY
%5afd7ad8!NkWtehCiEXESmTAs-KdRAkpe"m,ApluT:>LRnXEckG5A>M8LmASAau>uf%DC_0[X$[L<EDj@3Ts+S[6iGLAdB&Y21c1
%R>&:q_b$N&YnpS>WH[NgN2?pD')\9_j^keWhJD1`Bh(+i`5f'2&N<<#ReRd=$Q4'WYqM9FE"f6^r&QL[8@Gl'?[<5E9'W&,+qoIh
%H6sb8EoU'aY+^?*4\J$g!>r:q,HCi@FqVXamUkf_c-Gn5j,)9`c&9a6RW-]RB]9clS&V\i+'%&7[Isn)+6.O^h9o_tgRSW=Um&t5
%\DRh2c0BaO[2q%]g#t<9]+`:UDA&,o_jm"(l"Kd4MIrVQ1]-;jZdk0bLTlVf3Wf3G;PS;tj\#qjM"B6DbFa)D``qu'#X)@qDR>l)
%eFbQ_Fu\Tc:p3YHSA0ucdhKu4P@F?G<cH<E+PeVcg=F)dUQU!5M.&S5#HsSU*?'W)e1<$CCA#*f0Rroc?a!Z2>9puNe9giFD>l3s
%/Z;K[*`d?_m9\s$pTi9s*EV"+m<437Gh%j8q/rf=YLee'TW=sec"?ntrO5il)=mC:fj%i8Lc1B%c7di("ma&9/m@3bV[hAis8SD(
%s(D8uT3m(!^D5JY4]DRQ&3[a@2#hC]^He#>T*QN2`7DX6lF\;t@@H#QS[Ib5Ulgqs`d`*!'E7a?"NW4o-h$q0i'f[&,B-qXXMVUd
%3DkGo_U.m@L]4O6d.)P^iRiSjo,k[_kM@"/N6[r>rtGEY:4I[>fUm7J\X0j&?`[Mo2u7M1,XO:gBRu["%Q$*63Q;(;>J9mWG"VFB
%[p,-Bm2Y\7,0SslH\#a:Tq6+H!O`ekZ"82qWAC/iBn/sfc&Q9p4RD)+^N#q2++F+=:3kLNc+N)j;X3GHdrNdj7oo%,rSQlb9D.1F
%mI)sde+HOIMq4CbL\""c:&ZId'!pO=pO8\S2X;4Fs-ZPo!.*$$C=1"4\T^LY9<m!C"1`dJ:]l6Mph*3p'#9U<6[laOH;W]jIf6a1
%q1iRm8BfjP\5Z24HSBNEd5guseF"knW?Y5Lr,ALWSZJ]Pro_3A<J(_C/>lHcQ;=P_Q94)kkbdr]Z,+=]"!:XW3g5i_'$fiD]<?H<
%))c4fs!Nrg5<kB*26jaufoDd2-W;A7aE#`S7tg1aKuH9^ZN[]V%tqtebIpZ[Gr>lnn!Bd4@]'>\%l0C50KZ022s=lBl3+3gp3LTl
%.<ggO*!?,1!)DCMf?-%-NS=qGS.BhEV>;KBcLu*`?A7oliUPQ*hQe.$arP*jgb>q-s2![Amr&6=Z``0@Pr[6tL2kmH-Ch_(=e/X`
%F%l9qChL0/]PKffbq>t4>LfM:G.VpF[B#Q/F2$,UBG8T:`Oj>9AKDA)Ju%1(XQ-D9/QG?fq?IcLs2U&.>uAn19K6[lAl(goX7^58
%!aL+g$uW&p'fKnjQT/PIHg8"Z>G]>ZYB4$om5/%\QH%6:g2no07\s,.X&benQ(.GiIjQ>DZVot.&6>g_1]b+;?>urEW=73fVq(/-
%pKH4n'me\JDR\-[<nk$3<sQe-D<V/EeN1s$WE[W0I`P!aC@+*S'.)fQk=Y.0@C+IdjLEihcCssF.n2^>1s;fA?8m)`DC.kb[#K./
%;QJNsF_YR&H9ZP[c^3"SMf=-GeA`GR)Q6]1k5VRoi:QgKWWn%C]Dfd]Y]K3M8TA=jj*!;rh^_Lc>)f_j#ijG%^l@-FX[^dI;WEg9
%B.nBs`oZQoX.=#&O(rRIqH#Vb?E&'?LUDH1qstfh%7C+(\u'AQ6$L?/FE<2o,9\M;qdm0VOrtlSD/QgTLt4A"3RqQMf52+sAF76E
%]AIE6:p'9J/lXn'k="?T>&PIJlFYSIYMSLSD'"n+4%_EbdKeA$UY9V%O4u\@--Qj9hSR,OeT.!oN+OR0CZBJh@eM8&CG!,,(p\W'
%2B:2O3Wi%XLSTqPfCQRT_QDq.Wde"6=,]m"=KaT^\PBWi4RL>AF'<uqaR3'ocUqJ0!1LXUhCNjFkMZJ&BtMnHQg-hn<,8hZ4q(:^
%XVnYijK6'tHg\8F\^@J02<qlW[W,%6l]>rf`\pJLDCnAV;X.dTO"QR1q7C_Yp5#9^"6=&?_4E&@Y8peCMf-#t8+e>$UB=&JotS'S
%$("XmG>afQnQ:aXK7g-t&5VbZrhts&Ej4D^gpi8H]I]US=%hZ(K^[WCE\j03r3bZIH"+4,e#@4ckf0Xqj>r&k\6D+s2(I@?qTh@=
%acRL$#"P+b..r'q3$Or.i.9QY[^+LH3i`.D+;O:Agh^&lPp$F(HhaVo:&h@FBo<8(T_ReanaD?_gQZ3-AtM6IC(2M$Q#n5Ir:I9u
%WV+OFNqR$B`G1q`M<uhGX+Br*nNcgMd(M*>9d[k)Y(<jZ.E8Z_@P$]rDC`$F9<efhU1X:Nl3VlkI*b@8pqsSX"'8D`clQl44ig\0
%7*teUhDGcIXfjc')=s#dZ-G3JIPt89>^n+3q^0S*n'/b_QKt@%*"QeTK5F3P6UA>Y<LX+W]2NQeqEatR#Ffm3CTTt8P1(r8nZA&@
%olKkJXs#PBN1F32T\dB@BN*%[ki[6_E3jQ6bS`b,r9Xs06JG*E0j8/,6T*pI,$oE*(L>!gXa=*#hN1cE&f'8>h`<q_c(C9TVk)tt
%;-lrV5r!D_r?:7E\b<p94l*d&W=iuVWROL!PE@j[m!aM6<B^V>k(ZU\l.5G@)2h9F6,V[AU:G#OQthtpD,nkP*7l._=4+$Q3NC"g
%qCRJ.Brfcbm4LJ6C8C"Bnh9_.cHn);VPZ^5o'C`D?.:XkRiIG$e>d[],abd!-DF`,m0b;.`nb7M=K-F3laF'Ub82_s;j]R43(Chi
%aW:B)(#,PMZnF[&oPY-m.8gF3G^^I<])(c(Ybl^sJ(8LjmET,@2e.d=$>s.KG&#'W@5dRNSp@9);4!<b/Xo8<qGj7VfPj@5e<S6@
%I37X]>]8fOqKh^$:!1]b?$dBZMTb^EVMQWg19,_J=lXZOhe^n8;(JJ[`1\cD8D]sqg]&<k:C!AohDW=34?r@Urc/EHNH@kH[OuC9
%D_dO(Y&*mR'g(fI>P7R59:1u$.Q9DTi\ECVf'7YulJc*tL"/hu%*,%[?FBm#=B2eJ/nN1=ej2LOV$P;iKR"MiECjBOphm4g-_YoP
%%Wed)nU'IB"2*h1)15GZEkC#9WXX'P)Q?5.[;-`WHWSK#A,!4WmTapdBiW"a2-79TRes[rYpjECkY/ug1:6JQ,XZ'_-,\s1W6rjk
%l;qphC"-l>2:&mp#2=9HLC$\d_euMBgJ'\UL,Cum6"RaB9r!#>K%JuP<j6(*O6p2'6YK#bVfB[hFW9A+OpqoaF4@F8;BdWgHJ*#+
%<OE4,:4q-L^S@L_%5\HJnc$:,q6[?.n%p/[eip"bg\q@NO3]\sTV3!ZL.>tq^@`G&/+8@m,k*FY'cs\Zg.oATA[>CNN8nl8c=PVR
%/LnGMrfD\k=(i^e7<^LX$uU7<CQpJ>(29SW%A!)3M0!N,NCFP-\YRoDp-\Z"e=pR3jS/5UGLaUd>*DY[9();phRi0Gca1/HS;Za@
%1XbS_m;J@Y8W@+teJac_)36%<n+,/X9,4[[b@^Jo1&02ZHpP5#%=6L@iqNCg412i'opojpW7j3/I3VK0*i#Y#;?^62Y10DK8AcR<
%)8&E4g4Hr0d$@uXrA`EP2Yr5*+N%1A4(XdNTB;gH\%mL]&0K?PGa/qOk0mqUhIB.7D!1eX0gA@Y?nXU\NIs*#fX4\7BGf%Yp8BZC
%D#W+LUq@MO7cIVnb"[#f4d(0BmKNu[>pq6BKDj_cWDKL<0,<Fcf%`R_2k;GYj8OR$Hf=bBkI>HK+0upe]Tbgiq^9(`_a^V+f0&,o
%XfV1aX`8.n/F][Da+Z>:Lr\U'BfQ!h7#q`%N<:>>/9S2*SS#R$*5kYg8l$a5gc!m21EqN;S*e\,^7mM*48"j'l,h7Q=8@PlLLR[?
%Xbeo`Kp-7BO491BT1=KtF;U:-M0OT2TFYMH>s#rT^GEP8hGBJ'GBqkX2#Cgj$'.^;Ykc<S40t.J)GYn`:jjj0\FpgrH[pe5GB)@V
%QZF$).$PZ?&&U9,iS8&_V]ODH@j(JKW3KJKTi!nO,r5":Up>?$iGm7:WMm&`T?],ZGPGU;__LTeoIQW]EiU#3d\RpS'SZZ,]8*6N
%<p=8)h>(91[%E_+QZ$tr,0oR4bJbY0hWXB`JsDJ=W7IGt1<J]F7[!ihLPP7M_#GqEgR!gr5+r![HG-pm]daS5JZ)3dlie/5pAC#q
%B'po2`S<0u%V;2unR/OnH=3^hM"HT92G$ENHsD_DQjVqc:jtrlBsk*Yg#)".h\C7dM'`80$uKQc[Dle?6m=PQP0*EC>H@b&A^C>^
%EK(rP@6(VLE[oG!,94Y&b"hBNPA2=t>QLSY;BlF+GaA5@]blEi.s:?V4F<rNP!l^*Ng)m>9`OKN^XU%`S%W'b<:V$&>S[1-B#-65
%d,S$+OfL@8?d;KfkArJ"1-gKcTBeBi:q<$qELK-A="d.[T1G0@4!G.XW85;=CKg4>UWB-\ra7LfRZHs:8#pMKobUTnjEcea4HIcp
%/=s6^<,U;k=*_DV=.!8K$&oUJaDg18nNfOReGkn>`p/h?dT#i:9DtlIBHk9sH+@^5:oDK'-<fCHW3IsWZrUp5p0FeHWGh&?).pe"
%<gW?lC[n\<UgZm&OnhdI7H7TF$r1ZbY1Bs/>M*07gl2.TRBmWWY^b8OZ@22jh"&'IpQnM@kF]B\[MMtGg/$$i(69EDSo<DQT=M^;
%/*/j:JiD$,KA2;7Dk9.Akri2)qL&>)9"S.72qFOdd9YMuDHg/>pq:o7Dr"Q!qO2o<Z97%0XE7c.%r%JtV6*s=h<K90p%[5+Xd*J$
%]!k^eoXJ/MkO0LbRqo(qJL1e`)g<+9O&*C,mpB,/NskQ5ZfY;dYdr@KR<oq/mVNZO47?4bfC-JLBo5F3o>@8sh$N,:nEoO;T*tO3
%q6q0dC:7@EZEekhnRZ::P<YNecJS#+bWN!Id565W)rKjoMFV%1Kram3qYS7,eW]FT8bg\.S]J9e`Nm2M@qGJXrHC"./\8:^p%W<d
%rjqj!\67Lt[CQot^Jich\D<68]J!921emmrB!/dQp0Z.ISTkB4bD!Rr]t)ZpoAA\2f'^<+=KD-:4F[2*p;p4C>WTi2[CPt*XV7,V
%[N:aOG4!Sa`S/r,Q.>`e-heG2F.[f5XhB'GY^tJmV<93Y9bT(krN]=7Pjb6h4aO[20Kf71W"t*u4%F1^?/DsO:)E;.aE$frk:N60
%GeY02F03SoD=(bg0%k^LBP(\e\loVgc=@G-[dL<"D(a^p[lto2W2WVKr"Rq8*3M06c7Qf5Hs1V%Dh$_c+#iW9Q6$8ADW=na"n.&p
%%33pYe^N2Z5p>IHb*HUg\c&i/YdAdrj4<#+2PpfM_cIn5S'X"CiU<6Ws'tKe`j5GVq;(lTBtlR@r_5k'4uf$b_=+M:a,ej8S`5jn
%7r"]@O-Z+^hd:fngItXAj))!rH5^P+qE.otQi7WaR7Fl&<V73khc_TQn8T--J)UVRKC@p=Ie!;?n`\qi+7#cOrB%'riLAHhcJA55
%$JT?s42mu.g5hL@?P\]:RT8gordc'Qa.W!CrP5"O]B['_Ci:$&^H5PuI1IAO*M)"LhH2jc@+,uWrYC7#Q"GN_B^a!pMo,2=K,5KG
%fua[_*IZL*!^M<S/,sq`akP5Sg!\n'.]k8hGCM:45O\<kDf4KPNK__Un\0EE&%+nA[(V1q&F1DgGE8;5b>4#H`oe)'nR21Inj\a\
%jMCcLC,>iMG[K^Q2(r$<L7lkVP>71b$+hpQlM9#[_SL;_nRd'L[Ie<Gk3,7J?nLhsFCsuh?'^bO:F,/k`mp':H`bu/P@4-,I;URM
%dDo=_K+C[g2LFa)+R0;2f@`=@h!Ne&j-0.2\5[p`>6mGSmfr5hk?7b#C@L,QXtS!@`l"r*5-;P$UM1)40.V+^C`^X9eZB@[_q*"*
%NHS)^KL\Eml]1'hoj44[TC1"ElqVtCUZd2LjrQbcL(YC&XjOl*7iUb_5?nX5[bik/akP.ucL\-VLYl8G<kii/B<1^FgLamojS^);
%j2G7Y5\ke^q9%C#[h+!<llM_QVf#l0XTiiN-]3&l(6@lJ$Y[5u'4Ha`Dr3e.*1^\dnR^V6=?1j&*rQ"An^'@C=*Seqge"ue=4l@/
%<0+cF(RCK$p#Q7Pkr39>\!C)kB3M^&jeqg2_<O8Q4t)i>6F+R<h6qIY>G$35j'?$_%/^HcT';!M[(tt`\H^Hj\Y[Qr&b5>\D1C+(
%eNXfB^-,h%^W(tG/'H8io$laT>N,llpK$[B]n=1.Dr9m\b)O6d#]dB%/hc(F.l.M)iJ6MBgM;d&Hr7Il4n!i'Z!PYEXj_bLX4@Zj
%;NSYbIs;[V?gf'MXL)HRm,M+6JSE?*-.VV+bjh.iq47MRNH_1^lE4c]JRl.=#.8f`97M@C8e]abV5?g"LfWY'4O%#KE"$7P8WW&4
%Q(hHBX9krf;.pP(NU2mb`3NuVpB7?_j*gGSkWX5`aeB#Qh-*jW6fZ:+5!:X35OWJC;l_iQkWb[Hk%XDa1LF5U5q]o1%RH-Ij8E&*
%Pcof?iF88JD%48;lX%TH:%Y?'DEZP578$YJ5<[RfPr]LkfDh`k%AOH25/2o3G*D#kGRsA3*`Ds*qBp67n)a]D\-+`ShV'aZe]4$J
%kJ][T1rIU3[`aH":W1mC)@nu47M'(]l4!QF2RmblUaAdT82&#V<nZu?a/N2rT$7'1Z-Z5Fb0j?Aa+kh74WVNrP#7I#DP.(F<I(b9
%l>Fu,]#T4FddX6NQd$D8QJ?r(PL/@[g>>4d^)"+b3AdUIbWZt^lb@[;fSJnero^X`pn4kkp-iJ$jaM?Em!p>$PTOn=6.5@LCZF0m
%%uVC9*onKqXQnbRUc![V4/C1::KQE/IWN/&qg,KP?9\=-:LorgA,+lNMp38@(R]WjjpnK#[)KpU/KQRh4qX?)B63cf?g+?Q1$ePU
%g\Wesg.?5WA+@Nr+04Oi<Y)3ah*uC2AaaF3&B\j<jigIq1WQB3i[_'YYe9IBUH/,8_r#)kOeMW[[9fH^J%-E@3t$dWBs/R!(TS(t
%TCl2:<hQ&Yir7UZmHeo$D-2"ZAjQ,@%,eY0d6&&LmG%^14mKK&I/%aVErcZ$!_']5s7&<.?8>V8X?c`>`_-NZ7B;%IU+Thp@T]NZ
%jKGJ0$RVn:gX"A4]X`Bhe>Dud='<H.+'!fh)eXE"]r`lhB:k)8<eL9+_sH@Il]k6V<aXb_dUcG3HN)D(LE)RnW\F-2%US4SS);+]
%s5[R4i:,52'H5<7\+Qm%_Y0H8K_@g2Jtr:0>\%osOZj8,#72D5?*+@PT@c&pC&6u.q5%-$Mbd.;<f,+.0>m`cVSD9*:KtRU`pqiI
%pF8>oecdtUnpSJnSeh%b.s'5=pkN/3IBr7A]X\b-F*@RLQ-S^F]>?SdHp#*UG4PI[,-CXu5bl,]4Dd%g0!KZuEfLQnSKfd2PXX46
%?WU$o8%8=Z,WK]o<mKtGY3L;TOq(MOQIe@aP>T2VY?r@+hH4^g5b?9Wpad'UR_SI`;\YP,T!,lb=kRe,5FfDb9C7/;>Bp*]mk%4R
%rPQ89Xub_-4Y&Y^*U[$6XaL(]B=lk=Qs,^:_!M*ne20mOR2[[Dp;n7ln`@A14N!?TAEb$A^btF+?J@:@heoP[>P3<CQ9G8FF";AD
%T=u*#V&'N]&,Y4EI'"OBgA:_>qtK:"2BL)fHc3MPOT@:GBoojYh:O]S]leq?\gtsZ?Q1Na?I.G34IOs)OYi$31V+O<qOFVHfg>4S
%qnY4FC$5$Kf(rljRS\$>Zts:>"GM1R'%po='d^J?5NV!;CodbM9\*\EBW]jb"mg\?pd@`nqN&%8+Z"?FN,`4^,%7XrfX7?S]r6"9
%76A*R$=%!4_bR]1ie(O!]6s81<M`eXMrur)cMUH"r"H-@p?]3nVhO98a*DYALpud-,Ccupm9Wd5e[(g%X7cCn9nVjk=;RZFABn7p
%U+bg;?giH<jWEA`q6Bd=-4sZ6$2+rA%dr,K_h^5pK9"Oo++C;f2&k]8T@h(`,(/\n$<6fgASWqNc_Y?cm&jFA^MY,7ON+R/hK(Nc
%?CnJe(VH1226k#BOm!$bIeWQYnrl$,MOS7d:TOKLp\D\l#<Tt[h>Oknd*:CE?c(>l]@&SP(_JH_*Yp\!D*<CRZHGsu="j"O>CNr/
%n'9e0_<lRkMFVc!X7b]%I.@$VljTpWI4i>#`UVb__Mn9aV5$,!-UVM=8?D6&f&n(W8#Er:IC0Pc^TP5_e*SJ\Dp^Eah[6r!)__V#
%rVcX\lF6Z"XNaO:Qdlq0aCW-SbO7qkMm`Gc?]qQN?e?cUGkPOtk#1UE3LXRE9CpWqb?DT-&ABVID%AI+Wd^L%A\[!ZX5g&1qL%n0
%9l/7e$[_lmQ`"KP#PZX6HbsUEiR7*'ad/8@U>A!=hEP:m[J'=9!.q0%8,Ljb;Q504dS6qC0[rQLPa/-[IYYeJ*'Y<]%s]AK(I@P(
%j2\Lf@XZGg/'.!"^YZ\)4PK\`>c[gPa!^fY[L8)8S'>At`-2==gMW<]n]R\_G%#`;rPcq-C<KT"e_6=%<n[q$%ifnl&:UUk.NZRd
%*j1!oG4,k[C&GYmJ"Lh6Y9++rPO/T7Zo#oN=qq#.F+="mX='JAW]Y_E\APNr4tWl)(W(E`ouVjGdH_9qZu?J^hIj;Ved>cE2qD#i
%GG!]:A8`7CLSojb9aVEFYIr]K/8ZpS]>elI0AlbWAas(!GU7+4&(m.-A=@XRp&X%eiR6"Cf"Ht?QQB`6C&R/HguIng1WZ%-+.#/:
%\)e7S>joJIs-dofqn89(8,GGZnAiB:?893!=]egSp&3Ceh!%'#_=&>&2&3\okk7N_5q$48N9"F4$LZLfSlEIRe&PbebS,91h((\d
%g?B=7%l`(+BCFW(6Q#XXa6M@OA,e[>]`+J?g$)"-TU+p^@X?m:dc'mA(6A1DA.Mj6B*Kf&G.r?NH?\E#Mj=#'YMJ28Z^i1i[kZ"P
%j&lM?hJ]J94`U@0V!T+7$mFE8U3^\3H2kQi3WA87n`f)G<RNtg5WlO;[i[]R\4[bsS!A1O5X0m*]J!<P^VZ)rc1Pql,Y[8_R$is3
%p<l$#QC`OYCtl!C=lW:Q=-ar;DOX%n[3POKo$B?eX#'c1Gl5Qc0DGo.?@uhA6`/gC][X,(cMgW`p%ua0A%h4fB^1<Lm#^hM?O6C4
%DU:OofI8Wb7l(rT6`9r.\nI$?;Q?hY`KtWuak$E;[ka(^$N&B0>XSRKhqmW23U\m6QLeYI25/S[CVBY>m2&iq[=7>Zo1^WZJRHsU
%%kDc45AHHnma:Wec]&#N1%]%b*j4:,91&kN"%4KQ#<f;Oh8P)Cj`[q2doZ)1frVSbYID4Tf_G`K)5@%JrQn`^DsI(3a?Y2&e4Wf[
%1i=Pj@hj0V>M\<:p5b)3TMBjUZ;^=KVn'9Cr]U$CQHlW+`d5#hCet60nSEE-c0;("Z[;Gf])NiD<MUdA_+WeFlZp3`9QQ&bZ1Mp^
%DYsDQS`/1SbM#+.8bDf;%SaX!+#YuNPKa#DA\#N0CF\P#U[;>\J=u!GCTl=LD_,;Y*d9ffI7=OoM-W95Gs2$*(<ih7[G-V_9%VUq
%2@f!_"(IW`I3j8j]O$DcG.IsT05Sip?[01p^H(U2<>Y+pdB7\+c)Dfb3+MWE3V8MU29e1/L$5a`Ce+hD^E6gLSrjZ<[$H_ueb1+1
%DE]I41jUE%B#Yg83I]WN*\$,r)]L<JK^='!rQ<Z(*3a"u-NPaV-/m34LQn%bQ\E-K'tTmp#E@4iN2,_#hX:]'BHdC;<5i5Fa[eTQ
%WiOujV%UFhoAsg'5$<6@G4MX'4%um9=-d4*?]-RD/H;<[SHlbm:YR;R>@1P0nqK!LnF`=5bl9()e,OYb@ecm%fWG&>;CoBNI\ejt
%rqGE1k:U3CmFBcAm])HNG!:ZX#JC>sG'g^M*Yjb7i:l@/hWJ)3prA#016WdWfN?uY/#5j`<PkUiHVuu.UMPs]HZP6K_V^9AN'Joh
%Z52k.R`eOX>Bde6oKAq,PtH=Od4%62=fj@0qbQ+!I,CU/l)saYJ(!E.f>HIb[kGE.A8p=:j(Y2A^[L](QksZ1QNlM?NZKgcUYC8S
%;eR-lG7m*+)Y0qM`_t4*gIR>$QLrn74Z^IkGDX;Pme)'0R.d\es!HOi+('E,npQESJ+bMVk/9i@HUfilAT\@2nuJ)88EKGH]t_3e
%Hr,/l?Cq2d@^QclDdpA+2=-'s2UR^@3dlEB9(cC9*G`&ffRE?!ES'4]3!gt?VUrSHXJgSO._TVHLPbnIrVPE1ose./s8)`U%Ip$D
%%n#'#$f5]LqQ?41f#Hk\#N(p9/iD8(_5tEJEd"l,2E"pgZ,&Wf`dUXn^rq`7K[k91XtP0YN`Wo<mXfuk[BK2BL&GKD61Eo'l,b0U
%TP)@B>.2ln-DN\J"M-Tu4FL3,;YtFf5dt8H2ZH>QSR"(,qg.X?V6WqQXKT;V:]i93p#k'K1G;cRgs+-bq5/-7.1^`dn;&!!<.Fjc
%J)0S"ajef^ThISLYbt\e;a/4fIUPn'[45njbi3s5g\:M1j2nEoNGgU[*"^*Piq$AE<e#[Hn:Ro;S(l84K>mS'%V[lP%Ac-!_C<4h
%gk(.qqVNjKnCdI*#E-(+ABJ*Hj+Fo8QZFlYhqU?AdXGiBr:h-=p#]TH:Ae`&e"-:/*@to.gGAWso3Vn&-fls]q1"HT9-2YEW0!4t
%k.Jr6Y/gc,FlJuTWZ-=c[b"(84G7.S=Hbb0Oo7Glc]XP]5!4dB9"VpV<TXi[;WEnQ4]"tU<GEdtR/]pDSQb'\hWa1Gc!HQ[XPY"8
%2GS>g!6YP,%JNJE<+#@ah--jc/Y&k.FFJDnP<8qSCUoAl]jNe6);gD3f*q5$+'X.(#lb@oSF&^)rcV,`#B];$[suYAl^U,-gM64L
%d"7!Pg4$A2Um$ql#LlqcC)p.B2bEs'/G&pLki#;L^&Jb(.(&V:O08(_T'LdF8<p4#8bM,Mhu4q@S\6FLTIghqs%N9bs-5E*qX%Y'
%hu<;Aa*VN/)b"QcG/?5W[sIQZ-IUPr)Y6haKV#B]7V(8&hM^aU6L73f5HoMd.07kWm<n!I/l1g<q8`msYnacocZOh*E+J.&0Tt"9
%S.D>R-Eq@_GrLO!#"MGFGPtn\*/AX][YI.X/+84Q/`8$!qd.'J8,4:c)'+LPn1@^-W<"r$>WX$04@C%L*T%_7qCZVJ:sb<d#T<!V
%T2m?B]+Jo!FVHh)>rUqk(?Y9'=9+_PG:Y,g0K0J^Aa8^Zq:LZ@e;o6D>/kj6MaN4&Gq8FlV6.Dj81Q(V3DmkGI@DiHi'#I;Luim2
%RC4(r]Lpf%gCYG/k2<k\>VGQ>"&Ea^8btQ-lfRG\iuIb*"*">LW%%F,J&JT3Vb>WOdqPI:JK76MV;9-Ld2gKp"J1-K>+$Hgbk<SR
%$Vu)PiAMk]oD/0'07i0,*@9&dbXW6g,"$(2!H0A1'FXj^\U;S]'\JEi?bd^'VnRM9"qh'Eo<uW=YUu?Q(^gBK":fj(&5;t@!kD/p
%MC8u56#bc/fWL0Me![b*ZT&4SZP5AGUlJqd@5=A]DLNadl/$.M$Kuh%/-%gdEr&V)TjBp)eG`?Bh^*p[aGY!M;+M,u43SSEJfl/`
%$?0Pb"h$f"h#q-k[I`ri(h#EmS9/HJnIp_B[fag9SoiYc.ik$F-YZ(m6[g-h-Q`2pgp0Y5_^E*+TPMM50X_3KG7:E[dq*iuJgeDj
%:E%Qaj1J%_J3_%`Cndc3TL&duLjVOsLq!m:5-YWKkcXt#!0@X^#KX7D=pQ-89/R-18?E%l02tb_$A]A<]H1L:Kr*-619+j<.#dsY
%*TD:W'CgSri?'3LnN>ecTe.B*&N`XG5_IX,T!Y?H2PGN-_uT-pFUo^k,[:oN@g*4V#^>UqM5Y\W0t!'j\KN.0U'E\X6<i4VnSh\B
%Q.BL[])mfP6K:M-q\%D$E<r6gAB1>s!/NY9mM[LlZNqe#,Ng>'L_^BH"Pb9LZk!4[=AUuq7>(l4TfB4@0uKg/IDs<YM;X_okCa3'
%\[#<B>f77q"6XfZR/'t'Jh=2kJIsJKQ:Z=pR&spgY2Vp0)\0,&\n5C:FJU_]&\LsO8=4#"[dZCgbedV`G@V<W`#]r,8t%(:@Y#!V
%]?J=di/NOt(:H-2?!mhN-VbXO/4W8?=92'<b9u^"HbsBN*<"5E%n:?+MC9jX@s7n[Q@M1;l9c9U>!q"X84[8).r`?ZdQH-Y[G!m4
%^l&s-F"q?2\7HY9ZlpCtiX"@kG&hNZ&M\J>?!B$kil[te-##]YR7/tF-(S>%%\8ntLDgB9aX..4@ZdqF4X;Z+h.aDsX@B&2]+19]
%lRNg/f$O#u]Bt8TSD0.Egta+nQJ'/H34BpVPbB[&5%#rC$PN<ro-"n.1QED^*seOX!M,bBqi6hJJK)[aGehjC&.4E6<]CW?`u+lt
%ZlI,_/V#9I8)(k#_3>qV.>F!d&.$UT.3d*)&J?@`B#ML%3">8MQ9gnj;%SYQ-O)q1JA[aE,LCbSe0u%XfjX)X=@d0In48`^FXJ@J
%+[H?"RYcPd,XDnPaGo1Ic#[?dH\Z]?>.XPs*K7:qVsfFp+C/U[p0boZk.)O?'(&@;-SoeW@an#WeO3I)j+\_Q'o^Lsq<=!3%jOfG
%C+hSI&dN%rPXsLSNBRn_,9;b3O_A1IRmRVpX>&4?(U:FhBNseVUeMKYdt['EI9X'*0TNq\?=T2=k?<^+*P5k3fYFH4ea/4GAJ6k=
%rC"IG;ct+gGe+V=?&Z-^&dZEB]I8RMj,IPQ#WQiL:EcT.=K?/l(*;N<M[?(oa<]B"rK+l4PAO]kLuaW@#V:"$_$$hq'&"N`nJSnI
%+,Y]ORhFi1g-%o.:Nm&M!5['32.M0fmeMIa#rk@)!Im(p74B6@Z"bGU..=_uX`0:g2aVE#;LIC>Y18@dCuD<f8g4/*VR2VOm#Yhp
%QpCP/i[EAZ*lBh/MpSEaiZ`?NFCql`Fgr3o2*N(e*dl"/=:j5qc+U5]k`"qajH5t8UF=+!FU#9<?.g0LH#pb:?h%Ri:1E*lQt)&"
%7+9N=YRJID-g9gtG65;pf6>b'I376`aOZ-/$LZW'>f*Tsp@85M/H_9dSs62Cq,>$:,-Kjdr8OQW72802l2;2[fFbS;4pP:&A7IFK
%cp2&-1?sNIVM4`I6nBDh(hZOB'WFgl<g\@;'\OW^L"MpY449Dd3giuIH:R,eUF9a.+;H&!.fj@W0/9Fs<ZJXA(JbDO`_g/[,[EaN
%H+>1?!3<,%$J?<^Ug/[?5k[AuJ9<(@MhAdtL5d%P6H3c,'N%_-;GcShTc\#hiPs;(ej>&/L$6-$l/&*a)Dp9L/*_]g;9$(V6B.JR
%n#kg^5kTQ'k_4saf",<'Wh_G*JdnA-M[qQWH=i6JaUj)_6O-"d[NK$uE!R@G=uqJ,]Ai*-7O4<[,7k\7ia!/V0--[cqJ)Rg0J;9.
%^`70D1WX(,/;3W1O-lnMb^Xo[NbJ/LM*apU=r0gY*+d(t+GEGN[QB.1S,fo<"A30b/0PT<Gd.?_0"Q,fC!B@<U&*NK0I^UC,+1#r
%9s1U@%0a+-8S."G%6oH,,"BR;%YDc&/d@5/PH5$51GZj!RotJ7j2A;\)koYeQ;'jg3%jqP247SL.Jo&.MFbiIine4YnVV:K1#J83
%pgSX/8>(:`&1!-@L]@K6&K<GU?f5m$lQJ%HmUV6dC?]Qk.AX1R:V\$$;Oj/O/*img]<Nq-9IW7CiJpG+DbW%l2\Pa+V)/a(0q`?c
%>N54Ig[LF.7Fu?k_MUL#&5&C]D$QL8"!M1.UXB11#fBc,-L!9RYm*C.%E4J26"C4_S@?bG4N1o(Q$2eR\WI0J^_X9WN"1Sb%#;A>
%_+8bH[^njn?Vg;E$ZcM,hm_2-/`L2,<ns5k^RQRO1/LRECSV<Bi1f^/P!kG-Y6KRr9@oaZ$d?mnP`;/r[F7NM(s"$"Cl._7_"*7s
%Hmjij$COJ"-gkl/.0[>64Z5$gVNU\l+I!@$YXDpf6Nd,Gr5<Fd'"]-:>07d%#E`]p2U!GTnmbQO]atE7+sVnRV6-sQ@PsG7dfMj'
%I^%IV*CI3:jB]Qr!Ge@VJXb&,`7i(P#j[1#cq-^nXRY9m:`qMkEpQq*U6;;gZps[6,<g/,=^t#-h^h$e>@Srpo47,Z=D5m@,NokR
%nOemRNmuof=b3QmM@#o*Xo1^5nF]Y`T>O_[8GW<"-o;q5Ic*GM*kUcM$,DS>A9$;uB+FuNq"r4M6V<Wj)B>&^4:/-@'GRqZ/4VR(
%C^n?!PLO8k_MB>G4^o[LEXM0:-D=(KQ/-=c[C.^naG)p*#%?GIFE&mDqpO<1bZSng(_:k*4&2G6[W9rP;&Di*a7nZ?6gY3"*2Jc$
%N,"#R[TX"$!I^_2f:Y?]^+`-1J<gkZlqMM193nd=QbgoVUFrn`cnC!=Krpr'TA:,@@)#8IB^`Qb![W5:jfu^dMJNd6E*l"=#eL5(
%SV"^5`MsU]'KF73YCT(r5[.*55YQ8P[PAq0n]*GBq6<0sLqr9'0ddkud2d$rOK973h43,jVl>VK!prU#lr\O3/_<q0P_GC\p?@6I
%jnI.DGpY?p(:Mp";.>\YG+_!!%]cFJ*^Lni#oE#+8)tkF/T!DbBGWrli+>_8@1lgSj>t#,@7/bZ)`hGL&X\6'\-bC<hZ:&$L2`'7
%oQJ0n!G8$cdXe2lCb\?161b3!HZ^8G)TO*1'*/FE!(Tp,P@5InSp&.IOMQT2UonsI'8d'=*O3lu.'sg]ZNWkJ.a?m3JRT#$E\+#Z
%7/3Q$qIs/qp`@N%:>:@Q/9hXG,riRq'[p!N_'MfZ)/5mg>EKOSTV5IRko_0>%hWY2$l1?mrc*XD?jOna!PaX/%^Vbh0maX1./"g2
%%R<]oX@#.-:G.6@%(4tLn1B]>fF<8rA8p3]NV\)b+oi]+0]i*>[>@Gs''Uq%<-2iJ+#f4#__s]C:\ZtE5X]99[uph.N<P:H]Mq1I
%";oT^.c$HD5i@>g:C)c."D[U0g-@)43(us^!l6(3"UG,5>&fDc8@-.R:"3E4K)C3\+Gukp7@F64]I3su!@bNE,5-f%MAO7?CT"&\
%0Z=H:jf1qA`_adqZN;/8:`0+]m_]p44,,@?:0\`ZJm68$7n01UGo55O?6[?p87utFJ3ELa"m3nC49g.rTTT>03?F&.dimb*1jDP_
%63rn?9Hh=r>c'4h8gY(:CYIZT9B=BP+:fb8P&Om^$'iCT6&2S98<P/OB\]bpS3ZkQ+u):r^8f!h]Q3pPSQgV@9a^#R0MI>]"H7j>
%Hlg:hHu?(uWLdD5\3'Ykgs8R@fLg8KA4RAGb\i#rL%^;gDs7,ULJh9RUJ0VAE,1'JCj75Y1BE9*YG0kV<=/kb:WHW8:_L'kqFGc@
%mR<#8]/k0O>EQ?J?23R_dnW^I$8_uW/8-rUf'j9h[U@?+7n,Tqii\kiBrfSQ7<2fo.QE@HTnPNI&9O2$MI7'%McD0aHZR!)XQ'(+
%/j^5f[c]&IO;PWH8YUE>M,lmb%`AQ;YYT@ZfjGB6e7&F:*(ZI/)uq7r<h1$u#$W:/$.N$K5GNG(2#N04e+"^Olae3cp/7>U;JY>E
%R?fD71D^XfLr45*-1EW1!La02R/5CCL>me&J>95+lr%8eQlS8$ZKo;mquX*2g`44@M$)-?L;(5$btoY'<E.b;/3m"$[P/UO%bA3@
%asf"t#Ab#k+*VndmcD`MLPb%*N*@tC1,mcr,eLJ2h,PsNm7I,=0hm7![`0"Z^2:8M>F_\1p-"@r,".Vt0o3'tJA(kO6L\6WR/WX%
%5iUjD:8p>f(`1=Q-"b8&S-ga(00m<D6GTS"e-8Dl9o+ELY'6q=QXSW?#`S@OLe9p>'"hg:boY4G%0"X&+[li0?A@RR3B;3s,9So'
%+t(<r?,I@FBQ?_63Y4.mQk?7(<KNdD,^XKR!lmoH6-ld>:Bu*CSE4-@#jr>LEE.P*(=BW=M)UQ1`?8qT9QG4l9)O\4`Kmik>U;q9
%(qCubR!UZ((iTc:KSFFj=oNrqi`IF(WZe^AS$B"=_25:fR$&XL6:!9SE>;g=RH-A1(tJ[C=XY((*ErMd0*Us$Ls*Yr'/5ObZC=`Z
%d]#9Y+ojd<JsD&`2+dM2`^$k]+Usf!])bYBC(-MHkks:mP+&;5)5Obrg#I`J=Kicl6%Hh90XUrCpn.+Se(op_RteLn]/nrAE-tgp
%ncgXP9Q`i<'bJZWkVI$eNYJO-IcuU>*hbV5)j,JEKOQ3&E:O63!>s-l:;!eT8L+:Q\@,MM^(j/.GbpoS!5\.nee[e&'iWI+VW5;2
%nV'P>jI@CQ90sngV3(3hEF8)KE[A2s/4![T$>%$YK^(\'cR'#0L<MiW:4ON/je3"n.0FS_Tc@]E$#m9(f\r2!`4kDgg;?7G?9A4A
%9:A;Ed#f^d0&e1;7,[oEG]:]b\`Xki^,6T89L;)4*9iX!k86LX1YFQu]#k>r@9a!?Q?'?WTcN\Y\?U(R6rp+Hlc>00\L[(]RPjSj
%L2[k5%L-18D["9N'DeE6@RiF"fpRJg1'Y_#MZ,Skd;`MX<:1T`<iI>Z3E4q0O$Gau^(m])R.#C-jFQ\.+WZUp7+^I@-MYqM@bGCE
%lJ^Y<j.o$Q2p#fH'Iqo[+G[X&0P<`u3L%qCeHo@EKHuQ$MmO67YnL$Hg(CA)n3OY6&S;h4KjBeYgc]m5+p^(2+aDog?-PkD@`0li
%&M,!oo`WT#Qq"UGO^Sk/$YL9O.t&XL)<IB5a^&2*Rfg('aRsf3f\nit?dO^J'hlV-EPuGuI1n"Q:6(-OCcCopNO"kK=<8Ho6(gpk
%Q%!D:^X"W)G6"X]`B[spXZZ;$^o?I8^^&U"=M[Iq<>Yqm"t*`'EWRu4;<TJnl\KtF@`<Z_/&f//glG)EK,''\%2BGu1Ye&7=]>tp
%&OkmR31!!o^mAmmLoHJ:_U2M.oc3\)Z4G>`(J]$B<Zh2M4Y3#r''J!M,5471fjS!A20)kDgWC[<[R^14'X4eN]d+!87EPpL&#>lb
%hI-58<&uNBpT>1I?,tH26@ChDJO[R.AW^\?$uB!+*+I9ha&nX\5dl=Zl*Mjh?"Q-K)2+bPn0PD!(2j3.=175SgfiU%$lN.d6m4*c
%8.'.7S(!0k0N&fV$'1K^)qpG9L`@&*%ZD\$D+q*@AQaB@KL)Ue15/`R*KA-c@Xpmr&._P(pJj"Id@$%TS9Q5<EgF`],=%E7b$1Zo
%AJl.(cJnWYmphPi.g:W)kbu]7g]EW`@LFqeR^u%3?k/9MEgX[Dm"sc7TKr_&>tl"><;bpNk\=39J7(5cM%(SAV_fknni3be++thp
%606eqFQ59ShZZj%3YE7=#FC_^:Q=^F_^HWRq#U\<[7cBpeeZZrWIsMh,qh%#Aso#Z-B,#bU`1]oQ@NC4#<?in=B<@JEouF$VXR.I
%8'Rp8Gb"D^#0<=h!%5tVO4`@8q4/&X++_R?KOV,pkT6/7_MmE]O)<976;-o3'+.#W!@kBOD:38)#78LSI&3L0p'o%p`25I!21es@
%P$'(*P(G_e/VXJlgN3[>/W4_%Wlj`lKY/M\op)Nq9#(n`.GJo[d4ut;28I%Bm=pWVi4e3+6_H)/:.),1ogIh>:1h!A!f9,B7&ZSr
%TQaS&lU(L?4IJ.fr)K#F@Co?bO^K@#qp6.7%JkDK6i_#2Tn/NKl_,Ora@%4hciHj]-97+%6b4-3)-q/'8;IFq2Cht1'25'0WmKTk
%ha_e1B)a1J"r+ni_f+5P8k^WCSDt;[9`jBc1"1)@(.S]=IEk4V5SSuF:u>oBi!r'k:"cWdKo(<!J>O/OOSEjN6<RrbB*Vb%N)_5\
%:jd%,igY;t3P-b#lbGHr_+NL;NQ23mWFA;@f`=q5\RJu,:d2Cm/U%t^jb`kcIO8T_'WUs?4Z%uTa%ARV&StnR<XN^mM;Mm$T#c1s
%3XkWfJ0Y5KQ\*!RpC/]cTWpG_S>%7(@^pYE!aE`S'F0FKp\]Jq1(.0u!$HYt[?m9b-Q.].""S!Bk[so.Z@KpG#-XE5VB"$F/B'pO
%:]jL!Uss?=7iG!h%=$Wrr`poR;.Pd'$\+Gfettb4Y(^L8N6DV(a0?9!$2L@"Le36q0rl\)925@;;JFeVO\e:,C.]-uW?7O:nh_J_
%IMZm2AV)Ds7pk.Fe%SJBn#Mr_7Je^)Brou0e%TUspE:mJ"%\[D%3AgW77rpfGhQH`ZO\-R&kElOU-Z5Jmg!%#7nV@L#J`?*FR"l2
%%%M8S8akU<'`Le7r\+CVL=$"N,[@PiH)WS>8dp9qI%JU6D`fihD@K$/K:HpcnGk<(Gi^)B6HfEi0k[P#@cj8b&65?iEKYe/`s+7#
%?ZfhI,%a;FIQM!O1[nE?68UDQaO,9n9[)9N(/);9bX*"]?k>,[&pUQr&G*Hg%O:(#X2;.'9<]A2N4`>>a'p_k\G7E%1Bhp/K,B2n
%1ZHhZjO!`I#2oH<D9e`(\db,N+I*uRIk[I`\F<r3GXW7_%:i,K2DW'72Am(?Af![Zp,^gH&mmEj\fAO2b*Sp%Z<@]-IXptTVf;I>
%R67SX7#Q'T^k<45*[HD*assu>W@?g,ABU$=*)@?eE=sZao"kVa<(hp`0qK]he\_KGO=-<<0V8\W;l!kFB$SF5K=aNF\-<Y=&7M&a
%kD@O#&=4G9!*T=m6.tnjF$N]*)0ldPZ5F>>J=&@:JX8m`!%^Qp&Z#HG:fn^/j=:d;7-[Wc+P,+?F>M#Pn,$RBN9oO+J`=3j8!oDD
%_epFuEI8\@3'9(VUQm3E0gG,k,TWDM,ne[^PMO'+#KkZB+F'Z3*kot1i5L;6AO0A=X2?3Q>g=Hm6Eh.6h4q0d&)hn3aX^i`>_9ct
%<F?t.-YbC^M?O(eFutpR[1+3F%Rc?(-QXHmNc6uh!XjeL^b)CV@45`\M\hj,AK2sCX/+lA'IaU-U=pI+4'"$@7<Sb(+M;'(BbrDm
%CH1qr7#jCXWn`u;/O*#3[d.1(QdamF#DXQORq)TB&=mKiQt]+SNkSt#a*8rp.FO,;AUbnb%EImG?]Kfk+c;-RH^:c8^$*UafPmpr
%I\8=C+a-HEL`Q8q_BLC9*p:GF*un(36O@4Icq244$XtE)RV%O::Z;&[UbQ7#P0fg@'W;e6_&gJcnKh"e3/oTNb<mOF4O"G'Fsnsu
%Ud]VS=:p(IS:J<s*nq!T>-Uilm_^#>_2lS4bK$!)RT/T<?&:1g`\:pj7Eb0nnu<B6D@Js,PEPa$\>.>-6?)!ZcIRh]74_+8$kb[#
%<]bN54N6JNgD=07,I(OAJBGS-ZBDJf0%k:/r`jn5ak:k8&kE-WE&A?JUcF5m1\uilV+?XMN9Vme**.J9RF%>=j)cmZ/G:N$,lr'q
%"p"saluo>&fot$IYsWQ[G/Zld,s%^ZL^)hC;91dXU3MLBHZ8UHJjQoYJ1?Jt6QmUM^)SL_HCUKqRM!XN_E\Wg<[)V0^'O:_RO`V.
%cuUN^P/jUm?PhQXah'8SJaiAiKjcF5j+X31Y`mL;Ze:\_MQF>"#UnBm#\Um]cYDtNkh"1d'2"L&9a$>$>-!AZ2=^<sIJaAHE#:\H
%23AhLIo1GF1_)r[B9`-icoek@X^P:E3i+(^+PCKWS;`I9->d,['5X%=;5aTs"t5Rg9M&<.cJfSWNdW%[#m0f6Q5En5H#m"%-_6^C
%EMOA%Z&f*!XOua[=ktj-T#1QmQ(6b!0V%kNH]m\4-qb0?Iss$XeBiT+Tu(AG=E&Au!(kmTN+=Be=oa?\rKrn=.@(D:X)0qMc$Zi=
%1O`,^N!m>I"65GP71"uH)>B4_WqL$TP(>9VP><nQM_YLim&>!oUeHTc74++tR&i\,#,A.V0s8\KVO1A`2Lnst]JekS6^=mm$6GeX
%@E"C[!ta]pfW;2RGk%$BnbB)skJO8GmU"E7d+4Nk=.1oFoka:$*s./\49\GX!]XD'+Z)ZJPK:2?XlkR_6XT32d-ERr">;[db/To@
%8"u%c*a4G)mlHWk5uJ5eAlk"X,KpRRRJd4"OLiMgk\@7fQf9^fnFXmi+>5tCa0`u"j7ksKg_\;/=[dCrXRu"T:S(G2E%]RC)'h\?
%UD+#(2[$<)KtfO0&u*>B^5t:/B3XQ.4+oj)pJGK'XcSSTMG<Ag/0_?A&4ogC1NGAVb7,lL.HSt/i?rg%L&)BM$6!ST(j]X3\Tk$E
%`5+%2'?(Fo3XHfM*MlBoVd2]^+:>'X$Fp4#<Uj>!h-@uAljMoZr2ZDWG"b^`%sj2KaH<lpNSU4[\1^'a_bq[S*c\_e(/ep+qm&0;
%<DXAVJFTN73Yoj<^i4fF,7j3O8SM=kPNkM@obnh(XE%/U:sV^r'g20-Qg(B>)JDA<:Z!^D\l>&k%qQDJjm`+kD96cYKS\//ME]C_
%;1t`mrutk3LcF9InVq=X6t-T6_8;F>k%H%H]+3p/WlmNC=0[7X,f&k<<'EbQlJnT'X6rqd-llDF+>BmqRG$&QM?[Yb1e";"=p2)I
%K5)QX:k-GR?R3@=IV_bgJFlIZmrk(+Eru"W30qThE[H&$(.g8SKP,^q%TYR37qb.J>cJu:G2EC?JDn/$I.[n0;Q_0*C+"1f5]q#n
%%cj`D[u=;>#C)o'5D[Ga9JFCG$&*LIK`-at]1j8FI!uQ\Vdl\079gD$*?<$Jd5liXTL>SGeP-YOfA67.Nh;%DZhM:<4K&0d8BG_1
%D+YKiRGHk-CtmPOD4rupq]<A`?)<rE9_+IQ+j"gp,']b9iAb?t0C,=]fs]^tU^@t<A7_iNgq]!#!up-!rYTl)`Q)OT4m3-%34J:n
%*sO/DV3"SOp_*CJ5n(f;$Es2t.<7nB^pXGqUBqW8R'"4W4u1BqaMcB+TfAMKFWa.*06?,ThX6u3^o64F\0!=kF;t?*:>nV]_iPd#
%I99WK?Y$@neCJc6qBI>[A8W.N8ALoE>oP!iCK/4sR66&":lAMTdF?f[1?A8%%jh$BLM?6Ufl\;YH2''q:rIgtQjCiKq"".$J>,;f
%6EX-kjeeaL86.n35[C$2E"_Gl#/Rb<L]\4tcfV<Kd`LJ.'AWYf^K_j("a(fU^MR1--\$'V>?Y%2"]WWIfN[o=+d/o8gfAr,a2k\)
%#HbcQH\Q<0P.XaU-eA3!eaHp#a(:o`1I'rg\D.h/Y-7,)`-=3,7@If"l6/d$;G5t-e'HIpQ))?WlU^aUmM8Y2ThtsXq+_'eEZnMW
%j\(1g*@BB$_BsD#0P;!:dN'+&.M0EiQdd</8eO:;;t+ti*CeDr.F-:m$A#Qjaem)/FnPlG2a3"!iHHE-<QB#t%E!,bm',s'P?U>Y
%RB"$L#?tH^bYs3"@U7-9rp%[e"DYnId]RP-p?KV%[NeO(*61eV4U2]XfF:*oM=!^^0.\,r1SK%J`NR*K?'cC2$CYR5CoCSEAJGMi
%O-ld6F2bqf^9+(cBdt_hm6+%(LM,(9%V6IA<$DqpGTVGbFst\BO`C[g%'En71+IIC17i[Wg@FAI3/Qr*RbO,D>DRJ),=@H&`-4Sj
%qdi/qmj-O=kdrs<phcH!E0uY?=.XG'E7.Hi+=_:O0-r`PaATG0)#Gks(DsUN@E+(^Uj@4FpotYMS4DbY`)id"4F'lo=b.&uomq):
%lC%]@a0@rthQ@q1Je>[mJlnW>H\:6QPsO)d6j,g^8"F=plZU4/;PhmBdc(:kVnIIYF:7#]S2$AY2aCdXLJlh9,&XPokpIs>M^S:_
%U2Od.T\Dl!l)(naPPc)2-Nu;<mt29j#=BhYbL8cCA9Lo+EV\^NX24]``'m:iQZ+N<!$[$:HBD6ofJ\GpK@J(8Ak2!]/er&Mi?c=H
%*HfMjURpk_P5Vs<Nn!,i?m"ao.?[eR>kh66U,[F@hZs"&gEHQZ_!U^tf_4l(g4VqP)]0*?nGY?M9lUT7Uj(+hQU#%B8@^o0a#:d0
%XeCu`Pn"bf;EE"JN;?AQ`o-81n[G^hnARiTJ6p0V?HI[R>2kfjC,cAN[1WS?e/)Vr7*XuBC+;WkqM^a=]d3cPg[6cX!NT97Q.Y(%
%fE1'24MU>S&uZQQ*qU"JA5+02@LX7#64)[hak;d#D@_9f+@U>!nYd@t14Kjo!`M^M_,[=hIc7\QnpoCg?CIe-EDd,u<aMOXfXCQH
%QRl?BHVK?8Y+oqGC86FmZZ-pVQcb.NH@^kV5\&lii652d1>?eKPQGYj8riug`.:NAE)fB0mD.D/E#^6'nae-68+98:9Yp5r.7e]V
%#(".U>u&HTIYVP[%]@)6Vq/)XdO00]h:.0pNo^c^#pg8,/iJ&Lc+.[C=)?C4$W*b>7EHLJ+btc85q8G%4sTdA!MD;I>,;dE>*nm`
%PqJC-UF(k_34%9j&s%bJ#/bR8S_rS."F-oIVk0`;e9joJ;$61CKqZp%&^FDf1/+ncp>=(]/u\Vd2WqiUW,/D$VZHJ[/5N;,5RCJP
%MW&?9-da@kSF]X-_SI`m0ds^\l>AqVZC1V14,LQCTdd,N#8Gc7)@hb;i.j'DM/u0"c.=LSCFE[0i2*"ZJ$rWQ.dW`Uf&X.UOFWJT
%,)I(o755i1QnXb0:h?_+?p)>XDoW\-^0mFM]g',`W>$lU'XQ\]1W(G%25CO7AiINI6B*/c)`kb.@@S&YRme11.2>G1;BN;K,[q=b
%VoEh*3X%?<$1g>.0X+H80VU%,i$4D"M0IGc_<nRQ>+D_"`1OTDLdo>C,Dd+D?L?iNBaR%:bkSab"Wk2KE*K;.'Xj6*-u6RAV`<Tt
%2CQNT:]rp^e`$FnLPp7<)Y1i.70\8TkMaX'&'[F@HkZhD`M>1t+o3co,RQRVKa&4u1#lWV3h$7k!j6a;!h.1OJAF_&Ki$'iE88B%
%X7+2t8m,@cDpTU-XO#q)>Pr;3W>!pUMF0h(G\7j=H&3fK\ABrr\tPWe.#J?RQETCc'MC3FcP8K#'E\n$,@%&8o^b-h='[IWlo@`I
%k9UOL#"an2ni0*sY0%Q=(#*J$8%k>,'lgr%YCh`MF5!E4`js>(%>/md+HL/AY.0i.-sjlkP4CfZGI\\)!!`lo?X&+[Ra;10OXjkH
%N[R"o.Lf4NanMKR0-LL,q$f'nK,Oae@8`0*M*mP&bgjj!BQ2,h&Z_A9WiD]/:'#X1N&nZMX?&ha$h5);C=KQaE?nnJolR%m,LS'-
%,WiTqY^h2#B%O8mCs7m7e4%e"l);2*/J3.>B$?hJHX_nA81!,h.Q]/:rRk&h1mV3g:aC/I!Ye:f<"?)"X7$^(nl-,=&nca1:l/dY
%Nm:\&$R2+DSX>TZN&US_%KcVZH.6*pNjViPTP1&L[M`Jc'A$4mi"NG\BS[q]%"Jpn(3_F+c+tM:g$C2]&o`]d;!#^_ZI+5]$<1Hf
%YF>O^mRf"GJZ%e_EbT\L4-kVi/BEIo2(4qgBU$0A$D:i3Z$HlBX,p4$RW92L8\m*nDbseT(daE83?BI=OH9e09C_Nd30M^s&C0Ps
%!*3c).#`.7IEOmnP]``/8SKkl,5K02)DVI(Os7pq0M5V1?HsN'p*IlSR'URqdN\<Mqb<%Z,t"9]q[fV?+:H.s'b-0SO9:jghH7oV
%QOoR@8riP;Z(G!r`"gpr0%6Jg&Y>mVLXTWm9Zi5;*$,Fb\6Q^@e[%$HGS7%!TK@&^3#m+#/]L$_Cm:E>pIr9aA:$SnYdHpUJ5a@a
%Y7Nb/Z7&_t6mdN(Vr<D/V%RLS.%=l+(+P.AY>_YR;+sZfLBtMr7:"K_;i6Sq[tZ><(\qC;V6*\3Ung.u2dfMD\q>(Y^<1!HkPO6k
%,ad;[#D\+#<4Pe(pr1uYA]]2.g0,VqLpnZ0?53`;6",D'`I`oVHC+*jf.V_A.$BWYKeIkt)<@?QBJRBo.,#KD6Ml'<BG`$mkJ.P7
%ncQ(u$6Af5GTb'b.KK.P(_CaF'LiY+Oo[FcQ`l@?MkH.VU!hj3Ef0A3ac=7q1a0.=Qf8A8I%s6i()@W3-)(MJ\drq;YuoH+;QrtC
%Z!n:O)#C;AdrdNd:W3J5'5N[r3\C/jQF;+K@LQq#N2[8b?DK<IhTEWgL[_.%TAliRkBO)RdBS@b-"SJ->A[TYaqGt50T'sH$caW#
%2?[[>)[7Z9<AHu)BV<KL\u[cTd5qtf;aKeUaR[d1jj3^AFGKu:Z)[8HY>_Yd&\;58P^srm>!iQ!_"Dih0<QWC3rGLN(C/uB+eIAP
%@L_=7k/%uZ4)"b%s+K_2KrF%uM]tWfT.\#%U;i-FnGjqu!\0laLrM"R@Z1gIK_Vj1mqN?RW<R,t@O0YQ?cV(@3a4sIhEY,s!.VOE
%YlL%5)EOnnYT*dYE+4$E"h%mh6sMA%5ch\#jEQh4b6JVM)RFrWUmQlVUD>D8gBBGV!;#mB7*2nYpiqEnX'_A@&]45!C(B]?SQHFf
%?;Ogo/bu_T4+Hcf^`J[5Yt\#t;cSbq[e4&APtObAm_1?Xkg'7:V6IE3Jacg<!,9E808<9F?t>lsU_5p"UacJ*(mN.(Z6uI'Eupn`
%L#:?d(.&N6&g29G:'2.JaK%k(]n^FZ+sAF!X+HSTP[qn%!!E5e(;"fF(+bUKQ+fRsCrW7O,8Qd*`#;cp_2*488Y/uiXD#R[F5Xa;
%=C.3*OiJfBhp2T:!_4buEL_Eda+PY@-Eg#CISe2uZ(f0t'I)!]O=+LGnqiSB73X;Vl<AhD%>*T/5BPN9!&R)8BT<18hGC#@S,hW+
%FE&MHB'0Nd+fAE"=hIX#6G2Q*UMp4uCR,b+j#hU;:>8+o+%O"@<SA,.I3_^hb]dn;Ra=TG@G)BG!rJ[?A>Hq&2$>oKiW_l0rt<l=
%@oShI15I-UP$Fu[E6G6)A*BSq,njf:EC^0=M\r7*%-L-t$B9<gW%;`G#Pht!')YVb)T*F8@pThK(2+,S[kVF.6O4T;?*Z$<"$Gq4
%I/Y:")@0%ciu.-u7?0K,A.F2iO$(u@)5ss?!9GLD-'?=6q9C*^^EI!KL_UtBqo#(`5'b7o#Ri+&bf]6bAE5aK%F0KE8R9a,\b)Dg
%.rE=hf$M:PRRZdB<IBMX2mebU\GChE0'pMAIA"F[43:QKnC5I!!Y*_7,tR`f-5"tS$RGC<6*c#dQE<"`-^)eBi)r:L&M:dc2ZEMp
%WL'i-W#mY967!M[XI=1'#'TPd%SJ:J]5X+H>"at?Z:GO-Xq9gAW5OA7I[DDRGa9&cEhW?K8Pq?_MRe.<3>[L7Elog%B<*]%TSaIp
%%p#jJ*eXr3+).LKhkUZ+I,ugdjcOAX5LRQD#ilCK^(X:ji#rR'FBKGaYFC&jYe*`O`j9"/;Rd=>>SX7"3rhWWVCu:E6*ugI>4o=.
%7j%oZ^lO*K-rS,+7or/ZBc[Hm)>Sho"pOM%_?%c+c1ZSEc?P<0Hg9.ncLmmqj`)RC1AENb\E\-$BdiObD0]V599_p;Cn'>Xj6aSW
%8ECC42g+aX5OXm6c)SDqK-RX*n`:bce6ri.3=o5`,o[,$rKYb7(eSKs:7r0!V_r=?TAVKbQS8r-RDYZ<Ye\eQZOH!aYpsoLAZG9$
%!(3c\LIbf>!@0ThGl_nOnM:7>kUl"bOTQGGn@Te7[3X(]QOC]S5*SW.;X9R,07KV=9G5=M329;;q-o2&<C)=(WUKr?X;>#W5U!^d
%>A(%LDDV@dh'BED5Y6&DK@T8M18AloI$Va)U=>IXiIF;K$Cs"1W=Q#A*gV](g+&S,9ChD^;">f(0UKM<j+7?--?S?jC(0KZ\.'u8
%<1MMMPP=FHkNQeZIY-^]!2-A6E%tIEBFeKfr$+c65n^>Aii<Z-.=URQO+I:l&??d^#qK2ASU?D(7uZLdSc?SR!l66iA?mK2-R8!d
%Eue7V8Jj4S-m2A]?9C"N9;'m.53g94aAdEdJ3(D&2/JK]a+uc($#rm.iji@HdpH!a^9,iWF:OA0.Pl/8gm)V5GjPL%O<^[;XkO"u
%!J%$;=+OiJoi:[8\F?LK2?Hhd-%J/X@YSi$W*;kC`7pVLQ.`VAHNJdRrKsYeN<1nE78)B!QkQZ'=\0^cn9q_S3-RV:]L_&R4a-nk
%CRkP<:3C,@"3M/4UpMH8?!4U\C1Dsl'o)YYHP"9U'')"Y*`&gIE5C5DccOX40(Pl4Vs*TK7/U*%<Vj7,=,1`%PL1R#9muD_pcnXk
%3#rK),*\a#a^Y3(SW*A<&.DKKJ+:\'G?k)?])T00Ta*]h<s`a%CQ,+Z'rc*S!p7,:X--<09*1L:Am>ts;'SP<aT1RO@:&tT*t21m
%A)RTPOJ.MT.fJg13b7@8L@'@*UIB8ohY`(j-ODt0XG3e[<s"02m1d]i0IJI#!`[V>Qm\A".)98abAb&D+;E^D<DRH6]Gb9YLh!Zh
%h?M6Crlm82@2)^a(*E!Bj9-DeV0F[20b#3755jjj'Z.1d[T.JKF!UKKP*lI<LgBC7AE2J.01EHUC#rTF'?1>3o%#]&%YSb.7.%iZ
%iZDDSk2[H#PO#.*I5"n"NXGF:A%O@_)k>ZESm2[XM%iMjQC(A`IafWYkGSjD0ilC;=ZjSa7_NN&hg-/#gO[ONAF9F3MQsN7]pI6H
%5q()IV%Em9Z3F8(;[A6<nPacJMJ);d=#"YG.2g0b6%)^rTfT'iN'U9o4jW]S+1?2@l\-C[MQWMjCkFD9>bk"<./_f!-9Q<41_\JK
%5B[^:R"jdM,Uo+O<+S#)8=`-LGB6<..M7:kB@jAnTWo;gJI)P#lYfnj+\e=YHO?8oZp/)N6g+2-eFDTk=C$1Y1!>uQ59O;U:g&Z&
%(mh9eb7R!IH+K<8%Q;1\cCakO!;#sR!q$!754C`MdPq^NL9UruJqKk$,U'"GMcE<u/d%"*ZPI1Nn:snYV70[g@7`h;@D7%\WLa$I
%@+#"PmEKo-l'3U?^Ja'M:`gn&=;YKlJWWj&<X2,i@$LZj'9AQFoZ2+=2B(eqM[SURMSmuTq-pM=+O4cgfd4!?0kf&tphW_=K_\$[
%W.Ir![htO(Du@DWpQ1>H<'3_"[-5qS&%mRiQ\[bt#?R>T[pQq%,576m/u-=P6iL.W7$BjnCQ*nr)kg_Im5jcS]%2=R4^_SnIZ>3C
%[(1n3pEO#3^pq,k,G0?%[=sMbFkQV8noK2HVl]1c'`VLB5EHn.^VphWr>FY,\+P:@"<Z4V:ujW7@d]VTF6+Eh3UXSQZh%+5OQ/2E
%rB)<&\of8uY1SZ+7SpC6W)!YT4,h&>TqAg&pHIjh8A'#-(M_3Qn,)^Fr6F9rlc@PPa5XE!Gl4.8YJVP^kimJ+)*XYE3g(q&\-1,O
%/eY;rZphP!NkL#_\:iCTI(Bihh'b$e\b6I+L8H.bLHbA/_lb?bOrqWPWln]/a-K7p3(G7@rGmF9C2Z7o8*gU`H.VD]aVfM3nbDLn
%.-901kj>teX.\8/[sQXhZ0!TKqXoNna:KV&Nq`)Z_GtXDk/odZZ;oYI6M%*fON+4i`SB%Nor$lGG&GjUO1-SN*t!aDjSL0*WaM!i
%b+-':Y3XG#;!S]MWd8`O`+<c*OU&NPe(Y'2rWrEg94)K1NNUg2H2cM'<8nL^i:V2\3B^u3R>lU33Eg+1H$kAB/AohZb1QpXK@6SZ
%;&!\0G&ce*G(pgg)Yq9)lE.cE-P/3lhf(9q06%XK7b7j'N,m@fHmIF!I_ua:T<&3,763f*,VQ#PL^q!,bDH1B1SI-%CC)L6'IcOs
%rLo+T67[Ti?.pVMY(7G2M4ts$lk4L"#nWlGE*0MEeqI#s(QA@&qtf_*d8,Mep^Te*G-u*g\f"8B-mUA<I:cjO0:5K/]PNaaLaa$U
%)m0ik>CXJ]epDif&mBS6Z[?&+jnc5kpp0A/J>F?g[BJG\?6.ZQQt@E/k![t78>pGe4*'^/H[.EY7::Uo\j^.b0L,I(B<f`Vd6/m=
%^LBQLhIkb&Ga@V4"Pns8;^Of']!^CB=]^)]UIuKm]dIH0O1">LoO1!L4Zc6bB54[,[i(d.=:/k/lfbg[Z170S(\n_keC&Ur3dS/1
%CpU#.!Q(<D#s]!-3:XpjY3DCpin8t@35N7q_Ot.dVE_MqdLXn8Zha"=(CrJ?c>[4/e_$5FKZYGd@\<-3%BoOQ"bDCu&`d4E$[02>
%rCdlkPZ\]RaeRd*=8Qim@$k\I4P65tG]<0e,nKJI].?8Eq1(KO*,fhf6"__D\Thhcg'@=lT10OYq"3b^/o*CI.Z.uMZ7shC.Ci7?
%!C$r]*O)lj0SmLYA<"7r=%&:#=c[;-j1FSF=U)TgSa'D'M2JsPVfcecQ&T(LPdiY!\41oK5HfB,_LZm</T5T<MSn6*8^/T\KXu'?
%M0mM(hmn29j1l5pR#HoQDmOPD!^oPr(4uHLEBL[f&A%d1ie.?M8#OG^WWN[ef4)Hl/pMVI4efDuX(USHE=]A,/=+)r^1hn`/a!dW
%$&+g,_eA&tkJAcI@4K1qVRd!JiapI)r957_1NJ<YS!?4rBP/f8o]K0!5<Y3gP.>CKmM&XOBG-OOC!Z#;DcD)Q[s@Aba(uRs)>NBt
%@6.7@F-nL_M4@/<]JNsW5jF3*d(=>dq;dKADt[sl@&GY\YC=P2hH,hUlqVn81Vsp$'<1D[nS82O@Kh`e1$kLF5^=(3CE5-r\Scbt
%e^tJA9C9BF_pO[@1EMgup,6d)RtAn-j#_uBZl?kXP$JeO)>DCf8)1.?)oDW+0#JfbbL.8b]-mGhU9d=G$&`uE++-(*n-D))J\n_D
%>p2ej,1U)@%Vb]Fk$o>Y'OUU#q'`K$9U'=q_s\)/lM3<XQg6[f"HF*N2XAZPBOrZuGNO+I5FqIA&V7pH3k@_"fWXFmSY3uIMilWX
%/()PL\NSqAo7Y;kGDZ3ro8[pYAD;<aGe7=@OZLPrLqOdka>=Pn\$BJR6E24Gh2^N$SFa?kf/t22MBhC7_`[IGomo(US.pu`QD%Q+
%5VG(/7-`;$+cK%4[N>nufUQCH.hNAcX+lVnoI^3508])4HKK?DjlkZW(#QHDnUg'M[prXsCm'B=M)5/nbb2#e)[S^[0\T)=e_Q24
%9RfO\<0)/HJ%/u*/L*:L?B3*R4^l5-\p>*p2ctbT=LH<?j[d2gL[jG&jC3PlU\;J[Q:m=dV,)#DldQ38aGctL1Y`q<M]<a`n,(-M
%k40bTmkjcR"e?ts(=RP120-\Q]:8a$X`is[/0=>99d!J&jU\#m@b'eRA)bX>HV0%%F1fLP!P33*pqNmA"?s*)YiS8r<!>u.Ob^c$
%bimVfkit$]"#-c2XLf/U^*jZdJScN>YSb>/9&OTrX^+>4hTfL55m<D:mT@C:7N?@CoGYhmE%Jb!#9lXUpoJdK,.iB#I#(#g1F'Zg
%/Rp-[rLE([5?G*k%aeiN<&^6<5>?W65d8pIrme:L!l+lSS\HaHL;e^W>n;p\rT&M]e'g+h`%'b+P)Hul<UOP2p5ZgKs7Z\s4[2B>
%g92\Jp8C-jUS5$8fqJ/Ss5t&OgNX0o4&UBrj,RH`E[d%"]uRk[BTW0D_m^c+B`;IZa1d$U5q[?i`OG42pDo(RZK:9sJ&M]^Gau2p
%/j1p*_1(_<(BqDL/#!ILq1T'J6R<D#?_mX]1Q:cPV(17WKWk\>V91mlEm(p_k!$O*5M-6R3]R[n<#hS=c]uC<E8'IYN[O6iGeC,#
%KGZ02PVF9PKG"p<qrLA-*clBJhaVn9a2,9]RpL/G*Zg5RZ9P*uZH!m#:#ifGUI&V<+]baOA^)pF]U_XW39/GUZ/%DS2&HW0#E)*7
%,n+h)p+d%s`3Al-lLWJG>_QgQ$-T_(GVh5l3BHfhpQ'*'S04A.1En4e$]mA-R4kTke]L^2m*LJ=If3eV&Knd[pX"S3i&94=Nnr0/
%5>uOW4Sks'cK;(*j.OGH(?aqK*E8A@bgKW#%n8F!`!1ft,R8S2Pe5JI+V4?i8F'"UXk?lGUe*ChWkDn_$)kaYA:1E4i''N4CS;BV
%=f;,J\T5!qKQ@f;e;__VS\am!-)f0p@H#ri\gtD*1X+[aL`8Sg94;rcAd0"6U-!Uop<43K)4_F(edjt2iU9$<Qc#?lq^E3CO^XXV
%8oQYn_%8-i^t+YI,/YtcHUr16GTQ&W8X4MdAbWe]4D3iTf[&9H`!#251YeIf8fZ[_d.<=<FM+gUIYNE:=2drP4q>3kEki)Hq'N!M
%UC2hap=NsB:]s'4`UMa'B0F/%jWLIWV$`[3?1&%iUrXmp$OP3%(rcU*8nT!=0TdX9,p'I:Af5mUjiT[Y$3Ojm3mCG2LW$aEK+*2W
%<#rX@W#`B0^794)esG2o!-q]-+*0L9M$I<-L%8j7k`4UuhNDgS)JjDa9ec*"LJtW&2Kq9;r#]Smgg5XTKonNl)!%"h_<UXirH\7S
%F.`YE<.:7B@Q46-]*<D=`")7qWG6is;>-!.S]r=3iD)/dIZ$riP,Pc<P$uquZ&!\(=7Bj^:Ub<:RRKEE=aPmM6Z\C'6_F5S@0'g-
%m0ng7ac#Br?thhMra%ciQV$srLEVK):6tWgj%jF\lsS2jjOn=AX2uGc;H-G:W6(ri_,Pj/aragXl!TT:*=`9P9:d+3Eol\YltE;"
%&nQ3&HWQTkB?4ZiK/1Nu[%E,+JOrd6oG7hU%]+I^\uZ$uCuM`&?;C"KNhC4X>Q"_t6jdfAln6j04dXQ/<2=6B<YIj2(NWVQoH4@F
%[4Zn)DW_\g>o[8FKU4CZrY7Y0-f8Em[bBTbGObOr=Rjai:G7O'2GW*A6bT"pUl!B9='?ulMP8g#XpnMET"H3.VpejZ'Uc4*H\Ql7
%B9BMf+8YtATLH,j=!q[Hs#W'K-qnKq=r1hl,6`Ja(<SJUN<_!;<&,Q<@DR;g'\!.LJQlD,C$d!WY+8uT#]f\l^+l>)@`'_*bS8$L
%7OJlW.E&)-9WH;$8-ZoHUW":o##M*j3qhDt-t>I6qU<-g"L#jQq4&p5r!tJ6bel)"`h%@?BKnBMs!b2G*Z:9NmHusN9D.,l)%.rN
%A[-Xgcd;(h3c.`YEN[2IeS2LlcCWKWlDpFn1ojtSf%o1@\Hb(Eo@5d%EmL]NoJ<nKXpc\nAic@"M&>3Uq:G:GZs1I1<$sHB(j%WZ
%e+0^>kip]o*fT'j17LT3cJbE]2OdKPs-g""O`K@u5.)T(@qnQRZ'F0Tq9V&?&9dLQ'8'Cpht,0$T%S/q45kV=?pK3L3;&j(nae'>
%_=[>%'=X\416`_7T\8u8j'&>sB!3Rl]fdH`r]t^'q.V<poJhS;kp4(^go`TIgTBmC#fnLhK(.ncnX"GBl4F.L?]O&Y1><>(m2cKM
%RJ<$n4e)l*ZZfUkeXIX)k7PF:b+7CL(*Nou\BR.``NM\W`5jMd2'0H\\e1MuHFY,hVO(R[la<\bh(kp*Hs(uUl!7?oTLY=6kAP?V
%,\)d:,E&TFq)HcAD78]<I<8KXW8qW8>Gios8+bVmM+M`I#EUo@eEp[`JR5fFq\=sa+>k8M,!%QR*rA-Mqm,P&]^!I26$Psj+qQ[2
%'U;#VM]gQ$4&H`h_.^rD7["q/?,DJi.[a+Oa]i[JLb`.BhkH@5TnSaI$e!+@/-i-pg*GM*\CW8/,ssC\1,040=rgMPMrDtL\/`TR
%/7uR9P(&T;0RMIH&%BuNRpD-p@98=T=Yb'3)a<\)Ebm5;;FW.o?E(=bs7Cd9Pirr/pLU7/'0do@;2_B3JNi</>9&9f;*:QHHA/e7
%W@oHF7"fs=X(T6^L<bmYfNERj*:\k-VBlO(5IaM`i-7?+&sKa/C\p@OPMLHZ)Gs;3mgL4s=d<u7U7:h]WO1[SrEO2)@?b^NoDDFA
%!7tIZ6;jol*R1(MND@.Zp6-UD3gR#sps(`D/[AXn!`@QjF)gL\>egdb'e53E/bnGr9*eK'2JjaI,B=)rHfUe%_P)+]0m*#*O2sYA
%al6XuRiUp^M,V?<c76lNI]0dR(Q/UJ(E%[$D<lJ\+G(>jj4R@f^c#2NQ2Yt>ME0DXK(W^@K$e6%(S)TH6n*3e%1D<XHP70@3\ltO
%N?s4`dDa$"IB9bsDJ(5"`1=V%pDLZE:<%r?05f[!bdTlc[@Z@Te7jnC]Q[SIT(`&s4(H.3SnbAhVZMr>/.%!]=r5dpk^4(1hBN?F
%;B_HL^/.[LLA`Gi%e89r$YAZP6$0U>BabG2M\@sS^')/op60;*J\4!+qJ%g7Y^[[OC"XD=)7Mg?Jn=Cepb9iL5p"?cLN.LNO1!E$
%fRD3\Y+Z4L(5c*5`uKm/-IVmh>XHKq0P.%jU0/OL2PAAE=ec6#*DpRR\uK6V;</H["DSLaC`$53`EgY]pMg+;80C\WX6JVY?H>8r
%ne_X[fD)>QBZbN5:,UCP2B?ch>gC8gG6WJNI:D&g3f>=Q.C+L_jgGJZi3>b[2&^eEj\6u/*kGh^\RYtWFL%OXS4d9,Z;qQ]Z'2YK
%+L/9$6THjl>O,UOMB<$S@`+[bM^>?n@0S_Z-D^C3brkXkdsEa]\h1"n+/*fmU:2-P&XUq$hL9d,/MUTCiGA#3pla<aZRp1&:#Tnt
%[F_N8$0MV?N-s32E1ZW:g\)n_-S[T#;jtRkcm4@D13.:47[%e_:t,;.ft8E!BJ*]2T<\d1LfPeEk)&Z,L^(E5k1S\*9VQf!5J!:=
%Ar,T+QE51O)2T[\M&Ul0bmu%iDl6Zi00Wp1547E'(p\F]FsbPXPYHmV$%ABnS'47mG9NDA`)\Z^PBP*5ndnOGZ$NQ?1f't+?&p8"
%1jP4d/^#JNlhBu^:-lUPG2`AGh+tm:L;=Wm[MJHTn8r`a/5=ep;!9e"^671E^<,kCF%\5]ni:sj&Zbh+P(aX?+>;fC(3,l"]./ld
%GYB-UDiS1RK(^SCPend0p#Frn&[Cu%=u["/M2*]19o9@7DQ6"8',p#2g?3jAkO7F"0mE,):kPlDCc@IIE@UOkGl9mlI%O46-%&4O
%[h_bC3heVLUsQ1R"._:NV4(=dPGL+>TrV$4eF[h4=J#JF#=N'j(eDr69qB*T%q[S\Rk:m.5\=q%D@UR@qX*Pgo'ibI4mGFNl8kg;
%VPl.FO9"h;=.>+ZrNJW[AXuV9TF_Su7LgP&daJmV?2Dq*:VmF]4Pn3fa-Rs";1W3%ZEEOCpKi$Xo7Er7bX<:tpoS[7YbURDX4GW#
%=i/m$!eC.ni<g62SAOYiBA$nCo\l2TWilE/(b3;9mi,\%Z,fBuWJ5:^XFd=j\n.pNA@`0ic@-+2@Mg#4G==mJaN3Zr\UqPt/VBg\
%[i?$rDl"3kl07k>H2.e9a*Xh9erpJM>PTu&=Zi$*jLc]Io?Yk._`J8R2aVJP19^%G5VDjrl#FTrOkFJd,ngmF/eNle3-)3=DWbb\
%$iO+B]53-4+A!R`\5L)`%F`8]YJmPT/ZVt6N($RJ-=:6pJUjafEXF'e.Q%A"JIfHm,b3Xi=/AF/_TA@\F_W]?-_>&rY?a,-W*fEA
%&)i2=:^$#M2FWM/[4IdYdX(L\Z8o`PL%U="Q%,H02J_XD.EU_c6r8H'N+'jUYNF`*M3:Dl.oS3=m5h-gRJ#duCDP1K3AcJ(b%5h0
%Z=pr_oL"tfJ1Hb"(/<1dZn.Unl:gS",a7/mF&;4Gab6h>FO3B1E?K)Cp"gunM0.P=,ap!k3Vq<;dDQ,@#_BR#dUY"o/=I!V\YH`H
%_V,`kSh?K#^&@RC\n#Rm])n_>QYt?=BE%t.J<?iG<a'bE7H%YJW2l:k.P.lG'!]HUDPjHB.W/*]'cU9d7uFcf/^'JdEgH$BIV6ej
%]B692L_,iM3Plo"X2ITL;d9?:TjkELs+0V:rh[O6Mj_E.%7e?a7^3qJGbkY$P]:0_$9gT#.biuf9&mKQL?l->C7/$"&e@qjpS93i
%4!R?W=Smku"#;ns%uJ7f>:I<`1]"TKNd6<:IiJAZpd<[locMQM3^Wt7cmN^+*3kDT^ZQN96AFu#cY)-]#WNhCLjnT?j_rcAn@\#d
%*C(7.M&l;-UnE-50'FpB+2g$$.;@ai7OeT'6k!KVLShGRo\%PWA_AKnbRh?[bV_$a:.H%ln0aKEp$dW;D20qVHSFEV%r4tc0M7hU
%X>Q]bH)\1-M%@;ujHSRqIQ0cQ&c9V*kTbF14qdc/(P$kI'%>ZN%LYt4p8:r?BL:Fi.,4IHPM)Ue"$50P%c*9kId>?+6?IR_2CdCM
%SfXM,V>!07aBF+LpVmt=RiS$?Dtbr3DR_leK*<V`;L3/"PAF)HIL%n<MK07=8m)Pl,9Rl@lL+fQI\:=noFgB@#tk2VlG<5^#"<A;
%ZBCZK,uT"C@\WGj0EFaU[r[Ha$:K?cM,2SFUXeYD.`9f6m'C<*`GrAgZGSc4<rLqPoZSJmCekc+SC`)*XI"AT3kDYb]BEh2E4!ca
%"LaR+8V8ML3$=^r#jk`(qN]*'^FVOe4>/hb-A%K[PD70Pr1USA7!?PL>DCI3&3_BS:GVi`=75Xe$s+O2@O:XRMQDioFc\+eEL*[$
%.H(ce(<03^_Kt>A4N!YR$+WS8Ib1dW43#TF6cZ+(QbC?3N[I\t^)G42h-'71$'UhZ"spQ$h(Q++>XT'SWsD^d4_#Ct&fZ8u'T^r5
%=-4.h*fLV3H&Spk\]@.3mEaKJVOu1hc;.A'8!37gs!0VZ0g0P1'0lIY@JoHZZfU&mmo<gq4Lu=+lrNZ9K_oOmZr&BQp0eu6V@4ca
%`!#bEq/qE,eTq)7,siCSqbXH.A,JHsF*sF'fo,dTo.3!#FQ6e2=EH<1Pe@J4b&u>%c3pI>c*kJ!^"Bb8OG8J12Fg5t&(cqXAsPB\
%W*)>[BFoRS!q?<KY"-_;l,U,ej29B];;PNL5D`(gB0]Z00LLKDVN5@3GIHGk\fTn'Yr(bQmdcK4*+G-^cP"j4fYZ+8b-QIX8k`'a
%42\b"WPm2T%mA5_F'mdM_N:-lN=2H@=37dD_Y=B[(pfg<2!Z%HZ]kg`PF6/\Z]=`<]["NPfAJc_jWuJ.4OMj%=lAMd>G"-9bl(H&
%NE^jg9Nd]'%c,M6=5Q#iZ8<:,CsH4=@t%@->mbW&8RQL*lZ$Co;`q'`I2&'A>]kdJ.oV;"2]qme"K&9@@&fe";cZc.-a99=$*MfB
%(E&^Kp-<,:;gBMi\_\bf"bO"8U`:I_@5?'G,qN%YdFlH@i989eO$AKE7NBM>Qq%?Ml.j-]^<[Z_Z,(_Ak:AoEc8+2</<r3W/6/;(
%XGF"MGaq$q[[nCW(7DF,H\-T+;i.82+*sL^7eYQKnei2[,0lWiZRBAS0l%GjF#L6WA#ZCjA$a<<@5P:qZ]4DZ1"`(o%4G5F^tuM!
%>49728,oo_.'5(#8P_&YE12/cT-r"SJZYf>qB[N3JTkHWZ^b8X4@R^uFmPHbN).p`O!5tFW'/&3TsMhnTauSO/1ApP3i?thh@<=)
%&D_)l!$8^Ugc?+)s*1YK<:I5ZdULcgTVo#i0=qpo![j3^T&S2QQ_\27ik;srjJCi.@Qk?4&+S*FH,:k,Y6D8;1^2%X]9(&!IM`R[
%\;ns',s7)ZXSl(L-V`;ZMbI6VSY'P^W#%oN'j9SqSSR\]C7bqUTB:Ur,!Y]_b6rV&#N;eZ5V!V;";fR"pER*pJ5d+@oM)4IEjA4V
%p!>EN%am'8rhN?C$I#M/Mk!nQ>sD+=:36.m-l4=IK^2cfa7SuVd.qD@k:#o7n"96dkZXP)nnu!0gjYhKoWD^IJ-b-o>Nb:W'*WZ8
%JlHG'ksJ%o?M`+<?XcKGC5H)&_Kt>?H%HP3!TYF>i3>Epmh!6/boC*Q?M5!roK;FNQ&9jFIoTgOT-nrOc(@(p8nU;[@h.$?Ygh85
%^!%.pSV*1Z^2,r:q'^/(;=D]P'-jKeG\hG0b%#WZWpPms3u^/oSGa9.^3047$1!sEF34Q!4ebX5MiX27bDRTMq<ud&9$N="eOJD`
%#J?K%,8U[H36M#$HcPpWIYIelqNPRp"kG(WA#]/)O+sMU7u';#4e%]t"ef^r7SH0*IHN[S>dXL!l(=O=JRPjhqDcC>Hgp&ui#Z22
%\aGKkCkF.\CmFV@e]o#2^kk0g:@MrX/9#dp^#'nXVqPPP=5fI&U57dm<(.gnT0bq;iP16l;T;Vuh?2USH_$'/P9C.;<-uYlB&m%C
%9`>_EPgsjVUWACjg(QReRYi(*qU"tljD6&p*9uNqK;>"B8%)f%q,AAsJ+X(=bujkHaS59k04.LqJY[s*/CM5oJFql2#HRLQ@cM,S
%D*k5U$'+_=_F?38]).PZ-GEAWQ.'\6$Z?/7):e;#g^U0@?5F,gm_B^[,lg-&>Tt.DpQ:lE%Ob@e,fUcFiaM"5C6k3j>]kdJ.oV;<
%1[i$V[DeB2;ru.hk9hg?Nc#bS'.K.6Sa9nSH9c>#OC^9>mcF#4I,&1`M4-L?;WbdSr+-6J8-Ma:f0%I.`*(s`a]kB%h.$`QNbj33
%,;t"Bk^E":d]C?fC<IdrZLPBU+IT];H&&V7&:D+CE7I0P']tjBb>?^cEo:Q&$HU!.UK$"d=XI%[*I=.8/fNBie;[eiL]1n$'"Og`
%,NrTkYqMf(^RTKUp;iIlLZD^MOb9U`RNN%Dh"^$Y$5>hS7:[7K[#A8-_NdsbY]p&FZni?jVJ82gC.J0`LSGNh\@:=DO:^XS,7c!t
%R*C$=LD"*7/YUOI25No^]snJfVPns3Dlf^lr>8FP0^lfhQ0Rb`b:,fip[%Zo\AXEe&sVZUBQ)f[DKOpP^I^bJOq&!jE>]e9UJX_N
%5#HW:p,'`GdE[E\@q5i)N#psIO\.^+2(hrLd*#;6S"7aBLVsbVlY7-#TN#hrUOB,Kd>>?hr^R8<E1hsjcRBmuS9Q55aRPFULkU<c
%#enm5h1-anfC%"b1f59>$HW-abkif+5`^4))XSK?btbqGp9T,X7WkiJ`$<&XlPCfc"O(JVPDs-iF.S1jQD.s__d6nE*hkAQ)\YEY
%9$jLl@D-5N0LkY`p[XMM5_SP^)>JIhi;E17EMuAm;,rtnr?S`%?%1VIV0tT^drtO:0L%st+ud_K>(WL&QPo6Q9"soqhBZ]QOKr0&
%<Wb#H&\)]J9ko,1kImKj+DMdn9t%l!Q-j(/6+D[b32E_0bsmiCqjF+DC"aS.Sj&+GA%B)UD1h@-UQL*[(O)=g0\78jbN-aXJ`FZ$
%ND\J8Im;!YEO"JsV1^Mh0[nN:$#Jo^[164RK0EVj0H.'64<Mqn4GP,08KU8j]6AO?E>.X1^<C]Pd<i,0Z]^1j&+HkglKusAEPTu;
%q;L[F0CHNg8Oc*gVG.Uk52sk;1'mD7Y*]c?<Vb(l+#01RlipZ`?9qe**jkb!hU<7ddK\3:NUCmF*%"U(3+q5N0rs]_b<04\]^ahE
%=>0$CX.Q3JQq>n,B<Sc=huagadlVjgJJJ*ud_=K=qnS4X[?fdGSDAZmJS_[sR7UD&N#tD;hm8.5:X:)C4pt%\XuaJ6Q)V^LRh,JC
%@WHS2FJ\M1bN;[4Km1]_iU\;b+04URd<T-o:"5.%&%('@4-s#ZVg6cr]'4rCfJV*:N=U<OQX@]X/6/4edDT!ln&\dp592T$5-h7s
%&K^Q8KZVrZ?h`Np>pn&s5R2p4*d^\Z1blGN^"Q%;InBXu+I;7<-L@2+3=cta:/[_1&g@'Z/'2pXlt,Y@hTYM(mU\'A6dPAW6TWWC
%3oc4J.K2G<q"iX&Na3,]d5+3+aYgN[)UpLLD&mAlnYr#j[qCO(l]jul#$g53QqJ\Y$ak2]]OMl2dEMDtl=:V(U#2L'7KEN:/'N$t
%i%`DlZ]R1>K/>W_"%mTdr?7?RbYO/7RW=MsbCYr:50^(J+V(LF/30]'j3uf0?K?mUB?@uD2)ofCi(S7:14G>8)X&=RGj9r9,e5((
%5p*9"jaBrfMX*NnR"<6CVLjO6bUTs+UrJBI;pV2NpV))3([cDk@]>:S3^6CW?T^Zr$DHr96cG>ZL3D6!_Z=dc@37C[6Mcq2U>;Wr
%MbI6V?2!55)n"`BT8Tf6Zk)ob4/U_E6cZ+8T=r;VI=IWNO8mq),,R+Q<_sS;G?c$*I_-T.A?KMc92J4H:'j)$co[.9jKU-J2_+7B
%bBE9GO@ilCSG[\t2j%A65\C13EO-a*4oQQZ)_.JtEK`J+m^gARKN'$d`3s#@pM\\6Y-(G1^Eh+>cI>"MQc\T?./3N++qs!JV1u'p
%)2``I-8Om8nW@?eJO*:0JPs4W,#%ZM1bES9Di(E#6Ug=8#U.pgPc.KuE4=X;aM5\q>7cs6b)'pmSn4^%gu(N6%Old_3R$P_^AXB2
%jiNI'3Ht\rXM*SMJn&>LZIP^kD1jp!)!n?V;fm",\(SX:6t`(QH(]CaDq>_=O_'k$p4T[6+#,#SAJ@uBVW(A*j`8$8nQU#&.KXR:
%./Mff;-\]N]a='89Z<!/]_2#_WF2OAE*c__9c<igRb;G.PNc>CedSrBJ[*MDHGZt7L6oqlB4GAj0Ma3u)aE67DI#>fllG;S^OI(9
%K&mZCW68m(YnngEofRRpm)8PfA!T/>4hCkq7Iii2cXC$Um1D%+n<c:0#om_d7OlbK//a0f02@]@2kBG%M_I#0GW[YmANF88""kpA
%bXKNJJ!cG'oE7,a'5>M6_I^M%5RE$9IFhn^naJ9;`W;^*AOOrm'Lk+mf.;pn=lM;ZboP8oS,FZTT3fffSP,L"UZquC7a;WZ?f&En
%ad@()PH4F\M0+5r_8Lei,ILiZGDhQ4Oa(`^eMXTba2GrNFhe>>gUoo8&dXq*jQ0ZEd//n)p?[ssaMXdSb[dq\_CP!j).6%'EgG.!
%$28bhaJiQ\2\dq#[:Y4fT$3(!<auP_)6(b6gii91OT)+s"GEaP"2F2Tf=&pSiOLM64\FpX*?uY,0/6tMEfFCWE=URP&X=(u9"a0s
%gn/9^&tJ-b_g+jOeZo:*Rf3/1VL-3e*o=<&[^*4dPbCt:M8*L1eYO[(g^u2T[2q$*k'N^n"fa^><QpmnU`XeL=oNHXjeP'I9Mhm<
%_R#N6`6k"1Sb@k)<nt0$W.Xf:W_Os&f_-d9k'4t-/bV@5K(%^()\_7X:@iCO$Cen8T1()Cm4!`EWc;=j5Ij/kCo`W>48(G3FDp@?
%oQ`F,aL@beS`G8C/,jJ;J,fKIiMlqgMS^cMmD4,Ej(lnf,*dh!BMR+o+aY_ZZ3eC+Y?ElTdG9bIWOOaIaea;F`,@Ri1Hs/[l8CAB
%NT(S8lCI-Pi%/bfj1W5%6N4afT9h@J'dIEgUm^2L#ORd;aI(RkMS8EVU[3GMG)SoHHermN%p5e2\)huORBU#pbF&J<$ouSG!R)aE
%EYZjNXF*;2GVjJjQoj!Eqp=jMP,41<KQXOE_p:!'^`p&f6XC`(_rMTn`p=t0:[Dt"D+Y@D*hP@=I+kW7'Uc5)>sFr8Pa(53a@-_,
%:!e!b]jpt&271936bUQ:IJ9\9Cr[bVbg-qLr1$-XiqUqX=<.?0peo'kBK7k:X73[Rl]scRlT*BFNUd^JEn*;1ibWnN`%@-QjgmOn
%cVl@7Vn&#)a:B<cOJ(1X"sHQ^:=&.cr4!!bB%G7B+a-pdB!t,:-raVe6QP(O`;c85V3dL@D7o`Z9)8doIBtc_U.B3mC@.,4GGBHD
%_qBlDg3[a$$jFA++?Ju%"+Hj2[45fViT+/eKd-Wc`%/)`%u5[Xlp\_@L.%?jVbHNeV%PSKdMY1*ebhkH6ogI$ohg"TckrR%G50J.
%..U<_4XSt1Y2,LF\p*8^'8DCQD8*HH0$B*K#U^`fY-##DHT<$e:F"b*h-"OSWJVlUQ@(b9E0/c8,,&]e"`UKT@rX<i%3;)'IWg1q
%%t42N5b)mbJde4TV`cUQ0_m1A4lT!c:;p7Q:>SFl,Nk-p]hBUsLSTdD"?$OkUV$gI<PM47emYDe^]p#q,^[QTDRinoa'L+dl)bqt
%VV^qh5BYaKZMsZ<s0'rrc8u26MkZ/Z*pC;>a^K<jC*KV\p>(bqRrSh$KY3h^fK&-XGN]F<rQ(g0W)p%W:3;>#q,ptYSR$MAgC[_C
%7e=WDWGB2SpYNn![_[AD$DTEd$1/0dPW^:Q_EiJXo+7a,^m7l`E+FEB5WuR=5tt0j:I_,<WOUfu<,W\1ftQu^l<5k.]sf&;qpKfh
%q*4l)5QC]^IfB:1r%)/"13sp]PriE0\Snrj`B!^9eKkS9;$4Q"Sr2p/.pL\S9)KM`@l[U;3PtoT0P\4dP*4@cbl";U(4/HRC7p)W
%b;\'`nNAk@i2XI6nkpL[%<Vk<6/g5sOnX:=.n93'WJB<ZDrcAnE;T]=2+4i0I(_d^=JHgNVZdlJr!a[P,+Vi4V(1JZ=*>7ZSiC5T
%%i2/[:Y'R$6ae0s:\E6u1]<GSKQlZh_V@s08)fB3Pu%kd"!nm2`3Wq'+jsaYJ"pqGOtp+c@#-`/J)n"M?:"Fr5uD-V)tZ-gH#/?<
%d0M;#)pp2d[G@m)WiH`11%9u[73K6WcIsj6kR0r*\"A5A6(#1TCe)'V0-34:SQ'$,k7Y.qoon`Ijr"rGH9eL<Js>C;fpf9'XQuMQ
%c@3.e*G0-!7slJPU"usHT&F4Qhe$hJ"Be1*^03a,Uuu>m5#C=u7,M,:#sXt(X5%bo)Tn9L8mmP9C$NBV,FMTKX=q^05fm';2u[*,
%V+U/3fS[1;Peo9jkW#c%E/)\`(L$fr$leN_+u2hnrd1k*&l)ZBiXGI2*r)J\20bMS-!bi"1m"'Yl[8?b1X]L"LcAs[!fC*A3>ch6
%"<WPB\<7GpGqF(0G.0B-gB'FE<DYPSg6Zl-382%)Ug$R9K[HW6>ehEEIRJ)?H<tb?d%kQA@O7cSO'P1dCa=>1JT=2u.I`1#:d%F4
%orI)+GW)m\r=e##@=MKM,B(a1qEZse;FVKQ=]Fh:^&N44JSc"tTL>cS"h2IW`C+(sD_o=,C[_.ZL>jHn#Ho.\6E7L^1&GR@8fqBU
%E0H0K:p,#:UOf2Mfo<K?IWY)C,al5^ChL/*a$#U>]_e:A&-O-P\nqiCc@`p%4\Z_RanrX230uaactA3'RpMVe0DI\dMuJ]Z3u&OR
%qi!KdnQstSEOW6"Zm9/cc>EgMYm<[cLE4u<A\ALSB=3IKM:Jd$!N#L#48GfDT>KHe[WmfZF?b1qdd!b)I1cgg7&sWl*GDVG'qckX
%n)7j(eMafps&P!?M`-Z3b7Fck`S+OKVF`#obmc_GXZ:`:Ml^#$r:]9#BbBp'DO8ff^hDh^k^dX&jkV=iETES+fia2RZr`,-:-ukk
%F#AXqG;-@RDQocRg^c?UP[KYrdQP[bFK'chnd88mg*/JX"Pn[*]eKDnMlM6\le!C?$LP(HkQ_&KC:k'Tr\1XA4]]1ehQpX$YGBGn
%LM&p&]S.Wg+rs;f8^=n4kdR"/XGYP$:DCARd6<$:T$f82d;r&hSZ36>h4N2U!+p$<ml&u9>HV@#UD<5\N@R6e<ClO8"*+s>%V:V6
%fhB(7,Tb"VVfX%5#RJIH?f"'_qg>/_+mXFO8Iu3%Z14[JP-R%K!bNJ-iAd"MO9pm^kF]Tkjr<Wb@mZq:n%J\\Q3&"UEcZ.+2g;8-
%gaDN!CVR"W6,@m>RpI=$*XA^sX"NatrKfmu*EkX'2E/MAZt?cn1AH8Z$*"YSAFtCpLbp3'iGOjIl.`)Y$_dPIW_C"/)&ts<R8NNt
%hUcn,EO2rX/_a)?rrTSM*33Ee,#jPMq[e20'89c^MDp6-1cu17pV3iU@\1RWKsXn^1+Z;=->>E0N@5+hF]TNm9,.WlRX[k/RHCeM
%1Xd_-"DFUO9L%l")iHUh:_'h/[:^j.&@i*p&;n,an:msGSi9XA*<QNhOjhZgNm9tGp/>198%-^^21?Dj_1#Y6h2sd5Jk?S_Vr.'n
%W&=:A;$Y<`nF*6/9PCg.nQUf,r<2GO9P?9E]sf)Ld>B]c*I`.qS;+'NYCY^-;P9+Jg!rD"1#`XmI#-40<f^Wmik3^^+NYYE2pbV'
%&oQ!@"a%MZj)M/\IJL?6;en3jeI',=47RLOXJEH)2ET96k*KF'Y%2+qep`Th!XU0:%?Ac-0U9h"L51fAo4(Kon]F#A]`cN6XtpWi
%J"*W`>P@bY%pj;aL>5=);OrjY5J:(_3eK2a2fI:T.sZ"@s$6%h^1n4n*_mF=6sK3[qS$YW.X&A.X`H71</dMkUuSm0k'H]e]>W9L
%TfD_'4JTd"=o:\Ndab_d51!;Rhs(i=C%mJT10\Smk:Lcr3bJ`O@Jfp3k,lei51+N>=\rb"MKY8NB^7_mQF,3:&V$_5`>%uLG/Qb-
%\Dl>>6"-af]Ng;u/\M"g8M0$)AP#ZG]Ge6f;jpX<b_>Ys^s\7MP-A%K=K#QL2O7\^&+2\a12$$%1s2>/'=k1^;0N4:JkB^N;ebte
%\Bl_%C-/6K6E&JXj$WP7V*9bUd%fHSp@aKoAgcG]qrqKq81*M:"Waq?#A$?N'7-=a^,KVN5pITQ8L2D7Cn"<afhr122s']rXS%tD
%EObK*`=WXO9<&%O.:kpB17soj-T"sTo0VM6H(&V5j'$qoUFX73#-*IYGJ7)HY##U^D^U8mj0d93:B*tlIe&b_Eml91+6Y<7-'H_-
%kKY_W3S02H1"CTha%bNDEWN]\Xi3>!?5-KuGO6ddU>bL?BW<Y9`O,J.i@!Mm8Vq(CPX8@kNiYF`nNgD]94*dpR*E/XGCSlBTBjo=
%B8r]9X*fhQb@u,]8PklPN#pFGSCb2\+aTK`f2F2>T3$$%;S(p2CBs4Y3DetQQ6dI18,n7"eR5T-N<NG^XA5USj9#JQ<,ICs<ef6I
%1jrKDnMCt>Tipac8+U>,UD*+0rNJI]euj&<Ct37SA[C-G@[#TG[npJk>#+D*G@,)>Np5)/XleU+7U1*&$7X4Hc[-XXS3VniPTq4t
%*f2b1&]0l*$*S8hf=jUd[_Qq-.?Q[A.V6^227n_7doEs$!AD'7iIp>Q^THhZ'd.^'F*_!,pZ2Z<oDJ37KgP$j?McMc90W`c^E#)<
%pa)P0jP/!qiqE5r:ILe6!B$#a!c?(E^6'r^Sc/Gm4C#\IL^1``'^f<<l.a.I:C%d9,h7[eja7Z<P&I^001TQ$@@3RD5q%1`9`G_a
%Nn%`^6!L_#S!jJ;qOap([8ECJFDg=3SPM$d=#*'-/9E?q9R=f"[><cBVf5?EQl;`4:Hs[h_49LAOm/Y:/PVg2A]WB5n\48DL!u53
%0%h2hZDT\+8mHVQLW-57k]U/SDOB*?p(FRU9(!W@Vg"ffSd8Z$bo8X*ckqYH].jD#ZOmYKT%[r>oIFB?4^WjmT\:Q=W&&]"ae/-g
%0H?E&;>Yi'pT<)(Zm$3Lo1N%IUC=GlVCP+#41I_V+(S2cE.RkOX12YU84r'm@^cng_1uaHniJT/nH6#srWIPHDrpK.EY:VJ;jd:"
%[NZuU;d8;DU.sq7m&NXgih^nW;jqd0L1T\To56/9DM%QIYlBPV--r8P19>cZQS<n\c#u\ql*\1X:8UT]?B>/lp8J_J+[]saVYSTn
%:P'!0Ja`1V15J@qUf5R^_M#&L56&8ak`?@:)A.aQXfmTbI6"IXrk;SIpbd/8Li#c2*j=6S**dH'mq0F-NqL&ZquaoDFq5:Ba6ONI
%UY"2L(>\g7FPfHDYdILn)N%?r0X6A\<88IA\)6lYSOImh7qPl\6kuj,@pQ1\+<:'GG++4WAQ)aj[O`[@?VZ4D49\>_ICC+^W(^>D
%9rX>,*(EW0IB`6!]P?%=ck]6[(U0M((k(;>3%p/a";_)"(F>dRE<rg`&qo889e`QQ:[o3`S-ni*.O.iJU"Gn:9T@J;Qf=7JfJeRc
%_GeZ6,=kVdQc7?dpOm8u8Qi^ukBo9(U>/E`V!IY]Nu`elQ/?>@B($Z26GrTTh:I/M?S+7`>=#N#;fb&ueepqXW"0o4ZRI0b^)c0H
%[s9V\_C^WnS1B4\iBH"bbF282o]<PJ7jGEI.Les87@IuYd*(d>dCSjVl<,e.]sDmRq4BW=r3*V$lmKqCQME/Q#R<lf8oW'.8]"uB
%b:"n+`H!;(CVai#ZUO5^WI<g:EX#KSH=3XL*nd+&Rj^>iWn[9ee1S@B*77WFC\Ne?Eh6*.i[WV6GJ>.cOOAVTa*,jnqsC^]j$68G
%3'6qQ<O`uBY,=&"@$/iT3FoBfI->HOIQLtL-[Ip*42[8Phpgr"h@cOEPETMJ@,U2YFWtfP8ps@d=s^r4BPcHW9!jl,gogQuLKYED
%En#'sVq"TS<22<gr5i/=h752kLVGmnIF8-feNrHskmTO5VgIOY]?>*omRuX^gnVQ*-/\-;?U(&O8u!o-gd=2gkaPjcM?iboY-Ub+
%er\A-PR]I/<MFu@FPoH+XUj[3I^W`kI7T,%=Binq_&D*hQDJ)(p=o:63ptnV[:J7KFo&Ks*:KHC_Qa^)>O!m#\:8!Mn.^o[O1K74
%2E'R%b4/+_QjUO!Vef`l;_$TP)]R5G"mdBOgGS%OUuUm(ZhR5Y:hK%dQZVS?9'f\A)".53Nq^8:&e<30:M(W+L&3@/OVgLL+N=j_
%.<%lBX`rX9L7n]HC(V%mcIY]68*6HJ6;fRBCNp/qjSfM&C#:2=+]kN'G<e(S3s49@nkb6./5WtH]Rn9AHWUg6ij\[4E-I5DND0&Y
%`g<N*30`n.]sCj"cqi.DLQ\h_O3`76Y!s-B\jJ](H'bI)-O7#[<F^"jJcq?P/C"M$;H&EOg6FX0lat*odFh\>JnBc?g0u'2kc0<R
%3;(@!TtK^$r9pIpe"HV]pT_F'L2YZYD'@k$7MgblC8R6Cpq=!UKO\N`'d#UqZ6'SEgQYa_'+a&:K0A[Z*(&/3.hEejPFUd$\6a#g
%CMQ"A!m(=3MP==X@LXj6XmC&MEQhtMY=?-I.Y[1,@recMWgI/B9=#,Thsf%$m]k*q#E1f<0jUAgnR\n)V-fDG'11sU9CKPgi^)Fs
%>s9#BZ,PK,7,8nWM\aC&_h[B.erm.j;dro(`o9"E#W.*_[()UNJ#nl?eT6,kDk';QB6;5AaNfGf@I^=V;;q#"QP.Kg5,G!M\GOFq
%#9sk[X4h`70muRJe\80]Zg3Q6r9EVr2]/f4DR#'\:ThRp6?Y<.(OeH2S(BQZ\7V)Fh9:@RU$a"ZG[@)reQ2\TGjkGu7GFQEG!AD\
%EE]sg*WA;q2='3R]/E\T*#U7j!ZAp.B;qBTH8g0KKlRT<%QLV9ob8Lt3.B\!QRE>V>X;h@9N8P)qW,/4J6Ui%Y8bqN&+I`q>d]FH
%pOTdt5II*/)9C/!/IWjB3I#pC'6oj3%)ZZ?\0![h"Pr:8i\2!+Y.I"TUbEB1=g+qWT]GSlg5@1!l<Y\g\lM<h6A%<;7=Eq`>:q3R
%(;=*&`2m3`B*_,p0?;'8>!qenh3uN61ceq+dPP)PbMqX[5k-QiFEoI=bEWXG^8YXba6'<PFK*QkNGK4!/`um7$LPjI8Ih52h0#&W
%hhtp=hjmU3i!t8$Uqs12Vm"#XpJ_G:h;c'>G?;Z'nCcQc[:qQl->Gc0%gMKK/=Z*hM^eJ\1$.T/`>i/aGV_d#?f74mNc!%0eAnpk
%2=f5n)8ST)S&<QZSt`"0O?]-RX,&&QV2)Cp,(0.^Q>U\^M_#Eq]efR`a]\;k4jm6l_K)j"5?2%?\f0Pj)Grh#Z<f^DRe)TeP^5rF
%\J&9^X5Db3\Gap5Gc&/eBV0J0AG),Jpg*T2:[RB*6'.%E1hiGs@'j7&#*?K_W]['3Fg&]lcRX)YS*mt=Yafme`)g]Q7iYH*+es8<
%j5=8(KL`e)2/iJiEk7;CPfrB9p4HTHYkZY4\="Du[j'_3Z!]:>DpY>-bM,)d!t@7"XU6h57C4E)ZU!m`R&Km^i,kb"5!M]Q.b=A<
%&gm?6?2r$)+O?]*Sjgr^8/AG>?U_]@0./Hd()//Y5+%J8EPEUG2YoP_#%rR,b%6ZUAFqY5McNN.*7Xk:EiOdgD6Y\_(E.sR>+Z-u
%&)4_/]sU$SFJ;*;36_uEqYhm[BmhbhG@t@rQd]YmM/SC8ZUHd?9ok&]cK'?;G!YjG'$oSa(iqVr7BIVLEAeq/pVh@NJ=ErkA/ip[
%bs'RF(9Mb.$(571P\`AJVj0%QaK?u(b,nMm+]Wj$;"V1om28L0oZFf959G4K@=@-`@AbDPK!*B`hXBJ[g<hmc>E^a`ZmsD!08?Cl
%X7Bfj[ATVecM[6/S^^UH*f>QlI8:@2\iu>F*p>T^4?lA'-)nn(g\,V>T9<rC9\)'8%bl-PF+om^C+^4g@3p.e4Vmc3Lop*G-BN<J
%0r>aTqu#$E3^$F`k))($W=m/M/C]"M]s:s9>gfZ09V/!-S*J2q'bq>0TcC`eWA?/G;XH3]CYVQ[RVpOYV]"`tc<>t35I,rCd`^2?
%[M+.'L@F$lm5UdsEe:1J``0ZF_H/eQfS/@_JTobX4#g<@Le:phmRu:V7d\ih&5HMl.hq0\-h+Lr9]obkU5<`NS(G>j!]g*C.tqY,
%I_0sFE>Le7`8'A0GAg:$Bho>&'5]0-%YYHMJ,4"\Pu"ISr=G8f`<@6p*STO;FS=2$9AE`Kk<0*"GKGAa`[ISS#$Lj>k'G6-&WO08
%c[hn=s7/tKK3g0a1-/ZGbi/@!\Td/YHg_Sh)qYE3,r+N$Uh_W+ptF$:;E<-%0&Q])S(V*&)Xjj+#'F)DBn4Xg_D?5t*%aI7MPjQi
%)r\[!fn$ECT@Qf?^."`.[Dr;bDKoT-b'Ke/(BIRK+5X:JKF3IhY\[Ip)Z2p59-A7FhNdLH)[?R.L2+].C$G*Qdm&!SCV@l8,j;-I
%.ULuYQg1J"@I5dcp[O]6-]:*EFhM5J@S"#D>PeH8Hgi&^1SC)tmAuApn/0gT0=gYqLuXu[G0M.%BOI=adVO-DHtJEa4^ap-iN)A0
%qE;e!IXRBnI*uH(n6SZ6Oiuf!ZCmGl<ppEWGj_nebqQ32VI`YF\%-n,BgiS6h*Sj0VB1RP]u4IkZBn9H,YLKBQ^Lk4h1,'Ao6D_h
%$!kj(*8j*#loDW?0&s"'kNPE:0l0%ijJ$82'pcd,$k^8O3nGkMMk[qAP2#D$pM9W>?Kq$i_B.]p$I&=bc`i(?`#=FHJ]E_pSgVZs
%,.cZ45$WHL^?@3Jm?`3;H4DBX[%C*tkf67bPTKO[-d%$1o:hP9aRbBH:ZmhBB)$`@Ds4kC'JPPn:s-m-.RNFa0g&QnFOf%1!ZUE"
%atM`;3/2D`Y/B^(@qu+p/T"Lm&s6!M_"W"\peo"iE!9T`pciAToE:3CEK6m*gJ;pPb8)Lg!^8Aa]qJ^IH?C6fW;M'\Ke#X/7D+GP
%;gG,,-E_]C]195le<0\9aogJrOUM`u(;'7u(*o-br+-Bn`b^e'0#Gt^L3[Dr[C7V/8MD"+EQ"3OY.r@J\hWP2VJ_Q3PcpS.r%<I@
%?.n_**kf00!V@&EhnniXe][?:8d/Y<)KJ9JU"t7,iG<q"S68S(c?2Au*;uG<c]GSgi]GLaK%GErA0X43"BkJAVg+l9@itOTo)0NH
%UsTF2f9LKIXMW5qfZgPQ=)<j$k8_SqW?:!;f)u%;HAqe-&g5'TXEgh[d/Q5DbNW1!k7,$>q5DurLkWDNRPdAa?NSDr[JV1FSP(QF
%\-,7.0.Uf>eYNR0fIRMVRJ*R;&:QX/(Z=XH0C$6KhLtE1\X1]X+l;85Qr'B(.+.Nh#n<)?1TN0(jZHb!F=>3<ABQ(S\Z.13-uC*?
%esACL9%P%A*RqDHBi)@@bXsth10[V_DL=G@0T(5GClEs$LI`cR$sGb#'4kFZ^5BF.=hCAY89m1d(2j['H<L3Xa7HQcaS[-^jl.W:
%l]((;7gT[fFZYL+hB&!^<,[Ou_&2,8NXo(OH?&EPIJs154E07M,PJDm+p>M,>hi]JH!&8PGc5Pj1rrWCGQ!3S<MXl9^I=j\obY4!
%!k!^UN-o;5I=%E$n;/cX%fGa$K4;IMB+-!+!AX:Z$s1co1sMM8\\F\7UiUh!6%#<m#>s#U0G!^Q=[fY4.BW(A%;3G.6hPE\Z,=5T
%d%jf[XXmWMZmCNNdJW.O.""m$31Ns"Qi5l@]cDF0c&,.d+5WQh]@/t3G""E5$Om`f=g&kKMtu&M2ZTXmDod2$O;&u6!8-#$!rcY.
%2cCIh,uMk:,*$s[QG!^0-rD1N[qM;(+O9:-!Oralk5?r,^D@F&#>.*KCHg;;G$FWZ$W\P-][:NZKVf9%4WU#A$S3pcV>`ecOH+oB
%iTX5[Oe\_/TH&]aK-/!<oD>d(3`#JDa5rFi#tU;T#61jKmp2K""X.3:NkM3lk:Pip<cW/Br$5rqmMC`+5`o)Y<ggoM28%I;]cE7A
%K[3`r&8.j23-'!Pb4R*g2fKNk]CFJ0&'oPkI?g^7Xl49#/L>d^s40%u!L\3f(+MQmTm4?+oo[TVq+j-"Q!"D+!#2@=#D<Ue[e#]\
%^,S*68#9Y5_)"V?flra$V;/bPOAtk6]BTuE)e)Gd/r[+(>Ncq%n-5a9_<nde],A>TlA.>7>adBY8&"c_^+ACUDh*b?qag#"[fZ2r
%c+hbgV:Mf&)85BU>0RQ3r9U(O7B`]ZMBB]>pXG+^0p7M!&'9A<jd>SLD<NQN9dSl_#`6S0:'%R0ZiiUPej2=AitpFr-X)R*qNJPD
%/QNku-UCTQaL,-N/tR&S<a$NubQeINcMk=D\4a0IMPW$)EVlcRj1j9ZeW-oYYaVJ(\q2H`?D6?&>WMneB;I3mgEo=+ml8QA^/h&?
%c,h=FOS.h8JA&aL+t[15.GtqLnN.^5&73.XgeKAGBLoP@!PorKTspZF*(gI^j`5Sl6ed;f[,QHophaA<4/j_=FE?[66sI%[gJ5;&
%BRYKfoc*?XG$67n@8L1($^3e+9&%*tk.-c_XFfp"MH8@0;*ZZEnnOoX_p-UA&$Sn9k:3?8/J&?IS/>`$&UbN("'57IRiebf)dj+V
%BjQ4g34go)[T-)*AcY1tb;A/BWO+2:LSur(jI"FSLL,n-%/m7%O'4?i*hK>@=;ME_27r>X'm@cHA=6$\Ln^lOiT?tJf%9<lKqV4.
%Ur2T$^HfJXrR`C)c`3N=eZBgBQ'b1u')L2f2)TZ7cGL6j$^XoYZWWtKG*\R;LZ5@h:0jQk1lRL^(^laiplk@!bL[;Z<luJ\N)Sj1
%'&FaS]&[U,MOASOjuB#LO>l.FT]HGiiNDZGZU5*uF@h1\CU:>7lM5u'@;&ZDUW.ET"5Nl+>VIe5kLG!KTG#h6UBN%<_jZ+/EoL/-
%1-_kDn#%tK4QV\U>uW"dP1MI9,MU2ZMr<e#M.D4jS%M2f\`B(?@6T<38%TQ!'a<QdiK>iiHWfb+F/aNN*n2]sciEN3o`F`eYbA/5
%m#S?>oA;IT/Fl0sMJY/IM`n8%aP)#qHLIW<Th@:`'I3sE!Y9c3Z[H<96Z)qBe>Mdd&=oW<X+MWZeR%\Wg!X=2[IrhOOOo#A7@YqD
%-aV//XWsY'dc4L!(;sLQ\4?H_m?G7/9s`//V27J*ja#H,XYlfBTg3WhVg/WDps@\)RkYUF@Nj+/UK-tsC.JL@qab.@^g,a<l.P/A
%:VJlXNh?Z140GF;mYU@"@Rqe$Oqldt]/\hEX\l3<c7eA2&XBJY'Tq0I>2??+BBUgb>ZgR8e;C/1-W#@;>ELt>o(Sg!U(Hhu"(-O;
%S%N26n^RFkPEWnG5^1uf^E%sgBXedM7bkZj\i\@!gX106$6sgnZSlZpm'3";mtcZ/ku3.bC0Q.\>\.IB&DF\C.Q.G6WL/09mgi1[
%c#FEBd<1f6-]=:&%0Lr/QOi+t^XnT1ASMZ44c8j%J1X/d/MFTQ;2Q*P$PAW).3H,d7@\R8OtHW4c6d<k3bo<f9.dkjZB-)h7T37n
%^NF]Cg>!QfPZ^[gDnOeHWDU?u]2>)kOkn/g)HE#Dk"2--]t7asNL;f$23>g+E9`"W7ki)$C<rPc=W+0lo`,*UK"m_6l\$91*[-lZ
%_a%EslY/Eed!QQY0&sj<HTa<$q5n=@JhELCd;a;]Ympqokb.K;j=RO>.RI0CAm[8F$N?LcJQ:L7?GcMO4>ZEh.fK'ui%NMhmJ`2O
%Hefr$k2>9rMrV1]EAf&^aC%=T+_s1E'QZb7?#P]08CO-lG@s&OXQD+?+2kc^gJZ](NI"ftO254>Joo:!(>QlPgPCMPMMA`98k2]F
%.(LRl@n/*IHec-s&W'Dh86'/aZU`c+<"iN4:GL`b?ggspmWYk-M"=7ImGm:kaVR)h+NW@7Ts((HC7-<RkO6[Yj,_TTTRClV'EqP)
%@LA<CT_=>@04uT%Mp!UD8mOjN()J8&(*+1tZu4lQ%*"dO<V3nHnX-6jgZ@(13d67sA2C(B"(bWkitpU]r`7\'c4mq`Vi@.BpuWm$
%+kK,CU_%0mn?0q0<(UR2U%pXSqAFH+?%CdunF3MLT97+]:i;E6@3Gm`e.X$HC5>i:*[l>UM8X*[Jha5kkEOCopqXbUX.TX.ed1_J
%ENIp]Di4<=*@<r(G9'FY#pIjtdY)FB+>MXph-[$CM*^CiG=KPs\D!S\"fIR'k\(8LOGS_PiRq)a=Pls<2n$1E)aB>q$C!rsA@Bs*
%GK]"6eKfF?[X[2ujcL/VW(p`*4!ZMa]rl\Y!pN:Sh-uA62Y_WdflI["hnODn&=*%)!n+O!GW%'R&7X.s59>$t_lXK(/kWrXS<$(T
%Z\V.F&tll[nepm!fA)(F3_8kE%o;YGL8n9mW#YKb]@RXp^B>e6.L5u_E=?t-Mhch4AU`%(9:P*=Aggn=2DDTsV-&t5p;=A4?iBY2
%BIL"HfQi-'Yu.TN2"tUI'C0"\K]W[0'$K1AH&toKDAtJQF]o8U>7eDM>>b-&ZP+^hm^V%#[^Pk$p0-KMVN1<`(D)%X>T.:36a)(5
%.$mI-h-\uJa6*6Xct=WoBS,)%qdJqmp/P+hl`l[Hd)WrbXdqu6GF8i'QIPk`(Ph7!7TMN'neeHJ?Aj0b;:SYi!VZTNfOA"rd:)$S
%,cEpRGLImdnS:$6dDNe/2fuS)HR[du"!nFEC(-]Ce^r7QEiD*'J#YR3^;A9:fW2:iggc=b6H.TY3sC:@lPc,@JR6U,rp;CapOO:[
%&n[?]9e<rhn:3bQ)/lire_sZK/Y+8ZU38kkl'K`\+BPpH5'@XZa()@C:1,!c\F.)49G::]?Nge&9,mp>Q4QZo;MkTmGiK@eZ?P;Z
%>C_OWV4il<TP_:bqg^ioWR0E=,b"(\e/G>!5Z?q!)Cf"R:Z.#9X)jqB_L">(7mE:FR##g&Je551GDdf',"XJ;0jWD@L3`!>QE*5:
%'o$iO^JGc"_aK$Ai76M-Q+d'!;R](ao-Xq[Y@6WeI@6'']mjRicl9drH&(WN'Fr:2X65#<@[j3[gi]%-\(UCp@p=GpM#[*V]l=d'
%VC\j86N?rhrIZpfW&'Z>3JNDM3%q=..m)XblX4!/nfVXRYLl;EPqG14;3;B]Go1%aB9`+"$QYch1n9OR5YqeaP'0F(+4?q92'+9j
%]c-^]78L`7oaL"jd5pK*Y'aAgJKS1uV3UC.f.A%2c.[8ZDs/B;_stQmn"2]1FON_d\l`spr:GEaUY91aPZ"FS("Wq.eCDPe&hAAX
%!VVP_7@XMML4r2c;QYmfd>QBZ9FMin)5W/W57^Dh`p3tgEY\uR@_/j9U:Pdas1(:AI5qV)pmO3`e=@B">TG3`WTWk@i4sI?$JHqH
%2*VTc#G\u^rg%WbM1;23K^Xu`>32'kJ6FZ('3$5=m>jsm7JmH!.UiS(&E&?6(/H\Bm;eWGDgSot<:ZsUq-,OESk?]-`>`*,-%siE
%o$ts>>Mi"*Ym-j,OAS[D[Wqg49d3%M.=nk\oX&]RQ$95KEStI9h<ehh>5RVf3uWHM7Nk(I]pUgYe'5"#=X2B&JJ^Xl@b6#2=J![Y
%ThV0abEZ1YoVecog_r@M6/F)!R.3XtXf\#LOU6nSlII>]'2ei+9jB`EOq](UN@k$eDqG2kP\ta[:IiB"Gmt5sOnme7>"mB7lD(FL
%alFZ+S7;"f<[:!f=&.Q%[q0UOY<?G@Pun1t,X"lKDh%!<LO0^/L:EUf2PFWZ_0@9L^Z(*sXu:ICJ9G-d>A6A(`*hnerPH9fpjP0L
%mjG]6[nI%efrYba6p!2K,D8qGI(IO3Ni%S0[l24?[Sl.YQ;/q=_Ms+K[#/TXmpkO'k'=t$q[(hDOV<Frg"3.XpV1qiD.Z$G,#*:K
%Wn\q.#IQo%d!i@/DCa7ir8:=@6_%"PYAo<bIJB#=2HGFtWE\El;=9psg.+q%QbnI[HQqMhJ"7L7cogpS`A(oQ2S5a-QQWu"QnD\9
%q5n""FKn=/.kWPb0I6jR.hbX6`HM%!6&TrjaN:6POZ8(\gh3St5?A0&@`s8ilR0"_KR;kob"[0Z0HrWaPgX'7mFpT\/uK,@X:>@r
%D4fYkma`VYZ8S=JWQo@N<7fR_BuXfO=DbaQ%*^gHg=qoclQ,cIdj,bH3U,N'fh?8Xj3c7t3RJ6/+2=_!ci6<I&&%fq:h%+K7[p75
%W6Zb9<SJ\qG)na/l,,:s1K&2pHIP%(hS)k@m)3+H5AarDAUHr'j2i\%+Rl?UYe`$]qsAk.84a@QQ@nocUWn[H=W0u5fV;?H*I;uX
%C`aPY21:@.Bc3Ai-FC68'fUL0f%[iW&.L7m"K"S`G0sE^rtW\B!0Mc/^**KWEX0fb[8f+#8k2r%f2HCA+)&49JCL32s61s1Bf7(*
%dP<Y[c"OI;(H6[1f%VVq+3BV)rc\6UN`[Zg)Ar3\cAU_qH<N+hJ2/_hi[%Zf!PP!6caWWDToAHgLlUIAjB>p9@aMAS1eOaKZeOSR
%V&akB'g]3EI$jaFV>]iHQh.6I7bk,>gBOit7PB[$e&J&ei!c+JaeicHF,.8fgoI8Yr;28^.r6L"`FW_?Hp[R>ZE[@KY.)hCc$DI)
%ABkC&1j,Q0pS#>CLb#e%837O01_YMa!F*UX'AGAPcKpP(lT3WMEudSRZ"C0MoK(R+]cX(F-n<bC#=qD?]`G"INnl29<,79al"JoJ
%DY0Tgot-]#O`YOK%77Tu<b4KkoE^JijY5_!JLmQuBl>:u7iqBW%\bEH2DpB7:t2J:%M[s<o!lol+C$%l1=b*PQS!W'h"Yd\TU5AG
%X"ahJYY(uNF6I06H(rRGCh6K;UL:'%)]n"]=>TTTinj<nl,,qN]ieN*lEI<a:hl;.K7V2i_h#m9B;G]Vfg"&i)eeM(0CD2?@h`\B
%<hXZF0';>Jo#t=7NbeTbbk51895*OL#P>;r[8$++I>Au\mWW4qDF2%nQX+ht]'.k=9&kN=lTA2%TpL2jU4)(>e@-jn]sk7"DKRA@
%Mm(Cr>8q-s[+0FLBeoQrUf]5BZHM"817`70WAIkb@#@_0G)5$b#:Lmn%@.cLbKf)oPj;%WZu;6g3q;(]YK0XhL&qA#Dj^u^*[ik=
%]F0sq7'C'?=6QnZ!ZU_X%S5bfB`6D8]2QVDdK\-8I@8A*^s20+<#,nj=?f`\*I:/S(q4C1R!R>AHgbdP#u2##N,UA]JnT;$(Ht&=
%`qjtk?AD=&jTXEQ&>leW5O2\HNg3gP051L$67II4$8!?!Un]L&A\bb3C[Aj[%YrH9nQG-T0C-<<?iRaK'$72VHTO993MCH:EeUpI
%fOgT)X!aD59)ou+8CpkYiSt>R%*grapMuW&j;!/es2i#"g?4n1,%B*77X=anLO8fD[FNl[9A]J=Nb7T/"KG;W'RtOHZS**)Q1acd
%MXP[\AQG&+J]3"BB>c/GpX*\66#;Aj?Lke7d^gc3aVr7pC(f*)n@B.T56U6,21aDLn9Re_9]bi)'>0*Kqes<`L["(?gh)Lro)DlL
%b6alD^;:X7Xp[O^]<N:R1$+:O*E(Ku<VAbl,/'j-+3%AmbLE^_VnZcs)@mXVS]-Q^l[nkeQ-+tKCXarf6>8uV\[6:"pQ&:9pqMNN
%Z^fK="08&t;Y/B04ZlK).blq9U;V/U\TXq\s,uR/Z9:MqOm?FlXj2T]@GIf]"&`u^EMJih]m[a)5,q8Jn8LCOkK"Cn]a7`:jYP8[
%l[<!I13QW,M!=:JY<T*Fql$0:kH4Tpp<l=U,;.@r3(1+l7KgdkjF:65&A76jA?mL;gR>",0]!r6$A8)R&!)+ldc?53=$[O.oY=ob
%.mQu2bop0YbZ@NM/d^"L<f<46<BlOMrsJ)*It%+7l=HqrKC&F[%#;et?2)EFE]um^7YkVu'Fc!K36RW%>BPGkT!;4MQ4>6HFp2_(
%9/pD>BBgB!eG<ep?J&Y5H,G8^p!`EqkCc)/T%[[b$9Ct`^d2M+TuJ-uF7klFGBU^'h>R`G&FYDK/q,XV@tM/sZ\1!j:M_AL*eIpu
%cG$R3D\n;&e#or]Z,"uI`YH`.H;=?q88h,3MIejnd]?o=`/3g"[R_8E[P^;&'!.?7B`T&$q;.2OV<?DMTU+1NE?C.5%/l&k6`\'i
%Ul<:&l<Q(sB[+W:N:WAW+g9O>jk;4,=4(+XlQJu)FUnH*k0?t1]^Q*=Nd.M.l\g&s5mT\!ehMAKc8KHO=41&I>NIIqD:a\5e%p6@
%*+^rq8]1=;G=3t<H:.U(6]]^MrBGs)9Hr"S+9rS@_'3S@[MHnbklVUWG65<R.3kWHU2>l4':h50rX0$%/@NVB,rf-MJ&<T!jDj!7
%AkNBI'C^VLkJ_JPGYPm2kH+uGb0$e"o00'f$,78_gL9Ob$lI/#-NXE9npo*kor('aY-g@I.Xf=723AW[3$,1br+9[AVR&=t5d&\\
%$$ol?G*?Qp"eeA(Q3Q^;I7VB/R!*lp0aNAAFk%L"S"P3L`qAZ_L+k*^HTPP-3XKN>rKf/h2XIHSj1;Q%fcCNq1;u)H#9/M6`]'`$
%?1!C2]g&pph3B4P[LI$o1Qm[Fji6Xol7#(2VWeCo)LMRg^2%Q!qZrJQPU>"(m.M$/X"gNq5[7'S_>NmZPA;]h=?_>r?X"9^$Z/Yt
%`OprSdjpl)B1-,6S9fH/\q-=2V=U\LF'iL_*=5W^9B?#Y$,t5IB`*=`/,o:8E%g8KA')JZe$?HPGJ=c<H`jW=A!+/7f9qN5K>TVp
%0WA:;Wo7?:Wr+SuN(^_J%AGNjgb3RO2D/Qq?A_*-oP8eRQKoG-6b.p'q10L$j]_eOb:U&*5q.1k,tr2aP&Qrp'4uTMjP9$`4B_Xi
%F0>4YH@cl0p'YaM#>3J5mB>/R_)Hb+38umF?-QO3l.NUh+,[bDj\#Wm=h&A*<k:\:d8+iS\=0O$pPR"*('3b#*A4>`jO>(T)i9?!
%8L#+]jCK4tE".,0]h8:;KRZb,RJ5A'O94P)?6XI@CCL&Zobh]A`pc,`&BC[%*]s2'lf`YK&;Cs$4>Gq+7hGQdPM$qtq:,$9M*h5K
%(p1he@-g'mGlLK_$eq_"j,RJF2UnV;m#'Go!Bm$&o0^f*ld'm&$0jCg)muH!&$&YL:2U<15I92V^#H^:/aVu%K2LR):Aa:)s,2lY
%p[6H,B)6eG";#VDP`'!Ac4L80cAD$.lqeZkX7'?S6XELpq&/9?W)p(:QtRc:9Z=io<K95ogS%\.;+:pTS@]U!IHYYmMV;2A:eL%/
%nFI%EmGP*pb,.+($+aigQgV1g@]t$Pfs*_hMW:OViE>/nU@)*qoSoU@^a2%.G:n'3b>icQ'lJ*?b5(;gbq/G!j8[jK41_nY<f')G
%H^Qj+j4^gj%[9[&D]Z/gEd(g5Ks`Dj(S1@2.SI$aWa,?Xd4\g8g/&P)4JM:Ah^64mCa*(Si/4S9&gHNcH%<hYqNj-;EOt1Q=)+a.
%?p!aj:Y_&rb&TEJls7Y0J"u#ZO%9pE3B^6&1+cS'CV<qtl?,CG^OqNM8snm.JI:?Kb8c?pMgesNh%+Kk_Q\B-I8oc(k>*<2GEIeD
%M,eP3"Yig-IFOhCF[9o=j+kR:3j;t]QpF%?3rg8M-^d0[!5Coe)MY'd/1j0c(*1<P]5@S0=(qLIT-h(O#F)9[i+@a77F@!?rsG'D
%=XgPCa9EfNd:Q(A&?U*79/^5RAMLaQ=1puYaSYSPAB[f(LlL9j]6L@s,"eFDX3@lSioOm(VF$"=nWIOHfV,/R6+graQ7\e`<Zh%J
%77#uN*?*5c'lnE%o*;iW!E4(oe3VN;BP8/Od0'_R-Jatk+2FCX7"mFZ#rt_>q=<tUXNl!_E1NQ_?ji^Y\_K6?jX*TV4b&3i^>3GV
%aYa3V2eB3:PSYAi<a/!S[j@-e>AnKZl?q;n5,30.%Vep_n1Y?B0kOq"j"Qpi^ke>B2MWEDZdf3Je?rP(V"q/K$W6jN?Un)ud1=j%
%S=8>DLZM5dar8'oDBP]C]pR40B><H:[E2(rI`7I_G2U%]+m>T-]dpt7'qLX%[+&+m,Z&J0Rs*0UC0DouqAgN:Ft+rV]U0D+i[niK
%G9kX*&<(Y(C>!T'.;"Oj6&TP^#t_7d?uIUgmFk-%LYhn+6%u]ui_r[`kNP6:0t%Z'-1TY5bb#$A5)07iItVu!4j*F4jhm.*?`t!,
%VpnDEOO['VA14ffhCr'gGNZm6>b1Rjm$CdA^55Ps>#o^Z&m?V/Kh^0d,pJ\e>P6!JYrc3(1L]<%d^Ltgc;:0!"Dp!TDti!&oKEm[
%"Q<c&JH.<GGZ=8\.-mDdBI,"kY^%5_l;j]&?r%4A9udV`gFj8$)QsWMCb71K`t]Sj%ho2mFm[Kfd]39O>"oL.&scoNH_=!Y-Y"="
%\k'<R1Y/O8*[kVX0sKgRE-e]3Yfu;90hV<P;mFr#`X(U!g4da`5D82Jh@R!aO@3sEj,B'?eT9;hDpWml8E\+6a7J@Z[dY3OKVB(_
%ni;Jmp%/o\TLDn8>qDWo@.rE5WC<HlVcD6s+M1>l0`F(b#b]i4(<EB&2QfQEY'od(LK0,D[tsLE>fi]Hrs>sXK%1Sc_N&RB/,QXP
%7X8'.cQR_S19W]r?KGk)`%Xq3qB<<Qb\(%Yk,"rJc](Hj][\E/1MV\jX5Pn%<GPnp#5#FUbR_a2L#UD>Hm#EBKJ!bhRb&I`*A8u!
%=mL)hJhc[Nc7O[&%h5]\I-S8@a7m%-*-!`K+H\4ZDK1>,(:obIB(1B2rS3Y1k^fIJf1&[-SmLE075M#&Sl(G>g72jP=WBPRSKSVN
%FOW\V*pu1n\Lms@*sL\EDT@=/K]HPf:*:(:/"OP22\W4YEA.m`E=1%\q@Pg3RR#Ai%q9-EQASWUjoo(sZc\<@ngu)72jur<qq]Fk
%.u41RWKjJ=i:ciM.uP?M!BDULB"U!J@#uO?ltt#V=-R+eSip>?n"XJ&#WkIDJ#YU8Jg0>fAe5Q3;i#IJ.-)=9&MYuX'Aj<mI2#@7
%0BZ!=P]i0:cDnfF7%LL>DR$Nti?!Cf.UR;E0jA1%=C]TJD5BEuZB7SMkj`r/CY.'@NkOPPMJSNW"k=Gm3K`s1=aGu^GR.352r%,B
%0qj86'uX$V7'L'_])qu8#Bkq-W-PrJFOi4]Bp4.XA2j7<fXR/pU<hZiL\]/'?SUL2D+Mkr5=R<f6X_OBDirA[Z@S73!L>/sP]j-a
%ZcfN!MU:#;3O]2YO*pX[YK'']a_Em-ePg^H0;2uJmq&VJXW"kG@siKUh(r8(4KAmfP]loj'("eX"D`tU&_oRHgP)7!]t5@&5j_4I
%"p%XRJQk*#f;?'7EJ+lLqaC>YfBcS$G(I:-dR4ZNN_Jskp.!$OC-P<S5dhPKQjs]":`/EF!<O@-h?.78&*/"`oZu[!TMqIT'9jt@
%.+)s[5!9`eai1?G,F6d;pt/#0:$?L?fc4::AcSLHW`<)REf@3)CRcK)V@C@YkLIlhkMLZ]d$%$t'aWU.(f1547cu7Q;=E4gXWfO!
%#PX,N5fIV'k5Y=R<.'#dTpslilhU&9i7rh(=`^s_7k9'[HT_9305*!&r:Tn*aRe1)hi/:\'K2(VjhsX+Al683^Uj3fCu6niZB-^k
%DI70i=WM/q'_`ND5TK-C/![mPDh&_l3i8(i-",TQC"Ug\+1jkIH*rEf#oDM4e1kYpfe5LjV&#aX8Zk/I>YX7r\Ou@;_30qS<,4gQ
%-7Q&E*Z_J"V0\3GhCGk&igrQmM,^:qTb<-^_UH)tg?2%j8F1H"VWnnJPBS]#.cO13lN\n_4t4<FnUu6VT$ksKSC7/dPQ^_CT=68:
%%t"[)@L[J7Y&Wnserck4O7.h=Nl!+UF["kij^*;"CLd`YSlB>Fchl5iDKK8#p:HssGtm3U`]:tNXNI>A'<3K(:!ar-oD?cIpT-N@
%#8M8CP+Y,X&%.h(G)V^s*@sZ``/6Rdo*S-C@Rq4SkDc^"a\8C\b)>ld/]nmW$+-@MSHt0m;Kp9<DP>qJn.Oo/eA0F>G1$grR2$;4
%U=6Y32uQQe5-M19G^4:OMRA=#]fN_p1,PFCK-5ck;s:I\(Ybm[@epUWNd\VT/XPn:P^b_X7FAGNAtU;f6)l-CWV$;BaK[UO)ZruX
%FHZRE^FhfkI]RD0^MU#'TlE)P8m7<RUo"Q6[Q4B=IbJG;A4!%?n,<42;@LYiGPE71?K-Fbd5\4g\qVA6lW*50Sf@'J?K7kr+.i\/
%AdY\&Zljf2Y##f!-$1B.CJ:l:-/Ct/^;brND1rTH9LASj%pd-XV<&F?2b%Gn?hJNCc6PoO)^Qh6SWV2^?'T(a_R5i\n]?>_C+\3a
%nS=hMV7TLk-$4BYA?T1qdb(A\K.C$W5?-R:fisc`,_9%(@ZXq<JRYGp*#a-R?WSd8=slQ%HM)AtpiRAoC1!Zi;gL"APoQISOig<a
%<TG*7"'@lojHKF``WmgR_#n]as'WNsr(b<].PG]R8$F*8>&te5,X55<V$ssSrFT&oPZntfeejuT%70D43tE;j8isF/BA[.]IZYUU
%L[*Y[TGM^Z8k,Y!%#h5l:,]eY`<mqNjJ-mLnH$fUb3Z\gGZFr?Gc"VF`jJ7l8iTkR=8\AZe\\aUf-d,1%Zls#1Eps*o_4PUH'@>q
%k+=t,K[lIq&(4I6T9AR,8i#T5g%QtW@B*C90)_-DNEK4-Y>oD`BV]EnT>=)i?6iD5*'n%72ok@M):r,"TNIP`UFU4BF';\*:'G39
%^JMo@MfFe_Z+mFW+0gHBG,Y2$B;If.ZR6Z(%'Rb2K54)A]e-"4^#'>CNFXio4.?T?Mt2rmd3B908Gu2ejZ.3_d!qnnG.(ar(Mr'Y
%Ff\da\^G;2b3nf?Z[*Y,IS.USSTWS]$V%H2"Y]$DM+GoSjJ;Fi8/^+n,qo&AQ)Ka.83g=89Z%l:%<@o21k,7@1=H':EHuqrM`sK>
%7'SSsD`@P%]U\%<l@>'iVN0>k$-a7Kh\),$\&)!6JpLAPHi*&acfI36IlTgHO!!S@9V;q8hIiu9IjJNMZ.>'TcMRJjlkaIS?h'HP
%[bF[?$RN5f39rHn/$1Mmf)7P-XR%-KKX^As'Dmh50BlS0]LT>O,k0l`^W5ls,;8PG$d2=8GnPAX5h3D*T.uD.0`F2]T"[bH.71_<
%+`Rst(4/@d@_?aY<J[!#Vro0KhWATr)!USgLUMtn;-:T]:V#-m1ZNMj33Dp=L9[eBWDl*IDfVK&GYpsGb/q1TA#Q^C!\#2[K2B5O
%RqB"MZ%bU@SUUM)hnsWf*%/c7,>;&=3k@Xpr)SlBf'P*n'6)FB&@j9Oo([(K:</Qs=$l0Z.g1/k3\jp0IsLZ433#MGDod9D5:n)o
%6e)[BRorU2<Q5ijn&X=DX9o)p$,80<d.^PJ;Sb*d[sE/GY]c_DOtA@R9]#PYca"3_4DWm"UQh_TX4>[hKnQM)#,e*9%ql7iM*_fn
%-D:mN38q1b,%9?Gpq&'hN&0lT*W>Xj?6,-XDbF,T4]&(`'fSO,G(r`&bg>$Ck>qL7cri1c0bu2Ii.*&eN2E;/&V8tZO/Ll]AV:ka
%a!6$NA%CkGU0cgVSY/,&Vs1[;E!VHDTB^ri;<qsTA4!'1O5IeV-,nW?A3dIMDnZ)tRO,?,guT9-oAeD)YqK'0ktQVg='XCRQm>,(
%1B)8tkXi:Lj*il5!Z=0;-W&]i@NWkJ-CG854qIE5gk;I,f%N5>LVnp+BT;b<fF>gZ'XuBD*\8tZV8@hAPChBJGQ@&U>,2Wnq<Y=]
%Wq)RbKuHBFrci<h/[-^a=&BFa+.fZIH\1Inoit^p;2hm,fcpD-D.QiD32Va:1r^CrPZD"3nd>PORT7qA]LlT!p/NG4hM?`Kb?\-1
%`P.5tlZY4bfJ?H,aefIle',EtjAj,EB"P'5\jqWmI;\5Xc/K]fY'qDL%4<F.EOt/O,HYg+GC"NZoYUatcskhS\XM%.YQLO4!L<g3
%JbH/Ecu3;t&WU.4BPDmHQ'5E=[JG!cAZGF:XG3:2#Lt:i>GGmKZ!rH:p%6]p_hfuFLc/G.OB`aP!H(QKn"@JKTNR8M4h))ehj:0S
%RVV,1p:.gcE%_jI329`84S5q*iJY1Mp"@B>8Am<%Id3.J4g!H!`jtH,NaH5+5YA`&b1s>e@^_Cp<r,Tu6(OI/)71tCUHE#SVt':M
%[Ro32]0f'^^*.RO?HZ>t5@$IJgIOBO*M`F%Pu2EK)S3:dLa][u,bnA"/1''OO(..'ncnr.Q;O30nr52/C&7NB?s-^,4P;XK6?Sub
%)/ZpKqL,PK5jQrigA'+0%@)Vb3On82o_@=!rqbe`Jf`5Njj)9?LRZ8DdAeJMbj.\M:bMS&O9,k.5mrjPg+tC<'fFiNk8Bq5Vf'Y8
%TKRgRO"D;!*+6mP()o(pX_2:o5;-)8]Mqrl^j/,%=4sE=dQIL#%)\6/`-q)`Cr1B"mS]Q\5BQU_NX]V%W?SQKoC2['JrpmY<HsW8
%Wfai+/[`3gPaTaPOC.lYN:4^??QQ$iaL1T^$)/O#J=_IS:lAIjL\U+Mh=ts_@?gK:f-D;7[=p>"1,f%mdG==7n4YH=pfWF*$[KCl
%L^0`,@/H2"Faf-.O]:_C[#*9u0p^5;JriW0*4V35>t,<igqN=;m)1=?XgapU6O]PEXA@eG@%Y_M,eX`I+OpB>#BI:A&nPes+-L]f
%DB>R_"AS-Ji0_hng6hP9D&/2c^@C1K`@1/V[okie.pR`LifVTT;#DS]URJNL)qoH4((W%Jp=YfT.er^7g-h*K,dbm1.]q$CW]#](
%C>\f*G%)0[f%^5'T1>f&mr/ao_78LfG"4Q'@*S@^Ur,8N&5=m#nX,V[)NAhY)`qXY,-+oaoDsC!Vga>JB:tc!D=*dPNaas7n(-LY
%W@0'\NcGa_F8>]jCS()'bADMdqq]Ro%^J0tEL!M$iEa_,1EU8c-h?h4a?%$)),@kc%_j2D?:*5*eS0WX%DMTpj.bW3bCa?TfTDM;
%G5%l<kKcbj[Oj73M$d=e;J:TS9[cfN,d&lRGnrRQ&2;j%5GRDOm>5,u(\b8J<NIsIiVEu-N4m(7ej@X!7H;+Se-%qkZNL1*-sOIQ
%A[_$m1?kT9e*u#+.QsD[9U`.S'2b9E\!7Da]FaJV/.'3))UMVq7pb/GUH@l@N-iI*8t&#FDh+TcUSQ<0[iU!#J/DClU53OFr&MD=
%?/;@fH7bhX]1R=_Bd^ltg.s^l[uSGQ0XC]1psc"(QYGYea+r#Db6g`cV;9"SU#u./QfTMi"g/El2iC$IPYto?gEG,%\qY3PG`Un8
%m)H\"jB->6>@PrLm>dMZ:2SJR\&so.qf7mf7P>EWGIK9u.GMdT:e?;SD/m16B%*l8oktj#94]]_Y[Ru\et'lXf_pK'YBS7Jb24:R
%/;Z5[UUI27YtCEZg%uK(hGH1!WSIO5DgmaqHU+KoS/T2"*jQ3OdLJTc3Is]&*RQN;7p[Kk-dn-C$VO$j1ng[eUU8^0hgPI!;'C(o
%VA?Ysc<r5'.e8,t]'B,"g>j)7TU3odf26UG3-j9T#UG]UXC?A,_m4N4Qc)j=`AC3\1QntOXgLHpMVX*334<#0JIj+ZZ3$\<]HhV2
%c8/hQ"i$;+Jh-8A!__hhAqtU5"HpB9hocZq,59Fa2].*fq`0n'2?DI<Jk@qPAG!YE3(quMS<tc7K_C_L8Sn^2p-RGF$E!SMG?+O.
%?oWadAA`7bk+\T&IW>B2F]`b34YF2h<g-\1YU,sO"nBE[.u,;e";Ug`<-.>Rg#fg\F51Tob)pt!GO126:0C;u5aT!YJ1=T+QAX6N
%VJ,WI1$F$e#k\QqjXIZ^=nm,l5(eF!Z41VJ3d+'WgY+em!lPDL76K<)YIuHjE=a@hFX$V8"M$i#O%uCsMe\S=ok07)q6FEWS<Z/c
%-!9mq7*mek6FVc@,e8f8AY_8k$;L.L`,^ZCUmgYG3`l"+a!I5"lbnuHquNQ-^&gNbm`f[9Nc'qW`J;&gO>A.ODThSRS!2FbdN\X)
%Xu7D*3fi]I2*]#`UMQ"N-8_bt?uK@$X`rd<[r[c1*8"'D).f)gK)5*%!>8f6B,/gVD,lLZJ\G<),sa1'j''B9oaf/QX+s"p/-/W0
%bFt>T6N:D8]T9qN+k$_,S@*P(jf<jF+ncF:%n:8O*W8m?p8/PJnlf-?);rgSD>0?IQOHKZ,r@HSJ%OT2eufPEjZWKid3NZE-"s9g
%W!(Y5ZRVYA$Qk(*g:bmQ3CoD>o(%h)VY.-)o1)[HrU^)kJ,\4&bGG<t[;J_6d@`r)aXH,T<W$oBpJliNk7UcmgnY.k[_\65,trZ9
%Sq0be!(MYqGd%Etb:faF?I10g*Kn>6l3;hGN+NMUpF+2\cq,mOs%10.iZ\/*LtaRmpY+A\[4.rm=7+@(U\QL<He[CIRM$.Q93[jm
%h6D!L0f`%L4afE'n]_Zfd!YW"FWB_gR3M24c43)c(]CeEaBL3/\>E6eg87/kSEK7-Zt&s`0Ki6ka`s-lEb9EL*h`24k0S8RmdAr,
%]*:l2hAqJ2'IUp=N4h;K5Zp3X&Zq1!GAgp_4O2#b]fX?Cg3nhqM\1(s']e+3=S0cL]!_]-6eJqm"\BAj"/Di/H%?rNIOKlmgON*`
%fKkc@6dW*1L:07&X,7Ahl62[d?QFn,l>U!.(kG^4/Fu,($8%ZLUKKnM_Z]Be;p2fMON$&ZDEF8kjgoDIiVL*+>EcPDYshD++CFpS
%`M.8<#il[T&KP,S_H@=I>9BLtB6LPH,G'Kp5m*#$m?b.4X"d8W;BCqChr'O(Z)]ja*FFAF,<_'.`(,>=C';P!dA7/4M==?PHP@j6
%4CV-e\#'&e2PfAljIC84kZec3'UM^'Y[Oh;JpOPM4^p@hD]?Mt`*h4#\$p-(%:Y&C'WaSt&:JoEXg7;-1::5L@1&E61@P1]OCS0U
%c#Qo$6_')TJ!#*7dX:28kC0Sr7jQ*LTJQDe+SQF+!]M*O[)5fQe"-VpQta95js%e@TO$@!lHDXL1F?A\.X*2o^+YZIdW)4e/"B0p
%lq9q5W-*I*eB15>#ETat`!7%rW4f.FAe8"9*o9GiDs@QQ$e=tP:ohg%JJD7)XaB:F%qV[m]/BoO0os8j6Jjm<T]0Tpll8-1nBg4o
%!b>(]AFBm(lRk]N/R%2rLNkEMm:NNDp[3>Y1e>3@ZcY[#'q=sRP0K2j!nb-rO"UkJDB4iEaWlqO3\+1G@&69oWk:\)S]u57M"1f:
%.r#!E-./dY[qcg9&NUrf*"dPf*/Xt+WNjLk/jJ,0Z@ltO4!W3-g+p7J2@^.m`WsjpB0RhoPh6oAd"1VbR4G<t=/!(&@c(E7V!JqF
%@(O61Leo;MSW7PAOXCAPqh]ni"rcVq\brcQ*8Qd7Ol$e=;&i:%P(;;9%q[Pd?d5eD5RC"mmSE@P2hSV@[Ps:QhTXlVoYpB2`&WY@
%m=_R(bY0d78\Ye"\e5O/,GUeUadf2\&KAGR,-q;JXM`&,Uq*3ZEQRoeKle/H%=)B4Ug3a(pH0h3Y4mg9+B>T`VeWiEKJNKIH5`mD
%'h"KtV.61?p;T4;4g9*]^A4ILi`"^pDn)R?g0Lg&dn6#T8fYq&Re%>68<2Ka"r[iL33O85(NE:q^g4eF&!YEuQ,%_63AJK)>^XgD
%P`o84Qif3b-pn]DV\Stp3@23o+3MfMT>QJb"cJpRMjI,u\n<$o!/dR\F&tPE1Za^2ES5F;`"QLY83Vfn^I4f7G%K,?*GALlF>dMq
%h6K5/IXs@ZI%VtVnesa+,2AM@T8]o="c'`S&*<tg`"-YQQ`8YM32Z'eH_2@j\03\)Y?^rZ@='kH`X/9TKRJ_iL7_(p&Rsi2PN`hN
%4cg1Hnf3IiNH_A21$#e+4I;UDB0S.(C97H=Y&iii*(c1[I=_>-I@4Rs8B1NT(%rcC!9p/gctG:+!`UtmbWpdZ^%e"@OHH(o[r*]O
%*m"Zu%tBs&&gr+8@-<[\=d1&A.[;nmACEh2+6%VNW\UleXm$[L1"e"e8,1I^a[9lZaf-ktGdSSXq0dV?mn6c,O42oDUoHi,/^:''
%.mSk*<@gs^8X_q>;=p?%9h$;2(NqHB]P3N'rn?Y#k09o211)i4S!%a".]4T?,8h3kW8_0q.pNHUYsL,+qa,V$(U+1tWjQ)3(KNAk
%4R4>Sem^dJK]?(0B(l3-SNYISGd`qDpSa=j1q,a3.[%67Vhi=Z[597Ti@4_kIOCq?Y5qC?SOPI1@_U#\WT6$p72elc.`:Eo=tN/n
%ApOsgrrQH,'flqE%6(([,uIXCcUAPgg=d"t92f!@A4tt2g28g![F]s$l92fG_0ZerCJV9bYsPt4`%ZMeB`*6G]77kI1"C?ZWl,ud
%6CbYH`9<"uL>mW,O@XGtQJ]q=;"Uf4Dfi<3EbUO:Y#C0aqje;eh?1D4]VdKRH_0];6F\Yb7f5`$-RD]>5,*`.eh:%35lA+!7rd^l
%o%pK#O9QGBZdo@S0VDaS/P*HN\5kF=rbH;=90B<3#,L/H*oD?aRD`q0H+'ne#ioV2H5m/[g^P%g0Z1l?^n;I+!nPU%?1PXN>nB%X
%"mP)k\0"BhFGIK="`h)bH@olM:b1>'TojII;r6>:&FWrc]-"[uEAdJIg\%#Ra\D,g:*1)@Im0Smk$1I5Qs,kN-7)I4jFT4cmF'qT
%K5tM0LXm4h\rHMZPao($ENdW@jaHN?gbt@CI+NH6,\Ci<Z[K5DC'dNZ($7rrrb3<:=0Bo(Eif_W,.fbSMW@G/=Ae(Rc[ROKV'$(I
%\t+pV%nE/abCa"9A/\m`KjV=p#?i>e.(g<ajaUP[jgYYVT6L+PRWq*,3c>b1O%9/&q+"L1eVall:tCc,^(rQa>#ruX<N)-#+86\S
%r=<S1Oeo,GK>IupdLU"C&JSLWg_nCb(I<uc=rpKGO_gkVP(/U2RSaYCjh*mNg+k^^1,Mg*2QfD4U5P9TUt[PKMl>.7:okpj%_1Dl
%^S*o^#[C>D,Ll&uoj`.[WK8G0C0u=FlmJcM4:#K4#Q;rh?D2B^BZs/2k+&Ejg]eN-okR3m8g;pQ8.t?mITK5-N*0tB[a!bj`c0a'
%M0DItqal/r2T4R8$&@)WKqM1Vq#Mf@_38"1X!6B(l"!69`6)/b'RH1Eh*)f>]7O:uC_3GWnZ7Vb8p&(nMR&Dk_kQrnW[\0=q]u7Z
%<4%$&OMS'/3O-6\r[R/qUI[bOQOLI6q6N1c,Ug45@E?Q!N):S:\87Ve-397_=hi3Y]gn/[P8n-5qYX&7&N!u(FZ!d5RLji0NRVb$
%-SiI8&QDLl.2$U`@^OD28=^Qm0FDr;T9VZ1YflrqWhJ!k>@7fDLcj#6^VkE,q-2?Jg8lr#@eRlK\5:CuR(?#q<hM9M,V/+&/@C%c
%Ll&<U2l-o3Q_d1SP*M70oR88M*IMSc6LOhjClW7EBb()UMQ`$M;CIW"9qbg33MD%p9b&VZSQ"kZG5q\KHl,E?@CaSh%GL_H,`E^W
%WnPF93EH@8C(^F4p3%83j->qbPR2'3LXXNlT"I-=%i3^%aN:!/r4T&96*22#$NbJ-%36]OdqR0c1THm!DC\*MEOr2cOldBSI:4N&
%oIj__"J8)mJgKNh^R."t0Ha"Cb*N:f7,\KQ]Hfrr7C(")VYNIlQ&<UmK5OU^F^O\V9T6>?d"LYNl*7'5o2ETVT&U[$:2`0li'1_V
%Ac[U&5<N>AVdE-k`U]*.9Yh`$D3sK!/"4+"P_5kHB"f+/WV`jE.?fCi"aOc"9SdYkecZ9Pc3emD&_u%$\YF\&bJ"[5dD+AU14Nb7
%P/Pf-hh\q7_d7U-Umn<.j2Ebu4[F9A3<0LW!V'Bo2ER*0MkB9nmtqb&12O"]d6n_-1L52@RO_G!A+p4,JV4bQ:(NSonODPo=dpp:
%'j^\GkWK?>YuCeTBMP[5B4I\Z,A("ChBT=TP@j@_.9?lmS9G=qCDc-bH==WFRfq""`7BPqr6=map^G%f@+6ZdQjH];2P4oC^5h#D
%4=E9#h]ZdQ_ri(1G8Y*@C=6P86''-;ap_9l#]j+<V>M#t%bk'Be31"*=uB]CGOhDAG.a4/MmZ@N>o2U;U9?;n;!3p3/^@obpH`65
%iEGO^&(<5--PL\-"&KTfT4fNW5h1Z3:cL$PXXh=c]:2Nr>W_.M1s`?LhoXqO'THnOO!oQ2<E$"Lg(NI=/p,]p5Ui[7ljg5US<'W.
%`hFdm?80"68:ZR84"ge<-7delh_,[`!N=2E^b%HUmKaDO%[CfU02.+5_oW9j:r6jmcWS@=()XT#(M*rPM1RM:3!3&i/DX9H9=>lS
%IUO*<BV4tk7Z_85b*W\3[b[r?(F;djKS\"D1d;:H$pgc7@TEYf&_;!"[d?\cR?Sm5)akCN<mdqkI0Hu)EWF/jd[/'=fUL"QO`DTJ
%,;4%KH]'[;'AC,igcYZfHu)RI'XU41]pl5-[6\ps*ml$qbmt&23ffhC>(Xug:j'D;7hd8q.NL5O_2YHso`t_':uuEG0i9MI5&?/l
%@JD'>jdb.%b&$oKD5Qg'5+jS&kSdl&5q3c>Zg99U,Gt5"mE*9HcmJ".c3hcIWb1d<%Ohp?p5"^blhk3D.ShM:9+KHm=nmK8-s]Sp
%S5=^Pj@XGLjE+$1H;`!O<eIng"GKUhd-S"MWj6&,i#$?+N:tThHm-fA%rPi.]\GB:%d'CM_:seKlLe=$6V[=lGK]6iE<S+F\-`GZ
%M_j\0.<NeJA'tle=:Dc5a.sh0<7ZgtRKH,P,7M0udHXKj?o0J=;ig7-]_SKQS_/B%g$us067:UJ,rsb/MDho^RL;#A<fFT1l)%)_
%MUaYLa&o+;;C/WCh*sHBQR]^FOrURmY.dk5=:XH(4SVg22jNZ0-Tuh[UcZop!A-fHZfQ=t'].h(PP3.UOhA&pAa#h%E@&rjR0\EY
%+e#p+JXdg\F"*V@T]a`O54s$,J:o)Y5WUMdQI-nrXXRR$dTcS/I0D2kV(Zj+-$1JteIE+Q<Bbj+,=nQ0dY'bGNZ*`*mD39B::Y;,
%,Dj:h.cdH=pNa.mSo5T70Pk7E_7D>>T3O5R."UjLf!E/,d(bTdRe#][R_*B*8rArX70_!tJ9ZqkbIO?#G0h^U>)HjklHF4&F5f'd
%6T$s8SGcjt"0FFtUcRM@07Qn'E9uShau6ZKX:CDY&#&m+[R,3/O#Cak6.3[+^"F,A)+J9P.9i=!"(!=RFIO'!#\G5hMCOjge-d"u
%W$9_jDU6d2/T?lKiYK]n<JRrY5)YA5d;h^F=@Ip2.Juh8LA3:4nrD\7Lp?MED(HD6T3Y=q;I*SR@kK0,g?a%K]AL70S6=(J,6`k)
%m6+?S.EX#-bh,1"c3K1tSshRVD+64Y7VbMUfY3a@X8%[K0E;:**0.W+1jVQW'dX'heWgCl!`>a28D"A!K^GP1a:hl$9J\qqW^7uJ
%M9!M?_VM;?=Nj`_jm\`phhaZgFLXRGO"#34@p@A:;l>Y&WN?H#/=)\L0n2g=OmUVP)SKe$UA.(r;b,a`EF0)QX%>k\mLe`bo'u?i
%RR(_3G@6r8[j.4&E3P);>N`'\-QQh!BDt:KG.Qd1,(^mZZIoqk>o\SuI.4oJpU0rec7fA8:n/f=37J@MpC@L^#F0Mp=e>5`&U?$q
%AoY^=Nf/TXoRrXS(lU3lJ5!JgcS@#W&l:;.\)lS5,Fan:^B'WJN]Q^qqHQD%%-Lm.=F,nDEgk(>r?/l5doQ`hjr,'LRs:W*cON1:
%.\MULec'Mj]Ic>B?D/gBr=M9)6;^Q\mp=CQ;r">c#GeT(3LMah^:+?G:1q=.e?/%ejs1g55pK,eTKPL4E*\*kbQ'aJBoDG/GLO9,
%XQ2SCY#9C-`,)>Qm4R=/:AL"o?>["EGU_eMK#E8SplSoi2DLL@QB4RuE6O#99[jD%$HIk'XRukNS]ZLASQ7d8a>^sKV]0e3Bn=S"
%.V(lb:G3E9>>-bp.gN(nMbV72Lm"L&#HieU^ZSW9DQu727LkVU,qei#XlOFmX.!NE`$QLQJ\Lq,/>9^?(a6\0NqB%\)5[JaWtWH>
%-_oJQg(b3BGC)W%G=99]qa"[j<,AtAcpV:X]-Aa.M>9fnh0fH-KUT3e3'E<JZdbSkq/ZMZ(\Gu^AsTp>:d1eo-"JC^*ZPB]2Ss'H
%U1F1lF6FerPna[q'mf3X<>)*K6f2!<+e[Bkcf7l<L?9cD]"F("'c%;+Ne^@&`,<CE!4qT>@7JJ]o2:!D]_BoiW)DsElMQ#tnaW+S
%:fZkqcEL0i#gQLJ)#Xp6\Ze1Ba"gm1'#<BGRTlHK=78nkc!j[sF,_.g_Ir=d01a8s%e+r:R`=1=o6g#_rFbd.4%WdL%]?AE:U)I-
%7[2X]B(F*Ur@f_oj$_k73[J\4N^u9pijussla)qDCi%s8]f.#WDlj6@GOJt64/&T7hJr+cEp!Vr/f^?eD>/ZZ-]Da,*;or?]e8O-
%cor@H<%#luA54e+@d*P\[uY<#;cnZ:1YfR<GYYYVHB01r6c3B3F/<7lbN+*OFq[l3E'ISfSZ#CSE8WM`T?m\/8%lur#9:Hgdf0VW
%0_S#FnblI-T?Bn)na]m;-STUZ<b8fE(7SV,Lc`tCG)?C&XuFNh!W=NJXu[:JMHB3[lYCRZjFh<`!GT@Y(BRqbKI9et/9c.C[.Lu'
%F+?o)f/0)]qs#l"Da%&#-;PD\WgJH]m1QFX:otUE4.XPXEcSFa;i4#cl47kC?sD!aO)VEC=+YD7Ac)Oh(8bf^V:i`bVUE7`kf15W
%Csp*Wqk&NT<3JIKMV_38A`(j+`5t^CmsJ*f(Pf1HDlOIgbK5KW^pL?#m5Pf-6n-:7MO#rA<WPi)1Mk"n]9luWiLu%W&gNid],5k%
%h3'$c*>=m>bielSKDt.1jl'iOeVPBQ2cU`#)PA,m,%P2fdA3_shc,bdS"qB8X7d5&G>TrX'.d!!q#j8-;FTV[Op0Xc@.p`=+=o)F
%fDC>'X`lXM6ld<.S#]B#\UO.Y#BeV3]8lU>i0-RI`r\3peq+f8om3IOSqgZ1;4&+=q(=m^Cd]^!p5+LV[A,&4\0o+o24IJKU7Dn0
%'p`jCq]kq[Hu^o\rs;lmXnpbfmdRb_)NA4U5$i*0eV^U\8Rea*$7"3iKNj[$f;IGA,j4K^J;YoJ7ou9(>TbMomY*B0H2-H`fAIK7
%88,pA23O;BngSs<LP)c.i%^t92u7u["c''bBZWZedhkB=COVmkUKN:o$eS\%S&JhN'<Hq-*8](>jW,DoduWub:5qu$Z(qOEp1Je+
%@,%`19-4[PG7gHu1hoNK-1.,sgUNR'$ssWkpcDika.OAQeE4+e:^'(U-pR%n$OhVfS17ArD_o`]^8;9aO2YrFrIVGe8Rd;C7dF1A
%k9E*"!gjqlL+DM?;:F4P`MiYbe;RC&kL"g:"=Lk;(K=/5:8Pr04M;Bc/m5A"IUg>'/5rWLa63g<Z'<-m1E1MiV=712Wk^Y37#d)T
%!fsB4&JE1CXtZ#Z`0-:TZGTL;6Sre\jrU6E<>raV[qt$REOj=.ZIR-WRQn+Z?$*?Q6"jp8hG8mDH<5YXM&?]\MY.k=cs5kBZDF-T
%Dgm%L[YsoPc@e3g2SC*W43b[AfU0,%pMn,C[.X2X]4b/1'$CP'/B:iEXNG2\iXFr(o9#mb7VKH1`?7u:c+6I_bh\s7l$.eWfY*Tj
%eFQ)(glX.ncUlCd-&5QC_<7;h[=k)UW,-Q'g7?B*@`_Y]@6:/p.T`cDg`'bP8Td2eJkAPgk046f%r3:H=9of"X]>kS&CN:3G1<i`
%[UTo<S=r/Zm2*>"jN:Suh-]g1mi$Tcq[8j@d-;I3heF/)^Ps-D=#Y4RO[2B]g?ZY/LN?2@enunIAM=om>gQ=g$7GZ"SRF[oMZ_Ku
%q>>Y!T,W^Dghf3!QDEuM)iq)%;:8E0:oE^%ld!U.Y3_,gLMVtXh`T*`lFj>.^:%qi.h!LX>kH`6;Hs+hPYL!6eGd^^'e*8`KA1P+
%BCp)3Mb!B9:u6\<4pqA#AYpY1r\fVl[*_cfp%,QI6S,28QZma0*5;1[?CaZo*on9>%$K26%k+pcDCVHU81@!fCrEF-*42B]Q\n+s
%FgKlQ/M<mp\392kO!k4,+a\\oLTA4afKFMPF<0o&:XalQ>q8MuCtSDl$#d0&hBU6U],suG:>O6dn@=]LVij15h>j_AC%Fcn@bGQH
%4.OkFrH"/.'t-gGRfr6C=F,kL%1Y1M27g\XGF-G"=52fk-+tF\_mDtM[e;,RT.d;7XpeOt6KElQ4JT+:.W15b+\:m%pT$9ii:aR/
%Q)1H06!b5!Y[*FPP4[us?V`sEUBH?IONE>ZLC\'k>)ESfQU*Ye3-hqTBfgWGE2u;eb<5>CN3B@MH,mbAAqM"a74C&-(4e;?H!3gr
%d"0c[8$nVAA6MJ"[,&QQhOJ,6P`]>3&LIEqfF=%JYj2H==Ls32KIO:M*/b[\-u]uE,:fZu9=`e,Y[%ZD!tDdkbU#dTbmWX-<YR]/
%1;ZO<Ns%O7[R0djp+QS":VgXJHlitN.o2RiG<j`_$C,^i<?,:qPTW]':;,??S0K5LpoXXo\.#c6knBfYG_F5A#Kfh[\/jZl3cf=+
%!M<JTgJ#Gr\/-15>GsbT9M@b4L;kTfiX'O$SHU>1Y^D<Jg'h@MGem:Ir.+:78ULWL[)^SshRC#f87g=7:>q@SKNk&b5fQ4j@kE'h
%(EJp`K`%$/=13&dSQPT/'rHZXLL2;\Nk7IpMK>QhhY7<%:dE9l_IeuX]r9B)_=sPQf<U)>lC/SPenooDbX[RA[(`ui)[6&;a@]%q
%c*07!B_NRtK=aHq,]<L8GB^1.DGB9ljk9-Bo4-I.0Yh=>\gG8L#u=gWC9e[n1<EE9N27sP.P4A^,"=-(b4J%D#3GkSZMH7Up(_!\
%[pC`H,S<1H\!`t68(^s;h;f1g>I_Y7QFg?ha/C/5o=XYcE[+XmPM'E4c2,beH/AkmCZ;4n7YK&+CI<^Mo+C,V?^Oq)5J\9?Z0d^m
%V1^;`_L,nP9@(YrUNq<o]>Y_XIF%M"_T@8([7*Uq'G@`o4u""@Y&W<Z0!i3ZI%L/GWJiMqH'd`fOHfeC!@L'2Q`lAc7D?j4O)IFE
%mQcg1\j??M.9,[,iB1pOH>%I&k8=-W/9m%CTX@or6=M0Ga"TgZ550TrLY!t^c+`rnk"gX?[jgSCQ^n4H<j:<WG2>,MfK,IqO*"E@
%OlLk"hgD*>:j/T9h8EBeg#*4:A%d.r6ti2cCME)?ojdB3@er+Q!T&mo'8Zpc-gVr7cR>DLrpd1Aq<9"#WVkN.J,/i"YQ+@q\$rg[
%puu/"rqu_%J,B)7s7Q?"^]*?XhnT0:pFfm'q;p3m^Ad[$^X#,mq>%Mg^]3iiDr8>-rZAoS0*j4:0DtIkhuEN=oD\j4#*6:~>
%AI9_PrivateDataEnd
