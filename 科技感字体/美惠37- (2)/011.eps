%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: set_malenkih_plat_1.eps
%%Creator: Adobe Illustrator(R) 19.1
%%For: user
%%CreationDate: 5/9/2016
%%BoundingBox: 0 0 1200 1200
%%HiResBoundingBox: 0 0 1200 1200
%%CropBox: 0 0 1200 1200
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.1.0 x29 R agm 4.7731 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=100 RasterRes=1 GradRes=1 Text=1 Stroke=0 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c067 79.157747, 2015/03/30-23:40:42        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
            xmlns:photoshop="http://ns.adobe.com/photoshop/1.0/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">set_malenkih_plat_1</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:creator>
            <rdf:Seq>
               <rdf:li>Iryna</rdf:li>
            </rdf:Seq>
         </dc:creator>
         <dc:description>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">abstract vector background with high tech circuit board Vector Illustration</rdf:li>
            </rdf:Alt>
         </dc:description>
         <dc:subject>
            <rdf:Bag>
               <rdf:li>circuit</rdf:li>
               <rdf:li>vector</rdf:li>
               <rdf:li>backgrounds</rdf:li>
               <rdf:li>tech</rdf:li>
               <rdf:li>processor</rdf:li>
               <rdf:li>abstract</rdf:li>
               <rdf:li>abstraction</rdf:li>
               <rdf:li>chip</rdf:li>
               <rdf:li>card</rdf:li>
               <rdf:li>design</rdf:li>
               <rdf:li>electrical equipment</rdf:li>
               <rdf:li>integrated</rdf:li>
               <rdf:li>technical</rdf:li>
               <rdf:li>computer part</rdf:li>
               <rdf:li>hardware</rdf:li>
               <rdf:li>engineering</rdf:li>
               <rdf:li>line</rdf:li>
               <rdf:li>cyberspace</rdf:li>
               <rdf:li>computer equipment</rdf:li>
               <rdf:li>graphic</rdf:li>
               <rdf:li>electronics industry</rdf:li>
               <rdf:li>digital</rdf:li>
               <rdf:li>technology</rdf:li>
               <rdf:li>computer</rdf:li>
               <rdf:li>circuit board</rdf:li>
               <rdf:li>illustration</rdf:li>
               <rdf:li>creativity</rdf:li>
               <rdf:li>connection</rdf:li>
               <rdf:li>computing</rdf:li>
               <rdf:li>backdrop</rdf:li>
               <rdf:li>science</rdf:li>
               <rdf:li>cover</rdf:li>
               <rdf:li>internal</rdf:li>
               <rdf:li>connect</rdf:li>
               <rdf:li>art</rdf:li>
               <rdf:li>industry</rdf:li>
               <rdf:li>conceptual</rdf:li>
               <rdf:li>construction</rdf:li>
               <rdf:li>textured</rdf:li>
               <rdf:li>computer chip</rdf:li>
               <rdf:li>mother board</rdf:li>
               <rdf:li>motherboard</rdf:li>
               <rdf:li>black</rdf:li>
               <rdf:li>blue</rdf:li>
            </rdf:Bag>
         </dc:subject>
         <xmp:MetadataDate>2016-05-09T17:19:10+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2016-05-09T17:19:10+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2016-05-09T17:19:10+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A8qYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqmXlvy5r&#xA;XmTXLTQ9EtmvNUvnMdtbqVUsQpZiWYqqhVUsSTQDFUw8xfl5508u6nfabq2k3EFzpwDXhVfUiRSg&#xA;kDerHyjIKGuzZYMUyLANOPPV4oyEDKIkeli/kp6B5E84+YNRt9O0fR7q7u7uMzW6CMorxKORkDvx&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:088188a0-910d-3c4b-8730-4a127d86edcd</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:088188a0-910d-3c4b-8730-4a127d86edcd</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:77fffbc8-5b3f-4c73-947a-efb0cab0066a</stRef:instanceID>
            <stRef:documentID>xmp.did:2298BD9C9CCDE51182E88FE4B356D417</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F07763D45588E411BF89F345A28D8C9F</stEvt:instanceID>
                  <stEvt:when>2014-12-20T17:10:37+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:29845C695A88E411BF89F345A28D8C9F</stEvt:instanceID>
                  <stEvt:when>2014-12-20T17:19:01+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:2E845C695A88E411BF89F345A28D8C9F</stEvt:instanceID>
                  <stEvt:when>2014-12-20T17:33:07+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4365C60ACE89E4119A65C8F5B8A1FEA0</stEvt:instanceID>
                  <stEvt:when>2014-12-22T13:34:24+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0B5A99264D6BE51194FFADFDE0B012D7</stEvt:instanceID>
                  <stEvt:when>2015-10-05T13:38+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:8D6F8BA0EBBDE511B2BBC0EB12123494</stEvt:instanceID>
                  <stEvt:when>2016-01-18T16:01:53+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:18BA851AF2BDE5119314DC75DE111CE2</stEvt:instanceID>
                  <stEvt:when>2016-01-18T16:45:22+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Bridge CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/metadata</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:5C653C0AF8BDE5119314DC75DE111CE2</stEvt:instanceID>
                  <stEvt:when>2016-01-18T17:27:52+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Bridge CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/metadata</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:2298BD9C9CCDE51182E88FE4B356D417</stEvt:instanceID>
                  <stEvt:when>2016-02-07T15:13:43+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:088188a0-910d-3c4b-8730-4a127d86edcd</stEvt:instanceID>
                  <stEvt:when>2016-05-09T17:19:10+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>1200.000000</stDim:w>
            <stDim:h>1200.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=0 B=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
         <photoshop:Headline>abstract vector background with high tech circuit board</photoshop:Headline>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1200 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1200 li
1200 1200 li
1200 0 li
cp
clp
1200 1200 mo
0 1200 li
0 0 li
1200 0 li
1200 1200 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
0 0 0 rgb
f
236.569 699.826 mo
236.569 701.736 235.021 703.285 233.111 703.285 cv
231.201 703.285 229.654 701.736 229.654 699.826 cv
229.654 697.918 231.201 696.369 233.111 696.369 cv
235.021 696.369 236.569 697.918 236.569 699.826 cv
cp
384.934 548.688 mo
344.879 588.452 li
230.641 588.452 li
217.223 601.555 li
217.223 686.346 li
227.118 694.984 li
226.594 696.563 227.172 699.283 227.734 700.94 cv
228.932 704.479 230.76 707.703 234.498 707.703 cv
238.234 707.703 241.26 704.674 241.26 700.94 cv
241.26 697.201 238.143 694.992 234.498 694.172 cv
233.324 693.91 231.95 693.617 230.704 693.523 cv
220.681 684.771 li
220.681 603.01 li
232.049 591.909 li
346.303 591.909 li
386.358 552.145 li
495.566 552.145 li
536.058 511.948 li
536.058 451.954 li
532.601 451.954 li
532.601 510.508 li
494.139 548.688 li
384.934 548.688 li
cp
0 .862745 1 rgb
f
289.333 695.496 mo
289.732 693.629 291.567 692.438 293.437 692.836 cv
295.302 693.232 296.495 695.068 296.096 696.935 cv
295.7 698.807 293.863 699.996 291.997 699.6 cv
290.13 699.201 288.937 697.363 289.333 695.496 cv
cp
386.65 555.893 mo
347.463 595.657 li
236.849 595.657 li
223.996 607.879 li
223.996 671.75 li
248.777 697.209 li
248.777 706.971 li
257.805 716.965 li
269.413 716.965 li
281.254 704.236 li
286.862 701.232 li
288.258 702.035 290.859 702.059 292.897 702.033 cv
296.633 701.992 300.141 700.481 300.921 696.826 cv
301.698 693.174 299.366 689.58 295.711 688.801 cv
292.058 688.023 289.596 690.801 287.689 694.01 cv
287.108 694.986 286.43 696.404 286.069 697.732 cv
279.114 701.459 li
267.907 713.508 li
259.34 713.508 li
252.235 705.641 li
252.235 695.805 li
227.455 670.346 li
227.455 609.363 li
238.231 599.114 li
348.912 599.114 li
388.097 559.35 li
498.458 559.35 li
541.532 515.672 li
541.532 451.954 li
538.075 451.954 li
538.075 514.256 li
497.013 555.893 li
386.65 555.893 li
cp
f
266.535 699.826 mo
266.535 701.736 264.987 703.285 263.078 703.285 cv
261.168 703.285 259.621 701.736 259.621 699.826 cv
259.621 697.918 261.168 696.369 263.078 696.369 cv
264.987 696.369 266.535 697.918 266.535 699.826 cv
cp
477.99 560.213 mo
452.92 585.858 li
364.768 585.858 li
349.786 600.553 li
254.966 600.553 li
235.522 620.305 li
235.522 673.588 li
256.985 695.332 li
256.641 696.94 257.178 699.4 257.702 700.94 cv
258.897 704.479 260.729 707.703 264.463 707.703 cv
268.201 707.703 271.229 704.674 271.229 700.94 cv
271.229 697.201 268.111 694.992 264.463 694.172 cv
263.085 693.863 261.438 693.523 260.04 693.5 cv
238.979 672.17 li
238.979 621.723 li
256.415 604.012 li
351.198 604.012 li
366.18 589.317 li
454.375 589.317 li
479.445 563.672 li
501.616 563.672 li
547.295 518.288 li
547.295 451.954 li
543.838 451.954 li
543.838 516.848 li
500.191 560.213 li
477.99 560.213 li
cp
f
266.851 732.891 mo
264.942 732.891 263.393 731.344 263.393 729.432 cv
263.393 727.521 264.942 725.975 266.851 725.975 cv
268.763 725.975 270.309 727.521 270.309 729.432 cv
270.309 731.344 268.763 732.891 266.851 732.891 cv
cp
482.291 569.145 mo
459.529 593.35 li
369.401 593.35 li
354.415 607.467 li
261.326 607.467 li
242.151 626.338 li
242.151 670.109 li
258.405 687.287 li
299.894 687.287 li
308.133 696.039 li
308.133 709.019 li
303.411 713.508 li
279.453 713.508 li
270.051 723.234 li
268.596 723.262 266.905 723.66 265.741 724.057 cv
262.202 725.252 258.975 727.082 258.975 730.82 cv
258.975 734.555 262.003 737.584 265.741 737.584 cv
269.475 737.584 271.686 734.465 272.506 730.82 cv
272.92 728.973 273.409 726.631 273.079 725.076 cv
280.918 716.965 li
304.792 716.965 li
311.592 710.504 li
311.592 694.67 li
301.387 683.83 li
259.893 683.83 li
245.608 668.732 li
245.608 627.787 li
262.741 610.928 li
355.786 610.928 li
370.772 596.807 li
461.024 596.807 li
483.788 572.604 li
503.624 572.604 li
555.941 521.463 li
555.941 451.954 li
552.483 451.954 li
552.483 520.008 li
502.217 569.145 li
482.291 569.145 li
cp
f
514.815 583.325 mo
516.153 584.688 516.129 586.877 514.765 588.213 cv
513.401 589.551 511.212 589.528 509.875 588.163 cv
508.542 586.799 508.561 584.61 509.926 583.274 cv
511.29 581.936 513.478 581.959 514.815 583.325 cv
cp
510.99 578.45 mo
509.706 579.422 508.469 581.338 507.789 582.678 cv
506.1 586.012 505.073 589.577 507.691 592.247 cv
510.303 594.915 514.586 594.959 517.256 592.346 cv
519.924 589.731 519.32 585.956 517.354 582.778 cv
516.536 581.454 515.518 579.852 514.447 578.834 cv
514.447 577.36 li
565.737 526.524 li
565.737 451.954 li
562.279 451.954 li
562.279 525.083 li
510.99 575.919 li
510.99 578.45 li
cp
f
265.112 667.213 mo
265.112 669.123 263.566 670.672 261.655 670.672 cv
259.743 670.672 258.197 669.123 258.197 667.213 cv
258.197 665.303 259.743 663.756 261.655 663.756 cv
263.566 663.756 265.112 665.303 265.112 667.213 cv
cp
523.091 574.19 mo
523.091 591.313 li
517.925 597.924 li
386.785 597.924 li
368.056 612.369 li
267.329 612.369 li
251.082 629.844 li
251.082 658.324 li
255.543 662.785 li
255.231 664.394 255.765 666.81 256.279 668.324 cv
257.474 671.863 259.305 675.09 263.043 675.09 cv
266.778 675.09 269.805 672.06 269.805 668.324 cv
269.805 664.588 266.687 662.377 263.043 661.559 cv
261.635 661.242 259.947 660.893 258.532 660.885 cv
254.54 656.893 li
254.54 631.201 li
268.836 615.826 li
369.236 615.826 li
387.963 601.381 li
519.61 601.381 li
526.549 592.506 li
526.549 575.629 li
590.008 512.454 li
590.518 511.948 li
590.518 475.35 li
605.5 460.366 li
605.5 451.954 li
602.043 451.954 li
602.043 458.934 li
587.06 473.918 li
587.06 510.508 li
523.602 573.684 li
523.091 574.19 li
cp
f
267.622 641.32 mo
265.71 641.32 264.164 639.773 264.164 637.863 cv
264.164 635.951 265.71 634.404 267.622 634.404 cv
269.532 634.404 271.079 635.951 271.079 637.863 cv
271.079 639.773 269.532 641.32 267.622 641.32 cv
cp
592.821 514.241 mo
528.852 577.252 li
528.852 595.926 li
522.538 604.01 li
401.094 604.01 li
375.956 627.643 li
339.223 627.643 li
333.46 623.607 li
279.503 623.607 li
270.874 631.662 li
269.408 631.68 267.688 632.086 266.508 632.486 cv
262.969 633.682 259.743 635.514 259.743 639.248 cv
259.743 642.986 262.772 646.014 266.508 646.014 cv
270.245 646.014 272.456 642.894 273.274 639.248 cv
273.68 637.438 274.161 635.15 273.87 633.596 cv
280.868 627.065 li
332.369 627.065 li
338.132 631.1 li
377.327 631.1 li
402.465 607.467 li
524.222 607.467 li
532.309 597.114 li
532.309 578.7 li
596.279 515.688 li
596.279 478.528 li
612.416 462.682 li
612.416 451.954 li
608.957 451.954 li
608.957 461.229 li
592.821 477.079 li
592.821 514.241 li
cp
f
495.775 589.979 mo
493.862 589.979 492.317 588.434 492.317 586.522 cv
492.317 584.612 493.862 583.065 495.775 583.065 cv
497.686 583.065 499.232 584.612 499.232 586.522 cv
499.232 588.434 497.686 589.979 495.775 589.979 cv
cp
494.664 581.147 mo
491.124 582.342 487.896 584.172 487.896 587.909 cv
487.896 591.645 490.925 594.674 494.664 594.674 cv
498.398 594.674 500.61 591.555 501.427 587.909 cv
501.83 586.114 502.303 583.848 502.028 582.295 cv
560.549 524.34 li
560.549 451.954 li
557.092 451.954 li
557.092 522.899 li
499.11 580.319 li
497.627 580.323 495.864 580.739 494.664 581.147 cv
cp
f
432.54 568.393 mo
433.866 567.018 436.053 566.981 437.428 568.309 cv
438.802 569.633 438.84 571.821 437.513 573.198 cv
436.186 574.573 433.998 574.61 432.623 573.282 cv
431.252 571.956 431.211 569.766 432.54 568.393 cv
cp
432.089 575.436 mo
435.465 577.034 439.059 577.956 441.656 575.268 cv
444.249 572.581 444.175 568.297 441.49 565.702 cv
438.802 563.106 435.043 563.815 431.923 565.87 cv
430.329 566.919 428.329 568.278 427.498 569.635 cv
419.504 569.635 li
419.504 573.092 li
428.435 573.092 li
428.435 573.057 li
429.498 574.038 430.987 574.915 432.089 575.436 cv
cp
f
452.567 569.436 mo
452.567 567.526 454.112 565.979 456.024 565.979 cv
457.931 565.979 459.481 567.526 459.481 569.436 cv
459.481 571.346 457.931 572.893 456.024 572.893 cv
454.112 572.893 452.567 571.346 452.567 569.436 cv
cp
462.54 569.989 mo
462.54 565.786 459.137 562.381 454.937 562.381 cv
450.74 562.381 447.332 565.786 447.332 569.989 cv
447.332 574.188 450.74 577.59 454.937 577.59 cv
459.137 577.59 462.54 574.188 462.54 569.989 cv
cp
f
578.743 461.225 mo
580.651 461.225 582.201 462.774 582.201 464.686 cv
582.201 466.594 580.651 468.143 578.743 468.143 cv
576.832 468.143 575.286 466.594 575.286 464.686 cv
575.286 462.774 576.832 461.225 578.743 461.225 cv
cp
577.656 472.84 mo
581.856 472.84 585.26 469.436 585.26 465.237 cv
585.26 461.038 581.856 457.631 577.656 457.631 cv
573.456 457.631 570.052 461.038 570.052 465.237 cv
570.052 469.436 573.456 472.84 577.656 472.84 cv
cp
f
578.743 499.151 mo
580.651 499.151 582.201 500.7 582.201 502.61 cv
582.201 504.518 580.651 506.067 578.743 506.067 cv
576.832 506.067 575.286 504.518 575.286 502.61 cv
575.286 500.7 576.832 499.151 578.743 499.151 cv
cp
577.656 510.766 mo
581.856 510.766 585.26 507.36 585.26 503.161 cv
585.26 498.961 581.856 495.555 577.656 495.555 cv
573.456 495.555 570.052 498.961 570.052 503.161 cv
570.052 507.36 573.456 510.766 577.656 510.766 cv
cp
f
412.399 561.286 mo
417.654 561.286 421.909 565.542 421.909 570.795 cv
421.909 576.047 417.654 580.303 412.399 580.303 cv
407.149 580.303 402.892 576.047 402.892 570.795 cv
402.892 565.542 407.149 561.286 412.399 561.286 cv
1 1 1 rgb
f
386.149 609.662 mo
386.149 614.916 381.895 619.174 376.641 619.174 cv
371.39 619.174 367.131 614.916 367.131 609.662 cv
367.131 604.408 371.39 600.155 376.641 600.155 cv
381.895 600.155 386.149 604.408 386.149 609.662 cv
f
362.124 631.123 mo
362.124 636.377 357.866 640.631 352.616 640.631 cv
347.361 640.631 343.107 636.377 343.107 631.123 cv
343.107 625.873 347.361 621.615 352.616 621.615 cv
357.866 621.615 362.124 625.873 362.124 631.123 cv
f
323.407 657.768 mo
323.407 663.019 319.149 667.275 313.898 667.275 cv
308.644 667.275 304.389 663.019 304.389 657.768 cv
304.389 652.514 308.644 648.258 313.898 648.258 cv
319.149 648.258 323.407 652.514 323.407 657.768 cv
f
399.055 797.156 mo
397.144 797.156 395.598 795.609 395.598 793.699 cv
395.598 791.787 397.144 790.242 399.055 790.242 cv
400.965 790.242 402.514 791.787 402.514 793.699 cv
402.514 795.609 400.965 797.156 399.055 797.156 cv
cp
558.538 673.289 mo
546.721 661.475 li
510.033 661.475 li
481.506 690 li
443.984 690 li
411.687 720.959 li
411.687 779.486 li
402.663 787.498 li
401.129 787.445 399.219 787.891 397.945 788.322 cv
394.405 789.519 391.178 791.35 391.178 795.084 cv
391.178 798.822 394.206 801.85 397.945 801.85 cv
401.679 801.85 403.891 798.731 404.708 795.084 cv
405.09 793.389 405.522 791.285 405.337 789.746 cv
415.144 781.039 li
415.144 722.435 li
445.373 693.459 li
482.937 693.459 li
511.463 664.932 li
545.292 664.932 li
557.106 676.746 li
576.739 676.746 li
583.465 669.348 li
583.465 638.506 li
580.006 638.506 li
580.006 668.01 li
575.208 673.289 li
558.538 673.289 li
cp
0 .862745 1 rgb
f
430.713 759.635 mo
432.047 761 432.026 763.188 430.662 764.525 cv
429.297 765.861 427.111 765.838 425.773 764.473 cv
424.435 763.109 424.46 760.92 425.822 759.582 cv
427.188 758.248 429.375 758.271 430.713 759.635 cv
cp
556.508 680.492 mo
543.83 668.104 li
512.889 668.104 li
486.378 696.053 li
449.436 696.053 li
426.813 718.676 li
426.813 754.547 li
427.188 754.547 li
425.799 755.428 424.418 757.543 423.685 758.99 cv
421.994 762.32 420.971 765.885 423.585 768.557 cv
426.199 771.225 430.483 771.271 433.155 768.656 cv
435.821 766.043 435.217 762.266 433.252 759.088 cv
432.242 757.457 430.93 755.406 429.586 754.547 cv
430.27 754.547 li
430.27 720.107 li
450.868 699.51 li
487.864 699.51 li
514.375 671.56 li
542.42 671.56 li
555.101 683.949 li
580.435 683.949 li
590.093 674.293 li
590.093 638.506 li
586.635 638.506 li
586.635 672.861 li
579.004 680.492 li
556.508 680.492 li
cp
f
451.831 759.635 mo
453.167 761 453.146 763.188 451.782 764.525 cv
450.417 765.861 448.229 765.838 446.892 764.473 cv
445.555 763.109 445.579 760.92 446.942 759.582 cv
448.305 758.248 450.495 758.271 451.831 759.635 cv
cp
553.362 685.678 mo
541.259 673.285 li
514.922 673.58 li
447.359 742.313 li
447.359 754.547 li
448.309 754.547 li
446.919 755.428 445.54 757.543 444.805 758.99 cv
443.114 762.32 442.09 765.885 444.706 768.557 cv
447.318 771.225 451.602 771.271 454.273 768.656 cv
456.941 766.043 456.336 762.266 454.372 759.088 cv
453.361 757.457 452.049 755.406 450.707 754.547 cv
450.816 754.547 li
450.816 743.729 li
516.377 677.029 li
539.807 676.75 li
551.906 689.137 li
582.428 689.137 li
595.858 676.334 li
595.858 638.506 li
592.4 638.506 li
592.4 674.854 li
581.043 685.678 li
553.362 685.678 li
cp
f
483.345 731.467 mo
484.683 732.83 484.659 735.019 483.295 736.356 cv
481.935 737.693 479.743 737.668 478.41 736.305 cv
477.072 734.941 477.093 732.752 478.457 731.416 cv
479.82 730.078 482.013 730.102 483.345 731.467 cv
cp
548.178 692.016 mo
536.941 680.492 li
518.529 680.492 li
478.764 720.697 li
478.764 727.271 li
477.768 728.305 476.866 729.748 476.32 730.822 cv
474.629 734.154 473.607 737.719 476.22 740.389 cv
478.835 743.057 483.12 743.104 485.788 740.488 cv
488.456 737.873 487.854 734.1 485.885 730.92 cv
484.875 729.289 483.563 727.236 482.221 726.377 cv
482.221 722.119 li
519.97 683.949 li
535.483 683.949 li
546.72 695.475 li
586.456 695.475 li
601.908 680.951 li
601.908 638.506 li
598.45 638.506 li
598.45 679.455 li
585.085 692.016 li
548.178 692.016 li
cp
f
504.804 729.738 mo
506.141 731.102 506.121 733.289 504.756 734.627 cv
503.393 735.965 501.201 735.941 499.867 734.576 cv
498.53 733.211 498.552 731.023 499.917 729.688 cv
501.279 728.35 503.47 728.373 504.804 729.738 cv
cp
546.721 697.494 mo
534.614 685.385 li
526.324 685.685 li
500.836 711.648 li
500.836 724.867 li
500.973 724.867 li
499.692 725.844 498.458 727.754 497.78 729.092 cv
496.088 732.426 495.065 735.99 497.679 738.658 cv
500.291 741.328 504.578 741.373 507.245 738.76 cv
509.913 736.143 509.311 732.369 507.346 729.191 cv
506.412 727.685 505.22 725.82 503.987 724.867 cv
504.293 724.867 li
504.293 713.063 li
527.786 689.129 li
533.196 688.856 li
545.292 700.951 li
589.071 700.951 li
607.67 682.658 li
607.67 638.506 li
604.211 638.506 li
604.211 681.209 li
587.656 697.494 li
546.721 697.494 li
cp
f
560.763 715.791 mo
559.412 717.143 557.224 717.143 555.873 715.791 cv
554.523 714.441 554.523 712.252 555.873 710.902 cv
557.224 709.551 559.412 709.551 560.763 710.902 cv
562.114 712.252 562.114 714.441 560.763 715.791 cv
cp
564.288 710.625 mo
563.336 709.861 562.213 709.193 561.333 708.758 cv
557.987 707.102 554.411 706.117 551.768 708.758 cv
549.126 711.4 549.126 715.682 551.768 718.324 cv
554.411 720.965 558.176 720.324 561.333 718.324 cv
563.169 717.162 565.538 715.611 566.108 714.082 cv
585.315 714.082 li
614.299 686.125 li
614.299 638.506 li
610.84 638.506 li
610.84 684.656 li
583.921 710.625 li
564.288 710.625 li
cp
f
526.54 719.541 mo
524.629 719.504 523.109 717.93 523.143 716.021 cv
523.176 714.111 524.75 712.59 526.662 712.625 cv
528.57 712.658 530.092 714.232 530.055 716.143 cv
530.024 718.051 528.449 719.572 526.54 719.541 cv
cp
537.713 723.139 mo
532.731 718.867 li
532.656 717.543 532.327 716.096 531.997 715.063 cv
530.863 711.506 529.086 708.248 525.351 708.184 cv
521.614 708.117 518.534 711.092 518.467 714.828 cv
518.406 718.563 521.481 720.826 525.116 721.709 cv
527.167 722.207 529.829 722.805 531.35 722.236 cv
536.434 726.596 li
583.616 726.596 li
620.926 688.4 li
620.926 638.506 li
617.469 638.506 li
617.469 686.992 li
582.162 723.139 li
537.713 723.139 li
cp
f
626.912 697.541 mo
628.25 698.904 628.227 701.096 626.863 702.43 cv
625.498 703.768 623.31 703.744 621.975 702.379 cv
620.635 701.016 620.658 698.826 622.023 697.49 cv
623.387 696.152 625.576 696.176 626.912 697.541 cv
cp
619.887 696.896 mo
618.195 700.229 617.172 703.793 619.785 706.461 cv
622.398 709.133 626.684 709.178 629.353 706.563 cv
632.021 703.949 631.418 700.174 629.453 696.994 cv
628.521 695.496 627.34 693.644 626.113 692.685 cv
626.113 638.506 li
622.654 638.506 li
622.654 693.025 li
621.531 694.063 620.488 695.707 619.887 696.896 cv
cp
f
640.465 659.273 mo
641.828 657.935 644.014 657.959 645.353 659.324 cv
646.69 660.688 646.666 662.877 645.303 664.213 cv
643.938 665.551 641.75 665.525 640.412 664.164 cv
639.08 662.799 639.1 660.609 640.465 659.273 cv
cp
647.795 668.346 mo
650.461 665.729 649.857 661.955 647.893 658.777 cv
647.037 657.394 645.963 655.711 644.84 654.705 cv
644.84 638.506 li
641.383 638.506 li
641.383 654.559 li
640.15 655.563 638.98 657.389 638.326 658.678 cv
636.639 662.012 635.611 665.576 638.228 668.244 cv
640.842 670.916 645.123 670.959 647.795 668.346 cv
cp
f
752.879 70.4404 mo
754.228 69.0928 756.416 69.0928 757.768 70.4404 cv
759.119 71.792 759.119 73.9795 757.768 75.3301 cv
756.416 76.6816 754.228 76.6816 752.879 75.3301 cv
751.527 73.9795 751.527 71.792 752.879 70.4404 cv
cp
758.338 77.8643 mo
759.672 77.0186 761.289 75.9668 762.291 74.8682 cv
783.402 74.8682 li
793.713 64.3467 li
791.24 61.9287 li
781.951 71.4111 li
762.568 71.4111 li
761.57 70.1543 759.672 68.957 758.338 68.2969 cv
754.988 66.6426 751.416 65.6572 748.771 68.2969 cv
746.127 70.9404 746.131 75.2236 748.771 77.8643 cv
751.416 80.5049 755.182 79.8643 758.338 77.8643 cv
cp
f
813.744 83.9043 mo
815.107 82.5674 817.295 82.5908 818.633 83.9551 cv
819.971 85.3193 819.945 87.5088 818.582 88.8447 cv
817.217 90.1816 815.029 90.1572 813.691 88.7959 cv
812.359 87.4307 812.379 85.2412 813.744 83.9043 cv
cp
821.074 92.9775 mo
823.74 90.3604 823.137 86.5869 821.172 83.4092 cv
820.316 82.0264 819.242 80.3428 818.119 79.3369 cv
818.119 63.1377 li
814.662 63.1377 li
814.662 79.1885 li
813.43 80.1943 812.26 82.0195 811.605 83.3096 cv
809.918 86.6436 808.891 90.208 811.508 92.876 cv
814.121 95.5469 818.402 95.5908 821.074 92.9775 cv
cp
f
844.576 83.5967 mo
845.941 82.2598 848.127 82.2832 849.465 83.6475 cv
850.801 85.0127 850.779 87.2012 849.414 88.5361 cv
848.051 89.874 845.861 89.8506 844.525 88.4863 cv
843.188 87.1221 843.213 84.9326 844.576 83.5967 cv
cp
851.906 92.6709 mo
854.574 90.0537 853.971 86.2793 852.004 83.1025 cv
851.146 81.7197 850.074 80.0381 848.951 79.0322 cv
848.951 63.1377 li
845.494 63.1377 li
845.494 78.8818 li
844.262 79.8867 843.092 81.7129 842.438 83.0029 cv
840.746 86.3359 839.723 89.8994 842.338 92.5693 cv
844.949 95.2393 849.236 95.2842 851.906 92.6709 cv
cp
f
829.879 99.6064 mo
831.244 98.2725 833.434 98.2959 834.769 99.6602 cv
836.107 101.024 836.084 103.212 834.721 104.55 cv
833.355 105.886 831.166 105.862 829.83 104.499 cv
828.492 103.133 828.516 100.945 829.879 99.6064 cv
cp
837.211 108.681 mo
839.879 106.065 839.273 102.29 837.309 99.1123 cv
836.451 97.7295 835.381 96.0498 834.258 95.0439 cv
834.258 63.1377 li
830.799 63.1377 li
830.799 94.8916 li
829.566 95.8955 828.396 97.7236 827.742 99.0146 cv
826.051 102.346 825.027 105.91 827.641 108.581 cv
830.254 111.25 834.539 111.296 837.211 108.681 cv
cp
f
858.984 99.6064 mo
860.346 98.2725 862.537 98.2959 863.871 99.6602 cv
865.207 101.024 865.188 103.212 863.824 104.55 cv
862.459 105.886 860.268 105.862 858.934 104.499 cv
857.596 103.133 857.621 100.945 858.984 99.6064 cv
cp
866.313 108.681 mo
868.978 106.065 868.379 102.29 866.412 99.1123 cv
865.555 97.7295 864.482 96.0498 863.359 95.0439 cv
863.359 63.1377 li
859.902 63.1377 li
859.902 94.8916 li
858.672 95.8955 857.5 97.7236 856.848 99.0146 cv
855.154 102.346 854.131 105.91 856.746 108.581 cv
859.359 111.25 863.644 111.296 866.313 108.681 cv
cp
f
1118.2 126.169 mo
1118.2 128.079 1119.74 129.626 1121.65 129.626 cv
1123.56 129.626 1125.11 128.079 1125.11 126.169 cv
1125.11 124.257 1123.56 122.709 1121.65 122.709 cv
1119.74 122.709 1118.2 124.257 1118.2 126.169 cv
cp
f
1105.28 163.855 mo
1105.28 165.763 1106.83 167.314 1108.74 167.314 cv
1110.65 167.314 1112.2 165.763 1112.2 163.855 cv
1112.2 161.943 1110.65 160.396 1108.74 160.396 cv
1106.83 160.396 1105.28 161.943 1105.28 163.855 cv
cp
f
1088.23 389.896 mo
1088.2 391.805 1086.62 393.324 1084.71 393.291 cv
1082.8 393.259 1081.28 391.683 1081.31 389.774 cv
1081.35 387.862 1082.92 386.343 1084.83 386.377 cv
1086.74 386.411 1088.26 387.984 1088.23 389.896 cv
cp
1092.71 377.642 mo
1087.24 383.342 li
1087.62 383.702 li
1086.28 383.772 1084.8 384.103 1083.75 384.439 cv
1080.19 385.573 1076.94 387.346 1076.87 391.084 cv
1076.81 394.819 1079.78 397.9 1083.52 397.965 cv
1087.25 398.029 1089.52 394.949 1090.4 391.32 cv
1090.94 389.079 1091.6 386.117 1090.73 384.703 cv
1095.19 380.056 li
1094.22 379.409 1093.38 378.588 1092.71 377.642 cv
cp
f
1099.14 362.741 mo
1099.15 364.091 li
1100.18 369.858 li
1092.71 377.642 li
1093.38 378.588 1094.22 379.409 1095.19 380.056 cv
1103.89 370.976 li
1102.61 363.918 li
1102.61 362.89 li
1101.92 362.731 1101.2 362.639 1100.46 362.639 cv
1100.02 362.639 1099.58 362.681 1099.14 362.741 cv
cp
f
911.814 70.9922 mo
911.818 70.9922 911.82 70.9912 911.824 70.9912 cv
913.041 70.9912 914.203 71.2285 915.273 71.6465 cv
915.252 65.8594 li
911.795 65.8594 li
911.814 70.9922 li
cp
f
992.107 142.933 mo
992.107 144.844 990.563 146.391 988.65 146.391 cv
986.74 146.391 985.193 144.844 985.193 142.933 cv
985.193 141.024 986.74 139.475 988.65 139.475 cv
990.563 139.475 992.107 141.024 992.107 142.933 cv
cp
920.744 83.7666 mo
921.184 84.249 li
925.516 84.249 li
980.668 139.113 li
982.535 140.839 li
982.68 141.99 982.977 143.169 983.275 144.048 cv
984.471 147.585 986.301 150.811 990.039 150.811 cv
993.773 150.811 996.801 147.781 996.801 144.048 cv
996.801 140.309 993.684 138.097 990.039 137.28 cv
987.828 136.784 984.918 136.193 983.494 137.017 cv
983.063 136.618 li
926.943 80.791 li
922.713 80.791 li
921.227 79.1582 li
921.287 79.5977 921.332 80.043 921.332 80.5 cv
921.332 81.6504 921.117 82.7461 920.744 83.7666 cv
cp
f
1068.94 377.515 mo
1068.9 379.423 1067.33 380.942 1065.42 380.912 cv
1063.51 380.878 1061.99 379.306 1062.02 377.395 cv
1062.05 375.486 1063.63 373.964 1065.54 373.997 cv
1067.45 374.031 1068.97 375.604 1068.94 377.515 cv
cp
954.627 95.1953 mo
976.227 95.1953 li
1000.57 119.542 li
1000.57 159.016 li
1008.5 166.944 li
1025.8 166.944 li
1037.16 177.22 li
1036.88 296.164 li
1070.88 330.746 li
1070.88 368.493 li
1069.32 371.332 li
1067.77 371.222 1065.78 371.639 1064.46 372.059 cv
1060.9 373.193 1057.64 374.966 1057.58 378.704 cv
1057.51 382.439 1060.49 385.522 1064.22 385.586 cv
1067.96 385.65 1070.22 382.57 1071.11 378.941 cv
1071.49 377.353 1071.93 375.405 1071.85 373.896 cv
1074.34 369.382 li
1074.34 329.33 li
1040.34 294.752 li
1040.63 175.686 li
1027.13 163.485 li
1009.93 163.485 li
1004.03 157.584 li
1004.03 118.11 li
977.66 91.7383 li
956.035 91.7383 li
929.516 65.8594 li
924.564 65.8594 li
954.627 95.1953 li
cp
f
959.809 90.0098 mo
980.547 90.0098 li
1007.49 117.229 li
1007.49 153.443 li
1013.58 160.894 li
1029.8 160.894 li
1043.22 173.457 li
1043.22 292.99 li
1082.98 333.912 li
1083.26 378.547 li
1083.69 378.486 1084.13 378.444 1084.58 378.444 cv
1085.32 378.444 1086.03 378.537 1086.72 378.695 cv
1086.43 332.502 li
1046.68 291.585 li
1046.68 171.958 li
1031.16 157.436 li
1015.22 157.436 li
1010.94 152.209 li
1010.94 115.807 li
981.986 86.5518 li
961.232 86.5518 li
940.361 65.8594 li
935.451 65.8594 li
959.809 90.0098 li
cp
f
1042.39 146.873 mo
1042.39 148.781 1040.85 150.33 1038.94 150.33 cv
1037.03 150.33 1035.48 148.781 1035.48 146.873 cv
1035.48 144.963 1037.03 143.416 1038.94 143.416 cv
1040.85 143.416 1042.39 144.963 1042.39 146.873 cv
cp
964.406 78.4844 mo
987.471 78.4844 li
1019.01 109.466 li
1019.01 127.835 li
1032.73 143.36 li
1032.7 144.876 1033.14 146.735 1033.56 147.984 cv
1034.76 151.523 1036.59 154.747 1040.32 154.747 cv
1044.06 154.747 1047.09 151.719 1047.09 147.984 cv
1047.09 144.247 1043.97 142.034 1040.32 141.217 cv
1038.6 140.83 1036.44 140.388 1034.9 140.598 cv
1022.47 126.527 li
1022.47 108.014 li
988.887 75.0273 li
965.853 75.0273 li
956.818 65.8594 li
951.967 65.8594 li
964.406 78.4844 li
cp
f
1061.99 261.843 mo
1061.99 263.751 1060.44 265.3 1058.53 265.3 cv
1056.62 265.3 1055.07 263.751 1055.07 261.843 cv
1055.07 259.932 1056.62 258.386 1058.53 258.386 cv
1060.44 258.386 1061.99 259.932 1061.99 261.843 cv
cp
967.334 71.2822 mo
988.621 71.2822 li
1024.74 107.156 li
1024.74 125.262 li
1037.85 139.572 li
1046.98 139.572 li
1048.98 141.028 li
1048.98 255.668 li
1052.32 258.313 li
1052.29 259.832 1052.73 261.7 1053.15 262.955 cv
1054.35 266.493 1056.18 269.718 1059.92 269.718 cv
1063.65 269.718 1066.68 266.689 1066.68 262.955 cv
1066.68 259.217 1063.56 257.005 1059.92 256.188 cv
1058.17 255.796 1055.98 255.344 1054.43 255.575 cv
1052.44 253.995 li
1052.44 139.269 li
1048.1 136.114 li
1039.37 136.114 li
1028.2 123.918 li
1028.2 105.719 li
990.045 67.8232 li
968.771 67.8232 li
966.818 65.8594 li
961.941 65.8594 li
967.334 71.2822 li
cp
f
1137.48 370.569 mo
1137.48 372.478 1135.93 374.027 1134.02 374.027 cv
1132.11 374.027 1130.56 372.478 1130.56 370.569 cv
1130.56 369.753 1130.86 369.013 1131.33 368.423 cv
1131.89 367.863 li
1132.48 367.399 1133.21 367.112 1134.02 367.112 cv
1135.93 367.112 1137.48 368.658 1137.48 370.569 cv
cp
1031.4 104.563 mo
1031.4 122.136 li
1042.79 133.521 li
1050.57 133.521 li
1055.61 138.56 li
1055.61 243.41 li
1068 256.667 li
1068 308.276 li
1127.9 368.464 li
1128.05 369.618 1128.35 370.802 1128.64 371.682 cv
1129.84 375.22 1131.67 378.444 1135.41 378.444 cv
1139.14 378.444 1142.17 375.416 1142.17 371.682 cv
1142.17 367.943 1139.05 365.734 1135.41 364.913 cv
1133.24 364.427 1130.39 363.843 1128.94 364.599 cv
1071.45 306.849 li
1071.45 255.302 li
1059.06 242.046 li
1059.06 137.128 li
1052 130.064 li
1044.22 130.064 li
1034.86 120.703 li
1034.86 103.125 li
997.326 65.8594 li
992.42 65.8594 li
1031.4 104.563 li
cp
f
1128.4 341.361 mo
1128.4 343.272 1126.86 344.818 1124.94 344.818 cv
1123.03 344.818 1121.49 343.272 1121.49 341.361 cv
1121.49 339.45 1123.03 337.903 1124.94 337.903 cv
1126.86 337.903 1128.4 339.45 1128.4 341.361 cv
cp
1037.17 100.535 mo
1037.17 110.904 li
1062.38 135.686 li
1062.38 242.251 li
1074.05 254.928 li
1074.05 294.158 li
1118.78 338.888 li
1118.9 340.153 1119.24 341.499 1119.57 342.473 cv
1120.76 346.012 1122.59 349.239 1126.33 349.239 cv
1130.07 349.239 1133.1 346.211 1133.1 342.473 cv
1133.1 338.737 1129.98 336.525 1126.33 335.709 cv
1124.27 335.242 1121.58 334.69 1120.08 335.294 cv
1077.51 292.727 li
1077.51 253.577 li
1065.84 240.901 li
1065.84 134.237 li
1040.62 109.456 li
1040.62 99.0791 li
1006.61 65.8594 li
1001.66 65.8594 li
1037.17 100.535 li
cp
f
1077.13 235.524 mo
1077.13 237.436 1075.59 238.983 1073.68 238.983 cv
1071.77 238.983 1070.22 237.436 1070.22 235.524 cv
1070.22 233.613 1071.77 232.067 1073.68 232.067 cv
1075.59 232.067 1077.13 233.613 1077.13 235.524 cv
cp
1067.42 122.142 mo
1067.42 232.355 li
1067.48 232.355 li
1067.51 233.804 1067.91 235.48 1068.3 236.636 cv
1069.5 240.175 1071.33 243.402 1075.06 243.402 cv
1078.8 243.402 1081.83 240.371 1081.83 236.636 cv
1081.83 232.901 1078.71 230.689 1075.06 229.872 cv
1073.76 229.579 1072.22 229.257 1070.88 229.202 cv
1070.88 120.696 li
1015.33 65.8594 li
1010.41 65.8594 li
1067.42 122.142 li
cp
f
1084.32 214.874 mo
1084.32 216.784 1082.77 218.331 1080.86 218.331 cv
1078.95 218.331 1077.4 216.784 1077.4 214.874 cv
1077.4 212.962 1078.95 211.415 1080.86 211.415 cv
1082.77 211.415 1084.32 212.962 1084.32 214.874 cv
cp
1072.61 118.679 mo
1072.61 207.863 li
1074.71 210.665 li
1074.48 212.269 1074.99 214.536 1075.48 215.983 cv
1076.68 219.523 1078.51 222.751 1082.24 222.751 cv
1085.98 222.751 1089.01 219.722 1089.01 215.983 cv
1089.01 212.249 1085.89 210.038 1082.24 209.221 cv
1080.74 208.884 1078.91 208.494 1077.44 208.54 cv
1076.07 206.712 li
1076.07 117.246 li
1024.71 65.8594 li
1019.82 65.8594 li
1072.61 118.679 li
cp
f
1091.5 198.969 mo
1091.5 200.88 1089.95 202.427 1088.04 202.427 cv
1086.13 202.427 1084.58 200.88 1084.58 198.969 cv
1084.58 197.058 1086.13 195.512 1088.04 195.512 cv
1089.95 195.512 1091.5 197.058 1091.5 198.969 cv
cp
1079.81 115.511 mo
1079.81 192.195 li
1081.84 195.667 li
1081.85 197.143 1082.26 198.889 1082.66 200.08 cv
1083.86 203.621 1085.69 206.848 1089.42 206.848 cv
1093.16 206.848 1096.19 203.817 1096.19 200.08 cv
1096.19 196.345 1093.07 194.134 1089.42 193.316 cv
1087.73 192.936 1085.64 192.507 1084.1 192.686 cv
1083.27 191.259 li
1083.27 114.071 li
1034.74 65.8594 li
1029.83 65.8594 li
1079.81 115.511 li
cp
f
1084.42 113.204 mo
1084.42 170.835 li
1086.74 175.222 li
1086.43 176.833 1086.96 179.254 1087.48 180.771 cv
1088.67 184.31 1090.5 187.536 1094.24 187.536 cv
1097.98 187.536 1101.01 184.507 1101.01 180.771 cv
1101.01 177.033 1097.89 174.825 1094.24 174.005 cv
1092.81 173.684 1091.08 173.325 1089.65 173.329 cv
1087.88 169.977 li
1087.88 111.769 li
1041.82 65.8594 li
1036.92 65.8594 li
1084.42 113.204 li
cp
f
1102.54 162.719 mo
1102.54 164.632 1101 166.179 1099.09 166.179 cv
1097.17 166.179 1095.63 164.632 1095.63 162.719 cv
1095.63 160.809 1097.17 159.262 1099.09 159.262 cv
1101 159.262 1102.54 160.809 1102.54 162.719 cv
cp
1091.05 111.759 mo
1091.05 154.46 li
1093.1 157.87 li
1092.57 159.446 1093.15 162.173 1093.71 163.831 cv
1094.91 167.369 1096.74 170.598 1100.47 170.598 cv
1104.21 170.598 1107.24 167.569 1107.24 163.831 cv
1107.24 160.097 1104.12 157.884 1100.47 157.066 cv
1099.16 156.77 1097.6 156.445 1096.24 156.395 cv
1094.51 153.502 li
1094.51 110.333 li
1050.42 65.8594 li
1045.54 65.8594 li
1091.05 111.759 li
cp
f
1097.68 107.433 mo
1097.68 134.406 li
1099.79 137.096 li
1099.24 138.667 1099.83 141.417 1100.39 143.084 cv
1101.59 146.623 1103.42 149.852 1107.16 149.852 cv
1110.89 149.852 1113.92 146.822 1113.92 143.084 cv
1113.92 139.35 1110.8 137.138 1107.16 136.321 cv
1105.88 136.034 1104.38 135.718 1103.05 135.653 cv
1101.13 133.211 li
1101.13 106.012 li
1061.38 65.8594 li
1056.51 65.8594 li
1097.68 107.433 li
cp
f
1128.4 261.843 mo
1128.4 263.751 1126.86 265.3 1124.94 265.3 cv
1123.03 265.3 1121.49 263.751 1121.49 261.843 cv
1121.49 259.932 1123.03 258.386 1124.94 258.386 cv
1126.86 258.386 1128.4 259.932 1128.4 261.843 cv
cp
1103.73 103.972 mo
1103.73 124.739 li
1116.12 136.841 li
1116.12 255.023 li
1118.79 259.485 li
1118.92 260.716 1119.25 262.01 1119.57 262.955 cv
1120.76 266.493 1122.59 269.718 1126.33 269.718 cv
1130.07 269.718 1133.1 266.689 1133.1 262.955 cv
1133.1 259.217 1129.98 257.005 1126.33 256.188 cv
1124.46 255.767 1122.07 255.275 1120.52 255.638 cv
1119.58 254.063 li
1119.58 135.385 li
1107.19 123.283 li
1107.19 102.557 li
1071.08 65.8594 li
1066.23 65.8594 li
1103.73 103.972 li
cp
f
1021.77 146.102 mo
1021.77 148.015 1020.22 149.561 1018.31 149.561 cv
1016.4 149.561 1014.85 148.015 1014.85 146.102 cv
1014.85 144.192 1016.4 142.645 1018.31 142.645 cv
1020.22 142.645 1021.77 144.192 1021.77 146.102 cv
cp
960.957 84.249 mo
983.6 84.249 li
1012.1 113.761 li
1012.1 143.03 li
1012.11 143.03 li
1012.16 144.456 1012.55 146.083 1012.93 147.214 cv
1014.13 150.753 1015.96 153.98 1019.69 153.98 cv
1023.43 153.98 1026.46 150.952 1026.46 147.214 cv
1026.46 143.48 1023.34 141.268 1019.69 140.45 cv
1018.41 140.161 1016.89 139.843 1015.55 139.782 cv
1015.55 112.363 li
985.066 80.791 li
962.387 80.791 li
947.457 65.8594 li
942.566 65.8594 li
960.957 84.249 li
cp
f
1045.99 325.21 mo
1045.99 319.956 1041.73 315.702 1036.48 315.702 cv
1031.22 315.702 1026.97 319.956 1026.97 325.21 cv
1026.97 330.461 1031.22 334.72 1036.48 334.72 cv
1041.73 334.72 1045.99 330.461 1045.99 325.21 cv
cp
1 1 1 rgb
f
1067.44 349.235 mo
1067.44 343.985 1063.19 339.727 1057.94 339.727 cv
1052.69 339.727 1048.43 343.985 1048.43 349.235 cv
1048.43 354.49 1052.69 358.744 1057.94 358.744 cv
1063.19 358.744 1067.44 354.49 1067.44 349.235 cv
cp
f
911.814 70.9922 mo
911.826 73.9707 li
920.744 83.7666 li
921.117 82.7461 921.332 81.6504 921.332 80.5 cv
921.332 80.043 921.287 79.5977 921.227 79.1582 cv
915.277 72.626 li
915.273 71.6465 li
914.203 71.2285 913.041 70.9912 911.824 70.9912 cv
911.82 70.9912 911.818 70.9922 911.814 70.9922 cv
cp
0 .862745 1 rgb
f
201.983 79.4014 mo
200.633 80.7549 198.444 80.7549 197.095 79.4014 cv
195.747 78.0518 195.747 75.8623 197.095 74.5127 cv
198.444 73.1611 200.633 73.1611 201.983 74.5127 cv
203.339 75.8623 203.339 78.0518 201.983 79.4014 cv
cp
206.788 78.4326 mo
215.007 78.4326 li
215.007 74.9756 li
206.511 74.9756 li
205.509 73.876 203.892 72.8252 202.558 71.9795 cv
199.4 69.9795 195.633 69.3369 192.992 71.9795 cv
190.351 74.6221 190.347 78.9033 192.988 81.5459 cv
195.633 84.1885 199.208 83.2021 202.558 81.5459 cv
203.89 80.8877 205.79 79.6904 206.788 78.4326 cv
cp
f
154.358 146.548 mo
153.004 147.892 150.817 147.888 149.47 146.53 cv
148.124 145.177 148.132 142.985 149.486 141.642 cv
150.84 140.296 153.028 140.302 154.376 141.655 cv
155.724 143.013 155.716 145.202 154.358 146.548 cv
cp
154.956 139.126 mo
151.802 137.114 148.04 136.462 145.39 139.097 cv
142.739 141.726 142.722 146.013 145.356 148.661 cv
147.994 151.314 151.569 150.337 154.926 148.692 cv
156.02 148.157 157.495 147.259 158.545 146.263 cv
166.532 146.263 li
166.532 142.806 li
159.421 142.806 li
158.563 141.466 156.556 140.145 154.956 139.126 cv
cp
f
83.6299 140.399 mo
84.9844 139.054 87.1729 139.064 88.5195 140.417 cv
89.8672 141.77 89.8594 143.958 88.502 145.306 cv
87.1475 146.649 84.9609 146.645 83.6133 145.292 cv
82.2705 143.935 82.2764 141.747 83.6299 140.399 cv
cp
214.589 134.911 mo
215.872 133.497 218.056 133.384 219.471 134.667 cv
220.89 135.946 221.001 138.134 219.718 139.55 cv
218.438 140.964 216.254 141.075 214.835 139.796 cv
213.417 138.515 213.306 136.327 214.589 134.911 cv
cp
89.0703 147.45 mo
89.7559 147.114 90.5928 146.638 91.3799 146.081 cv
92.0146 146.817 92.9414 147.292 93.9863 147.292 cv
114.446 147.292 li
115.426 147.292 116.36 146.876 117.017 146.148 cv
131.834 129.712 li
173.849 129.712 li
184.804 140.27 li
185.435 140.884 186.275 141.23 187.157 141.239 cv
209.199 141.528 li
209.217 141.528 209.23 141.528 209.247 141.528 cv
210.144 141.528 210.956 141.179 211.571 140.614 cv
212.47 141.255 213.493 141.847 214.393 142.355 cv
217.648 144.192 221.44 144.642 223.946 141.872 cv
226.451 139.1 226.239 134.821 223.467 132.317 cv
220.69 129.814 217.172 130.98 213.91 132.8 cv
212.985 133.317 211.784 134.12 210.833 135.013 cv
210.368 134.773 209.851 134.62 209.29 134.612 cv
188.615 134.343 li
177.644 123.767 li
176.999 123.144 176.138 122.796 175.244 122.796 cv
130.293 122.796 li
129.314 122.796 128.382 123.212 127.726 123.938 cv
112.909 140.376 li
93.9863 140.376 li
93.5557 140.376 93.1494 140.464 92.7686 140.608 cv
91.7646 139.61 90.3154 138.661 89.0996 137.884 cv
85.9463 135.876 82.1846 135.222 79.5342 137.855 cv
76.8828 140.487 76.8662 144.769 79.499 147.421 cv
82.1377 150.071 85.7139 149.097 89.0703 147.45 cv
cp
f
171.697 72.6611 mo
172.98 71.2451 175.165 71.1338 176.584 72.4131 cv
177.999 73.6963 178.11 75.8799 176.83 77.2979 cv
175.551 78.7139 173.366 78.8252 171.947 77.5459 cv
170.527 76.2646 170.418 74.0771 171.697 72.6611 cv
cp
171.503 80.1045 mo
174.761 81.9424 178.553 82.3916 181.055 79.6201 cv
183.56 76.8506 183.348 72.5713 180.575 70.0674 cv
177.804 67.5635 174.281 68.7256 171.019 70.5498 cv
169.929 71.1572 168.462 72.167 167.466 73.2451 cv
158.477 73.5264 li
158.586 76.9834 li
166.886 76.7246 li
167.833 77.9951 169.874 79.1865 171.503 80.1045 cv
cp
f
174.197 172.001 mo
176.088 172.267 177.404 174.013 177.138 175.903 cv
176.874 177.796 175.124 179.112 173.234 178.847 cv
171.343 178.581 170.029 176.833 170.294 174.942 cv
170.557 173.05 172.306 171.733 174.197 172.001 cv
cp
167.924 176.013 mo
168.23 179.735 169.983 183.13 173.68 183.649 cv
177.382 184.169 180.802 181.597 181.325 177.894 cv
181.842 174.192 178.903 171.931 175.564 170.255 cv
173.882 169.405 170.974 168.364 169.392 168.901 cv
137.063 168.901 li
137.063 172.36 li
167.802 172.36 li
167.743 173.558 167.831 174.874 167.924 176.013 cv
cp
f
222.453 104.39 mo
220.556 104.171 219.197 102.456 219.414 100.56 cv
219.633 98.6631 221.35 97.3018 223.246 97.5205 cv
225.144 97.7393 226.502 99.4541 226.286 101.351 cv
226.065 103.251 224.351 104.61 222.453 104.39 cv
cp
228.626 100.229 mo
228.23 96.5088 226.392 93.1592 222.68 92.7334 cv
218.968 92.3057 215.611 94.9639 215.183 98.6729 cv
214.758 102.388 217.752 104.575 221.13 106.171 cv
221.841 106.509 222.769 106.874 223.722 107.146 cv
223.852 107.847 224.188 108.517 224.749 109.042 cv
234.259 117.942 li
234.923 118.567 235.77 118.876 236.619 118.876 cv
237.54 118.876 238.462 118.509 239.145 117.78 cv
240.448 116.384 240.376 114.196 238.981 112.894 cv
229.474 103.991 li
229.278 103.81 229.063 103.661 228.842 103.532 cv
228.842 102.429 228.733 101.255 228.626 100.229 cv
cp
f
193.612 161.649 mo
192.263 163.001 190.074 163.001 188.723 161.649 cv
187.372 160.3 187.372 158.11 188.723 156.759 cv
190.074 155.409 192.263 155.409 193.612 156.759 cv
194.964 158.11 194.964 160.3 193.612 161.649 cv
cp
194.184 154.23 mo
191.026 152.226 187.261 151.585 184.617 154.23 cv
181.977 156.868 181.977 161.149 184.617 163.796 cv
187.261 166.433 190.837 165.45 194.184 163.796 cv
195.255 163.263 196.694 162.386 197.735 161.409 cv
206.076 161.409 li
206.076 157.952 li
198.695 157.952 li
197.856 156.597 195.811 155.259 194.184 154.23 cv
cp
f
200.134 119.298 mo
200.352 121.192 198.996 122.909 197.098 123.134 cv
195.203 123.354 193.488 121.993 193.266 120.097 cv
193.192 119.468 193.304 118.866 193.538 118.327 cv
193.729 118.204 193.91 118.063 194.079 117.897 cv
194.411 117.575 194.662 117.2 194.837 116.798 cv
195.266 116.521 195.755 116.325 196.297 116.263 cv
198.194 116.046 199.911 117.401 200.134 119.298 cv
cp
91.0898 115.122 mo
89.7344 116.466 87.5479 116.46 86.2002 115.104 cv
84.8564 113.751 84.8623 111.563 86.2168 110.216 cv
87.5703 108.87 89.7598 108.88 91.1064 110.233 cv
91.5723 110.7 91.8643 111.271 92.0068 111.868 cv
91.9951 111.989 91.9707 112.104 91.9707 112.229 cv
91.9707 112.509 92.0127 112.778 92.0771 113.04 cv
91.9941 113.8 91.6758 114.542 91.0898 115.122 cv
cp
95.4287 108.771 mo
94.8604 108.771 94.3311 108.921 93.8584 109.167 cv
93.1416 108.638 92.376 108.14 91.6875 107.7 cv
88.5332 105.692 84.7715 105.038 82.1211 107.671 cv
79.4697 110.304 79.4531 114.585 82.0869 117.235 cv
84.7246 119.888 88.3008 118.911 91.6572 117.267 cv
92.4893 116.858 93.5439 116.241 94.4639 115.532 cv
94.7725 115.622 95.0908 115.685 95.4287 115.685 cv
151.329 115.685 li
151.715 115.685 152.1 115.62 152.465 115.495 cv
168.358 109.976 li
181.561 109.976 li
189.189 117.825 li
189.511 118.155 189.882 118.401 190.278 118.575 cv
190.53 119.646 190.902 120.759 191.242 121.729 cv
192.481 125.259 195.038 128.097 198.744 127.663 cv
202.456 127.233 205.117 123.876 204.682 120.163 cv
204.247 116.452 200.834 115.009 197.179 114.226 cv
196.493 114.079 195.634 113.95 194.755 113.892 cv
194.599 113.575 194.407 113.272 194.149 113.009 cv
185.505 104.108 li
184.854 103.438 183.96 103.06 183.022 103.06 cv
167.778 103.06 li
167.39 103.06 167.008 103.126 166.644 103.251 cv
150.745 108.771 li
95.4287 108.771 li
cp
f
231.563 76.7061 mo
231.563 81.9854 227.278 86.2705 221.997 86.2705 cv
216.713 86.2705 212.432 81.9854 212.432 76.7061 cv
212.432 71.4209 216.713 67.1377 221.997 67.1377 cv
227.278 67.1377 231.563 71.4209 231.563 76.7061 cv
cp
1 1 1 rgb
f
160.403 74.9658 mo
160.403 80.251 156.121 84.5342 150.837 84.5342 cv
145.557 84.5342 141.27 80.251 141.27 74.9658 cv
141.27 69.6846 145.557 65.3994 150.837 65.3994 cv
156.121 65.3994 160.403 69.6846 160.403 74.9658 cv
cp
f
252.09 117.542 mo
252.09 122.825 247.809 127.108 242.524 127.108 cv
237.243 127.108 232.958 122.825 232.958 117.542 cv
232.958 112.259 237.243 107.972 242.524 107.972 cv
247.809 107.972 252.09 112.259 252.09 117.542 cv
cp
f
223.132 159.681 mo
223.132 164.964 218.851 169.247 213.566 169.247 cv
208.284 169.247 203.999 164.964 203.999 159.681 cv
203.999 154.398 208.284 150.114 213.566 150.114 cv
218.851 150.114 223.132 154.398 223.132 159.681 cv
cp
f
166.295 107.972 mo
166.295 113.255 162.014 117.542 156.729 117.542 cv
151.448 117.542 147.163 113.255 147.163 107.972 cv
147.163 102.692 151.448 98.4092 156.729 98.4092 cv
162.014 98.4092 166.295 102.692 166.295 107.972 cv
cp
f
126.963 138.403 mo
126.963 143.689 122.682 147.972 117.397 147.972 cv
112.116 147.972 107.83 143.689 107.83 138.403 cv
107.83 133.126 112.116 128.839 117.397 128.839 cv
122.682 128.839 126.963 133.126 126.963 138.403 cv
cp
f
138.792 170.634 mo
138.792 175.911 134.511 180.196 129.226 180.196 cv
123.944 180.196 119.659 175.911 119.659 170.634 cv
119.659 165.347 123.944 161.067 129.226 161.067 cv
134.511 161.067 138.792 165.347 138.792 170.634 cv
cp
f
180.342 143.833 mo
180.342 149.114 176.061 153.399 170.776 153.399 cv
165.495 153.399 161.21 149.114 161.21 143.833 cv
161.21 138.55 165.495 134.269 170.776 134.269 cv
176.061 134.269 180.342 138.55 180.342 143.833 cv
cp
f
339.45 214.657 mo
340.825 215.985 340.862 218.173 339.534 219.548 cv
338.211 220.921 336.02 220.96 334.647 219.632 cv
333.272 218.306 333.233 216.118 334.56 214.743 cv
335.887 213.372 338.075 213.333 339.45 214.657 cv
cp
343.856 62.9365 mo
338.954 62.9365 li
297.004 104.687 li
297.004 173.189 li
315.913 190.983 li
331.417 190.983 li
335.905 195.708 li
335.905 209.595 li
334.5 210.466 333.122 212.702 332.409 214.208 cv
330.809 217.587 329.887 221.181 332.575 223.774 cv
335.262 226.37 339.545 226.296 342.141 223.61 cv
344.737 220.921 344.026 217.163 341.971 214.044 cv
341.223 212.903 340.315 211.556 339.362 210.575 cv
339.362 194.326 li
332.899 187.525 li
317.282 187.525 li
300.463 171.691 li
300.463 106.123 li
343.856 62.9365 li
cp
0 .862745 1 rgb
f
321.86 168.116 mo
323.743 167.784 325.534 169.038 325.866 170.919 cv
326.196 172.8 324.94 174.593 323.06 174.925 cv
321.18 175.257 319.387 174.002 319.055 172.121 cv
318.725 170.241 319.979 168.445 321.86 168.116 cv
cp
353.971 62.9365 mo
349.069 62.9365 li
307.598 104.179 li
307.088 104.685 li
307.088 158.837 li
315.725 167.735 li
315.452 169.377 316.51 171.998 317.358 173.55 cv
319.151 176.824 321.516 179.685 325.194 179.035 cv
328.874 178.387 331.331 174.88 330.682 171.199 cv
330.032 167.523 326.577 165.884 322.844 165.713 cv
321.524 165.651 319.967 165.602 318.641 165.775 cv
310.545 157.435 li
310.545 106.123 li
353.971 62.9365 li
cp
f
325.747 111.07 mo
327.085 112.435 327.063 114.622 325.7 115.96 cv
324.335 117.297 322.145 117.274 320.809 115.909 cv
319.473 114.545 319.493 112.355 320.858 111.019 cv
322.221 109.683 324.413 109.706 325.747 111.07 cv
cp
362.573 62.9365 mo
357.67 62.9365 li
321.497 98.9229 li
321.497 106.55 li
320.37 107.587 319.327 109.233 318.721 110.425 cv
317.032 113.757 316.01 117.321 318.624 119.992 cv
321.237 122.661 325.52 122.708 328.188 120.091 cv
330.856 117.478 330.252 113.7 328.288 110.524 cv
327.36 109.026 326.18 107.177 324.954 106.218 cv
324.954 100.359 li
362.573 62.9365 li
cp
f
322.063 141.001 mo
323.399 142.366 323.377 144.554 322.012 145.891 cv
320.649 147.227 318.461 147.204 317.124 145.84 cv
315.786 144.476 315.809 142.286 317.174 140.949 cv
318.538 139.613 320.725 139.638 322.063 141.001 cv
cp
371.885 62.9365 mo
367.016 62.9365 li
336.766 93.4561 li
336.766 119.809 li
319.211 135.593 li
317.614 136.093 315.889 138.675 315.038 140.356 cv
313.344 143.688 312.323 147.252 314.936 149.923 cv
317.553 152.591 321.835 152.637 324.504 150.023 cv
327.172 147.408 326.569 143.632 324.602 140.454 cv
323.977 139.447 323.239 138.28 322.45 137.331 cv
340.225 121.353 li
340.225 94.8789 li
371.885 62.9365 li
cp
f
354.569 107.305 mo
355.905 108.669 355.885 110.858 354.52 112.195 cv
353.157 113.53 350.965 113.507 349.631 112.144 cv
348.293 110.778 348.317 108.589 349.68 107.253 cv
351.043 105.918 353.233 105.941 354.569 107.305 cv
cp
380.328 62.9365 mo
375.428 62.9365 li
351.106 87.1787 li
350.598 87.6865 li
350.598 102.524 li
350.618 102.524 li
349.379 103.526 348.202 105.363 347.543 106.66 cv
345.852 109.991 344.829 113.556 347.444 116.227 cv
350.057 118.896 354.34 118.941 357.01 116.326 cv
359.678 113.712 359.075 109.936 357.11 106.757 cv
356.206 105.3 355.06 103.503 353.87 102.524 cv
354.055 102.524 li
354.055 89.1221 li
380.328 62.9365 li
cp
f
352.69 166.398 mo
354.573 166.064 356.364 167.319 356.696 169.202 cv
357.028 171.083 355.774 172.876 353.893 173.209 cv
352.01 173.539 350.219 172.283 349.887 170.402 cv
349.555 168.521 350.809 166.729 352.69 166.398 cv
cp
389.156 62.9365 mo
384.286 62.9365 li
366.879 80.4873 li
366.879 119.944 li
361.614 126.124 li
342.342 126.124 li
335.614 133.512 li
335.614 155.126 li
346.819 165.265 li
345.903 166.718 347.196 170.013 348.19 171.83 cv
349.981 175.108 352.346 177.966 356.026 177.318 cv
359.706 176.67 362.161 173.161 361.512 169.481 cv
360.864 165.804 357.407 164.167 353.676 163.993 cv
352.565 163.942 351.286 163.901 350.116 163.991 cv
350.319 163.768 li
339.073 153.591 li
339.073 134.852 li
343.872 129.581 li
363.21 129.581 li
370.336 121.218 li
370.336 81.9121 li
389.156 62.9365 li
cp
f
359.786 147.65 mo
359.786 149.56 358.237 151.108 356.327 151.108 cv
354.415 151.108 352.87 149.56 352.87 147.65 cv
352.87 145.739 354.415 144.192 356.327 144.192 cv
358.237 144.192 359.786 145.739 359.786 147.65 cv
cp
398.884 62.9365 mo
394.034 62.9365 li
373.362 83.9492 li
373.362 130.264 li
360.491 141.499 li
358.889 141.286 356.651 141.786 355.215 142.271 cv
351.674 143.47 348.45 145.3 348.45 149.034 cv
348.45 152.773 351.477 155.802 355.215 155.802 cv
358.95 155.802 361.163 152.683 361.981 149.034 cv
362.319 147.52 362.711 145.67 362.661 144.196 cv
376.819 131.837 li
376.819 85.3672 li
398.884 62.9365 li
cp
f
386.129 138.128 mo
387.502 139.453 387.542 141.641 386.215 143.018 cv
384.891 144.392 382.702 144.429 381.327 143.102 cv
379.952 141.775 379.913 139.587 381.241 138.213 cv
382.567 136.838 384.756 136.8 386.129 138.128 cv
cp
407.776 62.9365 mo
402.928 62.9365 li
382.788 83.4453 li
382.293 83.9521 li
382.293 133.263 li
380.993 134.241 379.752 136.275 379.088 137.679 cv
377.489 141.056 376.567 144.649 379.254 147.243 cv
381.944 149.838 386.225 149.764 388.821 147.078 cv
391.417 144.388 390.707 140.632 388.653 137.512 cv
387.829 136.257 386.809 134.751 385.75 133.761 cv
385.75 85.3633 li
407.776 62.9365 li
cp
f
388.25 170.673 mo
388.25 172.583 386.702 174.13 384.792 174.13 cv
382.881 174.13 381.335 172.583 381.335 170.673 cv
381.335 168.762 382.881 167.215 384.792 167.215 cv
386.702 167.215 388.25 168.762 388.25 170.673 cv
cp
416.99 62.9365 mo
412.092 62.9365 li
397.28 77.6953 li
397.28 155.964 li
388.512 164.481 li
386.96 164.4 384.989 164.852 383.682 165.295 cv
380.141 166.492 376.915 168.322 376.915 172.059 cv
376.915 175.795 379.944 178.823 383.682 178.823 cv
387.417 178.823 389.627 175.704 390.444 172.059 cv
390.819 170.393 391.243 168.333 391.082 166.802 cv
400.737 157.425 li
400.737 79.1299 li
416.99 62.9365 li
cp
f
417.29 108.808 mo
418.625 110.173 418.604 112.36 417.239 113.697 cv
415.875 115.034 413.686 115.011 412.35 113.646 cv
411.012 112.282 411.038 110.093 412.401 108.757 cv
413.764 107.421 415.954 107.443 417.29 108.808 cv
cp
426.47 62.9365 mo
421.616 62.9365 li
412.549 72.1338 li
412.549 104.128 li
413.219 104.128 li
412.024 105.147 410.899 106.907 410.262 108.163 cv
408.571 111.496 407.547 115.06 410.163 117.729 cv
412.776 120.399 417.06 120.444 419.731 117.83 cv
422.399 115.214 421.793 111.438 419.829 108.261 cv
418.778 106.565 417.403 104.416 416.006 103.624 cv
416.006 73.5518 li
426.47 62.9365 li
cp
f
85.6563 451.48 mo
85.168 449.635 86.2734 447.742 88.1211 447.26 cv
89.9668 446.773 91.8574 447.879 92.3438 449.725 cv
92.8281 451.572 91.7227 453.463 89.877 453.949 cv
88.0273 454.432 86.1387 453.328 85.6563 451.48 cv
cp
95.4434 449.484 mo
94.375 445.42 90.2188 442.992 86.1602 444.059 cv
82.0957 445.125 79.668 449.279 80.7324 453.344 cv
81.7988 457.404 85.9551 459.834 90.0195 458.768 cv
94.0801 457.699 96.5078 453.545 95.4434 449.484 cv
cp
f
85.6563 421.395 mo
85.168 419.547 86.2734 417.656 88.1211 417.174 cv
89.9668 416.687 91.8574 417.792 92.3438 419.639 cv
92.8281 421.484 91.7227 423.377 89.877 423.863 cv
88.0273 424.346 86.1387 423.24 85.6563 421.395 cv
cp
95.4434 419.398 mo
94.375 415.332 90.2188 412.906 86.1602 413.972 cv
82.0957 415.04 79.668 419.193 80.7324 423.258 cv
81.7988 427.316 85.9551 429.748 90.0195 428.68 cv
94.0801 427.613 96.5078 423.457 95.4434 419.398 cv
cp
f
86.0801 394.539 mo
85.5938 392.692 86.6992 390.8 88.5469 390.315 cv
90.3926 389.832 92.2852 390.936 92.7676 392.783 cv
93.2539 394.63 92.1484 396.521 90.3008 397.004 cv
88.4531 397.492 86.5645 396.386 86.0801 394.539 cv
cp
95.8672 392.54 mo
94.8008 388.479 90.6445 386.05 86.584 387.114 cv
82.5215 388.181 80.0918 392.337 81.1602 396.404 cv
82.2246 400.462 86.3809 402.893 90.4453 401.827 cv
94.5059 400.759 96.9336 396.602 95.8672 392.54 cv
cp
f
86.1426 347.846 mo
87.8086 346.911 89.916 347.502 90.8496 349.168 cv
91.7871 350.831 91.1973 352.941 89.5293 353.874 cv
87.8652 354.809 85.7559 354.219 84.8223 352.553 cv
83.8887 350.889 84.4785 348.782 86.1426 347.846 cv
cp
81.8848 353.569 mo
83.9434 357.233 88.5762 358.534 92.2363 356.476 cv
95.8984 354.42 97.1992 349.788 95.1426 346.121 cv
93.0879 342.463 88.4512 341.16 84.7891 343.217 cv
81.1289 345.273 79.8301 349.91 81.8848 353.569 cv
cp
f
80.4531 224.077 mo
79.1445 225.464 76.9609 225.535 75.5664 224.229 cv
74.1738 222.925 74.1035 220.737 75.4063 219.349 cv
76.7129 217.955 78.9004 217.88 80.2949 219.187 cv
81.6914 220.494 81.7598 222.678 80.4531 224.077 cv
cp
80.5293 488.465 mo
96.3945 471.631 li
103.969 469.908 li
130.607 443.289 li
130.607 325.365 li
112.432 308.94 li
112.432 253.231 li
104.828 245.667 li
104.828 227.737 li
96.166 219.805 li
85.1064 219.805 li
84.1055 218.626 82.2734 217.513 80.7871 216.637 cv
77.5625 214.737 73.7793 214.22 71.2246 216.944 cv
68.6699 219.672 68.8066 223.952 71.5313 226.508 cv
74.2578 229.06 77.8027 227.963 81.0918 226.2 cv
82.2988 225.555 83.9697 224.44 84.9746 223.262 cv
94.8223 223.262 li
101.371 229.259 li
101.371 247.107 li
108.975 254.669 li
108.975 310.476 li
127.15 326.9 li
127.15 441.857 li
102.23 466.756 li
94.5957 468.492 li
77.0723 487.096 li
77.0723 517.277 li
65.625 527.785 li
67.9609 530.33 li
80.5293 518.795 li
80.5293 488.465 li
cp
f
83.377 318.247 mo
83.1563 316.349 84.5156 314.636 86.4102 314.417 cv
88.3086 314.194 90.0254 315.551 90.2441 317.453 cv
90.4668 319.35 89.1074 321.063 87.209 321.285 cv
85.3105 321.501 83.5977 320.143 83.377 318.247 cv
cp
73.707 486.291 mo
92.9316 465.305 li
99.5664 465.305 li
124.133 440.516 li
124.133 351.787 li
93.501 320.698 li
93.415 319.2 92.7969 317.338 92.2676 315.822 cv
91.0332 312.29 88.4785 309.45 84.7676 309.882 cv
81.0586 310.312 78.3965 313.668 78.8262 317.377 cv
79.2578 321.089 82.6738 322.539 86.3262 323.322 cv
87.7402 323.625 89.8936 323.864 91.4473 323.54 cv
120.676 353.206 li
120.676 439.096 li
98.123 461.848 li
91.4082 461.848 li
70.25 484.947 li
70.25 514.352 li
65.5 519.697 li
68.0859 521.992 li
73.707 515.666 li
73.707 486.291 li
cp
f
86.3906 240.555 mo
85.0996 239.146 85.1973 236.958 86.6074 235.669 cv
88.0176 234.382 90.2051 234.48 91.4922 235.892 cv
92.7813 237.299 92.6836 239.488 91.2754 240.774 cv
89.8633 242.065 87.6758 241.962 86.3906 240.555 cv
cp
92.5938 258.276 mo
92.5938 246.386 li
92.5938 246.188 92.5674 245.998 92.5352 245.809 cv
92.9219 245.567 93.2939 245.294 93.6426 244.975 cv
96.7402 242.142 96.957 237.333 94.123 234.234 cv
91.2891 231.13 86.4805 230.919 83.3789 233.751 cv
80.2813 236.583 80.0645 241.392 82.9004 244.495 cv
83.6963 245.366 84.6514 245.999 85.6777 246.411 cv
85.6777 258.276 li
85.6777 260.183 87.2266 261.733 89.1348 261.733 cv
91.0449 261.733 92.5938 260.183 92.5938 258.276 cv
cp
f
100.152 285.823 mo
101.949 286.464 102.885 288.444 102.244 290.235 cv
101.604 292.037 99.627 292.979 97.8262 292.332 cv
96.0254 291.696 95.0898 289.716 95.7305 287.915 cv
96.377 286.121 98.3496 285.181 100.152 285.823 cv
cp
93.0098 294.738 mo
93.4092 294.569 93.7539 294.327 94.0508 294.043 cv
95.3643 294.479 97.0137 294.699 98.3926 294.869 cv
102.105 295.325 105.783 294.289 107.039 290.769 cv
108.293 287.251 106.459 283.381 102.941 282.125 cv
99.4238 280.873 96.6113 283.294 94.2969 286.224 cv
93.8477 286.792 93.332 287.534 92.877 288.325 cv
92.0771 288.022 91.166 288.009 90.3145 288.369 cv
83.166 291.395 li
81.8457 291.956 81.0566 293.235 81.0566 294.582 cv
81.0566 295.032 81.1445 295.487 81.3301 295.925 cv
82.0742 297.685 84.1016 298.509 85.8613 297.762 cv
93.0098 294.738 li
cp
f
115.383 441.533 mo
119.738 436.088 li
119.738 373.56 li
108.74 363.518 li
81.3477 363.518 li
66.2949 348.258 li
63.832 350.686 li
79.9023 366.975 li
107.398 366.975 li
116.281 375.086 li
116.281 434.877 li
113.723 438.074 li
78.1582 438.074 li
65.6621 448.867 li
67.9238 451.484 li
79.4434 441.533 li
115.383 441.533 li
cp
f
109.779 434.617 mo
113.689 429.592 li
113.689 376.103 li
105.883 369.639 li
78.3086 369.639 li
68.0078 359.48 li
65.5781 361.941 li
76.8887 373.097 li
104.637 373.097 li
110.23 377.73 li
110.23 428.408 li
108.088 431.16 li
74.7539 431.16 li
63.8828 441.353 li
66.2461 443.875 li
76.1211 434.617 li
109.779 434.617 li
cp
f
100.902 409.548 mo
107.637 404.108 li
107.637 382.129 li
99.377 375.62 li
76.5605 375.62 li
67.9844 367.452 li
65.5996 369.957 li
75.1777 379.077 li
98.1777 379.077 li
104.18 383.809 li
104.18 402.458 li
99.6797 406.09 li
80.7461 406.09 li
63.8105 423.92 li
66.3164 426.301 li
82.2305 409.548 li
100.902 409.548 li
cp
f
87.1074 275.116 mo
81.4414 275.116 76.8496 270.634 76.8496 265.11 cv
76.8496 259.582 81.4414 255.105 87.1074 255.105 cv
92.7734 255.105 97.3672 259.582 97.3672 265.11 cv
97.3672 270.634 92.7734 275.116 87.1074 275.116 cv
cp
1 1 1 rgb
f
75.8906 304.585 mo
70.2246 304.585 65.6309 300.107 65.6309 294.58 cv
65.6309 289.054 70.2246 284.573 75.8906 284.573 cv
81.5566 284.573 86.1504 289.054 86.1504 294.58 cv
86.1504 300.107 81.5566 304.585 75.8906 304.585 cv
cp
f
103.1 341.38 mo
97.4336 341.38 92.8398 336.903 92.8398 331.375 cv
92.8398 325.85 97.4336 321.371 103.1 321.371 cv
108.766 321.371 113.359 325.85 113.359 331.375 cv
113.359 336.903 108.766 341.38 103.1 341.38 cv
cp
f
949.609 604.779 mo
949.609 606.688 948.063 608.236 946.152 608.236 cv
944.241 608.236 942.695 606.688 942.695 604.779 cv
942.695 602.867 944.241 601.322 946.152 601.322 cv
948.063 601.322 949.609 602.867 949.609 604.779 cv
cp
1017.29 583.56 mo
1005.28 595.396 li
987.605 589.032 li
959.674 589.333 li
950.398 598.634 li
948.794 598.394 946.5 598.908 945.041 599.402 cv
941.502 600.597 938.274 602.428 938.274 606.164 cv
938.274 609.9 941.304 612.93 945.041 612.93 cv
948.777 612.93 950.988 609.81 951.805 606.164 cv
952.177 604.508 952.598 602.461 952.445 600.933 cv
952.719 601.207 li
961.125 592.774 li
987.018 592.497 li
1006.16 599.386 li
1018.71 587.019 li
1098.97 587.019 li
1134.26 551.339 li
1131.8 548.907 li
1097.52 583.56 li
1017.29 583.56 li
cp
0 .862745 1 rgb
f
975.553 614.051 mo
974.227 615.424 972.039 615.463 970.664 614.135 cv
969.289 612.809 969.252 610.621 970.58 609.246 cv
971.905 607.871 974.096 607.834 975.469 609.162 cv
976.84 610.488 976.879 612.676 975.553 614.051 cv
cp
1040.52 591.917 mo
1022.76 605.316 li
1017.35 610.072 li
980.307 610.072 li
979.293 608.822 977.356 607.648 976.003 607.008 cv
972.625 605.41 969.031 604.486 966.436 607.176 cv
963.842 609.861 963.916 614.144 966.602 616.742 cv
969.291 619.336 973.048 618.627 976.168 616.574 cv
977.479 615.711 979.066 614.639 980.051 613.529 cv
1018.65 613.529 li
1024.95 607.994 li
1041.68 595.377 li
1101.25 595.377 li
1134.24 563.261 li
1131.82 560.782 li
1099.85 591.917 li
1040.52 591.917 li
cp
f
901.93 623.412 mo
900.603 624.783 898.416 624.822 897.041 623.496 cv
895.666 622.17 895.627 619.981 896.955 618.606 cv
898.281 617.232 900.471 617.193 901.845 618.521 cv
903.218 619.848 903.256 622.037 901.93 623.412 cv
cp
1119.86 614.559 mo
1112.5 622.174 li
1059.78 622.174 li
1041.29 620.166 li
906.81 619.592 li
905.839 618.283 903.789 617.035 902.38 616.367 cv
899 614.769 895.407 613.848 892.814 616.535 cv
890.217 619.221 890.291 623.504 892.98 626.102 cv
895.668 628.695 899.426 627.986 902.545 625.934 cv
903.795 625.111 905.291 624.1 906.281 623.047 cv
1041 623.613 li
1059.49 625.621 li
1113.96 625.631 li
1123.31 615.957 li
1123.31 586.273 li
1134.28 574.821 li
1131.78 572.431 li
1119.86 584.884 li
1119.86 614.559 li
cp
f
918.105 633.221 mo
916.779 634.596 914.59 634.633 913.216 633.307 cv
911.846 631.981 911.805 629.791 913.133 628.418 cv
914.459 627.043 916.646 627.004 918.021 628.332 cv
919.395 629.658 919.434 631.846 918.105 633.221 cv
cp
1129.37 620.613 mo
1109.9 640.902 li
1041.77 640.902 li
1029.19 629.377 li
922.966 629.377 li
921.986 628.078 919.957 626.842 918.555 626.18 cv
915.178 624.58 911.585 623.658 908.99 626.346 cv
906.394 629.033 906.47 633.315 909.155 635.912 cv
911.846 638.508 915.6 637.797 918.722 635.742 cv
919.98 634.916 921.491 633.896 922.481 632.834 cv
1027.84 632.834 li
1040.43 644.359 li
1111.38 644.359 li
1132.82 622.006 li
1132.82 591.339 li
1134.41 589.204 li
1131.65 587.138 li
1129.37 590.19 li
1129.37 620.613 li
cp
f
754.31 546.731 mo
754.31 544.821 755.857 543.274 757.768 543.274 cv
759.678 543.274 761.227 544.821 761.227 546.731 cv
761.227 548.644 759.678 550.19 757.768 550.19 cv
755.857 550.19 754.31 548.644 754.31 546.731 cv
cp
888.021 661.373 mo
859.769 634.852 li
801.885 634.852 li
779.269 612.236 li
779.269 568.907 li
763.478 552.138 li
764.439 550.751 763.781 547.501 763.144 545.62 cv
761.948 542.083 760.116 538.856 756.382 538.856 cv
752.646 538.856 749.614 541.884 749.614 545.62 cv
749.614 549.356 752.736 551.567 756.382 552.384 cv
757.556 552.648 758.93 552.94 760.177 553.036 cv
759.856 553.337 li
775.811 570.277 li
775.811 613.67 li
800.453 638.309 li
858.402 638.309 li
886.627 664.809 li
919.762 665.408 li
931.012 653.293 li
1099.86 653.293 li
1116.57 669.143 li
1133.03 669.143 li
1133.03 665.684 li
1117.95 665.684 li
1101.24 649.834 li
929.506 649.834 li
918.279 661.922 li
888.021 661.373 li
cp
f
730.488 577.456 mo
730.488 575.546 732.036 573.999 733.945 573.999 cv
735.854 573.999 737.404 575.546 737.404 577.456 cv
737.404 579.368 735.854 580.915 733.945 580.915 cv
732.036 580.915 730.488 579.368 730.488 577.456 cv
cp
942.221 662.514 mo
936.459 668.275 li
882.269 668.275 li
860.659 646.953 li
805.348 646.953 li
740.139 581.124 li
740.207 579.579 739.76 577.636 739.322 576.345 cv
738.127 572.808 736.295 569.579 732.56 569.579 cv
728.823 569.579 725.794 572.608 725.794 576.345 cv
725.794 580.081 728.912 582.292 732.56 583.11 cv
734.243 583.487 736.328 583.917 737.864 583.743 cv
803.906 650.412 li
859.242 650.412 li
880.852 671.734 li
937.889 671.734 li
943.652 665.971 li
1098.32 665.971 li
1108.69 678.072 li
1133.03 678.072 li
1133.03 674.615 li
1110.28 674.615 li
1099.91 662.514 li
942.221 662.514 li
cp
f
692.868 665.771 mo
691.542 667.146 689.352 667.184 687.979 665.857 cv
686.604 664.533 686.565 662.344 687.896 660.969 cv
689.222 659.594 691.409 659.555 692.784 660.883 cv
694.155 662.211 694.195 664.398 692.868 665.771 cv
cp
871.767 676.057 mo
857.789 661.935 li
697.734 661.935 li
696.757 660.635 694.721 659.394 693.317 658.731 cv
689.938 657.131 686.347 656.209 683.752 658.896 cv
681.157 661.586 681.231 665.865 683.918 668.463 cv
686.604 671.059 690.363 670.35 693.483 668.295 cv
694.739 667.469 696.244 666.451 697.236 665.393 cv
856.346 665.393 li
870.322 679.516 li
1086.85 679.516 li
1094.34 687.295 li
1133.03 687.295 li
1133.03 683.838 li
1095.81 683.838 li
1088.32 676.057 li
871.767 676.057 li
cp
f
1133.03 702.565 mo
1133.03 699.107 li
1123.31 699.107 li
1123.31 702.565 li
1133.03 702.565 li
cp
f
877.432 695.832 mo
877.432 697.742 875.884 699.289 873.975 699.289 cv
872.064 699.289 870.516 697.742 870.516 695.832 cv
870.516 693.92 872.064 692.373 873.975 692.373 cv
875.884 692.373 877.432 693.92 877.432 695.832 cv
cp
884.661 683.838 mo
877.953 689.666 li
876.368 689.512 874.246 689.986 872.863 690.455 cv
869.322 691.65 866.098 693.481 866.098 697.219 cv
866.098 700.953 869.127 703.982 872.863 703.982 cv
876.599 703.982 878.81 700.863 879.629 697.219 cv
879.981 695.646 880.382 693.717 880.292 692.217 cv
885.955 687.295 li
1055.11 687.295 li
1084.84 717.551 li
1133.03 717.551 li
1133.03 714.094 li
1086.29 714.094 li
1056.56 683.838 li
884.661 683.838 li
cp
f
583.335 880.004 mo
582.406 881.672 580.3 882.269 578.632 881.34 cv
576.964 880.408 576.367 878.307 577.294 876.635 cv
578.228 874.967 580.33 874.369 582 875.301 cv
583.667 876.231 584.265 878.336 583.335 880.004 cv
cp
1045.23 695.072 mo
904.025 695.94 li
903.336 695.943 li
849.287 747.934 li
849.287 806.146 li
843.541 811.773 li
658.399 811.773 li
608.718 861.166 li
598.947 862.893 li
586.474 874.65 li
585.16 873.861 583.281 873.324 581.962 873.082 cv
578.29 872.402 574.58 872.432 572.759 875.693 cv
570.941 878.957 572.111 883.076 575.375 884.896 cv
578.638 886.717 582.087 885.068 584.578 882.283 cv
585.771 880.949 587.24 879.26 587.79 877.795 cv
587.974 877.986 li
600.565 866.117 li
610.386 864.385 li
659.823 815.232 li
844.953 815.232 li
852.746 807.602 li
852.746 749.406 li
904.738 699.393 li
1043.82 698.537 li
1103.3 757.315 li
1133.03 757.315 li
1133.03 753.856 li
1104.72 753.856 li
1045.74 695.576 li
1045.23 695.072 li
cp
f
575.363 914.309 mo
574.593 912.559 575.386 910.519 577.136 909.75 cv
578.884 908.981 580.925 909.773 581.693 911.521 cv
582.46 913.271 581.667 915.31 579.919 916.082 cv
578.171 916.852 576.132 916.057 575.363 914.309 cv
cp
1037.16 705.736 mo
912.682 705.736 li
911.541 705.736 910.443 706.185 909.633 706.992 cv
864.108 752.231 li
863.291 753.043 862.832 754.144 862.832 755.297 cv
862.832 815.168 li
852.973 825.027 li
670.063 825.027 li
668.919 825.027 667.821 825.481 667.011 826.289 cv
583.738 909.275 li
583.529 909.482 583.347 909.707 583.189 909.943 cv
583.126 909.871 583.062 909.799 583.001 909.732 cv
580.482 906.977 577.507 904.758 574.085 906.266 cv
570.667 907.768 569.113 911.76 570.617 915.18 cv
572.123 918.602 575.867 919.369 579.535 918.65 cv
581.654 918.234 584.41 917.65 585.505 916.443 cv
586.986 916.904 588.662 916.568 589.839 915.396 cv
671.849 833.672 li
854.764 833.672 li
855.91 833.672 857.01 833.217 857.82 832.406 cv
870.211 820.016 li
871.021 819.205 871.477 818.106 871.477 816.959 cv
871.477 757.096 li
914.462 714.379 li
1035.37 714.379 li
1095.48 774.488 li
1096.29 775.299 1097.39 775.754 1098.54 775.754 cv
1133.03 775.754 li
1135.42 775.754 1137.35 773.818 1137.35 771.432 cv
1137.35 769.045 1135.42 767.109 1133.03 767.109 cv
1100.33 767.109 li
1040.22 707.002 li
1039.4 706.191 1038.31 705.736 1037.16 705.736 cv
cp
f
943.521 843.59 mo
945.391 843.988 946.582 845.822 946.185 847.691 cv
945.787 849.559 943.951 850.752 942.084 850.354 cv
940.215 849.957 939.024 848.119 939.421 846.252 cv
939.818 844.385 941.654 843.191 943.521 843.59 cv
cp
1026.06 720.43 mo
942.803 720.43 li
921.191 741.756 li
903.346 741.756 li
879.256 764.639 li
879.256 787.484 li
894.252 802.41 li
895.959 803.904 li
895.67 827.5 li
905.371 836.553 li
930.758 836.553 li
937.316 842.328 li
936.971 843.752 936.968 845.615 936.984 847.152 cv
937.027 850.887 938.539 854.398 942.195 855.178 cv
945.849 855.955 949.439 853.621 950.218 849.969 cv
950.996 846.315 948.221 843.85 945.008 841.943 cv
943.707 841.17 941.618 840.213 940.008 840.09 cv
932.061 833.094 li
906.736 833.094 li
899.148 826.014 li
899.435 802.356 li
896.613 799.885 li
882.715 786.049 li
882.715 766.125 li
904.727 745.213 li
922.611 745.213 li
944.221 723.889 li
1024.63 723.889 li
1088.67 787.988 li
1089.18 788.496 li
1089.9 788.494 li
1090.09 788.494 1109.86 788.435 1117.83 788.494 cv
1120.02 788.512 1121.58 789.027 1122.46 790.027 cv
1123.5 791.205 1123.33 792.805 1123.33 792.805 cv
1123.31 815.807 li
1123.31 819.545 1124.37 822.393 1126.46 824.266 cv
1129.34 826.846 1133.06 826.477 1133.21 826.459 cv
1132.86 823.019 li
1132.83 823.023 1130.45 823.225 1128.74 821.67 cv
1127.44 820.479 1126.77 818.506 1126.77 815.807 cv
1126.77 793.141 li
1126.84 792.467 1126.95 789.926 1125.1 787.795 cv
1123.54 785.99 1121.11 785.063 1117.85 785.037 cv
1110.74 784.982 1094.25 785.025 1090.61 785.035 cv
1026.06 720.43 li
cp
f
1103.3 606.81 mo
1104.63 605.44 1106.82 605.4 1108.19 606.727 cv
1109.57 608.055 1109.61 610.242 1108.28 611.617 cv
1106.95 612.99 1104.76 613.027 1103.39 611.701 cv
1102.02 610.375 1101.98 608.185 1103.3 606.81 cv
cp
1102.86 613.856 mo
1106.23 615.453 1109.82 616.377 1112.42 613.685 cv
1115.01 611 1114.94 606.719 1112.25 604.121 cv
1109.56 601.527 1105.81 602.236 1102.69 604.289 cv
1101.29 605.211 1099.57 606.371 1098.61 607.56 cv
1087.35 607.707 li
1087.39 611.164 li
1098.74 611.016 li
1099.8 612.18 1101.58 613.254 1102.86 613.856 cv
cp
f
846.023 594.306 mo
847.894 594.703 849.084 596.539 848.688 598.408 cv
848.289 600.275 846.451 601.467 844.584 601.068 cv
842.717 600.671 841.525 598.835 841.924 596.968 cv
842.32 595.101 844.155 593.907 846.023 594.306 cv
cp
839.486 597.869 mo
839.529 601.604 841.043 605.115 844.695 605.893 cv
848.35 606.67 851.941 604.338 852.719 600.683 cv
853.498 597.031 850.723 594.566 847.51 592.659 cv
845.705 591.587 842.383 590.142 840.932 591.085 cv
839.478 592.027 839.459 595.382 839.486 597.869 cv
cp
f
732.565 611.164 mo
730.657 611.164 729.108 609.617 729.108 607.707 cv
729.108 605.795 730.657 604.248 732.565 604.248 cv
734.476 604.248 736.022 605.795 736.022 607.707 cv
736.022 609.617 734.476 611.164 732.565 611.164 cv
cp
732.013 599.017 mo
727.815 599.017 724.409 602.422 724.409 606.621 cv
724.409 610.818 727.815 614.223 732.013 614.223 cv
736.214 614.223 739.619 610.818 739.619 606.621 cv
739.619 602.422 736.214 599.017 732.013 599.017 cv
cp
f
860.461 713.447 mo
862.369 713.447 863.92 714.996 863.92 716.906 cv
863.92 718.816 862.369 720.363 860.461 720.363 cv
858.551 720.363 857.002 718.816 857.002 716.906 cv
857.002 714.996 858.551 713.447 860.461 713.447 cv
cp
859.908 723.424 mo
864.108 723.424 867.514 720.019 867.514 715.822 cv
867.514 711.621 864.108 708.217 859.908 708.217 cv
855.709 708.217 852.306 711.621 852.306 715.822 cv
852.306 720.019 855.709 723.424 859.908 723.424 cv
cp
f
916.17 732.324 mo
914.261 732.324 912.713 730.777 912.713 728.865 cv
912.713 726.955 914.261 725.408 916.17 725.408 cv
918.08 725.408 919.629 726.955 919.629 728.865 cv
919.629 730.777 918.08 732.324 916.17 732.324 cv
cp
915.619 720.178 mo
911.42 720.178 908.015 723.582 908.015 727.779 cv
908.015 731.979 911.42 735.383 915.619 735.383 cv
919.82 735.383 923.225 731.979 923.225 727.779 cv
923.225 723.582 919.82 720.178 915.619 720.178 cv
cp
f
915.416 763.109 mo
913.508 763.109 911.959 761.563 911.959 759.652 cv
911.959 757.74 913.508 756.193 915.416 756.193 cv
917.328 756.193 918.875 757.74 918.875 759.652 cv
918.875 761.563 917.328 763.109 915.416 763.109 cv
cp
914.863 750.963 mo
910.666 750.963 907.262 754.367 907.262 758.566 cv
907.262 762.764 910.666 766.168 914.863 766.168 cv
919.066 766.168 922.47 762.764 922.47 758.566 cv
922.47 754.367 919.066 750.963 914.863 750.963 cv
cp
f
911.959 791.248 mo
911.959 789.338 913.508 787.791 915.416 787.791 cv
917.328 787.791 918.875 789.338 918.875 791.248 cv
918.875 793.158 917.328 794.705 915.416 794.705 cv
913.508 794.705 911.959 793.158 911.959 791.248 cv
cp
922.47 790.162 mo
922.47 785.963 919.066 782.559 914.863 782.559 cv
910.666 782.559 907.262 785.963 907.262 790.162 cv
907.262 794.361 910.666 797.766 914.863 797.766 cv
919.066 797.766 922.47 794.361 922.47 790.162 cv
cp
f
911.959 821.217 mo
911.959 819.305 913.508 817.758 915.416 817.758 cv
917.328 817.758 918.875 819.305 918.875 821.217 cv
918.875 823.125 917.328 824.674 915.416 824.674 cv
913.508 824.674 911.959 823.125 911.959 821.217 cv
cp
922.47 820.129 mo
922.47 815.93 919.066 812.525 914.863 812.525 cv
910.666 812.525 907.262 815.93 907.262 820.129 cv
907.262 824.328 910.666 827.732 914.863 827.732 cv
919.066 827.732 922.47 824.328 922.47 820.129 cv
cp
f
918.875 852.012 mo
918.875 853.922 917.328 855.469 915.416 855.469 cv
913.508 855.469 911.959 853.922 911.959 852.012 cv
911.959 850.1 913.508 848.553 915.416 848.553 cv
917.328 848.553 918.875 850.1 918.875 852.012 cv
cp
907.262 850.926 mo
907.262 855.123 910.666 858.527 914.863 858.527 cv
919.066 858.527 922.47 855.123 922.47 850.926 cv
922.47 846.727 919.066 843.322 914.863 843.322 cv
910.666 843.322 907.262 846.727 907.262 850.926 cv
cp
f
887.588 852.012 mo
887.588 853.922 886.041 855.469 884.129 855.469 cv
882.221 855.469 880.672 853.922 880.672 852.012 cv
880.672 850.1 882.221 848.553 884.129 848.553 cv
886.041 848.553 887.588 850.1 887.588 852.012 cv
cp
875.975 850.926 mo
875.975 855.123 879.378 858.527 883.578 858.527 cv
887.779 858.527 891.184 855.123 891.184 850.926 cv
891.184 846.727 887.779 843.322 883.578 843.322 cv
879.378 843.322 875.975 846.727 875.975 850.926 cv
cp
f
809.822 852.451 mo
807.914 852.451 806.365 850.902 806.365 848.994 cv
806.365 847.084 807.914 845.535 809.822 845.535 cv
811.732 845.535 813.283 847.084 813.283 848.994 cv
813.283 850.902 811.732 852.451 809.822 852.451 cv
cp
809.271 840.305 mo
805.072 840.305 801.666 843.709 801.666 847.908 cv
801.666 852.109 805.072 855.512 809.271 855.512 cv
813.472 855.512 816.877 852.109 816.877 847.908 cv
816.877 843.709 813.472 840.305 809.271 840.305 cv
cp
f
851.674 851.471 mo
851.674 849.559 853.223 848.014 855.132 848.014 cv
857.041 848.014 858.592 849.559 858.592 851.471 cv
858.592 853.379 857.041 854.928 855.132 854.928 cv
853.223 854.928 851.674 853.379 851.674 851.471 cv
cp
854.58 857.986 mo
858.78 857.986 862.185 854.584 862.185 850.383 cv
862.185 846.185 858.78 842.781 854.58 842.781 cv
850.381 842.781 846.975 846.185 846.975 850.383 cv
846.975 854.584 850.381 857.986 854.58 857.986 cv
cp
f
790.197 848.553 mo
790.197 850.465 788.646 852.012 786.736 852.012 cv
784.827 852.012 783.279 850.465 783.279 848.553 cv
783.279 846.641 784.827 845.096 786.736 845.096 cv
788.646 845.096 790.197 846.641 790.197 848.553 cv
cp
778.58 847.467 mo
778.58 851.666 781.986 855.072 786.185 855.072 cv
790.385 855.072 793.791 851.666 793.791 847.467 cv
793.791 843.269 790.385 839.861 786.185 839.861 cv
781.986 839.861 778.58 843.269 778.58 847.467 cv
cp
f
731.364 845.639 mo
733.272 845.639 734.821 847.188 734.821 849.096 cv
734.821 851.008 733.272 852.555 731.364 852.555 cv
729.453 852.555 727.907 851.008 727.907 849.096 cv
727.907 847.188 729.453 845.639 731.364 845.639 cv
cp
730.811 855.615 mo
735.013 855.615 738.418 852.211 738.418 848.012 cv
738.418 843.813 735.013 840.408 730.811 840.408 cv
726.613 840.408 723.21 843.813 723.21 848.012 cv
723.21 852.211 726.613 855.615 730.811 855.615 cv
cp
f
911.406 606.559 mo
911.406 604.646 912.957 603.1 914.863 603.1 cv
916.775 603.1 918.325 604.646 918.325 606.559 cv
918.325 608.469 916.775 610.016 914.863 610.016 cv
912.957 610.016 911.406 608.469 911.406 606.559 cv
cp
921.918 605.473 mo
921.918 601.273 918.514 597.869 914.313 597.869 cv
910.113 597.869 906.709 601.273 906.709 605.473 cv
906.709 609.672 910.113 613.074 914.313 613.074 cv
918.514 613.074 921.918 609.672 921.918 605.473 cv
cp
f
906.91 650.732 mo
906.91 652.643 905.361 654.19 903.45 654.19 cv
901.543 654.19 899.992 652.643 899.992 650.732 cv
899.992 648.822 901.543 647.275 903.45 647.275 cv
905.361 647.275 906.91 648.822 906.91 650.732 cv
cp
902.9 642.043 mo
898.699 642.043 895.295 645.445 895.295 649.644 cv
895.295 653.846 898.699 657.25 902.9 657.25 cv
907.102 657.25 910.505 653.846 910.505 649.644 cv
910.505 645.445 907.102 642.043 902.9 642.043 cv
cp
f
788.842 608.01 mo
788.842 606.102 790.391 604.553 792.3 604.553 cv
794.209 604.553 795.759 606.102 795.759 608.01 cv
795.759 609.922 794.209 611.469 792.3 611.469 cv
790.391 611.469 788.842 609.922 788.842 608.01 cv
cp
799.353 606.926 mo
799.353 602.725 795.949 599.322 791.748 599.322 cv
787.549 599.322 784.144 602.725 784.144 606.926 cv
784.144 611.125 787.549 614.527 791.748 614.527 cv
795.949 614.527 799.353 611.125 799.353 606.926 cv
cp
f
1029.12 610.83 mo
1023.86 610.83 1019.61 606.572 1019.61 601.322 cv
1019.61 596.066 1023.86 591.812 1029.12 591.812 cv
1034.37 591.812 1038.63 596.066 1038.63 601.322 cv
1038.63 606.572 1034.37 610.83 1029.12 610.83 cv
1 1 1 rgb
f
996.469 605.902 mo
991.218 605.902 986.96 601.644 986.96 596.394 cv
986.96 591.14 991.218 586.884 996.469 586.884 cv
1001.72 586.884 1005.98 591.14 1005.98 596.394 cv
1005.98 601.644 1001.72 605.902 996.469 605.902 cv
f
1051.05 633.41 mo
1045.8 633.41 1041.54 629.154 1041.54 623.9 cv
1041.54 618.65 1045.8 614.393 1051.05 614.393 cv
1056.3 614.393 1060.56 618.65 1060.56 623.9 cv
1060.56 629.154 1056.3 633.41 1051.05 633.41 cv
f
640.386 869.449 mo
635.13 869.449 630.877 865.191 630.877 859.94 cv
630.877 854.688 635.13 850.43 640.386 850.43 cv
645.636 850.43 649.894 854.688 649.894 859.94 cv
649.894 865.191 645.636 869.449 640.386 869.449 cv
f
600.816 872.141 mo
595.562 872.141 591.308 867.883 591.308 862.631 cv
591.308 857.379 595.562 853.123 600.816 853.123 cv
606.068 853.123 610.325 857.379 610.325 862.631 cv
610.325 867.883 606.068 872.141 600.816 872.141 cv
f
1115.6 710.203 mo
1110.35 710.203 1106.09 705.943 1106.09 700.693 cv
1106.09 695.44 1110.35 691.185 1115.6 691.185 cv
1120.85 691.185 1125.11 695.44 1125.11 700.693 cv
1125.11 705.943 1120.85 710.203 1115.6 710.203 cv
f
897.877 814.223 mo
892.625 814.223 888.369 809.967 888.369 804.713 cv
888.369 799.461 892.625 795.205 897.877 795.205 cv
903.13 795.205 907.387 799.461 907.387 804.713 cv
907.387 809.967 903.13 814.223 897.877 814.223 cv
f
1079.49 619.291 mo
1074.24 619.291 1069.98 615.035 1069.98 609.783 cv
1069.98 604.529 1074.24 600.273 1079.49 600.273 cv
1084.75 600.273 1089 604.529 1089 609.783 cv
1089 615.035 1084.75 619.291 1079.49 619.291 cv
f
834.884 597.681 mo
829.629 597.681 825.375 593.423 825.375 588.171 cv
825.375 582.919 829.629 578.663 834.884 578.663 cv
840.134 578.663 844.393 582.919 844.393 588.171 cv
844.393 593.423 840.134 597.681 834.884 597.681 cv
f
935.136 272.159 mo
936.474 273.523 936.452 275.712 935.088 277.048 cv
933.725 278.385 931.533 278.361 930.198 277 cv
928.862 275.634 928.886 273.445 930.25 272.108 cv
931.61 270.771 933.803 270.794 935.136 272.159 cv
cp
931.165 267.395 mo
929.935 268.4 928.767 270.224 928.112 271.513 cv
926.421 274.847 925.397 278.412 928.012 281.08 cv
930.625 283.75 934.909 283.794 937.577 281.181 cv
940.244 278.564 939.644 274.79 937.679 271.613 cv
936.821 270.23 935.746 268.546 934.621 267.54 cv
934.621 257.973 li
925.685 250.048 li
923.392 252.634 li
931.165 259.526 li
931.165 267.395 li
cp
0 .862745 1 rgb
f
689.028 409.992 mo
687.117 409.992 685.571 408.443 685.571 406.535 cv
685.571 404.623 687.117 403.076 689.028 403.076 cv
690.938 403.076 692.487 404.623 692.487 406.535 cv
692.487 408.443 690.938 409.992 689.028 409.992 cv
cp
921.511 286.125 mo
909.694 274.309 li
810.006 274.309 li
781.479 302.835 li
733.957 302.835 li
701.66 333.794 li
701.66 392.322 li
692.636 400.334 li
691.102 400.281 689.192 400.725 687.918 401.156 cv
684.378 402.355 681.151 404.184 681.151 407.92 cv
681.151 411.656 684.18 414.684 687.918 414.684 cv
691.652 414.684 693.864 411.566 694.682 407.92 cv
695.063 406.225 695.494 404.121 695.31 402.582 cv
705.117 393.875 li
705.117 335.271 li
735.347 306.294 li
782.91 306.294 li
811.436 277.766 li
908.265 277.766 li
920.078 289.582 li
939.712 289.582 li
946.438 282.183 li
946.438 251.341 li
942.979 251.341 li
942.979 280.845 li
938.182 286.125 li
921.511 286.125 li
cp
f
720.686 372.47 mo
722.021 373.835 721.999 376.023 720.635 377.36 cv
719.271 378.697 717.084 378.673 715.746 377.308 cv
714.408 375.945 714.433 373.755 715.795 372.418 cv
717.161 371.082 719.349 371.106 720.686 372.47 cv
cp
919.481 293.327 mo
906.803 280.938 li
812.862 280.938 li
786.352 308.887 li
739.409 308.887 li
716.786 331.511 li
716.786 367.382 li
717.161 367.382 li
715.772 368.263 714.392 370.378 713.658 371.826 cv
711.967 375.156 710.944 378.72 713.559 381.391 cv
716.172 384.059 720.456 384.106 723.128 381.491 cv
725.794 378.877 725.19 375.1 723.226 371.923 cv
722.215 370.292 720.903 368.242 719.56 367.382 cv
720.243 367.382 li
720.243 332.943 li
740.841 312.345 li
787.837 312.345 li
814.348 284.396 li
905.394 284.396 li
918.074 296.785 li
943.408 296.785 li
953.066 287.128 li
953.066 251.341 li
949.608 251.341 li
949.608 285.696 li
941.977 293.327 li
919.481 293.327 li
cp
f
751.805 372.47 mo
753.141 373.835 753.119 376.023 751.755 377.36 cv
750.391 378.697 748.202 378.673 746.865 377.308 cv
745.528 375.945 745.552 373.755 746.915 372.418 cv
748.278 371.082 750.468 371.106 751.805 372.47 cv
cp
916.335 298.513 mo
904.232 286.121 li
814.896 286.415 li
747.332 355.148 li
747.332 367.382 li
748.282 367.382 li
746.893 368.263 745.513 370.378 744.778 371.826 cv
743.087 375.156 742.063 378.72 744.679 381.391 cv
747.291 384.059 751.575 384.106 754.246 381.491 cv
756.914 378.877 756.31 375.1 754.345 371.923 cv
753.334 370.292 752.022 368.242 750.681 367.382 cv
750.789 367.382 li
750.789 356.563 li
816.351 289.865 li
902.78 289.585 li
914.879 301.971 li
945.401 301.971 li
958.83 289.17 li
958.83 251.341 li
955.373 251.341 li
955.373 287.688 li
944.017 298.513 li
916.335 298.513 li
cp
f
783.318 344.302 mo
784.656 345.665 784.632 347.855 783.269 349.191 cv
781.908 350.529 779.716 350.504 778.383 349.14 cv
777.045 347.777 777.066 345.586 778.431 344.251 cv
779.793 342.914 781.986 342.937 783.318 344.302 cv
cp
911.151 304.85 mo
899.914 293.327 li
818.502 293.327 li
778.737 333.533 li
778.737 340.106 li
777.741 341.14 776.839 342.583 776.293 343.658 cv
774.602 346.99 773.58 350.553 776.193 353.223 cv
778.809 355.891 783.093 355.938 785.761 353.324 cv
788.429 350.707 787.827 346.934 785.858 343.755 cv
784.849 342.124 783.536 340.072 782.194 339.213 cv
782.194 334.955 li
819.943 296.785 li
898.456 296.785 li
909.693 308.309 li
949.429 308.309 li
964.882 293.787 li
964.882 251.341 li
961.423 251.341 li
961.423 292.29 li
948.059 304.85 li
911.151 304.85 li
cp
f
841.777 342.573 mo
843.114 343.937 843.094 346.125 841.729 347.462 cv
840.366 348.799 838.174 348.776 836.84 347.412 cv
835.503 346.047 835.525 343.858 836.891 342.522 cv
838.252 341.184 840.443 341.208 841.777 342.573 cv
cp
909.694 310.329 mo
897.587 298.22 li
863.297 298.521 li
837.81 324.484 li
837.81 337.703 li
837.946 337.703 li
836.665 338.678 835.432 340.589 834.753 341.927 cv
833.061 345.261 832.037 348.825 834.652 351.494 cv
837.265 354.164 841.551 354.208 844.218 351.595 cv
846.886 348.978 846.284 345.205 844.319 342.026 cv
843.385 340.52 842.193 338.656 840.96 337.703 cv
841.267 337.703 li
841.267 325.898 li
864.759 301.964 li
896.169 301.691 li
908.265 313.787 li
952.044 313.787 li
970.643 295.494 li
970.643 251.341 li
967.184 251.341 li
967.184 294.044 li
950.629 310.329 li
909.694 310.329 li
cp
f
923.736 328.626 mo
922.385 329.978 920.197 329.978 918.847 328.626 cv
917.496 327.276 917.496 325.088 918.847 323.738 cv
920.197 322.386 922.385 322.386 923.736 323.738 cv
925.087 325.088 925.087 327.276 923.736 328.626 cv
cp
927.261 323.46 mo
926.31 322.697 925.186 322.028 924.307 321.593 cv
920.96 319.937 917.384 318.953 914.741 321.593 cv
912.1 324.236 912.1 328.516 914.741 331.16 cv
917.384 333.8 921.149 333.159 924.307 331.16 cv
926.143 329.998 928.511 328.447 929.08 326.918 cv
948.287 326.918 li
977.271 298.96 li
977.271 251.341 li
973.813 251.341 li
973.813 297.491 li
946.894 323.46 li
927.261 323.46 li
cp
f
889.513 332.375 mo
887.602 332.339 886.082 330.765 886.116 328.857 cv
886.149 326.947 887.724 325.425 889.635 325.46 cv
891.543 325.494 893.065 327.067 893.028 328.978 cv
892.996 330.886 891.422 332.408 889.513 332.375 cv
cp
900.686 335.973 mo
895.703 331.703 li
895.629 330.377 895.3 328.931 894.97 327.898 cv
893.836 324.341 892.06 321.083 888.324 321.018 cv
884.587 320.953 881.507 323.927 881.44 327.664 cv
881.379 331.398 884.453 333.662 888.089 334.543 cv
890.14 335.043 892.802 335.639 894.323 335.071 cv
899.407 339.431 li
946.589 339.431 li
983.899 301.236 li
983.899 251.341 li
980.441 251.341 li
980.441 299.828 li
945.135 335.973 li
900.686 335.973 li
cp
f
913.866 260.169 mo
915.776 260.169 917.324 261.802 917.324 263.813 cv
917.324 265.826 915.776 267.457 913.866 267.457 cv
911.958 267.457 910.409 265.826 910.409 263.813 cv
910.409 261.802 911.958 260.169 913.866 260.169 cv
cp
908.491 264.986 mo
909.685 268.714 911.519 272.115 915.254 272.115 cv
918.987 272.115 922.018 268.921 922.018 264.986 cv
922.018 261.047 918.9 258.716 915.254 257.855 cv
913.593 257.461 911.537 257.016 910.009 257.182 cv
902.379 250.076 li
900.021 252.605 li
907.678 259.737 li
907.558 261.394 908.033 263.567 908.491 264.986 cv
cp
f
907.453 245.304 mo
907.453 250.586 903.168 254.869 897.887 254.869 cv
892.603 254.869 888.321 250.586 888.321 245.304 cv
888.321 240.021 892.603 235.738 897.887 235.738 cv
903.168 235.738 907.453 240.021 907.453 245.304 cv
cp
1 1 1 rgb
f
491.955 285.448 mo
493.293 286.812 493.271 289.001 491.906 290.337 cv
490.543 291.674 488.352 291.65 487.018 290.289 cv
485.682 288.923 485.705 286.734 487.068 285.397 cv
488.43 284.06 490.621 284.083 491.955 285.448 cv
cp
487.984 280.684 mo
486.754 281.689 485.586 283.513 484.932 284.802 cv
483.24 288.136 482.217 291.701 484.83 294.369 cv
487.443 297.04 491.728 297.083 494.396 294.47 cv
497.064 291.853 496.463 288.08 494.498 284.902 cv
493.641 283.519 492.566 281.835 491.441 280.83 cv
491.441 271.262 li
482.504 263.337 li
480.211 265.923 li
487.984 272.815 li
487.984 280.684 li
cp
0 .862745 1 rgb
f
480.555 341.915 mo
479.203 343.267 477.016 343.267 475.666 341.915 cv
474.314 340.565 474.314 338.377 475.666 337.027 cv
477.016 335.675 479.203 335.675 480.555 337.027 cv
481.906 338.377 481.906 340.565 480.555 341.915 cv
cp
484.08 336.75 mo
483.129 335.986 482.006 335.317 481.125 334.882 cv
477.779 333.226 474.203 332.242 471.56 334.882 cv
468.918 337.525 468.918 341.806 471.56 344.449 cv
474.203 347.089 477.969 346.448 481.125 344.449 cv
482.961 343.287 485.33 341.736 485.9 340.207 cv
505.107 340.207 li
534.09 312.249 li
534.09 264.63 li
530.631 264.63 li
530.631 310.78 li
503.713 336.75 li
484.08 336.75 li
cp
f
556.068 396.001 mo
557.406 397.365 557.383 399.553 556.018 400.89 cv
554.654 402.227 552.465 402.204 551.129 400.839 cv
549.795 399.476 549.815 397.287 551.18 395.951 cv
552.543 394.613 554.73 394.636 556.068 396.001 cv
cp
552.242 391.125 mo
550.959 392.099 549.723 394.014 549.041 395.355 cv
547.354 398.689 546.326 402.253 548.943 404.922 cv
551.557 407.591 555.84 407.636 558.51 405.023 cv
561.178 402.408 560.572 398.631 558.607 395.454 cv
557.789 394.13 556.771 392.528 555.699 391.511 cv
555.699 390.037 li
606.99 339.201 li
606.99 264.63 li
603.531 264.63 li
603.531 337.759 li
552.242 388.594 li
552.242 391.125 li
cp
f
537.027 402.656 mo
535.115 402.656 533.57 401.11 533.57 399.199 cv
533.57 397.288 535.115 395.741 537.027 395.741 cv
538.94 395.741 540.484 397.288 540.484 399.199 cv
540.484 401.11 538.94 402.656 537.027 402.656 cv
cp
535.916 393.823 mo
532.377 395.018 529.148 396.849 529.148 400.585 cv
529.148 404.322 532.178 407.35 535.916 407.35 cv
539.65 407.35 541.863 404.232 542.68 400.585 cv
543.082 398.79 543.557 396.525 543.281 394.972 cv
601.803 337.016 li
601.803 264.63 li
598.346 264.63 li
598.346 335.575 li
540.363 392.996 li
538.881 392.999 537.117 393.415 535.916 393.823 cv
cp
f
546.705 323.665 mo
548.043 325.029 548.019 327.219 546.654 328.554 cv
545.291 329.892 543.102 329.869 541.766 328.503 cv
540.428 327.14 540.451 324.95 541.815 323.614 cv
543.18 322.277 545.367 322.3 546.705 323.665 cv
cp
539.678 323.021 mo
537.986 326.353 536.963 329.917 539.576 332.586 cv
542.19 335.257 546.475 335.302 549.146 332.687 cv
551.813 330.074 551.209 326.297 549.244 323.119 cv
548.315 321.621 547.133 319.768 545.904 318.809 cv
545.904 264.63 li
542.447 264.63 li
542.447 319.15 li
541.324 320.187 540.281 321.831 539.678 323.021 cv
cp
f
560.256 285.397 mo
561.621 284.06 563.807 284.083 565.144 285.448 cv
566.48 286.812 566.459 289.001 565.094 290.337 cv
563.73 291.674 561.541 291.65 560.205 290.289 cv
558.871 288.923 558.893 286.734 560.256 285.397 cv
cp
567.586 294.47 mo
570.254 291.853 569.648 288.08 567.684 284.902 cv
566.828 283.519 565.756 281.835 564.631 280.83 cv
564.631 264.63 li
561.174 264.63 li
561.174 280.682 li
559.941 281.686 558.771 283.512 558.117 284.802 cv
556.43 288.136 555.402 291.701 558.019 294.369 cv
560.633 297.04 564.916 297.083 567.586 294.47 cv
cp
f
473.793 381.07 mo
475.119 379.695 477.307 379.658 478.682 380.985 cv
480.055 382.31 480.094 384.498 478.766 385.875 cv
477.439 387.25 475.25 387.286 473.875 385.958 cv
472.506 384.631 472.465 382.443 473.793 381.07 cv
cp
473.342 388.113 mo
476.719 389.71 480.313 390.632 482.908 387.945 cv
485.502 385.257 485.428 380.974 482.742 378.378 cv
480.055 375.783 476.297 376.492 473.176 378.546 cv
471.581 379.594 469.581 380.954 468.752 382.312 cv
460.758 382.312 li
460.758 385.769 li
469.688 385.769 li
469.688 385.733 li
470.752 386.714 472.24 387.59 473.342 388.113 cv
cp
f
493.82 382.113 mo
493.82 380.203 495.365 378.655 497.277 378.655 cv
499.184 378.655 500.734 380.203 500.734 382.113 cv
500.734 384.022 499.184 385.57 497.277 385.57 cv
495.365 385.57 493.82 384.022 493.82 382.113 cv
cp
503.793 382.665 mo
503.793 378.462 500.391 375.058 496.189 375.058 cv
491.992 375.058 488.586 378.462 488.586 382.665 cv
488.586 386.864 491.992 390.267 496.189 390.267 cv
500.391 390.267 503.793 386.864 503.793 382.665 cv
cp
f
619.996 273.902 mo
621.904 273.902 623.453 275.451 623.453 277.362 cv
623.453 279.27 621.904 280.82 619.996 280.82 cv
618.086 280.82 616.539 279.27 616.539 277.362 cv
616.539 275.451 618.086 273.902 619.996 273.902 cv
cp
618.908 285.517 mo
623.109 285.517 626.514 282.113 626.514 277.914 cv
626.514 273.713 623.109 270.308 618.908 270.308 cv
614.709 270.308 611.305 273.713 611.305 277.914 cv
611.305 282.113 614.709 285.517 618.908 285.517 cv
cp
f
619.996 311.827 mo
621.904 311.827 623.453 313.376 623.453 315.286 cv
623.453 317.195 621.904 318.744 619.996 318.744 cv
618.086 318.744 616.539 317.195 616.539 315.286 cv
616.539 313.376 618.086 311.827 619.996 311.827 cv
cp
618.908 323.443 mo
623.109 323.443 626.514 320.037 626.514 315.837 cv
626.514 311.637 623.109 308.232 618.908 308.232 cv
614.709 308.232 611.305 311.637 611.305 315.837 cv
611.305 320.037 614.709 323.443 618.908 323.443 cv
cp
f
248.964 962.644 mo
250.314 963.994 250.314 966.182 248.964 967.533 cv
247.613 968.885 245.426 968.885 244.076 967.533 cv
242.724 966.182 242.724 963.994 244.076 962.644 cv
245.426 961.293 247.613 961.293 248.964 962.644 cv
cp
244.115 823.803 mo
242.763 822.453 242.763 820.266 244.115 818.914 cv
245.466 817.563 247.654 817.563 249.005 818.914 cv
250.355 820.266 250.355 822.453 249.005 823.803 cv
247.654 825.154 245.466 825.154 244.115 823.803 cv
cp
251.537 824.373 mo
253.539 821.217 254.178 817.451 251.537 814.809 cv
248.896 812.168 244.613 812.168 241.97 814.809 cv
239.331 817.451 240.314 821.027 241.97 824.373 cv
242.623 825.693 243.802 827.568 245.044 828.574 cv
245.044 957.842 li
243.789 958.84 242.591 960.738 241.931 962.072 cv
240.277 965.418 239.29 968.996 241.931 971.639 cv
244.574 974.279 248.855 974.279 251.496 971.639 cv
254.14 968.996 253.499 965.231 251.496 962.072 cv
250.652 960.738 249.601 959.123 248.501 958.119 cv
248.501 828.361 li
249.615 827.363 250.681 825.725 251.537 824.373 cv
cp
f
348.02 312.575 mo
349.372 311.223 351.56 311.223 352.909 312.575 cv
354.261 313.922 354.261 316.112 352.909 317.463 cv
351.56 318.813 349.372 318.813 348.02 317.463 cv
346.669 316.112 346.669 313.922 348.02 312.575 cv
cp
348.938 449.121 mo
348.938 427.092 li
348.938 426.082 348.497 425.12 347.726 424.463 cv
332.936 411.844 li
332.936 341.165 li
350.298 323.881 li
350.601 323.581 350.824 323.235 350.992 322.87 cv
352.589 322.45 354.228 319.952 355.442 318.034 cv
357.444 314.877 358.083 311.112 355.442 308.467 cv
352.803 305.827 348.519 305.827 345.876 308.467 cv
343.235 311.112 344.221 314.686 345.876 318.034 cv
345.945 318.172 346.02 318.319 346.101 318.467 cv
345.859 318.612 345.627 318.776 345.419 318.983 cv
327.04 337.278 li
326.39 337.926 326.02 338.807 326.02 339.729 cv
326.02 413.438 li
326.02 414.45 326.466 415.413 327.235 416.069 cv
342.024 428.69 li
342.024 449.121 li
342.024 451.033 343.571 452.58 345.481 452.58 cv
347.392 452.58 348.938 451.033 348.938 449.121 cv
cp
f
327.667 317.463 mo
326.315 316.112 326.315 313.922 327.667 312.575 cv
329.017 311.223 331.204 311.223 332.556 312.575 cv
333.905 313.922 333.905 316.112 332.556 317.463 cv
331.204 318.813 329.017 318.813 327.667 317.463 cv
cp
333.524 452.58 mo
335.431 452.58 336.981 451.033 336.981 449.121 cv
336.981 433.576 li
336.981 432.67 336.626 431.799 335.989 431.154 cv
321.276 416.172 li
321.276 337.487 li
332.708 325.303 li
333.84 324.098 333.936 322.292 333.033 320.981 cv
333.783 320.069 334.487 318.981 335.087 318.034 cv
337.089 314.877 337.727 311.112 335.087 308.467 cv
334.632 308.012 334.124 307.639 333.588 307.342 cv
343.747 295.93 li
341.163 293.629 li
329.694 306.516 li
328.172 306.653 326.688 307.303 325.522 308.467 cv
322.88 311.112 323.866 314.686 325.522 318.034 cv
325.946 318.893 326.595 319.985 327.337 320.922 cv
315.299 333.756 li
314.697 334.399 314.361 335.243 314.361 336.12 cv
314.361 417.585 li
314.361 418.493 314.717 419.36 315.352 420.008 cv
330.065 434.99 li
330.065 449.121 li
330.065 451.033 331.612 452.58 333.524 452.58 cv
cp
f
306.037 316.598 mo
304.688 315.249 304.688 313.061 306.037 311.71 cv
307.387 310.358 309.576 310.358 310.926 311.71 cv
312.275 313.061 312.275 315.249 310.926 316.598 cv
309.576 317.95 307.387 317.95 306.037 316.598 cv
cp
316.955 445.677 mo
316.955 438.328 li
316.955 437.322 316.518 436.369 315.756 435.713 cv
305.719 427.059 li
305.719 336.026 li
308.23 334.661 li
309.127 334.178 309.764 333.319 309.969 332.325 cv
311.941 322.774 li
312.142 321.809 311.918 320.864 311.404 320.118 cv
312.155 319.206 312.859 318.118 313.459 317.17 cv
315.133 314.53 315.847 311.469 314.495 308.991 cv
316.5 297.229 li
313.09 296.649 li
311.456 306.227 li
308.967 305.104 305.939 305.557 303.893 307.604 cv
301.252 310.247 302.236 313.823 303.893 317.17 cv
304.32 318.038 304.977 319.143 305.729 320.086 cv
305.465 320.461 305.27 320.895 305.172 321.374 cv
303.521 329.348 li
300.611 330.926 li
299.498 331.532 298.803 332.7 298.803 333.965 cv
298.803 428.645 li
298.803 429.652 299.24 430.607 300.002 431.262 cv
310.039 439.918 li
310.039 445.677 li
310.039 447.587 311.588 449.134 313.498 449.134 cv
315.408 449.134 316.955 447.587 316.955 445.677 cv
cp
f
288.07 326.77 mo
286.721 325.418 286.721 323.231 288.07 321.879 cv
289.42 320.53 291.609 320.53 292.961 321.879 cv
294.31 323.231 294.31 325.418 292.961 326.77 cv
291.609 328.12 289.42 328.12 288.07 326.77 cv
cp
294.227 445.677 mo
294.227 331.622 li
294.227 330.991 294.044 330.407 293.748 329.897 cv
294.383 329.075 294.977 328.155 295.494 327.34 cv
297.492 324.182 298.135 320.417 295.494 317.774 cv
292.852 315.133 288.566 315.133 285.928 317.774 cv
283.285 320.417 284.27 323.993 285.928 327.34 cv
286.336 328.168 286.951 329.217 287.661 330.131 cv
287.443 330.585 287.31 331.086 287.31 331.622 cv
287.31 445.677 li
287.31 447.587 288.857 449.134 290.768 449.134 cv
292.676 449.134 294.227 447.587 294.227 445.677 cv
cp
f
271.461 317.463 mo
270.111 316.112 270.111 313.922 271.461 312.575 cv
272.813 311.223 275 311.223 276.35 312.575 cv
277.701 313.922 277.701 316.112 276.35 317.463 cv
275 318.813 272.813 318.813 271.461 317.463 cv
cp
277.617 450.576 mo
277.617 325.168 li
277.617 323.836 276.852 322.69 275.744 322.112 cv
276.896 321.124 278.003 319.426 278.885 318.034 cv
280.416 315.62 281.144 312.852 280.223 310.499 cv
284.539 305.034 li
284.539 281.667 li
281.082 281.667 li
281.082 303.831 li
278.001 307.731 li
275.36 305.862 271.684 306.102 269.316 308.467 cv
266.678 311.112 267.662 314.686 269.316 318.034 cv
269.966 319.348 271.139 321.211 272.375 322.221 cv
271.375 322.829 270.701 323.917 270.701 325.168 cv
270.701 450.576 li
270.701 452.484 272.25 454.033 274.16 454.033 cv
276.068 454.033 277.617 452.484 277.617 450.576 cv
cp
f
254.986 329.186 mo
254.824 327.286 256.236 325.61 258.137 325.448 cv
260.041 325.286 261.713 326.698 261.875 328.604 cv
262.039 330.508 260.627 332.18 258.723 332.342 cv
256.82 332.5 255.146 331.092 254.986 329.186 cv
cp
263.594 454.033 mo
265.502 454.033 267.051 452.484 267.051 450.576 cv
267.051 335.081 li
267.051 333.686 266.221 332.493 265.032 331.944 cv
264.99 330.444 264.429 328.567 263.945 327.036 cv
262.938 323.838 260.847 321.168 257.742 320.877 cv
257.742 298.094 li
254.283 298.094 li
254.283 321.504 li
254.303 321.504 li
251.831 322.682 250.22 325.29 250.465 328.176 cv
250.781 331.903 254.15 333.456 257.779 334.346 cv
258.453 334.512 259.299 334.668 260.169 334.756 cv
260.159 334.864 260.137 334.969 260.137 335.081 cv
260.137 450.576 li
260.137 452.484 261.682 454.033 263.594 454.033 cv
cp
f
234.471 317.116 mo
233.121 315.764 233.121 313.577 234.471 312.225 cv
235.82 310.874 238.01 310.874 239.361 312.225 cv
240.709 313.577 240.709 315.764 239.361 317.116 cv
238.01 318.465 235.82 318.465 234.471 317.116 cv
cp
256.012 449.121 mo
256.012 352.571 li
256.012 351.624 255.621 350.713 254.934 350.059 cv
240.453 336.36 li
240.453 322.936 li
240.453 322.127 240.163 321.393 239.696 320.803 cv
240.5 319.86 241.256 318.694 241.893 317.686 cv
243.893 314.528 244.535 310.764 241.893 308.12 cv
239.25 305.479 234.969 305.479 232.328 308.12 cv
229.686 310.764 230.672 314.34 232.328 317.686 cv
232.784 318.61 233.498 319.805 234.311 320.784 cv
233.835 321.377 233.539 322.118 233.539 322.936 cv
233.539 337.85 li
233.539 338.801 233.93 339.71 234.619 340.362 cv
249.098 354.061 li
249.098 449.121 li
249.098 451.033 250.646 452.58 252.555 452.58 cv
254.465 452.58 256.012 451.033 256.012 449.121 cv
cp
f
212.412 314.426 mo
212.25 312.526 213.662 310.852 215.563 310.69 cv
216.279 310.629 216.962 310.792 217.545 311.118 cv
217.545 311.348 li
217.877 311.348 li
218.662 311.918 219.212 312.799 219.301 313.842 cv
219.376 314.719 219.107 315.538 218.622 316.19 cv
218.561 316.266 218.499 316.34 218.445 316.42 cv
217.877 317.063 217.074 317.502 216.15 317.581 cv
214.246 317.741 212.574 316.331 212.412 314.426 cv
cp
244.775 452.58 mo
246.686 452.58 248.232 451.033 248.232 449.121 cv
248.232 359.756 li
248.232 358.772 247.811 357.832 247.074 357.174 cv
230.945 342.795 li
230.945 325.168 li
230.945 324.311 230.627 323.487 230.049 322.848 cv
223.873 316.02 li
223.393 315.491 222.785 315.143 222.138 314.983 cv
221.922 314.055 221.636 313.114 221.371 312.276 cv
221.263 311.932 221.138 311.596 221.004 311.266 cv
221.004 298.094 li
217.545 298.094 li
217.545 306.887 li
216.543 306.297 215.383 305.997 214.061 306.108 cv
210.34 306.424 207.576 309.696 207.893 313.418 cv
208.209 317.141 211.576 318.696 215.205 319.586 cv
216.064 319.799 217.201 319.995 218.313 320.053 cv
218.435 320.266 218.574 320.471 218.746 320.661 cv
224.029 326.502 li
224.029 344.346 li
224.029 345.332 224.449 346.27 225.188 346.93 cv
241.316 361.307 li
241.316 449.121 li
241.316 451.033 242.865 452.58 244.775 452.58 cv
cp
f
347.53 296.94 mo
342.247 296.94 337.962 292.659 337.962 287.374 cv
337.962 282.092 342.247 277.807 347.53 277.807 cv
352.811 277.807 357.096 282.092 357.096 287.374 cv
357.096 292.659 352.811 296.94 347.53 296.94 cv
cp
1 1 1 rgb
f
282.81 282.588 mo
277.527 282.588 273.244 278.307 273.244 273.02 cv
273.244 267.741 277.527 263.456 282.81 263.456 cv
288.094 263.456 292.377 267.741 292.377 273.02 cv
292.377 278.307 288.094 282.588 282.81 282.588 cv
cp
f
313.498 298.094 mo
308.215 298.094 303.932 293.811 303.932 288.528 cv
303.932 283.243 308.215 278.961 313.498 278.961 cv
318.779 278.961 323.064 283.243 323.064 288.528 cv
323.064 293.811 318.779 298.094 313.498 298.094 cv
cp
f
252.555 300.797 mo
247.271 300.797 242.988 296.516 242.988 291.233 cv
242.988 285.952 247.271 281.667 252.555 281.667 cv
257.838 281.667 262.121 285.952 262.121 291.233 cv
262.121 296.516 257.838 300.797 252.555 300.797 cv
cp
f
218.662 300.797 mo
213.379 300.797 209.096 296.516 209.096 291.233 cv
209.096 285.952 213.379 281.667 218.662 281.667 cv
223.945 281.667 228.227 285.952 228.227 291.233 cv
228.227 296.516 223.945 300.797 218.662 300.797 cv
cp
f
1058.84 998.731 mo
1060.19 997.381 1062.38 997.381 1063.73 998.731 cv
1065.08 1000.08 1065.08 1002.27 1063.73 1003.62 cv
1062.38 1004.97 1060.19 1004.97 1058.84 1003.62 cv
1057.49 1002.27 1057.49 1000.08 1058.84 998.731 cv
cp
919.996 1003.58 mo
918.647 1004.93 916.459 1004.93 915.107 1003.58 cv
913.757 1002.23 913.757 1000.04 915.107 998.69 cv
916.459 997.34 918.647 997.34 919.996 998.69 cv
921.349 1000.04 921.349 1002.23 919.996 1003.58 cv
cp
920.567 996.158 mo
917.411 994.156 913.645 993.518 911.002 996.158 cv
908.361 998.799 908.361 1003.08 911.002 1005.72 cv
913.645 1008.36 917.222 1007.38 920.567 1005.72 cv
921.888 1005.07 923.763 1003.89 924.768 1002.65 cv
1054.04 1002.65 li
1055.03 1003.91 1056.93 1005.1 1058.27 1005.76 cv
1061.61 1007.42 1065.19 1008.4 1067.83 1005.76 cv
1070.47 1003.12 1070.47 998.84 1067.83 996.199 cv
1065.19 993.555 1061.42 994.195 1058.27 996.199 cv
1056.93 997.043 1055.32 998.094 1054.31 999.193 cv
924.556 999.193 li
923.557 998.08 921.919 997.014 920.567 996.158 cv
cp
0 .862745 1 rgb
f
739.84 1019.62 mo
738.489 1020.97 736.301 1020.97 734.951 1019.62 cv
733.603 1018.27 733.603 1016.08 734.951 1014.73 cv
736.301 1013.38 738.489 1013.38 739.84 1014.73 cv
741.195 1016.08 741.195 1018.27 739.84 1019.62 cv
cp
744.644 1018.65 mo
752.863 1018.65 li
752.863 1015.2 li
744.367 1015.2 li
743.364 1014.1 741.746 1013.04 740.414 1012.2 cv
737.257 1010.2 733.489 1009.56 730.849 1012.2 cv
728.207 1014.84 728.203 1019.12 730.845 1021.77 cv
733.489 1024.41 737.064 1023.42 740.414 1021.77 cv
741.746 1021.11 743.646 1019.91 744.644 1018.65 cv
cp
f
692.215 1086.77 mo
690.86 1088.11 688.674 1088.11 687.326 1086.75 cv
685.981 1085.39 685.988 1083.21 687.343 1081.86 cv
688.696 1080.52 690.885 1080.52 692.232 1081.88 cv
693.58 1083.23 693.572 1085.42 692.215 1086.77 cv
cp
692.813 1079.35 mo
689.658 1077.33 685.897 1076.68 683.246 1079.32 cv
680.596 1081.95 680.578 1086.23 683.213 1088.88 cv
685.85 1091.53 689.426 1090.56 692.782 1088.91 cv
693.876 1088.38 695.352 1087.48 696.401 1086.48 cv
704.389 1086.48 li
704.389 1083.03 li
697.276 1083.03 li
696.419 1081.69 694.412 1080.37 692.813 1079.35 cv
cp
f
621.486 1080.62 mo
622.841 1079.27 625.029 1079.28 626.376 1080.64 cv
627.724 1081.99 627.716 1084.18 626.358 1085.53 cv
625.004 1086.87 622.817 1086.87 621.47 1085.51 cv
620.127 1084.15 620.133 1081.97 621.486 1080.62 cv
cp
752.445 1075.13 mo
753.728 1073.72 755.912 1073.6 757.327 1074.89 cv
758.746 1076.17 758.857 1078.35 757.574 1079.77 cv
756.294 1081.18 754.11 1081.29 752.691 1080.01 cv
751.273 1078.73 751.162 1076.55 752.445 1075.13 cv
cp
626.927 1087.67 mo
627.612 1087.33 628.448 1086.86 629.236 1086.3 cv
629.871 1087.04 630.798 1087.51 631.843 1087.51 cv
652.303 1087.51 li
653.282 1087.51 654.217 1087.1 654.873 1086.37 cv
669.69 1069.93 li
711.705 1069.93 li
722.66 1080.49 li
723.291 1081.1 724.132 1081.45 725.014 1081.46 cv
747.056 1081.75 li
747.073 1081.75 747.087 1081.75 747.103 1081.75 cv
748 1081.75 748.813 1081.4 749.428 1080.83 cv
750.326 1081.47 751.35 1082.07 752.249 1082.57 cv
755.505 1084.41 759.297 1084.86 761.803 1082.09 cv
764.308 1079.32 764.096 1075.04 761.323 1072.54 cv
758.547 1070.03 755.028 1071.2 751.766 1073.02 cv
750.841 1073.54 749.641 1074.34 748.688 1075.23 cv
748.225 1074.99 747.706 1074.84 747.147 1074.83 cv
726.472 1074.56 li
715.5 1063.99 li
714.856 1063.36 713.994 1063.02 713.1 1063.02 cv
668.149 1063.02 li
667.171 1063.02 666.238 1063.43 665.582 1064.16 cv
650.766 1080.6 li
631.843 1080.6 li
631.412 1080.6 631.005 1080.68 630.625 1080.83 cv
629.621 1079.83 628.171 1078.88 626.956 1078.1 cv
623.803 1076.1 620.041 1075.44 617.391 1078.07 cv
614.739 1080.71 614.723 1084.99 617.356 1087.64 cv
619.994 1090.29 623.57 1089.32 626.927 1087.67 cv
cp
f
709.554 1012.88 mo
710.837 1011.46 713.022 1011.35 714.44 1012.63 cv
715.856 1013.91 715.967 1016.1 714.685 1017.52 cv
713.407 1018.93 711.223 1019.04 709.804 1017.76 cv
708.384 1016.48 708.274 1014.3 709.554 1012.88 cv
cp
709.359 1020.32 mo
712.617 1022.16 716.409 1022.61 718.911 1019.84 cv
721.416 1017.07 721.203 1012.79 718.432 1010.29 cv
715.66 1007.78 712.138 1008.95 708.875 1010.77 cv
707.785 1011.38 706.318 1012.38 705.322 1013.46 cv
696.334 1013.75 li
696.442 1017.2 li
704.742 1016.94 li
705.689 1018.21 707.73 1019.4 709.359 1020.32 cv
cp
f
760.309 1044.61 mo
758.412 1044.39 757.054 1042.68 757.271 1040.78 cv
757.489 1038.88 759.206 1037.52 761.102 1037.74 cv
763 1037.96 764.358 1039.67 764.143 1041.57 cv
763.922 1043.47 762.207 1044.83 760.309 1044.61 cv
cp
766.482 1040.45 mo
766.087 1036.73 764.248 1033.38 760.536 1032.95 cv
756.824 1032.53 753.468 1035.18 753.039 1038.89 cv
752.614 1042.61 755.608 1044.79 758.986 1046.39 cv
759.697 1046.73 760.625 1047.09 761.578 1047.37 cv
761.708 1048.07 762.045 1048.74 762.606 1049.26 cv
772.115 1058.16 li
772.779 1058.79 773.627 1059.09 774.475 1059.09 cv
775.397 1059.09 776.318 1058.73 777.001 1058 cv
778.305 1056.6 778.232 1054.42 776.838 1053.11 cv
767.33 1044.21 li
767.134 1044.03 766.92 1043.88 766.698 1043.75 cv
766.698 1042.65 766.59 1041.47 766.482 1040.45 cv
cp
f
731.469 1101.87 mo
730.119 1103.22 727.931 1103.22 726.578 1101.87 cv
725.228 1100.52 725.228 1098.33 726.578 1096.98 cv
727.931 1095.63 730.119 1095.63 731.469 1096.98 cv
732.82 1098.33 732.82 1100.52 731.469 1101.87 cv
cp
732.04 1094.45 mo
728.883 1092.45 725.117 1091.8 722.474 1094.45 cv
719.834 1097.09 719.834 1101.37 722.474 1104.01 cv
725.117 1106.65 728.693 1105.67 732.04 1104.01 cv
733.111 1103.48 734.55 1102.61 735.592 1101.63 cv
743.933 1101.63 li
743.933 1098.17 li
736.552 1098.17 li
735.712 1096.81 733.668 1095.48 732.04 1094.45 cv
cp
f
659.215 1015.91 mo
660.571 1017.26 660.586 1019.44 659.244 1020.8 cv
657.904 1022.16 655.713 1022.17 654.352 1020.83 cv
652.998 1019.49 652.984 1017.3 654.328 1015.94 cv
655.669 1014.58 657.857 1014.57 659.215 1015.91 cv
cp
683.85 982.029 mo
701.402 982.029 li
713.505 994.871 li
772.08 994.871 li
800.113 966.82 li
1050.82 966.82 li
1074.59 942.32 li
1136.08 942.32 li
1136.08 938.863 li
1073.13 938.863 li
1049.36 963.363 li
798.684 963.363 li
770.648 991.412 li
714.996 991.412 li
702.896 978.572 li
682.412 978.572 li
654.891 1006.26 li
654.891 1011.3 li
653.751 1012.29 652.657 1013.99 651.787 1015.38 cv
649.808 1018.55 649.19 1022.32 651.847 1024.95 cv
654.504 1027.57 658.789 1027.55 661.412 1024.89 cv
664.037 1022.23 663.031 1018.67 661.356 1015.33 cv
660.712 1014.04 659.564 1012.24 658.35 1011.22 cv
658.35 1007.69 li
683.85 982.029 li
cp
f
595.172 1055.18 mo
593.268 1055.29 591.631 1053.83 591.516 1051.93 cv
591.404 1050.02 592.858 1048.39 594.763 1048.27 cv
596.668 1048.16 598.306 1049.62 598.42 1051.52 cv
598.532 1053.43 597.079 1055.06 595.172 1055.18 cv
cp
663.074 1039.39 mo
672.325 1030.61 li
672.325 1007.75 li
680.769 1000.18 li
773.441 1000.18 li
802.259 972.394 li
1054.29 972.394 li
1076.62 948.623 li
1136.08 948.623 li
1136.08 945.166 li
1075.13 945.166 li
1052.8 968.938 li
822.445 968.938 li
800.863 968.938 li
772.047 996.721 li
679.444 996.721 li
668.868 1006.2 li
668.868 1029.13 li
661.696 1035.93 li
608.075 1035.93 li
598.668 1045.34 li
597.066 1045.25 594.918 1045.86 593.538 1046.42 cv
590.077 1047.82 586.968 1049.85 587.185 1053.57 cv
587.408 1057.31 590.611 1060.15 594.338 1059.93 cv
598.07 1059.71 600.092 1056.46 600.692 1052.78 cv
600.946 1051.21 601.231 1049.3 601.073 1047.82 cv
609.506 1039.39 li
663.074 1039.39 li
cp
f
695.345 1128.36 mo
693.438 1128.35 691.894 1126.79 691.904 1124.89 cv
691.912 1122.98 693.464 1121.43 695.371 1121.44 cv
697.283 1121.45 698.822 1123 698.815 1124.91 cv
698.809 1126.83 697.256 1128.37 695.345 1128.36 cv
cp
800.695 1097.62 mo
800.695 997.481 li
817.889 978.465 li
1017.58 978.465 li
1023.41 982.357 li
1025.33 979.482 li
1018.63 975.008 li
816.352 975.008 li
797.238 996.15 li
797.238 1096.13 li
776.953 1115.46 li
733.796 1115.46 li
718.236 1132.81 li
705.418 1132.81 li
701.772 1128.26 li
701.68 1128.34 li
701.727 1126.87 701.348 1125.04 701.018 1123.54 cv
700.212 1119.88 698.016 1116.76 694.282 1116.75 cv
690.544 1116.73 687.505 1119.75 687.488 1123.48 cv
687.477 1127.22 690.692 1129.06 694.227 1130.27 cv
695.684 1130.77 697.975 1131.29 699.58 1131.06 cv
703.76 1136.27 li
719.779 1136.27 li
735.339 1118.92 li
778.338 1118.92 li
800.695 1097.62 li
cp
f
737.99 1059.52 mo
738.208 1061.41 736.852 1063.13 734.953 1063.35 cv
733.059 1063.57 731.345 1062.21 731.121 1060.31 cv
731.048 1059.69 731.16 1059.09 731.394 1058.55 cv
731.585 1058.42 731.766 1058.28 731.935 1058.12 cv
732.268 1057.79 732.519 1057.42 732.692 1057.02 cv
733.121 1056.74 733.611 1056.54 734.153 1056.48 cv
736.051 1056.26 737.768 1057.62 737.99 1059.52 cv
cp
628.946 1055.34 mo
627.591 1056.69 625.404 1056.68 624.057 1055.32 cv
622.713 1053.97 622.719 1051.78 624.073 1050.44 cv
625.427 1049.09 627.616 1049.1 628.963 1050.45 cv
629.429 1050.92 629.721 1051.49 629.863 1052.09 cv
629.851 1052.21 629.827 1052.32 629.827 1052.45 cv
629.827 1052.73 629.869 1053 629.933 1053.26 cv
629.85 1054.02 629.532 1054.76 628.946 1055.34 cv
cp
633.285 1048.99 mo
632.716 1048.99 632.188 1049.14 631.714 1049.38 cv
630.996 1048.86 630.232 1048.36 629.544 1047.92 cv
626.39 1045.91 622.628 1045.26 619.977 1047.89 cv
617.326 1050.52 617.309 1054.8 619.943 1057.46 cv
622.58 1060.11 626.157 1059.13 629.514 1057.49 cv
630.346 1057.08 631.4 1056.46 632.32 1055.75 cv
632.628 1055.84 632.947 1055.9 633.285 1055.9 cv
689.185 1055.9 li
689.571 1055.9 689.956 1055.84 690.321 1055.71 cv
706.215 1050.2 li
719.417 1050.2 li
727.046 1058.04 li
727.366 1058.38 727.738 1058.62 728.135 1058.79 cv
728.387 1059.87 728.759 1060.98 729.099 1061.95 cv
730.338 1065.48 732.894 1068.32 736.6 1067.88 cv
740.313 1067.45 742.974 1064.09 742.537 1060.38 cv
742.103 1056.67 738.69 1055.23 735.035 1054.45 cv
734.35 1054.3 733.49 1054.17 732.61 1054.11 cv
732.455 1053.79 732.264 1053.49 732.006 1053.23 cv
723.361 1044.33 li
722.71 1043.66 721.816 1043.28 720.879 1043.28 cv
705.635 1043.28 li
705.246 1043.28 704.864 1043.34 704.5 1043.47 cv
688.602 1048.99 li
633.285 1048.99 li
cp
f
1038.85 984.842 mo
1038.85 990.125 1034.57 994.408 1029.29 994.408 cv
1024.01 994.408 1019.72 990.125 1019.72 984.842 cv
1019.72 979.559 1024.01 975.277 1029.29 975.277 cv
1034.57 975.277 1038.85 979.559 1038.85 984.842 cv
cp
1 1 1 rgb
f
769.42 1016.93 mo
769.42 1022.21 765.135 1026.49 759.853 1026.49 cv
754.569 1026.49 750.287 1022.21 750.287 1016.93 cv
750.287 1011.64 754.569 1007.36 759.853 1007.36 cv
765.135 1007.36 769.42 1011.64 769.42 1016.93 cv
cp
f
710.576 980.92 mo
710.576 986.203 706.292 990.486 701.011 990.486 cv
695.727 990.486 691.445 986.203 691.445 980.92 cv
691.445 975.637 695.727 971.354 701.011 971.354 cv
706.292 971.354 710.576 975.637 710.576 980.92 cv
cp
f
698.26 1015.19 mo
698.26 1020.47 693.977 1024.75 688.693 1024.75 cv
683.412 1024.75 679.127 1020.47 679.127 1015.19 cv
679.127 1009.9 683.412 1005.62 688.693 1005.62 cv
693.977 1005.62 698.26 1009.9 698.26 1015.19 cv
cp
f
789.946 1057.76 mo
789.946 1063.04 785.665 1067.33 780.381 1067.33 cv
775.1 1067.33 770.814 1063.04 770.814 1057.76 cv
770.814 1052.48 775.1 1048.19 780.381 1048.19 cv
785.665 1048.19 789.946 1052.48 789.946 1057.76 cv
cp
f
760.988 1099.9 mo
760.988 1105.18 756.707 1109.47 751.423 1109.47 cv
746.141 1109.47 741.856 1105.18 741.856 1099.9 cv
741.856 1094.62 746.141 1090.33 751.423 1090.33 cv
756.707 1090.33 760.988 1094.62 760.988 1099.9 cv
cp
f
704.151 1048.19 mo
704.151 1053.47 699.869 1057.76 694.586 1057.76 cv
689.305 1057.76 685.019 1053.47 685.019 1048.19 cv
685.019 1042.91 689.305 1038.63 694.586 1038.63 cv
699.869 1038.63 704.151 1042.91 704.151 1048.19 cv
cp
f
664.819 1078.62 mo
664.819 1083.91 660.537 1088.19 655.254 1088.19 cv
649.973 1088.19 645.685 1083.91 645.685 1078.62 cv
645.685 1073.34 649.973 1069.06 655.254 1069.06 cv
660.537 1069.06 664.819 1073.34 664.819 1078.62 cv
cp
f
676.648 1110.85 mo
676.648 1116.13 672.367 1120.42 667.082 1120.42 cv
661.801 1120.42 657.516 1116.13 657.516 1110.85 cv
657.516 1105.57 661.801 1101.29 667.082 1101.29 cv
672.367 1101.29 676.648 1105.57 676.648 1110.85 cv
cp
f
718.198 1084.05 mo
718.198 1089.33 713.917 1093.62 708.633 1093.62 cv
703.352 1093.62 699.066 1089.33 699.066 1084.05 cv
699.066 1078.77 703.352 1074.49 708.633 1074.49 cv
713.917 1074.49 718.198 1078.77 718.198 1084.05 cv
cp
f
105.052 904.24 mo
103.677 905.566 101.489 905.527 100.163 904.156 cv
98.835 902.779 98.874 900.592 100.249 899.268 cv
101.622 897.938 103.813 897.977 105.136 899.352 cv
106.464 900.725 106.427 902.914 105.052 904.24 cv
cp
62.6064 1014.21 mo
184.139 1135.16 li
186.576 1132.71 li
66.0654 1012.78 li
66.0654 947.207 li
82.8838 931.373 li
98.501 931.373 li
104.964 924.572 li
104.964 908.322 li
105.917 907.344 106.825 905.996 107.573 904.856 cv
109.628 901.734 110.339 897.977 107.743 895.289 cv
105.147 892.602 100.864 892.529 98.1768 895.123 cv
95.4893 897.719 96.4111 901.31 98.0107 904.69 cv
98.7236 906.197 100.103 908.434 101.507 909.303 cv
101.507 923.19 li
97.0186 927.914 li
81.5146 927.914 li
62.6064 945.709 li
62.6064 1014.21 li
cp
0 .862745 1 rgb
f
84.6572 946.777 mo
84.9893 944.896 86.7822 943.641 88.6631 943.973 cv
90.542 944.305 91.7979 946.098 91.4678 947.979 cv
91.1357 949.859 89.3447 951.113 87.4619 950.781 cv
85.5811 950.453 84.3271 948.658 84.6572 946.777 cv
cp
73.2002 1014.72 mo
192.783 1133.64 li
195.221 1131.19 li
76.1475 1012.78 li
76.1475 961.463 li
84.2432 953.123 li
85.5693 953.295 87.126 953.246 88.4463 953.185 cv
92.1787 953.014 95.6338 951.375 96.2842 947.699 cv
96.9326 944.018 94.4756 940.512 90.7959 939.863 cv
87.1182 939.213 84.7529 942.074 82.96 945.348 cv
82.1123 946.9 81.0537 949.521 81.3271 951.162 cv
72.6904 960.063 li
72.6904 1014.21 li
73.2002 1014.72 li
cp
f
86.46 1007.88 mo
85.0947 1006.54 85.0752 1004.35 86.4111 1002.99 cv
87.7471 1001.63 89.9365 1001.6 91.3018 1002.94 cv
92.665 1004.28 92.6865 1006.46 91.3486 1007.83 cv
90.0146 1009.19 87.8232 1009.21 86.46 1007.88 cv
cp
87.0986 1019.97 mo
198.473 1130.77 li
249.186 1130.77 li
253.576 1135.16 li
256.021 1132.71 li
250.617 1127.31 li
199.902 1127.31 li
90.5557 1018.54 li
90.5557 1012.68 li
91.7822 1011.72 92.9619 1009.87 93.8896 1008.38 cv
95.8545 1005.2 96.458 1001.42 93.79 998.807 cv
91.1221 996.191 86.8389 996.236 84.2256 998.906 cv
81.6123 1001.58 82.6338 1005.14 84.3232 1008.47 cv
84.9287 1009.66 85.9717 1011.31 87.0986 1012.35 cv
87.0986 1019.97 li
cp
f
87.665 977.896 mo
86.3271 979.26 84.1396 979.285 82.7764 977.949 cv
81.4111 976.611 81.3877 974.422 82.7256 973.059 cv
84.0635 971.693 86.251 971.67 87.6143 973.008 cv
88.9795 974.344 89.001 976.533 87.665 977.896 cv
cp
252.904 1124.43 mo
263.055 1135.13 li
265.563 1132.75 li
254.391 1120.97 li
201.926 1120.97 li
105.827 1024.02 li
105.827 997.545 li
88.0518 981.566 li
88.8408 980.617 89.5791 979.451 90.2041 978.443 cv
92.1709 975.266 92.7744 971.49 90.1064 968.875 cv
87.4365 966.262 83.1553 966.307 80.5381 968.975 cv
77.9248 971.646 78.9463 975.211 80.6396 978.541 cv
81.4912 980.223 83.2158 982.805 84.8135 983.305 cv
102.368 999.09 li
102.368 1025.44 li
200.482 1124.43 li
252.904 1124.43 li
cp
f
115.282 1011.64 mo
113.919 1010.31 113.896 1008.12 115.233 1006.75 cv
116.567 1005.39 118.759 1005.37 120.122 1006.7 cv
121.487 1008.04 121.507 1010.23 120.171 1011.59 cv
118.835 1012.96 116.646 1012.98 115.282 1011.64 cv
cp
254.092 1118.67 mo
270.875 1135.17 li
273.299 1132.71 li
255.508 1115.21 li
205.377 1115.21 li
119.657 1029.78 li
119.657 1016.37 li
119.472 1016.37 li
120.663 1015.39 121.808 1013.6 122.712 1012.14 cv
124.677 1008.96 125.28 1005.19 122.612 1002.57 cv
119.942 999.957 115.659 1000 113.046 1002.67 cv
110.431 1005.34 111.454 1008.91 113.146 1012.24 cv
113.804 1013.54 114.981 1015.37 116.22 1016.37 cv
116.2 1016.37 li
116.2 1031.21 li
116.708 1031.72 li
203.947 1118.67 li
254.092 1118.67 li
cp
f
115.489 948.496 mo
115.821 946.615 117.612 945.359 119.495 945.69 cv
121.376 946.021 122.63 947.816 122.298 949.695 cv
121.966 951.578 120.175 952.834 118.292 952.5 cv
116.411 952.17 115.157 950.377 115.489 948.496 cv
cp
258.408 1112.04 mo
280.088 1133.64 li
282.529 1131.19 li
259.836 1108.58 li
206.947 1108.58 li
135.938 1036.99 li
135.938 997.68 li
128.811 989.316 li
109.474 989.316 li
104.675 984.045 li
104.675 965.307 li
115.921 955.131 li
115.718 954.906 li
116.888 954.996 118.167 954.955 119.278 954.904 cv
123.009 954.731 126.466 953.094 127.114 949.416 cv
127.763 945.736 125.308 942.229 121.628 941.58 cv
117.948 940.932 115.583 943.789 113.792 947.068 cv
112.798 948.885 111.505 952.18 112.421 953.633 cv
101.216 963.771 li
101.216 985.387 li
107.944 992.773 li
127.216 992.773 li
132.481 998.953 li
132.481 1038.41 li
205.506 1112.04 li
258.408 1112.04 li
cp
f
125.388 971.248 mo
125.388 973.158 123.839 974.705 121.929 974.705 cv
120.017 974.705 118.472 973.158 118.472 971.248 cv
118.472 969.338 120.017 967.789 121.929 967.789 cv
123.839 967.789 125.388 969.338 125.388 971.248 cv
cp
262.148 1106.85 mo
288.725 1133.63 li
291.18 1131.2 li
263.586 1103.39 li
211.15 1103.39 li
142.421 1033.53 li
142.421 987.06 li
128.263 974.703 li
128.313 973.229 127.921 971.377 127.583 969.863 cv
126.765 966.217 124.552 963.096 120.817 963.096 cv
117.079 963.096 114.052 966.125 114.052 969.863 cv
114.052 973.598 117.276 975.428 120.817 976.627 cv
122.253 977.111 124.491 977.611 126.093 977.398 cv
138.964 988.635 li
138.964 1034.95 li
209.703 1106.85 li
262.148 1106.85 li
cp
f
146.843 980.685 mo
145.515 979.313 145.554 977.123 146.929 975.797 cv
148.304 974.469 150.493 974.506 151.817 975.881 cv
153.144 977.258 153.104 979.445 151.731 980.769 cv
150.358 982.098 148.169 982.06 146.843 980.685 cv
cp
265.313 1100.22 mo
298.23 1133.63 li
300.691 1131.2 li
266.762 1096.77 li
213.455 1096.77 li
151.352 1033.54 li
151.352 985.137 li
152.411 984.146 153.431 982.641 154.255 981.387 cv
156.31 978.266 157.019 974.51 154.423 971.82 cv
151.827 969.135 147.546 969.06 144.856 971.654 cv
142.169 974.25 143.091 977.842 144.69 981.219 cv
145.354 982.623 146.595 984.658 147.895 985.635 cv
147.895 1034.95 li
148.39 1035.45 li
212.004 1100.22 li
265.313 1100.22 li
cp
f
153.852 948.225 mo
153.852 950.137 152.304 951.684 150.394 951.684 cv
148.483 951.684 146.936 950.137 146.936 948.225 cv
146.936 946.316 148.483 944.768 150.394 944.768 cv
152.304 944.768 153.852 946.316 153.852 948.225 cv
cp
268.777 1094.46 mo
307.746 1133.63 li
310.197 1131.2 li
270.215 1091 li
217.766 1091 li
166.34 1039.77 li
166.34 961.473 li
156.685 952.096 li
156.845 950.565 156.421 948.506 156.046 946.84 cv
155.229 943.193 153.019 940.074 149.284 940.074 cv
145.546 940.074 142.517 943.104 142.517 946.84 cv
142.517 950.576 145.743 952.406 149.284 953.604 cv
150.591 954.045 152.561 954.498 154.114 954.416 cv
162.883 962.934 li
162.883 1041.2 li
216.338 1094.46 li
268.777 1094.46 li
cp
f
178.004 1010.14 mo
176.641 1008.8 176.615 1006.62 177.953 1005.25 cv
179.289 1003.89 181.479 1003.86 182.842 1005.2 cv
184.207 1006.54 184.229 1008.72 182.893 1010.09 cv
181.557 1011.46 179.367 1011.48 178.004 1010.14 cv
cp
271.371 1088.12 mo
316.971 1133.64 li
319.412 1131.19 li
272.803 1084.66 li
220.367 1084.66 li
181.609 1045.35 li
181.609 1015.27 li
183.006 1014.48 184.381 1012.33 185.432 1010.64 cv
187.396 1007.46 188.002 1003.68 185.334 1001.07 cv
182.664 998.453 178.379 998.5 175.766 1001.17 cv
173.15 1003.84 174.174 1007.4 175.865 1010.73 cv
176.502 1011.99 177.627 1013.75 178.822 1014.77 cv
178.152 1014.77 li
178.152 1046.76 li
218.922 1088.12 li
271.371 1088.12 li
cp
f
684.951 84.3535 mo
686.861 84.3535 688.408 85.9014 688.408 87.8105 cv
688.408 89.7227 686.861 91.2686 684.951 91.2686 cv
683.041 91.2686 681.492 89.7227 681.492 87.8105 cv
681.492 85.9014 683.041 84.3535 684.951 84.3535 cv
cp
594.629 67.0703 mo
660.906 67.0703 li
678.816 83.4844 li
678.545 85.0918 679.072 87.4395 679.574 88.9219 cv
680.769 92.4619 682.602 95.6885 686.336 95.6885 cv
690.072 95.6885 693.102 92.6602 693.102 88.9219 cv
693.102 85.1875 689.982 82.9756 686.336 82.1582 cv
684.504 81.7461 682.182 81.2607 680.629 81.5762 cv
681.188 80.9658 li
662.25 63.6133 li
593.077 63.6133 li
571.803 87.5273 li
471.38 87.5273 li
471.38 90.9854 li
573.356 90.9854 li
594.629 67.0703 li
cp
f
652.209 82.624 mo
654.117 82.624 655.666 84.1719 655.666 86.082 cv
655.666 87.9932 654.117 89.54 652.209 89.54 cv
650.297 89.54 648.75 87.9932 648.75 86.082 cv
648.75 84.1719 650.297 82.624 652.209 82.624 cv
cp
476.519 99.3418 mo
589.329 99.3418 li
613.301 75.7139 li
639.307 75.7139 li
646.072 81.7549 li
645.801 83.3623 646.328 85.7109 646.83 87.1934 cv
648.027 90.7334 649.857 93.96 653.594 93.96 cv
657.33 93.96 660.359 90.9316 660.359 87.1934 cv
660.359 83.458 657.24 81.2461 653.594 80.4297 cv
652.166 80.1084 650.449 79.751 649.021 79.7529 cv
640.627 72.2559 li
611.883 72.2559 li
587.911 95.8848 li
474.933 95.8848 li
470.069 101.549 li
472.692 103.801 li
476.519 99.3418 li
cp
f
495.757 127.376 mo
636.67 127.293 li
655.184 145.4 li
657.602 142.929 li
638.078 123.834 li
494.29 123.92 li
470.138 148.852 li
472.622 151.259 li
495.757 127.376 li
cp
f
711.193 181.571 mo
711.592 179.702 713.428 178.512 715.295 178.91 cv
717.162 179.307 718.355 181.144 717.955 183.011 cv
717.56 184.88 715.723 186.069 713.857 185.673 cv
711.99 185.276 710.797 183.439 711.193 181.571 cv
cp
644.289 147.972 mo
630.924 133.575 li
500.507 133.575 li
470.169 163.301 li
472.591 165.77 li
501.919 137.033 li
629.414 137.033 li
640.832 149.33 li
640.832 165.242 li
669.783 194.717 li
704.076 194.717 li
710.828 187.946 li
712.086 188.123 713.527 188.123 714.758 188.109 cv
718.49 188.067 722.002 186.554 722.779 182.898 cv
723.559 179.247 721.225 175.653 717.572 174.876 cv
713.918 174.1 711.455 176.873 709.549 180.086 cv
708.59 181.695 707.348 184.505 707.76 186.126 cv
702.641 191.26 li
671.236 191.26 li
644.289 163.828 li
644.289 147.972 li
cp
f
622.66 147.899 mo
624.012 146.551 626.201 146.551 627.551 147.899 cv
628.9 149.25 628.9 151.439 627.551 152.789 cv
626.201 154.14 624.012 154.14 622.66 152.789 cv
621.309 151.439 621.309 149.25 622.66 147.899 cv
cp
499.188 151.784 mo
617.857 151.821 li
618.855 153.078 620.754 154.274 622.088 154.933 cv
625.438 156.59 629.014 157.575 631.656 154.933 cv
634.299 152.292 634.297 148.009 631.654 145.366 cv
629.014 142.727 625.246 143.368 622.088 145.366 cv
620.756 146.213 619.139 147.265 618.135 148.363 cv
497.774 148.326 li
470.167 175.483 li
472.593 177.948 li
499.188 151.784 li
cp
f
708.438 208.95 mo
709.787 207.601 711.977 207.601 713.326 208.95 cv
714.676 210.301 714.676 212.491 713.326 213.84 cv
711.977 215.19 709.787 215.19 708.438 213.84 cv
707.086 212.491 707.086 210.301 708.438 208.95 cv
cp
480.95 187.403 mo
479.038 187.403 477.491 185.855 477.491 183.946 cv
477.491 182.035 479.038 180.487 480.95 180.487 cv
482.86 180.487 484.407 182.035 484.407 183.946 cv
484.407 185.855 482.86 187.403 480.95 187.403 cv
cp
498.675 164.176 mo
484.038 177.751 li
482.608 177.796 480.974 178.184 479.839 178.566 cv
476.3 179.765 473.073 181.596 473.073 185.33 cv
473.073 189.068 476.102 192.097 479.839 192.097 cv
483.573 192.097 485.784 188.977 486.602 185.33 cv
487.02 183.473 487.511 181.118 487.167 179.564 cv
500.032 167.633 li
563.209 167.633 li
588.424 190.973 li
612.383 190.973 li
634.353 212.872 li
703.633 212.872 li
704.631 214.13 706.531 215.326 707.863 215.983 cv
711.213 217.64 714.789 218.626 717.434 215.983 cv
720.072 213.344 720.072 209.06 717.43 206.418 cv
714.789 203.777 711.021 204.419 707.863 206.418 cv
706.529 207.264 704.912 208.315 703.91 209.415 cv
635.783 209.415 li
613.813 187.515 li
589.778 187.515 li
564.563 164.176 li
498.675 164.176 li
cp
f
595.469 170.553 mo
596.821 169.203 599.008 169.203 600.36 170.553 cv
601.711 171.904 601.711 174.093 600.36 175.443 cv
599.008 176.794 596.821 176.794 595.469 175.443 cv
594.12 174.093 594.12 171.904 595.469 170.553 cv
cp
600.932 177.976 mo
603.029 176.646 605.834 174.805 605.834 173.072 cv
605.834 171.344 602.815 169.342 600.932 168.409 cv
597.584 166.755 594.008 165.769 591.364 168.409 cv
588.723 171.053 588.723 175.335 591.368 177.976 cv
594.008 180.617 597.776 179.977 600.932 177.976 cv
cp
f
654.352 120.193 mo
653.002 121.545 650.814 121.545 649.463 120.193 cv
648.111 118.843 648.111 116.655 649.463 115.304 cv
650.814 113.953 653.002 113.953 654.352 115.304 cv
655.703 116.655 655.703 118.843 654.352 120.193 cv
cp
648.891 112.771 mo
647.557 113.616 645.941 114.668 644.94 115.767 cv
486.821 115.767 li
470.157 132.408 li
472.602 134.855 li
488.253 119.225 li
644.66 119.225 li
645.658 120.481 647.557 121.678 648.891 122.338 cv
652.238 123.992 655.814 124.979 658.459 122.338 cv
661.1 119.695 661.1 115.412 658.455 112.771 cv
655.814 110.129 652.047 110.771 648.891 112.771 cv
cp
f
601.764 198.866 mo
603.113 197.517 605.303 197.517 606.652 198.866 cv
608.002 200.216 608.002 202.406 606.652 203.756 cv
605.303 205.105 603.113 205.105 601.764 203.756 cv
600.411 202.406 600.411 200.216 601.764 198.866 cv
cp
500.446 186.882 mo
498.536 186.882 496.989 185.334 496.989 183.424 cv
496.989 181.515 498.536 179.966 500.446 179.966 cv
502.356 179.966 503.905 181.515 503.905 183.424 cv
503.905 185.334 502.356 186.882 500.446 186.882 cv
cp
610.76 205.899 mo
613.4 203.257 613.398 198.976 610.756 196.333 cv
608.115 193.691 604.348 194.333 601.19 196.333 cv
599.743 197.251 597.956 198.414 596.989 199.617 cv
571.965 199.617 li
539.5 169.938 li
511.934 169.938 li
503.987 177.219 li
502.466 177.181 500.589 177.621 499.333 178.047 cv
495.794 179.243 492.569 181.073 492.569 184.81 cv
492.569 188.546 495.599 191.575 499.333 191.575 cv
503.069 191.575 505.282 188.457 506.101 184.81 cv
506.485 183.09 506.927 180.948 506.72 179.405 cv
513.278 173.395 li
538.157 173.395 li
570.62 203.074 li
597.206 203.074 li
598.247 204.224 599.959 205.291 601.19 205.899 cv
604.539 207.556 608.115 208.541 610.76 205.899 cv
cp
f
631.221 88.7188 mo
630.824 90.5869 628.986 91.7783 627.119 91.3818 cv
625.252 90.9854 624.06 89.1475 624.457 87.2803 cv
624.853 85.4111 626.691 84.2217 628.56 84.6182 cv
630.428 85.0146 631.617 86.8516 631.221 88.7188 cv
cp
630.834 80.585 mo
627.182 79.8057 624.719 82.5801 622.81 85.793 cv
622.043 87.0859 621.1 89.1504 620.963 90.7559 cv
604.164 105.393 li
481.317 105.393 li
470.122 117.281 li
472.638 119.651 li
482.81 108.851 li
605.461 108.851 li
623.115 93.4668 li
624.549 93.832 626.457 93.835 628.021 93.8174 cv
631.756 93.7754 635.266 92.2627 636.043 88.6084 cv
636.822 84.9541 634.492 81.3633 630.834 80.585 cv
cp
f
682.533 118.61 mo
682.93 116.741 684.766 115.549 686.635 115.945 cv
688.504 116.344 689.693 118.182 689.297 120.048 cv
688.9 121.915 687.063 123.107 685.195 122.709 cv
683.328 122.313 682.137 120.478 682.533 118.61 cv
cp
668.582 139.014 mo
682.205 124.988 li
683.453 125.16 684.879 125.161 686.098 125.147 cv
689.832 125.104 693.342 123.592 694.121 119.937 cv
694.898 116.283 692.566 112.69 688.91 111.913 cv
685.258 111.136 682.795 113.91 680.887 117.122 cv
679.922 118.748 678.672 121.591 679.117 123.204 cv
666.1 136.604 li
668.582 139.014 li
cp
f
591.846 79.6748 mo
591.846 84.9268 587.59 89.1836 582.338 89.1836 cv
577.086 89.1836 572.829 84.9268 572.829 79.6748 cv
572.829 74.4219 577.086 70.165 582.338 70.165 cv
587.59 70.165 591.846 74.4219 591.846 79.6748 cv
1 1 1 rgb
f
623.543 102.675 mo
623.543 107.928 619.285 112.184 614.035 112.184 cv
608.781 112.184 604.525 107.928 604.525 102.675 cv
604.525 97.4238 608.781 93.166 614.035 93.166 cv
619.285 93.166 623.543 97.4238 623.543 102.675 cv
f
671.375 142.657 mo
671.375 147.909 667.117 152.166 661.865 152.166 cv
656.613 152.166 652.357 147.909 652.357 142.657 cv
652.357 137.404 656.613 133.148 661.865 133.148 cv
667.117 133.148 671.375 137.404 671.375 142.657 cv
f
575.377 195.409 mo
575.377 200.661 571.12 204.918 565.868 204.918 cv
560.616 204.918 556.36 200.661 556.36 195.409 cv
556.36 190.155 560.616 185.901 565.868 185.901 cv
571.12 185.901 575.377 190.155 575.377 195.409 cv
f
698.883 171.796 mo
698.883 177.051 694.627 181.305 689.373 181.305 cv
684.121 181.305 679.865 177.051 679.865 171.796 cv
679.865 166.546 684.121 162.287 689.373 162.287 cv
694.627 162.287 698.883 166.546 698.883 171.796 cv
f
624.191 174.515 mo
624.191 179.765 619.934 184.023 614.684 184.023 cv
609.43 184.023 605.174 179.765 605.174 174.515 cv
605.174 169.261 609.43 165.005 614.684 165.005 cv
619.934 165.005 624.191 169.261 624.191 174.515 cv
f
671.375 183.047 mo
671.375 188.299 667.117 192.556 661.865 192.556 cv
656.613 192.556 652.357 188.299 652.357 183.047 cv
652.357 177.793 656.613 173.539 661.865 173.539 cv
667.117 173.539 671.375 177.793 671.375 183.047 cv
f
421.147 1117.24 mo
419.236 1117.24 417.689 1115.69 417.689 1113.79 cv
417.689 1111.87 419.236 1110.32 421.147 1110.32 cv
423.058 1110.32 424.605 1111.87 424.605 1113.79 cv
424.605 1115.69 423.058 1117.24 421.147 1117.24 cv
cp
369.625 1066.41 mo
367.715 1066.41 366.166 1064.87 366.166 1062.96 cv
366.166 1061.04 367.715 1059.5 369.625 1059.5 cv
371.533 1059.5 373.082 1061.04 373.082 1062.96 cv
373.082 1064.87 371.533 1066.41 369.625 1066.41 cv
cp
352.18 881.865 mo
350.808 880.537 350.77 878.35 352.096 876.975 cv
353.421 875.602 355.609 875.563 356.983 876.891 cv
358.359 878.217 358.398 880.406 357.07 881.779 cv
355.744 883.15 353.555 883.191 352.18 881.865 cv
cp
422.535 1108.13 mo
420.849 1107.75 418.759 1107.32 417.223 1107.5 cv
379.457 1068.41 li
376.715 1057.21 li
370.852 1052.46 li
370.852 922.908 li
356.156 908.068 li
356.156 886.617 li
357.406 885.606 358.582 883.666 359.224 882.315 cv
360.821 878.935 361.744 875.344 359.057 872.748 cv
356.369 870.152 352.087 870.227 349.49 872.914 cv
346.895 875.604 347.603 879.359 349.658 882.479 cv
350.524 883.797 351.602 885.391 352.716 886.375 cv
352.698 886.375 li
352.698 909.488 li
367.395 924.33 li
367.395 1054.11 li
369.734 1056 li
369.344 1055.94 368.947 1055.9 368.539 1055.9 cv
364.338 1055.9 360.933 1059.31 360.933 1063.51 cv
360.933 1067.71 364.338 1071.11 368.539 1071.11 cv
371.62 1071.11 374.267 1069.27 375.463 1066.64 cv
376.32 1070.14 li
414.952 1110.13 li
414.887 1111.67 415.334 1113.61 415.771 1114.89 cv
416.967 1118.43 418.797 1121.66 422.535 1121.66 cv
426.27 1121.66 429.299 1118.63 429.299 1114.89 cv
429.299 1111.16 426.18 1108.95 422.535 1108.13 cv
cp
0 .862745 1 rgb
f
401.266 1121.56 mo
399.353 1121.56 397.808 1120.01 397.808 1118.1 cv
397.808 1116.19 399.353 1114.64 401.266 1114.64 cv
403.177 1114.64 404.723 1116.19 404.723 1118.1 cv
404.723 1120.01 403.177 1121.56 401.266 1121.56 cv
cp
347.447 849.133 mo
347.844 847.264 349.68 846.072 351.549 846.471 cv
353.416 846.865 354.605 848.705 354.209 850.57 cv
353.813 852.44 351.976 853.633 350.109 853.234 cv
348.242 852.836 347.049 851 347.447 849.133 cv
cp
402.653 1112.45 mo
400.654 1112 398.088 1111.48 396.556 1111.99 cv
344.919 1060.56 li
344.919 996.906 li
330.655 979.617 li
330.655 931.281 li
340.174 922.338 li
339.31 862.084 li
346.08 855.313 li
347.517 855.684 349.435 855.688 351.01 855.67 cv
354.744 855.629 358.256 854.115 359.033 850.461 cv
359.811 846.809 357.48 843.215 353.824 842.438 cv
350.171 841.658 347.707 844.432 345.8 847.644 cv
345.043 848.922 344.115 850.947 343.96 852.545 cv
335.832 860.674 li
336.696 920.861 li
327.197 929.785 li
327.197 980.859 li
341.461 998.148 li
341.461 1062 li
395.086 1115.41 li
395.183 1116.74 395.54 1118.18 395.89 1119.21 cv
397.085 1122.75 398.915 1125.98 402.653 1125.98 cv
406.388 1125.98 409.417 1122.95 409.417 1119.21 cv
409.417 1115.48 406.299 1113.27 402.653 1112.45 cv
cp
f
581.394 1122.43 mo
579.484 1122.43 577.936 1120.88 577.936 1118.97 cv
577.936 1117.06 579.484 1115.51 581.394 1115.51 cv
583.303 1115.51 584.852 1117.06 584.852 1118.97 cv
584.852 1120.88 583.303 1122.43 581.394 1122.43 cv
cp
446.394 1121.47 mo
444.484 1121.47 442.935 1119.92 442.935 1118.01 cv
442.935 1116.1 444.484 1114.55 446.394 1114.55 cv
448.303 1114.55 449.852 1116.1 449.852 1118.01 cv
449.852 1119.92 448.303 1121.47 446.394 1121.47 cv
cp
582.78 1113.32 mo
580.842 1112.88 578.369 1112.38 576.824 1112.81 cv
562.667 1096.94 li
469.21 1096.94 li
450.967 1111.94 li
449.361 1111.56 446.848 1112.1 445.281 1112.63 cv
441.742 1113.83 438.517 1115.66 438.517 1119.4 cv
438.517 1123.13 441.547 1126.16 445.281 1126.16 cv
449.02 1126.16 451.23 1123.04 452.048 1119.4 cv
452.357 1118.02 452.697 1116.37 452.721 1114.97 cv
470.449 1100.39 li
561.117 1100.39 li
574.865 1115.81 li
575.188 1115.52 li
575.17 1117.03 575.602 1118.85 576.018 1120.08 cv
577.213 1123.62 579.045 1126.85 582.78 1126.85 cv
586.518 1126.85 589.545 1123.82 589.545 1120.08 cv
589.545 1116.35 586.428 1114.13 582.78 1113.32 cv
cp
f
381.976 852.914 mo
380.066 852.879 378.547 851.305 378.579 849.396 cv
378.611 847.488 380.186 845.967 382.096 845.998 cv
384.006 846.035 385.527 847.607 385.493 849.518 cv
385.459 851.428 383.886 852.947 381.976 852.914 cv
cp
448.608 1061.26 mo
449.98 1062.59 450.019 1064.78 448.693 1066.15 cv
447.367 1067.53 445.18 1067.56 443.804 1066.24 cv
442.43 1064.91 442.39 1062.72 443.719 1061.35 cv
445.045 1059.97 447.234 1059.94 448.608 1061.26 cv
cp
387.431 848.438 mo
386.297 844.879 384.523 841.625 380.785 841.557 cv
377.051 841.492 373.971 844.467 373.904 848.201 cv
373.84 851.938 376.92 854.203 380.549 855.084 cv
382.107 855.463 384.02 855.896 385.517 855.838 cv
385.223 856.15 li
400.674 870.768 li
400.674 885.68 li
389.438 897.422 li
389.438 976.213 li
443.896 1029.38 li
443.896 1057.21 li
442.935 1058.27 442.078 1059.73 441.564 1060.82 cv
439.968 1064.19 439.045 1067.78 441.732 1070.38 cv
444.42 1072.97 448.701 1072.9 451.299 1070.21 cv
453.895 1067.53 453.185 1063.77 451.131 1060.65 cv
450.08 1059.05 448.717 1057.04 447.353 1056.21 cv
447.353 1027.92 li
392.895 974.754 li
392.895 898.81 li
404.133 887.068 li
404.133 869.277 li
388.048 854.063 li
388.42 852.461 387.925 849.988 387.431 848.438 cv
cp
f
438.301 1091.19 mo
437.916 1093.06 436.086 1094.26 434.215 1093.87 cv
432.345 1093.49 431.142 1091.66 431.529 1089.79 cv
431.916 1087.92 433.746 1086.71 435.617 1087.1 cv
437.486 1087.49 438.688 1089.32 438.301 1091.19 cv
cp
380.414 882.168 mo
379.041 880.842 379.003 878.654 380.33 877.279 cv
381.656 875.904 383.845 875.867 385.22 877.195 cv
386.594 878.519 386.631 880.709 385.304 882.084 cv
383.977 883.455 381.789 883.494 380.414 882.168 cv
cp
442.674 1093.23 mo
443.431 1089.57 440.824 1086.77 437.42 1085.23 cv
435.951 1084.57 434.145 1083.78 432.658 1083.57 cv
432.658 1027.93 li
384.25 979.523 li
384.25 887.035 li
385.553 886.06 386.793 884.021 387.458 882.617 cv
389.055 879.24 389.978 875.646 387.289 873.053 cv
384.603 870.457 380.322 870.531 377.723 873.217 cv
375.13 875.906 375.84 879.664 377.892 882.783 cv
378.819 884.193 379.989 885.924 381.186 886.879 cv
380.793 886.879 li
380.793 980.955 li
429.201 1029.36 li
429.201 1086.56 li
429.412 1086.56 li
429.233 1087.89 429.291 1089.4 429.424 1090.49 cv
429.88 1094.2 431.02 1097.72 434.678 1098.48 cv
438.337 1099.24 441.916 1096.89 442.674 1093.23 cv
cp
f
516.605 1121.72 mo
515.256 1123.07 513.066 1123.07 511.718 1121.72 cv
510.367 1120.37 510.367 1118.18 511.718 1116.83 cv
513.066 1115.48 515.256 1115.48 516.605 1116.83 cv
517.956 1118.18 517.956 1120.37 516.605 1121.72 cv
cp
509.183 1112.72 mo
506.541 1115.37 507.183 1119.14 509.183 1122.29 cv
509.953 1123.51 510.896 1124.96 511.89 1125.97 cv
511.539 1125.97 li
511.539 1132.96 li
514.996 1132.96 li
514.996 1126.94 li
516.474 1126.19 517.98 1123.85 518.75 1122.29 cv
520.405 1118.94 521.392 1115.37 518.75 1112.72 cv
516.107 1110.08 511.826 1110.08 509.183 1112.72 cv
cp
f
540.18 1121.46 mo
538.269 1121.43 536.749 1119.85 536.783 1117.95 cv
536.815 1116.04 538.392 1114.51 540.301 1114.55 cv
542.209 1114.58 543.73 1116.15 543.695 1118.07 cv
543.663 1119.97 542.087 1121.5 540.18 1121.46 cv
cp
545.637 1116.99 mo
544.5 1113.43 542.726 1110.17 538.99 1110.11 cv
535.253 1110.04 532.174 1113.01 532.106 1116.75 cv
532.043 1120.48 535.121 1122.75 538.753 1123.63 cv
540.178 1123.98 541.89 1124.36 543.32 1124.39 cv
546.764 1126.86 li
546.764 1132.96 li
550.223 1132.96 li
550.223 1125.08 li
546.315 1122.28 li
546.558 1120.68 546.098 1118.43 545.637 1116.99 cv
cp
f
561.959 1122.94 mo
560.049 1122.9 558.528 1121.33 558.56 1119.42 cv
558.593 1117.51 560.168 1115.99 562.078 1116.02 cv
563.987 1116.05 565.509 1117.63 565.476 1119.54 cv
565.441 1121.45 563.867 1122.97 561.959 1122.94 cv
cp
567.412 1118.46 mo
566.277 1114.9 564.506 1111.65 560.768 1111.58 cv
557.033 1111.51 553.952 1114.49 553.887 1118.23 cv
553.822 1121.96 556.9 1124.22 560.531 1125.11 cv
562.468 1125.58 564.94 1126.13 566.494 1125.71 cv
576.776 1134.28 li
578.992 1131.63 li
568.154 1122.59 li
568.121 1121.18 567.769 1119.58 567.412 1118.46 cv
cp
f
385.064 1012.86 mo
385.064 1021.79 li
388.521 1021.79 li
388.521 1012.86 li
385.064 1012.86 li
cp
f
407.149 1070.32 mo
408.476 1068.95 410.664 1068.91 412.039 1070.23 cv
413.412 1071.56 413.449 1073.75 412.123 1075.13 cv
410.799 1076.5 408.607 1076.54 407.233 1075.21 cv
405.859 1073.88 405.82 1071.69 407.149 1070.32 cv
cp
405.162 1079.35 mo
407.849 1081.95 412.132 1081.87 414.728 1079.19 cv
417.324 1076.5 416.615 1072.74 414.56 1069.62 cv
413.513 1068.03 412.154 1066.03 410.797 1065.2 cv
410.797 1057.2 li
407.338 1057.2 li
407.338 1066.13 li
407.373 1066.13 li
406.392 1067.2 405.517 1068.68 404.995 1069.79 cv
403.398 1073.16 402.476 1076.75 405.162 1079.35 cv
cp
f
370.267 914.387 mo
370.267 919.641 366.012 923.896 360.758 923.896 cv
355.506 923.896 351.25 919.641 351.25 914.387 cv
351.25 909.135 355.506 904.879 360.758 904.879 cv
366.012 904.879 370.267 909.135 370.267 914.387 cv
1 1 1 rgb
f
491.429 1098.67 mo
491.429 1103.92 487.172 1108.18 481.92 1108.18 cv
476.668 1108.18 472.41 1103.92 472.41 1098.67 cv
472.41 1093.41 476.668 1089.16 481.92 1089.16 cv
487.172 1089.16 491.429 1093.41 491.429 1098.67 cv
f
396.869 1005.75 mo
396.869 1011.01 392.613 1015.26 387.36 1015.26 cv
382.107 1015.26 377.852 1011.01 377.852 1005.75 cv
377.852 1000.5 382.107 996.246 387.36 996.246 cv
392.613 996.246 396.869 1000.5 396.869 1005.75 cv
f
395.92 1028.21 mo
395.92 1033.47 391.664 1037.72 386.412 1037.72 cv
381.159 1037.72 376.902 1033.47 376.902 1028.21 cv
376.902 1022.96 381.159 1018.71 386.412 1018.71 cv
391.664 1018.71 395.92 1022.96 395.92 1028.21 cv
f
419.145 1050.1 mo
419.145 1055.35 414.887 1059.61 409.637 1059.61 cv
404.384 1059.61 400.127 1055.35 400.127 1050.1 cv
400.127 1044.85 404.384 1040.59 409.637 1040.59 cv
414.887 1040.59 419.145 1044.85 419.145 1050.1 cv
f
363.797 954.281 mo
363.797 959.533 359.539 963.791 354.287 963.791 cv
349.035 963.791 344.778 959.533 344.778 954.281 cv
344.778 949.027 349.035 944.771 354.287 944.771 cv
359.539 944.771 363.797 949.027 363.797 954.281 cv
f
392.326 1100.6 mo
392.326 1105.85 388.069 1110.1 382.817 1110.1 cv
377.564 1110.1 373.308 1105.85 373.308 1100.6 cv
373.308 1095.34 377.564 1091.09 382.817 1091.09 cv
388.069 1091.09 392.326 1095.34 392.326 1100.6 cv
f
935.468 188.657 mo
933.558 188.657 932.01 187.108 932.01 185.196 cv
932.01 183.286 933.558 181.739 935.468 181.739 cv
937.376 181.739 938.925 183.286 938.925 185.196 cv
938.925 187.108 937.376 188.657 935.468 188.657 cv
cp
800.467 187.694 mo
798.558 187.694 797.009 186.148 797.009 184.237 cv
797.009 182.327 798.558 180.78 800.467 180.78 cv
802.376 180.78 803.925 182.327 803.925 184.237 cv
803.925 186.148 802.376 187.694 800.467 187.694 cv
cp
936.853 179.544 mo
934.915 179.108 932.442 178.602 930.897 179.038 cv
916.74 163.165 li
823.283 163.165 li
805.04 178.167 li
803.435 177.786 800.921 178.331 799.354 178.86 cv
795.815 180.056 792.59 181.888 792.59 185.624 cv
792.59 189.36 795.619 192.39 799.354 192.39 cv
803.093 192.39 805.304 189.27 806.121 185.624 cv
806.431 184.247 806.771 182.599 806.794 181.2 cv
824.522 166.622 li
915.19 166.622 li
928.938 182.038 li
929.261 181.751 li
929.243 183.255 929.675 185.079 930.091 186.31 cv
931.286 189.847 933.118 193.075 936.853 193.075 cv
940.591 193.075 943.618 190.044 943.618 186.31 cv
943.618 182.575 940.501 180.362 936.853 179.544 cv
cp
0 .862745 1 rgb
f
870.679 187.95 mo
869.328 189.298 867.14 189.298 865.791 187.95 cv
864.44 186.599 864.44 184.409 865.791 183.06 cv
867.14 181.708 869.328 181.708 870.679 183.06 cv
872.029 184.409 872.029 186.599 870.679 187.95 cv
cp
863.256 178.952 mo
860.614 181.597 861.256 185.364 863.256 188.52 cv
864.026 189.737 864.97 191.189 865.963 192.194 cv
865.612 192.194 li
865.612 199.183 li
869.069 199.183 li
869.069 193.171 li
870.547 192.413 872.054 190.079 872.823 188.52 cv
874.478 185.171 875.465 181.597 872.823 178.952 cv
870.181 176.311 865.899 176.311 863.256 178.952 cv
cp
f
894.253 187.69 mo
892.343 187.655 890.822 186.079 890.856 184.173 cv
890.889 182.263 892.465 180.741 894.374 180.774 cv
896.282 180.81 897.804 182.382 897.769 184.294 cv
897.736 186.202 896.16 187.724 894.253 187.69 cv
cp
899.71 183.214 mo
898.573 179.655 896.799 176.398 893.063 176.333 cv
889.326 176.267 886.246 179.241 886.18 182.98 cv
886.116 186.712 889.194 188.977 892.826 189.86 cv
894.251 190.204 895.963 190.593 897.394 190.614 cv
900.837 193.085 li
900.837 199.183 li
904.296 199.183 li
904.296 191.31 li
900.389 188.509 li
900.631 186.911 900.171 184.659 899.71 183.214 cv
cp
f
916.032 189.165 mo
914.121 189.132 912.602 187.556 912.634 185.648 cv
912.666 183.739 914.241 182.218 916.151 182.251 cv
918.06 182.282 919.582 183.858 919.549 185.769 cv
919.515 187.677 917.94 189.198 916.032 189.165 cv
cp
921.485 184.69 mo
920.351 181.13 918.578 177.874 914.841 177.81 cv
911.106 177.741 908.025 180.72 907.96 184.456 cv
907.895 188.189 910.974 190.452 914.604 191.335 cv
916.541 191.808 919.014 192.358 920.567 191.942 cv
930.85 200.511 li
933.065 197.852 li
922.227 188.823 li
922.194 187.413 921.843 185.811 921.485 184.69 cv
cp
f
845.502 164.894 mo
845.502 170.145 841.244 174.403 835.993 174.403 cv
830.741 174.403 826.483 170.145 826.483 164.894 cv
826.483 159.642 830.741 155.386 835.993 155.386 cv
841.244 155.386 845.502 159.642 845.502 164.894 cv
1 1 1 rgb
f
91.8242 596.902 mo
89.915 596.867 88.3955 595.292 88.4277 593.384 cv
88.46 591.476 90.0352 589.955 91.9443 589.986 cv
93.8545 590.023 95.376 591.595 95.3418 593.505 cv
95.3076 595.416 93.7344 596.935 91.8242 596.902 cv
cp
158.457 805.252 mo
159.829 806.578 159.867 808.768 158.542 810.141 cv
157.216 811.514 155.028 811.551 153.652 810.225 cv
152.278 808.898 152.238 806.709 153.567 805.336 cv
154.894 803.963 157.083 803.924 158.457 805.252 cv
cp
97.2793 592.425 mo
96.1455 588.867 94.3721 585.613 90.6338 585.545 cv
86.8994 585.481 83.8193 588.455 83.7529 592.189 cv
83.6885 595.925 86.7686 598.191 90.3975 599.072 cv
91.9561 599.453 93.8682 599.884 95.3652 599.826 cv
95.0713 600.138 li
110.522 614.756 li
110.522 629.668 li
99.2861 641.41 li
99.2861 720.201 li
153.745 773.365 li
153.745 801.199 li
152.784 802.26 151.927 803.721 151.413 804.805 cv
149.816 808.18 148.894 811.771 151.581 814.369 cv
154.269 816.961 158.55 816.887 161.147 814.203 cv
163.743 811.514 163.034 807.756 160.979 804.637 cv
159.929 803.037 158.565 801.029 157.202 800.203 cv
157.202 771.906 li
102.743 718.742 li
102.743 642.799 li
113.981 631.057 li
113.981 613.266 li
97.8965 598.05 li
98.2686 596.451 97.7734 593.976 97.2793 592.425 cv
cp
0 .862745 1 rgb
f
148.149 835.176 mo
147.765 837.047 145.935 838.248 144.063 837.861 cv
142.193 837.475 140.99 835.646 141.378 833.773 cv
141.765 831.906 143.595 830.703 145.466 831.09 cv
147.335 831.477 148.536 833.307 148.149 835.176 cv
cp
90.2627 626.156 mo
88.8896 624.83 88.8516 622.643 90.1787 621.268 cv
91.5049 619.893 93.6934 619.856 95.0684 621.184 cv
96.4424 622.508 96.4795 624.697 95.1523 626.072 cv
93.8252 627.443 91.6377 627.482 90.2627 626.156 cv
cp
152.522 837.215 mo
153.279 833.557 150.673 830.76 147.269 829.221 cv
145.8 828.557 143.993 827.773 142.507 827.559 cv
142.507 771.92 li
94.0986 723.512 li
94.0986 631.025 li
95.4014 630.049 96.6416 628.012 97.3066 626.606 cv
98.9033 623.229 99.8271 619.635 97.1377 617.041 cv
94.4521 614.445 90.1709 614.519 87.5713 617.205 cv
84.9785 619.894 85.6885 623.652 87.7402 626.771 cv
88.668 628.184 89.8379 629.912 91.0352 630.867 cv
90.6416 630.867 li
90.6416 724.943 li
139.05 773.352 li
139.05 830.553 li
139.261 830.553 li
139.082 831.881 139.14 833.389 139.272 834.477 cv
139.729 838.184 140.868 841.713 144.526 842.469 cv
148.186 843.225 151.765 840.875 152.522 837.215 cv
cp
f
94.9131 756.846 mo
94.9131 765.777 li
98.3701 765.777 li
98.3701 756.846 li
94.9131 756.846 li
cp
f
116.998 814.307 mo
118.324 812.934 120.513 812.898 121.888 814.223 cv
123.261 815.549 123.298 817.738 121.972 819.113 cv
120.647 820.486 118.456 820.523 117.082 819.195 cv
115.708 817.871 115.669 815.682 116.998 814.307 cv
cp
115.011 823.34 mo
117.697 825.934 121.98 825.857 124.577 823.174 cv
127.173 820.484 126.464 816.729 124.409 813.607 cv
123.361 812.014 122.003 810.016 120.646 809.184 cv
120.646 801.188 li
117.187 801.188 li
117.187 810.121 li
117.222 810.121 li
116.24 811.185 115.365 812.674 114.844 813.775 cv
113.247 817.152 112.324 820.742 115.011 823.34 cv
cp
f
106.718 749.742 mo
106.718 754.996 102.462 759.252 97.209 759.252 cv
91.9561 759.252 87.7002 754.996 87.7002 749.742 cv
87.7002 744.49 91.9561 740.234 97.209 740.234 cv
102.462 740.234 106.718 744.49 106.718 749.742 cv
1 1 1 rgb
f
105.769 772.203 mo
105.769 777.455 101.513 781.711 96.2607 781.711 cv
91.0078 781.711 86.751 777.455 86.751 772.203 cv
86.751 766.953 91.0078 762.695 96.2607 762.695 cv
101.513 762.695 105.769 766.953 105.769 772.203 cv
f
128.993 794.086 mo
128.993 799.338 124.735 803.594 119.485 803.594 cv
114.232 803.594 109.976 799.338 109.976 794.086 cv
109.976 788.834 114.232 784.576 119.485 784.576 cv
124.735 784.576 128.993 788.834 128.993 794.086 cv
f
522.415 975.047 mo
520.503 975.014 518.986 973.438 519.019 971.529 cv
519.052 969.621 520.626 968.1 522.539 968.133 cv
524.447 968.166 525.968 969.74 525.931 971.65 cv
525.9 973.559 524.324 975.08 522.415 975.047 cv
cp
528.607 974.41 mo
528.537 973.076 528.205 971.613 527.873 970.57 cv
526.738 967.012 524.962 963.756 521.228 963.69 cv
517.49 963.625 514.41 966.6 514.345 970.338 cv
514.281 974.07 517.357 976.334 520.992 977.217 cv
523.074 977.721 525.785 978.336 527.294 977.723 cv
532.445 981.402 li
560.23 981.402 li
560.23 977.945 li
533.552 977.945 li
528.607 974.41 li
cp
0 .862745 1 rgb
f
485.212 982.959 mo
485.246 981.051 486.82 979.529 488.73 979.563 cv
490.638 979.596 492.162 981.17 492.124 983.082 cv
492.091 984.988 490.517 986.512 488.609 986.479 cv
486.697 986.445 485.177 984.867 485.212 982.959 cv
cp
494.066 982.002 mo
492.931 978.445 491.154 975.185 487.419 975.121 cv
483.681 975.055 480.603 978.029 480.535 981.768 cv
480.474 985.502 483.55 987.766 487.185 988.646 cv
488.583 988.986 490.265 989.367 491.679 989.4 cv
497.021 993.072 li
560.23 993.072 li
560.23 989.615 li
498.093 989.615 li
494.742 987.31 li
494.99 985.713 494.527 983.451 494.066 982.002 cv
cp
f
503.345 978.205 mo
503.378 976.297 504.953 974.775 506.863 974.809 cv
508.771 974.842 510.294 976.416 510.259 978.326 cv
510.226 980.234 508.652 981.758 506.742 981.723 cv
504.833 981.69 503.314 980.113 503.345 978.205 cv
cp
512.199 977.248 mo
511.064 973.691 509.29 970.432 505.554 970.365 cv
501.818 970.301 498.734 973.275 498.669 977.012 cv
498.607 980.748 501.687 983.012 505.316 983.893 cv
506.82 984.258 508.656 984.682 510.128 984.658 cv
515.619 988.318 li
560.23 988.318 li
560.23 984.861 li
516.665 984.861 li
512.898 982.35 li
513.08 980.768 512.64 978.637 512.199 977.248 cv
cp
f
540.433 961.922 mo
542.341 961.955 543.865 963.529 543.828 965.441 cv
543.798 967.35 542.22 968.871 540.312 968.838 cv
538.402 968.803 536.882 967.229 536.915 965.32 cv
536.951 963.412 538.523 961.889 540.433 961.922 cv
cp
538.886 971.008 mo
541.302 971.594 544.574 972.33 545.82 971.127 cv
545.826 971.123 545.828 971.115 545.833 971.109 cv
549.785 973.623 li
556.484 973.623 li
556.484 970.164 li
550.79 970.164 li
546.46 967.41 li
546.437 967.447 li
546.304 966.338 546.04 965.209 545.769 964.361 cv
544.63 960.803 542.859 957.547 539.125 957.481 cv
535.386 957.414 532.306 960.389 532.242 964.127 cv
532.175 967.861 535.255 970.125 538.886 971.008 cv
cp
f
890.839 1051.78 mo
888.929 1051.78 887.38 1050.23 887.38 1048.32 cv
887.38 1046.41 888.929 1044.86 890.839 1044.86 cv
892.746 1044.86 894.296 1046.41 894.296 1048.32 cv
894.296 1050.23 892.746 1051.78 890.839 1051.78 cv
cp
1087.56 1091.84 mo
1051.68 1091.84 li
1001.65 1037.38 li
942.218 1037.38 li
932.276 1027.44 li
908.782 1027.44 li
894.679 1042.14 li
893.108 1042.02 891.069 1042.48 889.727 1042.94 cv
886.186 1044.14 882.962 1045.97 882.962 1049.7 cv
882.962 1053.44 885.989 1056.47 889.727 1056.47 cv
893.462 1056.47 895.675 1053.35 896.493 1049.7 cv
896.856 1048.08 897.267 1046.08 897.142 1044.56 cv
910.257 1030.89 li
930.845 1030.89 li
940.786 1040.84 li
1000.21 1040.84 li
1050.24 1095.3 li
1086.1 1095.3 li
1100.37 1109.99 li
1136.2 1109.99 li
1136.2 1106.54 li
1101.83 1106.54 li
1087.56 1091.84 li
cp
f
1074.42 1114.13 mo
1073.06 1115.48 1070.88 1115.48 1069.52 1114.13 cv
1068.17 1112.78 1068.17 1110.59 1069.52 1109.24 cv
1070.88 1107.89 1073.06 1107.89 1074.42 1109.24 cv
1075.76 1110.59 1075.76 1112.78 1074.42 1114.13 cv
cp
924.806 1053.25 mo
923.453 1054.6 921.267 1054.6 919.915 1053.25 cv
918.563 1051.9 918.563 1049.71 919.915 1048.36 cv
921.267 1047.01 923.453 1047.01 924.806 1048.36 cv
926.155 1049.71 926.155 1051.9 924.806 1053.25 cv
cp
1068.95 1106.71 mo
1067.5 1107.63 1065.72 1108.79 1064.75 1109.99 cv
1053.82 1109.99 li
995.147 1049.05 li
929.546 1049.05 li
929.546 1049.25 li
928.532 1048.02 926.683 1046.86 925.376 1046.22 cv
922.024 1044.56 918.452 1043.57 915.808 1046.22 cv
913.165 1048.86 913.165 1053.14 915.811 1055.78 cv
918.452 1058.42 922.218 1057.78 925.376 1055.78 cv
926.823 1054.87 928.602 1053.71 929.569 1052.51 cv
993.744 1052.51 li
1052.42 1113.45 li
1064.97 1113.45 li
1066.01 1114.6 1067.72 1115.66 1068.95 1116.27 cv
1072.3 1117.93 1075.88 1118.91 1078.52 1116.27 cv
1081.16 1113.63 1081.16 1109.35 1078.52 1106.71 cv
1075.88 1104.06 1072.11 1104.71 1068.95 1106.71 cv
cp
f
920.835 1077.9 mo
922.181 1076.55 924.371 1076.55 925.72 1077.9 cv
927.071 1079.25 927.071 1081.44 925.72 1082.79 cv
924.371 1084.14 922.181 1084.14 920.835 1082.79 cv
919.483 1081.44 919.483 1079.25 920.835 1077.9 cv
cp
926.294 1085.33 mo
927.802 1084.37 929.669 1083.15 930.602 1081.9 cv
952.159 1081.9 li
970.744 1063.31 li
988.972 1063.31 li
1056.29 1135.06 li
1136.2 1135.06 li
1136.2 1131.6 li
1057.73 1131.6 li
990.411 1059.85 li
969.313 1059.85 li
950.727 1078.44 li
930.149 1078.44 li
929.101 1077.35 927.476 1076.34 926.294 1075.76 cv
922.944 1074.1 919.368 1073.12 916.726 1075.76 cv
914.085 1078.4 914.085 1082.69 916.726 1085.33 cv
919.368 1087.97 923.136 1087.33 926.294 1085.33 cv
cp
f
860.8 1077.25 mo
862.708 1077.25 864.257 1078.8 864.257 1080.71 cv
864.257 1082.62 862.708 1084.17 860.8 1084.17 cv
858.89 1084.17 857.341 1082.62 857.341 1080.71 cv
857.341 1078.8 858.89 1077.25 860.8 1077.25 cv
cp
859.686 1088.86 mo
863.425 1088.86 865.634 1085.74 866.452 1082.1 cv
866.683 1081.07 866.927 1079.9 867.052 1078.79 cv
867.071 1078.81 li
875.647 1070.45 li
899.099 1070.45 li
906.927 1060.91 li
906.927 1045.48 li
914.667 1038.24 li
928.828 1038.24 li
937.474 1046.89 li
997.907 1046.89 li
1049.38 1102 li
1082.67 1102 li
1096.5 1115.61 li
1136.2 1115.61 li
1136.2 1112.15 li
1097.91 1112.15 li
1084.08 1098.54 li
1050.81 1098.54 li
999.333 1043.43 li
938.905 1043.43 li
930.261 1034.79 li
913.302 1034.79 li
903.468 1043.98 li
903.468 1059.67 li
897.464 1066.99 li
874.237 1066.99 li
866.101 1074.93 li
864.655 1074.07 861.522 1074.71 859.686 1075.33 cv
856.147 1076.53 852.923 1078.36 852.923 1082.1 cv
852.923 1085.83 855.952 1088.86 859.686 1088.86 cv
cp
f
891.144 1078.68 mo
893.056 1078.68 894.601 1080.23 894.601 1082.14 cv
894.601 1084.05 893.056 1085.6 891.144 1085.6 cv
889.233 1085.6 887.685 1084.05 887.685 1082.14 cv
887.685 1080.23 889.233 1078.68 891.144 1078.68 cv
cp
890.032 1090.29 mo
893.767 1090.29 895.977 1087.17 896.798 1083.52 cv
897.071 1082.31 897.376 1080.88 897.462 1079.6 cv
904.024 1076.65 li
913.237 1067.64 li
942.21 1068.08 li
952.159 1058.13 li
990.718 1058.13 li
1058.47 1128.14 li
1136.2 1128.02 li
1136.2 1124.56 li
1059.87 1124.69 li
992.126 1054.67 li
950.727 1054.67 li
940.798 1064.6 li
911.851 1064.17 li
902.046 1073.75 li
896.366 1076.3 li
894.886 1075.52 891.828 1076.15 890.032 1076.76 cv
886.493 1077.96 883.267 1079.79 883.267 1083.52 cv
883.267 1087.26 886.296 1090.29 890.032 1090.29 cv
cp
f
960.952 1081.25 mo
960.952 1086.5 956.698 1090.76 951.444 1090.76 cv
946.194 1090.76 941.935 1086.5 941.935 1081.25 cv
941.935 1076 946.194 1071.74 951.444 1071.74 cv
956.698 1071.74 960.952 1076 960.952 1081.25 cv
1 1 1 rgb
f
1017.11 438.704 mo
1015.26 439.192 1013.37 438.086 1012.89 436.239 cv
1012.4 434.392 1013.51 432.502 1015.36 432.016 cv
1017.2 431.532 1019.09 432.637 1019.58 434.483 cv
1020.06 436.332 1018.96 438.221 1017.11 438.704 cv
cp
1015.12 428.917 mo
1011.05 429.985 1008.62 434.141 1009.69 438.2 cv
1010.76 442.264 1014.91 444.692 1018.97 443.627 cv
1023.03 442.562 1025.46 438.405 1024.4 434.341 cv
1023.33 430.28 1019.17 427.852 1015.12 428.917 cv
cp
0 .862745 1 rgb
f
987.024 438.704 mo
985.178 439.192 983.286 438.086 982.805 436.239 cv
982.317 434.392 983.422 432.502 985.269 432.016 cv
987.115 431.532 989.007 432.637 989.493 434.483 cv
989.976 436.332 988.871 438.221 987.024 438.704 cv
cp
985.029 428.917 mo
980.963 429.985 978.536 434.141 979.602 438.2 cv
980.67 442.264 984.823 444.692 988.888 443.627 cv
992.946 442.562 995.379 438.405 994.31 434.341 cv
993.244 430.28 989.088 427.852 985.029 428.917 cv
cp
f
960.169 438.28 mo
958.322 438.766 956.431 437.661 955.945 435.813 cv
955.462 433.967 956.566 432.075 958.412 431.592 cv
960.261 431.106 962.151 432.211 962.635 434.058 cv
963.121 435.907 962.017 437.795 960.169 438.28 cv
cp
958.17 428.493 mo
954.109 429.558 951.681 433.716 952.744 437.776 cv
953.811 441.838 957.968 444.267 962.034 443.2 cv
966.093 442.135 968.523 437.979 967.457 433.915 cv
966.39 429.854 962.232 427.426 958.17 428.493 cv
cp
f
913.477 438.217 mo
912.541 436.551 913.133 434.444 914.798 433.51 cv
916.461 432.573 918.571 433.163 919.504 434.831 cv
920.439 436.495 919.85 438.604 918.184 439.538 cv
916.519 440.471 914.412 439.881 913.477 438.217 cv
cp
919.199 442.475 mo
922.863 440.417 924.164 435.784 922.106 432.125 cv
920.051 428.461 915.418 427.161 911.751 429.217 cv
908.094 431.272 906.79 435.909 908.848 439.571 cv
910.903 443.231 915.54 444.53 919.199 442.475 cv
cp
f
806.185 437.969 mo
804.776 439.26 802.589 439.163 801.3 437.752 cv
800.013 436.342 800.11 434.155 801.522 432.868 cv
802.93 431.579 805.118 431.676 806.404 433.085 cv
807.695 434.497 807.593 436.684 806.185 437.969 cv
cp
823.906 431.766 mo
812.017 431.766 li
811.818 431.766 811.628 431.793 811.439 431.824 cv
811.197 431.438 810.924 431.066 810.605 430.717 cv
807.772 427.62 802.964 427.404 799.864 430.237 cv
796.761 433.071 796.549 437.879 799.382 440.981 cv
802.214 444.079 807.022 444.295 810.125 441.46 cv
810.996 440.664 811.63 439.708 812.041 438.682 cv
823.906 438.682 li
825.813 438.682 827.363 437.133 827.363 435.225 cv
827.363 433.315 825.813 431.766 823.906 431.766 cv
cp
f
851.453 424.207 mo
852.095 422.411 854.074 421.475 855.865 422.116 cv
857.667 422.756 858.609 424.733 857.963 426.534 cv
857.326 428.335 855.347 429.27 853.546 428.629 cv
851.751 427.983 850.811 426.01 851.453 424.207 cv
cp
860.368 431.35 mo
860.199 430.951 859.957 430.606 859.673 430.31 cv
860.109 428.996 860.328 427.346 860.499 425.967 cv
860.955 422.254 859.919 418.577 856.399 417.321 cv
852.882 416.067 849.012 417.901 847.756 421.418 cv
846.503 424.937 848.925 427.75 851.854 430.063 cv
852.422 430.512 853.164 431.029 853.955 431.482 cv
853.652 432.283 853.64 433.194 853.999 434.045 cv
857.025 441.194 li
857.586 442.514 858.865 443.303 860.213 443.303 cv
860.662 443.303 861.117 443.216 861.556 443.03 cv
863.315 442.286 864.14 440.258 863.393 438.5 cv
860.368 431.35 li
cp
f
1007.16 408.977 mo
1001.72 404.622 li
939.19 404.622 li
929.148 415.62 li
929.148 443.012 li
913.889 458.065 li
916.316 460.529 li
932.605 444.457 li
932.605 416.961 li
940.717 408.079 li
1000.51 408.079 li
1003.71 410.637 li
1003.71 446.202 li
1014.5 458.698 li
1017.12 456.437 li
1007.16 444.917 li
1007.16 408.977 li
cp
f
1000.25 414.581 mo
995.223 410.67 li
941.733 410.67 li
935.269 418.477 li
935.269 446.051 li
925.11 456.352 li
927.571 458.782 li
938.727 447.471 li
938.727 419.723 li
943.36 414.129 li
994.037 414.129 li
996.79 416.272 li
996.79 449.606 li
1006.98 460.477 li
1009.51 458.114 li
1000.25 448.239 li
1000.25 414.581 li
cp
f
975.179 423.457 mo
969.738 416.723 li
947.76 416.723 li
941.25 424.983 li
941.25 447.799 li
933.082 456.375 li
935.588 458.76 li
944.707 449.182 li
944.707 426.182 li
949.439 420.18 li
968.089 420.18 li
971.721 424.68 li
971.721 443.614 li
989.551 460.549 li
991.931 458.043 li
975.179 442.129 li
975.179 423.457 li
cp
f
840.746 437.252 mo
840.746 442.918 836.265 447.51 830.74 447.51 cv
825.212 447.51 820.735 442.918 820.735 437.252 cv
820.735 431.586 825.212 426.993 830.74 426.993 cv
836.265 426.993 840.746 431.586 840.746 437.252 cv
cp
1 1 1 rgb
f
870.215 448.469 mo
870.215 454.135 865.737 458.729 860.21 458.729 cv
854.685 458.729 850.203 454.135 850.203 448.469 cv
850.203 442.803 854.685 438.21 860.21 438.21 cv
865.737 438.21 870.215 442.803 870.215 448.469 cv
cp
f
907.011 421.26 mo
907.011 426.926 902.533 431.52 897.006 431.52 cv
891.48 431.52 887.001 426.926 887.001 421.26 cv
887.001 415.594 891.48 411 897.006 411 cv
902.533 411 907.011 415.594 907.011 421.26 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.1.0
%%For: (user) ()
%%Title: (set_malenkih_plat_1.eps)
%%CreationDate: 5/9/2016 5:19 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Bj2NJdOoo2cZRK^OP:]k,M0XHCa0MDf[sTIHeVXn"itA`QL=HoG^fOH4!L^T9+k'm0eG]WSbMB$6b,Wrlku46qt=cOd&PW#
%a/eUB*Ys^OU1kK7JcB6Xqd6gN5HF6B]aNPYgXSSGC@ue^m:t/:XgK,8DXV"Bm74!QGZd&(?Rga?;5;P<Z`r/^<)9JhC"#5tW&LH1
%G.1W=(VHKY5l6'n^ZeTK)?>7CgcsG-&nir`pLtL%2UB#4FB+qG9>gel54(h[oj5C;l.=[lcgtgRg@Sq>]r4kl+)%m6"dApE7m@d3
%d8=K%kf]KMZk`PmT.aT.Ku/!<O<4/eBHiZ?B;kjP^W[f$`;a$unc,N37fU?_<l$CJ1=+6@)08p.^bZ=X90ZX\K/k[f+EP1d:iJX6
%FrHWp`1,j+7aWe=b5\7:,Ap2%^^Y.u.QXq3__R*X=9q7.kZIIq5:i83C7O^5oLD(@o3pT\<2i;l[@O.3J$8hng9uYre.90D7auk8
%WqV?j*lC=tMjNg7e=cO"!#pn)n#hBns&ZV\YB5i#4u$T[0u-gP/-O'GY6N7Rb)ZgeB<"P34&Ke.rK`e]BNqoLn4ah(BXtL_^b0jI
%;:X\Er1IGdnV"QUC06FG&`U'DCs`a_ic_e[>]2d46D@X#HAYFhG3cQ#97<iPaFAHu@\E[,)#p43/>:qh8$.%/VKK-:;WDtrpi6mD
%YIA7^m3["MLOZH>Vmf2&)XV&-C\eS@NJ89l'J9eRGh&Z$obIc2pV1%VDo'7b@mE7BmC!7jc.5bhhuB,qe_5dUJX4iG$M*M1@?1@*
%s1cNF]eb.(J!);pnT4b^Y.+Cd)XWPCYdDS0i_H8sWcSXH6SdS#r=Ab$6>32_U1)Q$T5.-SgJ1`8o-iC+B`)oiBKtUHl7Fl1G=bVG
%L$ccroFDjlQ!7\3>H-&Ji89O6JG!!U>E&Q=c5Eq>+7u>ANL`"(WS:aW;PbD72]D<!P-@EHUiW`nXWQ\/fiGdDJfMZXh>X&6mO8oP
%M^k^[c84\@C"0>X$kKD3s3&2>Q2V)XPGhLI-+bH&9K<)X+g='RY#U9ea5'ANUg>XSFpG^E_LB,Q84F]mHSUfa)ukS_3RR%\h:?aB
%n/7cs2&MpHPbn#?in9K$j(>#-YL4sV@Ff4:P0,SF`49aYri?[WDq,A>1#q,Ok$bl!mkp<VFiY%a:;,A;p3uZ1;(eu]=67D\UJ^`_
%KMDmP;cL@#=]jRpgC\l.Y$Rl/hs4@4SbQQ;ZlSl>W88`S=P+SBqb\j$m:HTpDIN"0dYX@8EQc%;8G@Y9XDUHC(GE/!VBJ1l]mWLV
%Xq./h61T6Y+oUa*bH4k,%e8H<H55:2V>K;)T9]h*Il//sqJhXr8=1'18/pE`L8Ads1>JaQ;K('r;2\X\Ka4)X/X%:HTDf@o9g?o@
%\*",0p1VOuEONt2Q,Z(sq<NtdX\)Mq?trih[%d%7#7<[BLOs7$6/kZoIL\bF]BMfI,cVrYoQ+CR2k1RCD0FdCaS96"N`b's'$>c5
%VY-ah/8ZGm)P*)7JU&troi_j,d-,qm'i1;oljp[_'[!kadD`JS?5HKa)141XZ=p`aUN0K$72t(Hqg^BHUG%DV:C=X5H`pd(L[/CP
%He]+!O?@!?Bg!p+XGa>u%@Z&%IcZVq8El*]KbMDj@^N^DDpZR8+6&#8Q-EHI2U>V!`>Utp^IW'PCHeB]'A4)pkSGDqmR3SFaK[1.
%e*6##HL!*gbLeSWRM6rmm6S3"4dD7!*fP+_1i[g"(p(bT=UoG^UfFY^Fn#MSPbY"jdO^WP$5@*GgpA4\$g"6AP]LH1gekOImV_&b
%]AC.`_-E!3I2:"#?S%O2*+uP3/=)dEEjJkc(<cZoA%>%o)FSZBOI5`dcFH^?>V9Qi9KYh-c>)uAeCZj^eCoDtNilgn_r9LV2)!GD
%1&(OPEqDkm96bL]!daH0iH<ciS7S\&Yh/f[1?eDrQ.G6RfM/j4S:fX4H)t"_K'"Nn%XHiag'%A/I,ZmRg8fXDe;O1d8Ac1.okh_9
%8kO@24q"CdWdL/oc]b]qQAhC1dE%Lj<:)$pi#+OOksX&fUXEHJX4(rTXZTiIg1=_!k/VDBh<OY`5D<IuAQ&<bW70u?\jr$#ZraBj
%j2apcR83dSciBhW&'eX`^HnPhRl4Po%3pYRRJ'=.C#hTjb&\;U<^&A>P66gE9\d\@C"HSfXaI+(qj4dN4_5S@Pi$F+SXsV@,k."S
%Ni>5\aDG$k-?<#\kiY]$VG.0RE1B_k*1MLK;saFSk)o;b#mttgo6bj"Sf&Nll,M\`6rX?qB6#t2](Q%o1[=-`LV6TOnL#m0e6Bmb
%4>3='m]"NN(X.ius$Zd!Z`QHUl+JQ(*A=2UE<Jm?8T,ukTO#nB\C=O&WdK7uo'H)#:S$Ss.@KbFR;'s(I*TT@dR?A"QqJB6m<3!I
%)b'eKE?'8[l^5n*NgnAN9!(:uZbpe#8Sr@INd(?&=e'cN9$MD7nDAn0du)>PefU7@Dmm9K'>/CR_h"2l0P%'#VI#6f#N^)"=0SP:
%Q^RF@Rj,I[:_0&]hUo2nGE-aJX!?L8\>=1J!e,j(@'AP.pfs=HmBUWjnJGoJqkrn+Iu_D%.sJW*0Mh=]AIM?EA?LgK\`+,6m,g;#
%=?ELh>#Ac_C@F=]Gn*,0\kJ"38i[ALINH8O/sF0@X?&(AKBKq=0]?dRH'H2<f?%8*fB4gm>?r7bP675R@Vs9\?DgZ"7edhFb=^qi
%R[duDL<FRYGU4Q)oSZP"O[%+7T,/`rJ*(`Aj+^Ja;,a[YEob`QNfKUE"+ur:j5`:5k:)8Peo/+m@bRY'cfO"6q;+W%jM9<.qAdR]
%p[XQDS7O`Or/%jE'hF>+D.jEAdSNO_J&M[uLtbc'8Klcc\"ZKTnn\Y'X8#q2%a<@uP<u;"DWP9C9!p]n%aI)GcYSs!GZ&3t,7ZYQ
%?rj>YnN"TOGU6'3k-UcBAF#*NkW"ok<p_5fMOO^5>+S6WUt)9fW&4LTr5aEr=knJ&S's8gb:3.XNk4Ui*h1*m-H9IS,5$,N35%K6
%aJ.+_2fi]iqj4^BC[a%4@PFiNR>M!HHCZN_nfW!RdMK5^P\J:dk2NIVQhB$%"''Gjj[rD@49BchC/M"_W>6cj10;Heb\C"pm)uIG
%jmU&>7qcj1C/K"#L$>d0\JEIdofCWtj?_q.=IWGFb*9k+(DNNIcWZQ<&iK>CmQ/mmj?_q.kd[["Miqj/VHl6cCFr0O3n9tc60>1<
%rNA>[\V`7%\b>SA[)OBcnnLC\Q`Iu=[M)a2EJgg'&XU(d8ZpuT]jFmq4=Kfj0F&940MEE?nmm\k0E"TB_6RkNn`?BjAS.gkIR^Md
%1VK*,">d_Ldq^bQFsZe7HC#a1GO9^eCCrIIVU]9^m@UN2B$T,<En4i+D5Pk_d997/&NZ;pq=_1X,R4YTf-As!FT=B7URr>IIjRWF
%82(^PR2BL[`\e*@NWMC1H8en7T@S0`hUk'Tdm?.h^S8_CU[mGQ!d>]`NL.7SZ[Lu*&QeAiQ?oSI*S"A,Is<bJf%#U,rGo&r)76i9
%6L>t.EqLNNl#lJHc,Jnk*i58f8om!p?)'o(bWNDZ?DX(2eeH=Sb:&`1rRWIEs"2XUo`$Pk%u&3;(,EE+jC_eHR5W[\H@=92D[:G4
%;kKQF6fV7FLd)tBs26\l#t5R.oJ;i5^LEa4@]!Eq=51tp]18R\p>@Jbofq`J8Lf>"(qV;t"`i[\:<tD`d5M/e-K]L6^`ec?T2&54
%F!P$ecb_JjK/qaIS9;9,_82OI<7\2G:RY-FNs3(GehOYW5P;JTkD[QKZB:LGpu8\8P#q/ri[=KoaqOs&DYhW'IqRrZds:pSJVOK.
%NL+;@^U*OhkrA^6I?\8cr]<4ASXodmn@459^[+,C"P>JqEdEnT1Z'WU!)7aQA9R)s47f#6q>Rbgb[ENt7n82<[+9,W0kob.Z&p(@
%o*k0sc<eeO_DA;AL"26_d:iQ*0ku^EnO]>k/6;;BBFaB`4&!k6aJ$`]h'6s_oBohkq3:3ZBt(HA]W[Gpb)Oe"6^D7rAf7l\C<0Y[
%I?l4LV9*=`Z<<VIG(sWOn"&#dR<\?sa5&.Y/WlA:/WoG#+1IU9W4*^CJ#OC;QJ1.elcaG;=oN4M:[[;bAk!7+=3c2WeokL`,05=6
%jZiG#TRYN/'JoSIDE6Z49tAQ+Lb3jG'<OtX9;&Pdgp\fUp1Boc]G";e+6fs.eKJiY=41chbJ]&VLCD,%rJ@W.BU?iOC1i7*f-,L*
%Ma(k=UPYZVbJ?U8IS?5/SL%TSM3hB)AX7S/-!k2?QW`>0n$H%bZUj(EARRRu1/#8RE<J<q]_kI_ATE7Jor7PNRKV'1$D+DB#3hR?
%1i[rHdf*4%5"dk/;DVVGa!U@>&2<L4:#s-!g)lg*o3fT)Z&-4=`4E+4:#rL^Rss[JM4a@+OK[NuWRT6V_jVI`.9=U?DB*:B1!P[;
%bW,UUE,4_JA:B/OASgDn"fCVY!n0s3lg4;@g$;:p@afhN4%4KDQ!4(2fgfe[gTCAnY>3>[j\Lk/E94:0kP.ka/]X2M\^@3T.h<,&
%fmsPAIndP"9YL.7+!($K5,=kkeT.\NX![GmN8m,W#5E+[pNd#Ge$_'aojc[]#jp>7BT&a7qdL&[A$77nY4Eg!a)RQ@hdec;%OD%T
%f5am<WHJqB`m04\8X-D$/SR1!8*V1^a-]#uI*M4!hCO_-KjpK$T>q5?5oq6]%^S:;e4.#N:$-)6N*.33g3.(oa-bsCY"0VoT+dpk
%/%I.NY'YP>e?)^IQ,]kJ4\o4hoXg2+am]s0WVVORGpZIh=j6Dbc!dFbD02QAK;_ep'*erRT+l1Fp0PMjYF_#/b66:-[pO(7\l##4
%4XoI_4<)fh1q-'ArlBeYhKWKRPp;K8AY+1mK?SI>qm2'4E\Zjt*u`:siFhTfNPTH)cHrD%NpHJcd-PV@Z]4Wghr`&B#Tn3DbrfTq
%RnXBV*$;*D\+@O>mG*`BjWm!<k1QEN9)S#d\qbnBfu:"['V)jcOs^7%i:XK_@DWaNec+>MY?@SVLGHVmjib@.TJ5cP?H.+;p<&*5
%XOp0=3_[Li6L'@HSFmB05:Ekf^W8"=C<$WMd?pciY@K+H8*SEdbJZc\Y$]`)/=)dEEg)iY=Yr'qk%<#rZj/k&BPnU1rB8P5%_)JL
%7s!:d4No59GZnMkc:qY*QXec^iS5uSRtYpiE,HH:rM.9@7IqE#FSV#cp5mS5:*EmqA7d"@["WVjg?mU6\!"e5?h\g5\p^q.7nbU`
%OC@]]/ok9k^ET;$]CPD_bhgC1]dn(+hj'QOEn<g,rL*sH-BjC+O<Z-F>^q"NW)QQZ$3Fsd.b/kFa2;/]h-U+O,>XV/[@7lfjnuF^
%Q'%i3pfnOgg&U/=8L_5og!0QbiL?fBEon+(R<L>NXk)Nf*nRQ]DS,W"b>Y%,>\ghDHes%BK]*u9@^t3#T\?GIEk+2ues!u9c]_V#
%pD`C=kDSNf7NK%u%[4a_7jU`FconC.UV,?ID*A>8s!KXDJ!TfNfVSKfg:cVTD_K.P4Agb1PqtS)[@NZkY]Hb,b(&^$6*<S_UueEA
%@3n'f2gI%!I4Ek%8(bt.%!_e-(W&dP9,YRHl-8=OhtY*gl[O'2XXKN#2qhi#*P-L#5N/f+G+#ma1Y;%:kh?!b8!Pa.c>qX'lHC]g
%)G\](-i2p4fi.b*8ioJn/qnf2$C$%_lHF)./D:!ZDG:U.IX9S?,l2,GdA5DF%h<k1rcE_nT-K4T4f_9]#BRKNiN2m5$kCSDE2[mE
%rKCiXlY6ALAKgXmFJn"W?FM->7_QQ8WLoTFR2O$o<m&m/*:r)BmD^lA@@8"RR;r/:_QBdrOSK@.bVidUgNXGhaKpp::92ib3P+89
%m)Ps*i_"70213=)H@8e@p:r4@EEDTtU20S,[gO;H\\^Pb'n;UL=eXep4O\6qFLYI-eGmPePs?tAQN,/R?#dc_+B_W][%:1ahDl<F
%='/,bFe4r_akCj;M<j7D?.UGf0)nDr,\?2^^QGdg_^D)Q7ktj`_^cUkQXuTk3no/5IFq+`rtTuninDr6rAXXt"jTYf_Z--PQ%5V4
%Cs`0hHk#jc(D6T#hFp)5R<^uoHR8W)IA:i<-G4(kFQFP.l_^oD+%>"FH?Xu:O(mA-IcW90mTtb:UfGKugLl2sk"S'P>#/7iC^aLt
%h(,HoXqR!6rIRnVmVMT=`b(EH1\:GnZdjmJLN&'%G6IWOPud?%c^,?COQWfQlJncq)GGS1j6%E./)a"A-;E'TSu"Wjm1,JqPo>Wb
%K_+*ll`A%qE_7l9Ba$`s&Z"0X:")((Dq1#3+Yh1EkhoIQ[6p_Y'/b[T^)A$D>P^#Qrn"1\rt`[o4,j:>GFLh@6459ng4rO6[6*TC
%'OFgDQ/efIf^@=(N>MOqOC-ThNCNkKm%8%(hek@od!l;NP;,9dQnK0(Jd@5"E\7C#1Y)d>c<B0hQO]E!s8Rhis/5haf<7E'hb)`(
%*aT!<OZ^?k[Jt(5^EAb^T84R=Ut.^Clb"E"@@>rP2`m!IBk.pdnXm>8$3,?Z!G%Pr;fpj2F+OJliRtY2;.7iYX<>;#^@+%q7=U]5
%Dn.M"YY<XVq%)'`$h$_*-E`kbrr`:I:4I[:fUkR'_TTfocUOW%Du+Gi,!n*;BRsD7%Q;o63<Xmi<%k-%:8JQqqiN#1F3)u:L;?N+
%4N"s$*ResiTGKY_@5r#$F.[ViJ6p"6M.7_NY^$0i&2a:%^]1]?*CmcQGPnn6qDn#OgiN4P;0Y_5\,+0BrHD:@C_N=fN]"7Ybo([A
%-)i`s00,/Z%KEs4UNtL0@&X+'/"n-M=Ym!FQeU%VP9Q<5V,%6)IIJ?`J6VQiN(G=GAoG`fI(&^B`ejZj]8$,MZ^bT=DBGD7-JUeP
%]@6$cr))_PQ7heAW%ib20]l,2e'%a^b*2+phST$-/hZdl[RAQWW;h`hP(R"coD;I;CocC'fPRF-NHXtO]'sPa?:irE=#.bp:5EsS
%Z.fNZp:?80;_H25Zb$n.r1@$t&-'_S(=74cQlL?O#JGSu3<e^:;H`X#Y6$?f2O"nMISTi'jC[l?!j'.`4kE>kHUiQ\!InGW:#9[8
%X4Kk$0D]QW1tdj<NUo%khhFp`b$GMSd(0dd$`fhD"[Aje-e#C(qa-fnI<q8^Oa_]QWo0339>nIOm9@M-J6h-MC:em8Ar#b;Go']4
%;1H2^5JB,#b)7/)1c:9rCIh#JoCnWM_il2F2\kXl7f>r=>c_;:R.,T3bfuU!PN:^`XYk`i=D1bT;,dWN^=<EHeETYqVHHI\1#t;'
%3ea\.lZc5dNX@l8cCbjBkHJdV7Qa/B;_P.ONWN58NG^e@Lfh"33us&U)YI24CbK+6Vc'Q)b@e$-m\dR\2@H?I^KoKoo_MForh!kK
%>Xg4j8>4mU2_+d)5cu7X!*!acEi^CW6Wg:/qhOQ2[oVF2h?t+,+'^MjBo>=;p7PbPm^<d,Bl1aSVp^F5KjMGQBV\Y/WEqoT5#1Z1
%PqK5cdm3RE2?-H/`7(Ih<"1tA[GA0o0FQ\^AA>A5EApMbpHn0C<9'TQKLU)qHrSjf:"Lks5:X@[%#qX=g$(u>W;B(afT6$s(Y3Bp
%Ic[fjW:te#8DZ>ghk4iO7kNFN*iEAlE]T%J@GNT3hFYS7]X<ILL_t!%m;f)Ap7U:d:<D7E`HK#PdA>ERIsfs`+'';l;.n8>S^hp#
%G'6F='q%U9HBg_[A-EIo>>fo,Aq3mi@V9?`lX5cA;XU`sCXH9g@`YY<7?(rF5*;@iM7T2<*re@Z"=@upg=8dtgQ6-O\(CoqR!M:4
%Ja@,=Z/Mkk(%=Lt/,CK*`*1aaMFLHmS+!_k\M7bS@_R(+F[9L5Fc7g>$:bE;<*K6HJL7>f`\]NZL86I@oi>&Uot0V?-u\E8EHB>.
%6*a?L[(9"#2#eeH8t+c?H@GgrIVK)4C!-pJBrp^*^4\,Fm,B,:QR%e4YJM+!7q>Eadtsp*rC>B)i*>1a7&u;nLQheE*.O*b3$tB?
%?02nQ.Ea=bOlFd^9BYHf9(d;Qfc(nOec.[klX*[f,AEW>Q=-jQg8klb7?)u\b]+l@ks`MW`m2(52=%BuG,paaQ7<-A)=:;7SYfMg
%7CCsR7C=l0<I"#5h9Z'AoDKGA=@qc-c16@"nkIr#[G'k?(@!L.-rk10>P./k<3$OuRR[0:T2E!sJ^!fkl;\KKfQ]qd#niLAD4TR/
%`&4dDRUVcB%,6`Jh,^hgGGaG4RdI!skI[2J6Q8n_&)N1;X:EEAVX=)]#Rm,ooprdg+:MF\6l?m6*7>ZKNQ9N1,*#;NH'!b;&&,F^
%Mm6P8kN7$AILN\3dgl]NJlZ/TgYH2ck/r<-V2(Q6:@"H<g60nmg@;=F)NBl-)/4o$#7ZlT#)oh=EbrlYJc%WK+)\NIg',`3NUGX?
%/i8QH&>N6#5#alZ1ZCjXHe)4;f)*]!<.*8B)+Tt;EV$P^#_/RsFAs7P,#USj?>-DgHLU9-&l6OXjI,D)Q0r@)Uj]+R@bgs7q][A>
%-?J3Dl1H"7RZ,3b9\==^\7i&!Bqa6@D*,-P\PeDfr`+&T(QKuc,AG>@>MA=`<P.i\OrC<FA"spQ7;M7-:fBN6'f]e[%*iUUaU!mh
%#&7.VOpDgBjPRm-MrpFk9B1K5UTN%UTQO=?`VBn-p/r^e*[>*q'b5^-b$FSB\n<]9qR=It'H)WFVVg(//uG0JelLD`0,e`<h$=g9
%1QGQjd+5V'=$LS^Mg<A.bX7YS3d488fflDp/i"09L3oYl/l_8lr>7u6d4I9*)!@tIeTQkZ]oPk+H$Guri^o8lWh,g6\6CJl]6//D
%.bPYYCs+'/pF#@rIti@)iF_GcNJSQD-U'/Sc[i)nHlUAmBm__NNgYiL@Db;^^pI211o`dc;-),Dg?P6PbLEItDko#8fiZ[W2(G.:
%jA6<36\'#R`,YO^8f>m".-3LVJ[q0sDbVq2BhKH'YP1s-.U)8.(7"MTI#oLWFH2?qW)9tWmTe6G^/gf[UPmiK[F2_rk=)-)YgWIV
%VaEC#(UrhuG[8g$2`3VN)/UZ[>,Nmmd9'bt3&s$7oo$5t"kl`jFh1*1f"%dkm<XE&6mh;@]@A-Je+Cl:%IK;X$((>_2Qc2QJm?@l
%XUrO9+5=DXLX;,V:[<V[)CEJ),RBF^F4@F<;P>Kc3fdHX(%m\2C!le*4W6E=:c!Tkmf0=dbiWfk'`Lq8m\jdeT$d1TV!/a+Q$Lm-
%=QB0.D(+)B$_!6p4+C9VjXSqCq2CX,:A$`/__$2tD*PM.%J&UJL,rZ!JP[':b@*-8g!QHm4c`aAOifTS7PbZ%D(D_hEqXNKZO>fK
%C/al$k2$gHMM69%@:?94Tms36qqU&?m@E.t$\)8k`G&';lZDT6S3ol-&966)kA_B#,l,Pso>eBO=PC(:5=kpjCcGdZgZnmRSmcWf
%I+qEpYGe]>FcW7RoQR]a!m)9Bm8dukq?iKg9q=*LMj^GHia,h[(R2MZMbcQ,HC7qYaU.$qC:$pRR?AQf:q!W-BoOP9iT,*;s4ec?
%Q(0G-f&Jk]Bl@j01N:N7't"/=eTnHKkL7<=]17(3.dugj\*n,dY-)l=2GYA8[r+=c\8d#dmTR;%m+q6h4BqPt5$WC)o^PT;aht7<
%n%N&k%]]NJ](IhgD*#s:_s!B#Q&kAQ[oSg/'^r.Ths^2<H7u?)1sO1ker=S&l?RmPpt=u8Q";>s>H9u7>V-bMGE58Vg8]Ro$2sG7
%m>(\]Vu?1qc`>@3`VZKDH`L6%h!:R`4SEY&2Tj=IGH9U>GMge)jWig]iRlOqq;IJ9p@Y?@9D`MD[qF$e[sRmqAbgH.o?+sWZ+3]F
%Is\CSpU#*3dkJHn^)h)$b"&)]q5]L?`qtN]X!dkR'E=hqTubhIjf5laI:`5rh01Uc/\8FbjnMK<rjq^7]NO"%Z+:d"]2dQh]\/H:
%]W]fh1ema^DP=XJF^NIsSN$jIbGEteSV>TqpV/>^XPJ<2Yndf:4b!;+k/gN/=ujQ/onE(6XV7,V1`fWoDZ//<L\3=HCTEHL:[TiY
%(OdHj[eB-:#6OKI9@$CMR`8QXqg#$fWnqSF4F4R1^i05OW:'NnH:N.X>MV+P:*5qHOO`pnhHQ_EIlHrUfgb@;II0=S2VEKRBQ!?h
%[+b"nRY&G4XkP@AS'*bJXksXp>Z3(iIe%A?p=J#*(7*k/5!?7_Dgphg+1H,$8rpZ42mFs,]Q`5u(.e+ColT%p<"/W3[UkhuDn[be
%W%?iZ\?YP.MeP<On:aBk-8^^%ptM[`s&aNYZ)mq.I^f;Cg99=>s!jdH+082ri:k7.j2^K[Xn%\97r"]@O-Z,Ihd1`ih+UjCj))!2
%nMJa1om*ircfl(d\OX8F'fc\DDlf68R,$f%pVcScHJba!rURFOo$N(+hq'BD]=1hS_`+d:S_NVjPd]1EGKNF&p$XEg5<h9-Bi^c8
%qZfI7O'_56qLQ3HG1CkFg>46-HZu\ps5lIH3bmM8hH2kNB+bXqJ+`cr>!&9/f_aNQ;;0m<pL9m[?[EsGM.nOc!#FdBMQ[hf]WHPt
%PTG0;AS#Sjs''4;H%.N*g^nH_9#R4h^3_(GC6'WRHOY16ej%`'+'W*=T9P=phcFXVKB9;[)eJ#kHhS=WgYnLXrQ5aShqWH4KRKG^
%oEIu:@&&qNq:=$C_/kh9ApL)VoQ=[3kXDae/FS(qk&5ZNQBbu0iXL(KBOgI*B7B6dgHAhLfICd7r(;#!U!:_lDnQ?E>p8HIhBCrt
%cEA7\XS;XhlC6Ums3Z-O]FR*M)K.Eas7UP_nburVDHk!,kf"H7;qc_(>9IMK3%V7NI5i7V?>cdNHhtQC,2l\6%-snaEg2"K3udcQ
%NMVW?qpASlr:DLW*Mo\H?Ibg1os3neHAgNr=n`WTB5d81XQ9[o482djokVh&7dFp'["%ZG(6.in+W6rZI_Yj(g:4KQIk'h,S_U&Z
%TC8k-$X4uNFj?>7mQU5U^$QJ1M<f*;5DqB[c1'`a^:gdlr9-<9rR^V6F7QL+k'"/!D0Mnb]DniBHtt8cZZ]"/!iAO.[%A;\X/C$0
%qSr))F&#[,+*[0RFL%!Fd8[Sh*"LQ_*drO)>+VEp_9d7Os-OQ=m>Wq.^+LsRp5V[n=)Y[Nk+M7D[.j7hReelmI9g!)[T91N?f.#1
%fXeD(IN0>lp'1ChqC=LZ:*W;NV-A@m8%))-e-@(]T5:^=I/cXsVX_>!BuP<Of3G6Re5hPFB!!>.4ob""UqbbN-<OhJLRH2`g]Q$h
%9e37,Mn.lU\E>gICHgO9:9&Y'K+'$#FZ-2SP?n%N>?RDn`Z6p2Z9YeF#NBHdjl%r$jX33_T@V/"3O1!5N^od3n2,_G%uFlBYO2]j
%NQ-552!@+sV.@ukZYh?FlHjd-c)2pmpZMMBASUo#$2s$c8Z*o]5PJ_8-KO`5N<hl!O*=sMUO4Me`5ORdh&=&C5J%e#4-<9Jh09je
%MjCBsIsN)u.ROe^Qi9pNL=lf1O"TECD";BMiuiij6`OKLrrd90hOMD'kO?L3)d>@0.DLhiMgsZ!`mIH+AR`RldBH+#Z#jO]dBHY.
%9SkZd3-A+4-=^SQUIhL/r9835<fAE4^4.\SPAXNHCP@-Q;VDd=`efY;9QYn,kcDpJI8bKF#!YcK$^laKra(]83%`h^[$/Skn_/K3
%N4^_L@3HQ41hNBS[c>+>,p4DAhYfV''Ab8,^O=M`=LfC<;]Kael1Q>Q[E*Y8Df'lMq;L;PNI+*]2'Y/0(rRK2i[s_6b,6cYDSA,;
%X+*-3=g+EG^E^0]o.f&"cIq0:mY`X/j)>7N=uPC!V3[/YkF[Q+\?e3qHYW1.nX+<;jmCm7E:%2?qm$(Y`V3@QV:C3s[+d'KYO$]%
%*l>I)X>J2g1^b:,4FC]s%[IpGDR>1KIIQ"h-ONi1G1N_gpE-J_pT6k9ZnthpO3>qaok18I`=CDh6($(iH"XksgKJ]sHPR=1+oi)l
%)snkigI;BlmngL4p4J^D^R)/Y3)J\Z]-%'>i$CnS_@G)q(qepc>[hn2@FR^g-\6Ce6N2"o7PI-'fR9XjiQ^agjYjf%^<.L78ud!3
%CDV57]H'LIc[IO^=S;+1%.f7TY?*pD>CCqsF.Z`Lj7uX&+%%M@<+53Em(Fg52o#0RP]@$l5WlFXV:II&D.@@r[/K+jYs!rCn7]Cr
%ZXOCfl!r&OQcR"leV8;GM.6XV-4LJTQPs_-T:Xo"8BtNp,Q1K9^[CigG()L]_hBE"<Hd0"1Lca5]1Ua=/aYDr(9%-#GI+mXAD::5
%F!FZCm/F\Sk]Q/qO;tJgT&*^6q>J<#>4KEpbQ=DpKQ%N,@.j0R!X1&87nt6V%hUaJ=Zs/6h+3#dGi![ICGlT;ealH[mB(7WYQ%p&
%7e&FOI(jfGA%aaMGZqSoAg%"os42fuJR@5Z^A<.gA]L8>d!V[U3r![+o_R+p>D2)-&+@6cMTkHLL4;6DgbH5u`Q$B`G17P$3Yp&8
%fmi\E1ekiT)_9b4aW'F%bBHa,L*bm%dT6R%CW95][]'_Mh-#07l3p]&oDY69NQaS6qGIZe?7[EfloX*_oo_^Ylh=Jl^HI(TEGtij
%6`TGm"[Mft/M^D>)]K%R2bnn(]s<%\V7#m^otm8T-OY9DZA.<sAp6sNO/+h./XE#QmsS3+2Tds;efRQ67$9@$jV).I/)=Wta>o`J
%,hYraPimt0[M"BN7>pQ.[<f%EEVa,6'0-fnhq*U;b`N@]`dN8fN-Qto[eY%47>%'l1kQaNTEXIBm.<q(5+"4\b==3le]P:3GX#fV
%\_eg*Iq"YoT%t+@[+N+_\0qXcagSm0j?AO:hMDrGT'\XBD%q1g)K`1%^'IFXF1ur6HsT&4Er-M%s7jUVpXLp<M$Z78\;ta9GO%.!
%,M[q]3aP$un?JSXCfl1:iXfIbn?$1[;#\(nS\;*fQ_sbf]cO;*ffhM@O(AX/k@f=X\mYGBEot6jU^Gu_iZG,pm@,WL:YskUD`6pR
%<o(7RMl#&"G)f5-q[4@)S(g_'ql?W,XfFN;@UL6?-uXRg\d&aVQ^a)>?JZX1r*]QMXhB^HRs.&\O,.>INSrCdo(0Ef3Hf[G/\pen
%na097N:=<QUK`'m@qKl)XR>f5([cQ=]"Q"1FUhHeXLu6smjD%Pd5E*(nG6?.#RXYhrSh;K\%=SXbth-%eJO.bjh1$)Db!;.lZZ^N
%,[^"hBqtUbftDCHA_O[&1sOJ3p8?foC\@Cms/NZ;4k+!kqD*QCH+/R4NgK%spY-ca;Nn7dg2f2:5Ag,_h*nqoM6\#XV40WR/MBo<
%]m8VNJ%G>gmHp)\##T"Th&E!-V>e2%42(2jEuWY+7Zf+s%W;C<q8o"P.$C7;n@V71hk)Ke)d@4F+KLM"Eq;crB^]_`Xo@',Qh]=g
%0!ua=[`:*8mgXM[]3XfW0970AV<s'(034B>41\Y!f![]MdTm7dd*O9hs)[R-q'c1;@/XTb^GA:+n6>YT55>7e5*XbKg\3t?/B];F
%'`[e!FSW;F-^u$T4FZAEj1$?s/ZnK.r,A#$ab003lQ2"lBFVB+B/_d#8tV/'elIfTTA=g(DO/-EVkroX9)$'%]\VJHCb1qMg2]_;
%hu%?QiOe;u-0TF]30cL9RWWEF*q'p8d`tEj>fH`dNjASinZo^pfRN`+p?)7mV%:[cfq^LWHV!\A-6Du+BBAO.r]hG#Z1iWB0(.:+
%=!#*PG,fiUoUgR#[uJt-3k@oDp3Xou;8d45lsXK6mPZ,V6sm[JjGk4N,1!\&j_%qH^%2->NV2E/>IWK$7t16Ig>%/DN\\lFhoM=Y
%IUi[uadaTPkM.C+DZ<#uBYR41TQ/K26ufR-q<QMa)`M*)FDlWmQ]KkViY]B=ac7Fgj)F5\`nJfR3u+MM^4F>_,CM)Ff>arehs,sX
%St;1=5/&&"h[t0t\ZNUEfLs4ig6gWr]gDer41*!(EjY`JJ](q>N=h@a,5^6PI,K17hN>/:oNQ%a>dZ"!Ir`-+r4$fH(WtAlU;(FR
%1dW+oq]EMlDk-K`]D1AC</*DF)K*MerN]l!O#9hMD/?W2X)<im?7aB_U"A+`^\;c$p>NnaWEhQR4(B2'reo^91$6QV16*Hj>d2>Y
%mbbR;94Tj6YP.*0!D)eT7\@VE^K!%j-QB7G[D!RFeIPrp]^i/q4`5Y^%7e_XDL2.fV8:35Z-0EAkkW9^)M,s<I9pdc/%7Ld:^<^9
%:+#mc"/q79LPn[Gh#peB=7Pk7]Wp1(FM87(q&6/FVYkE3cre#_qtFhr:OX]L.M9r_DW7n@..+IPqW7V/heTJ!FZN'ZSZt+9c(4Om
%Dr,,aFDc1Zeq;dk_]HnnB=h@f:+mVFn(aW#rgT7c87T;aQ__CJMnJ#9jr?m$l.u3Qp>#nHiKqOTg-'mVo(_2[9taCD2`4<nbl2Kk
%\Zmlm46XSWm@>hZOQGqHYL^UpCg\#"pHF>2U4he7<fcBLc[S1_oBJX?k/1cllc-%b%N5j?;OCd#`IEBM?4*:tqD_#QgmEH&piao0
%e*JYT&+;=]leQi7lGqeOls?uPISu02WcLuD%Qh_"KjaTNnTEq23Iu$Wl"CWNLD=h+?MT0',<97Gc9[cV],C%!1VU?'Z#WO^^,O]J
%?-L;08&e4/6jYN'LYc1pUb'83mG2-C]fEgYb"T]8\m?ETG#/M]Mnd).oS/`llr,E<F\Z^0n*QUjDZg$]g9\2N:UT'kK)N-`r7_-J
%IdpnC\)c=i\/Y@QNQRgbQ)2fFa<U@b0,W:=mo<9^+&Bue+*C2f%JO-t-!/s,o]G'2<dsSo-LSXZg)6eoj!'#EO8f-pTS9c/hT`Gu
%j^Zp>D>F1hpU^+oqn7+ZPO<kV=Pfu+VG))3U8DDmUi]d9`>gs`(*9UQ^Ql>HJQD>ec/5S0Qf4rgDLGY]1SPCq[Hd`YX)`,k[BXE5
%5CNS%I>dfr^RF<bUrfYjLP(SiT*HaBi4-tHdphYB^;HG6Dn*WE2p..#4]m)%]DlKGe2f_[-$h1"j;4l=<`,pPaGg"^r7We+U>^m^
%UuG\kdU*`e]drKbnb5uQKr6HY[Ku]k]1eY,PlCN>Cf\U?Q&Og+*A*DroNJr?]O/BSIo'Fbs5Cq3.Cd-Lna=nX%81Qt-_3^)G_;7H
%[n]-<C:1GIiYg$IO$A.-<b>(0Ij8/0I9NY`CO\^-qdBBWm>^eC?!mX&ro=OQT#D4Mg4/ePCk);YPg.e!mq3-E1#H>QY?/D_GP1(q
%I,/^X^0]`JI5m5bRXB[Q)g@.>Dgbktr"'jO3q)E(N<STSmN7ehbIr8ZpD9)BO!oUOUZcLHbYFOaEpjV$k4%?oU[mUELRT3o,m//^
%:H#.seen,H[?Hm0@X5;bp27q\0W`m@hqXTGYo7"gG!=c$CF$u3d(Mh;e.JIel\GB'DQ5$>;h'HVnZ9`umPpX*1$%s78(+hCbN<FY
%Y#i>d]3f;9\ZrL2FmcR>U%l>!r5Ok]/he@Ei60R2p9S&niVPQhKMAhIHq.X*V)Otb8.`]=S#7-QfCSps_jd9><@tc?_8?&lKoi*K
%iBGB3IW)prp_aP6k"b)?ph'KRXml*+,&(681Z\1d?V:2CeNR%0Iui'1712$b$el\dl1GBpIcs2"1$+PYSaqNHIYq>2D.tqVMcUue
%].iFFffQKcZb<V>FR3$,LgCQ0rHb@RQ%n^"??@oAmaGdC1#V?sG.6tA0)2-SO_A^<VM`6)<Thkd`iXG7a3j&FpD)\b]@$.APhtS*
%K07mdDk0t#)RnPkeslNGkI'D!)ceW%$'AB/Wd`@_io^.*:(HoZX/I`Xm[k'J'e8%<cp*?olCq^<=:l&NpBlDA7'-N.aj]BQ=p=9l
%4SObZ!-Q,38e4.`bT&js;CoKFn\FeST(L27r1cD'F;iZ:h'th#3e$%!aIpS=HE0k\8\]ksGkVS&EABe;O>$7\(oS>fl?l=?;J9%*
%h[_g_;sABBor:.QdDN$F[,B20RBOc0K?;>P5,._#<o#r3(KBi<#-Ch:$sl&KiuruH16#Q+eiO[IkJqqT;<dc27>GgId@]U2[Y3lN
%)nd<k!l!;ZDm>hK(d..k^XB-E-9/c>_q:rX`4;5=HbjQc7&!]'\$jiQ_A-jONk?];O3YFSnImQhN5(&Y0BHcWeZPKcgWcZjq^mkZ
%SlohlNh5h.%,P3&olm3Z*a3N\9oO>R%D%M48EYG!DoM>iGC<!5TZ#u*4M3IfSa%Bl+0R<..]r5!m7:eZXe2YmjYA_NjaR%=f3&pJ
%L6_):-n"cIo93YjB"?b%h=bQ,oS8FOAW=C>+fWMAG,r@c.cd%OGB7G`o>rQ]Zds$El?Up9Yl2<0XAoaQ6401UB4&E8GnIa@db@tE
%S^3\cJld*?'-`Ff14jSe9]nSIF=umP9;N`tT+%0DX\-9H5po=XR\b>:<@)K>]YY%F>9fhf+":eIlO:`jL<2Ao,JJ9P:2\fH\Q%;X
%mE;8m9@[qWYgVF/r.qq0BV\JDc*C1Z\S#$)I#iZ7]k*VA3IIHJK9.Bdo$;LR<&[*g"E-\Js8;i$+h=E+`Q-<,Bno['ArThj5H6*?
%Te9;(j7h4EH`'^'P&hK,kGYQ\*p:h;Aa@!`2WlksB3Y\ds#AeZOtk6Zd"Uai["jV<ItRLj=3Z23Rkg,G74._%`V":nVW#\n$?(_g
%,7I-U2Dl/i>"\qBSDihE]qNfVdH_ULm6M@1`RbSY>GhXPIV%jJ6GkbHp0,QO(e\A9f"T-[oV%T*ps][(m/:/c>RYCQq6l?`4p?W>
%qI.4IJc^E[W8I`gFnkETc#N'$3FCER0c>f0iuZm&ZWSW\8F$@m/U/0=eGN&3IMioIJ<0<k=,>`5M+*Xinb8&mk*nIto*lq&A9O+8
%gI,!9F%a4Z[&&4Is%7`(qY.`/s8LW`!O&tbV3\C-d.0OGTAmg[Q41r:lR2t/jZBXAfT7+5`R)',_P6?!75"p#[I#rm^^hFe#!pXV
%9cqhd[ScZ:_]+2rIaPH;Z`rX2B$kal@;+R6D9!BijVLXTf!OXp1i;/1!qhFgkZEA`?QMcC2tS[,TWi)5[`'BH[_otVD\-f0kSC2^
%)pmK.$)gdEr.+Xl14@KQ!MV1N/]+gX\'Xk+&Gk*Hd8D4/%3;cgWP2-ToBdY&dcO8s?:^G%-7t=61EFY;aG#qVbmTWtS"\&A(N%?-
%.bM_e1sjSPk9uE^W!aMum0Uk1TaGSNQhDOU5qCYKh`"i7?ii4P,&q-9qdgKO-_rW2+Ur>m]Ebl4qdC%%ZV^"O97jS8\e_!U_`FJa
%gYlaqY3cr52^"!i-5PtR=X`f/0r0:+e1))4S-a=4&g\d,AMU!A*Ejm:DN3[O@JB<?4_G>oq#<2.A9G:Z,t5/pc9,j*Lj'_I!n5QD
%b\Mdk=V-,ul4[D![V+'Li*@^B24Jj=`?*^NcUORYG^kQ/83c;IXg%$"G%S)aPYB9uS3hY`NM)An#3iA*d+"pe5Wl/PT%5O5/08U1
%fBTObke/pLLKFY0V`Z>;p2Q!V8Fja2`@%d%6amVRH*4&eMcU=W^`.l/,Ti]f)'B4pr#cu2qF"#>!+HJrpVL#R_^s.n]OFE0c;9j^
%12'T%I?U?!5TQM(84jlMRt1c3I$`=slN7Ol`_]j?B<'c50bZE69$qY]<YQg(2RYaoD<hD"!kEuV'j=!45Ak#TY1&DV[Va3<X?+FN
%,De3=;*,7>QpIEW3jQZnk1S7:E"593R&mT,Df*f(b6/u)'sRg;eMk#l/X*8;+S0&BXIfc55f[!j&ULO;%;BJZ5)ESo8rT#C\e<@H
%r%M15i+O<m6\\(]k8950N._:]:^Th=%uGdGBlI>1/<<o_n3@kToUR.O`Gu8"LUD%)C(],>VQ24*.0K5KgV@b@S)_!gF,Q0c6jd[Z
%=LN#s>6H@O:p#fo-CG_"oS0"]=Qi+X@>QVaR$AKs,8m0`e0SV`iqnM,n7]AHn4O,5.RtE/GKtlQ-Lmeq.@'-6%?je;/7;[l`U4A'
%-F!k3X=LZ$6B>[s:u=/uA]Er+`-?s3-\?%EH]Ya@oU@)fO(?(M`@0.g`&j9,AXS-LOB(d\%UpX`)2^LI8o<1>qiX/'&]*7oa)d?7
%UD.!iojK0=LF44u92GDiG8,BBCrc_R'Ya&fZc3hu02HFG4p_:k#hLkiQ:XD7UihL(6d&l(N-5r5)LLk6'B&]C&CdCj#XiOh,Fl[q
%/06(7SnAR"a_J=ZG4HgC=Cr2=:I5l=W5Ngtfp$a7nXuKE$"ZKF4+_o=rP0&'3q.k),#S)iHmgq0<FP7*&]28IEQADOYne5'bmP-l
%)`K$@?qJu&ED%J/S1u^?gM!\@R)X#J124aFo>n<H**5*V@(u,$IG'26U&bA6%V)]%[2mA,aGSCn-]2RMCDm4WAAUkV`Pcjl(GcU8
%j<9@q7XDia"g:9VY@n,:[P!r2`at,pHV>XG%RE\D3Y#:Li[?n=5;4(SlOQ;'4HhmYcV,O'i-SU?7OpJe#BJ5;K"<9JFjYcEB;#oP
%>eN"\f.TEk&ZK$inV8*s"Ico4*a:DUS`<H=-$%?p4PG#.K:5RTP.i:Uo(:lR:r^E%TZS]V7S>nRAD2utQ`NtuR,SmB2M1<BlDfA.
%DJ4XZaF?O0^oE:AWs,9eOpo8ud.UQZKL8RFfU1dZ(OF4A1FYY"#=aJ0,X8HJ6:9tk8hHl9ZL=Y&MDI`5Kffp.MB!@?A"F-i&K*ti
%$agGl!:5,bX<bJH:nKiQ_[Kh%g5,F8+b'Urk#s!+U9/3?":HPN7D#@6`5,n2`Ho1.+YOTRcU0t]Oh^%_L9jG7aasj%=AW00Fib'm
%gHgn97f)2n(dS?m&S,:3n"b&B%!<gfa'aY<Wn$f7b<,Qr$;slaZ0J<WOUh$c23\2=fcn]')DEb23W7T@q2!I5J^fe&LQI]bE-Z0P
%!$[#?Js5.,AY:j^"5N6Th/T_r7A&6b"/S!,%5%8c&Pq+h(()AU.D6+-fa`CiT:r-8$R(^"aJ$3UFi^Zr(ROj>O59^JMMssI=[Yq,
%SS*!*7B(/`2T.Z+a60Wd!%7_Ya8c^T4?;?Y&<rL@#Ai:G"O0PY_mb4@dXa5Tkcf;o7:GMIJS$_qq%=s`B0ol38jU=7QbjGpU5Dpe
%\&O:'j_4%sAP'3?1=9H'V#hZ^QjFJ<dcSe!f972%R/Rdfn[(Z,0K.iDPW7>Oh1@O)0cpdZ2K'"%*f'4;QJN23KFqaLdm2X".5Y=<
%10f^V#elY'[uko4G1S*1M9Jm3HVJsaiA.minh"<qQaEFGEE7f\@2ih7L!(3MW(q0e_:,HZ0DQiIJ_18`T1NpbCI"KMK>SS#0[o4!
%Sp1:sqcf)Z268-"8^W!S6sPC*pisFQ\YOXZU_FF:E*q?3_rdEKhHQ!lP7W9QJ5?XeLef#%Y/agbp1\3Z^@)<T'8D[T%1n6IBLdNT
%agiuI!1@tn(ZHRFbEN>^IY<$qTbpstM[TJt1DD94b8u7IU^a?Z&'fj>:kjNI.5u+Q>Z$D`A,#KE9-FiU9K;ugJ?5RlN'a<r?.iA9
%drGl%,\'Mqm/%8kcM(RBd`(S-1"G[D%00>B4<fi"R?jU5KRX#m(aqV7bV7^siA!*YNoeD/IMge_T<;h,Kc%0-kXn0ZbDOEQKJG.(
%&K7fgG0##I,Nqr(@B^>K02VemdMj@""4sFf,G:;\1Jis0D,XCfEGoO$%.o8,<LE4[S.a2BUf^0>@GaaO>XXi]Z)te\JeI)uMif;1
%E]\Fu"=9[kW1`-4Opm*j?s#I7]F$,[IaY!7kTKYAeY[]?B;P]kVg'+lPR"9^(=)GeQ,Jl"$7QW`b]uC>586P(aL!\#.].cn=Do%V
%U`Q6]_o',98=rt93YL1V3"J1Z:pYRWT@LiA7c;6\^Lq$q!2\Ymkmpo+OOGNt"<9#8l7e%2+*M;<c#k<`,\h;9XULGX]VZE*Lk-#c
%8(!_anB-0VYWNbSOrG?4Urn^Wj?91;=Ve;>kTk9jT\Qq+P\B;ai]auJnc1(mZU?`%W)A\&l9Bh\1d^Q]dgf4L]BBe<3#/ED1k"O1
%#n#dB"qZV.8)d%UPdZiiYu;[15kUlT8<LrlE0o:)JJqrri\&,aEJp].1.V,dC8#l(.?s`Vb@VNRUD60K*`<Ej?S7*b0h@"V^16tb
%6R%F+HMV:n7*V`ZrYWf"28>fD7LL=BS!c/=.:5ZK05[(#&J$gXm3QL@A.'t7C,cG*B:Cbj+GQ=:0ni$4^F;!]`>gRrptk/3g2N3b
%15BDYOQ/h?CAZ.t?oQta6t1!pN/ohP:`EPR<i"Y9hhctPQfG+tPdH%g\qO[d1lduo4rAZ$$E,%u[XM(/k;^Hh>gZKoiXBjhE`Xu(
%a;u8a:n.T5qCX"TBA/c5#7=3[`*3pD9+E&tS\lZW?C^EKZc4-Ldom7EAs7s51kk,8BE;<>?Wl=2X=TQ_9L&WTA:u+f*p5q)_%b-U
%gbnRh2\IWqUdA$_(jJ_%KY*gD*juNQ(5tKj^iKKh@u!G)/,3nGk@^IuW>rrgh6&%DLm_qc3=i,W0cMPS0td%%J-I<<N3gp5)e7XC
%RK"DN!_J$%^B:SC7>k(KEbq_On3m].kXSO/Y(%56P76W?/htGREKIjk<fSe"%heV?-M%I_3JJR?6/Q'9M4oa@9TT,P@M.M\*,5iO
%`ALK6Y8@Vo1f]],L-m;>&"M'n@urJBas\VHam5%q6TU_AdcT)QaT@[b;D^l4]u6uk-T#WS\X;B?46/)aOqe66*YIEoA0$<L'Bbb+
%.5Zi6BE(t"o.c>]JFGOlOZ8k%VA$MI.:Z1SNk9+&@jb+6H,]NnBWgYF%]&U:ie3(F/"hG>C[jfOOD@[4+OVsb*!9_RihfqCJk#N(
%?A3E'84<9$E(bsudi-1$S-KrCKi&s';A/(Ni02-DU9RFT<ueQ?A4Aj:ML//;5n"A3aL?ep0Y/^JPQ;3GG[bpT;8EnOcPpf'e*%Y4
%+?i9_?OCr660TMQcZXR1;BRP4L0PhEL+3W?qP4Ht<CDrp5gg,`WgOkZ"_k<?^gqT0?nhl'LgHf4Z$k`\Q#+0EF.S6$Iq92L<Z!aJ
%2i#>DO74%*^4G=[GB*fM8rc!2koC"D2,sB3@LtAL!:k(g\dF:^d+;,b+0M,oTs'FX9UHe>aro)jPt3S1#fihQWeE"YQEG$M\Z;EU
%4;[g(GfYm[,TrNk+d7P2mk@S;4-!rETH"WZ$L/TDkZ.nF,V?q<:lBPB3u@1^r$Bd!1)lX+"25S;.>J`?EO'5!#;/;aCeM`N+GHqT
%;&gPA/n\QO9;`5@\<;]6&BMp(,+00JWiI:u1&=Y!;SBmh/llp'e&',!Y:E-86l%u+j1[Lco7R6!;Iim#)#=TX$5>#a/5&ji$=X2o
%`QR@'KF7h?g((4&Vs(KA#2;cb+ECRha&"<%##[ge6WFmA#=IQ$1<E)Y";HdQ^lm$t'*rQ!Ti4<!l8UtfS26pS+>k_Y?NT=;O%>b#
%7WM/LW]k2,WQMK2>$]Q/`??:='\?"9<S(,+'::&r8/`'(AdSfoL4inV$L:F<Mbap!KFoGOAXf"BN/$FR4rl,(KWtZW0]/+BX#?,Z
%8SO#>@goB[3ODsmg+ZZZ3nuE\QP_m6Sr0OkYTcRW;OD2_T1ORS),"D9UXl5.ORDZbH`TM-d;8&T6m`Gd4)NC_KW[9;F,([nW"@)s
%*DHWMdqV^e]QCL`LJ_<+4d.)6Ol0(\%bDDHP5E:tYmHX82_N[#34L5?d6S7HI\pcc<!C,7BIL#PG$g_>JX@up0jq!4)S.nrp[mE$
%:cb]_N0gH%(*bPkmGGa\aD.tHf6K4SVEBZU'g@>u6+4_]=_8t@4nQfrUs+]??ZsmsY),GIAka3k4ID(nJ25Sgd!0u\E%)QtfNp&:
%_T)mWA[s[QVHh3)%,uLPA;P0KYUd7TOoS43_eGJ=c'HYEJ26Jk22p3B*DQ]No4lWsJLS>\BT1sJbPB[bpDW+5"tgQK3*ed#71.k8
%<PidE^8bmBTT5j@ce0SSNp5gOS<"oCK-AX86n&A$F#mR!c4.1,@hAJLe!Wr8MEFZGE\1oZS-IF(9qfZ1e):or7e%d;HK1>h).u&e
%-)sp)=kLq`9mG#k_1jXb*eZY!/cd:,'%c6a+Ogb9nqK]%V[^`M0O]R]_,<fd.Cs7jUeo,Qej`#H(NRUNZnVi7PN=+X1rSD$7WJC7
%Zm>#kq%4nOO>UrgJKCH^fVf:Hg1eTh$5K&c'If8>5ZOdn[lpl59H#r3ZA%"G)FPq6SdEbaOUNjU@p*'$BBbW"+EU=ZQS_B5LdrE#
%o[a`(_?hi-:f5f#lI0>LMUOAG9A/5Xfhn7Lp`s"\5UcHX5ufAAnf1El,n5\_m!uFra`&[WT!p0q5r$lP>dlV]K9CV>\[6Wl&Gi73
%9H%Ze`P[\pqb-0FRPZS>bno6O9<N:5bQTVc%ikCAK>YW(S-?q`qA.ro6B*J[<E.'?WBi`V,p-JoDg<M`-Zb)0_gp50$=K<C6L%bZ
%cH<IIe;=C/+ruE\it@i3o*k-iMpqqbcuFn2OTRADCHa*f8RpC4`TA@E5=!dda\(cq3^+Xn!R(d>FE2f7O#(f(oJ.O/#Ra^J5`3`>
%+@`[G*)Qj[5"aFOg&tB?-$qi,QU&ZNQA+mK^2:Y03(;`_,.2Mr#?<E#hcN.7@mD:@Lts1)R&`XVZ#/A1ZtLOTahkRW?($"N;M_8;
%/QC*/;M+#W#]bq>g@60je7F@(`A.V7;6;<[7^3VAOoV?H;SeWLU3)m42sG<geWr0FSDh[Y"$8\$nSgoa9%u2$9l+OB,m9;9mqaD0
%(=]l6]/NF4KUoTl1AS+<ZN*oB/mf%(_%'(sT\/bCO?\KRn:ZoAidLPtEiOb.G\*VP25ht3K)0G@<"\?c.M21`M&MR5JO6qQe$6:=
%FAP$%%TNndLJ,u2_=nRP)E0ZGUj[G`B&?Rqid;"3*\\%-<Ap!2V3HH:F`9ds&(L8"MCX(:!ssUd5RXtI>S'N)^itD^&7lZ<.ZMJ;
%;nh@[!P2076r4[i(F6j5lBGH$8OcsTLfdncJ;lsb6>0JX^WIba,B\]]+9ssVLFW"[X[PYaqGKuknOGI@Wp[h-btq@h@SB:TV,EN!
%+C+Y/VN?3Smd$iX6^CgaodG@Ml3T_OE"ab,4AHUE.X1*g[.SuB&)!o"j.^#4jLDq"B_`hgit!"r,$4("&ji]lb1Z?@L_mr[<+F+F
%2c=V[fG7P,ie.!@=,/1b'Shj[ceaS@X$_WGKL;c#CPaiD>+Whp8Pur9&m*&0Ks2YRU80*r.W:r\5\LZ/1RcFD.t,E)O]CpNE>D\A
%K6-)[?Z1qcp0Y#,5\],_eTR+5Qb4j+qIS-M'#=bbI.T)OS%s5nGKKc8EDZaJ`IV&<k7YY.^lDtnDRT\#H@(qd\Y4X;1+;DL^5gA7
%o-CDT!90.Iha8]6.")2UDb]5C5bR0aOhZDS"L&BH_86cBp^oVA;brP'jo[:j^g0*1W_@BfgC<Q&r^ci(=>dJ\Q9*oe;Ki-"bfchY
%#Nolg3s=)f`<kPPi!^=_2s`4EqM4FF,kMcKK0/pMNE+RpLb7\&AYOZf(!7[koT/%26Jmb$_%KI,<]7%/>SC2H4^J*767p.XRf:.b
%0J51XoT+nl)QYY+rPQ+.GVi_+0ZBI)@f>?,(Y;UaK-\1i]0lE"HGsu]M4-bf)SQrQbAp.nS)oi--j="6;J\#3NRB;t3H1s'J0P(j
%\Mfa7"j0(tFmY4dgT'O&"mYpdVlaBP2O)]hi$o*?s%b*U@kQOTbF=ik<=&K;juX?i<cO8QA,8Qni*V>RZVkf%OK]>EQ&:Kd0r.mP
%<"NaMpV],3nPlM7UJi.tD:EY75]TdKd4(.kWSc<L$4Bib)6?fAN\IolMN(-Q]L8S_.uLMu&o3u"(W2^K+u:+c@0Z#jPR^-Y&<Y!G
%]BY*a4UgueY:[:akBlQ<iqsU:3ZV`:3H'G+#sLl]G3(3!\[!I=Q@m(F$.WhsD?aqpb-a35JbqYq++d?sb@:Le0dO]:b$kFTZA7*&
%PpK[B0hp5&SF[kXFokb$BL,uQ#\77j:rHA#N0(tckJ1(*iA*"W$j'L91?.]aSrTfb#A+qn?rjuh^dQ"54MJ#9d4h^D+Yg=#0!Qgt
%Kk6]mm;1u*er]KREWGgN1/JIdjheX!#2-Kj09q/.'U?2%+mQt,HD<#JUD$Tis&i14DW[rY%$@IRBWSU!QJjG^;kQb>@6(Yg.?A8e
%L(KJ@FcQ]MW>O^%@uFe#"S(\+(J9+Ob$;Kum;QpVCC2"W&5,@Ya#/__o"][`g;irBdFE1MpS#H`]aL=uoUr7gS3*gj8(`g(0'aa`
%=K^gpL*2T]_oIU`@&](W!1>NkA!"AtI?A&Y6DRHuam%G+X0Ird[f\"6$b4`&1,'&dU^(is+@Y?Tnhd]U6W!@"a<S0'B^#&JBi(<=
%G[YtWMJi`qY8]a4I'T;J\`<Q\4;'j\(JqZ\LO=UpE.mfCpdrF=QO,AWYe.bP5Fc9SD0Q]`73Y*1-@Dtlj!$0V8VkYGOnIXZ6rJJk
%Y,&nqE"lA<j:)V6=J.\k+PTl>a;5rn.*@\LQXn-(dtt7]3W-r#:h)!7qNB9Im()+`eZe'A_D.l`NFm,li=8dDJXWO!;HJ/=c6+VB
%GS-7kS[jR@6Ld$3\?,BXajKSeG,6rj&7tY-k)?H6I(A9.,?R:U/6#On8@_s%EAeMlSu=^Q6$tSW0]LYcpAFU;"nW028*pt,ZQ.WX
%R[GB>C5QOW88_bg.Q<$p^6eoAN26jkD5i1#%`II+e0(c8"9;o-JLeSY5=:$\ZG'tjKoW;^3l2Xf0hATr[OH-mTPl7H%\E3A?_e#L
%V;.E^0li+QMW5(["cB!DYe<Ht6@P4H2V99f_W"eSW%M$J3\FdU=6&%K&pP9*(&A=$>k/L3YoqFr?)9noLq5S7X'O\Bh/XSYjddY2
%n>hg]UA&dQ#G*H7MP#gR6*?HZCOOJ"164="Ot=8B\Fe^;of&\?[V!3+ge*W5*Ri%D1L_:Cp";YJ(DVlOJZ#*MnL<+CV-Xh)C\(!"
%(^Tq'0m+mn)]7!D!pZLl64J]_6ePeG3t(O:psG^YYI;Gfi$HGdhVsVIW[?/&@Y.Dh,\dr[@h%b`V)QH=J6[6;+muB(aq`6p02J<W
%5Qb/:SR(\U)et11W_Hp[cCf`*:)9"CZit5nE>U#'EBK!\M&.q!lQll[HdOBD(3,uf8:gj`MQPMm0d3IqAF0cQ_AVN@#*qB7KU6Z!
%UNc,#=W=H5m0q@M%JB]0Ul&=!Kn5O(SfqMSm[00HV$,3TU]AU"P=9bf.8Z1cR)J-gVJ1pQ#KZEp]ngHfQB]*=e;tCMnrt5'8!dW%
%OF(c1eheZi0i>_>ZU+q#jt.9Jpq5J!$IlTk5N`/Sq1>"kJnr+JE>4`OZZj_s7?l_TC6fQk=)L>T[^<,QZI"OqimPlGn0Utpo.Z3Y
%!kdnEre&qTXg*5$$%`NV,W17$?0*S?8Kc&B]VoS^&e*&NnV'jTNWA,GgS'SP']&ji<2doMI)L4E%'&9D'Y1_nM.os.dBnccgKE2%
%:e;V<+lGaU^!>QW_bLV\itp?MALNk08j`$-_'4l5@YY$j?pR13N+.-ZU5C.O+Rmn0HU6l#U%D#`X)lgDO;?8;i!FiZLu3jT6b@lO
%HqTdMTAp6AHPY4k`!2KsgB*s%nH)oD1(uYggr?a-Z*ERW9_@F?Y,U9Ji=ON!+@^X.>g7i&Nbb[c!5hXSj'c$!C[uif/kXf+CiF:Q
%3%hCfp=bh"O^6m&oM)!i&6RRjkA2OUC*3i$:k%S$4iG/D$M)315;*<2nr4gcY:fqZ/efCpijUC/!HInC1MYU)\7C-/$C,N6\iu=4
%mfW*\I1AZ#am/F/[qn+j!cZQ52@[&a51u5'YZD@=i-#L"0W^/KiLH+UJbYa$Y(Z.m-q_jM*D>L,98]&`8P!EUZkfkYG#\^!"0YR,
%02YIa;KJP,*_PB=p-;a3&B<o1U7?t7p^`3Y8*UUOUbL.s4h]k7[76dj2P>fLBj%b?I'_ULi3[P4#'\;MJpU%>$PU.Bd,n8K%BB"H
%,0.J[)[]rjPoF`lki#0j4;A5H3e_g3;&4hL(I5FJ7!AaT`j1ukPUO7?cEDBLJf-Y69F0K&oOZ:`'XJc*V_i>-!fah+8;RC^PHQ\:
%;KspNe<_:*aNSpW-(*I=bEj%/5V';79EKZi&#A@"T*"$F\Oq(>C[>isNi4<?@%JNm&VKj54sEo*XllWU`E\N:h^.tmMLm@Q69?"f
%X<Ra2a7+,'ebP5u+ssJY"C.LP\m@AT$ju+'foT_60rY(l3B=.U#J"Ms`G3f@6)_[%/n^ruPjjA@YMaJ9+`<V*8hq#TI%\=VU`1R+
%nPOR?YaJKV@V!skpa4/mY0"eJ"W*jlS@-9m,4S6PIKY:eTs,sm8+`1hp"3O65Z6dZ]SA$UicN;6gd+XHj3(1qo843M:isE!2lD(*
%Ec=EmdX:+fqYXYMgF97sK4p.7Bg]>a.58R"UF%7"aE4<X@RBX5C@hK:"-CIZ/BJ=Q@0rd\kQ],b)mVPk]Jth+*DG6&,a@)9Pt5oi
%r+;S!"&tCbd]Y.4ar+ef&h,IC@,jk6X7ntuOC:aG2*1"PZ1`8?.3r&ohTs-Z@Tsp<J]'&U`_V]BB_K6Yj]A6(a<_,^dBt<OY\dd@
%&<AnLc[`]5Qm>r.$Y\SI;*6&b9.<L?&<WH<5`f?\k`<LfV6gE<A332n!8`tP#&eD%3F<+]cu.%;=("'e-9<3(2eE.Pq?ufB$]HuU
%0gj[XJ7Cmt#gW&TI0-39%@eXcd;)8j=MP6^JC3A6_S?FV&K#8'N.AP1HZ($'+=2kH"0!MK"3Q+4-lHu+"QAEn+S6TrXN#Qg009\H
%$i;3B3m,67:Osh(Se'i>;+B1>5^67m]>1K.NilVb#inAUfHY5Fg._/NAU',aO"pn'aM%o-O,dc#H$Buo*B]Gk<l5RFi05CH=KL">
%$5FT[:u734EGZMs#Km!]R[G>CCUf0c]"0SQi]-AdK3/7#E(GDVfahJhKlVtnaS5n@*@$Auog$mcVsT079LBe5N+P+Ur'qB-L?N<L
%9gC.r9r9MX>JHm:6W?[`C/'7?UH,Jf50!bF(.L\,THhe\Z/1&l(-&`*dBXD5c[hkJ`l3N=6Yp*p[Y`2pJ<u7>EWb)^a((g$!?S<e
%&u25#0YHX:DRX_0,X;@A;+*hUEC'tu)+'l$UU8Phcr$c</B82_p?-rGVb"XA/3G$`X(DA$7R*a^CPq')nJ0m144;c/"76-ZYtna=
%IeJLXR`l8_1rpCC%*r?)@ge$8e0-RLn5^G\'KuNn`@k\N]R2,eiD%KNRGdF//Fn/YQKjjRE#eo2^.O6O-n,Ye`=Zp<-r,sZDp[hN
%Z0sq#R-"Hr8mMZd)(hhd!-nq6,93.S:cc$8cgr^I^]^o1?oq8BN/]$d&G;@iF^@F8N(P[^!E,l8L["l6G0>Nl79oto"k#TE'FI^q
%PsDV5>_3\FM?6LtoT"M7[/iONS]q/\P-Gmu0Lri_&F`=@d#"EY9,^Zh`M_!(JgR)GEZ$YL-*74S?(o[XI<?mD@QNNpb4$Ao^+&L@
%@YfYa*Z)"O,CftdL;h&?n2A\APGef+(\MJdihA.7!24(m+CG^YogJ5)5c?&m@jT@7-^9QGfb>V4%Ndf/5q!p-n7lB[\Z6s1e"ALh
%i:@X&mfVVphBS+*>'Lb/EP1L\;G3897<i'^3EbB2`!)#]KblmJ\]6`aZ8[cp_\-9DnO7t;VM#b*,/AM0kJ[S&ZQ7o=1?>F"0gM9G
%3E1T;OROIZR5@COqcKdDc7gGI2bkp"N//FM[d[&9Lor4'c8$S.`/Y#AN9I6oLW5.F`75_;oi:cf8VRg?opC-LL`X;`A87'Z$i@YP
%Af22i3JGF]5/\sDXKPMk6r*q]=[r$7Y3OU5&?dFee!Mm75FQ/1=[iOVq0A?l&RBjj`7,ZE"OWGGocOGtHZ>AmqgnAN4q>pZ!opt?
%&pAk\9!OaC'-l%#/82%?;%0J!1MUA^hNkOB/*TQP4:S0bQJO'X+34s"R1V$r1M<Snim`$]NH%;pQ"7O)XNuk@3DT-405mq*@Lq.A
%=Z!D`:cZcD0OE?U$Yi#`,oAT2[\$,'2bGshiTV%'f\s/";"e'kEl]M]W=>iCeEkUH"lmuhZ>u?V%C%1HfbKIXCC<k+V?eJ8NoL%2
%M45nkZ8\)FNu%7$P_\`8<&Oeb=VdK"4iDVUYfEFB^qLu\1(bA+-?t*X#X/QL1L0]BphUC@3t]^!aqFt>Fs'1-3"CMS5S-88>UQgO
%T#u05;*S)5$kierb:Mq1M*UTnK14R.$/j4kL_BB)=:[$ki*:otG"pjm0Mb<r"ArK'(l187;h:a@EZL!%C:e`YpdHD3o8_3R6R@p#
%?M_K4V+&,:LD(nMa#QB(S=f"Pj6k9:/q`s2^__%N@LgujgSesEA-'-]c.R=g$e;!3p298!EetqZ'#`H`S,I.LLB*5XJ0K@``I+?2
%,IAcS`I+<oM,.9qBd,jFQob:j$!Dj'[:?3K]`:Y80X4'6gnu8dFZ8EJ%C6:TH6+iK?qgCf9aIAF$#N=d,U^^7'En^iB6",H%Y=Ef
%8Z;T-M#UX%I)C;j>B`oe2F!XI>!cN/V[V+7O'3A+B=Cum(ih+3L_h`I<skA80nOqrn]WuL)I^N@T$3LUlPB"[GN_]QS-c)\'"Fap
%3$FAK3F`%OJfp!kS".&)lthl.RsNnS@@S?M]HgHK?r_n5*sZIR5oCJMB``p216.1*<"MT)L?'?YGh\]DDsG3"!9F>VJ./\^4tmDi
%(rE[3$;s;_]W#Z2X`,(Pc5q](6ISq3'HWWsH!*L!H0?;@_SDGg8MPcgJnKYfjdphKqHr!<cna%nKoZp+aF\LMTAg%Pp(K(bLGHN-
%)@S8%+JiQ$TcC*f&<7uS1iWM'#@S&&LEHn<9#2K4U!I-P6<lJm+hr#U!8'[lhN<ut&B9G\,,TuOqh_c."rr;c>TI_o-oC"F@1#>&
%Ul6Ua9cJC.JB)>>ATX"lXThd$Sms`?hDFa/,6Z`S]SQRh0e=KTReR1I5AUaM*Qc"r_WDK`8q$qL%7FT3O[.IKEC8':ginPV0K)mT
%ThUDk6b%?'#LHjjI,"r1'R)Iso+1o-B`eLq]\ug%Bds#<6F[-u(R+2=o)rkQdN]`uN3^a42dXGuEL_qG4d#&DAtb5!F(-(nTc1WN
%LnnW""L@Y6`&m"YFKa9B<W5WPS-Dm_Eo.S2U)e)1>CBX@Rl:O+2^Ji*)JWs(_i<[Qb=u"eqlWm3,'[Zp!2S^cGjnK;A4)#G/Fh,E
%a^kh10GG=2<*;,1"$&n1n`#qrW$+u[.ajO^gV01t/XgqRedRfKAb37oKggA5Mgo@f?CU$ZPAM8\h-D&f@;9!ucO3a%StC0sTK&<H
%PJipDK_[p`+RUn)[?rEBC6Frpos$UP4Zl`'7:9>eJWu%<4I9IN.$Y_W9NaC2C+pXh2?Ab8<3k#>GgJPu-i:i1`i!p(G.t7-YWu+6
%]Qf+h$tUJijPuPl*+]]j`M@=nBl_L>MPk=6Yrd:MUnV./b/H/pGTtcp>h(uVg$%JLg/(Bh^m6H1$fAo5ifG>fUXDMXD1nX+6\2Ad
%iLh?KM@fPsFZ8gp?K5u+M3a[I<F-9PIEser$[1O*SL^=O)1qGLMNgG]E2Pf^gbGW8'gOnP`>2&N,-Ar[9t.tR/PF<i",FkXQWe"_
%ZQg,qb79,6*#7!)N+bbP585%l:WU@8SA3FU*+<MEBOd-<.H^6Of6eE/il/T*Gq,4PZji&E4EZN,HiagV\jHstQrVLiLZB!+0rou!
%*QmH+3FZ+SRgJOENX-LD:GfUD?<e+U(,riG[kJ<b?`jGtHm(umg4nD5Di-Kkk?A6hprZ[dC%=cE6['C6&oTh>i^/#H#q&Lq^S#Kq
%NJJcl)upM#3KF^;9n#UT++iL!QL$&;WIRXI=a6R.pJeqO*;:RD:j3*]lq'b9#Ou+(EK6/id(g(MS";'&+tPZMSS;"uG"lSc#"p5]
%ks(Z0M3d<`)(\?q]OgKM(na>"`B9(V'uds/JsuT=UnTn_UtI<W(8W$%$Bm+tp`n]VMDt(Q9HtO3iYqtj0sDl@1HZ.k>u>()V`oKs
%!CDG/q2?s(\2kq6B=^PLAuA:BemXd'_c58f`t>cQQ$42M"o2!;FVZF9_BTi40UQs"?n;)I>h=irEEdjDM8>eEb4l@u#j:UMBH5lm
%O8Eo*j'![NW0p/DLN*+JEdj>cle,1qK=uiOkZ<Oba>)b(PSD-niJGaV>#Serg%(5PGu'3,B%OhS=/<G['dr?QdJBrgm'maHH7GtK
%W[c+EEtDiKZ?Sn7M=1cI:mJP]AJbcoXu-ReSi2^eKg2-ga$*<$-6J(;NL1pm<@m@7djX?L=0Bk]J2g9]E&GO\VSYq1Nc<-P(b)!+
%Ede&5J8:1i+_W"g'iR-Nirt*E[N]@ck7^rt3J:XQR;(s/(H(k/24.&i]i1jS"a9`uNm205T3HlHauN>"9H%Ze,ialWI>KR;N4[4U
%=Fj(J+MQd/NYj1WjbPQW]VV2a)$8h;H_),Pf7&[YX\+^cAZS5h/3#YVj$4n-#3.d*l?`TnG?RV5nAUF__#O[4%*G3?iuG<CWuZSq
%_`&!YfhqsaaBsNq73;YU<5&ncE*sKS?mlKo)+O>Mo\&UA-!cdd@`Lt_19ICN.ZP;+K/qqJV_EPi'TB%QkQp^TfTX:PIgf:eBp3%<
%lFmrun]@[oLr;_.E6UsQ_;#%1T29#+`Fe\]M;U(k.C-4L,;=Tpge=Xq?u2(h"^\JZS>hi#K:)jFpaELf%>1eT"=QtIC/De_-+bJ^
%/#d'nfO#%<$)U$BWGp=;j-17MN0qMu+m-KQ7liR&i3<8RjlR*k7iJ63_sgsf7=9p-$:E[75a@``0\Ol69s-ET+*H.(e3Ibdl(*@@
%0K/6bF@6C/^i"BXGmoTU:pnTUBo5YHj='/WVl/0UPF=0hiq7,1aH2!n/)<sJ>^UZeP%M-:o*\VI$&'q_Pn2/Zer<oAD[:0a\i.t:
%T>-K4@d&+:&/=Tt=hZ79%_No!c6IJiaZ&W]5+m$X0#;>eaMBT)Nl[>W-_EC1QlNh]iZKr8_r";@Ca6%?UkWUSpMn'/pMIcNnU:4l
%pW_Aj2/:PRhhC/a!tN&L_)b,Z49Yh"3KE1@rqWpU5MtW`RE=u2ROM#C,E&U;WrR;o4t=QVr*1V*'*Dhm7U:^^GTqc"9dL*>F_/HK
%piFPlY7`O)4<rE7a;],HNUP^BlA[_3N5R.3;%.%GAgH9P@4+pk!u\?1W6-S'3D.1ILVYAX&Ao3:IT#p3C*n>`h$gV=q/JNG#oX1"
%M[KVNj!)"q&/\`Ln&cEcaW$ND+IJoVeg)s&<_K#)aY\uUP5:7hbXb@qF>,8E$U4nN\c)RGQbkJDZd0uhKEMIN7+nHK('1#f]-gft
%;%?r#!8'aET^X$N[J>e_'_plO`@tFoK"fem+d8gAiK'btV.r=]/uCDb+JbEVnnl\)!deo5.<$F\mLFdk(058CZ#Qk0n>3hno=I%#
%T6F?cIkL1d8*K`.6_ITbX>3=o/]>)oW'uP*^>]`Z!g4`h)mu4$'cW@UM2OT8r_=5lVbl_tL^TM,QY#.ZhW-=n1E49:R#;A1C=:V?
%j]3!)an9]mQp,j(`\RoZo<8rZO4?^9#rc4`h0.8Q(f\4?iYQOTiV]&NBTPJ)OFo3sEb@a'gFUT9W=pL+q^QfEX:0HX>?NYjB<L^(
%XbpHfU(,%aS'DQ^*,XAK=NF'2>D;@FB4dj2.SPr2P8@T?d1m>OpZ--^<a?.jialdR/$9$\mr5k63<ZdeTT$@6.q&_GLl9?DU?XC@
%=Bn"#nF;_!e;Vl;g5maWbq@fc0[<j`JC94[@IooWe(J5uFAE[P2,+Y1L)e&.1A)"FVd(:ZY#J<_PCP7?VKV!a(r34V8&00E@,Y<E
%`$1@0Q</DaNh/V'KTuX?Mf4+l^1Si1/t&n;]Y)1[S_l::2pC2X%c:"I\q8$)7%igj[AH6;%gtbY^(bW6YfuGPfFk0H+UuHJO@raQ
%jBRQ\B>8k!kq7Kl.J<6$BTf3";A[BO8YUS51FuPkPCQAVZ7:m<9ikbq&Ns%_P((M<7sFGX+s,X.P"=G)f9.[n#)q'2V^TMa,m6T;
%,cBkq5aGqp@p",%,faMC;^9ReCI=sQ21&>#0*^G\]<.*]iZ[iS>CU=0"dAB=6IVe\6KsRV\6l+$o(VFG()M,/o(IV=-I4MkG$q5E
%`lCEZ@;P6-\5(_o,p!3[%-+ub_&U!M^_BW9CqBJOG]HlL^gWaD7=&9V&deb$'#g+?5,sZ0EL'sLJSGW]8RV.7^7:3u0R[[FCiMlL
%%k.1//5oh?dAJlhERs0=5rgm5E![uO'F51!=_]KO6?Z&U;7T;.n`R3C/:,I"YfIm^-o'T$JGH,j3?CWsb]JGF&Ih`C:BikkV3`@"
%JYS6,YedgWdN!k=RLuEg>beXpfS_?81%r3m=KGap5$ud-JpQeNBgZVhRCoQL6O^pM=O"(3)%j=gh<`nuMMhMq<@//RA<QIPd(WK<
%%&Mg9:OcWuLkRVcLR)!!!7N-`)4m4UP6QP0Q8DR%_$E9sm1g9NgB4Sn#V:*mcU,HP&>ui(fgd3O@8"b/7>,Rf1[FV^!1"nNJd7j^
%Uc+LQ4_&&lU)\cg*b3:,A4<H5o[sn^)5<XalT=WuJ^:JG@Ki6t/t(N`\`*R$mnIsVB:^Zh]mtEa>RSUSknD0M,6=nJcpP`4K\kqk
%`SW]<"688,hd'M*!Xd@.o>L<a5+()DCi=`K+''(hU+RPUFPbRjkM-OX9i3/BdhCk>N'0&-^=tmEisEU\FR3:!=i-s*Yo0B-.Go@5
%bBNoA*I@)rkj2B<W4sB-;gi"DQfl]RBh<+JSs2%$_?SR3=%/;Gph@4QY#TX][/LpJ7#);9'"2.?Pq60sG"_-'lNaj[])6XfkG[ro
%lp&$VEUK$jjaPe9ig+:0<Z&ZR)_0rdAT+8WkFE*@QLBRM*>I)i9C=n=EB/,69=ice_<l<&e#N`Dll8h)bKA^H1c%(6oIK\d&SXE_
%n$AeD9ZBjC%("K_dMlc:QIZl)WB'(dH\=h,-i>!?dC"*<r*'Jg+9H[sHJX_P:"0Di,hRY][n>Q8^<*HcljBF%2an+^jSq<%50X2d
%79%j?$i$O+mi+#@q_^RQf<>$p:#^R1Broa3W2k'oVu^C0RI8SU+5f;$*o0cZ8rFWm.Irb6E^\OIn7s&Mqr(2J'nm9B>e>Y+Ca2WM
%3J*psi/o7c_Y0'\P;+eArZ[,Oa"N).<AdBSotZm5=*V&9WbQWt\OJ$iC2"Z'<U4;q'gA?NI/!EgWn1PlWs"g<RqOpMiP>#'#eN\7
%ReXZ,2iig`(i](Cm<<`,\OrM[0'0^6p%=OJK]7TZ&dk2Hj*Zo1Z_3"WL,!n\*8n?:+5M^#ZQDQTqGABpU;p&FGY$(/="G86nHj-j
%eSCH&*o$[1]jomO4ut`R\r<Q=pc@o:4P`G`H5s@cQgim<i>djb+0cm!=m5?Um;OU@QrR?a624NVZJ8rBAa,SehY64XN`Qg?a]P`+
%'9rN:2Mo4>[ZkYcT3)U^4/:*kdlg3gMTl)l<A)qPp-^XN6C$dR'fRAd7d_3Z)M\ARFY/or,#``FgKfNXSNUmK%+u'0[N4UodHLRd
%JVR$4kP4t"_HU\mXd[mJmpdRlmDJVqBRfuV5BF1f0ZRGgYNm6HCs`:,\)@Zu_B,scR]WpgJ=?RLGhQ&?,=jo!R#@cIYi/b8mC4H^
%3#)+5L3C5"p'K)uGL;F8quim?Ho`]MmJ(cdR/6'&Qbq7400^I,n*-[Q@Vb9C*aT1P4$L=lQI]+rKj?,[C09]\cEGN_;$'FB)&f:`
%=4ug_fZ--$;O_0dkkr4(]]VlWlkQ^S-.K4E>PJDD8C]VXLLq9N.+;A0m&fK@2=mS8mtXiX$AT#)<$b=9JZ3d@3#,*jp%m.?aBiVO
%d,J$/^r$7^WH!.i/<-i."\V(HT8qk]<PFFi-_6kf&MWm6UFukm=?;jI8GA74\m,IN9A>Kq0Sa]*nphsnq?>Fh*`"Fl@>*;YR%p5U
%3.f!p]b%B/6OXc&:AD<O4Gm`1K["<jRrhF!arQiVVbZH^r%teeNiu,Cg/mLcnjIP#hF"9/IHTu-W*c$K,HNqPs+\j=!W_)H<##(h
%)6XR\5obZjGCg"&j%SF&1gr@`>)rZaEKDbl8P4EfNX&UT+Q[$W0.Dq4LSN4;+oK925BUNoT3<L%?f0ej":dB!"d9KaJW_s+*mKd%
%0McVFW8mQK`@:T5.Mo/qMOt-$YHLU%rC`F?hqNQi5?eZB94N-er,`h'W:G)tIsk81B%N=?+/&qL-H<ZIK$ZQ()a]\M3*uB=\($sg
%NsB:scb2idbb#M/k9,C[ji#qthb!q3+F@?D6q8P)Su(h7IE(k<\iG7$LGQ"/5460Hfb%kZLQT99BdX=V6Um[%n=,7&.Z91`aV4(*
%JbpIodom*ljmpl@3h=`'jaoqeSsocP*l#.&s,8Gdat-Hbcdk2/*B9gho;?XpZc^n)s4,6iT1i_jc`tK11cg6Hlf2:Gm72ieILEQ2
%'92eunX;8,o/5V#)&`8uifOuOL>g%Er+k5r^t8ADQOrAiJ^SJsWF'/<+4Kma"%iNLYYqp)o/+-`J!sj+g,<sNTAsptJ7Z[H;dAVN
%-Wj)/a%%Ic6>ChEK1a_U-&K'B]/Q-$/,Zuqr$"9D[lDM1R5.u##>,L[qP?]u%1[A('=g=Mk8d*-NX)i\!X6PC8S[#nZ%Sm$'_luV
%nBBb5FsaQim-.DC"$/(k;9H"s0oL2FZ4"qC]`+>c6O>pW.J:YdYj66po,W6FHK(31L#_3FTFiTm//X"9BF%=L`9f*H0F066a[@5b
%7&,4*3"^LL+!rbS3X[_@S:dG3oe/l.iH:*OY7+Os-$:"aGWlfdV"*.Y,_"BC>=([HX1$*.#.(BpJ@mpqm#;rjDdgb8a8NCB,q/-m
%X(2/ln_)&O>0s'u)NhfQa._*J.!5gKBrXp*(b@m3SOppu=X46p&kf4e+K/BV'q0iO\cl)2KAam'73>f,6r,!j2TX3C>0r<XMJbM?
%5WmMt.".bdr@k>X;WKE%MqTD"FpU;b;uJ]m,_+&/!M^<nfRJ=**0cAn(nGsLLd8bLfnWZ./qUkhB"6tGPnB(MITKsL5P5K[]S@Wl
%Mm?SNI^&0Nr6T9RU`"8\XBXs];?2JS#[$+Z4P6BAX_sD*HcfXmV6;I_Bn*DQ/cB:gDq:e,nmme\DhTiq&^FBcBjr<t;HKuo$%Q4B
%\Ail0Q^'ic]1PV\RR,4D"TrFh>k\\h6R(fG<!pUep]9Z2?b<-^5SQ><=Gpi4*iVH&?uZt=7]O?0<UV#]0tYU/Vf\'Z]V8k!b-?WJ
%iU!ZCrMjj@:kaQoY:eP))?Kbn%E/OI?!rI/q1hn$KJQ]&2$.IP&/"JYTRu`8^I('0#/iO/Dio9irXdCR0CuJRqi!PL*d]H0`^cd_
%pKOaQ>AUY?^.`LgU9G8PEd_>jn+p!Ga;bA2T-qq!2;\oNeO/!kdS`iYPE`em]*hY3SM>0ReC?h+`tltRW'2Y7JlRJWUNR;AEk9ua
%qjj6SBr!1CF/B>-@>I$AAWKZia9+_"jj9-h7OCUm&8HF(:M``IVF,'t["&("RWCRNG6^luHk3K)$>M'5-OR'&L)Vo6%BJJpUSQP$
%[,;Emmn3-#"[9#R8t*:PK>kNYO(RLX3S\]f@.CT>]L,lRS$N&hOST7$hZm/O8e\mWl3L"ub"(fN/ddC6^dXo5LMP]\)?Gj9UqaH)
%=)=J7?o"-U?,JoU"eN$eN#gADMbE+Va^\R_NAu=hQG#b4LG#F01RiFpC9)d"qUa=5fqApY5&\9V22*b%=Z?5Y.c6td/1+f+d?UHr
%(3Ys,;G'M9a3m=-l7:.<>r/jSqBliZmLH!7q+nkHTUY]KUg1&<H#K6d/;st.WfSpB,IA?siUKJW66(sij3p.tgoho$PXX\,SkX1D
%eK:!kk1d<uNQ@e\Na)AmX?<%iOXBEb`@NE6+.&YY1aT/_LbnkgjG5;O"NWVC,Xr>n_at=^Wdld*BF$8$oh5pQSijEM?2R.*)mS`>
%9S)m3Ya*`E=$"jA+]p/[W]nPdCdJnX31*.*HUV`udGkos]1[8g.<bJ)n3p>F1u,bHKL"<15(pX#42\O'IojqK0;QR<00/WHI.)_O
%Z@$T,e:Rff1'S5>9gm<Sn2;7Y_Ia/7/>7^?\M^0hSMa[F-pd01*d&Jl]/]d"AI%dWO,njD#^K>X5>$ajFg9&mN1<E/E(('EasX/#
%Ac$qFn@c"HGm>U-XpH7IiDRt!81NG&fW$6J+[;maj;#aKMCS_/.>"]6g.j$c[[\=8T/](:Nt`@VJjkp%jDa<-rA]iNFQg4[]hIcB
%g@9X*qW##0qq\;(S/ussdSCA(h<EV0-0f0($6Ugqa$ls8QNeYs?bVe-7e@7RgQ$YWPg0T_`1e!3/'e=$"!&G'^sM<JX1#YsGgFLX
%NbF%D5%FH6E0"goQ4R[*h2fpB8;#Oa]j#f-GMBgsLfXS_5Y;+$),Mn7Nh:6+#mm'jFLeG<g*HsiCTO8?8pED6gVmocG7.28q'!QC
%-`Su)]$&d:G'VU%LIYE1p1LB3+<Xe<UcJD^^Yp*F/dQ61(H6G5eVMgPf-q3qj?2@=g,aiH,d(qRn>S1jNsC!,aa:h'o3f;+8!/JC
%>*c(NQDZ]T&,S/sRI%t?/3U9S8tdifA*ZMd32=[b-=9H7kkW^@jc?0D7\n;mOU<;^/=tiE,l$bH"?SBP:%mUW]p3gpij<'7.3:c-
%bZpSHIlL:GRfd'J&"QOF@Fc288"s&84S_1VVjj(1f<N%mRu-XV'G2f-T>(e\BjT&q'SJl(;FHK@amfagAM6_FN,4PcY./i?3I-1e
%PBu(Q31JsRK./OC?Fq4,0"Bp=NTO`::1HL^FK.kr?&^8oI*e&X189XkASW&"]cC"sk0JZJ)\6osSAjnPTOq=.[E+n*'k>C!hCq3M
%*mV6R8OcEHMEou-15EWfLXAcZ#BqJpULBYqI"@E8%s:k>EQ0#-&=I$@rD>f6<KdVE6;hOg#aROr2G0*RbUZA-9*g1@n(]oO*A=);
%hCVpr+OK>7Dp7O;XVgsiRZ90J1s\lLKWFQ=S7nad8S:7UDQ$$2K,%C(qa3Ttl4?%b+$)&JDACg^k>7DCr%*r:^+=D\Ul0"'?QL)c
%a2fVI$RN$6o3^HWeL<FBX]8iD[Cg8qaV=r=E'<Ae#]`rNWQD$4"9Z"P$;cTN6=La%Z9_J]"t[HY:(r<L<W^8c9?cXthlaSWOB$u+
%?P<+&J\J`Wn.@S5U%5R8J)\eTCaURaOj!e1D_iu+R=2R_R_:G%d5_*dA10YtV=dua[ep$-Pf;i,;WuO5c5!8md<(u5Zq<2bZ=]HT
%ZD<>U-!^2?BYl..?/5t4#&hbnB!1N5<rHMcYN#WgqXHh9.Os)<Y-Sf(4AalYT!/us,BWJQY)0*N,(#mIp$.'P;Q7"dKl1@JMWE/u
%>TC%CM*3a$67S2[hsBqELQpJQ&3/;'CbVP$U<QROs1fP%C9rn'K7S2hA4!'3O0Wa:09&Y=FQIYPDjDcms!3ecX.*T/.gmNW;A40A
%.Lq1EEq-TMZC,oZVBWYOd;)b`=f0E0/h=n,7bU[:1lBc7]_7-68pDO.Q)H<mC8E>#al:5=E>k,W$$7TJPEQtRFbknUU&=,r%X5U_
%aD4(re&uBA2eGq#m#eo#%,N!fH`3OKQ[!f';sU))fPJDLV#Ag9Nd[Pio7AX@C!iHkjskhigUB?VeghFV!bGg`J\pLaM.V:\EdWe*
%r38.aY/V.R0^<VIJT?jjHXBLOC`tcPrDulEs0:4Fa/9l8`lOZEfA$JAHMk[0=O7Q-<ZBEhU-&Sd\Ph8qKGBX\anH?*?mfGMiL0Am
%k?+'cq<E'`ErPW!hBN=@4ul+tqDA/^"k2,oYs+Zg^urSfrS'n2derf0rJhJY\BqIjKXY1NL8GS/2=tE$78$]'mO6tU%39(o7GB_C
%jKQ3l.o.P(HJH)(:n\de2To\XnJ4Pt5B%,TXa=0]rcjoj&jiPZ&#a;NPWaD\,L78QCl*8qO7fTsE9?J0$[tTfZF,Sk-I*mg;@!gQ
%pFUnXr$M%`"SX'<Cn3]lBC5:n]\t&YKNNen?uN/_lf'Pq@ibMFlFn5m+7B]7O*Q&p+9.5+X;!jl:UaTSQf7%"pcpjBNr25U]LeH`
%A6FB:C*$R&)'32dNZL^D/'UZOC?6H@OEuWk`-Le7TR>Xncr[E(gnO0>D5cdW]Zt'(2%c'<*IH/P[h:8b6%XuDCZ2PSF80%Q+70+_
%NZJbtZuEH_5S'YtH4Nj3Vb@@F&:I66_s<a]aCqa[,i(-:TW&)T;2]c"m6gYT@8H6pYV3cI_^q3-Td0L$Yt@ECIB6B28SqhAW]%JT
%/oo$>%P$j+\!kda;V`Yn:q6,aH'>[NbMt@h;R#O(Shpf!Z:RA#[@>??+!8W-Is?)KUl__jq%\,T'M<B;N)KOXZ(l_*?Ju"/(>\^M
%a0'PqS$%o+G'lhd`"Xt.Iq$&3akeSfaqPdb6]3o<!XZ#9<Y@b:@s?+*jD@?eJh?g;?.#)<jr7$g5Vg0*qsX"ON)G[Q+jJHdXFqUe
%kTDB"nI\:*N&l1_PJ5JM:IG84l^Z`.B38+'hNk/GdT[,)7"DmLbd4;bO8IU>7jQIUNfB[U&bW/1`osBfU+4TnFCO75'g+DqC'\Jg
%:^C*bT6]geF[ouoXRYd%5:a#=7nj*LmAX=qiDS*P5AIdkG140a#!3I+AbU!<Cik))oeOD:d>/LAeIV'GY6UH+2[6]q]?W]/b\[IF
%MF,?2'T_<crQk6^/-PWCgH_K1'c^?H`P5B[*Hk=eg?apXf;!EILWd2RFY?+A.F<(A8*ELiZ*g6A-q2F!d;!**7)Nq%bQ1;(31Xr*
%q4V-`f36ooHE6!_&Kk,n"#JZ0li-U`-SLI&.+C<*]CEdMAA,S+_=fJ-,-Bpn_lj<&1a3/<Yo`duoebsmP.Cc6'8uY>FWU'/m,9Pb
%CL%TW53IeM58IjJ32Gb!)3&f-qY/jUnZue/]rotL`Y?LtdDhI#]B/@0Q5lS%W7<FdQDf@#C4[i*Bd;Sb<i>VG.']9sDH&QghC`@U
%1rQIu)`esdBpN?m7+']&n\\pS;;:DM@i?I!P%!t7/B3-%_!2jDqc19?Ph-1H5ADWO8irj*AFnG,5NH*HT@GMi1ogp&-taLA^SSO=
%d;+c#fkuQn4$,EN3(>W;HPpWnJhkg/'dZMrqt1)qE'"]!K&0Haa5M@V[bAk*Bkc/dm5'1sS+=9o2?5\8@KBn9PR_uiK6gHa(ph$g
%L!i&/2L[X_5H9&JVoQP5"+G;"ga#-q8^Ff"#EVF?$a^&C"X[_.US6GW`TY4$K`<Tm7uN0*7E+/d6EGVH/DMfer'^bUWUm4^aJWi(
%>F8Q?_JjMk2[N/G28N+^"B6UL9QI<,<2D)rki0ca=h(G/=BVJ(&6/@B02\1]2rhTpra0m>KL4^V2n`4b)-(/6C1'VR=]@:"+hprN
%>JIQo(e7\o6$oOhE!?ttFg56m74MN&LcgtDP-TqbJK.1gbDE(Z8b!5GO@1-NHk^Y'm5E.g/4@kQ@'Tlq+>^TacfE8Oq\88M&_:K@
%In^"/im&U$OmZ-tn'[SIO!^[jN-@n"CKe,EQY,4Ej4W8W$`](8Eq8Y2086RO*[U_9'XP!KU0Sk4'DIrm/"mCR69%r:]B;o@>r#3;
%lO;r:)'9#&4bZMI"TN)@0b"9aH<HGR(t"+Q_!B^'>oh08iGM_XK&BM>6AKuUl-P#_X1+G\\ms.9DMM1,qiJLg`Xf7-X/!64XmJl*
%FDt2<L[d.V4qZl=oh+KU;mH[e>6H$>4d69+C"cHM4H+8MD^*M/fj\`1/u7(J)W>OmO:QHJ&p/u&p8Cg@EsltBeMnEr;:7JsN!/(f
%P?Z\P!l;]J*EGQ17J#Y@fGXPEXi/Dt@DE&XYO$Mq90;o(=O09q0(KDkONc$XTGYL\-j^Wh>53/'"ZGeL_Cg$l$\'\PWE?OT;m[ek
%?pS3ig73qiZ=W@DFcU9,NM:[$&lYR':f5kF%[gJ9!:"UgH>]uro+>%Hpdm=i?d:$N[]i`QnG?h)YnT/qMo_eV7*rBJ)"7r-jlfZ8
%*;)R65>B=rAggl)m\ES9KUHuLF,"(AP+ije6h.nkge/AXTG#3X8ZlONV?Q8r<_jlB#>)b8[rb25CIi%&jR&Y8Hut_"f)='Sm;O"I
%_>A-T)Df/lFQkEoer+87b88_YLQ[5R<qN5>G7'7U6+13V>u7%g#c(a@CW*lNo@ME,LH^-%a(7A_84LD^=l"TLm7t%_Dq$ZMnM8gI
%-6SLY5m8C!2%IZRWe(OBCih^<R`PR?B<DJSIN,_gRa^t`Y?lNG"hnU9cK!"),Cm4h]cMahf_;kUT;qWT$^)$3VrfD==%dR*"kn!e
%poDT3,e3ZUc9q!nG+*_;f5Zk\k/aDYKC(TD.>.PRe&)$Ln"$5LpaYjDjJMV(B?3u#".cOu1WFj+Gq^M?p"UPGb/p3(jX^6@jEaK-
%+Umr@:U(h&^MXE6>dSt$)EC7rI7b-XH,N2iB]>27)\qfHN$=,t4(;kI`-=(A:W'D2D86(rs642?Ju<]<[GY3anmUHTXFh?10?%m'
%8PfUqm",k\E&t00;FO-DQmfhp.`5XF?`,84mK6F3Ngu^ahQ<%C$DEQ.p`S7k[Ea)BM=r"Pm&!^7_to<JK:!:B2LRUE>[a$Zoqe&R
%`=<Wb5(H`tOY9[5X=`[lj8n([+/5SI6ZSHI/9Y+[G07tSXd'>gJ-bqj\Opb%<%iGa:N@:7mrrSemO:</b2Uu(g1n1;EZX5uY_tLA
%I='Lq$ba98pha,k-AofB'[rL9Hm$^0/<igjOEEqT^faM\eWd%&SmM;<'Lrk8BR!ZIMtQ'/j&acTZS=tJ^\#+pE9NR[ZqOlaTY`_,
%94ADe5g\m\a"F`!F$],+<G(U73)*R9(Bdq>+N.ClTm]un=ndL-X@!$JLCe*Dl-BT$pIlCQ*,NYu<-MIjNmNW'T^J/[cn8rle"MS_
%a3JS#A$NAn]%aE-@,mglNN-=I\3jTmoRNASpZkg.l8YF%+h<q1D1$hX5b+[()WKsVfVIjuiMFpO@OW[>PPYb"!QU_BHB5Z(@A_)h
%IO\(sF85;!nN`E]nFB`6/b&dI:TsYgV%?MTI8K%!:nIP,M%Is-F)j!^JF\(<:3sm32#C^jog>=Eq),#,Q<\la'RJ)HMtC^,DT@Z/
%VG0cXlOj[(Jaa4&'Yg[d3:W(bV=BF9i<u\^R1+&4Z2U;19r>A\;R4j<Ybs7trPn+,<db<;'$pOsl)_1(&[H$ef/u0iZm`pe9qbot
%'_*//d;m=J]qX-r9loh#735+s7D&*_T?qKR(Y%NY/7?n*lHQmmi25G9rOIGUPVma=j[$+76$^mpB:LPT>]#-rBG8Gbh"KO&R'a8H
%nXboFM->H;46u-X7(eH;/2^`.k3H!2@U/1BV+BlKCm@`=fb&N:D6__)[E;6D@1gp3<YSaq,VDjSY?LoM:*l=AJQ6Y2*2/K-`J73)
%.g+u@QSN-AaZIHK;MMbrAq<k*7\Fu2F8+_paf"cJM]9'/XSu>'0OFlNDWM`6=Ab$tLJpOSI_WpDs/*g4qTl.Grp)$#?C!Ykm<!`&
%-QM\=H/<jM=tAsHa-9auXWq!2#5ckXK&U!,:(mkY^Qsq!BL,V._QQqD*)^/>RClP+^LRt!LK:E8o;]am3aA4/48Xoe57J,HM:"cg
%)X1EL$1Xp?F,Pq3@i=^NXCP^CG\;`)lPLF,Z`kJ8^36%*F/8;#+A7^Z8lg)eF1Z(/="Wr#:RaQE(3E5QM4:sC02gGZhViJ3`E`B3
%lTah*a1QR0ca76Gd+>J4DLts_h:I-GIJ7)F=8BE8OFZXUW<HV$n'@V"7$/8O).A"*:sq^AU!@nNqKV0-:U/j*<nas"Jl(gQ7?Gcf
%qa>4b&Q7_U#OSldWsG:-DhVumMBTt'Z0o4P\_5;cRGFuXiK0#RLeOsq.o@?niI86L5rNb5@,:ZrX#QZkW$0-h=#5g*jInoof\7/k
%,V^>o&(O/t&N6PT$Sp4oTt%+_+(NLL_Rd\H+r=EHBKJ7@WLTGE,B[@GiHVIq"kJ:?Q(UiY*kQkaHJ.-CB8?e%rj(e-5Q$o)XB:*r
%o]jSVJJ(F7DB2t,pPA6<OGc<2'P@"WHAL^Vpth1(p-A08g&%*6^'#N^pAaaL^m?W'T(MSJ:;[0.&$9ut.Pu$%"c7-D#H1bfk+nt-
%b&V?-<$c]h-g]Mt1))[YQ'kRcQnc;nWl*gf32_V#=dL_CmqgTlG%!p$V-a62FP4qOB4IU1[)BG=l@Nf?Z[(<O[G;=H3U;R.rJ*d-
%3(QION0(,OIf$TdM-TN[.1nS'`Tar=q8CqKX``+#g_ACHa#KVXN"GiCJW^#%8DB2Lhs[i,?gMT9:\6kdBD\lG=8]en$P<FFL[_V1
%n%D.$m5J/W0*8g=cg981JA,gP#IPX8*>G2_Yb`ba]3elh6V&A>-pq3X`h`$@&DF+233@lS'?Cc-#60>XcrgA-D]gZfb@OU(>tjYn
%3Q3Q4E#Au&K[rTl)`lWMQrZt%$;kt.:7l4OcpHbd5n$,pn1F(el$f*eTMSR+iH,i^4;^D&A8kEZh!N+tUm0?<3T,1o`De;+RO(2F
%ZOX.Tf.XNamT7/\YCHFFq,R>ooHSWagcJs!fC<,$,25f;6fPflme)?J,.&/KCL_r9GZU]rbR4*RkYWmWI/!eK<Hkh`>2QqDM`]i*
%s$^5dRG_WA/B+,_@`VbU!u*GDU57?Jq(*YM"R>+Q,#5P#RUSR`M1RV8?LWj,k3AK(FspC)XR>mOK(g:aMh-SKk-am&cIsl_D*F5G
%@'e,g-TRpI]WpP:XtU*V=`00_/EAD,*)`%K1[Rr%Gi7Xuo(<)Kf)1Gco]tE61H*\]Jem=3'b></Yrtec-1PZIcWMf.N4g3o05pLg
%-p'bk1W=P]A?cAcY6Jdc$1WSSU54L#N;)R*$k8<c@>[g<@%Y:dm+<Kj6Rb,WhJ,&sZk#)CAOF$OPW*&(M?5=#Ce2BPJaYrgGLL04
%Zi[^-mU64f/1E#j[1(91E#^Pj7m%Q28*^lN><9Y.6]mntKQ.u%O.Rb:[E.<6kPeMH1P#/0=ZrKA3dP:3:uV1E./Wk7QBhEg%HQh>
%jTb9_d-2iWp-2Cu'#c-mbT_?gViJZ@aj#3+-g&[gH7l[)Jru.A6^`f=QIRt=c;),J6*fleT5(8S^R'<H"h1*P]F1m;-"qc$a:VNh
%clbUO,A-LESIgSW<)LOIfKbp]`e-V"E@BEm>_t]'3*j5ie?@p0r)ZRU^]0Y1KLq?&HaW>I3$"?3<[WGO;Qef1OhsWDQ,C.nc8218
%MNl!/4d*-!-B/ES%"=85;Z'5"<$G=bPu,"JMk:@NFFjXAT`?^$QP@ZeF;-j5$%+i:kR't'#DmW"-mAPl0XP%(Ln?-JiTgdLmPMY2
%q>-Rh8@m+0RO%i@^=Uq@P;:Y>F'4^F.NU$%f;*TVe`NT*8H7Mk>a4Hblg\gh@eClLc<QSfa5%hZ/kRMr%[-t?7@=X$J*3PZkNqWZ
%lhGpN9qmofb&^;"[!rI=F%p-4W+Jtc2;,ClO#=J3PMfQ/,W?'3nQ_6_s80JaQ__^f93IRVp%WSs'%P_&[67S:2CkY@Y"2D;g`Q?7
%Hp>4ebsI];*0fh/NF>1OfSC7:8R,Iq%=`SGX';IU:,\&;IZMr1=hCD;qftE`+RiAp-#1d%T%7tDQ(/0&h*s[p[YjuK#X!loK?Jk%
%k'>e7Zt)k%+Cu5\E*nc.q5,DVek8[,b$6";h_k^aIiI?BXN;6)"'na:B.;DB,a0REgpLopl88MmiHSiRcX>k\=8:c/XIf@o@Je8T
%KB]I7&EDKpZP6=3EB<lV#Y^ARd>O=0XaJ;tqG-D-UhOq$II=7=?BpZ9rdsQ[f;^ZA&`rH>kZ[mB_B3$J0Ir8mj#>,r)B%k:7l*[/
%@>-e,kOd?u[&X<#jQtbLHo`60a9oH&:9L.TQ6Re/d1&]ZEE20i<9EUQ7VjfOVDD-8DZ#_U;gWPNjLsCT,6GL*r$[d#DJ=u.Y2i*O
%a:iS2RJoYgnS=oXb8>_@?1q]`QcJHj4VEg\?<Gf="o%eWe,_*r$$p^fIWY3ak!Lu\;P2ra6]e^S@o-33A^`MA7D'm'/hT2WDQmjJ
%<_erR\#p$>61f1_R?1<G,tmd+5.Rss]#E,_$bH2/SFA^-T0rOuKt51l$7c-P#EI!iA,:Dc[4Oml,,,3O!\0:oD3;s^Q__k=&'89)
%(&C2c(<EUGIet0tRpl38fC_OqlqT^[qFE`NPb7Uf$9]_3k7@5dKX+1@!bRVRp=u1^F9,f$:`:'3.p=f?T^o3mc/5i;GV9ANhHI@S
%)U*+Fc*>k>c'#4J+k]&Dks#-.Sr/&M=,>&e[$oU<G$+Y]idM7g81BK?acf$:*("8!L&%o59/+(upHB6PTT`eo9ZjqlHl"*>4'AGC
%*`Au-nZ]i#+<h$ch;QPnUna_G9(YD&eN^bl[9Ns8$/_<H4&U$)q&>36Chp:>c<b?6/q"ua$l$`9*FRklKnss%qIoV+(+WgdV1d3i
%)H'Cl'hfRs/?7^6OK=7Je`H4^UJYh5jd[42#$BtI@oFVDD1'^Q3]ar:TSF3JABgU-0RYMLU\:K_+7D,4`t+\^>MNY7[gcua0+l[#
%l&3l7[p5S!Fg(JSmj$kZq"_;jPIQKZ4ZQ@[jAOUCd=-X_\_8L^CUuu=F;F1j9^8W<H5Jb+jLT:'?Xa/n@aCS--DB4gX^^.m3-g6S
%XK!pTf(EE?$hM9,g2#S8pk&el3u5eN6&r\?ZD,jZ*'Aqjbftpme[(%5+GlMV]"A_4C^#[?5VXZ-B,f@4\edemCf;XO9p-aoNk'86
%+/2r#.qq0nfHeX)-n^\M:FHlF@"_HV\i(/(`c\P?5:uW;$c7=>VLDn<V6=0K(ZqbY0b#1"3_uUPPcR.e%Yq71SA;[f0@P)2`lc>b
%bX\rq`2#2:3.B&c-[JBO@O48C]EMW*^WL=Aqmdih&,@^^Ol6(k8_en&6uE66TA#;@Yu,iu6Ud^9Xn5YLYs!+QXe:J!q:<O?SJ/"7
%BB/C=6U8_(V9t(DCZfT:,(#,E-!!cprlF!lqdTDYmI*!cDg[c^mWK?_SVe!19C5Qs*a"E:nPO)T@Vl^L#`)I9QA;#_.#[jRqa$/g
%]9_4M<#/oT)6?sOV4*447uCW:EYPW&VV1!AhrPUWoc*(T]KAtOL1%nr)JJp_Dn?j6Q0:Wj@__C/?S;NZa[b=2o7n=u:$U=;Q?X$i
%HinT!gPE"0K#kWJohqd!D$uKqpW$p'Z:P,?R)@ZIr1$@Pl2.E53),"\4jPfj=dF!2EKUAKGgSA2dn92db9BO,Z59oZG45Tg#>+0a
%MsS*8q!b$'9j+(7eMF:[elcfW?4'nU$H"c)iKNCuX/AfE4O93NdGfu&k]L$@FU#=X`for'L'k0Q@qr0HQbKb$14'0jr/]AI#5dJ2
%XC0eUf%[TmPQ?R#F[rkEbh4ZT&kA[Z<=EhqZ<l)IkPk&t09Ieq+fq,q[/<6K=.2-0)`-IY"k.mV33IsK$j!<FUemgoL"&',*9(eT
%9c5$E_Wo$;q.1st??SQ\;qW6+5N,8b9?K&m%btNT$9AUtrKLs;B5i"VlrCOR"GGs3%U<&NeQ!C2!WM-ibtd0l42G'C03dhjCd&;Z
%H;R#%,_\L(fZq=qfL4[,ZBZ^3euP6X=J5:L7o4:-ZjX:o)(LIg<l1FR3;"X#<=j_6V<9gZF<[9uqg7r<nlWn9jSCs_oq,@-Cc75!
%9)b10LjUPLGA`Bcg-MWgK/1qj9d+78mQR?/&Ml$cmq)s&1c84;*Ij.%]Il<tf'Hu2R7^(pDY:j1?^r0tO".JW,q8:N]]BA4s50tq
%c@;Aj'Ou%[q!uh9a<P`i4XRmV*ECI5eb^DNgu2Usg%\__L_K.U]n"XA"Xk3=fV3E"^W/!q(R5="7O59oMV'pb8T]<J@8/ZT)hALn
%P""AHRQWVtqt&r]IJpsP9t\9E7.,n,Ue!X@`hB,<bScDec9eb<KGg)T=jJ)D^FUj/h5AFSMs5VtI*^IlF1$SB9A=JlP"O.9I'pK@
%q(ctpA"pq0Pb=>smt7-L6G9F%/bePp"`n$KdMfAdUc;dRdXf+Mjki9>0[]"2')-8ZcS%)\gqkH`?k-f:NtoVSXgXf^rp1hC_]/7'
%A'(0tIg$'9O8N[l'>Q#]Ha9NG3W9"3"7\tBWN$@(_j!17g:.m:93OhA?Jr<Z<M!m?(%MX<8FD@Y8'P3%4<sb#$M&!JiEIb/Q,)p-
%ebNX+O8YL*.h,ul9]*nF8c?955X?UBMj,2D_-\6k4)KBh>'3(,Y`7YhZ1gqq4frm^6nD\n/jaqk5\,#jC9j!jGC^eoVVgsc/(RoR
%_h_900VVoElC&t%BKT-H.nX]5ZTUOXOs1o^/1t^99+D'>LL/ZJSQ:hp2!-p<Or5cFXO9OTYVeH[k+"VZ+)bfaDh#&fP$/,;/uM9r
%+N)b-'_-Rj7N6$lr=oWHY7Tb**3IKD.8Mfsj9/Va8h<:KOCBd$Rn7)KgYQtSVh3]/Y4Jr2+C9ONTS#H^FX^N5J"T7&X:Dl)j:%,0
%+g3j>If9rfa>_lPc(SdWH3u=Z?((f2S2WMgT0kWhBCFmJSGq?*p+I6t0je(rA.im5q9l6D/9c2t?/]:!'N?A38?362Ykf`_.X17U
%CK?-J4W91)?iV@:>-Ah]FR%,-hP6[!/BpnnpM/:/Hi?(A^O,ht&XW,OP?m+R2>65W;?Pu.c?f5**MNWVLa8P/G.@pBN<i"b;,oZp
%msMK%&;s(k@2pCKZF$C%Wei8Y%WHN+<&H`:3l\orLSF2/Y3+(mm<FRAcDJeq,+^9Z*q=]:]N>`0bdB+%!"&Bg$Se^!UjS88B/\G:
%ONO+WH2`ne5@l,Z[4TbRlAA("QKn;Xh@0)GcK2e`7JksI0q*A>roY[]DOL&$j[&:UMKInm8u8Sco(_aCIISr>Ml<rHZ;kA#@^hFZ
%5]^HO-RM65:k`XK4+-5.X<g##eWYp#9U"=mGi]AepJRQ_[OTVgmZX=1:8lN1fYIH5iA"!`lO>0'.paBX5lFhBdE@CUC,84qlRCg`
%Wrr0Vc77lBr#ILo+pOo&h$TJ]JJ+jRBXT6X(#N]0)p+qtd,Tp7US\:%fq3h$pNlFXQ,iq[*0:OQdLR"*+J#>=6-FCu%r2M;Q(Z>;
%:(,SpPLu.'aut3pUnM7`@dh5.$qoFZhFH^k$9*>r6b"HG5o01k,.!'".j:pDPBe^RO8!GU?XA0AikC,ulTb$e]("2&Y2ZFHGkCYs
%Rq$a>Ssp-OD*)T*BD))n1*D#?nBYHkQm,nU;Vd##?'UsoZ;eP=\(d6pD)\+iE4pnaLN=<-\sMsdb;89F3iUHD+rfeg\\1t6oteb]
%.<A84>-8WoqY,/"j+_()@D7MT^e'qS+"5]o.qW,-`eu6)&Z3#h;HI0Y81J<jO<f2[#3k#TR]?&8QRF!Mp_M$'H7ASZX"Lt*jr;#G
%k!V,,%?+m!8F?KfFZ=+@ME9>"62Y!SO@C0]OjMI(hflom3sa)nqjVECL\`Mk/IL(H_*<mZORr$4+kpDb,IGUte>0+2$>Kt)<?o.4
%3?>(WX^Y?YCbmKZ$nnqX$#E1W&#iU-p0kGaIH8oR#"sZOF$duL[U\`FAI#uHG._bi*kt&>lRUrSmJ?U/*NmV&>&AU7p`r+hck/45
%R`1;<K7<MQWcjoFO<'gOp0nJOs-Dg_#JSt^"JNnLOZ&e;'WlB_C.dh2mP`G+CjkHl6U*-\X!e8":X#^`WDVZ<:s^[rf6+Y6&^1WG
%>+UaFkPAet5IeJIW$%-d>-$2f?+^"g/sA(:>DrG&^DtPi%5'etI8`TC$Oc%Fd^t>Fdi\E&Du+k$Sl&bQrQGTrUF'<0$Bu_tEDt:n
%HX<3H0QCQ.5W>Vu($l@n5#5]Vkpj+@JkkKna/O8//A2ueggVpHHmF(2H1b^#%0qarjIm#c]NU2?6)PF(%OjQ2C6d(*AbLO#ffr9P
%Z>:<XU&-I;>4&F-Mi#YT,^"ci#$8?"0qZa*h,5N1m'C&`2h<Hd7^ZUnRT0D)_;.IKfaM=FlG&,%F?usT8CMSn=PPt^]5Kn@Ndu,n
%kpODO1_n'.1R>kH[IaQV!=I?;O;JDj:=4'D'4.\9k#Nu.'*<%li[MNC:)*^S^:IA>pr"ab2#]L%]`0UfM,RHb]#R+Oq+3gRnaR<8
%+NLc>Ekqh!8X]RL7IoCYn[Ync'Y:A8[!2aSa1$&I*W*$!A,XNEJ6^$5A7HEke`eL?U6Hq\8n^!VSp.K6-_08jTatR3OR/pf+n&3G
%O&X)7/k$adqdjOjHVi>d`LJBXWjZL5e_[o1Li9=MqV%LcbW?#7l%QIkjTq&^Dra]d8p4jB/+TS<Ee:3T@rko0jbuPc<#n`:B"Nnp
%6!c.:Id\2UQ4J=^>c(1U>]rXKI4a8gOh>[jQ:YOo-76Ca#MW/f29=sd'4PhccTg8f*UOZHhECW2QU+<P'?)2Gq^5!%?0PNs>J7be
%>i(C#?QqcW%m&+?oYWqnPk7l+F&uJ)AQ(8'eKYC`S(7-5LB6acHB9n;3ncS&OP4ek1"Yt)]9K6e="g"@r,aP[F_O_Dfsf&9[=%#j
%?VHPgGQ\R_]8G=oLS\4dHVUi"O,JQs(qQCh+sWW@oQQM+7)>D6d`>LL-0_fF99W<noKrM%1Xr$Y$dNhcZa$+-c.SG%?HqFHIP^0<
%4agE(5e:$A'lo:ebQh>+Hp&O[n7ahY>16ST8!AS"cqUd^r6>N7.S!ei2AF_?8(-KdqL5Ll'moY22KOe`"Z;oIb&e1tY#Jj4U*rn:
%?K1"#4L_!'^MDSPf<*EJm"/PmaAC]$!LqFW4@b]\@0DF?ksml\EFi,\nAp2u5\GSSpMo^WUf=jb-L?4[(EA*3l.H3.K-0#2HJZMr
%N\NX:-edYWFbL'1pV#TlbJCB)OqClDlN`<fJhBQ&H37]g.S0/#lS+6%RE.C^<UMO3)'NpN(#Ab6l)s!Na0Uhs*1:^E&[$:sE$]`T
%C)dbOf8nhHjm)$lL%.aN'e>)2l@X^HKF?,H]?Tj>&$c;3UeQn#U;u[p8;cO5%B8]EHGZBm0%MG&=?Ld')pkLLKq2u@&'<n*(XoI'
%JYLuQ5oi+Z=)Fq>`[S[0gEEsd3]MUKLG>fU)=PnBB'<cI@,;tZiS!U&,)8ZXCT!_4oW@Yre/>`ipVq7aO@Do0c/B+:_gK+k8(f*I
%W@CZ;FAO!VpBas46B9iB\lBsB1KG?+B]XAB%g3YpcQ/&7[fiklcm*`BF`!n^'RAgG7*u]GmE6%!la$X.,mokW/$q,p;%s[_mnfQC
%Tc:iL26G-_&/$h6LZg>>/5-rN3RMEW,76b1E9&6Adt*<;(:Opn$KQBcl=PVA_\\C*1d4_UA40GKPfc$dU=:\$mfS85chb*IA5LF[
%Y5>R@mfA?J9?-1=S3p_mSiZlSA!Du>Pqj*OFg/_&J!XNEI4]o\?(jK%`oKrWBZZ*9n`u$4kHsEYl?9]]-\FI#%Wt]?oUX\"\p_WF
%H91\pXpIOl.QUGF`07ScC4dqr5&Q]V"&[1f\+-dbJ5OqA8:OH:@\*;uM70^EG:nZGPo<mRYh*;@<oRRk,9CN[g"klSR,`p2Or$O"
%r*X76F7"9Z'2+m5>\sU&ANbD`a5c^InC=i\<m5e2ff@J0WL&?3''&)=W4*GTK:@"ErLfg\VYti;4Hr<078]03&TrbFH,EA#f/e9r
%kR!`a.-;.TBomaVAD)1n@3lfO\$o:'BhJRI'4o^);b";3cD0okRj\LB%I2_bS?CZiIlk9Qq?c14BFQZ0GnJ!"mc&_JZe8Gc$$)7O
%^CU*%7o*SCI(W`-It)Mu<*r@a7:KibAZ9RC"LV2t3rAflZX1TCBa>T5!FODR\%'&BhmaE5#IQ@D+*:+(C7)<)h_&cP*@Vb8ne2iJ
%5Mim:MNlnNGg\N2XL`VFh-siA`7+U$,bZe+A=H1A[OT!/mU+l1bJuiUjG;3ekF/ots8AG$m6*Q]q069@?X4Ah;m)L!GqN)#8IeT8
%`ga\=S'Ol]ic."VZHFI^#L+\6s3q3s!WoAbf?`$%Q_p;(nj.2VDUg*8MR3OJ9EUrn*Bc*/dOhJ_e8l`ES2_XPAd@tm/j"LOo#!9U
%cIA^8-e&0S=FE#QLnp0pN5gq7JP>%S)-oF&)P7@M@SR3O!T>.>S-"c#@^C\[r=5SJPlg+[:[iOV?NU61UF,CiG"%b1T]E*(_f7hq
%hL+q0J)[\c*3.-QSN6@ce\P"HE<PO=p4]S#-h;lK!!f=gOWsL,q-aD.Xjp.ec$oKrk[=1!XgKIgg=B;aW9!;Ns4JC/W9a=WJ(3I]
%SR5NZ8^*EN]7^hNkS6;5k_s)11g9g94^i2i3T_IIA+i!/U*op@`C@Xi?,D@$D<>a!.Kko\RTSd1ipS(^p"B%VjcSSXijd:"b\RTC
%DtBZ;&Upd'Jeb1lU<7uW.:dfppeN8<:S<Y!P%TtF%KrIu\0nm0VaK<io3J2Y^ec15-UW8&hDF4`ps!GgQd]E=!0R<EDiP%/Jc$!,
%s$fOI:67U?CW7sgpF5)\b=FJE1++8l&"Ns<IC9eDN'gugpLR=cPU0qW1UoJ14^*-^F+VKp)msD&*rfg.(n`+nFkC$mLSESFT"Zm6
%C&YT7/`=G"_tt*Gi[t1-.@9)JSR8RFqOK<'jV/)t`2Wc%d8K4f5I%h=U":53MClf!IWuaa]:(n:-*Va@iZkFXe0Pmtcks)OjXl(e
%5e#[\'CMK#Ehq3&]Ir.Qo7/di4Luoj6jXt(GL,/2qH1.n'I!=]dd2F6Z8/I]'k[7>qGlYR!3tid/9ja_lsJis0!C/f/Q&9"BR5ZI
%G'M\45L!t5&Knj!pKAE?[5ZOu]dC<,24M69$<\Enmjb';Zo.JQ5!9IrJ#Yj2Y-OEnX*Z\HiUUTj5C*7i,=kcDU2>,X8>k>Yaq"']
%g3T;r"2+=ZI,,<.\U1m.Qm7U*+9ce+KgUWSro5q@=q+c+Sno&lCJBagS8.C81fi$^01^4*NbSr`NO>75J/r_P#Vftl-H9J,_Aqrj
%jsu<QS:i1%76[&u:6<DlVN_CVC2CU-s7dfgLugQ?m5cbC>bs7'Jn1\G=Es@Ab27.D;6'].5,,b363O"QDueTq0*nD)&7RX/AW(%u
%"Q$a?CsG_iR]RMFK[((eM)i+*dMV4Mb!dDm[+F<FKjkY%eLa$BL-5UXoda^WJ(k6BK:i_H6ibgb"0Ltm?EjFf'mkIT+@5Ps<A;:q
%1Kr&$dDY@@4]#N@\Y5[VjYX01qRebjYWokbY-X]h0,@68%(5KI;"ad;LA<=eZQcUQYRn&*SDoaW4ta3UM@!G#Ti`Jk'*C\>i#j?h
%$)Tt#dV5J`?KMbf2UXDH?8N4#eaY'DOtIfG+p]e(1(j*1D+uN+ISX%t6&tCGNfEk8n`^W^F(C;]<?U-4:Di7(]fD.K=BAulQM#/I
%(#lBXDder$%nn,];VX;!G$ofk2b8^PYuDV*Q3ri^6d!:K;$?=[#I[j0YiG2&nM8#0A#Z^^,CrIJ[QC?=OYoT?=Te*C>8nXp3OZog
%7@9t%@QM/p9Xq>er9"slmYLe-0s1IkQQ5`foB%R3s)?(/@1pm?:1X0Fk_H'2#EnNA]&_4,N<<\3;C8<-AcC1bZT4E!5=<`GDS5K6
%e(Gf1'"V78oI-alc[Gc=a2K)#k#ED5=7"='Enl^=5UhZ&=a+/fqH[qmL?Dronqp'l*'Ff<0sL4s=UAnFQ[sm\KN>rAL[C;q"Na9)
%YSFQJa`@IJWS@iQ."o&A'6Y!WWY?7o,O\ri\A#2jIp3M'Vepe%>WP.<ZeWgW+FQ6V*3Wta^@LCgrYlb<I(rJJ1aGTE@==9TrAQA@
%P`nG&8n1lW4/=!m'5j3VDR0'DR^lA08^5!,U<W__q'cabZY?6JLSqdRjC2?jTj-O`O$B`UbpSnkjS:1oI<Xck=tMaab9u_2,=$]%
%KF"G=$>CI@9"qk&mQ:*j#)F,`DD*6Id+b_$L!BaI(!ALmD@Y#mYUU/dDH[PHrpo77ZtXeSnP1kb)?RbkFp.WBTki5gc65KG$7qK0
%"d<ab*0=)0.!Y4"En>9&bhl6g*iY1/J?4D/6MKnaA,*8f?MT/<&efD`@(lCB2c`Ge4CR'>bmX4`QNIp%MFp*hPJ,[6@&kCZG?7m;
%/JRqD@(S0sLBPV]aCoB.WUW'@qV7@I*tRmIn&PB*pa^HO&cKKPgdtXL+ND,CEAR;+8jBj$hXKsfeVZTuVW]Z&-OD1Qd%?*5n5ShM
%f"NRG:U*1M*eJ%PqbYeVM27H3G0Mh.+^E\@-Q?ss..NQK@[L)1]WE%b"gbJf0@o3Nf8XC+B7=r);D0Hts#Xaup*B];C_IH:rKPfQ
%(+/0Uo?e&cP<H8b9]Q5KcJ,B.)+4]*#8ZpiC$P2-Ab1\,"DfGi-<5F>_JDg'b?_VrhAEgbl"/1cH&jU+B?gT"+9#dHmNrK,o]/er
%fi/ckp=B*LX.Ql_+nkNG%F.Q2*EB5ZdGf6jNCu>Dl+;<$mlt,=MX7T"h%-F-QOcP!4Fh1m.5]'M<"0@dd@c`do2q5PEMf0Om8V@9
%S>hGAb`\$#SaLO;.0^L]WfgRnCrMuq(BctE-U%hKEOJ1^&uc;[DR*%kTVT$RB*k\q%b-A`_$G-o^)?33qG2!WPK4o8J(]=W=k-uZ
%FS:G",5^EfNj6(6okk:Q@\J/$RFnL8[+m*$p:7It=GtZQ.VWA9-@55GQ6O_R<e,'Y;ECuM^:$i2(2d:?G-f6O<e`B\?8M<>`bh+K
%KT+OAV1T^5#EM8m]05-NXuKc?jmrbX!8q:)#IX<f^,oGsgYmQG1pLm.;r&2,=?)H-Xf$&nR[%#JQK;K:rNC\3/\Z*\".7*28c/q_
%<(m(("J[)0k_o<Y-B+<Jq%UmlfH2_DVSu'RGR,Ls\eWRnfSY1i!D78F&'q&"GNAL2X=`lsKrFgSi`ZiljkR$g3cD2-*n&g"Mj&@`
%8*8_fWqj>g,D)_e5C#3[+#KmRWlDkjLUgO$N7J7N$5*amWNF)amtclA"[2RZ=r30Q^RSd[7RF6S'bJkF/GY6QjBR<)TQi.d58%Ce
%P7FbUpTreEc84uH<70&l(_kA:pfGRd6>Dha&TtR$XV-(Rr`/U*4CrM-8'j'Z>ZIp44-hZ+G)1h7K.eXOp&H-^J_nW"hd?&H\=;OT
%0Um!sYR2,Ef\A`QqptV_q7SfBZNW''Y$O.i0G0Poni(4bhJB\J_?j/Xk-%R]$_%[k9tp!qZ)_QD#2W^C-QPiF.CdpJM2G1t[g4\O
%aXt*e?8cRh14T$:hpmJKbS;oE/idi>qfD(.N\#A?\rXDhI\Ot(#@HrU,7='6V-D4[lFL=5W;4OZQ`Yi,Rr?>M>n])03e#=s#:-dI
%k'Ra+&+O:T=AH&;6>O1@g,h9oS&9Ikn)%KUE_*Nl6GHmE`MqP>V5"9($JQG,_)b@na>]FIFFoW]AuTXR@(3K]89hs"!U90]k+o1r
%>n`ZD/n"/&XDEjRFf7NL.+]U;eN6L1G$bapH:Q;)fR6I,X<%]V["fVMS,Ym#0;YL+DEDVj8%Tf<Zo1m7bffI<e'p%Y/^Vr46q@8H
%D.=-\U]#b=Q*beqC-D9,.a0R#&YuJ!kh3f[/Ie]o&1c8s0_oG;77U.Cj-Jt.ph)2GG3IE#hXWp6ITW_>>\]bLdcps^mq,jH$nm83
%6$M5"`d,L)V"shlWQ=Z'5g_r&[cT[GR%]N[1T#Mn`.W(c0=Bo7;-KFU:]tuE(7[VU&*'Lt$*ESIB_65o2?r\4g:tC)d?@1<op]G]
%B)40]r"V(O;3\qp#j.KgHbojCO5/^q\"F=<[oA\<MI:/-6_APN2d?=Q_sZKi<&^MYh1<i]Np>a\?H2l+la:i:PZ%E?Nu,BLlbGQ;
%=Y)#E6Jh=n!a),E<5i%E"!u&7etcGQF+jD<BHT#i%SIm.PCDhD<&LAWbm!L*S$e5!]FOT^(2J'NVo"(j\7dpEA9/V:HhanPHoIo!
%7#6$MlK/BWXmo:jD%Ykig?aVf*oZe+r9b9:f36imei#TL]/JrCrVo(,+'bT4o3Rmgg:n[WateJ*n^5[e%kSm:6_E]@*l"2fG18FD
%hX#<3,H$I<@FQWma80JW6dHK2I^ffgfCh8ZT3.t=>q'^Mfe4da@a]hSENV0u.JMr1#Oku4j&^X4c'g[+m60#<.TG:ZUF*\AlIoW9
%4s0Z9rb`-X<;(0bs)0GbPfZNnnlVQ`N_SIg<ksOmPLni".K`ijkks7=GI+^aok#9R'HOi`F4R4!($X+\LE6hFrbr`YYO-J>5I`sS
%jk4Ot'oESi8tid.:3&tWLl0c@)9?<I0#*>+[oCq@hWDCA0e)IM_iP`JpXF#b,EG:)r,)qCfCaQV5Ia8I\u;+c&785?MVNP2(2hbM
%).b@b%QtWOpu,Hq]s7fu7N_@^=qBjBQeG%AqOuSYLE8Ner,*!QeFkrST3.h9ALN3-*g6L&Z\(6(ohpF0AZhA[4P.dS?!eYZZ@PE5
%X,t,):$j\$.]89bZd"Lm\&J:$(r3*:q`')pXaei>P?o'iML&Re<fiC&=r&4:[,tV!=6Y"MP@jV6/CS&T+13]A>V6E<f@<c'?[YSR
%b:6fo2h!^k0rfR@m16l&@Gj>1la]bl1tL5,S,9clnO@]-X`^>[S()llo7reU_q*Ng1mcIE`q!<5lYCHRG?M#RJ+Il*&>Q\#dJi'=
%Q-5s#fZN><jNF7-cLWhgGRDHaKt_1#%]aq?c"7M7DmE'M<-;!EK48G^*MOsNNM@TUrZN=Qa0F2ROL<IB7b;6PZhlE9r./u?Z_YX1
%XH_=I_?fR0)(6("-MPli_&\#V?j7$(MA89b+]rJ(3<lALV:c>m<q])Q3Ick0cOL2n[KTf;S`o:oXDJI,A[F\$5n0QWh^H_0df3md
%gMtAGZ_OJcA9Rk;,3=Al6a="k,oiJBg.LFX=ISW=FEUk6TU\4lKRFi"Y&6RA]*fPUS$e5A]T2[j<bpNDGEdT6G3S=DG&IKn7%#m=
%8E:M^CFAT6!d.d\5MkCDVl@kjg'6&rm0_?.,Laf:m@K:FWh-';%Y^$"\i5*uLGimo)=7qQViGgLS&7.pY6S6Z9HIj0E+3KA-?1!j
%X#2#9)MA?R-"d.<#eOlSC]M.C'c^V)!6%i9%LU7QbmmTmG&I4s)-=$0Ff7N4QP)*;>Sd4Uq=R#321WOQB/=T5NOtCjKr<gKSK>p%
%H0gS6k3rsbWZ0<*Mm"NC72m=h</:JtXuK(d*E(S<_=>ESE4rj7nc#=1FUM(des7:G^W]G\HfIAbdO<t#&Qq4.D>8N5D?Q=Ijh9/D
%,!'@NZpQSbG+ZqQ6^7BC>1inA-9F+H2Ck60Ii7BE(f9rtQ6Rd4D!qb!(m7&O3f6?]U/Q$Uj`.Rmf3C!CXh3CnQg0eEPr+3$h%#/3
%24Oun%q/`XJ&\R-6>O1@g,h9pS&9Igmn`5Ip>Aia/a2[IY^j@WO,EO(VU=AU+fFrqf;Gq[n*jV@AH!/'U?u-"Rn,C4);`7800]YQ
%?1JmpA-D.V%OdPrmbRg"*($jrAY_PcSoT]\S.Rf'l&$7K<1',+SMg0)FB<5dkd/aXfo2Qd]/uJsG1JRF[V2upH?RQLW,@[+S#+pN
%Kdk7ES%kGF32[hWgLu(7:XsO#2;C*JAQ9`K/s@Cq,V[#%7.&hn+u3N!b?<@[*C15b+e2.55AMM$FoA_TBd!&HcKE],7"EDQW+^aJ
%(0<?([T"%@Ii[Y^XO=4>j;-N>H@^H,dH!E?$E6k!W^`d-oKrb,'_C1*kgK[5EcW6Drr!1>S@,KG2O)Am=utpAW3%&"*F)e8ct>ao
%\9mh&@h>uTQdPfj]h\cOebMV>Tr;/Bqe^u]r(q5-Q%BO=,c)>'NcHb.A=J5L/1ZT_A;7p'gB+dV0j;r[9`;:UZ/MGN)QaK;&oR0o
%o"-W2?J4XHJ)Kn4A\1]tIQG".l\Pg%Z:&XlM^uC?iZ6><l+5.Ddb'HKJM+\^"Rg`h2PFeBVPU&Soi\UZ%RX"1V:?(Ka+h2bI^ff\
%fCh8Z^V3bKmrq?Kb`OD:8pT!Mf?U2g3@N8ZI*^+R#pONYo58k^1O6b;j8$4DRCZ@SH`<g]V=fD=G`G>bor%VEbh08A%R&R<kih-,
%D]-gc_#O>es7Us?[4/kolp86iXnUeY`V=,Ljc3ZcmC$s\(?L#Ge_0A5iXL^6WX&^%*l<@p)DW6OOJ_'@f'HZE<^IN_<f[S0fP#Ip
%8,&;fk87M1qc>.dh[m$8'a2&S&cCq4$hha3YfNK<RC+250)5NZhm/lj)JuiO@'B5HE%6TVBt@fH_02$Om^jB%D4AM<[E==h)IMFM
%bus-Jc0N1FlHDS^h'kFM[p'LR>P,'hJq5hOHr:B:(5n!7M;Y.r/J0OAZ-W)@=,fJ>V9ocM<3Mku.R)?4\$`dN>+2#Gkh`CYN8\o`
%Is3XkH#e-Y,QML"#ZHHkKS*le@^t9*,_B,!D<;0Oa!#n0FJ,k%TR309eLYLddV'cI#<Chu\U]R;E0+q?C4V[/=#;tIeCKEEAuL3'
%`tN9"cF8GIP:c6c$tAN7n/YQja`\CRF9V9_"5=%Yc2pAT&g9$*asIdo,;FQ2"8e$J9Lmeg5?1=0S0(`@m+M4:O,f5MQN=d[rNAsK
%aToIM]7[fR<0>:7J>\Rs9&YW"U1f>d.X%9Y1b3RUp(H5?F7#n8fu]Hg^!VCY3d0;6_a&JdAHJiDAJ86O?.%lmXDSO-AZUCWAi`C*
%N87'NS>?i_HTaOo-/i,4O:uu=36N%hF<K5)*cQ,#d9<<><>#A[CqF2L_=;-KUueM-$#f'*j+Q!l#<I2llPkJ%)>2lmTK,nq8=S,S
%0`Ip:00<"oBX3=-]]7,Y5*-G`"eTK:R*9ERe--.VKBI/2g*,.:i)"lq$M.5SmTJ?I/^7%4FDk2=`pc%A^H.e_K04S^OUQZ)d`5C/
%@iie#rFP]nqg`I4U2!'WFp?-'E`1"b&-:$@4%_Rbn;-D]1FeOP"[8T;:Nc30dXggjfdT6LrB$.6446^;n=UFAM,BT"#\:8\>4tl$
%Dosa.)/A4Hhjl(i1Lbd'dMe$:.gkVX)7V^O(,UoWK/c;Gh"L62cRi,;)VQe>.^92IKAkFVb)54C1ekA;%!=k@6QW,gB"1QDbR'nq
%aN07JI9%PrKGLCs/0(u,D.s@NNUNLX;;,(G+F6T^8mKg;S7LZ8a%B#\^9-B::V1\7*\`:Heqo(/EO]KsI^\B)1O%#?9L*-)2KV/k
%J+77HlP.iBoqd_/larKKm7C:9@;uO/`@*@>Y=ajIn,)?([U&\sO%i#coY^SP6N!fi#4"5?Mr)('[`XHFc(calY,c)_rZ'%+:NW8h
%j^1kYH):tl"T)e0>_sSl`ZLj930`Yha+A]5co`X&UOr'aibF%A-YO!P1,c!3:__c*TC*N@"$l\u,0`Q%:q#3%((oTP&hZ\N'5a+J
%GqY:AfmLCF3ZPErg$+lX'#I%r<#:CLaV$PBHIZh%52B_TS'TttrS^OhEmf_3f*lDTAmrdp*>p;e'l>.W9(u$Dn`2sg3KR[M4`spL
%MRu#.VrXs<NSf>";Mb2H&c3bElF\uQf]fH6ck`c4Sf4J[?k_<cReJA,?HnsI5mcP6k8.iOPtLhhj8d67?f+]>9Z<6eaB*f0=YN_D
%>a@Ns5'BjKrrWW&I&W7jJiIJ8)gujY]Nt-P+ji\#U=Aj?W+:/SP#b(O2p_crfV';T=9=Rj=(ip@>>`\Yr+iDd81rM+"4@h7JjOka
%&F'[[qe'aRZF%39]mECh@h:;gI<S;Fo1!i7$)[=kB^M8Z3-7nqlm7hkWA['/eUCD,1.n.#>Xjr]=8IY\RlS#EaRNL'9Ca%E\UKu/
%&oui7A@bRD#5^rGgq;HUYmAWsJRfV>%g$A;84I_h,ZP9%,gN,V.n;qu^"2ckDiT2CB->VmD+S<@XiM&B?4h!HA<OV"nk"!ij`K/!
%EA)"Gr%?mhj)WOfoiTe:dXa;oq:rM&PbQ&YfuU.fTJL.:4qpV+-$;hreA9e#GkVlS<BR?>!sK2<LhWm\\&VHf:8BK45s-K5U7(p;
%jp<5/`\"@@c47h'[hu.;PJf?iPfJLLDib^GV^TP[+f3*a'&b.nM?MK//b=3KB:J+W.)_2;Jkg-T]9[C!j$:,E6fXfc',K;:_PYb<
%'uohDGe<1+@tH^U-V%U"iqBS\Nc/?@U'u6O-A?XV]-iDDLG+&r&VT!Pr,n.-@IINU/:ht%<h;J=N8.M"0.h$4="9(W6q'bm(/*aU
%C_2h0F%;6oMp'8kV]P<(ITs5l["B_1%6XVY`!,3jq_Hg5VaQ0XM"s(`dKV_;.9:iKRL4lD@:CY363*oafO<(%N&+KpXs^`^:iR5G
%(UTT6@bLPO-d"S_DYuh9hD9Z9p]WuoXlH\VYrq=NSJrXh$OOY1NK;c[g=LaK:+<#^)#M$j[e@bUY:VjhkJ!;6;]BlGHc#K@Vspt[
%CQMTAD3);+)@)nCIHAXlf0-Q*(-k_[4Jm%k:m[Zk'aNArSb*t!Xk8J4guQcECV5tY1[0jt=]?\2]&=dC-*d"M-/A`*#1[\-&Bd"S
%h6jYJrqdd&17t1OV_U&Bb#j6;n(-U3O%56"a$-Xl>IEg-+9hA^NEkH:o8[!4EpY3V\WL$t>M@]"bZ^;+m:.NM>a*cOhoS-+5M)Hb
%TBG'TA)GA70p]4+Z@'oWF4nX<UOBb:]=aUlo#B>g-4@64l?XM?$S4G,*;9qk*!H5/ds%$Xrta;O#e#Cq,X]=J=RO>NX(>7lBQFn6
%MOCP^6$CP,T![`>OI;4%QH!>A[E%4=B('Ho"?7U>o7jb=Xi@"e8s-!Wk%#^sH?W",V]d<%@N>tJ4]=284P]9qdM]iTfacc#m@pMM
%A2k],noa0c0(IW+CS6_h3"Q`j,=4_"F-r6[OC]A[6qJB-LigD7`E0XFE.sW<8V8&YEDn@'WoT2\rMaG#VIDX-"&:,"*m]_,6Vck]
%poq6ke\7aC<c#CU3WFcT'YK-uIg316=Bckc=5:AW+\1BPQTRA^Ou&GNMqod4R'k*9hrM_FiPDLb?)KR(KnlB;;0"noKul*$MOFBt
%LKImeD<,6VP?nWKZ6aMtlM7VX?O1kdY7*^[5j6<Q31!W???Q(8(@P*=nM96PPufVE6.rE8hZisqMiJU"Q@6Uk<[`/\B;D:TV-jcJ
%EHXifV!'!?Q`h::Bhn9i/gr_Y\&dQMs8.8(jmOU^:$b%pbkLE#F[Ebl`[$jj4UJ.0&5/qEg\XU*/K/e"nRaObWCcClM03_BNtpY(
%ck,I/S8kUD_@\mPn_22HfsKPY2'c31TEJ7.W^[q\.9j!3>N!knIYC7oj-1d:;PG-'A1Pp9bIrD%%DC2fP;1^t=^t*6N/D\1nKT`D
%0l!8k5Espkm^DR?3mkn9'=gD4$,6i'Pc_:..c*C-eTPf]o?j-'AUd`@93pFOLq.Lg\edX)6pB#=Y)Upus+F^4jWCu)(/!Vl#X@/u
%c"/Q#b"[9%m+*CAKFM*M1"C8IdQnFcKQ<mROfkG$+->Ro*fa/90j@<MVT3hq^NDR<\tK3MYhZ3*<HaECiYgltY>1giNhSCIhC<hl
%YE^O%$_8oJ=MgsrH?F)\?.7Ca]ff2n_O&*Qe\N7lY*%\MJP5g^]&8YPTl%K]pi$Uo(;ogj+A=_ZTV0SD26Iqc,d@ok*(2N$31oGp
%OCf`jh_FQT[G_"<PBWiuL&60WJ#s:A;qop0BNo8ur&bm[2KI"32;QGU$qU]7FEfB1#&13YN;EH5XQ?mVL3?5;poe'-aY8Poq#'ZA
%@Q)/UC3:UFUXl,_ea#<.Y3mP4^]+VRO&\d<Tp.T,P;kbWa4jD"lCCi`GC>4oi9u^,pc)+fZT_uFbo[5-V,kn7OtkGFfY(-Br&K_E
%6R\t\ngGG[#\%N?2NkVef8^8Qp38/nq\s6+Z9Z)RYG6MmJW2$'BtTKH1+%ZM3KubgZrGV#SMQ[(*8=G1X4kmq^<G@T(F_8F_d1ZX
%._eU:pNh*Rle>m,h5grT8BMJZ.Q^mlh6?:4`X0#R0t>K_L;Y5/CZtE/kWT(uir,\/eu\XH"qeV(n7/@T<+d:sG(UD>."CXK?PT(o
%_^BZ7(R!om/#fPppW>]0[=!843T\WMDTCo3<u?cQlZf+hmVafS@bo=]P(?69KXb0lgE5Wh2ip3i]Sul@6<'M9emEg:'cd2,I_>X=
%lb/suApUCClZ8GeQ$CgjnNh04;OjdU2b8PAL&ti92:fWI>8Z='5C5dQ/8P34"/d-JDLpW8Aj[@:e@'>9%F870\rJBgQ5Uk@5//^;
%I]Fb&';+t:0G->$45!8+-K[IN6#;Ht#5`S%S<8O)^?D-2U>'8o:kaJffSeF'`9hJAcX%U;DW9=MKe*'ISacP#2p$N%\ahqgb6*WF
%5CHdZFSB(?lK"b3#]JL`j(5T%/V/C@m(Qe,J>MY\AVkb!Rr9%c95"0;5Eh&iBH"OEA.UjIUW'Z1hId]/j(Uf:,iq>3+F"toB1Hb)
%rFQ4i1X$WG>;E@/b;WAu\X_Prf1NtPV"no![KnasoSsqL@=XT1NJD[L%uC*.O/k%OC),6%)gP;AqJ0q+T[/)q3eR%o].N[=95P>G
%>+OU8h5G,uiFT*3Bkh5Y\,ZHQF-^P6iKg.;hL^JuU:dLN)9F8&kpmPT`lKGpN[k3hSKouDjbGmnASgeB/PpAo45^7AL%9#Y%0JI(
%g<sem\d+8,f>2T?Y3aD84\,MSf7H_<pE+B/-mI=t`R^8sRP_>^ro[!FVN#qD'MM2u9XCZ2cuBdkcLW+2p+tQfL%hh,AeL+Aj8g]B
%,Yu)!E:2LcMCAlm]L(E"nO;Y8#uq(l]D(1j-.3YdP-35R($EtAfred6r)o!11kM:2a@B:r!A;2U[G;"h,J&8>qrOR*Oc(s&HaHk[
%h,NF$Fd\9.7>1W#^Ajnj5S"o@8_5!cFp7q)a8IP>7XHa/G*/#j+--ptP0;Zq,N!m7jXR$*WFoaP.-8gdbqPs16K='cK`K;jnhJk!
%7c>?A#s\7PFK`1;l._#nCWHCW_YTQ]9i/B&!CoAG021C96=O6-0S#`9'[X+MY_aFqSa*M_>=J)t?i.4ZWBS>QDR#[k['[gHM6Hk5
%ei,N*lUbIY^@1JJM`kX/P$(p9WBPG"1j1SR\lUPUF-qY,V":rXB/r$%#bk;0ca-s^LTh=1PEk#/f:'-r0C+!lIZW0'J'j)ec:.HF
%/6VBu=^hKW-H'nCT8dq\8P&K*eG*[3f:ppH`NmUl1@[']6T>`!boU$*YAp7JAYjT/Wf#J9d/sKa='NqgGt;Ij96\c2RZqD2Z9.%b
%PeFN_Tfginl-t-,mu1Y(*8g&Am2'#/r4+fje68I"_HS1o9hZ@,\7=-4.?&.uWbFUcd?nVqe<%,8nW>.dg*Id@Z`)<t=RKC^5Z0d*
%C1]s?1jcm$4o>5JD+nX8jE7hJepJcM\B%'\BgHE-.\mkahj9qbqla2+?nK^'<d)o-&h>K-&AB0f^1%:FPYibi&'nlDh'd[dNZYaW
%<Gq"/AMCh!\&@D[C1tE(Ua5DlHBHqqV74qt5`KQP_NM,@WjZhBQ?8jaWG"]:CW0:\X=NR-<cr&n\'X14C38#dj]Rr<Pq:=a]"8p,
%#d*Vu1`1>Rd>#l/m/=$]"l76LYD7f5XKF,r2ehlII%orl-;_']aT-6VWT-N?qXO>]A<aVsqM+\s\?'t1i^5L8J[=b6I?00fc/_@3
%>QtmWA9'M7P>GC&ei58;cb80+<?b(j4t-+-\feE]6h`_@ibSD?<8!($d42GAQNuHr]Wb.L(c!U_jJ]/mQEmeffa(.oIdQ'JKOZ)e
%;&4LG?61c;ICJE#aJAn!fq#5"X*WeoUO$.re8ld1fibHm@T]oad^961p'me*^*;5CpY:a/#=;9m(^W3*I`Lu](uHO<1g*)e/Jm-%
%CMgN@G[lp8ik1=8&FUcgXBVIb+Q$\cY/@e#M$pUfN"200c;51&*5L/DRDRgUS6#<emA?3-Ib)fT0'D2l)9804lKEX&e9igM?\Qtn
%orBX)RlXGjZ,EHYrpkhDieE:j9R4[E_lrJl]G?<'[pQl8<g8;.[`D;dCZ$W%[iFcFkgKW3&BjW3oVrP4Ap"KgZocX2K>"j-(baot
%]9'4@94m9]g-$lT2qFXl]s!Qu`+Z_5dFdE&8kGklPoQMgMY`VY&8]t1HFM5r?,Y;==U+u@b0JL'h%=*TS+[6sL_k"o[#a;q9L!D4
%Xf/%$Gj4\2pDH!gSOmuP6oXOr>o?^@%Ng\d=K3%W8NV<;Oh,Y-O2ZC*6QG(bJ5YWl4=YFp9!o+s#CX)61'tdfrk(qs\i-76PH;nK
%A`EUXW4&k"feD7hOTIpSaIS"0n=>4B#FZ=@d28*22%fpfC"Ft\kdd@`?LF\_FjVd=<O99b&aDef!sM]jd)l6-\SN7soQYT0Tc3I3
%MmF0W6[Bq+Ah.07QG4=)]9S3`[@_dDIJ)\1XeBrqpD"!<>Hq!Hmjj:(1OjaYh5=Fe=mPOWg8a`[cM(=U4WE2Q^08m+2+V?#hdt/k
%lHNiqA0kn@hJGAdRq.@#Sjd`K=Z#Z2[Q\95Ono/+T!Clr8jGS4ZBY%1=J)n?0[;aBT!F<o0'<*Yqdu_W[FquZh:NfD?QS;!6K6Bl
%;8C920cj'5Y635)7hacGWJ&;";+SBd#9kI2'jDc91u[bH]Fa<u[BE%^&Ck.&qj%I2drQSbqEP`?0<4P-Hl_Ob7ikgm'srr3V;/k4
%"@OlD)o]\.(!4eT#MQRGiO5=J^2\F%(\853X!)3GN&)+m2BgqRjC+tM@4;Y4rS`\l['<b'a+OCc]EVT-_/\DDAIb@QBaZAj?j44d
%G'bRnk[eJ4[&ZR$Mh'!G0g*)]_i_[,odlRQr-3hgP?<IQmM'O%5D.X<QfZkG6d>JaEhlOk0O+5(nuk!9^T:H7lIRcl,OL@A;hm`(
%/@MIJB47;4_U#+;YTs[07XgZhg[o6R-jS%he.J$+WGs=*#:\L`8#cH<k+nU@54Ol5/#`V`D&U]eLo[+E0KJNn>0t.haRV(a.!Vc+
%NqM3O\r@ffpFKqKY8,!$"7pQhVCP`eD.T'f.PC9%I>5o-8nn5I0+"0jUUgWoc%_shU\KMu;n,fI?I^iW[bDt6n*FFPQ_?ibYCg,I
%L.&m1r]55iJoYZQP]J_G,3?^C=Y@d*2K*e1F)co;^d./HOX74(l;f<m"hUL_8*I.Q2GO@gkL+1%eElDVr8AVaYO,o.DcTAl>smJh
%<#,5$LfYBikX=/WI[P.(p$*:ue^,@G+:F'Q"_[a9*M05i!&!Y^LpC.;*>:>[[n"lU=ka!0bt`BQDq$ZLnN,B8I1X_<K,/;qB$afL
%>r_1!isDRWJI^VPHWQ$DYc1l.'URui94c0[[lFD'Bsg=#r[qDg\]54bA/F[!/\ofsK(dL7b/P!!a8.GjLMZo8?-h%Ud.u(OJ#1%b
%+>P%XrOns"D4PT:B;lA2T<-n/G!!(6NobK`UX.X0BPDXaUOT&I0o4H/^0MbdF[fc[r1F._+!&CtqZ<o2W;>.rXH&6P3k*O@*Q]`$
%nS;u#TZ?n2Ib6m_XDWTTFr.N0E2fuNj)r"UKrc&^Z!+AtfBhi*71RLJJD$@c-F5j)Y5M0h='Rb1<@gRYXH(6^$2:r&@$7?9Q-e59
%#_(?/qGo;6D*fM%UBQkhHZ;":-shd#GL[tTlUfp7p)m'U>7c#<E>1dm_W2SX6`5!frh4-u0+>_:d<u_<C="$Z(S+=P:&_j<R.;,c
%6&N7I2#']-[%:)Q>/^]faQ-]S,H&<&;NtkF+:i"_.M(_^/`ta9FCIt:Ln"p:=rp-.5!8\-2O&d`WpWDE!+3mO4iU9XLXeFB!`:jM
%^a2;S3`;+12'imZrqL7JAQ$M<V<K6#>WFqD;@BI`;e^Z:,pHI\Fm4>R.h\]9KIlUfr!sB<0r95=-"9]c]OHo`o[CqZH%e.(^L#''
%b3W_rB#Tu]Emsu+L7L_)j-n:!`07-cDe53M\?9[BA9;@HloeCMUC"U"cl=SWRF',js6cEJ^#f$g"XJ\nY8GhC0UkX\6(1.\f91n6
%OSc8(33[4a8RB;,/O,n;f8=KX;n1"%ND-;FA1<uPaktgn0"^<#PE*;7p$YXf\1ETF=AHVkImh\MbX]"4\Fs/;L0;pdE!i7Bp*BE6
%`$P.$//N7oj;#>+Rm$EZ25`-2,(.^GF2C?,1>;*0O10DGNjs,Udi0:Va$WmR\bf`!B5#cbIG3He0q`b<,bconPf]lqmH_`S7k5mp
%BUS,H&UMWF^PHm>4'$`1DV6s^`dH`I8&b&SJjMqXElMD!n+Uh6'GUeK%i1TC`A\Z`\Jgm?]%bhd5Wf2(\"[QaZ^e'c)u+?0<%BJ:
%\h,5[rh?2fp3=s_55'HIPLgt&&:^F#O9`%'F,sB%\EnXU`saf6MPK,BncR0r+D!c)Uq"]Sr1PMH7:**BM<IQq9).c@h\U&M.(Y#%
%I_1rl$=W[el8i%g/s&SO*A$^uTnd;]+m*n4^6,8\eC9ah#+F".99H6f,T-ujQh3Q?npdBQCD!VbpP=?2f$\P`p)OQ%+AMkJ@C=8h
%a1dtl]kk;FJ,^^eQ2]U'bpM0"A/\#_YUTE=!<IBDS59QiN)<V+\gKX/,a:0/Kj*@CZg?Wq5\4RQV];qlSoeN:GU\L/g@"s8M$</b
%Goc;05<J&EM+&fC8:5(4<oG)n`r,\c6XlJUY<S`BlS#3<74jP@M'hBf#AT'd"c)#oh(31NoGL(=jMe_K6!F8/7:FiJGS>4a9j(6'
%"EG+s>PNU./P"R+7gRm?q0$uB(JpXSW9jo%"1%Bg>_:;XK?5GKnjBFVP9lslI;\E:G'HW_#8l#?+4fJf`A!jYr#2Kl/@usmGsj_C
%$gN-P!:;t<%snWKdttO:khbZGp>%kaEkfO(S/j$=HRVI<?V=JEiJ?ZI?6CefQpr:PSUAoZ^=YH;6@DF(bUX?3*KdpVSD3>=Y'#Ds
%],cq'IMQ5P/(G\u`%JX,O48LOEI1hUaf1[!E85'C0PI&)f,4Sr7g-?%4ZgSLMg;M-?U,sfQ*IKrMAN5emf2=Q7LO8$BdSZO7:M)4
%:68cfXsR&2hUmUa,WWU8_dMJfT5c$qmtqW3dIlRlkhL!Kk'<KPYC$!KScO"_5F/)2/$?hHpNf'H(8r<dZflH'''c/]hK_Y)N1T-N
%P[e.(om9iMm:N&b\$833-VN.SoN`Al;gR\"8%t&W-]d+IEou5N*oEe]k.V#<;$lRE`tLV[!"2cnBp+rWku`2=mZh&ElG^Ubn%%dA
%P(Ka05UW"cq:lr_<],$7]%1=NDCj&MTMudOb"JcEB2M@PFKSHnHOoS?4fj/R%EIF87)%nlp5%1Z?!9JBM$H`tb3^bNFk_28aZlLd
%.$&*[V!i[$h?OUU$uo'-A9emTG7KD$J,5Dn#'*SYSXQg>U_.;qa!rjt`DeW2(VrCequOYN2Ph6Xmf%GI#rp3qpJ))?AtNT%di.!d
%o(]h`/[U<lQ#&j>,=$.WEu]/;8"U+FOQmd6`;@gU$ehH<+IkTB5*hAtE910-jaPDpPV#1V@;A%GNHO1+3t<d2)IgsEo`^p#r;(tr
%`I]abQdAi^;'\J;Eck5S,oP3qfHt&32?\#jZC>E=ZlOBJl!bF9f)9h:UoQT1&0#gVTmO!#:O/p8"tDpKpjc\u8F/tg2Q7G(,4T6>
%1RjN_kn<ZCd?Itk@[ED?`rk[ToGag3CIO03Qa+hU.)3+nj`T1;=G%sm=FN3TJPk1FdI7fi2&)_ob[koAb'\Kf`*L]kMYH?B.D5E,
%=ql%jH-c'>WDn6n&XJpoiA39_4];8BbMqf5o]nk]/4f6N;D`^tl/SbPES+E(mE'lb7f.gn4+7>^aYRuugaB,f4RLCOG+tI%*67($
%Ll3cf"3RLG[tDl_9i/D','Op6A<Ou:$Q#-M)dOB3@Zm>*B%<_E+&f\Z-n'l,'@C+PH@2<MZK.).r)Qrq>b0b5;peL7Od:BKWY9/2
%b7^^lf!I>U(8lk,kT+-_;KhI!.DCin#1lVmZ;p7j"/>pdDF2N?HilMRen!oX`&N9>U'!0e)P9B0h\4ESMR((:[N#B")B5#G39sG-
%m>Xo]d<&/;k5[<jjI`[SE%[Pbh<QQeJTJV56sDXc*EMdkO^Kb8P+KTJh''-dqldEcNne">OmYSb^Ht??2(Man0VJqh\BV3g=jWc>
%hSt0>N\!WL?PT(_S<i0dILPGp8:U1537*P?$'()ooVc+Ib&F_>5Fs9A<>HcX.GeM:M4aN%`)mnKJB=N<CQfitE/BDcnHecORtKU,
%]&L"!3ZSO>]X]`)QG/?JB8F'8)<E/EE@PAK[i7D;ApC%b99a<o_l5bfH!m@eqJ$LR&=KNBcu20@0A2McHbN\eME"LgSXYjakSg`'
%MPnt,"3P7B0AAopaZ%c3]m%$u@XjFO>h>FP21CT=7G#)$R^gmeVj&/gZ[3I[MMumDT.-1H=*fO1B-D^_^_<.>EHc;IHsh5`Y#)2&
%(%(3e2'5UNRF6_B7@./8+,DUpmNUC*d&0s#S\(41c@n8.HWdC6ER#Q9=friB8]J2C1@,O]'oHY\>'@Ub*P%I#no,T6Q2'6b@?dg@
%06ZueTCkunoO=,WYJI0pn&;^5NkC>@-dNX(>ihA2^+M4q_RXQ5o#ARc44d9B5kC18e;C6XPma$jbI"Fj-h:D!2@b[+"a.b;Y$2X,
%&_A0=%5qVYX@2;pO=oQ!ANru?Cr:[9im"J$<5]F*[_[?qLB'RjMS0/AAj%+#%MYUKMms9k]hVH%*Yi,'AdT5KkGWX"\BXGg5F.KB
%G%n_NW_=6:;GRJ\X6406=FAakRMjgWp]f5"BJ`>H=`Xe_6#0l>:r9Fu_a(Kq/>:Erl,?kt\PQ[P-QS9i9]'61N[#FlgKIEknYEpE
%pT@>?qHd4dj#gMlZ(CYaF?<R[bNf!31H"E$_f[&VZ=^FX)()b14A<0UG;HB3`"4W%1#t1)FW$_B6n+Ws(g@-gTa6>`5]P@]RV.,N
%ZX3S]P_=nMO1JMEc0k>L<,G*$(i#5^r<QU$?:0"Gal/nQLk4C%bL`HejOp7u-Fh,uPNkPIN'u:snO/M.Zb(,gE,hl9aenK=h:`#0
%fBrmKNKr>$5lGr#8]K:^E)0$GnBEgXDuak>'6eE'cl8N(X.u*0H^qHo)i5T-AKt`R!_kOElV9H=[o+3t-=;tlPqki[Be?oMX;QII
%.9&EK?7,'Io3@Dg*T+2.l9l2iJ_]k;9*`^gBIUQ8(B]IrY8ER+Gn)uj`kL!!IWV!H,:WNVQ^K,[84?&r;>a]ei4S0M-cC4cOo`ET
%(*%6CMH5Jd&I"17qdh#6ktbZTI?bNP'gf$CMFqdHkceK)Juc&%6+a:)*])M26SY0Y.as0US.uo-Gk6]#g!AqiG/@$G8%CUq[$>l_
%]GFsWnhrhFl_Q9Y);'sVCK\SPV]:9N+:],!J"`K-3KgPId+.M*CY?"I]AR@4,,6BhAFs!+c6a+@/"_65A3_fCrQ2B>`3Ap(Pquir
%eM`n(+3#aLg<QldU#kT91rDis(8hndbok+ek4D]l8M5eAPBi:Ap;9p+2L($CGiDuj?!YhM\[\=!jP@jDl6K@H6U<UV6I[6UfUeKB
%UlLPED1P=%^l[Of-o.lWWno3DF?-:VJTcfpmU^W9,lBT"5F&\"fg7Z%Y$kMk$'RtB:V:)!RA<#P2MFd.*dpRWaE4u-f':djh6uE!
%-mfepUKsW*3=\]Qp`&+c]G3LEGsVbg/Y@p,93CS_91(Xf[<jdtMY*nHR;(NWKHen-jGc,F<&[3P>6?=3]_g4beF/B5]`huPYOpG_
%?MJQ"1mF>>'\t!"OA>-`B:.``;W80")]h@>nS#ac(!f-j`h]c_YAsBCmBYcu2U<RD4aIB@J\*k_[FS#]RuKY$CE2]Ed$`\X$89V[
%QB5"ZTbVJ.HaTd2r*uHu?pBM5mc`H/H&M!6mr*0TI't7pr/Ns:r.3-fRY#U)fubspr[4Mf*M2,j9ouC:b@p/^*15:iPk:YkfKu^G
%=8P&dP(G'qZEqIW`D@(e[Cqbai2a)`BrNt+)LJ47ncF.24Z1&soLF'`l9p'3`sXu[f1#Vskr!j3=V^Q7J`n4#'-q6B(_hI!""Ar4
%I:mZ,%YK.]EV=NWY4.:Q>Q[m87CT(poYI)(QV85[5THPXRruhH`G8(8qotK*55;Zc6PF^7X:0p:IRa/*k!T-(bMkak/E(PJZZrr4
%[`*CBabb8H@p`(.TP6DWLCEe6!hkc@bVcl(aUa3(]&O(*[FoGQ]$$_ohTm:\k,$!LZap<Dg7@Hki2gf)j)r"aGJ<=<DdNECTem2V
%X0V\!P_bEh,=tDO$5'jc`Qu>'?UhB-emImPeII"^L>B\:j+g]4-d:9K1>A<qn(FdVo`'',Is35p+`gnh?f<H,g_9iZOW1r4"Cpir
%MI7JtIUK?m%O[cLgOZ=DHh1pY,I.rRTcBK8,Igu`rj0$:>+2!qn(t-_N8\?LIsG%SG6g\%"2R?fBI>GR-o]k&T!:N@S$bSE3]^Y]
%5o!7R&UdV;'^i<`!I\-EG/+$ZonP-<lXEmRTs`\[m2[1sc!e8FpFf>+]ZJ_2<M[t:kfJ"-A#]3HJX1j]FNhP!DU-^EpG&A@.l-8u
%dht'V=l"b^Fr.N0E)\cOnN,OA4/%.pkmh%Rg5le8T"L8Sk:;p;GF$PYKhrN%,]n!_fX\;9Rp[t8VoC.]C%b684"j-0:k;ATh_m:'
%N1rr3XK\*g'0a!e)a59M6W\/&jUd1(!/W[*Vk:r5<D!Z3X=td%ip%\^[O(R`Kl!OQN?tp]r)#*.i`)*LrZSq/o;V!d/X<Ueqj^Vq
%4!]S?GQtpm44\5Mg:,Z3"#U@9Vf&R`)U`$T9Qbu(dem#BfHOCgHD$hBJBYBJBP2U=&r<(5HuDX7NZG;Uh9ViP54MYEgAPZ(%5eGU
%rn[OS25L09ME=V_GG!5c+dY4Cs6rlXq"kNm_plomohg"UV>5F0@d-pLbC$WU5?E0X*YbPE;>uD*PHD96GS()q,H45pEOJ3)h//I<
%-$WCZ_6aC\^%&n>I\*C>.m3bpSaf+m0ESpSB4i!YGPb5om?.<Z[]r/o/$EIVPj%0'I+QBU:[fkiI.-7OHbf?cZ/eEl$N32k]h+8:
%c'BY4:FZ=]SYQBZn]B%X*u7pX&lJuP0LnooVZ_jt/A4_Br-NfKgY>PWIouhnG41=Kei2?,ZSjQg`e<jI=?4MNVe1q[f/n/u2e;fW
%%AV?J"h6%A4HrHBPBLn&s'#Mh%cmH![N1<=rTsRMB,!'V#o2hQ-:^;,'$m)FW4Ls6DfF5Zq,AL]Onf2o:ljkm7FtKDWD1cn_0)b#
%"V'hp7F8TR=[u;H='7Qe,Fr><ci)D?W?'GRE9q/@IuXp%kcUBUT7X?u;RE2_0)XC:\t,297RfP=P?OYC;JBB<(7"IIo_nB`PL'p_
%a8f-+ZQ+mh76V.Zmk*EfSdkq^-T"Y-DXt:V#PO;G2".Y<nF=,#`QgsIkO+ffBNZcQY;].feo+o^[=7h,+D5)glj^P2XmOm+E:(^:
%fIGUKeXiBrIosA)/LZN81EVg_lq=;kPu@(&4-NSdpYhK#"FH@"Y>GAQ/9O$S]^YTF6lfMF+C0Xg6d/b^1hf\[3ULW!B)8j#Z7HJ(
%imTWG8H-u/6;PB)41&hOp<M/rr-Thg:,+8sc3KH3?7fbuc)Q[:?=BBH2s7JUHcf/q6&--@(k%0(^VP/s<G+&R%SHO$2i!j,s3s%R
%0rX^R(NtVlib@nkgB`;[,Dg92I.=%,P,%9--US;tLWQJa?jDmiG-ag+o,;,>\=<p0!Doc1KT5>):_h*5b;n@3d?8RS%bo^iM[FW&
%[V*+<LZlq7F=P<'\LX;7dn(9_72,!M@n6n/hLgTD5HS4q_4NdFkQ3`ghp@^#1q\""G@JKe%-EM&qd=SK]H_pdlYGBSH-NNA]X:GT
%HQ"-<B$5u84i`TAo6T,Ki.eK\OK^4#C6S]WKX@2oZQ0nUokIEh"(25#OQANJ.:r=;G.Q/RoGr[]6B`Z'IkO<`0]h@hSe2U3FZ=t.
%m"cL(hiOq&P*3(B73;$Z*Hga_pn`EXm?1q<&n67;)jG_*)WEJ0hL793:1-,sL?!`O+c?48cCKZ.kucJ-[!S?h%!5lB<s?(_:<Lms
%Lrqs3>2^r@fGh-FYG)3?V;>F\4K?=Knr[^g6S6d<H&!Yuc1`ut8hg]\/"a]_SL]b:Y@OM>7K&>GNs7'+^kF)ro3a=7OtBsA(?a@D
%4]g30_CQF3,XuX,NfjT$QHc]HfU/s?2V>$si0lm,P7FIe+$RGtmL)dVKjA.[6]?QGXuFg`;N^pW"KhSJ*-t(qdT5H-d\-qIm`'(0
%N\M>><aT6,7rr0Fm).KtDAYI6F_.3&i!-B\XMKO\%3(tV)+m!('aaZjQH'ol\=?CZ^5:b+mAqWCm"gpJ3<+%FC=`MMATP`q,#8Is
%'#KWG6#&R36Oo7$bj*"dg6"&9VSpo81ES,3m@qH8,nG;hidp?^GN./>8S%CN"1j[;Vq;**l^K7b^\/Z+kVP/O85W@6A1C2l]8-O\
%qPCCjVh93*\$5P$ct@D5BEar`;%3&$^C6jSnt-uf%KQp7&m0=FJklbnZlZh,,XNaXK\TbKqjM$1.ir%je^)Y3/N+-g%`Z%I*\&Gq
%9^.@+l3-?(g>8^qa$V659=Z@pStdVF>6.CaN!=975BU6V"6uA#?XWij0uD-!]JoL_*K=TsRR:K8Jf&MmHLQ(.R,FtXM1Yp_ltKp#
%OqL]_pTC]f_N:*8ZXWIrC9sqC`Q%_.9[_,$E;uJfQ0Ro8@1jr@BruNsn6JA+M%,DpHKt=T1[8@-,qD.id>_Vc>RqIXWa>1o!CqHJ
%V8".m3297:O;'>]*bB`:,^DLZBU:A3T_4%jjX]l]@a,;?Y(dI'GY.cZKn&Z$rol+q;o_5X[Nk%E:/(NQGffIhl$a7.Cp"j<B*;bq
%9\"eqmL8U^T]f2GPi%WIZPFO&"i]iGO=Z=NW\=W]4I,XchZP27s&>;/C'-Zl/qBnF<\`Tpj$Xp8e'RR\RI<P#"E4tqhTrEBAmK$X
%VIQpkm(Bak1MG(%^pkB3Bp*UbE9!D&m=7,<0ZD<$D1gT:dqd^A^+M8d5L7W8`4jXFXO@V\.l,@6U2/e.g\Xlu@E+PjN"qIj(tdN"
%)H7sp4E^U:m5@0DY+IFmSB.B(LG/k6I4-lo/tA)QZB`WS2!e?m)jj(`AFu!1T16]QZoCF<#8RqP*+RZ>L_j[?c^.DcQD?PAldN\/
%`77Gc0<BtA*/EbMp&kp)4T,"s0K!:JIGK)Yo9`Vpm%f*]JO0FY"iLRh;!M!^]`A9lGY8fXTZH4"d2Q1LZj&dBm*NDjPXa@eE7o&n
%@/F[0%:SZVUkuK3[SAc\(UGjR(cp0gG?WmRHLFB#Bqgg43hSE(onUHGC/eF&Np:,fDr=P`W%Dj"'+AM"BLZ1fXR_b#;Fqr2?b[G4
%ak2=/1)[lJ@9GnuYVmfR0`.rogqZjkDntYbHbY5=r3.aHIGMt2f\?[cdsUDS%I"+$WHm].4hM;_,FO'25a8*dB"2gV;Its=r#??S
%/S?8-#:*J(&^`HLlU</IY*B8sG+ID?EH.+IRS0eC_]X:uiC"dA2i/bJB/?VBCTpE.3pNV<5OE,00kIb;\&Wq]h&jGHkW9*(F:M$C
%AB#!.FR/Jm96oKONcYmI?YebXY+\Zgp\+.-_HR)PlUdgbaOJ3Y$h/l/Wk&B^gAU^s49ug3EPYdNU,,F_f1S/lGRHR-$KAMQjtKZi
%D^cj+XM<`?2u&c;OSG&d93JF4_2(>-oH7'4R'inLdqOlI_bO4mpMo(,/ECjJe$:-]=/aA*9Rk7RSVU&0QP;9uBX2,"cDpQJ7okjH
%(Ms&hL7o:9^t\&9!J<$#q5W\8m"S`&2Jb8MmIP_Z=)tA+`pOU*o_h?/Js:b4$;\<=+[ojnNat'8Kmr:oeRKHi)Cdmtaso:3NfN/H
%O[]O02GSEHY]l,u*QAb4ir#G1<)>X6"Qf_IfDYolERAe@OX48HUS-J;cnOKoM'g^:&R8oUAQE'ED>HEYf4il02Y>])$EBSgO7(HH
%[h1ejD^]]aIX/bt&=:s,(im\;9CpVJ#b-3O5Y'>(7@,R^YD,"9d%cAVM:.PDAH&gM+V!,XRaPOZ9>?_Bn@@OhW,80`3+u6uJ:IE$
%e9H+ND$$c2>&F"dpFOIEMU/!MaD04=KjM[W4/ZZ@J1;<!Nf`>%ZnqXV=?A\]h>Q`P#c]HVah.gk:hXbq^kmVNLV]$*PdKO\JU_Pe
%;d;01*(#rbim_m?FQ5i7`;pMhZJ\"[k+fLWmKEs7"$/^X@lJ8(hB5WEZtdSi@lWU)gnAB#k?4Z=bkGA2GWpfeN=p7oQ&kk>*3fXf
%U;=%6.AJk]e=SX2AF(J>P-jh[lV@`gk0NL+piB6MGr3GsSeAT,eO\C]4,eq^4@>cFBZmd(KF$@Qfh'oSi5)3Y34^GoS"aeni,m99
%3ss^D:F`<Jc6!;3,?UoTd-'#qBij0-MJ&N*7Ya=Sd&]%[l>Pm+fKQd>4;=d+K@uVhd2\]kNkI@c>`;D*fjUBE2u"*%$IQ3pl<qN8
%%_$unWd?dE(^Xc$@FF%6ai<Y*V"KE2\u9!?8F](@VaAdK'a!rkS5*aKUeJIW!7(m?7?"oe)*!.SQ`("S4S9*bkH4DOJAlFm$S!Ug
%;5C]dA=&#!!udCk3h@O<Gc=&c[7g"iVs+6E=#[iSZQQJ1/T79Po>TQG%Wb0HE0>1rQiK(aRtAe-@%jN2-]b>;5LVI]pKmWBhBL\l
%;eOIMct@o4#J`>aR0Kc2Afg8q..qu+RfJUXASNc1,&:(u$jRutDg80dG;Xi,LhsiWLA3>SNo>?eKl2*,PM+O((cn=WI-?YuRO#4>
%=Rcco3n(0CTk:87nA*!'E)H9?h)XumHg:FE&MlCL;M*/rR_O"_4p&rhJc,d;?Wu#-an94Jcr6R[nf<J<R$o+erjd3adt%CV;48/&
%dRH<(:a[o=.([@b38ah]6[D6a/9t2@b:c843]B[!NEd>`%A:8."t:^MU0>D;3BpToN^E7[1K/m-LSoo-1I[K#)i?3<HsnC)g+?J.
%<ba/%AAj:21HtVdXhFn'9@lt?DJrq*;0HCD2FeaB*PelP:-ED3p7kZ$9!B2M:'FN&frg.i%X?)(=\2a?=9dS&jqSTPT)pOK/g^e'
%'\eF\L]uRF#Xaa2jU(i3m?$.'??4Xg*G`L/UaqRgE2VRbR]WQEJ'&t4D910QM^+n\7GhY;c0F$gD\:D*J*MSs"iD:<UeZ36=!OYq
%W#!a:[\6K4J!Wr=M3bINB<o[.&Ot-1Hd"Q!Yi.I]o^nYZl>##]rq$T1<TA`Y^*Q23ahA3YOer@E;!>r%]53tT8rR>*4LAM[T<Jl]
%[$$e6C5Ie0nVsp];_qjqW4<<[risPE]g0#A:tIr(rCK8r_&("qN&kea&HWuTedf2EaAsc2k1_p8m510*2rjZT<i;*p7iD['KNFU\
%6A^?d'cKmcDnN)i;c"M+P,VTKYe3d]>X;;;S]!=e>pP/u!Ca&X(X35tb&*#+=S8)!^p,'b:Br9Xpj&!Z!,@aui&oL'G&poe[-jPG
%VY#ZEml52&2VtmsE+aKrmn,r;R#Y3(E?0?nn<1cRfrm.On'X&oN*\uR8RQpT#igftV_,.1E[4dsKAfVB+crl?`a&5A<>0BtSa1J_
%Bf;YT%p?@_\$m'iCY:+[PSCmDjhZIPPkhePDnUjf&\AQMpMl6VQn[Mca!-NhW<fa<InLM%_C5sZbp:)NeI0,4=pH)2f[MH2\AEo3
%f!3/e[])I'iK#m-BqmF0Cnt?L1l^[\GDS"tCklB-Ptj/-6WF=;IQub`pKF2]b9@IV-E_H8+GGjW`##F?5n%/i<G4B9/@4kX^!%nB
%6asq*j!0#A?kPk_RdFn+TPF?UN<`OnU^\cHOm'9"j_"$^;&*X+XCem(\,7)[os^1)QjC*fV:[?N-.mK4Z<3V3A^s?i1$4Mp[\:X'
%*3_*\E,So+*,lLo=rj$"0[(>6%8cNggR^0$DoR(qq0]d@pVT"/J[R$=P[.Ig:XOjCTa2>:+Ybms#7^3J[=usCL7H8g3Fa?!*@X[?
%Q+@3F&`Ieha^DJp_HPN$F"`-KTk0ORNHS)#A@(gNeMs2X9D3>pIh:b)$ERGfb<u_#:Zq;-XJb]ciK.!7=/f*\'!d5$L'H]Z$e=2p
%Ql:ER1]udG!%aA&=DTt@U[ic2dhRM5Ce2ag1=F(Ql#)."j,AsPA\PGTii*4nh$`rQYkF_MT=.u1F8/I+DRDftZA`1+VP#((oa244
%)>c\"Cfc:5."UGPHIS^k`u(-VJ(dpbR4X+]qEt\JQ/DGNN^3E%";LhMnG("<!]G+ZhbeZ9L$*b0Ff)JH,^+Ih>=j/-p#,/Z3M`i\
%GV4:\%B)_hF0dbn6t4qLc%5CR@+S$`gCWM(K*ggeHZ\I99\M(ur#8L]13kRao,RIlrHa7^_49L$<:'Aa4_p1t0mqEJ"^K]<c^WpX
%E;O@,*H[Wm6W#eW^0r;'_m7rgKSpC>E:&nq`m=*shES]cEu4YYkM?5VY"'jue#2'G3t13pT)Ka-"[7_#E'tco>d%.o<F@X>618A$
%hY#@84kPYIYc-C'<!uIlU"YE8U1%5!n(Il=Z0?/iqWZk_..X)#*gLh,%X\a.MI5gcPEu>^*PQd]+d#Og\X<4>jWVgMh<g3]?!n+C
%PdWs"/`,>4'!]?dA1Og<+oe](TU05pH1&GZ3t\;Po[[n7fAkhk1UNG^'u/U6'%2fV(JW!%#e,@pb#ekPJ6l+cDq]%,Yg78g=iK2n
%<;_nOcRARJ-(!K-*EE(hHc:QLoT"hVY+KT;=[bOHg<0OaE*OYoQcmuBh!FVsTGJ(MOKXQPa5UML\\8dJY^@P%&?2;q_qAnq!]MO-
%I`[PSi7"Fc<[.01E1#?0%h,)fc+JP:oeB'dk]\!ga7;us(r&F=l5PKFe".,1*cHQU')i;#BpFl;ahfG,2a%uOT7YN^ArO@?)dATB
%jFb5*,6+I@aFb@9b?fHZp?UqN(]&?&(SeKqDL4VYghj%W6i-Hc6\L1<"R;$ol1A2N'6]FRV"+:b?4QMS;4V]N.rrP9Bmt\15EN>u
%n[a5pG,sC0\'<`&UMl]FGu#IT.<7Rr7^C()/-K>KkfAVtU".1:+um`_3sl`=AR)r(gYNbNZMtWGXFAHt+ud`2oBQkY4(0f4\elj3
%m?Iogj4Sah`D?577Zfo^mNLi>f$BRO6'6!Hg#-JM!UMIs4\DI4r<7+DC%VRRa]:,1\?^PgDp)?lW8`!E2;<p&0IY:VYh2U%g)^d"
%Xm1FC2FP*8l^(g_<f%@CNXHXr`\@I<-AakT%A):6F@XdaFk@OY_j^NBk8d/!4^o9+!le[ZCQ&XKK3YgNIDF(1$T%f`,5dgI!pl0W
%Ae2D^4L4Y'XY[#rLOO#,rnSfK2fGj0=!n9gE"41Pl6W7D-s-1O^Z9g$"B9sDI7iOX1L\?bZTFm.d"tSCg"AWC5Sq/&a[XT!;!-DW
%KA["kW<d(jW/^Qk$<P#!d&J7[bcnqq<+n,Y?Ct[5@[&EA%h^A?,Z7C/errh,jl%>P8/qbD_k:VQ21F9f;s-kq7n,n@?1%q71nZ]s
%1dg8F&#_g]9kPBW_XV?g7Yf_,IB?<JTCWISU*Tr.J?.a<<9[=r,H\S16Ut[:UPY.#4Z&)(Q6:>fqI8fulfF*L5&<gfbm-\188[XV
%<"-!B)G'Y@,gGk0NN%:-f.)?.[`]]Z@HD</&WG%%QQgO&jSjI)rR&2[kM;2rBflZld4Gt8cGOYbl9;39Y#g64rW!d^$\+Yf@-U,L
%,6R`E*.]C0-]!AE;<SG9MSTkcD3FEKJA)cU`g[u!WHcB&$8<iLWX#HAkFnr;hJ(Rg3*'E1jrFQ@GW=sXnKolo>:-F.kuqHsM$\eF
%]u)t@NODZZp7pjedtj</_8ENT>=FsJZS8tu^d(T:HZ`0C5gWO&:I<'ln<KZW%rSEVai59Nqm_MQq-(W_.1NQ8RtFT$$5eQ1,e4!7
%k/dasTR$`J+.1YoJ=G5lV!CB)/)g7*8?KtkRpaAJM2#?tXLHLUD(dQ6/h+mQTh5(^Il1LSYKeWX"X951>FH-25lIMOW5oNr7%DK3
%PcJ'HV_*WfVK#i5aG`jt5?cFG>S%dg_-r*d,Jp5f+@kbQ/=ppq9sip=U"=GDdopt\3soOT3Mm8);h'Qm+KbV[pXt<(d(PamCM$kg
%V+*T]HOWIWR.<d11kY>lV$/W!&66&]NY9550+OpoIs1A(SD9G8S^nOPGY^#)99u:QY\@*i*RaY92n8#IZDl$BQqWRb?/drER,7Ik
%QiktfWG1NbJfJZtfF9VV<RqnpBP$;[g!NaPfh[W?7'%SW&%e"cp9LY>%R!2[X,Ti///()08(BC(k6m;dSFs1DiS;>G)EB#^Y!.ls
%@KLgcM1FQJR1\#4LOE<=S&PYFmRqpu15ZkYmmSp=c8oL,\'m+9/1e686JW-ta@j_+.UUth\FL5Bl2\-NRq\MJ;`jIBj*^=-!iN!I
%0%As3EN'sWmu0UjImE?aK?.>3,t;-u%/QS3U.0A#1j0MD'bA]n#:kmg`"(Cb8O;8g@m\Icf]&^Hq$CRKZK'*_#T(']_6b)@jDIXe
%$NB=1Zm41`Y!-Z^P;s#;7C^.(j@_o"7kIBrZHFkg_WAV[ocD;i6mu2IjLaKRo12WjncgHg!:?IciM5iNL3H.qOU^YW]$2?)i//;K
%OJb+OcY*cXiP#?)!M[mWnOE6`)le1-*20`m\f!FJ6T1TbU(.aW:e;I?7,0NB-Vc+\<9[A%^"noP$4*2g&EfD=Hq1ZL0)CopoUdBc
%5lq,!fnZ/k9n8bNE%Kien.CpW*.b(F=kgoO'Lo[c+hncGHD)T![E8)#T#d.unBBj.2/R('geiC/d)D"YFG,#@RetFo-*_B]Y%9[\
%oS*b7Mjqj:1ZH[KoV]p9?;8,A#)8QKg\\9dU8*l0na:uA*d8e7F-)*FdG4LnLJ,tZI>aF_P6*a9P6MJ-9a4uh6phj,_X@tsH6LSK
%1Jp*J>p5o&WGi<RJGG4TFRX;)PjgD#8Nq8l9d"W]>nX$3`\fnLq!-3rNPg]G\?7#*=["hn<=Eb,#[`s<pk@\MZITN'.EV#n(pW+o
%]MUG+k2dZnX%ZtT2*2%qHMsj&dB$uYgJ^U!K[4EW86/d@)NL[_](7/6J`oXe(f#8Z2+i#Fo0g?HZY3Jc+r.e,<?ZV4Y*DOI@S3.h
%<b6`,34C<:TkQ&4CRY0;&)TAA49`@;.CUgVT'lY34"hmXd\c,FN&q^<#I3j'@DdNq)C!`j`&F.6H>_)h8]Do7O[pHR_9XB>LKH$u
%NsfWNY[HnfHTmUB-be7#b3L_qp2;R8.Rjm:EsM^cnA<<hagQ7in]42]iH"u-.[%`[9Im3lV6!`Fj"TT&!V]It.d;o$S,scEo"`Ql
%X%Z]'3JsQ.O^i^E#27>BJh-N*d[tjb\Go%.NF%C)g;5C/L[;bD0,X7"T(^@=?SG$,0X@4-Xq!ajjF"?m?T4G;74Y,Z;q!3srJ#<-
%Kp2f9,gf]=#^QF!$fC#ID^]cEmtai,F300FWXIrfb@6VEGZG%S)nkr,+$`8A_2D17@mm;@J0q/t!Y5Y)bHoZ5Oe4,TPT7,d$Y6JS
%>5>&klls!kM2)\h<tHtYOU;U9\sMu-%bWNjZS&5Jar)]TKrtLY=D!Labe1s-l["Z?AJndSEm`/>3l#e)dr.;pWo9<-HAab"&P`VP
%VUSP9jS2aFk[c3]XGu_o$GIobhgE/3?o`e5NkE95(<U"]PgA9cqX!,-.(iN(`_\"bb"ZuQe5VdqG6G8^LL!-XS3NWIq6s;>g'Zu;
%Db5]e"KCIK-QNIIZH\HX.R,fI'$ON>93k_l7-<n!2]Wqt4ODD72;iS38^)^dd@PAZoV^.g`$([4#e5[V>*TIsTPT%LH&OQ$&ch&#
%=!fsNcSW<4E#Ci]o]]$L_.9KcgX92Vd^,S>lL_`!D"4[5:M`eLfo%j]L<kOc_@")i/Z.Gb30dTDN5d0mcl5+;(hrP?Q:L@Wd>"R!
%;,bt1:=/^uZ-Bo?^4Br>Zs,7NYKfW)(rT<3^a:hk,qik.5@>*<O1uh+[6kSuqB6a0okfm[^kQ[UhImFn+U*i;UfqfACt19`6a^Cb
%89<4k+poc-9%7EI.72B/S3p,eN^`Bb4@8!6rId>5Dj5\T'IuC:ak7E'^Qub"o*X1F'2C%#Sr$ke?ghBgB7*U#Tc"MHFV!cR\tGCC
%/gUq?IgDnO8nW?f)l.4s>8fo<0t@'sV1A\mbdV<ho(h\Hh*5/X\;U7@gW)HW_blL&bu;auOPMDRYP+2i;4+[ig_]UTp'O=XVqu5#
%Bl`h@']j)>nSN5s'!KG80j@t2K5i"i#nPE>:(KHHnA%XM1hJbQS<<jbS.$q:!kp;JoUIC;DXm5UCG=;8KLPqcBI`MR9X#?[#(F57
%)F%9WPTr["5IHjoRpF?=#pL>&8ZH]13)?tb4kO?M47M`cVrJ0!Zk<qg,*4)G,nBBAh6lQ2^O#7"kEDo"X<nq9MF8G-9#U.#W:rmV
%5rFs4Ej!irI>X'A]H1k>5G&b0^4!0(L^](-EdM8gdFR9?nVA3g-:QiIi-rW<W=$%Z\TLE&[ih1n&p/\gWasE%2;Xi2T/:[F/79>D
%0-TVR4!()jf]e4[.epG.en:#4GQX3ZBUg5t4Q4G=8L$M8BD4o?+#hQ.@T'(Kl?'b)q:9(5qk]P!ZIndC9;s#V?$SJp`MY-P_eF"@
%'3#TVmR,PFfH/mWWoj3C*<^R_:(M_!9je*G=@[]di"D.?Znc+ORicGX(P4@fdJK8+lt^$n>r>JZ5HJUt`]SgT_+OQ6Yn(hc\A\&-
%q"F7-6ZM1oh4Un,)m+9!6?1h9LD*g1o3Q>miM'u?n]'*G30'<Y.)Y'Nn53SEf9?`s=RC3$s((i6m'/`UTRYWi67*5)hde9mcf[0k
%mjgeTl0&K^Y-0dk3k8E<G?hRgS^B#ob*1R&+E+>Jg49'UbcT:LMS#R\pSD.:B[\JD/$>8ZGcNcrQ]>i?nG_D&\L?lYJ"JW"O!HIN
%Y)pg2'4KXLL\j^<"Oif#^kM[.$8A8c4;J#rZXrq8LQ/iD2`Qdf)6;uCik;Y6GeAe/%mEL1T7ao`H8\m2_o2ohlYC&YE#.<S5s`_Z
%5Wh#1\.)n?UbNWLFnVWiD;o2W\mIh7**P(d0@09D=JJ']ftV\A:0F2/#P0/16V8Uon.1_A,U#gZM':7XQnRs:P,F,>-n?JloqjR/
%I(@`)2*n*$6h^Z\:g[Ws1g/eU`@_4A=ac&ihdI@HRZk`8>fo_\T)-dR"gMti-Ap'A3h]mG95P1<4-2-^NCqF]0h8mLTX2!I24XO)
%<0F37S3_SIE2l<(5r/g[8^3Wb;,SfFaL_#,@tT3^@<R11%O(F5*.GBdlZpJ_Ti1W]F][t2:N[MM93ea<!hA<hpXJe]5<\dY,R(._
%AWuq'VS.!e4S9'iK]sLUatS\2kWFJi/OS8bP.N"(cTe@&LG'?HIi0Rp4J/g5%-R"tas[N."U.4HA8d!:1pVE4nkqH@b$RB&f`X%Y
%KU+R&f6DpK@PX%$H?%S[@3WF$*9SOEDBm477Z(#2`07GSjIS]6!CVQ]kVp/<IcJ?,YVZ'[ilt.-'r:nFGm2M=,5=DQ[5SY+kWo^j
%-PO&+_R5G+qBIuY$7MHbL#Wu7ko9>+Y4ma8&L><4L+q'Q2Xt$)&.Yg?<PV?7?JH!09!akY=q"/g$Jn2p[/i5fmMZ24:Tj%ElW;3m
%kjOZMZ<+QOeLm212uS(6+0M)b_bD?!>[]K)HG";(0p1C$VGA*?fd)ue+V#Jq]JgBo(2\nD!S(Y`g8,6j*=2K9R<T_V^4h=^`?#jJ
%i1)JAKaFJ)-C99&"5Ut1EMm?;iL^*"&`m*Es6Wc5Ft*Fo;''7gRo[A]aBmI-At"fY%\6>(o!oQ;A`/YmP^9*bV\-i&q?ss)b4Z"A
%70N'((l/rM!_ODUS^=r;R)<+Db:P#u=;qN(JXI"=("<>++-^aCfKhJuQn\CuWeSn_C*[R55+gtdh]Ie+d`Kj27H79B`$oLr'HE)?
%bX<NRLk,@;1`_Rn4Rp;A8jQ#4YIc"XpE`^8&^U:iTLGnc$1\&-P!E&0<XI1%pYO[eTtm:->k%5g0U6`tZF(9$QO8&%'O"eBJj_i2
%dN$R;Ip>,0\1^;_pRgG(^j%YCS?Gg;5F35s1M5W7#2mXLJhqSU=:dGkcf:)+C<#ZaiDS[tVQWT)CH6uo:C90[4`mYE.U9Pqj4I0d
%8$jbj)rAhZT\]9CmTl9rH:/g2"9s4oI@lO8'6F,4QK&MO?m5A+.lHT$2FJ7N-3TaqXp%^Y,SLf\S.BnFltA/hlj"e/>+e+!NHn(J
%Bo.\2:-:p^"Pum1;j%u&FCul3<.GY#;AbZ15UlLCNgY.K1Sdq-n.]:VSp'8LTM#C*-TFn`;,\rJ"FO/]rq<#X#)DNhfdN=m01##n
%6AYjA]Iq&jDWe(K6bRi'YL2][&D&:$2g[5!n00OJ[T$AJBQQ`@/SZYkLq%f3$+Z`c'.q+^hTP1f'Z6W@%uY9d5gY4\:_:bT8W6l\
%S>i^=AWjGX#G3lL.laV]mukD+KS$K7@qT9(mV<(!Pq2Ml&3^HC0"['-++1*(_pdKmiuU[$5^YgCk5WClJjU2G0n0b!9O.s]HAMMf
%W=\LA5Y))Pg_?1U`'=+qFPe8uMb'ca>q.U2`4W]gC>bn*Doi%U+&k'N4<8^)jV8<f+'^o>Y\Mp#onDmUCoWj9WX06A0?mm"/mo=%
%6\!/0hS7;]%/W"B-[o-K$66N0ChW[0h@t2k[^KXK>t8$pV(5Z88NXr&2u2iFoSpHu))C.YLq%rH8Ai1[7KEpT,Ku&:(B)7WG!!>J
%4kk.GF`"l+V_F/el7fdYF.\NbZ<r>FFZ^D!,(sK/0_6Gd?]"PLYR`,qklu;/j8Sc6J7e<['ILlW!(=lCp:>[/&7'(f[jnDK;7;57
%ct`+*[jeg%mRe6/%JeE'a)sL\aA&=u1tPM@,XuPfgFe8C_M8W''*.!I>4=dR9Ko&b\5Wha_*o]&;kPRL#"4\S*+:+p0)/k8?u50c
%B_HVJl>kjm2`dd(5]QAVL/7:n>Mn`U#iCYY?hXAPOA`&d96@VQQ?F.=4_8V[]s*Ke3bkr7P(5$1c$<"!m1tf8VQ&I%lUj>T6J_Ld
%SmE?M_Fsi^ilQ1\"&>b*iL+[HHg_oBr;ubE$@MIgpToVJ)d:J1KS6$*2U]l`4Phi+nCZ\l;,B<H3?5m>SiR)*6\e>/0Aa%J,a8X9
%#;k9#h`j9aS]`:"U^ssYUnXp=h_K14g_h))]2\n2)JC,<&;f0);3Z-4C[q*IH:ADPj=+-b1Ems?;aZ`-$sj_Y'JCUfUa-V(</W1+
%qN9id%@hHA'(DL(RPhgQ%:QYigHhHmqeA3J\8S1$,/77BSVe`[>o2^Is4dI-Q,u[0LU';oDNYr%7;B(DGK;RPYLh,o)qt[#mN7a&
%T3fKRcrTUi7K^-ZU)Q>oqf8dqnF_N-i_LEV2bb'Efke\P5t[9;)jF&XZbH)V,(8nbo3+NLh4[cB[!dk#%Pm^hP2u7R>>oEQ[<_fG
%ka#6;8iA)do!?(ALGET$Z36sU%1fTj,Qa3s&@I,W3of1`8l;Di_p46PD)to<2jbRc#<krf]f*VC[n>Bd$/%u,HZeP-9hGDa@h'+b
%ndPV2#M@k8.suaAQC\Ob9(o'rX<#/L>Q(Os7ecR%Q&k5:+50?7J7:r+$.6XM^#"&$8tuc$5K![#,pp/GAr8KXq5A7$Fb^C!jBVM"
%N,L_:8I>rN8<M1:<9+h!Ip87XmoE!bgJu6YY,:"$h<+Z?4LP"CN(S979mPske(V\!1n:9$:P?+ZlYn]hR>=Y3ka<X,`;Tdc=b1D2
%q[4Tl'422$:\jT51dj7tI_qrFY]PWOYV+YrcnYqD_ep:_pTiHf[97s(6Ydt86AQsnQ+"-=Di=E6mS8@"2Cm0<Pm=$J3YsAbNI:fH
%0BgBkb:50krR7&V+?\>TBSWUh2u9nYD/?=7E?3DE6edKaLi*k;TA^=Po%LK2Mg6%496d%)Od#a>Kq"k4B3-eaK&HSSescB`R[0Vj
%*jQIJ&.#ena89'H$qK`Zf80uKR2t^]grO7#gS]0S^-it\'J9.6gS^<qU#To*mV,=]BANdH4qJp**KV2c8\l.EDH*"$ogW@2$6PHV
%B_`8,$6reCFG1dp,l#lD:Wb\;Iu2G+$_O(;L.aY2Au,ZhS<P=>]3h`rMKDd0g2H6!B-X*VTTCTXQobhNcb\%5EBe#LA9JYbNVm,A
%8mo-blY<[p,gbik]aeBtMM=N?'>`V;PY!)%.nl(4"1;(M,sr-_,o[R%BhBC+9JsCK\9t*Vh9dBM3JsjEGQB`OhQ(k.J\9JCX#pKd
%a7?ZmPRO!]KQA3i-<mT;b@":$F9Qn8"*+kn#Tn:4!pXg"L4dHBq;eU`bZ>MD@!e8%PA5hd:NHDgG34!_>$SH7J*N',QJ`9qi4[nk
%\t00sX`Q1f<@aBgLXp3DCR>L7.*d^e%`>C9[0aYMY2p2;J%tmm4!D<ESBjP,JO1P[^>T/G>a:a3=_i4,0-8piFk#_X)K'(:[]S86
%?<W76d(Xu8G(I4@[mPAQ40&!kV*uaQHE4=/odnrWKT&2a@7a(%n(=dbb(,</]QQ6p1^*Q^4sUV$+V)'5DMXiCmP"BtWRC=m<Lh9^
%%$%[EO:@'_^OHVTJtp"ZE^QlR5C33KDIt2aK966m=6<kR@1]X+UP`b[oP)4uN(TUn,AHXlO<3C,[0fn0P]WUQd%q"S7+gdu%2*C/
%oTB#T$_25-+,Q$WVdp!V^H"1#L-h&b"s%TO,NU4C3"Q6j-?>L3e)PDA4L(o7C>_Y`q2QZ/RlcL$U=)E(gX=@k7aZL\81hs`9>.)*
%.=`\P,][p+"m.<2"cl9em(p,'VcoH31fQhGPaBT-ni!.t&">VH0F&pR`P0[L/ehj&aeR&cP325$<<j,)8BsS^'GKCI3YUBBS8P3B
%JFMs^6N*L3!+^AO2N"M8bU%k<JT*;4=(KQK,:3I@G`';g&ORm(90*G+&a)`"$[7kH>>IGa/gdtu&[eUT;MUfMJ+iAG4h'C/GhG\^
%>(FkY-,C)=OIp,[P+0DS.+q'I1+u'_keM/QYb2Vs7AjuB!9'g\bC#W1"De;7,(NcJrjLlI9:G@.bR9Y]PjaS*Ur[d#45GWkjRB%]
%rhZP/&C6ls@9<k:7c1eal6urQboufkDA!/o]L;I(7hgX('R2VH"YNA1KI)G5:^RCr##1JVYsV_'knZ06pn<+"%J?2:r`"CdCEkR2
%-\<W%+!Oc])KL3!+FXCH%7>#b8u;fk.iYP<42<Y3%p(%EF\8$p1CK;0g.W`)M1$p</@2-&?gOKE:i(R@Mo+C5YqTu[Oe+L%ScZP)
%TEV(M7-=!ue^;"%DnWj9k5XtiSVNR"-r%-\lA!#rO<MTp.0LU[2)/7g%P$!9.e&DY'+"$Fc:"HI=Q(i$C]>l!+]0IK>bD09n"Qan
%Y?Q\b?8>fe=n/9!4&O:a%UKP-5O"uGc7Z@_^4D(ekTU6iFXSI2R",g`r:pfm(!J*(m>$dj:=6(0E>s#&hVT_@g<Zkd>G]0`VX9We
%^h9]bnY9ds.cs5Kh>&\O#9$JW%JfZ$,4ieg/!+tKI1XI?,VM&#Hp9K6g>"onk)&!<g*##3f<<TW`N6Y9#2Vp>*c/4g`96T(h>6*q
%_CFqC:Gi3]1Lu`rY:AY\f8`1FBfL>,'M=[oQ/82mGk1NV,?TfDd['/&<k-:Nj)UKoTN*F)h9\M$dW]CS4E0^l(\H-Cbo2rA_l[QK
%gs=8l*R'dQX!_%G^>@6ilHVk;-^tqi2bfmKSi=UE?+t%(n+r!R>D6pUC\>AK'NruU8DB#SUDGbYGI<"s.T>ZacgEEe_LD29:4a\Q
%<[tC'omaZM2@bitS@/S`o+(;IQXI`BM#2JOODt42U9n/l=)f2?H7b3tL#.miE-H<(.Ne(ZDa6Jtgq`U#],Rf\TDe_;.aZqNc1b-;
%$8EB8[s\L,JIfSDK*Lss0!$/OqgB3g6$YWf2meLHFt8Q/R.4"dWt":k>Za3qSVY.3FB(]t?XW'nJ&BH0:+)`981[bWGjQ]p9B6fJ
%V5h;Q*DHrqAFKc+$FpZIA+\X._G$g2;;'cVO;Wr0+D1)*0F8hZg)-FZo(KZBM6$m3JR2,Rd56u@MWW,AF?gPG)CU4ip^gVo__,#K
%@$aDWLTHHI8>Ng8\@,+_SD.JSm""7&BSnTd<\jL"^``kq$K$_:Hh9*LQ_Q"Re9?J!r0oM<Wp,:m:_1&<A>f^s9S#ta=$hZ)*uU>@
%#K=[kOs?-pO7"j+ppR^HVnA-p0/<dJp5cB(.jJ+OPd(/r#Y.gX-NO=77H0r-eQ;t^r7jTBHPJaG1)N@26I;Q_"4N7d<:5F;grDY#
%V]6:"R5P^=SQBUK1MAZ>S,nDLlHH)UEGi3i60kGhc-L7)QlSQHkFpB%%IOSXgPa!5L%auC#DUP:lZF7eE(6X)PHQmi/ngk5$kR#4
%7m9\(^V@/Y,)HAe8+A)MPQb&!$qYik7cRX'B_b:J/Lb-1BPG8F#"4/(YWFpN6*,a&rhRVBbRH++T?;Vqi:btK(d<_)7?b.=romZe
%(Qd?Z*e2)9g3;3!i@$HjEXtt?e(M(@d;q^"?RsSQka.UHQn?<3%q`!'=H3j6oE.)tSh?rncBcZ_7eD8m(/+F2Fbg8F'&[.2:[&>H
%Gikg23'>&\FsnW&&Ds?u$4iV2m:OU$8)@0Dio=N.%KfF6b!&,$kT9T$dD2>nDI$diKt68;q_$1CJ9+Z_o+0u/?kGJBat&DiiC9$*
%UA"0Ce7$)A*0@X\hf&6B@5AW-bpm[b[[K-3R^eW,pZ+i:2&Oqd.ELbPe:P^d/hFXjS4b;=>YiXb9hl>6IG_917)@Y4)k?,/pf=+F
%?b]TiB>Z?0<N+'7FT8^]Mf'j/crTlN7l0lPUH8uLIr\3!,>.n-UdZ\X1_bc?H=^COY70\ddqM308Y.Miaf%[[iX<e-.>sVte?b0\
%^L;)8"ZJk>L-X-6p"Lh"ThnBb&XggN+``=NOM@=rhAo,pm5lBgoLs<^C0gIH\/uG%#aCK!moF$9&C`4K_?0hRJsltb1\`W1-`b_#
%@QuA!d@c+MQ6pKp0$OE@p3-5cBbHMY9,k$D'K:d=FBK3Hf]#dV%Zgm^)@VCd-r`Z-]#rD0#.BM,89n6K6oWQWCHr"V;[Q@c6&T5X
%0F(LoU3Sk#F.p)C"e7>W@Kpn=rb^T4L(WT.2l@I^&GDRU"StiIWD:eP%=(?[.(!R9=$2X;;`Tf`1Ho[5:o1R^qeX!<FS85%br:pr
%pe$>4#;]9qc;5@kMXMF_-o/L5AM6ej5f7h#<O-MA;a-mWel12Z=[bEYmt\]_l]1*Eq>I4R,`'":&3-s]>Ko65-&!(Sh>>WA]"b/F
%\6j4,gbKbh25,![4K7-;3[c/2@Xfp9IC^:?XosYdg3,a*//&g>ANm1gSujj[(G$I24E-eO!b="POlK)[D.2DMRho)Oid3ubP2kQP
%D$_Ob7gEYEEY\i<S>+h*-Or!E2?)s@%s)]p=Ifbp.ZP8Q!P)'Kh-j!c)6LiCJ8s6rX;-Ng^;3N5n@_B*9!P5dg&pBrB!^ai5:thB
%]o%3Tmb2kE)S-_&*I@#J_f60?@M]aqeeQ)9)4u"=ggQr?id`e)q"6o]#>TsU__XhJK+SHF>EJ-YTPXsMG_,d]^4SCI6Bk/a@KDE!
%#,PKI*tM[EKjjRb3'.k#=-3F*$:edq4nmRE$`j<l?I>>C>4Xr&FUqAdgp*ig=a[s":e7?\'Nsf?!auaKnpBbT^!q9_dbd8XN/;g5
%:1ZR:F>`S/\Q+)CqD%FaS1T+BR0h)U^qum6$<W%=ho1]dUR^><8@9"V1DMq=,Dl:%pCbUNZMu2*Sb*ibm:Zbbdg[g@LGU[jpS]8#
%Wk!LW@p,n?O%4j7<Veu%A`Ya[H%dVV.5@imhL.s"7Q#Bg3h3[O:'Z]_8-Y9l@<^fP8rEkfD@mY8&Z!bMdsfrp<3/ASV^l2Ll2(g*
%<[CaPE'^^+[bN_TN:_i6M%*]D)f4ic?6g.8_eEqj4YV=K_Eu!8FGAX^.rrQ$g,F76oIf_&d*KFAB^/^QRW,S:'kh/J<0)oF/-;$*
%P3<-*m5p%&m5@G8QN_U'2ss+D@DX=?Y<=SbGeQ[ZrNt?cN?WR_X*oV%6an7@LE?<kE6`(8/kZPXUFC():erQuY1VBp&Q3`AH!!HB
%Rh=:H$O74aKm`)dO\D"*BtSlV/a6\m#VD`&_T.5U3u6GGNaaCI3:dhZl"Q!#/H[+)YNu]9p,3cO#Z;%](@/I47,H)q$K`WpP7@S5
%+q1?]\jj@hh=BYm0c_16i#LEH`X.JC099fph*L@%RdVXAUOqL:PcVlPOSTS2$/\RX#u/4Fm6G7qK?g6RUK^mKOWbX@2fA_0ObY"(
%a294MXL-O&MIg0Zg8GF3KZnebGsAp)f"?BX3*-bmFpr&W4@Q`!?o1dQ&s3`M"L/>QN-qOAlnY<#+?l-HMSk=tPB0&X;RZr==7G/g
%T6QE)b#s(+ThU7*q3%sK`*ikVU^5]q-Ioiln]3+Mri0`#gd25Z]'?SP7)LPKRd.W:XrC!HQQjm7@Kq*j@[RG@3RHd)Hg5a(r?_SO
%aFs1@Gh@Ud-i8]:)S@RK(k:dhV!ouo"2hc2?qqVabr4*+r7l"ST_tbZn)ii$<ae]3o#"+%71>aFZ8C0H1GuTo"rf^%'-.F1"nPWu
%#_:5GV.*)U8\X[_V^5G>BT3duTfATHoM9nEDJ7fl\ol+W[LT2GTg[19X#irrNt`MG#a$PG;\7pt;!#p=qkIh60!V&8eH;Df4L`=.
%YQ<0@`Iio`."%pX[E!p^ln5F!?ihUJ-WD#koS?O,O-b;:i8%cUeOa<oHMaK=JJ$GN-I^X6^N?aagFS!e7RNG[q73^V<GI(besdZb
%@Qo3n<-&A-3ee\("h=bo2Du9<4@5.$YWAaU<]/Na)iSX$78Sa_43_!K>@k^^gJ!dMEND9k)6&H/d@fYaO<V^pDBS3<:[)1l3dep@
%4m8&T?rEjA[\X3\9qNnsFc_J`JdY`p#)Imi*@umq^FOQO,9dI2SK9ogoJGS:FPr+J@NADY!V3ADc2=/)`11XpiV7[).WZ35VY;&-
%EKn`O-=jUqA9)O+<Pmu,Mu:&M^.60#k6<]\>]ijaeC6[tEW7l#E9o8(g*T+uS;V%D3uiX\i22%fSb1g]l\l`kIXQN6*\1"s?j>VJ
%*fBqR"W9:j/dlY<nD;2HUN\o++[qTe5rglPDJ^\;Yj&M^9brD[rNN=GTY+%J:6WGQ-OAi5,h4dpRRE0W8c_[e+r>mR._9ZY^2tVL
%U/j(r+(g^s%2'(l*=O-'`ja&hUKH!BQ=(j-e1t)Z*h(N&FkA49%:4'NjOY?gm"8u-K&R'\,*D-'Y?"&!,aE3RHu"+5iQ+9ic]uD)
%dV+1fU=5?XbQ)P!R%?b+QN)cn0]^H$elDK:6Cj"U9uSD^r<LO\``Ole/Y(E\%UIg8k?sV9@>,V>.QJRSI`=>@9+>NfK"9aba6&WM
%A1>O0I-C<g&d#$<6;;Z=9n(3.>ZBMf<5>9<*rZ*"PipZt2$mmVplCAhE[[^o+<ETZ>R&Z<%p6e'Oe-)+df#`NI"'82^ZP%jJ%ihr
%>[+n=&h2];$pL0/WtTA_F-_+P;HcL[rE/=c]qU]=2r8ia-TCj+o<Elk/)lJ"C2`.>^5_Z1WFF!;Zm/siZhm?*^S$A(fX<RC$$3tO
%F>@@/^aGeZ%I,mFpOiMF&Y>3p9;\5n5A/H*4V8[e\99Dc$MVk4;lp.MYD@kH#=e?'d#HjuhnSTArI(a0`pWQum.o+>0$ZSZ8ndA&
%!#9)1:;OnG94TE3>o%`$`&<tfJ_2,\aI;E%_nmt@FBnDT/i'6;LE;Q0d3?P96uQVJJh)$d?I+n)3KD`Id,a<Ie3m3[=HQWu6a7Qa
%-X\O\Q79Dt.Yn=)lYMHG;R)45Hd+SjW3nhHiI/JjA,1KL$%1;gm&X&UqH$%p&4W9a;LkTiU=#j(jYa]pePENYYB'>`hYIbFDdnqh
%bI-Ie_g+/IGhT]YS.:J,jLTa>%lZLOJ45<1o>2(Gdo_Vi22U!*#Ra+\d6nR)"0p`U7I4krR_[W^-cFstJ&6%CS9t[:5l$G=2`Rh/
%3rZM-)hck?1g/jk[nF3%Z7'8rK<U!%gpp,:g?6]3<:=!\=&!::P[f9Gn_q/h%t%d.G@?=#Nh>KB#Sa*p1cDaqY;+TS@hidcA?#7?
%'CdBF[?=>u-4`,j5)VXDEZm[iH.hM-h="b84I)`g+bGl[jA_NW`A;t)5LL(n95<'pC%5(H#roA)ZL9Jh#@;H&`,XKQ#(L!l0T5`P
%G0Za6q.@c[,+*ALn5q_AN#5j$M7"Sn.o)I*=I^F7daG!M&fLLujgg(2[*F=tgqJ<s=)]9%@D!E7b?9l<,uOpLVT`f?X<(b;*UekC
%$10WC*-#DW;L:QKr*Hsrl4.TI@&h">o^r]dQKP>HW(PD/B5eRUq-<VPg8G(67PX3Kh5U3`2XfT1GMr"JPG5k&Oi@,e:CS`L6,6lO
%a$*Qs489P$^Fsr_%Yf%"OAOAJ$p"J1(sQ6C\WVaaE&K`>F@5[/ZkKComa?nJ&@T)nNb6%R]K%p\6HBpr3r64RW1IF285-<T\E=rI
%Mdm>['"qP1:b&cY4PHJTR^5Jhg2:9MEiccKjJuiW'<J$:>8SmUUn210f*Oas/9@fV+OY;Y`[ZhZAXp-Fe>^<`WJSh,<nH#rM,B>3
%?4Ufl0Ni8>?og]IIlJGYT=UV4N49UQNSMBa9Tr:s0FnbI35Mu\=!Nksaa/ljd^H;>kQX^3I)_Zdl)E:<Ili/^rfltOS&r/>f/l%4
%KE]C=n`V*JVf]nf$Q)@>+T""[f!p3#R^To6"dI!N^9GNAl<?PEW7^PW"1$79S$mcjG@20[Z_tS&1g?'Zd#$r$0Ogm*NM]&WA>H&!
%TF]l,5_"@[3bdJilm6NjgIBdJq^Il`XhYm5RU6E>>A2TgoIfT?&0OPb<m;#!M.+Ga]RRNe0M;8rCCLN=I3Pri;75/mhI-u:+H$uA
%_Y.[j%5M3%^gc)ZZ=@h(L[D"dn^ta''tIaM]58l&5"I\]QcPDEGlHQB0Ba_<[9@kUE:9Q[Hg#V]86l=WF<4#i2ERELm?mEcpK<Z]
%r5te:6R+986^!XAXe3IpUL]L2OW,(D^Z7/]?t=m@epFqu]HWF2api>YmUjHLpJ+2'%itD1_$f,b9rQPbU47TDWuN`NG?&=Yjd_5+
%Nqj^%K1$c+]`/\+YPkTA%<C8XR@T;R+:"1m?67P._Q.OW3j@5*;sjP4XZ*<%LQ6_H2#C@<.@uThYBP*2QSJ(RObO$CG5C$R^*3->
%R1V.g56HDH'/r?_)rsUuEkjJ'AlUmAXjZu7k_/D."0r0$>IT'+pL+g2Za6o<:3-E_=b-ul?f0ck%fdN$6qs<j1]5r=CRg]^A,5Na
%*k&]XVk=U*0@)+ga'?69VM:-L?M\l.bbG0Wh,aEi?FF+,2Ko&kma,8#6f3CnH\Z0+]L6><K41G:E1Y/>OURC`GCgumg%W9K6%52X
%.-B4]Wrn2/Ij<KZPGCeH8d$;d,*?lr46R,ARV<S*`3DN:=AD9D#t$-S3.jFdO'QuNjck4:\l`sRTtbO:f^J=ce!h7F.Cb`<H#AS3
%b[e.L2<\auE9bA3BbZRFX@"Mm<c()T2-H?%(-7IP)l'nVbV93a(le`'eH3+KLtSnWipTDq6V]9iEY&l4#C)BI@dk<]$KlrgS57?6
%re\HMs4'2gi,[qM,>m)Il2W5uC]6SN-(@/Y$#]g3-&idZBB%,cgC1##Z3`_UE@^%+M'18rr@g>'FWq@lF^T"n/g,OG,'h3,6g,us
%/KV"F#].jomtRFn,[k]"A&E6c!pk\b^5;SdA4?&#13[%NP2Zo*))\q\Lj"#plDZh7V0n'$=j5=9n*$ahVL*<<>`8<%%<5[DJ)kO_
%bI1i_dWXiWG":B&XYb7]TskquM>TLgG^:SG(6]U&2N#sKT$E2$!$;aQ@1bQ@rJ"pdNkIFI5ToUq<j*ZqgS<`nG@U;`Q$,NA[5Y\N
%[n9kqpsIh$rRLrlUpS0=i)IZ`d(buo>XXNrXn;^A\UFgj;8YZVhbm`&A(kV#U5Blnc6ODp][#8$>oSbJ"0&#q3B;&],YSiZIB/JL
%2:0Zne1,g>F)gk8UKJ)d5[e/f:Esm,JCacEA'-[TrJ,ec(m^c>DuDt<\[#4C$;f_i>Z)I:nD)p@35/?FH&kM"QJq+hcB'JfLORI`
%^3N$>e+rQbrQ>%kkbf:"a?=JK?j$7XXQ\RG<Q[Z&Vk0P*>p$2%3.s5h-tIT"1lF&OTAEQn-?@qs@:X0Bp*GIj%&tZ)YX-ZsT7),k
%Z_4mMbKcn6*I]nY=bTQi0bOR;e"f@H8E20A3.79Vai0c-R%f+_#e[2,["HWX7)QD)Vj!58`CtQN4BP!Mo9%;!^aP3nfAs*9p'fsp
%Xq'@QK4`H*"\@("1%.hV8.,au0Dcqgmn$%n#8gUNShkfh5Ms;(6f<rR8m1p:B[To@&h`^VHNP7^nH(2X1&<j_RIV.:kHAGp29b4W
%8_KFaHcgg-6l%?Z7O9iP(f=#\&XmQ]B5gcN1=[">9Vhe;lB[mpAhY/rM9CWp#/[`bOboURr3S%BY<u8PK9#BQV3-`A&:#REs30hE
%]4*;C^(Zak-n_pc(%$g/IH^+:.\=j!>huY%'Z?*oH?b4mnRJF>,sA*ElT"_ENJu;t'+$r*0nM0<6+SU@nSVp97K@<-'BBkq<iLE9
%"*<`h&D6#jSnZS%_p8Bs&o)9="N3^fba7C!RBEGDAOC6EhJQ"@P/O%mcDj!jZ<UlO6bk>'lquh#rmZ(<1c?5XiZ&..Cq?59DBTNo
%UTr@\Ncg<Gn=loi/p\AuD/E#dW(ug+Uh&jKh96(%3pN+W`t!rM+b(0J3J;75oFRki(7n44f2L'7U;[J?m\CSURXRL/l'jM>KlkNr
%3c,13@=r'XDXr6TTCUIq'S9S1#a(K2a;r!M';CS<p@VaY5BWN98/#Da!Xs&QII/.%Dm)##YM><B?m$:/Z0m.#f@456(>%uqhNln,
%6#C1:fI60BU0;qkUJQ*Ko4'9\WX_"uD=n*dDsmn5+0JqOdXH<3k?ITYbPTcV4<G<9doe,Ej2>>#Dc"gk`/jDXK%d25+[PpY_k'L/
%#lXRErE=:C84,UB"Wb6HiI-PB5\/_@NCb$qK^"\^*rN)QXh\Medg["Bf++FOOB:KJ=^o!f:9[se*!#Ih"KpPiCD7O0O>3oOL\En5
%.u9^A`?RtaBa[*i&XTd:KVu_K]#K[HFac^J'U/P']Wh1^C@M$Wo>(LEk"XI5:F5hK`Z$>u(9N$Q#NuV6R1Xp3,70E0/k7%f(Io_,
%(A'=-T0:J_$SnRK$VC;/jRAn$H7Ir$Qcd@![g&']ppLYP*!9C9k%qBNqJ`qL"3M/8:4sQ8IJAu]b>O8.<.'$^8pTW\pgbCR.L(!*
%Fe`^l'*@_d?.6p+*r0$<F,'6'cg5AQHIegAU%jno,&sp'L[+htDZfB;pN=XNj)f&tl+E6mj[L2:4f79E14q<D2`T=.naMPo]MBtn
%ER`HE$1%,[b-)!B8hX'ri*B8KrahT$aSRhV*_8LRfQO^$3_U=PKQLQ>P<lB=BHECk)\>`FQs/ZX`:S#qmsK'o'(J/eWBe6!%EjD9
%VLYKjk!a[0E^GBQQV'`s5puE6\:CO\iM+E--`LUtFiN_:1;i]"nfb@/lH:_+c6$?bP;h/HQcuX'ZE,VE(Wi:hr/;eF;4\<]F[5k6
%63'!.@%d*>(6nhIS.3Iu6OL2`'JW)kLC\=tP)TkfGAq(hY>k#m&d@=:kUu,"ng)!n4B,Amj_b-Ek\$R]X&-p+$A6%6'f*o*r]NeU
%bYuXtB&pZ7&f>F:S\Z\#;bBesCAHfL_Xi>`UYNH-*SJ;sm^Q`q$M%E>$d0LdoI=F`<G"Z<9YW<H%X"K#=AIZTZ>gN,1A=RBrgO(3
%".`%Q7ntH!.Q]]8VE=-sb`MT8Ns;IZ,8$[;"UOA3V>C:b0`$t%^kU2G.Nriic0b^480`2s.foHHl'R'$RlQ%48H4[@4P-h?O\"Y`
%1*mA_?@,2;G_SQok8e(H\4If!;k8f3L/o>k$4ILB6f/IG*l=Y3.tSWRTNUF2,M?T@dhaW2%7G`=)qa*UC"Gb9#P.ZOXl1ho2i@F/
%S%)=0'#13ad[-/LVL[lMN!71E'L1tgGt$co07>;lLQUE/"TNc(X,pBGC4cZ@Q$O.!]sgOO4WNn,pin.#7$\];\K<4'.7AY<pg)lB
%oO-[?PORan6S;G!P%hcLGrWh6K3;HpZ,12sr%KQR>9X+^6[=h@+t,^0#RK!)%D[Ca*sRE?c?*gV;1=3R'+"%\["2)ILhc*MMP`im
%!LtNJ#mH)4q<;=[e#ES'[$3fPVubiG'kQL-/(Y1f\OR3F`h4`s%\HnN@-Vs[LNEdr&``dr:0#Tr!\Nn"_d(?n&TuG0//8^m0q&?]
%a'HtW5bhLiYrG1:XdgaMmUBda,E"I/[8NJ<hF<K],c2ldOLb9!6f33:+-3aai:E^"PI2r;2oscj4mq:aO$<g.o?X<i^Ng(#Iu8NY
%5%$0TY&0+^gnGYY45b`":,=r>M$N%AE\rAT>O=DQn1@p40bC!Wd$YnLTC?5=9j'uUFrJ)kdcl@hgdq3WG4>0T#7E2,V.c@0]oRi2
%pMd=3]KQhs>iHUX:cj&SW[Eh'GXb7uPZ"18VYu7XPpS8#X391aEKS?T#c%b>\Nr".mn9r$m49(-[<!2#0(KG3`.Geu0F,56":8(K
%C!eEi"H=fUSM<Ec?)dlrTK-kCOoT:@4XjZZHj8+NTul\Pr9TMr38\"o0h"Y3MF"+1bfRg6JKl;p,_-`s_['>8SbU\H&Bk9nW)4g.
%K3P[6iK\'lpX"&krTrmcocR!TDhgfqQ`77fH:+ahi7$Z']GECRNKKf\qu?Z($4KuZ8\A+b2\Pd\PIeORqQmf0@csdl?+IYR[RLG3
%GK=>YoMH--=H2uam)UN2PNhBRm7smEA>*6FI5iqf1i?P!$W6rg_K(9RPj0FTU2Jmon"GHCVQbif*0;m_p@%8J@J<j0!o4b:Kg#(V
%h1q,Tia%==2T2/sUJjp;3,*]i"3]q7l!?F-+>2$8R(2O=#j%_oh-Je?Q"=I_:gDK)"&W5l:`ZiGhUO67>:S?Ns7#GFPkMGms"<Su
%HG[0e7gQ&DP&)"$YF>p&B$;*62$qWT'LGA0O\>+/@PL2.hb&UTR-EUbbfo_1Kq&AeZs5od4Kco"3J<KdlD8HU18*#BH6R0W[fd:F
%,\A9c$U$f6,3W8_5gP#1"oWDQ#Ju,D[AG2MTUh_IZQgWHJtsju7']Z>*9tXfE.it;I?h?P98R#4ntOQ*!@mMoSBZi[\&1:q8\Lb#
%DQeFqI--s^2tZ9tCkULWOoBTO?%8u7,nrMShWVp,h:E77K*NL]O>4e@MVtH_X:a%d:lQSR)8]*eaIfs_-[]tql=@833am8j7uRX)
%n^<.h6te8bM68pZMT)tp-o3_=<_epg([.5[o\H'B'rC"j'2]J\rm9DTk9P*:*fZ2G6ht!%P]S1N*I9$JAak"V%[G&']MM<c4`J()
%?ciq)>t:fnL!M`aQ*hj;1hp_3=o,X!E*c`E#'pTHn37gh?o$PGjeoU;TO4CR,PZmDBLj7o.HODq4oqC:$RldZou!bj,]oc'#Yoo;
%e`O>]A5Y?CVc/!1C[MK2B6nT%@&S<^rdfYkN4T72M%MKRM,J\B3!99/[HfjN#Z(Z7e;kL#"Id1-8KJ*jh!*`D=I:'/a^h'R@1oOr
%8&Ps[bf:g]'Pr_7a08Ds91i!QbS^^]CJ-:=nP+[3dK5@Ie1?=L+%c&eS.G[s>pfkI]]n6ZPau4i$>*2uLR_WH5e4UBNp`g&j)as-
%?Q[j;Ku<R'EA!X^*Zh/[BR_^Y!lF!CGuU>^MC!ja3n7\%$sP"%8alhO7M3t!.IK3C]:BL/R>nFFT4j"j98Mm*U!X?q<"boU4`EO0
%TaOND'@%uf9/2X%/r"XqHjW)nC8`SoNTmU'+dc/V.u(5R<ANY0rO,b!Yd14`(`q:R9"^jZK"KVW4YK#?Yh*N/s0-;/_cE.#*j0)`
%m//R_g\OA4RCIg&F=U]f4$2"fX\o]#T/KVF@*go)mIWP1JisV"pk/#`K$_,<R,Y\kA3M59Vb\G(a'X^14O9>C*QjH^F<:&GZg,\[
%'O,j@I"X7<lb#g#K\;2]<#T?ILX&)ci!aHko,1?gO+E(jA=l=?:b`a5QgLa`CW+-02G\FGI4:DCV@/#Z5<HI\&97jc;?qf\(2F4c
%Z7g,e&R#U.k,S6Ti1WsV#Q=>'bn^XA3k8iY#3o<aJ;([N-A%0N^k8,^2+]3T""Yu:aj:W<"GJ/2)-D3e]>3X;X@ck,58C5Eh;\'+
%m;eU\*\\[I_9MaQUh80l!+g1*`+^<HRf*KlSQZ>-Mt(12TT^Xec&*4SI4?OpR!TpPq"5]9=E:8HE"[lbQf83jiVCUr.HE_rh+0&^
%nT^uGd`b1jeOs>'I1A2ngQu?)kAa,Li"M7SM^a`!"uGgEEX)U+0Z"iKS1]f4<^9Th7B6b=I48'7_Qq#OdIeKueW\[D5^:R_r7TnQ
%=8\IWc@GR;B,<PeN_m/(@'o>3AM?k(%Sg?`U^qd8%;VhXZi1/=C)$pY*fa]u]?+"fkP5RA91794SB-A&QM[+YP&Cakkj1MB`@!K'
%n>YY-ruWL?g:V>n$^Yq#$9j'p'[RF;.rX&SgCQTaiTeqYAAqB*0p)E3mCLmjfLq2WnTk$HI^S"m^KLIkn.61-bBrW\^<!S@5ULST
%U>TAk,hQXB4UD;@!DYGKGFgph(#hPMA^P24Va=Vp4'W9+)p;T<Qm.jD*9U*3EQAViUHtgr+"QIG)c!!<Al%io-r=(C<dO:#`uW9u
%Eg#f%n+b?urnP2FN_$dAV9OpZ)XUtnk7*%M-CZBYRRM\G5R(kuX#IPFBQYs@+V)jkm^3;nP&jQ@9\_j<:02Y%41<\R_5j86OfLh[
%I=JPQ0iZIE&MuChX0+K)%1:/@Hil1o;=*ub`aV?7kb")>1hQ;;=%`60]Zor92&MXaib>3opN8'1rnDBOr'2X&F/1eQfn;(QKFJ03
%=g+TLT!fpXMFTQEK8rmc:W3p>PDV`2G,/Y%d%&Wo3.:ZdabsMKF7(plKO_4loAc&ZHm_I/p3L,2Klr^L90P^Y=0A0tjnmY;%lhf?
%DT^+IN_!<2at\/]1EVe1jqF6lY`KVJ[54m)I4h*sa'TI6?Z(A1&KuDj/4-TdDRVFZ[%`9?ia,\_>haeLJD??W<=o>'/-27uMe/3U
%;\q@/dJpl[^8."4$lXHqUq_K$eEQg1JsWoLYUV_lJsP)i,Y)<oAFY*%)S<6_k-.3E3++G+He>lL\7(Q!.%7N"l0)GUZDB^up%!pV
%m+S^DSF7;5Lq/"mA&/f4?4!!MiHi3sk/Qgi^O=t',&"#iK3!&Bo\%6jK,UKLAJ$pt(h@Ecg-t&GLt\6_Ksg1;)Ku38T2%teVD8\V
%r9G@c'Ys9?_I434c1\.H^5TG4m`jJ$eV3bdX%dS\ANRDjolCN_%U9G.WMgSOTCMluK`cNn8%]YCX\="'l).Zb)dMF.j+h9$?<-0G
%=:CSB1WS5B/MC.KWcb\\G?CYq6e?.Wni6Pr/cR9fA1/q*LKLqD'E4^T"j8*b;?4U34F,b$0V1LpXf+3X(/54Q$I.GcF%5HNUN[^Y
%(t1(lSZuc'n7**s>h=T*;`KaFN5J-.D+$WMF&Fd7lZA9DkGagrSS`tYFb;po#9D_$ED6=(*h#q:I+oer:3%t&UI!\N:S1\5gNdlp
%$)e&Yj;)*GKN4NCA)lOC^t^\No5J1sdLWP-?Wrb9f-<AmM.#0\K45]SY^aq$OT,*ZBUHhYDpXKGVJdR*87CAaW+Ns8k5=H;_mUM'
%kOaCW^6K$U7=[g(]ZbsF<$LL2N&14S!98p>DXoP4<YfYq*DAV%:B&bRS^BpH(*bm"3^e`>#^Z8M0b\>ALWJElP%'d:%j#&rl?Khd
%bNJ$tSp)Yu0Ud_Xh@@FtTZbB9T%](IV=R#VEH4F?)K.>.(@mWgE(k9kA!f]@[_]U9//LZ[Vk$^PH;L<M_gM@b3>M?D^Rls)MOU5*
%`H:qSI)eP+34/CVEt-)%-EaQ^T.B.b6pMBFIQF"aW'B5c+pa67<Xo@*K%Xf3%O8F2bd_TqlOfA$_cWF'mTsGsD)jRBW."\FXO2<W
%KIjX@qq*EWo+Fn^c$)+k:gAW%U`j-qR.%Y]/+jKTF_scB-_CT$"kZ(9-!VW#IX]?29sMU$<^T\+ce(FdboV&hG+9`&9TF5Mf;I:8
%OKkT'D^[Xc&)M1]bDn<kiNSgD#+mY+D'e1(Jl6!Wg(:k2N_oH\.rLg9]so*;C>Rn!aK<Cm1I&MMFI^ar;NDrfB(-N3P2`0>$4N;q
%6f"PkVR0/"<"I*FR\L.(Dk66m9J$Z/dURrEHl[JHl4&DGiNiB`aJ!i^JRua[f%:^QjZ:r7;B?FWMW=;6N2_GE6-B^#hFJ%))li-_
%$?n`Or,tubm;Y>J7:mL(1Dr8!\CiZNdS:HBHT7X91<G8;LZ6]t(@XO'FYa`96Ukma^^$h%oVV"fS,AMra-mX`.e#%!G"`=Xgn=5:
%Uhf:Pl^MAB^)k)Vdptjt)CuRr\/Z+=J1)s%O`%b'*SZpu%X33;1]GYaLO4aR>`APTL:+AO)I\A5;<'IlY.AD'W=8E=2O8An_lOuf
%*b<)U.YGE*(d6R0XnKP:$LM'!ZLLiraGf[rjGn)bn*j3kh*p0@qUtUi4$O>a5t/N5aqX<e*GdRq:?96],=\6tQ&,JEMm7i\:U`bL
%eGW=MfOjln-14Te=6Tp@C_kXs?64-c(,k?Y3\Yrq[;u4flc^jL8$@ERQ2LZ(0d0naE]FkZYrJINPWAC'"^1?fEe6IU[O\9Y`'4\Q
%YlfY,9OJ&sf/0D5$/hRfLb;5KcW8sQ7H-NOA"^5JQdkkir%OodquBAJg1Am:LtKN+'g=QXq]2hABKq$&klFAECgLcd9c<K/k^a+0
%P0UNc>i#09/gnQtk]lcqkIY6]!M;UiP,$$G.%nc]6>SD.4mkcT<uHJ/]\MLn6OpjA0__0lm`9pHH<Et6C.C2@*N4=g2-8;9$t!CO
%f2FF"o8#.FHZ)Yb>s$,59Wmj>:LT-36oAPG<ZE7N$.IY&;)qR)M(,AEfCM]6qFAl(hX'0M?p+"oE6*.GR,#)e@%*=Xm92GBdWV/<
%Q4:R)`-8C'RZ+6'>Dm+ApDRq5qjP@GFR?kk0:Bqd#q-/3MO=_i_u9PB@%[[&^tW$Gn?c#\]!Yca]">^5_3rSaIU=X)/dHf/.l4+2
%m^3)u35_WMQ3tmrUl/A+Kao*,B&*gu2(7<j?RKNH=*?,.p5!,kCR*76L%jN>8EL1b\[=mdidA#62=f,OV^2D\6kam+=dbueSrp1@
%9;L-SRGs`QI/f@G3]6]<T@VG@<;I6Xe2h?kThbaKpcuiG(fZc1"&%]k*TuRqcB!?+0;rU,bu/4RU[-rZ;AE)IGPGKf"U:YDdqP^o
%.Afd2k4DhZKDYtZ5g%1Qs6/g`5fANDe]:2QV#_424bp<$bca;7K-mu1brIT2<rNFeFKJ`D=j^\DQkS<US+6Yp1%]6QT`QrjE@";6
%"LNEROVf'<[*o&aq",3PeO9\QE-WFj-@VC(lH@*K#GNpl='kJl9b,L1hEEM%qB&KTo;0W1"1jSFQdc8G,SY&OW(^miB;L%;/rdsb
%IAOdY-$>93hf'&D[3LK^o"gqXS4NiBSBNdG.YXSR5"--::ju+om6j0/B6:ZSN+"YH4HEgS/1OC#C[IpQXV(pU7\ns!q:X)BA\aPW
%21.dYq,1=:<KEi4JcR,Wj-[8*olc-!S_\(SVSbHhk"LRn-Mf_B'<`&iL7(u_p584X/8f";lsTm.fO_a-(B%'Lk@ATtUjo:L^BPlP
%A4r+7Y'K=m-/]p2eVEWqpYoCqT3cQrP\(\JbQdeFK]@/-1o#:)i'ibR"W.Db>n#0n,P7(7e/cG"+k&fC0a"bo*XjK,$Q($XKO/\L
%`:&]_Tr6i"_5Y@'lrmNC7Vq/:RFG.(:cPUUi0ZWqmX&&mokNo>Bsp"h%]gp@MGqPB\uqVKL8i"cM\$cn5=XWZeq!gj:.cq)`GA,>
%)79;[:?]o#np4BZr/\"CFrobQL-RI''[J<5=[=pg5qY@egGkDlV=+.5MNL,K)V#9cjBgF"c%q?hd/"1pc]a";2O%NBf/R]f`C0]1
%#JYJS-F;e!oPVf2Mhk[O/f-sNAPPo>_qjDE8%a[0DEP:@E,Zi+jRMdkVs'7Nrj)0:bn7^UdKge.1i%=iqom1"UK00L9m?i?FVq@!
%nmqh5SrPk@0SL_6k2)\(ZRTEq2!'$aM%8lVJ"QEE]STfkRR)=4MB\ZYq2c*rFA5\8*>Wm`nqjV;5V>>oF5N"#?,Oq#2X4ej@Y9A`
%]n9'H7@.B3D=l8SoIKc'cL%sT2$K7#I;e)4";_b_Y@jB>BT%o`$F?GV%iU0q0)RSo57nYLr,<^5JLEZ&)PF3'o);#q+PH"AjEP8j
%(^(!V>20KB#-cu>cka;X'_B=,;&6DRY]KK=k&pJBX;(,1P)i[3AL.-LNtod\4*4;e"j24`SIe2p^R[Q3O&Cm"m3WmjL/"QD#$OO0
%U9<8HP]i"j9t5'2OYu]%T=?!SI3XC7p;9GoaI<N'(=f&,%0/Fah:%#=0=;!)WF@tfYU7YUZOYAcAU'P6^:k@PXHme*DtcE2H^MfS
%9[%d<Jp]7f3X&o;P]J8h)%JL,\2'I,:0korT<,>s?$c.[Hj/_4*DW_C(qW(nDI8G;W,D5'<('2XfJtbG(6R,s%\]hk/NI%n2cgUB
%"YU/`krDk`&TT<e06%Xio_%(Cf>G.g@2_PY'E4h8Ft-G-0$oM_J!YJ?Y6UXb3st:[iPe<V_#04%9%1>Xn0.i^'s&iQ:2.do8Wnf0
%mebHC-?pZs^-e8d[Hd3M8]kEK,IDjZH:Ko=*JL7&]d^\5=^D4QUrCXXr!jNX,H]*6YQ%F_gC2tu[,*]@m[^!=_o_i7XaZ%8PWs#S
%LFX1e"6N9:oNn#LLlh#if$uN9+!1eNMT^tVq`)ZSMr%8iUfH)^?jQBFK!VTa&S"4[UP%06I9BXI9gqN0MG`hUJp1L$$/!sRHS%(W
%.mGpu\KnBRL0C+DgW90p+j]`l;Zo0Sp6(5L;9pJqCpZ'r4OuW1'Tkg>O7-b@XTk=^*;!tsFMd7mi_@BKZ>"O7\dZ^<:pG9:=<H^R
%_skY<QIg()MEp3M>nA_L<KDHbG;F"=LhJ5p(%QdLGE@Z+!h:E#T&cm"+@9![fj[IFeiQk5eE9%mZ;bQQn`$]tZsX[cG6)-0H3[p"
%(>JlX+iG<Xk4[uRC;_P7r.k=M9NQ>g4V#?I#m'8U%>EgjmaD35KG7b:H]Oq]>XHKA5qe(IBB%aXIY]-#*&i_3]:l0ihqfb0@BMD#
%.h5.6n=JM%%1(kJ%9u-Q3Z#d6m&uH0&K*C8LeC:$2[X[rXtkQPWVNcIcKVD(r]dT@@NG7?;)M"j<mhFGQ2L8DTb5/,I@#]?dK-U!
%l3uSs`lGe-OS[Y]X!m=I7l:A+1K/sJTu5BR([-V%C^qYI;p<T,<dEFLo:gf&//r\X?U'.FM!EV@B1#prXTnptI\%*omZL-!DSqqo
%%-T#/OkUW7f(pf_Tpt?IT;g9MDOkS1>R(kEB<k0PH2[\Cs8@HGlbE8m^\csH50OAMa=eF)rHB14)I.?XO;n"ZZLELY2#_DD%h&p-
%H8htc!r-)*7e/_K7.JG(I/i<kJ,AtipCI;_^T7D+J,H5Ejmt/*pL!sonSnU0n3?p6+921%rTu9<g].9)^]",grStZjjo>8EYJ:"a
%5Q12groIMeqOarUrVFRLrUjOsoq29Xf3eRK^]*j)"U#pL&,tN0ro=%JTDniYrZBDki/%~>
%AI9_PrivateDataEnd
