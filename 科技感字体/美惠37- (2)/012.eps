%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: set_malenkih_plat_3.eps
%%Creator: Adobe Illustrator(R) 19.1
%%For: user
%%CreationDate: 5/9/2016
%%BoundingBox: 0 0 1201 1200
%%HiResBoundingBox: 0 0 1200.0020 1200
%%CropBox: 0 0 1200.0020 1200
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.1.0 x29 R agm 4.7731 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=100 RasterRes=1 GradRes=1 Text=1 Stroke=0 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c067 79.157747, 2015/03/30-23:40:42        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
            xmlns:photoshop="http://ns.adobe.com/photoshop/1.0/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">set_malenkih_plat_1</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:creator>
            <rdf:Seq>
               <rdf:li>Iryna</rdf:li>
            </rdf:Seq>
         </dc:creator>
         <dc:description>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">abstract vector background with high tech circuit board Vector Illustration</rdf:li>
            </rdf:Alt>
         </dc:description>
         <dc:subject>
            <rdf:Bag>
               <rdf:li>circuit</rdf:li>
               <rdf:li>vector</rdf:li>
               <rdf:li>backgrounds</rdf:li>
               <rdf:li>tech</rdf:li>
               <rdf:li>processor</rdf:li>
               <rdf:li>abstract</rdf:li>
               <rdf:li>abstraction</rdf:li>
               <rdf:li>chip</rdf:li>
               <rdf:li>card</rdf:li>
               <rdf:li>design</rdf:li>
               <rdf:li>electrical equipment</rdf:li>
               <rdf:li>integrated</rdf:li>
               <rdf:li>technical</rdf:li>
               <rdf:li>computer part</rdf:li>
               <rdf:li>hardware</rdf:li>
               <rdf:li>engineering</rdf:li>
               <rdf:li>line</rdf:li>
               <rdf:li>cyberspace</rdf:li>
               <rdf:li>computer equipment</rdf:li>
               <rdf:li>graphic</rdf:li>
               <rdf:li>electronics industry</rdf:li>
               <rdf:li>digital</rdf:li>
               <rdf:li>technology</rdf:li>
               <rdf:li>computer</rdf:li>
               <rdf:li>circuit board</rdf:li>
               <rdf:li>illustration</rdf:li>
               <rdf:li>creativity</rdf:li>
               <rdf:li>connection</rdf:li>
               <rdf:li>computing</rdf:li>
               <rdf:li>backdrop</rdf:li>
               <rdf:li>science</rdf:li>
               <rdf:li>cover</rdf:li>
               <rdf:li>internal</rdf:li>
               <rdf:li>connect</rdf:li>
               <rdf:li>art</rdf:li>
               <rdf:li>industry</rdf:li>
               <rdf:li>conceptual</rdf:li>
               <rdf:li>construction</rdf:li>
               <rdf:li>textured</rdf:li>
               <rdf:li>computer chip</rdf:li>
               <rdf:li>mother board</rdf:li>
               <rdf:li>motherboard</rdf:li>
               <rdf:li>black</rdf:li>
               <rdf:li>blue</rdf:li>
            </rdf:Bag>
         </dc:subject>
         <xmp:MetadataDate>2016-05-09T17:18:05+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2016-05-09T17:18:05+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2016-05-09T17:18:05+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A8qYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:ca067123-d8ed-8f49-961c-362d76ab6f7b</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:ca067123-d8ed-8f49-961c-362d76ab6f7b</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:166951af-d0d1-4eb7-bc10-6ddf0f6b11bb</stRef:instanceID>
            <stRef:documentID>xmp.did:D4C33072DACDE51190E9A141D469D652</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F07763D45588E411BF89F345A28D8C9F</stEvt:instanceID>
                  <stEvt:when>2014-12-20T17:10:37+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:29845C695A88E411BF89F345A28D8C9F</stEvt:instanceID>
                  <stEvt:when>2014-12-20T17:19:01+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:2E845C695A88E411BF89F345A28D8C9F</stEvt:instanceID>
                  <stEvt:when>2014-12-20T17:33:07+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4365C60ACE89E4119A65C8F5B8A1FEA0</stEvt:instanceID>
                  <stEvt:when>2014-12-22T13:34:24+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0B5A99264D6BE51194FFADFDE0B012D7</stEvt:instanceID>
                  <stEvt:when>2015-10-05T13:38+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:8D6F8BA0EBBDE511B2BBC0EB12123494</stEvt:instanceID>
                  <stEvt:when>2016-01-18T16:01:53+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:18BA851AF2BDE5119314DC75DE111CE2</stEvt:instanceID>
                  <stEvt:when>2016-01-18T16:45:22+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Bridge CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/metadata</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:5C653C0AF8BDE5119314DC75DE111CE2</stEvt:instanceID>
                  <stEvt:when>2016-01-18T17:27:52+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Bridge CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/metadata</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:2298BD9C9CCDE51182E88FE4B356D417</stEvt:instanceID>
                  <stEvt:when>2016-02-07T15:13:43+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:ca067123-d8ed-8f49-961c-362d76ab6f7b</stEvt:instanceID>
                  <stEvt:when>2016-05-09T17:18:05+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>1200.000000</stDim:w>
            <stDim:h>1200.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=0 B=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
         <photoshop:Headline>abstract vector background with high tech circuit board</photoshop:Headline>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1200 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1200 li
1200 1200 li
1200 0 li
cp
clp
1200 1200 mo
0 1200 li
0 0 li
1200 0 li
1200 1200 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
0 0 0 rgb
f
344.351 438.964 mo
342.988 437.626 342.964 435.437 344.301 434.074 cv
345.638 432.708 347.827 432.685 349.191 434.021 cv
350.555 435.359 350.577 437.546 349.241 438.912 cv
347.904 440.275 345.714 440.298 344.351 438.964 cv
cp
478.453 512.869 mo
489.809 523.693 li
530.641 567.262 li
531.459 560.601 li
493.267 522.212 li
479.837 509.41 li
449.315 509.41 li
437.216 521.796 li
413.787 521.517 li
348.225 454.818 li
348.225 444 li
348.225 444 li
349.636 442.559 350.77 441.089 351.781 439.458 cv
353.746 436.281 354.35 432.503 351.682 429.89 cv
349.011 427.275 344.727 427.322 342.115 429.99 cv
337.167 434.872 343.993 442.647 344.821 443.726 cv
344.768 456.234 li
412.331 524.966 li
438.668 525.261 li
450.771 512.869 li
478.453 512.869 li
cp
0 .862745 1 rgb
f
375.867 467.13 mo
374.502 465.794 374.481 463.605 375.819 462.242 cv
377.152 460.878 379.344 460.853 380.705 462.191 cv
382.068 463.527 382.092 465.716 380.754 467.08 cv
379.422 468.445 377.229 468.468 375.867 467.13 cv
cp
482.495 506.531 mo
495.859 519.091 li
532.194 555.872 li
533.924 552.122 li
499.317 517.595 li
483.865 503.072 li
444.129 503.072 li
432.892 514.597 li
417.379 514.597 li
379.63 476.427 li
379.63 472.169 li
380.972 471.31 382.285 469.257 383.294 467.626 cv
385.263 464.447 385.865 460.673 383.197 458.058 cv
380.529 455.443 376.245 455.49 373.629 458.158 cv
371.016 460.828 372.039 464.392 373.729 467.724 cv
374.275 468.798 375.177 470.242 376.173 471.275 cv
376.173 477.849 li
415.938 518.054 li
434.35 518.054 li
445.587 506.531 li
482.495 506.531 li
cp
f
397.327 468.859 mo
395.961 467.523 395.939 465.335 397.276 463.97 cv
398.61 462.605 400.802 462.582 402.165 463.919 cv
403.53 465.257 403.55 467.445 402.213 468.808 cv
400.879 470.173 398.688 470.197 397.327 468.859 cv
cp
485.065 501.052 mo
501.62 517.337 li
531.697 547.436 li
532.692 543.393 li
505.079 515.888 li
486.48 497.595 li
442.701 497.595 li
430.605 509.691 li
425.195 509.418 li
401.703 485.484 li
401.703 473.679 li
401.396 473.679 li
402.629 472.726 403.821 470.861 404.755 469.355 cv
406.72 466.177 407.322 462.404 404.654 459.787 cv
401.987 457.173 397.701 457.218 395.088 459.888 cv
392.474 462.556 393.498 466.121 395.189 469.455 cv
395.868 470.793 397.101 472.703 398.382 473.679 cv
398.246 473.679 li
398.246 486.898 li
423.733 512.861 li
432.023 513.162 li
444.13 501.052 li
485.065 501.052 li
cp
f
458.172 487.644 mo
456.821 488.996 454.633 488.996 453.283 487.644 cv
451.932 486.294 451.932 484.105 453.283 482.755 cv
454.633 481.404 456.821 481.404 458.172 482.755 cv
459.523 484.105 459.523 486.294 458.172 487.644 cv
cp
481.331 487.921 mo
530.641 536.688 li
533.189 534.372 li
482.724 484.464 li
463.517 484.464 li
462.947 482.935 460.579 481.384 458.743 480.222 cv
455.585 478.222 451.82 477.582 449.177 480.222 cv
446.536 482.865 446.536 487.146 449.177 489.789 cv
451.82 492.429 455.396 491.445 458.743 489.789 cv
459.623 489.353 460.746 488.685 461.697 487.921 cv
481.331 487.921 li
cp
f
427.464 482.404 mo
427.501 484.314 425.979 485.888 424.071 485.921 cv
422.16 485.957 420.585 484.435 420.552 482.525 cv
420.518 480.617 422.039 479.043 423.949 479.005 cv
425.858 478.974 427.433 480.496 427.464 482.404 cv
cp
479.571 475.408 mo
531.459 528.463 li
532.194 524.345 li
481.025 471.951 li
433.843 471.951 li
428.759 476.31 li
427.238 475.742 424.576 476.339 422.525 476.837 cv
418.89 477.72 415.815 479.984 415.876 483.718 cv
415.943 487.455 419.023 490.429 422.76 490.363 cv
426.496 490.298 428.272 487.04 429.406 483.484 cv
429.736 482.451 430.065 481.003 430.14 479.679 cv
435.123 475.408 li
479.571 475.408 li
cp
f
854.413 546.495 mo
855.788 545.167 857.976 545.206 859.302 546.581 cv
860.63 547.954 860.591 550.145 859.218 551.467 cv
857.843 552.795 855.655 552.758 854.327 551.383 cv
853.003 550.008 853.042 547.821 854.413 546.495 cv
cp
745.793 512.397 mo
811.361 512.397 li
827.195 529.215 li
827.195 544.833 li
833.996 551.295 li
850.245 551.295 li
851.226 552.248 852.573 553.157 853.714 553.905 cv
856.833 555.959 860.591 556.67 863.28 554.075 cv
865.966 551.479 866.04 547.196 863.444 544.508 cv
860.851 541.821 857.257 542.743 853.878 544.342 cv
852.372 545.055 850.136 546.434 849.265 547.838 cv
835.378 547.838 li
830.653 543.35 li
830.653 527.846 li
812.858 508.938 li
744.356 508.938 li
702.606 550.887 li
702.606 555.79 li
745.793 512.397 li
cp
f
811.791 530.989 mo
813.672 531.321 814.927 533.114 814.595 534.995 cv
814.263 536.873 812.47 538.129 810.589 537.799 cv
808.708 537.467 807.454 535.676 807.786 533.794 cv
808.115 531.913 809.911 530.659 811.791 530.989 cv
cp
745.793 522.479 mo
797.104 522.479 li
805.445 530.575 li
805.272 531.901 805.321 533.458 805.383 534.778 cv
805.554 538.51 807.192 541.965 810.869 542.616 cv
814.55 543.264 818.057 540.807 818.705 537.127 cv
819.354 533.45 816.494 531.084 813.22 529.292 cv
811.668 528.444 809.047 527.385 807.405 527.659 cv
798.507 519.022 li
744.354 519.022 li
743.849 519.532 li
702.606 561.002 li
702.606 565.905 li
745.793 522.479 li
cp
f
750.688 532.792 mo
752.025 531.426 754.215 531.407 755.579 532.743 cv
756.944 534.079 756.967 536.268 755.63 537.633 cv
754.292 538.997 752.104 539.018 750.74 537.68 cv
749.376 536.346 749.352 534.155 750.688 532.792 cv
cp
740.029 536.887 mo
745.888 536.887 li
746.847 538.114 748.696 539.294 750.194 540.221 cv
753.37 542.186 757.147 542.79 759.761 540.122 cv
762.378 537.454 762.331 533.17 759.662 530.557 cv
756.991 527.944 753.427 528.965 750.095 530.655 cv
748.903 531.26 747.257 532.303 746.22 533.43 cv
738.593 533.43 li
702.606 569.604 li
702.606 574.506 li
740.029 536.887 li
cp
f
780.619 529.108 mo
781.956 527.743 784.146 527.719 785.51 529.057 cv
786.874 530.395 786.897 532.583 785.56 533.946 cv
784.224 535.311 782.036 535.333 780.671 533.997 cv
779.308 532.659 779.283 530.471 780.619 529.108 cv
cp
734.549 552.159 mo
761.022 552.159 li
777.001 534.383 li
777.95 535.172 779.117 535.911 780.124 536.536 cv
783.302 538.502 787.078 539.106 789.692 536.438 cv
792.307 533.768 792.261 529.487 789.593 526.87 cv
786.922 524.256 783.357 525.278 780.026 526.971 cv
778.345 527.823 775.763 529.547 775.263 531.145 cv
759.478 548.7 li
733.126 548.7 li
702.606 578.949 li
702.606 583.818 li
734.549 552.159 li
cp
f
746.923 561.614 mo
748.259 560.25 750.448 560.227 751.813 561.565 cv
753.177 562.899 753.2 565.09 751.865 566.454 cv
750.528 567.818 748.339 567.838 746.975 566.502 cv
745.611 565.167 745.588 562.977 746.923 561.614 cv
cp
728.792 565.989 mo
742.194 565.989 li
742.194 565.803 li
743.173 566.994 744.97 568.139 746.427 569.043 cv
749.605 571.008 753.382 571.611 755.996 568.943 cv
758.611 566.274 758.565 561.991 755.896 559.377 cv
753.226 556.762 749.661 557.786 746.33 559.477 cv
745.033 560.135 743.196 561.313 742.194 562.551 cv
742.194 562.532 li
727.356 562.532 li
726.849 563.04 li
702.606 587.361 li
702.606 592.262 li
728.792 565.989 li
cp
f
810.072 561.821 mo
811.953 562.153 813.209 563.944 812.879 565.827 cv
812.546 567.707 810.753 568.961 808.872 568.629 cv
806.989 568.297 805.734 566.506 806.067 564.623 cv
806.398 562.743 808.191 561.489 810.072 561.821 cv
cp
721.582 582.269 mo
760.888 582.269 li
769.251 575.143 li
769.251 555.805 li
774.522 551.006 li
793.261 551.006 li
803.438 562.252 li
803.661 562.049 li
803.571 563.219 803.612 564.498 803.663 565.61 cv
803.837 569.34 805.474 572.797 809.151 573.445 cv
812.831 574.094 816.34 571.639 816.988 567.959 cv
817.636 564.28 814.778 561.915 811.5 560.123 cv
809.683 559.129 806.388 557.836 804.935 558.752 cv
794.796 547.547 li
773.182 547.547 li
765.794 554.276 li
765.794 573.547 li
759.614 578.813 li
720.157 578.813 li
702.606 596.219 li
702.606 601.09 li
721.582 582.269 li
cp
f
783.862 568.26 mo
783.862 566.348 785.409 564.803 787.32 564.803 cv
789.229 564.803 790.778 566.348 790.778 568.26 cv
790.778 570.17 789.229 571.719 787.32 571.719 cv
785.409 571.719 783.862 570.17 783.862 568.26 cv
cp
725.037 588.752 mo
771.507 588.752 li
783.866 574.594 li
785.34 574.644 787.19 574.252 788.704 573.914 cv
792.352 573.096 795.472 570.883 795.472 567.148 cv
795.472 563.411 792.442 560.383 788.704 560.383 cv
784.97 560.383 783.14 563.608 781.941 567.148 cv
781.456 568.584 780.956 570.822 781.169 572.424 cv
769.934 585.295 li
723.619 585.295 li
702.606 605.967 li
702.606 610.818 li
725.037 588.752 li
cp
f
777.883 593.174 mo
779.257 591.846 781.445 591.885 782.771 593.26 cv
784.099 594.635 784.061 596.824 782.688 598.148 cv
781.31 599.475 779.123 599.435 777.798 598.063 cv
776.47 596.69 776.508 594.5 777.883 593.174 cv
cp
725.033 597.684 mo
773.431 597.684 li
774.421 598.742 775.927 599.762 777.182 600.586 cv
780.302 602.641 784.058 603.35 786.748 600.754 cv
789.434 598.158 789.508 593.877 786.913 591.188 cv
784.319 588.5 780.726 589.422 777.349 591.021 cv
775.945 591.685 773.911 592.926 772.933 594.227 cv
723.622 594.227 li
723.115 594.721 li
702.606 614.861 li
702.606 619.709 li
725.033 597.684 li
cp
f
806.885 596.725 mo
806.885 594.815 808.432 593.268 810.343 593.268 cv
812.253 593.268 813.8 594.815 813.8 596.725 cv
813.8 598.635 812.253 600.184 810.343 600.184 cv
808.432 600.184 806.885 598.635 806.885 596.725 cv
cp
718.8 612.67 mo
797.095 612.67 li
806.472 603.016 li
808.003 603.176 810.063 602.752 811.728 602.377 cv
815.374 601.56 818.493 599.35 818.493 595.615 cv
818.493 591.877 815.465 588.848 811.728 588.848 cv
807.992 588.848 806.162 592.074 804.965 595.615 cv
804.522 596.922 804.07 598.893 804.151 600.445 cv
795.634 609.213 li
717.365 609.213 li
702.606 624.025 li
702.606 628.924 li
718.8 612.67 li
cp
f
748.427 624.334 mo
749.763 622.971 751.952 622.945 753.316 624.283 cv
754.681 625.619 754.704 627.809 753.367 629.172 cv
752.03 630.537 749.843 630.559 748.477 629.223 cv
747.113 627.887 747.091 625.697 748.427 624.334 cv
cp
713.222 627.94 mo
743.294 627.94 li
744.086 629.336 746.235 630.711 747.931 631.762 cv
751.108 633.727 754.884 634.332 757.5 631.664 cv
760.114 628.994 760.069 624.709 757.399 622.096 cv
754.729 619.481 751.166 620.504 747.833 622.195 cv
746.577 622.832 744.817 623.957 743.798 625.152 cv
743.798 624.482 li
711.804 624.482 li
702.606 633.549 li
702.606 638.404 li
713.222 627.94 li
cp
f
598.524 805.422 mo
596.614 805.459 595.04 803.935 595.005 802.027 cv
594.972 800.117 596.495 798.543 598.403 798.51 cv
600.31 798.477 601.888 799.994 601.921 801.906 cv
601.954 803.815 600.433 805.391 598.524 805.422 cv
cp
604.817 813.041 mo
604.817 986.121 li
608.276 986.121 li
608.276 811.935 li
604.597 806.783 li
605.208 805.275 604.595 802.563 604.091 800.481 cv
603.208 796.848 600.944 793.771 597.21 793.836 cv
593.474 793.9 590.497 796.981 590.563 800.719 cv
590.63 804.453 593.886 806.227 597.444 807.363 cv
598.485 807.695 599.95 808.025 601.282 808.098 cv
604.817 813.041 li
cp
f
563.89 267.368 mo
561.979 267.368 560.431 265.817 560.431 263.909 cv
560.431 262 561.979 260.45 563.89 260.45 cv
565.8 260.45 567.347 262 567.347 263.909 cv
567.347 265.817 565.8 267.368 563.89 267.368 cv
cp
622.106 757.898 mo
622.106 986.121 li
625.565 986.121 li
625.565 756.435 li
610.87 742.172 li
610.87 706.309 li
556.409 652.281 li
556.409 313.858 li
546.468 303.915 li
546.468 283.329 li
560.138 270.213 li
561.655 270.338 563.651 269.928 565.274 269.563 cv
568.921 268.745 572.042 266.534 572.042 262.797 cv
572.042 259.061 569.013 256.032 565.274 256.032 cv
561.54 256.032 559.708 259.256 558.513 262.797 cv
558.058 264.141 557.595 266.18 557.71 267.75 cv
543.011 281.852 li
543.011 305.348 li
552.952 315.29 li
552.952 653.723 li
607.413 707.75 li
607.413 743.635 li
622.106 757.898 li
cp
f
746.913 296.452 mo
745.563 295.1 745.563 292.913 746.913 291.563 cv
748.265 290.211 750.452 290.211 751.802 291.563 cv
753.155 292.913 753.155 295.1 751.802 296.452 cv
750.452 297.805 748.265 297.805 746.913 296.452 cv
cp
699.476 469.338 mo
678.296 491.522 li
678.296 741.764 li
652.362 768.129 li
652.358 986.121 li
655.817 986.121 li
655.821 769.545 li
681.755 743.178 li
681.755 492.909 li
702.931 470.723 li
702.931 454.75 li
683.481 435.735 li
683.481 392.235 li
751.343 325.672 li
751.343 300.977 li
752.44 299.973 753.491 298.356 754.335 297.024 cv
756.337 293.868 756.979 290.1 754.335 287.457 cv
751.696 284.817 747.413 284.817 744.769 287.456 cv
742.13 290.1 743.114 293.676 744.769 297.024 cv
745.429 298.358 746.626 300.258 747.884 301.256 cv
747.884 324.221 li
680.024 390.784 li
680.024 437.188 li
699.476 456.206 li
699.476 469.338 li
cp
f
654.622 298.034 mo
653.271 296.684 653.271 294.495 654.622 293.145 cv
655.972 291.795 658.159 291.795 659.509 293.145 cv
660.86 294.495 660.86 296.684 659.509 298.034 cv
658.159 299.385 655.972 299.385 654.622 298.034 cv
cp
618.311 584.994 mo
619.663 586.344 619.663 588.531 618.311 589.883 cv
616.96 591.231 614.772 591.231 613.423 589.883 cv
612.071 588.531 612.071 586.344 613.423 584.994 cv
614.772 583.639 616.96 583.639 618.311 584.994 cv
cp
658.989 302.615 mo
658.979 302.615 li
660.104 301.619 661.183 299.967 662.044 298.604 cv
664.046 295.448 664.685 291.682 662.044 289.04 cv
659.401 286.395 655.122 286.395 652.477 289.04 cv
649.837 291.682 650.823 295.258 652.477 298.604 cv
653.128 299.918 654.298 301.781 655.532 302.789 cv
655.532 331.582 li
614.112 373.292 li
614.112 580.269 li
612.931 581.246 611.794 582.996 610.89 584.418 cv
608.89 587.576 608.249 591.344 610.89 593.984 cv
613.53 596.625 617.813 596.629 620.456 593.988 cv
623.097 591.344 622.112 587.768 620.456 584.418 cv
619.837 583.168 618.741 581.414 617.569 580.379 cv
617.569 374.715 li
658.989 333.006 li
658.989 302.615 li
cp
f
654.88 594.525 mo
655.274 596.393 654.083 598.229 652.214 598.625 cv
650.347 599.023 648.511 597.832 648.114 595.965 cv
647.718 594.098 648.907 592.26 650.774 591.861 cv
652.642 591.467 654.479 592.658 654.88 594.525 cv
cp
683.919 265.891 mo
682.571 264.54 682.567 262.35 683.919 261 cv
685.271 259.651 687.458 259.651 688.81 261 cv
690.159 262.35 690.159 264.54 688.81 265.891 cv
687.458 267.243 685.271 267.243 683.919 265.891 cv
cp
658.7 526.659 mo
658.7 585.658 li
655.491 588.49 li
653.905 587.94 650.958 589.225 649.29 590.217 cv
646.077 592.125 643.302 594.586 644.079 598.238 cv
644.858 601.893 648.452 604.227 652.104 603.451 cv
655.759 602.67 657.272 599.158 657.313 595.428 cv
657.325 594.238 657.325 592.854 657.165 591.625 cv
662.157 587.219 li
662.157 525.204 li
638.28 501.864 li
638.28 385.735 li
687.226 336.174 li
687.226 271.182 li
688.714 270.532 690.214 268.247 691.343 266.463 cv
693.343 263.305 693.983 259.538 691.343 256.897 cv
688.7 254.256 684.417 254.252 681.776 256.895 cv
679.134 259.538 680.118 263.114 681.776 266.463 cv
682.235 267.389 682.952 268.59 683.769 269.573 cv
683.769 334.756 li
634.821 384.317 li
634.821 503.319 li
658.7 526.659 li
cp
f
716.513 267.368 mo
714.604 267.368 713.056 265.817 713.056 263.909 cv
713.056 262 714.604 260.45 716.513 260.45 cv
718.425 260.45 719.972 262 719.972 263.909 cv
719.972 265.817 718.425 267.368 716.513 267.368 cv
cp
658.526 612.51 mo
658.925 614.377 657.729 616.215 655.862 616.609 cv
653.997 617.008 652.159 615.816 651.765 613.947 cv
651.366 612.08 652.56 610.244 654.425 609.846 cv
656.292 609.447 658.13 610.643 658.526 612.51 cv
cp
698.755 283.45 mo
712.091 270.114 li
713.644 270.475 716.024 269.985 717.899 269.563 cv
721.544 268.745 724.667 266.534 724.667 262.797 cv
724.667 259.061 721.636 256.032 717.899 256.032 cv
714.163 256.032 712.333 259.256 711.136 262.797 cv
710.753 263.932 710.366 265.565 710.321 266.993 cv
695.296 282.018 li
695.296 341.085 li
655.532 380.561 li
655.532 460.319 li
665.905 471.844 li
665.905 600.35 li
658.976 606.412 li
657.352 606.004 654.548 607.244 652.938 608.201 cv
649.726 610.106 646.952 612.57 647.729 616.225 cv
648.509 619.877 652.104 622.211 655.755 621.434 cv
659.409 620.654 660.921 617.143 660.962 613.408 cv
660.977 612.158 660.979 610.69 660.792 609.418 cv
669.362 601.922 li
669.362 470.516 li
658.989 458.993 li
658.989 381.999 li
698.755 342.522 li
698.755 283.45 li
cp
f
715.919 296.903 mo
714.015 297.051 712.351 295.629 712.2 293.725 cv
712.052 291.825 713.476 290.161 715.38 290.012 cv
717.282 289.862 718.946 291.284 719.097 293.186 cv
719.247 295.09 717.821 296.754 715.919 296.903 cv
cp
664.364 633.26 mo
664.761 635.127 663.571 636.965 661.702 637.363 cv
659.835 637.758 657.997 636.57 657.601 634.701 cv
657.204 632.832 658.394 630.994 660.263 630.598 cv
662.13 630.201 663.968 631.393 664.364 633.26 cv
cp
706.538 309.364 mo
711.972 300.022 li
713.538 300.161 715.731 299.522 717.472 298.983 cv
721.044 297.883 723.979 295.438 723.688 291.71 cv
723.396 287.987 720.142 285.204 716.417 285.497 cv
712.692 285.79 711.118 289.147 710.2 292.77 cv
709.884 294.028 709.595 295.881 709.729 297.379 cv
709.563 297.282 li
703.071 308.448 li
703.452 342.536 li
661.583 384.309 li
661.583 456.612 li
672.53 467.846 li
671.386 619.76 li
664.62 627.123 li
662.976 626.854 660.323 628.035 658.78 628.951 cv
655.563 630.859 652.792 633.324 653.567 636.975 cv
654.345 640.631 657.938 642.963 661.593 642.184 cv
665.247 641.408 666.759 637.896 666.8 634.162 cv
666.815 632.877 666.813 631.363 666.61 630.066 cv
674.835 621.117 li
675.997 466.452 li
665.042 455.207 li
665.042 385.745 li
706.925 343.954 li
706.538 309.364 li
cp
f
658.987 268.356 mo
657.077 268.391 655.505 266.868 655.468 264.96 cv
655.438 263.049 656.958 261.477 658.864 261.442 cv
660.774 261.409 662.351 262.928 662.384 264.838 cv
662.417 266.747 660.896 268.323 658.987 268.356 cv
cp
625.198 606.607 mo
625.595 608.475 624.405 610.313 622.536 610.707 cv
620.669 611.106 618.831 609.914 618.435 608.047 cv
618.038 606.178 619.229 604.342 621.099 603.943 cv
622.966 603.549 624.802 604.74 625.198 606.607 cv
cp
662.802 271.018 mo
671.38 278.614 li
671.38 327.543 li
619.226 379.411 li
619.226 577.287 li
627.726 587.082 li
627.726 598.547 li
625.729 600.543 li
624.126 600.065 621.251 601.324 619.61 602.299 cv
616.397 604.207 613.624 606.668 614.401 610.322 cv
615.181 613.977 618.771 616.309 622.425 615.531 cv
626.079 614.752 627.593 611.244 627.636 607.51 cv
627.647 606.31 627.647 604.914 627.483 603.68 cv
631.185 599.979 li
631.185 585.793 li
622.683 575.998 li
622.683 380.848 li
674.837 328.981 li
674.837 277.057 li
665.29 268.6 li
665.405 267.073 664.954 265.053 664.554 263.413 cv
663.673 259.784 661.407 256.702 657.673 256.766 cv
653.938 256.832 650.962 259.913 651.03 263.651 cv
651.095 267.385 654.351 269.159 657.909 270.295 cv
659.239 270.719 661.245 271.139 662.802 271.018 cv
cp
f
690.513 230.635 mo
692.421 230.602 693.997 232.121 694.03 234.031 cv
694.067 235.941 692.544 237.514 690.634 237.547 cv
688.726 237.582 687.151 236.061 687.116 234.15 cv
687.083 232.242 688.604 230.666 690.513 230.635 cv
cp
654.771 473.329 mo
656.122 474.68 656.122 476.868 654.771 478.219 cv
653.423 479.569 651.233 479.569 649.884 478.219 cv
648.532 476.868 648.532 474.68 649.884 473.329 cv
651.233 471.977 653.423 471.977 654.771 473.329 cv
cp
689.321 225.957 mo
685.587 226.025 682.61 229.105 682.675 232.84 cv
682.739 236.578 685.997 238.352 689.56 239.488 cv
690.565 239.809 691.968 240.133 693.265 240.221 cv
701.063 248.551 li
701.063 267.094 li
689.532 280.061 li
689.532 336.776 li
650.347 376.831 li
650.347 468.803 li
649.247 469.805 648.196 471.422 647.351 472.758 cv
645.351 475.917 644.706 479.68 647.351 482.325 cv
649.991 484.965 654.272 484.965 656.917 482.325 cv
659.56 479.68 658.571 476.104 656.917 472.758 cv
656.259 471.424 655.061 469.528 653.804 468.53 cv
653.804 378.241 li
692.991 338.188 li
692.991 281.374 li
704.519 268.409 li
704.519 247.188 li
696.726 238.855 li
697.302 237.336 696.702 234.664 696.202 232.604 cv
695.321 228.975 693.056 225.895 689.321 225.957 cv
cp
f
708.468 441.612 mo
709.817 442.963 709.817 445.151 708.468 446.502 cv
707.122 447.852 704.929 447.852 703.577 446.502 cv
702.229 445.151 702.229 442.963 703.577 441.612 cv
704.929 440.262 707.122 440.262 708.468 441.612 cv
cp
710.612 437.506 mo
707.972 434.866 703.688 434.866 701.046 437.506 cv
698.405 440.149 699.046 443.915 701.046 447.073 cv
702.081 448.707 703.427 450.76 704.788 451.592 cv
704.788 472.907 li
683.769 493.653 li
683.769 745.91 li
659.296 769.396 li
659.292 986.121 li
662.751 986.121 li
662.755 770.871 li
687.226 747.385 li
687.226 495.098 li
708.243 474.352 li
708.243 450.61 li
709.214 449.571 710.085 448.141 710.612 447.073 cv
712.269 443.725 713.255 440.149 710.612 437.506 cv
cp
f
740.946 438.276 mo
739.595 436.924 739.595 434.737 740.946 433.387 cv
742.296 432.04 744.485 432.04 745.835 433.387 cv
747.188 434.737 747.188 436.924 745.835 438.276 cv
744.485 439.631 742.296 439.631 740.946 438.276 cv
cp
747.979 438.85 mo
749.636 435.5 750.622 431.924 747.979 429.28 cv
745.337 426.639 741.056 426.643 738.413 429.284 cv
735.771 431.924 736.413 435.692 738.413 438.85 cv
739.259 440.184 740.31 441.801 741.409 442.803 cv
741.409 451.299 li
744.866 451.299 li
744.866 443.081 li
746.124 442.082 747.321 440.182 747.979 438.85 cv
cp
f
808.089 390.668 mo
806.735 389.321 806.729 387.131 808.075 385.778 cv
809.419 384.424 811.61 384.417 812.964 385.762 cv
814.321 387.11 814.325 389.295 812.981 390.651 cv
811.636 392.008 809.446 392.016 808.089 390.668 cv
cp
809.239 395.713 mo
809.239 402.825 li
812.696 402.825 li
812.696 394.836 li
813.692 393.788 814.591 392.311 815.126 391.217 cv
816.771 387.862 817.747 384.286 815.095 381.649 cv
812.446 379.014 808.159 379.032 805.53 381.682 cv
802.896 384.332 803.548 388.094 805.56 391.249 cv
806.579 392.848 807.899 394.856 809.239 395.713 cv
cp
f
811.726 319.905 mo
813.079 321.252 813.083 323.44 811.739 324.793 cv
810.392 326.151 808.204 326.159 806.851 324.811 cv
805.497 323.465 805.487 321.276 806.833 319.922 cv
808.181 318.569 810.368 318.563 811.726 319.905 cv
cp
806.229 451.127 mo
807.509 452.545 807.397 454.729 805.983 456.01 cv
804.567 457.293 802.38 457.182 801.101 455.762 cv
799.817 454.348 799.931 452.165 801.345 450.881 cv
802.761 449.598 804.948 449.71 806.229 451.127 cv
cp
813.854 315.792 mo
811.202 313.159 806.921 313.174 804.288 315.827 cv
801.655 318.477 802.31 322.239 804.317 325.391 cv
805.095 326.608 806.044 328.057 807.042 329.061 cv
806.897 329.442 806.81 329.848 806.81 330.278 cv
806.81 349.202 li
790.372 364.018 li
789.646 364.674 789.229 365.606 789.229 366.585 cv
789.229 411.536 li
789.229 412.43 789.577 413.292 790.2 413.936 cv
800.776 424.907 li
801.046 445.582 li
801.054 446.143 801.206 446.661 801.446 447.125 cv
800.554 448.077 799.751 449.278 799.233 450.202 cv
797.413 453.463 796.247 456.983 798.751 459.758 cv
801.255 462.532 805.532 462.743 808.306 460.239 cv
811.075 457.733 810.626 453.94 808.788 450.684 cv
808.28 449.786 807.688 448.762 807.048 447.864 cv
807.612 447.249 807.962 446.436 807.962 445.54 cv
807.962 445.522 807.962 445.508 807.962 445.491 cv
807.673 423.45 li
807.663 422.567 807.317 421.727 806.704 421.096 cv
796.146 410.141 li
796.146 368.125 li
812.581 353.309 li
813.31 352.653 813.726 351.717 813.726 350.739 cv
813.726 330.278 li
813.726 329.233 813.251 328.307 812.515 327.672 cv
813.071 326.885 813.548 326.047 813.884 325.362 cv
815.53 322.006 816.505 318.43 813.854 315.792 cv
cp
f
743.979 408.239 mo
745.259 409.659 745.147 411.842 743.731 413.122 cv
742.313 414.403 740.13 414.292 738.847 412.875 cv
737.567 411.457 737.679 409.272 739.095 407.989 cv
740.511 406.71 742.698 406.819 743.979 408.239 cv
cp
743.157 403.178 mo
743.417 394.877 li
739.96 394.77 li
739.679 403.758 li
738.601 404.754 737.591 406.221 736.983 407.311 cv
735.159 410.573 733.997 414.096 736.501 416.868 cv
739.005 419.639 743.284 419.852 746.054 417.346 cv
748.825 414.844 748.376 411.053 746.538 407.795 cv
745.62 406.167 744.429 404.125 743.157 403.178 cv
cp
f
841.376 406.586 mo
843.267 406.321 845.015 407.635 845.28 409.526 cv
845.546 411.417 844.229 413.167 842.337 413.43 cv
840.446 413.696 838.7 412.379 838.435 410.489 cv
838.167 408.598 839.483 406.848 841.376 406.586 cv
cp
838.794 404.094 mo
838.794 373.356 li
835.335 373.356 li
835.335 405.684 li
834.798 407.266 835.839 410.174 836.688 411.856 cv
838.364 415.196 840.626 418.133 844.327 417.618 cv
848.03 417.094 850.602 413.674 850.083 409.971 cv
849.563 406.276 846.169 404.522 842.446 404.215 cv
841.308 404.124 839.991 404.036 838.794 404.094 cv
cp
f
719.38 228.188 mo
721.288 228.166 722.851 229.697 722.872 231.607 cv
722.892 233.518 721.36 235.08 719.45 235.098 cv
717.538 235.115 715.976 233.586 715.956 231.676 cv
715.935 229.768 717.472 228.205 719.38 228.188 cv
cp
686.39 458.309 mo
688.296 458.256 689.888 459.76 689.938 461.672 cv
689.989 463.581 688.485 465.167 686.577 465.221 cv
684.667 465.272 683.079 463.766 683.026 461.858 cv
682.976 459.952 684.481 458.36 686.39 458.309 cv
cp
717.95 223.777 mo
714.212 223.818 711.218 226.877 711.255 230.611 cv
711.288 234.35 714.425 236.525 718.085 237.307 cv
719.077 237.52 720.208 237.746 721.288 237.865 cv
721.394 238.42 721.624 238.959 722.011 239.426 cv
729.626 248.547 li
729.626 309.883 li
709.788 330.782 li
709.179 331.422 708.837 332.274 708.837 333.163 cv
708.837 346.149 li
670.646 384.905 li
670.009 385.551 669.651 386.422 669.651 387.331 cv
669.651 448.131 li
669.651 449.01 669.985 449.858 670.587 450.5 cv
677.626 457.989 li
678.29 458.698 679.185 459.059 680.087 459.075 cv
680.171 460.432 680.538 461.993 680.872 463.303 cv
681.788 466.926 684.079 469.983 687.817 469.885 cv
691.55 469.782 694.497 466.674 694.396 462.94 cv
694.292 459.202 691.019 457.457 687.45 456.358 cv
686.403 456.036 684.935 455.719 683.595 455.661 cv
683.604 454.797 683.3 453.93 682.667 453.254 cv
676.567 446.762 li
676.567 388.75 li
714.759 349.995 li
715.397 349.348 715.755 348.475 715.755 347.567 cv
715.755 334.54 li
735.593 313.641 li
736.202 313 736.542 312.149 736.542 311.26 cv
736.542 247.293 li
736.542 246.482 736.255 245.699 735.739 245.076 cv
727.321 234.992 li
726.851 234.43 726.237 234.057 725.579 233.877 cv
725.435 232.666 725.104 231.402 724.78 230.479 cv
723.548 226.951 721.685 223.746 717.95 223.777 cv
cp
f
767.784 462.579 mo
765.888 462.793 764.173 461.436 763.954 459.538 cv
763.735 457.641 765.097 455.924 766.993 455.706 cv
768.89 455.489 770.604 456.848 770.823 458.745 cv
771.044 460.643 769.685 462.358 767.784 462.579 cv
cp
769.966 465.133 mo
770.095 465.356 770.243 465.571 770.425 465.766 cv
779.327 475.274 li
780.63 476.668 782.817 476.741 784.214 475.436 cv
784.942 474.754 785.31 473.832 785.31 472.911 cv
785.31 472.063 785.001 471.215 784.376 470.551 cv
775.476 461.042 li
774.95 460.481 774.28 460.143 773.579 460.014 cv
773.308 459.061 772.942 458.133 772.604 457.422 cv
771.009 454.043 768.821 451.049 765.106 451.475 cv
761.397 451.903 758.739 455.26 759.167 458.971 cv
759.593 462.684 762.942 464.522 766.663 464.918 cv
767.688 465.026 768.862 465.133 769.966 465.133 cv
cp
f
823.192 429.905 mo
821.843 428.555 821.843 426.366 823.192 425.014 cv
824.544 423.665 826.733 423.665 828.083 425.014 cv
829.435 426.366 829.435 428.555 828.083 429.905 cv
826.733 431.256 824.544 431.256 823.192 429.905 cv
cp
824.386 434.987 mo
824.386 442.368 li
827.843 442.368 li
827.843 434.028 li
828.819 432.987 829.696 431.547 830.229 430.475 cv
831.884 427.129 832.866 423.553 830.229 420.909 cv
827.583 418.27 823.302 418.27 820.663 420.909 cv
818.019 423.553 818.659 427.319 820.663 430.475 cv
821.692 432.104 823.03 434.149 824.386 434.987 cv
cp
f
624.813 730.484 mo
623.462 729.135 623.462 726.947 624.813 725.596 cv
626.163 724.244 628.351 724.244 629.702 725.596 cv
631.05 726.947 631.05 729.135 629.702 730.484 cv
628.351 731.836 626.163 731.836 624.813 730.484 cv
cp
563.935 297.875 mo
562.583 296.524 562.583 294.336 563.935 292.987 cv
565.282 291.635 567.472 291.635 568.823 292.987 cv
570.171 294.336 570.171 296.524 568.823 297.875 cv
567.472 299.225 565.282 299.225 563.935 297.875 cv
cp
622.28 734.592 mo
624.921 737.232 629.202 737.232 631.845 734.592 cv
634.485 731.947 633.501 728.371 631.845 725.023 cv
631.235 723.795 630.171 722.084 629.022 721.043 cv
629.022 708.486 li
568.081 645.815 li
568.081 302.641 li
569.28 301.674 570.438 299.895 571.354 298.446 cv
573.354 295.29 573.997 291.524 571.354 288.881 cv
568.714 286.237 564.431 286.237 561.79 288.879 cv
559.147 291.524 560.134 295.096 561.79 298.446 cv
562.435 299.754 563.595 301.603 564.823 302.615 cv
564.622 302.615 li
564.622 647.219 li
625.565 709.891 li
625.565 720.822 li
624.362 721.787 623.198 723.574 622.28 725.023 cv
620.276 728.184 619.638 731.947 622.28 734.592 cv
cp
f
598.366 293.905 mo
599.718 295.252 599.718 297.444 598.366 298.792 cv
597.015 300.141 594.827 300.141 593.476 298.792 cv
592.126 297.444 592.126 295.252 593.476 293.905 cv
594.827 292.555 597.015 292.555 598.366 293.905 cv
cp
600.897 289.795 mo
598.259 287.155 593.976 287.155 591.333 289.795 cv
588.692 292.438 589.677 296.016 591.333 299.366 cv
591.917 300.545 592.921 302.17 594.013 303.221 cv
594.013 323.797 li
575.427 342.383 li
575.427 642.482 li
647.175 713.797 li
647.171 986.121 li
650.63 986.121 li
650.634 712.359 li
578.886 641.043 li
578.886 343.815 li
597.472 325.231 li
597.472 303.673 li
598.726 302.738 599.942 300.874 600.897 299.366 cv
602.899 296.207 603.542 292.438 600.897 289.795 cv
cp
f
596.282 230.412 mo
598.194 230.412 599.741 231.959 599.741 233.869 cv
599.741 235.779 598.194 237.326 596.282 237.326 cv
594.376 237.326 592.827 235.779 592.827 233.869 cv
592.827 231.959 594.376 230.412 596.282 230.412 cv
cp
597.669 225.992 mo
593.935 225.992 592.104 229.219 590.907 232.758 cv
590.286 234.592 589.646 237.727 590.505 239.17 cv
582.56 247.307 li
582.56 270.536 li
575.241 276.538 li
559.55 276.538 li
550.358 286.374 li
550.358 303.332 li
559.003 311.977 li
559.003 651.404 li
614.112 706.877 li
614.112 740.152 li
627.726 753.984 li
627.726 986.121 li
631.185 986.121 li
631.185 752.568 li
617.569 738.738 li
617.569 705.449 li
562.46 649.977 li
562.46 310.545 li
553.817 301.898 li
553.817 287.739 li
561.05 279.997 li
576.479 279.997 li
586.017 272.168 li
586.017 248.717 li
594.386 240.143 li
594.366 240.123 li
595.476 239.998 596.647 239.752 597.669 239.523 cv
601.317 238.705 604.435 236.496 604.435 232.758 cv
604.435 229.021 601.405 225.992 597.669 225.992 cv
cp
f
597.71 260.756 mo
599.622 260.756 601.169 262.305 601.169 264.213 cv
601.169 266.125 599.622 267.672 597.71 267.672 cv
595.8 267.672 594.253 266.125 594.253 264.213 cv
594.253 262.305 595.8 260.756 597.71 260.756 cv
cp
599.097 256.338 mo
595.36 256.338 593.53 259.565 592.335 263.104 cv
591.726 264.901 591.093 267.957 591.878 269.438 cv
589.319 275.118 li
579.739 284.922 li
580.171 313.868 li
570.241 323.797 li
570.241 644.195 li
640.261 715.943 li
640.261 986.121 li
643.718 986.121 li
643.718 714.537 li
573.7 642.789 li
573.7 325.231 li
583.651 315.28 li
583.218 286.309 li
592.224 277.096 li
595.177 270.532 li
596.456 270.448 597.884 270.141 599.097 269.87 cv
602.743 269.049 605.862 266.838 605.862 263.104 cv
605.862 259.366 602.833 256.338 599.097 256.338 cv
cp
f
613.352 768.1 mo
613.386 770.006 611.862 771.582 609.954 771.613 cv
608.044 771.65 606.47 770.127 606.436 768.219 cv
606.401 766.309 607.925 764.736 609.833 764.701 cv
611.741 764.668 613.317 766.188 613.352 768.1 cv
cp
614.185 774.232 mo
616.487 777.584 li
616.487 986.121 li
619.946 986.121 li
619.946 776.51 li
616.274 771.17 li
616.241 769.754 615.86 768.074 615.521 766.674 cv
614.64 763.039 612.376 759.965 608.642 760.025 cv
604.903 760.094 601.929 763.172 601.993 766.91 cv
602.06 770.644 605.317 772.42 608.876 773.555 cv
610.325 774.018 612.587 774.481 614.185 774.232 cv
cp
f
608.597 786.232 mo
608.632 788.143 607.108 789.717 605.2 789.75 cv
603.29 789.783 601.716 788.262 601.683 786.354 cv
601.647 784.441 603.171 782.867 605.079 782.836 cv
606.985 782.805 608.563 784.324 608.597 786.232 cv
cp
609.222 792.389 mo
611.733 796.156 li
611.733 986.121 li
615.192 986.121 li
615.192 795.109 li
611.532 789.619 li
611.556 788.146 611.132 786.31 610.767 784.807 cv
609.886 781.178 607.622 778.098 603.886 778.16 cv
600.149 778.225 597.173 781.309 597.239 785.043 cv
597.306 788.781 600.563 790.553 604.122 791.69 cv
605.511 792.131 607.64 792.568 609.222 792.389 cv
cp
f
659.321 238.703 mo
657.409 238.74 655.837 237.217 655.802 235.309 cv
655.769 233.396 657.292 231.824 659.2 231.791 cv
661.106 231.756 662.685 233.275 662.718 235.188 cv
662.751 237.096 661.229 238.672 659.321 238.703 cv
cp
632.005 624.898 mo
632.403 626.766 631.212 628.604 629.345 628.998 cv
627.477 629.396 625.64 628.205 625.241 626.342 cv
624.845 624.471 626.036 622.633 627.905 622.238 cv
629.772 621.84 631.608 623.031 632.005 624.898 cv
cp
663.788 241.283 mo
671.38 248.871 li
671.38 269.618 li
677.431 275.668 li
677.431 331.008 li
625.565 383.452 li
625.565 573.563 li
634.821 583.791 li
634.821 616.221 li
632.061 618.748 li
630.407 618.592 627.905 619.707 626.417 620.59 cv
623.204 622.498 620.431 624.959 621.21 628.613 cv
621.985 632.269 625.579 634.6 629.231 633.824 cv
632.888 633.047 634.399 629.535 634.442 625.801 cv
634.456 624.435 634.45 622.818 634.206 621.473 cv
638.28 617.744 li
638.28 582.457 li
629.022 572.231 li
629.022 384.872 li
680.888 332.428 li
680.888 274.239 li
674.837 268.186 li
674.837 247.439 li
665.642 238.246 li
665.604 236.834 665.226 235.158 664.886 233.762 cv
664.005 230.131 661.741 227.051 658.009 227.115 cv
654.271 227.18 651.296 230.262 651.358 233.998 cv
651.427 237.732 654.685 239.508 658.241 240.645 cv
659.765 241.131 662.186 241.621 663.788 241.283 cv
cp
f
592.192 816.406 mo
594.101 816.371 595.677 817.891 595.712 819.803 cv
595.743 821.709 594.224 823.287 592.315 823.316 cv
590.403 823.356 588.827 821.832 588.796 819.924 cv
588.763 818.014 590.286 816.44 592.192 816.406 cv
cp
591.001 811.732 mo
587.263 811.797 584.288 814.875 584.354 818.613 cv
584.421 822.348 587.677 824.121 591.233 825.26 cv
592.083 825.531 593.21 825.795 594.321 825.926 cv
594.282 825.951 li
597.038 830.281 li
597.103 986.121 li
600.562 986.121 li
600.497 829.275 li
597.981 825.322 li
597.987 825.318 597.997 825.316 598.001 825.31 cv
599.204 824.065 598.468 820.793 597.88 818.377 cv
596.997 814.744 594.733 811.664 591.001 811.732 cv
cp
f
648.505 576.106 mo
648.505 578.014 646.958 579.563 645.048 579.563 cv
643.138 579.563 641.593 578.014 641.593 576.106 cv
641.593 574.195 643.138 572.648 645.048 572.648 cv
646.958 572.648 648.505 574.195 648.505 576.106 cv
cp
653.204 575.018 mo
653.204 570.818 649.8 567.414 645.604 567.414 cv
641.399 567.414 637.997 570.818 637.997 575.018 cv
637.997 579.219 641.399 582.623 645.604 582.623 cv
649.8 582.623 653.204 579.219 653.204 575.018 cv
cp
f
856.237 444.252 mo
854.479 443.502 853.667 441.469 854.417 439.713 cv
855.167 437.96 857.2 437.145 858.958 437.893 cv
860.712 438.647 861.53 440.676 860.776 442.432 cv
860.024 444.188 857.991 445.002 856.237 444.252 cv
cp
855.54 447.284 mo
859.401 448.936 863.872 447.147 865.522 443.284 cv
867.175 439.42 865.384 434.954 861.522 433.301 cv
857.659 431.647 853.192 433.442 851.54 437.303 cv
849.886 441.163 851.677 445.633 855.54 447.284 cv
cp
f
742.155 352.764 mo
743.515 351.42 745.7 351.434 747.044 352.788 cv
748.386 354.149 748.372 356.34 747.015 357.68 cv
745.655 359.022 743.472 359.006 742.126 357.651 cv
740.782 356.293 740.794 354.104 742.155 352.764 cv
cp
733.899 356.786 mo
737.435 356.786 li
738.45 358 740.259 359.147 741.542 359.792 cv
744.88 361.467 748.446 362.473 751.108 359.848 cv
753.767 357.225 753.788 352.94 751.163 350.282 cv
748.538 347.625 744.769 348.243 741.601 350.223 cv
740.206 351.092 738.511 352.186 737.513 353.327 cv
732.476 353.327 li
704.788 380.848 li
704.788 401.331 li
717.626 413.432 li
717.626 469.085 li
689.577 497.12 li
689.577 747.791 li
665.077 771.563 li
665.073 986.121 li
668.53 986.121 li
668.534 773.025 li
693.034 749.254 li
693.034 498.549 li
721.085 470.516 li
721.085 411.94 li
708.243 399.838 li
708.243 382.286 li
733.899 356.786 li
cp
f
777.733 296.856 mo
775.829 296.741 774.372 295.104 774.487 293.198 cv
774.601 291.293 776.237 289.84 778.144 289.952 cv
780.048 290.067 781.501 291.704 781.39 293.608 cv
781.276 295.514 779.64 296.967 777.733 296.856 cv
cp
765.604 307.942 mo
774.036 299.508 li
775.517 299.668 777.427 299.383 778.989 299.127 cv
782.677 298.528 785.919 296.506 786.14 292.774 cv
786.364 289.047 783.521 285.844 779.788 285.622 cv
776.06 285.403 774.038 288.512 772.638 291.973 cv
772.077 293.354 771.464 295.502 771.552 297.104 cv
762.146 306.51 li
762.146 360.131 li
755.343 367.303 li
732.413 367.303 li
722.935 377.879 li
722.935 470.483 li
695.151 499.299 li
695.151 751.232 li
671.38 773.56 li
671.376 986.121 li
674.833 986.121 li
674.837 775.059 li
698.608 752.727 li
698.608 500.694 li
726.394 471.877 li
726.394 379.204 li
733.96 370.76 li
756.827 370.76 li
765.604 361.51 li
765.604 307.942 li
cp
f
851.13 397.25 mo
849.218 397.258 847.665 395.719 847.657 393.807 cv
847.647 391.899 849.192 390.348 851.101 390.34 cv
853.009 390.331 854.563 391.874 854.571 393.78 cv
854.581 395.692 853.04 397.245 851.13 397.25 cv
cp
845.134 476.774 mo
845.134 433.774 li
862.479 418.215 li
862.479 402.196 li
857.272 398.018 li
857.509 396.411 856.987 394.12 856.487 392.663 cv
855.274 389.127 853.431 385.913 849.698 385.924 cv
845.96 385.94 842.946 388.979 842.96 392.717 cv
842.976 396.452 846.097 398.647 849.751 399.454 cv
851.251 399.784 853.083 400.165 854.55 400.116 cv
854.476 400.207 li
859.022 403.854 li
859.022 416.672 li
841.673 432.231 li
841.673 475.389 li
822.351 495.674 li
722.364 495.674 li
701.222 514.788 li
701.222 717.06 li
705.696 723.766 li
708.571 721.844 li
704.679 716.012 li
704.679 516.325 li
723.696 499.131 li
823.829 499.131 li
845.134 476.774 li
cp
f
782.696 432.588 mo
782.759 432.047 782.954 431.557 783.231 431.129 cv
783.634 430.954 784.009 430.704 784.331 430.372 cv
784.497 430.202 784.638 430.022 784.761 429.831 cv
785.3 429.596 785.901 429.485 786.53 429.557 cv
788.427 429.78 789.788 431.495 789.567 433.389 cv
789.343 435.288 787.626 436.643 785.731 436.426 cv
783.835 436.204 782.479 434.487 782.696 432.588 cv
cp
779.474 328.37 mo
779.212 328.305 778.942 328.262 778.663 328.262 cv
778.538 328.262 778.423 328.288 778.302 328.299 cv
777.704 328.157 777.134 327.864 776.667 327.399 cv
775.313 326.051 775.304 323.862 776.649 322.508 cv
777.997 321.155 780.185 321.149 781.538 322.493 cv
782.894 323.84 782.899 326.026 781.556 327.381 cv
780.976 327.967 780.233 328.286 779.474 328.37 cv
cp
775.204 387.038 mo
769.685 402.936 li
769.56 403.299 769.493 403.682 769.493 404.071 cv
769.493 419.315 li
769.493 420.252 769.872 421.145 770.542 421.797 cv
779.442 430.442 li
779.706 430.7 780.009 430.891 780.325 431.047 cv
780.384 431.926 780.513 432.786 780.659 433.471 cv
781.442 437.125 782.886 440.54 786.597 440.973 cv
790.31 441.409 793.667 438.749 794.097 435.036 cv
794.53 431.331 791.692 428.774 788.163 427.534 cv
787.192 427.194 786.079 426.823 785.009 426.571 cv
784.835 426.174 784.589 425.803 784.259 425.481 cv
776.409 417.852 li
776.409 404.651 li
781.929 388.756 li
782.054 388.391 782.118 388.006 782.118 387.622 cv
782.118 331.721 li
782.118 331.383 782.056 331.065 781.966 330.756 cv
782.675 329.836 783.292 328.782 783.7 327.95 cv
785.345 324.592 786.321 321.016 783.669 318.379 cv
781.019 315.745 776.737 315.762 774.104 318.413 cv
771.472 321.063 772.126 324.825 774.134 327.979 cv
774.573 328.668 775.071 329.434 775.601 330.151 cv
775.354 330.624 775.204 331.153 775.204 331.721 cv
775.204 387.038 li
cp
f
714.993 744.271 mo
716.345 745.623 716.345 747.813 714.993 749.162 cv
713.644 750.51 711.454 750.51 710.104 749.162 cv
708.755 747.813 708.755 745.623 710.104 744.271 cv
711.454 742.918 713.644 742.918 714.993 744.271 cv
cp
708.837 741.606 mo
708.97 741.606 li
708.466 742.301 707.991 743.035 707.571 743.699 cv
705.571 746.856 704.931 750.623 707.571 753.264 cv
710.212 755.904 714.497 755.908 717.138 753.268 cv
719.78 750.623 718.794 747.049 717.138 743.699 cv
716.798 743.012 716.313 742.172 715.755 741.383 cv
715.755 735.986 li
708.837 735.986 li
708.837 741.606 li
cp
f
596.823 334.024 mo
602.075 334.024 606.331 329.768 606.331 324.514 cv
606.331 319.264 602.075 315.006 596.823 315.006 cv
591.569 315.006 587.313 319.264 587.313 324.514 cv
587.313 329.768 591.569 334.024 596.823 334.024 cv
1 1 1 rgb
f
711.056 737.289 mo
716.339 737.289 720.622 733.008 720.622 727.723 cv
720.622 722.441 716.339 718.156 711.056 718.156 cv
705.772 718.156 701.491 722.441 701.491 727.723 cv
701.491 733.008 705.772 737.289 711.056 737.289 cv
cp
f
743.14 467.856 mo
748.419 467.856 752.704 463.571 752.704 458.29 cv
752.704 453.004 748.419 448.723 743.14 448.723 cv
737.854 448.723 733.571 453.004 733.571 458.29 cv
733.571 463.571 737.854 467.856 743.14 467.856 cv
cp
f
707.134 409.012 mo
712.417 409.012 716.7 404.727 716.7 399.446 cv
716.7 394.163 712.417 389.881 707.134 389.881 cv
701.851 389.881 697.567 394.163 697.567 399.446 cv
697.567 404.727 701.851 409.012 707.134 409.012 cv
cp
f
721.897 331.721 mo
727.185 331.721 731.468 327.438 731.468 322.155 cv
731.468 316.874 727.185 312.588 721.897 312.588 cv
716.618 312.588 712.333 316.874 712.333 322.155 cv
712.333 327.438 716.618 331.721 721.897 331.721 cv
cp
f
741.399 396.696 mo
746.685 396.696 750.968 392.413 750.968 387.129 cv
750.968 381.848 746.685 377.563 741.399 377.563 cv
736.118 377.563 731.833 381.848 731.833 387.129 cv
731.833 392.413 736.118 396.696 741.399 396.696 cv
cp
f
783.976 488.381 mo
789.259 488.381 793.542 484.1 793.542 478.817 cv
793.542 473.536 789.259 469.25 783.976 469.25 cv
778.692 469.25 774.405 473.536 774.405 478.817 cv
774.405 484.1 778.692 488.381 783.976 488.381 cv
cp
f
826.114 459.424 mo
831.397 459.424 835.681 455.143 835.681 449.858 cv
835.681 444.577 831.397 440.292 826.114 440.292 cv
820.831 440.292 816.548 444.577 816.548 449.858 cv
816.548 455.143 820.831 459.424 826.114 459.424 cv
cp
f
774.405 402.586 mo
779.688 402.586 783.976 398.305 783.976 393.022 cv
783.976 387.741 779.688 383.456 774.405 383.456 cv
769.126 383.456 764.843 387.741 764.843 393.022 cv
764.843 398.305 769.126 402.586 774.405 402.586 cv
cp
f
804.837 363.254 mo
810.122 363.254 814.405 358.973 814.405 353.69 cv
814.405 348.409 810.122 344.122 804.837 344.122 cv
799.56 344.122 795.272 348.409 795.272 353.69 cv
795.272 358.973 799.56 363.254 804.837 363.254 cv
cp
f
837.067 375.085 mo
842.345 375.085 846.63 370.803 846.63 365.518 cv
846.63 360.237 842.345 355.952 837.067 355.952 cv
831.78 355.952 827.501 360.237 827.501 365.518 cv
827.501 370.803 831.78 375.085 837.067 375.085 cv
cp
f
810.267 416.633 mo
815.548 416.633 819.833 412.352 819.833 407.069 cv
819.833 401.788 815.548 397.502 810.267 397.502 cv
804.983 397.502 800.702 401.788 800.702 407.069 cv
800.702 412.352 804.983 416.633 810.267 416.633 cv
cp
f
489.484 397.593 mo
488.133 396.243 488.133 394.054 489.484 392.705 cv
490.834 391.357 493.023 391.357 494.375 392.705 cv
495.725 394.054 495.725 396.243 494.375 397.593 cv
493.023 398.949 490.834 398.949 489.484 397.593 cv
cp
490.453 402.397 mo
490.453 410.617 li
493.91 410.617 li
493.91 402.121 li
495.01 401.118 496.06 399.5 496.906 398.168 cv
498.906 395.01 499.549 391.243 496.906 388.602 cv
494.264 385.96 489.982 385.957 487.34 388.598 cv
484.697 391.243 485.684 394.818 487.34 398.168 cv
487.998 399.5 489.195 401.399 490.453 402.397 cv
cp
0 .862745 1 rgb
f
422.338 349.968 mo
420.994 348.613 421 346.427 422.355 345.08 cv
423.709 343.734 425.9 343.742 427.244 345.095 cv
428.59 346.449 428.584 348.638 427.23 349.986 cv
425.875 351.333 423.684 351.326 422.338 349.968 cv
cp
429.76 350.566 mo
431.771 347.412 432.424 343.65 429.789 341 cv
427.16 338.349 422.873 338.332 420.225 340.966 cv
417.574 343.603 418.549 347.179 420.193 350.535 cv
420.728 351.628 421.627 353.105 422.623 354.154 cv
422.623 362.142 li
426.08 362.142 li
426.08 355.029 li
427.42 354.171 428.74 352.165 429.76 350.566 cv
cp
f
428.486 279.24 mo
429.832 280.593 429.822 282.783 428.469 284.128 cv
427.115 285.476 424.928 285.468 423.58 284.111 cv
422.236 282.757 422.24 280.57 423.596 279.222 cv
424.951 277.88 427.139 277.886 428.486 279.24 cv
cp
433.975 410.199 mo
435.389 411.482 435.502 413.665 434.219 415.081 cv
432.939 416.5 430.754 416.611 429.336 415.328 cv
427.922 414.047 427.81 411.864 429.092 410.445 cv
430.371 409.027 432.559 408.915 433.975 410.199 cv
cp
421.435 284.679 mo
421.77 285.365 422.248 286.201 422.805 286.99 cv
422.07 287.625 421.596 288.55 421.596 289.595 cv
421.596 310.056 li
421.596 311.035 422.01 311.97 422.738 312.626 cv
439.174 327.443 li
439.174 369.458 li
428.615 380.414 li
428.004 381.044 427.658 381.885 427.646 382.767 cv
427.357 404.809 li
427.357 404.827 427.357 404.84 427.357 404.857 cv
427.357 405.753 427.707 406.566 428.271 407.181 cv
427.631 408.08 427.039 409.103 426.531 410.002 cv
424.693 413.258 424.244 417.05 427.014 419.556 cv
429.787 422.061 434.064 421.849 436.57 419.077 cv
439.072 416.3 437.908 412.782 436.086 409.519 cv
435.568 408.594 434.764 407.394 433.873 406.442 cv
434.113 405.978 434.266 405.46 434.273 404.901 cv
434.543 384.225 li
445.119 373.253 li
445.742 372.609 446.09 371.748 446.09 370.853 cv
446.09 325.902 li
446.09 324.923 445.674 323.992 444.947 323.335 cv
428.51 308.519 li
428.51 289.595 li
428.51 289.165 428.42 288.757 428.277 288.378 cv
429.275 287.375 430.225 285.923 431.002 284.708 cv
433.01 281.556 433.664 277.794 431.031 275.144 cv
428.398 272.492 424.117 272.476 421.467 275.109 cv
418.814 277.748 419.789 281.324 421.435 284.679 cv
cp
f
496.225 367.306 mo
497.641 368.589 497.752 370.775 496.473 372.193 cv
495.191 373.609 493.006 373.72 491.588 372.439 cv
490.172 371.16 490.063 368.976 491.342 367.556 cv
492.621 366.136 494.809 366.027 496.225 367.306 cv
cp
488.781 367.113 mo
486.943 370.371 486.494 374.162 489.266 376.664 cv
492.035 379.169 496.314 378.957 498.82 376.185 cv
501.322 373.414 500.16 369.89 498.336 366.628 cv
497.728 365.539 496.719 364.072 495.639 363.076 cv
495.359 354.087 li
491.904 354.195 li
492.162 362.496 li
490.891 363.443 489.699 365.484 488.781 367.113 cv
cp
f
464.496 418.062 mo
464.715 416.165 466.43 414.807 468.326 415.024 cv
470.223 415.243 471.584 416.96 471.365 418.855 cv
471.146 420.753 469.432 422.112 467.535 421.896 cv
465.635 421.675 464.275 419.96 464.496 418.062 cv
cp
468.658 424.236 mo
472.377 423.84 475.727 422.001 476.154 418.29 cv
476.58 414.578 473.922 411.221 470.213 410.793 cv
466.498 410.368 464.31 413.362 462.715 416.74 cv
462.379 417.451 462.012 418.378 461.74 419.332 cv
461.037 419.461 460.367 419.798 459.844 420.36 cv
450.945 429.869 li
450.32 430.533 450.012 431.38 450.012 432.228 cv
450.012 433.151 450.379 434.072 451.105 434.754 cv
452.502 436.058 454.689 435.986 455.992 434.591 cv
464.895 425.083 li
465.076 424.887 465.225 424.673 465.353 424.452 cv
466.457 424.452 467.631 424.343 468.658 424.236 cv
cp
f
407.236 389.222 mo
405.887 387.873 405.887 385.684 407.236 384.332 cv
408.586 382.982 410.775 382.982 412.127 384.332 cv
413.477 385.684 413.477 387.873 412.127 389.222 cv
410.775 390.574 408.586 390.574 407.236 389.222 cv
cp
414.658 389.793 mo
416.66 386.636 417.301 382.871 414.658 380.227 cv
412.018 377.587 407.736 377.587 405.092 380.227 cv
402.453 382.871 403.438 386.447 405.092 389.793 cv
405.623 390.865 406.5 392.303 407.477 393.345 cv
407.477 401.686 li
410.934 401.686 li
410.934 394.305 li
412.289 393.465 413.629 391.421 414.658 389.793 cv
cp
f
493.195 316.968 mo
491.85 318.324 489.664 318.339 488.305 316.998 cv
486.947 315.658 486.934 313.466 488.275 312.105 cv
489.619 310.751 491.805 310.738 493.164 312.082 cv
494.525 313.421 494.537 315.611 493.195 316.968 cv
cp
527.076 341.603 mo
527.076 359.156 li
514.234 371.257 li
514.234 429.833 li
542.285 457.867 li
542.285 708.572 li
566.785 732.344 li
566.824 986.121 li
570.281 986.121 li
570.242 730.881 li
545.742 707.109 li
545.742 456.437 li
517.693 428.402 li
517.693 372.75 li
530.533 360.648 li
530.533 340.165 li
502.844 312.644 li
497.807 312.644 li
496.809 311.503 495.111 310.41 493.721 309.54 cv
490.551 307.56 486.781 306.943 484.158 309.599 cv
481.531 312.257 481.553 316.543 484.211 319.165 cv
486.873 321.79 490.439 320.785 493.779 319.109 cv
495.06 318.464 496.869 317.318 497.885 316.103 cv
501.42 316.103 li
527.076 341.603 li
cp
f
453.93 252.925 mo
453.818 251.02 455.271 249.384 457.176 249.269 cv
459.082 249.157 460.719 250.611 460.832 252.516 cv
460.947 254.421 459.49 256.059 457.586 256.173 cv
455.68 256.285 454.043 254.832 453.93 252.925 cv
cp
469.715 320.828 mo
478.492 330.078 li
501.359 330.078 li
508.926 338.521 li
508.926 431.195 li
536.711 460.012 li
536.711 712.045 li
560.482 734.377 li
560.521 986.121 li
563.978 986.121 li
563.94 732.879 li
540.168 710.551 li
540.168 480.199 li
540.168 458.617 li
512.385 429.8 li
512.385 337.197 li
502.906 326.621 li
479.978 326.621 li
473.174 319.449 li
473.174 265.828 li
463.768 256.421 li
463.855 254.819 463.242 252.671 462.682 251.291 cv
461.281 247.83 459.26 244.721 455.531 244.939 cv
451.799 245.161 448.955 248.364 449.18 252.091 cv
449.4 255.823 452.643 257.845 456.33 258.445 cv
457.893 258.699 459.803 258.984 461.283 258.826 cv
469.715 267.259 li
469.715 320.828 li
cp
f
380.748 353.097 mo
380.758 351.191 382.31 349.648 384.219 349.658 cv
386.129 349.665 387.672 351.216 387.662 353.125 cv
387.654 355.037 386.102 356.576 384.191 356.568 cv
382.279 356.562 380.738 355.009 380.748 353.097 cv
cp
411.49 458.449 mo
511.625 458.449 li
530.641 475.642 li
530.641 635.33 li
526.748 641.162 li
529.623 643.084 li
534.098 636.379 li
534.098 474.105 li
512.955 454.992 li
412.971 454.992 li
393.646 434.707 li
393.646 391.549 li
376.297 375.99 li
376.297 363.171 li
380.844 359.525 li
380.77 359.433 li
382.236 359.48 384.068 359.101 385.57 358.771 cv
389.223 357.964 392.346 355.769 392.359 352.035 cv
392.373 348.296 389.359 345.257 385.621 345.242 cv
381.889 345.23 380.045 348.445 378.832 351.98 cv
378.332 353.437 377.81 355.728 378.047 357.333 cv
372.84 361.513 li
372.84 377.533 li
390.188 393.092 li
390.188 436.091 li
411.49 458.449 li
cp
f
449.588 395.744 mo
447.693 395.961 445.977 394.605 445.752 392.707 cv
445.533 390.812 446.893 389.098 448.791 388.875 cv
449.418 388.801 450.018 388.914 450.559 389.148 cv
450.682 389.338 450.824 389.519 450.988 389.689 cv
451.31 390.021 451.688 390.272 452.088 390.446 cv
452.363 390.875 452.559 391.365 452.623 391.907 cv
452.842 393.804 451.484 395.521 449.588 395.744 cv
cp
453.764 286.699 mo
452.42 285.343 452.426 283.158 453.781 281.81 cv
455.135 280.466 457.324 280.472 458.67 281.826 cv
460.016 283.179 460.008 285.369 458.654 286.716 cv
458.185 287.181 457.615 287.474 457.016 287.617 cv
456.896 287.603 456.781 287.58 456.658 287.58 cv
456.377 287.58 456.107 287.623 455.846 287.685 cv
455.086 287.603 454.346 287.285 453.764 286.699 cv
cp
460.115 291.039 mo
460.115 290.468 459.965 289.941 459.721 289.466 cv
460.248 288.75 460.744 287.986 461.185 287.296 cv
463.195 284.142 463.848 280.38 461.217 277.73 cv
458.582 275.08 454.301 275.062 451.65 277.697 cv
449 280.333 449.975 283.91 451.619 287.267 cv
452.027 288.099 452.643 289.154 453.353 290.074 cv
453.264 290.38 453.201 290.701 453.201 291.039 cv
453.201 346.939 li
453.201 347.324 453.266 347.708 453.391 348.074 cv
458.91 363.968 li
458.91 377.169 li
451.06 384.799 li
450.73 385.12 450.484 385.492 450.309 385.888 cv
449.238 386.14 448.127 386.512 447.156 386.852 cv
443.627 388.091 440.789 390.648 441.223 394.353 cv
441.654 398.066 445.012 400.727 448.723 400.292 cv
452.434 399.857 453.879 396.444 454.66 392.789 cv
454.807 392.103 454.935 391.244 454.994 390.364 cv
455.31 390.208 455.613 390.017 455.879 389.759 cv
464.777 381.115 li
465.447 380.463 465.826 379.57 465.826 378.632 cv
465.826 363.388 li
465.826 363 465.762 362.617 465.635 362.253 cv
460.115 346.355 li
460.115 291.039 li
cp
f
524.264 656.607 mo
518.98 656.607 514.697 652.326 514.697 647.041 cv
514.697 641.76 518.98 637.475 524.264 637.475 cv
529.547 637.475 533.828 641.76 533.828 647.041 cv
533.828 652.326 529.547 656.607 524.264 656.607 cv
cp
1 1 1 rgb
f
492.18 427.173 mo
486.9 427.173 482.615 422.888 482.615 417.607 cv
482.615 412.323 486.9 408.042 492.18 408.042 cv
497.465 408.042 501.748 412.323 501.748 417.607 cv
501.748 422.888 497.465 427.173 492.18 427.173 cv
cp
f
528.185 368.33 mo
522.902 368.33 518.619 364.044 518.619 358.763 cv
518.619 353.48 522.902 349.199 528.185 349.199 cv
533.469 349.199 537.752 353.48 537.752 358.763 cv
537.752 364.044 533.469 368.33 528.185 368.33 cv
cp
f
493.92 356.013 mo
488.637 356.013 484.353 351.73 484.353 346.447 cv
484.353 341.165 488.637 336.88 493.92 336.88 cv
499.201 336.88 503.486 341.165 503.486 346.447 cv
503.486 351.73 499.201 356.013 493.92 356.013 cv
cp
f
451.346 447.7 mo
446.063 447.7 441.779 443.418 441.779 438.134 cv
441.779 432.853 446.063 428.568 451.346 428.568 cv
456.629 428.568 460.914 432.853 460.914 438.134 cv
460.914 443.418 456.629 447.7 451.346 447.7 cv
cp
f
409.205 418.742 mo
403.922 418.742 399.639 414.46 399.639 409.176 cv
399.639 403.894 403.922 399.61 409.205 399.61 cv
414.488 399.61 418.771 403.894 418.771 409.176 cv
418.771 414.46 414.488 418.742 409.205 418.742 cv
cp
f
460.914 361.904 mo
455.631 361.904 451.346 357.623 451.346 352.339 cv
451.346 347.058 455.631 342.773 460.914 342.773 cv
466.195 342.773 470.478 347.058 470.478 352.339 cv
470.478 357.623 466.195 361.904 460.914 361.904 cv
cp
f
430.482 322.572 mo
425.197 322.572 420.916 318.29 420.916 313.007 cv
420.916 307.726 425.197 303.439 430.482 303.439 cv
435.762 303.439 440.047 307.726 440.047 313.007 cv
440.047 318.29 435.762 322.572 430.482 322.572 cv
cp
f
398.254 334.402 mo
392.975 334.402 388.689 330.121 388.689 324.835 cv
388.689 319.554 392.975 315.269 398.254 315.269 cv
403.539 315.269 407.82 319.554 407.82 324.835 cv
407.82 330.121 403.539 334.402 398.254 334.402 cv
cp
f
425.053 375.951 mo
419.771 375.951 415.486 371.669 415.486 366.386 cv
415.486 361.105 419.771 356.82 425.053 356.82 cv
430.336 356.82 434.617 361.105 434.617 366.386 cv
434.617 371.669 430.336 375.951 425.053 375.951 cv
cp
f
686.517 910.256 mo
686.55 912.166 685.028 913.738 683.118 913.775 cv
681.21 913.807 679.634 912.285 679.602 910.377 cv
679.569 908.469 681.089 906.894 682.999 906.859 cv
684.909 906.826 686.481 908.346 686.517 910.256 cv
cp
798.581 668.766 mo
797.253 667.393 797.292 665.203 798.667 663.877 cv
800.042 662.551 802.229 662.588 803.556 663.961 cv
804.882 665.334 804.843 667.523 803.472 668.85 cv
802.097 670.178 799.907 670.139 798.581 668.766 cv
cp
691.071 903.711 mo
707.155 888.496 li
707.042 871.289 li
747.757 831.303 li
747.757 755.359 li
802.216 702.195 li
802.216 673.898 li
803.579 673.072 804.942 671.065 805.993 669.465 cv
808.048 666.346 808.757 662.588 806.161 659.898 cv
803.563 657.215 799.282 657.141 796.595 659.732 cv
793.907 662.33 794.831 665.922 796.427 669.297 cv
796.94 670.381 797.798 671.842 798.759 672.902 cv
798.759 700.736 li
744.3 753.9 li
744.3 829.871 li
703.696 870.094 li
703.696 887.006 li
688.245 901.623 li
688.245 901.623 685.13 902.309 683.571 902.69 cv
679.942 903.57 676.862 905.836 676.927 909.572 cv
676.993 913.307 680.073 916.281 683.808 916.217 cv
687.546 916.148 689.319 912.894 690.454 909.336 cv
690.948 907.785 691.442 905.31 691.071 903.711 cv
cp
0 .862745 1 rgb
f
790.479 643.012 mo
788.608 643.398 786.778 642.195 786.392 640.328 cv
786.005 638.455 787.208 636.627 789.077 636.24 cv
790.948 635.854 792.778 637.055 793.163 638.926 cv
793.55 640.795 792.349 642.625 790.479 643.012 cv
cp
697.513 878.656 mo
698.839 880.031 698.802 882.221 697.429 883.545 cv
696.054 884.873 693.864 884.836 692.538 883.461 cv
691.212 882.086 691.249 879.898 692.622 878.572 cv
693.997 877.246 696.185 877.285 697.513 878.656 cv
cp
789.54 631.633 mo
785.882 632.389 784.743 635.918 784.286 639.625 cv
784.153 640.713 784.097 642.221 784.274 643.549 cv
784.063 643.549 li
784.063 700.75 li
735.655 749.158 li
735.655 828.123 li
693 869.039 li
693.001 873.861 li
693.001 873.861 691.028 876.545 690.101 877.957 cv
688.048 881.076 687.339 884.834 689.931 887.523 cv
692.53 890.209 696.811 890.283 699.497 887.688 cv
702.186 885.094 701.263 881.5 699.667 878.123 cv
699.001 876.717 697.761 874.68 696.458 873.703 cv
696.426 870.623 li
739.112 829.789 li
739.112 750.59 li
787.521 702.182 li
787.521 646.543 li
789.007 646.328 790.813 645.545 792.282 644.881 cv
795.686 643.342 798.294 640.545 797.536 636.887 cv
796.778 633.227 793.2 630.877 789.54 631.633 cv
cp
f
739.927 717.256 mo
739.927 708.324 li
743.384 708.324 li
743.384 717.256 li
739.927 717.256 li
cp
f
762.097 654.906 mo
763.47 653.578 765.661 653.615 766.985 654.988 cv
768.311 656.363 768.274 658.553 766.901 659.879 cv
765.526 661.203 763.339 661.168 762.013 659.795 cv
760.683 658.42 760.722 656.231 762.097 654.906 cv
cp
759.858 660.326 mo
760.38 661.428 761.255 662.916 762.235 663.981 cv
762.2 663.981 li
762.2 672.914 li
765.659 672.914 li
765.659 664.918 li
767.017 664.086 768.376 662.088 769.423 660.494 cv
771.477 657.373 772.186 653.617 769.591 650.928 cv
766.995 648.244 762.712 648.168 760.024 650.762 cv
757.339 653.359 758.261 656.949 759.858 660.326 cv
cp
f
751.731 724.359 mo
751.731 719.106 747.476 714.85 742.224 714.85 cv
736.97 714.85 732.714 719.106 732.714 724.359 cv
732.714 729.611 736.97 733.867 742.224 733.867 cv
747.476 733.867 751.731 729.611 751.731 724.359 cv
1 1 1 rgb
f
750.782 701.898 mo
750.782 696.646 746.526 692.391 741.274 692.391 cv
736.022 692.391 731.765 696.646 731.765 701.898 cv
731.765 707.148 736.022 711.406 741.274 711.406 cv
746.526 711.406 750.782 707.148 750.782 701.898 cv
f
774.007 680.016 mo
774.007 674.764 769.749 670.508 764.499 670.508 cv
759.247 670.508 754.989 674.764 754.989 680.016 cv
754.989 685.268 759.247 689.525 764.499 689.525 cv
769.749 689.525 774.007 685.268 774.007 680.016 cv
f
532.108 799.711 mo
531.262 801.42 529.186 802.119 527.477 801.271 cv
525.764 800.424 525.068 798.346 525.916 796.639 cv
526.762 794.928 528.837 794.227 530.551 795.076 cv
532.261 795.926 532.96 798 532.108 799.711 cv
cp
533.342 803.35 mo
533.851 802.115 534.179 800.648 534.326 799.566 cv
534.825 795.865 534.617 792.162 531.271 790.502 cv
527.921 788.84 523.862 790.209 522.203 793.557 cv
520.544 796.904 522.354 800.268 525.26 802.623 cv
526.925 803.971 529.112 805.685 530.737 805.781 cv
533.814 811.313 li
562.4 824.906 li
562.4 821.074 li
536.297 808.662 li
533.342 803.35 li
cp
0 .862745 1 rgb
f
496.665 795.549 mo
495.818 797.26 493.742 797.961 492.033 797.113 cv
490.319 796.262 489.622 794.185 490.471 792.477 cv
491.32 790.768 493.395 790.066 495.105 790.916 cv
496.815 791.764 497.518 793.84 496.665 795.549 cv
cp
497.217 800.492 mo
498.125 799.156 498.676 796.914 498.882 795.408 cv
499.381 791.705 499.171 788 495.826 786.34 cv
492.476 784.68 488.42 786.047 486.755 789.394 cv
485.101 792.744 486.91 796.107 489.816 798.461 cv
490.935 799.369 492.291 800.434 493.554 801.068 cv
496.807 806.676 li
562.4 837.83 li
562.4 834 li
499.259 804.01 li
497.217 800.492 li
cp
f
515.087 799.025 mo
514.24 800.734 512.164 801.438 510.454 800.586 cv
508.744 799.738 508.048 797.662 508.894 795.953 cv
509.74 794.242 511.815 793.541 513.526 794.391 cv
515.236 795.24 515.937 797.315 515.087 799.025 cv
cp
515.748 803.789 mo
516.59 802.438 517.106 800.326 517.302 798.883 cv
517.801 795.182 517.595 791.477 514.248 789.816 cv
510.901 788.156 506.838 789.523 505.179 792.871 cv
503.52 796.219 505.334 799.586 508.235 801.935 cv
509.438 802.91 510.915 804.08 512.256 804.691 cv
515.647 810.35 li
562.4 832.566 li
562.4 828.736 li
518.076 807.674 li
515.748 803.789 li
cp
f
550.938 801.769 mo
550.095 803.481 548.017 804.178 546.307 803.332 cv
544.596 802.481 543.899 800.406 544.747 798.697 cv
545.595 796.988 547.669 796.285 549.381 797.135 cv
551.09 797.981 551.792 800.059 550.938 801.769 cv
cp
555.206 809.021 mo
552.474 804.678 li
552.436 804.701 li
552.793 803.639 553.039 802.508 553.157 801.625 cv
553.651 797.922 553.446 794.221 550.101 792.56 cv
546.752 790.898 542.695 792.268 541.035 795.617 cv
539.375 798.961 541.187 802.324 544.09 804.68 cv
546.021 806.246 548.661 808.313 550.302 807.76 cv
550.309 807.76 550.315 807.752 550.324 807.748 cv
552.815 811.715 li
562.4 816.287 li
562.4 812.453 li
555.206 809.021 li
cp
f
417.156 562.002 mo
415.246 562.002 413.697 560.456 413.697 558.545 cv
413.697 556.635 415.246 555.086 417.156 555.086 cv
419.064 555.086 420.613 556.635 420.613 558.545 cv
420.613 560.456 419.064 562.002 417.156 562.002 cv
cp
498.969 547.608 mo
468.535 547.608 li
458.594 537.667 li
435.1 537.667 li
420.996 552.366 li
419.426 552.25 417.387 552.713 416.045 553.169 cv
412.504 554.364 409.279 556.196 409.279 559.93 cv
409.279 563.669 412.307 566.696 416.045 566.696 cv
419.779 566.696 421.992 563.577 422.81 559.93 cv
423.174 558.307 423.584 556.311 423.459 554.794 cv
436.574 541.123 li
457.162 541.123 li
467.103 551.065 li
497.527 551.065 li
533.828 590.582 li
533.828 585.557 li
498.969 547.608 li
cp
f
451.123 563.479 mo
449.771 564.827 447.584 564.827 446.232 563.479 cv
444.881 562.127 444.881 559.938 446.232 558.59 cv
447.584 557.239 449.771 557.239 451.123 558.59 cv
452.473 559.938 452.473 562.127 451.123 563.479 cv
cp
455.863 559.278 mo
455.863 559.479 li
454.85 558.25 453 557.09 451.693 556.446 cv
448.342 554.79 444.77 553.803 442.125 556.446 cv
439.482 559.086 439.482 563.37 442.129 566.01 cv
444.77 568.652 448.535 568.01 451.693 566.01 cv
453.141 565.094 454.92 563.936 455.887 562.737 cv
491.063 562.737 li
533.828 607.156 li
533.828 602.24 li
492.465 559.278 li
455.863 559.278 li
cp
f
387.117 594.396 mo
385.207 594.396 383.658 592.85 383.658 590.94 cv
383.658 589.031 385.207 587.482 387.117 587.482 cv
389.025 587.482 390.574 589.031 390.574 590.94 cv
390.574 592.85 389.025 594.396 387.117 594.396 cv
cp
465.223 553.659 mo
456.578 545.014 li
439.619 545.014 li
429.785 554.206 li
429.785 569.896 li
423.781 577.215 li
400.555 577.215 li
392.418 585.16 li
390.973 584.301 387.84 584.941 386.004 585.563 cv
382.465 586.76 379.24 588.59 379.24 592.324 cv
379.24 596.06 382.27 599.09 386.004 599.09 cv
389.742 599.09 391.951 595.973 392.77 592.324 cv
393 591.303 393.244 590.131 393.369 589.021 cv
393.389 589.041 li
401.965 580.672 li
425.416 580.672 li
433.244 571.135 li
433.244 555.706 li
440.984 548.473 li
455.146 548.473 li
463.791 557.116 li
495.225 557.116 li
533.828 598.447 li
533.828 593.463 li
496.65 553.659 li
465.223 553.659 li
cp
f
417.461 595.824 mo
415.551 595.824 414.002 594.277 414.002 592.365 cv
414.002 590.455 415.551 588.908 417.461 588.908 cv
419.373 588.908 420.918 590.455 420.918 592.365 cv
420.918 594.277 419.373 595.824 417.461 595.824 cv
cp
477.045 564.897 mo
467.115 574.826 li
438.168 574.394 li
428.363 583.975 li
422.684 586.533 li
421.203 585.748 418.146 586.381 416.35 586.99 cv
412.81 588.185 409.584 590.016 409.584 593.752 cv
409.584 597.488 412.613 600.518 416.35 600.518 cv
420.084 600.518 422.295 597.398 423.115 593.752 cv
423.389 592.539 423.693 591.111 423.779 589.832 cv
430.342 586.879 li
439.555 577.873 li
468.527 578.307 li
478.477 568.356 li
488.035 568.356 li
533.828 615.682 li
533.828 610.769 li
489.443 564.897 li
477.045 564.897 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.1.0
%%For: (user) ()
%%Title: (set_malenkih_plat_3.eps)
%%CreationDate: 5/9/2016 5:18 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6kuo#tdPh%%I]dJ36/KG.>l+TT7RCKm@tOe$moW*aaCqoGme6R'O8Xtu,&<<?5e4qB,[/YQ4X)BMN'/C1n(fM&qTWcWH!5%_
%[@G]d9=gg23Vo)6e,Jrgp[12Jm02=(b%Q&p1Se9T<TuGoAoG0-WW_/GHE5ofFI.(75Kh=,X7@]f.H`ktom5rM>d7V<S5YuqQ@6,C
%Ws>,r:8?Uf3I-U8jq1[DgSJ*'!.H`Z4kaW^BKt_RBIM@gpUg1$R-YI'_`r47p4Cas\(<)'C9?WbGn_iH3R[PKcn<KHC2>o.dm%pG
%0in]Wb5HW^qTQpTk\"ftLF*dW4)I6o>g&h$FT+d/s2\QY(BMC&Q?<$`/iNP6^Q"bOZ_X5Lh%KQ<Uk#6%/=SgBWe*F_!?cGG8?C`8
%ctM%S]mr&cTma4f9CdSS5Jk:E#@,X*N4_U>e-mqtq`2uHo9M[l]7+'F<T/1pK0O+eT?Fe.6+InUe92Tg^&?Z7C"jg?;'5N.oq:ob
%=mOJX3=PLj04)&d6(Q0=%;aV=]Xs#Wo"S1]K6$-3kRg_$l@!KfEmBShH/3CTQ[]3)4C**8dghfOX`lnW--+JK'n+EPBmJO=Bn5j)
%0kai5m_e^<\fQ%:ql1Q(.qg/Dh8L`.&iT0"C8\K%ZJj9Dq7`U8oi\1nNUbLUEh<2eS'HA;s7tXRe8T-m]jB%oa0-FPl`Up<YN9-Y
%U[*nOFhQ>@5'6=-O`8!*A5I38Witq7r/I0/\(+_#E:g_1'l$H"r1F"9/`449h0P\W53oTPmB,MBlTbD.=/`QfK,b?$'BJ6?Hu=uE
%%0&P!Y-mGrW)&XH6ln90d#I006+tfD1b@ao[('<n2p7a3Iu##uY5LXnau$618JDSZmk_@CHeT#[4`5ts%(1RVJ]+H;?+m#-XU^Ic
%27IZ)Sc59/R(_Sk3op]c$N@3[qoll[SUBp.E(Q8L?G@<CDsk>f7b.4ejU1BWX^7niLrS^;U<id1VfnSEAD=NSaQ+1=me$KpFj;_G
%C/Bp.GEt_mc\#QcCq*UOrEgK"/bdO]TENMS2qfSR1WBE&Ktt"$\6c$I47/9eB=1@7f]dV+EX/^I4_d.AHdl!b)h13!N76toS`W[G
%jtk_l.PTX$YtM&P_7`:FdX%XKe'q%#0H8O\;<7sTimKUZJ!LE([qj$POE(;5j1&*mFW43D8]WM]:9@D)p4%745pibF?fAhtXjQ()
%BUok4QWEA)HXVAI\1@LFYZ@T+hsZgLmI7;1g^\[\;JQn`bjG.?]c\Zk<hg+P2n+9;D?mhu@EJJX8c+=>Cf6-C/R9f4F\P'f^O&FT
%Xp;)n;=lrZ9Rja*[JcO.,5tlJ<M8664$TqD[$$pUX&3f`a!FnXRQ2r0EPk3p=QjkL_dt<1[<f4o1qA:%HaH5i1AZfVomUB(oPmX<
%2kPH(:JE`C#E/LWY4kqa^Fgq_/2s@-\sC`;l4e\ZR)72>9gRC:9]AhjIYN]XEg&YSZ_2Jff#ob:Yi*$gdphDj@38i>[hC*4[Y6J1
%E1lj5Am*bI.b*3cjWj`hl.)dOAq`R0fg\)<4L*N,*0W,3X9;V.L"*\S258+2_]eW?IJ$R"bM?R4'E%(Cbd6f^U%764>dLiqX-(8A
%o`Vm3%_e#UA3!J4>a$tHSlN,SfW"McIq5!IZLGBd"S0-M>+M>@Y@it.@DRoHk+XTrQ]:fUNZT6G`AA3;^3o%_Z74/JYF9"&*O)Rg
%_kt@@-QC6Dc&3ud5aJ+n\0eN=l?=_o1N>EcR8KgfNLaD.#4&QpQ@W;DBb[Xo>s3^.V;NW.1,J#=@L=niDUKjf1Z]t4Pd=u!ge"D;
%l>HQCX4FsE``r]]I:gYsSh6:[*+u_8ba+aOE\gp;B$:.rD7LtQ#$>s"-8FcYS9:%^\P/3T)LIJqSRV(Y:u=Jf='L1"Nik\L_rfkF
%'ebcN0m@up;Xd29K6T0i!m0H^Rb)PmJ!$Oq@]fH/\_lf*b0AqbZ^YdE3<QimZUh.^(r]L@3Fku+WajNtZB<2GF0F0:8N5j=64Hje
%lT75<WMK)GF;@:9<VSJoT4\tp/H^%UB0D/k:mDuhJu<1I8is!DlfHF3?gUlMBP,)ld4/Xq@.sDu\!l,Zq3U4[<uKWf1;rF!qjipk
%-.oDcZXMo[nJP.&T;DWWg$)js;Z?_aT/:GsA8>?QShoW&$=1h3N=#>Z//d-<n_Xc(q!ZjXN87O:g"Xg7MHIO*@I,MtYc[PPWDn1]
%gl]B*3]\VeA0A3dR>K")nY9GQjd7k7O?mkM2`#7S$;IbqJ"DABcc8T?)8u.B7IqLdK0It0\B#7>0F)B@F!u6I]sC2TbAn(S<Kckg
%,g!tt`G7Rh+-Z/ma12Ri_XW+Zr(3*S^Z+LKQC*\660C)?8ku4kPF^'<k'gS$-tZ=?^Wh%IDu*aPR6jLmgi94WZQPluAi&itT7>+^
%NV->Q?L.g2Ikr'7hXicS4eL]qF/N9Fos="(=E%N7>HK&Ih[QnJDcWf>L,o/PPAF.[o"4_<[HX0_:AYHF%PoLE'53-Ef\"-KZ(&PA
%Y3?;EUs<Pk]`'(tmKUVIB"BoZl/\DoghV6"HORA?Y)C)n3"#?`?B!3`=d)VH=r**;G.W7pDYIcLgmu%2rPr'BQ`1QZ)(%-kJnN4>
%'^TBjoiOF/2k**]5H&WEr@E^H,?;a;C5!'$,/6=Vd441FhaMNo8Ih?bG/BWM-"LEkP92/n,?1;q$tqL]dO)kBVFB4'C>F'H>RBm:
%c)Yl3.Rd+-9[.-.3h-OM-[l^Y2tBlhpj)Ocq.CIs1b:W6'K,DC/qZr:H?e3^&e&(_O->pQ/n5NXc/1;D`M?F&QHQs?RI;AQF's<m
%5/UoKH?dS(`\<qsI\JDe"B'Yq)k)>R&lXZKJ'AY:Ec+8+a#1tbXVm?ZKP-K/>/>iV).jX#*S7*UX_%b_/6=>"7fSXHqgn-,'HYl5
%3WY]h).lpOf'jYhQ?bnfa/64NUgthnqnZtn+g&nHCFXL^WDp2LJW`pkRRXjeBDH1pWK>'cPrfjpZ]ptf%I0b<C1NGu>\n3nQGHI;
%A[0]gA%!r2buu>*k?Ya'&_qoTCeNV9&nN6q[)u+#7*.3PBlRM(,#K]/5FVtc-Cr_#Ns7*"Gj7UmZ6TI@\lb3>9o;B]17;hg4gS7T
%P^St=UARs]b?u5^8M!I\VD.hN-oXKgWSF:OPUr#d(25R_7@>i6kDB8(Ri.-IM4u>ga5*OnPUr#d(*5F%Ypc%6@a_79VT,?0DGi#X
%QH;f.ec3onRV@_[ag@DL^bs-BQd_Kf02mPUCaZ)53Q:W,`3kV7S0PO@q$RR77jZFeF#4(3_k\kR(6?ioe'HY[QJK'kQ[^a5b`&b(
%$=@jdHnE5KbkTnNYKcjr<:I;T%RF^lg<EOI!c7.\X3J0.^RM:KPdMI,XNe9/N2uoX\Q\Plk\(CfgQT&k)4'314d)A9"2GclrAkh,
%1G[+W">_g%OjO0SfNQSG&ATZWhTHVNQRFpJD<tX$[*W^XYFrU60E4-Q_k"h>_rXY?BO-u]@bR!Se=+qGUt33RiQZqXY'*Y0PqjXt
%8<b.He?37-e";l%gI>A8X/@mL8i'+4F$6k@5tPe_/9@4jV&@J-jRa0SbNUq`>KbFo<p2L@rsF1q?-fp?nQ@!LP4<,3<25rUVVaUG
%k`.#S2q(.S;\R*AD*%^:0`Ee0'`[k_Q\iIdSWRA.SNg1ZNHV?qVX%"W,!PZao!<<kK(X)+;oo1upkd9L$DC%/"q$>amE@8>/@9ji
%7T.RjF?RBPSca&\-[Q=>Sa?m1_&B(KeuA>f)F6$7"IVU@Qs&OCGhMk-6=m0-j>A5j]FdJN)@n$@EGqa%(he*ADg)+A49(kqoA;8J
%*h5&lSt5o,c@75%r-.i_amAqLG5aQbruIKI%6XZ%m1C_]L:37BPFS3>:8e8._Ykde1Z-lRn*J9mQXse6a]U\cl$%dQ<g/2.1CK5&
%e/4ZeOHjeY1F<GN-p=_9r=%uaet6#>X^4(PlVW50$IXfDR,)_8Z"XXb=F%Z&6:uOSI2a_$iOj*W-*8B[)^LY'cY2GaM``gP&(qd[
%A1#kkF-Fl(A2?0tbY8j&_m@C1-e1p<)Z@fm-O?.kUa63q,eIfhXd)+cXa8>uklfP%<i=`cn6C>&59!,8SIFB!TMBuJoJ\)=Nf?PR
%)<OotDlqFU?1`a.!<3O%NnI-*Wj*dX)d:]m@oH!/BP]3lD(<q>cXNKTK*pifSW1D<V!V]5)N@c8)\HVRJT/!2i"[351-S_*+uAp>
%G`OW=kKJ?2[V:D:0\3iXPK$R7NgH0oA`e6*3F6<XQ^QlFk'6\L,o,2dicn=,)"t_g*%qtAJ^,5g^Z'JUT:U.Gid<)mJ[DV>VlBA4
%h9\P'2s2[X0:D#[LVl)3drZt,aH@ZRdZ[C9RDYgJS&gaHA!Urj+#'s;C9i]_&U'?k*O"u^O"ona^"m_r_DA9]E1C=54R'_&QAK<&
%*,!.YpR5;"0-IS/Pc9e)ZOBMd.g+6Rm-?5"dOb:D\BskTPG`*oXB]W@3I@RaVVTD@OEG;].t;#-JuQN1T&HBaC5/'I\^7i_/'Anb
%Ookf-phS="A)b%#lf=i\oKWkVTULuh:E.RIn/VIf2Se5'h4&*e9\ReIeAnk-(>=bSd$AeNhUNI37:)$P>\BNo(<(!HHBW5\)(+ld
%XdU\j:6cdQABZTg3=E+rUdYI-VF^[/r"ubNb;[Y+iQV3:;e4?N]cY/(!IftYF-ubX-J$V92O^960kPln8_]Z$+(OHRQkDX'^W/\,
%Pqtjjh/rP\Uf4Ggb4XAg>*cC/WH[HM7*Ud(8sS9Rbqkq^c$Y9D294frYh9>3oRga%M]FKNIU$r0[e>'U?KEC2gOM#<EX0!uVAn%f
%V8kI(/8:lJrPf=Eh&i%sPq5$UP02_)R[Q(Z=XJ4=g&<PM:aSRNH_R2b*.F2d-tR"s4@@`?3Gr;tTil9)MhUhKF7Wp?KMOY27M[_t
%`Psj#%$+?[>$:3m<bB>2HCQ%kOuDO8*'X],c>gToEcF.2K!Xek=UadS?=1ld-;98sp=CpBboEPtR/+Fp&,44%Kh2gKdV_se=/O*`
%K"VdlLP[u_L_Z&IMt/S"M`aYGX44Fh4&4/ng<:9rQ*0ljTgr&EM$J=^]VqBh/N:#t`_SHJCMmb/c)eHI2h5Mkgru5aB<8WPCB%#;
%k&+ROR$Q'[>%)$g9qFA3@G>DVgru:XR<(0*DJ%2mX3J1$r<=*\fd8H<-CoRK9Y*o]R@//\B$q^.>1M(s3K%"Sl1Wn,HaFoJ9e]5]
%0`ER=))'?4aYRm7T3#Kf+*3`L@LD^!N,`ksLO&ii"<$6>7b:4oP:+tKO6boMq+=CIX`h6Qlht)6jP'"pIb(iMWE$KKiEaHijemin
%1<sN9aCl6C2jI?aj1Lk20Cd<*4#sV[bY1)8,?O2OU;uqr`S5;.H[4lob4Sf!ht,-&,n/BB(W'a4JSMqtcD9S2PTJGXr]JAGH,$MR
%4(#RX2^Tn2>[^n/b7I7nm<;=JPp#D$%2PQRYlE0/1-\Dn20(/C6b>;4iU(/H`tQteYDho.7+ni%!&F^=.K?m.k[uqUMb9"F50ThC
%OH\k=e>H3(FbK-ua+0*"3=od(gI_`HV`'lmI`$q>2u[R$RR&9KDR@Oh.s0`XImIE^XYNiBAua\%:pp1s8!U8.c>q@#l:`Xq%]*j9
%'E.WUlmmN=eOn5KF5c#`!9IRN3\qX7F*@T>XiV^,cS%m_P2$H[)Ad^2R6qaI59D,dB<^C@0.Jb3#CWoPiM-+)JN6imRmX_bl^]nb
%9W@ug8j[-6kYAj6]P0[Qoic:C>eA?91D>c^b`jJ\3+eSrU^P3oJn68KB>X221:JT:5\:f\1YFbdZ>gdGaKrnk-WTEA*o8V7qf/a5
%QqE=IJN8*qeuRf:"LG2J9j^Aa)u8(>Q-"BM=D+,o`'fS?24#I\_c6,E4f>9/dXFWHX(TU?ZVX_*E#L-?ie>r>Wnk?6U1oLq"CL>;
%FW%;U2Oh3Zg<iVhnT"Ldil4PW;kG:E.>(AZnOYL%DF0YJlgllkANDpQd!aPd;Z@FYRCI7AFajYRVVmEo(\H%1B*gOi^]kh7aDAZ@
%*CTC4HSb2jVIt0LG:N:Mj@3^j9fQuh2"_4K9k2iE:P-l(XYWHHa/&*AYC)jOGGi;>C#h&Ep3FODZFV+_8roC0D"a?`]r>Ne2[RUs
%DGJC2F>S>&6aLd-R==aq=`LOZ+`--\O2+&Zh!CVCGtDEGEW3tg5(<=%_8L[`ISK@&$9_QNBtTo,bk7+,3umflW7PYtcJQUm=bu24
%KNMR0#_):UUjIeI>s$bR<hm]s(hNkloX`T.V,fQEc'!YpK@=![q;jj@pU\W,4ScEin'f$qpgFpV:ncT(%W]N`^O)8n<Gn*uK2-<^
%;l)3Toe@h$f?<i5m8W/=.XKHVeK<2Rqj"LPc]@40Gr6_5`8GU;@;6U;%l:_/K_$0EU`95=:#l7"rqZNQpZ5VQe([A^n1N,Kb@^(d
%-N=7DSGP_L:aWXEKi$qiTaB37I]_###>lWr[tB0a@8?U\I2S,0qH)O^4id,6oYWCXSZK]@jVaYF+0KB^Y!G9odktq\57H@kI/[PY
%IdVUbc%M3Xmsj?#(\I#T_>^7lah>iFqP*)Os.PL#+;*nL8d"-&EM.:aT7&7e@]EM5fl">AoQl'^DYKN2j(TDBflAnY"1<6qE\KZ6
%nhnZi6_4+]7h'Qe*HiFOiaEVks,.%$r:$?YgT@8'hV9:;Q;X?]G0;c;*c&<!oY9Bq:"A,Q`j:ZeoP:D19k,50LX@E5,(C7>M:qC=
%rL])0<ZOp5In:tD"ML`=2<[r=dVk5d;C_ES61,aV$3@qCr&Glt$':7X.A&8Z?;rnI?iO(]^T!QX`6>oi9@\]B7s"Eoh4m3WSaOXc
%3W^&9LF[60BJeP]5Grt0Nb_A%5B_1B-^CMSh%+h8Gtg%F=0hV\6qk&BC0n##;Rq+SEZSJRgPJE5(B'dpn\6`qV4-&MUMP9_K9I_t
%ARsKMZ#BWF1POpTZEj_!SI?da4=gAJYLT!?p33Ve]%el)bC^3L7["ikrs?9i^H)A\T,u>',3A77T+cb4;o$MeoigJ>Yjj$kp1[7p
%Jo^gq:!^9,'>h&A4P)NpSC<bNc9-]N'/Crk0g5-N3G!M_Qq%`Q5!1E<bOuQ'%jUT[nH@&gpSc_Z>rK%L<faVGmGOeLe#AmEm:GCq
%N)lAa7=mOq30sA'k/ksq8AIs<3#Y)d>U:-N2[m_+T*KG8Wr+-1E%Y"V6!?gd`Hi(pJW&t0NGE9NKe6TV7K+-%SGMX.G.DnP0:rHZ
%h,_/F%e4V-2GGc>UY;m4<@LRl.]n"EmR]sN;=:"d_ohXU8-#M#%_,fI<eoqGgMZ]D\JDVoKmp4jgFIJp6)XG6@(9L6<k'9_>.7Kb
%pOXBaL?nn:V/=+*]P&>`>e/<FDO!<6*9VUn)-">"7Eajg15T66?LG2LMO#_hf$CbIm@][/ef+L5*46^V,o#V&,emXQi;,Pn<3&pe
%rrthM4ZYi.^p.b*^3CE>XqR5i<u*sd";1W>\N7K)p_O-s=EPp;<7qgWf?;E'b2*#I2+h]1DC=WPSNh_]61@r/[o':#b/^o9XnQmi
%o$WVLPI@G,1hk:GSR*r-dtpU&j*h_bcQWMQXj-5:KP:>&/e:q6l1`nb.9W]*fcINS8ZK29O3d*nj)TQ$B_UiKMsB^rc4877=sfu7
%DY]>38V*XrVM$%f1f.^3Fog2KNqS;Tjo0"q)I13,L;_ep:k)g>d?7Ea6"d7Jjj3080Ij]jWg)i%L4Rdp&dOd+\fP<J=E_*Gf^Liu
%1@QEq*W-N!6S>E$GqGZ4c$*LHg?dGW+^Veh3`okfR_fE%ge!/Pj^t]^UCPH&P_*)5+RtA9XVp32]h[lUaBH/FfGpW:(N%YSNNO;K
%Rf<s^,L1935/6Vh0,=YVP[st8.%JrIj:FA2Z:f[D?(t.^]J<hF+/-AYST[PXXZqD4)s79(9sdg%[>>4*bOHD=Mc3gOYfba!3C_\u
%'4O(\rCUO?Z!9<X\+fbI-ag]A_tmHro0CI<PU/+]'\]Q";?c_!j7K^EhKFP1EiD4i"cZ]l]$m`NXi8L-;2k4Ier!b7<2.h+<.eom
%H0$*\DY44KLNpR.)cfd_FfY.Y7D>@XA'J&ePIXk\2bM&Ya;02M'i\uI7Y7C`R3,hE7ZPF\($meD=HN'GVue@s(>;?-itg6t2X:]e
%p'/lUV!O,9V>UcNDkP`K9QI;,@!sFJD#D[BTo%b_9am9B)('nX&[\gTrsK3edT<Q0[!BdABHr5[fB+QAMeDT/2JF4\D]S".\PC;l
%l*1(&/k_o\$JH5k3lJHgh4V`L#D4Ni>dSiaCEM#kS6o-RGGSQJO6k%\5m0=rAo^n(iTq4A2PlpoIU9CA\!e\H>XDt\mTp59lIl4M
%UJs]F<)!iIi`4`[d8h7=HAs[^r1NVD[OU[n`d.P#qF'Z1,iA%p`-PP!8>)^H_2E)c4WQ#6(RB!(46PF^ncM/kC&8;)$[<O%1m^+c
%DQfY88mArc&K7OUMrLaA_Gn.CCqJCD<N=p"5)OOVb#[VK,VGLnV<rFrQ+LiWWK?C('Ulb,2c=jPMC+lrSu(Uun"PsI*hd[lTMi0%
%O^PmuqFt'IY@#qm'^iB_M32OSPjTedEVY-]r#h.7NY/NsF2pLdV%.3ASI:Mgop[BW`;i47YM[<qY$O2(XJN)A?e*qN\IgCN@Vi;U
%_6'b([s$J!Z[#Jpk-8qr?.pWlCn9)@=,@8m_d-\L=#0Ndr>;)G]p!BQ2U4`[.]k%7HOl^*bN=AMOX<LPWcEPkiD)8flI8@%.hC?i
%W?k>2hOh2:ruKO%LPrFoQ=;_3G'oan*!937n2QfS;gL14NZ#6JA\gU6Qta%XY#g'Y_Q9P0V:iNrQ`3fb<f^7ZMe>U#<\Lp</;G^"
%f`YDX"`/Bib*5c)MbpQL&X\I_o1fk:-"RDCHaR0R6@$J_:neT;LCQ)XM_:.^<u%`W>4&B55hE#uH?</t:*OfKb'r<J3%fE(60Upt
%R]B*UP4Q8bE)P1r:hLCca\Y#>8VY+(OegCP8[Fbef!""\;Q/D3Bf.PTI43_7+%J/%VX7ENVAm-[;E(sUqBo7nbKD_pdkZ:kQ^<:E
%96tFK$62Au&j=Ji>-$t&Y8g7jS^10LmTGsZR,G:#6E-U_s%&?n([k49HUGd-1uA764$Vr@M-]mD`B'c_]mW2odug@@'NF'HiPnL-
%\%&)Ua0$g_!q5\diKPi'g;t.qCpbd[E?$UY]kmSV7(&Z3+#6gc$4VZik\^T]_8T1Gc,sV=,))8jTf_P%(b&[,2P[UF98["h5?&Om
%/Sa]jIQsGd%$#Dp/Md:*\^,?oLHE,?kAu+i(YNL3dd*(M?^a;QKj\oNR[7G#[j:sp9&o*2$<UQ=eN8Zt^-QhS&=-*1oLTRO*W+T7
%COZN\h4Sg%`2:;?3%#8udBcTY$EYs_DH>:Z__@K)GY;.S)t&;E7r%SYa%.dF;+H!8)7g`gPc^k)#=%9dCmUV9%"?hh?/V?e`3,i@
%KjlY+;\\rW\$eE2'N>W*J?RPQSbo#p<Y$9:==M!lHstmh=XpRsSi+fZ:Reh"Cu/?cHa$g,kIYr/\'I"'43MDXT07I24^HqDr8?+/
%VdFF&2iLhp4l*F3BNhn;]l^iah-F7\RX_iU]%HGRF^H&JW112[m9?-ce;IZ'o_G!D[8ea0?`uVA;CU`!%o,Xkg9,mt%c,Rq]k-ru
%ZX2nnQ_O.mBsH#uD0H@lqn9=i-dJ:^B$%W2=SuKTE(JfL::(hXWNG!!r=eq]RnoXa#OD20(\a@L\,9fSomHASg2].0==>cXlYk'3
%X.E-H]O%)bNct8qP:q]/Z+a7g^O/pAl`Hei+8(1"q0'MPdC4V,XZh/P-k4Rs]B`g"^UE@Xr?%l<lIN)sP5"om@=RN:;[2d+>jYHK
%rqEsWb!s@!1UhgF*NcCYm[<ecMQ[i2/Zc'=Ge:L-oH-8BpYsKO8u5ELa0446`l[qBFKK>>b&4,#pY0`Ul\fM_IdcNRV9Zs@IURU'
%rXV\1IVn2cR7Z3o/+:3R'q1BmNJ5EV<Z\f2c];kEql"jN(-7^4IGoQVO.*/7??G)Pb./#apX%EibI."5A_L\ne`43:`Lp=WG8i;m
%&)6j0f!e]K*,[>(2Qj$D[QZ]qT"+*gY7%E"Wh5T:j#^VXh'^Ho1o2SF_`QM::X5[*VMV-q;EURqQ5"qbX);_LQTMBCO34Nt2fC9q
%m%>:&+22bG>_K]9Nc/i=r5Z[<buOFPol/rfP[@eQpa3*\+,hegi:ksBP:%<-7d91%A(Arbj40F[pX`bt2kps`HTOYXm"S+I?UR9V
%&e@:#Hb>,3J]0>?<j?bbb?YId:G(b)o=\$].",GNSNM5oA#!:XE4>$N^O>/2hL#:2Yd7Zk/Y27[I]WMCZ@#:#'WhlN8$\d0Sa+7T
%,CSNVd<]0PfdqP94Beq:G93lV2"$oPY+Ii+Bap\^F5=NE/+1d=s3Z'of\(`KEjIT0I4;31Y-j>k:nZFc^KGgXY5CYaoYg:BCF]Y'
%gP(7r^&I6VL))_Q'&dH8n(\8>g*[6]=i[)%NK;V:VoH3rV^63Oo:!dGYki3ZZU?eDE,hT(o"P\'fAPX82`KM#6(b&fh*/"UAs6K"
%(Yd7C7k\u(S(35db.#X+PF))s[X.GjR(rN@<CSaR,#3X6%lWV=\*)AhSA"NRL$eeMN3>VS+'Qm)p,B!:e2<u'`dO<2Sb_s-Z]2-"
%;L,lUE'G7r_u$\8]`)fAn_;AJQ55P[Zu,?ZK9toR:#Y#1Fb,q)'>IN%rc"Ge?7qZpp[!NZ6H$3=BZ;joeL::dFuST.lRSGNqkLFc
%jOlKI3f9h)o;\<sDNntHkUc,6A)<F$T>+Uk?;$?n[3$1!pSs3^^%ng23&l87QeH\p&2hhk=DYZ/2X`<0T*fomB+LrpQhs3a@J`a'
%cM>o1KBE`([rj#KET>mPk93?n*aX:U0K7TY+28&qs&M1hc415#mo?rOjmErY%R/FVn+EMWk&.G/5W<\6edH?&GWs`^D6?(Ok7Xlq
%j5.[oE`krA,ZqOY*VVMT*re3Y--sq>+S8pb4f&/`q]c9WD[S("h%Sf*Prj.dn(0c=p:n:C='tpC\$acLlZjuNm2b_LmJB?NA,iL3
%h`n@)Y?Vo,N?F4g:1a78Cfuot++77>]!L78h3[4bg5Fgc2=9L1@tXb\/SZs3C-d<^q!cq6?gjTuXLsjPl)-tQJSpW>bGs^J\^U5U
%k'-YZn*`jp<B]\7)Nr\*RoJh?*rYqAOs6oF>BLSg&>bO!EArm*E#XYm7l=VC=%d9f1+%s?>G4?%2_n<L'#U.kmL)^r`q/2-:jmSR
%U-T=a]"P+ELY@sFI!V6[rh?m.8u:B.V13nC,Zg3,TDQ280');e`$39cIXLWGCuoFU?<hS.\6J4pql?2@ZkIF<`iWn4HI5Phq+jf'
%V&EGJ.2W"58AjYDY"&_:d;6+)$dV+fKh\SN"+LA2G],3"O%XHPj/q_0]OH7+>qc2mh5%0>9U?P?>`lt+;)i]()*nnA<biO*g@3%[
%P3O`9@rOC6C6]*TH8<htg65k#57tJ`[qp#!Abj]KPc)Jk,8iq<W!5:RU+5p1?0r(.r9A<0M);m1mq$MG9T+'YXsEXa])K1#OgdbR
%=;Hm1)SOHY45hia&gefDIIMMY-[]#UGk\MS\b7.*+?SN"8BMIXcm7k$]"Rq,eVE82>7^<:CKb\im"H@ndTt:69'9uFGM\pof=i<.
%D,ef1g_\Y0cnXnDm`"<`;AWIqA9/",g7ZF&6S4i]bs)r6E-H*sF"HqflnRnQg:IT2rq]cImpkVDb9+^aP_qss@BWhf=kiu13JMQY
%?YekXh(5dEZ2@e++0@/DgM@=KI<9i8',dh=g)H<rK1A@Cd9'#.Q?r)rZkPXXGTNnjX?aJ_qsiAgmHh0gPHaJ<RK_BJ0S',uB'Vk7
%[ZLdN>?#I=p#sr_k5khl"c@DIqr@]c]O\6O=Fp;jNL('>9;i=iLq88]M.&PT+b)Y9/Jt[_mlX\KnFk_L;OcOX.'eRH03-fWNAE]L
%h@;-?kFYC#Mp;Fi@K*e3B'n'bigY:%HE8T30:qEGb#0N['up5#cHCTLlapA]<t9ri(/Jd5U&!Jl=5Q1im(@a<BMW.g3#[k=,+Crc
%oSMTjN9K2&Z0n-2@bZFEM9U\#Ta!TTBBT!jU9ceZE.:jNf4+2Oqt@;`0<A9Z#M\(K^kQ!?TU=!1_L?oMJZ>@AcmsH=GDrr=[sVc4
%*]sjE^!<`1S--dOo/l8NT5Q=1Ll[Q_'_mih$0T,.MW_/YaACPQYp)M;L>D@,G]#XX'n;$Y?<aQjl5I+r`IK9%'K9)P53J\Ags*$0
%*o>T*B_F```]_)q$%=J_IItX&/))_7Dg'`UNVO*Ef4q8_&,-EL?LPX]8KN=?r,/NGDV`q"oD\9_[b]6\T65@0c;<+9Gn0NH]=XqX
%,0\hIlZCG/>0F)ZT5kGmg=)=*0EB_4'7YE\dJ-JKpq1;5MjhBT[X2dt+$P*)pa\"aU(7L[O*n&Pf%S.'>3GU;kF3"F(G0*%LL^B:
%<gtA;p,4jjk&6f!Y3+I'n^lpWiL>Pub@_4[23N^nG=M<0Y9%\+4C9SOkWJd?0PqMBDJ_LuU(J[^[$H]1%B"0;73_VFY+fG_p/>9m
%`efh.N6,7>SZLGS22Buu9:nbSf_D^8e78c%5bd'n[n)mAA8LPWemI"=aKk6iH4;J\s'`B<GkjY/b$I8\q79b02Z1N*"m9ce3WE&/
%XZsQF_J,ullUbD&#3'J]Hu(G@hsL_aWLiQB.b=3<3]4M+A6jl"OZm-eotG5^ID,B3L4=Mbm76^4>U723,4$Nqm+f9EMrAS?#+]WO
%5PeJ$e81M%Ips'uM=Bn2-rB?jX7lOc4I;f1Wjr^XI,-eH,)p.;]]WgSUU$P@/m*2o)e+MVT'-EZJ+Lt>lI36:93[D0VkX.XID545
%iU1DgmpKQ;FE?p((UnXl=$&tW7Kgrq8#<=`gCL!/lu<WseZ8R]_tOZ/hqd0P\o[m=l%GA(=SM59Q<qe[c`tV+Erf;p:@F_eB)&i:
%:@@PBV=\Mb=P`:\/3J#LP4B+[eNPI3?$ge)f8I5sVJSN1jn,u?@2'LEKDa05[g0CLX\[8D<?%(AA\[Z6mjBL+[0LVVOfl/qfIVGq
%r\/20"6JkQl=T-NldP%?9"fT8^94R($l)nO^<W@Whei2^kt5f&Z1UsA2JMK2I=(S/ZUXEB"-i[(0q/b[]$htYo'/ouS#=R/BBubQ
%h`VuH&9[]o\b1eYl5tA[dq_/\C85N9bL6e?+r:f_T;:g@Sd>"cj#l2rnU.`DhmR"u=`*6O41@g0qqkTC[G,nB_Ja4fd!W.L8jal\
%)rTRJX4$]KSNP=.43JQrf2ddrUfsq@[Q:nK=n;IJct`gZ9D*Gl`;fOEj($HJ5I@6cpWeBndKR@6.(%9C*b*M$;'s_cps7:Vn7c!#
%[h>Y1jKW3l@>TJ?fJk:hrZ:Bh8#;D.>mP0')JZq2mqf-C^79)DYFY)E^\_-j.eo(M$gC(e&&5<]44l$$Y*OBji=KA1F*hd"0K<A0
%g79I3AYsRU@E^ssr?>M#4j,lfdJjDT=aa>#eQ@(U5'mcboAelRLM4.jigLfl\G4qmNdSUVp?q"7T4n.Zo:fU7mo>_*Q=#,+:MB1g
%Y63t]Aoh5uh*cA^UL<".U=^T633WPslAs5BYM[4Y%]n`K4Q#CiSq$-N98gi[)lrRSn%C$+r:$K6fQgqe,0cV3,gO\"Z3%G.cOnX4
%mZA!'n>LGLclma44)#s2ENAuugTu6r[pH4[mX4De:0O39$JtV)7o/;f3:qZ@rT'pqP>Q#N5\"cl^(o16oBuME29iAOcUuNTg^?[A
%n/_&S<o/8k7d[?pc>?Pl@=We2[s26e<klM5kV'k4@WY:S5+J,:m*<`s.8/"$(O#GF8_3[co<m*rm5mn6%(.>V<IL*68?KN!d<Y<6
%g*kTH0Ah:kkUG>,.3@d+:#d?r8DW.XDJiG?-?["dT2/Un#6f>OeL'\$LYY:tE&)W'2miE7]o1U3,Ge!o?%01hP&*:kIk)2S%Ud'*
%Ru7Opo%RqC,3OSj5r5*M^*2#&VJT9rFR7H0oCe6Ln6uc_Sg2n[m)*"tNup`SA)Zs9O"V+R6t5@QZ0ndNAP5B2LcRM`E$+ei3qel+
%:0'I(>a)mZ=3p';@_LXt2Ittu0J+HjO#N*,eH\\E?8^ugLI/Zoi(W/@%XYS"?>I/S>28pN%2Gi5IPgBlH,JInhl,=R^6#14X0]@q
%m6)QB5^kiQgLbMQjeQnr5$@X;SQJ<Qd0a1ls5(igL8152'TJBqNJ3o.$abXqQS'f_j;$)&bIc9sAj3>4l6bfpE,E"s3M09tLKiNJ
%QiKFq5Ls1[pto2h/3N0GoOC>seqmNmSpN9n!>`oF8$tG%X%LtQ95Pa#+$%7nSbefPrcFpn4mVf\OM8(^pL<CC])K.c>mZhc2e^ch
%o?"/-r+N<\aW1.k,oC0`rIT7K5#"QRB"oGFPb4-Pf[<eqqE\b]&[rgI*[PPhB?Z;pn8eHRrI%S`pGY%_:'oVJqZkZPdF_mNQra>i
%_CNKs6\CVfeQ7J'`AQA=dtc2!DAYl&.fJ*l"`Gi>)lfVgKOc@#RR,=^Y?%3<DnisVgo'Jaf?ZW\Do2^i]sddWr*"FBEqOTtmQ=_`
%HJ3!,rl3[7Qa`cQ\o/?@A+<'CR/Y-I'#Q*a_Hu%^*+6nMpM8U\pU<dK?^QNFGDbcEmMZ91m!a$eNquJ[mIp"M5;&M\cL'0$ro]aA
%jN#.I16WdYfNd76.&;fH<Q(b$p7uq:=4nS*pD4mS\[P3ON'JW`ZL7-^>H:TNgNUCb`?*FgC:/)dCm6%0(@+Wi_6`kXh`#7fHH"P:
%-Uh?k4mm6;qpI\r"NLU&SsGh'#8V5IEl0b0hC(I+nn@9LG5pr7Tm;%>NVM9oP@':R9>s<S`^%0)8?`!GV`"BkO'(2,If*2Sg0rsu
%Xa:U4T7=TKI@DS@3#lmY@\pg[P0@ZVh1E*3\t*f9np2#mX<*TIefIgl(I,P`(;.U<[!09>feCrGHI>6_+)[0<rAI3e.TQm<0;%:[
%p%/>e_AF-=S(f2=JkmoY_q'%!\;rP^hqQrU>IBHon'Bi'mofLK;Z<0WG3@=u`GDtA5@<(<k'V*D[8Cr+mGb2Bq3p'nHF(Bkqlh%:
%%I!qt2BNK2hu1'ioYEU@>)26<!X3=G(JbDDV=$_6a34&&a(.K^OnH,^%sAeto'eBtk'6_"ETp-`_jpqA71HNt:GSkg;&eYeos;'k
%;JE2GIQ4,-BZ?OfG;eVj(-V$/m`3:I@L36$kYB&@C9US&NT5X#4(aZY?%7M_n\!#9ma.Bmd:`1]>LKBL*V@Z/Dj8"b?S"%+hV-f`
%2YY/j;1("0\94Ob!t6,5qRWu?o6ekeIfK,/AeSu1h2r7DnVn>'*5p5(k,F-^8O'trI-4/"W$U1_>1e)-i"Pc8/.sNTF>k[FSl8R+
%n$hc^D`9l9ohQ*,8^l=`_l'.,=u\LBoJ"GfpEU5N1iW%?\'mg6?8ksF6miV,.7o\H9:P5C.;fI!UtkGkhII:V$ZiI4GXjYpCd0dG
%a+!iFi)RPKX0q7Z@HbGd<>Q>35&Jj9I?+;FF`P7_JfitkBap*R<DYZ7lB9fHYk2i/1t]D;^-YqD00"B6d/+5]OL-UIk%2r>@G-9.
%Xc[GoZEg"+Tm4ONLk.i+P8E&X/q2/^B:*"I'fEqFK/:BV>e(O/H=oN=>r9b;.O(R*2tuK<d*1I74DeuHRD\I=F1i+i&/UieGO[CW
%jtKY*552M/%F`)(;K&5eT<3RF?)O^)AhL%5n:cW@NLlGOc!7A"ol:AW>Kfsb;$0O]I'2'f6^8cqj(n5I>eM]]INhK[\_XF?.['Y'
%Mlbqqi2pUJYKFhD8^FD$>3eA3\oeVrW7K5dS*.j$T"b9c6%N-LC:Vcl[BGD3&,0V@h!H*da7!cZT9km&"R0SXaa!G.n7"Jn`Gtug
%E3oGTEjJB.i:<TXcVE:Ac9-cn.rMse'Wj^9'3i-n=Ku1M9/`2AE9UYd?c\n&IL@A?b,\RL<B9BP)F95R>EXMC(i,\NSs"7$q,Wrt
%>m[,.(Yij>,$oGFDLc*4ID;j@_t?d:^6@WNK]X'rhFSZa9#U`#oi5(i'=^au;BB<5QSN<dN"&O-&81"6kQ9NnF$0pe@Lo'&9O0?i
%G-7ce5eE4RCih+@m.ZQt4`7]s]fiG`VG;@pLO-LYR0A)k>Kpn7.iT)-5=hTXb.pc.61b'q,VN\7[9i1hmB+;f?dR%4=`l>AU'.V.
%&C(GB?()Pm;Ue!tE\BC3lSjinj]_V?8qrur;tX1t6JQ=#KNF=[@L6%`U_&ZI$Q*(TP&K;KI,VRMh6sXFZ*a/jbJKYTPtpYTgtOI]
%$p%PB850gXb=7i>^-H^L9Ce?ob;)t:pceX'9pTnC5?j]MU^5+0GU&1EfC,%8d3X2W*Bu?X*F]%R<>na%U__d@\ru$Jn$A:*V_ErR
%QQXqaXa3n>\?sjR[*C.71T%Fgi&YQFjD^G_7[g'5,cXM84XB+gcFhW4Rf1qu%9ONMM:`1Rf<=ibRk'g]]V-Vi5tJ;cWL-N5H=Uu,
%1hY;2L.o@.\!O;*qN6mS?9?qWT',V@8nnF$iL=rdbpWb88kR]lf6E#kC:T+t?>s?A5DeQ4R,c?D5.Z%I#lf)HS8NR3IPrTe"1ipY
%TDtD@dQ)_>\)$+VTJ]M<ZMesI7*?dNO/TG0;`g`5Dkm5A)!DPQkM]KuhZ&Eu'\_Mm8&+UAc`auiA8#.Qdu<&pIcVIr/jHi,SY5@<
%RDHY4@OF9O)Q@6.32:\MInD&(qEFY"554P2s!QL6QQ-[rq&=e'hf[asnrDhPNPpndg-UA#2?#,RSmsa*cSX\E6GRPUVJ5-4gPJQm
%JDlZ>rpR`gp8/O@NGl>@M[,(.[$51TCA%1iA%7i,Sli:'05oNuP?Y>8K0FQ5HEoXtmqJ/ID4#Uh2gk70Ri9OU6WqIS)ij=n<2ULZ
%)c6C6&YTccnkCUmEXP@ncjbo,0"#K+ZuWV;k:OsA(+dYTS%@\l5u$W3a)#T[cb$n9/a-g'oc-Jp[dJ0SVWHnKb](\0Xh:RDrXdR7
%o=e"1]EIN_*Rf042=`Y+gpHT2(BAbfo4Ya1S&XE$*e@!'VsW0J$IuLt6l)d%"Ej8>^7-qbWf8W)C.pF[Y2^B")70T3IB5uCZsX*2
%1g?<t^pL2UCUgs+9LG`?BLKFL\Ph&RBRSH_%;oKr!$nr@>ge'qSr]T-i)jM6UG^BU+k&pt<XPk$&'*_lU*6#'02$*A9iK)%)HP^=
%KFBE\b<(a):`GnLLhH83kR"?D:;nNQ_fQYN#D0pE&dhUC=JucighR@0hMHJR8]FM`a_U4i-nU?KK-or3/oQ`=-]53TebCqOlo]iE
%0hb;#A]Zcq5eI=[mC[)QB"=@cW\1EBX=Z$"8'$:QdXC+o;V.#tZgk>jD+GJ?mJ2\t[OYA6]PS83U8hX9Xr=Q?42p$eH!`@QB=)XD
%mC]LkL]R'01RBlOb3rT`LMmiR_t&aKYr1m?k2_BQ4lup^SbFfqg/Z!j?T3](#q(-/e7mZhILIM21b^@^'te&>#VQ1+1Y(fu-GD&[
%jI(ZG^hP&)g'pAjjolONo;s/ap#c&Sj-rIh\C(GdB"D5*!@8$=VhS2nSNIM3#a@g@prlH+O4^7D?is]*`^j'#Qp='``9,F\fe.+C
%NKf0N\rK*0CnM#R0N$H,neQm"5VaVnXO&i$Y3nC(B%tLE[O6kurS!"H:r5pNl^UP!2(U:BK0\Lp9>$VC!d/Y?'muj?C:^05-_B90
%iR="sPoL[!M1n9%fC3@mY$jo2XsKH):le^.&BqQR]'Jno&C/[dnjmk]SJR"'K4cI&6lhRHCgOUB54>t@fibU6B#srUTS2.0-bNep
%f6/Xh>m&DlYqJe8Zl2!PTHU@ECBe]-&KWhI+H-&i6VFW9]KDe2)s%pB4M6^($;lH0!nTe6_K":#"gYE)`$.(q:ra.(_)kFsjg`$H
%6-RbiN73Ste2STA\?6i]S4:@k\g==caFK,r=r(NdNPmO#L=6*46\jfMSK,PEfne]9X<^Z(KuIuNOSpO6KtLK5K&aK$(rZ8%dg=]`
%j'sBPP#%rn103(sNCe0n1`Ob>%"lV=45hQSL]s*h]JU"LU8$>8:H2I%!(hPMa7>I\Tt;lM/K1[j6"XOX`0:*B-tlFk>C`1A#g`j6
%Pc2qT!L^9MF"*gK6J\ACQ:;M=[OpGfVTg*6<%4i?1!VaFKd8!5jtkFfO:S;TfISFe?Z_otN5bOEYIHod-EVf%$QH)ZO9#Y)4jT;&
%]TBoRT:0pT>ro6-a.S#2OeM*>TbsTdTs!hZ11F.^"9fqW*7g!\C:"+%GH5L1U9FW"2:M<jK[j[DV8,A&C5AUK=MG!'p6XF'g+6]?
%VW!<1KGKCFbn);.<C_l^L^[n_&JAuZU?4<e(*D9W`9)o@CrdgrNio>4`deq;qEj0gl%cof#&3eJ#^ff7=^TUc1uFY%!=i=Ef6A3l
%-u>3I!sAp"3$_K1W<FN^:OGt7@)9f)P+scDAf.I^kbd>_Uo`iZ(Mld,=:;Bj7cGj:AdObYg$@]M6u/[>BL.N=Tejke=<Oia4>0Yp
%(f>.k*MnTXY-?QRqS^jV2usAXX1KTQdM+:1-*$'j^6Jd6[p>;u(l1\>%V2eZZ$&jsfqAB7b1Vkk9\?Kq:lA;$:Zm][mOUF(m89Zq
%ZE=@f-`Cs>ifF9T=V9%-X+L74+of%_&@:>j>?c(p?WVTF(ici2nO,`(*a"QHP>rBWkD?cc3FLFD,\m/,;`Eh4dhM+//k\4i7-XHM
%;\Vm$+d1)>$U[CLA$SE6K1Jl2AAV5E/X:7[j[BT4osc9'GR(/u;:?(ObuNdVFN'4Q",T;5J<P,(+oOeN0dI[Yn6E/ZU.BX8?'.`)
%kqq!,MMeKZ!uci,%;GQI$Be\h==Q%'K@NIi%"2>YFui2V.o[<0.()P"bnMb"2/@pZdkb8e"rHQh731#5)r;uV&ecH0LDEMYEPu47
%"XRH;m:I[qQCH5b4^AE30I@"I+P-X4,gG(t&?I9;eWQbQ7@743An3iJ9i2JplT36B$"Q)Oa)qhh4+*n8?Wgs-S09.Lg6mZ.2;l!K
%4mA9_#d-d1BA/6J=BHK?-6eb#2;oGR8@N,=IO$LR;<gKFiHB(9DW3NM+RP=<QF!KROG6"lPhL`9VN-)!<Fo1];d((t;j6/PL`$=K
%"(;k2B*rB8=>)7:Rpa1YEWNIKd!9C+\Lp0j<lp2>3cK>:3G%U)C1oG]*7P-im9BhC'F>\^>^:k<Rses44>kSec1/6>bkALZ+oU$=
%c->G.+0qfip#&hh6$+A`F]nht0UWN+)XMtD_.:WS@$$GKg-/UN0m1ug>q&3)M]0BM>qdL4@XsVPn5.Jcq$In_+OUQ&7$a<TGZ'mH
%][S5O,Ll@]'0Cua8`t/+*004:>g_Z8`dfqeYb`P#-A23fZ%l<(@k686+ID:CAZf#*6GN/_%f@Z+-gU=9^P2[3inkJgNO:#im5mFU
%39B)a@Z\PkNP.Q`Wi0]kSH7=Q6m\^!>b<^:l[m(hb.0DE:S94j%!Kd.:dAhsf@OS*i6&D9><:/KliTMU;HZ]A27TZ%61<t[H_UA1
%%pcNO._L?qA/^<NjWNM%)=c'iJ+%+bJ_FQo_3ICY8MH>cF#@%R1U,=2@Ul">QO+?l9ar!I.A<PU]=QoHXb(,jGTddLI=lNmkY>2%
%/@s$#/ad4;.2m/]?A<)2dK^'pK5oVpA2+CmCerT(2.)?q(\7o7VjZ<H4EDj1Qkn.)*<dX>-"XBsG;4M*8NgH$.EkJcNBns(!rGZK
%(l9G[Tj+=WRogsbgR=N1<FgG-NA2V0#WJ2,fN\jU&hG5Y6DJ`1M%\'qk]YqJ8G!jQ\8F.=W*h`IW4C=Orao%U53CLP9U3,Y,G\(N
%OAC<rYRn:n5b$\L9`5G@LL_BD?/=QfVLBPJ/tbV\PRTXb0]7+uEBIWUSc[Su*lQ&hQEf*L[9-LH;uBe4FQ0o;Q`*j79c8iV33'.)
%r[l/&G8&RS"5.4SKa]ccE-u7)Uk5!AUjH,pA\Pp)4\a@FTZ9#74/,JQ:CDV%S;@i+P(i*R+!NW)!b;\8Ea9^KBb&74-I[k=ODc(C
%(H*!7,d9Mb0jFmV!V-j:&+ua$BrWJ!Z$Dr+"-+RUBJiLA'$jET&b=.5-9K?Z\ZU^cn<P%-8d#YB$ikOr+Oa=X*h;Y:>ttp.5(%B\
%gTVPa&p`Ef2G7X$ecG.lkp1#R%.ZumG[qa13m1p29@c/qFUqM$Y6eA%i1i:t'`Z5L!Diht9ar^")oeYN0p\ICin2%.6:sVO;:(%0
%W!eEd'193M;jY)^LZQ)oe10^8N?*ae9E@'D+.gElCk(ngih4V1H/c_9B$$0M!fDUo/;\6URI]"kb`QM;P>&8K4bl=jQ:AAO31DIt
%3MJ&NRS/01^K`^PHD657brH\ZNb9^9NBjE]%5:X5SjqAfk^7mKHI<3mQ*E`!O;tKM4Z1(_e$;=67#DE\'#tEk\F92T<R9de(BT_)
%jNG3oU_^CpZRM'RQms8GibP305Wi+-SLoV3("l'/AMtN1QAOjYF"erX>>C]M=&X0/N9PqLC);^-=TTnuhr><<^1U#CegOF.qjU[9
%Ke$1?e\UpreR[]<BcVk7-8-AY7*sPQXt_Mk01pqn/N6$B;+`e3H@,c`kX\fj\=u!0A4SJ30\$p2dLYT-TY;SlXpL+;f]9R/=!r^P
%A/a$=MQVjqja3S&9ckaG$H`\j0<i`"LT:3^!AYO\m;H:T^D49Z@I#\;inW73Kg!dn*BaEKle!H@U&3&b+Z"5p*.m1/*#^#oU-gE5
%Aq2`@C?'!O*eES^,]JEr)e@\9;^D9b=_39o6:AVje(%0"5e^jP]%\^s"/i%\r%CWJmm*Wo"E<:`@U734`F9/@3:JQTTr9*a_'@B>
%pUA+?o!kD?VN-?d/h`A71_UW2HH=^ocpkB/b+V[Y/upihHR?p>`_4K(*.X>\_jNG!7H]I5Q5q<G]n_ehLQrlN%b"pkTa,^E[A]b2
%d_IeJ!hB2@iZLiY+nB%nD$t?.2A8%n-dE[?Z2ZdpFG><*NR8S6_t,uNr(TL$"+<ZX(dalg4Xn.'e*KXtOfqA'(_O\8i]:)BV^MP?
%>!feYOf!;t-mr_L4]MM"eIp<;M;Pe<"7FBXpC)\RJ5%OQ1nbY'>=>!%NBe-['e-*?MP3dM%^BdLR0GGXiW>G5g&_nB$1V5dN#Q2o
%V"k\q(1(kDR`QP4N*AqgMo\il]]Uud75U$B]-4Ad/JdpnPRq"`Nt9>mUrgJV&$7u[Y/UkT;*K_Z5Wp.5"\[OLQK:KHnj;Xt%F&C2
%Lt^B^P(;@;`rnAspd=!%AVmJ(H04lgC*ntB=ak(nU-=kIlW@-tRK4N$Zd1J*4s!?0#Zi^lWsD6@EegU>J]gtY_3.W!pu6J>Y$M3)
%NlXM_=,tAF'WHD@p`5LG.FL=Ym#S.OBf\YNpe@%&UXD8!l<bK%&o01GpTP3:^(&anqX#W&][75AHalCE?.a=\cN/MB&=97#UKF'S
%+<ntTQ'FoB_poH4l"obGY`'T%OCM\f/e6&Fc'>:KMM/!i&]u:K37oU29O4d'%`+(7Nao"fZU8(8*/He1ofsP![:1Cjab$U]lnN$F
%i<].mnj7udf3#3'Af3R=J9@o'Y=TsH?OeZF,$ba>WBO"*?o#IT-(mWt6_i1*HO.dA/[d<j4gHfWT<;'3U(-X-Nd+;tr2](BfG'B`
%MI/<e-(<sW:%>Ea3atT"[OGP=<;5j(&XE`siIt]_[KPj+i2-^>.YM97?'ff;/jj4?Xan,;'=Hr?Oe)6XX$FD%3UBAg=b`@0'O&$V
%Po9]d"S[Y3OEO!XQ'@_nZO*[9b!G.lX]_fXD=LpEa:P)aJJmHK:fUp_ih.<!oa7$)o4,:s3!pQ+Z.Yp?+=^nV#-8]$m0;?^MESHj
%6Esdl6Q-0S6>Yb:6GK>#=:>PI[a&%i8Bo/R"n*os,>eeRn-';;9`bumjrrB*Qn%'4eOA(aftV<q^JQA)6Oni?]^7.3q/kfuLlXd^
%*$EL]T&sfaEQG&(mSdBg.0fmQ-O/0kIQ5OEQ%M*H(gJRP+qLC%_bbO'/%nJt`DZgU@_l''&8PnN%`ppKdtH.#_Sh"?AqnNcQ</@g
%2&t)Mq"'js?![BQi.9$eKe(/@/lgYagsO%k>n^OVU1))C\sVr%_L"j^1)g8SF0/9YL;p=tg(>t$3%QIp-m\Es6T.[$2G?+<DdXcX
%VXgbQ-@:;($s*1E9FNqd;@#T6d/)\s)6jAP"]\70!N6ZHRq1u&VR#J"'^1E1?kCI3-u<=:A$:G77h6+KU(7[)18LF/>]=A=Ek7BR
%#*O.SOESd.EY`Z2Tgd,g7`lT>g0r+2;5Og]KY>C.qP&!i>,ZCp;!^&0Es#>QnP"$_#Qt`Q''A1?F&I#n,U`=/>kT&AkXn*s_K!!!
%Q3AsYZ#'J@PX83kntWKYZ)6H[!PZ_\jTlk]j??g>>ZVo=[_r5JUon@9Z%i$Ne+_KQ[9Vk!Lq=?cXcKu&Q:[qj]umbHM1Y%;S:D%d
%7iDsT@X;KT&d]u1n87:HFk*T2N6cHkZ%9bZ5+!@V_`!7\rhCF+ET6#iM^+0H$m9e/AR")K0HG\"$(?fc#Z\e-Z+Xkf4/#n!/?F+u
%&ETfO6Vrfu(@R\<nW\Z&Wb')hh%nu;kfd7%@ah=_?5OSIl]!'$JmUbjpP-=RNlH9p"?M-ff3u%Hpqi<.F2VcVl<-pW^lNg,8)="*
%IfHbWK%+:`;%J&SX+&QlTBc6e2BDp6`==P^OcXhoObN@O.,]8nK'jIB89X3;o^%C"/B%&2X<?iCVQ;K2$3]nKTdhaZAueE?ZIflp
%eU3&6pn2@B<.`bBpmr*@7.dMcRO$D$X\4GWCWg0=S4Jcbs$XUF8?$6qnduT^o&B.9S$,"@$:&a@A7H8N,1=OB<=Lp!To1?7'14+[
%O/qOUj.)%s<*H8DiO6JB*"-t'87r_/0geqn#u-MM/LK?t']-5o]cPkCld2e)@O`:Kcm\Z5,t&t@Q=Dc8,:,/l25VQLp`_"Pj+:Bn
%Pb=)%d#bUOP%u@0<Z$8;i@;(LAT*?nJ1Bf"$&A+4]\-[k:3l,P3.5n*F;&A>1KQmod@:J@`KkXs8/>F4(@3%o88>O9cOj;?Y,)VJ
%8[J!*h6I0-&]P$(c^(VhS)Z:<Y3CiHga<.ge=30j;eLPNkUC\9/#kHFKp@STR\It$0^;Xl)<MY;of4&pm$N.(/14p$8VJE$@b(u'
%,A7o(?h%[,1733>:do0BB*]YrB^RQS&LNO:bXA"I=7]p")q_-*TXE0$`J,4a_sr[7;3)NH8#F4%VF4XcKdrt=1l_c(?4\6I&kP)'
%Cmc'%H!PNH@g.lI+Jk:/9KtQq&W^K+h%iR6nca]?l*_g5:RqRgWk5\PesJ-)'t>poS./7[9NNY_3!E9]'71.,a?ci2+j7s&QNY.W
%YRRQM6Zj_41hJb6'$m02\qs0,:dn.?IGZ`A"_hGW3-U441`%MncpOY?A@G`Q#PcF\"d%k%8+dIRc9?GFl.fY_N/d-ISK60i-A&Q`
%\NoWC3ZQmb"43F^&3as`ehGU;9=<NR4*V4Wk%G#o@h9Qtb)Ag>Ukdg&`TX*cnt^uTUrLQQ7+A#ehPA*RUdajML&>0p%DoBeFG3Wr
%;q\63$tP8BJuV0r%C1m:ekFO.e(hb;0og$jFj9*%"J=d$R>iEi<%+?@H!Cn^JK5'W,7BRMj:HNJn@=B-oc-KdUp/k28n,GC?^1^#
%pJ!qM8-79sIG^3\5#tpRceW.I";8WCfVnm?&F5B:Ia+,)H4n\>8,u+JS0U#U'*-PBUCb`2^cde#"1(K!"(neD&0r/o%\jku]=[?I
%OdH/`<:1;S-7RCXL[5S:YQ]KbmF6!a%c>WP+Cmi%I_u2M.:JJX`*]AEC8QZ*V?K;`780Ss<F-5eR1cKe'$lsYp\B0XD!7T^7!4M*
%U(c/cQD9QFP%oLl64Q;$1gKHg/qgOX%@Os_/J-7$o`bqH4`U55@c8hH&nF8G.ci367s6he,s\b"*omN]V1P_E<-=n!5[8k[aWVK`
%:orA9o`?lKi0g=nK!1%j#Z/gZA)gmZn*8>gNue9Fqp(L&6]1q@3C/9OZf"YfNRkGd`)qFUY7ae;TkZVt8qMn'I$"Y1#P8F=/r*0&
%/JpU"*S9UD&;%OFdl-=^P8M;P)jVe>_9+ZR]g3[fAM,n/^Z?U52(iI_mP7&6I+^:"E7K%^S27^]J:)g#[Og=uAZ!0m/-,I$Be"oc
%3[co7e9jcZQ:jl.AJ%_7M_tU?"it?J`ksHS;Re=r!/R!_JIn-KD6Va?5q5hhQSR1YP@MhNR;G8-GeVsAMP1-jA(^(r+WZG=>q70L
%)"r?ecY!8d:4lAfOMJg@MPCJ4AK=1sGq([C">pLfp];;*3*gNsGam>p?$_F&#*'K/eLhqJ?sa<f`R*/38GKMO=:.k<EGXtl@HGgc
%DhCkK#:H#"=pef`rintQGL\t<%A`fM@t_at%!]uiP#Veor4-hX'*E(np.C@kL3/4V15:Tn'.tWC$pbUGY+:6^'?dX-BSqjMiH;Q)
%X^mcgW!"HPiS^MnFpf?qiEmG(Ne;@9"4@4Cs2XrS3`Zo[!lPW:"g,E\fc237#u$%SK6PF61<h(UhG>qP1"8ME,fC'H<*'6h\Hmno
%LLAUqlZ([Y=Et?<`;t&P*LXS)W11/5LV(o^+t2qO4;\9-YI`a)JAA'G[9#*4_#6UZ5DeMZ$2.!bX$BqA<r-g1+P[:K?un%Nfl%:Y
%"rK989k._Jf>q%GaQDfsI+"_`$80s%R/h-6X(2\pd']PARY!'r<FsLAMj%.#X[=LlO:JK;*;b\0!.])4+?Ysu,p#X5:mtq*0*nJf
%EqM>FiZ^RiX3rFc-0I*&L86[u5bXEnBXe4N(tM]Y.b>)U$_bYm@43N<6*YH(-rmFuCL\cW"]o`=6(bJ7a>="9`AQ`]N5ZB&"u:;Q
%@M5'T#7NQm%-?f\EB8cj-3Iu_p7()["<0p8ck0Xu=61s_b1C4j.Yc.9/3t[4JjQCB&Eb-V_R_5F"T4kAOLPh&1s9TlKS/4rFd#2$
%+Rj=N=D"E?0ce>*/;f#*<]3+nr\:+-J-2s4m])r,U^]n7k&>!j`Ts]nZZ?AFaR5m"Kb>5\ChfD`8lG0RRLYZqD4u[9\f4,oM3_cs
%LPm]o$o0)10NhHf"VmY&Es+GqJEXh4F(o7.#nY<2ped5T3T?UKA(3pK'FlBc<K1*$98@r*EY+][8H]s"m5=GXP(I_sASQtpKGk3?
%F:^aCf?b<nZj_c0As_Pn!Gj`Qq@M?En6*![$][92R#0%)!nt@>O_'Y)!g)HabZ3*,6rhR":^>K=b_='jLZ`W,%QKg#?JcT/.!og(
%-4Dt)iF*OYQT%T*#/^"qW1+VXp=+&02)3oS+,I<,#h+!kL1)45$&'JejEe0WlbZa=eC5dnLikf-1>&.TUh(OM492dO1.<4a_WrL!
%e0`1N=JQKg*9#%q]u]'i1ItFGb=6XU?0U6Q"E]d$ccE@ga!lUfE)>NpM4-,n4NY\'O</,*iq<IQTdf;F(n&2O&i/rqW.Qh-.[MdG
%^!PCuN;J-cU1QmK%%La_\qpIRi?f_69Qr0O.$#@!$I:Y+&MXjOn^TC_39S7I7o3_QF4HPB"A5.q'Z,r`keE`e@H=<2hKI3X9;`ph
%<3Zou=4r*@j<<$nbU)TOi[j9C5pWB[X$MVScJcPAES!Z&K]fYqEM+Z6^:H>O71>%X'%^,.XpA(.:-;GV-_c11J<@DA<]1,%PG9.[
%V$>DB+`p;!M(Qr6p]j>N#$Gsg,?`XZW5jdWV&6Vu#(//DiIlit0`](1QfefYFZ@4*Q0][qM?X\p<?nXPie;gUEWI=DOpEm"gZrGI
%Y/F0TNW^F^#,!%*b=FZTN)c)kTTS>O$4?1S<lFA5$c`"P-V.pd]+"B`c>X%g8$J/0RjKRaIHWsrc\`obEE!'*YQKZb`(;1jR]1N?
%I&3q!Z9nYj&ru'&JI3b4qequQrY\HXP+G.QpFZ]FnW>40'HC?b;hX5T;("W+@WtYU>d],B?OfjFGr/)(mVJ:LK60VG-$Ug4'8NW-
%d#I3XiACoi,()7.>_H0Zh1EQ2*'":]Th)a4CX'#>=sX'3FEI'7`_aQaW@V4:@KlO9*mAm>.Wfo"9P(*M:=6*;Tl(=_Qh)G1k.V^!
%Yt6c\LRGkjM0Wq_J36]\k.k-&l@m;ifIF2[@@lqB&5qfHWaKb?e.c*(W?\#a`B>>Q>PAOD#N)7H<)!i>Th0WJ^a:&[8.Has[4tf'
%0nV/@P\prJa#,hm,DIBC[;.:tJZQb*,aj%o/MU9\'^8iHE+;D[l5E'L#If`V.pLTV7Dp=8&9E"S1Ml8>%-#>R=N>g\0NhHnK:*P#
%%f%J=a)$`KKC'Cl!.m%R@N6bq_L`BV(A3di73dZTWZbFH?)8'Bfg^cs@N[C=A@B6YaET>pWW;XA'=T.?69It=HVEQY\=2]^'2c[:
%7-,+4iY+4;aV[`t)Sf=nCpTL!fm4Lm!T,m[@d_p>6IA]$&Y>lhaIJgA%UZ,R'q=/\IYT^WbKt>;@]5+9mo[0L'.eeK@DEYZn>PXY
%HQ/C>FZMKEjY;;/Oo7/Afq<ocE<*K\;mJH<Ef_c9Tk$o]!Cc:.R%WedoV`oQ.slX^QZ+s*<2*qN?&gPj[uTJq>`K+]m/Mupb2nGV
%,RQC!,pp2s\/\f<m&[iG$K?5oR;b4HCejC-%s/^Y+0pA'anYol3SY)mcI'rH15)):a`S't"bVO-5R)*Dki-!/Tr+Zh7W&a(+NVCc
%k^u-r6B&Dihb1=V@QVoAN'SjRoI]T;MHsoe5r3Ld?&9Ch6X)l%*$fn&):`P]cRUl712BCaBd?r884Z[2)977YZs]*]\,lXF5rhFI
%]nn]OV@@\/lA0JsFZlR>Ymg_cM1n0lis4URa`$^kW@kGMO\NqMFb?m$RB4blo,;3ELJBYHd2>>3X@Z`$L<A2BDCEJT5r(Vu,%(D6
%B,3H9YD=%*8D%Q&k9%k2+$njSZh8:D6@/mh',_#ZXVc^C,*I768ScBO+1_nO$1Jk/&R=XV6r+\@"r+WZ%#upg/WPbjMBk(kfAbH]
%.#UA6>,B=.pA$NU]>,4KGZ.b>31L9%JW^L5W9)+?pm.tjTWT]"%384XUpFoFTpNV`7+PKjAq^>g\?7%ml$0he+RAF]VrKpOHl/FA
%De5SLHJq.Ylu<9BE>YZ"-l=:n9%'E("N?u$,ZM=qPKbOHHEuG\j,P6%=f=_S5;ZX)k$h/mh\[7@0Q&M3`lNP20d;;bYN%[9WI`u,
%\/gU?H(aZ!L)7MU&L'XU.#J!s*U:,:grplqa9G9TE?Ilk&*6[PrF1O48HM;'.&XAq[g"j-O`+7*fr9hf$Rcljb14^=Y;p?ijgsD"
%;ZUY\=u6:c_qS^XP2_CVJBGi=a</ftaWA@+)NZFhHNp'7=_eg!^g:Fd[[Mbo=.13PJftL[gfsgcojUhs(;[T3%@sURN[<5DJ>mo)
%-DH[]ku1D5e<iUkb'ArP4"o*c29E6J!T@X6FEnb?E=M#u6Ajq[@>9Ed%/BUh@lJ73#rG<:AOhsh4Aa2a;N_F^WRt[4&7eib6@^m+
%edXH\2RbXq-t,6\6kLM-#-,Xi76RAto2Nn@08-:YNiB/r<CFTd9:Cm;iFN4u4-^fHV`P0&GfkCoeDZnR8k.dPdpc?kkotNq;?rF(
%CV"PWNBn1,LJ,7>4P9b6Vb?rP+ek)BV@%t8\-@J>\#CK#NRj)CP`%XY[`D**qWF-P'jJ*djc`_;!h\0j.C5_I'?^s.(+U*)D';**
%#lK",D+;kqP.Uu2Ksr6GNq>*O.&7k[\Mrtr#$NQSG]/Et&6_*f`RS'(1#l@IkROm`aDbOnKQ9GRKe(-DYn2^J-V(Va%CI5O*$e.u
%PQ3CFSEZN'm"*)Ei*MpA7Nibn='c.[4>m8*eL-=.k>Qfc;DqHC-i9AZPTAIf#e&+h09f;%*Zed(\E(^<0k]GG(ZC\_!"/N45LQ<^
%XG^hl6Pe"P7(UL.&tb8>m+6?s6Sk1D`.@0UMRNVI,@ef).H=W[1'dP%%^]Jic\46)Gk=*G'Mq,$(nY%ZKX*772rZ(P/k*p)YL-gr
%2+KY_ijV]GZ0]<eAEL$B(Cdj;:_WY^/Q3Z/pn;%#DeS(7bQ-/41E)jc_G]/;4J2=@3W!8.#PfcdLLGt\)f?NADj+VOD/m?J#GF25
%0"27_g^6i1QWk:8o'uT`jO,s^H8ReO1mac[Na[eC^r@lJPT9KYC^NaW-E)F*K`+4&j3Sti'sPl3>=H=91k2@Zl*gB#q1-=Z/k,JN
%K@aVlK^%d5;@SWT*[%PM.&%#Eb>m[6a2fVoQJ?N_aC<1,r/QdfY?-9/F["mGE%tGYlS6nQ6ng*f6es&!B'Tm-@E3XCW'jap_n-H0
%@gH`j2hJ0?)+$_oa,[#c0ZefSn?XX"*6(S2(%aB[AhZd(rtp.Tb"tD2PN*GSR1@\W/nqSW!p22A3`5Xh;Rfcpk`Kc/P)nFI\/`gi
%A%&Vg*1s)pMjFE<K>W`15oGEWcl=ufR4B'5pl]NF))7V'*7<j%<lhKSdoR,US-]1*Q;hM`.lA2$6@S78?Pr>!/=rP3?#s"*RB9F@
%R)XOJJcg><rWWP1UE'*h3O\uR#af2ae3Gb&@'SA1a<8eF@3&+-_oHBq&8-=rJVg&cMO[^]/:K;j%eUB>i@Di)@CLiij\cBr41o[]
%&\=L(%8[Ni`fN?+mDtHD,:V+?c0dZd^M=1*6`Y$ZOHh$p#/Y#o)B;7-_P+i?*dk+6+`WJ<IWS%i$&[`J4g$WZ1A&O]WQX+Io]i]C
%AWS2=LhuR]LcAGe>Xk\(6OemA@ur+o\.3.t<[c`lWJ<CP%XB$IM(sNP+M5\XA?SiGiQVdnKue^]b5i3<@!Kn(^eHiK'mGM%_],,=
%!pBk#?S"!8a&,ME(RB^Y=[hn'G5$mFA=/aF%Ss@5b]O"`%u,k_*6u`6IFFP8DO`_Cl=1t(Obr2Y.i5:?E"XHkZ?kI6ZPY.\(>5-3
%7j=nL[t7R5N3E.h"p/1s+!q'KXMn1@Y@Bf#a_s*d8K0tWeJT)LD2"to6=`'oK0@!i56RSt5B[2HQf&4c04]iN??QI*.KY;GO[5EL
%^8$3$`C+!8B%)hMMWe+S3E^_A<j>=Yo1FNED;l%*[DREKqge-feRQ6mJLupu-3jrDMCfA(?tP^pG01OVbhk<\@5cZT"Y:?PkHcf3
%6(fPkhCQ4Gk9/!'VdUd'<Z$c0!YL#u\m\bj$a1s<66TADV%u?/^[EU-L$ug]P%ipD*u1(Lqc8@M1k%i`F$V\c$p74@q]c(Y$=l\*
%Weu%16^mP`!X)7JpBr$Vn=_.f:tBQ]@c`l]PZEGbW&WSA+^60g1R;g1Ri6o'^)5Jp,^k:Xh%D'M:NPGc,"Q7^j<p6;O;3'T#3pg0
%`9eOeOoU2'8^paM<an;[7$j:UjA7&IaF&K@QiR:%58B?P+UGP#3%.jM)62r,h]YWK,gatj?U`H^AG6G];*a5^%V_n]r>a(]P70RQ
%WLIp)/(a(qH"GHcN`HnW\t"oa7qm!(&'S%kX[<<WI&aum]MqiDX88\%cbQAd1o@p:QinK7O%f6cST8\OEf^jI,HAl_`!Ci.V]7qt
%lJPj1(:q^&+C2sN7<L-?p(kURYD_Z]6C)R)-Nu)#Ed8qq>"St$8E?f5nJcB^NcKtTYiElf#O"!i2@'.Jns\Qh-/2K[ZskG$.O3d(
%G4JHI0*OF.>ql=J^nS#f0bo-SkDKuS3-QRF0bh3W,:.$,UHjjp7=kSB6)1@Y7"C_t$6YD&(7W(1MVJBi2&08_.^2&:75d-M=4]H\
%Fo7)o]D/WPCo53V"S%4sqS`(SQPke`=VOLh!r*h*`#"3@Q@^$iT2T3:U'9QPA+hf=PZO+0V(Hl<&cYFSE%MU0!u#ejl%>'A<EL^p
%DR"p]%A0D='-L60"<=LY..'+D8IUK2'%^,nXpG#\SZr.8a<cTSJO\dKNPpeqS*]pY=N"s#Gk"Qm6#Aq==#ls"prPj_:FH[/]"!:R
%qU&de'!dM[WZ7CCLkuo[b9.2_hmhUc!OQ+`P?9:N@HSg[U/$fh:C89P.3@\He.'IBFo>.;!IB'^fdsf!KU)0dcLn$76Ug>VX+)+6
%*C2]d[TNESnWV;!/qDq>M5R<]cAj/$7'df0UU+4%7*'V';59%t%HLu4b.EC'3"JkR<_(A84:SGo2?jb#1i\hDW/Jl;Xq=.@WuDRo
%ob-4-=9Q0MQN5^uEZM7(Z0CsI+#,/`8R,8T\0C5YFocDYM;#gt7%f[q?6?EpQ'=6Wn;*sBb:VBaMAIkt41[$<biS[e3n3dRaZQu5
%;Z?77&0=&Y4hd+tWD)$UF9,/<&e2'$c\0bH=,F;,7hH03\9M);.*H1#"t);5EoWjn3+d+Rm9&>B$+Q8:A&1fL3bKN?iuf4mW!Ua'
%D//>mS)^hP(NX'7Q]HjY-K:P)*)9mfT%IhAS_=UpCjAn;--<BKWNj2H(H*RoK9sQCr4t`nrVJ`@HioTH+ld/<5:s(E$b.1LB!NGM
%agHNdY%!fA+<K-gO&F8"U3t`98Dq\&Y\D)@Y1`_b&BmMC4<]9Zl8j[B/R^)__4<iG$V3>K`E1'%eSQ9XEkQH?bcn@LOqaGtaT^3'
%H)<Z7^=Pn,I,g?-,2c^,-/lg.`@Sod86oPIE)]X=K+KJgbJ+63C8`'t$IcjrO/D?%Rg40d*8X(;M9/P4=R(`e>YHnQ3#YUjOauC]
%;CP?K`l^D+[-W_T*m2$\+n8%f.bOs:_?"1C&qa/eIYbfP#Y.*ELTmpHiF($^nLL2QjBQ:DY$@nJ+\l:c\PN<LYRGLq-'K#33<Kh'
%i`E[",H-=oGO"6I#rNu21Zo&W[7"*j)_`*hnGron>Wcmu7;h*&`DBG*&dl/ih3hY!qk0W0kn*7_)<1Y2bpNo>+MgP2=1Vhp@6_3#
%$Za*qIH4,.F\u9f[BAtRp8+n5,$#shN)B^bCpMImP@'h>E-pNMhrOhWLA6o2K81h3Cm`+=\6Sg9EKgmWe6$G$@@sN*.A6n\ZH(/>
%r%9hsIIQVVMgad&,c_<T%o)'//&H-K:)HoNL!.$#`<9ZTN'L4d<E9XN(p?U'QrlqH#<lOGZ!6)E7k^A5Lb3&+'pWtiL8lj=&7H>G
%OQDC1NdKk4!k`7cL*n_*&_.?LX.4:X<A\>+aF3(U5tJ9dMk/=W-sF?[')l(G-MGK'&o-u#8b)Ck?9ksk9OruVTa+sUMW,4E)($79
%A(sDqOj5W7`#qBXCu2bGhkFSc'p3AE5bX(XQC;hf#0pW!1C,fS5!Hqo*aa+j%B;Z#6nIiF"aVEuiIF@;8EPTj>+^d:YR6R<_2?/W
%S>["(2XCKX"p^#[iM+(oAX(+?bUJW!`GhsK#pBW2ZY[q6BZWFo0=3"@$58H<RY0`Z4?ub@q23gI_XG5aIm.pg4q6UTih8km%Wssb
%7r1L?#!q\"MW;J\c918[[oMtT\0_&@Ji50/>t$\>[6u2Cf\lFj0jAm`ePK5#31cB!rmirlr(i8J#dMgZkZnERh)+p=ee#c-=-![Y
%@a9P)U@o_E:&)F(NgG.L&Y*="PF2`@Q[k;?Pt,snf8Ja^ADZ6.pb`V5pl'e0!gT1SR\h"-+dO`2K7&mkCh2]P&&e!s&7jp$k'ET<
%Wi9lI=Ies*1W"f6Hn`ILUT:]*RXSQW:UhE4#[,]\<+]:K:f#&\=E"ai5QP+-XEn*0.*1of91?(T3Lq30X.h.tQgkdof*m(c(;_Z=
%oMF*#(R9.)=B2f0AG![lccS_s$VMJ<K0WR_5i<]D84VL$o`#Z:([J>$Ld!d6R.DXL9*3$r*t33+,<e$(J6d<=b%[&"lH8,1A"5I1
%;R_oGIqHACX8MipDfh^I@EfJMWic^[)]i./3TE05/:<D;aa&+6MA%R]S0(^rkWKBu:`"a8N_D.FS<\==J4/4Ei@W)7S;c$bYWcm6
%n1.e2)rq!Qki21IgUq6001/pC#>EL">TL%NiZYQJ*nfKc<Id2,CH4H3CXg!k:L->q34"[bA.h7L[oM[Kr#cd+/.H2'UL<2;JX/oG
%Kuk9i(-jm@ZZWT*B>*,C6@B'---)YA=Q5n@p:7gCAq_^uNf<SJGs!U)lNt)hkUL3dZpG'JeC>G0a8Sds*oi#rcn!s5iFkX(O.K[n
%"(2`QaAgAg%f.WH_cr:"O!(,&$jaVg``7/HpKqS8d`[Tpl*-scWK^Ds"q)/5Oc_obG=4.VF%q[HMLgXIpT0roHQ;+W#=th`#Qck_
%)Js/8U;I)^fc%9"aA+G>)do<bn_r`tSJSH0Kr`0&$Z)UV?DdibERZF&'#t!ZYeo#jE%]4BVg1lgoBEOL<(@g',I>)/;iU8e'#Qsi
%/(Y3)j:%Sh>n$C>#(gsY"Z)[IF)Fu@Zlf)872Od4TrdnH1e6!'l<tMk+/n3R*jKYMJ*4.2c%uMX<&=_".tNHmRUk:W`3n+FQ`tm>
%o'*>N/@38A)XJ2-^0KHUiAb>[2hOMHcn?[]%b;Vf>.LL`1rtI?@:Jd=BM-XV)'1#Y3<Q\BNIltKYRM#h1tDC]4P)(F$"m?;b!Q45
%j>%u,C^amE;'e\O[EnupagZSO$W)i5:cM,CFU$X@OBb;QkGY0O":0e"RM0#i&1AWER(=/Ajp7Zpkc>8$@']h4g<Qh>Sg?JdmfW/%
%qIMoIS=utR>*!\KJYB@I@'JM3cp#MT[j4G/N5*'l(U5_GGOI]sR;RafHK)^*P$*'5\LnHpM5Z9o3g0UQ;a,/3hR7FVCK%.Iln:#l
%!i[QPF6Y!84N=pQ/$L^hXq8'(Xe<c&W1&t?8/C[>i?-(j/R8cbfPNp'SlOfbL-:f'qNOPTdLkT1[P>*,FLY!ub\8gOHAMp_*nkP*
%qP7+kdj'9C$S.=Fh)Q59BH(s=_nP^2BlLOUd<g1.gSZP,[4jl);He`BCXA4.[(nH>/":cjLB&WLoe[Z;#V+C"Q5$_W$ECE;`EGN^
%nu@-1hHW[QMD:1pF&!gZNpSubK#l](-?40t"/dU@:r?#<)3Gk4DQB<n#VbL>ZBn_@dml^Z%5jc:?[Zda.B4uWCcshe0r_H2:;Wt_
%mP,MrY]Rr674".lDDr10?E_(@+:/`PKIUl@RX.m+pX4aIG[boTl:4uACa(G@lGn]e*7C13U5NM$0gP=r\]Fj[BH+3t_ujF[[Y+<F
%Au!od95G!Ya,$AT&_8<,Jn;urV`PI)=oRX@72J-cZN;Z;?Yc0g8Q`[65!CX`5EN8R-\FrMR-X<7HoTh%EJ`+6+nZ_#HJ.S%L7DGh
%`0Leih760U6Ul)Xi?W:WOcQ2R_K3V78$Zg,cS9W+fL<F7R5<uTE_`MTeO/lV4t#><[G^^QC'@T5D=T'C<[b_4DXFoV.JmH49cr1o
%59Jb1@\X%U83+\o@t,,B-W"l1cT\ZNL$G>TaLbVU2,]St+Kg9uJhnJ6[7O1?mk]F*mXg=b>cHg[Ep%Vm*XEBAMOrQhA.$h=q`)iq
%ZBQCN*7]t>ql.+jB]$#p./?eo-s6VCXFiLMe7.,`P&QsP5\[9>"=Wc)f`IsH_urO=b8*-bASgdT1(V5s&r.0!J@dpeS49C:At?+r
%6tf$'8ihrs?Q'Me1AL'mJ;"*6/NN]QKas$Yl.Qm.UrcXg2FkcL/:!B6bF2rh+0&'u5IdreAt.`a-@`3>g4ibd;9Q3:%&8tPed/e(
%jOtS,dgabc/;tKYhUCjAEOl/hHWRPi66dbNAHs1(9;kOIPN\YoajfC[U**qe_(:`1.*4`d.Qh^_Wu_i%nj9KW+/QfHGiRVahkG4(
%aP=&$l[Xc[A@usUaf&VMfZ?eOm2dctSc3A%coG%gNEmD``n;.qmfsg<O?M<)JePmZIu_g3AQKW&lI$Z0B705#REZG&oQdZBW,4!#
%IXEAWaA!"B2%1(PW`ADVU7SB%_&$/XTbFBM4A;L>al@W@Pb5kF7NMCD"U[UOXIL8]JSOdRfu[(34ZE*?*=-U.pC`kpWcJ#^5WKn:
%2C6UBbkrDnMOHu-a;ScGVSi/q>0n;)hlW`.n91<ldl%GY:]&3r<5kM*R`ELf^d>j*[9S&!TLPb.DrYlWSK*4HTnCX&!o",t/=1?W
%ZWTBYImMUK57AfB43P%tlXHM8Ueanqs74P+AWZ;7+nnDis*tIXTaecYZ$<%)I=.]?S85JE(8rDei/S`-(,'t%*XL&CUgL.WnHUdi
%*Th:=LKEWsdW7AQmUt>%I$8j?m8I=4Ob,?.H''%lC@0?l'+l'pPE;m.l-(u!/0*!ULNq)<l_$RP8S7o1,nW/Ej]_#V1m2/`#uIXA
%a7Kr!0X3#]#+&!Ig*<U\kQ7knfZO`o,,u3&\s*SqqaE'c)F`"6*o.s<BAKXM&-Y/COp#t@4[5TRkgg#&#6b_pHDEoimtiM'!]nqt
%7,u<Kh%XA^d,us#4Q`TT(AY+TWLTY4L=PSl0@rNi'B(!=-?t_8ViY]n8A*7?[5S5*=BsP)+;R/YX*d,u9Zo&p0)",I/(aNl%)f$7
%,1YArb<E,0oq\$L7nHAPA?pRDg-Hjio%VtK2$/tmlDCAs'luk;_MoT[E#!ME_)"aZQ0Q2cH%6E/V^J9/QI38R)]VQZof!bbWOa?O
%SC@3THlhP0J%1Y:>addEpuXfriEElCmu/nW&TWr4^VI?72O8R9&P)*M\_AP?bAa'NEWPjT2S!)I`mhO@Z9\"UmVCR9-EI_T=m,di
%^<2,#>5PF-W_tLh6Q5h7r/k0QL][!J'&`8RJpN"5ptYIEQ+[A$#*DCBFI^gT)RDq6b6"53Mt(b'Ou_:KLFgf"Q$MbAB0CH&KU#=:
%+8;hkcr5:@E95uc8.))k=n/m11]0=^FXZ#EC68c]I>#8,4a;e&V2Q:4r65^;aT;huq*<A/A[j1=lb4!(_Wm]r49mm$U@d$s;F8oW
%=@5f)<@Si9Ede^//Z?)dLJB:8FZMZJ&4<r(7c?QK3[Uq1]*cZKZuMfW=XYrmaCRMpMGL1:?'h=YnI@]M+5g-)+d<q!T]"OdbbflM
%fg^-Rn67Q=.Xe'$kGZN7'eCne.f%W:L[OIB.4sG#l/o")a"t4N7ASkAb2`J3?]9ja==%C@2A_Y>2/LT1DU))dETS><AVJLS?q`0(
%p6eWAB/t2^.M]5T'2$kbIt@$Fs7P*`=fKS#-8Jrh^+rEPm!])n-bJhrOTg&GmEa$l$-=V]W4FXPSfcN>):"d<eOI/'Z0^,K+j`%V
%*<&Z0::sfWj>'+I.&;9tbWJ+DG-#>^NRCm-m$Y*%c9?K8E9SiQo_*fm/(-.VB'1<uh?0r>8(on+3VN#.U0I-5MjZTjnns[0P?\mF
%%BQh#p3kB"h^G=.6`0'Z8VT!r#:KHZ&rSE\?5XF]cuP&up]5eF+(cPmf-oGFf/DtW9Whg@r0lN(.%)aa%'/]_ZP6*nj_rPUJYbM1
%;Dg@d2_0a4[!tDFes0V9B&/.mqYRXY]Y7)LQG3[3CJi]-A<Ae9^k.^\\6Ea5WT%un.VV7)>,\?Rnf2+q)ucs,+mUaX)"Sl#[$YG[
%bUEQ0L*.@6DN]U_AX>*tnCaQf;]h][QnPD`&poae9Fr&rZfYtJrP\8/LS]\B!<$3ibSG8lW0TqL)6@'Ln(\1X"*Sml.#HfY<HZ=;
%#a84\mu59k'Pj4DON[*QZ0L.h]:no&2`b8`hJ>+/WNACq3)5>HM)+]WH-1*0&!Zb8M2`^7Ke/A+=J,\4=P#QB[mZ&u*l`%YA`%=e
%&bKQ\EQ!rA'J$tu9i`e)))A&o$L57TRW?ZU#\;ms5&?pW).Ad5:E@4+@_I/rHj31D[hRe3c"nQ4/iS8Tq%8$WQUjj!T)1B;FA[?r
%Da*tXG63[p`:OT(C<lGpmN[FSB&XELa@otbNs&V5O<,b6Cd,nZ]!0qX*#-;/Sh)48(TAcM@-&@H'Oq+7c9K'++ljQ[rKpCg*.XK4
%@2j<>U2XKoXO-n;$Wt9_P'LVZc8giT`nO:j(.1,r1S&KP;F0n;:_kj"%Z*PSoDf8`/^+oekWl2tl.4TXk4&?!2WK=8TNgb0I[3?*
%Ek0j4h+q>(GeNcnd>4^/ro!=&D;X)(E>8=V+!q_Ci[Id3AaJ(PI$cW6P:G,HCXh(G_7p(VV+<agV=,Qq.TCI,Dn<<>789bh$@fbM
%<^f5p:d:e,7qgcMqGdm`"9l5%qM*FfA8du(4LXq@o9C_80_L<=aF\3#VbRDB<./dGabU7$'LD8Bh>('pJPE#4Jd5H,C*bcL6:a`;
%Oa)Q9KQpH&1'g`2OVCECDZi6mJ#S)7ku@E(-2@+8^>IfVmus/Oe]X;mj):R,KM`"qj1nEITY4BCGE"`\HO@uIe31=s7#-uO5Uhm5
%Z`V`9\XSuF2Ut(2;id"R'Io+mqUs@sjDHHW8RSJCc0j%rO,uX07q-OuT,`McBm^:;O#<t!HtqtCqAdf-!GuYN4VRp]0ofIC<>:&u
%IA2eoVhB-hCU?YOkKMrrY)#q`dN6>fTW7'iSbd>('1AQg0Eo^@;fBL#U]a+qYW];IeBK$9I1IePOqkA_[ME>2*3/%#NTgD0)XKn*
%2C``UQ8?SS,`BpVPo?JM!(DN])Q-fknaO\eK\;+R,h5]B0sf!)FWGXh$r'P-;&5tO3P'SS25KdnXdp:VO"W]@%nnM8:"JHESkCPk
%:iq-s6=_RgV7+R&dh0GHTNcfeG0>6(JV`D!_483WXU_^bJ]qr-:KrE<"]P^6^2=]>L(_H?BH[)2TI\?1.Z0nG#%^+^cVE\iS(=q@
%(^03E8b_#k+.QBMI@Y8=GK\T%;YlMo5DU4qPRq[KT&^#Dbb5d75Wk_#8#dj+_1A5)\k+q1MYSVsf!jP?$3lSh`!i0/BsrYELFR-1
%pK3e1KIO>PI05`*5mkIp=a#[p$r:WH\1m`=K2+'/%SW8di3Y_'/>0jao!e%:Zjq&iQg+tMkN.DnPZ29N=Hs*oXT=\iM)gY"cf*6D
%fJXJU#8R9,[%TkAR6WoI(BH;elaUrL\oibPAB0Rk%K0$hZE?b+,*NhaAVm-!DaE&?jZBIlVfQtOPkqlo.Kn7>CS2(f9^2C9TVS\r
%6cG0+E]2GfEaeReO%8ih%Qs;P-S6J6DcZjB5\01Ip).1%>906^V)gK\8>X5n-6KZ)Tb3QhFHZlSA`]FB`4;`@[>e^/06),NIE)@]
%iFZCPVlBaa+\QaR.Z$HA_P\e;+;<ZHMUs<ZjgY1_.Za*9_fI)IZFjS&LmBJJL0MO%idJ>EE`b`uVH[cN,.<P6L6K(^6WKpGch$u<
%<b:FLB'/r;9@*1J2eu6RDb?HKd9.c]CVC?)P`WJ%LF$k&M(ERBCD"c]Zs#Od*LUG'EDRs?5#f+R*-#E3Jhakro+Ai;.1We5$#n".
%bhP#(UmN*1KTd+^A_WK]^rH3*h!^5*PtAV7+&pr!=eOG.KSm,J@X:f[!p\M#J:\Q<fH/CA.76T0=pjr#8eT&1e'/8K%b=ipld)5:
%hBVJ]?n!..@t^_@djE>\B5m!9jRc17+5Tb]oHLUu4Z=*g3WqQ(p*[O4]@5eF@;+smMFV,1(/"4roMKlEpAiG=ETg]M0<rqu*7!Qj
%f-j84K6&sVXL`XhG6b3S]%n7/6$8-A6KoM@,(IRC`*NM<bQ[gRe2KX*PUu$gC[H$0ZL,\gop?q%ffqiM)=qhEI"7I?pR.so)rfpa
%1cF=e4^7D,n>p^Oksemi=5(7so4M;<7&1ZFY\bRg)1G!BWH=3RGbr\;VB:tWljIVQs$C@r((n8ASj7<W3tshdqd.JW27p%6^[P%/
%99(t]:o^%pi@rAN`s\m](#0<S(*q3M8T<,TG;The`M6/:LV-0R+19@chYo$GGsm?;pS!u&Q+=<S4CTgIAVIu28/0TL;^F5*[fpL"
%O1IqfID?X;".pPd,d1jV7SRC)rM$\aBSMg]EY6LB$3&rsh85&CN*2_mjV`k82NR6T67bH&;os?sJ!e5X]l1AFnQZr22];_"j`]-U
%*,0h;+F<=#^%&G*%HCd@NW"E5I7_aU;c@M":+'2lq",?.l$bi7hmCTQ$kmrr)qS9[b7B@X^iHn'MT<`W(hgFFf@uE[V/L]F2]uBf
%hf&M^DT'3B;epk:5npJ.Q.%R2GEG`^-"*^[U*Qicf%gPT)Y+ZWMLe*A(MU1(?0B0t,06c[,?^2rFD#r`)-M'jI9`8+^?JfqEcmq7
%R<1!.l"+H,VA+D0`VT1/20WccL\Af$h-HDfcb*pWJl,O6qRN<W5>6DA"Z/5pk+6m?8;#;g,+kW=Y4dCJXIdqYL0>\tf"r<K.m)p`
%3=KP@Q_K&:gQ@B=+Pe7l9;9:h8&m9a"WAjBFX:>]PZ>qG1p?Qs1W,:YP)ag%Lf"gF+Y-T6$S%NT9`+d\)Z"M"PY1j]P_.`(Rs(7e
%9?/J/qIU3;*u1!"3>>c\/M_TL$"Xl!Y_oSCI73d]\DU'N:Mr2@b1,DUm1RfWCRsqQOl9K?Jh%9pKp+'Qk*.Pc0!m0,Dl7B9kQI$)
%"C0g.!>(tF)%Tn"M\nJ9BG0IfQ-F0=CCbo,2,1",,eeHEY0rEHj11[E<=nWC+LkJq@!\ZENX.75oPJ0i>l!h)Y"\u@_7iTC9GDq'
%O.HT<5giJ!];^[ljRs-DRj^+6_^.X<^-Na\_g<Ra4gB&$(t-`D53u780-:m?@&%ZQ'j&''BU8WaPhM6pX29Z]+7'3RSk+KuF&7!+
%&n=:gI6l9$S0RW>'YjSH'uLX3k^<>EDGO;m+M?*!rE>GZ@YiAV:s*B,$k=klm86IV+,(B98u0%fU-bi_7.]t]qT)2h@M/'5cs)`#
%nl=aP&U-S&E[gOSRL%8FGZt*UEt%E4dm9-n=Rn9Yc3%B@D0Tg^%k^2t/X(uOYSDSrfZ7]Ga]*t(OM[gQbRXc0.\sq6BHN'VLfHu&
%[,lfBF\NO?HOWh^Z$54.^K"-g/#4XE$B\WE.,`O]2:reBb"_t,U]+:[0pJ]^0[`Ds3)CW[)m)TF8jZT/6;lkA6P^EN+'+<d*-,rC
%(<[83>HW69Pl^m$jNZ5\>fBp=k&UgS1jqSh+acF*'8Iob6f-Q"W^L`s!j?*\kh`0THiI<OA)[uF5`n_/k0TPQ`?.ogG,D'=Ma.S,
%kKL1`W'P@/M%_sk,cB*n&\Arf_\QJ^&*o=)I\.FSkm1gYCaIkh#b'JlcTj\Z-a[-Vg3SKs-VbkJ"@t^s:uk:aZH&YY/.*>)6)CYh
%X<S['7ISW`SZk>PA'FtgP1<_UIi7'PF)OkYWpKL#Fb`d=]1Q%rXo.0\W61A;)EOG("R;OUMF:W/g8o(ePZJ5.!@^[7p*cAXG6OdZ
%G0(e&oM%SC,o`/1UZ@@F<Bh]3;Y5UQFH>4(NVGX`>)c+2_A*j*;e(=(Yg4VQ+B5tp)Y*?Ji]3%IcS#+7]HQ)WQ]EQ:a&naJ2Ua6m
%ONp$=%meGoQ:OE;[^1n&Y6@4l[XFh,X$S,A>3)PVrElKX[1Zpk8&Ris+!s-=`[ZTPFQ=Qh.3@MWU>:F1fg]2D:bn-t8%(^lRRbc4
%?C1*kV2UU;BU<Pt*;kNWm^]-<foTJ@PTUM*)OrZh0UbRn<Fc;!HSG\rc2jqHh6s<?f#n=Z5ge(uXt1])S^"2GS1;A67nCYq6jqY)
%27Pr5+bc*@^<((?J3i)!U2VM1k#q1Foi</3Cq;3a3moWdj/:%q)RdmK`%%2_cXNm-EmQF1?$P8],?jRj"duM=)I5GGAf+0)c6+bB
%&*WW#rr-K.Mb[$f!@#oF8ppE0kqjuecn/_7=3ZKX]FZ:8/LZ-2P_0lo6c064h0r6XGhm3IY2IPu'RHkJHpPTb`s@UF[FkQ3&6#N-
%[j1KGO;SJ#*Y&ZuTs!rIK61>,bL)'7I9QX"fH7JraDWum*V'K87CDTcPMH_Z*8V*Y/rE!NV[JZoMfpCDE9n)HS10pfEGh"ErMVDP
%:l;)/\,qA"!sQ\L<8=PGTboIT."$0^]VCal%?8V/`g#^bi=@tXdHH5D#"TZt5YgRc.[5cOJqdcG2sC^3cYC[C*>2>:+'oNscc=[U
%`nLV$X.o+B"kh*oJjJVY44#h9cBV"-Z7YG`rWkr(0N]WY?@t.b$i)$on04Yf#qEt>W\h>#U[f4q"LhMH>d)pp3@B;"bh@hE*$qC$
%eKriHpS_=Kj(%coaTUDDVou:[!LSJZ&EOMm0]O,U,sA1:lC`de6O_o?!G+:NeFDZrF`s*SA=S-:^RD_E2#2J>+ndC7Cg5sZe8/."
%qV"1@4<9H&4JG"JkTOMJ(eBp^[o)D'W1%t#f5X!9Z6t%='XKYok:"N\S,W_(,bAJTKtoB1$e`27fg6T<0pnl-o.=T\Y'"?#;V:!Q
%A%]@$>25t&I:r)8<@(1V#;&FtKh,!,_bPu<W9W&1nBf1CO3jXY.(M+$=&m38_iuZ4p=$<,8!V3EHH*L\6k(f;7(rD^Y?kc[l2n(X
%o!Pal:i]BS`*"73T@Y_tW1U;@:L$NBND&pQ_tT,BZKZ+40&`>aZ6j&#mcPX6l4['>9i'466]:[E@VZ3h_7UoAeCUqAK7alpGhAKi
%><[nrMjnrWRZV^cpdujR)T@ji2,YPI9<j+B.$RAio`[de:<N$Slku%b]1_Ekn!r#Y8.Gl@n7WXf/4UX,jmFo8&!9lL7q#K)@Tm%&
%M8_PH[4r0uo8hiWe%BT2hfMqV:Z^gSI;@Pfk&M"[OPoA^"&Q=)8WU]cpg^O5^oROL\L,"H1Xg4O"g&7`.e));jD/C.]XOXq_,(?J
%a/5-U4ull"1b8eh2is*t5]YfTU#VWMr+rX^PsO7qEf[_.Z,[kO@%qfrBQ\,4r2SC%@^??Z+6>)ErPa%u4dql!m1S0aBtkobEQ0VU
%L.d%kb/:h%#@nbD,^i4?"6H;t#Y7=\U5%*?T;N]0m\=^jr.0=D/t,1SG4mu:"aW3mG+`8_BC-/&8gSUP,#7^Wj(+@d2Gfe&3LM&W
%h'W%bX-M<_Au!h@V.%eu.Ik(i><%f.>+KWPS7H2g(K$sI:q'?7K42L&9k$N^J^%ioK6>YG8!m?F9@l*l)+0(RC)R<`+>5eH!g81U
%F0j7mW?;)$Ymk`\1C+SY^A]$VqYIhUrB63hEC)%t=pf#*Gp#NARpK+ug->@rQ:oQ'4l4+;Q`<,JRIj4t[n=BKTe3_8LML>-O$4Kn
%=eP:3pSIE"HL-"`B5)'GcPN"j;d7"brqnSNlMp5Icen`DBbnP<+O1o&5*V:MSWA=o@TZ93'&+3`R1#8Habaic5gaDM8o:-.6^2.\
%?,h9[JDQj$j/U)qLG2qYdi>i$T]N^7)DAVUDD^C3p0M8/Dn`?KpQrYk7t5OuWM2T@B$A^h'mK.8+gd&1E:Q4bs'$VrL;k:KTSN-"
%QeUo`8asoE#8HKke(j@5;Q/e:E8GJ`QKR,gI)5]'ZPh*VrRTpXG&B;GF)BD!8^L>krW1.jD#"7e8OVlf6_m_*(FuR8Xb)8o^)KM>
%pl(N:%d;a-</VFF5D6/Y&u>,B$a`%j7ct09[i;GoC@(]gjYj2?.$CE/YH\s3^D#+'iW)#:9g%An,X5WW4FfAZSQ%<3QGa'>H^bE_
%GsF*qK"ZZ,#b;/cl+#ITh2f7squ,[EmT)HZp3V-"2kE$-a14`WNbt0G",4%uBl=j:3;ut>YXu#A1/YRQEE=`9gV^O)*kU>'(13g4
%\3,73$("'j`n_uI54o-?jmH?t(-FPKRj\$Q[DLBDVJXTK)Xabb2JKM,O9sCpH%C8QV.lCUkT4hfp['BLWtra6`s/9A:l"(>r(N>*
%Bt`&V/<?=ZI'riPZN8B(rSF.4K7>3-LgaJ8p^@^?T7Q"HZN%'XRrMdHGXlob].RJHqndA,=Kq:I/e8t!*4<]K21O85K)C&/"^2so
%U\"0HgW_W=2tgH;'+20r="&T00;9m;B'(%3P^t"f;#;$HM:R?kTu!u3DQSJ@ijYoSA[rhL.V.6acQ*SK_LU_]l22\+3[((ODRVmS
%F)Q07i-i5jN9Bn`n)1jnl?5jIIt[ksZ8p;/_\-ReLM)1$NnNmeBP/MY#^"kH"\0(jCdRUaEne>eIn.>2KBMiD2mb\i!QWrSS)$e`
%DX7%Wc##kj;[qmX%kHhQXDah]T</nY.\D0@L_$"17OFQkWI26^c;kuhSi\&H'-dc;;2QkK"?LG05g+4M1gY.3h/()PHb[$SWEc[(
%Jbt\5X:L(O_]:j96D12u+uqn`o`ZPuF70^b]$\dPI*:nLEC>5#mXX0-`n1lBs,\qN[]aneOl`PUS8WW/CUW34Z/=<(pctq5JM@aI
%bYeH4+uE,m`etpGA6=Xu9a"n73`P;i\.?:"EA+&+c53#^S^>"3M5?1!+/8HVf!YBu$a`%i7d'*^gF[8eC@&EQk&l,;?iK%<?iKc6
%55tN,p5<cKG02miR64!7W;&F;;^Y$??Di8;cJ/#SIIPPs&ep%k&1K]+cFeZ?\TY,#$K3Jds"0J*LVpZ_;XN<\d,3)GP0]5=Qh`7.
%$(u@G9W'.62"X<j*,)TF"ju\"*REQ4i43)CM0So11'J@LNALnH&$eag'b9He0>F)/R>eKL=t-ar/^E,"\JF3K,^a_pZsi=TY;*Ij
%]=r?)WabSIj?/>AX5nBcJE$HUmd#AQ4+<`4p>\1FrL:H24BDB0*oa)1)^`t(N^u'bVVMg;"d`N(?E8]uFdHuqN&a6WA#13f'UgO?
%Z;LFFA\$(k\ZUuqT^a6#V=DFk*`_547!![$=l*X2cY`V^-elDD6Q`tcEjcd4@U+T:daIpF)f@\_,No$Zl`s,hFi;6FHOY]G?/$ZT
%7p,S/J\@eh<<m,8U@S!G=j6joOEB;[;0R4$QWB_O#gJ7YeB_NW;!%$]+p,XQd&$W=*oi6DfePhI+e+:Ps5Q-[Ar5Y<^,$L.]S=KV
%PW;o@4EQ4u2KW2kn?R->IL@a3Xh)rIp56i,[r"3&Ng`Eb?e81^^?F`urMZ;6jRjec(f6l2;d:CXrp*K;]hGik2*%u0*Prrd:qrs[
%l@N!ompSt#O%>S4c'J.]GkRCW!e^r7`eu%jQ_#fR(@-$C@sNe5[@eN.OS[p/dh_d1BD4,X;>_3%0gRK>p1Z0\5Y#NA?aTDPB?9N3
%F)b#VL>[j7<mO=89r*X9<`Xs,iF(E!L_)l![8s^jijL0h/Hr+od81R[W`*^A,Cb9#V3u5r7No.nMOC,<F=3:.O7l=[R_R+>=Tj'A
%T@BW.rJ3Lu]oDN!c;'+":blU>q%'cU!N]Q93LR3p5e#"df4;;MXD_=$ZQOEA'FDoSO<Uo3g[=blaRI*leV!>U'1u-=-R`ot1K8b'
%?;X$Qa`#X_S=cZ"YH0F2Cn]%R4N>Ro,ip@%JRA!K87Y#,Y\DE1*@8hLaVP3r$r,i0g1ErP#g7i`f0X[-hH0qmb!deV`b[Y0n1=*8
%P))N1?fa.F*Z[me;AMssV34i-pLi3KPT"M-D`iXbTrj)tS'jR3G3dS^5rNV)59X&1eOdikZ&9b2-n@ZJR-3"@')P8g3TW;9`/qrP
%;\_$PXp^<UN5fmt(@20sQK$q\$8*q_=iO0ZI10JP4MG+U8>GWI`Wga+"nGNa["4o:Au:o[#+`SAe?70+Nts#r/>-#pVeE1\>]NmJ
%<"g$W*uY7X.VDZt$VD\L^W(lffgKJl%4=,JkS"kMJ&o-6G.5mt$p^^7P?lYt0i>$RPp'S].L*)9nkcbFD_:C>_s:1S/E;j-^[P`W
%%kSoh&W8NLS]j_Ze_h1c?I!&g:8c/Q+J_mg;!krSq%Tb^-<UPRg#gAfG1$WmZZtR0%"4:e=9Z@ZeVihVM^A!#2F"M&gCPgh:NIs>
%bXLE!EQ%1-oqIR5eBt<\&;,+l^MfI3O>jtNJuqSX[IpR/X>Gr]="e5s:W_m['U?-g<h]+]i>nr',]<[*bRb.rP"3EtgM,%BEXD-8
%Nb")NF1)04PdH&efa@9MG.mKGF2,+Y2/!;PMrO@G7jqqqB^BRo9naQ2raT7&L\LXMc'aQhUuuG.C@b85M8p;D;.V"<<NDu2ZhCnP
%hngiccaf'kGQtG-DW=a^fmU!39O@NSNj1F!=$T-[pW]=>:V@3nan"6B+#GDNCR'cWFt>D>Au_gY[?b+u^#fseH8aSMN2tUipnkIM
%-=pV^30P?-ohaVf?<Om9;BqG%7ckQ3RiF`k@5eL7B@\ph*9?_q=b!i[(M0hoJ?;^!fQF=:H%K(8HrL@WD0Fs48_4O8\P88:_*`;B
%WT-iUJ)f28Re,H'71LrfH0[(kaV5G+H!'=/H&lX2Oqh5RH'UFMD^H[TI:^%;4j"Sg$g!E%qV9giYki>,o79C(8(CWaoXNR-.$L%E
%df/H@!U=Q+51O(N0%*M(T>rreRFe='rDgN1EI-F4$"+H1Yj'40kd#kEW7*be[Ru8$5.R$/Vp)9c!EjD-1ANojjur".VD1D#`hE;7
%)"A5;"!>@VSBkAK4aM#5&'gKp_jHZ[PoMeO,g7]O,O:E%#8KtdNnQI)1<bZ!MXNM^W7Mk%kL/"icmO\CHFF_5[:.\eSmGg.4j3_=
%XabF]LNM!b!*u?^`O^M$$m[i*W+oE,443(j9I0Pc/?UNMc))R4O%Jdf1E_UTBcHm5*1!!Ccql**.A'-mn3alSr32_CSuP5fT[IGc
%5HZ;-QqQMpp"JfkJfO]-$9-"=enmgArAMegAu/`T3,#uD048gtXmY>[V(q47_GDG;Y(\er_sQj&Fco/i2%IS;ja=]"F.f>>i0)Zf
%jg<;P*IZ0T=iKaU-97E-=fX8<Y+>RgE[&Z3r(sh"J>Me+3M'O>o,8]LRIUG*-R"KM#d@iFqDA,!@/3(Jk#D9Zlm8o_^g/sUO\JF(
%(l_9@`D]^Pqh^*^`les0!2K9b"Te84njnV#1YfQN&HGDQ](;I,5[V'k"]Buo#:T+!mkM0B>sl8m^!0'3Qrk%0-GAml-,l\5@?[!S
%C<u!?>CUVZJG(i1U8PujkZEd&Df6Y?2N-AIS3O"5C"MLZ>YA]j:R+kDfM*>IB@l.M,hC?X.Uh!n>e;$8.D6h/;;`dV#CHFB0d!QX
%GLj/Jr)@KYni(NV[;/\5Y.R5A28Y+tLW<es=k&Mh33U<e1>[Hf`36/-hj`AIfZAp26fjeH2]jLY32n-80m`9N+.+=pe@V?"fQSG*
%R*1/HDk%a'UV<g+khWGoP4]fq3N"m.N;4To:'W?Dc"rCR3rWgPK_86q%c#h1)%/:XjM#`@8FK'a<SBDUh(Ne9:TaT+GuF-*BGF66
%Gr5oX%DnK0>k^g0i0!)l7[=]lquQI&+VZ?1L_!T6$FKtrXk]i_#(q]3M@Mq_G_?W,+)'gGq+s:-<qj?$02T1fO:/WNI>c3@7tS%C
%Jd_<Bd;lm3TGu:5(Ph$93"Bg?)saf^gbeDe9!so'@lloK#WPe]%MtMZ[4f_pQG_'dk0\S[l`ddijkX$d0a)]gY8e06=`Z@u,_\Sg
%Be.*f.n*)J=ka[d^"6]h_U<0$3L`+Yf:HUXM>$FRnM9s>Jr7RN1+SBZCQI;iqr-:SpUS9"I?ho'!4J;5l[g6uaRREt\Zb2`4s1L#
%i#.58FFnh3C;"%I<btD+of82TG)KjOC'h@rJ8\d(j*rq+qu>-n:D!Wf_:-MTb#)6r&plc$MTGfA8H(H94`Uhog,#6&]ag[`%T<R$
%-'6_f()>gR>jIq[Wo<Km#Ec=s7k<6)]Lb4qUGAmNoCmJCGl%+hJr8[Z%9"h<B4r1X:#t2VDXL;hqI`nm8QpAA#pj@:b8d=4CMTVh
%_m.b4`s8u@>>VT%..b&:(!4C^Z6Tp[>H"nYH1Ct^CN.Ij80n^R&Sa[@)i>:Fa:fU2+Z/+@X$p,-mOV]!3ejrk+I3:)8Ar_X_;)r1
%o)P(?6e$g?IEtbFe$k\G'2;GZSfp$[0s/@9#H.;%B-Ua3HMNMsiVVf>OlO).d/u\k_r^mK,aX)hbNRn2(K:Pa(Rcod$fn_k-r_g>
%Ae=X4G]1PTl\,UB9s%MojS$M9#*l)QB*X)\XEtou]NbJ/JR)mrefX^YE%0D>n&8L37,&#P%5mV8N/?.eDmGqm@EME;=nJLLLRt85
%c'#bLo-1(Y9=@1DW?V:3LFr>bdm*3m53O6r+/0n"+h;1TSJBp6e`PO)nRt<=l1")`H11nD)+%'<kQhdaIi&oYTYAPQB8j3q'eMH:
%ku))]]VC]Dkbr**Q!AJs%.6PSYq;J3#Lu"S@mJENf26K?EH9]@$"Utf*%=,@P_6/=F/8;)>=h(hMUtesih)no,/YVC[q#@#><]If
%-P%5E]Qr'VYp[,ul7"3<!J\9q#8,gN)M.#iXgkPPE8'*IBY^I:-YJg^e&MNg#IdO8iWt"%G.[TQrd\UGkE`AVG^e"NML^B)Il_&I
%T\0:)i9<MAeaeN:(`;%2p_SuiWGJ[ro(e)F2FFZ`MQml6Cut/D$gI^Bk]IHoN=JI_d/JVg^=>Nf[Vscf`u]H'N+BQ_UK?*pap+Ne
%o9tb%39:d@C=feNKLbTP*0j/_>N?3!YCBhL]qKqBMligd%]'Ga+5&YlNdf.@$-LRPmjZO!`8co&<qCn3[^d<,Cda0[UqMSt83SB6
%lJ\d3W35hB;#\UkLP_UT^W.lr$d/8Z=-#Q#Ao_DEI@dmaDc@48do78nN9K_;O7^E!k##`22P'7=(+$NO:HG\5JMCPf)ps.<h?kXa
%k6t<noKG?UO#-l+H;p,If-l!k?BZPEQH9e#S1#f8Th9>gdUf?BG2"'3K*<ndcOD6R:j"+j#,uHFTnbgYK\hVBa?1(V>PjUreM]`I
%0FHj:s*-r@LqX9D*7H(m=GD7T!0SZ)l>%WrU&.BVQ!WEe@[D8u6+>Yjp1p6[mktYl:b'?"OsbT"3tAWOj0A%7!-_g*p=V&m)+>Yg
%ShE+:2M1GYPgGWAFnMhGGE7)$UI=s/Ni=3fabbnup+tS)W8Xpg'f\[IG2o[2(^5S:MtY"%^.#:qEHZj)53e@qcu>jKOh4,=2e@dr
%:je[NX\eS$:(uB`@#G\QStT6te;8j1oeI#6jM&9#O).9$?5`9O%k'=7eL+k<,0j`;Q\,MP#B+[l:+mr6!fB)tU3DJ6is,5I'q2\i
%D<#"JGk<eGnn,Kbr$'[UEoN9721?g&%Xki$3F)C\Qk,noZp-%ch9_M,g5b2CN%tlnT"r]O.I2U#-2XgdHGq>r,.Aei;22kVcJ]'k
%SQR/CW7g?6XbnUK[CqB,#PMR.j`.AgU1i!D:.;pgJ>j'G7nOPLUIH_:.:Ze=\_<[^R%I[2[e%YoVg]:.^RWb5hNUjPT!Rm_;o0]I
%IBk,,Vok?1Cj[^1kd]jYOdpR4*@G#>[C=l/MB:(="-W;0+Iu8F7kg$&3aUDALLH`Gq!Xj+VOoScS_6=R<ZS^Ojd:<2-(Op!3[q?k
%loL#^_,Y+WG4TJS(e1FqXgP8*JBgW3jG6@i`h;HV;#LNM#tc/Vm^AHaJ"5!oZs!-aF>>W6\@.dDOX"S2CZ)n'.W^I0ed/A;lbsN?
%g3c6Y-dh^hGj=<mV,rsDgICJ)Ap"PYmY'GFWVIUehsK0[9<AHE:.AhJnZ,9,3C^E_O7&q.0YFdFb!#CpJ\F(4iECgW:24ru%tHc*
%HREOXGX12L$R[t<JjkIt[`SW2`9:H\T+?-.?NCdno8$l%NT=k,/m>74YR`U9*AmN3dI'h;4.N1(!_daThgq<d+XT;e\Hq9l^aoR%
%RTUct>mMW/8^Y9/_eiYrcUR'X>ZjTIf7k*mhtBQOJ[3rt(N$<BIJ"Sjk5U6!cj5?pr,RIP'oFCaM,r%$85:[[4ng?U\i)hBc6Ka-
%aER3oL\Z*TkatB(qA088a%3;8N-iRNNbY*;l)om&hf]c`V+7?YH:-\oE&,B6m`tT5mZo[olc\kO!PS@]=(Ke;5EqTL'I`_C(?g56
%%F3S;mku-TgtM4fAaFY&M(?K@N@b#HBu:V/&?>)W*Zha'('oEe(>52c9"W/M^2GA66+K,@EsEDi.9X[W7.D.`Q%%M*611Z-i-`06
%?F(*eNW%GR/B:lWP9RXdL+7/oDU);oZq/)'lO4(YjPMR$8)S-2r"VpGSsPq'K()rdQ_t<AL6j^-mN8<g`tJ-Xs8VZ.$-kKAmkir%
%\Y7nC.OjJ!Jj0*r<eJ;\?B\iO"3m"J8WeD'&BFup"D9S=Dfh&Er-^B>\n(0b:E>P:j>i1oJJKHFaul0&>G:r)$Q?3mheY40\ZOcD
%QY[pBRF'e.=b3C"g:&q9b\tOK0]B3@TWCta81.1pI@u?NGaH%)9?X#TH0g'u-ug7'rZQa/h$dG+[fop+HDC*)m^p_54Lb$2HP;[d
%X[FLh$7Zb:^2oD<jVZt[3We]:/;aTT1VMI(>Z#b.o?2P@rS'ftc@"u3hOQ-YD)f`]mQJ^Ck1pg6Id2NFf=UK0)t?@4^UH/b2oYT8
%?:P;@q'@eB-@1/BER!6[]qN?K](^?SF2!ZNV0P-:^2ZFlcQ,h-MFH<:rXcMXLKip.DJ4IdJrUY[D`=0UgtqMecST*;U?Wu$9,YP+
%-+:1R.PTR$oQ_hbHm>B98Y\\s+SddJnpfi9PQl3C/C+_m$.8?p3I[:'iVf;@\tSeb$Td/3^>!J>F%a9U-h0GmCI5C%at*7k?eK=q
%M5o]:\T$Q4,TsQ]LWE8t?&TFs--9_&0=N1d9CD0BfKe<,\s.=)2b9Z7A-J$@/^X(8"W_NjghjLY\Zt$R/4oh^?36f(dO:C/FcM?u
%JWfdDq^!H8b)*hU`1q\?]IrF99#:CBS=+RIQd<\^khU;*ZD-LmY?"`T:<^=%aR[h"SZd7pD)UCa[GT]-hd1S6n`#?-l<9;i8cK'"
%->@RDGTP0B;kXbn_eUW`W4Vgt.PO:PF(Ct^N`Or6oH/s=Q$k`%W<Y::I<n:s99uq!RYGQ/JhU^UWRBVFZYap*<MuWa<-=J%a-rbq
%^5!grjU8@?FReD]67>4d#huiRW:M\+5Ro5;4]`'J;Q1qA$ho9B%tXF*qID"C-1m&34gb3]VE$7&9Cd$7KhW%P'@_!.ZZE7J1O3U:
%fQ8]J-(>f##;eY]6(gbqFZ+/N&!kVsi\9lE[0(8j8lP4'6JeV\E!RJ,#(&V_=raijD&Yn2*HCkJ>&g;klB9?iL&qoQ3>_rJfn^,+
%<SYfmQ8kinQd0q"r*hoprr*'QNAEcXW@rY$:US`7Tg-X%A4?TjlD'QMV\[EuT_d@i\_FW2On0$A+iKa:g=8XL?3AnuN`S>ORE5fI
%9>_4J%+u+,F?!@4W]332IVp'mfdG`rS89SM(EmSV9o`h=)u,>joW#H?!_IKB\d(P\"[<Yp`9i=L.Q)TM1n>eM.KSL&g`tYQ]iB)j
%VW6;ecUA:UP#4&qUi3i'n.[Fb<H//BoSBuPn(gci4'.7%@sEoP#TAjj]WP//hE=k50?t]*J39#?`]R'1WQJ.<]a.Y-&$!>P2"%MQ
%(TJa/5/XOaWd='nn#T&"+4\;0Jss0Yg9#l7-80h5GXmX<.Ch^j`qb:CL7i1e1L8lfWh6fQ->N*mX"bO(I--!E1S.0hjEUlcmtMTg
%.@"p4XZ'TDeU?pX*fCh2.bqY4JNqB$)kSL3QG)L/,u$g[JLEQ*&h?u@FT+#E&Y!eE-$i87Kjk>8#lB7:`CXH6QV+]=*!B:-^\Z[/
%bMGMA<`BHb8Slk;LCtnIl,P%&nINR45R2KY`DYoQW?c(gPnCiSr+_:rh5U#hprA$q4]A;VYQ"G9Y<-(@4.iOPj'/`_G#?M2:7Do`
%,tgU.'DMhCj/u2f:LO4CA.V'q^PXj8d\ZMigNBTg9"NTE;(;Kk1cDF@9%'OgeGS[X:"L')d8EC8\qgI5_;&7<##(;<8U#ALIe]0Y
%CW&&3MIUpK'R4\7XkIXY]b;,h/Ch%EB'd!OPi(;3kVnBdAI/g./ig+Q0]A.1EfbVj'Ru*c*b54;D6IlA,cReR(boak:5>d!)1Z]Y
%.1@8reQLb6fsSgI7qqsq$AcCE&rDli?riT>PN2UJ9uXT?La7CTMe-kT?Ks6b[a<2]HY?=O*YX'>Zh+;[3tuW/mV]L?J;-t^;T<BF
%@rS\)BcK_.(lGIu:`7(2=6:A-Sd6NtI4`>p/ZL;.,dH/$]q]!jGg*R-0mR*D"H.lEffZ[nIDNrZq/m\lb9,m/%bYg8$r;Ys4$#KZ
%jWtK>*Uri+qY")[lHg?6-6nt87")N30?CBLW0)$9LoNMnr@ZqP=en)"[jI@rIqDI&fod'cRGe(enpDOLIV4_,l\n,rEj'q%<k'e$
%HS;?l"WIl3;3.hj6!9S3]Y'ZJeI!A4JW;h)I<f2?47>$Hj&(LkPnL:<`B]Et,rp_JGc#5aOWu$,Ai==K*lYK2BoKA_'6IV2#5(Y,
%kh?2sjbG'HBF1)hh`tu.INadq,<HO27VTbkgT"UO_'B>h*4A?qf<W+$.>S`tEG?X#iQ2UK)Wr<D^76)hATOCrQW?egU@:Z3_*V)2
%h0p8OBl$_\PY6/QkL)+$pSsI;C\qtqf4ka@,'"-Vl`ndl^T8)2/+u2:p`Z![-pJG.4*N<:AWJI%_a&5N6a,A>Fh"l8p&TT=NIt;/
%X:6S$<)R$^romVVkj*'46?>HP]/=q3fX<#,mm_?q<+f%4FH!!6RH%1sM8UoiL;Mk69i=be\ur8?4u`5-,1#5T-HELCngL-*LHchV
%jo.p,["S]"gu,IBS*Z!=6LUd$%Gq!X6R6Ypn\ri/h9^DLY.`63af!>LLmV%'\NG($mlk[0$dKhHN>o?RDXXY$[b3hr>Ue7\1F*tf
%b*oE58Jk[l$aMsY\H@=rI/O(77p$,brZNgek_q+&S'ZQN]4kISg3cl1D^PV\/Z<.Wg^1Z`U"1lAs);]-\D;4QUE^>2ZpE%`lf$k)
%D8A6LCi<M#:gF\I\*=)tjP>aSOgS35he=iS);[<aU%))fH_\Q3"O$0d%]G,l+$5R.1MQ^Qk0K?JNLN)?eXc2`A*)V-;B]Y<Z>?q.
%^EO<3\1B0b*28Za6]1=b9f5[eOqe4BFf5QnX)mbqV76%(7TZd5XV+'OBqs7n,R+CIlr4aG;_BE*?oX7_5ZVT][Yp*aY_@oa*ZJmQ
%p>P>:^/QF!Q\skl15(OPVm>2]I<bE:$Z^9g6@bZOBB<s1"-f3IFBaHt^YlArKFc1n[La%4dTTtPRs<i635=$I$OIW^.6<:X,F5`5
%.-H.D$UP?A^OF#\;b,^;o/Cs,GDVKCOGB^bLD*A[.F3&W`Cjs#%g2ZaQPiO/B,O)7C5=1_02@V&X$jl1ZrP4VS8h(&Op+;c.h39,
%-X!<Rn/Z3b-03cYbD'O[X)^qb@giYaL>LaJl]i!UZEA^Q4i2\uC?HCg;M+)Wjj^o7;7?kX+G+19<iLR6OsKc-_>"RQKat<!5c2+8
%_PlH\rhW2HZg8$Rmc#b/#,[:?S>IX61kiF4*+IO%a,,YoX`M9gW"LRVd9J+=i[6QR;/'%i"=YQ0]>L$Bg.]d_L8#`imj5]iYii!@
%4&ahge3nEuY9HD&FU>U5=]7cGcu!u%qs,X9oOpJj128N3Od`":jqAZ`KS.;`LQ(GJhS/n-bL#@%dP7Q4F_q(sSXsL=J$FLfFBr"5
%<M%I<+Hqm,c&a?JU@EDad7YDXW`laa""a4@?BkpW&%'5S[-t/t9=m<HAB_>En6B$m=dh2T,e$%a4YGeP0(fh]#SSTObgU#ud`V7<
%eh9L2OjFut1"0@*>p*<r)5j`7WIgU#d9SAZD&X?Z'U?:k(rea[Jh$:`O4A4g8-Dh:?+!uB[<cZ<R#6Te)XT+G\L1+fBp<oP=#h\O
%[JkFnTJP\mNVn>e`q(?EQfj,Qjd:ZMXeAe`Lc'I%hQ!_A7@^R4.VDk%,,oL?/a,$K8k0cs5aB"W=8/<j04Bt`/*/fm&+</`<o?1?
%cK)*`2!2Af1L\niQeu@[JOSWF%3HQ;m+<DT9)4EGZmDQk*)RZS7G/c'ZcoJ!V-\Fk&YTln[FX;(/2JimJCi?PA2Q+oQmM-pqb6:K
%op0;Z3RG03jOb\5h8f9[g6&;h7mgPO+qj.AY".M1VO8i]^1cn8,FLTqXf,P'b*#,GPh5%-?r;m:7\r@sA"qVrMM7_GeY(*n^D*[a
%8D;V8O?EdnjZ)pH\.ShCFgTJf`WF<9/^*j`>T8c?GVjB9X3J&_3f?P3,]$+'aK)&oE[AhHaME8&IaS6pqq#O'29eCg;Z(LCNHFrs
%IMjHJ%-J[NRKlVgq3tDkGu>")Q.8gGgR'D3Gde^AS=moiT6]o>'dPge6\gdK`NU]Hm+"7868e*EeGqeY$O%j1kOj97@YqQI^[aE=
%3(d+&WK3eUWt1tpU/,gYiut(tau<D"a>6VQUtCTg$C'%7fh-0h#^pEmYcTi$ko<R2RB+R:-V1t`#_+CPeHb(X)-tA`S5IL3<-5Xh
%/5t!)#1QE<Ar6VckGnOQn7,HPpdJueH1>*>\VQ]>U8F8CfNZl]4U=h1)C6($([`rP]%-)73(]s<(eG7:GZaK@(+%LsW3n_)3t!ME
%$#u)`^-_F.-YjgcA6#mJG1A!c70c9*Rt[)A;9G#3UFBA=[9!#/ad6iXl:,QpW2>_%<Or1rJqQ4OkLNk\_r5TB4+;EWbbj_Udf-5^
%I]AD'iOR"-,;,g>319@iqiqJ)![t?DZU?-l,pW]=X:Kj0@F5#c5ZRL.!t*H-QLsC&;%:F@W17Khn'p%-0rH+c5cP,N_7Y1V102S4
%*u->#9JM0K34V;4a,Ps@7;4D).n>q7JJ_6E&hXq6HX>JXo6/9Wa8WWA4.u@<jq,4ULru$@8ab=bd.5s2]jGa8mV^$CHbV?8.13"&
%7c/@`Qs!QNR`AqG&!(&:;k`D&bu7n>lcRhW!CJ>n1j]n(Bt1rI"H0198!tum#fsNTO7MP`F@P7c;<]j,F@1<$WpY$u*?i=+bjB`C
%I"iK4Nhh@.=<hRi]tM)LH7b=_"hk0:.ZppoSBsR?A-#P&iFMuo-ZTKr2MmtF3RNWP>.=8VT?pt=I#CpbEgc),H2I.oX^bSXi3?DF
%=:t-qOstOXo]?oFq*sj!Npb,R\2g9IC;YL>E4R2E(4EkoMsT[#nH>"(&kBY42't0;G.gdscI%q*grOl&cgCXF7#PBq2o;L2`C/7:
%hd;8`bj7H"1ca[o!EI38j5g(%g8lAnOY2Z"A!A(#(?m':(oDsN*`/mmFY?qXDiBS1e#ht6/Lbui'a+W0ki3tCBsa/0i.]]N-#3o(
%*K!W"O3cb?/3R+L([)9kMJF"b,SF&nlR@ISWb_(d%d;a!g-/cu5GYSQ1nFlgRKf`6-Z6CU=8UD`WC)oAR"^sYI4')7lr[_a.6S*8
%=4a^H-s!;,*jB.FdJhCE_f*gcbBR/2^bd,9JQds"FJBOfO"Ut*]uj`eZ?!;1B%\A%mKXG\%D?QiIqko\%#2A/?$EUB]"_#h;2QLk
%k3/j,ff=lG^)YkM+s80cAZQUe:hk!(2YL`e5h(Nn6H45sMS;EHWDN5T-VC!E?G5es/K=$Fo$d]Z#gkYFq4X1^o#':$BRT6!cM*g;
%]3FgTg929Eeu"!$4e^JZ3iHr"a4Lp!Z/FQ)5e3.:Q?q%^PobUm6BC';0+poQPNH.**mIOl$m\`kOMT2\qC*V-Dkab>cEOnRBoDY_
%[La7b<midoeI.O^64#G&Yi^UVDIqk$Z3]ilHlgV(:fn;>)UI="(I$APB6,%qk+K>$H0@!GU>k429u>OQceWtN=rD12G-_gr7RC^g
%JTWa8YRKF4AbX-)7;m6D>3KDT5rR5/"F&$5]X_3VRlgL4Qi.XH7jLR*BQ.);%WL[.Hk2INY=?hcHVtnQXa$l:$[^<Ng51\rHAd>(
%<q->RbjbDq"TJH\#ND(s;0dt=Fa<2$_O-R#rVi@N\bg]Z)d/bXKCdX5XmXejC?O3([.S@WPdl(C9kh)8DZF<=BY+,\J,IKVJ+rit
%^&@ics6^DIocM>+qs2#smr*^P^VBdDQX;B'&-)H$J+r8Yq=C6XkPtDOcbKM9hu2#rroMau5Q1Q<P9]tj5@4B^nooT_oq26X5Q(?/
%Q[eiRs6tM'\7f4<LHk_0J,5Yls6fmfqXk#q~>
%AI9_PrivateDataEnd
