%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: plata_11.eps
%%Creator: Adobe Illustrator(R) 19.1
%%For: user
%%CreationDate: 5/12/2016
%%BoundingBox: 0 0 1201 1200
%%HiResBoundingBox: 0 0 1200.0010 1200
%%CropBox: 0 0 1200.0010 1200
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.1.0 x29 R agm 4.7731 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=100 RasterRes=1 GradRes=1 Text=1 Stroke=0 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c067 79.157747, 2015/03/30-23:40:42        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
            xmlns:photoshop="http://ns.adobe.com/photoshop/1.0/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">abstract vector background with high tech circuit board Vector Illustration</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:creator>
            <rdf:Seq>
               <rdf:li>Iryna</rdf:li>
            </rdf:Seq>
         </dc:creator>
         <dc:description>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">abstract vector background with high tech circuit board Vector Illustration</rdf:li>
            </rdf:Alt>
         </dc:description>
         <dc:subject>
            <rdf:Bag>
               <rdf:li>circuit</rdf:li>
               <rdf:li>vector</rdf:li>
               <rdf:li>backgrounds</rdf:li>
               <rdf:li>tech</rdf:li>
               <rdf:li>processor</rdf:li>
               <rdf:li>abstract</rdf:li>
               <rdf:li>abstraction</rdf:li>
               <rdf:li>chip</rdf:li>
               <rdf:li>card</rdf:li>
               <rdf:li>design</rdf:li>
               <rdf:li>electrical equipment</rdf:li>
               <rdf:li>integrated</rdf:li>
               <rdf:li>technical</rdf:li>
               <rdf:li>computer part</rdf:li>
               <rdf:li>hardware</rdf:li>
               <rdf:li>engineering</rdf:li>
               <rdf:li>line</rdf:li>
               <rdf:li>cyberspace</rdf:li>
               <rdf:li>computer equipment</rdf:li>
               <rdf:li>graphic</rdf:li>
               <rdf:li>electronics industry</rdf:li>
               <rdf:li>digital</rdf:li>
               <rdf:li>technology</rdf:li>
               <rdf:li>computer</rdf:li>
               <rdf:li>circuit board</rdf:li>
               <rdf:li>illustration</rdf:li>
               <rdf:li>creativity</rdf:li>
               <rdf:li>connection</rdf:li>
               <rdf:li>computing</rdf:li>
               <rdf:li>backdrop</rdf:li>
               <rdf:li>science</rdf:li>
               <rdf:li>cover</rdf:li>
               <rdf:li>internal</rdf:li>
               <rdf:li>connect</rdf:li>
               <rdf:li>art</rdf:li>
               <rdf:li>industry</rdf:li>
               <rdf:li>conceptual</rdf:li>
               <rdf:li>construction</rdf:li>
               <rdf:li>textured</rdf:li>
               <rdf:li>computer chip</rdf:li>
               <rdf:li>mother board</rdf:li>
               <rdf:li>motherboard</rdf:li>
               <rdf:li>black</rdf:li>
               <rdf:li>blue</rdf:li>
               <rdf:li>sun</rdf:li>
               <rdf:li>moon</rdf:li>
               <rdf:li>planet</rdf:li>
               <rdf:li>nature</rdf:li>
               <rdf:li>trees</rdf:li>
               <rdf:li>landscape</rdf:li>
            </rdf:Bag>
         </dc:subject>
         <xmp:MetadataDate>2016-05-12T13:18:08+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2016-05-12T13:18:08+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2016-05-12T13:18:08+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A8qYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUVp2mX+o3At7KEzSmnwigpyYKKkk&#xA;AVZgN+5ycMcpmgGnPqIYo8UzQ/BR48m+aWsxeLpdw9uakMqFjQGleIq1PemWflclXwmnGPammE+A&#xA;5I8Xv/TySdlZGKsCrKaMp2II6gjKHOBvcNYpdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirM/I/lrR5xDqetanBplqZWWGe4X1Yo3iQyoZovSuOaylCiqUN&#xA;d9syYYwIcZdbm1MpZxhhttZP6qI8r94ZVoWt+X9R84zzw3Gk6ZdaoQtzeVuIrasil3EcIsmVBVKG&#xA;irufc5lY80MdmABNee/zj+p1Wo0efUUMplGNk7iNRrlZjk+XPz70DpvnHVNf8xaRC9rcXVte6iLM&#xA;adpj8J3t4zESkDOoHOQyVZ2ANBSqLXIZtbOQsbb/AKm/R9iYcU+E+qgCb6k39grYedmzRXaz+X41&#xA;O3eX609hqsErq8WrCaOcx82AjmHor+8ipw5R8lbvw2radJ4kBLi9Xne/2fdYcOPax02YwMP3fdDh&#xA;PCR58XX+kIkdx3rmM0MkE0kMq8ZI2KOvgymhGasijReqhISAI5FZgZOxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVfEqPKiO4jRmAaQgkKCdyQKnb2wgbsZEgEgW&#xA;9Z0nzD5U0W20XUUu7fVdSt563NzDp/1az06SIl7b99NZ3EkzyiOoAjFOJ69c2MM+P6Z8MvMbV/sb&#xA;ebzaLUH95iM8Z58MjxEm/LKIV5Eo7WNEi1e9kvPLF5NqN1pkTamNY062SRYlitxPcRCT/ceGRS4+&#xA;Foag1UA14iUssZRE94kHY1fwvb7QxxaTJDJLCRDJGUd48RiCP53CeOiNxtLfbkWNw+Y9N1fULG6k&#xA;8r2lvc6gJLHSorK5l0yCHUeNrHHqHqFioIkBLCqp47gk4UzcQSOcj+h3WGAjOUIn6YQHef4ufmyv&#xA;yhbSWAl0VLlHv0uJIpoluWvIzIhYMYZIW4iIcCSz7cj13zcaIjhAB5+d/j49Xju3InxTKY2j1oR+&#xA;d8yenDziGDfm5oV1pfmZJbhFVr6BZjwrQspMZ6luyjvmB2lhMMlnqHe+zOsjm05Ef4JV+lg+a96J&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kq1ncNbXcFwh4tD&#xA;IsitStCrAg0PXpkoyogsMsOOJieop6/oWs6DNb3Ok6JerHb3EyahdWVs15HG80AJEn1aQpHIor8c&#xA;SdU6bqubjEMMpXGuLy4vu/R3PHamWsx46y8XBy34D/shZB7pH+KrQ1/pkFx9Y/eqdQmiHC4/R9xN&#xA;MscY4v8ACYWLRiL4N9+7M2OWEaJJF9/Cf1LpMuQSiIRkY2fSMkQDe/SXO9+7oAAk2on8uJNa0jUL&#xA;XVRNbWMNqL6wvobiSG4lhNZlQQxQelDL/IvTc13zBlCEuc/sLvMefPAVHAe8+uPP57+9NrvzzpMW&#xA;lXWnaFrFtpFvcO7Q2sEd6YYTLP6jMnrxXUihU+FVjK71atcy46mMcfBGdf6b58j9ld7p59mTy6nx&#xA;suEy374cq2jtKIO/WXFsBFgnnnXrTX/NV/qtnaw2dpOyiC3t4UtowkaLGCIo/hUtx5H3OavJw8R4&#xA;fpep0wyeGPErj61ySHIN7sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdiqfeWdTghvrP1BbQXdnOlxp97PEjRCWNgyx3SFSskTsoBLA8f9Woy6HDIcJ27j+v8bOH&#xA;nE8Z8SFyHWP6Y+Y7v4vfSf6T5h8+aRr93rVmLaK9uZ5rmkM8UEcU09RI0AtpouAZWK8VPEim2y0t&#xA;hGcdqBHmf2uJny4cvqEpwlVXGJuu7eJ/WOhFlO5tHsdX8vS315pCrrttbxLYWqxN9WuGM5DhZor1&#xA;eCpGa/Epqa/LMrLCUwDwC6/FVJ1mmzY8UpxOeQje3InlvxcWPb4dEl8y6hMdLvW1OytNBvbmO2tL&#xA;fT9LhSNZYoFWrzLzfYvCpL8ufInqNsokODGRL0k9B89/L7XNxSGbPGWMnJGO5lLoa4fTsNyLJFcP&#xA;uLAcwXeuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxVEXt/eX0/r3czTzcEj5uanjGoRR9CqBkpzMjZNteLDDGOGAobn57lD5FsdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiq5Y3ZWZVLKg5OQKhRUCp8NyB&#xA;hpBIHxW4EuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kou&#xA;30rUrmyub2C2kltLTibmdVJVORoOR+ZyccciCQNg0z1OOE4wlICUuQ72TeZkv7PQI9HtLE/oawmj&#xA;N1qZj3mvJYy5q32UAV+IA3IA5E7AZmoEow4APRE7nvLp+zzCec5ZS/ezBqF8oA18eV91k0OdxO1M&#xA;wuoTDH6s3NfTiKCQM1RReBB5VPam+YUbsU7vJXCbNCufL7ej0C5i1+612317T9IFp5mguTb32l+n&#xA;SJpBGGWZQxVlLq++9a0ZWqdtnITMxOMayA0R+n8e8F5jHLBDCcGTJxaeUbjO96v6T02I91ekig3p&#xA;d5eWWszalp2mG78va1brea1pfAenFFNLJE6KyAUVG5mPbZeo+EnHHIxmZRjcJi5D5/gLqMUMmIY8&#xA;k+HPilw459SQIkHfv24vPlzpiPm/RoNF8z6lpVu7SQWk7RxM9OXHqK07gHMHU4hjySiOQLu+zNVL&#xA;UaaGWQoyjuk+UOe7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXrmuabZaVpN7o9raibS9GZJNTSSeSETGSdokdvSXlIzGDk1WAX4VUfDU7zLjEImAHpjz3q966c+&#xA;X6nh9HnnmyxyylWTLYhUQaqIJG59P1UNiTuTzoEX5lyay6KaehokVzNbJECFMtzBJIkksiAUG6sE&#xA;Wp4rTuSTja8z/wAyyPiOrsuwY4Qe/MYiV90ZAEAH5Wep+QhOmwXM+o2sFq/pXMs0aQScivF2YBW5&#xA;DcUPfNfjBMgBzt6HPOMccpSFxAN+57f5Ng1W6fULDWpUOqWIli/SNr8EtTafu35UX440l2JXsK1K&#xA;inQaUSNxn9Q6j+r+1877UnigITwj93Ojwy3H17j3Ejv762JY1r/6XuY76301odK8u6Mba3khqVa6&#xA;c8WEYcL8XDnspI613Zicxc3GbEajCND3/j8c3baLwoGMsl5M+XiN/wA0b7151z+4ABJ/zM0C6bXN&#xA;e18SxfVU1M2Zhq/q+p6SyV+zw40P81fbMfX4Txzn04q+xz+wNbEYcWCjxeFxXtVWR339lebHNf8A&#xA;LF9ocVg15JF619CJ/qyk+rEDQqJVIFKhu3eo6g5i5tOcYF9Q7bRdoQ1BnwA1A1fQ+78dx6pPlDnO&#xA;xV2KuxV2KuxV2KuxV2KuxVN9I8tXuq6dqV7bSxf7jIxNJbs9JnjAJdkUfsoq1Ymg6DqaZfiwGcZE&#xA;fwuDqdfDDkhCQP7w1fQHpZ8+n6koyhznYq7FXYq7FXYq7FXYq7FXYq7FXYqrWlpdXl1Fa2sTTXEz&#xA;BIokFWZj0AGSjEyNDmwy5Y44mUjURzKP8x6JHo2oCyW+gv2EavLJbNzRHP2k5DY0p1B6U6GoFmfF&#xA;4cqsH3ONodWdRj4+GUN9uLnXf+PtG70lpv8AE/kuC91g8ZFtXlvbmBFE0sdvPJI6ivw8n9DvsGJa&#xA;m5zbX42EGfdv37E/q+byQh+U1Zhi5cQEQTsDKIA+A4vfQAvYI/8AMLyx5E/5VJbeYJdeCeeLrUp7&#xA;+48uGWJnifUXRpYGgA9aP0oo0bm561/mUDWanJIkiQrcy/01PTdm6fFGAljlxDgjC+h8PiF/Gzvy&#xA;5U8Xtre4ubiO3t42lnlYJFEgLMzMaAADqTmPGJJoc3YZJxhEykaiOZe++S7O4g1zzBdSrxh1HUdR&#xA;ksmqD6sbcuDrTs/ElfECo2zpdLEicyf4pSp8z7VyxlhwxHOGPGJeR2sfDr3Jj5Z8r/ljqV/caj+Y&#xA;l99Q0exhrY1mMEb3k0shdvgHJ5BFbpxHcDoaZr9dCW0/4R9/4D0PYeaBMsRJGSY2ocogDrRA3lte&#xA;1nzeePdNceYre6vFRJdb1uHULK1YfH9UjWRI5ZIzy4B+a8eW53PTCJGUwZbGcxKvJZYowwyhjJlD&#xA;DhlAy/pEg0PlvXLldsQ8yaNBZRaPfSXMtxJrFuLy6eSharn4yDuT8XIfFvUVzCz4hHhld8Qsu60G&#xA;qOQ5ICIiMUuEV5cvsrl3qfnjQrTQvM95pdoztbwCFo2lYO5EsKSmrBIgd3/lGDV4RjyGI5CvuZdk&#xA;ayWp00cs64jxctuUiO893ekWYzsnYq7FXYq7FXYq7FXYq7FWc/llqWi6Lfp5jKPda1oM6ahHp8h4&#xA;29xaxsqyx8grUcq7GrbCgFGqaZWGMTCRBImN/g6vWZckc0IyjGWCex7+LmPhsO/qdqFivz585w+b&#xA;/wAydQ1OLTk00RKlo0aMHaRoagyyMFSrNWnToBlOXHwSMe5y9Jn8bFHJVcQuubF9V8sSaZotlf3V&#xA;1Et5eNX9F/7vjiIqkjjtyG9DTYrStTxsyafggJE7np1aNN2gM2aUIxPBH+P+EnqB7v0HltZJmO7B&#xA;2KuxV2KuxV2KuxV2KuxVWtLS6vLqK1tYmmuJmCRRIKszHoAMlGJkaHNhlyxxxMpGojmWeaJpukaT&#xA;azPc3ASxUmDV9XjJrK5X/jn2JUMWB/3fKv7NaHj9vZYscYDc7fxS/wB7H9J/B5rV58ueQER6+cIH&#xA;oP8AVMn+8ievPf6YJfGyN7ObESLZGRvqwmoZBHU8OfHblx60zWzqzw8npMPHwDjrjreuV9ae1flQ&#xA;AdJ0QEVBDgg/8xU+b/s76Y/jqXz72jP73L+P4IvE1W5vLoKOc91cPQdWd5HP3lmJzQbyPeS+hExh&#xA;HujEfAAPX/I3kiDSkEtwonv5lpNIpBVUYGsUbVA4kAhnr8dCAREHdt5pNIIbneX4/Hn/AFbLwva/&#xA;a8sxqO0By/WfPuH8OxIMzGIniRs0gjiXlK3wDj4deIPw7fDudun7IUCPZAd34/H48uaMqFnl+Px1&#xA;59b9cb8zzadcpFZGOOaK2mjuRIV9VDMwdYWEYp6nIyt6MXWVviPGIfFiagxO3cb+PT3+Q/i5/S7b&#xA;s+GSBM7IMomPca24t/4aoccv4B6ReQ7ROe30K21G11W4IttQs7prnU7q61OzvbiRY+f7v07eXk0j&#xA;NxUAQjj3NN8wiICQkdpA2SZRJ+w8/g7uE808csUfVCcOGAjinCIut7lGqG5+s30HRPPKNv5Yi1by&#xA;jr3my1S98saFohutStHT1fULyyxQr6R2f966txbbbfK82AzhE3Qjjv7W/R64Yc+WPCZSyZyABX8w&#xA;E86VtN8seTPzt/O3XG02+fy3octstzZxSpH60jW8UUBSOPnwQVDSUBNFHQfs66c5TNncvSYMEMMe&#xA;GA4Y2TXvNn7S8c1/TIdK13UtMhu47+GwupraO+hp6c6wyMglShb4XC8hv0yDcgMVdirsVdirsVdi&#xA;rsVZb+Xn5W+cfzAu7y18tWqTvYRCW5aWVIkUOSEWrH7TEGnyxV6XqHn+w81fl7ZeRdM8oLp2teX7&#xA;Rre9v09PeZY/q7RqQoYfWJT6j82+0v7X2sy9JjlLiofwup7WzwxjGZGv3gPwF2w++0aKHzVqN+xh&#xA;mv5JZLm2WWjW1pb8tr266gjcGKP9rY0NVVsueIDIZbXz8gP5x/QOv36nDqjLTQgLEABE19U5f6nD&#xA;/fS/h3HQmMQ82T6LPrDzaRNc3MLqDPc3ZrJLMa85OgPxdTXvXtTMDUmBncST7+93vZsM0cQGURie&#xA;gjyA6D4fdXVJsoc92KuxV2KuxV2KuxV2KuxVm3lO0s4fK93qtxKbWD15INQuYhW5a3VIqW1v2Rp3&#xA;lo7H9keFQ2w00QMZkdhe/fW2w99vPdpZZy1McURxHhBiD9PFcvVLv4QNh3+dERzXdduNWuIyY1tr&#xA;K2X0rCwir6UEVa8Vr1Y9WY7sdzmLmzGZ7gOQ7nbaPRxwRO/FOW8pHnI/jkOQCWZS5b3L8p/+OXof&#xA;+y/6ips6Ls76Y/jqXzr2k/vMv4/gi8h8q/8AKT6P/wAxtt/ydXNHp/7yP9Yfe9z2j/i2T+pL/cl6&#xA;zq2pX0ev6PapKVgl1+1jkUUHJFuCwUnrSqL/AMCv8q03eXIROI/2wff+PseI02CBwZJEbjTzPx4f&#xA;2n5nvKfebNUn0vQ/MV1bqpa2uniiRh8Hp+lAwjI7pzlLFf2qBTVfhzI1GQwhMjof0D9f4DruzdPH&#xA;Nmwxl/FEH43Pf31Gr6bkerdDXXlvyW/5feU/MWk+ZpNW80NK1zrlgJY5DFJdwOZ3lhQepEYpVSJX&#xA;c0YdOozTafJOchf8Nn5972naGnwYMcgNjMRiB5RPIffXvPek/wCbX5haB5h8u+QLebytFpdnaRJL&#xA;eNavGJGhXjHJbRcVUoGjVZBy/mX3zFyYTCMSf4h+Pso/F2mm1kcs8kB/k5V79uf+m4o9fpZn+Ydp&#xA;5L8w6vdeUvINmbKddNsNPkSXmkCPd3sTwDcuwCLLykYbb+xzYRExDJCXOMR8rt52c8E8+DNi2jky&#xA;yJvrLhMf0Uwb81Py3vPKX5sWel0s0XVbL1rSK0CxRrzikgIZeESr+9Q706e9cxxMZM1xHDfT4Oyl&#xA;hnptERlkZmJsncmuK+tnl+xgnnLQdMskiudOhmtPTf6nqNhcnlJFdIgYlXFVdHXfkD1rsooMjqsM&#xA;Y7xFdCD3s+y9ZkyExyESv1RlHkYk93MEd32k2WLZhu5dirsVdirsVdirsVZZ+W/mXzlo2vGHyvrE&#xA;mjz6gjRXc6UK+igMjMykNUoqkrQcvDrlmLHxyEXG1epGHGZkXXTvJ2A+bOrXUrSCfU/Lnl0KJdNt&#xA;XuL6/vDzD3P1iGGaSYivqemkrs/UMQFHJK891CcY3jx/wjcnvsD7P2cufF5sU5iGp1JJ8SdRjH+b&#xA;wykAO7iIAHUXxGpfTzfzB5gW5V7CweQ2Jk9a5uZv7+8n3rPOanxPBK0UeJJJ1WbNfpjy+2R7z+Nn&#xA;q9FouCpzA46oAfTCP82P6T191BIcxnZOxV2KuxV2KpzpHlXUtYhjbTXt55nkaJ7UzRxzJQAq3CQp&#xA;yDVNOFehy/Fp5ZB6a91uBqu0ceAkZBICrvhJB+Iuq865oHVNMvNL1CfT71PTurZuEqAhqHr1FRle&#xA;TGYSMTzDk6fUQzYxkgbjLkmGsadpNt5f0K6tTJ9evkuJL1XaqgRy+nGVHFeP2W/aP0ZblhEQgRzN&#xA;383F0ufLPPljKuCBjw/EWevmOgVY7W2XyLNcG3m+syaii/WvTb0eEcJ4oJKcakyOSvXphER4JNG+&#xA;Ln8GEskjrRGxwjGdr33lzrn0FH3pPYWVxf31vY2y87m6lSCBCQKvIwVRU7Dc5RCBlIRHMufmyxxw&#xA;lOX0xBJ9w3ei6/omnaN+XVxHY33160ubtWhumURiR6RK/p7nktYmIPzH7JObXNijjwHhNgn9X6nl&#xA;NFq8mfXgzjwSjDcc6Hqq+4+off1YR5Y0aDV9VW2ubgWlnGjz3dy1PgijXkaV7k0UfPNdp8QnKiaH&#xA;V6LtDVHBi4ojimSBEd5P4tL72O1jvJ47WUz2qSMsE7LwLoDRWK1PGo3plcwATW4cnEZGAMhUq3HO&#xA;j73tn5T/APHL0P8A2X/UVNnQdnfTH8dS+fe0n95l/H8EXkPlX/lJ9H/5jbb/AJOrmj0/95H+sPve&#xA;57R/xbJ/Ul/uS9Q1r/lKdE/8CG2/5Ptm4zf3kf8Ahg+947Sf4tl/6F5f7kJ755QT6Nr1nzWN73U3&#xA;t4ZJDxjErW1u6K79E5+nxBbatK5kasXCY75V9gdb2QeHNinViGLiNc645g0OtXe29MH8j+WNS0e5&#xA;e7veKG/sLpVt6SLLG1vcQI6yB0Va1b9kn3oc1+k08oGz1ifsIei7X7Qx548MP4MkN9qPFGRFUfvp&#xA;jfmPTJrfyz5bvpZ7uU30VxwjuC5hjjikCKIOSgAE1qFY9jtXMLMBwQNknf4O70cpePlHBGMQY7gU&#xA;ZEizff0ZV5c842eqa1oF65a281G8tdNvXgX91e2UjLG7Tr9moTb5gbUpxzsGqE5wPLJYif6Q8/x+&#xA;zQ67sueHDlgPVpuCc43zhMbjh68/x/ONdS/L/wA5a75T8y+bW0+a7isdXeOHWZpw86WkEhjk4K7G&#xA;UpblQNttz/LmLkMBxRr1ce3u/Z+l2mAZpeFkJvH4PqHfKh/urP8ApfNiHnm3t4tPRba/hMUF7cQv&#xA;p3LndtKjuj3dy5PJ3k9OvQKAQF75PVxAjsRtI7df6x97X2RORmTKBswieLlCqBEIDkBG/eSCT0YV&#xA;mvegdirsVdirsVdirsVTzyXIY/MlswFSUnXfwaCRf45kaQ1kHx+513asb08vfH/dB6ZZeWYNLvPN&#xA;mpSXfO8ubO/NzbBf3cKTyx3FuGlrTm8Sl+Ph8t9vDTiBySvciXws2Ps3eQy6+WaGnxiPojPHR6yM&#xA;QYy27hL033+947Z2s13dwWkA5TXEixRKTSrOwVRX5nNFGJkQB1e9y5BCJlLlEWfgmPmjS9J0zVTZ&#xA;6Zf/AKRhjRRLPw4ASjZ1Xc1G1R86dRluoxxhKonicTs/UZc2LjyQ8Mk7Dy6fj49UoyhznYq7FXYq&#xA;ibfTdRuY/Ut7WaaOtOccbOKjtUA5OOOR5AtU8+OBqUgD5lH6d5X1S6uKXMT2FnGPUu764jZIoYgQ&#xA;Gc1Aqd6Ko3Y7DfLMenkTvsOpPRxs/aGOEfSROZ2jEHcnu/WeQG5Wa/qdpdywW1hG0Wm2EZgshJvK&#xA;6l2dpJT05OzlqDZeg6VIzZBIgR+mPJlotPKAMpm8kzcq5DYCh5ACu881KPV9Zk01dEjnlexeUOtm&#xA;u4aQ7AAD4jufs9K79cAyTMeC9u5nLTYhk8YgcYH1eX469yM8lIyedtBRwVddStAykUIInSoIyelH&#xA;76H9Yfe4/apB0eUj/Up/7kvUvOej3GpeUtMtbKwjubqW2uXNzNIsaW0VlKtPTDUo7qyx7MPhFCCA&#xA;Cu51WIzxRAFmj8K/FfjbjeytVHFqpynMxiJR2AviMwefkN5cuZ25m+WeWP8Apbf9s24/41zTaf8A&#xA;i/ql7PtD/J/8Mj+lR1jQRptjpl39dt7r9IwmYwwMWeGhpxcU96f6wYfs5HLh4IxNg8Q+TPS6zxZz&#xA;jwyj4cqs9fd+OVHq9d/Kf/jl6H/sv+oqbN52d9Mfx1Lw/tJ/eZfx/BF5D5V/5SfR/wDmNtv+Tq5o&#xA;9P8A3kf6w+97ntH/ABbJ/Ul/uS9Q1yS1i8w6bcXUy28FrrAuXkcqq/uDLKE5MVUcynGpO1c3GYgT&#xA;iSaAnfysvHaQSlgnGI4jLDw/6bhF/C7Vn8w3d5bWN1Bp8eqS61K9tqFqTS2ukjlmrK/ISBAhhDq9&#xA;PhViK0VSCcxkAQOLi2Pcee/2X5D4NY0UccpRlM4xiHFE/wAUbEdhyu+KiP4pAGt5WL1m0g8u6XHq&#xA;uq3gP1WwbT4YwGMlxOzxkBQ7cgqiCnxGoHWhBXLMsRijxSPKNe87fqadLllqshxYo/Vk4z3RjR7u&#xA;vq6deWxBY95m/wCcgvMOueVfKnl86ZZW6+VmgkiuQrOZntYTbxVU09McGJbiftUI40GaDFkMJCQ5&#xA;h9A1WnjmxyxyvhkK2Tjzf+XWnWv5Z6R+cGj6ja2d7fPGLjRVRJYPXdmjk9L1C4LAryeNlNN99t7c&#xA;ucGYnAcJ+Yv3OHpdDOOE4ss/Ej05iXD0uQPPzFML8v8An38xryyvPLFnq0qaNqlw99q1v+7jhoWE&#xA;k8jycQYozSrhSFPhkICWSd9eZ/SW7PLHp8FcogcMRzJ6ADqSxbX7qC713UrqBucFxdTSxPQiqPIz&#xA;KaHfocjmkJTkRyJLZosZhhhGXOMYg/AIDK3JdirsVdirsVdirsVT7yL/AMpZp/8ArP8A8m2zJ0f9&#xA;6HW9sf4rP4feHuHmmhivYRp66mZIbL0rB2Ecck01IeUhpQgKFrX+UEFSqsOh1HIiuLaO3nyfOuzu&#xA;cTx+HUp3LmQB6tvjfzIogkHh+kafc6d54sLC6VVuLXUYIpVRg6hlmUGjAkHOexwMMwieYkPvfRdT&#xA;njl0c5x+mWORH+lKUXv+9k//ABkf/iRyifMudi+ge4KGRbHYq7FXYqzDye2pPaLBbQac6PKf3l5q&#xA;M1tIDQdIIbyB2HhxiJPvmdpuKqAj8ZEfYJD7nRdqDGJcUjkuv4ccZD/TSxyA+MgG9W8xiz1KXT9R&#xA;0exu1tpKP6d1qMqEj9pPWuZYz125RkeIw5M/DLhlGJrzl+mX6EabQ+JjGTHknHiHWOIH48MAflIe&#xA;9jGp3dvd381xb262kMhBS3UghAAB1AUdq9BmHkkJSsCncafHKEBGR4iOrPfLmh6X5TsoNc8xXX1T&#xA;V7xH/RFoUZ2hDKR60yAEiv2R8J41rRm2XZYMMcIE8hqR+kd3mfx+zmtdrMmtmcOnjxYoEccrq/6M&#xA;T9vMX3gbki0e7W7/ADRsLpLh7uObWoXjupRxeVDdKVdlAWhYb0oKZjYpcWpBu/WN/i7HVYzDs2cT&#xA;ERIwS2HIejk9e1SAz+VvL0Yha6/f3TiyDBBO6RTvHG5YMpUyKpowK7bjN5kF44bXudu/m8Np58Op&#xA;zG+H0w9X82zAEjrdXy37nlU9hNY+Y/MsE0VvBJ9SuZDBaEmGP1OL8FDUZePKhVgCOlM0xgY5Jg19&#xA;J5cntIZhk0+CQMiOOIuXM1YvuN945sMzAd+9y/Kf/jl6H/sv+oqbOi7O+mP46l869pP7zL+P4IvI&#xA;fKv/ACk+j/8AMbbf8nVzR6f+8j/WH3vc9o/4tk/qS/3JZx53ksr7VrnQriUWs8shuLG6cgQ+sJJU&#xA;9KYn7KuOj9FPXY1Gx1ZEpGB2PMH57H9bzvZInjxRzxHEAOGQ61UTce+uo6jlvsZf+Wlnd2WlWNpd&#xA;xPb3MNterLE4KsrLO5FfpAI+/M3QRMYgHY1L73RdvZY5Ms5xIlEyhR/zQw78wdVW01b6zfhdS1CW&#xA;Ifoy1lUG0tLf+7LmIjjJI7I1B9lRQ77BcHW5OGVy9UuncB+ku+7E03Hi4Yfu4A+sj6py51fSIBHm&#xA;fLcmIf4ru/8Alh03/pBtv+aMwfzB7o/6UO9/k6P8/J/ysl+t3+K7v/lh03/pBtv+aMfzB7o/6UL/&#xA;ACdH+fk/5WS/WmNtdX2paPcy38sOkaD6ipcS2dpCslxMo5RwokZh9UrXkQzhV6nfjW2MjOBMqjDy&#xA;A3Pd0txcmOGLLEQEsuatuKcqiOsiTxcPdsLPLla3U/IV9DZTXun+vcQ2iB7+3uoFtLqFWBZXMPqT&#xA;c0KqxqrEji3IDjgyaOQBMbNc7FEfCz+LTp+2YSmIZOGJl9JjLijLy4uGNHlsRvYom2K5hu5dirsV&#xA;dirsVdirsVZB5Cjd/NljwUtxMjNQVoqxMST7AZlaMfvR+OjrO2SBpZ35feHvWpxNNNqcSu0TSaUF&#xA;WVNmUm2mAZT4jqM6PILMh/R/QXzTTy4RA1dZf99F5Z5h0iS086+W7tbG3020urmBbS1iflMY4514&#xA;SzfCnIurijivgxLhs0+fFw5oGhEEih8ev4+17PQ6kT0eaPFLJKMZWSNrMTYjzqiOXxA4SHn97/vZ&#xA;P/xkf/iRzWT5l6fF9A9wUMi2OxV2KuxVkegfl55w8wWJv9I0/wCs2gcxGT1oI/jUAkUkdG/aHbMr&#xA;DosuWPFEWPeHVa3tvSaWfBlnwyq+Uj9wKZf8qZ/Mn/qz/wDTza/9Vcu/kvUfzftH63E/0U9n/wCq&#xA;f7Gf/Eo+z8t23kSEax5pgSXXCT+idF5q45DpPMyFl4g9KH8fs2RwDTjjyD1/wx/SXGy6+XaR8LTE&#xA;jD/Hkqv82N9fxy5k/mjQvM9zq+nXGsXEcmq66U427MVeAuyrGkiEfAtHFKbDdeqkZRqMOQyBmfVP&#xA;7HO7P1mnhinHECMeHr0lXMg9Tt9x5EMi8oflrcx+ZItRiv47ix0i9s3WeKNnErLNG0y/CWosO4Zx&#xA;yUHqQKkZWm0BGTiBsRkPjvv8u91Xafb0TpzjMDGeWE9ieXpPDz/ndI7GunIHo4Vk0ryyrAqy3N2C&#xA;DsQRFPm1/hh7z+l5Swcuf+rD74PPvMOjXFuNQuI7O2stMs7O/wBLshHQXE62kpjM8gAXlVkIruR+&#xA;11UnWZsRFmgIgSiO811eo0WqjLgiZSnklPHklf0x4hfCO7Y+49ORAhGv+TdZ0Oxs7y+9IxXmwEUg&#xA;do3MayiOUD7LcJFanhmvzaWeMAnq9Fou1MOonKELuPeKsWRY7xYIeq/lP/xy9D/2X/UVNm57O+mP&#xA;46l4v2k/vMv4/gi8h8q/8pPo/wDzG23/ACdXNHp/7yP9Yfe9z2j/AItk/qS/3JTv80f+Upk/1X/5&#xA;Py5kdof3n47y6/2e/wAWH4/hi9h8s7rp3/bLP/JoZvMHT+r+h4PtD+P/AIb+l5L+bH/Hesv+YJf+&#xA;T82aXtH6x/V/SXt/Zv8AuJf1/wDexYTmvehdirJNZg1C8l0DTrFJJpPqMP1W2iBJ9SRmZyqj9pju&#xA;xzLyiUjCMf5op1OlnjxjNkmQBxysnuFAfsZF59i1PU/PetiLUPq2m2kEEGoXbSN6EaiJGeF/T5cy&#xA;1xy/dgEl6mmxOZWsEp5pUaiALPTly+fTvdV2NLHh0WK4cWSUpGMa9R3NSF8qhXq2qPwYp+hdC/6m&#xA;G2/5EXf/AFRzC8KH88fKX6nd/m83+oy/00P+KXwaF5eeZFl8x26RswDuLe7YgV3IBjUH7xhGHHe8&#xA;x8j+pjPWZwCRhkT/AFof8Ul+pWNrDqUtrp1ydRt04+ncrGUL1UE/BVqcSSOuVZIASqJ4g5WnzSlj&#xA;EskeCXdd18dkfo/lDUdRs7y+kkjsLKzRi1xdkxq8gUssSEjdmp9FR4jLcWmlIE/SB3/c4uq7Tx4p&#xA;xgAZzmeUd6HefJIsxnZOxVlflbyZPexWur3wQaU0/piB3MclxwVmYR7brVaNQ160+ySM3T6UyAlL&#xA;6b+bpe0e1RjMsUL8Thu6sR9/6OnK+YvqE2iXdnrZ0PQ4rCzu5Eb67eW8MZmgjQqY3KKEUmaoaNHf&#xA;Y70YoGzcHEYz4IcIPUgcv7egP6LeOjq4zw+NmOSUQfTEyNSJ5i9/p5SkBy7uIxTewimhtTDO7STx&#xA;aLBHK7hgxdLWRXLBwHB5A1DCteu+XQBAo/zB9xcHNISlcdgc0iOXIzjXLbl3bdzHdY0S4udUtWs7&#xA;G2CQ3trqV/qcxCzVN3JaxwRNTpwt60LbmgHxEcsXLiJkKA+oSJ686ofJ2ml1cYY5ccpbwnCMBy+g&#xA;TMpfGXd5na64te/72T/8ZH/4kc0E+ZfQcX0D3BQyLY7FXYq7FU20TWLHTodQjudNh1BryAwwvMTW&#xA;Fj+2tPv2o1QPiAqDdiyiINxErHycLV6WeUwMZmHDKzXXy/FjfldVWh6zaaal8txpsGoG7t2giM3W&#xA;Jm6OvXp12o1QKMBUFw5RC7iJWF1mlllMTGcocMr26+X4seR2qSeV9Bs9Pvkivr23sfMMkTTW/wBb&#xA;3isQFqryg7euftKrf3a/EatxXMvT4RE+ogT8/wCH9v3c+ezqe0NZPLAmEZTwA0eHnk8h/Q6Ej6j6&#xA;R6bklfkrS9R1PzXa3EdZktLqK5vLo8mFFlDVqRyZ5CKKvVjlOlxynlB7jZLm9q6jHh00onbiiYxH&#xA;w+wDqeQD1/WYLq00vTI7RZCYI1SW0tKLI8ytRY0lHwwq3LlLKNwgPH7TE7zKDGMa6dB3/o8z3e8v&#xA;C6WcZ5JmVbn6pcgO8jnIiqjH+dV8o0LsLC/jtom1G8W4uLa4lvLqUfDBG8luYvq8PLoiD4uTf5TN&#xA;1NLIQkB6jZBvy5VQ/HmWjNmgZEY48MZRER/ONSvil5nlQ8hHkLgX5v6hNAEhtj6K6pPcSXe3GSSG&#xA;OQNAj1+IIrSP8H81ajku2s7TmRsP4ib/AEfjvel9mMAlvLfw4xA7gSPUR0sgDf8Am8tinH53/wDK&#xA;F+WP9j/yYXL+1v7qH46OB7Jf43n/AB/EiPyn/wCOXof+y/6ipsn2d9Mfx1LX7Sf3mX8fwReReVXt&#xA;Y/MmmTXcwgt4bmOaSU9AI2D038eNM0enIGSJOwt7jtESOnmIi5GJHz2eo6la6fqktteWOkxarea1&#xA;HdW0DXDMEVBLPS4AAY7GF3HGjcSoBqCX3GSMZkGMeIzsb/Hf7Pfy+PHafJkwiUJ5DjhiMZGufKPp&#xA;/wBkBvYsEkUQIyjyvLBI1qIJBNHDZXFv6yfZdresLMteqlozQ+GZmnINV3EfLZ03aEZDi4hRM4yr&#xA;u4vUL86Lyf8ANj/jvWX/ADBL/wAn5s0vaP1j+r+kvbezf9xL+v8A72LCc170LsVexaVDLZ+SotWs&#xA;JI7K/lit7K51ZwXktrJbeSeVoVG/qMV4im5r26je4wY4eKO0qAvuFWaeD1EhPWHFMGcAZSEOkp8Q&#xA;iOLy6/r5PM9b1tLtI7Gxja20i2Ytb27Gru52aedh9uV/uUfCu2anLl4vTHaI/Fnzev0mkMCZzPFl&#xA;lzPQD+bHuiPt5nd6ZoCfk1pH5Vahpnm3TZ5vzBvGM1ikAf6xGsnEW6hxWKHoWZHBah6GoGCWLhI4&#xA;uvTqmGrGWMjj5R5SP0k9a3sgdTsO4teXvyC8w+e5tQk8tWkOiw6RAizwajOxkmuHeUqq8PW4nggV&#xA;i3Ect6CtBZqsYiRUeFxuytSckZcUxkN3YFCiPcOoJ67dTzYl5HcpYCITzWovdUtLSaa2kMMrJJHM&#xA;QnqqGYKZApOx6Voct0h9NWRcgNtu9xO1xc7oS4MU5ASFiwY7131f62PeYL+5utTuEe8uLy2gllS0&#xA;a6kaRxHzIX7R2JAFcxc0yZHckDlbtdFhjDGCIxjIgcXCK3pLMqctkeheX7RYrbVNcdYNPuJBHZW8&#xA;jmM3L8gpJYAmO3Q/3kn0L8XTKw4RtKe0Ty8/2d5+TqtZrZXLHhFziLkRvwj9Mz/DH4nbnM9G8naz&#xA;qHnGfULi8insLKsNpcQLxhYenxWKGPpGkPOj+DDju1c2GLSzllMibiOVfcPc6DVdqYsWkGOMSJz3&#xA;kDz585HqZVt3jfYM/wBVM8w1O/skW2+utHKlxLGH2WNITIybF+ITkgbY0H7JNdlks8Uhtf8AZ/Y8&#xA;xpuGPBCZ4uCxQNdTKr6c6JHL3gJZ5Zs9ZuXa7vpJoYpLaS1tbK4blIkUq0a4um7zNxB4igQDj48a&#xA;sEJneV8qAP3nz+7l7szX5cMBwwAJEhIyHIkfww/o+fOR9XdxF/5iXxs/LX1yzcC8s3lghugDWNp7&#xA;huTRE9H4Fk5DdSHAoymlWtnw47HMfpP4+1yuw8PHqOCY9MgCR38MevldGuvpJ2IeG5zr6K7FXYq7&#xA;FVazhinvIIJphbxSyIkk7CqxqzAFyB2Ub4q9G/Ov8t/JnkXWNItvL3mAa9bXtv612EeF3jIYAEPF&#xA;VOMgJ4gjanfFU9/NrVvyd0+Ty7c/llpDpqE9m0hnl9bjGWcJC/pSl/UuFZJPi6A0PxbUyMZOPevU&#xA;eXl8O/uddngNRceKscTUx37A1fQb79/K+aVeX/yttJrZrjzG11LqM9ZZIbdlLxgk19QuRyckNy+L&#xA;Ygj4uL8Njh7PBF5L4j3fj8fOud1vtDKMuHT8Axja5dfdXId23dyuPFOtB0LS9JshbaZC8UKVYmZQ&#xA;jgsKM7mrhmYVHKuy/CABUPscOGMBUfx+Px583rNZkzT4shBJ7uXuHLby797OxiYlaqSWMVum8s5o&#xA;D8NTtyPXYnc0XdmNa0u+5xb+Mug/H4PIbcyDzX5s0/RNPNxNsUqmn2A5K0kimtT9llCMAWbqp/4s&#xA;4iHF1GpjjjZ+A/H4+P07Ps7s2eonwj/Ol3D9vQcj/Us5OYeX7vUde1HWLu70ldduXs348mEa29BR&#xA;PTXYbDZUT4v5e+ajBKWSUiY8Zr5fj+x7DW4semx44xyeDETHnxd9/pJ27+jOfzv/AOUL8sf7H/kw&#xA;ubDtb+6h+Ojznsl/jef8fxIj8p/+OXof+y/6ipsn2d9Mfx1LX7Sf3mX8fwReIRSGOVJAFYowYKwD&#xA;KaGtCD1Gc8DRfQ5RsEM/8xeZ7WeTRr25lTV7u6niv720tmMaRKkSRR2y1Mrhtm5ct69qEE7PPqAe&#xA;En1EmyB93V5nQ9nyiMkIg4oxiYRlLcmySZ9B3VXzsEM68pT3cHmafT9QVYL2W0ubqPT4uJis7VQk&#xA;UMFVCpy2YsEHHv3zY6YkZDGXOia7hyAeb7ShGWnE4bwE4x4jznLcylvvXKr36dHnP5sf8d6y/wCY&#xA;Jf8Ak/Nmq7R+sf1f0l6v2b/uJf1/97FhOa96F2KvY7df+QN8qks8ZLEmvSKdR+CjN7H/ABT8dxeD&#xA;mf8AXavP9MGEflrp9vea9M0oHO1tmngfiH4SCSNA6q3wFlDkry25UJGa/QQEp79B+p6Ht7NKGAV/&#xA;FKj0sUTV86Nb1vTKI7/Q08w2Onqlp+k7TVIJaW8Est3LcRSk+g97Oyc2klbi8hotdwKZmCcOMR24&#xA;hIcgbu+XEfPmeTp5YcxwSyXPw5YpDeQEBEj6hjjdUNxHc9CbQtx5muLnzWttpd9caXpq6Y6aq+lO&#xA;9ot7FZ28tzKgC+jzjfiyIZAdtzXMfMY5coH8Ij060CdvuDn6SOXTaWRu5zyChI3w8cowHFz3F3ID&#xA;3K0GnzTafo+vaboFzp2gXuvWkcc5WRretqqxKRKV41keR6/EfiU++GOSBMeEVcxt7v12xyafNCOT&#xA;xZcZjgn6qr6iTXd6eEfAvNr3/eyf/jI//EjmvnzL0WL6B7g9k0Gx/Jq9/J2y9DR5b/8AMKO7WO8L&#xA;STwRgmWSUvPMT6C2wtYzy471G9N2y7T4jI3XEPl+A4XaGqjjgY8fBMiwas8wNh1lvQHf0Kd6Z5eh&#xA;gD3OogXV/cKF5Iix8Y1BCRwo9BDCgUiOPatCz0ofS6DHhA3lvI/jbuHcPn/R8+1GtMvTj9MI+d79&#xA;TIj6pH+KW/QR6cZpYzwr+5MFzCkZ2iuo4lqQDsOEkmw8DTr4csugRyo/H+38fNw80Cd7ib/mk/pi&#xA;Px50inlkkY8vhcci7saBB360pShqTv16b8Zk20iIH45/j8XtZdrerWGn6fO803oWcP8AvTcbhmIN&#xA;PTSnFuRK8aChqKCjBmhqy5IxibND8fj8enK0mmnlyAAcUzyH6T9/2mwQMnC/Nvm271+7X4fq+nW+&#xA;1nZilFFAvJuIClioA2FAKKoCgDOc1OpOU90RyD6P2b2bHTR/nZJfVL8dPv5myUgzGdm7FXYq7FXY&#xA;q7FXpvkiGKXzR5YEihqaanEnqpa+kQlT1DcXNCNx1G+bfSAHJD+r/vnkO1pmOmz1/qh/6Zg/o5dW&#xA;Sec9W1ux08W2iWktxeOJneaJOXpJbcOc7BR1HJAgpxSm32YxHl6rLOMagLO/wrr+OXyrU9labDkn&#xA;xZpCMPTsTzMrqP331lfnMzPPLOlX2nae41nVri/niZvr1zcTySKjx15Rxeq1FVeJPLao+I0A+DI0&#xA;+Mwj65GR62fu/Hn7td2hqYZcg8HHGAP0iMQLB6mhv7v80f0gvmrzhY6RYi8uUIYnjpuniqvIykUY&#xA;g/EoU0NSKrsSOfFYoajUxhGz8B+Px8aEbuzuy5558ET/AFpdB+v9PL6eKUyXTfL/AOXOp/l95i13&#xA;8wNXl0/z0IpJNC0kOIysKxD6okdtRiVklqpDUovxbV5nQajjJufM/jl0fQOzvAjAww7xidz3nqeL&#xA;+I99e5hv5Y2PlK5ur0+YNTewoqRpEJ/qqTQuT66u4BLDZRwqK1zI0EMRJ45V8asdXXe0GbVQjHwI&#xA;cfM/TxGJH00OnXfdMfzh8+6Vr89ppOjKG03TCaXIFFkcqFAjB/YQCle/y629p6yOQiMPpi4nsx2N&#xA;l00ZZc395k6dw8/M/Ymv5R+ZtOa2g0hz6OqWvL6ryPwzIZHlITpRxzO1dx070v7N1EaEP4h9rh+0&#xA;vZ+QSOUb45c/I0Bv5bfP7QP5kfl0qetrmhw0hNXvbFB9jqWkjXwFCWXt1G3JUr12h/jgPePx+P0Z&#xA;HYXbl1hzHf8Ahl3+R/Qfgd6MuYZp3sHo/wCSs88/nG8knkaWQ6ZOpd2LNRfTVRU+CgAZteyiTlN/&#xA;zT+h5T2rhGOkiIih4sf0pd+bH/Hesv8AmCX/AJPzZV2j9Y/q/pLlezf9xL+v/vYsJzXvQuxV7Qbe&#xA;a2/KFradDHcQx0mibZkLwTyKGHVSUdWofHN/wkaWjz/YXgBMT7V4o7xJ2PfUoj7wQoflr5Pg07TX&#xA;1m6mDT3kKrRTRYopFWdVJNPjICsxOwGw/aKR0GlEY8ZO5H7fx+Ks7e7UllyeDEbQl8yLj8uYHW9+&#xA;4S0mq6BpuvQaXHteXmpx3sgFuJJPrbTh4fXnaRDEiOQfSWIuEqCys7KE5IQmI9TK+XW9rN7e6rru&#xA;srHT58uA5D9EcRj9VDh4alwx4TxEj+IyEeKiBIRiTGJPNH6f8y840ZLSy0bUbW19Q1kZU024q77k&#xA;KWO/FfhXoPE4Z1Hi5PIQkP8AYl28ez/y2no/VPNjka5b5YbD3d53PVk+jfmx5tuvy48s+SpWg/RC&#xA;a1DbmQRkTtDbyw3McbPy40Eklaha7DfrWnTwFwl146+5zu0M5McuPoMJl8+IfoeS3v8AvZP/AMZH&#xA;/wCJHMafMuyxfQPcHqH5M/8AHI1s+EtmR8xOhGbjsv6ZfD73jvar+9xe6f8AuSzfX9VuNM01Lu3g&#xA;e7u7iESJBHXnJK0yQLGvH4lDMykld9qLSiFNhmyGEbAskfpr8f2Vzui08c2QwkRGMZczyA4TK/kD&#xA;z23s/wAXES+R7XzMwOo61qFwJZvU9PTGkkitrVI2KEehVUVk4eFEFKfEeUdGkjk+qZPu6D4fivu2&#xA;Ha+TT/3eGEaFeugZSvf6udG/fI+W0zzVdWtLK2klml+r2Vv8U8zVU/CaduLV5LxVRQ8hQUcEwZGT&#xA;IIizsB+Px+v6ddptNLJIADinLkPx8yeVbm4keLHPI8Pkzzx5nkufzBupNB8lW8DpoyvKtsk10OIH&#xA;J6ULCIMTwHFaKlQKK2i1WSeUcVVAcvx+rk952XpsWmPh3xZ5C5Eb15eQ7uLeRs83kOv2+lW+valb&#xA;6PcNdaTDdTR6ddSCjy2yyMIZGFFoWQAnYZgu8QGKuxV2KuxV2Kp/oq6f/hnzBJcWqzXSi1FpMesR&#xA;aRg5U+4zJxcPhzsb7U6zVnJ+YwiMqj67HftsybyzqdppereV9TvG9Oway+ri56xrPFdvIUdh9n9n&#xA;l4BgemZmnyCEoSP08NfG3UdoaeWbFnxw3nx3XXhMALHf1rvojm9B1/SJr/TZfqF89pdkPHHIpCsG&#xA;mG6stTVW4itN1FHQ/wC/NnmxmUfSaP6/x+kefL6LUjFkHHHijsfl+r7d4yH8w1uf95tQ9tVjI+i4&#xA;bLpcj/W/S4WP6of8KP8AuXhfnDVdRi8/6ldJKWm06/lSz5AOsaW0zCJQrArxUL4ZzmpySGeR/my2&#xA;+BfR+y9NjOhhEjbJjHF5mUd9/NI9V1O71TUZ9QuyDcXDcn4gKoAFFVVHRVUAAeGY+TIZyMjzLsdN&#xA;p44cYhH6YoTIN7sVXRySRSLLExSRCGR1JDKwNQQR0Iwg0iUQRR3Be2fl7+YI16EabqD+nrEQ5LKB&#xA;RZ1Wnx0BWjig5Cor1BBAK9Botb4g4ZfV9/4/Hl57232L+WPiY98R/wBj5e7u+Ru6lGPP3keylSTX&#xA;vLhSWAr6t7aQkEJUFjJGABQUBLLQU3IAAdY8PWaQH14+XUfj8faBuOxu15gjBqLEuUZHr5H9B9wJ&#xA;NxlNP8j/APlLbz/tm3H60wdk/wB6f6pZe13+Kx/4ZH9KC/Nj/jvWX/MEv/J+bK+0frH9X9Jcj2b/&#xA;ALiX9f8A3sWE5r3oXoXk/wAn/VOepakyW09qizzzTryi0+Jt0llQ/buX/wB0w/Jm7DNppdLw+qWx&#xA;H+x8z/S7h8S8v2p2px1jx3ISNADnkPUA9ID+OfwHUsg1uLV73T7XTNKtiI9XhkOmWDyDmsEgV5tR&#xA;v5GILzTBwF6qtSK8tsycolKIjEfUNh5dZS8z+N3V6SWLHklkyy3xEccq24hYjixjpGNb9Tsfp3ZL&#xA;5egnt/KBgkrHPALFGod1dLVBsR3DDqMy8IIxV19P3Oo1sxLVcQ3ieP5GZeaT67M3mrS/LcESQaVp&#xA;OrosK/blkkS44tLLI3V3qSeIA6fyrTUyzHxI4xtGM/083r4aMDTZNRIk5MmE30AHDdAdw6Xf2lmV&#xA;h54/Lm7/ACig0Sy8rfU/MWl2d4NS8xNHAic57WeFaXIb1pXuHkRREy0HbZBmNpgbMugjL7YkB2Xa&#xA;UwYwh/HLJjodajOMpH3AA2WD+VorddAttSuWf0dHvrjUGjjA5SGJbQJGCxovJ3FW3oOxy/TgcAkf&#xA;4ZE/7lwO0ZSOeWONXlxxhv0vxLPyHJhk0nqzPIRTmxanhU1zAJsu/jGgA9R/Jot+j9XQEFXe35KN&#xA;2HGVH5FRvTirfM7D4iAdx2X9Mvh97x3tTXHjPlL7iPvr7+Vl6Pf6f9agigWSjJAY4JI2HxJyE3qI&#xA;9GX9kNU7bUNVbfazhYry/a8phzcBMq5ys3/paI5+Xf1FEJbpsN3Fb6Yt3cm8nZpZGuiOJkEgZ1Yr&#xA;+z8LDbt0yqAIEbNnvcrPKMpT4Y8MdhXdVD8Hq82/Nm5uPX0OyVz9WbTobhoR0aYvJFzPifTiVR4A&#xA;bZqe0pG4jpw394et9m8ceHLOvV4hjflUTXzJLEtY8w6nq0VlFeupj0+EW9uiIsYCLtUhQByoAK+w&#xA;zBy55ToH+EU7zS6LHgMjDnOXEd7/AB+1LMqct2KuxV2KuxV2KpxZfpu60g6Zp2nvLDNNznmghkkk&#xA;lZB8CMw5fClSQq061NdqXw4zDhiOvQc3Ay+DDL4mSYBA2BIAHefj3n4dUXoKXsLavot9E6QmzuZp&#xA;rOdSpSe2haSKTi1GR1I6+BI6HJ4bHFCXcdvMBp1hhLw80DZ44gSHWMpAEeYP3783qfkV3fyhpRZi&#xA;x5KKk12UkAfQBm50h/dReM7YAGqyUyW6/wB5dR/7aqf9RDZly5H+t+l1GP6of8KP+5DxXV9e1TRf&#xA;OnmyawjRxcXV7bXDSR+oFSWdh9G/Y/Ce4Oc/lzyx5sldTIfa+haXQ49Ro8AnfphjkKNbiI/Hf3EM&#xA;OzBd6nPlTypq3mfVo9O06OrH4ppmr6cUdd3c/wCdcv0+nlmlwxcDtHtHFpMRyZD7h1J7givPGmeW&#xA;NL1ZdP0G6kvVtkCXt05Uo84PxenxA+EfT/HJ6vHjhLhgbrmfNp7I1GpzYvEzxEOI+kdRHzY5mK7V&#xA;ln5XSxx+crQyMF5JKqVNOTGM0VfFm6ADcnYZm9nmsodJ7QxJ0kq7x9/4vuZhYyIuo6rZCyaylstD&#xA;aG4BPJZnBLeuhBIZX5llPvmfA+qQqqh8/N0WaJOPHPi4xPPY/o/0T5it0t/I6yuj5gvL30m+q/U5&#xA;rb1qfCZn4sqDxNFPT+IynsmB4yelEOX7XZY+BGF+rjjKvIdftZ5568x+Rrn8lL/Tn8vCTzRZ3qWc&#xA;ettHDzWsq3RdZq+twWKYRlKUq3zynWYpEmf8INfp/S5fY2qxQEcIHrnEz8uZj86j9j58hk9KZJAK&#xA;8GDU8aGuYANF6CUbBD3HzpbTJdfULSOOWC0Vbz6s5VLQ3lxcXQlvLxj9tYVtq8W2r12+E9Dqom+E&#xA;chv5WTK5S91PnXZWQGPHIkSl6b/i4Ixx8MIdxlx8x+1imj2epeY7u4tdMup00gOG1zXnqs99L14g&#xA;tuEp9iPoo+J99sw8UZZSREnh/il1l+Og+Jd3qsuPSREskY+LX7vH/DAfr/nS6n0x73qEFja2WkPZ&#xA;RD0ogsfpp8TkCBBGni1OPGvfp+0wU7gQEY0PxX4/B2eOnmlkyiZ3O/8AsjZ+2/Ln0BkCuw078qpf&#xA;I8+oXGk31t5+j1Vr83lxBdxKIRqAkTiSPQYNbFYxGAXaQ7DuNDHDM5uOiI8V7jze8yavFHRjEJxl&#xA;kOPgqJB34a+Q5knYBhnmX8qfzHbyzZ6nZ6Vx8pQGKCExzQgG6ZVjnmlUvy5G45Rl26UCigpleYSM&#xA;hjj06edb/FydFOEcR1OTnK/Uf5vEeED+jVUBz58yk+m2txaeStZtLlDFcW73sU0Z6q6PYqyn5EZb&#xA;jiY4ZA8xxf71xM+SM9ZjlE3GQgR7iMrBc1z0aceUtTvtO8xWE9nKYpGmSKSm4eORgrowOxVh2OX6&#xA;bIYZAR3uD2lp4ZcE4zFiifcRyIfQ2ms31tVqeP1WVqduTqzMfpJqc6iHP4Plucen/OH2UgYfsaR/&#xA;xiX/AJMZWP4fx0ciXPJ7/wDfPNvzCvrzT/M3lm9s0Elzb6XBJEhUsCVnnPQb/SNx1BB3zUa7IYZI&#xA;SHMRH3l67sPBHNp8+OXKWWQ/2MPx3d+zAtT1CfUtRub+4CCe6kaWURqEXk5qaKM12SZnIyPMvSaf&#xA;BHFjjCPKIrdC5BudirsVdirsVdirM/JNtczQoLdbz1TMwV7bVrexUHiP90PDNIx9xWvSmZ+kiSNr&#xA;+EwPsoug7WyRiTxcFV/FhlP/AGQlED9HemM8+hm91O2W2ul8wRW2oC/urm4FzzC20qkeooiVt+NP&#xA;3S098tJhchR46lZJvofd9ziwhm4ISMo+AZY+ERjw1649N66/xFmPkP8A5Q/Sv9cfrOZ+j/uouh7Z&#xA;/wAbyMmuv95dR/7aqf8AUQ2ZcuR/rfpdPj+qH/Cj/uQx/TPzPvPLvk781/L8ej295Bfald8r2WQK&#xA;6G+kNq1YyreqI+IZKEcWO/XOf1GEynkl/Nl95fQ+ztYIYtNirfJjH+xgC8d8qeVdW8zavHpunJVj&#xA;8U0zfYijru7nw/XlGn08s0uGLm9o9o4tJiOTIfcOpPcGZea/Nek+WtJk8neTpKqfh1nWVp6k8lKM&#xA;iMP2e23yHcnP1Gojij4WL/Ol3uh7O7Oy6vKNXqx/Uh0iO8+f9p6Ac0zUvWuxVlPkXRrK8kvLzU7G&#xA;e50u3jEclxbsoeCSQ/DIIy8bSFVVjsfh+0QQKZmaTEJWZAmI7un6/wAF03a+qnjEYY5Rjkkbo/xA&#xA;dLo1Zr38gRdvVJdMkbzPa6deSc55PLFvDdzruXkeeQSyVPUsxLVPU5uTj/eCJ5+EL+ZeMjqANNLJ&#xA;AbDVSMR5CMaHwGyF8z+Y7fyh5Rs4dJs0T61FGLaJt40EnPkZOhkP7s1r9qu+1Q0NRnGDEBEc/wAf&#xA;jv8Avu7P0MtdqpHLK+Emz1NVy7ufw6b0Y8WutT1G7aZrm5llNxIZpwzkh5D1dh0rmglklK7PN9Ax&#xA;6fHCuGIHCKHkO5C5BufQ3mWxS/ub+ydii3cYgZxuQJL69Wo+Vc6jPDiJHf8A8VJ8t0GY44wmP4Tf&#xA;yx4kz0mxsbGwtrLT4THawloLeM7VkRiHJahqxI5Fqe9CeKZdjhGMQI8vx+PxTh6nNPJOU8huR3Pu&#xA;PL4dK+2rkxfz755s9Ftjb2zLc306fu0NChUg0kcVP7r4jxWv7zc7oWM2HrNWMYobk/j5ff7vq3PY&#xA;3ZE9RLil6YD8UP6Xef4f6wAx8ubz35kKkJJbQsQQJYLKzhlXkCCUljhR0ND1Ug5pvzmTy/0sR+h7&#xA;Idj6fqJHyM5kfEGRB+L0L8ktc8/eb9a0L8th5i+p+WILj699SlSMhltn+stErBVlfkQTwL8e9Nsq&#xA;w5OCYl3FytZp/Gwzx3XHEi+6xz+HNCeZfLV15ZtvNehXd8mpXNjc3qTX0daSuxsHLGpJDfF8Qrs1&#xA;RmbjJOGRPn/vXTamAjrMcQKA4PuyvKM1z0SO0P8A47Wn/wDMTD/ycGWYfrHvDj6v+5n/AFT9z6P0&#xA;3/exf+YR/wDiDZ1UOfwfJ8/0f54+9BQ/Y0j/AIxL/wAmMgP4fx0ciXPJ7/8AfKfk/wA9XPk/80NE&#xA;uoNMj1Rr3y59WMbyrA6ATyy8kkZXAJMXGlN65q9XhOTJCI/mfrep7I1kdPps2Q7gZj9ogPN4H5g1&#xA;ZtZ17UtXeGO2bUrqe7a3hFI4zPI0hRB/KvKgzUPXpfirsVdirsVdirsVTHT9cnsYDDHbWkyli3K4&#xA;toZn3oKcpFY026ZbDMYiqHxALi5tJHJKzKY90pD7iymDzDeP5bluNQtbOysfSubawNvAIZrmeaN4&#xA;jxVSE4R+rWRgoHQbtmYM5OO5AAbgUOZ/Ze7pp6KA1AjjlOc7jKXFKxGIIPvs16RZ6nYPQfJtndWn&#xA;lbTILqJoZlZC0bgqwD/EtQelQc2eliY44gvL9qZYz1M5RNjdkF1/vLqP/bVT/qIbMqXI/wBb9Lq8&#xA;f1Q/4Uf9yHiOt2+paj+YWs6HZ3DRLqesTwvGXZYmY3TcDIo68Tv0znssZTzygD9Uz976JpJ48Whx&#xA;5pi/DwxPLf6Bde9mWuRtoHlbV9C8nsgj03gnmbV5HWO4mkb4TFEDuFWtOvstTyrn5h4eOUMX8P1y&#xA;6n8f2Og0cvzOpx59Xd5P7qFXGI7z5/2mhVc1u/Lt1beX7PW3mga3vZHijhR6yqUruy0p23odtq05&#xA;CuplgIgJ2KL1uPXRnnlhAlxQAN1tv+PjvV0VXUvKOsadqVhp0/otc6kkT2wSVGX963ABmqFWjbV6&#xA;eBI3yWTTTjIRNXLzYaftPFlxzyRvhxk3sem/3fHvFoPW9Hu9G1SfTbso09uQGaJuaEMAykH3BBoQ&#xA;D4jK8uI45GJ5hv0mqjnxjJG+GXe9K8j6RJZ6fpQeCOGa+P1uPUbaXn9Zt2liguLS4X2WdTTda7bN&#xA;yzbaTFwxjtz3sdRYBifn+DbyXa+pGTJkokiHp4ZD6ZVKUZx/0p8+v08LNr3/AMmNB/2wbb/qKkzY&#xA;S/vx/wALH3l5/F/iB/4fL/cBg35t/wDKOaF/xhh/5n5ru0v7uPw/S9F7Nf4xl98v948qzTPaOxV9&#xA;HaiytrMpUgjnGKjxGo3gOdVP6/x/Ok+UYBWEfH/pliV7lh+hnWvxC4viR7EsB+rJS+n4ya8Y/ff5&#xA;uP8AQ8Z17y7ruved/Mw02A3T219dNNWREIQTOBT1GWuy9BmhzYJ5M0+EXUj9732j12HTaPB4h4eL&#xA;HCtjz4R3BD+aPKkGmR6QLAXM819EFmV0BH1n4eUcfCtWq1OI5bUPI8qLHUaYQ4eGzf3tvZ/aJzHJ&#xA;x8IEDtv/AA95v3c9uorayj5k0ew0OOwhhnuI9eRCdUt5FCiGStV4Ou1KHYqzVG/w/ZyGowxgAN+P&#xA;qG3s/V5M5lIiPg36COo8/wCwVy35px5dSa58l39vHWW6uWvRFHWryMos5WCjqzcEZqDfbMjALwkD&#xA;meL/AHrga+QjrIyO0RwWe7+9G/xIDBs1z0Sf+StB1DV9ethap+6tpY5rmY14IiuDvT9pqUVe5zJ0&#xA;mGU5iujrO1tZjwYJcR3kCAO81+LL6A09St6Aeq20qNTejKhqK500Bv8AB8xzm4f5w+9AQ/Y0j/jE&#xA;v/JjKx/D+Ojky55Pf/vnl/5oXl3aaxoM9pPJbzro8IWWJmRxWecGjKQemaftCRjOBBo8H6S9j7PY&#xA;ozxZYyAkPGOx3/hg8/zWPTuxV2KuxV2KuxV2KuxVHtruqNfW188wa4s1jS1qiFI1iHwKsZXgAOv2&#xA;eu/XLfGlxCV7jk4w0eMQlAD0yu9zZvnvz+3lsyBvzW86NFLE91GyyggH0YwULEnkhUD4t9ia+PXM&#xA;n+Uc1Vf2OrHs5pAQRE7eZ39/4+xY35o+cWhkia6jPqyrcSP6MdTIrFuXSm7GpAGD+UMtVf2Mh7Pa&#xA;QEHhOwrmeSSxeYNSi8wjXw6tqQujelyo4mYv6hJUUFC3YZjjNIT4/wCK7dhLRYzg8D/J8PD8KpR1&#xA;TVLzU9Ru7+5YeveytNOEHFSzNy2HgK7ZHJkM5GR5ls0+nhhxxhH6YCgg8g3tszMasSSAACd9gKAY&#xA;oApt3Z2LuSzsSWYmpJPUk4kqAAKCdeXvOGr6EpjtPTkhLiT0plLKHDI3IcSp39JR1zIwaqWPl+Px&#xA;Tr9b2Xi1JuVg1Vju39/eUZc/mT5un1ZtV+tJFd+gtrGUij4pAjl1RQyt0Zju1T75ZLXZTLiveq+D&#xA;Rj7B0scXhcNx4uLmd5VV/wBmyW6v5p13V7aC21G69eG2CrAnCNOIXlTdFUn7Z65Tk1E5gCRunL03&#xA;Z2HBIyxxoy57n9J8kpylzXYqyh/zJ83OxZrpORcyV9KP7TSvOf2f55WOZn57L3/i7dOOwdKNuE8q&#xA;5n+aI/cA235l+b2jaM3ScGLkj0o+shYt2/yzidfl70DsDSg3wnp1PT+xj97qN5e311ezyE3F7I81&#xA;yy/CGeRi7bCgpU9MxpzMiSeZdniwQxwjCI9MAAPhsvt9VvYLC5sI3/0W6ZHkjIBpJEapIlfssNxU&#xA;diRjHIREx6FE9PCU4zI9Ub+R5g94/Sqarruqat6DajN9ZmgUolw4BlZCahXkpyfj25E0yWTNKdcR&#xA;umOm0ePBfhjhEunT4Dp8FGPU76K2ht4pTGlvObqEp8LrMwUcw4+Kv7tab5EZJAADobZy08DIyIsy&#xA;jwn3b7V8S1qOoXGoXst7c8DcTENKY0WMFqAFuKBVq3U7bnfGczI2eacGGOKAhH6Ry3v7000Xzr5k&#xA;0W1NrptysEDFmZBFESWcU5FivIkdqnLcWryYxUTQcPV9k6fUS4skbl7z+tM7X81vOluYqXUcixU+&#xA;BoYwrU5deIX+bqKHYZdHtHMOv2OHk9nNJK/SRfmf0/jcqI/M3zfyVmukZkZ2QmKMceYpxACgUFdh&#xA;/DI/n8vf9jYewNL/ADTv5lJdZ17U9Zlt5dQkEj2sC20JCqtIlZnA+ECu7nfKMuaWQgy6CnP0ujx4&#xA;ARAVxS4j79h+hL8qcp2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:a55ef4c3-65e6-ef42-9ca1-b9123fa41ba4</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:a55ef4c3-65e6-ef42-9ca1-b9123fa41ba4</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:9c914a63-e581-4cf6-b723-86dcfac7627d</stRef:instanceID>
            <stRef:documentID>xmp.did:BF3AAF57E0BDE511B2BBC0EB12123494</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F07763D45588E411BF89F345A28D8C9F</stEvt:instanceID>
                  <stEvt:when>2014-12-20T17:10:37+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:29845C695A88E411BF89F345A28D8C9F</stEvt:instanceID>
                  <stEvt:when>2014-12-20T17:19:01+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:2E845C695A88E411BF89F345A28D8C9F</stEvt:instanceID>
                  <stEvt:when>2014-12-20T17:33:07+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4365C60ACE89E4119A65C8F5B8A1FEA0</stEvt:instanceID>
                  <stEvt:when>2014-12-22T13:34:24+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0B5A99264D6BE51194FFADFDE0B012D7</stEvt:instanceID>
                  <stEvt:when>2015-10-05T13:38+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:BF3AAF57E0BDE511B2BBC0EB12123494</stEvt:instanceID>
                  <stEvt:when>2016-01-18T14:41:53+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F37BC81AF2BDE5119314DC75DE111CE2</stEvt:instanceID>
                  <stEvt:when>2016-01-18T16:45:23+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Bridge CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/metadata</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:7CFF448EF8BDE5119314DC75DE111CE2</stEvt:instanceID>
                  <stEvt:when>2016-01-18T17:31:43+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Bridge CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/metadata</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:a55ef4c3-65e6-ef42-9ca1-b9123fa41ba4</stEvt:instanceID>
                  <stEvt:when>2016-05-12T13:18:08+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>1200.000000</stDim:w>
            <stDim:h>1200.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=0 B=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
         <photoshop:Headline>abstract vector background with high tech circuit board</photoshop:Headline>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1200 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1200 li
1200 1200 li
1200 0 li
cp
clp
1200 1200 mo
0 1200 li
0 0 li
1200 0 li
1200 1200 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
0 0 0 rgb
f
109.375 742.015 mo
110.712 740.651 112.901 740.628 114.267 741.964 cv
115.628 743.298 115.652 745.489 114.315 746.852 cv
112.979 748.218 110.79 748.239 109.426 746.901 cv
108.062 745.567 108.038 743.376 109.375 742.015 cv
cp
96.793 742.931 mo
89.9014 735.157 li
87.3154 737.45 li
95.2402 746.388 li
104.808 746.388 li
105.813 747.513 107.497 748.587 108.88 749.444 cv
112.058 751.409 115.831 752.011 118.448 749.343 cv
121.062 746.675 121.018 742.39 118.347 739.776 cv
115.679 737.163 112.114 738.187 108.78 739.878 cv
107.491 740.532 105.667 741.7 104.662 742.931 cv
96.793 742.931 li
cp
0 .862745 1 rgb
f
161.005 735.501 mo
159.653 734.149 159.653 731.962 161.005 730.612 cv
162.355 729.261 164.543 729.261 165.893 730.612 cv
167.245 731.962 167.245 734.149 165.893 735.501 cv
164.543 736.852 162.355 736.852 161.005 735.501 cv
cp
160.727 758.659 mo
134.758 785.577 li
88.6084 785.577 li
88.6084 789.036 li
136.227 789.036 li
164.184 760.054 li
164.184 740.847 li
165.714 740.276 167.265 737.907 168.427 736.071 cv
170.426 732.915 171.067 729.149 168.427 726.507 cv
165.784 723.864 161.503 723.864 158.86 726.507 cv
156.22 729.149 157.204 732.726 158.86 736.071 cv
159.295 736.952 159.964 738.075 160.727 739.026 cv
160.727 758.659 li
cp
f
219.929 806.126 mo
221.265 804.761 223.454 804.741 224.817 806.075 cv
226.182 807.411 226.205 809.601 224.868 810.964 cv
223.531 812.329 221.343 812.352 219.979 811.015 cv
218.614 809.677 218.591 807.489 219.929 806.126 cv
cp
212.572 807.188 mo
161.737 858.477 li
88.6084 858.477 li
88.6084 861.937 li
163.179 861.937 li
214.015 810.646 li
215.489 810.646 li
216.506 811.718 218.108 812.735 219.432 813.554 cv
222.609 815.519 226.386 816.124 229.001 813.456 cv
231.614 810.786 231.569 806.503 228.9 803.89 cv
226.231 801.273 222.667 802.3 219.333 803.987 cv
217.992 804.669 216.077 805.905 215.104 807.188 cv
212.572 807.188 li
cp
f
267.829 978.056 mo
268.227 979.925 267.034 981.761 265.167 982.157 cv
263.298 982.554 261.464 981.364 261.066 979.495 cv
260.668 977.628 261.86 975.792 263.728 975.392 cv
265.595 974.997 267.433 976.19 267.829 978.056 cv
cp
279.509 961.265 mo
268.494 972.044 li
266.921 971.442 263.927 972.745 262.241 973.747 cv
259.026 975.655 256.255 978.116 257.032 981.773 cv
257.809 985.425 261.402 987.759 265.056 986.981 cv
268.712 986.202 270.224 982.694 270.265 978.958 cv
270.277 977.808 270.273 976.479 270.13 975.282 cv
281.929 963.737 li
279.509 961.265 li
cp
f
198.489 858.575 mo
196.58 858.575 195.032 857.026 195.032 855.118 cv
195.032 853.206 196.58 851.659 198.489 851.659 cv
200.401 851.659 201.946 853.206 201.946 855.118 cv
201.946 857.026 200.401 858.575 198.489 858.575 cv
cp
190.507 858.937 mo
135.355 913.802 li
131.022 913.802 li
121.665 924.079 li
121.37 1005.28 li
139.815 1023.73 li
139.815 1107.87 li
115.301 1132.13 li
117.732 1134.58 li
143.273 1109.31 li
143.273 1022.3 li
124.833 1003.85 li
125.117 925.425 li
132.552 917.259 li
136.782 917.259 li
192.901 861.433 li
193.333 861.034 li
194.758 861.856 197.667 861.267 199.878 860.771 cv
203.522 859.954 206.641 857.741 206.641 854.003 cv
206.641 850.269 203.612 847.239 199.878 847.239 cv
196.14 847.239 194.309 850.466 193.114 854.003 cv
192.816 854.882 192.52 856.06 192.375 857.212 cv
190.507 858.937 li
cp
f
248.775 854.634 mo
246.864 854.634 245.317 853.087 245.317 851.177 cv
245.317 849.269 246.864 847.72 248.775 847.72 cv
250.684 847.72 252.233 849.269 252.233 851.177 cv
252.233 853.087 250.684 854.634 248.775 854.634 cv
cp
150.449 1133.54 mo
152.788 1136.08 li
167.479 1122.6 li
167.188 1009.01 li
149.159 991.729 li
149.159 949.952 li
175.692 923.023 li
198.726 923.023 li
232.31 890.036 li
232.31 871.523 li
244.74 857.452 li
246.284 857.663 248.434 857.22 250.161 856.833 cv
253.807 856.017 256.927 853.804 256.927 850.065 cv
256.927 846.331 253.897 843.304 250.161 843.304 cv
246.425 843.304 244.595 846.526 243.398 850.065 cv
242.976 851.315 242.535 853.175 242.566 854.69 cv
228.852 870.216 li
228.852 888.585 li
197.311 919.565 li
174.245 919.565 li
145.702 948.536 li
145.702 993.206 li
163.733 1010.49 li
164.018 1121.09 li
150.449 1133.54 li
cp
f
268.367 739.665 mo
266.458 739.665 264.909 738.118 264.909 736.208 cv
264.909 734.3 266.458 732.751 268.367 732.751 cv
270.278 732.751 271.825 734.3 271.825 736.208 cv
271.825 738.118 270.278 739.665 268.367 739.665 cv
cp
262.275 744.056 mo
264.273 742.476 li
265.821 742.706 268.007 742.255 269.755 741.862 cv
273.402 741.046 276.521 738.833 276.521 735.095 cv
276.521 731.362 273.489 728.333 269.755 728.333 cv
266.018 728.333 264.186 731.558 262.991 735.095 cv
262.566 736.351 262.126 738.218 262.162 739.737 cv
258.817 742.382 li
258.817 857.023 li
256.815 858.477 li
247.684 858.477 li
234.578 872.788 li
234.578 890.894 li
198.46 926.769 li
177.173 926.769 li
151.239 952.852 li
151.239 990.335 li
170.358 1008.2 li
170.358 1123.42 li
159.931 1133.57 li
162.343 1136.05 li
173.815 1124.88 li
173.815 1006.7 li
154.697 988.831 li
154.697 954.278 li
178.61 930.227 li
199.884 930.227 li
238.036 892.331 li
238.036 874.132 li
249.206 861.937 li
257.942 861.937 li
262.275 858.782 li
262.275 744.056 li
cp
f
343.86 630.938 mo
343.053 630.938 342.319 630.651 341.731 630.187 cv
341.169 629.628 li
340.696 629.038 340.402 628.298 340.402 627.481 cv
340.402 625.573 341.949 624.023 343.86 624.023 cv
345.77 624.023 347.317 625.573 347.317 627.481 cv
347.317 629.392 345.77 630.938 343.86 630.938 cv
cp
277.835 689.774 mo
277.835 741.384 li
265.446 754.64 li
265.446 859.491 li
260.407 864.528 li
252.628 864.528 li
241.242 875.915 li
241.242 893.487 li
202.207 932.243 li
180.309 932.243 li
157.679 954.573 li
157.679 987.118 li
176.163 1006.13 li
176.163 1126.29 li
168.585 1133.56 li
170.979 1136.06 li
179.62 1127.77 li
179.62 1004.73 li
161.136 985.712 li
161.136 956.019 li
181.727 935.7 li
203.633 935.7 li
244.7 894.925 li
244.7 877.347 li
254.059 867.985 li
261.84 867.985 li
268.903 860.923 li
268.903 756.005 li
281.293 742.749 li
281.293 691.202 li
338.775 633.452 li
340.23 634.208 343.076 633.624 345.247 633.138 cv
348.892 632.315 352.011 630.106 352.011 626.368 cv
352.011 622.634 348.983 619.606 345.247 619.606 cv
341.51 619.606 339.68 622.831 338.483 626.368 cv
338.184 627.249 337.888 628.433 337.743 629.587 cv
277.835 689.774 li
cp
f
334.784 660.148 mo
332.872 660.148 331.325 658.601 331.325 656.688 cv
331.325 654.778 332.872 653.231 334.784 653.231 cv
336.694 653.231 338.241 654.778 338.241 656.688 cv
338.241 658.601 336.694 660.148 334.784 660.148 cv
cp
174.944 1134.99 mo
177.298 1137.52 li
185.918 1129.51 li
185.918 1000.42 li
167.476 980.833 li
167.476 960.339 li
186.627 941.464 li
206.958 941.464 li
250.462 898.972 li
250.462 888.595 li
275.677 863.813 li
275.677 757.149 li
287.347 744.474 li
287.347 705.323 li
329.915 662.757 li
331.423 663.36 334.104 662.808 336.169 662.341 cv
339.815 661.524 342.934 659.313 342.934 655.577 cv
342.934 651.839 339.905 648.812 336.169 648.812 cv
332.434 648.812 330.602 652.038 329.406 655.577 cv
329.077 656.552 328.739 657.898 328.62 659.163 cv
283.888 703.892 li
283.888 743.122 li
272.218 755.8 li
272.218 862.364 li
247.005 887.146 li
247.005 897.515 li
205.551 938.007 li
185.209 938.007 li
164.018 958.894 li
164.018 982.204 li
182.46 1001.8 li
182.46 1128.01 li
174.944 1134.99 li
cp
f
283.515 765.983 mo
281.605 765.983 280.058 764.437 280.058 762.526 cv
280.058 760.614 281.605 759.067 283.515 759.067 cv
285.427 759.067 286.973 760.614 286.973 762.526 cv
286.973 764.437 285.427 765.983 283.515 765.983 cv
cp
187.647 964.372 mo
187.647 1133.35 li
191.104 1133.35 li
191.104 965.817 li
280.718 877.354 li
280.718 768.849 li
282.061 768.794 283.602 768.472 284.903 768.179 cv
288.548 767.36 291.667 765.149 291.667 761.415 cv
291.667 757.679 288.638 754.648 284.903 754.648 cv
281.167 754.648 279.335 757.876 278.14 761.415 cv
277.747 762.571 277.351 764.247 277.319 765.694 cv
277.261 765.694 li
277.261 875.909 li
187.647 964.372 li
cp
f
290.697 786.636 mo
288.786 786.636 287.239 785.089 287.239 783.177 cv
287.239 781.267 288.786 779.72 290.697 779.72 cv
292.606 779.72 294.155 781.267 294.155 783.177 cv
294.155 785.089 292.606 786.636 290.697 786.636 cv
cp
198.37 1136.25 mo
198.37 968.399 li
285.905 880.804 li
285.905 791.339 li
287.276 789.511 li
288.745 789.556 290.579 789.167 292.083 788.829 cv
295.729 788.013 298.849 785.802 298.849 782.067 cv
298.849 778.329 295.819 775.3 292.083 775.3 cv
288.347 775.3 286.517 778.526 285.319 782.067 cv
284.829 783.515 284.322 785.782 284.55 787.386 cv
282.448 790.187 li
282.448 879.372 li
194.911 966.968 li
194.911 1136.25 li
198.37 1136.25 li
cp
f
297.878 802.538 mo
295.968 802.538 294.42 800.993 294.42 799.081 cv
294.42 797.171 295.968 795.624 297.878 795.624 cv
299.788 795.624 301.335 797.171 301.335 799.081 cv
301.335 800.993 299.788 802.538 297.878 802.538 cv
cp
293.108 806.792 mo
293.941 805.364 li
295.477 805.544 297.573 805.114 299.264 804.733 cv
302.911 803.917 306.028 801.706 306.028 797.97 cv
306.028 794.233 303 791.202 299.264 791.202 cv
295.527 791.202 293.697 794.429 292.501 797.97 cv
292.097 799.161 291.685 800.907 291.677 802.384 cv
289.65 805.854 li
289.65 882.54 li
200.9 970.712 li
200.9 1134.81 li
204.358 1134.81 li
204.358 972.151 li
293.108 883.979 li
293.108 806.792 li
cp
f
302.69 821.849 mo
300.782 821.849 299.233 820.302 299.233 818.39 cv
299.233 816.481 300.782 814.931 302.69 814.931 cv
304.602 814.931 306.149 816.481 306.149 818.39 cv
306.149 820.302 304.602 821.849 302.69 821.849 cv
cp
210.409 1136.25 mo
210.409 973.304 li
297.718 886.282 li
297.718 828.073 li
299.493 824.722 li
300.924 824.726 302.647 824.366 304.079 824.046 cv
307.727 823.226 310.845 821.017 310.845 817.278 cv
310.845 813.544 307.815 810.515 304.079 810.515 cv
300.343 810.515 298.511 813.741 297.315 817.278 cv
296.8 818.796 296.266 821.218 296.584 822.829 cv
294.26 827.216 li
294.26 884.847 li
206.952 971.866 li
206.952 1136.25 li
210.409 1136.25 li
cp
f
308.925 838.788 mo
307.013 838.788 305.468 837.241 305.468 835.331 cv
305.468 833.419 307.013 831.872 308.925 831.872 cv
310.836 831.872 312.382 833.419 312.382 835.331 cv
312.382 837.241 310.836 838.788 308.925 838.788 cv
cp
216.359 1134.81 mo
216.359 976.468 li
304.347 887.718 li
304.347 844.548 li
306.083 841.655 li
307.439 841.604 308.998 841.28 310.313 840.983 cv
313.958 840.167 317.076 837.954 317.076 834.22 cv
317.076 830.481 314.048 827.452 310.313 827.452 cv
306.575 827.452 304.745 830.681 303.549 834.22 cv
302.986 835.878 302.408 838.604 302.935 840.181 cv
300.888 843.591 li
300.888 886.292 li
212.901 975.042 li
212.901 1134.81 li
216.359 1134.81 li
cp
f
315.608 859.536 mo
313.697 859.536 312.151 857.987 312.151 856.075 cv
312.151 854.165 313.697 852.618 315.608 852.618 cv
317.518 852.618 319.066 854.165 319.066 856.075 cv
319.066 857.987 317.518 859.536 315.608 859.536 cv
cp
307.517 890.618 mo
220.208 978.79 li
220.208 1134.81 li
223.666 1134.81 li
223.666 980.212 li
310.975 892.038 li
310.975 864.839 li
312.893 862.398 li
314.217 862.333 315.722 862.017 316.995 861.729 cv
320.642 860.913 323.761 858.7 323.761 854.966 cv
323.761 851.227 320.731 848.198 316.995 848.198 cv
313.259 848.198 311.429 851.427 310.231 854.966 cv
309.667 856.634 309.084 859.384 309.628 860.954 cv
307.517 863.644 li
307.517 890.618 li
cp
f
334.784 739.665 mo
332.872 739.665 331.325 738.118 331.325 736.208 cv
331.325 734.3 332.872 732.751 334.784 732.751 cv
336.694 732.751 338.241 734.3 338.241 736.208 cv
338.241 738.118 336.694 739.665 334.784 739.665 cv
cp
325.957 743.028 mo
325.957 861.21 li
313.567 873.312 li
313.567 894.079 li
225.97 983.116 li
225.97 1134.81 li
229.427 1134.81 li
229.427 984.53 li
317.025 895.493 li
317.025 874.767 li
329.415 862.665 li
329.415 743.987 li
330.359 742.413 li
331.913 742.774 334.294 742.284 336.169 741.862 cv
339.815 741.046 342.934 738.833 342.934 735.095 cv
342.934 731.362 339.905 728.333 336.169 728.333 cv
332.434 728.333 330.602 731.558 329.406 735.095 cv
329.087 736.04 328.763 737.335 328.635 738.565 cv
325.957 743.028 li
cp
f
431.176 1104.26 mo
429.265 1104.3 427.69 1102.77 427.656 1100.86 cv
427.623 1098.95 429.146 1097.38 431.055 1097.35 cv
432.961 1097.31 434.538 1098.83 434.572 1100.74 cv
434.605 1102.65 433.084 1104.23 431.176 1104.26 cv
cp
437.469 1111.88 mo
437.469 1138.56 li
440.927 1138.56 li
440.927 1110.77 li
437.247 1105.62 li
437.859 1104.11 437.246 1101.4 436.742 1099.32 cv
435.859 1095.68 433.595 1092.61 429.861 1092.67 cv
426.124 1092.74 423.148 1095.82 423.214 1099.56 cv
423.28 1103.29 426.537 1105.06 430.095 1106.2 cv
431.137 1106.53 432.601 1106.86 433.934 1106.93 cv
437.469 1111.88 li
cp
f
396.54 566.204 mo
394.63 566.204 393.082 564.653 393.082 562.745 cv
393.082 560.837 394.63 559.286 396.54 559.286 cv
398.451 559.286 399.998 560.837 399.998 562.745 cv
399.998 564.653 398.451 566.204 396.54 566.204 cv
cp
454.758 1056.74 mo
454.758 1134.81 li
458.216 1134.81 li
458.216 1055.27 li
443.521 1041.01 li
443.521 1005.15 li
389.06 951.118 li
389.06 612.694 li
379.119 602.753 li
379.119 582.165 li
392.788 569.05 li
394.306 569.175 396.302 568.765 397.926 568.399 cv
401.572 567.581 404.692 565.37 404.692 561.634 cv
404.692 557.898 401.663 554.868 397.926 554.868 cv
394.19 554.868 392.359 558.093 391.163 561.634 cv
390.709 562.977 390.246 565.017 390.36 566.587 cv
375.662 580.688 li
375.662 604.185 li
385.602 614.126 li
385.602 952.56 li
440.063 1006.59 li
440.063 1042.47 li
454.758 1056.74 li
cp
f
579.565 595.288 mo
578.214 593.937 578.214 591.749 579.565 590.399 cv
580.916 589.048 583.104 589.048 584.453 590.399 cv
585.806 591.749 585.806 593.937 584.453 595.288 cv
583.104 596.642 580.916 596.642 579.565 595.288 cv
cp
532.127 768.175 mo
510.947 790.358 li
510.947 1040.6 li
485.014 1066.97 li
485.014 1133.35 li
488.472 1133.35 li
488.472 1068.38 li
514.405 1042.01 li
514.405 791.745 li
535.582 769.56 li
535.582 753.587 li
516.133 734.571 li
516.133 691.071 li
583.993 624.509 li
583.993 599.813 li
585.091 598.81 586.143 597.192 586.986 595.86 cv
588.988 592.704 589.63 588.937 586.986 586.294 cv
584.348 583.653 580.065 583.653 577.42 586.292 cv
574.78 588.937 575.766 592.513 577.42 595.86 cv
578.08 597.194 579.277 599.095 580.535 600.093 cv
580.535 623.058 li
512.676 689.62 li
512.676 736.024 li
532.127 755.042 li
532.127 768.175 li
cp
f
487.272 596.87 mo
485.922 595.521 485.922 593.331 487.272 591.981 cv
488.623 590.632 490.81 590.632 492.16 591.981 cv
493.512 593.331 493.512 595.521 492.16 596.87 cv
490.81 598.222 488.623 598.222 487.272 596.87 cv
cp
450.962 883.831 mo
452.313 885.181 452.313 887.368 450.962 888.72 cv
449.611 890.067 447.424 890.067 446.073 888.72 cv
444.722 887.368 444.722 885.181 446.073 883.831 cv
447.424 882.476 449.611 882.476 450.962 883.831 cv
cp
491.641 601.452 mo
491.631 601.452 li
492.755 600.456 493.834 598.804 494.695 597.44 cv
496.697 594.284 497.336 590.519 494.695 587.876 cv
492.053 585.231 487.772 585.231 485.128 587.876 cv
482.488 590.519 483.474 594.095 485.128 597.44 cv
485.778 598.755 486.948 600.618 488.184 601.626 cv
488.184 630.419 li
446.764 672.128 li
446.764 879.106 li
445.582 880.083 444.444 881.833 443.54 883.255 cv
441.54 886.413 440.899 890.181 443.54 892.821 cv
446.182 895.462 450.464 895.466 453.106 892.825 cv
455.747 890.181 454.764 886.604 453.106 883.255 cv
452.488 882.005 451.393 880.251 450.22 879.216 cv
450.22 673.552 li
491.641 631.843 li
491.641 601.452 li
cp
f
487.53 893.362 mo
487.926 895.229 486.734 897.065 484.865 897.462 cv
482.998 897.86 481.162 896.669 480.766 894.802 cv
480.368 892.935 481.559 891.097 483.426 890.698 cv
485.293 890.304 487.131 891.495 487.53 893.362 cv
cp
516.57 564.727 mo
515.222 563.376 515.219 561.187 516.57 559.837 cv
517.922 558.487 520.109 558.487 521.461 559.837 cv
522.81 561.187 522.81 563.376 521.461 564.727 cv
520.109 566.079 517.922 566.079 516.57 564.727 cv
cp
491.351 825.495 mo
491.351 884.495 li
488.143 887.327 li
486.556 886.776 483.609 888.062 481.94 889.054 cv
478.728 890.962 475.953 893.423 476.73 897.075 cv
477.51 900.729 481.102 903.063 484.755 902.288 cv
488.41 901.507 489.924 897.995 489.964 894.265 cv
489.977 893.075 489.977 891.69 489.815 890.462 cv
494.809 886.056 li
494.809 824.04 li
470.931 800.7 li
470.931 684.571 li
519.877 635.011 li
519.877 570.019 li
521.364 569.368 522.864 567.083 523.993 565.3 cv
525.993 562.142 526.635 558.374 523.993 555.733 cv
521.351 553.093 517.068 553.089 514.428 555.731 cv
511.785 558.374 512.769 561.95 514.428 565.3 cv
514.886 566.226 515.604 567.427 516.42 568.409 cv
516.42 633.593 li
467.473 683.153 li
467.473 802.155 li
491.351 825.495 li
cp
f
549.164 566.204 mo
547.255 566.204 545.707 564.653 545.707 562.745 cv
545.707 560.837 547.255 559.286 549.164 559.286 cv
551.076 559.286 552.622 560.837 552.622 562.745 cv
552.622 564.653 551.076 566.204 549.164 566.204 cv
cp
491.178 911.347 mo
491.576 913.214 490.381 915.052 488.514 915.446 cv
486.647 915.845 484.81 914.653 484.416 912.784 cv
484.018 910.917 485.21 909.081 487.076 908.683 cv
488.943 908.284 490.78 909.479 491.178 911.347 cv
cp
531.406 582.286 mo
544.741 568.95 li
546.294 569.312 548.676 568.821 550.551 568.399 cv
554.195 567.581 557.317 565.37 557.317 561.634 cv
557.317 557.898 554.287 554.868 550.551 554.868 cv
546.815 554.868 544.984 558.093 543.787 561.634 cv
543.403 562.769 543.018 564.401 542.972 565.829 cv
527.947 580.854 li
527.947 639.921 li
488.184 679.398 li
488.184 759.155 li
498.557 770.681 li
498.557 899.187 li
491.626 905.249 li
490.003 904.841 487.198 906.081 485.59 907.038 cv
482.376 908.942 479.603 911.407 480.381 915.062 cv
481.16 918.714 484.755 921.048 488.405 920.271 cv
492.06 919.491 493.572 915.979 493.613 912.245 cv
493.628 910.995 493.63 909.526 493.443 908.255 cv
502.014 900.759 li
502.014 769.352 li
491.641 757.829 li
491.641 680.835 li
531.406 641.358 li
531.406 582.286 li
cp
f
548.57 595.739 mo
546.666 595.888 545.001 594.466 544.851 592.562 cv
544.703 590.661 546.126 588.997 548.03 588.849 cv
549.934 588.698 551.597 590.12 551.748 592.023 cv
551.897 593.927 550.473 595.591 548.57 595.739 cv
cp
497.016 932.097 mo
497.412 933.964 496.222 935.802 494.353 936.2 cv
492.486 936.595 490.648 935.407 490.252 933.538 cv
489.855 931.669 491.045 929.831 492.914 929.435 cv
494.781 929.038 496.619 930.229 497.016 932.097 cv
cp
539.19 608.2 mo
544.622 598.858 li
546.188 598.997 548.382 598.358 550.123 597.819 cv
553.695 596.72 556.631 594.274 556.34 590.546 cv
556.047 586.823 552.793 584.04 549.067 584.333 cv
545.343 584.626 543.769 587.983 542.851 591.606 cv
542.534 592.864 542.245 594.718 542.38 596.216 cv
542.214 596.118 li
535.722 607.284 li
536.104 641.372 li
494.234 683.146 li
494.234 755.448 li
505.181 766.683 li
504.037 918.597 li
497.271 925.96 li
495.626 925.69 492.974 926.872 491.431 927.788 cv
488.215 929.696 485.442 932.161 486.219 935.812 cv
486.996 939.468 490.59 941.8 494.243 941.021 cv
497.897 940.245 499.41 936.733 499.451 932.999 cv
499.466 931.714 499.464 930.2 499.261 928.903 cv
507.486 919.954 li
508.647 765.288 li
497.692 754.044 li
497.692 684.581 li
539.576 642.79 li
539.19 608.2 li
cp
f
491.639 567.192 mo
489.728 567.227 488.155 565.704 488.119 563.796 cv
488.089 561.886 489.609 560.313 491.516 560.278 cv
493.426 560.245 495.002 561.765 495.035 563.675 cv
495.068 565.583 493.547 567.159 491.639 567.192 cv
cp
457.849 905.444 mo
458.246 907.312 457.056 909.149 455.186 909.544 cv
453.319 909.942 451.482 908.751 451.086 906.884 cv
450.689 905.015 451.88 903.179 453.749 902.78 cv
455.617 902.386 457.452 903.577 457.849 905.444 cv
cp
495.453 569.854 mo
504.031 577.45 li
504.031 626.38 li
451.876 678.247 li
451.876 876.124 li
460.377 885.919 li
460.377 897.384 li
458.381 899.38 li
456.776 898.901 453.901 900.161 452.261 901.136 cv
449.048 903.044 446.274 905.505 447.052 909.159 cv
447.831 912.813 451.422 915.146 455.076 914.368 cv
458.73 913.589 460.243 910.081 460.286 906.347 cv
460.299 905.148 460.298 903.751 460.135 902.517 cv
463.835 898.815 li
463.835 884.63 li
455.334 874.835 li
455.334 679.685 li
507.488 627.817 li
507.488 575.894 li
497.94 567.437 li
498.057 565.909 497.605 563.89 497.205 562.249 cv
496.324 558.62 494.059 555.538 490.324 555.602 cv
486.589 555.669 483.613 558.749 483.681 562.487 cv
483.746 566.222 487.002 567.995 490.56 569.132 cv
491.89 569.556 493.896 569.976 495.453 569.854 cv
cp
f
523.164 529.472 mo
525.072 529.438 526.648 530.958 526.682 532.868 cv
526.718 534.778 525.195 536.351 523.285 536.384 cv
521.377 536.419 519.803 534.898 519.768 532.987 cv
519.734 531.079 521.256 529.503 523.164 529.472 cv
cp
487.422 772.165 mo
488.773 773.517 488.773 775.704 487.422 777.056 cv
486.074 778.405 483.885 778.405 482.534 777.056 cv
481.184 775.704 481.184 773.517 482.534 772.165 cv
483.885 770.813 486.074 770.813 487.422 772.165 cv
cp
521.973 524.794 mo
518.238 524.862 515.262 527.942 515.326 531.677 cv
515.391 535.415 518.648 537.188 522.21 538.325 cv
523.216 538.646 524.618 538.97 525.915 539.058 cv
533.714 547.388 li
533.714 565.931 li
522.184 578.898 li
522.184 635.612 li
482.998 675.667 li
482.998 767.64 li
481.898 768.642 480.847 770.259 480.001 771.595 cv
478.001 774.753 477.357 778.517 480.001 781.161 cv
482.643 783.802 486.924 783.802 489.567 781.161 cv
492.21 778.517 491.223 774.94 489.567 771.595 cv
488.909 770.261 487.712 768.364 486.455 767.366 cv
486.455 677.077 li
525.643 637.024 li
525.643 580.21 li
537.17 567.245 li
537.17 546.024 li
529.376 537.692 li
529.952 536.173 529.352 533.501 528.854 531.44 cv
527.972 527.812 525.707 524.731 521.973 524.794 cv
cp
f
541.119 740.448 mo
542.469 741.8 542.469 743.987 541.119 745.339 cv
539.772 746.688 537.58 746.688 536.229 745.339 cv
534.881 743.987 534.881 741.8 536.229 740.448 cv
537.58 739.099 539.772 739.099 541.119 740.448 cv
cp
543.264 736.343 mo
540.622 733.702 536.34 733.702 533.697 736.343 cv
531.057 738.985 531.697 742.751 533.697 745.909 cv
534.732 747.544 536.077 749.597 537.438 750.429 cv
537.438 771.743 li
516.42 792.489 li
516.42 1044.75 li
491.947 1068.23 li
491.947 1133.35 li
495.405 1133.35 li
495.405 1069.71 li
519.877 1046.22 li
519.877 793.935 li
540.894 773.188 li
540.894 749.446 li
541.865 748.407 542.736 746.977 543.264 745.909 cv
544.92 742.562 545.906 738.985 543.264 736.343 cv
cp
f
573.597 737.112 mo
572.246 735.761 572.246 733.573 573.597 732.224 cv
574.947 730.876 577.137 730.876 578.486 732.224 cv
579.839 733.573 579.839 735.761 578.486 737.112 cv
577.137 738.468 574.947 738.468 573.597 737.112 cv
cp
580.631 737.687 mo
582.287 734.337 583.273 730.761 580.631 728.116 cv
577.988 725.476 573.707 725.479 571.065 728.12 cv
568.422 730.761 569.065 734.528 571.065 737.687 cv
571.909 739.021 572.961 740.638 574.06 741.64 cv
574.06 750.136 li
577.518 750.136 li
577.518 741.917 li
578.774 740.919 579.972 739.019 580.631 737.687 cv
cp
f
640.74 689.505 mo
639.387 688.157 639.381 685.968 640.727 684.614 cv
642.07 683.261 644.262 683.253 645.615 684.599 cv
646.972 685.946 646.977 688.132 645.633 689.487 cv
644.287 690.845 642.097 690.852 640.74 689.505 cv
cp
641.891 694.55 mo
641.891 701.661 li
645.348 701.661 li
645.348 693.673 li
646.344 692.624 647.241 691.148 647.777 690.054 cv
649.422 686.698 650.397 683.122 647.746 680.485 cv
645.098 677.851 640.81 677.868 638.182 680.519 cv
635.547 683.169 636.199 686.931 638.211 690.085 cv
639.23 691.685 640.551 693.692 641.891 694.55 cv
cp
f
644.376 618.741 mo
645.73 620.089 645.734 622.276 644.391 623.63 cv
643.043 624.987 640.855 624.995 639.502 623.648 cv
638.148 622.302 638.139 620.112 639.484 618.759 cv
640.832 617.405 643.019 617.399 644.376 618.741 cv
cp
638.88 749.964 mo
640.16 751.382 640.049 753.565 638.635 754.847 cv
637.218 756.13 635.031 756.019 633.752 754.599 cv
632.469 753.185 632.582 751.001 633.996 749.718 cv
635.412 748.435 637.6 748.546 638.88 749.964 cv
cp
646.505 614.628 mo
643.853 611.995 639.572 612.011 636.94 614.663 cv
634.307 617.313 634.961 621.075 636.969 624.227 cv
637.745 625.444 638.694 626.894 639.692 627.898 cv
639.549 628.278 639.461 628.685 639.461 629.114 cv
639.461 648.038 li
623.023 662.854 li
622.297 663.511 621.881 664.442 621.881 665.421 cv
621.881 710.372 li
621.881 711.267 622.228 712.128 622.851 712.773 cv
633.428 723.743 li
633.697 744.419 li
633.704 744.979 633.856 745.497 634.098 745.962 cv
633.205 746.913 632.401 748.114 631.885 749.038 cv
630.063 752.3 628.898 755.819 631.401 758.595 cv
633.906 761.368 638.184 761.579 640.957 759.075 cv
643.727 756.569 643.277 752.776 641.44 749.521 cv
640.932 748.622 640.34 747.599 639.699 746.7 cv
640.264 746.085 640.613 745.273 640.613 744.376 cv
640.613 744.358 640.613 744.345 640.613 744.327 cv
640.324 722.286 li
640.313 721.403 639.968 720.563 639.355 719.933 cv
628.797 708.977 li
628.797 666.962 li
645.232 652.146 li
645.961 651.489 646.376 650.554 646.376 649.575 cv
646.376 629.114 li
646.376 628.069 645.901 627.144 645.166 626.509 cv
645.722 625.722 646.199 624.884 646.535 624.198 cv
648.182 620.843 649.156 617.267 646.505 614.628 cv
cp
f
576.63 707.075 mo
577.909 708.495 577.799 710.679 576.383 711.958 cv
574.965 713.239 572.78 713.128 571.498 711.712 cv
570.219 710.294 570.33 708.108 571.746 706.825 cv
573.162 705.546 575.35 705.655 576.63 707.075 cv
cp
575.809 702.015 mo
576.067 693.714 li
572.611 693.606 li
572.33 702.595 li
571.251 703.591 570.241 705.058 569.635 706.148 cv
567.81 709.409 566.648 712.933 569.151 715.704 cv
571.656 718.476 575.935 718.688 578.705 716.183 cv
581.477 713.681 581.027 709.89 579.19 706.632 cv
578.271 705.003 577.079 702.962 575.809 702.015 cv
cp
f
674.027 705.423 mo
675.918 705.157 677.666 706.472 677.932 708.362 cv
678.197 710.253 676.881 712.003 674.988 712.267 cv
673.098 712.532 671.351 711.216 671.085 709.325 cv
670.817 707.435 672.135 705.685 674.027 705.423 cv
cp
671.445 702.931 mo
671.445 672.192 li
667.986 672.192 li
667.986 704.521 li
667.448 706.102 668.49 709.011 669.339 710.692 cv
671.016 714.032 673.277 716.97 676.978 716.454 cv
680.681 715.931 683.254 712.511 682.734 708.808 cv
682.214 705.112 678.82 703.358 675.097 703.052 cv
673.958 702.96 672.643 702.872 671.445 702.931 cv
cp
f
552.031 527.024 mo
553.94 527.003 555.502 528.534 555.523 530.444 cv
555.543 532.354 554.012 533.917 552.101 533.935 cv
550.19 533.952 548.627 532.423 548.607 530.513 cv
548.586 528.604 550.123 527.042 552.031 527.024 cv
cp
519.041 757.146 mo
520.947 757.093 522.539 758.597 522.59 760.509 cv
522.641 762.417 521.137 764.003 519.229 764.058 cv
517.318 764.108 515.73 762.602 515.678 760.694 cv
515.627 758.788 517.133 757.196 519.041 757.146 cv
cp
550.601 522.614 mo
546.863 522.655 543.869 525.714 543.905 529.448 cv
543.94 533.187 547.076 535.362 550.736 536.144 cv
551.727 536.356 552.859 536.583 553.938 536.702 cv
554.045 537.257 554.274 537.796 554.662 538.263 cv
562.277 547.384 li
562.277 608.72 li
542.44 629.618 li
541.83 630.259 541.488 631.11 541.488 631.999 cv
541.488 644.985 li
503.297 683.741 li
502.66 684.388 502.303 685.259 502.303 686.167 cv
502.303 746.968 li
502.303 747.847 502.637 748.694 503.238 749.337 cv
510.276 756.825 li
510.94 757.534 511.835 757.896 512.738 757.911 cv
512.822 759.269 513.19 760.829 513.522 762.14 cv
514.438 765.763 516.73 768.819 520.468 768.722 cv
524.201 768.618 527.147 765.511 527.047 761.776 cv
526.943 758.038 523.67 756.294 520.101 755.194 cv
519.054 754.872 517.585 754.556 516.245 754.497 cv
516.255 753.634 515.951 752.767 515.317 752.091 cv
509.218 745.599 li
509.218 687.587 li
547.41 648.831 li
548.049 648.185 548.405 647.312 548.405 646.403 cv
548.405 633.376 li
568.243 612.477 li
568.854 611.837 569.193 610.985 569.193 610.097 cv
569.193 546.13 li
569.193 545.319 568.906 544.536 568.391 543.913 cv
559.972 533.829 li
559.501 533.267 558.889 532.894 558.23 532.714 cv
558.085 531.503 557.755 530.239 557.431 529.315 cv
556.199 525.788 554.336 522.583 550.601 522.614 cv
cp
f
600.435 761.415 mo
598.539 761.63 596.824 760.273 596.605 758.374 cv
596.387 756.477 597.748 754.761 599.644 754.542 cv
601.541 754.325 603.256 755.685 603.475 757.581 cv
603.695 759.479 602.336 761.194 600.435 761.415 cv
cp
602.616 763.97 mo
602.745 764.192 602.894 764.407 603.076 764.602 cv
611.978 774.11 li
613.281 775.505 615.469 775.577 616.865 774.273 cv
617.593 773.591 617.96 772.669 617.96 771.747 cv
617.96 770.899 617.651 770.052 617.026 769.388 cv
608.127 759.878 li
607.601 759.317 606.932 758.979 606.23 758.851 cv
605.959 757.898 605.593 756.97 605.256 756.259 cv
603.66 752.88 601.473 749.886 597.758 750.312 cv
594.049 750.739 591.391 754.097 591.817 757.808 cv
592.244 761.521 595.594 763.358 599.313 763.755 cv
600.34 763.862 601.514 763.97 602.616 763.97 cv
cp
f
655.844 728.741 mo
654.494 727.392 654.494 725.202 655.844 723.851 cv
657.195 722.501 659.385 722.501 660.734 723.851 cv
662.085 725.202 662.085 727.392 660.734 728.741 cv
659.385 730.093 657.195 730.093 655.844 728.741 cv
cp
657.037 733.823 mo
657.037 741.204 li
660.494 741.204 li
660.494 732.864 li
661.47 731.823 662.348 730.384 662.88 729.312 cv
664.534 725.966 665.518 722.39 662.88 719.745 cv
660.234 717.106 655.953 717.106 653.313 719.745 cv
650.67 722.39 651.31 726.155 653.313 729.312 cv
654.343 730.94 655.681 732.985 657.037 733.823 cv
cp
f
245.821 1086.58 mo
244.472 1085.23 244.472 1083.05 245.821 1081.69 cv
247.171 1080.34 249.36 1080.34 250.71 1081.69 cv
252.06 1083.05 252.06 1085.23 250.71 1086.58 cv
249.36 1087.93 247.171 1087.93 245.821 1086.58 cv
cp
243.288 1090.69 mo
245.931 1093.33 250.214 1093.33 252.854 1090.69 cv
255.497 1088.05 254.511 1084.47 252.854 1081.12 cv
252.278 1079.96 251.29 1078.35 250.21 1077.3 cv
250.462 1067.72 li
247.006 1067.63 li
246.765 1076.78 li
245.495 1077.7 244.256 1079.6 243.288 1081.12 cv
241.289 1084.28 240.647 1088.05 243.288 1090.69 cv
cp
f
457.464 1029.32 mo
456.113 1027.97 456.113 1025.78 457.464 1024.43 cv
458.813 1023.08 461.001 1023.08 462.352 1024.43 cv
463.701 1025.78 463.701 1027.97 462.352 1029.32 cv
461.001 1030.67 458.813 1030.67 457.464 1029.32 cv
cp
396.585 596.712 mo
395.234 595.36 395.234 593.173 396.585 591.823 cv
397.933 590.472 400.122 590.472 401.474 591.823 cv
402.822 593.173 402.822 595.36 401.474 596.712 cv
400.122 598.062 397.933 598.062 396.585 596.712 cv
cp
454.931 1033.43 mo
457.572 1036.07 461.852 1036.07 464.495 1033.43 cv
467.137 1030.78 466.151 1027.21 464.495 1023.86 cv
463.887 1022.63 462.822 1020.92 461.673 1019.88 cv
461.673 1007.32 li
400.731 944.651 li
400.731 601.477 li
401.931 600.511 403.089 598.731 404.006 597.282 cv
406.005 594.126 406.647 590.36 404.006 587.718 cv
401.364 585.073 397.081 585.073 394.44 587.716 cv
391.798 590.36 392.784 593.933 394.44 597.282 cv
395.085 598.591 396.245 600.44 397.474 601.452 cv
397.272 601.452 li
397.272 946.056 li
458.216 1008.73 li
458.216 1019.66 li
457.014 1020.62 455.849 1022.41 454.931 1023.86 cv
452.928 1027.02 452.288 1030.78 454.931 1033.43 cv
cp
f
100.801 986.87 mo
102.152 988.22 102.152 990.409 100.801 991.761 cv
99.4502 993.112 97.2627 993.112 95.9111 991.761 cv
94.5635 990.409 94.5635 988.22 95.9111 986.87 cv
97.2627 985.521 99.4502 985.521 100.801 986.87 cv
cp
103.335 982.765 mo
100.694 980.124 96.4111 980.12 93.7676 982.765 cv
91.1279 985.409 92.1133 988.981 93.7676 992.329 cv
94.4277 993.665 95.625 995.563 96.8818 996.56 cv
96.8818 1015.94 li
87.3994 1025.23 li
89.8174 1027.71 li
100.339 1017.4 li
100.339 996.284 li
101.438 995.28 102.489 993.665 103.335 992.329 cv
105.335 989.173 105.976 985.409 103.335 982.765 cv
cp
f
431.018 592.741 mo
432.368 594.089 432.368 596.28 431.018 597.628 cv
429.665 598.977 427.477 598.977 426.127 597.628 cv
424.776 596.28 424.776 594.089 426.127 592.741 cv
427.477 591.392 429.665 591.392 431.018 592.741 cv
cp
433.549 588.632 mo
430.909 585.991 426.626 585.991 423.984 588.632 cv
421.343 591.274 422.328 594.852 423.984 598.202 cv
424.567 599.382 425.571 601.007 426.664 602.058 cv
426.664 622.634 li
408.078 641.22 li
408.078 941.319 li
479.826 1012.63 li
479.826 1133.35 li
483.284 1133.35 li
483.284 1011.2 li
411.536 939.88 li
411.536 642.651 li
430.122 624.067 li
430.122 602.511 li
431.376 601.575 432.594 599.71 433.549 598.202 cv
435.551 595.044 436.192 591.274 433.549 588.632 cv
cp
f
428.934 529.249 mo
430.845 529.249 432.393 530.796 432.393 532.706 cv
432.393 534.616 430.845 536.163 428.934 536.163 cv
427.026 536.163 425.477 534.616 425.477 532.706 cv
425.477 530.796 427.026 529.249 428.934 529.249 cv
cp
430.32 524.829 mo
426.586 524.829 424.755 528.056 423.558 531.595 cv
422.936 533.429 422.297 536.563 423.155 538.007 cv
415.21 546.144 li
415.21 569.372 li
407.893 575.374 li
392.201 575.374 li
383.01 585.21 li
383.01 602.169 li
391.653 610.813 li
391.653 950.241 li
446.764 1005.71 li
446.764 1038.99 li
460.377 1052.82 li
460.377 1133.35 li
463.835 1133.35 li
463.835 1051.41 li
450.22 1037.58 li
450.22 1004.29 li
395.111 948.813 li
395.111 609.382 li
386.468 600.735 li
386.468 586.575 li
393.701 578.833 li
409.13 578.833 li
418.668 571.005 li
418.668 547.554 li
427.037 538.979 li
427.018 538.96 li
428.126 538.835 429.298 538.589 430.32 538.36 cv
433.968 537.542 437.085 535.333 437.085 531.595 cv
437.085 527.858 434.057 524.829 430.32 524.829 cv
cp
f
430.36 559.593 mo
432.272 559.593 433.819 561.142 433.819 563.05 cv
433.819 564.962 432.272 566.509 430.36 566.509 cv
428.451 566.509 426.903 564.962 426.903 563.05 cv
426.903 561.142 428.451 559.593 430.36 559.593 cv
cp
431.747 555.175 mo
428.011 555.175 426.181 558.401 424.985 561.94 cv
424.376 563.737 423.743 566.794 424.528 568.274 cv
421.97 573.954 li
412.39 583.759 li
412.822 612.704 li
402.893 622.634 li
402.893 943.032 li
472.912 1014.78 li
472.912 1134.81 li
476.369 1134.81 li
476.369 1013.37 li
406.351 941.626 li
406.351 624.067 li
416.302 614.116 li
415.868 585.146 li
424.874 575.933 li
427.828 569.368 li
429.106 569.284 430.535 568.977 431.747 568.706 cv
435.395 567.886 438.514 565.675 438.514 561.94 cv
438.514 558.202 435.484 555.175 431.747 555.175 cv
cp
f
223.177 795.431 mo
221.266 795.431 219.719 793.886 219.719 791.974 cv
219.719 790.062 221.266 788.517 223.177 788.517 cv
225.088 788.517 226.634 790.062 226.634 791.974 cv
226.634 793.886 225.088 795.431 223.177 795.431 cv
cp
216.974 795.31 mo
159.553 853.292 li
88.6084 853.292 li
88.6084 856.749 li
160.994 856.749 li
218.95 798.227 li
220.503 798.503 222.768 798.028 224.563 797.626 cv
228.21 796.81 231.328 794.597 231.328 790.862 cv
231.328 787.124 228.3 784.095 224.563 784.095 cv
220.827 784.095 218.996 787.323 217.801 790.862 cv
217.393 792.063 216.977 793.827 216.974 795.31 cv
cp
f
446.003 1066.94 mo
446.036 1068.84 444.514 1070.42 442.605 1070.45 cv
440.694 1070.49 439.12 1068.96 439.087 1067.06 cv
439.053 1065.15 440.576 1063.57 442.484 1063.54 cv
444.393 1063.5 445.969 1065.02 446.003 1066.94 cv
cp
446.835 1073.07 mo
449.139 1076.42 li
449.139 1138.56 li
452.597 1138.56 li
452.597 1075.35 li
448.926 1070.01 li
448.893 1068.59 448.511 1066.91 448.172 1065.51 cv
447.29 1061.88 445.026 1058.8 441.293 1058.86 cv
437.555 1058.93 434.579 1062.01 434.645 1065.75 cv
434.71 1069.48 437.969 1071.26 441.526 1072.39 cv
442.977 1072.85 445.238 1073.32 446.835 1073.07 cv
cp
f
441.247 1085.07 mo
441.282 1086.98 439.76 1088.55 437.851 1088.59 cv
435.94 1088.62 434.367 1087.1 434.334 1085.19 cv
434.299 1083.28 435.822 1081.7 437.73 1081.67 cv
439.637 1081.64 441.214 1083.16 441.247 1085.07 cv
cp
441.873 1091.23 mo
444.385 1094.99 li
444.385 1138.56 li
447.843 1138.56 li
447.843 1093.95 li
444.183 1088.46 li
444.206 1086.98 443.782 1085.15 443.418 1083.64 cv
442.536 1080.01 440.272 1076.93 436.537 1077 cv
432.801 1077.06 429.824 1080.15 429.89 1083.88 cv
429.956 1087.62 433.215 1089.39 436.772 1090.53 cv
438.161 1090.97 440.291 1091.41 441.873 1091.23 cv
cp
f
491.972 537.54 mo
490.06 537.577 488.488 536.054 488.453 534.146 cv
488.42 532.233 489.942 530.661 491.851 530.628 cv
493.758 530.593 495.335 532.112 495.369 534.024 cv
495.402 535.933 493.881 537.509 491.972 537.54 cv
cp
464.655 923.735 mo
465.055 925.602 463.863 927.44 461.995 927.835 cv
460.128 928.233 458.29 927.042 457.893 925.179 cv
457.495 923.308 458.686 921.47 460.556 921.075 cv
462.423 920.677 464.26 921.868 464.655 923.735 cv
cp
496.439 540.12 mo
504.031 547.708 li
504.031 568.454 li
510.082 574.505 li
510.082 629.845 li
458.216 682.288 li
458.216 872.399 li
467.472 882.628 li
467.472 915.058 li
464.712 917.585 li
463.059 917.429 460.556 918.544 459.068 919.427 cv
455.855 921.335 453.081 923.796 453.86 927.45 cv
454.637 931.106 458.23 933.437 461.883 932.661 cv
465.538 931.884 467.051 928.372 467.093 924.638 cv
467.107 923.273 467.101 921.655 466.856 920.31 cv
470.931 916.581 li
470.931 881.294 li
461.673 871.067 li
461.673 683.708 li
513.539 631.265 li
513.539 573.075 li
507.488 567.023 li
507.488 546.276 li
498.293 537.083 li
498.256 535.671 497.877 533.995 497.537 532.599 cv
496.656 528.968 494.393 525.888 490.659 525.952 cv
486.922 526.017 483.947 529.099 484.01 532.835 cv
484.078 536.569 487.335 538.345 490.893 539.481 cv
492.416 539.968 494.837 540.458 496.439 540.12 cv
cp
f
147.592 796.761 mo
148.928 795.398 151.118 795.374 152.481 796.712 cv
153.847 798.048 153.87 800.237 152.532 801.601 cv
151.197 802.966 149.007 802.989 147.643 801.651 cv
146.278 800.313 146.255 798.126 147.592 796.761 cv
cp
143.128 797.394 mo
88.6084 797.394 li
88.6084 800.851 li
142.787 800.851 li
143.746 802.079 145.599 803.261 147.097 804.19 cv
150.275 806.155 154.052 806.759 156.665 804.093 cv
159.28 801.421 159.235 797.136 156.564 794.523 cv
153.895 791.909 150.331 792.933 146.999 794.624 cv
145.809 795.227 144.165 796.271 143.128 797.394 cv
cp
f
114.267 815.151 mo
115.628 816.487 115.652 818.677 114.315 820.04 cv
112.979 821.405 110.79 821.427 109.426 820.091 cv
108.062 818.753 108.038 816.567 109.375 815.202 cv
110.712 813.839 112.901 813.817 114.267 815.151 cv
cp
118.347 812.966 mo
115.679 810.349 112.114 811.376 108.78 813.063 cv
107.49 813.718 105.664 814.888 104.66 816.12 cv
88.6084 816.12 li
88.6084 819.577 li
104.808 819.577 li
105.813 820.702 107.497 821.774 108.88 822.63 cv
112.058 824.595 115.831 825.2 118.448 822.532 cv
121.062 819.862 121.018 815.579 118.347 812.966 cv
cp
f
114.267 1047.68 mo
115.628 1049.02 115.652 1051.21 114.315 1052.58 cv
112.979 1053.94 110.79 1053.96 109.426 1052.62 cv
108.062 1051.29 108.038 1049.1 109.375 1047.74 cv
110.712 1046.37 112.901 1046.35 114.267 1047.68 cv
cp
118.347 1045.5 mo
115.679 1042.88 112.114 1043.91 108.78 1045.6 cv
107.49 1046.25 105.665 1047.42 104.66 1048.65 cv
88.6084 1048.65 li
88.6084 1052.11 li
104.808 1052.11 li
105.813 1053.24 107.497 1054.31 108.88 1055.16 cv
112.058 1057.13 115.831 1057.73 118.448 1055.07 cv
121.062 1052.4 121.018 1048.11 118.347 1045.5 cv
cp
f
113.957 1078.52 mo
115.321 1079.85 115.345 1082.04 114.007 1083.41 cv
112.672 1084.77 110.483 1084.79 109.118 1083.46 cv
107.754 1082.12 107.73 1079.93 109.067 1078.57 cv
110.403 1077.2 112.593 1077.18 113.957 1078.52 cv
cp
118.04 1076.33 mo
115.37 1073.71 111.807 1074.74 108.474 1076.43 cv
107.184 1077.08 105.357 1078.25 104.352 1079.49 cv
88.6084 1079.49 li
88.6084 1082.94 li
104.503 1082.94 li
105.509 1084.07 107.19 1085.14 108.573 1086 cv
111.75 1087.96 115.524 1088.57 118.142 1085.9 cv
120.755 1083.23 120.71 1078.94 118.04 1076.33 cv
cp
f
129.97 1063.82 mo
131.333 1065.16 131.356 1067.35 130.02 1068.71 cv
128.683 1070.08 126.495 1070.1 125.131 1068.76 cv
123.767 1067.42 123.743 1065.24 125.077 1063.87 cv
126.416 1062.51 128.604 1062.49 129.97 1063.82 cv
cp
134.052 1061.63 mo
131.381 1059.02 127.816 1060.04 124.485 1061.74 cv
123.194 1062.39 121.366 1063.56 120.362 1064.79 cv
88.6084 1064.79 li
88.6084 1068.25 li
120.515 1068.25 li
121.521 1069.37 123.201 1070.44 124.583 1071.3 cv
127.761 1073.27 131.536 1073.87 134.151 1071.2 cv
136.767 1068.53 136.721 1064.25 134.052 1061.63 cv
cp
f
129.97 1092.93 mo
131.333 1094.26 131.356 1096.45 130.02 1097.82 cv
128.683 1099.18 126.495 1099.2 125.131 1097.86 cv
123.767 1096.53 123.743 1094.34 125.077 1092.98 cv
126.416 1091.61 128.604 1091.59 129.97 1092.93 cv
cp
134.052 1090.74 mo
131.381 1088.12 127.816 1089.15 124.485 1090.84 cv
123.194 1091.49 121.367 1092.66 120.362 1093.9 cv
88.6084 1093.9 li
88.6084 1097.35 li
120.515 1097.35 li
121.521 1098.48 123.201 1099.55 124.583 1100.41 cv
127.761 1102.37 131.536 1102.97 134.151 1100.31 cv
136.767 1097.64 136.721 1093.35 134.052 1090.74 cv
cp
f
228.147 848.489 mo
230.057 848.489 231.605 850.036 231.605 851.948 cv
231.605 853.858 230.057 855.405 228.147 855.405 cv
226.236 855.405 224.688 853.858 224.688 851.948 cv
224.688 850.036 226.236 848.489 228.147 848.489 cv
cp
229.533 844.069 mo
225.797 844.069 223.966 847.298 222.77 850.837 cv
222.387 851.968 222.001 853.595 221.952 855.021 cv
221.935 855.021 li
221.935 884.29 li
193.438 913.802 li
170.796 913.802 li
139.238 945.36 li
139.238 996.345 li
158.257 1015.37 li
158.257 1117.93 li
143.238 1132.1 li
145.612 1134.61 li
161.714 1119.42 li
161.714 1013.94 li
142.696 994.913 li
142.696 946.792 li
172.227 917.259 li
194.905 917.259 li
225.393 885.687 li
225.393 858.269 li
226.727 858.208 228.248 857.89 229.533 857.601 cv
233.179 856.782 236.299 854.571 236.299 850.837 cv
236.299 847.099 233.27 844.069 229.533 844.069 cv
cp
f
424.844 1115.24 mo
426.752 1115.21 428.327 1116.73 428.363 1118.64 cv
428.395 1120.55 426.874 1122.12 424.966 1122.15 cv
423.055 1122.19 421.478 1120.67 421.447 1118.76 cv
421.413 1116.85 422.936 1115.28 424.844 1115.24 cv
cp
423.651 1110.57 mo
419.913 1110.63 416.938 1113.71 417.005 1117.45 cv
417.072 1121.18 420.327 1122.96 423.885 1124.1 cv
424.734 1124.37 425.861 1124.63 426.972 1124.76 cv
426.934 1124.79 li
429.688 1129.12 li
429.688 1134.81 li
433.147 1134.81 li
433.147 1128.11 li
430.633 1124.16 li
430.639 1124.16 430.647 1124.15 430.651 1124.15 cv
431.855 1122.9 431.118 1119.63 430.531 1117.21 cv
429.648 1113.58 427.385 1110.5 423.651 1110.57 cv
cp
f
209.936 728.821 mo
211.264 730.196 211.227 732.386 209.852 733.712 cv
208.476 735.04 206.288 735.001 204.963 733.628 cv
203.636 732.253 203.673 730.065 205.048 728.739 cv
206.421 727.411 208.609 727.452 209.936 728.821 cv
cp
209.711 724.634 mo
209.747 724.634 li
209.747 715.704 li
206.29 715.704 li
206.29 723.698 li
204.932 724.528 203.572 726.528 202.524 728.122 cv
200.47 731.243 199.761 735.001 202.356 737.688 cv
204.952 740.374 209.235 740.448 211.923 737.854 cv
214.61 735.259 213.688 731.665 212.091 728.288 cv
211.568 727.187 210.692 725.698 209.711 724.634 cv
cp
f
352.491 779.153 mo
352.491 781.063 350.942 782.61 349.033 782.61 cv
347.124 782.61 345.575 781.063 345.575 779.153 cv
345.575 777.245 347.124 775.694 349.033 775.694 cv
350.942 775.694 352.491 777.245 352.491 779.153 cv
cp
357.188 778.067 mo
357.188 773.866 353.784 770.464 349.585 770.464 cv
345.385 770.464 341.979 773.866 341.979 778.067 cv
341.979 782.269 345.385 785.673 349.585 785.673 cv
353.784 785.673 357.188 782.269 357.188 778.067 cv
cp
f
481.156 874.942 mo
481.156 876.851 479.609 878.399 477.699 878.399 cv
475.789 878.399 474.243 876.851 474.243 874.942 cv
474.243 873.032 475.789 871.485 477.699 871.485 cv
479.609 871.485 481.156 873.032 481.156 874.942 cv
cp
485.855 873.854 mo
485.855 869.655 482.451 866.251 478.255 866.251 cv
474.051 866.251 470.647 869.655 470.647 873.854 cv
470.647 878.056 474.051 881.46 478.255 881.46 cv
482.451 881.46 485.855 878.056 485.855 873.854 cv
cp
f
285.396 1116.33 mo
287.304 1116.33 288.853 1117.87 288.853 1119.78 cv
288.853 1121.7 287.304 1123.24 285.396 1123.24 cv
283.485 1123.24 281.936 1121.7 281.936 1119.78 cv
281.936 1117.87 283.485 1116.33 285.396 1116.33 cv
cp
285.946 1111.09 mo
281.745 1111.09 278.342 1114.5 278.342 1118.7 cv
278.342 1122.9 281.745 1126.3 285.946 1126.3 cv
290.147 1126.3 293.551 1122.9 293.551 1118.7 cv
293.551 1114.5 290.147 1111.09 285.946 1111.09 cv
cp
f
315.057 1115.34 mo
316.966 1115.34 318.515 1116.88 318.515 1118.79 cv
318.515 1120.71 316.966 1122.25 315.057 1122.25 cv
313.147 1122.25 311.599 1120.71 311.599 1118.79 cv
311.599 1116.88 313.147 1115.34 315.057 1115.34 cv
cp
315.608 1110.11 mo
311.408 1110.11 308.003 1113.51 308.003 1117.71 cv
308.003 1121.91 311.408 1125.31 315.608 1125.31 cv
319.808 1125.31 323.214 1121.91 323.214 1117.71 cv
323.214 1113.51 319.808 1110.11 315.608 1110.11 cv
cp
f
345.024 1123.34 mo
343.114 1123.34 341.563 1121.79 341.563 1119.88 cv
341.563 1117.97 343.114 1116.42 345.024 1116.42 cv
346.933 1116.42 348.483 1117.97 348.483 1119.88 cv
348.483 1121.79 346.933 1123.34 345.024 1123.34 cv
cp
345.575 1126.4 mo
349.776 1126.4 353.18 1123 353.18 1118.79 cv
353.18 1114.59 349.776 1111.19 345.575 1111.19 cv
341.376 1111.19 337.972 1114.59 337.972 1118.79 cv
337.972 1123 341.376 1126.4 345.575 1126.4 cv
cp
f
376.841 1116.42 mo
378.749 1116.42 380.298 1117.97 380.298 1119.88 cv
380.298 1121.79 378.749 1123.34 376.841 1123.34 cv
374.93 1123.34 373.381 1121.79 373.381 1119.88 cv
373.381 1117.97 374.93 1116.42 376.841 1116.42 cv
cp
377.391 1111.19 mo
373.19 1111.19 369.786 1114.59 369.786 1118.79 cv
369.786 1123 373.19 1126.4 377.391 1126.4 cv
381.591 1126.4 384.995 1123 384.995 1118.79 cv
384.995 1114.59 381.591 1111.19 377.391 1111.19 cv
cp
f
209.548 752.224 mo
209.548 754.13 208 755.681 206.091 755.681 cv
204.181 755.681 202.633 754.13 202.633 752.224 cv
202.633 750.312 204.181 748.767 206.091 748.767 cv
208 748.767 209.548 750.312 209.548 752.224 cv
cp
214.245 751.136 mo
214.245 746.938 210.842 743.532 206.643 743.532 cv
202.44 743.532 199.036 746.938 199.036 751.136 cv
199.036 755.337 202.44 758.739 206.643 758.739 cv
210.842 758.739 214.245 755.337 214.245 751.136 cv
cp
f
101.34 871.485 mo
103.248 871.485 104.798 873.032 104.798 874.942 cv
104.798 876.851 103.248 878.399 101.34 878.399 cv
99.4287 878.399 97.8799 876.851 97.8799 874.942 cv
97.8799 873.032 99.4287 871.485 101.34 871.485 cv
cp
101.892 866.251 mo
97.6914 866.251 94.2861 869.655 94.2861 873.854 cv
94.2861 878.056 97.6914 881.46 101.892 881.46 cv
106.091 881.46 109.495 878.056 109.495 873.854 cv
109.495 869.655 106.091 866.251 101.892 866.251 cv
cp
f
139.264 871.485 mo
141.173 871.485 142.722 873.032 142.722 874.942 cv
142.722 876.851 141.173 878.399 139.264 878.399 cv
137.354 878.399 135.805 876.851 135.805 874.942 cv
135.805 873.032 137.354 871.485 139.264 871.485 cv
cp
139.815 866.251 mo
135.615 866.251 132.21 869.655 132.21 873.854 cv
132.21 878.056 135.615 881.46 139.815 881.46 cv
144.015 881.46 147.421 878.056 147.421 873.854 cv
147.421 869.655 144.015 866.251 139.815 866.251 cv
cp
f
184.606 890.685 mo
184.606 892.597 183.058 894.142 181.149 894.142 cv
179.239 894.142 177.688 892.597 177.688 890.685 cv
177.688 888.774 179.239 887.227 181.149 887.227 cv
183.058 887.227 184.606 888.774 184.606 890.685 cv
cp
189.304 889.597 mo
189.304 885.399 185.899 881.993 181.7 881.993 cv
177.498 881.993 174.095 885.399 174.095 889.597 cv
174.095 893.798 177.498 897.202 181.7 897.202 cv
185.899 897.202 189.304 893.798 189.304 889.597 cv
cp
f
181.518 976.837 mo
181.518 978.749 179.97 980.296 178.06 980.296 cv
176.151 980.296 174.602 978.749 174.602 976.837 cv
174.602 974.931 176.151 973.38 178.06 973.38 cv
179.97 973.38 181.518 974.931 181.518 976.837 cv
cp
186.215 975.755 mo
186.215 971.552 182.811 968.149 178.612 968.149 cv
174.411 968.149 171.007 971.552 171.007 975.755 cv
171.007 979.954 174.411 983.358 178.612 983.358 cv
182.811 983.358 186.215 979.954 186.215 975.755 cv
cp
f
252.681 1023.5 mo
250.771 1023.5 249.222 1021.95 249.222 1020.04 cv
249.222 1018.13 250.771 1016.59 252.681 1016.59 cv
254.591 1016.59 256.138 1018.13 256.138 1020.04 cv
256.138 1021.95 254.591 1023.5 252.681 1023.5 cv
cp
253.233 1026.56 mo
257.432 1026.56 260.837 1023.16 260.837 1018.96 cv
260.837 1014.76 257.432 1011.35 253.233 1011.35 cv
249.032 1011.35 245.626 1014.76 245.626 1018.96 cv
245.626 1023.16 249.032 1026.56 253.233 1026.56 cv
cp
f
331.479 913.876 mo
331.479 915.784 329.932 917.333 328.022 917.333 cv
326.112 917.333 324.563 915.784 324.563 913.876 cv
324.563 911.964 326.112 910.417 328.022 910.417 cv
329.932 910.417 331.479 911.964 331.479 913.876 cv
cp
336.178 912.788 mo
336.178 908.589 332.772 905.185 328.573 905.185 cv
324.373 905.185 320.97 908.589 320.97 912.788 cv
320.97 916.989 324.373 920.394 328.573 920.394 cv
332.772 920.394 336.178 916.989 336.178 912.788 cv
cp
f
331.479 935.632 mo
331.479 937.544 329.932 939.091 328.022 939.091 cv
326.112 939.091 324.563 937.544 324.563 935.632 cv
324.563 933.722 326.112 932.175 328.022 932.175 cv
329.932 932.175 331.479 933.722 331.479 935.632 cv
cp
336.178 934.544 mo
336.178 930.347 332.772 926.944 328.573 926.944 cv
324.373 926.944 320.97 930.347 320.97 934.544 cv
320.97 938.745 324.373 942.149 328.573 942.149 cv
332.772 942.149 336.178 938.745 336.178 934.544 cv
cp
f
688.889 743.089 mo
687.131 742.339 686.318 740.306 687.068 738.55 cv
687.818 736.796 689.851 735.981 691.609 736.729 cv
693.363 737.483 694.181 739.513 693.428 741.269 cv
692.676 743.024 690.643 743.839 688.889 743.089 cv
cp
688.191 746.12 mo
692.053 747.773 696.522 745.983 698.174 742.12 cv
699.826 738.257 698.035 733.79 694.174 732.138 cv
690.31 730.483 685.844 732.278 684.191 736.14 cv
682.537 739.999 684.328 744.47 688.191 746.12 cv
cp
f
574.807 651.601 mo
576.166 650.257 578.351 650.271 579.695 651.624 cv
581.037 652.985 581.023 655.177 579.666 656.517 cv
578.307 657.858 576.122 657.843 574.776 656.487 cv
573.434 655.13 573.445 652.94 574.807 651.601 cv
cp
566.551 655.622 mo
570.086 655.622 li
571.101 656.837 572.909 657.983 574.192 658.628 cv
577.531 660.304 581.098 661.31 583.76 658.685 cv
586.418 656.062 586.44 651.776 583.813 649.118 cv
581.19 646.462 577.42 647.079 574.251 649.06 cv
572.857 649.929 571.161 651.023 570.163 652.163 cv
565.127 652.163 li
537.438 679.685 li
537.438 700.167 li
550.277 712.269 li
550.277 767.921 li
522.229 795.956 li
522.229 1046.63 li
497.728 1070.4 li
497.728 1133.35 li
501.185 1133.35 li
501.185 1071.86 li
525.685 1048.09 li
525.685 797.386 li
553.736 769.352 li
553.736 710.776 li
540.894 698.675 li
540.894 681.122 li
566.551 655.622 li
cp
f
610.385 595.692 mo
608.48 595.577 607.023 593.94 607.139 592.034 cv
607.252 590.13 608.889 588.677 610.795 588.788 cv
612.699 588.903 614.152 590.54 614.041 592.444 cv
613.928 594.351 612.291 595.804 610.385 595.692 cv
cp
598.256 606.778 mo
606.686 598.345 li
608.168 598.505 610.077 598.22 611.641 597.964 cv
615.328 597.364 618.57 595.343 618.791 591.61 cv
619.016 587.884 616.172 584.681 612.44 584.458 cv
608.711 584.239 606.69 587.349 605.289 590.81 cv
604.728 592.19 604.114 594.339 604.203 595.94 cv
594.797 605.347 li
594.797 658.968 li
587.993 666.14 li
565.065 666.14 li
555.586 676.716 li
555.586 769.319 li
527.803 798.136 li
527.803 1050.07 li
504.031 1072.4 li
504.031 1133.35 li
507.488 1133.35 li
507.488 1073.9 li
531.26 1051.56 li
531.26 799.53 li
559.045 770.714 li
559.045 678.04 li
566.611 669.597 li
589.479 669.597 li
598.256 660.347 li
598.256 606.778 li
cp
f
683.78 696.087 mo
681.869 696.095 680.316 694.556 680.309 692.644 cv
680.299 690.735 681.843 689.185 683.752 689.177 cv
685.66 689.167 687.214 690.71 687.223 692.616 cv
687.232 694.528 685.691 696.081 683.78 696.087 cv
cp
677.784 775.61 mo
677.784 732.61 li
695.131 717.052 li
695.131 701.032 li
689.923 696.854 li
690.159 695.247 689.639 692.956 689.139 691.499 cv
687.926 687.964 686.082 684.749 682.35 684.761 cv
678.611 684.776 675.598 687.815 675.611 691.554 cv
675.626 695.288 678.748 697.483 682.401 698.29 cv
683.902 698.62 685.734 699.001 687.201 698.952 cv
687.127 699.044 li
691.674 702.69 li
691.674 715.509 li
674.324 731.067 li
674.324 774.226 li
655.001 794.511 li
555.016 794.511 li
533.873 813.624 li
533.873 1015.9 li
538.348 1022.6 li
541.223 1020.68 li
537.33 1014.85 li
537.33 815.161 li
556.347 797.968 li
656.48 797.968 li
677.784 775.61 li
cp
f
615.348 731.425 mo
615.41 730.884 615.605 730.394 615.882 729.966 cv
616.284 729.79 616.659 729.54 616.982 729.208 cv
617.147 729.038 617.289 728.858 617.411 728.667 cv
617.951 728.433 618.553 728.321 619.181 728.394 cv
621.078 728.616 622.438 730.331 622.219 732.226 cv
621.994 734.124 620.277 735.479 618.383 735.263 cv
616.486 735.04 615.13 733.323 615.348 731.425 cv
cp
612.124 627.206 mo
611.863 627.142 611.594 627.099 611.313 627.099 cv
611.19 627.099 611.073 627.124 610.953 627.136 cv
610.355 626.993 609.785 626.7 609.317 626.235 cv
607.964 624.888 607.955 622.698 609.301 621.345 cv
610.647 619.991 612.836 619.985 614.19 621.329 cv
615.545 622.677 615.551 624.862 614.207 626.218 cv
613.626 626.804 612.885 627.122 612.124 627.206 cv
cp
607.855 685.874 mo
602.336 701.773 li
602.21 702.136 602.144 702.519 602.144 702.907 cv
602.144 718.151 li
602.144 719.089 602.523 719.981 603.193 720.634 cv
612.093 729.278 li
612.357 729.536 612.66 729.727 612.977 729.884 cv
613.034 730.763 613.164 731.622 613.31 732.308 cv
614.093 735.962 615.537 739.376 619.248 739.81 cv
622.96 740.245 626.317 737.585 626.748 733.872 cv
627.182 730.167 624.344 727.61 620.815 726.37 cv
619.843 726.03 618.73 725.659 617.66 725.407 cv
617.486 725.011 617.24 724.64 616.91 724.317 cv
609.06 716.688 li
609.06 703.487 li
614.58 687.593 li
614.705 687.227 614.769 686.843 614.769 686.458 cv
614.769 630.558 li
614.769 630.22 614.706 629.901 614.616 629.593 cv
615.326 628.673 615.943 627.618 616.351 626.786 cv
617.996 623.429 618.972 619.852 616.32 617.216 cv
613.67 614.581 609.389 614.599 606.755 617.249 cv
604.123 619.899 604.776 623.661 606.785 626.815 cv
607.225 627.505 607.722 628.271 608.251 628.987 cv
608.006 629.46 607.855 629.989 607.855 630.558 cv
607.855 685.874 li
cp
f
547.644 1043.11 mo
548.996 1044.46 548.996 1046.65 547.644 1048 cv
546.295 1049.35 544.105 1049.35 542.756 1048 cv
541.405 1046.65 541.405 1044.46 542.756 1043.11 cv
544.105 1041.75 546.295 1041.75 547.644 1043.11 cv
cp
541.488 1040.44 mo
541.62 1040.44 li
541.116 1041.14 540.643 1041.87 540.223 1042.54 cv
538.222 1045.69 537.582 1049.46 540.223 1052.1 cv
542.863 1054.74 547.147 1054.75 549.789 1052.1 cv
552.431 1049.46 551.445 1045.89 549.789 1042.54 cv
549.449 1041.85 548.965 1041.01 548.405 1040.22 cv
548.405 1034.82 li
541.488 1034.82 li
541.488 1040.44 li
cp
f
347.02 1033.88 mo
345.471 1033.88 344.211 1032.62 344.211 1031.07 cv
344.211 1029.52 345.471 1028.26 347.02 1028.26 cv
348.573 1028.26 349.831 1029.52 349.831 1031.07 cv
349.831 1032.62 348.573 1033.88 347.02 1033.88 cv
cp
262.157 1138.54 mo
265.022 1138.54 267.344 1136.22 267.344 1133.35 cv
267.344 1118.56 li
351.893 1033.51 li
352.899 1032.5 353.403 1031.17 353.403 1029.85 cv
353.403 1028.52 352.893 1027.19 351.873 1026.17 cv
349.84 1024.16 346.558 1024.17 344.538 1026.2 cv
256.971 1114.28 li
256.971 1133.35 li
256.971 1136.22 259.294 1138.54 262.157 1138.54 cv
cp
f
344.542 859.737 mo
344.542 857.292 346.525 855.308 348.973 855.308 cv
351.419 855.308 353.403 857.292 353.403 859.737 cv
353.403 862.185 351.419 864.167 348.973 864.167 cv
346.525 864.167 344.542 862.185 344.542 859.737 cv
cp
328.109 955.243 mo
330.556 955.243 332.54 957.226 332.54 959.675 cv
332.54 962.118 330.556 964.104 328.109 964.104 cv
325.663 964.104 323.679 962.118 323.679 959.675 cv
323.679 957.226 325.663 955.243 328.109 955.243 cv
cp
340.22 858.765 mo
340.22 943.835 li
333.304 950.972 li
327.218 950.972 li
322.445 950.972 318.573 954.841 318.573 959.616 cv
318.573 964.39 322.445 968.261 327.218 968.261 cv
336.966 968.261 li
339.305 968.261 341.544 967.313 343.173 965.634 cv
355.072 953.352 li
356.634 951.739 357.509 949.581 357.509 947.335 cv
357.509 858.765 li
357.509 853.989 353.64 850.12 348.864 850.12 cv
344.09 850.12 340.22 853.989 340.22 858.765 cv
cp
f
121.663 927.06 mo
126.914 927.06 131.171 922.8 131.171 917.55 cv
131.171 912.296 126.914 908.04 121.663 908.04 cv
116.409 908.04 112.154 912.296 112.154 917.55 cv
112.154 922.8 116.409 927.06 121.663 927.06 cv
1 1 1 rgb
f
285.946 968.542 mo
291.198 968.542 295.454 964.286 295.454 959.032 cv
295.454 953.782 291.198 949.524 285.946 949.524 cv
280.694 949.524 276.438 953.782 276.438 959.032 cv
276.438 964.286 280.694 968.542 285.946 968.542 cv
f
248.59 1068.37 mo
253.843 1068.37 258.099 1064.12 258.099 1058.86 cv
258.099 1053.61 253.843 1049.35 248.59 1049.35 cv
243.337 1049.35 239.081 1053.61 239.081 1058.86 cv
239.081 1064.12 243.337 1068.37 248.59 1068.37 cv
f
429.474 632.86 mo
434.727 632.86 438.981 628.604 438.981 623.351 cv
438.981 618.101 434.727 613.843 429.474 613.843 cv
424.22 613.843 419.964 618.101 419.964 623.351 cv
419.964 628.604 424.22 632.86 429.474 632.86 cv
f
82.5713 934.747 mo
87.8535 934.747 92.1357 930.462 92.1357 925.181 cv
92.1357 919.898 87.8535 915.614 82.5713 915.614 cv
77.2881 915.614 73.0049 919.898 73.0049 925.181 cv
73.0049 930.462 77.2881 934.747 82.5713 934.747 cv
cp
f
543.707 1036.13 mo
548.99 1036.13 553.273 1031.84 553.273 1026.56 cv
553.273 1021.28 548.99 1016.99 543.707 1016.99 cv
538.424 1016.99 534.143 1021.28 534.143 1026.56 cv
534.143 1031.84 538.424 1036.13 543.707 1036.13 cv
cp
f
575.791 766.692 mo
581.07 766.692 585.355 762.407 585.355 757.126 cv
585.355 751.841 581.07 747.56 575.791 747.56 cv
570.506 747.56 566.223 751.841 566.223 757.126 cv
566.223 762.407 570.506 766.692 575.791 766.692 cv
cp
f
539.785 707.849 mo
545.068 707.849 549.351 703.563 549.351 698.282 cv
549.351 692.999 545.068 688.718 539.785 688.718 cv
534.502 688.718 530.219 692.999 530.219 698.282 cv
530.219 703.563 534.502 707.849 539.785 707.849 cv
cp
f
554.549 630.558 mo
559.835 630.558 564.118 626.274 564.118 620.991 cv
564.118 615.71 559.835 611.425 554.549 611.425 cv
549.269 611.425 544.984 615.71 544.984 620.991 cv
544.984 626.274 549.269 630.558 554.549 630.558 cv
cp
f
574.051 695.532 mo
579.335 695.532 583.618 691.249 583.618 685.966 cv
583.618 680.685 579.335 676.399 574.051 676.399 cv
568.769 676.399 564.484 680.685 564.484 685.966 cv
564.484 691.249 568.769 695.532 574.051 695.532 cv
cp
f
616.626 787.218 mo
621.909 787.218 626.192 782.937 626.192 777.653 cv
626.192 772.372 621.909 768.087 616.626 768.087 cv
611.343 768.087 607.057 772.372 607.057 777.653 cv
607.057 782.937 611.343 787.218 616.626 787.218 cv
cp
f
658.766 758.261 mo
664.049 758.261 668.332 753.979 668.332 748.694 cv
668.332 743.413 664.049 739.128 658.766 739.128 cv
653.482 739.128 649.199 743.413 649.199 748.694 cv
649.199 753.979 653.482 758.261 658.766 758.261 cv
cp
f
607.057 701.423 mo
612.34 701.423 616.626 697.142 616.626 691.858 cv
616.626 686.577 612.34 682.292 607.057 682.292 cv
601.776 682.292 597.493 686.577 597.493 691.858 cv
597.493 697.142 601.776 701.423 607.057 701.423 cv
cp
f
637.488 662.091 mo
642.773 662.091 647.056 657.81 647.056 652.526 cv
647.056 647.245 642.773 642.958 637.488 642.958 cv
632.21 642.958 627.924 647.245 627.924 652.526 cv
627.924 657.81 632.21 662.091 637.488 662.091 cv
cp
f
669.718 673.921 mo
674.996 673.921 679.281 669.64 679.281 664.354 cv
679.281 659.073 674.996 654.788 669.718 654.788 cv
664.432 654.788 660.151 659.073 660.151 664.354 cv
660.151 669.64 664.432 673.921 669.718 673.921 cv
cp
f
642.918 715.47 mo
648.199 715.47 652.484 711.188 652.484 705.905 cv
652.484 700.624 648.199 696.339 642.918 696.339 cv
637.635 696.339 633.353 700.624 633.353 705.905 cv
633.353 711.188 637.635 715.47 642.918 715.47 cv
cp
f
699.704 818.163 mo
701.613 818.163 703.162 819.712 703.162 821.622 cv
703.162 823.534 701.613 825.081 699.704 825.081 cv
697.795 825.081 696.246 823.534 696.246 821.622 cv
696.246 819.712 697.795 818.163 699.704 818.163 cv
cp
649.71 968.721 mo
648.557 832.104 li
668.889 810.672 li
685.344 810.672 li
693.502 818.039 li
693.454 819.568 693.897 821.467 694.326 822.735 cv
695.523 826.273 697.355 829.501 701.09 829.501 cv
704.826 829.501 707.855 826.472 707.855 822.735 cv
707.855 819 704.736 816.787 701.09 815.971 cv
699.367 815.583 697.225 815.141 695.681 815.35 cv
686.676 807.217 li
667.404 807.217 li
645.089 830.735 li
646.238 967.283 li
599.85 1013.1 li
601.008 1134.85 li
604.465 1134.82 li
603.32 1014.53 li
649.71 968.721 li
cp
0 .862745 1 rgb
f
648.996 1002.81 mo
650.902 1002.89 652.386 1004.5 652.307 1006.41 cv
652.228 1008.32 650.617 1009.8 648.711 1009.72 cv
646.803 1009.64 645.32 1008.03 645.398 1006.12 cv
645.477 1004.22 647.086 1002.73 648.996 1002.81 cv
cp
785.997 847.093 mo
787.348 845.746 789.536 845.746 790.887 847.093 cv
792.238 848.442 792.238 850.633 790.887 851.981 cv
789.536 853.333 787.348 853.333 785.997 851.981 cv
784.646 850.633 784.646 848.442 785.997 847.093 cv
cp
645.399 1012.46 mo
646.828 1012.52 648.563 1012.23 650.006 1011.97 cv
653.683 1011.3 656.889 1009.22 657.044 1005.49 cv
657.121 1003.6 656.416 1001.87 655.223 1000.59 cv
667.281 986.804 li
667.281 893.504 li
708.924 851.013 li
781.194 851.013 li
782.191 852.271 784.092 853.467 785.426 854.126 cv
788.775 855.783 792.35 856.769 794.992 854.126 cv
797.635 851.485 797.633 847.202 794.992 844.56 cv
792.35 841.919 788.584 842.563 785.426 844.56 cv
784.092 845.404 782.477 846.456 781.474 847.556 cv
707.473 847.556 li
663.822 892.092 li
663.822 985.504 li
652.245 998.743 li
651.71 998.581 651.148 998.476 650.564 998.452 cv
646.83 998.297 644.867 1001.44 643.525 1004.93 cv
642.894 1006.57 642.205 1009.28 642.672 1010.87 cv
620.889 1031.22 li
620.889 1134.84 li
624.348 1134.84 li
624.348 1032.72 li
645.699 1012.78 li
645.399 1012.46 li
cp
f
754.877 876.483 mo
756.228 875.136 758.416 875.136 759.768 876.483 cv
761.117 877.835 761.117 880.023 759.768 881.372 cv
758.416 882.725 756.228 882.725 754.877 881.372 cv
753.527 880.023 753.527 877.835 754.877 876.483 cv
cp
685.435 965.858 mo
704.163 947.996 li
704.163 913.681 li
736.576 881.269 li
750.901 881.269 li
751.929 882.191 753.283 883.012 754.307 883.517 cv
757.654 885.172 761.228 886.159 763.873 883.517 cv
766.516 880.876 766.514 876.593 763.871 873.95 cv
761.228 871.31 757.465 871.952 754.307 873.95 cv
752.626 875.015 750.498 876.406 749.714 877.81 cv
735.144 877.81 li
700.705 912.25 li
700.705 946.517 li
681.978 964.379 li
681.978 1020.31 li
634.143 1068.72 li
634.143 1134.84 li
637.602 1134.84 li
637.602 1070.14 li
685.435 1021.73 li
685.435 965.858 li
cp
f
727.215 907.604 mo
728.566 906.254 730.755 906.254 732.105 907.604 cv
733.456 908.954 733.456 911.142 732.105 912.493 cv
730.755 913.843 728.566 913.843 727.215 912.493 cv
725.865 911.142 725.865 908.954 727.215 907.604 cv
cp
691.773 969.292 mo
709.063 952.004 li
709.063 922.138 li
720.92 912.388 li
723.18 912.388 li
723.18 912.334 li
724.213 913.279 725.602 914.121 726.644 914.636 cv
729.992 916.294 733.566 917.279 736.211 914.636 cv
738.853 911.997 738.852 907.712 736.209 905.07 cv
733.566 902.429 729.803 903.07 726.644 905.07 cv
724.963 906.137 722.834 907.529 722.052 908.931 cv
719.681 908.931 li
705.605 920.504 li
705.605 950.57 li
688.316 967.86 li
688.316 1022.62 li
639.621 1072.47 li
639.621 1134.84 li
643.078 1134.84 li
643.078 1073.88 li
691.773 1024.03 li
691.773 969.292 li
cp
f
698.109 971.029 mo
715.689 953.445 li
715.689 930.206 li
721.783 925.212 li
742.877 925.212 li
749.691 918.906 li
749.691 901.846 li
754.752 896.541 li
769.573 896.541 li
769.573 893.083 li
753.273 893.083 li
746.233 900.46 li
746.233 917.396 li
741.523 921.754 li
720.547 921.754 li
712.23 928.572 li
712.23 952.013 li
694.659 969.587 li
694.37 1025.92 li
646.533 1074.19 li
646.533 1134.84 li
649.992 1134.84 li
649.992 1075.61 li
697.821 1027.35 li
698.109 971.029 li
cp
f
729.012 944.747 mo
729.41 942.876 731.248 941.685 733.115 942.083 cv
734.982 942.481 736.174 944.317 735.775 946.185 cv
735.381 948.054 733.543 949.246 731.676 948.847 cv
729.809 948.45 728.615 946.613 729.012 944.747 cv
cp
704.164 974.491 mo
728.182 951.034 li
729.54 951.289 731.188 951.297 732.576 951.283 cv
736.31 951.241 739.82 949.727 740.602 946.072 cv
741.378 942.42 739.045 938.827 735.391 938.052 cv
731.736 937.273 729.273 940.045 727.367 943.259 cv
726.5 944.718 725.414 947.149 725.516 948.802 cv
700.707 973.037 li
700.707 1028.66 li
652.896 1076.47 li
651.144 1134.78 li
654.602 1134.89 li
656.31 1077.95 li
704.164 1030.09 li
704.164 974.491 li
cp
f
756.144 913.899 mo
754.793 912.55 754.793 910.362 756.144 909.011 cv
757.494 907.662 759.684 907.662 761.033 909.011 cv
761.163 909.141 761.269 909.284 761.375 909.429 cv
762.027 911.254 li
762.082 912.204 761.76 913.172 761.033 913.899 cv
759.684 915.251 757.494 915.251 756.144 913.899 cv
cp
709.352 980.276 mo
730.779 960.222 li
740.68 960.222 li
749.402 950.206 li
749.402 931.606 li
760.064 922.1 li
760.064 918.703 li
761.32 917.705 762.518 915.807 763.178 914.475 cv
765.416 909.945 766.43 905 758.902 902.513 cv
758.646 902.427 758.35 902.42 758.089 902.496 cv
750.678 904.625 750.859 910.129 753.611 914.475 cv
754.459 915.813 755.518 917.438 756.621 918.438 cv
756.606 918.438 li
756.606 920.547 li
745.944 930.056 li
745.944 948.913 li
739.107 956.765 li
729.416 956.765 li
705.894 978.779 li
705.894 1030.68 li
657.771 1079.38 li
657.771 1134.84 li
661.23 1134.84 li
661.23 1080.8 li
709.352 1032.1 li
709.352 980.276 li
cp
f
724.23 980.681 mo
724.629 978.813 726.466 977.618 728.334 978.017 cv
730.201 978.412 731.393 980.251 730.994 982.118 cv
730.6 983.985 728.76 985.181 726.894 984.78 cv
725.027 984.384 723.834 982.547 724.23 980.681 cv
cp
715.691 993.337 mo
723.753 987.037 li
725.037 987.231 726.527 987.231 727.795 987.218 cv
731.527 987.175 735.039 985.663 735.817 982.009 cv
736.596 978.356 734.264 974.763 730.609 973.983 cv
726.955 973.206 724.492 975.979 722.586 979.192 cv
721.674 980.727 720.508 983.345 720.752 984.992 cv
712.232 991.651 li
712.232 1034.42 li
663.824 1082.83 li
663.824 1134.84 li
667.281 1134.84 li
667.281 1084.26 li
715.691 1035.85 li
715.691 993.337 li
cp
f
761.602 947.56 mo
760.25 948.909 758.061 948.909 756.711 947.56 cv
755.36 946.21 755.36 944.021 756.711 942.67 cv
758.061 941.32 760.25 941.32 761.602 942.67 cv
761.73 942.8 761.837 942.943 761.941 943.087 cv
762.596 944.915 li
762.65 945.865 762.328 946.834 761.602 947.56 cv
cp
736.627 1050.99 mo
748.826 1037.53 li
748.826 962.722 li
759.795 952.877 li
761.336 952.236 762.939 949.761 763.745 948.133 cv
763.869 947.879 763.988 947.627 764.103 947.373 cv
764.121 947.338 764.139 947.303 764.154 947.267 cv
764.17 947.232 764.183 947.197 764.197 947.164 cv
764.203 947.149 764.209 947.136 764.215 947.122 cv
764.294 946.943 764.369 946.766 764.442 946.586 cv
764.469 946.523 764.496 946.46 764.521 946.398 cv
764.533 946.367 764.543 946.338 764.555 946.309 cv
764.633 946.104 764.707 945.901 764.777 945.697 cv
764.796 945.643 764.816 945.588 764.836 945.533 cv
764.918 945.281 764.992 945.029 765.059 944.779 cv
765.068 944.741 765.079 944.703 765.089 944.665 cv
765.102 944.611 765.111 944.56 765.123 944.508 cv
765.164 944.337 765.199 944.169 765.23 944.001 cv
765.242 943.938 765.258 943.873 765.268 943.81 cv
765.273 943.771 765.277 943.734 765.283 943.697 cv
765.31 943.518 765.329 943.34 765.344 943.162 cv
765.35 943.1 765.358 943.037 765.362 942.975 cv
765.377 942.727 765.379 942.481 765.367 942.238 cv
765.365 942.205 765.364 942.172 765.361 942.139 cv
765.358 942.078 765.35 942.019 765.344 941.959 cv
765.33 941.805 765.31 941.652 765.285 941.501 cv
765.275 941.445 765.268 941.389 765.256 941.332 cv
765.247 941.288 765.236 941.243 765.226 941.199 cv
765.189 941.041 765.143 940.885 765.092 940.729 cv
765.074 940.675 765.06 940.619 765.039 940.565 cv
764.954 940.329 764.852 940.1 764.729 939.872 cv
764.716 939.847 764.698 939.822 764.684 939.797 cv
764.648 939.735 764.608 939.674 764.57 939.611 cv
764.486 939.477 764.396 939.343 764.299 939.212 cv
764.266 939.167 764.231 939.122 764.195 939.077 cv
764.158 939.029 764.121 938.983 764.081 938.938 cv
763.968 938.804 763.842 938.672 763.712 938.544 cv
763.668 938.501 763.627 938.456 763.58 938.413 cv
763.546 938.379 763.518 938.346 763.481 938.313 cv
763.301 938.152 763.113 938.004 762.92 937.867 cv
762.867 937.828 762.813 937.79 762.76 937.752 cv
762.6 937.64 762.418 937.533 762.242 937.425 cv
762.093 937.334 761.949 937.242 761.787 937.154 cv
761.596 937.052 761.384 936.954 761.174 936.856 cv
760.996 936.773 760.822 936.688 760.631 936.608 cv
760.41 936.516 760.166 936.43 759.926 936.343 cv
759.771 936.287 759.633 936.225 759.47 936.17 cv
759.475 936.185 li
759.335 936.138 759.214 936.087 759.068 936.042 cv
757.428 936.471 756.154 937.063 755.164 937.762 cv
755.035 937.85 754.91 937.943 754.786 938.04 cv
754.721 938.093 754.646 938.142 754.583 938.195 cv
754.409 938.342 754.242 938.497 754.082 938.663 cv
754.041 938.706 754.008 938.752 753.967 938.795 cv
753.918 938.85 753.873 938.904 753.826 938.959 cv
753.675 939.138 753.536 939.32 753.412 939.508 cv
753.382 939.552 753.35 939.594 753.32 939.639 cv
753.18 939.863 753.057 940.096 752.949 940.33 cv
752.925 940.386 752.904 940.442 752.881 940.498 cv
752.803 940.688 752.735 940.883 752.678 941.077 cv
752.658 941.144 752.639 941.21 752.621 941.277 cv
752.56 941.521 752.51 941.768 752.478 942.018 cv
752.475 942.054 752.475 942.09 752.471 942.125 cv
752.447 942.346 752.436 942.568 752.435 942.793 cv
752.435 942.869 752.436 942.945 752.439 943.021 cv
752.445 943.24 752.461 943.46 752.486 943.681 cv
752.492 943.723 752.494 943.766 752.5 943.809 cv
752.533 944.066 752.584 944.325 752.644 944.584 cv
752.661 944.656 752.682 944.729 752.699 944.802 cv
752.752 945.008 752.813 945.212 752.88 945.417 cv
752.901 945.483 752.922 945.549 752.944 945.615 cv
753.035 945.873 753.135 946.129 753.246 946.385 cv
753.269 946.438 753.297 946.491 753.321 946.545 cv
753.417 946.756 753.519 946.963 753.628 947.17 cv
753.665 947.242 753.702 947.313 753.74 947.384 cv
753.879 947.636 754.023 947.886 754.179 948.133 cv
754.823 949.148 755.588 950.328 756.401 951.277 cv
745.369 961.179 li
745.369 1036.2 li
735.094 1047.53 li
706.91 1047.53 li
668.434 1085.71 li
668.434 1134.84 li
671.892 1134.84 li
671.892 1087.15 li
708.334 1050.99 li
736.627 1050.99 li
cp
f
705.154 1123.05 mo
703.804 1124.41 701.615 1124.41 700.264 1123.05 cv
698.916 1121.7 698.916 1119.51 700.264 1118.17 cv
701.615 1116.82 703.804 1116.82 705.154 1118.17 cv
706.502 1119.51 706.502 1121.7 705.154 1123.05 cv
cp
709.957 1119.13 mo
708.959 1117.88 707.06 1116.68 705.727 1116.02 cv
702.377 1114.37 698.803 1113.38 696.159 1116.02 cv
693.516 1118.66 693.516 1122.95 696.16 1125.59 cv
698.803 1128.23 702.568 1127.59 705.727 1125.59 cv
707.06 1124.74 708.676 1123.69 709.678 1122.59 cv
726.425 1122.59 li
738.011 1135.97 li
740.624 1133.7 li
728.006 1119.13 li
709.957 1119.13 li
cp
f
848.709 852.743 mo
849.108 850.875 850.945 849.684 852.813 850.081 cv
854.68 850.476 855.871 852.316 855.473 854.184 cv
855.078 856.05 853.239 857.243 851.374 856.846 cv
849.507 856.445 848.313 854.61 848.709 852.743 cv
cp
840.73 865.42 mo
847.359 858.928 li
848.795 859.295 850.705 859.299 852.273 859.279 cv
856.006 859.236 859.518 857.726 860.297 854.072 cv
861.074 850.419 858.742 846.827 855.088 846.045 cv
851.435 845.269 848.971 848.044 847.064 851.258 cv
846.302 852.539 845.365 854.582 845.221 856.182 cv
839.318 861.963 li
814.256 861.963 li
805.879 867.996 li
805.879 913.769 li
803.285 917.945 li
803.285 1134.84 li
806.744 1134.84 li
806.744 918.934 li
809.337 914.754 li
809.337 869.765 li
815.37 865.42 li
840.73 865.42 li
cp
f
821.207 885.179 mo
819.832 883.854 819.795 881.663 821.119 880.288 cv
822.445 878.916 824.635 878.879 826.01 880.204 cv
827.383 881.529 827.423 883.721 826.094 885.096 cv
824.769 886.467 822.581 886.504 821.207 885.179 cv
cp
816.541 998.528 mo
825.473 991.61 li
825.473 889.679 li
826.611 888.619 827.656 886.875 828.248 885.629 cv
829.848 882.25 830.769 878.656 828.081 876.063 cv
825.393 873.467 821.111 873.541 818.514 876.229 cv
815.92 878.916 816.629 882.672 818.685 885.794 cv
819.621 887.219 820.805 888.971 822.014 889.919 cv
822.014 989.917 li
813.084 996.833 li
813.084 1118.58 li
831.484 1136.09 li
833.869 1133.58 li
816.541 1117.09 li
816.541 998.528 li
cp
f
667.178 1007.48 mo
667.576 1005.61 669.414 1004.42 671.28 1004.82 cv
673.147 1005.21 674.34 1007.05 673.941 1008.92 cv
673.547 1010.78 671.707 1011.98 669.842 1011.58 cv
667.975 1011.18 666.781 1009.34 667.178 1007.48 cv
cp
670.74 1014.01 mo
674.475 1013.97 677.986 1012.46 678.766 1008.81 cv
679.543 1005.15 677.21 1001.56 673.557 1000.78 cv
669.902 1000 667.439 1002.78 665.533 1005.99 cv
664.771 1007.27 663.836 1009.31 663.688 1010.91 cv
626.654 1046.8 li
626.654 1134.84 li
630.111 1134.84 li
630.111 1048.26 li
665.821 1013.66 li
667.258 1014.03 669.171 1014.03 670.74 1014.01 cv
cp
f
794.557 915.087 mo
794.162 916.954 792.324 918.149 790.458 917.751 cv
788.591 917.352 787.397 915.517 787.794 913.649 cv
788.192 911.779 790.029 910.592 791.896 910.986 cv
793.764 911.386 794.956 913.221 794.557 915.087 cv
cp
794.172 906.954 mo
790.519 906.175 788.056 908.95 786.148 912.162 cv
785.542 913.182 784.83 914.684 784.485 916.063 cv
779.082 920.829 li
779.082 1001.82 li
754.302 1024.58 li
754.302 1041.5 li
740.604 1055.6 li
710.089 1055.6 li
675.35 1089.45 li
675.35 1134.84 li
678.807 1134.84 li
678.807 1090.9 li
711.494 1059.06 li
742.066 1059.06 li
757.76 1042.9 li
757.76 1026.1 li
782.54 1003.34 li
782.54 922.39 li
785.71 919.594 li
787.168 920.2 789.503 920.208 791.357 920.188 cv
795.092 920.144 798.602 918.633 799.383 914.977 cv
800.159 911.325 797.826 907.731 794.172 906.954 cv
cp
f
788.409 1051.95 mo
787.058 1053.3 784.869 1053.3 783.519 1051.95 cv
782.168 1050.6 782.168 1048.41 783.519 1047.06 cv
784.869 1045.71 787.058 1045.71 788.409 1047.06 cv
789.758 1048.41 789.758 1050.6 788.409 1051.95 cv
cp
780.982 1042.95 mo
778.342 1045.59 778.983 1049.36 780.982 1052.52 cv
781.829 1053.85 782.881 1055.47 783.98 1056.47 cv
783.98 1071.16 li
787.439 1071.16 li
787.439 1056.75 li
788.696 1055.75 789.893 1053.85 790.551 1052.52 cv
791.051 1051.51 791.488 1050.48 791.785 1049.46 cv
792.473 1047.1 792.396 1044.8 790.551 1042.95 cv
787.909 1040.31 783.625 1040.31 780.982 1042.95 cv
cp
f
754.519 1127.56 mo
752.61 1127.52 751.091 1125.94 751.123 1124.04 cv
751.156 1122.13 752.732 1120.61 754.642 1120.64 cv
756.551 1120.67 758.072 1122.25 758.038 1124.16 cv
758.004 1126.07 756.429 1127.59 754.519 1127.56 cv
cp
759.977 1123.08 mo
758.842 1119.52 757.067 1116.26 753.331 1116.2 cv
749.596 1116.13 746.514 1119.11 746.449 1122.84 cv
746.385 1126.58 749.465 1128.84 753.095 1129.73 cv
754.855 1130.15 757.066 1130.65 758.621 1130.43 cv
764.961 1136.12 li
767.269 1133.55 li
760.727 1127.67 li
760.775 1126.16 760.373 1124.32 759.977 1123.08 cv
cp
f
720.81 1107.99 mo
720.81 1106.08 722.357 1104.53 724.268 1104.53 cv
726.178 1104.53 727.725 1106.08 727.725 1107.99 cv
727.725 1109.9 726.178 1111.45 724.268 1111.45 cv
722.357 1111.45 720.81 1109.9 720.81 1107.99 cv
cp
730.785 1108.54 mo
730.785 1104.34 727.381 1100.94 723.18 1100.94 cv
718.982 1100.94 715.578 1104.34 715.578 1108.54 cv
715.578 1112.74 718.982 1116.15 723.18 1116.15 cv
727.381 1116.15 730.785 1112.74 730.785 1108.54 cv
cp
f
763.701 1111.45 mo
761.789 1111.45 760.242 1109.9 760.242 1107.99 cv
760.242 1106.08 761.789 1104.53 763.701 1104.53 cv
765.61 1104.53 767.159 1106.08 767.159 1107.99 cv
767.159 1109.9 765.61 1111.45 763.701 1111.45 cv
cp
762.613 1100.94 mo
758.414 1100.94 755.011 1104.34 755.011 1108.54 cv
755.011 1112.74 758.414 1116.15 762.613 1116.15 cv
766.814 1116.15 770.219 1112.74 770.219 1108.54 cv
770.219 1104.34 766.814 1100.94 762.613 1100.94 cv
cp
f
682.475 821.638 mo
684.384 821.638 685.932 823.188 685.932 825.097 cv
685.932 827.008 684.384 828.554 682.475 828.554 cv
680.563 828.554 679.017 827.008 679.017 825.097 cv
679.017 823.188 680.563 821.638 682.475 821.638 cv
cp
659.527 977.872 mo
660.159 977.227 660.508 976.362 660.508 975.462 cv
660.508 878.31 li
682.723 856.515 li
683.387 855.862 683.76 854.975 683.76 854.045 cv
683.76 832.868 li
686.797 831.872 688.99 829.019 688.99 825.649 cv
688.99 821.445 685.588 818.044 681.387 818.044 cv
677.188 818.044 673.783 821.445 673.783 825.649 cv
673.783 828.143 674.99 830.35 676.844 831.734 cv
676.844 852.593 li
654.63 874.39 li
653.967 875.042 653.594 875.929 653.594 876.858 cv
653.594 974.056 li
607.691 1021.2 li
607.051 1021.86 606.697 1022.75 606.711 1023.66 cv
608.44 1134.89 li
615.355 1134.78 li
613.648 1025 li
659.527 977.872 li
cp
f
743.9 879.625 mo
743.9 884.879 739.646 889.133 734.391 889.133 cv
729.141 889.133 724.882 884.879 724.882 879.625 cv
724.882 874.375 729.141 870.113 734.391 870.113 cv
739.646 870.113 743.9 874.375 743.9 879.625 cv
1 1 1 rgb
f
786.862 894.813 mo
786.862 900.066 782.605 904.32 777.353 904.32 cv
772.101 904.32 767.844 900.066 767.844 894.813 cv
767.844 889.56 772.101 885.304 777.353 885.304 cv
782.605 885.304 786.862 889.56 786.862 894.813 cv
f
814.523 941.656 mo
814.523 946.912 810.268 951.165 805.014 951.165 cv
799.763 951.165 795.506 946.912 795.506 941.656 cv
795.506 936.404 799.763 932.148 805.014 932.148 cv
810.268 932.148 814.523 936.404 814.523 941.656 cv
f
775.877 988.604 mo
775.877 993.856 771.621 998.112 766.369 998.112 cv
761.115 998.112 756.859 993.856 756.859 988.604 cv
756.859 983.351 761.115 979.096 766.369 979.096 cv
771.621 979.096 775.877 983.351 775.877 988.604 cv
f
741.205 1030.32 mo
741.205 1035.57 736.947 1039.83 731.697 1039.83 cv
726.442 1039.83 722.188 1035.57 722.188 1030.32 cv
722.188 1025.07 726.442 1020.81 731.697 1020.81 cv
736.947 1020.81 741.205 1025.07 741.205 1030.32 cv
f
777.353 1049.5 mo
777.353 1054.75 773.096 1059.01 767.844 1059.01 cv
762.592 1059.01 758.336 1054.75 758.336 1049.5 cv
758.336 1044.25 762.592 1039.99 767.844 1039.99 cv
773.096 1039.99 777.353 1044.25 777.353 1049.5 cv
f
795.219 1079.04 mo
795.219 1084.29 790.961 1088.55 785.711 1088.55 cv
780.456 1088.55 776.201 1084.29 776.201 1079.04 cv
776.201 1073.79 780.456 1069.53 785.711 1069.53 cv
790.961 1069.53 795.219 1073.79 795.219 1079.04 cv
f
1026.52 978.271 mo
1026.92 980.139 1025.73 981.977 1023.86 982.371 cv
1021.99 982.769 1020.16 981.578 1019.76 979.711 cv
1019.36 977.844 1020.55 976.008 1022.42 975.607 cv
1024.29 975.211 1026.13 976.404 1026.52 978.271 cv
cp
1038.2 961.479 mo
1027.19 972.258 li
1025.62 971.658 1022.62 972.961 1020.94 973.963 cv
1017.72 975.871 1014.95 978.332 1015.73 981.986 cv
1016.5 985.641 1020.1 987.973 1023.75 987.197 cv
1027.41 986.416 1028.92 982.908 1028.96 979.174 cv
1028.97 978.023 1028.97 976.693 1028.82 975.498 cv
1040.62 963.951 li
1038.2 961.479 li
cp
0 .862745 1 rgb
f
957.184 858.791 mo
955.274 858.791 953.727 857.24 953.727 855.332 cv
953.727 853.422 955.274 851.875 957.184 851.875 cv
959.096 851.875 960.641 853.422 960.641 855.332 cv
960.641 857.24 959.096 858.791 957.184 858.791 cv
cp
949.201 859.152 mo
894.05 914.016 li
889.717 914.016 li
880.359 924.295 li
880.064 1005.5 li
898.51 1023.94 li
898.51 1108.08 li
873.995 1132.34 li
876.427 1134.8 li
901.968 1109.53 li
901.968 1022.51 li
883.527 1004.07 li
883.81 925.639 li
891.246 917.475 li
895.477 917.475 li
951.596 861.646 li
952.027 861.248 li
953.452 862.072 956.361 861.481 958.572 860.984 cv
962.217 860.168 965.335 857.957 965.335 854.217 cv
965.335 850.484 962.307 847.455 958.572 847.455 cv
954.834 847.455 953.004 850.68 951.809 854.217 cv
951.511 855.096 951.213 856.275 951.069 857.426 cv
949.201 859.152 li
cp
f
1037.47 620.75 mo
1037.5 622.66 1035.98 624.234 1034.07 624.268 cv
1032.16 624.301 1030.59 622.779 1030.55 620.871 cv
1030.52 618.959 1032.04 617.387 1033.95 617.354 cv
1035.86 617.322 1037.43 618.842 1037.47 620.75 cv
cp
883.029 1132.32 mo
885.424 1134.82 li
907.852 1113.29 li
907.852 1019.95 li
889.579 1000.36 li
889.863 940.394 li
924.568 906.527 li
946.193 906.527 li
972.56 880.154 li
972.56 840.682 li
978.463 834.779 li
995.668 834.779 li
1009.16 822.58 li
1008.87 703.514 li
1042.87 668.935 li
1042.87 628.883 li
1040.39 624.369 li
1040.46 622.859 1040.02 620.912 1039.64 619.324 cv
1038.76 615.695 1036.49 612.615 1032.76 612.68 cv
1029.02 612.742 1026.05 615.826 1026.11 619.56 cv
1026.18 623.299 1029.44 625.072 1032.99 626.207 cv
1034.31 626.627 1036.3 627.043 1037.85 626.934 cv
1039.41 629.771 li
1039.41 667.519 li
1005.41 702.102 li
1005.7 821.045 li
994.334 831.32 li
977.032 831.32 li
969.102 839.25 li
969.102 878.723 li
944.761 903.07 li
923.16 903.07 li
886.412 938.93 li
886.114 1001.71 li
904.395 1021.31 li
904.395 1111.81 li
883.029 1132.32 li
cp
f
1037.48 596.083 mo
1035.57 596.117 1034 594.597 1033.96 592.685 cv
1033.93 590.777 1035.45 589.201 1037.36 589.169 cv
1039.27 589.135 1040.84 590.655 1040.88 592.564 cv
1040.91 594.475 1039.39 596.048 1037.48 596.083 cv
cp
890.717 1133.81 mo
893.171 1136.24 li
914.254 1114.99 li
914.254 1015.62 li
896.781 997.178 li
896.781 944.416 li
929.766 911.713 li
950.52 911.713 li
979.477 882.459 li
979.477 846.057 li
983.754 840.83 li
999.697 840.83 li
1015.21 826.307 li
1015.21 706.68 li
1054.97 665.764 li
1055.26 618.541 li
1056.54 611.484 li
1043.38 597.756 li
1044.25 596.342 1043.59 593.38 1043.05 591.139 cv
1042.17 587.51 1039.9 584.43 1036.17 584.495 cv
1032.43 584.559 1029.46 587.64 1029.52 591.375 cv
1029.59 595.114 1032.84 596.886 1036.4 598.021 cv
1037.45 598.356 1038.93 598.688 1040.27 598.757 cv
1039.89 599.118 li
1052.83 612.602 li
1051.8 618.369 li
1051.52 664.354 li
1011.75 705.275 li
1011.75 824.809 li
998.331 837.371 li
982.115 837.371 li
976.019 844.822 li
976.019 881.035 li
949.08 908.256 li
928.342 908.256 li
893.324 942.975 li
893.324 998.555 li
910.796 1017 li
910.796 1113.57 li
890.717 1133.81 li
cp
f
1007.47 854.85 mo
1005.56 854.85 1004.01 853.303 1004.01 851.393 cv
1004.01 849.484 1005.56 847.935 1007.47 847.935 cv
1009.38 847.935 1010.93 849.484 1010.93 851.393 cv
1010.93 853.303 1009.38 854.85 1007.47 854.85 cv
cp
909.144 1133.75 mo
911.482 1136.3 li
926.174 1122.82 li
925.882 1009.23 li
907.852 991.945 li
907.852 950.166 li
934.387 923.238 li
957.42 923.238 li
991.004 890.252 li
991.004 871.738 li
1003.43 857.668 li
1004.98 857.877 1007.13 857.435 1008.86 857.049 cv
1012.5 856.231 1015.62 854.018 1015.62 850.281 cv
1015.62 846.547 1012.59 843.518 1008.86 843.518 cv
1005.12 843.518 1003.29 846.742 1002.09 850.281 cv
1001.67 851.529 1001.23 853.389 1001.26 854.904 cv
987.546 870.43 li
987.546 888.799 li
956.005 919.781 li
932.939 919.781 li
904.395 948.75 li
904.395 993.42 li
922.428 1010.71 li
922.713 1121.3 li
909.144 1133.75 li
cp
f
1027.06 739.879 mo
1025.15 739.879 1023.6 738.334 1023.6 736.422 cv
1023.6 734.514 1025.15 732.965 1027.06 732.965 cv
1028.97 732.965 1030.52 734.514 1030.52 736.422 cv
1030.52 738.334 1028.97 739.879 1027.06 739.879 cv
cp
1020.97 744.269 mo
1022.97 742.69 li
1024.52 742.922 1026.7 742.469 1028.45 742.078 cv
1032.1 741.26 1035.21 739.049 1035.21 735.31 cv
1035.21 731.576 1032.18 728.547 1028.45 728.547 cv
1024.71 728.547 1022.88 731.771 1021.69 735.31 cv
1021.26 736.565 1020.82 738.434 1020.86 739.953 cv
1017.51 742.598 li
1017.51 857.236 li
1015.51 858.693 li
1006.38 858.693 li
993.272 873.004 li
993.272 891.109 li
957.154 926.982 li
935.867 926.982 li
909.934 953.068 li
909.934 990.549 li
929.053 1008.42 li
929.053 1123.63 li
918.625 1133.79 li
921.037 1136.26 li
932.51 1125.09 li
932.51 1006.91 li
913.392 989.047 li
913.392 954.494 li
937.305 930.441 li
958.578 930.441 li
996.73 892.547 li
996.73 874.348 li
1007.9 862.15 li
1016.64 862.15 li
1020.97 858.996 li
1020.97 744.269 li
cp
f
1102.55 631.152 mo
1101.75 631.152 1101.01 630.865 1100.43 630.402 cv
1099.86 629.842 li
1099.39 629.252 1099.1 628.512 1099.1 627.695 cv
1099.1 625.787 1100.64 624.238 1102.55 624.238 cv
1104.46 624.238 1106.01 625.787 1106.01 627.695 cv
1106.01 629.607 1104.46 631.152 1102.55 631.152 cv
cp
1036.53 689.988 mo
1036.53 741.598 li
1024.14 754.856 li
1024.14 859.705 li
1019.1 864.744 li
1011.32 864.744 li
999.935 876.129 li
999.935 893.701 li
960.901 932.457 li
939.004 932.457 li
916.373 954.787 li
916.373 987.332 li
934.857 1006.35 li
934.857 1126.51 li
927.279 1133.78 li
929.674 1136.27 li
938.314 1127.98 li
938.314 1004.95 li
919.83 985.928 li
919.83 956.232 li
940.421 935.914 li
962.327 935.914 li
1003.39 895.141 li
1003.39 877.563 li
1012.75 868.201 li
1020.53 868.201 li
1027.6 861.137 li
1027.6 756.219 li
1039.99 742.963 li
1039.99 691.416 li
1097.47 633.666 li
1098.92 634.422 1101.77 633.838 1103.94 633.352 cv
1107.59 632.531 1110.71 630.322 1110.71 626.584 cv
1110.71 622.85 1107.68 619.82 1103.94 619.82 cv
1100.2 619.82 1098.37 623.045 1097.18 626.584 cv
1096.88 627.463 1096.58 628.646 1096.44 629.801 cv
1036.53 689.988 li
cp
f
1093.48 660.361 mo
1091.57 660.361 1090.02 658.815 1090.02 656.904 cv
1090.02 654.992 1091.57 653.447 1093.48 653.447 cv
1095.39 653.447 1096.94 654.992 1096.94 656.904 cv
1096.94 658.815 1095.39 660.361 1093.48 660.361 cv
cp
933.639 1135.2 mo
935.992 1137.73 li
944.612 1129.73 li
944.612 1000.64 li
926.17 981.047 li
926.17 960.555 li
945.321 941.678 li
965.652 941.678 li
1009.16 899.185 li
1009.16 888.809 li
1034.37 864.027 li
1034.37 757.363 li
1046.04 744.688 li
1046.04 705.539 li
1088.61 662.971 li
1090.12 663.574 1092.8 663.023 1094.86 662.557 cv
1098.51 661.74 1101.63 659.527 1101.63 655.793 cv
1101.63 652.055 1098.6 649.025 1094.86 649.025 cv
1091.13 649.025 1089.3 652.254 1088.1 655.793 cv
1087.77 656.766 1087.43 658.111 1087.31 659.377 cv
1042.58 704.107 li
1042.58 743.338 li
1030.91 756.014 li
1030.91 862.578 li
1005.7 887.361 li
1005.7 897.731 li
964.245 938.221 li
943.903 938.221 li
922.713 959.109 li
922.713 982.42 li
941.154 1002.01 li
941.154 1128.22 li
933.639 1135.2 li
cp
f
1042.21 766.197 mo
1040.3 766.197 1038.75 764.652 1038.75 762.74 cv
1038.75 760.828 1040.3 759.281 1042.21 759.281 cv
1044.12 759.281 1045.67 760.828 1045.67 762.74 cv
1045.67 764.652 1044.12 766.197 1042.21 766.197 cv
cp
946.342 964.586 mo
946.342 1133.57 li
949.799 1133.57 li
949.799 966.031 li
1039.41 877.568 li
1039.41 769.063 li
1040.76 769.008 1042.3 768.685 1043.6 768.393 cv
1047.24 767.576 1050.36 765.363 1050.36 761.629 cv
1050.36 757.894 1047.33 754.863 1043.6 754.863 cv
1039.86 754.863 1038.03 758.09 1036.83 761.629 cv
1036.44 762.785 1036.04 764.461 1036.01 765.91 cv
1035.96 765.91 li
1035.96 876.123 li
946.342 964.586 li
cp
f
1049.39 786.85 mo
1047.48 786.85 1045.93 785.303 1045.93 783.391 cv
1045.93 781.481 1047.48 779.934 1049.39 779.934 cv
1051.3 779.934 1052.85 781.481 1052.85 783.391 cv
1052.85 785.303 1051.3 786.85 1049.39 786.85 cv
cp
957.064 1136.46 mo
957.064 968.615 li
1044.6 881.019 li
1044.6 791.553 li
1045.97 789.725 li
1047.44 789.771 1049.27 789.381 1050.78 789.045 cv
1054.42 788.227 1057.54 786.016 1057.54 782.281 cv
1057.54 778.543 1054.51 775.514 1050.78 775.514 cv
1047.04 775.514 1045.21 778.742 1044.01 782.281 cv
1043.52 783.729 1043.02 785.996 1043.24 787.6 cv
1041.14 790.402 li
1041.14 879.586 li
953.605 967.184 li
953.605 1136.46 li
957.064 1136.46 li
cp
f
1056.57 802.754 mo
1054.66 802.754 1053.11 801.207 1053.11 799.297 cv
1053.11 797.385 1054.66 795.838 1056.57 795.838 cv
1058.48 795.838 1060.03 797.385 1060.03 799.297 cv
1060.03 801.207 1058.48 802.754 1056.57 802.754 cv
cp
1051.8 807.006 mo
1052.64 805.578 li
1054.17 805.758 1056.27 805.328 1057.96 804.949 cv
1061.61 804.131 1064.72 801.92 1064.72 798.185 cv
1064.72 794.447 1061.69 791.418 1057.96 791.418 cv
1054.22 791.418 1052.39 794.644 1051.2 798.185 cv
1050.79 799.377 1050.38 801.123 1050.37 802.598 cv
1048.34 806.07 li
1048.34 882.754 li
959.595 970.928 li
959.595 1135.03 li
963.053 1135.03 li
963.053 972.367 li
1051.8 884.193 li
1051.8 807.006 li
cp
f
1061.38 822.063 mo
1059.48 822.063 1057.93 820.516 1057.93 818.604 cv
1057.93 816.697 1059.48 815.146 1061.38 815.146 cv
1063.3 815.146 1064.84 816.697 1064.84 818.604 cv
1064.84 820.516 1063.3 822.063 1061.38 822.063 cv
cp
969.102 1136.46 mo
969.102 973.518 li
1056.41 886.496 li
1056.41 828.287 li
1058.19 824.935 li
1059.62 824.94 1061.34 824.582 1062.77 824.26 cv
1066.42 823.44 1069.54 821.232 1069.54 817.494 cv
1069.54 813.758 1066.51 810.729 1062.77 810.729 cv
1059.04 810.729 1057.21 813.955 1056.01 817.494 cv
1055.49 819.012 1054.96 821.432 1055.28 823.043 cv
1052.95 827.43 li
1052.95 885.06 li
965.645 972.082 li
965.645 1136.46 li
969.102 1136.46 li
cp
f
1067.62 839.004 mo
1065.71 839.004 1064.16 837.457 1064.16 835.547 cv
1064.16 833.633 1065.71 832.086 1067.62 832.086 cv
1069.53 832.086 1071.08 833.633 1071.08 835.547 cv
1071.08 837.457 1069.53 839.004 1067.62 839.004 cv
cp
975.054 1135.03 mo
975.054 976.682 li
1063.04 887.932 li
1063.04 844.764 li
1064.78 841.869 li
1066.13 841.82 1067.69 841.494 1069.01 841.199 cv
1072.65 840.381 1075.77 838.168 1075.77 834.434 cv
1075.77 830.695 1072.74 827.668 1069.01 827.668 cv
1065.27 827.668 1063.44 830.896 1062.24 834.434 cv
1061.68 836.092 1061.1 838.818 1061.63 840.394 cv
1059.58 843.805 li
1059.58 886.506 li
971.596 975.258 li
971.596 1135.03 li
975.054 1135.03 li
cp
f
1074.3 859.75 mo
1072.39 859.75 1070.85 858.203 1070.85 856.291 cv
1070.85 854.381 1072.39 852.834 1074.3 852.834 cv
1076.21 852.834 1077.76 854.381 1077.76 856.291 cv
1077.76 858.203 1076.21 859.75 1074.3 859.75 cv
cp
1066.21 890.832 mo
978.902 979.004 li
978.902 1135.03 li
982.36 1135.03 li
982.36 980.428 li
1069.67 892.254 li
1069.67 865.055 li
1071.59 862.611 li
1072.91 862.547 1074.42 862.231 1075.69 861.943 cv
1079.34 861.127 1082.46 858.916 1082.46 855.182 cv
1082.46 851.443 1079.43 848.414 1075.69 848.414 cv
1071.95 848.414 1070.12 851.643 1068.93 855.182 cv
1068.36 856.848 1067.78 859.598 1068.32 861.17 cv
1066.21 863.859 li
1066.21 890.832 li
cp
f
1093.48 739.879 mo
1091.57 739.879 1090.02 738.334 1090.02 736.422 cv
1090.02 734.514 1091.57 732.965 1093.48 732.965 cv
1095.39 732.965 1096.94 734.514 1096.94 736.422 cv
1096.94 738.334 1095.39 739.879 1093.48 739.879 cv
cp
1084.65 743.242 mo
1084.65 861.424 li
1072.26 873.525 li
1072.26 894.293 li
984.664 983.33 li
984.664 1135.03 li
988.121 1135.03 li
988.121 984.746 li
1075.72 895.709 li
1075.72 874.982 li
1088.11 862.881 li
1088.11 744.203 li
1089.05 742.627 li
1090.61 742.99 1092.99 742.498 1094.86 742.078 cv
1098.51 741.26 1101.63 739.049 1101.63 735.31 cv
1101.63 731.576 1098.6 728.547 1094.86 728.547 cv
1091.13 728.547 1089.3 731.771 1088.1 735.31 cv
1087.78 736.256 1087.46 737.549 1087.33 738.779 cv
1084.65 743.242 li
cp
f
1004.52 1086.8 mo
1003.17 1085.45 1003.17 1083.26 1004.52 1081.91 cv
1005.87 1080.56 1008.05 1080.56 1009.4 1081.91 cv
1010.75 1083.26 1010.75 1085.45 1009.4 1086.8 cv
1008.05 1088.15 1005.87 1088.15 1004.52 1086.8 cv
cp
1001.98 1090.9 mo
1004.63 1093.54 1008.91 1093.54 1011.55 1090.9 cv
1014.19 1088.26 1013.21 1084.69 1011.55 1081.34 cv
1010.97 1080.17 1009.98 1078.57 1008.9 1077.52 cv
1009.16 1067.93 li
1005.7 1067.84 li
1005.46 1076.99 li
1004.19 1077.91 1002.95 1079.81 1001.98 1081.34 cv
999.983 1084.49 999.342 1088.26 1001.98 1090.9 cv
cp
f
986.842 848.705 mo
988.751 848.705 990.3 850.25 990.3 852.162 cv
990.3 854.072 988.751 855.619 986.842 855.619 cv
984.931 855.619 983.383 854.072 983.383 852.162 cv
983.383 850.25 984.931 848.705 986.842 848.705 cv
cp
988.227 844.285 mo
984.491 844.285 982.66 847.512 981.463 851.051 cv
981.081 852.182 980.695 853.809 980.645 855.234 cv
980.629 855.234 li
980.629 884.504 li
952.133 914.016 li
929.49 914.016 li
897.933 945.574 li
897.933 996.56 li
916.951 1015.58 li
916.951 1118.14 li
901.933 1132.31 li
904.307 1134.83 li
920.408 1119.63 li
920.408 1014.15 li
901.391 995.127 li
901.391 947.008 li
930.921 917.475 li
953.6 917.475 li
984.088 885.902 li
984.088 858.482 li
985.421 858.422 986.942 858.104 988.227 857.815 cv
991.873 856.998 994.993 854.785 994.993 851.051 cv
994.993 847.313 991.963 844.285 988.227 844.285 cv
cp
f
943.301 890.9 mo
943.301 892.81 941.752 894.357 939.844 894.357 cv
937.934 894.357 936.383 892.81 936.383 890.9 cv
936.383 888.988 937.934 887.441 939.844 887.441 cv
941.752 887.441 943.301 888.988 943.301 890.9 cv
cp
947.998 889.813 mo
947.998 885.613 944.594 882.209 940.394 882.209 cv
936.192 882.209 932.789 885.613 932.789 889.813 cv
932.789 894.012 936.192 897.416 940.394 897.416 cv
944.594 897.416 947.998 894.012 947.998 889.813 cv
cp
f
940.213 977.053 mo
940.213 978.965 938.664 980.51 936.754 980.51 cv
934.846 980.51 933.296 978.965 933.296 977.053 cv
933.296 975.144 934.846 973.596 936.754 973.596 cv
938.664 973.596 940.213 975.144 940.213 977.053 cv
cp
944.909 975.969 mo
944.909 971.768 941.505 968.363 937.307 968.363 cv
933.105 968.363 929.701 971.768 929.701 975.969 cv
929.701 980.17 933.105 983.574 937.307 983.574 cv
941.505 983.574 944.909 980.17 944.909 975.969 cv
cp
f
1011.38 1023.72 mo
1009.47 1023.72 1007.92 1022.17 1007.92 1020.26 cv
1007.92 1018.35 1009.47 1016.8 1011.38 1016.8 cv
1013.29 1016.8 1014.83 1018.35 1014.83 1020.26 cv
1014.83 1022.17 1013.29 1023.72 1011.38 1023.72 cv
cp
1011.93 1026.78 mo
1016.13 1026.78 1019.53 1023.37 1019.53 1019.17 cv
1019.53 1014.97 1016.13 1011.57 1011.93 1011.57 cv
1007.73 1011.57 1004.32 1014.97 1004.32 1019.17 cv
1004.32 1023.37 1007.73 1026.78 1011.93 1026.78 cv
cp
f
1005.01 682.563 mo
1010.26 682.563 1014.52 678.309 1014.52 673.055 cv
1014.52 667.805 1010.26 663.545 1005.01 663.545 cv
999.758 663.545 995.503 667.805 995.503 673.055 cv
995.503 678.309 999.758 682.563 1005.01 682.563 cv
1 1 1 rgb
f
1026.47 658.539 mo
1031.72 658.539 1035.98 654.279 1035.98 649.029 cv
1035.98 643.775 1031.72 639.521 1026.47 639.521 cv
1021.22 639.521 1016.96 643.775 1016.96 649.029 cv
1016.96 654.279 1021.22 658.539 1026.47 658.539 cv
f
1053.11 619.82 mo
1058.37 619.82 1062.62 615.563 1062.62 610.313 cv
1062.62 605.059 1058.37 600.803 1053.11 600.803 cv
1047.86 600.803 1043.61 605.059 1043.61 610.313 cv
1043.61 615.563 1047.86 619.82 1053.11 619.82 cv
f
880.357 927.273 mo
885.608 927.273 889.865 923.016 889.865 917.766 cv
889.865 912.512 885.608 908.256 880.357 908.256 cv
875.102 908.256 870.849 912.512 870.849 917.766 cv
870.849 923.016 875.102 927.273 880.357 927.273 cv
f
1044.64 968.756 mo
1049.89 968.756 1054.15 964.502 1054.15 959.246 cv
1054.15 953.996 1049.89 949.738 1044.64 949.738 cv
1039.39 949.738 1035.13 953.996 1035.13 959.246 cv
1035.13 964.502 1039.39 968.756 1044.64 968.756 cv
f
1007.28 1068.58 mo
1012.54 1068.58 1016.79 1064.33 1016.79 1059.08 cv
1016.79 1053.83 1012.54 1049.57 1007.28 1049.57 cv
1002.03 1049.57 997.775 1053.83 997.775 1059.08 cv
997.775 1064.33 1002.03 1068.58 1007.28 1068.58 cv
f
gsave
952.828 226.449 mo
952.828 272.958 915.125 310.661 868.615 310.661 cv
822.106 310.661 784.403 272.958 784.403 226.449 cv
784.403 179.939 822.106 142.236 868.615 142.236 cv
915.125 142.236 952.828 179.939 952.828 226.449 cv
cp
clp
770.666 181.053 mo
769.93 181.789 768.739 181.789 768.004 181.053 cv
767.269 180.318 767.269 179.127 768.004 178.392 cv
768.739 177.656 769.93 177.656 770.666 178.392 cv
771.403 179.127 771.403 180.318 770.666 181.053 cv
cp
857.639 152.566 mo
847.285 141.977 li
822.021 141.977 li
785.784 178.919 li
773.281 178.919 li
772.738 178.235 771.703 177.583 770.977 177.224 cv
769.155 176.323 767.208 175.786 765.769 177.224 cv
764.331 178.664 764.331 180.996 765.769 182.432 cv
767.208 183.871 769.259 183.522 770.977 182.432 cv
771.703 181.973 772.583 181.4 773.13 180.802 cv
786.574 180.802 li
822.811 143.858 li
846.493 143.858 li
856.847 154.446 li
865.542 154.446 li
877.62 142.917 li
1013.87 142.917 li
1028.22 128.799 li
1063.6 128.799 li
1063.6 126.917 li
1027.45 126.917 li
1013.1 141.035 li
876.865 141.035 li
864.788 152.566 li
857.639 152.566 li
cp
0 .862745 1 rgb
f
771.527 130.807 mo
770.793 131.543 769.601 131.543 768.865 130.807 cv
768.131 130.072 768.131 128.882 768.865 128.146 cv
769.601 127.411 770.793 127.411 771.527 128.146 cv
772.263 128.882 772.263 130.072 771.527 130.807 cv
cp
927.753 105.717 mo
928.487 104.981 929.679 104.981 930.414 105.717 cv
931.147 106.452 931.147 107.643 930.414 108.378 cv
929.679 109.114 928.487 109.114 927.753 108.378 cv
927.015 107.643 927.015 106.452 927.753 105.717 cv
cp
790.567 130.524 mo
813.274 107.975 li
925.24 107.975 li
925.804 108.613 926.759 109.209 927.439 109.546 cv
929.263 110.448 931.21 110.983 932.649 109.546 cv
934.087 108.107 934.085 105.776 932.647 104.338 cv
931.21 102.9 929.159 103.249 927.439 104.338 cv
926.665 104.83 925.713 105.449 925.181 106.092 cv
812.498 106.092 li
789.791 128.643 li
774.116 128.643 li
773.567 127.97 772.554 127.333 771.838 126.979 cv
770.016 126.078 768.069 125.541 766.631 126.979 cv
765.191 128.418 765.191 130.749 766.631 132.188 cv
768.069 133.625 770.12 133.277 771.838 132.188 cv
772.58 131.718 773.479 131.131 774.022 130.519 cv
774.022 130.524 li
790.567 130.524 li
cp
f
931.491 126.052 mo
931.708 125.036 932.708 124.387 933.726 124.604 cv
934.741 124.819 935.391 125.819 935.174 126.836 cv
934.958 127.854 933.958 128.502 932.942 128.286 cv
931.925 128.069 931.276 127.069 931.491 126.052 cv
cp
754.028 146.759 mo
753.293 147.494 752.101 147.494 751.365 146.759 cv
750.632 146.023 750.632 144.833 751.365 144.097 cv
752.101 143.361 753.293 143.362 754.028 144.097 cv
754.765 144.833 754.765 146.023 754.028 146.759 cv
cp
883.287 117.367 mo
818.501 117.367 li
791.519 144.015 li
756.032 144.015 li
755.498 143.57 754.845 143.18 754.34 142.93 cv
752.517 142.027 750.569 141.491 749.131 142.93 cv
747.692 144.368 747.694 146.698 749.132 148.137 cv
750.569 149.576 752.621 149.226 754.34 148.137 cv
755.31 147.523 756.555 146.706 756.909 145.896 cv
792.291 145.896 li
819.272 119.25 li
882.495 119.25 li
895.201 132.249 li
928.964 132.249 li
931.362 129.531 li
932.031 129.618 932.785 129.618 933.434 129.611 cv
935.464 129.59 937.376 128.765 937.801 126.775 cv
938.224 124.787 936.953 122.831 934.963 122.407 cv
932.975 121.984 931.635 123.495 930.596 125.244 cv
930.056 126.152 929.356 127.756 929.655 128.62 cv
928.114 130.367 li
895.993 130.367 li
883.287 117.367 li
cp
f
752.949 163.723 mo
751.91 163.723 751.066 162.881 751.066 161.841 cv
751.066 160.801 751.91 159.958 752.949 159.958 cv
753.988 159.958 754.832 160.801 754.832 161.841 cv
754.832 162.881 753.988 163.723 752.949 163.723 cv
cp
941.282 128.039 mo
941.499 127.023 942.499 126.374 943.516 126.591 cv
944.532 126.806 945.181 127.806 944.965 128.822 cv
944.749 129.839 943.749 130.489 942.732 130.273 cv
941.716 130.056 941.065 129.056 941.282 128.039 cv
cp
795.747 152.173 mo
817.238 130.524 li
859.155 130.524 li
865.429 136.172 li
936.968 136.172 li
941.049 131.506 li
941.741 131.607 942.541 131.606 943.222 131.599 cv
945.255 131.576 947.167 130.753 947.591 128.763 cv
948.015 126.775 946.743 124.818 944.755 124.395 cv
942.766 123.971 941.424 125.48 940.387 127.23 cv
939.866 128.106 939.19 129.633 939.413 130.517 cv
936.112 134.29 li
866.152 134.29 li
859.878 128.643 li
816.456 128.643 li
794.965 150.29 li
762.809 150.29 li
754.628 158.469 li
753.851 158.494 752.962 158.705 752.345 158.913 cv
750.417 159.565 748.661 160.562 748.661 162.596 cv
748.661 164.629 750.31 166.279 752.345 166.279 cv
754.378 166.279 755.582 164.58 756.027 162.596 cv
756.257 161.575 756.523 160.278 756.327 159.433 cv
763.588 152.173 li
795.747 152.173 li
cp
f
768.888 163.248 mo
767.852 163.165 767.079 162.26 767.16 161.223 cv
767.241 160.186 768.146 159.412 769.182 159.493 cv
770.219 159.574 770.993 160.481 770.912 161.518 cv
770.831 162.554 769.925 163.329 768.888 163.248 cv
cp
952.58 131.218 mo
952.796 130.2 953.796 129.553 954.814 129.769 cv
955.831 129.984 956.477 130.985 956.263 132.001 cv
956.046 133.018 955.046 133.666 954.029 133.451 cv
953.013 133.234 952.364 132.234 952.58 131.218 cv
cp
796.527 156.621 mo
819.278 133.818 li
857.095 133.818 li
863.216 139.783 li
947.418 139.151 li
952.291 134.673 li
952.996 134.783 953.82 134.785 954.52 134.776 cv
956.554 134.754 958.465 133.93 958.888 131.941 cv
959.311 129.952 958.042 127.995 956.052 127.573 cv
954.064 127.15 952.722 128.659 951.684 130.41 cv
951.185 131.25 950.541 132.694 950.688 133.589 cv
946.68 137.273 li
863.976 137.895 li
857.859 131.936 li
818.496 131.936 li
795.755 154.73 li
777.196 154.523 li
771.118 158.057 li
771.171 158.148 li
770.355 158.074 769.347 158.231 768.661 158.404 cv
766.689 158.904 764.861 159.76 764.702 161.788 cv
764.543 163.816 766.058 165.588 768.085 165.748 cv
770.114 165.906 771.445 164.308 772.044 162.363 cv
772.337 161.415 772.685 160.221 772.61 159.368 cv
777.695 156.411 li
796.527 156.621 li
cp
f
753.456 132.372 mo
752.415 132.355 751.588 131.496 751.606 130.456 cv
751.625 129.419 752.481 128.59 753.521 128.607 cv
754.56 128.626 755.39 129.483 755.37 130.523 cv
755.352 131.563 754.494 132.391 753.456 132.372 cv
cp
938.068 109.896 mo
938.286 108.878 939.286 108.23 940.303 108.446 cv
941.319 108.662 941.968 109.662 941.751 110.678 cv
941.536 111.696 940.535 112.344 939.519 112.128 cv
938.503 111.911 937.853 110.912 938.068 109.896 cv
cp
756.427 129.936 mo
755.807 127.999 754.842 126.226 752.809 126.19 cv
750.774 126.154 749.097 127.773 749.06 129.808 cv
749.025 131.841 750.703 133.074 752.68 133.554 cv
753.572 133.771 754.671 134.018 755.503 133.954 cv
760.107 139.152 li
788.376 139.152 li
816.612 110.758 li
922.854 110.758 li
928.188 115.387 li
935.91 115.387 li
937.925 113.372 li
938.597 113.461 939.357 113.461 940.011 113.454 cv
942.043 113.431 943.954 112.607 944.378 110.618 cv
944.801 108.628 943.531 106.674 941.542 106.25 cv
939.553 105.827 938.212 107.336 937.174 109.085 cv
936.644 109.978 935.957 111.544 936.218 112.418 cv
935.132 113.504 li
928.89 113.504 li
923.558 108.876 li
815.83 108.876 li
787.593 137.27 li
760.954 137.27 li
756.819 132.6 li
756.886 131.752 756.656 130.66 756.427 129.936 cv
cp
f
736.749 145.837 mo
737.789 145.856 738.616 146.713 738.598 147.752 cv
738.58 148.792 737.724 149.621 736.684 149.602 cv
735.644 149.583 734.816 148.725 734.834 147.686 cv
734.852 146.648 735.71 145.819 736.749 145.837 cv
cp
866.96 125.566 mo
867.696 124.831 868.887 124.831 869.622 125.566 cv
870.357 126.302 870.357 127.494 869.622 128.227 cv
868.887 128.963 867.696 128.963 866.96 128.227 cv
866.225 127.494 866.225 126.302 866.96 125.566 cv
cp
735.906 150.784 mo
737.028 151.055 738.482 151.381 739.31 151.068 cv
743.846 155.311 li
755.398 155.311 li
762.457 149.035 li
793.388 149.035 li
815.193 127.701 li
864.348 127.701 li
864.891 128.386 865.923 129.037 866.65 129.395 cv
868.472 130.297 870.418 130.834 871.857 129.395 cv
873.295 127.956 873.295 125.626 871.857 124.188 cv
870.418 122.748 868.369 123.099 866.65 124.188 cv
865.922 124.647 865.042 125.221 864.496 125.819 cv
814.425 125.819 li
792.619 147.152 li
761.743 147.152 li
754.684 153.429 li
744.588 153.429 li
740.053 149.184 li
740.005 148.477 739.829 147.714 739.654 147.167 cv
739.035 145.228 738.07 143.454 736.035 143.419 cv
734.002 143.384 732.325 145.005 732.288 147.038 cv
732.254 149.07 733.931 150.303 735.906 150.784 cv
cp
f
1021.54 166.432 mo
1022.28 165.696 1023.47 165.696 1024.21 166.432 cv
1024.94 167.167 1024.94 168.358 1024.21 169.093 cv
1023.47 169.829 1022.28 169.829 1021.54 169.093 cv
1020.81 168.358 1020.81 167.167 1021.54 166.432 cv
cp
945.957 169.071 mo
945.222 169.808 944.03 169.808 943.295 169.071 cv
942.56 168.336 942.56 167.145 943.295 166.409 cv
944.03 165.674 945.222 165.674 945.957 166.409 cv
946.692 167.145 946.692 168.336 945.957 169.071 cv
cp
946.268 165.031 mo
944.549 163.941 942.499 163.593 941.06 165.031 cv
939.622 166.469 939.622 168.8 941.06 170.239 cv
942.499 171.676 944.446 171.14 946.268 170.239 cv
946.986 169.884 948.007 169.242 948.554 168.565 cv
1018.93 168.565 li
1019.47 169.249 1020.51 169.901 1021.23 170.26 cv
1023.05 171.161 1025 171.698 1026.44 170.26 cv
1027.88 168.822 1027.88 166.491 1026.44 165.053 cv
1025 163.613 1022.95 163.962 1021.23 165.053 cv
1020.51 165.513 1019.63 166.085 1019.08 166.684 cv
948.438 166.684 li
947.894 166.077 947.003 165.497 946.268 165.031 cv
cp
f
849.693 154.799 mo
850.429 154.065 851.62 154.065 852.355 154.799 cv
853.09 155.535 853.09 156.727 852.355 157.461 cv
851.62 158.196 850.429 158.196 849.693 157.461 cv
848.958 156.727 848.958 155.535 849.693 154.799 cv
cp
852.666 158.629 mo
853.247 158.342 854.026 157.867 854.592 157.339 cv
867.517 157.339 li
878.813 145.896 li
1016.16 145.896 li
1028.95 132.573 li
1063.6 132.573 li
1063.6 130.691 li
1028.14 130.691 li
1015.36 144.015 li
878.025 144.015 li
866.73 155.457 li
855.127 155.457 li
854.674 154.716 853.556 153.984 852.666 153.421 cv
850.947 152.332 848.897 151.983 847.458 153.421 cv
846.021 154.859 846.021 157.19 847.458 158.629 cv
848.897 160.067 850.844 159.53 852.666 158.629 cv
cp
f
847.877 177.805 mo
847.142 178.54 845.95 178.54 845.216 177.805 cv
844.481 177.07 844.481 175.878 845.216 175.142 cv
845.95 174.407 847.142 174.407 847.877 175.142 cv
848.614 175.878 848.614 177.07 847.877 177.805 cv
cp
850.492 177.277 mo
854.967 177.277 li
854.967 175.395 li
850.342 175.395 li
849.796 174.796 848.916 174.223 848.189 173.764 cv
846.471 172.675 844.419 172.325 842.981 173.764 cv
841.544 175.202 841.542 177.533 842.979 178.972 cv
844.419 180.411 846.366 179.873 848.189 178.972 cv
848.915 178.613 849.949 177.961 850.492 177.277 cv
cp
f
821.949 214.359 mo
821.212 215.091 820.021 215.089 819.288 214.35 cv
818.555 213.613 818.56 212.42 819.297 211.689 cv
820.033 210.956 821.225 210.959 821.959 211.696 cv
822.692 212.435 822.688 213.627 821.949 214.359 cv
cp
822.274 210.319 mo
820.558 209.224 818.509 208.869 817.066 210.303 cv
815.623 211.734 815.614 214.068 817.048 215.511 cv
818.484 216.954 820.431 216.423 822.258 215.527 cv
822.853 215.235 823.657 214.747 824.228 214.205 cv
828.577 214.205 li
828.577 212.322 li
824.705 212.322 li
824.238 211.593 823.146 210.874 822.274 210.319 cv
cp
f
783.443 211.013 mo
784.181 210.28 785.372 210.285 786.105 211.022 cv
786.839 211.759 786.835 212.95 786.096 213.684 cv
785.358 214.415 784.168 214.413 783.435 213.676 cv
782.703 212.937 782.707 211.746 783.443 211.013 cv
cp
854.739 208.025 mo
855.438 207.255 856.627 207.193 857.397 207.892 cv
858.17 208.588 858.23 209.778 857.531 210.55 cv
856.835 211.32 855.646 211.38 854.873 210.684 cv
854.102 209.986 854.041 208.795 854.739 208.025 cv
cp
786.405 214.851 mo
786.778 214.668 787.234 214.408 787.663 214.105 cv
788.009 214.506 788.513 214.765 789.082 214.765 cv
800.221 214.765 li
800.754 214.765 801.263 214.538 801.62 214.142 cv
809.686 205.194 li
832.56 205.194 li
838.524 210.942 li
838.867 211.275 839.325 211.464 839.806 211.47 cv
851.806 211.627 li
851.814 211.627 851.822 211.627 851.831 211.627 cv
852.319 211.627 852.762 211.437 853.097 211.129 cv
853.586 211.478 854.143 211.8 854.633 212.077 cv
856.405 213.077 858.47 213.322 859.834 211.814 cv
861.197 210.305 861.082 207.976 859.572 206.612 cv
858.061 205.249 856.146 205.884 854.37 206.875 cv
853.866 207.156 853.212 207.594 852.694 208.08 cv
852.441 207.948 852.16 207.866 851.854 207.862 cv
840.599 207.715 li
834.626 201.957 li
834.274 201.618 833.806 201.429 833.319 201.429 cv
808.848 201.429 li
808.314 201.429 807.807 201.655 807.45 202.051 cv
799.384 210.999 li
789.082 210.999 li
788.847 210.999 788.626 211.047 788.419 211.126 cv
787.872 210.582 787.083 210.065 786.421 209.643 cv
784.704 208.55 782.656 208.193 781.214 209.627 cv
779.771 211.061 779.761 213.391 781.194 214.835 cv
782.631 216.278 784.578 215.747 786.405 214.851 cv
cp
f
831.389 174.135 mo
832.087 173.364 833.276 173.304 834.049 174 cv
834.819 174.697 834.88 175.887 834.183 176.659 cv
833.486 177.43 832.297 177.49 831.524 176.794 cv
830.752 176.097 830.692 174.905 831.389 174.135 cv
cp
831.283 178.188 mo
833.057 179.188 835.121 179.432 836.483 177.924 cv
837.847 176.415 837.731 174.086 836.222 172.722 cv
834.713 171.36 832.795 171.992 831.019 172.985 cv
830.426 173.316 829.627 173.865 829.085 174.453 cv
824.191 174.606 li
824.251 176.487 li
828.769 176.347 li
829.285 177.038 830.396 177.687 831.283 178.188 cv
cp
f
832.75 228.216 mo
833.779 228.361 834.495 229.312 834.351 230.341 cv
834.207 231.371 833.254 232.088 832.226 231.943 cv
831.195 231.799 830.48 230.848 830.625 229.818 cv
830.768 228.788 831.72 228.071 832.75 228.216 cv
cp
829.334 230.4 mo
829.501 232.427 830.456 234.274 832.468 234.559 cv
834.483 234.841 836.345 233.44 836.63 231.425 cv
836.911 229.41 835.311 228.179 833.494 227.266 cv
832.578 226.804 830.995 226.236 830.134 226.529 cv
812.533 226.529 li
812.533 228.412 li
829.268 228.412 li
829.236 229.064 829.284 229.78 829.334 230.4 cv
cp
f
750.185 196.318 mo
750.591 195.361 751.694 194.913 752.652 195.318 cv
753.61 195.724 754.057 196.827 753.651 197.786 cv
753.247 198.744 752.142 199.192 751.185 198.786 cv
750.227 198.379 749.78 197.275 750.185 196.318 cv
cp
939.716 243.57 mo
940.727 243.326 941.741 243.95 941.986 244.96 cv
942.228 245.97 941.607 246.987 940.597 247.23 cv
939.585 247.473 938.569 246.852 938.326 245.84 cv
938.084 244.831 938.704 243.814 939.716 243.57 cv
cp
750.221 199.512 mo
750.72 199.957 751.482 200.52 752.206 200.842 cv
754.729 204.405 li
792.337 242.174 li
792.611 242.45 li
813.603 242.53 li
822.583 252.57 li
936.028 252.57 li
938.898 249.262 li
938.86 249.23 li
939.698 249.132 940.759 248.634 941.609 248.215 cv
943.436 247.318 944.805 245.751 944.328 243.773 cv
944.203 243.253 943.971 242.788 943.665 242.392 cv
943.676 242.344 943.691 242.301 943.698 242.253 cv
944.521 236.606 li
944.67 235.576 943.959 234.62 942.93 234.471 cv
941.895 234.321 940.945 235.033 940.795 236.062 cv
940.072 241.019 li
940.011 241.031 939.948 241.04 939.887 241.054 cv
937.909 241.532 937.35 243.472 937.167 245.498 cv
937.1 246.248 937.11 247.359 937.354 248.171 cv
935.17 250.688 li
823.425 250.688 li
814.447 240.649 li
793.396 240.57 li
756.222 203.253 li
754.209 200.413 li
754.644 199.685 754.876 198.504 755.048 197.556 cv
755.41 195.552 754.965 193.523 753.091 192.73 cv
751.219 191.937 749.058 192.811 748.263 194.685 cv
747.473 196.559 748.7 198.162 750.221 199.512 cv
cp
f
735.401 161.538 mo
736.441 161.549 737.274 162.399 737.264 163.44 cv
737.255 164.48 736.403 165.314 735.364 165.303 cv
734.324 165.292 733.49 164.441 733.503 163.402 cv
733.512 162.363 734.362 161.526 735.401 161.538 cv
cp
860.716 143.61 mo
861.755 143.639 862.574 144.504 862.547 145.544 cv
862.517 146.583 861.653 147.401 860.614 147.374 cv
859.573 147.346 858.755 146.48 858.784 145.441 cv
858.811 144.403 859.678 143.583 860.716 143.61 cv
cp
734.75 166.341 mo
735.253 166.518 735.94 166.698 736.6 166.776 cv
736.698 167.135 736.9 167.468 737.206 167.725 cv
742.697 172.308 li
743.036 172.589 743.463 172.745 743.903 172.745 cv
778.728 172.745 li
779.212 172.745 779.675 172.561 780.024 172.227 cv
791.401 161.427 li
798.494 161.427 li
798.988 161.427 799.463 161.234 799.815 160.886 cv
820.914 140.093 li
852.497 140.093 li
856.032 143.414 li
856.399 143.76 856.871 143.925 857.341 143.919 cv
857.373 144.648 857.546 145.449 857.722 146.019 cv
858.319 147.962 859.269 149.744 861.304 149.8 cv
863.337 149.855 865.029 148.251 865.085 146.218 cv
865.139 144.184 863.475 142.936 861.503 142.436 cv
860.788 142.256 859.939 142.056 859.2 142.01 cv
859.191 141.519 858.995 141.032 858.608 140.669 cv
854.532 136.838 li
854.183 136.511 853.721 136.329 853.243 136.329 cv
820.142 136.329 li
819.647 136.329 819.173 136.523 818.821 136.87 cv
797.722 157.662 li
790.651 157.662 li
790.168 157.662 789.705 157.848 789.355 158.18 cv
777.977 168.98 li
744.586 168.98 li
739.62 164.834 li
739.366 164.623 739.073 164.498 738.771 164.44 cv
738.706 163.852 738.583 163.236 738.467 162.697 cv
738.041 160.704 736.857 158.997 734.822 158.977 cv
732.789 158.958 731.124 160.588 731.101 162.624 cv
731.085 164.657 732.829 165.671 734.75 166.341 cv
cp
f
752.134 229.063 mo
752.778 228.247 753.961 228.108 754.777 228.754 cv
755.596 229.398 755.733 230.583 755.087 231.398 cv
754.441 232.211 753.259 232.352 752.443 231.707 cv
751.628 231.061 751.488 229.877 752.134 229.063 cv
cp
871.578 266.532 mo
872.277 265.761 873.466 265.701 874.238 266.398 cv
875.009 267.095 875.069 268.285 874.372 269.056 cv
873.677 269.828 872.486 269.887 871.715 269.19 cv
870.94 268.494 870.882 267.302 871.578 266.532 cv
cp
755.533 232.52 mo
756.159 232.114 757.016 231.43 757.507 230.743 cv
768.775 230.743 li
786.258 248.402 li
809.523 248.402 li
818.7 258.688 li
849.743 258.688 li
858.214 268.805 li
869.009 268.805 li
869.544 269.474 870.612 270.098 871.472 270.583 cv
873.245 271.584 875.31 271.829 876.673 270.32 cv
878.037 268.811 877.921 266.484 876.411 265.118 cv
874.901 263.756 872.984 264.391 871.209 265.383 cv
870.591 265.728 869.748 266.308 869.207 266.924 cv
859.093 266.924 li
850.622 256.805 li
819.545 256.805 li
810.367 246.52 li
787.043 246.52 li
769.56 228.861 li
757.411 228.861 li
756.813 228.27 755.771 227.753 754.928 227.348 cv
753.091 226.465 751.017 226.357 749.755 227.953 cv
748.493 229.548 748.762 231.864 750.357 233.126 cv
751.955 234.386 753.825 233.627 755.533 232.52 cv
cp
f
735.758 179.829 mo
736.57 179.182 737.752 179.314 738.401 180.127 cv
739.052 180.939 738.919 182.126 738.104 182.773 cv
737.292 183.42 736.106 183.287 735.461 182.475 cv
734.81 181.662 734.943 180.477 735.758 179.829 cv
cp
738.284 183.966 mo
739.041 183.693 740.131 183.167 740.749 182.553 cv
754.493 182.553 li
759.59 187.672 li
759.59 203.547 li
794.457 238.206 li
794.732 238.48 li
814.485 238.48 li
822.839 247.157 li
867.253 247.157 li
869.406 245.203 li
868.139 243.809 li
866.525 245.275 li
823.641 245.275 li
815.287 236.598 li
795.509 236.598 li
761.473 202.765 li
761.473 186.894 li
755.274 180.671 li
740.835 180.671 li
740.361 180.009 739.542 179.334 738.866 178.791 cv
737.278 177.516 735.281 176.94 733.692 178.21 cv
732.101 179.478 731.839 181.793 733.107 183.385 cv
734.377 184.972 736.371 184.658 738.284 183.966 cv
cp
f
859.021 191.408 mo
857.987 191.289 857.248 190.356 857.366 189.323 cv
857.485 188.291 858.42 187.55 859.452 187.669 cv
860.485 187.788 861.225 188.722 861.107 189.754 cv
860.987 190.789 860.054 191.528 859.021 191.408 cv
cp
862.382 189.143 mo
862.166 187.118 861.165 185.294 859.144 185.061 cv
857.123 184.83 855.296 186.277 855.063 188.296 cv
854.831 190.318 856.462 191.509 858.301 192.378 cv
858.688 192.561 859.192 192.761 859.712 192.909 cv
859.782 193.29 859.966 193.655 860.271 193.941 cv
865.448 198.786 li
865.81 199.126 866.271 199.294 866.733 199.294 cv
867.234 199.294 867.736 199.094 868.107 198.698 cv
868.817 197.939 868.778 196.747 868.019 196.038 cv
862.843 191.191 li
862.736 191.092 862.619 191.011 862.499 190.941 cv
862.499 190.34 862.439 189.702 862.382 189.143 cv
cp
f
843.319 222.581 mo
842.585 223.316 841.394 223.316 840.657 222.581 cv
839.922 221.847 839.922 220.654 840.657 219.919 cv
841.394 219.184 842.585 219.184 843.319 219.919 cv
844.056 220.654 844.056 221.847 843.319 222.581 cv
cp
843.631 218.542 mo
841.911 217.451 839.861 217.102 838.423 218.542 cv
836.985 219.979 836.985 222.309 838.423 223.749 cv
839.861 225.186 841.809 224.65 843.631 223.749 cv
844.214 223.46 844.997 222.981 845.564 222.45 cv
850.104 222.45 li
850.104 220.568 li
846.087 220.568 li
845.63 219.83 844.517 219.101 843.631 218.542 cv
cp
f
751.06 310.194 mo
752.101 310.194 752.943 311.036 752.943 312.076 cv
752.943 313.116 752.101 313.959 751.06 313.959 cv
750.021 313.959 749.179 313.116 749.179 312.076 cv
749.179 311.036 750.021 310.194 751.06 310.194 cv
cp
751.815 316.364 mo
753.85 316.364 755.499 314.715 755.499 312.682 cv
755.499 310.647 753.801 309.444 751.815 308.999 cv
750.496 308.701 748.708 308.332 748.042 308.999 cv
747.374 309.664 747.767 311.598 748.134 312.682 cv
748.785 314.608 749.782 316.364 751.815 316.364 cv
cp
f
737.313 132.554 mo
736.272 132.535 735.445 131.677 735.464 130.639 cv
735.481 129.6 736.339 128.771 737.38 128.789 cv
738.418 128.809 739.247 129.664 739.227 130.704 cv
739.21 131.744 738.352 132.572 737.313 132.554 cv
cp
948.028 113.602 mo
948.244 112.584 949.244 111.935 950.263 112.152 cv
951.277 112.368 951.927 113.369 951.709 114.385 cv
951.494 115.401 950.494 116.05 949.477 115.833 cv
948.46 115.617 947.813 114.618 948.028 113.602 cv
cp
740.284 130.117 mo
739.665 128.18 738.699 126.407 736.665 126.37 cv
734.631 126.335 732.954 127.956 732.919 129.99 cv
732.883 132.023 734.56 133.255 736.537 133.734 cv
737.297 133.92 738.209 134.126 738.977 134.145 cv
743.983 139.152 li
755.278 139.152 li
758.573 142.446 li
790.253 142.446 li
818.804 114.21 li
920.804 114.21 li
926.371 119.249 li
945.583 119.249 li
947.612 117.032 li
948.345 117.164 949.225 117.169 949.968 117.16 cv
952.001 117.138 953.913 116.313 954.336 114.324 cv
954.759 112.335 953.49 110.379 951.5 109.956 cv
949.511 109.532 948.17 111.043 947.131 112.792 cv
946.65 113.602 946.044 114.965 946.129 115.864 cv
944.753 117.366 li
927.098 117.366 li
921.529 112.328 li
818.03 112.328 li
789.478 140.564 li
759.352 140.564 li
756.058 137.27 li
744.763 137.27 li
740.632 133.137 li
740.816 132.265 740.549 130.947 740.284 130.117 cv
cp
f
921.031 122.935 mo
921.031 121.895 921.873 121.053 922.913 121.053 cv
923.952 121.053 924.796 121.895 924.796 122.935 cv
924.796 123.975 923.952 124.816 922.913 124.816 cv
921.873 124.816 921.031 123.975 921.031 122.935 cv
cp
926.462 123.236 mo
926.462 120.948 924.608 119.095 922.321 119.095 cv
920.035 119.095 918.183 120.948 918.183 123.236 cv
918.183 125.521 920.035 127.375 922.321 127.375 cv
924.608 127.375 926.462 125.521 926.462 123.236 cv
cp
f
957.015 342.54 mo
956.01 342.807 954.979 342.205 954.717 341.198 cv
954.452 340.194 955.054 339.165 956.059 338.9 cv
957.064 338.636 958.094 339.238 958.358 340.243 cv
958.621 341.25 958.02 342.278 957.015 342.54 cv
cp
955.928 337.212 mo
953.715 337.794 952.394 340.057 952.974 342.267 cv
953.555 344.479 955.815 345.801 958.029 345.221 cv
960.239 344.641 961.563 342.378 960.981 340.165 cv
960.4 337.955 958.138 336.633 955.928 337.212 cv
cp
f
940.635 342.54 mo
939.63 342.807 938.6 342.205 938.338 341.198 cv
938.072 340.194 938.674 339.165 939.679 338.9 cv
940.685 338.636 941.714 339.238 941.979 340.243 cv
942.241 341.25 941.641 342.278 940.635 342.54 cv
cp
939.549 337.212 mo
937.335 337.794 936.014 340.057 936.595 342.267 cv
937.176 344.479 939.436 345.801 941.649 345.221 cv
943.858 344.641 945.184 342.378 944.602 340.165 cv
944.021 337.955 941.759 336.633 939.549 337.212 cv
cp
f
926.015 342.31 mo
925.009 342.575 923.979 341.973 923.715 340.967 cv
923.452 339.962 924.054 338.932 925.059 338.669 cv
926.064 338.404 927.094 339.006 927.356 340.013 cv
927.622 341.018 927.02 342.046 926.015 342.31 cv
cp
924.926 336.981 mo
922.716 337.563 921.394 339.825 921.973 342.036 cv
922.554 344.247 924.816 345.57 927.03 344.988 cv
929.239 344.409 930.563 342.147 929.982 339.933 cv
929.401 337.723 927.138 336.401 924.926 336.981 cv
cp
f
900.595 342.276 mo
900.085 341.369 900.407 340.221 901.313 339.713 cv
902.22 339.203 903.368 339.524 903.876 340.432 cv
904.386 341.338 904.064 342.486 903.157 342.995 cv
902.251 343.503 901.103 343.181 900.595 342.276 cv
cp
903.71 344.594 mo
905.705 343.473 906.413 340.951 905.293 338.959 cv
904.174 336.965 901.651 336.256 899.655 337.376 cv
897.664 338.495 896.954 341.019 898.074 343.013 cv
899.193 345.005 901.718 345.713 903.71 344.594 cv
cp
f
1034.92 153.363 mo
1034.92 152.322 1035.76 151.479 1036.8 151.479 cv
1037.84 151.479 1038.69 152.322 1038.69 153.363 cv
1038.69 154.402 1037.84 155.245 1036.8 155.245 cv
1035.76 155.245 1034.92 154.402 1034.92 153.363 cv
cp
1040.35 153.663 mo
1040.35 151.376 1038.5 149.522 1036.21 149.522 cv
1033.92 149.522 1032.07 151.376 1032.07 153.663 cv
1032.07 155.949 1033.92 157.802 1036.21 157.802 cv
1038.5 157.802 1040.35 155.949 1040.35 153.663 cv
cp
f
958.777 244.207 mo
958.777 245.246 957.935 246.089 956.895 246.089 cv
955.854 246.089 955.013 245.246 955.013 244.207 cv
955.013 243.167 955.854 242.323 956.895 242.323 cv
957.935 242.323 958.777 243.167 958.777 244.207 cv
cp
952.164 244.506 mo
952.164 246.793 954.019 248.648 956.303 248.648 cv
958.59 248.648 960.443 246.793 960.443 244.506 cv
960.443 242.22 958.59 240.366 956.303 240.366 cv
954.019 240.366 952.164 242.22 952.164 244.506 cv
cp
f
987.757 254.442 mo
987.757 255.482 986.915 256.324 985.874 256.324 cv
984.834 256.324 983.991 255.482 983.991 254.442 cv
983.991 253.402 984.834 252.558 985.874 252.558 cv
986.915 252.558 987.757 253.402 987.757 254.442 cv
cp
981.144 254.743 mo
981.144 257.028 982.997 258.883 985.282 258.883 cv
987.569 258.883 989.422 257.028 989.422 254.743 cv
989.422 252.456 987.569 250.602 985.282 250.602 cv
982.997 250.602 981.144 252.456 981.144 254.743 cv
cp
f
923.698 266.389 mo
923.698 265.348 924.541 264.506 925.581 264.506 cv
926.622 264.506 927.464 265.348 927.464 266.389 cv
927.464 267.428 926.622 268.272 925.581 268.272 cv
924.541 268.272 923.698 267.428 923.698 266.389 cv
cp
929.129 266.69 mo
929.129 264.401 927.276 262.548 924.989 262.548 cv
922.704 262.548 920.851 264.401 920.851 266.69 cv
920.851 268.975 922.704 270.828 924.989 270.828 cv
927.276 270.828 929.129 268.975 929.129 266.69 cv
cp
f
793.083 346.513 mo
792.315 347.214 791.126 347.161 790.424 346.394 cv
789.722 345.627 789.774 344.435 790.543 343.734 cv
791.31 343.032 792.501 343.085 793.203 343.853 cv
793.905 344.621 793.851 345.813 793.083 346.513 cv
cp
789.641 342.301 mo
787.953 343.844 787.835 346.462 789.378 348.151 cv
790.92 349.837 793.539 349.955 795.227 348.411 cv
796.915 346.87 797.032 344.25 795.49 342.565 cv
793.946 340.876 791.328 340.759 789.641 342.301 cv
cp
f
813.185 346.28 mo
812.416 346.982 811.226 346.929 810.524 346.161 cv
809.821 345.395 809.875 344.204 810.644 343.502 cv
811.409 342.8 812.602 342.854 813.304 343.621 cv
814.006 344.389 813.95 345.579 813.185 346.28 cv
cp
809.741 342.07 mo
808.054 343.612 807.936 346.23 809.477 347.919 cv
811.021 349.607 813.64 349.723 815.328 348.181 cv
817.016 346.639 817.132 344.02 815.591 342.332 cv
814.046 340.645 811.429 340.527 809.741 342.07 cv
cp
f
779.343 317.134 mo
780.233 316.6 781.391 316.888 781.926 317.78 cv
782.46 318.67 782.172 319.826 781.278 320.361 cv
780.387 320.897 779.23 320.608 778.695 319.717 cv
778.16 318.823 778.45 317.668 779.343 317.134 cv
cp
776.198 320.524 mo
777.375 322.484 779.915 323.121 781.877 321.946 cv
783.839 320.77 784.475 318.228 783.298 316.265 cv
782.124 314.306 779.581 313.669 777.618 314.845 cv
777.467 314.935 777.326 315.037 777.191 315.143 cv
772.063 311.027 li
771.252 310.377 770.066 310.504 769.417 311.317 cv
768.767 312.128 768.894 313.313 769.706 313.962 cv
774.882 318.116 li
775.104 318.294 775.353 318.407 775.612 318.471 cv
775.624 319.172 775.811 319.879 776.198 320.524 cv
cp
f
935.7 285.446 mo
936.741 285.446 937.583 286.289 937.583 287.331 cv
937.583 288.369 936.741 289.213 935.7 289.213 cv
934.661 289.213 933.818 288.369 933.818 287.331 cv
933.818 286.289 934.661 285.446 935.7 285.446 cv
cp
736.591 232.925 mo
735.551 232.921 734.712 232.075 734.716 231.036 cv
734.721 229.997 735.565 229.157 736.605 229.161 cv
737.644 229.167 738.482 230.01 738.479 231.052 cv
738.477 232.091 737.63 232.931 736.591 232.925 cv
cp
935.109 291.77 mo
937.395 291.77 939.249 289.918 939.249 287.63 cv
939.249 285.343 937.395 283.491 935.109 283.491 cv
933.524 283.491 932.148 284.383 931.453 285.693 cv
915.75 270.107 li
911.597 270.107 li
902.855 272.61 li
899.067 273.748 li
851.559 273.748 li
840.029 260.163 li
818.579 260.163 li
809.403 250.688 li
785.618 250.688 li
771.971 237.478 li
744.005 237.478 li
740.022 233.093 li
740.093 232.268 739.873 231.183 739.679 230.3 cv
739.239 228.313 738.044 226.611 736.011 226.604 cv
733.977 226.597 732.32 228.237 732.313 230.271 cv
732.307 232.306 734.058 233.31 735.982 233.969 cv
736.712 234.221 737.825 234.476 738.682 234.415 cv
743.173 239.359 li
771.21 239.359 li
784.857 252.57 li
808.605 252.57 li
817.782 262.045 li
839.157 262.045 li
850.688 275.629 li
899.205 275.629 li
911.73 271.989 li
914.974 271.989 li
930.983 287.877 li
931.112 290.049 932.907 291.77 935.109 291.77 cv
cp
f
920.256 288.25 mo
919.24 288.481 918.232 287.845 918.001 286.831 cv
917.771 285.818 918.408 284.809 919.421 284.579 cv
920.435 284.349 921.442 284.983 921.675 285.997 cv
921.904 287.013 921.269 288.021 920.256 288.25 cv
cp
919.346 282.888 mo
917.116 283.395 915.719 285.612 916.224 287.842 cv
916.731 290.071 918.948 291.468 921.181 290.962 cv
923.408 290.456 924.806 288.236 924.3 286.009 cv
923.793 283.778 921.575 282.382 919.346 282.888 cv
cp
f
983.888 303.009 mo
982.849 303.009 982.005 302.166 982.005 301.125 cv
982.005 300.087 982.849 299.243 983.888 299.243 cv
984.928 299.243 985.769 300.087 985.769 301.125 cv
985.769 302.166 984.928 303.009 983.888 303.009 cv
cp
987.438 301.429 mo
987.438 299.14 985.583 297.286 983.298 297.286 cv
981.011 297.286 979.157 299.14 979.157 301.429 cv
979.157 303.714 981.011 305.566 983.298 305.566 cv
985.583 305.566 987.438 303.714 987.438 301.429 cv
cp
f
1047.28 151.479 mo
1048.32 151.479 1049.16 152.322 1049.16 153.363 cv
1049.16 154.402 1048.32 155.245 1047.28 155.245 cv
1046.24 155.245 1045.4 154.402 1045.4 153.363 cv
1045.4 152.322 1046.24 151.479 1047.28 151.479 cv
cp
1046.69 157.802 mo
1048.97 157.802 1050.83 155.949 1050.83 153.663 cv
1050.83 151.376 1048.97 149.522 1046.69 149.522 cv
1044.4 149.522 1042.55 151.376 1042.55 153.663 cv
1042.55 155.949 1044.4 157.802 1046.69 157.802 cv
cp
f
931.696 159.011 mo
932.651 158.601 933.758 159.044 934.167 160.001 cv
934.575 160.956 934.132 162.063 933.177 162.472 cv
932.221 162.881 931.114 162.436 930.706 161.481 cv
930.296 160.524 930.739 159.419 931.696 159.011 cv
cp
933.641 165.056 mo
935.741 164.157 936.718 161.724 935.817 159.621 cv
934.918 157.519 932.486 156.542 930.383 157.443 cv
928.28 158.343 927.306 160.774 928.205 162.879 cv
929.102 164.98 931.537 165.956 933.641 165.056 cv
cp
f
850.14 240.38 mo
849.184 240.79 848.079 240.345 847.669 239.39 cv
847.261 238.433 847.704 237.326 848.66 236.918 cv
849.616 236.51 850.722 236.952 851.131 237.909 cv
851.539 238.864 851.096 239.97 850.14 240.38 cv
cp
847.348 235.352 mo
845.245 236.251 844.269 238.683 845.169 240.786 cv
846.068 242.888 848.5 243.863 850.603 242.963 cv
852.706 242.064 853.681 239.631 852.781 237.529 cv
851.882 235.426 849.449 234.451 847.348 235.352 cv
cp
f
872.784 281.746 mo
872.374 280.788 872.817 279.682 873.773 279.273 cv
874.729 278.865 875.836 279.307 876.246 280.265 cv
876.654 281.218 876.211 282.325 875.255 282.734 cv
874.3 283.144 873.192 282.7 872.784 281.746 cv
cp
877.896 279.884 mo
876.995 277.782 874.563 276.807 872.46 277.706 cv
870.357 278.606 869.383 281.038 870.282 283.141 cv
871.182 285.244 873.616 286.219 875.719 285.318 cv
876.138 285.139 876.509 284.897 876.832 284.611 cv
881.948 284.611 li
882.468 284.611 882.89 284.19 882.89 283.669 cv
882.89 283.15 882.468 282.728 881.948 282.728 cv
878.045 282.728 li
878.323 281.825 878.297 280.822 877.896 279.884 cv
cp
f
803.983 175.784 mo
804.722 176.517 804.729 177.706 804 178.447 cv
803.269 179.186 802.077 179.192 801.336 178.463 cv
800.599 177.731 800.592 176.541 801.323 175.801 cv
802.053 175.06 803.244 175.054 803.983 175.784 cv
cp
817.396 157.339 mo
826.951 157.339 li
833.54 164.33 li
865.429 164.33 li
880.69 149.059 li
1017.18 149.059 li
1030.12 135.721 li
1063.6 135.721 li
1063.6 133.839 li
1029.32 133.839 li
1016.38 147.177 li
879.912 147.177 li
864.649 162.447 li
834.352 162.447 li
827.764 155.457 li
816.612 155.457 li
801.63 170.531 li
801.63 173.273 li
801.009 173.816 800.413 174.74 799.94 175.498 cv
798.862 177.224 798.526 179.276 799.972 180.704 cv
801.419 182.134 803.752 182.123 805.18 180.675 cv
806.608 179.226 806.061 177.285 805.148 175.466 cv
804.799 174.768 804.174 173.784 803.513 173.231 cv
803.513 171.307 li
817.396 157.339 li
cp
f
769.117 197.161 mo
768.081 197.222 767.189 196.431 767.128 195.394 cv
767.066 194.356 767.858 193.465 768.894 193.403 cv
769.932 193.34 770.823 194.134 770.886 195.17 cv
770.947 196.208 770.156 197.099 769.117 197.161 cv
cp
806.085 188.567 mo
811.121 183.789 li
811.121 171.34 li
815.718 167.22 li
866.17 167.22 li
881.858 152.094 li
1019.07 152.094 li
1031.23 139.152 li
1063.6 139.152 li
1063.6 137.27 li
1030.41 137.27 li
1018.25 150.212 li
881.099 150.212 li
865.411 165.337 li
814.997 165.337 li
809.239 170.498 li
809.239 182.98 li
805.334 186.684 li
776.143 186.684 li
771.021 191.805 li
770.149 191.757 768.979 192.091 768.227 192.396 cv
766.344 193.159 764.651 194.259 764.771 196.289 cv
764.891 198.321 766.635 199.869 768.663 199.747 cv
770.695 199.627 771.796 197.861 772.123 195.854 cv
772.262 195.002 772.417 193.964 772.33 193.157 cv
776.921 188.567 li
806.085 188.567 li
cp
f
823.653 237.002 mo
822.614 236.997 821.774 236.151 821.78 235.112 cv
821.784 234.073 822.629 233.232 823.667 233.238 cv
824.708 233.242 825.546 234.087 825.542 235.128 cv
825.539 236.168 824.693 237.007 823.653 237.002 cv
cp
881.007 220.266 mo
881.007 165.751 li
890.368 155.398 li
999.081 155.398 li
1002.26 157.518 li
1003.3 155.952 li
999.651 153.517 li
889.531 153.517 li
879.125 165.027 li
879.125 219.46 li
868.082 229.98 li
844.586 229.98 li
836.115 239.425 li
829.137 239.425 li
827.151 236.95 li
827.102 236.99 li
827.128 236.192 826.921 235.194 826.741 234.377 cv
826.303 232.388 825.107 230.689 823.074 230.681 cv
821.039 230.673 819.385 232.314 819.376 234.349 cv
819.369 236.381 821.12 237.384 823.045 238.045 cv
823.838 238.317 825.085 238.601 825.96 238.472 cv
828.234 241.307 li
836.956 241.307 li
845.427 231.864 li
868.836 231.864 li
881.007 220.266 li
cp
f
911.952 166.242 mo
911.217 165.506 911.217 164.315 911.952 163.581 cv
912.686 162.845 913.878 162.845 914.614 163.581 cv
915.349 164.315 915.349 165.506 914.614 166.242 cv
913.878 166.977 912.686 166.977 911.952 166.242 cv
cp
1063.6 165.742 mo
1051.6 165.742 li
1051.05 165.742 1050.53 165.982 1050.17 166.402 cv
1043.3 174.454 li
927.517 174.454 li
918.108 165.002 li
917.944 164.838 917.756 164.716 917.557 164.625 cv
917.328 163.755 915.969 162.863 914.924 162.201 cv
913.206 161.111 911.156 160.764 909.716 162.201 cv
908.278 163.639 908.278 165.971 909.716 167.409 cv
911.156 168.847 913.102 168.311 914.924 167.409 cv
915 167.373 915.079 167.331 915.161 167.287 cv
915.239 167.418 915.328 167.545 915.44 167.658 cv
925.401 177.664 li
925.754 178.018 926.233 178.219 926.735 178.219 cv
1044.17 178.219 li
1044.72 178.219 1045.25 177.977 1045.6 177.558 cv
1052.47 169.506 li
1063.6 169.506 li
1064.64 169.506 1065.48 168.664 1065.48 167.624 cv
1065.48 166.585 1064.64 165.742 1063.6 165.742 cv
cp
f
914.614 177.322 mo
913.878 178.059 912.686 178.059 911.952 177.322 cv
911.217 176.588 911.217 175.398 911.952 174.661 cv
912.686 173.927 913.878 173.927 914.614 174.661 cv
915.349 175.398 915.349 176.588 914.614 177.322 cv
cp
1065.48 174.134 mo
1065.48 173.096 1064.64 172.251 1063.6 172.251 cv
1055.13 172.251 li
1054.64 172.251 1054.17 172.445 1053.82 172.792 cv
1045.66 180.802 li
925.515 180.802 li
918.882 174.578 li
918.227 173.963 917.242 173.91 916.528 174.401 cv
916.032 173.993 915.44 173.61 914.924 173.283 cv
913.206 172.193 911.156 171.846 909.716 173.283 cv
909.468 173.532 909.266 173.807 909.103 174.1 cv
902.891 168.568 li
901.639 169.976 li
908.653 176.22 li
908.728 177.048 909.082 177.856 909.716 178.49 cv
911.156 179.929 913.102 179.392 914.924 178.49 cv
915.392 178.26 915.987 177.907 916.497 177.503 cv
923.483 184.057 li
923.833 184.384 924.292 184.567 924.77 184.567 cv
1046.43 184.567 li
1046.92 184.567 1047.39 184.374 1047.75 184.028 cv
1055.9 176.017 li
1063.6 176.017 li
1064.64 176.017 1065.48 175.175 1065.48 174.134 cv
cp
f
914.144 189.099 mo
913.408 189.833 912.217 189.833 911.481 189.099 cv
910.746 188.364 910.746 187.172 911.481 186.438 cv
912.217 185.703 913.408 185.703 914.144 186.438 cv
914.878 187.172 914.878 188.364 914.144 189.099 cv
cp
1061.72 183.155 mo
1057.72 183.155 li
1057.17 183.155 1056.65 183.393 1056.3 183.808 cv
1051.58 189.273 li
924.719 189.273 li
923.977 187.905 li
923.714 187.417 923.245 187.07 922.704 186.958 cv
917.505 185.884 li
916.98 185.775 916.466 185.897 916.059 186.176 cv
915.563 185.768 914.97 185.384 914.454 185.058 cv
913.017 184.147 911.35 183.759 910.001 184.494 cv
903.599 183.402 li
903.282 185.259 li
908.497 186.148 li
907.885 187.504 908.132 189.152 909.246 190.267 cv
910.685 191.704 912.632 191.168 914.454 190.267 cv
914.927 190.034 915.528 189.676 916.042 189.267 cv
916.246 189.41 916.481 189.517 916.742 189.57 cv
921.085 190.469 li
921.943 192.053 li
922.272 192.659 922.908 193.038 923.598 193.038 cv
1052.45 193.038 li
1053 193.038 1053.52 192.799 1053.87 192.384 cv
1058.59 186.92 li
1061.72 186.92 li
1062.76 186.92 1063.6 186.077 1063.6 185.037 cv
1063.6 183.997 1062.76 183.155 1061.72 183.155 cv
cp
f
919.681 198.88 mo
918.945 199.615 917.754 199.615 917.019 198.88 cv
916.283 198.145 916.283 196.953 917.019 196.218 cv
917.754 195.483 918.945 195.483 919.681 196.218 cv
920.415 196.953 920.415 198.145 919.681 198.88 cv
cp
1061.72 195.529 mo
922.321 195.529 li
921.978 195.529 921.661 195.627 921.384 195.789 cv
920.935 195.444 920.435 195.12 919.991 194.839 cv
918.272 193.751 916.222 193.401 914.782 194.839 cv
913.345 196.277 913.345 198.61 914.782 200.047 cv
916.222 201.485 918.169 200.95 919.991 200.047 cv
920.442 199.825 921.013 199.489 921.51 199.103 cv
921.757 199.221 922.03 199.294 922.321 199.294 cv
1061.72 199.294 li
1062.76 199.294 1063.6 198.451 1063.6 197.412 cv
1063.6 196.373 1062.76 195.529 1061.72 195.529 cv
cp
f
914.614 207.923 mo
913.878 208.658 912.686 208.658 911.952 207.923 cv
911.217 207.186 911.217 205.996 911.952 205.261 cv
912.686 204.525 913.878 204.525 914.614 205.261 cv
915.349 205.996 915.349 207.186 914.614 207.923 cv
cp
1064.39 204.571 mo
918.809 204.571 li
918.083 204.571 917.459 204.988 917.144 205.591 cv
916.606 204.964 915.683 204.362 914.924 203.881 cv
913.61 203.047 912.102 202.651 910.822 203.153 cv
907.847 200.803 li
895.125 200.803 li
895.125 202.686 li
907.192 202.686 li
909.315 204.362 li
908.298 205.8 908.429 207.801 909.716 209.09 cv
911.156 210.527 913.102 209.991 914.924 209.09 cv
915.64 208.736 916.655 208.098 917.204 207.425 cv
917.534 207.969 918.128 208.336 918.809 208.336 cv
1064.39 208.336 li
1065.43 208.336 1066.27 207.493 1066.27 206.453 cv
1066.27 205.414 1065.43 204.571 1064.39 204.571 cv
cp
f
920.996 216.892 mo
919.961 216.98 919.05 216.212 918.961 215.176 cv
918.873 214.14 919.642 213.23 920.679 213.141 cv
921.716 213.052 922.625 213.821 922.714 214.857 cv
922.8 215.893 922.033 216.804 920.996 216.892 cv
cp
1066.27 212.205 mo
1066.27 211.167 1065.43 210.323 1064.39 210.323 cv
924.204 210.323 li
923.446 210.323 922.795 210.775 922.497 211.423 cv
921.681 211.444 920.658 211.751 919.825 212.014 cv
918.084 212.562 916.632 213.701 916.473 215.391 cv
904.069 215.391 li
904.069 217.274 li
916.814 217.274 li
916.814 217.264 li
917.455 218.609 918.875 219.487 920.446 219.354 cv
922.475 219.181 923.319 217.347 923.805 215.371 cv
923.895 215.003 923.98 214.543 924.028 214.07 cv
924.087 214.075 924.144 214.087 924.204 214.087 cv
1064.39 214.087 li
1065.43 214.087 1066.27 213.247 1066.27 212.205 cv
cp
f
914.425 228.061 mo
913.689 228.795 912.498 228.795 911.763 228.061 cv
911.026 227.326 911.026 226.134 911.763 225.398 cv
912.498 224.664 913.689 224.664 914.425 225.398 cv
915.159 226.134 915.159 227.326 914.425 228.061 cv
cp
1063.6 216.333 mo
933.727 216.333 li
933.21 216.333 932.716 216.546 932.359 216.92 cv
924.9 224.804 li
917.594 224.804 li
917.153 224.804 916.753 224.961 916.432 225.216 cv
915.918 224.777 915.283 224.367 914.735 224.02 cv
913.017 222.931 910.967 222.581 909.526 224.02 cv
908.089 225.458 908.089 227.789 909.526 229.227 cv
910.967 230.666 912.913 230.128 914.735 229.227 cv
915.238 228.979 915.888 228.59 916.422 228.148 cv
916.744 228.407 917.148 228.568 917.594 228.568 cv
925.712 228.568 li
926.229 228.568 926.725 228.355 927.079 227.98 cv
934.537 220.098 li
1063.6 220.098 li
1064.64 220.098 1065.48 219.254 1065.48 218.215 cv
1065.48 217.176 1064.64 216.333 1063.6 216.333 cv
cp
f
912.961 240.069 mo
911.926 240.158 911.014 239.389 910.926 238.355 cv
910.893 237.964 910.981 237.592 911.159 237.275 cv
911.284 237.275 li
911.284 237.095 li
911.595 236.667 912.075 236.368 912.643 236.319 cv
913.119 236.278 913.564 236.424 913.921 236.689 cv
913.962 236.722 914.002 236.756 914.046 236.785 cv
914.396 237.095 914.635 237.531 914.678 238.034 cv
914.765 239.071 913.997 239.981 912.961 240.069 cv
cp
1065.48 222.45 mo
1065.48 221.411 1064.64 220.568 1063.6 220.568 cv
937.639 220.568 li
937.102 220.568 936.591 220.799 936.232 221.199 cv
928.405 229.98 li
918.809 229.98 li
918.341 229.98 917.894 230.153 917.546 230.469 cv
913.828 233.831 li
913.539 234.091 913.351 234.422 913.264 234.774 cv
912.759 234.892 912.246 235.048 911.79 235.192 cv
911.602 235.251 911.419 235.319 911.239 235.392 cv
904.069 235.392 li
904.069 237.275 li
908.855 237.275 li
908.535 237.82 908.37 238.452 908.432 239.172 cv
908.603 241.198 910.386 242.702 912.411 242.53 cv
914.438 242.357 915.284 240.524 915.77 238.549 cv
915.886 238.081 915.992 237.462 916.023 236.856 cv
916.139 236.791 916.252 236.715 916.354 236.621 cv
919.534 233.745 li
929.249 233.745 li
929.785 233.745 930.296 233.516 930.655 233.114 cv
938.482 224.333 li
1063.6 224.333 li
1064.64 224.333 1065.48 223.491 1065.48 222.45 cv
cp
f
924.422 239.419 mo
925.432 239.177 926.448 239.797 926.691 240.808 cv
926.934 241.818 926.313 242.834 925.302 243.079 cv
924.291 243.324 923.273 242.701 923.031 241.689 cv
922.788 240.678 923.41 239.661 924.422 239.419 cv
cp
922.919 247.157 mo
923.926 245.018 li
924.694 244.845 925.583 244.424 926.314 244.064 cv
928.142 243.166 929.51 241.599 929.034 239.622 cv
928.558 237.644 926.57 236.428 924.592 236.902 cv
922.614 237.381 922.056 239.32 921.873 241.346 cv
921.796 242.196 921.817 243.515 922.169 244.331 cv
921.724 245.275 li
877.798 245.275 li
875.86 243.765 li
874.702 245.248 li
877.15 247.157 li
922.919 247.157 li
cp
f
762.862 271.211 mo
763.271 272.167 762.827 273.273 761.872 273.683 cv
760.916 274.091 759.81 273.647 759.401 272.692 cv
758.993 271.736 759.436 270.63 760.392 270.22 cv
761.098 269.918 761.885 270.084 762.413 270.576 cv
762.413 270.61 li
762.451 270.61 li
762.621 270.777 762.763 270.978 762.862 271.211 cv
cp
976.374 273.748 mo
957.081 293.982 li
826.813 293.515 li
802.577 268.728 li
762.49 268.728 li
761.454 268.233 760.219 268.165 759.079 268.653 cv
756.976 269.553 756.001 271.986 756.9 274.088 cv
757.799 276.19 760.232 277.165 762.335 276.266 cv
764.438 275.367 765.413 272.934 764.513 270.831 cv
764.48 270.755 764.441 270.683 764.405 270.61 cv
801.784 270.61 li
826.019 295.394 li
957.885 295.868 li
977.18 275.629 li
1013.33 275.629 li
1063.72 326.72 li
1065.06 325.397 li
1014.11 273.748 li
976.374 273.748 li
cp
f
833.213 345.373 mo
833.968 346.086 834.007 347.275 833.296 348.033 cv
832.586 348.793 831.394 348.83 830.639 348.121 cv
829.88 347.409 829.839 346.218 830.551 345.459 cv
831.262 344.699 832.451 344.662 833.213 345.373 cv
cp
977.149 345.332 mo
967.984 336.694 li
967.047 332.571 li
952.555 318.068 li
888.355 318.068 li
879.413 327.964 li
849.085 327.964 li
844.967 332.103 li
835.205 332.103 li
830.888 336.819 li
830.888 342.84 li
830.245 343.385 829.64 344.382 829.163 345.191 cv
828.128 346.946 827.847 349.006 829.329 350.397 cv
830.815 351.788 833.144 351.714 834.536 350.23 cv
835.926 348.746 835.329 346.817 834.368 345.025 cv
834.018 344.369 833.41 343.458 832.769 342.912 cv
832.769 337.551 li
836.034 333.985 li
845.751 333.985 li
849.868 329.846 li
880.25 329.846 li
889.191 319.95 li
951.775 319.95 li
965.331 333.518 li
966.276 337.674 li
976.404 347.214 li
992.835 347.214 li
998.556 353.446 li
999.941 352.175 li
993.661 345.332 li
977.149 345.332 li
cp
f
884.48 343.782 mo
883.447 343.902 882.515 343.161 882.394 342.13 cv
882.273 341.097 883.013 340.162 884.048 340.043 cv
885.081 339.921 886.014 340.662 886.134 341.696 cv
886.252 342.728 885.513 343.661 884.48 343.782 cv
cp
975.966 349.046 mo
964.541 338.58 li
964.541 334.968 li
951.045 321.593 li
902.739 321.593 li
885.814 338.27 li
884.999 338.317 883.985 338.653 883.16 338.941 cv
881.237 339.613 879.69 341.004 879.927 343.025 cv
880.16 345.043 881.987 346.493 884.007 346.259 cv
886.027 346.024 886.816 344.165 887.243 342.176 cv
887.408 341.406 887.538 340.233 887.361 339.388 cv
903.513 323.476 li
950.272 323.476 li
962.659 335.753 li
962.659 339.409 li
975.234 350.928 li
991.242 350.928 li
994.153 353.514 li
995.402 352.106 li
991.958 349.046 li
975.966 349.046 li
cp
f
869.938 304.242 mo
868.981 304.652 867.877 304.206 867.466 303.253 cv
867.058 302.296 867.501 301.189 868.457 300.781 cv
869.413 300.372 870.519 300.816 870.927 301.772 cv
871.335 302.727 870.893 303.833 869.938 304.242 cv
cp
992.54 300.517 mo
987.935 293.749 li
962.953 293.749 li
960.032 296.922 li
873.495 296.922 li
871.262 299.716 li
870.117 298.854 868.557 298.609 867.144 299.214 cv
865.041 300.113 864.065 302.547 864.966 304.648 cv
865.865 306.751 868.297 307.725 870.4 306.826 cv
872.503 305.928 873.477 303.493 872.578 301.392 cv
872.551 301.326 872.517 301.265 872.486 301.202 cv
874.4 298.806 li
960.856 298.806 li
963.778 295.631 li
986.938 295.631 li
990.658 301.098 li
990.658 334.198 li
1009.28 353.464 li
1010.63 352.155 li
992.54 333.436 li
992.54 300.517 li
cp
f
846.87 199.524 mo
846.988 200.556 846.251 201.49 845.217 201.613 cv
844.185 201.732 843.252 200.992 843.131 199.958 cv
843.091 199.617 843.151 199.29 843.279 198.996 cv
843.383 198.929 843.481 198.852 843.573 198.762 cv
843.754 198.586 843.891 198.382 843.986 198.163 cv
844.22 198.013 844.485 197.906 844.781 197.872 cv
845.813 197.753 846.749 198.492 846.87 199.524 cv
cp
787.505 197.251 mo
786.767 197.983 785.576 197.98 784.843 197.242 cv
784.111 196.505 784.114 195.313 784.852 194.58 cv
785.589 193.848 786.78 193.852 787.514 194.589 cv
787.768 194.844 787.927 195.154 788.004 195.48 cv
787.998 195.545 787.984 195.608 787.984 195.676 cv
787.984 195.829 788.007 195.975 788.042 196.117 cv
787.997 196.531 787.823 196.935 787.505 197.251 cv
cp
789.867 193.794 mo
789.558 193.794 789.269 193.876 789.012 194.008 cv
788.622 193.72 788.205 193.45 787.83 193.21 cv
786.113 192.117 784.065 191.762 782.622 193.194 cv
781.179 194.628 781.17 196.959 782.603 198.402 cv
784.039 199.845 785.986 199.314 787.813 198.419 cv
788.267 198.197 788.841 197.86 789.342 197.474 cv
789.51 197.523 789.683 197.557 789.867 197.557 cv
820.3 197.557 li
820.51 197.557 820.72 197.523 820.918 197.455 cv
829.571 194.449 li
836.759 194.449 li
840.911 198.723 li
841.087 198.903 841.288 199.037 841.505 199.131 cv
841.642 199.714 841.844 200.319 842.029 200.848 cv
842.704 202.77 844.096 204.314 846.113 204.079 cv
848.134 203.844 849.583 202.016 849.346 199.996 cv
849.109 197.975 847.251 197.189 845.261 196.763 cv
844.888 196.684 844.42 196.612 843.941 196.581 cv
843.856 196.409 843.752 196.244 843.612 196.1 cv
838.905 191.255 li
838.551 190.891 838.064 190.684 837.554 190.684 cv
829.255 190.684 li
829.044 190.684 828.836 190.72 828.638 190.789 cv
819.981 193.794 li
789.867 193.794 li
cp
f
767.063 244.749 mo
767.799 244.014 768.991 244.012 769.726 244.748 cv
770.462 245.481 770.462 246.675 769.727 247.409 cv
768.992 248.145 767.801 248.145 767.064 247.412 cv
766.794 247.142 766.625 246.81 766.553 246.462 cv
766.579 246.257 766.569 246.055 766.532 245.862 cv
766.579 245.456 766.751 245.061 767.063 244.749 cv
cp
764.396 248.076 mo
764.496 248.091 764.596 248.099 764.693 248.099 cv
764.968 248.099 765.23 248.033 765.47 247.922 cv
765.89 248.237 766.346 248.532 766.754 248.79 cv
768.475 249.879 770.524 250.227 771.961 248.789 cv
773.399 247.35 773.399 245.018 771.96 243.581 cv
770.519 242.143 768.575 242.68 766.752 243.583 cv
766.332 243.79 765.809 244.096 765.337 244.449 cv
765.225 244.408 765.107 244.376 764.985 244.356 cv
759.574 243.501 li
758.548 243.344 757.584 244.04 757.421 245.068 cv
757.259 246.094 757.959 247.059 758.986 247.221 cv
764.396 248.076 li
cp
f
842.184 342.141 mo
841.417 342.844 840.226 342.791 839.524 342.022 cv
838.823 341.255 838.876 340.065 839.646 339.363 cv
840.411 338.662 841.602 338.715 842.303 339.481 cv
843.006 340.25 842.95 341.441 842.184 342.141 cv
cp
851.831 338.764 mo
845.358 338.764 li
845.25 338.764 845.146 338.778 845.044 338.796 cv
844.912 338.585 844.764 338.383 844.59 338.193 cv
843.048 336.506 840.43 336.389 838.742 337.931 cv
837.053 339.475 836.938 342.092 838.479 343.78 cv
840.021 345.467 842.64 345.585 844.328 344.041 cv
844.803 343.608 845.147 343.087 845.372 342.529 cv
851.831 342.529 li
852.869 342.529 853.713 341.686 853.713 340.647 cv
853.713 339.607 852.869 338.764 851.831 338.764 cv
cp
f
866.828 334.649 mo
867.178 333.67 868.255 333.162 869.23 333.51 cv
870.211 333.858 870.724 334.935 870.372 335.915 cv
870.025 336.896 868.948 337.405 867.968 337.056 cv
866.99 336.704 866.478 335.63 866.828 334.649 cv
cp
871.682 338.538 mo
871.59 338.319 871.458 338.132 871.303 337.971 cv
871.541 337.255 871.66 336.358 871.753 335.607 cv
872.001 333.585 871.436 331.583 869.521 330.9 cv
867.606 330.217 865.499 331.216 864.815 333.13 cv
864.133 335.046 865.452 336.577 867.047 337.837 cv
867.355 338.081 867.76 338.362 868.19 338.609 cv
868.025 339.045 868.019 339.541 868.214 340.005 cv
869.861 343.896 li
870.167 344.615 870.863 345.045 871.597 345.045 cv
871.842 345.045 872.089 344.997 872.328 344.897 cv
873.286 344.49 873.735 343.387 873.328 342.43 cv
871.682 338.538 li
cp
f
951.599 326.357 mo
948.635 323.986 li
914.594 323.986 li
909.126 329.973 li
909.126 344.886 li
900.819 353.081 li
902.141 354.423 li
911.009 345.673 li
911.009 330.704 li
915.425 325.868 li
947.976 325.868 li
949.716 327.261 li
949.716 346.623 li
955.592 353.426 li
957.017 352.195 li
951.599 345.923 li
951.599 326.357 li
cp
f
947.834 329.407 mo
945.099 327.279 li
915.977 327.279 li
912.459 331.529 li
912.459 346.54 li
906.928 352.148 li
908.268 353.471 li
914.342 347.314 li
914.342 332.207 li
916.863 329.162 li
944.453 329.162 li
945.951 330.328 li
945.951 348.476 li
951.501 354.394 li
952.874 353.107 li
947.834 347.731 li
947.834 329.407 li
cp
f
934.186 334.241 mo
931.224 330.574 li
919.259 330.574 li
915.715 335.071 li
915.715 347.492 li
911.269 352.161 li
912.632 353.46 li
917.597 348.246 li
917.597 335.725 li
920.173 332.457 li
930.326 332.457 li
932.304 334.906 li
932.304 345.214 li
942.011 354.433 li
943.306 353.069 li
934.186 344.406 li
934.186 334.241 li
cp
f
1014.46 158.352 mo
1015.2 157.617 1016.39 157.617 1017.13 158.352 cv
1017.86 159.087 1017.86 160.279 1017.13 161.014 cv
1016.39 161.749 1015.2 161.749 1014.46 161.014 cv
1013.73 160.279 1013.73 159.087 1014.46 158.352 cv
cp
1009.96 157.662 mo
1009.96 161.427 li
1012.89 161.427 li
1013.32 161.732 1013.78 161.996 1014.15 162.181 cv
1015.98 163.083 1017.92 163.619 1019.36 162.181 cv
1020.8 160.743 1020.8 158.411 1019.36 156.973 cv
1017.92 155.535 1015.87 155.883 1014.15 156.973 cv
1013.79 157.202 1013.39 157.46 1013.01 157.734 cv
1013.01 157.662 li
1009.96 157.662 li
cp
f
968.407 262.485 mo
968.407 261.444 969.249 260.601 970.289 260.601 cv
971.329 260.601 972.172 261.444 972.172 262.485 cv
972.172 263.523 971.329 264.366 970.289 264.366 cv
969.249 264.366 968.407 263.523 968.407 262.485 cv
cp
1067.73 303.85 mo
1027.65 263.377 li
1026.77 262.485 1025.57 261.982 1024.31 261.982 cv
975.6 261.982 li
974.967 261.982 974.363 262.108 973.811 262.335 cv
973.589 260.259 971.832 258.644 969.697 258.644 cv
967.412 258.644 965.56 260.497 965.56 262.785 cv
965.56 265.071 967.412 266.924 969.697 266.924 cv
970.114 266.924 970.517 266.86 970.897 266.745 cv
970.928 269.317 973.019 271.395 975.6 271.395 cv
1022.35 271.395 li
1061.04 310.471 li
1061.97 311.403 1063.18 311.867 1064.39 311.867 cv
1065.59 311.867 1066.78 311.413 1067.7 310.504 cv
1069.55 308.676 1069.56 305.696 1067.73 303.85 cv
cp
f
969.908 240.951 mo
968.635 240.951 967.6 239.917 967.6 238.643 cv
967.6 237.367 968.635 236.333 969.908 236.333 cv
971.185 236.333 972.218 237.367 972.218 238.643 cv
972.218 239.917 971.185 240.951 969.908 240.951 cv
cp
1029.96 233.777 mo
969.012 233.777 li
966.412 233.777 964.305 235.886 964.305 238.483 cv
964.305 241.082 966.412 243.189 969.012 243.189 cv
1027.96 243.189 li
1061 277.409 li
1061.93 278.364 1063.16 278.845 1064.39 278.845 cv
1065.57 278.845 1066.74 278.406 1067.66 277.524 cv
1069.53 275.719 1069.58 272.74 1067.77 270.871 cv
1033.34 235.214 li
1032.45 234.297 1031.23 233.777 1029.96 233.777 cv
cp
f
985.282 285.094 mo
984.009 285.094 982.974 284.06 982.974 282.785 cv
982.974 281.509 984.009 280.476 985.282 280.476 cv
986.559 280.476 987.591 281.509 987.591 282.785 cv
987.591 284.06 986.559 285.094 985.282 285.094 cv
cp
1006.97 331.175 mo
1006.97 288.808 li
1006.97 287.648 1006.54 286.528 1005.76 285.668 cv
1000.28 279.55 li
999.39 278.553 998.116 277.983 996.777 277.983 cv
984.238 277.983 li
981.64 277.983 979.532 280.09 979.532 282.69 cv
979.532 285.288 981.64 287.395 984.238 287.395 cv
994.676 287.395 li
997.554 290.607 li
997.554 333.044 li
997.554 334.246 998.013 335.401 998.836 336.274 cv
1019.71 358.393 li
1020.64 359.375 1021.88 359.869 1023.13 359.869 cv
1024.29 359.869 1025.45 359.444 1026.36 358.586 cv
1028.25 356.802 1028.34 353.825 1026.55 351.933 cv
1006.97 331.175 li
cp
f
750.419 305.984 mo
750.419 308.844 748.102 311.161 745.242 311.161 cv
742.382 311.161 740.065 308.844 740.065 305.984 cv
740.065 303.125 742.382 300.808 745.242 300.808 cv
748.102 300.808 750.419 303.125 750.419 305.984 cv
1 1 1 rgb
f
1010.66 158.87 mo
1010.66 161.747 1008.33 164.078 1005.46 164.078 cv
1002.58 164.078 1000.25 161.747 1000.25 158.87 cv
1000.25 155.994 1002.58 153.663 1005.46 153.663 cv
1008.33 153.663 1010.66 155.994 1010.66 158.87 cv
cp
f
903.44 166.509 mo
903.44 169.385 901.109 171.718 898.232 171.718 cv
895.357 171.718 893.024 169.385 893.024 166.509 cv
893.024 163.633 895.357 161.302 898.232 161.302 cv
901.109 161.302 903.44 163.633 903.44 166.509 cv
cp
f
863.98 176.337 mo
863.98 179.211 861.647 181.544 858.772 181.544 cv
855.896 181.544 853.565 179.211 853.565 176.337 cv
853.565 173.46 855.896 171.128 858.772 171.128 cv
861.647 171.128 863.98 173.46 863.98 176.337 cv
cp
f
831.945 156.734 mo
831.945 159.611 829.613 161.943 826.737 161.943 cv
823.861 161.943 821.53 159.611 821.53 156.734 cv
821.53 153.859 823.861 151.527 826.737 151.527 cv
829.613 151.527 831.945 153.859 831.945 156.734 cv
cp
f
789.867 164.773 mo
789.867 167.65 787.536 169.981 784.659 169.981 cv
781.784 169.981 779.451 167.65 779.451 164.773 cv
779.451 161.898 781.784 159.565 784.659 159.565 cv
787.536 159.565 789.867 161.898 789.867 164.773 cv
cp
f
825.24 175.39 mo
825.24 178.266 822.909 180.598 820.032 180.598 cv
817.157 180.598 814.824 178.266 814.824 175.39 cv
814.824 172.514 817.157 170.182 820.032 170.182 cv
822.909 170.182 825.24 172.514 825.24 175.39 cv
cp
f
875.155 198.568 mo
875.155 201.444 872.824 203.776 869.948 203.776 cv
867.072 203.776 864.739 201.444 864.739 198.568 cv
864.739 195.691 867.072 193.358 869.948 193.358 cv
872.824 193.358 875.155 195.691 875.155 198.568 cv
cp
f
947.453 233.554 mo
947.453 236.43 945.123 238.763 942.246 238.763 cv
939.37 238.763 937.037 236.43 937.037 233.554 cv
937.037 230.678 939.37 228.347 942.246 228.347 cv
945.123 228.347 947.453 230.678 947.453 233.554 cv
cp
f
895.628 201.744 mo
895.628 204.62 893.297 206.952 890.419 206.952 cv
887.544 206.952 885.211 204.62 885.211 201.744 cv
885.211 198.868 887.544 196.535 890.419 196.535 cv
893.297 196.535 895.628 198.868 895.628 201.744 cv
cp
f
904.069 185.037 mo
904.069 187.913 901.736 190.245 898.861 190.245 cv
895.983 190.245 893.653 187.913 893.653 185.037 cv
893.653 182.162 895.983 179.829 898.861 179.829 cv
901.736 179.829 904.069 182.162 904.069 185.037 cv
cp
f
905.541 218.215 mo
905.541 221.092 903.21 223.423 900.333 223.423 cv
897.458 223.423 895.125 221.092 895.125 218.215 cv
895.125 215.339 897.458 213.007 900.333 213.007 cv
903.21 213.007 905.541 215.339 905.541 218.215 cv
cp
f
905.541 236.667 mo
905.541 239.543 903.21 241.874 900.333 241.874 cv
897.458 241.874 895.125 239.543 895.125 236.667 cv
895.125 233.79 897.458 231.46 900.333 231.46 cv
903.21 231.46 905.541 233.79 905.541 236.667 cv
cp
f
876.803 241.874 mo
876.803 244.751 874.473 247.083 871.596 247.083 cv
868.72 247.083 866.387 244.751 866.387 241.874 cv
866.387 238.999 868.72 236.667 871.596 236.667 cv
874.473 236.667 876.803 238.999 876.803 241.874 cv
cp
f
862.247 264.338 mo
862.247 267.212 859.914 269.546 857.039 269.546 cv
854.162 269.546 851.831 267.212 851.831 264.338 cv
851.831 261.46 854.162 259.13 857.039 259.13 cv
859.914 259.13 862.247 261.46 862.247 264.338 cv
cp
f
912.101 271.393 mo
912.101 274.269 909.767 276.601 906.894 276.601 cv
904.016 276.601 901.685 274.269 901.685 271.393 cv
901.685 268.517 904.016 266.185 906.894 266.185 cv
909.767 266.185 912.101 268.517 912.101 271.393 cv
cp
f
891.628 284.257 mo
891.628 287.133 889.296 289.465 886.419 289.465 cv
883.544 289.465 881.212 287.133 881.212 284.257 cv
881.212 281.381 883.544 279.049 886.419 279.049 cv
889.296 279.049 891.628 281.381 891.628 284.257 cv
cp
f
830.143 269.546 mo
830.143 272.42 827.811 274.753 824.935 274.753 cv
822.06 274.753 819.727 272.42 819.727 269.546 cv
819.727 266.668 822.06 264.338 824.935 264.338 cv
827.811 264.338 830.143 266.668 830.143 269.546 cv
cp
f
783.889 269.546 mo
783.889 272.42 781.558 274.753 778.681 274.753 cv
775.806 274.753 773.473 272.42 773.473 269.546 cv
773.473 266.668 775.806 264.338 778.681 264.338 cv
781.558 264.338 783.889 266.668 783.889 269.546 cv
cp
f
760.706 247.083 mo
760.706 249.959 758.374 252.291 755.499 252.291 cv
752.623 252.291 750.291 249.959 750.291 247.083 cv
750.291 244.208 752.623 241.874 755.499 241.874 cv
758.374 241.874 760.706 244.208 760.706 247.083 cv
cp
f
773.814 309.023 mo
773.814 312.108 771.376 314.608 768.368 314.608 cv
765.358 314.608 762.921 312.108 762.921 309.023 cv
762.921 305.939 765.358 303.438 768.368 303.438 cv
771.376 303.438 773.814 305.939 773.814 309.023 cv
cp
f
860.999 341.75 mo
860.999 344.835 858.56 347.335 855.552 347.335 cv
852.542 347.335 850.104 344.835 850.104 341.75 cv
850.104 338.666 852.542 336.165 855.552 336.165 cv
858.56 336.165 860.999 338.666 860.999 341.75 cv
cp
f
877.042 347.857 mo
877.042 350.941 874.604 353.443 871.596 353.443 cv
868.587 353.443 866.147 350.941 866.147 347.857 cv
866.147 344.773 868.587 342.272 871.596 342.272 cv
874.604 342.272 877.042 344.773 877.042 347.857 cv
cp
f
897.074 333.044 mo
897.074 336.129 894.637 338.63 891.628 338.63 cv
888.619 338.63 886.181 336.129 886.181 333.044 cv
886.181 329.96 888.619 327.458 891.628 327.458 cv
894.637 327.458 897.074 329.96 897.074 333.044 cv
cp
f
859.391 221.509 mo
859.391 224.386 857.06 226.717 854.183 226.717 cv
851.307 226.717 848.974 224.386 848.974 221.509 cv
848.974 218.633 851.307 216.301 854.183 216.301 cv
857.06 216.301 859.391 218.633 859.391 221.509 cv
cp
f
828.447 193.358 mo
828.447 196.235 826.116 198.568 823.24 198.568 cv
820.364 198.568 818.032 196.235 818.032 193.358 cv
818.032 190.483 820.364 188.151 823.24 188.151 cv
826.116 188.151 828.447 190.483 828.447 193.358 cv
cp
f
807.034 209.926 mo
807.034 212.803 804.704 215.134 801.827 215.134 cv
798.952 215.134 796.618 212.803 796.618 209.926 cv
796.618 207.052 798.952 204.718 801.827 204.718 cv
804.704 204.718 807.034 207.052 807.034 209.926 cv
cp
f
813.475 227.472 mo
813.475 230.346 811.144 232.678 808.267 232.678 cv
805.392 232.678 803.059 230.346 803.059 227.472 cv
803.059 224.594 805.392 222.264 808.267 222.264 cv
811.144 222.264 813.475 224.594 813.475 227.472 cv
cp
f
836.095 212.882 mo
836.095 215.757 833.764 218.09 830.888 218.09 cv
828.012 218.09 825.679 215.757 825.679 212.882 cv
825.679 210.005 828.012 207.675 830.888 207.675 cv
833.764 207.675 836.095 210.005 836.095 212.882 cv
cp
f
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.1.0
%%For: (user) ()
%%Title: (plata_11.eps)
%%CreationDate: 5/12/2016 1:18 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6H!=5#dPq+'I:$'*LY,?E&GJ9e.L?,E;%R\a`K4mYP0"-gmJ5f<lu2j&f%ta""PEF1PD%5(T"?)GXEi?$[;+U4>AWu%eQVR?
%f_TqTBB5@Pb:mu/+#@R-p4%;T5-+'>h2Bu(Gp@3.C/t+iW7fqmZmnq^]ABQs3o/oQqN#YQpTf05^Q`d]U3aNG=0>XY=3da?@EUgh
%XOX)j<i8g_jh/7B5l6X)^ZeWL)?>7CgcsS/&84;nok5d22UB#0[&?cWjl(]1TD#"C>.<*4pM-hmkBSm9Cj@f.Iag!n%lDpZcD:Kb
%d>th9FBn7cHST4dD+/sJk&VAK+h,o)Us$G6R`ORi)<u_B0/H-!nc+nKr4fVlq7lF.Q*YOlbd4oc_Anjun;Nmtda+6E@%NhfO?$Vm
%:@KB@[-Qg[`#%R`4h8*Lq>^):`/X!k\=mbAH&'sb=@PI_F$]$Q*K0paLO%?LNRN67riAP</a&]oj_E:Bf3.>0p1s]%CJ-?LrNOnW
%8"DT`>)uG(@ot.'nZl/SlI8!<@'a2%gXS4)s&CW\b+4`p7nD=5pMgqk\KI=%<PPeErXf2$9Jspe4),hDhXXR2Ct#V&<@3]l[p8b[
%Y]HCIiPI:&:]I%)ccF_<`l0&;+s,O[*UOIpmW<1k[H=b0d]nM"Vss=mVcHO>e@0ILr.g'Q#MT33nc,T=db]>aW#78GZjt\pC'\b=
%?g_FhNFm=He\F%an]rDQHBY;#hE"NKVZ5T3BS_+Am=bRrY?KGLf#5A=rSK.$/NDOfpZ]_rSQ<M=eN@aJp4%.;C?m:j]o=MT<ei<9
%RbKk!7fSk%bqUs8%Q`\YNC!S>g>pGbpA>X-dQT`i:4B%Rr6P0<cdJF6Q'b$%J3Z&^In'*3>8p\uAJoKs?>c&j3W:0>E4bfkrDKM6
%8r#gPW:rL)R"R#-3YicjgC0'k8H\@X/#MV*qRpQlF8*pXlF,S&=6OmEofE&(#cq>WinU_ZC.F];Fh?3e[h=F\42&C4SMT&J2(GM/
%43O;oB2PjQ3]sKqr\jrJQ@#MT9ql7-RiJF*1VGDGTtmsm\6c$G46`!aVmT."f]dTUEsJgJ4W/[dn&\9"Du:8pB&#j/l83^RZCg`p
%WWp?S'!IN`'0KLICXc&Mj##!n+3[3^7\&lJMS?IBra06Rq<cm5-=kp3d5YmkCY_H8\dmC>b,JD+dJf2E0?V5mp+*ec;.h`\;fYV?
%r)9M8mB\L]HabO'mTlqe\%^`M2qmf:Z>_n\rGer2]J6nQYP"WS^fudVPhk-oBt58S0ukm?dimO7P-MS,?!=g;\seBO\Gu7OEOd,i
%VME:N\RkWhqj6'@8/pR'9=5+kRr[]4'gJh]k5K8JS+P_RSKdHk%YqRQ+uLon3p#<YQ.&pMg529R_TG$s,12_SM#[*r@,(>6S7rga
%kAq1.C!c"a@&#s0otG0`)V%SXHPa&)Q5e82<Y.2pSETA<"UrPX)qAh2S&qt$^GB]dn&aG'Nso7f0to6H=;TPIj/[BGbiI'(:klXm
%Zl[gO$X8C?HMb'sBO8Bc=uF4#ctG/gMC4B2pA1=)Z=KGikj#L9?<<^f1AH*m0Q4I&DrmqQNA`lGpHIt,$V_,=+4oYVX*<.]2g-[a
%nt/bpEmu%hCJW4+I]l45jOIK#E]Z7)ZKuG$oscmbo"'-WSZ(;HB2L\KL)HE(7;Fe7>P$Ab5<?<3BkV:rr8]7#;JOI7W,7(XUXclY
%$c^1dgM"!i:73ZB%!tR8Nb_#ZXa[/\4Va;NQ7L+"6Y!#1[_]OkQ";))CK^mW?<8f<@4=7_XisJL$/EhMPaeI#bY5Q=1?G$o.<jPr
%P:g3leZ*b1N\Qm:7%[@]/d',=Cq5rc2m_UX[bT)mS(Vg@fTpSrQ7\G;4&]V3/Qk$JR`i-r$+K*=dO@Y87eQ`/EjbSl/9DU7(cMDC
%Xa$75F.h9gQD-TZSAC[dC"Ac7CL9U)r^DubMRDTEjaO[C.lWA&mr#H(jp^HSc,('nPANTeZ\YLD(hHW(nsF[ieN,n^7_MHn@>\cI
%L\E]l<*k>0N,6385:--koO>FD5gK;+BCQG2G%4IXN=9$*8!SP:gtDJ7h.fF(/6I,1bLe_?I=LRbB"(k@WVrZ!`jNPiGrjc1kI=cR
%p+,6@(cfrj`masgD#dFVqA5jTs+$e=)E1rB%3ku$R<35s1broX_X1bel8*;;58gp"T<[]!]<,8C\"1d][<R,CfN5@e>NlSqWV$+a
%?XOWeQrq0['9V>77m@gOQo#;75qJO3Ug35PJO\ZdXXnh/a8n'##A9b?QnphI*ph#*6P^8S2F\#D'+B*EV.$o5l^]r.?C$uL<(Y&E
%N0fUIpXJ4i"#Jp2?QK-Aak!*SoM/%Sa31E&'&b+6;VT;gBK,NHY&tJc/>$(2ccGL@2^uqjc*3O+GACg-Y6fDfrbEQlXLDC+@OI'4
%P9Coke+8sNI"l:iST;-hcZ6pC_f8t"[>$Gb2psUr.B-nsp@(jOZ:WlqYN?qYVJin(m8HtEbTN].cjZ>IZ&*+'2h?6[dhAfSh91b&
%rK"%8)itT"koniXPBVb+bOj0U(g^o](P,A%(@2KX(nV,@-Cr_I//mQ5^@'=/gH'];YP'jdYPXBd=>*StGVX)I=p309(FZdA^I>&d
%XP)uN:2A1-<0Nq>E[+!8;$OCr*c@6O1I&dZ`Y6kC&:@YG/N9.rI6Xb'Va[o0U<[m!fDbJ!6jS9kJ*4G&=k]*Th0-J:M=;s_Qf[p?
%MO[/(L<C,hS-hn:r?,)-gn3`ET3#rus3.4"`XO;a,>Pn1b2?3f*Z6hi!e]+Dj5`"-QSF?=k&6[U@a_5#bN%HYXS7jno.`C-T4'N7
%4[%mdA"([tJ"eMf##]l.g;HG.?hZNL-^hK"C,`;tADdsOVNT&.nID_WgedlfD6hi0AjF%MV:';S0+$8AlqD1WY&1]ed'/t8ZB2F3
%f/>Z%gI`>9W*6=^_iIs'-YYWXP52W:C1Q:Ggh^dtQGEW=A[28=j4cr3r`Anc#%A`ETi^Ym<%4X)\@,A?25>2Ha"s!$]n1//B@p/:
%FKCcs\QN]Yik^Q)[=T>oQu+:>AYMkOJQB<QR4)2r1G/$Q=XM9:q.DKletgdkNW*U!Q9';t>SOTTM9&,bgn\2>/=W%Cd50mp-lH"-
%.EP$#KN+/-MfL%qBB:K%U1Ds$//Ml`Mt4WE2R?YQ$+"cW83j_R\L<k*il'$=S!8hoAM_f0;,;Nk8uB4fFR$B8\L<`4P`(]91Xe\`
%^G8D;NB&kamd_a8`]3F-\r5`_b4(kU`:OeBR%B5Gel@ZM"ZNH1@:AK+`&1s5J$FcB)Wb$9O5I%ece&Vkh7/M!s(%C_).37Y^?3]8
%>)"8hn[06AS+3nci+j8PK$;`PS#*8V\C;BtRrPic2clItCH"jgRrPhR=8Q'?2*E.*3/75%U`E$],PZ1EZ;VJ<S<;4FPEA'SUC9XH
%,GQ+o%H*1\jP1.MI'W"M9K@K(gMpq;s-c^kmFM8slFZ`[O2E]bH(6]rmR3&cKk2'tXa!L@=cJGWc&4g!3KVhBNlo%5VA^@VgMq)t
%#1]Q\MD*84dYuo5";I[eZQS5..a=?(FTX.fFPEaJEqPatBdK#6:f5MCZ&G4;dXR5rrSIt\:&k5#rK+X_B-H<A5^oTibG;+,2sZr^
%rrYW44ScOU4u>G\8c78Mo5@=_T8jK%`4m_8OAS_f'Ib9G9KI[+Zl8=4QV?#%r^D5"^Z9%fA-D5gm\Z-TA8q75?0"Z,0*@3Rk!7"l
%LPoV6"+,",W&eSD_aUOu"+.7"HOj84aOqDAaA6Qj'/($BSQbKh&bWGcpo0F95:9F-8k*,cn\lFj,c<@.nWS/Y29A+iQ[Z:9mk"H"
%RIT/h'HWc$>b8oaBCXk^r-&qVS]-(Kh9[_PH_\?/0g=t:&R`daaf%eV@_NN@fpZl0aXlR9MttY-^-Aa^A5I;]a2e-r[,,P\KPY8:
%Z#`(JKkruJHG0"'eQ]-,:/6/c@&\_ZS/HK0ggP#&C0&WaT<XRX5jP[h%2i8n^N3(`D:WP52P4sF2sHK+OnT:t8ssl[o8k89NL>Q<
%jrsUZG&IT<4*-T[Wgdhun_T\'D!!)A-$IGR8LKCa/#4I\.jV`A-`rXuCTVp4>NnQ+Puag<]J-KOo:M#;jA#ntAlP[XAb7oqD9'ZA
%K+*)Vs/4H3pFc<phuF"@>E7B2;l[)I@N2>e=E@D5@VBR.SS'G"hTTH#\"a:E-Cp.2gSFRSEZ1M;1,^>t5QgOkJ&3^Z^<?;9SVt_E
%)rVI"\W8)kI2(/H=PnR$)H31e?=o4aRH*Bi[Q/EAbT&;9o3KT\0@Sm);/R.h]I5EAqd3rqQO1)cB9&=NEP.6+\[XYF4qlsAg/l;C
%<-s^Eg6:50=(^Hi9_=aj@@Wj%\r09n.1e0`2DH(rR.Oi$=nXQ6`?ql<U.r@$]Wm/;Y45F3A(&nS]B.b#0s$d^S7%(0'989MUeJ@=
%]EsjjIaT^6$-:4)-rV?0B,-eO<X#@m\CXmVV-3JfEM;X3VG>P<Bt;soC\EmZS+\<r6e/0hX8IfO$)[\^H\N&"<\o-&PT,Si[Bf/X
%+uq?]LVG4-4=6YH[>p<[;%M1'M5hFro!HgB%e&rFBES0rgV'#p^nff1:&S2fbX/p](7JqVGH]$5djSG_:ss;f'$k[*D!/!*2,bE^
%C,`<?/=CC1c",4u`i)L@gI)gRG)SKL^Whfo/%0iCr#";7O"j']c.)VFJfEXgaKgSh+(Jb3h.`Y[R3,r$a-a6'RJARLIZ,`GA,L[)
%ZsGak`mmemc]1*K9!;KLeZ*3&2j\tpSjtR6=LM3)`S!B6adC=cW*aUFmRE\:k^,O/<jL?Y6g_q%[k*f0Rf159+m,DbSl4m6a0hmY
%CVNs:<A*it%X89+m\!V,['tV;@j@r]Suen?o:0AJ2kB?^$4UQ5e?Kf.b/3+M`Har?C]]Lcb\H`SHp(uCc'(`83ps?n=kFfT)rFCG
%I.XAhb+cAS`j^k/Xe[Li1JfT9I*S@V.3!A7Nh:rQkGV`8\N%i/_--Gp$hc@TkA-L0KILokrnJa%RA2Ts&*%7JHtD$WPU(WffueuG
%HY(mI/D4eo64'V8Ed6"/s*p/DWHXV22JqCU,B)@B=+#bhS=(a2m;4%0nK>$)QaJWUjj$GJR4\.tVja#22m_XYf%eK<Rosgq\+"=C
%jt`n62r0q7Ja$T45!s%<.5g9Dltg:Zc-3_d3B&bWL:/fmk@Wl3bq\D:Rq9lVg<PqMF%bX)0^,fZ@V4%_L.V-BeZ,3_b#u[@9t0;'
%g.)N+(d,-V%-)hXOmrJNP^E[QlK_'dl=8-)8k`Z!M(ro9jtNuG;]oR4cKI;<Eq5dljeI.4Ejh,E:odm)e9X?F1V%\@]cZnu?>A#.
%>^2V*F6lgm7iD%W/S)3p`1'@KqIaq[AkpWC-((*D0Li4rj[,$o2iG.>p\456<<#ePf3E5Oq0Ut$XG#ORj$L8j:,>%SYH&1d03uRd
%oF2:S(t\aBIpm--;U2)X%C@2.XtjONFShWhE[Al>Xhj-U"89L`7cs1,:5rN$rWV7"mdTp*e/F50oWO5A@BJqL=JVL=SWs.QC\0F%
%"-]&2g(0+51">9p0(l2C@i\u>>BG/\3Z#Y,?sAK]l."iNcu8hNfT!Z#X_*ehT0(qAJeal%Ys4qcT'nF5=D+Yi^JM?8WNS`t=.\NL
%1"D[i1`]399IK\u$e\VZ@&fKd=b?3tqsJr+lHEf&bh7E(f#-00D=l":UN)u/#%cl^U:C3<*h:@/_aVOQ#52G#p)^MqP-Zl8P3dYD
%ad7nH:9A`oLbaCU@&g$_9hRgUf6Y'jg4b!DR;e[(L,K^*PG+dG\o>m!LIi;B5A?D,"Q\VOPaQ?XIb?]?*ou"p"t*F8\K9T^4niru
%X-cM<\:HMbDUqn.DfUE^fsfh8XX);Z`I"IaB:JJ/7#`r2Q_@*j<:Fi_B;kiiqC@,%]j(Il$[K]#Vh)-#?>)KuhVCg[R\lHFn8k1f
%QdOMtZ\b0J*So3X+4pN:DO`O?oeeLj1?dd4?R0.G-</*s4tkAe[^5QiH4N)4lC[&['E@->VBAo[j&55m6N<R#Q@Md50^djg<Wer]
%,_DZ#Ru'Wm1WsElVc'/<0.OkT_J,d>WE6$:)T.#R*-F/TSMBt*-LHP7jeFB93u-UD/!hDu_&IimebqJSHHb/TZeqkN9dLah8P#0A
%F%5SpUY4*6RZ/92baZr&MIT?j@1rlg":dKSB(n:.QP:bXkC5NGJ*-EkCrLHFoOu(PnS6K.f>jiEiKUf<]frcAr[GS,;Co"!`U]Hu
%n<4q[\m*fBNPg`f2>J(%_d%^%?aZ?71^]SJ=]4`uFAco>^\meTYM/nY+M[<pqt/bdr\+^3W).=O7Ccm*h`]5t/2ta";(&j%WR;]g
%qCsA4Y*\JIg5-)Web#NbW^!<Zp+*$cIXX8KbGtfo-3ffX%9pGPIFuA)/"GeP+k,HNB,LPrgAcX#qEt(\d-9qm,']I<nO9eW=-NXf
%U7D*KpeW<Gp6eb?'qkr_m!c(aY")&.,I`=*`+`!Ahto/OHh<rClNWpojQI-#[S=%7o1iZs!WMS:a71bX_mFj8Fn(5u\mEI-\5&E<
%?be@8k1'8Mpt'T`lPm\>U>sA/b^K>(jJouBO*_u]R^l#uj=G;DZ&[-R%S5@>eRu<pY"-03,b*OOinX`l_+Sr6_n\SZdr7Ec06BOu
%E7@eK54-_th-PjWa)lRY`V]\n5R2f6mJh>[UCM51*S6TT5A-OQHgX$PE_ks"MN81rJ%(g52VHR*TuK!mGlSl1+/q*mLR:WVL4A"Y
%d5Ymk1"?6$1SGuU75Ll2QWfZ'K.N<d\OQmFp[DT"!4LmZ"!X!1R_0[2o>T.9)CP+AIl5G'RcP_JF8,0%2<!u^gq@=onBZ-Q]5ja.
%5`P<OPr<ilRdT)uVuEW`A2n3^V0]1_(0t)2LfY3J?(?][*n?_S^tR>,XONPTAj>Roin\.tW8@GR,/o%].$n[XG7V##71E"h9U(\$
%VT4]&5L1%0s3/b(cuq/U*rE&2]=h6T!ncD<U?HX,$nVuFPise_VZ&74B)h-!XT.s>DAF[FO8kXKr13sbhQ>BZ2i!B^(0R.<pS)^,
%OtC>D[P4mOqmu9-CbBWCk*6n0oX/+68G^$YnSdm]Mn:_^>%XCgr@DMH`[eCFGm-DZA5@l*`E)<1r>`4kUg%Y*a1\$=mGr"(.kg%4
%Vhn7qQp6I4RD6a()0uFB[u"3W,O1PpUgX.Q`J"9a@W#84QR!6iBrqWn:U(s0<T)k@D/_kEY-;K+\\oFSC/_m<gFbE\qW3nh\(bZl
%gG+-ee#%!#@oV3j]P?OV:o.1\Ub`=629Oa]@9C'HM[@2miWZg7e`ni:G2'-*]%=f"Y0cXFEdQnc0C%'d'+L#GgPQLe=6m<[j^+/r
%`K733e_7DN.nIr/b`t9'UK4p(c#K$CS42iB=,_OX,jW4qn)[;*XlQFf[UH=EDF^7&\(9cpe""sQ0;1rJEVt!jK?*R?:p!@7rt>k#
%o_AZj#+k/7m_udlF.L62EFmU_:6a]*Q)F4PNIPCLg8UR5*S<s<(erW*bs0D-rIHcQ/n_X,Fed6S;=5S']9h9Nep?GQ>.rMaEK9TZ
%+o`lp;_Mn6Sae\QSEB<38.+[3)0J^g"QZW.m6u\AII3=*3pcKcD8MO=?'oF=>4!K5eUH;+/uSa9`]l\i[uSW(]r9bjGLN8Y@kr)F
%a[Y%TJ[PK93c-iq]B?_XhP%hk=SahRo]X;.VD:@l5"@#IT1ZfJVCRB)q_qs$#q`2>`&)F(lM,?^YPVnd>&HFu1TFe:3g!g`er4Y*
%?Dhq3b1(Ltr1K/-O6Y'64[K.;53csL]);/5JXj+'DH4i%+N6T]]u:"':eVlcEmr2NH+iFs=^c*P?a%MKpGV<pRcr?8g[qjiQCGQk
%N_ZG+c$19m,(]?0BcZUT4-c/QX_NGN6%WFT[%K>5DXGd6.Ij0#8<8bFHP[!T,-*d-R!A.'N4$QUWD*q"n!=!TO`kcTd?LH:Md*hF
%T1-_>jXfB&AkHrE1Rc)03[[_q(2pe3<g@PRW[HCYEl,Mg;/93VRe7aO]ucCONJ9rl>:QPc/fbVOeF5`l-sPBn+!9,6:6:A,;e^BS
%;0<".k8q?Po`fo,.;>7W[%R3Z<p?66HrHAAbuVt.Ej[6XZH>(fI=?J[<GVPf`mHur&$T4f7q2?&p8VOaA3A5P!-D"j[a)g9`-!c"
%Fi@JV"rPOo[QB?tp'96'EDa&pP^7^Y,9O9)2ZE3JnA+#`%lB'qmL8^;+VD)d]DiNLK@X+pN/W&(d2;$bO$9&60J;2'_pkK-poS\'
%O6&DO2^cLHkAXW<rD:kDB[n7ld-4"Oc8uk*l/AMqZWd6^Y2nr,G'kh%HMuX4S83qF#Akhi%2eP?o<9\*"SD;uFgT[]DWN\uEW5Z$
%@%h9C&2@@"`'ZEC0HshG]batn;6AFu6Z3f@?4muZDr3`mSE1^Oc<7W!I%2#%GZ]opCOZJtEj#A>;]fi4mmb7L==SG,cD7:1N4NA(
%?c:!XdG1\"]"NF(.V%ut->5Ab>VoOL1fNe)[d@g^`,WJYI22/7Q(prj,],R,9&&`nC3S>s;^4/</H8$qDiMCrC9"o*!lrN?_*op\
%S<BXEJm-\C7"Y4qBd.Q?]QrJsd^[nDCF_9FB\h':EVY3_r;^HT&WRI.<c^bqEhs913h6Y?%K2b@9Srk(*'V,q>?uZ#10@14P.tbA
%iHFCgJ=Eg_H3Ld\7buciF-Op2P%PgbB@NbfEm*$RXaZP6&2r;Y2K^<e+2![+>HW2@NDr]fW(Ei9UhfG8;fUJScns.G84HV)/o07A
%k$+Ap.;Is1)f]E3A!6SaXj2ENeC3AgXLF1n36tBJP.qt=<MMMjC`4*Jj2[P/BNI+io89)^/+%ZEa!Jr%)HE6^96$@<okO/!Kt;Mq
%FCFi_42Z':L6lb--!%tXc)")Oc+6I,\eK_+R4rQ=0J7'4(uMCe;A.,VmY,,;pcW_\+^T8I%)/`=V:00deHWTcNRX`(g3'd@]dr9"
%Z$TI<F>(8A5ug5f2-79Tl2/&lYqBcHkY0]&1:0eXP+f.pP#6=Ch!F.'oddPE1hq5p>N]9^_sP&6UP'u];7G)Pm1)+'7Q!3+6"RaB
%9f"gZ_s;8e/(h,&a*+Z%+Z(Ile%B.s\r#t"aTb9,3GR20/X$n_?$9Cb(%pM6C!uk+3uU-9:c!S8n,L"j+8"*[0)VDTSTC75l!Da/
%jBU.A)Ck9UH)*pg>M;nYGulgKJTppkn<fIGmGnXY[b@"i3"EF]??Z;&U>!rU%iOYWKa'kEF>niji+C%.B&tdYO[dLJcopi[37kUo
%CaQER9:B.#5?&Q4(,bh5^RricMiMiD/Md:*\Nf6MhsKe00q\?l]#[W^OC"i#J"m]MC'9Hqf";F7GU.9T<uO:U<P[%KXkmc$n-tiX
%Kt+g6d-D_g2taZIf)C]p]2@`N8kje:M\Coek\6r"L";S@2leFV0MH'sDi&gX_d-+&82$!PSEja$IDdLp@B/pi1<^H)k-4lp^jkbb
%+,[8l.OW0iVlb9Yc]Z#mao)l_I[$MA??Su2L[30gCBG`S;)f5u7qn)`l`[0rj1VBK'Ar@ODAm`R-b1&d2G&_k6",U)f_)D7$3cmm
%#9o\5RTjJ)VAh6R*Xo$T(QP\HNX&bc1!9U591^CUE8#4M29WCRbX8Peb'GOP[:?gVJQIOg/t?WW4>&9Y_`8Q)oXODG3"WC@;?q!l
%D:NFD6&\d:ii/`$gLdA6+B&!8eN)AZ't)HA),I6gSG[VSQ!Ys-:l;itRTS$?32oC>(td6to14t+%\l'm,$nY%`!:;/WASYQmrWK$
%1K%e?]=_r;>:CG,_4smfCAiFscHP@`7['K,;W#V8Y5JZp4[_X/]=@79bINQO'ZuE0LXDRAB^R[6;ig440bF4\W3K>KTi!nS,r5#R
%87h5s_rIJT;GlD?Ip/T]h9h"#%`b(id'IabbDe-aV+Wh1-k$87G)seZmIH=:e,;dlFHDl1QZ$u%,0oR4bJbY0hX'WeJsDJ=W7G1t
%$H_I>7[!ih7u-Ib_#GqEgR!gr5+s-&qK$jX]IFJ4JZ'MUfF'7Im.hfkc($!F`S<0u%V;2unR0+%H=4:YM=c]:2G$ENHsDG<QjVqc
%:jtrlBt(9\R;TC!\q2Ord3N+cTri.4f"B4s8Ak^<1>+j0CXHLolo@$OY)sq\/4XkQ:'FgAKS+MEg!0J<)DuTW'd+tY2fm?%kIFs$
%(P<9?jXu"HpWbTkP,O\mO`H8/l+^Ng2_a`^<^51_PrqPb(P0?M/6IW8H;^n'F1%n;bA#,o@ZDd1#&)HaF1i=nW^OB9V[8T/os45e
%JM]Bu,N98dg0MA%V?Llq9,oEP#EtS+I"Y"<>'9-j>u7YmlSm/Z/inKeG`J&^8uL7Sb1f'uL"Rc9coCQN$o^p"+#KcdrJq'(-sdc>
%*GBn@WF%Lp9dCRa/pFE-lZ?:N,aNZnC2=.kXd@e*I92=ZohGBQL=p7DeR^l4Vg-kudVqIYOnhdI7H7TJ%*mLq/_4B0[]mN\[2$1t
%12!Zc;ZEokAEVgIL"1C.m]Vl400Zl6m49"(3_p]mb9tP=cSobocJ;j2Q1NfnhOA-shX0F42btO1FIk%%s)J)#>,P`t2`Ih)_-PN0
%DAu'SoW<5@B\Z`pq3$63[^t,ZY'")R%r%K?Q0heH\CL1Wn`8BhmBoqAg0_$HH<_o\oCl&+c*^jU5SO!jc+D0ua/?W!\'IM+j3hD1
%dG""([e>'G$]i!UrQULHk?[U^rVemIVK?W:58lQ9*Bu[[hnK*^8)[i=s7YGToleNNf2g3U5HcY_o8SIPinaUrgsbOC9uH/%q3A+[
%FSts*?`^H]h_-&f:ODE*r^V%f7)%M.<Qsk!CTC8!^QX4^dG=IK-XU'Lf=gXLXm4K>i_o:5:18Y:G#K1H^0L'S1uYpSKuum(I6G&g
%l5Zt.(@KoN(5f:2^FlUihg_uC*q^U;If'':kt7dM5/Ua8KoP-[;jl>r*gZb"mEX>Fg6_!Q@f>_Yqb*K65Pg*$rHmG,Jbc^=kGL44
%j/oum]N/]HmPbn&]j,jH2u\&$oDOI#A%U*eCmbZDb@WM?V=_FtQ;5`?+8PAAUUj]7IorR@2IAY:>?ZuCFapkDHhagnGAVbDp%H"W
%`R%%.L!nO"n+L7@^%GrFokjBNZ?:9d1QVFCH'bu3fR%QVfCI%1kIkcmW#cc$k.N'pTPpmcLACZ=bL4<!lFkGH$QhHt`kr<oGSG$^
%dhkTiD`R`VKu][`lEA`^)_\#cqVoLr)9r"cD%Que2\mH!hH7-W:JMt1J_iOn?)`:"on@<?=YYoF;fq&6W)`A5Z@pQg'$RmVHY=-S
%%!->%98@oM`;6)chFI$=V/T9-[ST#6pu;0?\U=EPd5u[G3o%FGr_6g6]sq9-hQM?7qu1m:KVg1Z*tAeB5X0SFNuNl:_V:gV^9FqH
%qY'>r^%T]t\8pB7Ha:22r4o*aI/MOhpSt?;_I3Cjj$dBhqn\38dX:_AS5+I_639E'?9A15iQ9jFGM1DS0.=$+*;"\5*'E]_cYm^b
%E4(mc0B7KD<]nkq;:*TL.R.`sXPQ+F^90XK)4Q,Wfo-0:?WT0ZKHh!C(Q,?abOBoh*j0t&nRW"&4?;g&q4+Z.rMZ<+5:mj=2]6O7
%(YUBH2s63.j9rum_+/;?cBhO6al&##rOjo=S@dCE?U+5Wc8HHHo:%2C&fl@50sfQjVufiJLq4N!BQLZGf2#.#])G=`c!J6dBY>A!
%LYZV9[f_9_rcDXanL,B"/`Bk)@\'AF*5&@*&@6X%QAXE=c:4q&Rqh>^IdiDTGW%+jHKr.*O$:85c2$2lb%AcoBIu>qqA$Cmd]Lp2
%.`\"t-.aer907'[pZ0S3D\m]Md_i9U#K:VpC84mL^24Sp:>as&0jZCV"11!&>Hb-QHV=@9_VXhIIHpP%?I<!05#n\*^3"c&R7HR[
%SI/$FGl.JCbgC-Z(S;6)c*`a*n%nJ-QB%KaGD.u"/)A$bpBl6PTBa8%qU-j7[o=tfR^>BH\Zo=#RqpV6=.bq&)QWnJpRnT0$cs0D
%FdpBJIq.oopNNUt)>Y'R4kK:$BS"S1\H]n%KpAe.1%F_TD7=3Pl^nO]?_=O&?c0b4[FJpUH"upC/b+J\HU[O9s0/`b5B,%X\M8=I
%5oOO0b47^+17_5`ITV$(Zek?Q(ZjDkoA6B&j2G85KDne$)DB<L62l30iDE-q]mi_[nsU%E:Q!p0e*'NLWoo;NPP)HK2u7;Rgm(X7
%HTZoh,bqb+WSNb$qWh?WR]+5C2,1AA[*f3=Bc<i,0sp$i4eA9G956Jm-EN4tTgeH-Z;VeWbF1*P$VZQ"qr2>:IJB%i71[_U]rFh_
%`fo5+HD5P3hV220<c=SVIm+V>e)^>f^9#9Y\b]Jk"?FnkpKtn7HmtkHMeNB6C\7T)lt$U]6op<MlY1`QZrGTTe)U5%##7S?V>h7*
%@J%Cck8/-cDR*LTmm6r1LK)"ur"HTVGB3e2>_3n:Df+h;9(D$@H1;D-c)C5smIF](-_fuHNCTQj,D`dDFb].S%<%atW<nbC#+))^
%X).R[j+1>fT$7'1Z-Z3kAV4&7a+kh74WVNjP#7I#DP.(P<I(`cl>Fu,B92p^Uu>7%0:UEE/\1hePL/@3qEI;9^)"+b3AdUIbWbL_
%`..<CYS#RSrBCL/_?YdI[kF2>C\OS+Z3-+=?%.H\-:uOImEMgf5:ga0HB<na1SUZ++P$OYmZ9V23a6rTqp!6/mE=JB7cj"64csTM
%NoB\T0/e#r?"Dn7Rldk*"t^m&C?]8Cre]il]3FlVUdB"8*]%];]tHWHY+PF^5*fNfpg2IZ<'6*HHd1!agA[Ga&X;&H>/M>MAq<[7
%j]=qME-:F2Ao%1nLVM/b,")$?H_[lkn?D+.>"b;uBblb)9$r9NB;s%m$InZrR%B;ccMe)m2![og/BE9o!?BZL>K<JHSK$M#6f"&3
%%q"c';8C&A5`m\fIf+,CQOK/f.o?8BnWL_/M:KEF;4"LI0rtU2j=b/F"V]DWSS.4/hV:7mC=E(C7FlG,UIp<QEJ=_QgTe`jm#TSQ
%U3E5AQp3(7?MjAfq"jFA*imH'o;AHMii$rtKsCZ_pEEtuqW=-nPCqhF_c'W5BKl%Ff!c.s4)\F:g(Tk]Ni">;aQAR/II)4i&it8@
%XEu=efJ]C:;Y/iE;PTf2e$HXudFmhc\3DJ8f4+2_qtHj>>ZbuP%?A&KJISr3?SS%JL&Ll%!d-a'DH?J&lr\%ADM?6'4a7OcH(?rs
%3!ZOGB=HJgs1#I1.m?(S;;cMe2Ok!g.%\+W+@B`7fLZ?[)0WoaigKK'<r,18o>YgY;)`GocNc"8YIM-SnOGb\`S^Uaq8)ICNFj9n
%C#'4;J`,/>SVNg=^U!gNpj..$f:)`dGbp_[s)>I:qUPRLR,mcJn%RK?Qs9:ns/^^WCM^KOor$W:W&$8Q9V+VXs6?RtRKPE*f/fJO
%2pV!;G>EI<($!EY<u?JR`c8N&V%(/f/j:dHrM!^Q^?OJm\;*je$K9-cV<!C6kBjpD&8Q,mENSj0o4OO'jqf%I?15i7>-'VR>jZBG
%*mWY(`Eqr>eY=eB[<JejmOb%`m+4cHL>Nj(2-t^Vea[IToXseRX2;78G]RZ\Yr#0'H!n!qA8HOFHRof_B6+e6gSph9E\c3H!\u*<
%Z$!]clde1A5:h4,V./K^qTt<A]E-`rYA]OWO3-$4T<>r-F-C/k\Fg26@/e&]YOLP(=d?UHo\rlY<,I;H0ac5):?MHfUU:$e[Kre-
%eucu<E>XM@mG0"23Vn%T;FgCrpL1=uh_Sunr?ghS1l]`Tl:pbnj7(7J:UL%`>AN,S?fht5G+)e\nR1h2>rmp`$SppVj65IBg7W&q
%r;..spe$3XT0Rtuhn<jp&'As-lEAn\dDhNDUI3I3<ks'Bk;Oju`ZG@s/ppBpn6I15JXYK1]sdduc+VP+U\:\N^3uV,]RI)3;V4'5
%fEC$cIJVVMSse,hY/#jDH1\>JokF:(1lsk<6G.VeJ(4%AK6qh92\0iaqbT>N,:h>t4,]ruF7XISnt]N@eVfX'B7q/]mjlG&p.n3&
%lB#-(lY\79n;_X:L\kg.(;Hra^!l9n;fC,BTA9!`gRBl(Ms`l[C#HJt[u@Fb:KQ'`M9'8Cm`TOha31mfY@!Hq[oh96I<bHneE-th
%\I17=b3.?R5;$aEp4<7DZEc:9A0q(-J&ZrHj]<f[[>i/V8!DT$CDQX"c-K0)]a+;ZmT[PEcJd4=0$0EGVkW$1n_QK9J$o:LaUj'&
%fLP,U-W6qYn'Ok5IFlt<23a6$'7P^o[2_CKE=[==e/+_NB_2,-eP^hM9bh2]O^E"`.NRu-D6;E=^Z,rU4$//Yj/pl\7,kfZmd7A2
%mI96-6aO#']^]HJV:aALEj`@+\[B^\fE[1</,5a;Y=cjof7t:eUY`\X,7VD1mN7NCnE!$2Fh7/ELGjrDM&+)1r$,K2/aLNEL+86+
%H1iX;$-rqt#6d?I@t!pPFSr]X+Y?qdXnUN9c1Ss:PKid.PJ(UQ*gp5dnDRMYFHaRoDej8%[`Y)?V4P+8ilef\?X%sqSZE"^c69eT
%7ng6tbs1.`,$`hbc+7!(rrttrI9M-R=Es0sI0OugrSu%UjL/maRN#PBpg4\pI(Ql]p@t;a%K>",hCn!bW_7-NYJ-QARQLK2_#&Pd
%\ZS7X$/L%`=9q>0)^Gq!Y2Fd-iG%rGCOFp"US#W6SUThVQYs:>GdP#d3e->\)oBZ,hi!Jba6n5KH2Tg]Za5^o5cpDp`:TS3Ur+38
%/0,gSa<!0u)]C/CF[(A(H?\u3Mm^jt0>5eRX-4WV[irl@PBd:dhJ]P=5I"-BMX;?r$pNIUU3^\5H2k!Y=ROjVl076?&a:=0-_B)8
%gQ10$gm--pXm.tbTRVJr]Iu^S?XQFs(K)2,#ntu&k2lcTZgs-@V5N2X4(ckeC])<-g?R_lD4N(bm>1bA51C(jkUq>V*ku\Q$LZ?#
%f3fKYLhX@60D3McFYH]arP#hugo._WRX-DI5N9?D(]=5uRrf/_FpkFhn_=;sd-8:N/fJ5[PUb^(q;m3&ZM!/4X\:!%JGnbN/g>ha
%Df>9(S.D%l_g8WaRS`=NYu1>DED()ng>Cr1M_-?'Sm^$r%r6:t5K51n_P?99T5+["@d%m<m]YGT91&kN4[^Xp#CWh:^#c*NeP<DO
%h,j.;ft:1`f@sYfm!K8k1f8_/EFc0-fCaJJUaJA@lK&:+NS=a4(koZSG-A9_o=Z%m:hT`;f`Uf"Vn'96q;(pAQHlVXk!lTLCfgf8
%rbQMBc0:MR`k?_0h1,#o'kr>%n<3S@7\27Qdp/V\XM!:ifX\a^BD?'&Z?D:9&j<t=6W7pc7nl_,,dY6i>HMhhlO*LXB_rSZ+DCTJ
%qQ#VF.gq_ua5)ebasb(eZ)^B9YNJ-cJpI$nG'eL7l+1l8c,9BFNu4`q?h<0IC_VK!h&ZX^9:L"KQenm7D]7GsB_bteG.fi<:]:'8
%K@NWWcqc.=+RAA1Jtr$r-6\cTIXGFM7S7(3=?5e>SRG"CH;JpdogiQ9N&gBJHoJrk;TAGi2qLe1g%Y@KeZ7*MA':68!`m02_P)/h
%.4M;N$i>itF>kQXRKM"mNc%hm^E45CV>TdY'tkb9,PfiJMU#A4lFhW;q/,%S=b!l/qPj<Q9X*F+<aXTg8hXMPrgq'!LV#iJgFV7:
%=BkV!L,;g.on$U(I]j=3s*."BppaV^X1Rg)=E=69>'KuEn"giHD8Q;,`V(_J)CGRPIe4-\qb=Tfp2@-!.\4*+n#MBF5AK'8mgh=t
%9R?2VF*4g`O>>cp$(Hh*PN$:^ATR4p>BmO;s'F\q"Brq1Faq0[>(s!5^@PnbonY5%X-J<KX8HA7=C3foT"b7"^.EOt/#N;1C%CQ4
%;1J3'kPcnc3:=-C[+&>CE;23\$TIho"*,X,&!u/#mD#&>1lkDC$(i.Rnr)%+WMnoq%#k(Lo\(sH3l;JPM8d0rVnX]THWN1Oiub);
%(S7aWgSW4Sh@6tTERJ4OOj%PZh1Dp.Wi\9Zq7MUZ<t@n6C(DhqM]Z7>$c1g<`k,<iDO>/P4mA]iO"X&'IN,(m'e>!/(XEY:4o'Vl
%YQi\NqKJ);dAN9#]@Jp.\.:O4h;-il>IBGDmn_gPmofK@UA\0^c-E5*MV2farc-oTS+F=YejdWJGDe-;kA,Nflh(;um)*`-f;&ee
%gq6EbIHTY1dYHbVke+6g1_cm:=Ze,QPe%C<mk;gZ*g$Uh8(Q:l3B1G&b(E3WS"o)O8#=P>&%=E<9*SksT4CdYU+u#dl_eOKV:&Cm
%rS<PR?s'W4\@josU);g+G!@UfZm-FWTR.!+W51rG2i\A+gltMC9`5RG`3Uq?\moBqa,o+1Ce<ANFjN@Z]M\\)D6_H8EbfmjleH+\
%7.Ee3q5n-O?!oeiiKoh3SS*<+o(t@9[$t`-l&LF9MJkU9i#mdR2bu7-U&4Z!jkHC`AM(IOiPNUXKoi6O@?G6fTY"'Hr/?AVF0C!>
%I'`A-:3c=>Q8G`2)1;;V085&-8e8!#Iuf(P*nFJmOH\GX]Zk>s`!&0]`'&BF2uK[l^R<SsnGU14:&7[ip@hg\,qFh"GSo>$G/K$7
%oH?]"`ZohWW1[2'ge?QYs-"Wg[H:W*gWNZ%r?V+sIWN$L4Nl^,.i1<+gb8[F^$O?t[<=\_S?"tuIWk*_4@>`T\Vh!3?oPi7+,f+0
%%.[sO;geoWs7O:"Ba$NrBMctXFSk:2s-r'"3HIBnh;jcm"cY":rFW)u-R5`(WO6Qm32G\TP58`lkTN.7_quS_rtcGJBZFIAqO'#-
%r6,t9iYp?FrO@F@o&mH/-"pLu1\e/Lg$s"\fDk7<*qXaFD(N;P"c&BcqY2Hl5.<ouRT`WRn1<I:eRsY(0CO[>DTR+(HtXH_<Y0r[
%cnHIAg2>bhC""n1i9+t+AY>Z>>_@U+cf<BEeD8=&!R6?&)GWIMHuBkejoa(U!VQ&eC&)if1fEP,!!RJY*o4(5j9%UT!=JFYj4LmL
%oeikaiUVf-R<OV:b*aRcB:J,NdZ64!JHG*K=OPej_,0d3be2o&Y,oX<R;r]kAUtUK0_DlYm<Ch'(Zp/'F(AUDH3Crug@T3u86Umb
%3]JiUaI@bDns]NmYba!i2rq]c3KmN3aCAHL_A<[%F#[dg-RP;";0eaEC?N>qi_JQp8#,gKR<O(s%m>oM'T7YP;;,>lTW1Y:h^,@a
%:<7Wj%_?EdpMQEhhD`\UQL)/8!naZm"b8.cU$:VicgtZdTkB/&;;l/>g3G40L'2NKhM@YF!nn:`.P.=;#[GQ4YEq;[Jd7V+dhQ:?
%T`Wm18IK\m2isWD,X193\Qh)^dd?UB(j9<06>X6po6[V;b4C#M7VIj^cLbf+(*APUd-_3=ENlm8pK\l!%qq@pTfa`\)An$H+Y]^?
%GRQEG05nt23n/3V!Gt)9<l;?D+Xl/K!1[Z"935o0X0mK8VWZDk3h@I<#i90>6p[,oFjc3QFl5X\NVM^S\gTUVdg&VC=JZbp9db&T
%Y*PDu%8Vcjdfp;<^p8ge&D`]p*O&t+3f&eGn-is.Y=k?C6XQJ(V'R(@.4arY,"q7&0A-d@#G"\aTh?((&0i\=Y!H;;Vd1&MY!IgD
%l5O_sf0Fh-$7%DoiNY"To7j@#F)>M7:;#U$"C`V8e@Q>bR[3<m,>RC4Y+1g>JKGLO\BLpM#VjTNnqOd)WB.1B0LlJ-=/,AQ'itOk
%A-uP'ZaPl.1q_H+UHaZ=#mi.d&P4+>K>?T$V%jQ)"%lY[5_%6SD)@@NKXU%Np"4PRja[iKLm]tZ=UKshH&equMUr;'J_4iG.'3Y(
%c6AB\b#G`]3Z<c=`8k`u8$qk?.%61=Z7K0Xa:7D38ESuh)3EWoYojt;[&>M20e3Fkl*qcVZ:4NPZ*;)KHs1n-+P5Z8)4hD6AHd?[
%?jK.7$$"%m')C3-6VZPWFHO3IaKNC`LqLTT(Mqj7oF(honVJ*-4q($>&JX4VTIE^2(`\Q$/ktK^3Ll:I5T`O7C451ArHdJ@W^D]J
%e%k4Qn?YY7&9`k0q]H]u_GN@k!]_OM/W4]ids%T<EtNOqB#+-FWGdr'_T-<!gm:Ra0KeUc5sN2&`.AYd\@-)Z)VA)H^8@h^!Wii$
%P$(0SIpsQ*'N4[`8UO=<apj=q/HprTI_43&IsspZ(!uTk8)udP[L`ol%PmZJ"?Wu3d"FojfcjFbTVU*u^g\LpOJN4$qVXUS0bb!c
%:EZ,l^0nCM(cF[RAH8DH0CTEJ!YJuU,9i4FdLqoa#"3UJW#L6k##PsuM,l4V#V?R%-.%[6Qpc&sO@q>D,SgTkc9N'RlpOeu5V7Tk
%MacWf/s1o6q?Z=H(rWq;V1^JE1C!\`6DTm)Jh/%6GMs,AUAG,8[),WtAd,PdO9I4CY)q""=P<Dh_nH=a+]/dN.sWdq,3hWL$VD.B
%,qY,&&;TYkLWoriB4uV*S.$>LI"Y*VA105o5(8gBk\<I4!6FZjJr(q2Y$='1Al$dk(NgDY7/l5ZHkP!IhcEHlo6+dSWR+Pud(rn5
%LY.f/nq%n:o&TGfcu="M2LCFp@VCS'_ZGXj$L<SP&tgCfEoOc`BRk1EGb[J/,t?j=!"s(@FdOo1p=VVd%%r\laTuFHYj-'<U<<iP
%Jmko<J(bZ\hDW/=9TrF-0F`aLES)$c-G@20mVG5KB.PrDeM]a4#YZbH.sF?`*cXK%$sF\=`-#T!M_N-BJNT6m8R<AJ`5I)QbSJ8t
%Bu>D8<38O*fM[9Zk'L[<XTT@-a]:nD`p,OVJI?$KoTa*"8g<ZK%$`D7+FL]O&Df]gG530\k`ZPf(,8h80u3^DZ&"Xk5]e^lZJ7Bm
%Jj2M\dr;CC/HoZ!MkQ?[)hXesO\JAJjUF$l>Dh)NL3#K:1>&]GVu"%c)%o])5_Hj?6TS>5`<gNYdRu\,Z'BuJ=C?.7,>n(OFQ"p0
%2("d1KhQ@)Nno4CRM]e6a=af?XHD2N%KZh<QL$Sb&e^@]R+$gH7B>&'<?T"%3_[Ab(i#07'G>oDL=8HQ]K0"D:`h=C`ju%S,Ei.G
%34'!R/2W>OR2R>W"'EYlaN78C%$&D4#+=OK3h6Ci#/C\Bfhf$d-?(``E'?p'8.;*rHjK"j@X8%^.34"]KZ&8*PASLfZP>D![>=+9
%M(Ag`I^-;]5tP:"j0fF31IIjhULphP:\Ytu4nrlMUC^A.]bnN+Y-dD+a>,H'#f)X+3<4F!4@L,7r<:/,P`gQHKYZ#$Zp`4TjWK8o
%nHJ@q%i7!(_&FPGPA+N'7@)/6:MWLJ'9S"->fJ,g(5gA2bmQaums9SklsBe7--]<<Cr5MW+>7=/*lK'U$W?u'(EY.^,r2Co!)mPB
%,^_e/$d`E%7#D3rkF6UYWAjm#8/O]U+tTAf@ZNqb%2C$8lcQ\*:lo/QKXMUW1;lguZGR1?_<oVUI19?jXdUfXponQr@''Z/.kg%g
%%&L)TTs-gJ#L/1V5pi/9\2,t?'.WFB%S'4KB:MZYNBrM*V"V#g-Z)BWD"43q_keK(?4@f+0HDe%`ju%SUQGPAhA7i<UT'K<dMLi>
%F+DTkU:1;lWP"ogo3Tj.%2MP9Z-%!1+\?d!0f[Mb`N__(.BOXf@V4-:#:17jG_&-O3eX:5k`*3O:hZX?)VU'cqa;H$.^W=nU`rj!
%E\8`a*,u\a=>'O(3.Xnr_tp089VLsHfWHA,9l[`mcR;0!AIM?l9EC50ggH(HimJV@0SPBH;EPWJc?+g]*u89cN"d0EC7Yqr&bnt-
%$poe<e!YG82eSV89OAkIakVG8LC\=\!0lu:FdOJ<&)niQK[Qg-/O8;f[MpoA0ESMh#/MXfF>Hb;+V^!J@Ld>^DCale)q6)!S5<0S
%]$XXSKi[Jc6Vmk'>GsAfAt!PM"bD=J#,*Zr2j!i_f]?q6fS8$MHp4@Z"a2R*[G[#IJ#'EX6tcuqM8,5I0D>cN2]/RlU$-A]=O2WH
%KZJ,)X=nLQ,e`Lt)%#grh\$Xr`3',H39!=A(s!mh-q>I1:n_tBXD;6P)UM?!VfXIV8lo+]4JP.SK0-<FAu%EiQ9-db#"kfCJFV'p
%_;b+un+&Nq.V,!a=69[B:,rfVBFG#fZ[l59?TP9?qTR#JD\*8^Ku6gC@SJrRq\.s#6!JrR&/Z&%)1^-TUd:Y*WH&7G$j&dM8*-%e
%G7ZT%Jt.9jdQB4J[5%`9HH(tFOH8_"K*K%0580;0+ZQ/ge$alPYR-q+W0@Na>8//uPt=T7(b5J"I)(^jT'jo[A-e@%0`M?n#5itU
%JkJL$7_18@,Ba8#6<S5+N"2EjN[9@e.j;ZE0d8d8$AP3MAIV[Oag);>$*6GW\nr2-Z!cG!D#9?4:?ul[4pc't4WK3n]dkupK#1PJ
%#kbH/\EC??cXb"g7t1g,Od7*\?TNS209E>ukhS.+9/`TC#PoWRZ:SI^I*[t!*\f+u6-L1K?pIE?B@1@UrXlqG6VpET=?DQ/&r8AV
%_]&Tl!UbfpV*ci^>qfM#5aUt6G[J.8H".E3MeEfb/8YZ-p-U\W1OAE=Ol>qX3<0JE8`W3JLX_>4'(Kjk"QG%6a9T-e.$PSCqC$[h
%oir>(0:jng?YE(\KJ19OHjsgX@kd_5D&)c`Z2!\`kHfs7Z7^oD_O]#"@32*ph$_&'!9MQX5b`M^*8&rBKA`(Sea]P6=6L`iKWO'X
%E,%[Od<6.T\1c6i#@c7&qF\fZL.ai/]I>ZO+/(StH8+MWn/;aY\0[:++MK]CVDL\l&oT4MI>RqW@f[6TKa)3*>N?+?JD3AP\leWA
%AJ5`3c8u=(TPQ(U.I_;[YhG=3G$FlFn6lh/g#iK.GX-"NkaVP_'Qt_n>4tn,&tC'SA4mQV!7WBFcS7oO2L_0P6(H9k7CCX<#+8>S
%a9e?E%S=%gH'%K$+IpQ<SJ.6HAR(je(aaVJglO\f[dD&4bdsLhI62G'HAGH4mq(Jafl,f2jKu18*M`c2N)D)=CcD]gPAmU=aTHmB
%l)`,KK6U]q3@D1g6raF2N?6^k;\a0$0pp>[GsQNl>4[Q4ZaZ/e$W/Pj1dW4%56)t7%,508a^G?WnLG]q=HLAm!0dc)[$4@?oRAba
%kdo\c(DSub"uo*iZc\SqLi37o*lgNEB]pg'91B]!g0e?floKjB&fT2LM+8\A@2#+N.5\7S4b*dAfGGc(+BB9TSn"F-Bqp\2]PHHF
%8-*.cPXk@X''V,0VMch>b1**"?^l16&*X<)*9nZ@cQH%TP<ru"kbd'QE)_F?C\,Ogmd!H?8oGQF31Dg2$I\*3TudA"iR2S5g[@#j
%:;Sd4iK+QnK8gOXkYP:]m5WT\C5d+a$c!oj%M0+D$\h(87K$,$;^h1>I,G-bDQGf8#uSR$(aV^EW#-W^>g`tL=RdRHB,/5A!5!>4
%j,"U/F"Jn!<ONa=BOHl>KQs#kNYE6Zbo"U0R=&EDhuL,E@o,T.44>-^kD*kto3_S(-j(3-d&6MaM8KtQ&f]Tb__JZl,AJ!H=KB76
%)*=)B_l5%5FBaO+EFC79rqrm)K<7a)`2nb2`&_BqNlEk7M^=,;c;b>uXi>pWXb/0EcrL90@]1I/H#5OZXcYW?bo;;FY8_+OV%$#m
%qNa?">RJpB9qfZ1PMsr,SD3LT7Q?#['Zhe?`;:K71kZ/U`e%PDL60V5`61=Eoa0#U2$N7FkHJqiS80%CD'180!ekR16Mq11;$I'S
%aZdofCrXANK2=37OXoQ76Oi+R>+m-VcHbI#Wt)G`.ncR(/<[a[Jq5W@,DON^L1K!TU53,i2+]m@7+_(\B]AUogmF2qBo/W3;XML`
%$BT,0]+]oJ4?`bUn9,DbQ].V\@8n^R2H8E/[LNb^"r+Tkaqu=rKeA;QM`Ap'1qD9+Ok5!j"</9%j5r^3[?^>#GE;[!'ZrsUL[$jX
%!,4tBaA+nZ)H6li[Gg=#`8R<5)h[qZ/[65eL88[tm_Ec[8=N\5`X>Iq9=Ahh^Xq[^63(//dL;2C.2i75e_cMMX[L2S,\Jbb6XAdF
%=A\<kF>8RRd=g"k"LbL3W,,m$[UCWWiOgn.MDhc>i+h7f1NrAf+>UqCoAm]0W$?j&gJI6&dW(Ef'9Jr-Z?c`pg@<#-8.Mq@E;[dQ
%*12j[2e4BI6]'U'cj_7%b`L=W#)S=L=Q5<M8jiHPToL`re;"0a$lEE&4HSX/(l;<CKsGS7W72/PEYIp982.?I9Gm?T"*[AYa6p.u
%;)`nDV!?""%#1%#SoGLh7oC``_(ii(SL4Jh.0uhhOA-FQ9FO?t_$G,HE3qFp0W!7<&FLF9J9MF/%9"];nPC,LSMC4\98eSR2K3Q3
%f9tZ6a;]p9WL?/9-YLKj1\>2U(&;Ta'Hi+H&5mCIm#-M""GOHd9R7Z4[d5,k\tncC*^qdca<h:`5Ulek5oaY"Zh'IZ1U+sEi4^P$
%dQ+8NY;!Ti&Ft*SH(_>F[=uA'3#/rt+'I`?o>[G\X>s%K<)ABb<YTd<ajLLU-S>2-(;IRk-`S&?jTpt0EI8cuU)\mIF:r\LNt?>V
%?*Mdu\LSYOE@a8,6>"7Z>XRVLF7Ngk1E:r1&p2'G?\<oe9+@:<d3`"kBuik<Y#PO7"tK^c$U0!iN"Q]YdDQp@)UoGPRl6f$8>K"M
%2[8d]3m)Ei)L>isl,0?jFC#Cp02NT?hStBM?73i=Sf8.nm"Q#4r(j.o@BlOB_L'.A3XA/\LngKD&;Mep*E1Bo[tX/gGUiq)UXh>T
%]HB'u2L);+qQ`gZ'$!NO!LnmtI=2)^?abeJ`.9#gPmA#ZFH@`H1u'm@)X;X1+O<M/k^e?hg8m#"h&,<@Bam)_Re*H9#n%RN^^#th
%3\W4/M1@rt[OY#g+NIkaedg^<_`PmO)]K1GTbYpO4C(LhiO%k:!GIPtPcWph'XC=?B*^IFLI^.nFV&@3;'OjC$`&O44W?((e0`_`
%&V4`pik!N'Xot<k-r[(%WU%Hii`jjo<M5^bg\ei1BkXM?"Dp+-Us5r+irs28-/1Dghs2Lhls&g1A2nf>61PrqK;2V?*@q>\J-I`Y
%`#V())\%KChGPgEFrL49RA"Zn%RN<K]ZJoK;"=gG]rdu=&:ht1j^K=5%GGtoIPX@u=ct>0X&92TfOa5#Su?V"(Li#o%55%>akMt;
%JC(&$,%g155._:^-(P(S8_AjoC#28?KJm`W;J_($GP-]f.,d9.HS'1Bl3W>30:k3Y+,!RUUO>[*Pbbfc<,ZYa`Q>a9[FPR8eYAUQ
%`.'o/WiptUnJ3l_,Nls%j;>f<8YES&f%`8sLRlgR."-026ck?6)dXW2P)\\S.Ze,i/pkgML7q5K:Ie&$qQ),&=^F-mZAEY7]gbo-
%a8g0Z[";#iL'H^dDFII3]F\?UTHK`$3s6#A*-r"K@K-q=g@CP?!'3O!U%5Kp!"RtAJX*gK`2(@E-Oa[Rl_m*t-V6S]J.MS"TOL^0
%1^OT&NFN\/(5]ice2`VqMM*]U9/I_fAt.7Uj;FmB.C*YU8l)!N,@O1/>T2OX;s/6nR`2-k<U*g-#`Ec`Zrtl-\MO_\2N+><8a9P!
%"WNgC;(r.)jVb!A0ea)KicQa[3"CMm:*Alc7+Ls-fQ3Ug+"\QaNRbt_1n^%C*U04B4%T[W/1,d!8TiJE9JW?j3)/*X%d%G7V''X#
%'UYsR*A$'_n34%:l5`hIn,aptdhKL!0aPcNWrt?d.W.qSUVV0tkt<4p_chlB<Z%Fp,AsNsJPtf)4%8.;:7?LWe.cQ(KD-gb'kJ:l
%.!Z"3FEcd5#$_`/+#ukeiY6<_=i)s86=o.[Fq"!('o-;@6Vi8RhPW^RfQ;^i7#kCNB(86,T%m=AQl+%)$>>uTJ!IorY+9Bl.*ACJ
%(d_)MiU..J<fYr^0*ZJL"37hqp*VQV)q^-H5/UL[?6=Sq^RiMkOhMd5gL9IN#f1GO-0P^jm!4AF$o.\dB$%G:bk:%I$q\Y)F2L'q
%\Vi]e$&;l_Hi+c`*X#HC^uU6NmSTf1nA,\eoSbI.Rs`593/D*9c7`WD^O#"`3F@TS4">'blf?80S?W[E365:TW1@9?iOSL=.7+tL
%hCUYj^q()!gcui&(P6@No"(4Q&[/6/5$Ea_6_8Jc?oXHP5(S\s#fu@:$Bae['XneAR8sr/Ug'Q/n.U)WEE=o*;Q,KYMFta?n^A?,
%$^4h(RpTAc:]SWK.dYLqmfJ%_CuC>*hj@%_\8c0ipLorZH:cT,]5T;^E(KJF(_T4L1snU$P(Kl'j'3'&a)>,eUg=aNo>[G\XI5\<
%l4#>A.CaI'`(@0B;^G9*o@fuJ_^A&A4>)2*:CprW=L&bYaOB8S.G+0Sj>Is64e/56#)8o_D!On.bVP@I%m+aj1`*H,e2+uVM"L0r
%Gn\Dj\Wl0)]';G7%d%s;ijKh\VUlsDi<E99kKK-ES@Z`oGS@"rJnQ`$*%C'D6.@u/54\m_l^.=CNJ36*Le&gj`W5EDjCo$<TNNZQ
%+)S(^U/.0WPEdG(V99t7jn3U0QQM^nEH6`M4PYWFlq!pAV>Y>u:qCm=KFogXYr'pA<m2.Kn\T$K4mTul<*I:q?iu(`hGXsf-Jd.Y
%'s>LdiDM@]974*sU=]VS=hQLTiY:V1#n";CiP>9)4pqF;[#dV:G\b5o`,J%IV+8+S6`*ZrNso!BSVoXP/H?TM#/$;",lS)\Jr?Q4
%(lQS`gEHAt-kRTb$Mks!2IIrih9`:9#[7Tj#3mqAesBZR;UW?L+PMAK%I7K)![fZaACmV"hcI'&=1R#2($6%m.Hqgsf?N/rQX?j-
%G%b1S-0***5OjuO3LD$jDshTtXP.&.nhSKX*A)6GFY#P(i[(<k%!Nj\=L*6=R-9)MP\gk&Z?K6kFVFf5H#3KQ/-oI%j^_5J9=Y(C
%(8;#ELu-97VBD(d]Ci<r,->euS;E7&B(mm[9M0G@+@:@?KuQAZUe7kQN2P#FnN+%[C;CY$?o:I<M,,U,8-1fdf5"?-&CKV&g)^Q*
%G"O\-e:q@)T\pWZ&Uk#jUuLqqAD63,AR&o030+/R*kJf<-cmr;%^<K?:t-)@g^2YC%HVOhj]Cae88;0oAsHV=*&Dra*(14.:$Ec:
%8/Mh[7C%[mms#2N!RA19KeTWB?1epW]>U&MJSa'A+5kodm%6F5@%f&3*r:a?VEbJVO?gM5EZ@1N")mm\9-tX/+s2O1ru%gR.'eL;
%q/DEBbitUM%d]KhF]!k)q/mh2N')S[4SnCdJ_CZg*$bkk5To<Hp[XUaP/8DBAJ_jlOP9&?NjBbG+CYH`hUll&L@c3fR=dV)2C$["
%TU!TiON`9sK[s43Y8c@0;?Sspf"p*IEW3h'9L8q6OU>5N+kEQ2`X1/dD+P#i*l)C_k7J]i*f8q/@%"Q[<0cG`ZGG"O*O7t!:cCS/
%']dFn$b^J?ADK3TEFY2Jk2:qQgincG#V'9J']_i%H`4+]qo4gk1f1h!XfknapIut@e.Yi!.1,59IX`f5E]Es@;QMYCV0EiU1:0_$
%'D_$q%^ID7UA$O/W\ttm[W91m4?PNDn?14sg]7s[,f:Pc)C#(&o^t4$:qRFCY?E^U9d`4e):QoG.nLlHG'gnb?h.;$PT`?JU+lY%
%lj?1r@p\:'4VArA^4L[jFC>O>6BVg+!Agb_<4P=#om@b$!",QE+3jsc-&^flTgBn-q62D$q1TjG2)meD)1u/hM.<.,/bP2SKEhPJ
%*DBq").hIC_%Se#:5*qgVZ\D`]-_DCKVaR=GR$)k'fl(&^gW>aH]Il#\1\1f8bBree`\,S*%_/ib`,H4&-8[9*E@n%B,*X#eY&F)
%_D"+-j*/2X_MMXDV,/hlok#hL!_2@q].b6raH=-\F"LC.Li%HM"YS4`'Zaq_i`_1RmA6eO0&4GR8uU"WM<-2d1/)JQ(m*;`U-L$>
%nZ7[D/fs(@!HmB#pB!j9O9rudKuGS)^-ZZhMT5n'V9OSFEVsVZepE4aXBJ\R`?o?7L]bPY>TB*J1otcW2%Ub$0KPG1NJ)F"SZI_u
%,#F=@Q:cDk'-_lt#3F*pLIEX+WDKHa8Jj`qf:WJGaI^_tKBGdZ,ISY!i?SPkJtNN,K0[_@o3\o.A3mQ8b\-(Y$l!X>&T&\77RRtQ
%:_X2]U5X&i0/,tb>;D$>;Cb>N`[g2SaW)]UJ=)S0Oq`"U\%c1lE7BaoS)ZI;JVp?3g5dP-"q8Un'LP2p"al&JC^Gp^>q)>-KS";+
%O84C,MAZOnK+SZ8n?tZHXdB]fiWd<l@B#e6W_<opFla&`lsjR>Z3mWJB?88EV6BFl<WG-7%\#.TM+:W;\D+RM?Dj.-<&#s!*SFd%
%7!2Ik6)M=lPur2MAQT>(6J0_/!bHnV+fhUqkoB8O8p<D7m:V=,&3Crl7?j."M;qG<V%,a")ESupS/(h1j&):IF$*pVU`[*m6O-Df
%*8U/KP.p>,E;I3WMK[X\nl)5k"@2Op$^f5iP[#hd@k&N9-fC+=Ug-6j*TM7r'^?hOM.^D)p_Hd2l0^$f,),"W7`rCU1QnheQ&IO"
%%?MF.dcai1k+ZlE^*]h*:is2c(BKX"BEWp=5YqN-P&(If,m0W*\1a6mMJ-gTh1khDP^.6;/tL[=Ln"c^+#A0Fr*IZj7E+2fVUE%B
%Ub]g\f+\4\?c&%?l-J4e&@j?lcl(T(StV&?E5_h.le%2V8N;hL+O@D4A4[X]V%ZJp70jtUP8Ak]XJ$6K]*<f,jDndDD"uoq%86N]
%=H?=uh,5YkBsoK.P$0O:?HEQ!+e+4Y]*]#n'^)/l6L7$$:P[P0rkQ;:6QG-t3&IFQ8se#g:sb:%1;FOi&n/</DHo12;cRe8LlSGU
%7\L1#_j7m/6q_2C7kR&sg4QHbYUjum*_YL-9X4+J%Fk_o1lN+DE%aVk?E>B+l"u9H_GIs-oQ:9YcL(:kE`!Xl`B;0\oXML]M8r/X
%5[CNLj_K<^%?e<;25'N'CLb>dFDXq#k>$c>3i98-=3fa>7l$S=d\bQfnab,edQO,Tlue12YV:P*c=M/-.i(]kU$uO1AA_0)5hU!Z
%9+rL@;YU6$qLWB7/`lBZk>8g447RlI@["Eo`l0tMljBPf!+^-o$hd>pCiVcMa&<K.!0=p8OBa7W:.<(Z,Ep"*m":V2&mV_QK*)D9
%b`YJ\AuIM)dm9W0U6U@\W:CKPQVhfTnNF3e!0G\l_f@b!(Ea1io;5t]$o_/b<\FbT+oib"#*5.!>b'833Xi?:Al!mB<Q#7]a@oX=
%<S0*]_UH^^[[9E3cNS;Z:T0SQF=\Em&%O<sVZ[f0C+eSe),10RQ.WBIA[=\M@XfLm2fX!IaP1-U.n#pBc$Zll(d9+c6D,"qQjOZ%
%j_?IHAd1q%P\q0uM-n!'j"NktO]3;l4p>.f@LuNfTJ5r&\VLGTL)#UpV3_bCO?7IOKL%.l,[nLJ@M$SdY`pgU9b]jRCDtj&P)Kh/
%)RQHg"9NO/<B$I,VQ-JsKL-[ccPFXD.04hEJ`=dr=)"X#=]hCdDt1h*/ps0Ufkq6m'e]oZ7.?;@'umI$Wk8fBKcFH$Q0)LD\fjmJ
%7epY41&U"1(/'OgcnOQnCmT8V>>#e>Xn[\XapB]1<KD3$crZGI"I*1b-?'W@LJ0*FIuE=JC_8qGG=6'M<PelXe)Z,/8-cJd0*27o
%R'o7_JR\(/8,/qC(<`Xtg\o)H.Z!II4=eCg_M7PRcMcj\'jM>Y989/8#U:S(D9RW/#u4$EblT+"[<S>jB##D)$T.iufQ#[tIa%k9
%-j_naZ98=N_gHu)1G.2X&ZZ4Kf!r9uJ3mK\\7+7p*8bScZX45o`=[I1:?S,d#EHGn[/3>:ic+-%'o]8l"NhI+^mmD6^uPJ$WVh<X
%Gj3#ZQOGBf@ZW)%.u/'\LFEiYi\RUk(,B#\BnI"Z:8E8e;B5oV$iKqf!J-pOJAU3GpktiG7k*W0]UE6;*I%e$d4?-fW,Oa8J79Ep
%)VIpj=-\DA^5<#hO5n"cB2b9lX(3B*^kC/*n3%OuZsb?A=+j'._?ko:/&#d;8im03?cKs#8J7Qo%@ObJJe#(c(_glj\V>X%ll^rP
%O]/FA"@PfupA%(n0O8i#0ecE1&DIgnOlo-H'C5;t$q?bbP"LBp#HH?O>fn4D,,-&Y%fnU#:FuCYm+@+]oku0Y:DG-_VTm4bE8L(c
%&m107NIR:Qe;&$+caFhTU>qUqpl\VBJhPFb^18Lk<3hFFL4&Il'mE2b@:;.Q;32pOA0(?j"[IL$S`?Q<F06L;SLH(J7&q[FW)0K$
%<l>^2r@jJ,f,VF34k5X0bDr70okOgJq<B[tn;+u.%@&O-#gTC^ZtQD<o,HuT0L,djZcOPkA#hk`X^9<U.eYYH,-[:\_jCbl4)dPQ
%C9GrdOgp[s_AA-hA.RW6TgEKHhLQ"2fV?aSO:(r3;U1e>"62r4qS_0SX7qS*mB?3@END4j"Tpa;UEL7NU'uQE"sLW#Y5!iY8bQPR
%UrK)jDs2q\Wb2ThU=L=Q$^hUL=_XfK8(b7$@0)6-<jKEBEoRdTc&FI-PQX%%E#o4\jf`f,K_$_o36M"@l3gsPfE0]ob63-/\(>:G
%=f*[WiSmigr,_4>`n.5X`UL?#aSK=PZcA(U99n`EaL9aNZdki@MR]YQOG,n5,e3[>FUqN@>[)Ua"Wh3_`p>rg^tDq.X'A7^q1CJj
%SV-D?i[5*RY^jk,Q'1`CTZWGW-!u@Xfc,F?9nS&nW=P)!C@R6+OX*d&Z4r10$^\0Vef;Ap04-ij@46(.f;4.U.c>X(aH5@#&%JnH
%<><?4A6+4_;t<f]>@m^W=JgV/,]l(PKSF:#U36b%9A5S8@:nLro/L]EC(-iV_@5CBQNdfI_iTG`Tj0iD"3LpPSE%M0Uf=Qkp!hS$
%<DCW'o%-/9@F4:dCKsN^Z$@L7K4[m/!V.d5Ru!c0mn:'lD2CR#5!7Rqo8jT`bHK.N7e-/_:f3.9,cE"c8'>C/5s4kKg<*#b5^A^?
%Q7>e\\Xgo`=fCf9,IqJILQgXt;qW@Rp3o[8D"h@picP:h+LF"XS:2pSMJrlLV$Zt3AG\:G>(!;1NGJneRM;!*_mHJ:Hkuq;@eflX
%_,ig"LMNgX,EifUq[`u/R^&VJSKn@b91f$'P*Mu,k:i-`Vl_3F%Ia#B=ughS+O2E<@(>-L+J0gFc>8h%bOQ8uB(4PaL2]lso&Gn#
%!U<$n9`ipIouAbT$=CaEYaO09!#-P%WB$cs!DhI6X<N]!)N7K`46Pf2JV^8S[.22:(s:\L+KYdtnAsMKoIJEl1`4olmIhH0$U1()
%'hki%Gco\L1mBN9#Cf2H'0ZJ@PA-\cW(GdR,(=E,BCU;'$cB:6ObSlY"k'tC9'><=Nr%fEJ$p"oQ#"D^o>5]0fpDoGO;I(DN'oeg
%>SdU>TY;kY)Rf<HZHmE?clRk/#04RX`0h\pq;RT*d.IX[")5Bo;'eI$!jI6=m7&dk&qJ<<MT2_bIEknn"pHB43Nc1jr)GK]b24]A
%A0_#0NaHGXP7qnW^_98j_'eP?1;.kOqI(U>-:d)E#Csu^bB(/flH\G1Y@j0RL?O-^?mL(:)rf>2V`]FpS's[g7AAYjQ(hP!nRY:,
%,(GE6eJV=Cjc!ISKY%NFiP%ih0LC1#%2:Hal`8TA&M-nF5kPEq:e[4=JBmWX)CZZp,1u":a,++FU.A`i^A@&fc/F9tre;%LfZ:7u
%[D%t'bSfS-q^Pn+7t(UM2A_uY@tua*6=^(c.LDTV>*;LsM&mihOu`%$72jm["M!#A?8>;l-FMMoEQl"Cr8rjN(^md2Ui)#8ii6,T
%>F/<-"\#6&QL#]06s^O6!(D0@7B/nF@]p&L@P80'KLOSPocVRn`*$FL[6S+mN@62TVW:A-.)^#B;cPh\%:i,:/A855?]qJ2l)6NO
%F=ZiVi=+c^?4%"'RrtrJ-j9_F.8j!JOL22pYsP41N^2CiqEbhA\_UR6XWS`!Y[-=DWgI'ZL\goe8mLR$7s^u&m3nog.'tXG^H?n<
%a0GGcKuF4h4NEKjRj*dt-Pes2^E;r3,K\F+_![V"]Kglf_K-1.+coM0j>?VmX%")_$05;R=H!j_@Sd.H3fW=@BoiaT53-]tEDsi\
%3B\=0nT]_H?Ch;f+V3j_aORS)_SB4Dpe)d#ToM!'d8jdAW64IHm4q?cW>g49+eQQ\Zi9V]*m?.,Cr2qSG%NXCJTfsk10GaW$5=%i
%,Z$A4\1\Y_6KEfX@IfgiUl`A"NH8OWb&\P6Fu'Ed+\nUSWhlFBTfQ,<aO8G#O*:n$-4.U``dQr#%]qbb\a^rhY]8)2LZbKfBeThd
%d>7a--ae1S"i$tq,RgOc>?PQ+'&j8j382<9f1f7/+1O_)Q[4S10+8_>nF2Q9_c0E6!>61:+c-=^TA5d@!'Eo[<&0o_`UDJt[?Q:O
%fVqIH,H;#&/=*$I@?uf7XU@Hd[3)Op%su+P&>@;e-m[A/Tp-NrI216<P+!luZH$Ee1!5"sjj<%+'7-Zb30sogY!f\eODb8oN=J9L
%<J-K8;Q,Yf7Oi5T6WF.XSjYCK;n[/.NseM#>Z8=%k*=[NG8"?(N`B[e;pClofn@C<5CX+]H6X[t5l<c4q;aR\6b"[U336hoe6=aD
%f/9V)GS,K;00&5qmsuH)58=`&dg;4s,WsnE(RMk:^&s>k:jsBceNWXc[t]ZZK>\.LH'LGVR1ai8P0YNV`78$W1/a>;<H(rm1QXTq
%0"34c0_Y8TPC+uR"@0a+/Bk@dV3JSA<6PI8LR#,':Y;uc)c&/(^^^JZ=e!7^'6kkUV/NH8bEqc"&YD1GP`sR=OMh&226-pL;T',;
%=N1=HH/r^@#nZl4R[V/kINdYpEtf4#c=rL=LDIQ"9V5bk%;nS4D0^J\47X9:I:SM?%m6[bO'bPK@4X/c[e`gK50c:[(kJ%[fS(@R
%Y@MR6a,,>TY<d.,\@Zl0C`+'gl1P)gC%4<SX(#Vt"==KJ!5uj%4T70b&BJf^&r!1]_I,tI_Y"8V!:rPMVU%h+%tPrRd:sQi&B<a+
%(34F4$3;ouT')l`?>B]+9/H[Zas$J5gp(DWq0;ECQm254k(W_L'H+@'8#;Z2X/ZLVL)UrnpZ+EQS-@6$:d=q5%5SL&:gHd,g5-i*
%(J2JKXn]0$a_k(T?I%-;K%XA'e.Tk;@#NY!Sfk"/d2OJ&N7dJM4],#&*F2biBs\>'.&-E;L.!Ws`(;g//E%J,EkOh.E4Ad8)aaan
%qC2IqC.q\;9#R[%SrLaDeX<2;b6q6fM#[a"DupDUQ'm=?B>j@u<Rh;FK:hlN.^INTf3sP=p*I-@r*HSS<^j6WT4@YNHLf:WNMdDk
%TKI8%?s=$\GmqYAV0]EPW,8jANju:h-jWL:MZo399(1_QL8lt\GT1*+0LQYAF&>Gm+-3T^Zbl&RnIYCAJtCt5KJ[8+a!"21OQDtS
%_l>7gWUo)<6#7qoas$+,:gOEpQ6IC?$<uUW\cHe6<XaCT`F&^%Uopp68e`#[QK7C?c(59Jo'9N*\`1l=;iuM(TfO!%]d"$af.5dh
%43>J7%J>7MTf`Tiar>om_uo(A<$1B7Ip;u%m=:h/6^)VE`)cR+QB9:I/.gE7_,(?@_Ln&=;WN)@@`jl7^2l*%K(IauMU<`3)T=>@
%&"2l/4rXa@i/<dP+`[a$=3f-8R-tmWZg]2_H]@;LJ&n33!H>kHK>$7nPi&sMR#8rAkjg?Z'#oh.U7eMq46Q\/!Zp,T+c?[+-85!l
%j@5&qO8Dfe:s:Qf:-Rr_U3I1iL+9kCjnTH0oR%K=U7id`,h1fW.c$Y08Ba`8VmqDIBdnHjYS9aLNUcac\8Ro;k]8V#YWP;`/]J.8
%<XKG=Bo4PEfe0F($Ppfp8;/g>3$B$B1K:3O&P%6Y[OQZ(MS*5?I`M2^5-r0H@oF,7UM%S3f>HPJ5a99&"Nc!'*.TJq]P/e#eFsSk
%_%Ob<=d:cR=nNV6SV^8*EU\"0nZ+.J1_9fPgC=p5N'kN)#DG,]ae`Dd3Di^p<`P)n`+H2MXLP9@`tC_[Crr_/3C81!6(*2t,@$ap
%!*p*@"d"t4j(M-Qk67)-Imc'Q_3G\3Z6Q6lQ[jA#(XJ4;8,:Aj!bZM])b6>ZLJs,->SfZH3C*!fIft]R*,\oG2`?hi#Y25_Eh])H
%@qH;8:&q))ikR^0_K>"b?fU5A.ScF1Q9p`+aZ7f(b4RC<3O3J]FCKK2Qs%9Uj(LG<.f0O+ThJ4>ej7B.?'h]$aDZ-)PpL"^k&@!Y
%A?5G@SnBJ/#q$&[A/ghTSB/nmaQ)R%ldAd`Ch]mfa#_]dop+\OhkQro"M>SsVh!(6*c[,EdZL__\4RZUs/*rT(_$'`BStE)61R%*
%&;^uQ[:MUfYJ_doGX+CFk7;48l<DC`Um;:+V".afhThG5Nq6=Rpo?@o5BPm%(K+mbYm=otd`Gi$Jh`3#I8X4757M-pr"-,Nb@$#/
%fafFE5P7IiiSg09![MLKY`IJY<T-i$Nrej@9llZEbHdpbeXJ:=8LQ6&>UbN(@\2r0'\`ZD'^lE8M;L=V!esuOSi]4(8m%E6SNMs`
%Q,%=HOLPpDJi+M+i)ZAk,5_We08";cQk79W$&U]ql4In8p$`);/r>4Ip704K?URh"`T8XPnHlH8kBNMJlDSX&q<@L\)!$O9]InUI
%e<\.AgCjCF"@m^Qif>/PX1H5T-LWpe9SW+(8OJ3j#!a`WR&"5j,j@qdU(111F5]',o(E@^]MTnRT'e=/">;QJ`F.\m#5DC"apCoD
%<!@e',*3l`"J#LFYW=m^!/];D+Qf4W?m$Wp0jk<+'/@S/0Z<0DJO@#;/P-kSPf^,M'+D.OR2I6m*Loh=/$UYE-dT'kCP]J#LY;F`
%W\;S9qE\"-$Mf8Na:O98=ikj;$OBn5U`p]9;lE56PBooWZqAg149-*)_'eC?TP.Bf`rjEU'b:<,8J[Mb1fi("G^q+9Sc%31ha[-k
%S.]"Ijbo&2X,:(j1fXtl>JkN>o:,]d\K(O$5u+,^<$DnadnSo&jf@bnI?jEsX?a$m5hMtAb_]78)9S$(nM+*)>$4Id0bP^]LIm1W
%0gql-o:r!%(?1j)`33GuL"<>j0Z<J2Ug+M3U@R^S5t"`G4ahq#4B1/F%INd+N<';A`+S>OD:,X.!``U,!jZdt`DH1V?g^8'J7lgX
%blrpn#C\>Y>b\%SX5Kih8+9o.nZrIr'!^'2_eVPXk4n4?OgL920>VkNBaN#qHp;.Po9C1'&6huX\N.Zo!<.K)hOV]MS_4YI#Isfm
%R$,i=P0>28Bau$uX+7GXN@U5<Vh>ptrkEJ:JrHd:IJ#koMdr9olCE;eK(2r?jHnio0#tkm7L)31CE!ZiOQ/DoNHn=[@03,'IDDV\
%>.5GUTSS<e^8K2Bg;tI0!P/_U\%tY99nfn`JhIMMrH#q0&$$_BKBcEok7*#_>Dp*JPV#GECfO])G)ACAb+a&ano.%qR]$?tP274i
%7$8h]j>M]U+EC0=2kteGf"ecK2rQch7L6B2f3Zjic:=Hm.d2H9rA89@(!9jmi0kMh"A@<M_[dbC/_\u"*P4gk?e4'Q?:WqbP2aF5
%!HDou.U!'0U:P=FP.3rlD#+7o0LT0+1ZF84K#?#R"2lJT2WiYIQ;`P(HW4m62+/15[;lB[b:7o4?ts2gj*e7bi9G9kE-$IMXoUSO
%@Hee9B@U'%\j37Z[B"4.2fO!.VgS[bkP4^8Oi#"M:6AfQ\;ieK]>GD@Jo'G@ftOCi-,2V1;nrVDD.D#Cen_F3(rGWqaH/^#1b#*G
%-NdOIW4p]hE3"&e.pCt`79j]V$6k&'BPeBha(irX6C*^,4"Gk_>hVD=,3+ZM^<LN7=u\pNkdNk@>1i1W5r%e_d=/u.JQ7ZS#4T9n
%g1^oFS>LT^$[%2mns&6SGFa&P=q:+_`5"VNA:@u*lN6<Tk[j=O8.!*oACduHBL_i=Bp_g.];ZHB1D]W2fD"Zt$4GcGS+<Gl<@$ih
%XK;P?>,k2$1c&W;b_G'Jq'XTmgN\%^Lj4GbZ/W,>.M@m:fLYgZ3:BlqRtFk."F9b1iAfXj;ZZ2BO<MAQ[>2gP/*cSn5l9CPkC!1X
%F`IjL;Qj/"j=/@Dl%lYVopuLqPt_LK$=ALa&l*djk/#6cB8W@_\>S[bKoo9DFOu?H0_U!'cpq_>EIsW@+/tdg@hQ/3kRa^f1U]dm
%e(8/'h&&qbHir_?@216rOr5VU=*scB0n`(Q9W*1l(@>6HX50j:<H:^uI5GPF0>2hl-3>]+lk]F>$q10VQ4tkF#+&\!BFfdpd-Eo+
%a'<NPq59%AbSn74Z&k1^^"XlT^[4fD(W]tDPVSXW,63M5`lj;LF?T7Q2n"Rb"V%2!f8\1#=3@WR,A,.;j,Yc)e6HB>E/);b9):=Y
%bl,$(`O8KFs4I#NIff3ffej@T\i!Ds1;P#8%o*q0O!,ho<#:?K:^b_<oP*C^qGajL,m/QKh"SVPc/?bR*K%)j[n_nbf%'*!;C,d.
%(PBOV_cZan20h]N<H("g+TU5/Bn.W1*%^J68*K#lr/FL)U+`iD0(_1;]3A`nLN^"MYS19'*E-+M)!5HdB;@#W$M.3C*#HUl(eD7S
%E*bp+VS&p6]_U=b'4Is5d$h$+L\:]A%l1G(&+^Xdrq3*bQY_<[J7i[a]4,X*V\\&O285SV:,WVH/EC9ONX:umlFO\m[b+0XNXW<t
%T^1>r9m4&[di%;F9^$hAs6>CqR^267LWG7Gnk3uSKt]C6EN78)=Gn%mT0n0FOrHM6Mn%j,/>dr1q*$p6lHlHlf6F,hSXV+O=>VFU
%m^@W1aDs_jHG_a7m9/(Wceiq(+B\uVT3eblFW(4AUI%.l87[I:q5\9U)Rt+pY5ed]bRa/3_Q?kO:uDS0Yo13Iif>;@pjJg<&!<m-
%$+d<J1q_aJd+^cq.m^N2Ckg7LSs\T2\ZkRl>g+R?+"D6te2q?rMaGl,+XLZt4QC$_#3$/9<@68.#^e!qW!/s-?u\I:Qt&A:/>cW;
%h@;S=c'GOF:&RE`((^#5m0JAbf5%HokMkqP;TsQp0u_sNgp2W-Nn)THEo@.,>I8<tMgMBQP:,TraN/ss#22&l$WQ=AUd^=6r8F?;
%>nnn9>-U72M]6i)5>4;Rg(;=9rHtAf[7B4KdVqI9@B-'H%MuY*0/BUP1/=O4'A8!r00[?PJTs+.)Bo"mVT&_aj#Tj]64ket$Sl"#
%_EO&>5SQf:04B2I[>@&3p\./V=1!V]Dbu0V]Pp1dPF2J^6OmO(%Hkq"-d+imfgCr.:dcK]pA*PrWJC^BdkL.B>^qF9;PYKAI/co&
%$FtgZ:iT/C^=cHGgZ&p!.i1@:T'0eD#,9)n<m9UPPl+(p3fG4+q:?&<Tn^=ra:TS#Oi`7TqFp'-BC9nbr;D&g"@]%]KKs2S"Ss9B
%9klIUq2q>Q1G"$&:1$Pf60^Tm^`YEX=->>U-`B\kqu$"=3Qe?G6.(eeBq8F\>XadT,./YWf=nt?Do5@pMi`FYk?lpk@>ch^0$;0<
%G?;(de6P*%A;Q40nQM2+JL1p8UW<"(V_8+>S.Ul5b(b=XcXMMBOnmDukkp_[K+^A8`K3Z\>k7NSdd"kO60@A>ie:$3kpE.?#DR*4
%30Xq:5"K6THYDI_=m4E&hM:qT[m)Z0L&YP8)=?WT,D^R39@;8e&+jj""EVd/cjcSiRqY#5;uU(YWNH+.7QrF$?:-=uFDeaOOnol-
%hl`@qAfje2bbnAb+'L&um%QOOrAd%-b,`Si\n!pPJ8e:P[Q4WQD<;V)+PbV=d_94`8?#/^#Um(_e]&^`KWnl7.401RgeZqs!?rGT
%[Dp$E&[*_5Jgk+)U`pk:hJ?;3,i;6[>2Ku]Zj.![aE(t%S[hs2\()E-7Bj@[*XeN&Y.0d_G<S85M:sM*0f"AdJuXLC:EQK(&"-d&
%C!:gYbS.&.J:+ZE=I+Egiinok,q.<5ctM>e/pd'9flnKp[M4nF.+1)K"nY_u-kCTC)1bMO4B^4[80TmOS0QQ*cX`f-jG/\T+lO"^
%,:M8Fd]^Hi"./=l#trFpg?;Nb'?O*f:1-D_i0ca*-P62A:7G2W2!2G7`L]=JG\Fu:O-0p=l(lo_c=QX$+*mA6:.scY5J^RWj!]Wh
%8`"oXW4Efe(\ePP8u/=o=uGKH`D&%.[uZeD&#2$2&(2!B`F<c:8:j?_i'V_&Eg6V>$1&^iPN^A63Zk&.+3mW&F+E010^Xt#KD&]^
%"jmb#IPR."J"b-H'oG)s-QS-0Fk+/mOI@Wei.5t"&V?72<!8*=OhP2^Ij_WuJp(]@oJmiRiN*Qj\F-;^<,Y$og/9G(RskX`0_8pI
%E=#81-8ZWCEum>cj/'M/[-#.CR0oi*3[j>!]KT1Idi=@U1Jo!\lXOOorX%oOjMIB+q7gW?940@6=24&=MH9XO.X/Hk&`mB-<bio[
%0g0KXnHqE.e++5[&Y]Q+*Ae7>G%H]j60PP\,sg9Z[%'rHK&83`Q6iE(iB0f5c@A+/hGJ!tS3KE^'VI7`ordEK9D;:8Po4\B-IMQn
%[K`@!b[>of_*?/ahm\SG8?sAS@O6eXjsru)Qj-rm'm=$)$D;r05r)Eh<-E/QS(*S"\7+Ns<,Y$ob43.SLd1-Zc82)N>>V=YU!^YU
%h!E$rJ)>Ja_kC7c0AOU[a@JTOWG!R2%?I1#?go:516QT_rSN/bL0^20lP>MG+QA,7]hAk#[NptC%1L%hUl+(tWq,-$H.i75%p0fP
%Ls6_a[SGlaPCR_4oYZo!:d8335[N`;2k+m[_NP6-Y(XEu?t&ua$%(=0KJeO_'4=u53o[Q7K(jAgoA-o#QZ)"&F)qo\KQei6?+m-A
%doLiM[aNac?-Z209[hnVBZt1uGndmIQsYTI+Q:Nu+qbcuRdD`*'=FMec:1L/RHsSQA[#PFarR-,Y$2Sho&)Yd[*s[kH*Bh0=&4mg
%pdr:qE(W^O9jrV,Fl*Q7\mU9\H!0N#NS<Om+B'l)r-mr.4*M\\.>NTKE33oK&%bU[\Vi3FI6?G#DXp_InOFF&%$t+P:^FtgA=mK=
%6Gms3@>#uVq8'EW8l%X&X;+;cUaQJ[W1tOHZCh$[bm]tp4h,TU-kjcf;i)1"cM8I.bsODm-,'G5F-Z##V?0M:Fl]'-VrGu/-Fusn
%/?Ye#E-<iP_Jr.tB=`5p#lLR-:RR?HI=h8mA`L2a0<5,&R&YAs]FkP41$%X;/i(1fG*kPre3r[BSk)'/Q$@b9aeb'2-#,k2&/NeI
%fGaTh4_UWL,.8RJhcInKLFIR1lLaXTML$5o7klM76<NGn.49pB7upbt>PA.sI&-U?VC<.Bn2u3fqAV@7$rQRu5&?%$;FH/$`UmLF
%6mQ'b\<H*C\sPj_8HocP_q4h(@a.0I+FKgFi&,JAcM4bZ$BbOHpWc*jmmA6)n:qQ(jQ2a;l`\5L$rAuNpo]MU(Y&F`/qYa,1o\^P
%;S-XZ>;3(pCp5GOV#1P%C2R*<1n0]^J"H%`>2gf[N1DW:@tk\J[@M]eoEer"-j\@M0P,E+*V3J>j<$MYBlp=A\k#/0e\/b$$@Q6j
%NmPT]%HMLRLl^Fs'H%*f&s6HBED9!%.k08-"Bd)':C6)O;/FIs^EkOq6$b%GSgVYlW*kP<mFI.+.V?GBT[59,f'"EWBlpO.>>7FU
%kO!YoG_#;R[k$?@?m6]rW@D/*R-WZ=pN^a=T0@?9XV&GbptaoRcnaq6]Ae]9bQb'08]KX3N.YI1pm*2(bV</1'"l-1ie0qS6tsjf
%,D@hspYD'uLQ+Gp:r=esS?c0nB6ZB>J<eEl74G[T.SWVF+q#^tgo9ZF'cZ_E^2E6q*7@O"U-(uYFLGO[`Z(aE-H=]J'R'd2Ej(Sq
%[@:3P:^d^+c=QFHVCprt\b)rIIL+LJJa;m6k7gVf0'sDciA?Q*]?%+T]m/!,&1frFe3O`&'I4Jaa""8,r/_8Y+8YhXh)"gU;RcsR
%_b)>^RI?+P$*YSQBM6./N-?;=(Xe9"(KA>a-po<2iD>MQ.#7'"WV#8N6R$U5:B2*k-Ks'No[K@q)HVj)=_3.2U*rqgUE(0qi^ipa
%m+./Y)4f`tlieI@h`L^)GDsGUoMe$@L`-"\HB/@rPT_`'@oT*1!>?asX.F!Da!5.?.1&U7khV=L[0h:Xq;*(F0u\qMA')j:St!Eu
%$\BIfRK*n!Ws(M4Y^5j(AgL>`hB\uRKB!(UTnKWgfbLgm'pAOBh]J:$Vl(rQYJe,"R=Yu%Ti3UE)P!m\Lf6$f*crI@QcGn(?in5M
%qCN8MH^";\$.+,<kJ)N)'_2_gNZ:5\?&F][pTk]-RlKM%/'8qZke<l#dmGqF-Fm2t:dgi`D&%(^&;#*.-bMccNc,duc=(A8%DOKT
%9HO\R^JEYec6ka3"i2%2-7]RuhmVMfmIk`n-$7'QUc?ap#,WJgqo4%^L(k987WE?#[#Dd>7,d'N07j6dY/9Pa799BhY=,M8iiK\4
%coK@Z!0k3dnBd:R`*d?1'2C9;j,!tR6[V\3SJ^9pH^7<[+WZ@K`<^lZS%ZU,h%Y(9k&;Eo+qdSV>HntH7LG@3TRW1WR7rqo3/iH0
%KFA%bgs*fWM-aXj0+NAfCB]bW[YF&]6:D?"d\-Lle8K;!.YiU\=YDpo@m7Fr0s]:k&>ECWJ6`l@+26QrHPd_f7goct>9#jk"A==1
%bQ(&o!cAl%'?,/l=E,LC3@I8-o7SOVU)EU*_7+Lh6Z^-cKJcT3`u6-D-egr(.md&9rQs*pLja:s4Tl4!c[Bi/<O2MU-o\U3`1:+d
%?T4l\>'i]^b0B?j]Duj5P^p%tbPg%SP<dtV$iP=CL`:Ktj4Z0Di&9C<@3*.;Z?FHO*>5C'QFX7Y9sJK[h!h:i?u6fkbUg2G%6nLb
%gW-a2UZaJCp'l@;OlM5%J*4i1^bZJgZ#agXdM$2/*BHdMPaOUg4_YZdfB2&]OqK!_Nt</!f(S(CEVn&KUIt#l?MfM;i@Aha+>u:a
%e?sq=ZM9#V>=]TAR\+p)hG#7I%*Z.^,T^B+f9Jsp*\IV4!h6U6LLNa#H21Q8'lS-nQE*OgV)uR+_ah)U6hPQ<<,@)u(&dJ3am='Z
%"o@"AaMhS+=;9/a)1B:pdd8[l!GsmJ:<@q8,_6"!mAGP:=Qob2<C[Ff?4XP"l4M`"P1X4(BR&%I%,U(Ug?^:8eJ)T%)Sn8.e)7qM
%q`D74/g<ng95@AJXb1[ik<^A9aNAH4,G"e;$me0D*t7N0rol=\+<<*=c2uP,Q#t<%JNY-\:S5*./)tGmbST@I@b/qtAphPK@VA]p
%Xa">ES%R\lG6Sd()PhUl@W]]dU$$@L6$p6]B]#Km%H@lOkYPYd1VJ$A&eQ!bqW;dP'E6?="cAO(/RW7uAYRr6!s^QeWn:Y)Li),U
%!f!t`htE/Jk8#7_LeQ$s)jd=L7ig87b7URo.'jm%E1/?ZD/V<:(&;[Ml)-p[SK9o:0H-XE5BkM`@,N6#l7=_]Ck546k9#Y"&EnpM
%)qtkeA:GNl2f'Zdo"4haTK7(o#%q!F&V_C+UBi_Qm]"sG+KdQ@ENHWEF`(ZJ-.O+31LnBeDGjONkZ)f.+ai-8(4iHP,6WSY(n;Xm
%'X:(>)jo!jp-0'K5O\XC\^db+8N(7Gd)!A2r;*has"V+kWL<;/qmMEuB8rZBD'B*&*'@W\-A%u;R2>E@K$=Ef.r?IJ)8MdQ\LDG@
%-BDs0gF`j*\W-*kFuo*)NumfE8=(bEo1lm4'7F2$-c*?c1Au8A+_6.*EnX+#W4PV_M8:4%b`d<"_;0_^M6rHX85+m#LTu?t:4eK.
%c]mTf6D@^7CXPt0ne;H0]T\_G3KD4hPE<g+Jq)WK^^rf%G7m*KGs1UAK\jL7-L[bRW@[U8@V4T/lfV#pV_A;7[$-SC%PF\Ep&'eu
%8BC\7U]'44VR[2N*26&s.""&MjLq6cDR4@$imY1n#rl3XWi7R>.oLEj@_<L>R$ufXMR.+.]I,C5^Z>bh1[@@l*[kL)Flaa`*kB@R
%_36J`5Yq915#EX0)"_E`\DIr'(Pb^j"^:6C,E@Y.kQr'P_,P]+5^-i?L;F)*_b*D]LQecK2[OTjcG,<)Y/tOP@!FqCcH?Om,niu0
%m5r7JogIb(Y,f,Vdg#'R@5=m,n1=?n/79@7bfW>*I';&+5>h'[Wul<O&IgbJD9-,n2X(6Z5,=.EIbHe^CissE8@bJ2n6;$[L.9er
%H3(tBA14RPKcW/<<YBn%TrmGOZ>T^A+b]9@U2GKZD0U-[E1mg:7,ciHLCs03/g_HfH`*5M1V1aU4;HJ<]IDAMOF=8]q&Iio&$bo,
%iY%L@9kZA&'fWbpg>=h-Yef;]CT)'4g0m&DO#pCS?j^Z<nJ*&jiX[:O*M?YHgc;k)[,V3g,X60F''C:FYj";qA!Ll2W-m52V&hEM
%2Bu9?OA)%e^i2:U^$N`QSmN_-#-lW&Q\=UJ/iYEDLt`e^Ie?(k)k9'cZ$4,NnL(hMYOWha?)?jpPpN0H$'0/E0I#tLfL"5.b``%N
%[+"LtQ6BNY7W7r_<:`5dW-4G![)N<*9\EL_'Ig%B?aNMEbrU6%0\u6VpgF?=,P9qK8P?nCPoPU?>9Yl9;#'7j;X\/u?;%/R"\&T-
%_'?U^$Bm/\152IXdH#UIkAh%MA5E'ro?%c#!WUZdQ^q.G`Le@RHpiP.LCDCphk5M-*J&0GO=n`-$D^R<?uc4Ghf"`(2E7E\=4]1!
%[7'6l1XV6g)Kb(/3t91o@TY(G[a"dA$b!DJJuD@!9NKWr"00qg-io_2?6Cjr?76:T6!.V5:Qi$5j&68K8u#rY'3*^SrP.l^Mf.1!
%(O=L[=R0X`53^.1kYpPB.-,1"bo^03W_O`^g^"oaaefS[K;gH`Vt[:>cNStjAGWDoGYM3`1#BPQrYqAoO]7cb$k8/nD.VRjh6^@E
%:F2h'-+bs"j4cl]*RctD@9Y\*EA[;)d;Hs]2&Fn3eJZ*<cAhY^qaB,QTQMW(<i:,9K"?P^T%W5IcEunZ5ohetE^UefO*2qT1EfH_
%&"S.+hV"B>*]'!02-F9^'ODWirj*gMpP@V&Udj"!H:0tQEjp+FS3,2sqKKoIlr@5@>V3^].%Isn$Duf*1QnVF<Z;<.?-SkR>Fh.X
%^%V0g+8S(#`YY%hOeVn(n(.Y11'8@UmjG5c/'pQLd[^\pp6m+aMddImn!XXgWO)gt[@WCDSWe;`L:#?)3i#p]ifMIJbo`gc7;8s=
%IA>RU_T?\'-/jg[HD!f>d@:YJ+ZB(8@fhT6Pkc!/I0M<I]#q.IKqP`o>#82p.9EuD,LC\#L(kCdf-u562R?uo;<h'oo\.PKa<ogh
%UCZ*em_MFu^X0LKcU^3[#1D2q+Q"&!gEsi^!?DQ\HdWE81I%es(?Bd)'7i3g0,I]c1s>QXRHuRc0RfD#&]MHWpPg@gA@[<m<"q3C
%)[l)JjEb!K`E:54*0q!=V[mGh72E%e"=(#dlo;OD4K8t?PUd7QT3p?9io?rgDXN0WAAWBS)0S)?M6f9.o_]0%j3_E.Por]HRH&W%
%qATMd-@B1cVA\PY!FkU%\o_k`LC&_0.g:f0,.+&"XO!.:`m=BUmA?MA.3,N8(\Xdj_9pP.ip+g)ceg,l^fnF2GUCfs)4+KW4,;^'
%L3M::A`;^f$R%qL9KqFF=;"g)<gHC363uYH\amQ*3KoJqrUEep\Fj(4aFpD41E+M3--krVd.93;$?Sl.h%(g3E&kX\^>8qJiI<Jn
%4l9Rb(O9CUp.ULnK'CJ.ms@)1$(_N0h5PE^r&?k5j+kTkMRgBR4fV9HCum-dp#`[BDd::\$KBIRWsQ\&oP3GS=YL!#EaJ9&VRpif
%EaLV=\$'$^8TPrig;5E.mTt#*bPdsBSQTFA;WS4Vm9Cs_mekH'2_=",!FRtbaP"Q&h8>^r_J#]rCq3Kj-\@=;A=S(`Vp#da5kq'>
%+.VX,N1Y<XjlN+p0`S$p':*E@E&;VN\2s68ml.E/o/-"5=tpk*,j:E+aBD+T(Q3*JF!5*G/YiNqKp7Ib.k0#?<mj0h_G'PsL\(6$
%+qp8XcYt]t'feAJ6f6e*NZk2>Y1\_f,<QglSsRmXbhnSL;T@-_9!FZ1.W;Jc<-)574%.VFS^3qr@;2=p/L4DfiFl^NE;&CK?GB>o
%L=_eKh@quBIm)/r$?mnf#0#Eif]?C98ajfHqLGMFWFf>)-o>^s[[kA`.-cLp1nhX<;K9smRoF<!lC?D?q8:^m..4LXDif`5S*-%f
%\11r2UPFYc.^aZ?c]3HWnJ@;;NM;>&5HIoYVihhV.QnT!3f??TmMI]gVg8H.:@@YAebE:q9/#2dkHQ1'47n9$)u(WA@DD"sD!Wou
%eP[27,e`"IkVrJj8SWcTh:*1(3DB$7QQ69B3>l#n,rF>@$?Os/Hh[eP$LfT&O2cR:Iu3Vn[bLlA+"9tHq-_OqHE_&3)MM.ZeIK.@
%V4R`PAYifp5_f/A\ZCIc3YU_cV4qQ,?97pX+/DPi-$a>C6nt!nFC&npW/ieI5[GoRM\WYBnZ#g$Xec?IG<+5p/T`u0Y$=eT;LJqD
%c!#hGQ@JA])jVh`0PEXp/BqDc/2LC.;i>TIk.tA>1I5_l-8a:c.P;KLWcp&?ZCg.(b<JB'eaY%?6)i^o7KZS/d>ccW^2\jY2h64<
%0q8L-l\RNDOrh`3(DkaC$A7?IRNQ_C4I+QBrU)Ka:F[q^f*[dF.&%DqHE>Q1A'88P<GOkpF>\"8E->]Vp=e7[XOhG?g%/M<[UKXX
%C8R@"i^cK_JJK>V?g(`Te."bbQV2&VdLXY[S2Fnu$/28CImV1pCt'qPSG"=;o`i?#SIJggSDBRO^%V2kla<5Qie#mpM5;o$GOb/b
%/>M&L'1+4P51I&^%f9L*aG\>[h<TjYrCt6WW6O[-)8/G8Q\la->a=R`Lk@c.3.I=,&]MHWpDkcm3-Wc("3eoiN9VF:Kd4(EMf5G8
%Z#@eW0d2QM,dp6.`%!3sdMC9/CKEurLEMk:QP+32<,FnW-Z7i>@Hp5ppY+@\^7lHaV+?>U.X"A\bU4i0c[]f?KA/&"lSF`F`lQRT
%$UI5m`>%JJ&\El]-!)/?Vm<Jpo#X+M5GGesB8Hpu<A/="0blYEnjBnDn<uZheX21GReTUEB]`8jPu0BC<oq2l=6]5aF6J8^-XamQ
%^m-F:=HplM='\ij)n7Il,I2cC04*-#Y4<?oX3P[k16i]IH0t8DF]kAEAX^mP'VKEXpj/U&=`JX>YU[BodX^?nfP:UW9o+[TE0p!R
%hefW8B5%a2CAI*\]0``'BlMutA9t75+KAj_oB$Q^f:oY(hS):$[21.?P6^[3251J#ZA]f!hV?Ltc@nbM]#N[HM/Z;&4T3^S^lMTi
%AM$GqH6r\EU*\!:D+shqlP.2h=4@)ReG^l^V4[c2b7n3)fMKn*$JnOrcfB5q(#G8nN1n9I?,)l0DjH\3=8Q7"qiK?PQ$,AT-tB&V
%"*uTKq8:^=..+FODdB5bBKAjT7Sd$T('E4TQn)l&RXgt[Fo?83_,]9Bg.VL.d9VgB>[/#[D6C?CcJ.-ipgNGW'_g>=pT<&-cm,QU
%cD+0IXq($M(2;^;%Q]55Qt@@$I^!p9:e7,;eN=iApk`o6B>jaE$:MZ?2j+d%U[G^E,JM)]QsQd;3L2EkmLHis%XTQTgmu(gRI8m?
%X?J_VK']Nu?0"Fp&cBo_Y(uTMrm9?5^KaWmnpNm9ba\tV;6\+s8dAip[=#_8C8[sn*8-!PM(&jCf?=L/FQeJcEInbVOVW_:3cI8n
%Jt@u^*B=<Z&F*0!9gh=q-Q#UM)UiK%=7;hlRV)IiM0t\n[#;9uX.Z*0qK/1.0L\X,51GRYrk<<]P"qE/,to0`:K\7N+f^W<*@;,&
%YHsUbX>c'h%<ULOm=GJ/>f7bL;s'.t`cTpNk@n:CUtk$(]tnXT_AFG).r!6r;9jh&jFM?SCnq^ea*6hVW[C-)/0mf`[25Hm$_\[9
%ZKJ.)Bt!odQ#I?f&]IX<KF+S?d,`@ID\..Fd5LQ__PJ48"^N>XJ5hH*QH'S,ML5ai<;"j]N+u9dNsT:jY[/0ed,?T7bcE_M'D]Yd
%/_`fS`;K&"cA8!Dp/>)p5EsLMWS3I\aFoog-!S0\i^9/C_rnIQq\G^.8_aC24aQMQJJ!ja!'+'d;ha.>kSAEYU_k#p4Tld,B4%eZ
%!guk=+IG2">\N+^_RW25oHtP;4[4C#cQ@Z87)F6^^B)md_k+APOO&I8VIR1l"mQj7ink]PSp=lBWO.H9#s<".?C2FW&G+.jEkJ_8
%,_5FQMa2DciMJTX"P]X250Y(IBWuk.n1=rWpasAHR,eg$0S;6U6d;YUh>EtQD`j%,,9V$"T=CJ[9"pc/%f[TtH;(R"SVkMAi&?Et
%Z5fYu5plDVO=C^Mqs5N_8Sk%F;Q$fsG'NAD>GMG@W-):cM_a^R-h)P;r+dgBq%QSLf-'+dW14e@B"///<P_(PaJ%@YKmhTN+!C5u
%lC!*FMQ)FMgrJO3L("(A[tf/UErFA[%S3`>NNoCk3fq?m,H9I0cICaoi3%<"PTB\P$#O9N":?%TW-7VsfttO[cEiMcA.S<=2+mks
%Od$YuTF[8Kg\J(@"(eO1m%Os_J_j;IVEhkV9Nc+nl*GejT>sgu:&YGGNIXC%OeJV?GIH2>jT2!0Zegtl!iZ1.KBunM/p6lZL%^_[
%*'SSXdc5H8T/i@,"+)*Q>3(*)oC9-Ys8L,o*?o-F/.`#KHtd"1K8bLT1Pd($\'sLNe#>+#3*9#p<JDg0m?*MPiMBPTQ"L@pPPi9[
%?T>VX=`]rD$G'f`^9L8j9+7%6)OSL=.6/b"WsBgfLijbf_0&/g;S(l1`sI[0lK*^a+C=umeMg,![nm[A),4b_f)shL2Lol7MYM5Q
%KP*";'1He"B3BdfWfSDe(P\87KLWuXrPDWH\A/Uincp>%;?3A!W!)K#6sm4Mo.QVh&=^Z8$UPUKUUTI%+&KcdETC9#Y+$qhpboZo
%fm?RpJfB`Vn*E5fKogI3?1M4c(>3"fJ#B:`c+$)tL0Hk;NB4%JeQOYG0hoo(ib(A]'VpS0d731R7fn-]3EIlk#8G#DZU6g@,/'R>
%n<1:j67,l0"pFS:F%;G'3-,`?Tb0-8+%gn+&9h#23h7<%6JW=d'Nn7-ZgQfOcPXRF7iZa6PI8iCMNX6F%g&hIW#0g9=H;22/b8Ec
%F798Yb?>]TE,49o>UOGYSc+]\[e:/Y?.s3VQQZ'e@1DOmo_Emp6+S<X0i6L54#3+cd0$R)d_ZV@d3[[Ok&g&K:COB[B-q,.Um1&n
%J,ml@>;^GE57a4igPC#9,NZ5T_S##Golaif.W;K$f4\FNj1<pe6ldf>T-*q+`e+R(n/06`QiH=A*\Z[<Z\I1i&#"r$7'8UVcqJc+
%6kLfQ6rH"dcip/AhtkbL']DeMRF+[r=D"&`XTD%slj\u8K^(Ij(H^Y#l,86#?G6i!MAbb+!<<Tig``1<5`FFa-#ukQ,i"FnGMQEO
%KeR*X:a*(i__<5h!t(#Z'mUkhRj2)=jT&VLO<Bm9">7G#%-[ir@#Af?^?e`gcipPh6^-bYTg!uE!Q_8/(@P"2]Ve(CodWA\X'LUP
%H>4CBjM`Pf@$Ks3Y%WSk3RA4u$jBe^Ahds52b1WdSf"p``\%`6%V*5f^g^1iaWer&5<KV]%=.[t!O4Rg"IEh`cdHBlrck*jY*[1a
%#.+i09%Ynpj>)%rOc3>cj^F;agepL;H%mGFs7W>l&X70jq'YJ%^`i/lEniIX]b`&e,K.V"N[KG*TlA#sgrb#.<Te)3:de?i/goLO
%%AU3Bh+qOk.:ESE/C+(-H^EVFocM6,WU6qlDdi067Pb7p/)_[*E]WE)+*KH\Bn!40,8B6]]At``=+f@XLnX5f%.3,<LQHY"j%tW6
%7p"=7QibkXc".^l5$fDc8P]E5Fj/rc$'3h1\b."-S>khq_%7,@F!_UMoD>GlkoBi/U@HniAdH6K#C]#)n@6g&FjV'aJaEVs]H_rM
%Bp8\qe@4!WjWAA>pp7JV;"hOmmS*h>l#-se*gj*3(8c9"#+]*\gH6W?3BG^o;-IK+4-K(GC7:0_:iLm,9I-0sP83nIH5.ibKu%lS
%(m_uWJC(Nr*??Xd@5lLm]ld/.K_`^_bGIQ%K5X<q`?p3o3*((mf!%\Oc+B[#W]IneoCMitXo[s"b"t(W_j_Y0T`Y^;/+nX8VIfis
%.j?*I<Bj't'ISn3T^0J*\;cb`J="]Xj)J&U;KWpu,U`^!+B^t?F8=0qPW;]%4FcU)!iYiL%crW=WW3P45YtT,Erp&+b0K=n8ncXO
%=:-6^reLVqb$c?nE84/5%]Ck<(lSM-CAk7ib+7H!X1E8OJ4*F)QrMFqIDjZ<brXHJ;r%==>ZJ`M-JidefCm,3]MYkSPc5'6?%X34
%NVOkH1^@h/S%0dF(R\3pDNple(b]W3+c8bsThc!_iFm3*kt/mB;-Y/)-1eTB&mMQj^dBZq&^^8-WAB^J3-n5"6e.MjF8`Wh5T4+J
%GBjb0*om@!7ZWO;ZF9[NDE#9hY37d9&.L2X?&=AtU'+r@83itJj1PdW;h@;@;jI&*&,dU.2"Z9%;bJ0UjZ5ci'#Fsie5T`#2gf:"
%&qWr4qt>DbI*r5=;*s@3&X:.[7PtbC4([']l?u+1lhf:FNSUZ`@;\g9f$3?tWL>"3i6e'O^%V;^N_mF3?0IUfGTC>IWQ[n6>='j>
%0#^BaRP/K>#A3)RDg]6+S96O^Hm%:LbiF)k-L[in(_GaPHGc"s1PcGJqH$K0d57AtC*DqB6%fmmU0prWp4b>4"Y81T*VS_O6/V8s
%G3KZmCC,Q,c,A>Oi(nkkF67qkf*FbC/]XOMg`kO8(X'i4:+FKn*!;!j&so>,k;^4Ma;^WT?p$6e+s/G8!tK<*kPtr,IBQ(mMU7"7
%^jTT:nW,4<[jeBu\O]8cn6jGI#PP-a_'!Gu5J8D=q'pDnO4k70)nLo3*I@,M)a.TgN$T(ng#[@hd-FNRGAIC5(4&7k#sI/b5Ts;s
%./Sa"?ORTZe?V2<g7a&($scfZOjJQ5E&\R;DI=k%;nW51QKsRJTI7mJ6ZQc7U%p^c:SG;1Ti7+6UJL-tIj'r[Pm'5`D'XYCAaX8*
%gfl$Q]jN(>[0>VIiqgC1?rP2M;BDan,2Wtl8,VD(me/,G]:Qqdegn"37VAHTJ@r%oEK/!Lf<e"eY;?,YV."4G0OiG3iI3m_6F;05
%8X9F3a&:sD:<A.s\7C<$>8&`]3Hu.6K)-Y$,h3_CI<V+sFn6,fk@7W5/L]5>ctM2aDKasGVgiiUnk;8=IX+X'iWPjsf?DF216;\@
%M,5X0NEi@o4h%D%_Ylf)d.G5$29jP^E_ZDdKOWm'HFZZ6E<XTjNI33HgTBf+VIBdB;(qnGl\F<r`8]9rL&_+\s$MI\Sl.\Ym9knj
%kGoR?/\L%$joW-u-d\k=#h]CKplj*?n+B]97Uoc)<<0bNH\QDjnKU/#gTfpn&sR-9k\Ss&Cj+aEVt\4207Rhp(F9Jbf9"@^,/W@H
%<hob3LUSPH,nnep$k@dLKK@4i.Lg#@I%+$9!TDcFH$%XKR1KE1S5igG;S<I/%:$k@04$^:GK1<t_2uIaLX`J6$3uB7[/o1ULGVE6
%84CiPA]@X=jp/Ol^RL-Dlm.d1%ue6i]4.?&:RR$kWEc1=N2>5A4<'`HS/qI"msfJ!_&]O,+WX,j]BlIi9heC!M'D7;m0?P8iqCHT
%fucOE*nMfV'6n,eieg5ceJll5a?t(lY9-):-9^-8DF(hiKLQ&FEO-UfrV`eW=oS6Cs8CjS'3mO`\P/o1Ec3.ihJ'!d$!t(;cjQ;V
%EXMmq\qAHJ82^"P)con`U;8-eeJQC++UIDTml3VO8s7/;(:B6'irYuaX/K_0CENTA-.S)<d*J0+4E"/XTZg/#iPAPjKu\^5(Fn'r
%V3%)M>\)p<,o5g&;q1nOa`Q$\4FYCGP('f.M&AsO-[<'U'cGhQl1X!T<CFPu!t+c?H_\s\NLj5cD29g@k57Wi$!=5@`8"Ad'O>+o
%""':f`-geJW\ol6\\'hh1"Pe)pe2FY.P3reecj@MXjUf'?MaMBLN3nu_?mOUFE^u`/c;4CD7gtSkmZQVpcg?dXqsHlD+6&K=0"1Q
%-o3mAWcg^8?#?X'hecCKcb^<X.\5d<>nj`YnClL/4-g/s3nUen=+/3XC[B`/eTb.*>AkuXAi$g9f"r.W;8hjdIo]^k]'iU2=mBtM
%J[k1#%rZ1[)K^LL=UW;N-8aGb$Ca2'mHJ!7i'GEjcQ<e;cr9X9>1s;"Hb4'DOI[FRb_8<RF1T>L3[/haG+/=W<I-9dUrKJqfAhW,
%WF.\TZa9k3C)7f5>G]S.]_;$%N[5-/N"d,[X*iSk_oK\`48"Lt<_Gcs"<hI6'X8OX8hu`j]/rR@PZ;QC[Y!pf175h/`ut3=<bVk4
%eLksPD\Y3Xn^?1,4.'!O2"M#RkG7JchM,McZpW+b0e]mj1jMduGoKK.S%r;4mA[2a\70Kt<,"Vm'T[Ik$g/$4_EcGg<Et,R[0rPM
%>K+iN]QX#;%d'3W-9/1!hL`3H2<,@@P7"KXgYF5TA-;d(.ifZPE^u[3_+bJuOB#p9>ZrHO*=Tg"qiF$`Pa.n@B1AY5ZaA86f:Mut
%Okdig\T]jH@jGImU80bG`i`._7ON\q)eB:m<hdc2k[D?l<8=1#(o^[`psQN+o1'OuUNDWc,qUNHRF#VOPVq4qg<mYsOPnW`m^\t%
%@V*:7]kPNW5S8oQ7lYD0^F;IhN3,l(1_S/aVrF-YI\_8lqUE'M&H;=>c.!!!\-:u?',h<b`Q`;5p@n$9-Pf"QM_&B<\1U:A5(Rl(
%lt5A`3m,7SD*_B);Bh]Y$f1"P]1R]_UuE8deqnchO7`ClBW$u/DlKsoUe2Fa>;o2ZI<b#B?QI;hm=%D%o=t4,s89A+rV?3fPg*k$
%PF\#3%:8JlYMT93i#E6a.k4,a\2f\1PBp,3!iK0rR'4b5e!*pI[sPoGDCN-Y,;D0!F+23f<Q<Sp$FXZFpdVLP<<AEEO,:L=(?itd
%7iHR3-Ktq74mY7c1u".iP#;m_56iK4`k\0pY76l][djs"hdn2jK(hLX+1o2\=h'KcX96JC%'<,8$FKp4iKX!@3F9`$W"ABFVk)YI
%bF/Btru7!2=*Vg6OW#B3k`G!H#(9XM[Db;(+O:(d\tW_D*Q]*VRY<MS#M#K1I^bLrd2pEO3qOD8Qp;KB^%.R?N2icd?$Y1Jb(+rB
%&:k:N"NQ09L')?uq&IgU]LA4(pD"rL%!g2C7EVJV*suWX_RLd8C>T\^#@$HCCP-=b&le7,b;i]RfHQCQ:FZj7Vt>:?o`i?k3?:\S
%IWuCTd;s:F>4j4!)OQD?DZ%jgD?$M@ojPQb$mbBML]Iua2lb+"82^i2)K%tJ\.bo)Hqk:@[)p.:X9q"!+M1("_W!,GN3sZu;SJR8
%"SXBU)M#5`X/f/H+Z1l-U0uU%WF+^@+<*^D.mtn@ld:,cP(_o*QDcFGCY3(a,GTkrJc[CHD>8uYT!8`U(-iIfH-,cJdHVkE!R=4q
%P+Kb%bTdn3:S&Fp)WE=?jL=2;oHY)MfZm7YK_()Z'IK/6BIq"NmX(]m5J?&]7pF'B-4$d`-8>Xe=S`_$0'e*e*QX!;.iMRm8b#9M
%Ahu;(J%Bq1[fu,Co`$n90b+]:pB&8u8aSU<Cm'8rcDj59\j/7V8>o^9nU[t3#C;@fVZiEeQqji#-o30sU>:eg8a[GBTJAmd'o>Db
%+<)R'#W;&f/8%G5>`?e@1[fk?VfJLu"@bp_#O-#(8lb"ddM1U\<J2t7/)M+$<];>[`+im$dBW71K@';JR9YelDth+=F<3:%*tO_d
%)b^s!O,0+t!t:NV1CBg_Sm:*e#NJA8T6>?<$I;9@mGrqcdeV#+c1BGLT*OQ2i<]fW0W,On`j]8g3pN,S%o.'MC<l75^-u'e=>RJ:
%AgMDCfWik:9-uDur:ojXf0-Mn=0\FOOOr@S+RI3ODQ=E>EV@5.A5d)F_!j2!Jn2s3<X+0&#WXn-Z8!YN0ETho_e!I7)-U+Seh1*$
%;>Fo:U$\9e8$5f]P&;Ei@lAbg_/.:k#gTYPnnsAkU=70(NB6-Zc^3,-)8/>1.$@HBGQ"Go!GB=,Rf$.[`;Gc8,HcR_E.GaE"(bXi
%h7fPPBP07+@k[nQ*9,nX?"ag7_2\;iKf4I5_[Z#-8IYFY4rZBIJ0KF^C@"^m1`.2M`I.C=RCLk=iXF-S6#69pK\A5rD2aH*5XKYC
%AMTE8?PYGh?I%#eW]3`OJ;-U&!Q6D#eDgBX8@"VaoPEM<`MeSa''A0?(@P#@1HRT]r;st6\i0j>9pF\Q3U29pr:UR]*,GSJE3tPN
%]_$M2a7Vh<O%6qo^raC?XTX-j3i9j=^fLfPnbrZDY(;VS+*i.Zc9l?0NuqG/5.oh%Fa@pBEJZ!pqOE?gZQ<(6'GqI7,^CYnN))Tl
%Kq":$GsA;A1,_.BVGB^E;NOfo<=I6^EXHG@()6.aI#4=^.reTETkMJ>:Oh)m=0WD!^=B/3iXSDa&m9r-OqrhW1XTCh,Tp@Z,**#\
%bru2gN"l:%\fUuncrB0Y^)q[q\qLgH-;(F.U)\cpjN@q0S%P7'$'\Z0E(9k'37cst^-hlI.Lo4J7IDemgO2b:D:&YCLce:cqP!,5
%Dttgpl+qni:M1]@BZHOY(creOf.D%6LT/DkgD\33/f_Oulg"HmU/2?Mg+!?#3k[KmD+NrJNJiajHtZ6=dh3fC+F[OXksQ]CS-n>4
%*D0b8GZ"u`JR59!Cs<`9?QSt!&u3dQfB!Zp8/NK6@>Mmp@+#RUkDVYi_ruH*MUdiK0<6hr>l%<\.<IY:0cXsD^<3#T&2\G7ClSiq
%:pnLAr7:I15u[rD#CV2s)Su,@ha/0ciAjmN:(aHS$^tqXh_L[=X1=Asc)//IGAU`.ABCe]'WkA\K;#7VNs7_&k_K$)5[d^KI,X)+
%*+FW6+$rE]%^8Lod!1//UN\B0n)8#,U3KQVP1+F90U-g4fLm)U_13[nfft#FG>ajX)'FQ2"DEG'n_kDk;F%QlJ7V?aPmb9@h@%P&
%gTPND+/'YJbu!QP-]4\FD`;?M'\n@afnS*:oK/tfB("'X$bo#HTrd&DOuE]s'7Oh\35YXtDeGR(e+$7I,#1/Zmun(:AMn/]b]@+M
%'j]A*h[AbK2ils6i>g(Oi")BYEc<UfbX,i<)=g*EHN.AO82/Mr@T.Bh%221[%`<fGIDX<iOi`C\2?WA1-?NDieD0FN*lna\C+=T]
%L(Q*ANliTX3W0:-Srp+`=J5na4mLN20[6G5CaoT-9%kikMMJN#ZfM6L,b6V#=ItT_34_TpO@6_hDTu!Jr!qu4>eK,LqFD_ln%4D\
%3o_X"W1s,L9)/He#%b=13:$[gEF"&t'#$N&_OujD6;D)Ls2[!C5OCAV"+:#+iK(>;OuTOlgD:3q!Wk"r"8s<Q#c:gNO_#@7A0EBd
%IY/Z`nNS#Za19+bMBmLYP<]S9jM]hFNIc?c\l?s'PJ^dI2c+)TILXn"Wi?o(:2M1fi99e/+/D"!b3\;Kmo/hhFD3u3o`mbgd`nr,
%+-[)0o#pQfLCA0@r(Td2*]).R;iZ-rpZQJEOTb9C>q"1Yl\0c\btLHcV7+Q&pd1D;E;)Y$r-l8F4mnWViF$/MB1-ClEI\ip0Y?35
%I<ojZPDFK-QS7b/4ALnd0%rcD=-(mig]iX?"F<#%KmX!9<#aBl&`W53Y9pZcKW]4?'OrBMgj9o;1;0;KNJA2<f2\c3k_L\.\CB.8
%Ni:-l.f?ZuI\(S*Knq;M"(T7TcJK8m7F=<HNs?S)!,&*an!)G_B)PUon[L.lH^LP:PD<S=+V<?Tr>W7tZXaUGmo*lg6Ff1WebkMd
%1'j6*\.Oe#"[Cj.GUN&[q@gN$9mVAO]TT8[.9eps?5E=r=k%j6;0Hqc3aUs8h7MppSWN`2#J\sa,p!?2^5@0U?LfHK`<+r%&7>1'
%TjF8Xp[KgV:j,":A7OOjR=6K5(a$b7E>kMZNcb=P.UPK'XD2#55j=JlgDrn'Hn:"@FEbInh3JlYp1$!!q;\aS<mN,`13Pl&0I8,D
%Y%sX9(@`Y2)kR5jk_r^K8q#-&>i\f!:1[=Ip5BQCfG[rj.liCCW*DPtHlf&D@Ci2!PTKOK#/fcqF'J19^;&DkVcIj3FWB+jPBGe)
%+^kWd`GTC"(YbeT;8qJrjme,8cCsFSg#SHMQ]5\+O9)$,rsuE6W/%T8l'+l8N<UD8%tJ.:+GuK:Ye'[T#]./"^gCX#Q%_!IQKQdt
%(E\mAOI]eRot94<$oW8-ItBTjfQHNSkPX1:[V:<h@G2gtn.F[B0T"2DcsD"'hUA-]&GA8@Mk)3N@":<B*71mC2Mr,rWBtM(9R#[F
%+AQg%/D,Al838._84%m99:695OWcDk]XGqd+#4`YD)Q!W"?q:^Gi+&n(K:H<fm;2c-Q-Rc&"WZ5TBtY'UhfrVH4:8hY5PA&FMs8r
%W&e@?8tBr86f"JrdI`rcCQr'7!%Xj6S-p.t#q;@\+UH\udMV!_.(f0$=<M-^JkS.C=p)A"\H.N@K(3&E-m47>nNd;#>qrSO]_"8u
%OqHF-;bK7Iip*4?KEt)ub$dac6F;\K35'O)T^26Z'`%[/-kM^Z9?<r$UBO%=belg_nL6h>+[V=U"jl]:GPP&9U4-@Y_4eLY7(_Fa
%]:NJbW%5U'4\MGJjomcV=:P5*Sju0lVA%CNoJL`m0g$)q2Wd!@TLHC(juu%nc#KjQ<D;K'0O[JSkooT%:hV*T%I$EFZ?3T[d=`(b
%rReYXR^`@g5TlfmNqkZ.a[,iKPDFNU.^3#%%q:BkGUEMQ28k8\5=-!eDQ*:FT,'Y_%LH!c,Y`t!N_g0qo?@83:BH@53/S!h!!K7m
%+iq80d@,5A!-hI-SLt7YJ/Ss^6Y^Tbe8c2,;1PSe@_8ET6(3^;1j4PJNOYZ>4Y>NSYcX0h4X2Hb+ZdLQ3d.uc-M@.7&hA'#QUcaT
%BE[:G-.JuPl`VQl1Jc!/6sAE=Sg.R>TSM!oVdDct<Q1k!hFCSoH5!ih3:A/0!%J$.1l-)+^+-NnmKN4pUHc<t'>ZOjQ&--D'aPu.
%K85r$HA7.m=/K1.B1(!#P@WaB/0\BJFDDDOJ'BQQhF3#)7FC['Zs-D7.A>I#)OF[07VS^7W,_$")$TM?-USBQJ2c.>aiCejN[g:@
%YhE`V^[:.Rp6!jGfW#n&<\\r/8$DjL&Sb[O$FE\@eOCncTHb[bGR4Jk/!O\-ir,h>W&b)51;Z?WlLSQQ1,]5gNshX5+Nco2i#&=W
%#b*kMe^9B)5fXP+)?iBJ)V2G^gcF`gi\[R^/(!9&;goEYC[iFn,&tGEcL-u6IIhG:Y;6BIq0Z8j*2,NUo3Kk&;Vf-HJsRklbQ2j'
%K3`586BUF3B^bp@h4+IE-]!lI^l=.1NDS;$I+\(C"DMCOdsaTG8$]*7<)EoNqeWJrUOX-I(8s:f>nG7'PSdrufM=L-I-Q,'B)nZK
%k_1W1G!Mt>ZmZ*NbmuCHdJo4WYPu^tFR#k,ij0HXU(3%<RtbI$(V)+.5%$#6ekc[-0DNa/gn-Mn$,c3^9DQ2f=",*uSgiSDBRV..
%J[9uM[G0KEg%#N8S;Dd_K<^p9%T"O2.j5S0!4@,e\'5TuahiU*/HOO!bcH><LEKKh4*d..+@D2I]ZbK`P6?QIZ:g48KIAn[f!eU5
%#W:R'd!^+h1hHb#]-SR\o)nPH%7i4\HiVaH[?-Q(00k@D(t!6OKeHZSG;"C\2eT5M8i\LApb%WMBlT'fZ/)I-4$kqoT/9t5.RQu[
%2%>j&bm4Sc).'T'd@jW=Uc%m3dAO7HmeoN5=$-=N`pU4K(W!uu+^lLU/N,N<0jX51I\kh:'BKsuh&WorSEC#\Jq-C<#Lqmk4OS@7
%BkDP#Gjqqi/dr:u2h\&]"+QA/r%7No&^ggi#i'TVl9&V;nnli8M3Aq?;h3rkY)@j#i#8'nf>m;0'WC]#Rlih>D7]AalNCm'dj\5/
%5IKG](Dh9kZf@qO5u)P3XVrh831tifJB#P8b#^oY>ejK5J0,n&;O>.7^+P>>EC/DkZ%CPA5iV0sn8\0sf)#b%'t-nO>f4p#)6,)K
%S)=lmJohopWiN`A3_'KkL-fF"J:*;=5F$Du"lVQi4S3DigFR9+`fj6N>jQj'ck3ne2t8jRHA1.$_HTj`@0'>G+Um0kQ?pRkUj12?
%)[9>/66Ysh[AabH&49.c.1*3p9BgZjl;\oLo2@7b1^/)l,lFc$,^=fH;fI!sj]f#VO3i1J205#8;7Y0fjMfD5?/jCe(`ogY,9B_$
%[huQq*nBg-JA&<3nKJ@+YImX+F;r9UYh&.!EOZN>1=3rb#_i_(f]&5?Go6MI;>_1T9c235&uF!ucI8S\n`oMn3b,a.lFJF\\?OM.
%VjCZu3=f7[:>Ls0FSI"ub*dcMU9'C%%Lb]nbUcnVcqOB2$i1'JfhoXMfKLPsVs"+^<D>pRNr:R.[%H9hR)d][$Y<j(SN/oF;qWdW
%0Z/[o4T>'Um]5IN_]<%i0ZjT'EEdi)r6RKsOf\FUn2@@fY_T=/,_e5?j$t+c<f6Q*m=XTG-j`a:lZag9O7n?8Skumth#,TemLES/
%/dn8-$TLO_Q+sD0T!]^eWj!(I2.H]g[HU=T?@G>4n-"i9>3`Vd,$Tm/.7B3R+VcmSX=eM,!UO[p#,S@#+JnP:kb*8"o>AZJ_:6H`
%9*&6DaJ$=);q-KUkXhW(\XA*S:tM*@H\P'9LiMe.>u57-_;D\F&8YYt>S.A-Up4RjH7m5:a4H9TTRE(^G?t42$Nk`4Qq[98fpZi\
%aU\>"lZ^h]\hfq=RkGF_Vgb)hSj$dG]<!M?Zn^=>]b(S'j?8'&diHXJKtfT)ZW/.Q!HX).))SQlRU"UbF@a)%)"$Np:OR_S#HoTP
%pi3&!2F2X\$CtuX04N5eY4n6n6cW*D't!hU2CnLQk8m=cDE(:^JI+ZM$[iK5`s`LJ.Tk48ZRY/#/8V^VJ)(iRPH1*J2!1]Bs00KJ
%e-4WWK-ns'eeWN"mPI@a=cBmI5(JZLINXR,r>-H*jnU=g^AI!!:Y-:G(/*S6YF-UB`<ZChP7qb4-PRX)LBd3(\E8Re_go_j'Vj/)
%Q7<N=*HK*enp#].s2GuZd,rN4hY]IqE,`"u"a6![MK(U0UuO1(O(B5onU#$:n1Ad\$9Nd&EaKpK#d)Y8$_e95HuG[9F:u,#qgeUh
%P]:A!DcdDj3#eh9HCus?Stb(FI_H2DZ0\jdm_(qR0a4"Q4"`,W@=T6RmQQ["Y%A'=QP+0gU6k\&0'<,gY9u@B0k_4Qj-SuV1De<V
%O%Uqh68"ksdTE*<OW1geWS,,3_K,q]B=E?Khl%S7;`)BV7V!%L?bQ\K'F7=H$F'+USAq7l#36U-8/aiPa':*9[c=[3$Y(kdnJ0Pf
%BHNPWINJ=th6oMtil4CD5Ue7ZB=loBLc=S+ZTi<?+s/HA>#aUd6C<oSHpngMO,P8gICE%*=>kF0+9aiLGlpb3N=fq3b/&VfUo0hA
%9U\s9Obeo7o)'SO@V._?ji`4f/LUWA8m_b:=ME<MeIibAi+1)/*5kNBXUYV"66t'$m&$QGVcJe!6Dstkj^@")=8m/4#<o!a%,6,8
%dW?W4991mkT*O>q5[4O3+OPK&B*@dBWYTl!E)'dk:@oa1TgO,27C5<(fH6J?A5@n5%^8Y`n<>2u4CJMNV2H-h)_T!+9%b=lN*[km
%mgCi<nG&YDrSZLbr_@Zb3o;[q9kWoKq4#D&.WTF0NZB1)=EBKX'/@R.IcsJAb1ZQEjepkl:J[0qUCK?;!b0eC>=-"1^ST/5(A"fW
%D\!jd>^0Qk<UiG0k]$FQfcToV8+*IrUdg,ep)T*o[ke+)aZt_o1D_..$Gbmu'LXf2K/c>rj>\f\a;=nY5V7P*CN3Sl76lMm.gVGl
%DPoL,&1]mG<=jq@^ja47o)5Xt%jjd5D>H%4LcD-qBMaoea_%G4)Ue?q;(6i@_Pl$^=OU7oXJn;@Jdg"*PCG^QLWpk(5K^#UI_j+5
%(oDPb34pN)7q/OJE)2CW-3+DSK-2X3@6<N&?RP+p7=t6^SlY4QIG?ZAAt8RNj=jHqM:1KYW43pE/IWqc`]7)^M0k87g`2aN$DZm1
%1FbaY`G*Vjp-V"J&D,)Cho`^!,>:$_<"j(N#g>OHOa^I5:5fFoVqQR<qC=>l,JDoI(C///]J"a!p.p_WVVj%L^8<4p67L?M'q.EI
%P=?d]:lGhRG_T*#JMsfrJ1iYdH&1fKm$C(*"Ar?_a"+U+!+L$p,6<%h6T..^lSNU]<h4UO<%+\4Je_iqK#"sW(DOlobPjNo?r]`>
%*q7HgLMWM:fKN]=rRr9tN(eJOr215+=OT7R'H$NKGe5l1M.;gig8MX+.s\I$.@n2h&4iAbn$'[l)[nJAa&JZuUpc5Vh%.89%)QqF
%N5m$/+W;5U26=_kV5;,Wf8[*E&VI5]KFlL3SB(sA4cD,Qf<k>SV,e7DcQ!KO+rKh?ToM!LGr:U6;Sp9M91h+R9N0&lTFO"X]robi
%^R:rm>2Rb?&h\XNBPf:S=\')G>I?5AI4Xfc3G?'UX(Lu"*I8IC<P:,#p6=S>X'f<MTMo/533o&,rFBMSH<HIVpAn70UPgaL%0M<(
%P^>,-?5sqTaO_+;0G[V\+jS]e%D0RU++!h5Xra&QI'mp^&gX*Im0UOp<M;]4!(Ola06(sZ7kf?dL(nD4OGU&F6-VuP!:*9MEpb*>
%F&)QVl)K;V$AfA,42FHZ%'FfX]XYlY!&s#.qTo6:9/eG3WuIC>E8Iou3,ihaOjiUKrd3G0J;[O7JOMm1$LlC^+KS$#(oF'A1[%iU
%0=>eq4lqj4U\NfdUq-%5qbQlT**(3&U$+f3JgnVZ&?ao_AhGb10l.e<(T:qc0^iW=rm8^VeEq=cN9rg\fB8be,e3Y1#!<,(_uptI
%mn"TCY)a[.H4Vu.X&EcZ_H,,-TAL9XDu!D^_H):qHiDL:LHY48dV,!3j\)%.?`)=R8;DGI6XQi'8g@;@Mb>-/WI`Gf4L[Ybe!9Io
%4<eT@l5ho;"*6(-.$oOJoaDQr@.QD+dG.\;8>JV>!,1N".=kdQ7>)_n3MEipFk$28(o+*nIc(h'[E7Y.gFa2ISabl?Wa4=SX7Gq(
%3:)X[\#"1.-`m_a3h<J[[$1XHceV2CS,$A\s77,P.>>ODI(8=QCdPrOdkJII&E(E(R*%Ws0n@YEMA:#UGd-5Tke"kT6jg6@8Ss7T
%I%2*Y?`bd3AA%*WOa1/M%o<#-7Z$c)+f7pM,nagC`d(K($Tps@e7CW2W^?Z^0(Xjis0R+Brj;rAZ\QNO2u![Ig=($Y2mt0em0_KN
%(`E_ZMU%IZ;d<jns-lGh/GXK8\6+fRMo:?HfZgEZ0RTH13e*SZ1lM:*ms4:SD4oCmS$P8-I=jT`>i;q>0nimH;[[tUkomI=:FUoJ
%,c@9+$K]MY-Kpt1[L_#)q/V=Rob?Jm.M%K1YBI(@VXDYP?[Me$g4@4omOr@AIId2.ZR3GpWU-4?T<U6K$(`r<MOZJkC<r+$]9>CT
%T:S?7RYjd@Y!'\McrB)mcjtQNCBo;]oWhdJrFMab&k]84JEll*I,CHEN2>dbYSTn]ENZ3=H!Yg1bsQFJoUPW@=^lu'h$K[t>U?Q@
%]_;7N>mGK0ncqZAqC-D]*,_"dccBqUVjfp78=;n"5tsJn^\+^*BR=p/(3G;Q=)4dL1E[#`ORC%"9$PBb\!MA_ptgEc<36,N[miqX
%5+I/W.Z.T[S$>26RMJEd@"9+S-PP",%%gDo=+[/3<aW.i*DA\'U<N`/Bn&27ErGL_*OiY<92MWITgOj*@d7H%OS%t6EX59FWkB6;
%GpnU866YeeAl;lZ<LV3C^Ae!$rui*\PRk"999k7A%jq9L:_tRuDga,-,&=9ZILmR]8;c\S$ALq%Y%Fb')G`C%.s.>Rqb6Apacgo4
%'N#[P]C4>[U4N^aV3^&^Fpt7I_"\0S&YOSYc%2B<lT48mRCerg'_6+W+Nj?$Negdc8Ti-[#d,dTE/*l]<J4jO:O.'CieC?hkBb1k
%2Ej#4DQP!Iog+)><Et,R]a:5=>fFs*]_$E="[D-)!KZQSiCLL\5G'E4%hPI"h)=5Z7G"uao^.`OpVW-.'B5SG#dO"hAd5)WCDOB%
%=3FAUGVG@5'aC*=#*5oj"2^t:H1QfjB.iSJYJ6LS!*V"H8\`8fa9)"!;$=GQ@0jjTP88g6I%FqfS.KTrB22,b"M]SZ`+O''Re?O8
%2[]KlK*Q".:hMSHeuEp\IcdV\l\DN^ZaeWdC*6nBFL44PeFiIX.,7fPln2MPUI-rST?"/[gA#*0&*cdgC(l7M8c81dX:2X;l^WpN
%Vj#D_X#*4A68tBK%>[KDft.!seV>R@LX(3+SB[!#_[/*41'h&T`o3I7r:gii?`HG<m1L+p4\m&j4b!`)T-A5eE=7Y=rHJXu3BU2Z
%3"tKX\`sW[Mf:Rnrc!!38pfg(#6DPqk!R&2<6T!;i?l,Ap^USbNdSFnT+2CHSsZ?o`@.RTi^l))BV._*bdCZH%N&hg^I7?"78f)!
%MC$dofVb70U7q1VWC+#5+8R$O,Bb+#7T>t.4lL"Bp'D31.28`M/W=8!XhCsbE%`[OR,QjZgrprU(:F$n3oNHrKW2ogP"_8o%udQ"
%[<)=(GLIl;cuY8ieO"jXjRf;p:)QJo-7k&$RorIj5m>I$ASS6;fVd5g@XUg4Ko&lomOBu#Y+0o4kY>dj<#u<4.#Y"'"8e<o,[*3X
%Res#b?[Jp6pjZ]!rVsa,HV__=R)*+ipkqOM1\9eCZ)\:H+,!iP/R[bZB>jF.3WlCn`O13;E>R3,Y#SFZ.*1MrIbMJdei#TkTAl!J
%U%$aH5VQg#2KQRYnu@LXgtAcbnd>PlRGs2-+P#hrd?:-i&Ga_pn-Kg>aZ<sQ!#P[4^=XNfJ]an'5D:kD4eln7TF:)UL:Oe#0ng>5
%&Tc?"N*9B?nHb1iioKlKgctd$VWD1b^ChS;mnJdliJKn50>j.96H>s"1sR\P=u>M@^i:cX6Il@2rT(+J;;<meG`+igaI.#*&.Iu'
%p"V@c#[<<:2hECIMYOg4#6mD:PUARM+Jj*i*GQnaE&M8WV/3<qiIFMj,nj>Pf=ZH[lMB[N*T>'!Q`MJq&)[f7:a3t<f-)@k%9=EQ
%)rX-bc*ZhJ%s5.Mg/WRn(mR%Hk\d5)*H8aFCqSNa=8ITD!87"!,(nh(UsX<;!Q&,!++=>u8gk*S-S9-a"itQWKJ>'[L!9u03a/sN
%F,nYu6Xbd10m<Hh0S,$2;5YHI7"]tEUQFW6/;JQikrFS)eH=/JEt2of)EF&p*sJ2c3'%agM;L%.o4fV"q?=o%VMD^K"!Yh.850eJ
%>R[WKnsr)L&od'Dr,.+U>\[)u)&nW8oVnh4JFG!%nT63b^Y>mj,pt.KTBO!kDB?2p:s*Aj#Hq+<Mj$^Caq0;LP1HUfq\OO(J,d#D
%hf.Kr-Rh4-PfEBj$A^-%ObIG"b]Uu??63icI6]An9f%#i1'/,0@>/#r\P==GddlVu)<0-;d$nSmB[rNdfsXm_FPqL1hfuSka->.^
%D;Zo>B97gm?TdMh47uR%mpG_'B&)/T`qde.f4P]/6KA]r"3<16TbQ:(M:Ve6P8pZ46g)/gMK"Vls,N[i`hiteY*aB[7iD+JI10g?
%aH&=SA('RGi0`]Y9H\a^FO/#UCFb-pr?[joX,+T]k"igLCnO>i%E=r%Wl:G5jSD=5jF3@#X*G`Z3"-BR`IBT5'OI1ADNtjFj+aTI
%p3>-2&D>/5dVq5*M9$VMl!5]8M58h>X#^H,h-J=9h5TV@<Hm3;TN;h!:Bt0VZtsmI-]kmm$/71n8C9u3AeqAUWa;5\R^J%qKLrL.
%<t849*\g&E`@Jls0]X(m:3>#1Y#4H3+BZDeQ]fZ9SkpG^aKp-\(C^&;EZ)mi<g;sPMXDTp4g^l#U;iL7j%tO<'UVjKE#G3=Qhj,/
%m6s5P3&6C..:M_NX)]@nTU!H\i:H$(h]76/;0iF-((jm7o(4;FE3X=&R)e;'9b#?)8SdQuqh1YEV`j&"kO&6afas:b>n[O-*D)!A
%5\BjRM"TsiT?M>dkTk40Yl&]Mp<3dUFt#!Z]5VHd+gd^,>Nrgu,knRJ<_l^YVHaG;.-6p$EL)EIc]+ICPr%mA?4=d+mY+C;*lq-1
%C\>Q/a#j^)mJaNJml\/LLRobSg;bWT;(UM?!>3?DH70uuU.`2d^r<B!:Db`0^9o@JKtlJefh:dj*XCR_>f)gJ8a0(dWtJ_N4BNZg
%Gm.bD1qi9<Lj4S";Ws$N'?Vn_=l"37?e6#32PFqJAU4(+;G_\4M#-%l7hk)($CgPMUd(($V@6e$9iHqtZ%pW"9G7\/9P=(%i$9SW
%3a;@?!EB4Jcuq.j*,>[.,CB_SO>W$b&>o',+h.&lq'8I0.n8K(cOe$<SbZ1Y2L$J7g+Y[="ra"Am1#3I!H*+t5)@=QKbA='_jE=_
%lJBk<ju#CWJ/\^c$Qi*I<ZPp911bQ/Y"6EQiNX:_$aM+T5G3A@gQ(Gt)hL->Kk"%`$).5Kg?1IKmjKGj.HQNQW-5K,I5MOOMQYL9
%Zn>4uXsdKlSp$b&=F*SPBh"6j$<M&d_-C*[DD_O_#H,"]fW=l&N8bGk5t$G71)2oKUddfJlA$YF9tV+J&Aa_Lm[8$8b:%P:h>`'f
%k)&($f&S:k^HD#p61OISJS7O0i/aL+M74N#4NOd4makkeq9A_f!LGRf==-:Hn.iUT2Iiu8hAB^c>:cm^pYQFt^SbGM1;)BHSfQRb
%F&rC0_!^X1Z$jT[UG7PP&Io<9&Q*(WLY(\8L5#tJ<PYlm*tHOXi-`WJA\DM*NtM-%Zfgf,"d$RI6+!Haj"#r+;iT^n)Xm&3S>l)Q
%$7R%OcpR(uVS3r8.E*O--=Whbg;L)o&>C,'bE-+&<V2sig*&58N5DPk0@1*#Y4W_>a)_3ENkp`B6NVsZd<W&c/l>:V4iWC(@SeN7
%9o8,W8]<eU_\tF09l>u"+q`A:l=?kaCu#3J7)/EZ9>iMO`OQ%CW2E.i8EItrqm;%@fTYsVh)ZksBq]k]p6B:X#_411)d\tl1a-I+
%J$N!L^BUcX%c8I)"J4_b8U/_"Wd%X+9IS<h`DU."@H7j[/^J^6KQ\6(Z6]RKcYrA$9L9?@G#?F0+9*N/A"s_E'S]3!\rRr"p019A
%"<7!V@mq`,0@*U5TbS_%[1esW3Rf"?-j_[?ihtD,@JEP,$F6^',UW%*S[A^rl'J=3^sZ$%VNB52jMDtG-[7Lj(7@5Ude>\l<DqAR
%\eDpmFLfg2=,UGl.psq#LNTeXcj!1@#ei"S*X(hk,Z0>F=O1A4$Q2M#H5aTWEl5LUKS6*!*oAXbRY?P>E)GPQSfH7uOG[D7J(5TB
%.#t^4o2!9sS:'=@U[jCf?Vg'9m56dU.8uq)Q'%-715PlUF+UX9go1hpRp8g(r+K>`(m9&r'K'=!S+_qCi@h1/2E9c(]*4s69TB:_
%?u0Jq@PMUPEd&cC6L6&D%Q.=^/](_?aH?56j%4&f)22-/fc[5fm,L/70D-RX0nc&V$dm$K&#5)_hkb$q6q7]q@6/5qa2JIs\fi["
%j+%N>G&9#E=G"$,L40ndDlu`ta&l)oUe,5]'Kj8W^r8m?"'hCXiXm)P<ILNb==GHhWfpLFTr556IJE`G)b@`1BA5bS]cT6rrOj9A
%gk(J]GL5tX47b%:D%.rtde70jIG*+?/b+GS>",h*<r4M=f7LT@WnJs25,=3cP_d52;I-<XfWr$;oC:;/*(WLF/D$KOg!3UWlHW&K
%hg3`1e=^-G,C"D\834T2A22C63/CKB4[&P30\#ln/,6>?9am]t+dtp6N>W9RUW7uV6C2g12B[lj:\:s-kD-G'jp8j$[<Y8KQ4,QO
%\ifdA17;;24@)A".4=#l>b,Ng+eqQe'4uX0(@Nqio^Q)C-R'%dDQt'lKp@R*pH-5\Snb;R9L1PsAqhXNk/\$ILkJYEoiVPHY`+^k
%LD:=Gku^?^[nm7SOY@[(/^Ds,pcRY?pL3=<HB^U(Ul#%Gf7<>ZWDu:>(6]%f@4%3g@n^Ga\TW('S#.@F8AB5ae,9X$"5/9Qk\*3b
%_Q\AtnDYcF"klZTIc-RR"1k`C<)p*[,.Rq"a(#'<-LCUf]]J0OJnbD8][G=V%+?k=X9Vo\+e_;dZ9Zm`lShldQn!;NGkrlc6S8Ki
%`2QRFa5q94le\:6iFNBk2_>$JBRPEiJ7_A>U*T'K9sNC>s17%DEI8RahU$5uOg2l[B2&q?=sm!;Y&"qtdKsoDPfaXVP?+pX=4i#T
%Vk\Jo?1G?->\UUU/rOfg&P=ehm$,KLdpE@8F@<A4c3K&fbCf2P>ma8HGt^$<qJ!E0T8QrVW]e7d]ErV@Bp;p.oUWPpCp\TnAIs(]
%QfPE>+m>/Kp4k154ee8q8KLYE7_Gt7;md`#EN$K9A6EU'QElAS,E"!u]=#a7F-B#eJ_C;uAe$3l8)-fH*b25;A4$up$#!gc+&"B*
%d.Y2/MRJFk&jfA9BD[GC]s`\kOUd(Eq1GHm:KPP..iBFR#TD?=DQN+D:!>d`E)"k,LGN0#I],so$7+@K.0-i;fKH)jp]G:t=nk7u
%P^&]ZECBV['MfZQ.WXX%WH*Zid9<i)$6:&8L<L?hRt=q4^M^1o/8X<YkfoXb`'ik@gCSE-1#7WKcE7^CWjd8^0oll(aN"B/p\#I@
%Lom8]DRO7tSM2<o9$na0Lj+sajHO;s2],`p=O#bR(*,W0Un!X<*9:<8o1jD-.:ApCDk)NA\eH1Cb7*Bh.aF,'/1**<r56O%Mtd`]
%$l*E2G2^eqGo\<:gk<5@V7srCdTlR_]!P)%h?!`4P*Cl8U:?CUcIrBLk=o-\a%s>/_d)9>*jmYG209V%3qUkp\%68Gd--+%)^<C*
%7MWcY<aR,-\Ak0"X5D*LO+g8k2O?Q1]5`4NOn`g`nfGlK8=`1O^2>'R^P!&1+)I@>89\Q:OVI_Y^WrJo@>(s,T#<D!mn^#Y\tfa%
%;gWM)%S>i0CZt(aH!m>K+9$Tc'XW(1_(\$:ZoVYDr)Pa_Bp@%:NBN^><_E.a6kXV)gO5s'4/B(XD>fODbtRom!UDm)]i)Shp04sY
%$3/]R/oT2lcYs'fj+?Y&;UnKJWYqhJBU6C=d7qR=\NDRk%;qb?F$QA+E/L_[rt:>KkHhr1jdHuHS%-UF4aH;`4*PNL3]fOt)"%<f
%iN#';gP<DES!Fi(l!#oOcn`u>i5>L.HQL91l=#8*#hB9udKptW=qDN<Oh$[??K<*XAEfl^>(0VI)lT$^[-a*?)M'X8prlQ/o/G'\
%&Zl#:3)Kf$OMZ=)<HDPf1.Y#@^HCj,b5uP%!!0)lHrS?ip?EjWmY6cF`IoZdH8!/!ZLA51%3/D?&&jqV8;OS%OQQ[76r`M?kS#!!
%eEoj%5hB7jr4E0hZ^3<q#oUH6XU[i<%k"HD6_WdU'N@5ffWJjbCoW$QMjfPdX\@!I#PMlD\T/C[T/JofF--dP[3p2WF;:3)o[<KC
%lGBE^^d*S9euWs=P;sX8\!Fs&1+Uh!"E^f+(FHL/9!>oc;;uWf>^4GPbs;LQ!YXQlYm%[]kLO4I&(P%*jHhPs&+NYpcPLt^/;,3#
%DH!Q27]JP33!u$&1B4Ms5U4,3_<Vo2CJ;_;X;SVi2G!B[S_j*As)4X:0Z;SnB![)4j%uQK02Q26f33o!S]mI_S]Tp`lTPcE*c.R8
%J@G"Na8<t.r?#JCGVVe7a)duq+ZIf0TBH5+3uYh!o"a,;h(MP3EtL$loJUaG_pDG1/5-<_:p2Pt-280#9.CNN448ndasX(4L]%5$
%:ODRmV'6S=CS,Q\B9\dqo@!5S?II;pnp*f&(h#\:XFGIq/1nbtEnWSjN-CXHaR!1M]u_.*\aUdX8/X9m`h4HL$"^hJ`FsTce_.nB
%dGh*%m+1;Cf(ngeQW+@b1o9%fA&Tl>p%a46308FsM]Ho*\is3_JUP,s13B@b_YPYR@5(#+]!A\7D>C+N**IC6"dA'qPoF#keF[6`
%GS;+Za0%&Kh13P,;B^l,o3/k5L-^LGj!EP+fuR;@S7I2s9DXDin<PZNX>OMg"W;%c-`/db'EcpK/;lShku6k&"rlV=cD(\(]0J!S
%5`+B.KrOd]ZlXD*hXXI'#dRc*-7mc_i761SjQb*-hqtuD_<fPBa$K`j@7ItjYT;["5Kmk8qLU(ehs/Q$c+JE+M9DcS+J'7jmR(+!
%q@45mcaL`mLYR<IG`,L<Z*KqNb0!"7Ibs[/$SGg4a6DUj*R]o2lNM4cV17'(k,r`Ib&nZO"?,jZV'#P=@<lDKj)I=Fk&46eRMbZ*
%_RoQ:QiPm$^".tO_XooM<(0X'D_HMB6nfG!ER+/QkX`_#F(TtagC3CQkjq:D@K,/jUJDIcdm9UL`@m:OR*>`p\rh@8TKhc<KN`Eh
%8?gn[Ee-3okZsd[2R\WiG]fgSSfhq>ohf28EodV!c!2QthRrLXXWhuXIL3m3Di"2rOZ1PhIU:3=A>7BRJJc`dDP/(["HslaN!+?k
%Hfo.Wl:fBk@A`LOjbboT7*],X"TI@C:%huZPNB)kb-@M!SHTTIb.N<OUH`oPe'H3GlSOmtm6ddpOo1,8q>iI9bt=>:?uYP\@K8W;
%>0F^=c6/EXG@7Z]kkjuHkpGgYPfUe<pMbd%p9Scfr"Qq;_KH:dr=h7J:&gIMofF,fbKPF$k8N^2%dNn!$+sh6_\5MF4^8\K5G.K4
%1!%0R'0Tu[Z-X!i0![3r$U*Xg^<3M+1d:1>UlYB]OISNt*TrX0>?J%RTrX0R_!&nL%_m-*O$aegBoer/q!.r:ijJ2am[r4t>m:VJ
%L4B/R0.-\K5/nO2)5;>O3I@FV2Z9jdn..3/73<],j)QaDE4Qso$%,+V;.ZX]S$jq2:XM2k$.Bn%F!:>L/O`1K\kIW2n]L7Xg2$gi
%p1F.M;G004E)/F3B`VIVMT`03g_;Q1*!J,\h%Zan0_lcmg)k3idfc%e3_b.H9lZU%T5KOj!AX]^5#D_nO:AGAq<=-aSkO[qiJ!=,
%_m4ak]Y**:om/Zi9bUOtd[I&7jij!_m.Q_&kol?bS=X8jo'CHV/QDPD@EHY\0'lI4JnI/HM5r]k4b)d;!VMbXJ4Uo5fKuh`_&A9.
%9CdZ8-bEO0(C8ai6S'K[JD?Qdc4OJ(eD-Uu:]qc-eclLRAuntKE'F![&8a%1KEucOiS[t@'GVQDi0ZPa9U8o8fC2&b@\!u6]Gr0p
%$gl+"-8PUoU^?rq5gFe6o2PMS==>[SMg$lD<^fh<p([en4@V,LKs#Ko^LkR=]k`-%:%fKt+(jR%c@5Q7LR\!CH'cKJZb@qFNCi$/
%b=pP052#c/,"l-n9$hKI;b"fQc48sG-[:K'j*M)/GW;(1<L:PPY#L#MTJiV2L:h2l%9qcV.(o/b9P_u=Qo!kYqU5>aKSBkg^s(//
%"qo9o$4]+WJ8aQda1?j3CIAdX$AT1tq)Dq"!I\biM3nc&+1!s?FnC[@NsCOb`/s^jqB!<G5tD%nbCd`q&"8Xh)bgXNS"+8c-lh;7
%Imhk8OX.c8h>ZFBAL9+P_18dL=G4P_F-(K9NDO1"5am3jB,-6/VdoOSGsIe[!bKPn%AX%O@Tb%&Ql(s7+'VS%4Qo?08D9T]EC?6J
%=N>7K8n]VbM71bj![[f`!*ND]0*]YQs.hLTj*VG-)^;QNX9mPoAmg;,P=CHC/FDX=8h4SK9Q>?=.0IVteCK5!=h/H1PqEu@MB>W9
%lMT)53Eo&tU'bGtAt2kJ!%UK/7\*n'Q.;=peu?rF4uG_%4J.ZVmZB/9Q+!>bD*lda<S6ZSCJWjQf5gj`irIL;;bJIAM:J!XAtA6Y
%pA7GK0bO$g_95`d`Qu=mTieg-<e@JG/"+c-O]JG<p_Mli>Ep-&PQR]82LcM0T1-G8o,VW=LlChUpTs(e1Kl(30OHT1Nkn*a[rl;E
%SlD244r%NNlYlW.NtjKE99?4I<(%4sTr1O5%O+&@Bi;VFIEJTbm@1jpSX?7ep@bWSoPh#e1lGG%9Ti8NTOrLb`Apg*ZE)lo"X`jj
%+2),:K(pME@Mt-5MG'&srRC4H1ka1Sgp#[LW])%2XrB?M\@ODQHgU9+<pXF@"R/]iJc0nh6Z3j=Gh;P9e+4=_9QJa<4roHqf4+Sb
%(aDpu$Z`qPO[*=\3O#r)EDSr_Zte,1d&2IPgq`a'e;YmE[D-X.59Z5VULOo!Gfg</:p-OG0`a'9L[bg_A_YIJ\A48!"Z(T1Fl=eb
%O/>[SIqh9"P(V(OZB9SU>elCu1ROYnnC?ApD!K^>.(nZt;TO+A#*BSXbO<*=[uk[LfI?Q:XoE]u[[HtK_dK:%69Z,er&2XHQi,hk
%1F6c7m@gnA\^6$nl;)B+1_mQIo\02W^U/KdkiVca_%Fc]26EmS3Na63DbSSH;LZ@R'"7+K(*,>mBD=r'pf1j3MMG>]@")+F%kH"b
%Pg,0=L]S6SWm7O^R>P3sH0t<D;QTl"&a+<tBQ\nW1joQBoN.RUA&<7r[4h6IR(&#/*$G1W'>2@,>t+/e;,AP0X?A7d%f_:[J@Vu)
%mZEB#=K[(gX.cT8eY1U/s6\4)XuJ5MlcUn*oK^Pr?SF!e*Nd<I05/hh8>__=YrJQ'=QOD@e4PnX<HV^.Jgp``o[>&?)H2b+HW6Tp
%g!!IWlHO+bs6e6kNDsWg:3jRBEj.(GCnP5E,UG/"9V<\&&.!ct&l</H9'_Us$]^cWDa=(5\%`o>jpu/?@Wojr>_5ke$_7`3`N=$j
%o_3:-<Q$[JEYlSBrVttb)WXL(QG928@`!>[`et#:YP[PB$FJ`>qWH-:&Zri.\Q!i^iQX"ZFo(?N[Zm>Co;frcjk:M5gUTp]h0JD`
%h]>uIUI>O>?aPVUdA6(9!N0R%Y]"K[N"9(%1'Z&U(i83%$[<2J`De*Rb,q:BeH[M=UFJ_Yi?2oW'!tg,"'Z5Un7l_gF8"k+qgWg?
%s26nr59M<QkPm.D,#r^!.`q7HqDk7Rj589#nkCmQpg0%0m1qZO\F2*7;jj8G$u_i`p<!B>-nHN=l).Dc$8$@e^=kfP["?X.E,;Uj
%-\N(mk"Tf;@@$US?ggejc[YgfpON0KPD+GF\;6(ATE"cfRZO)18d[XI&tZ7)!m3T_MhejR5F`0&QhLS.kI_Q4P@i#3%hAT=m(O";
%C=a-$HW/4HPJlMcVNuf*S8\h4Zr*4-8T%1W?"+#M)t!A]_YjG!aa.@J*QZi'r][3+I!g6.Jja-_n&Y46+=+/'>5,K_bJ4j&G7)Ps
%#<8SVAue0FnhAR.bmhs*Y+Cd6*17^28'C><RWDcWWDJuM#jiI""8lA[>56<KW5kMJ*q&RUQ(&%-dPk(cqEX;bd5eDN9EttB(oB<B
%JG2V-$N:(-_YYejQ2pXQ"_Pt&o>fBM'h.jQVS)g_g`qB_aRPP]4ekQ]9`$T2=0Ud@PuEa?3)Oqm%;qA3[N@^dk)Ya'mG,c;^qgQ#
%"X[/aE^9(;0u%o;p1s[43FcNG)bWPV%C\?Fjq7edIn]\7'JG*>GX]n=0_u6VbA,.PArH8YpTduc%BEUPCr]1U5CZ;#NGM6u^]8pW
%4X>+-WHd,@3[k<M%p,=*r/$GNQYd-SiV/1epNj1E<r1U_P2]fB)7)M#mkR]l*6/@#:Jk/<-5bSMWdU:Lm.hs;@#%XB&&etc@LWcJ
%f]>p%\31NqbYMLHN3,o@U(pEp#6qWsg"Q'AfSH(R=(E?8\d?Pfj[JYD+Jq's`Rt2`g]jOpq."st:*<1FCskAc,'BI^kRd'(FH9Q+
%_[(;uiu!oV,k=nY1Xs)@kh<3\Fj<C.S*Z9qDhb_-=!P906#FOCdiBDogUAj)F2Gq?:g5+Ao0SQ0&p[+#LO3<`[9!ODncYS,6K:'-
%AKBQF;eu!&Vtm`='`>2ui9A>L`e9Sm(.m:2mnC"S-jTVOX>3!=YeJS+J;HHo9OR(55f7jU,oD/n:sg2l?hJ&d^g0g-&UeChYe#_D
%>ZZf5%"WA?09:$;$mP@JY2n#0.lV$+X3LIpo:BS9ag7-578mOiX"sd_iLC8E*/=1_98c<W."$o6WsXlO3h@]Sib4>_]`O)C`?rc/
%Jk1C:oeaEpikTiY]*dmkpgL=;/7^XtI7X[MHKH+]1u%QSdiXT=n6n*kj?AAp]u,+H%T,\jn3b=.SKX=SN]Ios:dA@V-e`qX*00K"
%6o0Ij!&4j5+=>=ZV7ShR.W.'<9H6euEIpkeqi$!hV(t';7lc'GKL7g>F#X$"KFg9e%R^Y_pm0b]#Nk;n]rMdmp*8BoMsNNUDLo/W
%g75pcO4]G`OHQbrPdX]m"be%]V_O.&kO6gZ[JjB5bE]@r5[<a=1;+Y9nC?%M3*VY_A7AVu9M'TmOoD%kIJ*PbJm`Gnl365qD;Q\d
%RiacC+[7_=C9^NI2p6oJ@KR4*M6\&J-e":\QJ`=@3io_sYGW,:,i,n2-<-Z6XC/Ju9.u]:pEJXPN9Pk[GMIpL?HKstSU"S5(D!+O
%1K-46Nio73a):Xab]d8W2C6=QCZrQaZY1_[@&YKZk4'_U)cos8$nb$"o^e_UlMZYJO:T,/IGIn+2M2US%PLDr%nm)<s%C<&LgRi=
%/\dAZ-\PWeJETeBFLr?2(]R*^W$$#>Di^<R10:d!eQb\kh%Chi?;c^QV[,BC9WU8j1gBP!>Fe-K2*(-p`bs>f4EsC*c.`FXD(\@&
%E%!oX*gq>F:_/12Ht$(q&p@M6Cc4AKTWe`j&\*E\@7aU\0?"hHT[-(B7L#,2>^"7g`rJ/7C!^&2G6+Nk5dBX6"gu0%q*Rr-PYdiP
%V'+.BNHFm6;fk]oHX1>tg39p5aD2:;!,%&Lc;JhZN8fC3a$JL"&]4[n[K[=jMW,s2C5rotQa'bG\,>k:Fu)D1bAeDRRK["$V>F0M
%FUY&pBfo/s)`I/[e/*?L&f6sepGn`'TZQq-"]u%sh04loqL.`/l]tF_icaaUHeOaXLd=\i66tS03.'#@L(&A9&%)(tMbt>AN_^I:
%7X-Ua#4";Zp.,Gja/S@J]qbI(H(kb^W2Cqn&9SSpk*1$l!/=9HkCS9j$mu38'$=:?0P1f,RIGId8iVHoX'?f9&^Z71/UIOA]#t(O
%S8r&*`a7X93B3uDJEY?\*(/GR?_oPYm/s?:[[^4W1Y2*6PgVM?A]73J#37RNf@[/H2?d.sEf4af(T0#e4fUq%5pN^_a+@fYoLMW0
%(,J2hO@TN%YPT*1SHN*)PrE4@[>uDR@$[MFY!/jeb@YN'(E6?mf^4r>]EZg+Km/[T3h@\co(<<u*!oA"M)JPukF2hAOJ'-*QiO>8
%DpQ<[n(>\"3eTcX*]S8G1%sl;!JQAL>q%ngi\':`d$rYbf"-%O\#rn^`bH^nDaE7N\eeXXG!]KuaZN]g"W:rLp'5\(M2oi)f0ZJ8
%d19Mf"39kDs.jrCqUBOecp@M:R"JIS'?RXWE40YM[JKC@fcQ:B*ccEk(8%_pfY/=JXK2MtW4LT:UAcs+BN3:a8B)l_cM9-(39*\I
%6(]+5idJPr@`@snV((Ai&oR/1pa,396*TI&l@^$H#b=kg?PHH7]&'!To\tG=-&5-4B9"UW1JXS;pL1(+'D,m7d8^U)<E;"iPi;5)
%Jf+3!/&#6B=e0Br#hBS5_h:N7H?&4N_0H;L"d6!1dSFpaDbAa%>f>[lgC-i/OPFtG<QY)&3\tT8?YWj:g-(r1jVMV1W^dSpJ">Ac
%OB!rf^sbZ8$#eJV4iHobOST4)@m_%G`#ge;+lhi>3po==X[\HOQ_tdWb/mtG.VB3\<KGVDh'/%DIL?l>*f[chS^8fYal1,Ro4FnE
%l7:q<O!B,.#F3*1FCMSHSN3h@k&/Z\ocb-G(!*+c6[2gDU2.srja-,iEGe\I_#`sd1OJ=n/0]^5$5l./Xue&15RG,pb(b='o?ub/
%G;God'B;tp%]&eeaKakFLO$k>%oD6XN4%9Va+9A=gNFa`_<.6ZARFT;]Oh%7L&T%L($?.ERCPcO4@+5R5eG)_K-Is>mN9V:%>5Cb
%M!?Z%XF5etTXYrP#fT.O1jPq:/lYF_XOjS5_GkmjJpNW-VM;PDBUa2J5,^YCk_bC,ls290\tEutomtu_cGh:YC'gaU<][k,/+<4l
%Csq8c/eij?J<[VQ'39NB;C=!r&ih$=^E&3cf+#roi@o0YH49nDWJn=-aU8]6lQ+!"/'d`r84Oj:7,IcOXZR,C\%5BcAfbG&).]i%
%IWkF_o=W>tSX;q6nLqTFLHO[DZ<^LE'Ybop*12<rSsPcb-7AVbW+4tb'?[*qaBJE'KL)+>q6G:DDsg]r<-$i?Ha,P5>-M$e9!-Bk
%D--1S4,Tk&gs/?tA(N`I47<EN/NWLm[)Y1!q.Pttfsaa*Eeg:]#p]P(Bi?2:46['8q2&-%UE^D%QR7:]6])$(pCHnTq()*01Qh>9
%)p=5(cjg-RDJj5TFN<4%L0IJQfJ"Qp`Ol2(=#kOZF`fC]d]$<&"]?1-OcRTcQdlr"rRYJW/o8M$bGOU*/]Iaio81l=gs9M_-[eF!
%.>jA,R<MJ#i`GB!HqA1d.#YeUkXD74qj4hrW0P#o2W8gk%h9GZIVV?RiBf#iLd[rFnESn./=BFf4SLqVO-=1EmKAE0XH'eToetK4
%";_8`>e,7]0X;p"k's2H]@HqnYd\DUAnS9cmLB.+c]'*YYj%J'qRAXjS-+<G8Ka+9(LC][S3WBgYapIFqt0Y38\O9Y$(DBNO#:,n
%FfV?:eYl>%c)WVDTF-7XjMT%4g(nO=+gOK_*XK7?+$5[4SUG@D&ds;X#Nrk>l#>::H5OP&*Q;5O&d"^S`B+jb/r+305:r1AjrI4<
%<?_9H+=U(cb))lgf%EoC\H"AQeD;j.EhIlucV$3bb-R^Hh`_H,D"&DL8#5_22NnoT`*H:a^-%e153(#i:h>nn`Tf5eWaB1d.pW`Y
%8S9,M:eHe1aF.H_I=*Ib%eK%c,OFX;WtrDWH9(L)%m(.lV[M^C'O@QE,+%ONeLgrZ6+-S\i]A+`>W3`oqe=I'[PrG!^.i"S4*(e]
%'@V+YkAnX(!QqeIZ$to<b-Qm0*lu\CZhgJ=<tb;poAE9pd41i=\qqYHgK<sJrB_rA_g8Ijq(6uP#VYLJ]V40LX010UnF2C$ClM9R
%#X4#iL!(ZeSq)Dig1fFP"g1r0l1E(.Y6C2h>SLS\&nH_oI%hXK,<LQn:tPBM[`k]$\ckKRbAA?pl8!L(cQ)Ehm2b%9jiC2DG8ST#
%L4p*NQhZVd,.>8(TuWfN1a,NLcu8a1V#UScl.j.S3\:ELL14N>6%e9Wm7kD'h+iPB4[PkPEJ1Kp"@SZcJ@GT=5,KI#kWh4J$NO"g
%D,&WL^VB.2_%8lC(KemZb0&*8bP_h5d.*m4YEYC1g\>22GF0/IC)W):97W3#"3AI)2D&s,b*SKfN7$k%fCTehn1-_N=PJFd=#oVR
%,lnB$?]#3\$@)!saR?LJAF<.TIM+*#gU3V;hTB!Bnt&H8A=9V!>3FI^`lCdjs0sHOes-P1O7t0jA9lC'/1<RMH`UP5O`$leN\.St
%=Ep(3724\a][Eg)2dDhb(*jW&:(S]U&sT5QoX9<PJ><3@c8'L'_+d("!?EL[j=BR#7'PVI@d.WIZVZMqcG/]Ql*tBn0`t8ojL![5
%+!2D:0`ZT!mfWNm%c`?siCKI=)-LtuP*=C8fIk54,U7#X.<J[da*t#T-bjGqb/p-e+=Q1jO)&`ia<QJRVgC8alZ7tB'8Y"lP+Z$?
%+.&]u'7Y7&[Z1lV:?k47`ZajV5^&`L)$h><(V)\jS`r66mA,u@P^GAC>iLXTG@KU*>"T(]WCPLh2NY@T`@1Al17n\(&q9fsiLj'i
%Blh>leLc0qG\H>`I@rcPY@UPuE*Z3BTjV3Q)r7]U=c+\<G3LloG3.TRkLCEG*Z_V/Q&RU!60DW8(F[]:]tJmk<HEJ9.5l.7;V-ZW
%3C\..?/?,XA=bNb7YF&3:<`15EOR8f(t4QeCGAhmLi$*5__>d7b"HTug^rLLcaV(R\4aSELK`b@X_Ud.G,.**`(f['\8fBfY&'33
%]O+heke6DhT\5OdUXc-t41jj>WKK3!)Kg42ipKo;3<`F"B#dNB;T.[CjUd83U/NUi\j7a.95VuAlCe9@1"YGTfL/<rh`A-Keb@,G
%LYgM?:(*O3H5lZ-L'/"<eKG[)pLBCSLt%OgQa11;F5g@2h]ZICJ5dm0:kkVA9,jZ5%Y9f>f9LUXhuP6?:%#\"N;ZEX)3.fNVr%p$
%Ih.:N_-(@pXuH0,E<s=j8JK#)5l^2-f[1T`g0bH'=;Af`;Yu05-n,<A.D4J]L6mM^oY'/UdIsZJ')JjrhhK0"Eo\Mrkp,`1&%W@U
%;sZN+GRIg@qj!++X*7##g`:-Md;50CWM[Gd!h->9<hUVX"f?VR+7&gZfSq+lbqerHABTY!'ut"L"2>:dT"hes0.9QHDje^fG[d`S
%^aFKb-\aiIFMA/b2#F[T/eVL&DURX6hRaEIf&uGSdN&agpK0t.jF+BW5GgdT/tso+lE:L[0('7$IQu4Qn_S2l@-O!uAa'KgUCDFN
%79u]\du)qE5V,?F+)!'ikt.U;WY=7Nqpb27ZatK*JnRl&Y`*ZJIU"s9&4f"%Q/8DL#RkXr<Y/;R>Lpnh\ocd2_L?H-UF04'BSbZT
%r93[".7Rp2Rk]Zd8/3t)hu`fFUqcW6WB.oo,?+P7KKmXo$LWU<G_Ji;!Z\1slXD8k2IJWU5=%Z'N/[^=U`8VB^Y]*l"h"<^]<OZi
%mX?TScbn8Da+@o!IZO-M[,g'F(N!WufF[]WAd^b3M,g;=Pu>O[=L&7I-6-hfcqj_+f/d!8ZYVD&-W"Y#/pJT,>CtiBg^Lj&^]7"u
%83>q\B99*n1ZUs[[tXA[%q^>!*!#=\1G3ri;P=B%k35A;b+&P>'\<`gFgu??(!RIp:^3/E6;%^'cke74Kml86,WS8e`KfJ4UZ/:]
%e8uGbmO.[Kn8p^30g7_dIFSJ"Mc1M,aB5cuKZ[qbE?,=Yj-_;]K2B<I,mIY#d+,PE):)5T]QDkP'a1ioSZZD>CZ-UKh\eP(BaPh2
%hL`HOpn?=T*Xr8^,$]J>jf%cFa9:NT:t(n1f43,`IQn87PB.*uhT+`GF"cTppd'&%Fe`%diLa\gLBs/k!7dP:7&[li,sVC&=c=V8
%S3I#$0\7iVKo:(4HJ/p('%HhPa8W\hU!apJ-jA+91jJ-ZXn3jH+Eds]3*R@`LYeX;Ht,TD.>Qm[7(^N8HM0em58<XiRc312@FE&k
%7kY,jZ4m>%;IO5mG1`dZ+"3;+[)nhun4f-DMD'9A$p%,H-$rKajm@i].%PADltr4-)3?X'5Y[08a%Sgc5\CF5W^:s]V'SPn.86ht
%U=GuXXZ;Pe+R1-TH/@^P)g1B6cdj@R6>]X,BRB]pAlhdCH)<eKWKR?CNZQ#so<^X^(\R#oQY<kXptQJL\DI_l/*AQ<%<!?`$/Ffb
%$d-]@Ut-oRU6bPsQ$Ggd/lp^/?BHm(@+@8HpIa$J'oN3::St"U_Z5oDjVgG>R=mGlm?EVl"J[Ih11[\,Y_'Ze<=71j+a[l9H`e?d
%/13]3f`?(bGKIu[oNS9Z_QD#/2+A=+'+k!?PtOJ9P+'6($c+ne9hkPZdQ?2"\qAh\:_O"3@hRT::*ChI6h@Kr=hn(+:0i-jq)Gs`
%#!#"TMl=":4cuhRQdPpSV9&2$/hk%;rC4UD5]h:HT#s22j'(U\[Ge-3ll9I@K^'-_G;)8Oe0:P3:t"dE"ZbMn'iSnj>#]c]C^T6D
%I98Z,m=pRZ&Q9*ZpdZ\K3?9eJaD1&e&N!;9JK5T*2]`Pj_jmu"[4t^4jJ.8&R.@[J,[oJ5ZZ3+!LO@T_o_=5hp7o-q'gA4f#=,6J
%\:UJLI'3*s]JL%^-r/9:XBI"6/%No#?289;p0mYG%;*;+e(J3/.FJ`&Ut"?G7[]`+6^T]ea"(F;?7QDKASuN^YBIa1f]UngrQ&_J
%j,/9<,N15!qW&uXTJcRCHN<!:TYFW6E0b._dm8P)h?"Ak,$nfZQht3eT?KT?,X`/Y%Tm4=+P_Fr89_\T:C*.gV\e(;8;2`<I$&mn
%Q?\Q2%&D%:T\.%V5lcV(7qEh[ae7Zt4+*L-:bOCgcFms?C]sYI1mMO+eH4.[6]jh`n2c.0FaQbqj4'5f)CscjCKX4X5Xa^b\UB;W
%#uf+u:^n-)3pf!iCG:Y&EYsVX,Xn_J0`rI7Dos8S--km""Sm$te$X5hI!a09Vhp?9B"OfGB,3EpU@I:N@7['%FJ`5AT?T,ho^L5O
%DYC6'9>mV\*pe*(g@4('K3/WI?KnN164V^B0>>LFglO15,ea:^MhLrR?t>bbg,?<-FYTKlElV5bK]FLBYVLVDl,Q06T^qL--^*Eu
%)ob753XNdB'?>&O@%(O46Z3?bg46+Fl:7SJR]%D6Ri8#7jQIqL)9t9.PrZG_;.Pl&J4_jd+io"Lr!nP>d/>_hG=R@.'3Nk[)3Ik!
%d3QG<4VP+)#q:Wl,EnTY??3120BF!VZH!(GI\L*VUR6Z*rk>(oq\&%>jagr%_]M^m6MLJ\*to;VJ(3huoAj!nW:N]IlLK>:*YaEn
%RU2ESCc%W>S?T@W\4U0J5UVF&>37YSHe0cA9R00SM=>$7W4!F;3aMOW=oAd'TG><]QS.r`Usk]uoBA).4?>81BeUmR+8_\>Tme7\
%`KB(B7nG8ma/gXH#'=+m>uBfK*JZDl^b`L&_Geh[$M]dP7$7cKbG)])nQZY/;b:HAbU>,';FGl7_bp-/!\d%2BeiW0R?4#-0^T4T
%Lo[Cs'^e3R6A;DNBqd/u5W$U@@Q\DP%#`'0_'5[;@)4(MbmdQ2AO*_IifHHLH1OE1;5ZG$:N8`<M'o)E8J?[?6"ra*+DJG<S1^N]
%WT57X9g0qt>5]S2<W/c+En;"/.']-#!>Yg<P9>i8kltLTjltEWPlYEYDkU03%uPKXq'5c99^A.@[cF6&5R",*B$uds6Bl&enb>T$
%Zprgt8ZYZk*c?>SUqSh?na7P.;Q;7`r?@%c2nU<*'+><rH72rjkd'n)3+pI^9B>hDAFk7'XRV(d>i:2Y>H@T(Q(`.X^glSPQ/"_*
%m*oic3o%%r*D58C]?_R_XegeChQkeKXIVd\_ZN&--LYj2:qh0n9nm!G1$e'Z6%\eu6GE3%1.Q/r+#9aG!236)(h2<ahoL$K"oF3k
%4E=NZh_e#PceQPbp)\=l-kUIDUkOq"I;V1:P!Fe3iAl-Qk'KEQ(BthG#i_RU^%5dSM>=HUkgu@+$^\OnWF5O26YdBg<B"<:TCpNc
%KkV(tJSTc#,KT`NXmINj5+jnr)+$>\M,X6^V!r=iI`=6W.[&V&n7ptHXfoGRc&)OcM)6q-r?4:d`o7;JY64Or(&pr&W48(6>X7Wg
%DpWPr9&aYle/.s+JG;).(=UBQ[^XZ<p:h(P7HC6)$KTalH!6<_=&r^nA]1&T3&?_AWcTWdau]u;[7T'p`kuZ9*'fq;pJ!]sEVM'8
%6GR,HcDPG.Xu9*ReHnom#7i(mSV(3f"os,&AQS)<1Lr;W;]R(4E^/_]&i9@@a89RH@kttE"pQkc[m-Tg,it8c)BDB&AB-[*=VZGl
%9gW=?J='s=-'jA<;FVa:i;oZ("!O+G@!ZKJ"@Tp`>`7#LFO2][EHDkSmLMnm6qRc9[>+oXq6I*("h)H&lolT"Lha=h-GRrHS]&cG
%SX6gZLkorc_g.$l<G$-soDVX*GWAO^p<X<2ZIFNPpBusS)l%@j\EDe5kM,V0eB]Z9Jj=e^P!=+\:B8T9:kf`K6DM5f.l0=]Ktq@C
%9^KQ,HL[(+^Q`3/=e&unmE=GkFt3?9.4HN$B>IUsKCKp7Q9P!Da;"_r*XcG:B:j&B;b]mu>66uGbGSa:dOg7nFHRJlcIa<2"u9/J
%)?CQL#H;^gdHs&[&`G5lFV=TQT$iE\WG*?Wd9'9B1_]%l'EsV*bR)ou-JdO5:8lHWqnLY@+h8.\W@tj9L@QSm6-ki-C;f?Kq^A$:
%.mb\3SU3%9jUa73'PI^N2]hP6Mdr1HaIJ\H1ONT_hr-8*>2F78!RjePq4'@aPK#+DTMDc$BZduX!j:P"4-:):JtC'S7W4`#O=2C>
%G754XWhT_C34u'c6Ku4O+SAQ!H2plo=Uh<V4]?dSY+"]JCpDJ&.TuF59"`.G,9uJm!bPLO=OL@f9k7;%Los7k7d-XXFW*`eJRhcj
%,3i_fCZc9[brJ'P5*8C:k\Tqgo[9R+EQ0E9+=qR\MK/pN.LI)"l%GK?;5V,h;()M)FHa?=>W;m!;6mcd,^nbl\O`[&F)S0obLB0_
%B-=&AHUZg&FQfemPJqn#Nu[1TlN3L[*9/KDWer;hbgL31!>l7-a0S/b.U8tLb3G6:_&nR]md"h'iQ>Wep^hR8ke/V>98TfNM8Tsg
%&fFal47eT5B@SOQSW\C"[5A>1i$EghY&+1f3m:To0q09P?1PH<Ki`sIPu:eI_M.*9:sI:fiDb,[#jJ.(9JDu0fpoLH$DX;6(NmG)
%&4]P9:BMRZ$:#fnh<7Wo@KI@[ef8HADL7nfD3hlE;U!d`oIhnU<-@)*_u4hm]u%;[a$l/:<3;r!N%&ZSWL[ZAd-2eW,hcIsN)8(q
%%5f[D%o2b$*`Ii86$RIY$cL&Lchp&S0Qe%0co;nV'D[X)pFMpuac`>G2Bi.r$Pf-S<DXF8><lAMaZTt,8g(0dq(62=TM&a\A;D&u
%3`p1%:^0n#H6E,&Tl.l?<F/7:m$EPt'RaM!0R5`cV`^_R\l/j;/TNgZ:HOhq_9uqCK*`F,OtKJ3EKi_g#CRXVG&*F$s*8<\\3NJt
%WHa##G@dcu&@lC<re3/[RiA>=$T0S+XOIAo_NdHmUJP4k(OB3S(8a5X+\o4LHI;o64(3^E>VOCZjDh<@ds.Nc`kL4c=P#9QRJB8^
%>e@)X+h;SX\b'T\l[21X`I":V^,FRs5l!T"aI_PWS<t8RS3P6BOmPBFE'iW"9G((]XjsMc2%dCX><Eoc!e6,N+F3bNckp0U1./NR
%;=_1LE*p12h;h7_;4cls_BbfLQ<nH_mg\Pce0HD`&=R\E]Pu&F@H,;9iG<?t3f;H?[l1C3,c!J8hOd)Nr8P[m4?4MF4=12t"8^6g
%,G@XA`.ZWC!]Qh,$e9ACn&2Ar%f\HD36.l[083ah7oGF/!gjSXIPB*]nnXo\7G!Jp`F-7Y?-\s9?/ZZ5LZ#:D2GLY/G;]4"k`2S8
%El8Qo7#2V-b7fdr9Ja5tR%SQdpul)o7:06B#RO]84IicXHFLrg?5q%ZpVD;@_t=RYm23/O#n%05!_HK]l@u.2HDY0WLoBa4aeUAu
%P*V[JPi&"-O)FSJmjtWI:j?<LdRn2"0MNshB1F5.(X"W\VC!>,c-rlR.$]o3<b(\mo<R2"/q'J`bKE=oc&.OPiafaU1N:t\``+.k
%PJ:rYXHPV3A`3k$?4j#n&l6)&ND^BqDg+Qg^2"(EVF_P+k_Y\baAXh;-3_P*\Vqik"J^^d6.KlWHCm3.g7!.3a*j_`[Q:eF,[_e%
%V)sc+8Icg,/_u9sK0ptS"DI:r`\^J.H6UqlA=i(':c`YGJ&YWt/7bPY#qZ\A?bM95#88NO^r_Iq?$U/!-L8+_0c>Vp!L\LQ9Z-3p
%Q;DWd2023hGRbi8cq]piKA%aa]&P#s-j'T\EMUM@LA?X^b;5772RLhHZ[`=RiG_$'S3f.c!$&:G[&iQO`d$;2KBQ3)]-!E#64dJ_
%&jR4CX*Q#*`qh,$#.q$R"@Elk+/-!OH]sSbb.YG6N6&(f/4oDc87-Z,BWi]DNl/u;%)&^q$Do6YP^j6T8tr99Y^ZFK,56IeOd'Z%
%M=*Vc%j(ur!(T"6R:0oY]db1O^qk&kH^]A%Ph&37lmBa]WiR6gR9\5KTu.N]"imJ2\a"&@Gh:lpTFMI(q*=5)4O+XuU-j;hd(Y3W
%,soJtQB\Bc<t@MZ1;<S(!d],$,5#dL+TgGXRLU0.TE<XbhoC.LqSQWCPPWu!#oqW$KA*fmUa(j$O9=:5.\Q^9(OgikFs5bhhi]$p
%hYL3rG87jSM%C6s#;sq^:nMGcR16gTM-3',dt?h,"Spq&hh+f^JmqKY=I5iC4i)jU/dJ--oN&>K:td,]7@$r3,<Pf(a]).THe\uc
%lce]VV5)ha*l1R/Z>iG21Q.fu$+dLcS'u0"(XX.l)#Qk9ClQ"*j4`_d+_>%H:-lb(:*d-X%JJ9&aof#<3oC76,#jd_K#hSgTERo5
%<P4]R1'.`9Ftm=T[1Rr?#'hs_rq`re$%C=m\2I2+ak+h-:rF,%0Ee)JglRVGH8.!Zp3FCg;)b&D&>+O:+4-\T&bdSC*3A:\nhu"8
%Q2K&B5musG^Rs_`8jb_ceZc(qkS:pY<2Mp4541%!"!Ei=q=EQZn'eU:ar9<6nLg!b%k(J#P!9J(0%U>M"I1r!p#B$6mX>!Fc"2Y?
%A\;p4ie<qcAhe4E3gk0aA0J;"O%YD=*4L8G.!kGJg5fnEe'@*&SFT*NOg-_72c8h.%Nru)Gp$Mh3YQRc#gu_l^Eaqa;&lQG"]TkJ
%Pi/seKX?1&h>m,6U<$@OP*%j7KSe+RL%HK&[EhHP5T6t-1>1;cd59P$O5?1?`D;HXhJmqij6!WVrTtKi(<U4Z*f!FhT$JK6RO0L]
%X^'@+$9[_f(p2C(V@5:S.XH#._<(X(6Mq82%%faO@%MtfX/uibDRuOJGH8,3L:>!JRT(]4-BepEQ;c5Co[QtM-:e=WRDEB8#`^[<
%$lA.u<TI;P:J8>]Z^q.b.BP1_o/I35'QtI-Ldhd<[<G2d,cO;?k-e/$8N/*(jBR0:F;F6+e)IF%&0mCBbG,+VRBRFnW<Q8E1Ipe"
%A@Po6L6fQLd<;lmY@j;ErG\>ik-gt*at$0&9Ek#AR,Re":0[T8;[aK.1OH?9D<fb1"Xq*MIVRD"Ce4?(#.Yi25md4BOB"YCX!56Q
%-?Y!!nqeRkMnV_T'&O6&ZP4+NR<dNFq3!q1L#nG(_;@uE-bMqtD%7^G$dB2TH(ZCKKQ#d0bYD%O]AOt3(NEuU'/c!!`#SB8dmte.
%5k`F$r)kOmSW;n93a(J[>!3n,J4UoMgHKJkHs<UTq<\^b'QHc59-H:D,QDmR&Jcfi;(_-dq23XDG..7-:6DiY7"]qkD/3QY)&L?$
%gnq*(1ZdT#@/^6H[mDPQ6tBE4J'pER!6_\/7cFaR#YcU%L+Y6/`^IUh.$]C,;'7"GRs7Nh:2VUHPhIF?2^FIeDDYI[J>DF_$04H$
%5_iZAHasBjQK$#1>g/ZZ+](YE+*3SVfb%1<6mc+g2&5uj'qsN?)Bjd2H*%KSSB61W[@B,$Hq@GW_JmkeD9\/bWt,A=?4KS0Me4BE
%cL\A;hJcTe^kplc"Oc>Cha<F"bIkaXCOSR,D%]YPOZ(4\HpUSo9+qa8g^?h;neW0>HQ2:+D.'/b(/0aZrB/IpjJ5'n@tm@5#nP'$
%<4&s*Nrcr$crg]drXcKO'crpjD,B)Hn158fA!"j*Xhc*,5D\^07X3D8]D8cjKP9XfW;Gb?cD`[m2!odakc()$5WX-8fCM7g]P[rG
%P&cg&#hBO0<9p$U/]bEoE!";4'Ao:cCrUp26SET8rL:Q+K:&dSNV:i^\1Tl'1DVB,4+F'j-O2BQ2CQ_9Ca`r]cVP,`H)6+sA6$ea
%AnS_e6i\Bb"mJ&cDI<p9g5!TeY/+6b"53dU"Yb2crGC>.Zs&lSpL"Gb_/nR<e<AAY:,Pb34f1^kpY_om6e,)Wn"\_%`t`/*1*rh/
%WI&&V#H`M)P@^sY.\W.15DgRaH+5$m!W(S?FXUj'iI[`(,*/rG`^f-u<HSC^#cu?\ERSNR;P<b*e+D-l8/p/9EWAY`$Fg2;#J@LW
%D?+uML!oBf14.f$jkFH5bn'Y.HiGrfYjg^hT,o+DSfH=O*d#>8,&G_\8on(kV?caq8O6Y2"0=AGU3TFnW493/%gj)m'\)cjhjB8+
%:CeGhA4+]-5ufe%X=g@:?\<dnY(oIF+4Gkl#9L;8oUr;2W;H5&ilrAmO6JrqV3L`=JTor0'l/-V-s#o+*p=%^BPVoj=rH)HRN="#
%VO>"i%s3___O)BlhFHD"a89O7mOa7V?%.V-.Y"8-W;&QJ,<oP:7UA9W8p)FHXOG-MO@o5p[?@o59BK88@[5ti+E`d3*N_3sMI\>G
%41=gW^e`'-%!2B?$L$EQ,SbH5jF"tTE`7$S-a)QJ><p?Il:Q!TI;CT[qkWYTR0:*"`:NaL)n4?[?]-#C89;lVq7*jQ4,aseoX1R5
%0#Rg3T6VOt_E5sFKKQ,uHSZHL$M2C_NnJOp<KP@!nA@D!B57u(B+g\:BYA7Ua??NGT+Bu\1e3R"+Xao9Al[iYTI:9f8=?8ccqR@u
%LKbc@!1\'(Pr8r-e<LZ,@\l]2!?MQ7\u8\#7J?YWO/S_6<=qWZU=!4uS53Z<96aDX?o:b?)2GV[fsc<*P7s29cg44o=Ynj"Kp)cs
%7I"`kqs6Sr_-.A=eB3<)4,!LSS-CP`LN%[J=T!+c)1%]-=qgB9KJnUpP'#JK(%+jRSIi,Y!0Ka1ej<jN:Q]sP\h-r05b9UI&S#(g
%E#p0ckMir?l>@i\Y^7b(*<;Y$4an@:LT,87LnqRf5ZXWScS,'hip5EJ[pL+&bf!td2<^ch?E@>!6a_(80M-4sDf%eSY:a/NV8W/B
%6'12g?agM=QU`.L0=R(f(>fA19p<2S@e'j)9^^9R0A)-e/CEbC-&u2o)9Oh,&;J]@(0\Q?LPYkan[I4V=J![f&%IE!oP!b-p#^74
%@kSX]NF&c[Y0j<thZj)-@SLlqOD]N8BX"83lUnR"`bUqC"/7(M/W$],aMsBQjn"83-:J?!ei(Hj%BIsV^W!mo6U$;([YAT;7fVT]
%f-"[HDkh__X?D@Q76+U;:QUXLdafYlQK+Z<"ZkbHQ[iDn&9iTEr8D48n#a,(l*e;_5d;1"`]1m4j0",Ql:1O1&(_qu[GPKm1c^Yp
%c.Hc_5n88)kD<X]K91(K&Mmj0!Se:g>.U4OKYAVF-0ibOiGC%m\?ME+ORLA.(RgR%\Mn`bagKt!R')C]KCak6(pgc^na=l$Z_1:L
%?V<D7T#O)M-,bdL-0UOpX9@ci*Juad6eEbZ2f:iI&S\,>XL8o*S+>!]Aps,PCG>RG/%0>1KNHI5c(D*=bdQ@tqU&Iep)U"Y:[msD
%9:1"L$,)2^>1g`sr44:YL2<tQd:N:GE!`&:\HVfCp7_]Dj30]V"7lllXmNh'ffjH^f+6IeAohnNI9<O+]ajD8m]+POH:\be?+;^\
%Mm^@Y]_]0+2E8rH>X*&uW,8XgaLChm!c?$#BRfa<^a;H8[dCe`lq29tk3pkDAnu=[r=h$O@ljtX6^irV7]J:MVC6MOe4l:KA![iH
%oM%igNf#"f"X17&l?G:a>)HRq$PdLanLP%@P$EOIQGcC%l^<f\oEr@nB[/$biTT9TEm!ui;,rdZO_I[@Y3`BAOWU>4c5`gW+3(n4
%dmfYo7OB#&M@<mQfTUpi132r?j?&0faOA1k<W*8ko$I-ZP?#UhAdl4!$\<s]T%:.FZ\E/8HHn+3#DfOTLTO4h7F2PlSJ+<>*AC<M
%q1c&ZScb6:kV/ZKm>(gDF>fX\f02_$M*M("$m1n$KY;i1W8b-#M<mh).Dt!NA<Qu/Q#^m)$-hB_[44#3+Z4?'$tm*[L8t3&lP=E@
%9+-C(#1FO#?jYu@!7,A_aoUo_Xqe^=Y;bd0JCg^!*gu8^pmng#Leu.X_dN664X-9a4CEi`DYm9<HoVZ,G`@HC0i!OF1T,$-&NZ[,
%4QPVgm_q7r8Tu;'A/#),H):(!Fm;Nf&1Kq\h[@L\/>I01;Cbc3ZmLE3;Y!QP+:^PjU@k1OcE<D(TeR_RD60@1NE5/iq>6[10/!ds
%-9(T,-L%KQRnXt]7*1U'ALJ%T.E!Ou%N6MMoq=B<>HmHWPG[c7/;7t<h$02bB[9Z2g5XTBL9+8=#"e9#Gf`A7RCjN*X'l;Wr/*@/
%?g=fbBn4VOis;%?RA"Sc6&oGP+eH(b,[Xg$$l*pGA`::f0F(5=,XqA:&eJ1iR7_TePgTr*kim'\4VAQ!mZTWgWWfJo6G6Y5,P/MN
%>FntaN3_&8S62"e4=NbRfp0`#(I#UMQN<YDCe.FlFu]Us#__+h?!HtqLT2-l;3D<[c:$"Q.BkJ&+@D;<QMI4dj`>UT]<_eQ$7rG[
%rF*\N9>pn:bNVEoQ8,dZ@QN#nA>%E\4/Y:$X\nMBEGkE*K[lFWW_.q0.Hnpm9BlT[')r$UNYHY%F&B[hW+<%de'ao8IRB9V6MID[
%pHI5jNb,j8aq<FpHY_*4XOD_SQI-i0^Z3LOf8_]`?!m0=)MF4R/aq4fcVg(cDAWp<bou;ZIL&Feo9jr&\d%J5dK%''.`@YbFG@Z]
%,noW-U_u57FK+XDH=/=6G9HF$%']q$94Z$."A-r!5W")XFQP__39QIK:O':r$sI_CHD9&3R,G>!mR,Ss?i:(\IZG0^E[.X;;/=\p
%G^tRMINpEgEa4GN(PQ;`V@]ZtTo^hWZQbq1?mjNWn.a1,XefLKkq#'<qiUD7=UgZ;OI?6D,;S]F5`O8)5&f$m3$Qlq@jV7<PGLge
%>U1fD1]A1+8Z;;QBTmaWLGPtW(4pm5(V5;)]en^kRY"HdK!:@iJjoMK)26im60BGe.(M.=@$$WeYXkA#0V"*)Gn@8,#`O`mTrT3Q
%U7ftFKj.S_P"oIZqi/n$FGXe%mY5F($1&ZQPRV3\&#Mmad*9AW^l[FUAT9FGjf%+7C]d^J=6e@Rf%ne(X+i33S+?a^[0l8Y-K@UO
%Vq/Nak"(*=Y(]>WV-aRt<65]8D6dkT-86lW(Kh\>?*h'kcDD[$\PIOsJ8D%>2-6?UM:QGmjau`>:JrR:d]q-q?>#leJ/0r$ih:26
%W^]Q;00Y?hjZ:@^UtbQ8*2F\@``Ns":onukQN:M7*/"be`9s!93.nAnZF:"k!IVK59b$X@iaRDl%p__HDf.l<D&57F\!idrGT6"I
%h;cEp6_\-fg*cD]Yhu\'"Vu.rP$F`\nA0etZB57O'!#/SZ51+tTMe/;A;(O29Eg?_J6<;('gbr%Ur0aGg:)VUNFWTUV6:`AP#>fY
%+sI$Hd`:<&+QR=7g=3GGkG0I[K`XUdbPT1j+6WDdg$uY?HlAfGkp^e\="kVZ7aSXu0f6r^9@Uu16m&ckk\u)7L5J5QO>oM,9HZ7R
%#*r\^iaE:_7Zeo+>A*2p+dA/&RrXbo,Z+g%JY/W-%7BB8a?r'-'0@dBJ5I<KMEJoTd0Br:1`G3oF8</;$'?3"n8sl`'!sY[h.^:s
%:Zs,!Tsp]j_`$,ug"M,AD/nrtAjp?6F8,7*8hTGD'B4Gr^[65\BX>+Ud69[Cf`_V#!@Q]aI#GZl?5P(5D>F!($HnIfLp,f34*l]*
%^08F\8-LYahKD5/+$/q5rU@+9hq$S7pA6I!qA68NK6S@&kFbb]i9uWR.-T0o[r((C8FH'P["WEVCl]TRE($*pM_c-Vm_&k-(p900
%`Va-O@?8soK(^.%n-Unp#.IFYgTVc.V_W>B*$U8qP*HtB"%T"4X7#*W*,X=L383:.jk3h-d@fm`Hf0]$PR!.7>_k@W9ePdPpB@a\
%XsW=VILlA:E@#W;<ESDSJ`Vc(osO!Fk>nU/LlcOGi9TMUnr"WE?j?i.^0-nW$72p:/G"[la<\npVGFR5,iMjJ%s8SM</"HP,Dcst
%;c^aOE3&M1/o>WYU!4/j=>*1M=N/Y?`gggD5i_;*51k9Xa_)<q6LN+_W"VcF>C-KrlD\Bc8;A9&oEjUFl<YOPHk>$$:=aFg70>af
%7CLpVJB#kMEZ`O*J*F+:fO>k<<oZ;T%:G+9%.Yl`a8hX90mFIrOGVdkr#q+HWYF4<goo+SEXu%rK1d/j,VCfiHauJ-JA_R:bBQP;
%)$)1(TJ0C-e/hO]MWm(-40mLc=4%V7a<6t@<BXi+%'mCq92\.rCSL8-%PXt"Z<D2Y""02F@b)u'G[s1VFS'[d2`S![3^D2g80AsD
%R1!0`mpk1eK?,C^,JonB`;W:H69Hh0;M>`_c^-jHQeJQf&3(%,Ms'-dPSQ'Vkfbe#/YXND%P$%8OT%.l6)Cdcc`52TR+;MKe.-i!
%q7GsW::Ias.E(uY.-.1"9]W%1p_e+gi8QSlYeCYAe)Y0oJt>L]mIL6A:r8Bj%7`C"V%p8WD[;Ktk3W'3h]/pl<^jUL=:(0H&R$Lo
%N!kO!UA1&"Kh*[HZGD[:YI_b.]b2W`+;nR^\Om>BEWaL"%Z)r_=EGsa-fo#FNN?n4L<uY!6q(B(4MfoFh[U`/krXcTB:l3.JTfbV
%I%V1'L+de(ng$.W;:][CRtH%W4c\p<6G>#F+[lflhZB56a9TfH4<W6ck_J5N5.nsbk!QLL.]u=_7\JO/&58!K.nY>.akHi"Tq;>R
%J45h3V<1Ra9c6jYAuZVukY0RC&$ojRe/nG%_k1%(NL-J.O,9UoaHXURcbfid;&L(-\`U5;^("X&Hr@f1.I<[IK(6H6TXO_]g.tZI
%Ci]u-W@;Qdo@lnW8tQ9O$FDHtA/73NfG0!]'Y4#!Ydm0agGeFfJQb)BSk^,j&e_+ZG)b>;qc?LlIg<D$SoA^6ln92Y1eP\Tp^?s4
%B@DYLiB%Bd.$@cE0bp`j;j(5ZnV0@]V$<,18m&2^f,Mf"((u`n,jG:9c,tDf.OH@I\!^)2)P!g3KHh^pn#RtjY(*Z24>cZ@e;I/J
%LRO*^j]&oJ:0IoAiDLD=m44G&[k0,:59j#<a-XtI(2(KBLaj>n+\nj;Gs=?I4c&`kH_AA=+OtjI:HH2s>[)OHf\-N-E#C&5%Bdf:
%ab).=KOU\>M<^,j8S)OCDs/WgiV1CGr4ROYa%SD/qUri0A1t$`?BlohBQsXh3ZS+&g-[=[[%jm:;=i`\@?b80+WNiD*:[R1]7k%$
%G_,gL)A?p/4!kQiXK%5Eo1I8?/1D).neN],9>qdEpS&nT'l%?`Ii.CiLhX7F)CiA7c2FDnSH\?<n*$Hu2c2^)*1kDj>1/dYc;q)*
%ZH78(X0tX?+m3]5&kNfYX6dA;L?puZ<qca4a/At+^lcOR77@8K3sZX\`5[m6F\7PqI67'^FqcHr)?;Q;]B%T^WSA$V#Z!IpE=2\/
%dI%'C6n\k%6StN,EF<V=XQ&e=cRj9'[%S&,41.bu,n!UF,GAXM,_@L?J3rQY8c"d)];iI&'RR>#!q#tqR51h9/3p&-Q4X!6Fp.Bi
%=_o#AWJCeS3H<E>i4rf'\?G0(!MV9c979jJMX&##(I6tN`r0RC[RZGM%'<X`-NKG\'*[kb;W5rZ&GZ3t"H"d9[HNAPZ!VgSAh1k(
%s8Fk@[hSrV9BPTG;tMX@.,*pkUMqkpX_?'p<S=cW<HsEuP4nFR=;<].J)TWI>I_-:&dAK:9&F*UKFT#`d2B71M,J&^O\<V]@2)/u
%#a$NogRdd\n[r->&T@0cmoW#6K/a'Be_=b%/JIn?UeqBS?FA<?;1&UCqQLti'dP`1;$@tKL,#a;DWl?cedV6I]%Io#62Cl@.^Q84
%7N>a@(286-__k=5-l-1Wf8r8j(E+D!!hqG]GAS><)WL(QigC;k!]HrC84/j#ZiT)fXR.qRM'XTT<HrlE6re[>kjYU>@a4tME\U9A
%q/*I]=okr#ha0U^R:t`a,"T`F-aY?K-(Q&HJjP["nq,(]@HO!':58uH+@F2n:c/J-4/(dR)-t3lAIMXU7uoIOo4Uk\)c(gO4jIKQ
%B,gHT/I\stPV+;)R9q17gIU*)149"s'*4Rcj+WEmQYj(l!Ds*d%>EAEWX^TM>j-BKZ[>:#VtP!\YUj,S&KDAn>/i"+o^P)M<o.PZ
%'ON%j4X'ZOp_(o;j0@>_7lZ\;+>bGI+B%RbrTA$5$cM=eXJXSYU9ZVIPFRMHXSZF4CAuYgig&+X-WeI7U+OpSe@98no01ZbDV;GD
%igVU[QA$BL<1j<l2Jah0JE_[!Adr6>Di';eTp!Bpn8KF[Xog.7;^5`+Wi8(+>,P,fr/hsA7I;c(R>N=46RQ&YWoK.j/d[S;"SWOK
%TUFAR8i<n.:rOQ`**F"/4kKhsd/cjpPMj_K-+`(!@\E"F[26PA*#lm0C?pprO$5'2>>TKu/hmD#CYL?0]\S7[`=P5Ue!8QcH=cR:
%IdJF(2rpof9@S\b`\[;I_'N!A@2O,`n1qbq"qDP]+RGO-Y"@4X:mlHt.:r4LS1FKORra%mKrR`fbiRmOaqtm!LK\I@*XUE8I-o:I
%IIoE["9(2p&a4c0Ga@6J24+sN-!']C+T2MM!F#_k>9O%RD'&Apk'Y$Bi+P3"A!]R.-Z,W!5-[TJ')gc.$;KH1Rcdn5o.t^m&AL-t
%0-gX)G.hXqp^rt?=^dkhAK+T:)r7]O'X.\WP_,ku!gA\"W>1]W-WEF5pi5\tc""N1JnA*8[I1@cV,_u9l61LU-M04Qc`>ZF\?/G^
%f)oX(`UnE;NN#n/j-^.Ll#BiZB>RjM8iZ$9$Wjjh@DG4^i.c8CfJgogHoWapmt<(UN^_=P`cXn>CI:DZlEO#\pX?(e:CT4&daH0K
%,7*Bj&5p7gdEikmqGO!BUA4L,oIRII(qrPFUUG:JVt-F/YC3Y:Z,ph*&la>='\V'@rE>;WUla$1/$%S.Kj@jL&3/,=.?fa0nW;Hc
%l!$3;e3::ER!'lpH^N5UgH-0MX)-8B-Mn3b'Kg?V?/1>2+mT1SX(L[A=%TUY\dP\SHstd@$Rajt>^Um)qmDb_mV$H(W<)ECdLO(@
%F>UZY(GESHFI:hf;M,JTh6f&QL%]>J6J>nC2'a>-n5.e'a1Hl9*6aW.1uWAj;X0]),B?ol(>K,"jM[L?1XI5fX8"ru)IRtLgZX^E
%klIt@cg]s&`<k]c;EoTRHN7la-7$YZnT!,pK$=JUa)*\:cs0<)g=Kj-KR]lJQ<;M116;=?k06"i:OGu`_L#?2[/.FB4."*4P6K46
%]T)[W$@"%==u*P<jh/Q4N[!D"_fj!&Ht2-BVL7WV3Yc8s-Ud\>aY)$>]6)=>e%a"mVg:N;1q8.a+M9'p%og[A5g*;q2<&Hl$kru:
%Y(RcS:'U-"qs?G?c\oYg`S<Eah_jjU.BN-iOrbs!LjZomZl[TPrJ5Ms3gXtP0=`S.79B:P09oiI<$\p&RIGXEU3Kd]'ZsL:o0a=g
%k[[&`a#FS[6%MQ:%A#4!B%p,6o+ZBRWk]2]9.s6ANZO)]qH[P:C`'n*LKTW;5BQ+tgPNpmQ4XH03DL_'<Y)n1IC^N/^DC16XHNDs
%o&J.2)FT5>YoBUC2]JR#ZqEfjUKG^&Q[8OK?]^coqipc%E8W+Q"DfdZAq6n=MGR0(Et1#[)!b4dZ@M;GoCQ74@FcAaICP2I-)FNl
%Q[7^>_3[gk;uo^_O>5>nIiE!!Atn)=l.V5"lb/d6dr4XbQY<e[UM<;s#JdD/p<>eZ'H+L`F%Q$b%/_tBU*&#6&cJ%thgi'2R?&]X
%p\qm9Hp*hL;^K7VAp?jf(t2bq1n`KZ0Pe=!:?:3e.'N8rCOYq^qLL_]jX?D7[8kF#0=#R.n.U)+=WNpWlLB=?M:Hk,A3mOPDkm:2
%=_%bMHk4%&$RQ#q;cD[eJWb>WK@[P3)k>%j>s@"9194bkngPk$.-2XAmShN69.h*d!0u(@LEWF%0:R`gr)j1+cWOA9*lq9@+Ol&<
%967&fN@O1t*U:g/2!5aXYu4(g32>3_.FhRmgdNYO%TcDp?%-%:Z'Akqi1>hILWX66<'YRQ2=h[Y7t^9r<C*U^<$%oA6V=$u(Lk>[
%)`%'YlZF-Fp&,',IoN@]L%+=/CT9)blha&+Z'HK(?d+4"F6W5j%C8NC^YVtS7\n]$Bg9]`D/lT4U!QF*[IJiJD&3rXT[C8:<B6BB
%[B#D=IM4%HO$@tm-FEW^?&P%r?Mcl$1->%bg<ZB5b[*=A&"JDSR#S!hM>%5>;j(m^#<8Y;4G;Kj\.IhA+&:GZ-H3ifqB9;Zf\]49
%,*_E(qhLj7:[XF]+;MWnb5%%99BQJWi7$#3KhiGF&iDj@NSnu_b3c-^H>"ttr7\?((JNQ&D%;p[n3Dbm7VC=i:mbu*/Jr;?ZnWEa
%B0C;C6-V2_ic3'D#NqM2`QJq8R-,=VJKO:LI.h>/B3DMkH+'ChYo&cQa+hguXG`E(q;0$WbB/:ZbHoX$lJZ3M3:<Vg)7.0+f<;/`
%pcBGu,/jb6@o_23])/uZq#dZi7ae3Ki(Gri*_gtCI@@ZQT2%3_=N\BR1l6ukCAPnX@tWc?19Z+rBNVDYQg>8shcG52H\pnX374t6
%M$s.Eb(NffpM8gaZJB%WZR]tSrVX(LLPu*Q>fr[Gn4B7qrlC5fL`"kFa92=f)9"B^:nL4El`a2,4]HA9<XOm$.EW&G-LJfEr=!uo
%cr-Z*+;YOrcX2GC32\2kDYUT5_\o:4+UqUd%*JcDAc$Wj3jQ8OLAV?A4Hq6c'Bo0(FbMH?N;CXrmb^On[^KDRW$'F><Nqi4</][<
%Y;SiI\;%:K?a>9J,V.tom_hc/];[\N>o5&0N/fihKRo$7"nsiRNGrc7+mZHg/Y1<o.b0LEi>)V_$)Ma<Q]s=<bRs.6MSsj#oP7G4
%pt)MWn711_8Em#iqKcb.$u1&84DQp6S/^Gh4?0USTuh9g1;6L6)f^)pY:_9tH+k]9&*>@j*a$CCO[o$NZkgqNV>F\$0'CIIn5>8[
%.nK)\i@,;9,E+28\EmkM*&t^c-:/VM@L%*rQrkX#SZHUlrd5RMIm)#/T4KZuTIR#-Y/,%-l!+e@`\E(Fkh'8l+m,ue=e9-AN)4*9
%`&s]U@V/t721qLaWRt=G4FO6$%N;@F*=3/*ULHJT-gW`6X!]20:h%L6oZMp$[V?a\3$WG>5(*X:(kC'(YR!]uYgPT*K>la5o1JA2
%SJF(L/9$F3:_Ta>^XD,M5(NGEL^R9)pa'jI8CHhcdG=cL.k5,,Y!WX@kEmOY/](_EVe"?X/gl@T.4XNo/OsY9]=@8TdPU%#NjiN>
%E?qFt#0PK-C8Pp9,A9J>DC2\re9u1"EJ?B_hAEcjW\p,JcL0r"quqkfEl+;]&rU#+F>R):@Sfs1I_Z`Tgmdr;rpW5OZ4't@r#QY3
%kA;)5:.>E!7Zih4'kAJcNu[ah)[;(q#+UO:r)EbtH!C#YY?BCk]15_oC[]>t<fcuJY:,dJm]iG<PIJs=f4-tMNlKBup_::)f.1Cq
%i7H^1`i7?*:=oql:bGakD4kD#M*`6b$qES.m7WZ[D48,)m^-agZH6^Mr^'V'GbXsW\k6Jjj1OSXBp09>(YG)A6q1`$\Zppbk'8]a
%MNV:kPaCAAOpP$L@Ag,rJB2g,dYi"GeQ0&AdfUh`F%-o>/iQRq9GZf#Su9K-M:Jn-3HWR7hrV1[Fuf.6&=S)P1k@hBRd:C<5.rqL
%rte:EEM=Jqk^Zc"6&ZJ7<9'@@[6+uqK=nEX2MW#VZ!L%u&ZHa$r510Q'l/p(Q/YI>rLE:L&>fYF,N)Fq6ui\1P`3eY/(D-&LEV6c
%\MOSmEa'F'_k=LOIAs4Kb&Y(9Y,j8<L9.:]8'g:U$d+k=aV'.l??NRHLpE7+8R^e)!H@>5QLPHb364Khk"]BVeLJXQ3$\j%/dnm=
%[':Y6I(_,@%sWN'L*,;0oHE:<H2IL]d@h8/'=8?*FW;KiM?hN"C0pVZCjm08BXgFp=4t3ApW`RSW-TP/#D<:>o684-*=3a#S!%,B
%LRAj`:"0D?!I(<em,Y5,53[H@dBRF"<(f!qN4-,'MXq5pO9C7,rRZ;apSo\kaCeK]1+s_CV:MGn#B*G/-`5:6alR_kjf+[Z?^gcN
%T!!)&BU?[pCSL80C+Z<-Nh]BI76j'96iNJnRX<-F;:bBog\e9#8>c>_(XZ,qn]if89cTt/UKGQ5e:nZoa@P&ZoX._"cQdP]38eo1
%&XOo?'].o5`2^X]%\U_3erYEN0>4H+5p6?e6H/ioIR<6m"sqo78#3UI:0J;YO4O%?WDHRMR%!YXbE],&RpR6ee<`\un!*bP+fFpp
%/KYjL7>.?'X"$npYPnes]A,jd'W"&)2]?f[R6Pc>JgV_^ZtUp*?2Erg<r(\`Id[N@&r't@?D*"CpP$9F]rA.TTY$tFcBX8YQpD-g
%^19RekDQA'V(?u-oAinVM=R!)C)GMVPO&[8YS#).lU[LKaH3]>'-O:SU]&p0Rq)j=]>@?qNed4^fn.SdLV\G.nuXsV.9(%14ke-!
%9d!5U;r,nR$U"@0^QiSR[4&Z2qT!!9Zhtj@o0?*,!@dQ*'*P!=-*%V=/**^lTP68'P;$;mb<g4RMqt[T.P%oG:SrpS._Xk43jCQ6
%[p@%R3J/SSh?br1/5a2'"nN!L+BA)Sp`%XQ?6Z^[D#f-0PZhrMr:@#==HDDd&RJTe<,o8F6]4:m6s8oEONQ7.kmfp3+W5KS%\5_E
%emT&%TRHpkKY(TA\`;Rn=UO!em8\q%JRL8DB30^G&"%7YDL]O]0Cg]**.Z7Vi=:.;Zr<h2*pF7_"CX3"U\BW;@*C!r*@:"3870*]
%m&H.lPgX$W%hiT>&t\U>YTbA\Ht[o=&7hkkd7e,]Vi@^.norI\"XNpeopS?j;;j.E&j&J40n2a%5<eQ&)3TE'6Nj'KB!=l>@2@]M
%c)(F(q*Pr-Fc\?R4[j7`mJ^JCCZ!NaVaQq?pD[,k#L4@>$uIfk",N2M%o;lY(Z(Yf6<V%(3dnKjjRVFaRkW'75TTu9%6'0j>$5Nk
%MQIQnLS$;9#U8>$g\HDpW3,.<PDu)NV=7(tr;d]2&Me.]3fi]L[eg.h64a31l`%DXL2rt.',CBH14^^OK7P,%N)Tl%K[)'@a\,6N
%0/:N_"ea?g4Hn^[/!^5o7nW/mjq(Gc';`c?F7mBpWhZ5I&i2psG#X8/r*c.VKBd5$f(RObXUU$uH8lrHnkGbq$:R+T(ePJ`G">Nr
%$W%3-CN+F[^=j!ob($[nAI@6&,ak8PUVe#X,O7C:0]lqlA4U<TMbY!5E;Td"cQg!5+kke^niA3DpqXl`*#o=EEb:k_M*Fl"9V&n!
%jEqC48?47&YdfFS*S*V\;Pm+j8KmE2K<UmpQ4L[fqmf,?#`H.JBG,6BBQeoSIPfq(5G^LVJ:>Kpr7<8Y9ra42X/I)4DX`W+W\J!f
%SsPJ\U9ert^@Z_>p>E<fB?:%he!)mYW\;R7<tbN!b.i9Pl_HHGesaEL8:$Ms3gU[p26Oin%uTZa,H\+@ijG_Z+F9b^MGR$9AC&YP
%>^J(>''@eE>UuLOkSN>"Y-)<n%4lg7Sfc)dJ["9JYr_A6-1A(5SME]4-c=n;Ls,920U2b_&XY+#m`HFe0J5De[I\H*I>[$l!;Y1_
%(/$@2'0emV2tN;;A-+S:V?eQ_bM,of:16GBll$5,p[#PW_bS+<9#K;1d(,MK<Aj/hD3a[h-4CS:!Cbt36=]+`p/D2bj\Y<o#:_22
%qKH-YSNjc-kQR.n%nK^HZd,UcP/q=S5h*.D$PnY"e$lu`eQf&b"Z#VkDff[4I;9$8.0g5%KmrfBSYd8hd:+2D-6^No,d7=[Wd1md
%B._NJGYG4-O4.tG5'n,WPU2&^"&m^Td^=r&YQP,]bOn];&fLbhGDFu:A#^?d@-<2n.g!tPDPFF*:^+X]0$RS5LPgIg[`ZP6Wc;8<
%RTJmQW_7-W=bZZ9XuSoraBFbjaCrh:YB]%&0\T;E-kr&,A=H,XZc!XFN7#qc(W7h1YJdc>k[>BS!\#??)ZfH50_kB-@pOY''I,<h
%;Sc1U@00s!mL6D*P\ZJ;6\hT@mQfPEWgioamO^eGkl#@\U,k5.fbtD+L(>?r31:Kcf_0/gHN-W$YKD8&G83D$+&+HiFNqeGmN5:?
%l6R_^ZE'tf`OX1^[a=Woa,OF`IX"E2*bV%qC;"3<G4c@`_Z<.+@#BY75`!eGoJX#DH+(PA3jc*M"ji>)$ag<^cNGfm$5=aNq%n6s
%7$&:14,2Q1$\aBIr0Xki_#]f:/b[O07&TWq8QgM;=)=V&>d-_+?%7?kE;Km_<)u0%1/h*?@U(;K?k0J7_HS+`.$FX%nQX;=oZFYu
%X9XXI^^V'@,fcTNed((o2>PUoG+\)CiO!&)#f7hnZ!:p4SDBLf+QUK`k;DRgG36MG\n=Z1QceiRc?9'T_b`RFSWHn@[@'>77_YZW
%4R<0=BHoBXR&\cm-0R>-e\aQqUA\qq>)]**,4-G5oqaq=6RJg4nKUsn=cs]FXiqZm?f;=&"S>F][?:<D:E/lDX*p:#j0bec+ep]U
%6I:7IL.+#Pd&"n<!&;c*/)Gp;#;Z/6AqL0QOM99_8j[*EcZq+&AM4LYKOODg##aA@P2;5ua8+dq>_X`gBrEkNWqhb$&VRGf;IoiJ
%[g69$*Sk%`+ag92lF76#(:pmZ'G(f0EKc=-R%:ch0Jth3(ut34Vq?1(C]!NJWbtCi@!(o?M4Q%Q!5/i?cFWA!?6hX&We(=.+eE_1
%LR\sX.]3^HiF<:d>t(9b6f)=;>IUmm^5p\oq_Tg3*'S/B\@V=!^a"KN#*gaa/O88;la+YlM/f@;b#ld'$AAij%"LlI':g@FkbW?W
%oP!b3#M41Pg6]/;:M)a+o8P^5>IDifDf0J_/&\RjPr%R&aofF[.$?rr&n^<jb$L$pmuP>.J>A8.-=_$1HHX(YciL[r*lY^+*8k$n
%QQ;eSOKZP1H0-^[;LL2`e:?aF]J51"+AWoV=9SIPe>8PqjXIL,!HC:)Ee;Oq-CG]Rh-,Zu_Xm_GOkMr_IHFW?]mq3,--[MYg^sCn
%/pU(e`[mG5.6u0OM_#^<9UF:n8(3'I)5Qbf8pOQ<[ciP;P'$CdL'(N!6<3aE'Pp*ll`nKCDK0Of3n0D@+eEc)%Z0f]KV22h*VuYR
%UpjeI?`lIGr4B#&hKf_$$i/P!)Ef75oM>+./_0TOgTj'QU#JX5@qskcW?-:\H7Wn?6WD``n*`dD&3e4m%^-?N4T5UtPt$5`4A>Jn
%8Na8ciUZ)SAV/isWSZ[IUAbVL`Z4]8*G#ASH^sq9>YlDIo;-RL-s_44-F]cm>)m,YH_dZ!C@H8#_b/i_d`RJ5Ol?SdW<'@c:L3:\
%nQ7V`8o``2.m*-M?hdMX5tWGi!cLS7:8KTQ2gK-+3Y?<KkuTE.4J!_^\=])ATU56r=%hml9b\d6j]:0#JtVOe(\Gh$W&(_KV7rrb
%g2K*2@Khu_ei8+o<@65WR^N8_5^$qdTs=RcEnpa_)7hEhOu)J3E>U#,dKOrNg04l#G=p,uI@8Cf8<5p]m;Z6lV?\WUb[M#YL'1EL
%b[dO[^>jTH$Q#s_84+>V'kQ$I463'+Y'!"QH-'o,I>iOgHL,ta45WkgO'OnDEG8T#3n[oYW&]6&2I[25+V1B9@2UMc;\BI0"],qW
%Y\FEuHqge7SdZg'jhm:18]lYh<hp:[XJ)A%)m_404)(c>YHFNL/.bH?j,)8#4%Z/c^`<H.%Zl<o9hB<rW:LZ&6m9m[O)sb%&nhW.
%Z3QcO56;k)@Jq-e'^!.C4U@m[MBT&lUJ#sH.Fehsp\B7+:mG"f/nI;G/7AY:K;[A]6iuZB*(U#4C$4Tck?6h&ZZNJsNj+_GGGG3]
%*&j7%8CYCR<6o]a^3$?t5&_,,kMWplGha)ln,_d0NHLpeq-q,4P$#8,i>M+Qr:BoD5HGD1$am=K96J+7VliN1W-uJGg+\DUQ5\+u
%j<PuQK@%+t/;KD:PKsc[I.XC-!F2eTP1=!#mbF'E*m;=r-e/1W15spd_Z9d<rP@=N;?FHST6?nd/"t?>L%U(M0KOLpWq^dE>?o3-
%b8tp,X_W'XE7^qT3\Y1kP&N-q'jZjJ:?<Qa.1\>t1#4PhKi7H:RVs>m(A^a*S2X$Pp$;-3!l^A<P(^.Wg0*3:%TnC=lN9.Z?-Ec&
%;5.g52W*Tm1t_#E)#(&V9bl(u*=Pp>#OrUt7%KT\0E7&tQ_Jr2Sp#/MWpI#IJ$7#FQk"Y@^9.$FdG;Y>'-*:'KBB4!USICCPou!i
%n";1RQ9q)0h,;(Z8Olb)9&S1YLJ]Vf<,hQK?pB&um<!=ZcKO%7'7+OP=9kUUTQeUoE:W6:E9E\.>/#B`*8o)&"LkUF)XJtJ,=F(9
%]hB9'Xb9o8JT/V%\hA1\G3D91eW6Z>.[;/TjmqGNLF>RtBKB!J$sU2gk,0WME1o;!Knrce90jS2I3:<@kZkZ1RHl>'5i3cC9ni1d
%>K75[<RUrUCHaa0F)]Boo!`6n!l$;-Q.2:skQ%;TKsQPV&`Lu5%<Y@B6S']LK.bb7mC51tO>WaQ-fn;<8Mf+L?hE,B24K\54Y!&8
%r@jX.c&1Z$g:qE[kgnDP'Xal/AN1oTSlM'e<bi?_f-W(p?Q\If_i7^Aj+Qa$(5oTO:fYJ-A?@:E,b>SC?MQ&#=[J">2m7mnJ04b6
%Aa'2Of#)`,[_(&T)<.(C%6N_,Em7]IoLejM:%ABIk9q2aCjT?d2:-S"h$AN<F(%*/0bln]GC?V"+=T5j`.m#;'&s3Pdj1:AAE3Vm
%9JTJc+"3pQkdr(52P3d,h?$h<K7:XFh^Bk[K2nhl1L<Ml53D&t0mT;_*8"G.[dNFiW1@BRK8%-\/'u_gLO#VVBST,?]c0bSYSa9j
%4-sYjo]7F?6c&_`58p][;.^rrc`t:Mm8:M\?-P`YNhRbCBWT=qVg_c6PC74DMWb\Bi>7rI@`d^^&tp\/$BMDoq0Zu-O1<W8B[Bbu
%8n5L-^NdZLheRl1knaU?H9X-[SnJEQ;ns[<;HuHQM-cK6``qKTqF"0gF9^5i]:U_na!Kpabk+D,C#a^3:TuZU[/'^n=T,bgU@2:Q
%iCse2s3h^'cn?FI^.$_?62s>+D4FeRBBneN9@L.%=JlkJk7b%jk>V#(:](P`HCO54(\.BZ;R<o9PicpnXitaj!sX.M/7/*:;\Xl&
%nmc+1%AaS%d>7nA6\S_5"_N8$</q>E!#_KfO!i&5QbSCOkGnj&jUrQ9!DAtU7`^(N0Xu&#3K.u*7g+:W=h6.63ftk=L\s<G2/\A0
%;.<p)S>[cGaLuhDHqKLOK#aKegAG,#'aJJ,eT>M"rONnY"F9"#r*3[=C1JZq)FQTH)OI'KDo!1YA^t\U$0qr^oB_R;>JPPtR`apm
%oC>Rd.mCZM[\o^O*YOL1<JVip5Zh.^bL\AVqQp+l9"&#g*MKX9Wc).B\AUR0BMV\Y/bF,cg]o`k>iYC"%,F]laQ:-GTH1J'+.$(#
%a'TuXXug%rPjrDTd"5l]T,6ZeVqUPpZ)p6/,QD00hCkAER"73+91RM79$l`Glg13@3HCY*)ruU/8p-u:RqWXL_pejLoYs_SPWk2E
%^(e(iiQR!2S0%m=M#u,\`GMR932hDRgdt@&Q.#_U0P.TL=[;su^fmL##*hmo9cb%&%^MW-HAMbp%>Oh:W)fhq6+ONiTd1u^9@Te'
%0@q:Mc,#tp/UZA5+C*)\GhLKl*$loLE7J>MOWFq$pVCtKd^?7"KGkIGB&a2b/W0-(14e"T2SuX&Oqpq'0`#WT$Su_H6T%gFFu5aY
%HR&&S-!c$U'X6]::@)OYl,>@+rmPTs&2jj$8lLdlITDidjhlPKN&2Jd_@:95+WSf@0:ukEG*j<#F^is%rHY-"IU+1ZV&kej*N[6m
%KfTP1`LZ/VD*Nt7Y,er>nni[>6;bT6FRcIn-@_o5I1:2%c2P]N[R!;sn"]jVZ,=/<9J4b7Rb2DcK7_/X2&":l3`*&iZEgaA'9RI:
%9@r2MR[6m+,gkf.)P$ZF!o.Z4d$IfT4!'C,R7]XIW8%fmc'bRbU03sU1KF8CW5MQ9B6o&8F/E^>g3u(=:`D2e4k6's&(SA#cW%3[
%;A<OO-C5``*)WIs1Y!4-:u_G\//lZtQDi^T"NDBU_4QK'1:W^hb0*EAo#ph#1*?+;=MY@/"11ogs.+*B-rqt((HLdSDGXC9O]Tal
%S(!X(F4k9ZlaB:\l)6<1r#(_Q=Y=*i[6`PA2`,ii>$GK])skW0O&L__2:S1KX8(iYUJ>5^VY^(>RlEjTS.aU/R!E2.?(<HMGqW9G
%]>kN:h5KUE`[%:]M+DP>(oo9Bfc2@[#ZWfX/43P=H\oE#5fra\6R-/KNZ6-/g^f7@lqgRq/t_PuOb*k,Zdi<!g/-@;NI6T%a/+'5
%**e/q;-U@r4lqO;Y<];]0=9re0Hu7k"+u9)7RX@7;q6bZ(g,o=7X^WnpheKgB%d#W/#Qi/&t#Va"cV<b)p:OV$VZkk[5%D_??$TG
%l2Z4(1kA?%%$`_Vh3HlG_c;Sq`%j3qEVQ2%'e_Mhr]VUa7iAAK^!FpIMB.()nX>K3@O6ZNdO>#]FKi3,b,#k"FmKZt!4f]$6;LU8
%g7*^H^^?Rs^4or<R(;APqI,:5kLJ@>pA6IaG&T;tL[d:Zof<%ZGUWFOj?N\?0*kr+c5S*9Y:G^JUYXmV`-J;pT.("d0?&qHAmq.P
%'#MW\>k]<]PBT!U>EJ=NEh.'BREA0,CXco^A8g9^+C7,+2h/>s_QCM4p7=\P$-V+Rpb+q_Wt]$U:^JOdq??JL5s\N9(g.[R!0r]4
%)+.++HauV`V:#h-:Q^CZT+(u=[sl;*-ktpg'L#^f7=i\]erQPnZ]j^AgCS"Un&*_`!UVmXa'Af7kD<YF^5r>D#,;GVG`q5[<8sIq
%98ZoQlF-YQeF:/^*V+W(m6Vu_%aOlbY+Ec[h!Q*m^7Wrl5ke]s\I[^XhkPou%eO3JP5]a$6Q&Af5us\U^H_6SA'OEX@Xi*I(jEPB
%`O#LsgSe<#D345PQrTfPRJtkX_]Fkko6/`9kVJgdRm5[4TuPs0lA(JIOJ9@elDXYDdGaqFaXI72b*8]Z*0'aq'1-o98*$HFr8AOD
%%9@NXWiLU'L=5BOrbTiqOU/q5mCiV77.YF(k7>%17!%hWeUuL6>qGQ1-LiohQp"r85*WH!QlH=uQ1=o%oF_=,)3*s;8/5)!\CoXA
%q7[:)0D+,.#ME"]3=m7sosep*-;_7*l\B6mZamR8H:C/sLBY2eXPC3imO0N]-VJQckTk<&W<N_[V^9an_OEQVQb<8.)G-njRbJtB
%Qe*jS.15=cef<HMX?sGb)\?Z#m,7a!)FcRX5$gGZLh^:`=\dJhq:SWN^MqD.=i;S*4e+Z3S.9IBg!g$_#'cb5oAbVFM*7oM$-i?.
%p)*"i[-Z<_lQ@oO2=EUM#>>",k7>&<7<@qXIEg,n/3f"m>iJECBN:Q4!<?]Q18#+u^+AXb6Wgi1gn)q<qB:Gu3_R]J2TWAh[0qsf
%nC8M;9M2.`qZc[jJ3s3=^KZ>Hf%rp_q&nMHTi]33n]qjPd2Rf&^`Z_W9j"]W%\j#gV-F(J.=6o``:cQ#HRa.uS(f(CpSD[ETqq<(
%#C86TqBP"2o=bn/VJBc6otqWdC@6M_@6oRNbg]DeH(n$e=G*tNnH>DWg=c>56ae+BQZ)gV.dtUDG%bSJmq>UPC24=0:>o=/mMh6>
%#^7uLI2Hki_g(3->iID1nZ&3%KFI=R;*nn+'$:h]P!^SO6o^2Rd_l9T;JEMFOA.<B"##p_>YQA8E4#S(J\5Ob8L89RC6$=d]oV[W
%aK;rB(cWB>H&WcmH(7-$0*6EX42<]r2m`UsgLJb&pOG!/)S5\<;Ra:&s7[,G04p:$`nS"4/#[&=bte7#d@uRL,V2N+&k'R-c(_^+
%j<[!FOs&o5^msb6De_YJLUBs_k=6>t^l>nNgHE%/[CS8G2S23.H66ePb"91(EkH#QKcA_k^=Y(uVPJDjUq"qe?C.0_5dY`n^97Ei
%6-.cK>EJ=Ng'M8228`IdNEnnnSaEQ\n]KOuq87%\C@$AMT(Gu,5%ZJl.<f_u>p>in^Ei\D=[NqcO\R8qZ@H7f1XGC_6P*PGZag88
%^0\F1Jt@<I02uZr[736Upq1N109J9M_>1u+N7m"`G[i*`@qU<RluLtWL,SRtO90@2/(?+8!"PEeh?a:1.4*M+iVMN43NtHO+Q)qT
%Zt6#1/+9V&)YHDfIc#[#mHid/iAQX.mX;`fH9,<%FAChf#E#lXe0(E]Jg,B"p-J[3Wm*Qe1a(PSdN;UVKRZc)T<l'3m@Vm_iY,B.
%4gu2*H+WJC7BQR6+)YS0C[\$XZP-<NH[@r2%?5hs$tCle(gTKPG\I.rO.ihcn'rIDbcu]Cjqb=HBLgVCXgK#%G2)C=D#KhfgrAL-
%hFHnP!#!,A*!7eY5>Q5HlOSGJdb:lm3M^hdIM`'2EZqJ;mlrj"4"6Vd^t`$M$sB<dC74J-K"gZ]/b,l;o4M:BUTM#qH/&fu1K,96
%j^:LS4A`1*I-@I8B4g@r&OH4UWG)M-;DNd%f^"=7!c4pF"iY=cdZFk.;XX#)*.1&?3\p<@!PMH5=T+`(gP-KG]oP)FaMZ..`QH^q
%&$Sm&"$R]Yb=Tc!JcPYCBOt,0P=elY?elg];6IU/L%pD8E2"Tcf0?;bf"$1`cj6hErJI5lY"(it!t=Lo.2NA?m3Wf*&98"$)5DSC
%H:BWP1cA!<68jlE17peL2C1!OCi2OY>8p+ad]F[mXII,,&37qgI06d3j:8=7cCm[BDhF$4Z+6Oo%.*mSd0c:LCaP8>X%i^-T6'ER
%'B7lu7:4btLl>lI>-#1CnpPfN6l?h1''a3a2,!#3qZ]I3H?O9+E"6A9pHDnJ#fN4"0:#RZ7)m&t(28EL6IY'b"YL@k@E5?J6pN[)
%=N,I\@HeB0RE]T1n,$!PX\jn[e%`Pa"8)p'jL>!j`;@giXrkqtXQJBZ)ih:CR>pHRq0A]r^+Jng.cr`30:`9[NqCL"PR`E?[i_2)
%4C>G*%GH1p)g\GHhU^IF2dDu!hDZS6GBRs(E"-;8pGQ>BLnf[,,PYt\h>TN5:]k_&kXUKZBdas6*;sb*fBR#M@A-/"UT,sMg6een
%pZ=@^m`TA^g8*lF20T`>0\1XS_Lkr2>X)JGF)rGClN`!X91nEcQdmY-Z;;)sOVud`AWumZ7`$0\=<E[Y59Y1ul6L73bc]F'RTiVD
%Qe*k>2"7V-PQ>9[bdq^XS5$>Bo7u)YU:L$gL>?+2H)d3b=Q%L=]i:C*P"VYcYhm9Z'l*F6J6r)Rbb(:f9\1!MO6/@ApO1/m*@NZj
%0$RrdG;SF/D>+JFf<,Ud+0K$?F78/>K)f9Yc[YQDrqXn?bO`LKVsV76s1?&ES%nh2s8DW*rl9NbhnK-]s8M[urr2A)i:$Zc^\m,!
%s6"n-bQ%*^rq0Xtp2Bs#?iT\Hs7O]Frop'Sq;;2BDh%^=pRhH_j1kNb?iTMcs5gG6rq1d@kPkbm/t*USh;A1Os5?3@mGIhk-BG2(~>
%AI9_PrivateDataEnd
