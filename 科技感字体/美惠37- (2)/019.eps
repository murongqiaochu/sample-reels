%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: plata_7.eps
%%Creator: Adobe Illustrator(R) 19.1
%%For: user
%%CreationDate: 5/12/2016
%%BoundingBox: 0 0 1200 1200
%%HiResBoundingBox: 0 0 1199.9996 1200
%%CropBox: 0 0 1199.9996 1200
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.1.0 x29 R agm 4.7731 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=100 RasterRes=1 GradRes=1 Text=1 Stroke=0 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c067 79.157747, 2015/03/30-23:40:42        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
            xmlns:photoshop="http://ns.adobe.com/photoshop/1.0/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">abstract vector background with high tech circuit board Vector Illustration</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:creator>
            <rdf:Seq>
               <rdf:li>Iryna</rdf:li>
            </rdf:Seq>
         </dc:creator>
         <dc:description>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">abstract vector background with high tech circuit board Vector Illustration</rdf:li>
            </rdf:Alt>
         </dc:description>
         <dc:subject>
            <rdf:Bag>
               <rdf:li>circuit</rdf:li>
               <rdf:li>vector</rdf:li>
               <rdf:li>backgrounds</rdf:li>
               <rdf:li>tech</rdf:li>
               <rdf:li>processor</rdf:li>
               <rdf:li>abstract</rdf:li>
               <rdf:li>abstraction</rdf:li>
               <rdf:li>chip</rdf:li>
               <rdf:li>card</rdf:li>
               <rdf:li>design</rdf:li>
               <rdf:li>electrical equipment</rdf:li>
               <rdf:li>integrated</rdf:li>
               <rdf:li>technical</rdf:li>
               <rdf:li>computer part</rdf:li>
               <rdf:li>hardware</rdf:li>
               <rdf:li>engineering</rdf:li>
               <rdf:li>line</rdf:li>
               <rdf:li>cyberspace</rdf:li>
               <rdf:li>computer equipment</rdf:li>
               <rdf:li>graphic</rdf:li>
               <rdf:li>electronics industry</rdf:li>
               <rdf:li>digital</rdf:li>
               <rdf:li>technology</rdf:li>
               <rdf:li>computer</rdf:li>
               <rdf:li>circuit board</rdf:li>
               <rdf:li>illustration</rdf:li>
               <rdf:li>creativity</rdf:li>
               <rdf:li>connection</rdf:li>
               <rdf:li>computing</rdf:li>
               <rdf:li>backdrop</rdf:li>
               <rdf:li>science</rdf:li>
               <rdf:li>cover</rdf:li>
               <rdf:li>internal</rdf:li>
               <rdf:li>connect</rdf:li>
               <rdf:li>art</rdf:li>
               <rdf:li>industry</rdf:li>
               <rdf:li>conceptual</rdf:li>
               <rdf:li>construction</rdf:li>
               <rdf:li>textured</rdf:li>
               <rdf:li>computer chip</rdf:li>
               <rdf:li>mother board</rdf:li>
               <rdf:li>motherboard</rdf:li>
               <rdf:li>black</rdf:li>
               <rdf:li>blue</rdf:li>
            </rdf:Bag>
         </dc:subject>
         <xmp:MetadataDate>2016-05-12T13:13:24+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2016-05-12T13:13:24+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2016-05-12T13:13:24+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A8qYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqv8ASl9L&#xA;1eDely4epQ8eVK0r0rTDRq2PELq91S1sby7kSO2geZ5JY4ECKTWWUkRpX+Z+JoO9MMYGXIMcmaEA&#xA;TIgUCfgOZ+Cy4gnt55LeeNop4WaOWJxRldTRlYHoQRglEg0ebKExKIlE2DuGmhlWNJWRhFISEcgh&#xA;WK05AHvSorjR5qJAmr3CNfy/rqceenXI5AFawybgqrim38rqfpGWHDPuPyaBrcJ5Tj8x5j7wfkt/&#xA;Qet/9W+5/wCRMn9MHgz7j8k/m8P8+PzCtJ5X8yxgGTSrteTMi1gk3ZCQwHw9RxNckdPkH8J+TXHt&#xA;DTnlkh/pgoSaJrMcbSyWFykaAs7tC4UKBUkkjpkTimOh+TZHV4SaE437wgsrch2Kr4opZpUiiRpJ&#xA;ZGCRxoCzMzGgAA3JJwgEmgxlIRBJNANz21xbuEnieJyAwV1Kmh6GhxMSOaITjIXEgtRRSyyLFEjS&#xA;SOaIigsxJ7ADEAnYMpSERZNBVutPv7Q0u7aW3PIpSVGT4lALL8QG4DivzGGUJR5imvHmhP6ZCXuN&#xA;/jkpRxSycvTRn4KXfiCaKOpNO2AAlmZAcyswMnYq7FXYqi9N0nUdSleKxgad415ycaAKtQOTMaAC&#xA;pA3yePHKZqItoz6nHiFzNWmH+DPMv/LH/wAlIv8AmvLfyuTu+5xv5V0/877D+p3+DPMv/LH/AMlI&#xA;v+a8fyuTu+5f5V0/877D+pQvvLGu2Nq13c2jJbIVV5QVcKW+zy4FqV98jPTziLI2bMPaGHJLhjL1&#xA;d2/6UrylzHYq7FXYq7FXYq7FXYq7FU7/AOmL/wC3l/zIzI/yP+d+h1//ACL/AOSf++ZJ+Xum31dK&#xA;UQsZL3XNNu7aMCrNb2P1j6xNx6iNDKo5HYmtOhzK0WOXp85xPwjdn3Op7bzw/eb7QwZYn+tPg4Y+&#xA;80dv1hrzfq1zptze3GmSJG17rWrGadUjdpFSWP0/jYN8I5GgG2+OpyGBJj1nP9C9maaOWMY5ATwY&#xA;cVCyKsG9u/ZPfJnlXU9Qnt9a8ys1w8IBsbOUVSINRlZowCvJiwKpx7hmBqiSZOl08pETyb9w/H3f&#xA;E9Add2r2jjxROHT+kH6pDr5X3DrK+hAIqUodL9NTbHn6RZqsqShZV2NSz8uf8x333PU1ZpNtW34/&#xA;H4+J5HiPFtfw2+XL5fYNowRFlckAiDTSDuCEt6U+7I8J7o/Y2HLHvyfOTZtpo1eWYrzICgxsrIqC&#xA;nGOMKaIoArTr36AFDwnmfx+Px5DxAaA/b7z3n8dfVF/OPlrU9dto7VL97LTz/eRxweoZXUjZ29SP&#xA;4V2+Hj169AFw9VglkFXUfd+Px9m47L1+PTSMjATn5yqvdsefff3kyiH/ACpz/taS/wDSJ/1+zB/k&#xA;v+l9n7Xe/wCij/ax/p/+Otr+TLOwVdTkLMaAfVAN/mZgMR2X/S+z9qD7U1vwD/T/APHUu0TyN5h0&#xA;fzvpjT2zPZWV9bzSXqikXpRyq7N8VCDxH2D8VfhpXKsWkyQzRsbCQ3crV9r4M+jnwy9c8chw9bIr&#xA;8HlW/JB/mdFJD5iiilUpIlrErodiDVsh2gKyUe5yPZ+QlgJHIyP6Es8lf8pbpP8AzEx/rynSf3sf&#xA;e5na3+K5P6pZr+dv+9cf/bSvv+oaxzP7V5/50vui8/7J/Sf+F4/91lYeJY9L8sRSW8YN5rPrRz3L&#xA;blLeJ1HpRr2LtuzdabCm9cG+DHtznfyd7wnNqSJH0YqIHfIjmfd0Hx7qj+Yzs3Yq7FVext47i8gt&#xA;5Zlto5pFR7iSvCNWIBdqb0XrkoRsgE015pmMDIDiIHIdfJmQsNN1HWU8paVqEVpokFJbzUHZOV1L&#xA;GtXkPxBX4ElY0VuIAJBNSTn8EZT8KJqA5nv/AB0dCc2TFh/NZYGWY7Rjv6QeQ5WL/iJF3sa5A98o&#xA;eVfKdp5s06XzB5evpdGinBvEm1OyJKCtDJbelby9aFk5g9t+mCek22ib85R+6gnD2sbBnkgY9eHF&#xA;k+yXER8a3RP5l+XvIlx5vvrnyxoE8GhsUW39PVbK0iLBAHZIZkuHUMwJ3f6B0wR0tD1RN/14j9BZ&#xA;ZO0zKR8PJER7jhySPzEo/cn/AJl/I268g3OlMZFSfW4JY0L38NzbeqvAva3MD21o0sUnqBeUTEg7&#xA;8dhk9LGMpekEHzkCPcRQ2Pk09qzy44DxTGY5+mE4yFfxRlxzAMbvegdxbyXzP5Yexee6tYJIbeGQ&#xA;RX1jKeU1lM24jkI+3G/WKUbMPfKNRp+GyBt1H839ncern9n9oDIBGRBkRcZDlMd47pD+KPMHyY3m&#xA;I7Z2KuxV2KuxV2KuxVHaRpF5qt6LW24rQF5p5W4RRRL9qWVzsqL3P0DfLMWIzND+xx9VqYYYcUvg&#xA;BuSe4DqSzfTdAtryKxsLG1kvdOMzvp8Tgxy6pcqAsk77/uLSIbHv2ryJ4bGGESAiBcb2/pHv8oj8&#xA;eXO59bKBnOchDJwjiPMYo8xEfzskvl8K4jzU9Tg0yC+sbG+AmAWLzN5miUAIAKJp2nIKAUA4qq0p&#xA;SppQlcjJkEAQD/Xn/vYuu0+nlmlGc47c8WI9e/LlP2kn7b3ryv5VN/Lbajf2otLCzFNI0ojn6KvR&#xA;hLNVT6k8lVahU9VJWnpxu6fT8REpCgPpHd5nvJ/HQF7Q7R8ISxwlxTl9c+/yj/NhHcc+8A3xzjPg&#xA;AgCqN96CvKnKtd6vyZuZqanqd25EybLl+Px+Pt5rn+P7NtvLl0oCCN9cwW0ZDUZ1Bb0nbgrstPik&#xA;Y8uMaFhXruRszMoaM5Afj8bfj3zw4zM/p5/IdZH9HQA8MI1jz1omj3RtL2BdQvwS106wRKUdjXi+&#xA;68W3+xuVFAzF+VNfl1cIGiOKXu/Hy6dTb0Wl7HzZ48cDwQ6eo/Z5eewP8IEatfSvzC0R7K41KSwk&#xA;s9Ng+F5lVI2mlA5LBFxY8nPU7fCu9VNMlj1sKMqqI+3y/HJr1PYmYTGMTE8kum54R1kdth952o7v&#xA;L/NPmfUfMeqvf3h4r9m2tl/u4YgfhRBt9J7nNPqNRLLLiP8AY9j2d2fj0uIQh8T1ke8pPlDnL4Zp&#xA;oJkmhdo5o2DxyISrKymoZSNwQcIJBsMZREgQRYLL1/NvzwGVjeRs60o5hirt/sczv5Szd/2OjPs1&#xA;o+XCa/rFil9fXd/dy3l5K09zOxeWVzUkn/PYZhTmZGzzd1hwxxxEICojkGVflp5Z1LUtdt9RiXhZ&#xA;2Mod5mBo8i7iJKdTuK+A9yoOboNPKcxIcg6Xt7X48WE4z9cxy8u8/jf3WQf/AJthtT1OytrAfWLm&#xA;8vrua3gjozuksNpGjADsXhdQeh4kio3zJ7S9cgI7kyP3R/UXWezX7nHKU/TGMIAk8rEshP2SBrmL&#xA;33YX5ie1gttP0iGdbmXTllF1PHvF6sr8mSNv2wnTl0J6bUJ1+cgAQBvh5vQaESlKeUjhE6oHnQHM&#xA;9193TrvskeY7sUw0LRp9Z1OLT4JYoZZQxV52Kp8ClqbBmLGlAFBJOW4cRyS4Q42s1UcGM5JAkDu/&#xA;HztGy+RPOscjxtoOoEoSpKWszqSDT4WVSrD3ByZ0eYfwS+RcaPbGjIvxcf8Apo/rTqLzFpOm3+m6&#xA;ZZG90jTYQBrroojvJLkVD8yS5otAAP2dyFr1yBnjCUYjijH+Lvv8f2OBLQ5csJ5J8GXIf7vrAR6V&#xA;y5/bt6q5S9tG89aDpz+aL6DVtY8q3wH+HdQgmKrKX+OMzxxslxFVf2ioFRsDUEWQ1BjMi5TH8Nfp&#xA;cbL2dHJhgeDHhldT4gP9jdg+XeOrH9O1O8vluLjXrvzBYXUk4MUemrILeO3+EcEhPGnFeQ+3sKbM&#xA;cRklIEyOQS6Vy+X7WWTT48coxxR084VvxkcRO+/Fv/uT8GQ/m9rf5e2mu6Zb/l9qF35g0i5syNa0&#xA;+6muriBzUMvE3H7xJuI5Er9ggUpuMw46mY+o8UeoLt8vZmEi4RGOY5SiACD+kd4OxDDtVggu7jTL&#xA;TUjr00k6JHpEF3LFIREz+mkcfM/COQpSg+WWnDAECp+rlycaGszSjKQlhIh9R9W1Cyz3Q7e11+1U&#xA;TPONW0cta3kl2iGSa1V4xLbXPElJkdZfhbqGHLru21xAZBvfFHY31Hce/wDHx5PWTlppbCPhZfVH&#xA;huoyo1OHWJFbjkRty+niN0ipczIooquyqPYGmc9IUS+h4zcQT3KWBm7FXYq7FXYq7FWS+SoY5hrM&#xA;Mq8opbS3R18VbVLIEbZl6UXxA9w/3cXU9qyMfDI5icv+mOV6PqtxPY+Xo7uGcWb6st42r6qorLb6&#xA;fZXKW0VrZxrxCBjMiKBTfc+I2uSRjCwa4r4j3RBoCPzDyemgMmcxI4/D4OCHSWScTIzmetcJJ8th&#xA;3Eu0LQoHhi1fWI007R9OQyabpshBSBDxPrz1B9SeSqndT1UlaenG9WHCCOOfpjHkO7zPefx3A5Ws&#xA;1kgTixE5MszUpD+I/wA2PdAb9e+jfHOMkvvN1jaXUFlbxNLNJeXVjISaLHJaRrLcVJLlnrPxrvuW&#xA;3PxNLlz1MYkAd5Hy5/f9/wDnanD2ZOcTORoCEZ+8TJEe6h6b93DsNhAB5p843umPq9tYxos9jZST&#xA;pcuOR9QaklgCqnbZS7713I/yuVWo1RhxCPMR/wB9w/j8XldndlwzDHKZ2nMCvLwjk/UOnXy4SeXU&#xA;L6XzGqyTuyp5gihUVNBHDGTGv+xLFvmSepOUGcjk5/5T7nPjghHT7Af4uT8Sd/ny91Dk870LTre/&#xA;up5L2Vo7Kzha6vGjHKVkVlXhHXbm7OBVth17UzV4YCRN8huXqdZnljiBAXOR4Y3yvfc+QA6c+SzW&#xA;dZm1KaMCNbaytl9OxsY6+nDHWtBXdmY7u53Y7nBlymZ7gOQ7mWl0oxA78U5bykecj+ruHIBLsqcp&#xA;PfKvlK91+4fi/wBWsLcVur1wCqChagqUBagJoWAABLEKCcydPpjlPdEcy63tHtKGmiP4py5R7/v2&#xA;+B32AJ2Zdpn5Q2eq6beanpmq3d7p2nKWvryCwSSKEAciZHW6KrRfiNe2/TL/AMri/wBU+wf8U4H8&#xA;q6v/AJR/9lL/AKppT/g3yX/1Nf8A07Qf9lmP5XF/qn2D/ik/ypq/+Uf/AGUv+qaZ2P5ZeWpFt7uT&#xA;zAz2MrfCWjtrcSqjUcLI109N9iwRqeBy2Ggxmjx7fAf75w83b+oFxGH1jzlKu6x4Y+Vj3su8w+Yt&#xA;P0KztdH0O2S6vbhRFYWEI5JIG2BIU19HrvWsprvx5M+dnzxxgQgLJ5D8dPv91k6PQ6HJqZyy5pGM&#xA;I7yken/Hvsh3cVCPM9c1x7N7qKK6+u65e1XV9XUggAijW1sw2CAfC7r9r7K/B9rU5s3DYBuZ+qX6&#xA;B+PIbc+u0mkGQRJjwYYfRD/fz8+oB5cz6uUVzCd07FXYq7FXr/nX83vJPm38vPLvlq60Cay1XRxD&#xA;9Z1a3MLPKYYDC9GceoRMSJG5GtQOvXLYyEjcyS4k8c4REcIgB57D4ALdH/NTV9U0vRPI8V/fz6Xb&#xA;TwxWMM8ULRw/HwWSb0F9adIFcsIi3E0FdhTL8UoRl6BIy6fgODq8WWcKzyxwxfxEXdeRPL38+7fd&#xA;PPzXsdI8l+ZrC38vefItQha3juJ47lI7orJyOzPZRFQrjcKaMB3OxyzHqZ3ZnRHeP1Bo1PZmAioY&#xA;TOMhzjIfpl+xN/Jmvp5M1ab8xPLekQa21/ZNDfWEMrRBubq7TW0hjdlYNHSSMx1Ps3XI1WkGSPiY&#xA;/jX6HW9ldrnBk/LaixRqJlzHcJeXcbrzrlB7K6tX/NDQvOP5iSE+VdVupb4mykmkiteQaeOCMx/G&#xA;qwSyJyEddgQPiBzCzRyw4Zk33F3eky6bL4mGEeGiRONVd2L9x+deVM/iHlGXzZ5g1Hye7SeXdUX6&#xA;5ZSMZPiLPAk5Am/eqPXjeivv9FM2vZ4lRkd+Lf7Q8n7RGAlDHAUMdRr3RlXv2I/Tu+b73/eyf/jI&#xA;/wDxI5oZ8y9/i+ge4KGRbHYq7FXYq7FXYqyjyJ/e6r/zDWv/AHVbLMzR85e4f7uLp+2OWP8ArS/6&#xA;Y5XoPmXfyXYg/wDLNf8A/ddsM2ef+6Hul/00g8voP8bl/Wx/9g+VLL+We6F5aXUfOyubLjd6pM9U&#xA;ta6hcsDwKu0jyuq8UQqzMo3pXKpkysHkRue71S+duZhjGHDKJ9cZ7QA+r93Ac7FCIuybAB5XTdze&#xA;JNr9xZC5tZrlNSvb2LTrdbuW89acS/uGYoLNePqfvXWSlF+0wUYylcyLF8UjQu972/m+839yMeIx&#xA;wCfDIR8OETKXAIVHh9XPxDdekGPXkLKj5ykVr7XrxAJbafTHmgk6xyI3mBHUg9CGVgfkcjqj6pHp&#xA;w/8ATxs7KjUMUDtIZQD3g/liPvTHTE1u6u4tfu7SLTLia9+sQ2UoZpH/ANC+rqViDRPyYgycmKgA&#xA;FyeIqbcYmTxkcJ4rr/Nr9vTvcTUHDCJwRkckRCjIcv7zi57ih9NC+YiBaH8sfl/felqk2kyrqMN/&#xA;by2UzwiylSP1QCeJiv6cl2IB9sjp9GakY+riFfw/8W29odtQvGMo4DCQkL4xde/Chf8AlRWu+Nz/&#xA;AMirT/styv8Akifn9n/FN/8Aoww/0fnP/qkui/InWfVT1TdCLkOZEVpXjXen+mH9WEdkTve/s/4p&#xA;jL2wxVtw375/9U2Tah5Hn1PR/wBC6Gl3FpVivK+Fjb+spAbcyyclbiGT4mZQGYbn4OEd+fFHhGMH&#xA;hH3/AI+/3UMHRavLxy1EoeJLnZv0iuewIG3LfaP9bimK8lah5g8neV9Z8taNq6DTtbD/AFgzQwPJ&#xA;E0kYid4WFwoDMgA+IMPbMb+To/zvu/W7P/RFk/mD/Zf8Swq3/K/R4pkle8a6VDX6vI8UKOR0V5Ee&#xA;R1Wv2uK1p03wx7PgDzv5MZ+0GWQoR4fMCRI9wIAvus13qev3HnNrsRaJG9raQqE9eJ4YWmKigIUP&#xA;+7iXpFF+yOtWLEjNLLdQ2Hw3/UO4fpZaKGkEbzHikeh4jX2byP8AFLqf6IASVotb03T9a1LV5jHq&#xA;N/EltbzPKslxIzyKZeJUswX0UZWOwoePemY9ThGUpH1S28/P7HYiWHLkxY8QvHAmRFVEUDXx4iCP&#xA;n0YhmC7x2KuxV2KuxVG6NrF/o+oxajYOI7qEOqOQGoJEaNtj/kucsxZZQlxR5uPqtLDPjOOYuJr7&#xA;Df3hlOk/mJOFvG1N3S/uVaNdUtYIDN6cjcnjZD6S/aHJGBqvTodszHrjvxfUeoAdNqew4+nw94R3&#xA;4JSlVjYG9+mxHI/etoeqw6ZoN8dLutUTSWkT67OLG2dFkOygu0zAVyWHIIQPCZcPX0j9bXq9Mc2e&#xA;HiRxeLR4R4kwa93C9A8jaoUs7dLq4nK6jWbT3uoIITKoqGUehI/xfDyXkoLLWnID4dnpMmwsn1cr&#xA;AH3H8fdzHa+nuZMRH0bS4ZSNf6YDboaJAPcTvIPLlzZeRfNV15tg0j9MWd1byLeaTEVAMhIdLuBX&#xA;DL6yqGUjaqsxXeoOPrtGaModeY73Y9h9rwEowz847Rkecb6X3Hv6cjsk/lLV7TVlvNYtrNNNtL2O&#xA;9u47GM1jt45NSeTgDRRRFPYAewGWdn/3Y/qn/dOL7RC9QR/tkf8Apm8I1qyu7HVru1u4mhuIpWDx&#xA;t1FTUH3BBqCOozRZYGMiDze90mWOTFGUTcSEFlbkOxV2KuxV2KuxVknkyUxJrUoFTHaW7AeNNUsj&#xA;mXpTXEfIf7uLqe1Y8RxDvnL/AKZZXpHmpDF5PtEcisdvqIY9vh12wrm11ArEPdL/AKaQeT7OPFqp&#xA;EdZY/wDsHypDrDa5d6JqMWn8PT0qR11uwmUJPGIbqS5jljZqVR16jrVfcZjZTOUCI/w/UOvMm3Za&#xA;UYYZoHJd5APDkN4m4CJB8x+lA61fTHynqGq6N6CadrV4TqDsxW+iklJdrViCqSRkpyXj8XEmqgE1&#xA;ryzPhGUK4Znf+d7vc5Olwj81DFm4uPFD0/zCBtx94lvRva+RNKLDXtO0C2N3IZdQ1e2ht9CsoEUy&#xA;JClxb3Imcqo5cvQRU+0TvUgrTI+uMBf1SAER8Qb+wfgNg8DLnlwioYpGWSROxJjOPCO76iTy6VfF&#xA;ac6fJrd7oXmWPW2ki1GWaC2uuIWNlR7qziKoEHAL6ZoKChHtmRAzlCfH9VgH5xcDNHDjzYDho4xG&#xA;Uh1/gyne97v42r+ZtctPK9jHDZWkck9Tb2UbpWGFFSOZqAkt0nA61d+TudkUS1GYYRQG/IeXI/p+&#xA;J3PQNXZ+jlrJkzkQOct95G5RH+590Y1GI+qRin/Kz/MH/LPZf8iB/XML+UJ90fk7r/Q/g75/6Z3/&#xA;ACs/zB/yz2X/ACIH9cf5Qn3R+S/6H8HfP/TMk8rf85Gee/Ldlq1rY29g/wClo1jkllhcvGUQxqyU&#xA;kA+FDQKwI6beOPmznIbPN2Gi0MNNExgTR7/x16vLMpc12KuxV2KuxV2KuxV2KuxV2KuxVP8Ay9qV&#xA;qdPvtCvZja22pGNo7zqkMsZqPUFC3pOePPjuKA0NKZk4Mg4TCRoS6937HWa3BLxI54Diljv094Pd&#xA;04hvV95G129P8sQfl7pn5O+Z9K83apPZ+cbeZrnQbEMx4yJEr2ctqUVkKzSswd1b7O+3Usp5MY8M&#xA;8uf7QuPBp9RMaiO5oxPmOsZDy7jyW6N59urSw0SbzLbyQ2GtQOy6l6bLH68U7xlhtTiwVWbh9k7g&#xA;UO20wdoD0if8Q+23ltb7PSJyHBzhLYHrExB2PWtx5jY785OZrTTec0XFYohNckwBSfgq0joRRTyL&#xA;/ex8WGZ9iG48z+Px+l0QjLLQPM8Md/PkD8vkP6pYt5t8u6L5r01b/TZYlljhEsM67BIizKpcdfq7&#xA;MjDpWFgf2OQTD1OCGaPFHu/Hw/3Pu5bjs3XZtFk4MgNGVEd525f06I8sgI/iri45fWN3Y3ctneRN&#xA;DcwtxlibYgj/AD2OaGcDE0eb3uHNHJETgbiVDItjsVdirsVdirIfKf8AvNrv/MFB/wB1OzzK03KX&#xA;9Uf7uLq+0vqxf15f9MsrP/zDvdSs9D0LVtPAkgtLzV7a+qA8R9e6/uZ07rIqNUH+mbLWzlGEZR5A&#xA;zB+J5F5nsTFjyZsuLJtKUMMo9D6YfVE94sfi2K6zrFmJ7GCTSl1CG6toXto3kmW5SKWlLX1YmUzK&#xA;jJSL1FJAoN6Zh5cosDh4rA7791jn5W7nS6WfDOQycBjKV7R4SR/HRHpJB9XCQDuUg1jQbi38zajo&#xA;mnwzXTWt1PBDGqF5XSF2UMVQb/CK7DMTPDgnKI6Eu30Oc5sEMh5zhE/MWivK1zc2cWtahCSl7p+n&#xA;8rOY7tC8t5bwMyV+y3pzOB4Vr1y3TyMRKQ5xjt5eoD9JcXtHHGZxY5fTPJ6h31Cct/jEMo8k3F1q&#xA;Hl/VPWma4v7u6hZTK9ZJTDcWs8lCxqxWKF2p4DMzSEyhK9ySPvifuDpu1oRxZ8dDhhGJ5DYXHJEe&#xA;71SA+KJ/MPS7W4iu2vboafc2VLrT1lFUvEkhhhkjQj4hJHJBSlD1BNF+LJa3GCDZ4SNx57AfMEfg&#xA;btXYmolEx4I8cZ+mVfwESlIE+REvLlW52eW5p3snYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXu&#xA;qfk1bt+Tnl/zDqOuw3f6ZuYbbTLdI6SWcl3IUWNJS/71Q4rNFxHH4ipqp55eCQnWOXXke6/0fgOp&#xA;10Dg4tRj/hFzj0mAPskByPwO1UQfmr+cOq6/5W0v8vTZW8WleW3hSG8QH1pzaQG3iYjZEqjsWCjr&#xA;4ZTmgIzIHIOZosssmGM5/Ue5k83/ABwn/wCYC+/WudAfo/zZPnsP74f8MgkXnH/nInUNc0Lypp2m&#xA;6NBpFx5bjVJLhH9RZlWNYjEqBY/ThcIGZeRNeNCCoOc/hzSxy4ovoWt0WPU4zjyCwfs8x+PsS7z7&#xA;Fo+qaTfXkVuYLvS2RY6UoqM0IMQI+1FS45IDTgQQPgIC7PWCE4kgUY/s+zf4e55nsaWXDlhAm45L&#xA;/wB9v5S9NH+cKJ9QJPMM072DsVdirsVdiqf+UFiubi/0lphbzava/VbWZgSgnS4huUDcfi+M2/AU&#xA;BNSNsydNuTG64hQ99g/op1naZMIwy1xDFPiI8uGUT8uK/cCzXQdevYNQ1HS9Rt0utRHOHXdHqrR6&#xA;kkezyw02F4gFdv7yn8432GHMRKUZC5fxR/ne7+l9/vef1mjhLHDLjJjj5459cRPIS/2s/wCw/q8n&#xA;3flZ5Y7C40Zp9Q0lT6/l3W7aB7qezeNvU+qXkUau7Rh/s/D8J9qrhlp7owuUf4ZAWR/RkGOLtEAz&#xA;jm4YZeWXHKQjGd7ccCSBdc99x8CnHkDXvN35d+aLrzVbaHeeZNY1CFrOaJbC6s7eOBmjcsP3CHmW&#xA;iUKFTiFr47Y2bSzNmpSke6JA+52Wj7VwRIiJ48eKI/iyRlI/ETPxJJJ+151538z+atS1bUzrNmul&#xA;TapdPf3dlHarZlmldnXn8KSSKpY8S5JruSTvmLklkiOCQ4fhXz73aabFp5y8bHLj578RmBfPh3IH&#xA;w6bclHydrOm21yLDWGePS5ZBOl1DVZ7W5jB9KeJ1DMKdGHFtu1QMs0uWIPDP6e/qD3tHamlyTjx4&#xA;qOQCqP0yiecSD9m499EvQYdYm8x+XpHthJPOnMQ3UdtDJHHPEzKPrUUqyxwJLEY35FlVfjo9FCZs&#xA;xlOWG3P3Dn591ij3c99qeXlpRpc4EqA2sGUgTE19BFGRjLiFUSfTcbJkpR2LyQ2+j32h3F5DNcIN&#xA;T1+bT0sLWO139WWGUIlFRaOjtxJI3qDwwCFgQMSd95cPCK61+P1M5ZgCcsMsYER9GMZDORl0EhZ3&#xA;PIgWN+8cTx/NE927FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FU88kO584+X0LHgNTtCFrsCZ0qae9B&#xA;mRpP72H9Yfe6/tb/ABTN/wALn/uS9NH5F+Z9YhHnuUWp8r/XrWG5tzMy3TwepFBNIqqvEKCzDdw2&#xA;xIHSts4iWoAPIkfocTFllDs+U4fVGEyPeOKk2cTT6DGkMLTXl1YSFYk4qOV2qkqORAVVkIpyOyVJ&#xA;JI33Jsw2G5j9/wC37HjRUcxJNRjkG/8AV+8kd3OXIC9o7rPnX8rk/JOLyYPLDWvn61lUT6m0MQKy&#xA;pPyllNwG9Z+cQKcCKCvgoOc1KJBo830rHOM4iUTYKVa1qmlar5f8x32lRSQ2czRcI5gFcFXtFOwe&#xA;X+X+bNplyRnjnKPLb/e+95bSafLhz4YZSDMXy92TyH3PN81T1jsVdirsVdirsVXpLLHKsyOySowd&#xA;ZFJDBgahgRvWuEE3bExBFEbMvsfzBMAaVl1C2vZ6Ney6ZfrZxTyDb1nhNvOPUYfaZSAetMzoa2t/&#xA;UCefDKr86o7ujzdi8W37uUB9PHj4zEfzRLjj6e4Hl3otfzMcsA115gVa/ERq8ZIHsPqYr9+T/P8A&#xA;nk/0/wDx1oPYA6R0/wDypP8A1UTTznLdX3kGdtVlGoX2j6qtnZ6m68Z2tpYPWAkNTv8AEK7/AH9c&#xA;u1RMsJ4vUYzoHrVW4fZUY49cPCHBDLi4pQ/h4hLh2eXZp3sU68r65ZaNeTXdxYJfTiIiyMhFIZwQ&#xA;Vk4srq1KdKV8CDmRp8wxkkiz08i4HaGjnqICEZmAv1eceo6V+LtKJppp5nmmdpJpGLySOSzMzGpZ&#xA;idyScoJJNlzYxEQABQCzAydirsVVbW2lurqG2i4+rO6xx82CLyc8RVmIUDfqclGNkAdWGTIIRMjy&#xA;AtOU8mat/ioeWpzHb3xageQt6ZHD1FZaKXbmv2VC8iTSlcvGll4nhnYuAe1cX5b8xG5Q8ufOvdse&#xA;Zuut0k93azWl1Nazrxnt5GilWtaOhKsKj3GUSiYkg9HPxZBOIlHlIWPio5Fm7FU48r6NFrF/Lp5S&#xA;ZriSCV7VoaELLGhdQ6kfEHK8NiDUjr0y/T4hklw73W34+xwO0NUcEBOxwiQu+4mtu6ufXYfFCaLZ&#xA;RX2s2FlKWWK6uIoZGSgYLI4UkVBFaHwyGKIlMA9S36vKceKcxzjEn5BPE8p28tzHDD60nPTLi/YA&#xA;qT6sTzJGv2fss0aCnUk7dRmR+WBNC/pJ+91x7SkIknhH72MPgREnrz3PyQ/kLy9ZeYfM9ppV68kd&#xA;vPy5vCVVxQV2LK4/DI6PAMuQRPJt7Z109LppZYAGQ7+X6EHrOhLptrp1wt9b3f6Qg9f04G5NF/ku&#xA;O3Wm9DyDCmwJry4eARNg8Qb9LrDllOPDKPBKt+vu/HIj3AqylzU78kf8ppoH/bStP+T6ZkaT+9h/&#xA;WH3uv7W/xTN/wuf+5LJL3zfr1l5nTRn1e5h8ufX7O5utP9aQWpKek5dogeO3EN07Dwy3IQM4J7x+&#xA;hxcEDLQGI3JhMf7pn8V3pdyltZ3E8UN2ixQNayXEcUhYUpwCTRTOGbjJE8J3HGhNSo3AlE0Cd+6/&#xA;235iv2PGSxZIGU4gmO5sRJHxuJiKFxkJ8t7AoSJN59/L9dajOo6YgXW40rJCCxW7RB1Uuzt6wHWr&#xA;Hn1qTuaNZovE9Ufr+/8Ab97sOxu2vy58PIf3J6/zPlXp+A4e5hOloyeQNcRwVdZAGUihBE9rUEZr&#xA;8Y/cS/HWL0OoIOuxEd3+9yMQzBd47FXYq7FXYq7FXYq7FXYq9Q80/wDKCa1/227b/qBXNxqP7mX9&#xA;cf7l47s7/HcX/CJf9NC8vzTvYuxV2Kpv5YstBu9S4a5fNY2CRtIzopZ3K0/dqaOAxWpFRuRTvl+n&#xA;hCUvWai4PaGXPDHeGPHMmvIeZ5bf29EQfM80twIrHSbCONmCW1t9UinenRV5yK0kje53JyX5gk1G&#xA;MflbV/J4EbnkyE9TxmI89gaA+5Odee40Y2MNy+jPez1F9ax2VtI1oRx2lMaP8Q5EMtKgg7EUJyMx&#xA;OOgeCzzHCNnA0YjqOIxGbgj9JM5jj91kfA8qI8wjtS8tQX88un1tJEpHdaXrNhDHCstuZlhuQ8cR&#xA;4SekreowDcl4mtKmlmTAJHh27xIDpdHl3c/Jx8GvljiMnrHOM4TkTUuEyhRluOL6RtUr9yX6nbtD&#xA;YXmnzXH146Jq1naWd1IqiREmS5aaKqtJ8PqQj4eZAINOprVkFRMSb4JxAPv4r+5ydPPinGYHB42G&#xA;cpAcrBhwnkN6lzoE9eTHfNX/ACk+sf8AMbc/8nWzF1H95L+sfvdr2d/i2P8AqR/3ISvKXMdiqL0z&#xA;VdQ0u6F1YTtb3ABUSJSoB37/ACyePJKBuJotOo0+PNHhmOKKYeT7SWXXrS72js9Oliu765c0jihi&#xA;kVizHxPRQN2Ow3y3SxJmD0juXF7UygYJQ5ymDGI6kkfi+4blMtf1DVNO/Q93aPJbfWtNKB6U5Rvd&#xA;TPTceBVvuOW5pyhwkbXH9JcTRYceXxIzAlw5ftEIj9YRH5O/8p/p3+z/AOI5Psz+/DV7Uf4jP4JB&#xA;regHSoNPl+uW919fgFwFgcMY6/sv+r/WDDtU4ubDwAGweIW7PSazxpTHDKPBKtxz9345Ed6U5S5q&#xA;O0LUl0vW9P1JozKtjcw3JiB4lhDIH413pXjlmGfBMS7iC42sweNhnjuuOMo/MUzbUvKk+vaRHq1r&#xA;G0sVRBZ68Imjt7lloi2l61PTgvFHEKSeMnj+0czJCOSqI4uh7/I90vsLp9NmyaezKMvDB9UefBe/&#xA;FA/xYzzI+qPd0T7T/wA2NAb8nz+Vut6KbXUUleMa9IA5gYXJnR5IyolDIf3R4nZPH7OYsRcuGZIr&#xA;b3O1yHhxmeGMZGXq224vO+prlflur+TPNGqGd/LevIX1C3VZbe8DVEsZICSLIKhm+MMrjZx/lfa3&#xA;Ol1Er8Of1Dr3/jv6/fxfavZ+PhGowH0S2Me49RXwoj+E+X0jfP2hTXXl/Vm0+zMt9LJLHcmBDyme&#xA;3nt/jKCvxsiMxp1A9ics1mEmEuEb/fRDj9jawQz4/ElUAARf8IlGe191kD4vFb3SNWsFV76yuLVH&#xA;NEaeJ4wSOwLAVzn54pR5gh9BxarFkNQlGXuIKDyDe7FXYq7FXYq7FXYq7FXqHmn/AJQTWv8Att23&#xA;/UCubjUf3Mv64/3Lx3Z3+O4v+ES/6aF5fmnexdirsVdiqa+Vf+Uo0f8A5jrb/k6uXaf+8j/WH3uH&#xA;2j/i2T+pL/clGa9ZaVHoenXturi/uLi8jvCxPEmGQFeO/wDJIv01yzNCIgCPqJlbj6PNlOacJVwR&#xA;jAx+I/WD9jOdFs7PS/Maw2heLQri90z9ExzmrNeSXFtI5irVqi0d1lIoNwpr8ObHFEQyUPoMo177&#xA;jy/zef8AY85qss82nudHNGGXjr+YIzAv/koAY9drHVjWpf8ATS/+BHaf9j+Yk/4/+GD/AH7t8H+Q&#xA;/wChaf8A05Y95q/5SfWP+Y25/wCTrZi6j+8l/WP3u07O/wAWx/1I/wC5CV5S5jsVTrTtU8u22mGK&#xA;60UX2o82K3Mk80aBDxoOEbLWlG79/bMiGTGI0Y3L3l1+fT555Ljl4MdcuGJPXqfh8lLU/ME13Zx6&#xA;fbQR2GmRN6n1OAuVeU7erI0jO7tTYVOw6U3yOTMZDhA4Y9zPT6IQmckiZ5DtxGth3CqAH39UNfav&#xA;qN/Daw3c3qx2UYhtl4qOKAAAVUCuwHXIzyykACeTdh02PGZGIozNn3s48uWcPkWzi8z6xX9NTof0&#xA;NpFaNQ/7tn7qvt/H7OwwRGnHiT+s/TH9Jed12U9ozOmxf3Q+uf8AvY+f45c+d5q3qXYq7FXqvk/8&#xA;6tZg8hD8r7zT4rry9fO8Lz26Ob5UuJDIVi3ZGYStVaoT28KW4BEzAkCQe7m4mulkjhkcZEZDe5ct&#xA;t9/IjZjv5hW0NuLaKab6xfxyyLFPJT6zJYBIzbNccf2t24FgHKUJAHEZla2IFAm5fbw9L/F06vsT&#xA;IZcRA4YECwPpE7PEI/ZdXESujdsh/LS4028GiWgmee/s5ZfrKMGpHBcXMKqgbiAEDKCtH+07bZla&#xA;CUZcIv1D7iR+PiXV9vwyY/FlQEJAV5yjGW/Pn37cohd+Z+r6lpVxps9hOYJWe9SQABldW9GqujAq&#xA;wrvRh13x7QyygYmJr6v0I9n9NjzRnGYsVD/fcjzHwed6r5h1bVY0jvpUdIyWQJDDFuRTrGiV+nNX&#xA;kzynz+4PU6fQ4sJJgCL85H7yUtypy3Yq7FXYq7FXYq7FXYq9Q80/8oJrX/bbtv8AqBXNxqP7mX9c&#xA;f7l47s7/AB3F/wAIl/00Ly/NO9i7FXYq7FU68n25k8wWlyzrFa6dIl7eTuaKkMDqzGgqSTsqgCpJ&#xA;AzI00bmD0jufcHX9pzrBKIFymDGI7zIH+0nuek+WPMH5U335Ra75f1PS5JvOiG9vtLvShogCiVWS&#xA;UN8AAjoyU+L9QFz26CyykYYKkR6pmET9w+G6WX//AClfkX/mJsv122bGf97i98f9685h/wAW1X9W&#xA;f+/ZNZeVPy2u/wAuvOms6jr7W3maDXWeDTeca1mhklFrGImX1JBMs0tWVtqf5DVw8kjxyHTj/XX6&#xA;Xc6bHA4cUifWMBAHkRCz37VH5+YeO+av+Un1j/mNuf8Ak62U6j+8l/WP3uZ2d/i2P+pH/chK8pcx&#xA;2Ksltbb8vxbWzz3uoPP68Yu0EMcQEJP73gA0u4HQl9/5cy4xwULMrvfb+38dHU5Mmu4pCMcYjwmv&#xA;UTv0vYfEV8Uo1OGwfV54dGEs1m8vCzDisjAmiigFTU9Nq5RkEeMiHLo52nlMYgc1CderuZvo3lq1&#xA;8p6VL5m12FbvUrcoLHSOSssckgqkk5B7VDcR9mq13YU2OLAMMfEmLkOUf1vO6rXy1uUafAeHHK+K&#xA;feBzEfuvrR6A3B9Y1jUdY1GbUNQmM1zMasx2AA6Ko7KOwzXZcspy4pc3otLpceDGMeMVEILK3Idi&#xA;rsVVIJ5oJo54XMc0TB45FNGVlNVYEdwcIJBsMZwEgYkWCuvLy7vbqS6u5nuLmY8pZpGLOx8SThlI&#xA;yNk2WOLFHHERgBGI5APQ/wAkgDq96CKgxEEHof3E+bTsr6j+OheW9rP7qPv/AN9FAfm5fXU+vWtv&#xA;I/KKC2R0FBXnJ9tmPUs3Bak+GVdpTJmB5OV7M4YxwykOZkfs5feWC5rno3Yq7FXYq7FXYq7FXYq7&#xA;FXqHmn/lBNa/7bdt/wBQK5uNR/cy/rj/AHLx3Z3+O4v+ES/6aF5fmnexdirsVdiqd+XP95Ne/wC2&#xA;a3/UTBmRg5T/AKv6Q6/XfVi/4Z/vZvTp5fyQP5Z6XH5ZSYeflsLk64zi5H/HjL9Y5GT9wVMvH0/T&#xA;3p1746bmf6svuR2l9MP+GY/90Emv/wDlLPIv/MRZfrts2E/73F74/wC9efw/4rqv6s/9+k2qxyRt&#xA;5mV1KMPMdmSrAg0IvyOuY+QVx/8ADB/v3YaaQPgEf8o0/wDp0xzzV/yk+sf8xtz/AMnWzF1H95L+&#xA;sfvdr2d/i2P+pH/chK8pcx2KuxVdHJJFIssTFJEIZHUkMrA1BBHQjCDSJRBFHcFG3mv65erOt3f3&#xA;E6XUgmuI3lco8gAAZkrxJAAA22GTlmnK7J3cfFo8OOjGEQYihsLA7rQGVuS7FXYq7FXYq7FXsH5S&#xA;+Wr/AExX1S8HprdJ8MVKsqPE6xlqb85DMpVACabmnJA297NwSh6j1/V+3l+y+E9pdfDNWOG/D99i&#xA;/gOE2eV+6RjEvzXovmoREgvFbQpIoIPFqE0NK9iDmD2j/e/AO89m/wDFr6GRYZmA792KuxV2KuxV&#xA;2KuxV2KuxV6nb6homoWdzpurP6fl3zBLFNY6zHWtnqEUKxmO5U7DpvXanxA0PJdyJwkDGX0T5S7p&#xA;V1eNngzYpxyYhefCCJQP8eMyJuJ/G+3PYxXzj+WXnTyhDBd63p0kOm3jsljqAo0E1ByBVh05L8Sh&#xA;gCRmqy4zCRiej1Ok1Mc+KOSIIEhe4o/j7DzGzFsrcl2KuxVMtC1WPTrx2uIfrFlcxtb3sFeLPC5B&#xA;PBv2WUqGU+I32y3Dk4TuLB2LiazTnLD0nhnE3E+Y7/LofJN7DTRpnmTW9PEnqra2eoxLLTiWVbeQ&#xA;BiN6VHbL4Y+DJKPcJfc4ObP42nxZKrinjNf5wexeZvyx8w+WdK8tyeYpLT9MS8J9P+psZpEns0jY&#xA;NGjqgaRUCCWFSVlC1WjgcsvT5hlAB+uPL4dR+mPXpu6rtDRy0xlIb4cliX+ddxke7c8M/wCAmpek&#xA;7Ri6t4mQjhEOUCCWB3LW725NI1abq1ty/wB57j7du/wPtQi+Ufu+Fe/+b/Nlzidi4GOZB6/UaNeo&#xA;S6+npOvrx/Tlj6o78475m8snVuV1aq/6W5tGyyKEkuJUFXgmUbJeoN9vhnX4l+KoOLqNPx7j6vv8&#xA;j/S/3XMbu10HaHg+mVeFV7cog8pR78R+eM+mXpojnxBBIIoRsQc1b1DWKuxV2KuxV2KuxV2KuxV2&#xA;KuxV9Cpc3FvodlJDIUeLQvWjIPSRRIFeniASM6cSIgK/mfrfLjjjLNIEXeevhts+fZppp5nmmdpJ&#xA;pGLySOSzMzGpZidySc5kkk2X0+MREAAUAswMnYq7FXYq7FXYqyDyJ5I1rzt5os/LejekL+85lHuG&#xA;KRKsSGR2dgHNAq9lJxVNPzH8rWvk67HlK5tf+dk0xlOr38bs0LmeMSxpHX7S+m6EHip69a7ZGQ4+&#xA;ACI9XU/oddphqDmnLIax8ox2vb+L4/HYjlVMLzHdimWi61Jp0kkckYutPugEvrFyQkqA1G4+y69U&#xA;cbqfaoNuLLwecTzH4+wuJqtKMoBB4Zx+mXd+sHqOr2nWvMvmDX/I2jaF5yWf/AFwsS+VvM5tjD6F&#xA;xAjwxJdkAI7KnJC3RhVqndlzMUMN8MjtLlLrH3j8fq0+qza2hkxg8eL68demY74Sr5DpyIvaXGfM&#xA;vlrVfLuqyadqMfGRfiilXeOWM/Zkjbup/sO+YmfBLFLhk7bQa/FqsQyYzt9oPcfNKspc12KuxVmt&#xA;1/ynHmT/AJh9S/6h3zYS/vp+6X3PP4/8Tw/1sX+6D0b80Lny9+Zuo+U9I/KO31XU9T0eyk9eKaWe&#xA;lvBF6XpUNzIVRkaoZ1IBPEVY0pgcRd7wAgg7g9+/49zFodX1R47ZdRtja6wJ9Vt7yq8HjvNOto5W&#xA;lMTCitN6hiuYyOMlKkct822POZRBPM8XzABv48pDkXlNRoY4sk4g+iIxbf0ZzlHhvn6COLHL6ocr&#xA;rZdo+sWOsWDywKiERpDe2cjlUVAf3aPIasIQ3+89x9qBqK9UIOSxZRkjY+I/HT+bL+E7HZq1Wlng&#xA;mAbO5MZAdepA/nV/eY+WUeqPqsIHzB5QuNaMtzZozarGWEhkURtcGOnqR3C/ZivI6/F+zKvxrv8A&#xA;arzaY5Nx9X3+/ukP9lzDk6LtOOnqMz+7Pdvw3yMessUunWB9J25Rv/lX3nL/AKtcn/BJ/wA1Zifk&#xA;sv8ANdt/Lek/1Qfb+p3/ACr7zl/1a5P+CT/mrH8ll/mr/Lek/wBUH2/qSW/sL2wu5LO9he3uoTSS&#xA;KQUYGlR943GY84GJoii5+HNDLETgeKJ6hD5FtdirsVdirsVdirsVfQEv/KP2/wD4DzfqfOmP0D/h&#xA;b5jH+/P/AEMfqfP+cy+nOxV2KuxV2KuxVPfLl1oRgutN1SyZzecfR1KEF5rYoG+L0/203DMBQ0H3&#xA;ZOCUKMZDn17nW67Hm4o5MUq4ecTyly69D0HvRvluPW/LPn3Rnt7l7W6F1A1tfWkjKJIJnCc4pFpy&#xA;SRGKn2qp7jGGIxyxjLvHuIRm1YyaXJOBIIhLylGQHI9xH7Q9B/wJ+Z3n7ype3ulRpfWcIfU9Yu7q&#xA;WtzdXnqzDijPWrJCigdNqCvQZZnyGMBAcjv8bLj6DAJ555pEmcfQPKPDE/aTe7xTMJ3bsVer6d+b&#xA;OseafJVl+WXmKezs/L9pCBaamFMc6PbfFAJXeQRMij4aBQx8eXXI00ISlwyNWOfc67tLNmxYxPEO&#xA;IxkLj/OHKu/4/Pa0m8uazb675Y1Dy75geJo9LtJbrRL+WRUmhkjA/cpyNZI2/lFTQbfs0ysGUZMZ&#xA;xz/hFxPUeXm6vXaWWm1MNRgBvJMRyRA2kD/Ee4+ff8bgOa16V2KuxV6LoOr6D+k7vzbNZPfq0Dpq&#xA;umKQTC8wCPKEanqW8qkrUn92W3B+Ena4ckOI5SL23Hd+sH7Pk8rrNNn8OOlEhD1Dgn/OA3AvpOPP&#xA;+kBtW9Cvy517VfIP5gQalo2qR2mjapDPHDqMqo0EtvxLqkgkICyRyogZSQwb2O+MNPHxACf3crou&#xA;wnr8p08jGP7+FcUOt2PmCLII6fFBWvmX4LTzF5gEmpi51bWm1CZFFZJLu1tVZqK0SjlyYgAinbpl&#xA;mGcYRjKQuPFP7YxaNbgyZ8uSECIzOPCRflPIe4/cwbTtRvNOvI7yzk9OeOtDQEEEUZWU1DKwNGU7&#xA;EZhY8hgbHN3efBDLAwmLB/HwI6F7D5F1HXNcn0e3trbQbNNVuYrGKS7JeZQZGjVf3vN3CUPBOZ2o&#xA;BQZto6qQx8dQr7fteSy9lYpZziM8/Fz22jvW/pob9TW580b+bmta1+XPnB/LktvpOp0gjuUuo7VY&#xA;jxlrRXjJfiw49OR2ocq/lSX82Pycv/Qtj/1TJ/pki0T8ybzULPULya00i2j05FleAxxxzSqTQiHk&#xA;rCu1B8LfEVqKEkX4tcZAkiA4fn8Px3OBq+wYYpwgJZpGZq7JA/rb/pGwO97I38yINI1uxspJomTU&#xA;ZIdRlsr9QOXDTYlnaGdSfiWRefE1qpp1qxNmuEMgF/VUqP8AVF0fxt83H7Cnl085AH92JYxKPnkP&#xA;DxR7iNr6HflUQOMZoHv3Yq7FXYq7FXYq7FX0BL/yj9v/AOA836nzpj9A/wCFvmMf78/9DH6nz/nM&#xA;vpzsVdirsVdirsVTDQ9c1HRNRj1DT5PTuIwy1IqCrgqykeBBy3DmljlxR5uNq9Jj1GM48guJ/QzT&#xA;R9W0y9jivvR/0WynW8urFAWk0+YOGN1aj7T2kjAerF+z/wAC2Z+LJGW9bA2R/NPeP6J6jo8/qtNk&#xA;xkwv1TjwiXTIK+ifdkH8EuvzDItfk846F5Wkn8n61cxaPdWxt9Vs4HB9S3Z5ZVlVlHxLwmKsy0PH&#xA;f+ZUlrNL6BOO4A/Wb/H66r7G7VAyyw5RwylKx03oR4SOh2+e380yKfzp8tfk9osHl9vy81mTVpLm&#xA;CRtUDSCXjxCek7fChjker8kptTovfUvWvL8VdirsVdirsVdiqaeWNXj0fzDp+pTI0trbTxvd26Nx&#xA;M1vyHrQ1O1JI6qa7b5OEzE2ObVnwQywMJi4n8fA9x6PYPzB1v8v/ADZPLqXkbQ1tPKdrbqvmHS0i&#xA;jtJklXkyXtvChaFXSOo5Bvj4lWFKVy9NAmBP1Q/iHUeY/Hk6btLNGOeAHozH6Jfwy74S61y912OT&#xA;BxoXmRJJvJOjXlrqmnagE1ATx8SqpVRzYnkYuXBK96U7E1s8HJ/cwIlGW/47ujT+c05A1maMseSF&#xA;wrz7v6VWfjfcGQ/lT5//ACt8g6vfrrWgnzQk1q0B1ApFIvqk/FHFb3FFELDYyH4z/LQ8cw8ogNo7&#xA;95/V5O40pzSueT0g8o9R/WPee4bDz5sUtBY6rbarq9j5bs4rTTmWWZDdXQZRKXZFSki8qCM9AMvx&#xA;xEomQgKjz3P63A1E54skMcs0+LJdemHSv6PmEeNFub2bSrqXy9aXX6cV5YJ2vrmrCJeUgeR5iFcI&#xA;K9/DqCBbHBfD6I+r+kf1uJPXV4g8eYOKgfRHrsNuHcX+KoobXdEg0nypc+jpa3FtcXiiHV5SBdWz&#xA;LVXtZoxuHR43So+ButK8KDNiEMRqNgn6uo8j+K+xs0erOfUxvJwyjDeA+mXdOJ7iCD/OHL+dc51O&#xA;002TTNMu9Su/qVla2+rwy3HFn4tqCC2jqqgndRKV8WXj3zYZIxMYmRoAT/2W36/k85p8mQZJxxx4&#xA;5ylhNcv7s8R/3t9wNpJfflz+V9v+S7eaoPNyXnnJZxGNJhlRYmBuBGUW3liiuqiE+pzO3t3zQSAB&#xA;oG/x5voOKZlEExMT3Gr/ANiSPtYDoflXV9Ztr26tEVbXT4mluLiVuEY4qXCciKcmCmlaD3y3Dp5Z&#xA;ASOUXF1faOLTyjGZ9UzQA3Pdfu3SfKHOdirsVdirsVfQaRiXR9PjqQs+kJZ8wOXGSblQEDvRht1J&#xA;IA3ZQenAuA84U+Xk8OWZ/m5jL4Cvx8zyBrhOsaPfaRfPZXqcZVoyOp5JIjfZkjb9pW7HOcy4pQlR&#xA;fSNLqoZ4CcDt9oPcfNBZW5DsVdirsVdirsVRFhf3mn3kV5ZymG5hPKORfuIIOxBGxB2I2OShMxNj&#xA;m1ZsMMsDCYuJeiahr9zoMvlu501Fgtr6AS3Ngpb0T9Y9OV1QEkqFeQlN/hzazzHGYGOwI5dN6P8A&#xA;Y8th0cdSM0chuUJUJdfTxAX37DfvYx+Y2mWem+cr+0s4xDbqIJBGuyhpreOV+I6Ac3NANh0GYeux&#xA;iGUgctvuDuOwtRPLpISmbl6h8pED7AxrMR2zsVdirsVdirsVdiq9JZEV1R2VZBxkAJAZahqHxFVB&#xA;wgoMQavo6OWSNi0bsjEMpKkg8WBVht2INDiDSyiDzWYEomDULuC0urSKTjb3gQXCfzCNua/c2+TE&#xA;yAQORap4IylGZHqjdfHZdFquoQ2LWMczLbNPHchQd1lhV1RlPVdpW6fwxGSQjw3td/j5sZaaEp8Z&#xA;Hq4TH4GrH2BU1PXNU1MRC+nMxiULyNAXKigeQj7b8aLzarUAFdsOTNKfMsdPpMeG+AVf4odwveht&#xA;aYx+ffNUdktml6REqogJRGYqlQAzEEnbiDXsq/yjLhrMoFX+Px9w7nEl2NpjPjMd9+p6/g/6aXeV&#xA;L/GfmX/ls/5Jxf8ANGR/NZO/7mz+StP/ADftP60HqWu6vqaRpfXLzRxEmOPZUUt1IVQFqadchkzS&#xA;n9Rb8GjxYSTCNE/NAZU5LsVdirsVdir0FPzDintdbvX42uoXL2ZtNMAZ7WRY19GZXBHHi8LUO4Oy&#xA;0OwzZjWgiR5SNUOncfseXPYhjLFAeqERPinsJC/VGvMS9/M3zTnzbqPli50+f17iDVLS1uvRV0li&#xA;a89CZEf1ojz5GRHb4tiknE86PVmyNTPGYmyJAH40eo8/sPXdwOzcGphkHDGWOUo3yPBxAkcJ2qiO&#xA;X8UbHDcaA5lrOmNpmqXFiZBN6DUWVQQGUgMrUO4qpG2ajLj4JGPc9fpdR42MTqr6ILK3IdirsVdi&#xA;qY6BrH6I1OO++qw3gVXRre4UOjK6lTsQaGh2OW4cvBLioH3uLrdL4+Mw4jHluOey/wAz2VvY+YtS&#xA;tLZSlvDcSLChNSqBjQV9hh1EBHJIDlbHs/LLJghKX1GIt6/YaU115TsY72wRZI7aCG8iuFUTxIEV&#xA;IZoXHKlZODFDQ+NOPxbyGO8QBHQXfPyI/H3PC5tRwaqRhPYykY19JNkyjIbdLF8u7ntzv82f+U91&#xA;D/jHaf8AUHDmr7R/vj8P9yHqvZv/ABKHvn/u5MQzBd47FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYqyLzRa/XifMNk4nsLj00nA2kt5hGF9OZe3IqeDdGHvUDK1EeL94N4n7&#xA;D5uq7PyeH+4mKnG67pC+cf0jmPdRY7mK7V2KuxV2Kpt+kdG/w2LD9HD9LfWDKdS5mvpUpw49Pw98&#xA;u44eHw16r5uF4Gb8xx8f7rhrgrr3pvqWjT6v+YeoWkcMk8f1qSS5WEosggjPKQq0hCBuPTkeuX5M&#xA;RnnIrr9jgYNUMGghMkA8IAu64jy5b8+ddHrWjwW0Hl6eO0mmmsBFAbL6yWMkcTXCMIjyANIySo9h&#xA;m7xACBomtqv38vg8RqpylnBmIidy4uHkTwnf483k/wCbP/Ke6h/xjtP+oOHNL2j/AHx+H+5D2/s3&#xA;/iUPfP8A3cmIZgu8dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVbDMFK&#xA;gkK32h2NPHFFNYpdirsVdirsVepaboRufN2u38sU8ave/UbDU7aX03trueRY0k4qyPx5SorMKgcv&#xA;smu24hhvLKRvnQIPIl43PrODS4oAxPo45QkLEoRBJHIi6BIHWuYrfo15wjg1egoiOdh2Avu2bWWw&#xA;l+P4nlcVmWP3f9O3mHn/AMqanrutHzBoxivNOv4YiknqxxcfQhSIn94yVDenXbcbqwBGajWaaWSf&#xA;HDeJ/QKew7F7Sx6bD4Ga4ZIE9CfqkZdAe/48xYLzy7tLqzupbW6iaG4hYpLE4oysOoIzVyiYmjze&#xA;pxZY5IiUTcTyKjkWbsVdirsVdirsVdirO/KWieXrO1g1nUZ4tRuJYLmeLTEEcgiW3R2dplfkOdEA&#xA;RXTjVg3xcSubHTYscQJyPEaO3u7/AMee7zfaWrz5JHDjBhESiDPcXxEVwkdN9yDe1em7ZBd2XlfV&#xA;II7DUYdNgubn05LF9Jkto5asePpt6cETcj4FGB7UI3ypQxzHDIRBPLhr9Q/S6zHl1OEmeM5TGNiX&#xA;iCRHvFzO3xiR1tT/AOVTaL4X3/I6P/snwfybD+l8/wBjL/RJm/ofI/8AFu/5VPovhe/8jo/+yfH+&#xA;Tof0vn+xf9Emb+h8j/xbv+VT6L4Xv/I6P/snx/k6H9L5/sX/AESZv6HyP/Fu/wCVT6L4Xv8AyOj/&#xA;AOyfH+Tof0vn+xf9Emb+h8j/AMW7/lU+i+F7/wAjo/8Asnx/k6H9L5/sX/RJm/ofI/8AFu/5VPov&#xA;he/8jo/+yfH+Tof0vn+xf9Emb+h8j/xbv+VT6L4Xv/I6P/snx/k6H9L5/sX/AESZv6HyP/Fu/wCV&#xA;T6L4Xv8AyOj/AOyfH+Tof0vn+xf9Emb+h8j/AMWuX8oNHlR6SXdvRTSeSSN1VqGhK+jHyG2/xDbc&#xA;kCpw/wAmQPePx7kH2nygjaEvIA/fxH7j7idnm+u6FqWh6lJp+oR+nNHurCvF1qQHQkCoNPmDsaEE&#xA;Zqc2GWOXDJ6zR6zHqMYyYzYP2eR/HmNkuypynYq7FXYq7FXYq7FXYq7FXuvluy0i41qHWtMklK3l&#xA;1C9ywYtb3AluPUjNK/DJAY+JRkBUmtWBBzo8EYmfHHqR7jv947nzjXZcscJw5APRCVfzo1Gj8J3Y&#xA;IJvltRCe6jeWSS6naTycJJjPIEALOYoLppJWVBu3EL0HjU/DUjInIXIHz+wutwYpkQnEbDhHxlCh&#xA;v0/ZXOgSq00rTrfUodS0i2B0+6hjjmSFxCsDkj0ruKNGeIo54RkbkinxkmQZTHHES4oj0n4V593l&#xA;+n6nNyajJLGceWXriTVi+IdYEkA2N5dOvpHoYD5ig8s32o3WmTBrPXXFq1nqEj/6Mw+qQhYJNwIw&#xA;d/j4ncipC1zW5xjlIxO09qPTkNvJ6XQz1GPHHIPVh9XFH+L65eofzvdfK6BLBru0urO6ltbqJobi&#xA;FiksTijKw6gjNdKJiaPN6TFljkiJRNxPIqORZuxV2KuxV2Kp/oA8qQafdahqrPdahAwFjpNGWKUk&#xA;bNI6ipRTuyhlO3fltk4fCETKW8hyH4/Y6zW/mZZI48XphL6p9R5Ad/caPwrc+h806Hpvl6O7toLS&#xA;bWr0PFNZwwCJIVVq/viwcyqaK3AMA3RqgFWyRqIQx2AOM9K5e/v/AEutl2dmy5zGRmMUKIkZWZf1&#xA;eXCeYuiR03IIPfJOrfl/e+Z9GtNZ1uTTLC5Upql5FpthAyM8TclF8kcc8Cs/wFlVvhP2h2jk1ERH&#xA;0n1V/Nj8fVsQ26fs/IchGWH7vi2/e5DsOXoJlE9OZHuSn8yta0ry/wCbbzRfy41iaPytaFPq9xZz&#xA;OhmleNWmaSZSpm4vVFPQAbeJxxqZxAETwjy2v3uwl2ZhnMzyxGQn+cAeEd0dth9p6ksW/wAb+dP+&#xA;r/qX/SXP/wA14/m8v8+XzK/yTpP9Rx/6SP6nf4386f8AV/1L/pLn/wCa8fzeX+fL5lf5J0n+o4/9&#xA;JH9Tv8b+dP8Aq/6l/wBJc/8AzXj+by/z5fMr/JOk/wBRx/6SP6nf4386f9X/AFL/AKS5/wDmvH83&#xA;l/ny+ZX+SdJ/qOP/AEkf1O/xv50/6v8AqX/SXP8A814/m8v8+XzK/wAk6T/Ucf8ApI/qbTzp53d1&#xA;RNd1NnYhVVbu4JJOwAAfEarN/Pl8yg9laMCzixf6SP6l03nHz1DI0U2uapHIv2ke6uFYfMFsJ1WY&#xA;bGUvmUR7L0UhYxYiP6kf1Jr5X/M7zBpuohtVu7nVdOlotxDcSvK6AGoeFnaqsp32Ir7EBhdp9fOE&#xA;vUTKPn+hwu0PZ/Blx/uoxxzHIgAD3Sobj8crB6hrWhaD5w0OL05BJbOpk0+/QDlCaeHw/D8NGQ0p&#xA;T9kL+53GXDDPDy6Hu/H4/o8dpNZn0OY2KkNpR7/29x359b/ecevvy/8AN1neTWrabLMYmK+rCpeN&#xA;qd1bwPvv475op6LLE1T3eHtrS5ICXGBfQ7FDWXlDzHd6o+lx2TpfxxGdoJqRNw2oRzK15FgF8Sch&#xA;HTZJS4a9Tdl7T08MYymQ4Casb7/Du6pxp3kCKSxgur/Uo7dNQt2fTpkVnhFypFYLiQCkZCsPatd6&#xA;qRmRDRAxBlKuIbd19x7vx3OBn7aImYwgZGEvUOR4f50R1+/lt6gVbzd5R06DT11PTInshBGiXdjN&#xA;NbzfHWhkjkjnkLDcV+Eb7gAGgOp00RHijtXMWD+lr7M7TySyeHkInZPDIRkNu4gxFfM91k7mEZr3&#xA;onYq7FXYq7FXq/5Ra/p4sl0liBfwXBu4onPESqAp+Bv5kKkkH2O68qbrs3NGuH+IG/x+P0vFe02i&#xA;ycfij6JR4Se73+/9nOrnmtaPDqlqXSSRQkj3CXCER3FpcElmlRqim/2t6dj8HFotllxCY/Fg9/4+&#xA;76ea0mqOGVEDkBXOM49x/R9nqsZNY2K2dqIv3aM8UKzMicIjNFIZ5n4fBwWSfmWXbiK9KP6bCHCK&#xA;93z5n7fxzpzZjkle+xNb2aI4Yi97qNUd7Pf6eMk8yeTtL1PUrfVvqcbXtm6C5snqsc6LsI34CuwX&#xA;4G4704sKAiPHz6WM5CVbjp3/AI6fL3bHQ9qZMOM4uI8Egal1ie8X/shfXiBvecS8y+Wr27jb9KW8&#xA;VgQ/DSr1XLJFGxIitbtnCsIzTjFKdlI4k8accHPgMvqFdx+4Hy7j8PdvNBr4QP7sme3rjW5PWcK6&#xA;9ZR6/UN/qh3+CvN/6OvtT/Q16dO0yQw6heiCQwwyClVkkA4gjkK79x45q5RMTR5vVYssckRKJuJ5&#xA;FJcizdirsVdirsVdirsVZF5Q8oXOu3PqScotNibjNMtAzsByMURb4eXHdmPwovxN2BytNpjkP9H8&#xA;fjydV2n2nHTRob5DyHd5n9A5yOw8up6lq+k+VtMt7dblLH4ikUCIWHFNmCoUdiFbZmah5V5EtVI9&#xA;zkyRwxAuvx+P077DjdPpsusyGXCZ95v9Nge4Daqr01KZR/ys6w/6un/Tv/16yj8/H+d9n7HO/wBD&#xA;8/8AU/8AZf8AHl0f5lWcsixx6kzyOQqItsSSTsAAItzhGvB/i+z9iJdgzAsw2/rf8eVm89SfXf0f&#xA;9d9HUWIWO3u4TbDmwqiuzw/ByqKFtt99t8l+b34b9XmK/Q1jsccHicNw74y4tutVLevLf4pFefmv&#xA;r9ndS2l3YtBcwMUlidowysNiCDDmNLtGcTRG/wCPJ2WL2bwZIiUZXE8jv/xSb+VvP+saub24ltHG&#xA;n6dCZrydHjqg3I+ERxs2yt0PatG+y1+n1sp2SPTEb/j8focHtHsXFg4YiQ45moijv9pHd+z6gB1a&#xA;98tC2MNzHcCHVBHe3c89sZLye1h48VtnWK0iiTjDRW4bVJrTK8ksdUb9W523IHdsAOTkabFqOK4m&#xA;N47iAJVCMjf1DinKR9W4voHnetXGl3GpzS6VbNZ2LcfRt2YuRRQGNWLH4mBNCxp0qc1WWUTImIoP&#xA;VaSGSOMDLLin1P4/UL7gnXkfzxeeW7wo/KbSp2H1m2BoQdv3kW4o4oO4rQbghWXI0mrOI/0S6/tf&#xA;siGrhY2yDkf0Hy+7zBIPT521G7uV1PS0fVtKvIVNuYr6S2VGUgH92OArQEUU0B/ZWnHNxIykeKPq&#xA;iR/Or8fjYPHQGOEfDyEYskDveMSv47/b/pjzQdhB5naG1bXfLianqNlX6tqEGomwlUEUO8A5cmr8&#xA;XxUPWnIsWrgMlDjhxSHXi4fucjNPT3LwcxxwnzicfGP9lt7tr6XQAB5b6xrFsXa38kwQtIayMmpK&#xA;pY+LERbnfvmRHLMcsQ/037HXT0uKdcWqka/2r/jzGvzM8ya/J5Xe3m0OPSoLiVI5bj66LlmXdvTV&#xA;OCbkqDXwGYmvzzOOjHhB/pW7bsDQYBqRIZTkMQSBwcPxuy8dzRPeOxV2KuxV2Kr4ZpoJkmhdo5o2&#xA;DxyISrKymoZSNwQcIJBsMZREgQRYL3DyX50uLmOKDUY3stdijEkkcqmJbiAAkTICFpQDeg+Hr9iv&#xA;DoNHreMb/WPt/H425efds9inCbiLxS5f0T3fq7+X1VxTBxEU+sW4pEP76H7Pplae68QOI7jjQbhQ&#xA;rRbA1zH4/H46GPPi74Zc+h7/AMfbvsSZRmV6l5r0fS7uC3n1ZtIunUrCoh+2pYLT1JbeSFACgB+J&#xA;aU+LjQKlGTUQgQDLhPu/ZX3edchmafs7LmiZRx+LEc/V+gTEjz7jf8PFZlIddpFe2zLeObiKQFHk&#xA;mVWYEgB1kQBFIanxIAAe1GCnLZASG+7jYyccvQOEju+yjuduh3I62LY55r86eb/Jn5bat5NtrlJt&#xA;J1K4S243KtLc20E8LGSCOYsAyFYl4Fl5BWpsRto9fpuAWSTuB7hvt+p7jsHtLxpcIjEWDIkCuKVx&#xA;HF7zylz3Gxp4LmseodirsVdirJPLWqJb6TqFlf2HraNesiXWoxw8pbaWjekyudjvvwJFabEZl4Ml&#xA;RIkPQetcvx3Op1+nMssJwnWWF1EnaQ67fp6dbZnpvkltf8q2+mRfvPQ/0jTtRitHRijseSy1PFg/&#xA;LY1VvhH2gDTPhpPExCPduDX3ugz9rfltTLIduLaUTMHccq67fEbnlac3vkjztd+lz+pfuYxGpfS4&#xA;Lg0Xp8Vz67D5KQvtl89Jml/N/wBID99uBi7X0cLrj3N/3so/7jhHz38090vRp9Os44LpuEkS0kkE&#xA;MdpU19QrDFCIo41B+IstP5i3L4ocnHiMRR+6vkB+PO/p1uo1UcsyY8j/AEjPyuUpWSelH3Vw7ZTJ&#xA;b66sbcyRXkenQ9AZIvUSkdFNI6w8QmyliVANFpUiOO3iMRz4fx8Pxt5DEOGOSVGJmfI0d/P1XfOt&#xA;73lyuc0f8Wy/9TNY/wDSNH/2V5H8yf58fl/x5s/k0f6hk/0x/wCqaXat5qv5bS7EmptLZ2rGO+ls&#xA;45bK7tJVBdTJEDLKY2VSyyLyXY8lZakVZNQSD6thzrYj4bmvP7KcrTdnQEo1Cpy3iJETjMctjtHi&#xA;B2MTR32kJVcRtPIOl+aY/wBMRnVLwShU9flEgYRqI14hoI6qoTiCBTanbMKOjjm9fqPy/U7zJ2zk&#xA;0Z8I+FCum557/wA47738WRf4AtpYolv9FuNRmhQRLdXLL6xRdlVmj9PlxGwLb02rQDMr8mCPVEy9&#xA;7qv5akCeDLGAJuo3V9ed1fl1XJ+X2lIHVPLUirIOMgDsAyghqMOe4qoOI0Uf5iD21lPPONvL9i6+&#xA;8ueanScWf1mJrsGK5mlihmZLdhQw20S+hFGCCeVR8W2+2GeDJvV7+7l3DkEYddpgRx8J4dwAZC5f&#xA;zpH1SPl3b7bsI8y/l/5y1JrWHTvKn1C0sYzFEwkgM0q7fFMysoZtq9OpO5FKa7Po8s6EcfCB7r+L&#xA;0Wg7a0mLiOTUccpmztKh/V2/FDZJf+VSfmJ/1ZZP+RkP/NeUfybn/m/c7D/RLoP9VHyl+pUj/K38&#xA;zI14x6VOi9aLNEBX6JMI7P1A/hPzYS9ouzjzyR+R/Uz3yV5LTy5Zyar5ldlvFQu/rOwS2j70P8/i&#xA;46dEqc2Wk0vhDiyc/u/Hf8nmu1e1TqpjFpx6L6DeR/V/R+MtlL/lZ/kr+e7/AOkq6/6pYP5Qw+fz&#xA;P6mf+h/Wd0P9JD/imL/mH5x8va1osNrprTmdLlZW9WaaVeAjdTtIiCtWG9cw9bqseSAEbu+8u47E&#xA;7Lz6fMZZOGuGtoxHUdxLzzNW9S7FXYq7FXYqrWd09peQXSKrvbyJKqSDkhKMGAYdxtvir2Lz1+aF&#xA;x+cF/a3rxQ+Wta8vW7zWEiz/AATDkrSAyuIzGyMoZOu3L55l6bGJXR4Zx3Dqe0tRLERxR8TDP0kA&#xA;WQT162Dyr3d6r5A89R6vbmByLfV7dQZET4UlUEKGQdF3I+H9k9P3ZpHttHrBMVykPx+O73cuS7a7&#xA;HOCXEPVil9nv/X1/r/WZ+a7LSdU0q6trxY4bdC6i5dSwt2jgaT1kC/EAvBRxH7Pw7jgFt1MYziQe&#xA;X3bc/wAfqrE7Ny5cOWMoWZbbfzrlXCenXn378+LiryxbfU9CS1S+N/Al5ElpctQF7UJL6YNCwZVd&#xA;GUEEqePwniBjp48MKuxe3u3XtDJ4mYyMeCRgeId0rjfzBBrY7772k/56f7y3H/bQtv8AqEfMftfk&#xA;f6w+5z/ZD6h/wuX+7DxjNC9+7FXYq7FWZeWv8UWflS+1C3jiv/LTy+nqumPRyVAWsh4jlD1WjKwa&#xA;oBoQu2fg8SOIyG+PqPxydDr/AMtk1McciYairhPl8O6XXYgjmNiU/ttdsND8q2mr+m1xc3CtFoVh&#xA;c3rXiW4qyyS8eMSQ8aDZPi3Aqu9cmOaOPGJcyfpBldfq/HJ1mTRz1GplivhjHfJKMOAy7hzJl8du&#xA;ex2ZV5W/xLrfmaz8rWtzDqmuXkLXLi0lWK0t4lUsfUnYzlyQAQFToR1rtPJqzj2keI/0eXzadP2O&#xA;NTcscfDgDXr5n4bUOnM72m2pXNloOvXuhapeCXW9NQPd2aNIyRCiyVa69GOOOP4lYvyr0ovqcKZW&#xA;LU4z1s1f4NbfjrTqtT2ZqIHeHDHi4b2390eImRPQV13PDxWSRXvlfV/NmlWPnT64fLvrBtRtrKGV&#xA;QqpG3oC69HlJClWHCCP4kQ8mPNjmFrZmYrf3Aff3eUenXcu77DwQwz4/SBvvKXz4f5249U/4jtH0&#xA;xDF/zL/LvTX84Xkv5e25m8qShGsfUm4MjcQsqcbtknoJA3HmOlNzmCNFkIBAd5LtrTRkYylRHkTf&#xA;uIBZBFpqena2Uek6hMiwizeWa8tYmeAv8NvKYZwZIlAFAdxUgbUGbcQ5Dhl3cxy7tjyeRlnNymcm&#xA;Mb8W0JmpV9Q4obSPy5HnugPPP5kW2kzDSdCWOa6tzwnuP90whRT0YgnCpFAGOw2pTZVSrV64QPDD&#xA;cj5DyH4/Zk9kdhSzDxc1iMuQ6n+kbv4det7kyiX/ACtfzV4wf8C//NeYX8o5PJ3f+hzTf0vs/U2P&#xA;zW81E0rB/wAC/wDzXj/KOTyX/Q5pv6X2fqTvWPNnnay1FrKyltdX4wi4aWwWSdVQkirFHYDpy69C&#xA;Oh2GRl1OaMqFS2vbd1+l7N0eTHxzEsW9VOo7/EfD3g+9I/8Ala/mrxg/4F/+a8x/5RyeTsP9Dmm/&#xA;pfZ+p3/K1/NXjB/wL/8ANeP8o5PJf9Dmm/pfZ+p6b+SOveXvNl1rMfnjzHDoCWdukmnj1Et/VZi3&#xA;qNznLq3pBV+AfEa+xx/lHJ5L/ob039L7P1MB8+anqepaXAljq36a01CZb1rW1khjiZaemZSzyNQ8&#xA;m4huPfbLNZklOIqXFHrQ5e/8Bx+x9PjxZCZ4/Cyco8UgSe+th5XV+9KYPMXk6N7Ut5dEix2LW9wr&#xA;TN8dwaUlG3eh3+0OW32VykZ8Qr0fw1z6/j7/ACc2eh1ZEqzVc7Hp5R7vxsa3+osUzCd07FXYq7FX&#xA;Yq7FXYqq2tu9zdQ2yMiPM6xq8jBEBY0BZm2Ub7k5KMbIDDJMQiZHoL23LPfI2jXGi/mBPplxJHLL&#xA;bxENJESVNWjb9oKwIruGAIObLSYjjzmJ6D9TzXa+qjqNCMkQQJHr8fxYelG3guJHguIxLBLdSpLE&#xA;1aMrWzAqaU2IzbcIOx5X+h5HjlEcUTRERX+nCPtlgjtXdl/dxyLA4WivIzEKgB+FUDcQOwWgpQBD&#xA;FZGgPx+Px7uHHmSZUOZF+7v8zXxuzdni4+YfnD5ns7ydtJjb1r1LhZr+VdkjkjRoxENhUqGo2wpT&#xA;f4iwXUdp6gSPCOd7/qew9mOz544+KdoGNRHUgkG/1e/uonmeah652KuxV2KploPmHVtCvhe6bOYZ&#xA;aFJEI5RyIeqSIdmU+By3DmljlcS4ms0WLUw4MgsfaD3g9Cnn/Ky9X/6tuk/9IEH9Myfz8v5sP9KH&#xA;XfyBi/n5v+VkmWp51vdPuBP5c8xadZ3fChvrLSpLe4j5EgqHijmFGUePQ5k5cokDEShv/Q/tdZpt&#xA;JKExOePNcTteYEcvOUe+v2JbZeaYpfMrSX813LaMz3N7qk0bvc317xIjnlHGQhYyeUMfRSATvleH&#xA;JGMq34B1rme/4dA5Ot0+XLiMyYnLLbh4toR6gbjc8py6jYbMz8pedvyy0DRNa0fz3ZXdzrJsLcWK&#xA;xM1Umkt+cyKVYehcG4cs8jb+PShp1GScZCNnYD59fi5nZ2nxZISmIxPFOVEi/SDUa/ogcq2rk8yu&#xA;PM2gyzaaIW1W2toy/wCkz9aaWZ1KrwCMWRGIYMahE2NKbVJlqIExrjA67/j9DGHZ+cCd+FKRrg9N&#xA;Ac7vYnlXWXLnvTPdM8wfkw35V+ZDK+sf4uEjLpE1xLcu45gehR4SLVEqG5iT4iK05bZVlykkmBlw&#xA;+ZcrS6YCIGaOLxP6Mf17vE8xnZOxV2Ko7S9a1XSpJJdOuXtpJVCO8dASAwcfcygg9jlmPLKH0mnH&#xA;1GkxZgBkiJAf2fcjf8b+dP8Aq/6l/wBJc/8AzXln5vL/AD5fMuP/ACTpP9Rx/wCkj+p3+N/On/V/&#xA;1L/pLn/5rx/N5f58vmV/knSf6jj/ANJH9Tv8b+dP+r/qX/SXP/zXj+by/wA+XzK/yTpP9Rx/6SP6&#xA;llx5w803NtJbXeq3V1BKCrpcStNseoBkLFa96YDqchFGRI82UOzNNCQlHHGJHcK+5J8oc52KuxV2&#xA;KuxV2KuxV2Kq1naT3l5BaW68p7mRIolJAq7sFUVOw3OKvZV/KDzP+Wnnqws9cmtbn9I2TzW81m7u&#xA;lUkjWRD6iRtVSR2oQfmBn9nf3nwdB7R/4t/nfoLJYP8Aesf8xkn/AFDNm8HP4/oeGn9P+YP90EQ3&#xA;/HMuP+Y+3/5OZL+E/wBYNQ/vB/wuX3PAvO//ACmmv/8AbSu/+T75zWr/AL2f9Y/e+m9k/wCKYf8A&#xA;hcP9yEkzHdg7FXYq7FXYq2KVFdx3A2xVl1z5y0+C/sINEiutN8v2wQ3dpDM0c1xITWV5JEYMzUog&#xA;+Km1QFrQZ0tVESAhcYDmL5/j8U6LH2XklCZzGOTPLlIxBER0ABG3fy67mVWybQNb/wAQXDWmiaH5&#xA;j1a7ij9WdLLULl6KPtP6aiYotelWPhUnLhrMfdP/AE5cM9i5+fFhr/hUT+r7h7me/lnceUPI/mO6&#xA;1G+8v2ktzNA8EqXerWtxNE7EMw4TBQGNOLGtf4zz6KJHpqMvOYLRoe2skTczLJjrbhwyHuIO+zCv&#xA;MdtpN9PcfpnQdK0TR9Snl/RWsaIyyR2k9S6QXEiEoylSF+yo77fsk4hwiOSMRHpOPf5+9ENVM5DP&#xA;TzySmN5Ysm1xP8wEA7dOfd74x5J1ix03U5NF1lmu/JGpXSWup3Sq6qkZkA+tQmhKuqrz403pSmYe&#xA;PMcYlGuKB/ALudToo6iWPJfh540ehNfxRPfzI96K/OvRPyz0fzbFa/l7qLajpBtI3uZPU9dEuCzh&#xA;kSWg5DgFJ60J69hhu4ef4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXrum+Yv07+YFjdDVr&#xA;nV/R0mC3aa6kmlKPDwjZVMyow5cebU25s25zb6bg8YcHLhHz+z+15DtEZxopeMKl4sq6+k2R1PK6&#xA;HkBsGZwf71j/AJjJP+oZs2g5/H9Dy0/p/wAwf7oIhv8AjmXH/Mfb/wDJzJfwn+sGof3g/wCFy+54&#xA;F53/AOU01/8A7aV3/wAn3zmtX/ez/rH7303sn/FMP/C4f7kJJmO7B2KuxV2KuxV2KovStRbTr+K9&#xA;WCG5aLlSG4UvE3JSvxKCp2rUb9cnjnwSur97RqcHiwMLMb6jYvVfy0/PLzrouvGy8o+W9FGpa40d&#xA;otvDbSRmWZmIh3E6AcXfuaUr06i3NqPEH0xj7hX6XE0XZxwG/FyzFcpyBH3X9qS655c8++R/Md9b&#xA;eaPLMGoapqIF47XEK3cZEjSVeN4CVHJy1QCDUYcEyL9PFfeLRrsMJmIOU4uH+bIRv8V7ubN/PH52&#xA;XvnLUbSS0VPy/fTbL03EoExuuTDghBjjpHDwPCiEjk1BvTLtLKcLHH4fv6uJ2rhw5xE+F+Y3rY8v&#xA;j+gkBBfnB5eks/yu8t68/naLzBca08Bu9PSO3Wh9GSQPEyqk3CBmMbBx9ptwp2yrPq8kxwylxD8e&#xA;VuVoeydNgInjhwSrlZ2ur/iMb2HLu5vD8xXaOxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;su/LC6tbbzMJLmZII/RYc5GCLXmh6sRmd2fIDJv3Oj9oMcp6eogk309xeqprmiR3Akk1C2SP62x5&#xA;tNGFo1uwU1J6E5uRlgDzHPv8nizpMxjQhIng7j/OCMm1fSIIZbea+tQ/1hZ3iaeNTSM1UAllHVge&#xA;tP2aj4mSZyRAokc+/wDH4+JFEdNlkRIRl9NfSevw/HOj6RLlv5j6Loks8mvaVqNvM92fXu7YSoZG&#xA;MpB9ZF2arGQF1oOtQB8SR6fXYoE8cSN+f6/x+sDsuwtVmAGDLCQ4domjW38J+Wx+BJ9MpwLNa9K7&#xA;FXYq7FXYq7FXYqitM1K/0vUbXUtPma2vrOVJ7W4T7SSRsGRh8iMVTbzb5+84ebtW/S3mHVJb2/8A&#xA;TWES0SICNCSqrHCsaKKsTsvU4RIhjKETzCG1DzDqGsRabaapMDbaeggjlWNTIIyQCWIoXKooAqe3&#xA;zOXTzynwiR2i4eDQ48BnLGPVPer2v9G/3qXmGHQ4dWmj0OeS400cTDLMKOaqCwNVj+yTT7ORziAk&#xA;eA3FnopZpYgcwEcnUD+0/eluVOW7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX/2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:48813919-3e3b-0a43-88d6-cc067f5804e2</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:48813919-3e3b-0a43-88d6-cc067f5804e2</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:ba3ba86f-cecd-45b6-b08a-7270e6edc3f7</stRef:instanceID>
            <stRef:documentID>xmp.did:14D623E8DFBDE511B2BBC0EB12123494</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F07763D45588E411BF89F345A28D8C9F</stEvt:instanceID>
                  <stEvt:when>2014-12-20T17:10:37+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:29845C695A88E411BF89F345A28D8C9F</stEvt:instanceID>
                  <stEvt:when>2014-12-20T17:19:01+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:2E845C695A88E411BF89F345A28D8C9F</stEvt:instanceID>
                  <stEvt:when>2014-12-20T17:33:07+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4365C60ACE89E4119A65C8F5B8A1FEA0</stEvt:instanceID>
                  <stEvt:when>2014-12-22T13:34:24+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0B5A99264D6BE51194FFADFDE0B012D7</stEvt:instanceID>
                  <stEvt:when>2015-10-05T13:38+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:14D623E8DFBDE511B2BBC0EB12123494</stEvt:instanceID>
                  <stEvt:when>2016-01-18T14:37:24+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:A4646C19F2BDE5119314DC75DE111CE2</stEvt:instanceID>
                  <stEvt:when>2016-01-18T16:45:21+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Bridge CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/metadata</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:C4809509F8BDE5119314DC75DE111CE2</stEvt:instanceID>
                  <stEvt:when>2016-01-18T17:27:51+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Bridge CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/metadata</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:48813919-3e3b-0a43-88d6-cc067f5804e2</stEvt:instanceID>
                  <stEvt:when>2016-05-12T13:13:24+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>1200.000000</stDim:w>
            <stDim:h>1200.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=0 B=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
         <photoshop:Headline>abstract vector background with high tech circuit board</photoshop:Headline>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1200 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1200 li
1200 1200 li
1200 0 li
cp
clp
1200 1200 mo
0 1200 li
0 0 li
1200 0 li
1200 1200 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
0 0 0 rgb
f
111.59 327.68 mo
113.501 327.68 115.048 329.227 115.048 331.137 cv
115.048 333.046 113.501 334.595 111.59 334.595 cv
109.679 334.595 108.132 333.046 108.132 331.137 cv
108.132 329.227 109.679 327.68 111.59 327.68 cv
cp
99.5967 320.449 mo
105.424 327.156 li
105.269 328.742 105.745 330.864 106.214 332.247 cv
107.409 335.788 109.239 339.013 112.978 339.013 cv
116.712 339.013 119.741 335.983 119.741 332.247 cv
119.741 328.512 116.622 326.3 112.978 325.482 cv
111.404 325.129 109.476 324.728 107.976 324.818 cv
103.054 319.156 li
103.054 150.006 li
133.31 120.267 li
133.31 72.0811 li
129.852 72.0811 li
129.852 118.817 li
99.5967 148.555 li
99.5967 320.449 li
cp
0 .862745 1 rgb
f
295.763 621.775 mo
297.431 622.705 298.028 624.81 297.098 626.479 cv
296.167 628.146 294.064 628.744 292.394 627.816 cv
290.726 626.883 290.126 624.781 291.059 623.111 cv
291.988 621.443 294.094 620.846 295.763 621.775 cv
cp
110.83 159.882 mo
111.698 301.086 li
111.703 301.774 li
163.692 355.822 li
221.905 355.822 li
227.532 361.569 li
227.532 546.711 li
276.925 596.393 li
278.651 606.164 li
290.408 618.637 li
289.619 619.95 289.083 621.83 288.84 623.148 cv
288.162 626.82 288.19 630.531 291.453 632.352 cv
294.715 634.17 298.833 633 300.654 629.736 cv
302.475 626.473 300.828 623.023 298.041 620.533 cv
296.707 619.339 295.018 617.871 293.553 617.319 cv
293.746 617.137 li
281.876 604.547 li
280.144 594.725 li
230.99 545.287 li
230.99 360.158 li
223.36 352.364 li
165.165 352.364 li
115.151 300.373 li
114.296 161.294 li
173.073 101.809 li
173.073 72.0811 li
169.614 72.0811 li
169.614 100.392 li
111.333 159.372 li
110.83 159.882 li
cp
f
330.066 629.748 mo
328.317 630.518 326.278 629.725 325.509 627.975 cv
324.739 626.227 325.532 624.185 327.28 623.418 cv
329.03 622.65 331.069 623.443 331.84 625.191 cv
332.609 626.94 331.815 628.979 330.066 629.748 cv
cp
121.494 167.951 mo
121.494 292.43 li
121.494 293.57 121.944 294.667 122.749 295.477 cv
167.989 341.002 li
168.801 341.819 169.903 342.278 171.056 342.278 cv
230.927 342.278 li
240.786 352.139 li
240.786 535.047 li
240.786 536.191 241.238 537.289 242.048 538.1 cv
325.033 621.373 li
325.241 621.582 325.466 621.764 325.702 621.922 cv
325.63 621.984 325.558 622.048 325.491 622.109 cv
322.735 624.629 320.517 627.604 322.023 631.025 cv
323.525 634.443 327.518 635.998 330.938 634.494 cv
334.359 632.988 335.127 629.244 334.409 625.576 cv
333.992 623.457 333.408 620.701 332.202 619.606 cv
332.663 618.125 332.327 616.449 331.155 615.271 cv
249.431 533.262 li
249.431 350.347 li
249.431 349.2 248.975 348.102 248.165 347.291 cv
235.773 334.9 li
234.963 334.09 233.864 333.634 232.718 333.634 cv
172.853 333.634 li
130.138 290.648 li
130.138 169.742 li
190.247 109.632 li
191.058 108.821 191.513 107.723 191.513 106.576 cv
191.513 72.0811 li
191.513 69.6934 189.578 67.7588 187.19 67.7588 cv
184.804 67.7588 182.868 69.6934 182.868 72.0811 cv
182.868 104.784 li
122.761 164.895 li
121.95 165.706 121.494 166.805 121.494 167.951 cv
cp
f
259.348 261.589 mo
259.747 259.72 261.581 258.529 263.45 258.926 cv
265.317 259.323 266.511 261.16 266.111 263.027 cv
265.716 264.897 263.878 266.086 262.011 265.69 cv
260.144 265.293 258.95 263.456 259.348 261.589 cv
cp
136.188 179.048 mo
136.188 262.308 li
157.514 283.919 li
157.514 301.765 li
180.397 325.853 li
203.243 325.853 li
218.169 310.858 li
219.663 309.152 li
243.258 309.44 li
252.311 299.738 li
252.311 274.352 li
258.085 267.794 li
259.511 268.14 261.374 268.143 262.91 268.126 cv
266.645 268.083 270.157 266.571 270.936 262.916 cv
271.714 259.262 269.38 255.671 265.728 254.893 cv
262.073 254.114 259.608 256.89 257.702 260.102 cv
256.928 261.404 255.971 263.492 255.848 265.103 cv
248.853 273.049 li
248.853 298.374 li
241.771 305.962 li
218.113 305.675 li
215.644 308.498 li
201.808 322.395 li
181.883 322.395 li
160.971 300.384 li
160.971 282.5 li
139.647 260.89 li
139.647 180.479 li
203.747 116.444 li
204.255 115.934 li
204.253 115.215 li
204.253 115.017 204.193 95.248 204.253 87.2832 cv
204.27 85.0898 204.786 83.5293 205.787 82.6465 cv
206.964 81.6064 208.563 81.7773 208.563 81.7793 cv
231.565 81.7959 li
235.304 81.7959 238.151 80.7393 240.023 78.6523 cv
242.604 75.7754 242.235 72.0518 242.218 71.895 cv
238.778 72.2549 li
238.782 72.2783 238.983 74.6572 237.428 76.3662 cv
236.236 77.6738 234.265 78.3379 231.565 78.3379 cv
208.899 78.3379 li
208.226 78.2695 205.685 78.166 203.554 80.0068 cv
201.748 81.5664 200.821 84.0039 200.796 87.2559 cv
200.741 94.374 200.784 110.862 200.794 114.506 cv
136.188 179.048 li
cp
f
191.398 305.145 mo
190.075 306.518 187.885 306.558 186.511 305.228 cv
185.136 303.903 185.097 301.716 186.425 300.34 cv
187.751 298.969 189.939 298.93 191.314 300.255 cv
192.688 301.582 192.726 303.77 191.398 305.145 cv
cp
148.868 258.786 mo
167.776 276.581 li
183.28 276.581 li
187.769 281.306 li
187.769 295.192 li
186.364 296.063 184.984 298.299 184.272 299.806 cv
182.674 303.184 181.751 306.777 184.438 309.372 cv
187.126 311.967 191.409 311.893 194.005 309.207 cv
196.601 306.518 195.891 302.761 193.835 299.641 cv
193.087 298.5 192.179 297.152 191.226 296.173 cv
191.226 279.924 li
184.763 273.123 li
169.145 273.123 li
152.327 257.289 li
152.327 191.721 li
272.838 71.7832 li
270.399 69.332 li
148.868 190.284 li
148.868 258.786 li
cp
f
173.725 253.714 mo
175.606 253.382 177.398 254.636 177.729 256.517 cv
178.06 258.397 176.805 260.19 174.925 260.522 cv
173.044 260.855 171.251 259.6 170.919 257.719 cv
170.589 255.838 171.843 254.043 173.725 253.714 cv
cp
158.952 190.282 mo
158.952 244.434 li
167.589 253.333 li
167.314 254.975 168.373 257.596 169.222 259.147 cv
171.016 262.422 173.381 265.282 177.058 264.633 cv
180.738 263.984 183.194 260.477 182.547 256.797 cv
181.895 253.12 178.44 251.482 174.708 251.311 cv
173.389 251.249 171.831 251.199 170.505 251.373 cv
162.409 243.032 li
162.409 191.721 li
281.482 73.3066 li
279.044 70.8555 li
159.462 189.776 li
158.952 190.282 li
cp
f
177.611 196.668 mo
178.948 198.032 178.927 200.22 177.563 201.558 cv
176.198 202.895 174.009 202.871 172.673 201.507 cv
171.337 200.143 171.357 197.953 172.722 196.616 cv
174.085 195.28 176.276 195.304 177.611 196.668 cv
cp
173.36 192.148 mo
172.234 193.185 171.189 194.831 170.585 196.023 cv
168.896 199.354 167.874 202.919 170.487 205.59 cv
173.102 208.259 177.385 208.305 180.053 205.688 cv
182.721 203.075 182.117 199.298 180.152 196.121 cv
179.225 194.624 178.043 192.774 176.818 191.814 cv
176.818 185.957 li
286.163 77.1836 li
336.879 77.1836 li
342.283 71.7803 li
339.838 69.3359 li
335.447 73.7256 li
284.734 73.7256 li
173.36 184.52 li
173.36 192.148 li
cp
f
173.876 231.488 mo
172.513 232.825 170.325 232.802 168.987 231.438 cv
167.649 230.073 167.674 227.884 169.038 226.547 cv
170.401 225.211 172.59 225.235 173.928 226.599 cv
175.263 227.963 175.241 230.151 173.876 231.488 cv
cp
286.744 80.0664 mo
188.631 179.054 li
188.631 205.406 li
171.074 221.189 li
169.478 221.689 167.752 224.273 166.901 225.954 cv
165.209 229.285 164.186 232.85 166.8 235.52 cv
169.417 238.189 173.698 238.234 176.369 235.62 cv
179.036 233.006 178.433 229.229 176.467 226.052 cv
175.842 225.045 175.103 223.878 174.312 222.929 cv
192.089 206.95 li
192.089 180.477 li
288.188 83.5254 li
340.651 83.5254 li
351.824 71.7471 li
349.315 69.3662 li
339.165 80.0664 li
286.744 80.0664 li
cp
f
206.433 192.902 mo
207.769 194.267 207.749 196.456 206.384 197.793 cv
205.02 199.128 202.83 199.105 201.496 197.741 cv
200.157 196.376 200.182 194.186 201.544 192.851 cv
202.907 191.516 205.098 191.539 206.433 192.902 cv
cp
290.209 85.8271 mo
202.971 172.776 li
202.462 173.284 li
202.462 188.122 li
202.481 188.122 li
201.243 189.123 200.064 190.961 199.407 192.258 cv
197.717 195.589 196.692 199.153 199.308 201.824 cv
201.921 204.493 206.205 204.539 208.874 201.924 cv
211.542 199.309 210.939 195.533 208.974 192.355 cv
208.069 190.898 206.925 189.101 205.734 188.122 cv
205.919 188.122 li
205.919 174.72 li
291.638 89.2861 li
341.769 89.2861 li
359.561 71.791 li
357.137 69.3262 li
340.353 85.8271 li
290.209 85.8271 li
cp
f
204.555 251.995 mo
206.436 251.662 208.228 252.917 208.56 254.8 cv
208.893 256.68 207.638 258.474 205.757 258.807 cv
203.874 259.137 202.083 257.881 201.751 256 cv
201.419 254.119 202.673 252.326 204.555 251.995 cv
cp
291.768 92.4561 mo
218.743 166.085 li
218.743 205.542 li
213.478 211.722 li
194.206 211.722 li
187.478 219.109 li
187.478 240.724 li
198.682 250.863 li
197.766 252.316 199.059 255.61 200.054 257.428 cv
201.846 260.706 204.21 263.565 207.89 262.916 cv
211.569 262.268 214.024 258.759 213.376 255.079 cv
212.728 251.401 209.271 249.765 205.54 249.591 cv
204.429 249.539 203.149 249.499 201.979 249.589 cv
202.183 249.365 li
190.936 239.189 li
190.936 220.45 li
195.735 215.179 li
215.073 215.179 li
222.2 206.815 li
222.2 167.51 li
293.209 95.9131 li
346.097 95.9131 li
368.79 73.3066 li
366.349 70.8555 li
344.669 92.4561 li
291.768 92.4561 li
cp
f
208.191 236.706 mo
206.279 236.706 204.733 235.157 204.733 233.248 cv
204.733 231.337 206.279 229.79 208.191 229.79 cv
210.101 229.79 211.649 231.337 211.649 233.248 cv
211.649 235.157 210.101 236.706 208.191 236.706 cv
cp
295.964 97.6426 mo
225.227 169.547 li
225.227 215.861 li
212.353 227.097 li
210.753 226.885 208.515 227.385 207.08 227.869 cv
203.539 229.067 200.313 230.898 200.313 234.632 cv
200.313 238.37 203.341 241.399 207.08 241.399 cv
210.814 241.399 213.026 238.279 213.845 234.632 cv
214.184 233.118 214.576 231.268 214.524 229.793 cv
228.684 217.434 li
228.684 170.965 li
297.412 101.101 li
349.847 101.101 li
377.441 73.3008 li
374.986 70.8623 li
348.409 97.6426 li
295.964 97.6426 li
cp
f
237.993 223.726 mo
239.367 225.051 239.405 227.238 238.08 228.615 cv
236.755 229.989 234.565 230.026 233.19 228.699 cv
231.816 227.373 231.777 225.184 233.104 223.811 cv
234.431 222.436 236.621 222.398 237.993 223.726 cv
cp
298.265 104.27 mo
234.652 169.043 li
234.157 169.55 li
234.157 218.86 li
232.856 219.838 231.616 221.873 230.952 223.276 cv
229.353 226.653 228.431 230.246 231.118 232.841 cv
233.808 235.436 238.089 235.361 240.685 232.676 cv
243.28 229.985 242.571 226.229 240.517 223.109 cv
239.691 221.854 238.674 220.348 237.615 219.357 cv
237.615 170.961 li
299.717 107.729 li
353.022 107.729 li
386.953 73.293 li
384.491 70.8691 li
351.574 104.27 li
298.265 104.27 li
cp
f
236.655 259.727 mo
234.746 259.727 233.198 258.18 233.198 256.27 cv
233.198 254.359 234.746 252.813 236.655 252.813 cv
238.565 252.813 240.114 254.359 240.114 256.27 cv
240.114 258.18 238.565 259.727 236.655 259.727 cv
cp
302.599 110.033 mo
249.144 163.293 li
249.144 241.561 li
240.376 250.08 li
238.824 249.998 236.853 250.45 235.546 250.893 cv
232.005 252.09 228.778 253.92 228.778 257.656 cv
228.778 261.393 231.808 264.421 235.546 264.421 cv
239.28 264.421 241.492 261.302 242.309 257.656 cv
242.684 255.99 243.106 253.931 242.946 252.4 cv
252.602 243.023 li
252.602 164.727 li
304.026 113.491 li
356.476 113.491 li
396.458 73.3008 li
394.007 70.8623 li
355.038 110.033 li
302.599 110.033 li
cp
f
269.154 194.405 mo
270.489 195.77 270.468 197.958 269.103 199.295 cv
267.739 200.632 265.55 200.608 264.214 199.244 cv
262.876 197.88 262.901 195.69 264.265 194.355 cv
265.629 193.018 267.817 193.041 269.154 194.405 cv
cp
305.184 116.373 mo
264.413 157.732 li
264.413 189.726 li
265.082 189.726 li
263.888 190.744 262.764 192.505 262.126 193.761 cv
260.435 197.094 259.412 200.657 262.026 203.327 cv
264.641 205.996 268.925 206.042 271.595 203.428 cv
274.263 200.811 273.658 197.036 271.692 193.858 cv
270.641 192.163 269.268 190.014 267.871 189.221 cv
267.871 159.15 li
306.629 119.831 li
359.064 119.831 li
405.674 73.3037 li
403.232 70.8584 li
357.632 116.373 li
305.184 116.373 li
cp
f
266.912 230.732 mo
264.999 230.732 263.455 229.184 263.455 227.274 cv
263.455 225.363 264.999 223.816 266.912 223.816 cv
268.821 223.816 270.371 225.363 270.371 227.274 cv
270.371 229.184 268.821 230.732 266.912 230.732 cv
cp
499.394 106.864 mo
487.578 95.0498 li
387.889 95.0498 li
359.362 123.576 li
311.84 123.576 li
279.542 154.535 li
279.542 213.063 li
270.519 221.074 li
268.985 221.02 267.075 221.465 265.801 221.896 cv
262.261 223.095 259.034 224.924 259.034 228.66 cv
259.034 232.396 262.063 235.426 265.801 235.426 cv
269.535 235.426 271.747 232.306 272.564 228.66 cv
272.946 226.964 273.378 224.86 273.193 223.322 cv
282.999 214.615 li
282.999 156.011 li
313.229 127.034 li
360.793 127.034 li
389.319 98.5068 li
486.147 98.5068 li
497.962 110.322 li
517.595 110.322 li
524.321 102.923 li
524.321 72.0811 li
520.862 72.0811 li
520.862 101.585 li
516.065 106.864 li
499.394 106.864 li
cp
f
298.569 193.21 mo
299.903 194.574 299.882 196.763 298.518 198.1 cv
297.153 199.436 294.967 199.413 293.629 198.049 cv
292.291 196.684 292.315 194.495 293.678 193.158 cv
295.044 191.822 297.231 191.846 298.569 193.21 cv
cp
497.364 114.066 mo
484.686 101.678 li
390.746 101.678 li
364.234 129.627 li
317.292 129.627 li
294.669 152.251 li
294.669 188.122 li
295.044 188.122 li
293.655 189.003 292.274 191.118 291.541 192.565 cv
289.85 195.896 288.827 199.46 291.441 202.132 cv
294.055 204.801 298.339 204.846 301.011 202.23 cv
303.677 199.617 303.073 195.841 301.108 192.663 cv
300.098 191.031 298.786 188.981 297.442 188.122 cv
298.126 188.122 li
298.126 153.683 li
318.724 133.085 li
365.72 133.085 li
392.23 105.136 li
483.276 105.136 li
495.957 117.525 li
521.291 117.525 li
530.949 107.868 li
530.949 72.0811 li
527.491 72.0811 li
527.491 106.436 li
519.86 114.066 li
497.364 114.066 li
cp
f
329.688 193.21 mo
331.023 194.574 331.002 196.763 329.638 198.1 cv
328.273 199.436 326.085 199.413 324.748 198.049 cv
323.411 196.684 323.435 194.495 324.798 193.158 cv
326.162 191.822 328.351 191.846 329.688 193.21 cv
cp
494.218 119.254 mo
482.115 106.861 li
392.778 107.154 li
325.215 175.888 li
325.215 188.122 li
326.165 188.122 li
324.775 189.003 323.395 191.118 322.661 192.565 cv
320.97 195.896 319.946 199.46 322.561 202.132 cv
325.174 204.801 329.458 204.846 332.129 202.23 cv
334.797 199.617 334.192 195.841 332.228 192.663 cv
331.217 191.031 329.905 188.981 328.563 188.122 cv
328.672 188.122 li
328.672 177.303 li
394.233 110.605 li
480.663 110.325 li
492.762 122.711 li
523.284 122.711 li
536.714 109.91 li
536.714 72.0811 li
533.256 72.0811 li
533.256 108.428 li
521.899 119.254 li
494.218 119.254 li
cp
f
298.886 319.953 mo
298.886 321.862 297.338 323.411 295.428 323.411 cv
293.518 323.411 291.971 321.862 291.971 319.953 cv
291.971 318.043 293.518 316.496 295.428 316.496 cv
297.338 316.496 298.886 318.043 298.886 319.953 cv
cp
447.251 168.815 mo
407.196 208.579 li
292.958 208.579 li
279.54 221.683 li
279.54 306.472 li
289.435 315.11 li
288.912 316.688 289.489 319.409 290.051 321.065 cv
291.249 324.603 293.078 327.829 296.814 327.829 cv
300.551 327.829 303.578 324.8 303.578 321.065 cv
303.578 317.327 300.46 315.118 296.814 314.299 cv
295.641 314.035 294.267 313.744 293.02 313.649 cv
282.998 304.898 li
282.998 223.138 li
294.366 212.037 li
408.621 212.037 li
448.675 172.273 li
557.883 172.273 li
598.375 132.075 li
598.375 72.0811 li
594.918 72.0811 li
594.918 130.637 li
556.456 168.815 li
447.251 168.815 li
cp
f
351.65 315.622 mo
352.049 313.755 353.884 312.563 355.754 312.962 cv
357.619 313.358 358.811 315.194 358.413 317.06 cv
358.017 318.932 356.18 320.122 354.313 319.725 cv
352.447 319.327 351.254 317.49 351.65 315.622 cv
cp
448.967 176.02 mo
409.78 215.783 li
299.166 215.783 li
286.313 228.007 li
286.313 291.876 li
311.094 317.335 li
311.094 327.097 li
320.122 337.092 li
331.729 337.092 li
343.571 324.361 li
349.178 321.357 li
350.575 322.161 353.176 322.184 355.214 322.16 cv
358.95 322.119 362.458 320.606 363.238 316.951 cv
364.015 313.299 361.683 309.707 358.028 308.927 cv
354.375 308.149 351.913 310.926 350.006 314.137 cv
349.424 315.113 348.746 316.53 348.385 317.859 cv
341.431 321.586 li
330.224 333.634 li
321.657 333.634 li
314.552 325.767 li
314.552 315.931 li
289.771 290.472 li
289.771 229.491 li
300.548 219.241 li
411.228 219.241 li
450.414 179.477 li
560.775 179.477 li
603.849 135.801 li
603.849 72.0811 li
600.392 72.0811 li
600.392 134.383 li
559.33 176.02 li
448.967 176.02 li
cp
f
328.852 319.953 mo
328.852 321.862 327.304 323.411 325.395 323.411 cv
323.485 323.411 321.938 321.862 321.938 319.953 cv
321.938 318.043 323.485 316.496 325.395 316.496 cv
327.304 316.496 328.852 318.043 328.852 319.953 cv
cp
540.307 180.341 mo
515.237 205.985 li
427.085 205.985 li
412.103 220.682 li
317.283 220.682 li
297.839 240.43 li
297.839 293.715 li
319.302 315.457 li
318.957 317.065 319.496 319.526 320.019 321.065 cv
321.214 324.603 323.046 327.829 326.78 327.829 cv
330.518 327.829 333.546 324.8 333.546 321.065 cv
333.546 317.327 330.428 315.118 326.78 314.299 cv
325.401 313.989 323.754 313.648 322.356 313.626 cv
301.296 292.296 li
301.296 241.849 li
318.732 224.14 li
413.515 224.14 li
428.497 209.443 li
516.692 209.443 li
541.762 183.8 li
563.933 183.8 li
609.613 138.415 li
609.613 72.0811 li
606.156 72.0811 li
606.156 136.977 li
562.508 180.341 li
540.307 180.341 li
cp
f
329.168 353.017 mo
327.259 353.017 325.71 351.47 325.71 349.559 cv
325.71 347.647 327.259 346.101 329.168 346.101 cv
331.08 346.101 332.626 347.647 332.626 349.559 cv
332.626 351.47 331.08 353.017 329.168 353.017 cv
cp
544.608 189.273 mo
521.846 213.477 li
431.718 213.477 li
416.732 227.595 li
323.643 227.595 li
304.468 246.464 li
304.468 290.235 li
320.722 307.414 li
362.211 307.414 li
370.45 316.166 li
370.45 329.147 li
365.728 333.634 li
341.77 333.634 li
332.368 343.36 li
330.913 343.388 329.221 343.787 328.058 344.183 cv
324.519 345.378 321.292 347.208 321.292 350.946 cv
321.292 354.681 324.32 357.71 328.058 357.71 cv
331.792 357.71 334.003 354.592 334.823 350.946 cv
335.237 349.099 335.725 346.757 335.395 345.202 cv
343.235 337.092 li
367.108 337.092 li
373.909 330.631 li
373.909 314.795 li
363.704 303.956 li
322.21 303.956 li
307.925 288.859 li
307.925 247.913 li
325.058 231.053 li
418.103 231.053 li
433.089 216.934 li
523.341 216.934 li
546.104 192.73 li
565.941 192.73 li
618.257 141.591 li
618.257 72.0811 li
614.8 72.0811 li
614.8 140.136 li
564.534 189.273 li
544.608 189.273 li
cp
f
327.429 287.34 mo
327.429 289.249 325.883 290.797 323.972 290.797 cv
322.06 290.797 320.514 289.249 320.514 287.34 cv
320.514 285.429 322.06 283.881 323.972 283.881 cv
325.883 283.881 327.429 285.429 327.429 287.34 cv
cp
585.408 194.318 mo
585.408 211.44 li
580.242 218.051 li
449.102 218.051 li
430.373 232.495 li
329.645 232.495 li
313.399 249.97 li
313.399 278.45 li
317.859 282.912 li
317.547 284.522 318.082 286.935 318.596 288.45 cv
319.791 291.989 321.622 295.216 325.36 295.216 cv
329.095 295.216 332.122 292.185 332.122 288.45 cv
332.122 284.714 329.004 282.504 325.36 281.685 cv
323.952 281.368 322.264 281.018 320.848 281.01 cv
316.856 277.018 li
316.856 251.327 li
331.153 235.953 li
431.553 235.953 li
450.28 221.509 li
581.927 221.509 li
588.866 212.633 li
588.866 195.757 li
652.326 132.582 li
652.836 132.075 li
652.836 95.4785 li
667.818 80.4941 li
667.818 72.0811 li
664.361 72.0811 li
664.361 79.0625 li
649.376 94.0459 li
649.376 130.637 li
585.919 193.811 li
585.408 194.318 li
cp
f
285.208 564.725 mo
285.208 569.981 280.949 574.234 275.698 574.234 cv
270.446 574.234 266.188 569.981 266.188 564.725 cv
266.188 559.475 270.446 555.217 275.698 555.217 cv
280.949 555.217 285.208 559.475 285.208 564.725 cv
1 1 1 rgb
f
287.898 604.295 mo
287.898 609.549 283.642 613.803 278.39 613.803 cv
273.137 613.803 268.882 609.549 268.882 604.295 cv
268.882 599.043 273.137 594.785 278.39 594.785 cv
283.642 594.785 287.898 599.043 287.898 604.295 cv
f
474.716 181.413 mo
479.971 181.413 484.226 185.67 484.226 190.923 cv
484.226 196.175 479.971 200.432 474.716 200.432 cv
469.466 200.432 465.209 196.175 465.209 190.923 cv
465.209 185.67 469.466 181.413 474.716 181.413 cv
f
448.466 229.79 mo
448.466 235.041 444.212 239.299 438.958 239.299 cv
433.707 239.299 429.448 235.041 429.448 229.79 cv
429.448 224.536 433.707 220.281 438.958 220.281 cv
444.212 220.281 448.466 224.536 448.466 229.79 cv
f
229.98 307.233 mo
229.98 312.486 225.725 316.742 220.472 316.742 cv
215.22 316.742 210.963 312.486 210.963 307.233 cv
210.963 301.98 215.22 297.725 220.472 297.725 cv
225.725 297.725 229.98 301.98 229.98 307.233 cv
f
708.853 372.595 mo
710.191 373.959 710.169 376.148 708.804 377.484 cv
707.441 378.821 705.25 378.797 703.915 377.435 cv
702.58 376.07 702.603 373.881 703.966 372.544 cv
705.328 371.207 707.519 371.23 708.853 372.595 cv
cp
704.882 367.831 mo
703.652 368.836 702.484 370.66 701.83 371.949 cv
700.138 375.283 699.115 378.848 701.728 381.516 cv
704.341 384.186 708.626 384.23 711.294 381.617 cv
713.962 379 713.361 375.227 711.396 372.049 cv
710.539 370.666 709.464 368.982 708.339 367.977 cv
708.339 358.409 li
699.402 350.484 li
697.109 353.07 li
704.882 359.962 li
704.882 367.831 li
cp
0 .862745 1 rgb
f
697.453 429.063 mo
696.101 430.414 693.914 430.414 692.564 429.063 cv
691.212 427.712 691.212 425.524 692.564 424.174 cv
693.914 422.822 696.101 422.822 697.453 424.174 cv
698.804 425.524 698.804 427.712 697.453 429.063 cv
cp
700.978 423.897 mo
700.027 423.133 698.904 422.464 698.023 422.029 cv
694.677 420.373 691.101 419.389 688.458 422.029 cv
685.816 424.672 685.816 428.953 688.458 431.596 cv
691.101 434.236 694.867 433.595 698.023 431.596 cv
699.859 430.434 702.228 428.883 702.798 427.353 cv
722.005 427.353 li
750.988 399.396 li
750.988 351.777 li
747.529 351.777 li
747.529 397.927 li
720.611 423.897 li
700.978 423.897 li
cp
f
772.966 483.148 mo
774.304 484.512 774.281 486.7 772.915 488.037 cv
771.552 489.374 769.363 489.351 768.027 487.986 cv
766.693 486.623 766.712 484.434 768.078 483.098 cv
769.441 481.76 771.628 481.783 772.966 483.148 cv
cp
769.14 478.272 mo
767.857 479.246 766.621 481.161 765.939 482.502 cv
764.251 485.836 763.224 489.4 765.841 492.069 cv
768.455 494.738 772.738 494.783 775.408 492.17 cv
778.076 489.555 777.47 485.778 775.505 482.601 cv
774.687 481.277 773.669 479.675 772.597 478.658 cv
772.597 477.184 li
823.888 426.348 li
823.888 351.777 li
820.429 351.777 li
820.429 424.906 li
769.14 475.741 li
769.14 478.272 li
cp
f
753.925 489.803 mo
752.013 489.803 750.468 488.257 750.468 486.346 cv
750.468 484.435 752.013 482.888 753.925 482.888 cv
755.837 482.888 757.382 484.435 757.382 486.346 cv
757.382 488.257 755.837 489.803 753.925 489.803 cv
cp
752.814 480.97 mo
749.275 482.165 746.046 483.996 746.046 487.732 cv
746.046 491.469 749.076 494.497 752.814 494.497 cv
756.548 494.497 758.761 491.379 759.578 487.732 cv
759.98 485.936 760.455 483.672 760.179 482.119 cv
818.701 424.163 li
818.701 351.777 li
815.244 351.777 li
815.244 422.722 li
757.261 480.143 li
755.779 480.146 754.015 480.563 752.814 480.97 cv
cp
f
763.603 410.813 mo
764.941 412.176 764.917 414.366 763.552 415.701 cv
762.189 417.039 760 417.016 758.664 415.65 cv
757.326 414.287 757.349 412.097 758.712 410.761 cv
760.078 409.424 762.265 409.447 763.603 410.813 cv
cp
756.576 410.168 mo
754.884 413.5 753.861 417.064 756.474 419.733 cv
759.087 422.404 763.373 422.449 766.044 419.834 cv
768.711 417.221 768.107 413.444 766.142 410.266 cv
765.212 408.768 764.031 406.915 762.802 405.956 cv
762.802 351.777 li
759.345 351.777 li
759.345 406.297 li
758.222 407.334 757.179 408.978 756.576 410.168 cv
cp
f
777.154 372.544 mo
778.519 371.207 780.705 371.23 782.042 372.595 cv
783.378 373.959 783.357 376.148 781.992 377.484 cv
780.628 378.821 778.439 378.797 777.103 377.435 cv
775.769 376.07 775.79 373.881 777.154 372.544 cv
cp
784.484 381.617 mo
787.152 379 786.546 375.227 784.582 372.049 cv
783.726 370.666 782.654 368.982 781.529 367.977 cv
781.529 351.777 li
778.072 351.777 li
778.072 367.829 li
776.839 368.833 775.669 370.659 775.015 371.949 cv
773.328 375.283 772.3 378.848 774.917 381.516 cv
777.531 384.186 781.814 384.23 784.484 381.617 cv
cp
f
690.691 468.217 mo
692.017 466.842 694.205 466.805 695.58 468.132 cv
696.953 469.457 696.992 471.645 695.664 473.022 cv
694.337 474.397 692.148 474.433 690.773 473.105 cv
689.404 471.778 689.363 469.59 690.691 468.217 cv
cp
690.24 475.26 mo
693.617 476.857 697.211 477.779 699.806 475.092 cv
702.4 472.404 702.326 468.121 699.64 465.525 cv
696.953 462.93 693.195 463.639 690.074 465.693 cv
688.48 466.741 686.48 468.101 685.65 469.459 cv
677.656 469.459 li
677.656 472.916 li
686.586 472.916 li
686.586 472.88 li
687.65 473.861 689.138 474.737 690.24 475.26 cv
cp
f
710.718 469.26 mo
710.718 467.35 712.263 465.802 714.175 465.802 cv
716.082 465.802 717.632 467.35 717.632 469.26 cv
717.632 471.169 716.082 472.717 714.175 472.717 cv
712.263 472.717 710.718 471.169 710.718 469.26 cv
cp
720.691 469.811 mo
720.691 465.609 717.289 462.205 713.087 462.205 cv
708.89 462.205 705.484 465.609 705.484 469.811 cv
705.484 474.011 708.89 477.414 713.087 477.414 cv
717.289 477.414 720.691 474.011 720.691 469.811 cv
cp
f
836.894 361.049 mo
838.802 361.049 840.351 362.598 840.351 364.509 cv
840.351 366.417 838.802 367.967 836.894 367.967 cv
834.984 367.967 833.437 366.417 833.437 364.509 cv
833.437 362.598 834.984 361.049 836.894 361.049 cv
cp
835.806 372.664 mo
840.007 372.664 843.412 369.26 843.412 365.06 cv
843.412 360.86 840.007 357.455 835.806 357.455 cv
831.607 357.455 828.203 360.86 828.203 365.06 cv
828.203 369.26 831.607 372.664 835.806 372.664 cv
cp
f
836.894 398.974 mo
838.802 398.974 840.351 400.523 840.351 402.433 cv
840.351 404.342 838.802 405.891 836.894 405.891 cv
834.984 405.891 833.437 404.342 833.437 402.433 cv
833.437 400.523 834.984 398.974 836.894 398.974 cv
cp
835.806 410.59 mo
840.007 410.59 843.412 407.184 843.412 402.984 cv
843.412 398.784 840.007 395.379 835.806 395.379 cv
831.607 395.379 828.203 398.784 828.203 402.984 cv
828.203 407.184 831.607 410.59 835.806 410.59 cv
cp
f
1078.13 851.754 mo
1076.22 851.72 1074.7 850.143 1074.74 848.236 cv
1074.77 846.328 1076.35 844.805 1078.26 844.838 cv
1080.17 844.873 1081.69 846.447 1081.65 848.357 cv
1081.62 850.266 1080.04 851.787 1078.13 851.754 cv
cp
1084.33 851.117 mo
1084.26 849.782 1083.92 848.318 1083.59 847.277 cv
1082.46 843.719 1080.68 840.463 1076.95 840.396 cv
1073.21 840.33 1070.13 843.306 1070.06 847.043 cv
1070 850.777 1073.08 853.041 1076.71 853.924 cv
1078.79 854.428 1081.5 855.041 1083.01 854.43 cv
1088.16 858.109 li
1115.95 858.109 li
1115.95 854.65 li
1089.27 854.65 li
1084.33 851.117 li
cp
f
540.138 817.18 mo
538.229 817.18 536.679 815.633 536.679 813.723 cv
536.679 811.812 538.229 810.264 540.138 810.264 cv
542.046 810.264 543.596 811.812 543.596 813.723 cv
543.596 815.633 542.046 817.18 540.138 817.18 cv
cp
1019.86 857.245 mo
983.978 857.245 li
929.951 802.785 li
591.518 802.785 li
581.576 792.844 li
558.081 792.844 li
543.979 807.543 li
542.408 807.428 540.369 807.891 539.026 808.345 cv
535.485 809.541 532.261 811.373 532.261 815.107 cv
532.261 818.845 535.289 821.874 539.026 821.874 cv
542.762 821.874 544.974 818.754 545.792 815.107 cv
546.156 813.484 546.566 811.488 546.441 809.97 cv
559.557 796.301 li
580.144 796.301 li
590.086 806.242 li
928.509 806.242 li
982.537 860.703 li
1018.4 860.703 li
1032.67 875.398 li
1112.2 875.398 li
1112.2 871.94 li
1034.13 871.94 li
1019.86 857.245 li
cp
f
572.68 1001.63 mo
571.328 1002.99 569.141 1002.99 567.791 1001.63 cv
566.44 1000.29 566.44 998.098 567.791 996.746 cv
569.141 995.396 571.328 995.396 572.68 996.746 cv
574.034 998.098 574.034 1000.29 572.68 1001.63 cv
cp
732.435 949.309 mo
713.417 929.857 li
667.011 929.857 li
600.449 997.717 li
577.484 997.717 li
576.486 996.459 574.586 995.262 573.253 994.602 cv
569.904 992.947 566.329 991.962 563.684 994.602 cv
561.045 997.246 561.045 1001.53 563.686 1004.17 cv
566.329 1006.81 570.096 1006.17 573.253 1004.17 cv
574.585 1003.32 576.201 1002.27 577.205 1001.17 cv
601.902 1001.17 li
668.462 933.315 li
711.962 933.315 li
730.98 952.764 li
746.951 952.764 li
769.136 931.587 li
1019.41 931.587 li
1045.77 905.653 li
1110.75 905.653 li
1110.75 902.195 li
1044.36 902.195 li
1017.99 928.129 li
767.751 928.129 li
745.568 949.309 li
732.435 949.309 li
cp
f
574.263 909.342 mo
572.913 910.693 570.724 910.693 569.373 909.342 cv
568.023 907.992 568.023 905.805 569.373 904.454 cv
570.724 903.104 572.913 903.104 574.263 904.454 cv
575.613 905.805 575.613 907.992 574.263 909.342 cv
cp
861.222 863.256 mo
862.574 861.904 864.761 861.904 866.111 863.256 cv
867.458 864.606 867.458 866.793 866.111 868.144 cv
864.761 869.496 862.574 869.496 861.222 868.144 cv
859.867 866.793 859.867 864.606 861.222 863.256 cv
cp
609.236 908.822 mo
650.945 867.402 li
856.607 867.402 li
857.642 868.574 859.396 869.67 860.648 870.289 cv
863.998 871.945 867.574 872.93 870.218 870.289 cv
872.859 867.646 872.855 863.363 870.214 860.723 cv
867.574 858.082 863.806 858.723 860.648 860.723 cv
859.224 861.627 857.476 862.764 856.498 863.945 cv
649.519 863.945 li
607.81 905.366 li
579.018 905.366 li
578.01 904.131 576.147 902.961 574.833 902.31 cv
571.486 900.656 567.91 899.67 565.269 902.31 cv
562.624 904.954 562.624 909.234 565.269 911.877 cv
567.91 914.518 571.677 913.879 574.833 911.877 cv
576.195 911.016 577.848 909.938 578.845 908.813 cv
578.845 908.822 li
609.236 908.822 li
cp
f
868.089 900.607 mo
868.49 898.741 870.326 897.55 872.195 897.947 cv
874.06 898.344 875.251 900.18 874.855 902.047 cv
874.458 903.916 872.621 905.107 870.755 904.712 cv
868.886 904.313 867.695 902.475 868.089 900.607 cv
cp
542.119 938.643 mo
540.769 939.992 538.578 939.992 537.229 938.643 cv
535.88 937.291 535.88 935.104 537.229 933.752 cv
538.578 932.4 540.769 932.403 542.119 933.752 cv
543.472 935.104 543.472 937.291 542.119 938.643 cv
cp
779.546 884.654 mo
660.544 884.654 li
610.986 933.602 li
545.801 933.602 li
544.819 932.785 543.618 932.068 542.691 931.609 cv
539.342 929.951 535.766 928.967 533.123 931.609 cv
530.48 934.25 530.484 938.532 533.126 941.175 cv
535.766 943.816 539.534 943.175 542.691 941.175 cv
544.475 940.047 546.761 938.547 547.41 937.059 cv
612.402 937.059 li
661.962 888.113 li
778.091 888.113 li
801.431 911.991 li
863.447 911.991 li
867.853 906.998 li
869.082 907.158 870.466 907.158 871.658 907.146 cv
875.386 907.106 878.9 905.592 879.679 901.937 cv
880.457 898.285 878.123 894.691 874.468 893.912 cv
870.816 893.135 868.355 895.91 866.445 899.123 cv
865.453 900.791 864.167 903.738 864.718 905.324 cv
861.888 908.533 li
802.886 908.533 li
779.546 884.654 li
cp
f
540.138 969.804 mo
538.229 969.804 536.679 968.258 536.679 966.346 cv
536.679 964.437 538.229 962.889 540.138 962.889 cv
542.046 962.889 543.596 964.437 543.596 966.346 cv
543.596 968.258 542.046 969.804 540.138 969.804 cv
cp
886.074 904.258 mo
886.472 902.392 888.31 901.199 890.177 901.598 cv
892.044 901.992 893.236 903.829 892.839 905.695 cv
892.443 907.563 890.607 908.758 888.738 908.359 cv
886.873 907.962 885.675 906.125 886.074 904.258 cv
cp
618.751 948.588 mo
658.226 908.822 li
735.22 908.822 li
746.744 919.195 li
878.15 919.195 li
885.646 910.625 li
886.917 910.813 888.386 910.81 889.638 910.795 cv
893.373 910.754 896.884 909.242 897.664 905.587 cv
898.441 901.937 896.107 898.342 892.453 897.563 cv
888.798 896.785 886.336 899.559 884.429 902.771 cv
883.472 904.381 882.232 907.185 882.64 908.809 cv
876.58 915.738 li
748.074 915.738 li
736.548 905.366 li
656.79 905.366 li
617.312 945.129 li
558.247 945.129 li
543.222 960.153 li
541.793 960.199 540.16 960.586 539.026 960.969 cv
535.485 962.166 532.261 963.996 532.261 967.732 cv
532.261 971.469 535.289 974.499 539.026 974.499 cv
542.762 974.499 544.974 971.377 545.792 967.732 cv
546.213 965.857 546.703 963.477 546.342 961.924 cv
559.679 948.588 li
618.751 948.588 li
cp
f
569.414 968.93 mo
567.512 968.778 566.091 967.116 566.24 965.212 cv
566.389 963.308 568.053 961.885 569.954 962.033 cv
571.858 962.183 573.28 963.848 573.132 965.752 cv
572.982 967.654 571.318 969.079 569.414 968.93 cv
cp
906.828 910.096 mo
907.222 908.227 909.06 907.037 910.931 907.434 cv
912.798 907.83 913.986 909.668 913.591 911.535 cv
913.193 913.403 911.357 914.594 909.488 914.197 cv
907.621 913.801 906.429 911.963 906.828 910.096 cv
cp
620.183 956.758 mo
661.974 914.874 li
731.435 914.874 li
742.679 925.829 li
897.345 924.668 li
906.296 916.443 li
907.591 916.646 909.105 916.648 910.39 916.633 cv
914.125 916.592 917.636 915.079 918.414 911.425 cv
919.193 907.771 916.861 904.178 913.203 903.4 cv
909.554 902.625 907.087 905.396 905.181 908.612 cv
904.263 910.156 903.082 912.809 903.351 914.453 cv
895.99 921.219 li
744.074 922.362 li
732.839 911.416 li
660.537 911.416 li
618.765 953.285 li
584.676 952.903 li
573.511 959.396 li
573.607 959.563 li
572.109 959.427 570.256 959.716 568.998 960.033 cv
565.376 960.951 562.018 962.524 561.726 966.249 cv
561.433 969.975 564.215 973.229 567.938 973.521 cv
571.666 973.813 574.111 970.877 575.212 967.305 cv
575.75 965.565 576.389 963.371 576.251 961.804 cv
585.592 956.371 li
620.183 956.758 li
cp
f
541.067 912.217 mo
539.156 912.184 537.637 910.607 537.67 908.697 cv
537.705 906.791 539.277 905.271 541.188 905.301 cv
543.097 905.337 544.619 906.91 544.585 908.82 cv
544.552 910.729 542.975 912.25 541.067 912.217 cv
cp
880.171 870.931 mo
880.57 869.063 882.408 867.871 884.275 868.268 cv
886.142 868.664 887.333 870.502 886.935 872.369 cv
886.54 874.238 884.703 875.428 882.836 875.031 cv
880.968 874.634 879.777 872.799 880.171 870.931 cv
cp
546.524 907.742 mo
545.387 904.184 543.613 900.928 539.879 900.862 cv
536.142 900.795 533.061 903.771 532.995 907.506 cv
532.931 911.241 536.012 913.506 539.642 914.387 cv
541.281 914.787 543.301 915.238 544.828 915.123 cv
553.286 924.67 li
605.211 924.67 li
657.076 872.516 li
852.226 872.516 li
862.023 881.018 li
876.207 881.018 li
879.908 877.316 li
881.142 877.481 882.539 877.481 883.738 877.468 cv
887.472 877.425 890.982 875.912 891.761 872.258 cv
892.537 868.604 890.205 865.014 886.552 864.234 cv
882.898 863.457 880.435 866.231 878.529 869.443 cv
877.554 871.083 876.292 873.959 876.771 875.563 cv
874.777 877.559 li
863.31 877.559 li
853.517 869.059 li
655.638 869.059 li
603.771 921.213 li
554.842 921.213 li
547.246 912.635 li
547.367 911.078 546.947 909.072 546.524 907.742 cv
cp
f
510.38 936.949 mo
512.29 936.984 513.811 938.559 513.776 940.467 cv
513.743 942.377 512.17 943.899 510.26 943.863 cv
508.351 943.83 506.83 942.254 506.863 940.346 cv
506.895 938.438 508.471 936.916 510.38 936.949 cv
cp
749.558 899.716 mo
750.91 898.366 753.095 898.366 754.447 899.716 cv
755.798 901.066 755.798 903.256 754.447 904.604 cv
753.095 905.955 750.91 905.955 749.558 904.604 cv
748.207 903.256 748.207 901.066 749.558 899.716 cv
cp
508.832 946.035 mo
510.893 946.535 513.565 947.134 515.084 946.559 cv
523.416 954.352 li
544.637 954.352 li
557.602 942.824 li
614.415 942.824 li
654.47 903.637 li
744.757 903.637 li
745.755 904.894 747.652 906.091 748.988 906.749 cv
752.333 908.404 755.91 909.392 758.552 906.749 cv
761.193 904.106 761.193 899.824 758.552 897.184 cv
755.91 894.539 752.144 895.183 748.988 897.184 cv
747.65 898.028 746.035 899.08 745.031 900.18 cv
653.058 900.18 li
613.003 939.366 li
556.29 939.366 li
543.323 950.896 li
524.779 950.896 li
516.449 943.098 li
516.361 941.8 516.037 940.398 515.717 939.392 cv
514.58 935.83 512.808 932.572 509.069 932.508 cv
505.335 932.443 502.255 935.42 502.186 939.154 cv
502.124 942.889 505.204 945.153 508.832 946.035 cv
cp
f
1033.5 974.778 mo
1034.85 973.428 1037.04 973.428 1038.39 974.778 cv
1039.74 976.129 1039.74 978.316 1038.39 979.666 cv
1037.04 981.018 1034.85 981.018 1033.5 979.666 cv
1032.15 978.316 1032.15 976.129 1033.5 974.778 cv
cp
894.662 979.627 mo
893.31 980.979 891.123 980.979 889.771 979.627 cv
888.421 978.275 888.421 976.088 889.771 974.737 cv
891.123 973.387 893.31 973.387 894.662 974.737 cv
896.013 976.088 896.013 978.275 894.662 979.627 cv
cp
895.232 972.205 mo
892.076 970.204 888.31 969.565 885.665 972.205 cv
883.025 974.846 883.025 979.129 885.665 981.771 cv
888.31 984.41 891.886 983.428 895.232 981.771 cv
896.552 981.121 898.427 979.941 899.431 978.697 cv
1028.7 978.697 li
1029.7 979.955 1031.6 981.15 1032.93 981.812 cv
1036.28 983.466 1039.85 984.451 1042.5 981.812 cv
1045.14 979.168 1045.14 974.887 1042.5 972.246 cv
1039.85 969.602 1036.09 970.242 1032.93 972.246 cv
1031.6 973.091 1029.98 974.143 1028.98 975.241 cv
899.22 975.241 li
898.22 974.127 896.583 973.062 895.232 972.205 cv
cp
f
717.841 953.41 mo
719.191 952.063 721.38 952.063 722.73 953.41 cv
724.08 954.762 724.08 956.954 722.73 958.301 cv
721.38 959.65 719.191 959.65 717.841 958.301 cv
716.49 956.954 716.49 954.762 717.841 953.41 cv
cp
723.3 960.445 mo
724.369 959.918 725.798 959.047 726.837 958.076 cv
750.58 958.076 li
771.328 937.059 li
1023.61 937.059 li
1047.1 912.587 li
1110.75 912.587 li
1110.75 909.129 li
1045.62 909.129 li
1022.14 933.602 li
769.882 933.602 li
749.134 954.62 li
727.822 954.62 li
726.988 953.259 724.935 951.914 723.3 950.879 cv
720.144 948.879 716.378 948.238 713.734 950.879 cv
711.093 953.521 711.093 957.804 713.734 960.445 cv
716.378 963.088 719.953 962.102 723.3 960.445 cv
cp
f
714.503 995.668 mo
713.154 997.021 710.964 997.021 709.615 995.668 cv
708.267 994.318 708.267 992.129 709.615 990.778 cv
710.964 989.428 713.154 989.428 714.503 990.778 cv
715.859 992.129 715.859 994.318 714.503 995.668 cv
cp
719.308 994.699 mo
727.527 994.699 li
727.527 991.242 li
719.031 991.242 li
718.029 990.143 716.412 989.091 715.078 988.246 cv
711.921 986.246 708.154 985.604 705.513 988.246 cv
702.871 990.889 702.867 995.17 705.509 997.813 cv
708.154 1000.46 711.728 999.469 715.078 997.813 cv
716.41 997.154 718.31 995.957 719.308 994.699 cv
cp
f
666.878 1062.81 mo
665.525 1064.16 663.337 1064.15 661.99 1062.8 cv
660.644 1061.44 660.652 1059.25 662.007 1057.91 cv
663.361 1056.56 665.548 1056.57 666.896 1057.92 cv
668.244 1059.28 668.236 1061.47 666.878 1062.81 cv
cp
667.476 1055.39 mo
664.322 1053.38 660.56 1052.73 657.91 1055.36 cv
655.259 1057.99 655.242 1062.28 657.876 1064.93 cv
660.515 1067.58 664.089 1066.6 667.447 1064.96 cv
668.54 1064.42 670.015 1063.53 671.066 1062.53 cv
679.052 1062.53 li
679.052 1059.07 li
671.941 1059.07 li
671.083 1057.73 669.076 1056.41 667.476 1055.39 cv
cp
f
596.15 1056.67 mo
597.505 1055.32 599.693 1055.33 601.04 1056.68 cv
602.388 1058.04 602.38 1060.22 601.023 1061.57 cv
599.667 1062.92 597.482 1062.91 596.134 1061.56 cv
594.791 1060.2 594.797 1058.01 596.15 1056.67 cv
cp
727.109 1051.18 mo
728.392 1049.76 730.576 1049.65 731.992 1050.93 cv
733.41 1052.21 733.521 1054.4 732.238 1055.82 cv
730.958 1057.23 728.775 1057.34 727.355 1056.06 cv
725.937 1054.78 725.826 1052.59 727.109 1051.18 cv
cp
601.591 1063.72 mo
602.277 1063.38 603.113 1062.9 603.9 1062.35 cv
604.535 1063.08 605.462 1063.56 606.507 1063.56 cv
626.966 1063.56 li
627.947 1063.56 628.88 1063.14 629.537 1062.41 cv
644.355 1045.98 li
686.369 1045.98 li
697.324 1056.54 li
697.955 1057.15 698.796 1057.5 699.677 1057.51 cv
721.72 1057.79 li
721.738 1057.79 721.751 1057.79 721.767 1057.79 cv
722.664 1057.79 723.476 1057.45 724.091 1056.88 cv
724.99 1057.52 726.013 1058.11 726.914 1058.62 cv
730.169 1060.46 733.961 1060.91 736.466 1058.14 cv
738.972 1055.37 738.759 1051.09 735.988 1048.58 cv
733.211 1046.08 729.693 1047.25 726.431 1049.07 cv
725.505 1049.58 724.304 1050.39 723.353 1051.28 cv
722.888 1051.04 722.371 1050.89 721.81 1050.88 cv
701.136 1050.61 li
690.164 1040.03 li
689.519 1039.41 688.658 1039.06 687.765 1039.06 cv
642.814 1039.06 li
641.836 1039.06 640.902 1039.48 640.246 1040.21 cv
625.429 1056.64 li
606.507 1056.64 li
606.076 1056.64 605.669 1056.73 605.289 1056.88 cv
604.285 1055.88 602.836 1054.93 601.621 1054.15 cv
598.466 1052.14 594.705 1051.49 592.055 1054.12 cv
589.403 1056.75 589.387 1061.04 592.019 1063.69 cv
594.658 1066.34 598.234 1065.36 601.591 1063.72 cv
cp
f
684.218 988.928 mo
685.501 987.512 687.685 987.4 689.105 988.68 cv
690.519 989.962 690.63 992.146 689.351 993.565 cv
688.072 994.981 685.886 995.091 684.468 993.812 cv
683.048 992.531 682.939 990.344 684.218 988.928 cv
cp
684.023 996.371 mo
687.281 998.209 691.074 998.658 693.576 995.887 cv
696.08 993.117 695.869 988.838 693.095 986.333 cv
690.324 983.83 686.802 984.992 683.539 986.816 cv
682.449 987.424 680.982 988.433 679.986 989.512 cv
670.998 989.793 li
671.107 993.249 li
679.406 992.991 li
680.353 994.261 682.394 995.453 684.023 996.371 cv
cp
f
686.718 1088.27 mo
688.609 1088.53 689.925 1090.28 689.658 1092.17 cv
689.394 1094.06 687.644 1095.38 685.755 1095.11 cv
683.863 1094.85 682.55 1093.1 682.814 1091.21 cv
683.078 1089.32 684.826 1088 686.718 1088.27 cv
cp
680.445 1092.28 mo
680.751 1096 682.503 1099.4 686.201 1099.92 cv
689.902 1100.44 693.322 1097.86 693.845 1094.16 cv
694.363 1090.46 691.423 1088.2 688.086 1086.52 cv
686.402 1085.67 683.494 1084.63 681.912 1085.17 cv
649.583 1085.17 li
649.583 1088.63 li
680.322 1088.63 li
680.263 1089.82 680.351 1091.14 680.445 1092.28 cv
cp
f
507.904 965.789 mo
509.815 965.809 511.345 967.371 511.326 969.283 cv
511.309 971.193 509.746 972.725 507.836 972.705 cv
505.926 972.684 504.395 971.121 504.417 969.213 cv
504.434 967.305 505.997 965.768 507.904 965.789 cv
cp
738.087 932.859 mo
739.996 932.912 741.5 934.5 741.451 936.41 cv
741.394 938.318 739.808 939.822 737.902 939.771 cv
735.99 939.721 734.484 938.129 734.539 936.223 cv
734.589 934.315 736.179 932.809 738.087 932.859 cv
cp
506.708 974.612 mo
507.632 974.938 508.895 975.268 510.106 975.412 cv
510.286 976.07 510.658 976.683 511.221 977.153 cv
521.306 985.572 li
521.928 986.088 522.712 986.375 523.522 986.375 cv
587.489 986.375 li
588.377 986.375 589.229 986.035 589.87 985.425 cv
610.769 965.587 li
623.796 965.587 li
624.703 965.587 625.576 965.231 626.224 964.592 cv
664.978 926.399 li
722.99 926.399 li
729.484 932.499 li
730.158 933.133 731.025 933.438 731.888 933.427 cv
731.947 934.767 732.263 936.236 732.587 937.283 cv
733.685 940.852 735.429 944.125 739.167 944.229 cv
742.902 944.329 746.009 941.383 746.113 937.649 cv
746.211 933.912 743.156 931.62 739.533 930.704 cv
738.22 930.371 736.662 930.004 735.302 929.92 cv
735.287 929.018 734.925 928.123 734.216 927.458 cv
726.728 920.42 li
726.087 919.818 725.238 919.484 724.361 919.484 cv
663.56 919.484 li
662.652 919.484 661.781 919.842 661.132 920.479 cv
622.376 958.67 li
609.39 958.67 li
608.503 958.67 607.652 959.012 607.009 959.621 cv
586.111 979.459 li
524.775 979.459 li
515.654 971.844 li
515.188 971.457 514.649 971.227 514.094 971.12 cv
513.976 970.041 513.748 968.91 513.536 967.918 cv
512.754 964.258 510.579 961.121 506.841 961.087 cv
503.106 961.051 500.048 964.045 500.006 967.783 cv
499.976 971.518 503.181 973.381 506.708 974.612 cv
cp
f
734.974 1020.66 mo
733.076 1020.44 731.718 1018.72 731.935 1016.83 cv
732.154 1014.93 733.871 1013.57 735.767 1013.79 cv
737.664 1014.01 739.023 1015.72 738.806 1017.62 cv
738.586 1019.52 736.871 1020.88 734.974 1020.66 cv
cp
741.146 1016.5 mo
740.751 1012.78 738.912 1009.43 735.201 1009 cv
731.488 1008.57 728.132 1011.23 727.703 1014.94 cv
727.279 1018.65 730.273 1020.84 733.65 1022.44 cv
734.361 1022.77 735.289 1023.14 736.242 1023.41 cv
736.373 1024.11 736.708 1024.78 737.269 1025.31 cv
746.779 1034.21 li
747.443 1034.83 748.29 1035.14 749.14 1035.14 cv
750.06 1035.14 750.982 1034.77 751.665 1034.05 cv
752.968 1032.65 752.896 1030.46 751.501 1029.16 cv
741.994 1020.26 li
741.798 1020.08 741.583 1019.93 741.363 1019.8 cv
741.363 1018.7 741.253 1017.52 741.146 1016.5 cv
cp
f
706.132 1077.92 mo
704.783 1079.27 702.595 1079.27 701.244 1077.92 cv
699.892 1076.57 699.892 1074.38 701.244 1073.03 cv
702.595 1071.68 704.783 1071.68 706.132 1073.03 cv
707.484 1074.38 707.484 1076.57 706.132 1077.92 cv
cp
706.705 1070.5 mo
703.546 1068.49 699.781 1067.85 697.138 1070.5 cv
694.498 1073.13 694.498 1077.42 697.138 1080.06 cv
699.781 1082.7 703.357 1081.72 706.705 1080.06 cv
707.775 1079.53 709.214 1078.65 710.255 1077.68 cv
718.597 1077.68 li
718.597 1074.22 li
711.216 1074.22 li
710.376 1072.86 708.332 1071.52 706.705 1070.5 cv
cp
f
1006.71 879.535 mo
1005.36 880.883 1003.18 880.883 1001.82 879.535 cv
1000.47 878.184 1000.47 875.996 1001.82 874.646 cv
1003.18 873.295 1005.36 873.295 1006.71 874.646 cv
1008.06 875.996 1008.06 878.184 1006.71 879.535 cv
cp
574.104 818.656 mo
572.753 820.004 570.565 820.004 569.215 818.656 cv
567.863 817.305 567.863 815.115 569.215 813.767 cv
570.565 812.416 572.753 812.416 574.104 813.767 cv
575.454 815.115 575.454 817.305 574.104 818.656 cv
cp
1001.25 872.113 mo
999.802 873.031 998.015 874.195 997.05 875.398 cv
986.119 875.398 li
923.447 814.455 li
578.845 814.455 li
578.845 814.656 li
577.832 813.427 575.982 812.267 574.675 811.623 cv
571.324 809.966 567.752 808.981 565.107 811.623 cv
562.465 814.264 562.465 818.547 565.11 821.188 cv
567.752 823.829 571.518 823.188 574.675 821.188 cv
576.123 820.271 577.902 819.112 578.869 817.914 cv
922.044 817.914 li
984.716 878.856 li
997.271 878.856 li
998.312 880.004 1000.02 881.068 1001.25 881.677 cv
1004.6 883.334 1008.18 884.318 1010.82 881.677 cv
1013.46 879.035 1013.46 874.754 1010.82 872.113 cv
1008.18 869.47 1004.41 870.109 1001.25 872.113 cv
cp
f
570.134 843.309 mo
571.48 841.959 573.672 841.959 575.019 843.309 cv
576.37 844.66 576.37 846.848 575.019 848.199 cv
573.672 849.55 571.48 849.55 570.134 848.199 cv
568.783 846.848 568.783 844.66 570.134 843.309 cv
cp
575.594 850.731 mo
577.102 849.775 578.968 848.558 579.902 847.305 cv
601.458 847.305 li
620.044 828.718 li
917.271 828.718 li
988.587 900.466 li
1110.75 900.466 li
1110.75 897.008 li
990.027 897.008 li
918.711 825.26 li
618.613 825.26 li
600.027 843.846 li
579.449 843.846 li
578.399 842.753 576.774 841.749 575.594 841.166 cv
572.244 839.51 568.667 838.525 566.024 841.166 cv
563.384 843.809 563.384 848.091 566.024 850.731 cv
568.667 853.374 572.436 852.732 575.594 850.731 cv
cp
f
510.099 842.66 mo
512.008 842.66 513.556 844.208 513.556 846.117 cv
513.556 848.027 512.008 849.574 510.099 849.574 cv
508.188 849.574 506.641 848.027 506.641 846.117 cv
506.641 844.208 508.188 842.66 510.099 842.66 cv
cp
508.986 854.268 mo
512.725 854.268 514.934 851.15 515.752 847.502 cv
515.982 846.481 516.227 845.309 516.352 844.199 cv
516.371 844.219 li
524.946 835.85 li
548.397 835.85 li
556.226 826.312 li
556.226 810.883 li
563.967 803.65 li
578.128 803.65 li
586.773 812.293 li
926.207 812.293 li
981.679 867.402 li
1014.97 867.402 li
1028.8 881.018 li
1110.75 881.018 li
1110.75 877.559 li
1030.21 877.559 li
1016.38 863.945 li
983.105 863.945 li
927.632 808.836 li
588.205 808.836 li
579.561 800.191 li
562.602 800.191 li
552.767 809.383 li
552.767 825.074 li
546.764 832.393 li
523.536 832.393 li
515.399 840.337 li
513.955 839.479 510.821 840.119 508.986 840.74 cv
505.447 841.938 502.222 843.768 502.222 847.502 cv
502.222 851.238 505.251 854.268 508.986 854.268 cv
cp
f
540.442 844.086 mo
542.354 844.086 543.9 845.633 543.9 847.543 cv
543.9 849.455 542.354 851.002 540.442 851.002 cv
538.533 851.002 536.984 849.455 536.984 847.543 cv
536.984 845.633 538.533 844.086 540.442 844.086 cv
cp
539.332 855.695 mo
543.066 855.695 545.277 852.576 546.098 848.93 cv
546.37 847.717 546.676 846.289 546.761 845.01 cv
553.324 842.056 li
562.537 833.05 li
591.509 833.484 li
601.458 823.532 li
919.017 823.532 li
990.765 893.551 li
1112.2 893.551 li
1112.2 890.094 li
992.173 890.094 li
920.425 820.074 li
600.027 820.074 li
590.097 830.004 li
561.15 829.572 li
551.346 839.152 li
545.666 841.711 li
544.186 840.925 541.129 841.558 539.332 842.168 cv
535.793 843.363 532.566 845.193 532.566 848.93 cv
532.566 852.666 535.595 855.695 539.332 855.695 cv
cp
f
1040.93 859.666 mo
1040.96 857.758 1042.54 856.234 1044.45 856.269 cv
1046.36 856.302 1047.88 857.877 1047.84 859.787 cv
1047.81 861.695 1046.24 863.218 1044.33 863.185 cv
1042.42 863.15 1040.9 861.574 1040.93 859.666 cv
cp
1049.78 858.709 mo
1048.65 855.15 1046.87 851.893 1043.14 851.826 cv
1039.4 851.761 1036.32 854.736 1036.25 858.475 cv
1036.19 862.209 1039.27 864.473 1042.9 865.354 cv
1044.3 865.693 1045.98 866.074 1047.4 866.107 cv
1052.74 869.779 li
1115.95 869.779 li
1115.95 866.32 li
1053.81 866.32 li
1050.46 864.018 li
1050.71 862.42 1050.25 860.158 1049.78 858.709 cv
cp
f
1059.06 854.912 mo
1059.1 853.004 1060.67 851.481 1062.58 851.516 cv
1064.49 851.549 1066.01 853.123 1065.98 855.033 cv
1065.94 856.941 1064.37 858.465 1062.46 858.43 cv
1060.55 858.396 1059.03 856.818 1059.06 854.912 cv
cp
1067.92 853.955 mo
1066.78 850.396 1065.01 847.139 1061.27 847.072 cv
1057.54 847.006 1054.45 849.982 1054.39 853.719 cv
1054.33 857.455 1057.41 859.718 1061.03 860.6 cv
1062.54 860.965 1064.37 861.389 1065.85 861.365 cv
1071.34 865.025 li
1115.95 865.025 li
1115.95 861.566 li
1072.38 861.566 li
1068.62 859.055 li
1068.8 857.473 1068.36 855.344 1067.92 853.955 cv
cp
f
511.416 912.551 mo
509.505 912.517 507.985 910.94 508.02 909.033 cv
508.053 907.124 509.626 905.602 511.538 905.635 cv
513.445 905.67 514.969 907.242 514.933 909.153 cv
514.9 911.063 513.324 912.584 511.416 912.551 cv
cp
898.466 877.738 mo
898.863 875.869 900.699 874.677 902.572 875.076 cv
904.435 875.473 905.626 877.31 905.226 879.177 cv
904.832 881.045 902.996 882.236 901.128 881.838 cv
899.259 881.441 898.07 879.606 898.466 877.738 cv
cp
516.873 908.074 mo
515.737 904.517 513.962 901.26 510.227 901.191 cv
506.49 901.129 503.409 904.104 503.345 907.841 cv
503.279 911.574 506.359 913.838 509.99 914.719 cv
511.387 915.059 513.063 915.438 514.475 915.475 cv
523.669 924.67 li
544.415 924.67 li
550.467 930.721 li
608.658 930.721 li
661.101 878.856 li
848.458 878.856 li
858.685 888.112 li
893.974 888.112 li
897.701 884.039 li
899.046 884.282 900.664 884.289 902.029 884.275 cv
905.763 884.232 909.277 882.72 910.052 879.065 cv
910.83 875.412 908.5 871.818 904.843 871.043 cv
901.189 870.264 898.726 873.037 896.818 876.25 cv
895.935 877.738 894.822 880.242 894.976 881.894 cv
892.451 884.653 li
860.021 884.653 li
849.792 875.398 li
659.681 875.398 li
607.236 927.264 li
551.897 927.264 li
545.847 921.213 li
525.101 921.213 li
517.512 913.621 li
517.851 912.019 517.359 909.598 516.873 908.074 cv
cp
f
1096.15 838.629 mo
1098.06 838.66 1099.58 840.236 1099.55 842.148 cv
1099.52 844.056 1097.94 845.576 1096.03 845.545 cv
1094.12 845.509 1092.6 843.934 1092.63 842.025 cv
1092.67 840.119 1094.24 838.595 1096.15 838.629 cv
cp
1094.6 847.713 mo
1097.02 848.3 1100.29 849.037 1101.54 847.834 cv
1101.54 847.829 1101.55 847.82 1101.55 847.815 cv
1105.5 850.33 li
1112.2 850.33 li
1112.2 846.871 li
1106.51 846.871 li
1102.18 844.116 li
1102.16 844.154 li
1102.02 843.043 1101.76 841.916 1101.49 841.066 cv
1100.35 837.509 1098.58 834.254 1094.84 834.188 cv
1091.1 834.121 1088.02 837.095 1087.96 840.834 cv
1087.89 844.566 1090.97 846.83 1094.6 847.713 cv
cp
f
848.876 894.881 mo
848.876 892.971 850.423 891.425 852.333 891.425 cv
854.242 891.425 855.792 892.971 855.792 894.881 cv
855.792 896.791 854.242 898.338 852.333 898.338 cv
850.423 898.338 848.876 896.791 848.876 894.881 cv
cp
858.851 895.437 mo
858.851 891.232 855.447 887.829 851.248 887.829 cv
847.046 887.829 843.644 891.232 843.644 895.437 cv
843.644 899.633 847.046 903.037 851.248 903.037 cv
855.447 903.037 858.851 899.633 858.851 895.437 cv
cp
f
1058.07 950.774 mo
1058.07 948.862 1059.62 947.313 1061.53 947.313 cv
1063.44 947.313 1064.99 948.862 1064.99 950.774 cv
1064.99 952.683 1063.44 954.231 1061.53 954.231 cv
1059.62 954.231 1058.07 952.683 1058.07 950.774 cv
cp
1068.05 951.324 mo
1068.05 947.124 1064.65 943.719 1060.44 943.719 cv
1056.24 943.719 1052.84 947.124 1052.84 951.324 cv
1052.84 955.524 1056.24 958.928 1060.44 958.928 cv
1064.65 958.928 1068.05 955.524 1068.05 951.324 cv
cp
f
1080.77 947.313 mo
1082.68 947.313 1084.23 948.862 1084.23 950.774 cv
1084.23 952.683 1082.68 954.231 1080.77 954.231 cv
1078.86 954.231 1077.31 952.683 1077.31 950.774 cv
1077.31 948.862 1078.86 947.313 1080.77 947.313 cv
cp
1079.69 958.928 mo
1083.89 958.928 1087.29 955.524 1087.29 951.324 cv
1087.29 947.124 1083.89 943.719 1079.69 943.719 cv
1075.49 943.719 1072.08 947.124 1072.08 951.324 cv
1072.08 955.524 1075.49 958.928 1079.69 958.928 cv
cp
f
868.466 961.146 mo
870.222 960.396 872.253 961.209 873.005 962.967 cv
873.755 964.721 872.941 966.752 871.185 967.504 cv
869.431 968.256 867.398 967.44 866.648 965.687 cv
865.896 963.928 866.708 961.896 868.466 961.146 cv
cp
872.039 972.25 mo
875.896 970.6 877.691 966.131 876.037 962.268 cv
874.384 958.407 869.917 956.613 866.054 958.268 cv
862.191 959.92 860.402 964.387 862.054 968.252 cv
863.703 972.112 868.175 973.904 872.039 972.25 cv
cp
f
718.66 1110.61 mo
716.904 1111.36 714.876 1110.54 714.123 1108.79 cv
713.373 1107.03 714.187 1105 715.943 1104.25 cv
717.699 1103.5 719.73 1104.31 720.48 1106.07 cv
721.23 1107.82 720.415 1109.86 718.66 1110.61 cv
cp
713.533 1101.37 mo
709.669 1103.03 707.876 1107.49 709.531 1111.36 cv
711.181 1115.22 715.65 1117.01 719.511 1115.36 cv
723.375 1113.7 725.164 1109.23 723.513 1105.37 cv
721.861 1101.51 717.392 1099.72 713.533 1101.37 cv
cp
f
633.878 991.958 mo
635.236 993.304 635.25 995.488 633.91 996.848 cv
632.568 998.205 630.376 998.219 629.017 996.877 cv
627.662 995.533 627.648 993.348 628.992 991.988 cv
630.333 990.627 632.521 990.616 633.878 991.958 cv
cp
658.515 958.076 mo
676.066 958.076 li
688.169 970.918 li
746.744 970.918 li
774.777 942.867 li
1025.48 942.867 li
1049.26 918.367 li
1110.75 918.367 li
1110.75 914.91 li
1047.79 914.91 li
1024.02 939.41 li
773.347 939.41 li
745.312 967.459 li
689.662 967.459 li
677.56 954.62 li
657.076 954.62 li
629.556 982.309 li
629.556 987.345 li
628.415 988.344 627.322 990.039 626.453 991.433 cv
624.472 994.602 623.855 998.371 626.511 1001 cv
629.167 1003.62 633.453 1003.6 636.076 1000.94 cv
638.701 998.279 637.695 994.713 636.019 991.374 cv
635.376 990.091 634.228 988.283 633.015 987.268 cv
633.015 983.732 li
658.515 958.076 li
cp
f
569.836 1031.22 mo
567.932 1031.33 566.295 1029.88 566.181 1027.98 cv
566.068 1026.07 567.522 1024.43 569.427 1024.32 cv
571.332 1024.21 572.97 1025.66 573.084 1027.57 cv
573.196 1029.47 571.743 1031.11 569.836 1031.22 cv
cp
637.738 1015.44 mo
646.99 1006.66 li
646.99 983.793 li
655.433 976.227 li
748.105 976.227 li
776.923 948.441 li
1028.96 948.441 li
1051.29 924.67 li
1110.75 924.67 li
1110.75 921.213 li
1049.79 921.213 li
1027.46 944.984 li
775.527 944.984 li
746.711 972.768 li
654.109 972.768 li
643.533 982.246 li
643.533 1005.17 li
636.361 1011.98 li
582.739 1011.98 li
573.332 1021.38 li
571.73 1021.3 569.582 1021.91 568.202 1022.47 cv
564.741 1023.87 561.632 1025.89 561.851 1029.62 cv
562.072 1033.35 565.275 1036.2 569.002 1035.97 cv
572.734 1035.75 574.756 1032.51 575.357 1028.82 cv
575.611 1027.26 575.896 1025.35 575.737 1023.87 cv
584.17 1015.44 li
637.738 1015.44 li
cp
f
712.654 1035.56 mo
712.873 1037.46 711.517 1039.18 709.619 1039.4 cv
707.724 1039.62 706.009 1038.26 705.787 1036.36 cv
705.712 1035.73 705.824 1035.13 706.058 1034.59 cv
706.25 1034.47 706.431 1034.33 706.599 1034.16 cv
706.931 1033.84 707.183 1033.47 707.357 1033.06 cv
707.787 1032.79 708.275 1032.59 708.818 1032.53 cv
710.714 1032.31 712.431 1033.67 712.654 1035.56 cv
cp
603.611 1031.39 mo
602.255 1032.73 600.068 1032.73 598.72 1031.37 cv
597.376 1030.02 597.382 1027.83 598.738 1026.48 cv
600.091 1025.14 602.281 1025.15 603.626 1026.5 cv
604.093 1026.97 604.384 1027.54 604.527 1028.13 cv
604.515 1028.26 604.492 1028.37 604.492 1028.5 cv
604.492 1028.78 604.533 1029.04 604.597 1029.31 cv
604.515 1030.07 604.197 1030.81 603.611 1031.39 cv
cp
607.949 1025.04 mo
607.38 1025.04 606.851 1025.19 606.378 1025.43 cv
605.662 1024.9 604.896 1024.41 604.208 1023.97 cv
601.054 1021.96 597.292 1021.3 594.642 1023.94 cv
591.99 1026.57 591.974 1030.85 594.607 1033.5 cv
597.246 1036.15 600.822 1035.18 604.177 1033.53 cv
605.009 1033.13 606.064 1032.51 606.984 1031.8 cv
607.292 1031.89 607.611 1031.95 607.949 1031.95 cv
663.849 1031.95 li
664.236 1031.95 664.621 1031.89 664.986 1031.76 cv
680.878 1026.24 li
694.082 1026.24 li
701.711 1034.09 li
702.031 1034.42 702.402 1034.67 702.798 1034.84 cv
703.05 1035.91 703.423 1037.03 703.763 1038 cv
705.001 1041.53 707.558 1044.36 711.265 1043.93 cv
714.976 1043.5 717.638 1040.14 717.203 1036.43 cv
716.767 1032.72 713.355 1031.27 709.699 1030.49 cv
709.013 1030.35 708.154 1030.22 707.275 1030.16 cv
707.119 1029.84 706.927 1029.54 706.669 1029.27 cv
698.025 1020.38 li
697.375 1019.71 696.48 1019.33 695.542 1019.33 cv
680.298 1019.33 li
679.91 1019.33 679.529 1019.39 679.164 1019.52 cv
663.265 1025.04 li
607.949 1025.04 li
cp
f
1020.5 959.938 mo
1021.85 958.587 1024.04 958.587 1025.39 959.938 cv
1026.74 961.287 1026.74 963.477 1025.39 964.826 cv
1024.04 966.178 1021.85 966.178 1020.5 964.826 cv
1019.15 963.477 1019.15 961.287 1020.5 959.938 cv
cp
1012.21 958.67 mo
1012.21 965.587 li
1017.61 965.587 li
1018.4 966.146 1019.24 966.631 1019.93 966.971 cv
1023.28 968.627 1026.85 969.612 1029.5 966.971 cv
1032.14 964.329 1032.13 960.045 1029.49 957.404 cv
1026.85 954.764 1023.08 955.403 1019.93 957.404 cv
1019.26 957.826 1018.53 958.299 1017.83 958.802 cv
1017.83 958.67 li
1012.21 958.67 li
cp
f
610.251 846.656 mo
610.251 851.908 605.998 856.164 600.744 856.164 cv
595.493 856.164 591.234 851.908 591.234 846.656 cv
591.234 841.402 595.493 837.146 600.744 837.146 cv
605.998 837.146 610.251 841.402 610.251 846.656 cv
1 1 1 rgb
f
1013.52 960.889 mo
1013.52 966.172 1009.24 970.455 1003.95 970.455 cv
998.669 970.455 994.384 966.172 994.384 960.889 cv
994.384 955.606 998.669 951.324 1003.95 951.324 cv
1009.24 951.324 1013.52 955.606 1013.52 960.889 cv
cp
f
744.083 992.973 mo
744.083 998.252 739.798 1002.54 734.517 1002.54 cv
729.234 1002.54 724.953 998.252 724.953 992.973 cv
724.953 987.688 729.234 983.404 734.517 983.404 cv
739.798 983.404 744.083 987.688 744.083 992.973 cv
cp
f
685.24 956.967 mo
685.24 962.25 680.957 966.533 675.675 966.533 cv
670.392 966.533 666.109 962.25 666.109 956.967 cv
666.109 951.684 670.392 947.4 675.675 947.4 cv
680.957 947.4 685.24 951.684 685.24 956.967 cv
cp
f
607.949 971.731 mo
607.949 977.017 603.667 981.3 598.384 981.3 cv
593.102 981.3 588.816 977.017 588.816 971.731 cv
588.816 966.451 593.102 962.166 598.384 962.166 cv
603.667 962.166 607.949 966.451 607.949 971.731 cv
cp
f
672.923 991.232 mo
672.923 996.517 668.642 1000.8 663.357 1000.8 cv
658.078 1000.8 653.79 996.517 653.79 991.232 cv
653.79 985.951 658.078 981.666 663.357 981.666 cv
668.642 981.666 672.923 985.951 672.923 991.232 cv
cp
f
764.611 1033.81 mo
764.611 1039.09 760.33 1043.37 755.044 1043.37 cv
749.763 1043.37 745.478 1039.09 745.478 1033.81 cv
745.478 1028.52 749.763 1024.24 755.044 1024.24 cv
760.33 1024.24 764.611 1028.52 764.611 1033.81 cv
cp
f
735.652 1075.95 mo
735.652 1081.23 731.371 1085.51 726.087 1085.51 cv
720.804 1085.51 716.519 1081.23 716.519 1075.95 cv
716.519 1070.66 720.804 1066.38 726.087 1066.38 cv
731.371 1066.38 735.652 1070.66 735.652 1075.95 cv
cp
f
678.816 1024.24 mo
678.816 1029.52 674.535 1033.81 669.25 1033.81 cv
663.968 1033.81 659.683 1029.52 659.683 1024.24 cv
659.683 1018.96 663.968 1014.67 669.25 1014.67 cv
674.535 1014.67 678.816 1018.96 678.816 1024.24 cv
cp
f
639.484 1054.67 mo
639.484 1059.96 635.203 1064.24 629.917 1064.24 cv
624.636 1064.24 620.351 1059.96 620.351 1054.67 cv
620.351 1049.39 624.636 1045.11 629.917 1045.11 cv
635.203 1045.11 639.484 1049.39 639.484 1054.67 cv
cp
f
651.312 1086.9 mo
651.312 1092.18 647.031 1096.46 641.746 1096.46 cv
636.464 1096.46 632.179 1092.18 632.179 1086.9 cv
632.179 1081.61 636.464 1077.33 641.746 1077.33 cv
647.031 1077.33 651.312 1081.61 651.312 1086.9 cv
cp
f
692.863 1060.1 mo
692.863 1065.38 688.582 1069.67 683.296 1069.67 cv
678.015 1069.67 673.73 1065.38 673.73 1060.1 cv
673.73 1054.82 678.015 1050.54 683.296 1050.54 cv
688.582 1050.54 692.863 1054.82 692.863 1060.1 cv
cp
f
405.729 400.633 mo
403.819 400.633 402.272 399.086 402.272 397.174 cv
402.272 395.264 403.819 393.717 405.729 393.717 cv
407.642 393.717 409.188 395.264 409.188 397.174 cv
409.188 399.086 407.642 400.633 405.729 400.633 cv
cp
718.349 622.269 mo
708.31 611.193 li
604.525 611.193 li
523.851 530.732 li
523.851 414.98 li
513.908 403.31 li
513.908 392.946 li
504.347 381.469 li
419.835 381.469 li
410.22 391.082 li
408.612 390.74 406.155 391.275 404.619 391.799 cv
401.08 392.994 397.854 394.826 397.854 398.563 cv
397.854 402.295 400.883 405.326 404.619 405.326 cv
408.354 405.326 410.565 402.209 411.383 398.563 cv
411.692 397.184 412.035 395.533 412.058 394.135 cv
421.267 384.928 li
502.726 384.928 li
510.452 394.196 li
510.452 404.582 li
520.393 416.252 li
520.393 532.168 li
603.097 614.65 li
706.777 614.65 li
714.892 623.602 li
714.892 675.199 li
724.873 685.783 li
727.386 683.41 li
718.349 673.828 li
718.349 622.269 li
cp
0 .862745 1 rgb
f
524.194 402.834 mo
522.82 401.508 522.783 399.318 524.11 397.943 cv
525.436 396.571 527.624 396.533 528.999 397.859 cv
530.374 399.188 530.411 401.375 529.085 402.748 cv
527.757 404.121 525.569 404.16 524.194 402.834 cv
cp
724.4 620.289 mo
712.242 605.791 li
613.601 605.791 li
528.39 520.934 li
528.39 407.402 li
529.557 406.35 530.634 404.556 531.239 403.28 cv
532.835 399.905 533.758 396.313 531.07 393.719 cv
528.382 391.123 524.101 391.196 521.504 393.883 cv
518.908 396.571 519.618 400.328 521.673 403.451 cv
522.59 404.845 523.746 406.551 524.931 407.512 cv
524.931 522.371 li
612.173 609.248 li
710.626 609.248 li
720.943 621.547 li
720.943 671.318 li
734.822 685.795 li
737.318 683.4 li
724.4 669.928 li
724.4 620.289 li
cp
f
742.789 663.097 mo
741.195 664.153 739.05 663.719 737.994 662.125 cv
736.941 660.533 737.376 658.388 738.968 657.332 cv
740.56 656.28 742.705 656.715 743.761 658.304 cv
744.816 659.898 744.38 662.043 742.789 663.097 cv
cp
559.458 371.65 mo
557.57 371.359 556.276 369.594 556.567 367.705 cv
556.857 365.818 558.62 364.525 560.508 364.815 cv
562.397 365.103 563.692 366.869 563.401 368.76 cv
563.111 370.645 561.345 371.94 559.458 371.65 cv
cp
715.173 593.256 mo
632.086 593.256 li
565.344 526.123 li
565.344 374.121 li
565.083 374.121 li
565.951 372.699 565.781 369.744 565.468 367.953 cv
564.823 364.272 563.503 360.804 559.81 360.235 cv
556.118 359.668 552.664 362.201 552.093 365.897 cv
551.526 369.588 554.274 372.248 557.753 373.609 cv
559.024 374.107 560.54 374.674 561.886 374.922 cv
561.886 527.551 li
630.646 596.713 li
713.746 596.713 li
740.824 623.652 li
740.824 652.844 li
739.408 653.584 737.882 655.185 736.98 656.347 cv
734.691 659.301 733.013 662.61 735.082 665.722 cv
737.142 668.838 741.339 669.69 744.455 667.627 cv
746.425 666.318 747.195 664.306 747.158 662.121 cv
749.052 664.571 li
760.275 664.571 li
760.275 661.112 li
750.751 661.112 li
744.281 652.742 li
744.281 622.219 li
715.173 593.256 li
cp
f
531.789 668.885 mo
529.878 668.885 528.331 667.336 528.331 665.428 cv
528.331 663.515 529.878 661.967 531.789 661.967 cv
533.699 661.967 535.247 663.515 535.247 665.428 cv
535.247 667.336 533.699 668.885 531.789 668.885 cv
cp
480.267 618.054 mo
478.356 618.054 476.808 616.508 476.808 614.597 cv
476.808 612.688 478.356 611.138 480.267 611.138 cv
482.175 611.138 483.724 612.688 483.724 614.597 cv
483.724 616.508 482.175 618.054 480.267 618.054 cv
cp
462.821 433.508 mo
461.449 432.179 461.411 429.992 462.737 428.617 cv
464.063 427.244 466.251 427.205 467.625 428.533 cv
469.001 429.859 469.04 432.049 467.712 433.422 cv
466.386 434.793 464.196 434.834 462.821 433.508 cv
cp
533.177 659.771 mo
531.49 659.393 529.4 658.963 527.864 659.139 cv
490.099 620.053 li
487.356 608.847 li
481.493 604.102 li
481.493 474.551 li
466.798 459.711 li
466.798 438.26 li
468.048 437.248 469.224 435.309 469.865 433.957 cv
471.463 430.578 472.386 426.985 469.698 424.39 cv
467.011 421.795 462.728 421.869 460.132 424.556 cv
457.536 427.246 458.245 431.002 460.3 434.121 cv
461.166 435.44 462.243 437.033 463.357 438.018 cv
463.34 438.018 li
463.34 461.131 li
478.036 475.972 li
478.036 605.752 li
480.376 607.646 li
479.985 607.584 479.589 607.543 479.181 607.543 cv
474.979 607.543 471.574 610.949 471.574 615.148 cv
471.574 619.347 474.979 622.752 479.181 622.752 cv
482.262 622.752 484.908 620.914 486.104 618.278 cv
486.962 621.785 li
525.594 661.768 li
525.528 663.31 525.976 665.248 526.413 666.537 cv
527.608 670.074 529.438 673.303 533.177 673.303 cv
536.911 673.303 539.94 670.273 539.94 666.537 cv
539.94 662.803 536.821 660.59 533.177 659.771 cv
cp
f
511.907 673.203 mo
509.995 673.203 508.449 671.655 508.449 669.746 cv
508.449 667.836 509.995 666.287 511.907 666.287 cv
513.818 666.287 515.364 667.836 515.364 669.746 cv
515.364 671.655 513.818 673.203 511.907 673.203 cv
cp
458.089 400.775 mo
458.485 398.905 460.321 397.715 462.19 398.112 cv
464.058 398.508 465.247 400.347 464.851 402.213 cv
464.454 404.082 462.617 405.275 460.751 404.877 cv
458.884 404.478 457.69 402.643 458.089 400.775 cv
cp
513.295 664.092 mo
511.296 663.643 508.729 663.119 507.197 663.629 cv
455.561 612.203 li
455.561 548.549 li
441.297 531.26 li
441.297 482.924 li
450.815 473.98 li
449.951 413.727 li
456.722 406.955 li
458.158 407.326 460.077 407.33 461.651 407.313 cv
465.386 407.272 468.897 405.758 469.675 402.103 cv
470.453 398.451 468.122 394.857 464.466 394.08 cv
460.813 393.301 458.349 396.074 456.441 399.287 cv
455.685 400.565 454.757 402.59 454.602 404.188 cv
446.474 412.316 li
447.338 472.504 li
437.839 481.428 li
437.839 532.502 li
452.103 549.791 li
452.103 613.64 li
505.728 667.049 li
505.824 668.379 506.182 669.826 506.531 670.857 cv
507.727 674.396 509.557 677.623 513.295 677.623 cv
517.029 677.623 520.059 674.594 520.059 670.857 cv
520.059 667.121 516.94 664.91 513.295 664.092 cv
cp
f
692.037 674.071 mo
690.126 674.071 688.578 672.523 688.578 670.61 cv
688.578 668.701 690.126 667.153 692.037 667.153 cv
693.945 667.153 695.494 668.701 695.494 670.61 cv
695.494 672.523 693.945 674.071 692.037 674.071 cv
cp
557.035 673.109 mo
555.126 673.109 553.577 671.563 553.577 669.652 cv
553.577 667.742 555.126 666.195 557.035 666.195 cv
558.944 666.195 560.493 667.742 560.493 669.652 cv
560.493 671.563 558.944 673.109 557.035 673.109 cv
cp
693.421 664.959 mo
691.484 664.521 689.011 664.018 687.466 664.453 cv
673.308 648.58 li
579.852 648.58 li
561.608 663.582 li
560.003 663.199 557.489 663.744 555.923 664.275 cv
552.384 665.47 549.158 667.303 549.158 671.039 cv
549.158 674.775 552.188 677.804 555.923 677.804 cv
559.661 677.804 561.872 674.685 562.69 671.039 cv
562.999 669.66 563.339 668.012 563.362 666.615 cv
581.091 652.037 li
671.759 652.037 li
685.507 667.453 li
685.83 667.164 li
685.812 668.67 686.244 670.494 686.66 671.725 cv
687.855 675.261 689.687 678.49 693.421 678.49 cv
697.16 678.49 700.187 675.459 700.187 671.725 cv
700.187 667.99 697.07 665.777 693.421 664.959 cv
cp
f
492.617 404.556 mo
490.708 404.522 489.188 402.946 489.221 401.039 cv
489.253 399.131 490.828 397.609 492.737 397.64 cv
494.647 397.678 496.169 399.25 496.135 401.16 cv
496.101 403.069 494.527 404.59 492.617 404.556 cv
cp
559.25 612.905 mo
560.622 614.232 560.66 616.422 559.335 617.795 cv
558.009 619.168 555.821 619.205 554.445 617.879 cv
553.071 616.553 553.031 614.362 554.36 612.99 cv
555.686 611.617 557.876 611.578 559.25 612.905 cv
cp
498.072 400.08 mo
496.938 396.522 495.165 393.268 491.427 393.199 cv
487.692 393.135 484.612 396.109 484.546 399.844 cv
484.481 403.58 487.561 405.845 491.19 406.727 cv
492.749 407.105 494.661 407.539 496.158 407.48 cv
495.864 407.793 li
511.315 422.41 li
511.315 437.321 li
500.079 449.065 li
500.079 527.856 li
554.538 581.019 li
554.538 608.854 li
553.577 609.914 552.72 611.373 552.206 612.459 cv
550.609 615.834 549.686 619.426 552.374 622.023 cv
555.061 624.615 559.343 624.541 561.94 621.857 cv
564.536 619.168 563.827 615.41 561.772 612.291 cv
560.722 610.691 559.358 608.684 557.995 607.856 cv
557.995 579.56 li
503.536 526.396 li
503.536 450.453 li
514.774 438.711 li
514.774 420.92 li
498.689 405.705 li
499.061 404.103 498.566 401.631 498.072 400.08 cv
cp
f
548.942 642.83 mo
548.558 644.701 546.728 645.902 544.857 645.515 cv
542.986 645.129 541.783 643.301 542.171 641.428 cv
542.558 639.56 544.388 638.357 546.259 638.744 cv
548.128 639.131 549.329 640.961 548.942 642.83 cv
cp
491.056 433.81 mo
489.683 432.484 489.645 430.297 490.972 428.922 cv
492.298 427.547 494.486 427.51 495.861 428.838 cv
497.235 430.162 497.272 432.352 495.945 433.727 cv
494.618 435.097 492.431 435.136 491.056 433.81 cv
cp
553.315 644.869 mo
554.072 641.211 551.466 638.414 548.061 636.875 cv
546.593 636.209 544.786 635.426 543.3 635.211 cv
543.3 579.574 li
494.892 531.166 li
494.892 438.678 li
496.194 437.703 497.435 435.664 498.1 434.26 cv
499.696 430.883 500.62 427.289 497.931 424.695 cv
495.245 422.1 490.964 422.174 488.364 424.859 cv
485.771 427.549 486.481 431.306 488.533 434.426 cv
489.461 435.836 490.631 437.566 491.828 438.522 cv
491.435 438.522 li
491.435 532.597 li
539.843 581.006 li
539.843 638.207 li
540.054 638.207 li
539.875 639.535 539.933 641.041 540.065 642.131 cv
540.521 645.838 541.661 649.367 545.319 650.123 cv
548.979 650.879 552.558 648.528 553.315 644.869 cv
cp
f
817.675 669.506 mo
817.277 671.371 815.441 672.565 813.574 672.166 cv
811.707 671.769 810.513 669.934 810.912 668.066 cv
811.31 666.199 813.146 665.006 815.013 665.403 cv
816.88 665.801 818.074 667.638 817.675 669.506 cv
cp
528.238 373.147 mo
526.329 373.11 524.81 371.535 524.842 369.627 cv
524.874 367.719 526.449 366.196 528.358 366.23 cv
530.269 366.264 531.789 367.838 531.755 369.748 cv
531.722 371.655 530.147 373.179 528.238 373.147 cv
cp
817.29 661.371 mo
813.636 660.592 811.171 663.365 809.263 666.58 cv
808.509 667.852 807.586 669.867 807.425 671.463 cv
800.65 677.828 li
742.001 677.828 li
730.451 665.61 li
730.451 615.446 li
713.447 598.441 li
621.392 598.441 li
547.623 523.394 li
547.623 384.553 li
534.425 373.482 li
534.524 371.935 534.11 369.975 533.694 368.67 cv
532.56 365.112 530.786 361.853 527.048 361.787 cv
523.313 361.722 520.232 364.696 520.167 368.435 cv
520.103 372.17 523.182 374.434 526.811 375.315 cv
528.484 375.719 530.556 376.184 532.093 376.039 cv
544.165 386.166 li
544.165 524.809 li
619.943 601.9 li
712.015 601.9 li
726.994 616.879 li
726.994 666.987 li
740.511 681.285 li
802.021 681.285 li
809.521 674.236 li
810.962 674.615 812.892 674.619 814.474 674.602 cv
818.208 674.563 821.72 673.049 822.5 669.394 cv
823.277 665.74 820.943 662.146 817.29 661.371 cv
cp
f
627.248 673.365 mo
625.898 674.713 623.708 674.713 622.359 673.365 cv
621.009 672.014 621.009 669.824 622.359 668.475 cv
623.708 667.123 625.898 667.123 627.248 668.475 cv
628.597 669.824 628.597 672.014 627.248 673.365 cv
cp
619.824 664.367 mo
617.183 667.011 617.824 670.778 619.824 673.935 cv
620.595 675.152 621.539 676.602 622.531 677.609 cv
622.181 677.609 li
622.181 684.597 li
625.638 684.597 li
625.638 678.586 li
627.115 677.828 628.623 675.494 629.392 673.935 cv
631.046 670.586 632.033 667.011 629.392 664.367 cv
626.75 661.727 622.468 661.727 619.824 664.367 cv
cp
f
650.822 673.106 mo
648.912 673.069 647.39 671.494 647.425 669.588 cv
647.457 667.678 649.033 666.155 650.943 666.19 cv
652.851 666.225 654.373 667.797 654.337 669.709 cv
654.304 671.617 652.728 673.138 650.822 673.106 cv
cp
656.279 668.629 mo
655.142 665.069 653.367 661.813 649.632 661.748 cv
645.894 661.681 642.816 664.655 642.748 668.394 cv
642.685 672.127 645.763 674.393 649.394 675.275 cv
650.82 675.619 652.531 676.006 653.962 676.028 cv
657.406 678.5 li
657.406 684.597 li
660.865 684.597 li
660.865 676.725 li
656.957 673.924 li
657.199 672.326 656.74 670.074 656.279 668.629 cv
cp
f
672.601 674.58 mo
670.691 674.547 669.169 672.97 669.203 671.063 cv
669.234 669.153 670.81 667.633 672.72 667.666 cv
674.628 667.696 676.15 669.273 676.117 671.184 cv
676.083 673.092 674.509 674.612 672.601 674.58 cv
cp
678.054 670.106 mo
676.919 666.545 675.148 663.289 671.41 663.225 cv
667.675 663.155 664.593 666.135 664.529 669.871 cv
664.464 673.604 667.542 675.867 671.173 676.75 cv
673.109 677.221 675.582 677.771 677.136 677.356 cv
687.417 685.926 li
689.634 683.268 li
678.796 674.236 li
678.763 672.826 678.412 671.225 678.054 670.106 cv
cp
f
495.706 564.5 mo
495.706 573.431 li
499.163 573.431 li
499.163 564.5 li
495.706 564.5 li
cp
f
517.791 621.961 mo
519.117 620.588 521.306 620.553 522.681 621.877 cv
524.054 623.203 524.091 625.393 522.765 626.768 cv
521.44 628.14 519.249 628.178 517.875 626.85 cv
516.501 625.525 516.462 623.336 517.791 621.961 cv
cp
515.804 630.994 mo
518.49 633.588 522.773 633.511 525.37 630.828 cv
527.966 628.138 527.257 624.383 525.202 621.261 cv
524.154 619.668 522.796 617.668 521.438 616.838 cv
521.438 608.842 li
517.979 608.842 li
517.979 617.775 li
518.015 617.775 li
517.033 618.838 516.158 620.326 515.637 621.429 cv
514.04 624.806 513.117 628.396 515.804 630.994 cv
cp
f
615.671 626.871 mo
616.998 625.496 619.185 625.459 620.56 626.785 cv
621.933 628.115 621.972 630.301 620.644 631.676 cv
619.318 633.051 617.13 633.088 615.755 631.761 cv
614.38 630.435 614.343 628.246 615.671 626.871 cv
cp
621.259 634.196 mo
622.855 633.15 624.855 631.791 625.685 630.434 cv
633.677 630.434 li
633.677 626.977 li
624.746 626.977 li
624.746 627.011 li
623.683 626.03 622.195 625.154 621.093 624.633 cv
617.716 623.035 614.125 622.112 611.529 624.801 cv
608.933 627.487 609.007 631.771 611.695 634.369 cv
614.384 636.963 618.14 636.252 621.259 634.196 cv
cp
f
701.273 630.707 mo
699.363 630.707 697.816 629.155 697.816 627.246 cv
697.816 625.338 699.363 623.789 701.273 623.789 cv
703.183 623.789 704.73 625.338 704.73 627.246 cv
704.73 629.155 703.183 630.707 701.273 630.707 cv
cp
700.189 620.193 mo
695.988 620.193 692.586 623.6 692.586 627.801 cv
692.586 631.998 695.988 635.403 700.189 635.403 cv
704.386 635.403 707.79 631.998 707.79 627.801 cv
707.79 623.6 704.386 620.193 700.189 620.193 cv
cp
f
696.58 653.217 mo
694.669 653.217 693.123 651.666 693.123 649.758 cv
693.123 647.847 694.669 646.299 696.58 646.299 cv
698.49 646.299 700.037 647.847 700.037 649.758 cv
700.037 651.666 698.49 653.217 696.58 653.217 cv
cp
695.494 642.703 mo
691.294 642.703 687.892 646.107 687.892 650.309 cv
687.892 654.51 691.294 657.912 695.494 657.912 cv
699.693 657.912 703.097 654.51 703.097 650.309 cv
703.097 646.107 699.693 642.703 695.494 642.703 cv
cp
f
480.908 466.028 mo
480.908 471.283 476.653 475.539 471.399 475.539 cv
466.147 475.539 461.892 471.283 461.892 466.028 cv
461.892 460.777 466.147 456.522 471.399 456.522 cv
476.653 456.522 480.908 460.777 480.908 466.028 cv
1 1 1 rgb
f
602.07 650.309 mo
602.07 655.56 597.814 659.818 592.561 659.818 cv
587.31 659.818 583.052 655.56 583.052 650.309 cv
583.052 645.056 587.31 640.801 592.561 640.801 cv
597.814 640.801 602.07 645.056 602.07 650.309 cv
f
778.089 661.237 mo
778.089 666.49 773.836 670.746 768.58 670.746 cv
763.33 670.746 759.072 666.49 759.072 661.237 cv
759.072 655.985 763.33 651.729 768.58 651.729 cv
773.836 651.729 778.089 655.985 778.089 661.237 cv
f
507.511 557.396 mo
507.511 562.65 503.255 566.905 498.002 566.905 cv
492.749 566.905 488.493 562.65 488.493 557.396 cv
488.493 552.144 492.749 547.888 498.002 547.888 cv
503.255 547.888 507.511 552.144 507.511 557.396 cv
f
506.561 579.857 mo
506.561 585.109 502.306 589.365 497.054 589.365 cv
491.801 589.365 487.544 585.109 487.544 579.857 cv
487.544 574.607 491.801 570.35 497.054 570.35 cv
502.306 570.35 506.561 574.607 506.561 579.857 cv
f
529.786 601.74 mo
529.786 606.992 525.528 611.248 520.278 611.248 cv
515.025 611.248 510.769 606.992 510.769 601.74 cv
510.769 596.487 515.025 592.231 520.278 592.231 cv
525.528 592.231 529.786 596.487 529.786 601.74 cv
f
640.783 638.785 mo
635.529 638.785 631.273 634.527 631.273 629.275 cv
631.273 624.021 635.529 619.765 640.783 619.765 cv
646.035 619.765 650.292 624.021 650.292 629.275 cv
650.292 634.527 646.035 638.785 640.783 638.785 cv
f
474.438 505.924 mo
474.438 511.176 470.181 515.434 464.929 515.434 cv
459.677 515.434 455.42 511.176 455.42 505.924 cv
455.42 500.67 459.677 496.414 464.929 496.414 cv
470.181 496.414 474.438 500.67 474.438 505.924 cv
f
555.972 472.775 mo
555.972 478.028 551.716 482.283 546.463 482.283 cv
541.21 482.283 536.954 478.028 536.954 472.775 cv
536.954 467.523 541.21 463.265 546.463 463.265 cv
551.716 463.265 555.972 467.523 555.972 472.775 cv
f
502.968 652.237 mo
502.968 657.49 498.711 661.746 493.459 661.746 cv
488.206 661.746 483.949 657.49 483.949 652.237 cv
483.949 646.985 488.206 642.729 493.459 642.729 cv
498.711 642.729 502.968 646.985 502.968 652.237 cv
f
830.505 98.7793 mo
830.904 100.646 829.708 102.484 827.843 102.881 cv
825.976 103.277 824.136 102.086 823.742 100.221 cv
823.343 98.3496 824.535 96.5137 826.404 96.1172 cv
828.271 95.7188 830.107 96.9121 830.505 98.7793 cv
cp
1072.48 405.301 mo
1081.56 413.156 li
1108.5 413.156 li
1108.5 409.697 li
1082.85 409.697 li
1075.94 403.721 li
1075.94 280.193 li
1012.83 215.791 li
1012.83 122.424 li
959.742 69.1108 li
852.474 69.1108 li
829.494 92.6699 li
827.955 92.9082 826.109 93.7637 824.915 94.4707 cv
821.703 96.377 818.929 98.8418 819.705 102.494 cv
820.488 106.15 824.078 108.48 827.734 107.703 cv
831.386 106.926 832.898 103.416 832.941 99.6797 cv
832.958 98.0215 832.947 95.9883 832.511 94.5293 cv
853.929 72.5688 li
958.304 72.5688 li
1009.37 123.854 li
1009.37 217.203 li
1072.48 281.603 li
1072.48 405.301 li
cp
0 .862745 1 rgb
f
854.259 125.596 mo
856.107 126.074 857.218 127.959 856.74 129.809 cv
856.259 131.658 854.371 132.768 852.525 132.287 cv
850.673 131.809 849.564 129.922 850.046 128.074 cv
850.525 126.225 852.41 125.115 854.259 125.596 cv
cp
986.197 129.189 mo
940.517 129.189 li
923.949 112.225 li
869.783 112.225 li
861.064 123.57 li
858.531 123.57 li
858.531 123.744 li
857.097 123.268 855.097 123.174 853.466 123.121 cv
849.732 123 846.16 124.355 845.22 127.975 cv
844.285 131.59 846.455 135.281 850.074 136.219 cv
853.689 137.154 856.271 134.494 858.318 131.367 cv
859.048 130.248 859.957 128.521 860.296 127.027 cv
862.771 127.027 li
871.484 115.682 li
922.494 115.682 li
939.06 132.646 li
984.726 132.646 li
992.087 140.262 li
992.087 227.572 li
1022.77 259.125 li
1022.77 264.473 li
1026.23 264.473 li
1026.23 257.719 li
995.542 226.168 li
995.542 138.863 li
986.197 129.189 li
cp
f
800.296 128.318 mo
800.693 130.186 799.498 132.021 797.632 132.418 cv
795.765 132.814 793.929 131.625 793.535 129.758 cv
793.134 127.889 794.328 126.053 796.195 125.656 cv
798.062 125.26 799.898 126.451 800.296 128.318 cv
cp
1057.6 313.338 mo
1058.95 314.688 1058.95 316.875 1057.6 318.227 cv
1056.25 319.576 1054.06 319.576 1052.71 318.227 cv
1051.36 316.875 1051.36 314.688 1052.71 313.338 cv
1054.06 311.986 1056.25 311.986 1057.6 313.338 cv
cp
868.023 104.77 mo
859.376 113.777 li
807.82 114.064 li
799.728 122.154 li
798.115 122.271 796.015 123.234 794.707 124.01 cv
791.494 125.916 788.722 128.381 789.498 132.033 cv
790.279 135.689 793.869 138.02 797.523 137.242 cv
801.179 136.465 802.691 132.955 802.732 129.221 cv
802.748 127.678 802.746 125.801 802.396 124.373 cv
809.259 117.516 li
860.859 117.229 li
869.496 108.227 li
970.617 108.227 li
999 136.959 li
999 224.256 li
1053.18 280.443 li
1053.18 308.81 li
1052.08 309.815 1051.02 311.432 1050.18 312.764 cv
1048.18 315.92 1047.53 319.69 1050.18 322.33 cv
1052.82 324.973 1057.1 324.973 1059.74 322.332 cv
1062.39 319.69 1061.4 316.113 1059.74 312.764 cv
1059.08 311.432 1057.89 309.533 1056.63 308.535 cv
1056.63 279.049 li
1002.46 222.861 li
1002.46 135.541 li
972.064 104.77 li
868.023 104.77 li
cp
f
1032.85 697.104 mo
1031.5 695.754 1031.5 693.565 1032.85 692.213 cv
1034.2 690.859 1036.39 690.859 1037.74 692.213 cv
1039.08 693.565 1039.09 695.754 1037.74 697.104 cv
1036.39 698.453 1034.2 698.453 1032.85 697.104 cv
cp
747.007 146.402 mo
745.095 146.42 743.535 144.891 743.513 142.98 cv
743.494 141.072 745.029 139.508 746.937 139.49 cv
748.847 139.471 750.408 141.002 750.429 142.912 cv
750.449 144.822 748.915 146.383 747.007 146.402 cv
cp
1030.31 701.205 mo
1032.95 703.85 1037.24 703.85 1039.88 701.209 cv
1042.52 698.566 1041.53 694.99 1039.88 691.641 cv
1039.24 690.346 1038.09 688.514 1036.88 687.494 cv
1036.88 680.463 li
1026.23 668.791 li
1026.23 528.441 li
1044.24 511.438 li
1044.24 454.81 li
1048.94 448.756 li
1048.72 396.869 li
1010.95 359.56 li
995.04 359.56 li
989.078 352.855 li
989.078 320.168 li
994.597 313.504 li
994.597 254.471 li
994.097 253.963 li
894.576 153.518 li
861.687 153.518 li
849.015 166.686 li
809.904 166.686 li
788.226 145.389 li
753.164 145.389 li
753.035 144.115 752.679 142.76 752.337 141.783 cv
751.105 138.256 749.24 135.049 745.507 135.082 cv
741.767 135.121 738.775 138.182 738.81 141.916 cv
738.847 145.654 741.986 147.828 745.642 148.611 cv
747.828 149.08 750.703 149.639 752.14 148.846 cv
786.812 148.846 li
808.49 170.143 li
850.488 170.143 li
863.158 156.977 li
893.132 156.977 li
991.138 255.891 li
991.138 312.26 li
985.619 318.922 li
985.619 354.168 li
993.49 363.018 li
1009.53 363.018 li
1045.27 398.322 li
1045.47 447.578 li
1040.78 453.625 li
1040.78 509.949 li
1022.77 526.949 li
1022.77 670.133 li
1033.42 681.803 li
1033.42 687.59 li
1032.28 688.584 1031.19 690.262 1030.31 691.641 cv
1028.31 694.795 1027.67 698.566 1030.31 701.205 cv
cp
f
1025.87 435.127 mo
1024.59 433.713 1024.7 431.529 1026.11 430.246 cv
1027.53 428.963 1029.72 429.074 1030.99 430.492 cv
1032.28 431.91 1032.17 434.096 1030.75 435.375 cv
1029.33 436.658 1027.15 436.547 1025.87 435.127 cv
cp
888.591 195.076 mo
887.218 196.402 885.029 196.365 883.703 194.992 cv
882.373 193.617 882.41 191.428 883.787 190.102 cv
885.16 188.775 887.353 188.814 888.675 190.186 cv
890 191.561 889.966 193.748 888.591 195.076 cv
cp
1023.52 439.123 mo
1026.02 441.895 1030.3 442.107 1033.07 439.603 cv
1035.85 437.096 1035.39 433.303 1033.56 430.051 cv
1032.67 428.469 1031.52 426.504 1030.29 425.523 cv
1030.29 417.494 li
975.224 364.44 li
974.806 313.728 li
981.714 308.404 li
981.714 258.121 li
911.816 190.564 li
893.042 190.564 li
892.052 189.506 890.548 188.488 889.292 187.664 cv
886.171 185.609 882.414 184.902 879.728 187.494 cv
877.039 190.092 876.966 194.375 879.56 197.061 cv
882.156 199.75 885.746 198.828 889.126 197.23 cv
890.531 196.564 892.566 195.324 893.542 194.021 cv
910.417 194.021 li
978.255 259.588 li
978.255 306.703 li
971.332 312.037 li
971.781 365.922 li
1026.83 418.963 li
1026.83 425.885 li
1025.7 426.881 1024.64 428.43 1024 429.566 cv
1022.18 432.828 1021.02 436.346 1023.52 439.123 cv
cp
f
976.904 452.203 mo
975.033 451.82 973.832 449.984 974.222 448.117 cv
974.611 446.246 976.439 445.049 978.31 445.434 cv
980.179 445.822 981.38 447.652 980.992 449.523 cv
980.599 451.393 978.773 452.592 976.904 452.203 cv
cp
824.771 195.076 mo
823.398 196.402 821.207 196.365 819.882 194.992 cv
818.554 193.617 818.593 191.428 819.966 190.102 cv
821.341 188.775 823.531 188.814 824.857 190.186 cv
826.183 191.561 826.144 193.748 824.771 195.076 cv
cp
982.859 451.326 mo
983.494 449.928 984.242 448.219 984.5 446.775 cv
984.611 446.91 li
994.681 438.66 li
994.681 425.393 li
943.789 378.25 li
943.248 281.777 li
952.468 264.916 li
952.468 240.445 li
919.927 206.088 li
851.287 206.088 li
837.257 190.564 li
829.226 190.564 li
829.226 190.568 li
828.234 189.51 826.726 188.49 825.472 187.664 cv
822.351 185.609 818.595 184.902 815.906 187.494 cv
813.218 190.092 813.144 194.375 815.738 197.061 cv
818.333 199.75 821.929 198.828 825.304 197.23 cv
826.708 196.564 828.746 195.324 829.722 194.021 cv
835.72 194.021 li
849.75 209.545 li
918.439 209.545 li
949.011 241.822 li
949.011 264.031 li
939.785 280.902 li
940.339 379.77 li
991.222 426.902 li
991.222 437.022 li
983.083 443.69 li
981.564 443.102 979.16 443.139 977.611 443.33 cv
973.902 443.783 970.371 444.92 969.611 448.578 cv
968.851 452.238 971.203 455.815 974.863 456.574 cv
978.519 457.332 981.316 454.732 982.859 451.326 cv
cp
f
914.619 218.867 mo
916.527 218.859 918.078 220.402 918.089 222.311 cv
918.097 224.219 916.556 225.773 914.646 225.779 cv
912.734 225.787 911.181 224.246 911.175 222.338 cv
911.164 220.428 912.708 218.875 914.619 218.867 cv
cp
906.478 221.246 mo
906.49 224.98 909.615 227.176 913.269 227.982 cv
914.14 228.174 915.123 228.381 916.08 228.514 cv
916.082 229.104 916.222 229.703 916.546 230.25 cv
921.679 238.994 li
922.646 240.641 924.765 241.193 926.41 240.225 cv
927.507 239.582 928.119 238.428 928.119 237.24 cv
928.119 236.646 927.966 236.043 927.642 235.492 cv
922.509 226.75 li
922.109 226.07 921.511 225.59 920.833 225.314 cv
920.773 223.902 920.386 222.305 920.001 221.191 cv
918.792 217.658 916.949 214.441 913.214 214.451 cv
909.476 214.469 906.464 217.508 906.478 221.246 cv
cp
f
824.445 136.471 mo
822.533 136.477 820.98 134.938 820.972 133.027 cv
820.962 131.117 822.507 129.564 824.415 129.557 cv
826.326 129.549 827.876 131.092 827.888 133 cv
827.896 134.91 826.355 136.465 824.445 136.471 cv
cp
1057.35 696.742 mo
1058.62 698.16 1058.51 700.346 1057.09 701.625 cv
1055.67 702.9 1053.49 702.787 1052.21 701.367 cv
1050.93 699.945 1051.05 697.766 1052.46 696.484 cv
1053.88 695.205 1056.07 695.32 1057.35 696.742 cv
cp
828.613 139.258 mo
840.173 151.232 li
895.955 151.232 li
997.443 253.203 li
997.443 315.129 li
992.082 321.234 li
992.082 349.742 li
997.833 357.832 li
1012.94 357.832 li
1050.89 395.305 li
1051.73 449.293 li
1046.84 455.334 li
1046.84 511.807 li
1029.35 527.797 li
1029.35 667.543 li
1052.53 692.773 li
1051.65 693.715 1050.86 694.891 1050.35 695.799 cv
1048.52 699.059 1047.35 702.576 1049.85 705.356 cv
1052.35 708.133 1056.63 708.354 1059.41 705.856 cv
1062.18 703.354 1061.74 699.56 1059.91 696.299 cv
1058.83 694.385 1057.38 691.904 1055.86 691.291 cv
1032.81 666.195 li
1032.81 529.32 li
1050.3 513.33 li
1050.3 456.56 li
1055.21 450.496 li
1054.32 393.838 li
1014.36 354.373 li
999.619 354.373 li
995.54 348.637 li
995.54 322.537 li
1000.9 316.434 li
1000.9 251.775 li
1000.4 251.271 li
897.394 147.775 li
841.642 147.775 li
830.648 136.385 li
830.65 134.891 830.22 133.096 829.802 131.881 cv
828.591 128.348 826.746 125.131 823.011 125.141 cv
819.275 125.158 816.261 128.197 816.277 131.936 cv
816.287 135.67 819.414 137.865 823.066 138.672 cv
824.837 139.063 827.064 139.516 828.613 139.258 cv
cp
f
1015.24 686.119 mo
1013.95 684.697 1014.08 682.516 1015.49 681.234 cv
1016.91 679.957 1019.1 680.07 1020.38 681.492 cv
1021.65 682.91 1021.54 685.096 1020.12 686.375 cv
1018.7 687.652 1016.52 687.537 1015.24 686.119 cv
cp
854.492 188.055 mo
856.402 188.082 857.929 189.65 857.904 191.557 cv
857.88 193.469 856.312 194.998 854.402 194.971 cv
852.492 194.945 850.962 193.377 850.99 191.471 cv
851.015 189.559 852.582 188.031 854.492 188.055 cv
cp
1022.44 690.607 mo
1025.21 688.104 1024.77 684.313 1022.94 681.051 cv
1022.06 679.502 1020.95 677.584 1019.75 676.582 cv
1020.18 523.264 li
1037.42 507.272 li
1037.42 452.31 li
1042.07 445.688 li
1042.07 399.904 li
1008.51 366.477 li
991.621 366.477 li
982.578 355.484 li
982.578 319.824 li
987.853 312.906 li
987.853 256.611 li
904.199 172.895 li
869.894 172.895 li
858.123 185.242 li
856.628 185.137 854.705 185.512 853.134 185.842 cv
849.478 186.613 846.328 188.781 846.281 192.518 cv
846.232 196.254 849.22 199.322 852.955 199.371 cv
856.691 199.422 858.566 196.221 859.812 192.695 cv
860.296 191.314 860.8 189.184 860.66 187.594 cv
871.371 176.352 li
902.767 176.352 li
984.394 258.045 li
984.394 311.738 li
979.119 318.656 li
979.119 356.725 li
989.99 369.934 li
1007.08 369.934 li
1038.61 401.34 li
1038.61 444.596 li
1033.96 451.221 li
1033.96 505.762 li
1016.73 521.75 li
1016.29 676.815 li
1015.13 677.803 1014.03 679.393 1013.38 680.551 cv
1011.55 683.809 1010.38 687.326 1012.88 690.106 cv
1015.38 692.881 1019.66 693.106 1022.44 690.607 cv
cp
f
949.386 184.291 mo
947.494 184.57 945.734 183.266 945.455 181.377 cv
945.179 179.488 946.484 177.729 948.371 177.451 cv
950.261 177.172 952.019 178.477 952.298 180.365 cv
952.576 182.254 951.273 184.012 949.386 184.291 cv
cp
952.951 186.543 mo
963.001 195.287 li
965.271 192.676 li
955.664 184.32 li
955.787 182.732 954.955 180.459 954.267 178.67 cv
952.925 175.184 950.281 172.424 946.587 172.969 cv
942.888 173.516 940.337 176.955 940.882 180.652 cv
941.429 184.348 944.89 185.686 948.566 186.354 cv
949.773 186.574 951.509 186.729 952.951 186.543 cv
cp
f
882.386 134.938 mo
881.06 133.563 881.097 131.373 882.474 130.049 cv
883.847 128.723 886.035 128.76 887.361 130.133 cv
888.685 131.508 888.65 133.697 887.277 135.023 cv
885.902 136.352 883.712 136.313 882.386 134.938 cv
cp
887.812 137.176 mo
888.91 136.654 890.396 135.779 891.458 134.799 cv
891.458 134.834 li
900.396 134.834 li
900.396 131.377 li
892.4 131.377 li
891.572 130.02 889.572 128.66 887.976 127.611 cv
884.857 125.555 881.099 124.848 878.41 127.443 cv
875.722 130.039 875.648 134.322 878.244 137.01 cv
880.837 139.697 884.431 138.773 887.812 137.176 cv
cp
f
944.865 152.984 mo
943.017 152.506 941.906 150.621 942.38 148.773 cv
942.859 146.924 944.742 145.811 946.593 146.287 cv
948.445 146.766 949.554 148.652 949.078 150.5 cv
948.599 152.35 946.714 153.461 944.865 152.984 cv
cp
945.66 155.457 mo
949.396 155.576 952.968 154.215 953.902 150.598 cv
954.833 146.979 952.658 143.291 949.039 142.357 cv
945.423 141.424 942.845 144.088 940.8 147.215 cv
939.654 148.977 938.066 152.236 938.947 153.725 cv
939.826 155.217 943.177 155.379 945.66 155.457 cv
cp
f
972.89 151.992 mo
971.56 150.621 971.593 148.434 972.964 147.104 cv
974.333 145.771 976.529 145.811 977.855 147.18 cv
979.181 148.547 979.15 150.736 977.781 152.07 cv
976.41 153.396 974.218 153.361 972.89 151.992 cv
cp
1072.64 698.869 mo
1073.92 700.287 1073.81 702.473 1072.39 703.75 cv
1070.97 705.027 1068.78 704.914 1067.51 703.494 cv
1066.23 702.074 1066.34 699.893 1067.76 698.613 cv
1069.18 697.332 1071.36 697.447 1072.64 698.869 cv
cp
1017.87 347.027 mo
1005.11 347.027 li
1003.33 344.342 li
1003.33 324.998 li
1008.08 319.922 li
1008.08 247.705 li
989.062 228.477 li
989.062 179.701 li
977.392 167.713 li
977.392 156.451 li
978.453 155.457 979.474 153.941 980.302 152.678 cv
982.351 149.555 983.05 145.795 980.453 143.113 cv
977.851 140.43 973.568 140.363 970.884 142.965 cv
968.203 145.566 969.132 149.156 970.736 152.529 cv
971.4 153.926 972.636 155.947 973.933 156.928 cv
973.933 169.119 li
985.605 181.107 li
985.605 229.9 li
1004.62 249.127 li
1004.62 318.553 li
999.869 323.629 li
999.869 345.389 li
1003.27 350.484 li
1016.44 350.484 li
1057.58 391.406 li
1058.2 451.463 li
1053.43 457.506 li
1053.43 515.264 li
1037.42 529.959 li
1037.42 664.559 li
1067.76 694.971 li
1066.91 695.9 1066.15 697.041 1065.65 697.928 cv
1063.82 701.185 1062.65 704.705 1065.15 707.482 cv
1067.65 710.26 1071.93 710.482 1074.7 707.982 cv
1077.48 705.481 1077.03 701.688 1075.2 698.426 cv
1074.1 696.473 1072.62 693.934 1071.07 693.389 cv
1040.88 663.129 li
1040.88 531.481 li
1056.89 516.783 li
1056.89 458.707 li
1061.68 452.648 li
1061.02 389.955 li
1017.87 347.027 li
cp
f
974.365 429.496 mo
976.251 429.219 978.009 430.525 978.285 432.416 cv
978.56 434.305 977.25 436.06 975.363 436.338 cv
973.472 436.615 971.72 435.303 971.443 433.416 cv
971.164 431.525 972.472 429.77 974.365 429.496 cv
cp
881.773 228.633 mo
880.494 227.211 880.611 225.027 882.031 223.75 cv
883.447 222.473 885.636 222.59 886.91 224.01 cv
888.189 225.428 888.072 227.613 886.652 228.893 cv
885.236 230.17 883.048 230.055 881.773 228.633 cv
cp
932.871 286.736 mo
932.871 391.902 li
953.201 409.576 li
968.064 430.156 li
968.197 430.063 li
968.324 431.621 969.066 433.543 969.703 434.791 cv
971.398 438.121 973.675 441.047 977.376 440.512 cv
981.072 439.971 983.626 436.533 983.089 432.838 cv
982.548 429.141 979.148 427.404 975.417 427.123 cv
973.748 426.996 971.697 426.875 970.211 427.227 cv
955.619 407.098 li
936.33 390.326 li
936.33 285.24 li
886.298 238.225 li
886.298 232.898 li
887.287 231.918 888.197 230.586 888.763 229.578 cv
890.593 226.32 891.767 222.803 889.273 220.023 cv
886.771 217.244 882.494 217.021 879.718 219.52 cv
876.939 222.018 877.38 225.809 879.208 229.07 cv
880.189 230.814 881.476 233.027 882.841 233.875 cv
882.841 239.721 li
932.871 286.736 li
cp
f
860.289 101.232 mo
860.689 103.1 859.494 104.938 857.626 105.334 cv
855.761 105.73 853.925 104.537 853.527 102.672 cv
853.13 100.803 854.322 98.9668 856.189 98.5684 cv
858.058 98.1699 859.892 99.3633 860.289 101.232 cv
cp
1012.43 339.443 mo
1010.52 339.449 1008.97 337.91 1008.96 336.002 cv
1008.95 334.09 1010.49 332.537 1012.4 332.529 cv
1014.31 332.523 1015.87 334.063 1015.87 335.975 cv
1015.88 337.883 1014.34 339.44 1012.43 339.443 cv
cp
1090.1 732.469 mo
1111.08 751.566 li
1113.41 749.01 li
1093.55 730.938 li
1093.55 700.805 li
1076.37 682.859 li
1070.93 682.859 li
1045.82 657.09 li
1045.82 533.629 li
1061.03 519.367 li
1061.03 461.848 li
1066.43 456.445 li
1066.43 408.367 li
1081.6 420.504 li
1108.5 420.504 li
1108.5 417.045 li
1082.81 417.045 li
1069.89 406.707 li
1069.89 286.25 li
1006.35 220.553 li
1006.35 133.666 li
962.986 89.8574 li
865.718 89.8574 li
858.855 95.1973 li
857.412 95.5117 855.785 96.2813 854.703 96.9238 cv
851.492 98.8281 848.716 101.295 849.494 104.947 cv
850.273 108.602 853.865 110.936 857.519 110.156 cv
861.173 109.379 862.685 105.867 862.728 102.131 cv
862.746 100.445 862.732 98.377 862.275 96.916 cv
866.906 93.3145 li
961.542 93.3145 li
1002.89 135.086 li
1002.89 221.951 li
1066.43 287.648 li
1066.43 388.232 li
1018.46 340.684 li
1018.91 339.088 1018.34 336.469 1017.79 334.857 cv
1016.58 331.32 1014.74 328.103 1011 328.113 cv
1007.26 328.131 1004.25 331.174 1004.26 334.906 cv
1004.28 338.645 1007.4 340.84 1011.05 341.648 cv
1012.33 341.93 1013.85 342.24 1015.18 342.297 cv
1062.97 389.674 li
1062.97 455.014 li
1057.58 460.416 li
1057.58 517.867 li
1042.36 532.131 li
1042.36 658.494 li
1069.47 686.318 li
1074.89 686.318 li
1090.1 702.191 li
1090.1 732.469 li
cp
f
901.609 101.096 mo
906.863 101.096 911.117 96.8379 911.117 91.5859 cv
911.117 86.334 906.863 82.0781 901.609 82.0781 cv
896.359 82.0781 892.099 86.334 892.099 91.5859 cv
892.099 96.8379 896.359 101.096 901.609 101.096 cv
1 1 1 rgb
f
947.513 116.006 mo
952.765 116.006 957.021 111.75 957.021 106.498 cv
957.021 101.246 952.765 96.9883 947.513 96.9883 cv
942.261 96.9883 938.005 101.246 938.005 106.498 cv
938.005 111.75 942.261 116.006 947.513 116.006 cv
f
1024.5 281.34 mo
1029.76 281.34 1034.01 277.084 1034.01 271.832 cv
1034.01 266.578 1029.76 262.322 1024.5 262.322 cv
1019.25 262.322 1014.99 266.578 1014.99 271.832 cv
1014.99 277.084 1019.25 281.34 1024.5 281.34 cv
f
907.496 123.027 mo
902.246 123.027 897.988 127.283 897.988 132.535 cv
897.988 137.787 902.246 142.045 907.496 142.045 cv
912.748 142.045 917.005 137.787 917.005 132.535 cv
917.005 127.283 912.748 123.027 907.496 123.027 cv
f
869.337 165.113 mo
864.087 165.113 859.828 169.373 859.828 174.623 cv
859.828 179.877 864.087 184.131 869.337 184.131 cv
874.589 184.131 878.845 179.877 878.845 174.623 cv
878.845 169.373 874.589 165.113 869.337 165.113 cv
f
957.572 427.779 mo
962.853 427.779 967.138 423.498 967.138 418.215 cv
967.138 412.934 962.853 408.647 957.572 408.647 cv
952.285 408.647 948.005 412.934 948.005 418.215 cv
948.005 423.498 952.285 427.779 957.572 427.779 cv
cp
f
994.191 395.435 mo
999.474 395.435 1003.76 391.152 1003.76 385.867 cv
1003.76 380.588 999.474 376.303 994.191 376.303 cv
988.908 376.303 984.623 380.588 984.623 385.867 cv
984.623 391.152 988.908 395.435 994.191 395.435 cv
cp
f
957.572 342.818 mo
962.853 342.818 967.138 338.537 967.138 333.254 cv
967.138 327.973 962.853 323.688 957.572 323.688 cv
952.285 323.688 948.005 327.973 948.005 333.254 cv
948.005 338.537 952.285 342.818 957.572 342.818 cv
cp
f
916.312 300.236 mo
921.595 300.236 925.876 295.953 925.876 290.672 cv
925.876 285.389 921.595 281.105 916.312 281.105 cv
911.031 281.105 906.744 285.389 906.744 290.672 cv
906.744 295.953 911.031 300.236 916.312 300.236 cv
cp
f
951.398 278.662 mo
956.683 278.662 960.964 274.379 960.964 269.096 cv
960.964 263.81 956.683 259.529 951.398 259.529 cv
946.117 259.529 941.83 263.81 941.83 269.096 cv
941.83 274.379 946.117 278.662 951.398 278.662 cv
cp
f
922.716 255.182 mo
927.996 255.182 932.281 250.898 932.281 245.613 cv
932.281 240.332 927.996 236.049 922.716 236.049 cv
917.431 236.049 913.15 240.332 913.15 245.613 cv
913.15 250.898 917.431 255.182 922.716 255.182 cv
cp
f
975.664 177.979 mo
980.947 177.979 985.23 173.697 985.23 168.414 cv
985.23 163.131 980.947 158.848 975.664 158.848 cv
970.38 158.848 966.097 163.131 966.097 168.414 cv
966.097 173.697 970.38 177.979 975.664 177.979 cv
cp
f
932.078 168.414 mo
937.365 168.414 941.646 164.131 941.646 158.848 cv
941.646 153.566 937.365 149.281 932.078 149.281 cv
926.798 149.281 922.513 153.566 922.513 158.848 cv
922.513 164.131 926.798 168.414 932.078 168.414 cv
cp
f
1030.08 324.315 mo
1035.75 324.315 1040.34 319.834 1040.34 314.31 cv
1040.34 308.783 1035.75 304.305 1030.08 304.305 cv
1024.42 304.305 1019.83 308.783 1019.83 314.31 cv
1019.83 319.834 1024.42 324.315 1030.08 324.315 cv
cp
f
970.531 208.346 mo
975.816 208.346 980.097 204.063 980.097 198.779 cv
980.097 193.496 975.816 189.215 970.531 189.215 cv
965.248 189.215 960.964 193.496 960.964 198.779 cv
960.964 204.063 965.248 208.346 970.531 208.346 cv
cp
f
801.415 171.107 mo
806.673 171.107 810.925 166.85 810.925 161.598 cv
810.925 156.344 806.673 152.09 801.415 152.09 cv
796.165 152.09 791.91 156.344 791.91 161.598 cv
791.91 166.85 796.165 171.107 801.415 171.107 cv
f
840.902 160.518 mo
846.156 160.518 850.41 156.262 850.41 151.01 cv
850.41 145.76 846.156 141.5 840.902 141.5 cv
835.65 141.5 831.394 145.76 831.394 151.01 cv
831.394 156.262 835.65 160.518 840.902 160.518 cv
f
179.75 961.671 mo
181.616 962.071 182.809 963.907 182.41 965.774 cv
182.013 967.643 180.179 968.833 178.31 968.435 cv
176.443 968.04 175.25 966.203 175.647 964.335 cv
176.044 962.469 177.882 961.275 179.75 961.671 cv
cp
161.548 950.016 mo
173.347 961.562 li
173.203 962.758 173.199 964.087 173.212 965.237 cv
173.253 968.973 174.765 972.481 178.421 973.261 cv
182.074 974.037 185.667 971.704 186.444 968.051 cv
187.222 964.396 184.45 961.935 181.235 960.026 cv
179.55 959.024 176.556 957.722 174.982 958.322 cv
163.968 947.543 li
161.548 950.016 li
cp
0 .862745 1 rgb
f
241.53 841.396 mo
241.53 839.485 243.075 837.938 244.987 837.938 cv
246.896 837.938 248.444 839.485 248.444 841.396 cv
248.444 843.305 246.896 844.854 244.987 844.854 cv
243.075 844.854 241.53 843.305 241.53 841.396 cv
cp
251.102 843.49 mo
250.958 842.339 250.66 841.16 250.362 840.281 cv
249.167 836.744 247.337 833.519 243.599 833.519 cv
239.864 833.519 236.836 836.548 236.836 840.281 cv
236.836 844.021 239.954 846.232 243.599 847.049 cv
245.81 847.545 248.719 848.136 250.144 847.313 cv
250.575 847.711 li
306.694 903.538 li
310.925 903.538 li
318.36 911.703 li
318.644 990.134 li
300.203 1008.57 li
300.203 1095.59 li
325.744 1120.86 li
328.176 1118.4 li
303.661 1094.15 li
303.661 1010.01 li
322.106 991.563 li
321.811 910.358 li
312.454 900.08 li
308.121 900.08 li
252.97 845.216 li
251.102 843.49 li
cp
f
168.222 603.417 mo
170.129 603.451 171.651 605.023 171.618 606.935 cv
171.583 608.843 170.009 610.365 168.1 610.332 cv
166.19 610.298 164.669 608.725 164.702 606.815 cv
164.736 604.906 166.311 603.387 168.222 603.417 cv
cp
297.775 1097.88 mo
297.775 1007.38 li
316.057 987.776 li
315.759 924.994 li
279.011 889.134 li
257.41 889.134 li
233.068 864.787 li
233.068 825.313 li
225.139 817.385 li
207.837 817.385 li
196.474 807.109 li
196.761 688.165 li
162.757 653.583 li
162.757 615.836 li
164.32 612.997 li
165.872 613.107 167.859 612.69 169.177 612.271 cv
172.735 611.136 175.994 609.363 176.059 605.625 cv
176.125 601.891 173.15 598.807 169.413 598.743 cv
165.679 598.679 163.413 601.759 162.531 605.388 cv
162.147 606.977 161.708 608.924 161.785 610.434 cv
159.3 614.947 li
159.3 654.999 li
193.3 689.577 li
193.013 808.644 li
206.503 820.844 li
223.708 820.844 li
229.61 826.745 li
229.61 866.219 li
255.978 892.591 li
277.603 892.591 li
312.308 926.459 li
312.592 986.424 li
294.318 1006.01 li
294.318 1099.35 li
316.747 1120.88 li
319.142 1118.39 li
297.775 1097.88 li
cp
f
161.294 578.628 mo
161.327 576.719 162.902 575.199 164.811 575.232 cv
166.72 575.265 168.241 576.841 168.209 578.749 cv
168.174 580.661 166.6 582.181 164.69 582.146 cv
162.78 582.112 161.262 580.539 161.294 578.628 cv
cp
291.375 1099.63 mo
291.375 1003.06 li
308.847 984.619 li
308.847 929.039 li
273.829 894.319 li
253.091 894.319 li
226.151 867.1 li
226.151 830.886 li
220.056 823.435 li
203.84 823.435 li
190.419 810.872 li
190.419 691.339 li
150.652 650.417 li
150.368 604.433 li
149.345 598.665 li
162.278 585.182 li
161.902 584.821 li
163.245 584.752 164.72 584.42 165.769 584.085 cv
169.329 582.95 172.584 581.178 172.651 577.44 cv
172.716 573.704 169.741 570.623 166.005 570.559 cv
162.27 570.494 160.005 573.574 159.125 577.203 cv
158.579 579.444 157.925 582.406 158.794 583.82 cv
145.628 597.548 li
146.91 604.606 li
147.203 651.827 li
186.962 692.744 li
186.962 812.371 li
202.474 826.894 li
218.417 826.894 li
222.694 832.12 li
222.694 868.523 li
251.65 897.777 li
272.405 897.777 li
305.39 930.481 li
305.39 983.241 li
287.917 1001.69 li
287.917 1101.06 li
309 1122.31 li
311.454 1119.87 li
291.375 1099.63 li
cp
f
191.243 837.456 mo
191.243 835.548 192.792 833.999 194.701 833.999 cv
196.612 833.999 198.159 835.548 198.159 837.456 cv
198.159 839.366 196.612 840.913 194.701 840.913 cv
192.792 840.913 191.243 839.366 191.243 837.456 cv
cp
279.458 1107.37 mo
279.743 996.771 li
297.775 979.484 li
297.775 934.815 li
269.231 905.845 li
246.166 905.845 li
214.625 874.863 li
214.625 856.494 li
200.91 840.969 li
200.942 839.453 200.501 837.594 200.078 836.345 cv
198.882 832.806 197.052 829.582 193.315 829.582 cv
189.579 829.582 186.55 832.61 186.55 836.345 cv
186.55 840.082 189.67 842.295 193.315 843.112 cv
195.042 843.499 197.193 843.941 198.736 843.731 cv
211.167 857.802 li
211.167 876.315 li
244.751 909.302 li
267.784 909.302 li
294.318 936.231 li
294.318 978.009 li
276.289 995.293 li
275.997 1108.88 li
290.688 1122.36 li
293.027 1119.82 li
279.458 1107.37 li
cp
f
171.651 722.486 mo
171.651 720.578 173.198 719.029 175.11 719.029 cv
177.019 719.029 178.568 720.578 178.568 722.486 cv
178.568 724.398 177.019 725.943 175.11 725.943 cv
173.198 725.943 171.651 724.398 171.651 722.486 cv
cp
181.201 845.06 mo
185.534 848.215 li
194.27 848.215 li
205.44 860.411 li
205.44 878.61 li
243.593 916.506 li
264.866 916.506 li
288.779 940.558 li
288.779 975.11 li
269.661 992.977 li
269.661 1111.16 li
281.134 1122.33 li
283.546 1119.85 li
273.118 1109.7 li
273.118 994.481 li
292.237 976.613 li
292.237 939.132 li
266.304 913.047 li
245.017 913.047 li
208.898 877.173 li
208.898 859.067 li
195.792 844.757 li
186.661 844.757 li
184.659 843.301 li
184.659 728.661 li
181.314 726.017 li
181.351 724.497 180.91 722.629 180.485 721.374 cv
179.29 717.836 177.458 714.611 173.722 714.611 cv
169.987 714.611 166.956 717.641 166.956 721.374 cv
166.956 725.112 170.074 727.324 173.722 728.142 cv
175.47 728.533 177.655 728.985 179.203 728.754 cv
181.201 730.334 li
181.201 845.06 li
cp
f
96.1592 613.76 mo
96.1592 611.852 97.708 610.302 99.6162 610.302 cv
101.527 610.302 103.074 611.852 103.074 613.76 cv
103.074 614.576 102.78 615.316 102.308 615.906 cv
101.745 616.466 li
101.157 616.93 100.424 617.217 99.6162 617.217 cv
97.708 617.217 96.1592 615.671 96.1592 613.76 cv
cp
105.734 615.865 mo
105.589 614.711 105.292 613.527 104.993 612.648 cv
103.797 609.109 101.967 605.885 98.2295 605.885 cv
94.4932 605.885 91.4658 608.913 91.4658 612.648 cv
91.4658 616.386 94.585 618.595 98.2295 619.416 cv
100.401 619.902 103.246 620.486 104.701 619.731 cv
162.184 677.481 li
162.184 729.027 li
174.573 742.283 li
174.573 847.201 li
181.637 854.265 li
189.417 854.265 li
198.776 863.626 li
198.776 881.204 li
239.844 921.979 li
261.75 921.979 li
282.341 942.297 li
282.341 971.991 li
263.856 991.009 li
263.856 1114.04 li
272.497 1122.34 li
274.892 1119.84 li
267.313 1112.57 li
267.313 992.413 li
285.798 973.396 li
285.798 940.852 li
263.167 918.521 li
241.269 918.521 li
202.235 879.766 li
202.235 862.193 li
190.849 850.808 li
183.069 850.808 li
178.03 845.769 li
178.03 740.919 li
165.642 727.662 li
165.642 676.053 li
105.734 615.865 li
cp
f
105.235 642.968 mo
105.235 641.057 106.782 639.511 108.693 639.511 cv
110.604 639.511 112.151 641.057 112.151 642.968 cv
112.151 644.879 110.604 646.426 108.693 646.426 cv
106.782 646.426 105.235 644.879 105.235 642.968 cv
cp
261.017 1114.29 mo
261.017 988.074 li
279.458 968.483 li
279.458 945.173 li
258.268 924.285 li
237.926 924.285 li
196.472 883.794 li
196.472 873.425 li
171.259 848.643 li
171.259 742.078 li
159.589 729.401 li
159.589 690.171 li
114.856 645.441 li
114.737 644.176 114.4 642.83 114.07 641.856 cv
112.875 638.317 111.043 635.09 107.308 635.09 cv
103.571 635.09 100.542 638.118 100.542 641.856 cv
100.542 645.592 103.661 647.804 107.308 648.62 cv
109.372 649.087 112.054 649.639 113.561 649.035 cv
156.13 691.602 li
156.13 730.752 li
167.8 743.428 li
167.8 850.092 li
193.015 874.873 li
193.015 885.25 li
236.519 927.742 li
256.85 927.742 li
276.001 946.618 li
276.001 967.111 li
257.559 986.702 li
257.559 1115.79 li
266.179 1123.8 li
268.532 1121.27 li
261.017 1114.29 li
cp
f
156.504 748.805 mo
156.504 746.893 158.05 745.346 159.962 745.346 cv
161.871 745.346 163.419 746.893 163.419 748.805 cv
163.419 750.716 161.871 752.262 159.962 752.262 cv
158.05 752.262 156.504 750.716 156.504 748.805 cv
cp
166.216 862.188 mo
166.216 751.974 li
166.157 751.974 li
166.126 750.525 165.729 748.85 165.337 747.693 cv
164.142 744.154 162.31 740.927 158.573 740.927 cv
154.839 740.927 151.81 743.958 151.81 747.693 cv
151.81 751.428 154.929 753.64 158.573 754.457 cv
159.875 754.75 161.415 755.072 162.759 755.127 cv
162.759 863.633 li
252.372 952.096 li
252.372 1119.63 li
255.829 1119.63 li
255.829 950.65 li
166.216 862.188 li
cp
f
149.321 769.455 mo
149.321 767.545 150.87 765.998 152.779 765.998 cv
154.69 765.998 156.237 767.545 156.237 769.455 cv
156.237 771.367 154.69 772.914 152.779 772.914 cv
150.87 772.914 149.321 771.367 149.321 769.455 cv
cp
248.565 1122.53 mo
248.565 953.247 li
161.028 865.65 li
161.028 776.466 li
158.927 773.664 li
159.154 772.06 158.647 769.793 158.157 768.346 cv
156.96 764.806 155.13 761.578 151.394 761.578 cv
147.657 761.578 144.628 764.607 144.628 768.346 cv
144.628 772.08 147.747 774.291 151.394 775.108 cv
152.897 775.445 154.731 775.835 156.2 775.789 cv
157.571 777.617 li
157.571 867.083 li
245.106 954.679 li
245.106 1122.53 li
248.565 1122.53 li
cp
f
142.142 785.36 mo
142.142 783.449 143.688 781.902 145.599 781.902 cv
147.509 781.902 149.057 783.449 149.057 785.36 cv
149.057 787.271 147.509 788.817 145.599 788.817 cv
143.688 788.817 142.142 787.271 142.142 785.36 cv
cp
150.368 870.258 mo
239.118 958.431 li
239.118 1121.09 li
242.576 1121.09 li
242.576 956.991 li
153.826 868.818 li
153.826 792.134 li
151.8 788.662 li
151.792 787.187 151.38 785.44 150.976 784.249 cv
149.779 780.708 147.949 777.481 144.213 777.481 cv
140.477 777.481 137.448 780.512 137.448 784.249 cv
137.448 787.984 140.565 790.195 144.213 791.013 cv
145.903 791.393 148 791.822 149.535 791.643 cv
150.368 793.07 li
150.368 870.258 li
cp
f
137.327 804.668 mo
137.327 802.761 138.875 801.21 140.786 801.21 cv
142.694 801.21 144.243 802.761 144.243 804.668 cv
144.243 806.58 142.694 808.127 140.786 808.127 cv
138.875 808.127 137.327 806.58 137.327 804.668 cv
cp
236.525 1122.53 mo
236.525 958.146 li
149.217 871.125 li
149.217 813.494 li
146.893 809.107 li
147.211 807.496 146.677 805.075 146.161 803.558 cv
144.966 800.019 143.134 796.793 139.397 796.793 cv
135.661 796.793 132.632 799.822 132.632 803.558 cv
132.632 807.296 135.75 809.504 139.397 810.324 cv
140.829 810.646 142.553 811.004 143.984 811 cv
145.759 814.352 li
145.759 872.56 li
233.068 959.582 li
233.068 1122.53 li
236.525 1122.53 li
cp
f
131.095 821.61 mo
131.095 819.697 132.641 818.15 134.552 818.15 cv
136.464 818.15 138.009 819.697 138.009 821.61 cv
138.009 823.521 136.464 825.067 134.552 825.067 cv
132.641 825.067 131.095 823.521 131.095 821.61 cv
cp
230.575 1121.09 mo
230.575 961.321 li
142.589 872.57 li
142.589 829.869 li
140.542 826.459 li
141.068 824.883 140.49 822.156 139.928 820.498 cv
138.731 816.96 136.901 813.731 133.164 813.731 cv
129.429 813.731 126.401 816.76 126.401 820.498 cv
126.401 824.232 129.519 826.445 133.164 827.263 cv
134.478 827.559 136.038 827.884 137.394 827.934 cv
139.13 830.827 li
139.13 873.996 li
227.117 962.746 li
227.117 1121.09 li
230.575 1121.09 li
cp
f
124.41 842.354 mo
124.41 840.444 125.958 838.898 127.868 838.898 cv
129.779 838.898 131.325 840.444 131.325 842.354 cv
131.325 844.267 129.779 845.815 127.868 845.815 cv
125.958 845.815 124.41 844.267 124.41 842.354 cv
cp
135.96 849.923 mo
133.849 847.233 li
134.393 845.662 133.81 842.912 133.245 841.245 cv
132.048 837.706 130.218 834.477 126.481 834.477 cv
122.745 834.477 119.716 837.507 119.716 841.245 cv
119.716 844.979 122.835 847.191 126.481 848.008 cv
127.755 848.295 129.26 848.611 130.584 848.676 cv
132.502 851.118 li
132.502 878.317 li
219.811 966.491 li
219.811 1121.09 li
223.269 1121.09 li
223.269 965.068 li
135.96 876.896 li
135.96 849.923 li
cp
f
105.235 722.486 mo
105.235 720.578 106.782 719.029 108.693 719.029 cv
110.604 719.029 112.151 720.578 112.151 722.486 cv
112.151 724.398 110.604 725.943 108.693 725.943 cv
106.782 725.943 105.235 724.398 105.235 722.486 cv
cp
114.842 724.844 mo
114.714 723.613 114.39 722.319 114.07 721.374 cv
112.875 717.836 111.043 714.611 107.308 714.611 cv
103.571 714.611 100.542 717.641 100.542 721.374 cv
100.542 725.112 103.661 727.324 107.308 728.142 cv
109.183 728.563 111.563 729.054 113.117 728.691 cv
114.061 730.267 li
114.061 848.944 li
126.451 861.046 li
126.451 881.773 li
214.05 970.81 li
214.05 1121.09 li
217.507 1121.09 li
217.507 969.394 li
129.909 880.357 li
129.909 859.59 li
117.519 847.488 li
117.519 729.307 li
114.842 724.844 li
cp
f
192.767 1072.86 mo
191.417 1071.51 191.417 1069.32 192.767 1067.97 cv
194.116 1066.62 196.306 1066.62 197.655 1067.97 cv
199.005 1069.32 199.005 1071.51 197.655 1072.86 cv
196.306 1074.21 194.116 1074.21 192.767 1072.86 cv
cp
200.188 1067.4 mo
199.221 1065.88 197.981 1063.98 196.712 1063.05 cv
196.471 1053.91 li
193.015 1054 li
193.267 1063.58 li
192.186 1064.63 191.198 1066.23 190.622 1067.4 cv
188.966 1070.75 187.979 1074.33 190.622 1076.97 cv
193.263 1079.61 197.546 1079.61 200.188 1076.97 cv
202.829 1074.33 202.187 1070.56 200.188 1067.4 cv
cp
f
218.788 838.227 mo
218.788 840.137 217.24 841.684 215.329 841.684 cv
213.42 841.684 211.871 840.137 211.871 838.227 cv
211.871 836.315 213.42 834.769 215.329 834.769 cv
217.24 834.769 218.788 836.315 218.788 838.227 cv
cp
207.178 837.115 mo
207.178 840.85 210.298 843.062 213.943 843.879 cv
215.228 844.168 216.75 844.486 218.083 844.547 cv
218.083 871.966 li
248.571 903.538 li
271.25 903.538 li
300.78 933.071 li
300.78 981.191 li
281.763 1000.22 li
281.763 1105.7 li
297.864 1120.89 li
300.238 1118.38 li
285.22 1104.21 li
285.22 1001.65 li
304.238 982.624 li
304.238 931.639 li
272.681 900.08 li
250.038 900.08 li
221.542 870.568 li
221.542 841.299 li
221.525 841.299 li
221.476 839.873 221.09 838.246 220.708 837.115 cv
219.511 833.576 217.68 830.349 213.943 830.349 cv
210.208 830.349 207.178 833.377 207.178 837.115 cv
cp
f
94.4434 761.973 mo
96.3526 761.973 97.9014 763.523 97.9014 765.432 cv
97.9014 767.342 96.3526 768.889 94.4434 768.889 cv
92.5342 768.889 90.9854 767.342 90.9854 765.432 cv
90.9854 763.523 92.5342 761.973 94.4434 761.973 cv
cp
93.8916 771.952 mo
98.0918 771.952 101.497 768.547 101.497 764.347 cv
101.497 760.146 98.0918 756.743 93.8916 756.743 cv
89.6934 756.743 86.2881 760.146 86.2881 764.347 cv
86.2881 768.547 89.6934 771.952 93.8916 771.952 cv
cp
f
262.327 873.506 mo
264.237 873.506 265.788 875.053 265.788 876.964 cv
265.788 878.875 264.237 880.421 262.327 880.421 cv
260.419 880.421 258.87 878.875 258.87 876.964 cv
258.87 875.053 260.419 873.506 262.327 873.506 cv
cp
261.776 883.481 mo
265.978 883.481 269.382 880.076 269.382 875.876 cv
269.382 871.678 265.978 868.273 261.776 868.273 cv
257.577 868.273 254.173 871.678 254.173 875.876 cv
254.173 880.076 257.577 883.481 261.776 883.481 cv
cp
f
265.417 959.659 mo
267.325 959.659 268.875 961.209 268.875 963.116 cv
268.875 965.028 267.325 966.574 265.417 966.574 cv
263.507 966.574 261.958 965.028 261.958 963.116 cv
261.958 961.209 263.507 959.659 265.417 959.659 cv
cp
264.864 969.638 mo
269.065 969.638 272.47 966.233 272.47 962.033 cv
272.47 957.831 269.065 954.428 264.864 954.428 cv
260.666 954.428 257.262 957.831 257.262 962.033 cv
257.262 966.233 260.666 969.638 264.864 969.638 cv
cp
f
187.339 1006.32 mo
187.339 1004.41 188.886 1002.86 190.796 1002.86 cv
192.705 1002.86 194.255 1004.41 194.255 1006.32 cv
194.255 1008.23 192.705 1009.78 190.796 1009.78 cv
188.886 1009.78 187.339 1008.23 187.339 1006.32 cv
cp
197.851 1005.24 mo
197.851 1001.04 194.444 997.633 190.243 997.633 cv
186.045 997.633 182.64 1001.04 182.64 1005.24 cv
182.64 1009.44 186.045 1012.84 190.243 1012.84 cv
194.444 1012.84 197.851 1009.44 197.851 1005.24 cv
cp
f
197.159 668.627 mo
191.908 668.627 187.651 664.373 187.651 659.119 cv
187.651 653.868 191.908 649.609 197.159 649.609 cv
202.413 649.609 206.668 653.868 206.668 659.119 cv
206.668 664.373 202.413 668.627 197.159 668.627 cv
1 1 1 rgb
f
175.7 644.602 mo
170.446 644.602 166.193 640.344 166.193 635.094 cv
166.193 629.839 170.446 625.585 175.7 625.585 cv
180.95 625.585 185.209 629.839 185.209 635.094 cv
185.209 640.344 180.95 644.602 175.7 644.602 cv
f
149.057 605.885 mo
143.804 605.885 139.548 601.627 139.548 596.376 cv
139.548 591.122 143.804 586.867 149.057 586.867 cv
154.31 586.867 158.565 591.122 158.565 596.376 cv
158.565 601.627 154.31 605.885 149.057 605.885 cv
f
321.813 913.338 mo
316.563 913.338 312.306 909.079 312.306 903.829 cv
312.306 898.575 316.563 894.319 321.813 894.319 cv
327.068 894.319 331.322 898.575 331.322 903.829 cv
331.322 909.079 327.068 913.338 321.813 913.338 cv
f
157.53 954.82 mo
152.278 954.82 148.022 950.565 148.022 945.31 cv
148.022 940.06 152.278 935.803 157.53 935.803 cv
162.782 935.803 167.039 940.06 167.039 945.31 cv
167.039 950.565 162.782 954.82 157.53 954.82 cv
f
194.887 1054.65 mo
189.634 1054.65 185.378 1050.39 185.378 1045.14 cv
185.378 1039.89 189.634 1035.63 194.887 1035.63 cv
200.14 1035.63 204.395 1039.89 204.395 1045.14 cv
204.395 1050.39 200.14 1054.65 194.887 1054.65 cv
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.1.0
%%For: (user) ()
%%Title: (plata_7.eps)
%%CreationDate: 5/12/2016 1:13 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj2NJZL7ZRcdVn[DJroJY'g=e,7rM[fO2MlJqYI87[pf-\*([)m5NmXXK!fp6.+.&8W7QEnUVglaG`8,U[HuEDtTTb>4ZjL
%p"+5%ae\rT)+KYd0n0#Oh7M!JqpfSqOc_R2_[1pnXVllh0FXe+YuU3NWm0C,VcBmC],RkuX4(A"D>YqBF"^1aoTrJD6a^6=rL$ln
%QceL@Vm,P0D:Rq%X]D>slK,[k_*ImR42:#X0,agT1Yb4KD@l$)g?[.LBPa8as67*Y,sh@A\PN+Qdos64.J7GXk*L?M/SobhoKflj
%P!@<$b;kdcS"i41MUdng^YY/7F%InYYrA;m&.?&)2BZ;njj?ICs(A;1j>SlN!RZD0_cjC)5N-6*BBL8&B5au03@nn&)*,a65?k.?
%H!pb>k'3$@_8C#_>qblNHuPZcjPAUSr#bm(W%jhD2ma#En'F*)bFjL4"ehQ4/Ge05o;8W.-g+b5UK7>73VTUYW`2(F3");661*QO
%Cb[fH5OA.1e]sXrX[bJ90eAQqGhK)rldS*9@&mVne(##kIoVEE;WkF@,N<Oiq`'Jp>S,6PWo)GXrN(V?9Jsq0]@oA`^#c(CRBGuk
%AhIqrA]YHPhPU<C9+C6XB3@2Ubi[CS0r)kdK[gbR&#2Sbpc,E>U<D@fmBkGL[R/]a0_?($54-iL$,uaA/s(R-k^9'%09#n.(/EW2
%lW'Dd-DkpmnPZ-1,QI<7;f=QE)m'<>Ul/U3M<^SK&G=VRqJ5X0s,Dcs[hUM(3-s,L%^dVfrp='rjDVl^?G0-aI+i<-gY9u:eo1SW
%.o]]me_Jno\_$,n)-:jja5?-Jq:lt]AaZd$.ao7,He]rTWjV#n(m+7R<-.V3lH?q3s#3T#@Tnp:aT)CuD#R;6\(]QOdOr_!HhC:C
%eB.5&iW47<J'_OpZqnf*BNXZ8cSQs\9:NAD8)Z?.j'U5"qpQ9YFaO'nojDS(bu<nNcn:StHY`:8rBe.tY7[BJPWQ;59`)D"CL1*L
%_b-KVT<6C!cFm+-,m$3PTEjZ1?MSDV=9\Y!#2Um'c:G3>S!@m(V=JDB>W>'$AJoK_6p#SG.CIK:jkP0[h`].'[T`?KoHA^FB@?h"
%ImVJ?B_8<qk&+,e\N$X)0K:54:$FIMZc0V4bs[&OVHKXQfrW[odZ*2K9A:Ha=X'<lW?#Uq`e0nCj&WkED8`48O?MTn>.Is&pt>%7
%1PrVo1,!Ot*i8lNmumf[CR9MG/1g8Hm>8K&=0']I+7r0bG4\uSBns#ZWAR7*jpq6q?8Z0\<hg-$2g94AC0,\MUQu/,OR<_F=C$\7
%/R>>]9geo)nFe;&\K7iML[i^$AbtfmbFM^F)"Gqk=rDKYWUo_=5HX#/rbBrPoZ&937DbQQLSWlQ2(Wi1V85(OZWb&jWA_;@Q$^#8
%W\+2pros@ag@WEGdkL48k8k\kTZtr-UH_BD^1qdkXdu'V7^Qrs)UaRF&2d^_BQX4V"_GJ=[2To;=]"oE!ucY`2@;Z)T^[#M.(%VB
%f)4X10fi`dB:gRSDQ24I_QpCo<2d:P8k8$okg_.#YX5,(Cb))6RFphLNle8;QE+*UL%Mrs2r_Zo_hEBR]c*0r;Ra6fWW))pk#lqL
%T`)B^Z`_<Lfl-5CH_is,=kHSi4>*.mXb0r>N6&%slZ,)*H*Z@oC-=31^g:(eeu<iiodhF[e1dZ%)7=)JZ8Gu@nZ.FH#n:arQgahT
%+%iXqMVD%'+0EOO?#V^)6DN)6G"Ui+A\]U+3\H'q>5_4,qG]ck=cOoZ$&tK_fE^`J=-eDCIaKXto"',J%u\u%grdj+Rm;(-Y1t:r
%0QZ>&ad$pZY1uUH7(.LA<NF]a3R1k6(O\o(\I906oAsSugru+Sq/S8uDW]-u?sh3i=h\,fFJd!C>I&-s2jXu1$2<W(doimR;6:q1
%Pq&n#B3//sJmnEBT2dP.l4.o_Q"'EI)CP,g17Imuj21,lhB/SnVV#X4>3^=D[8M'o1j5("2eO8B8f!7cR;<DFP!q6.`i,B4Z,adU
%YL^fe\(\HI)lB"SG8[lhjRP?*@:\tpq,PP/B;>EkPb.\RcOq0rmD`aO)];Id=3LPgWO)D%]@Eu@ZV]Js/n77&4+8-NB"(jQ(4JiA
%ET*6-:T)t9S<V1HK5rC[7AcO"AGUe/"peeL5Dl99$Nbb)V!4%X(`?l0UjL"VOU7!RpP6kic\0<Q1SF:,Z.g+BX]i'?P:aYZq!45c
%TQJ)3Z5][hkdb;1@!4=[Z&3+i,0)!jY'8&DBbDP@=u[U8>jI/r7cP\p/3&RqJ>@.'-JF#2\$P"#:Gr\c<64kP297WXm_inY;Q&)-
%CK,X`mZaVA/,mE_nhJ+TH<b,kVB#W2c(?iKHC[Uq[,c>AXEI@>fZC,"G-WpXbrh%o\r'XVcRd7P-p$Kbb49O.i%jP*btRaeiBb`g
%R7A28X]Bk`;m$$\_fb$7cXSa%)4ktp8sNREb6^ZJa*"nW)CkI:8Did2Umbl1iU=9ePD[OJ/O+]P^"M\XcVW^WK9DZg2e48T-=2Ye
%"QB$3SmY8B/i2JZ?h,7U5X'"]LN&I&hAP`cVMDq,n4M_B1&)Gq_;;t_nX1e@dWsZi@PLXBli%='Xg?XX$Fbk:h1(s6H^PekP6%(c
%;*7c`TO:`JMp<nWZeNNjet.So-9m(B7]=Vm$tM4YdOG>Sf9'+o\^\]>q6Y-BC,W-cK5-rA/X#3Jl9^hWiO>H<L@G'7?0j=YD,[NY
%g\"ITMGMX4/@DBRjYTRd>_];sWUP"mDaWV=r+MsV]Gb5X0oJI=24S?:3:T$Z6VM?CFOV-7%/q^o-XSF:9LqjcI*6UIPKk1O*qrE@
%]oNSaO6PX"%*75roTYPuBf[X>M7+rQ8G+]@';MqL*c\9QAs+48h7-;'+<<;7ilPO^#$3!-d!f4j2I"E7UfT%4qi1S$(\T<%[)V,m
%bKW;,Pq82SUt*!%kZ$5:b&BV28dukkb]5gcdg=UL-_49_MlbrN@jA8f*agLVs48/2%]0#oV4SWmKa`ZAWKY`*OI"onWEs@@9,Ses
%PY:[)4tE-(VkiQZ4c<4Ef#T+h(OssBDEqX=V-oUG1(b""q'K[IA3jg2_ABOPPY$bYAtl@ukOfemdD.;Unn,E\$Fbl574I,i>a-e\
%9T/2(nm%CfVWF''U1>IJaj3Dd&^%G-PB'O++>_20RH:1@2mgg\(M1I2SLY=LDItLn-Aa_P3pJ'RU1?Q%=tJrQcUGrt(6d#a2`2DJ
%I$8SJZ61qT>lRUVdS+.G9r>80L=@('=\a22]M'2LZ]gcjiY9j_&AN<%j'9E[WaAl\4t:SIR%o-j68X\u.ndg!<p=8`"j:f=a-Wu4
%AS*:@Xs;Q2R9[q>"Z*\IPA;tb2AL7LZU9hB\TY='[42Z/-Il^+m=/??c&B%LAZX.Pg.\OF:J3SD7d+LopY1n?,oO/L5J<5NWXHT[
%)dT(qr#$GbfRat[c.FF51Tlj]1F2GrdefGQpp@KiZGulV4tX-Cql<oXX-\8VNT&.BUsX4\g1ZHs].e*@>ADDToq^.YrSc"#>$&=>
%l4l,*d*UL,$agpQQf]d.3%ITW%'p6g8n2HV_HBm-0k#2,/"q(>W.f7L8q4;_b':EEB<G?+c?/;X,=hc<TqCTLY0\82^ZJ\?pcOZ(
%<.()je*(Cle*k'0k`.#T2q*Q%V^@6b)`n"WC&HG"75=<cb!uf=BtZsXa>&l2T?F?+]@A4ZFgjS-:Aot=Cn-)b,Jn=JV*KcChta3Q
%P("6]1q!BN"rp+g.A_!&`b7DG^gU1l;[NbVZ>ms[7*`iO6`t,@:V9FRF_\Ur7^\RO`D;b:]Ui#h.NS>CMD*fl,rpr$&_B/"WC[;_
%^%@fMs3C%^-hI=]%#"p6NL"5O^U*gpg&:C+rc`Pc47%W4pV/Z`9,Q]q*cV9u)(QRVak<6RKLWBs4C0eTo:=_5cL-(`D<>@_EbZsL
%rGHbQeKbUWbX,eUHAmd7ITGe-et6$==Ke9eor,]))$MuU?oZeICfY:Oa`*?HP'sA'fW9f9U:fAD+gX'W>3Y/_0)Hu$djk(*5tWR^
%7^EA'*7gKGaCZ$iJ&^s%TR1<[Z:PLhbs'uG$^8iPAH.IXZ?"Zu<gtUM-!")<GL]Gm.t?&PokJEA;m!..3i1u[HgOu6C`FaF1.3q!
%Fo!\"]Lcm#2K9dK^o?tp>,0soos)>t"H6NE3D<AQE?J]qVT)_Z;i9RJlmS?9.`pPkih!W[A[4ujRt%ifm`?/"]%CS19TXf1U=EQp
%.X&)?pl(b@DX<@=M9Wn-'-08opgC1A5:0+'c2oZ*^rn:ungi(W"^YelQiB*IZbXb+"C>&p705+l$H)D#=l<kC4j[?ijZ7sZnJN-%
%-dQF7!_<R=H(+"(dS5'dHfN7B>g#R."WYN2RARUK7$[lTZXOT3J]"9"S&g3!U_fNASqo<#>4KTJReVT/nedRmhV0R27c%RuPiDlS
%[$bs)$mT?3Q/bT;`,n_WA>UIs?_L/QDOa^7\lfc8Y&UVNl:\JK9B.5Fs-Yo:#A9l*ld+6SC2Vb+r!ZT'B!:bQ`[$rJkNj'M'NrQI
%V,D1f0%.mo_^I[0_Vq[iB9.n9?EKETDRB^ekYs&M7ImhUr%@%)^ZYdtS^Y9?cG66HbYA%<p<5n9E?:Q_)gAK_d'IJqbb;Q*\29fA
%A3oD)=s[)cRVFc6A<onJ"#="qWA0i>foX9ae;hqRrEkImb_e"0YW.@rMdoGC:G_Z`N8OoY0s]^kMdoG^V`S`X5Ds$qiY[l&1:&s[
%/<2G2EK'o<&$8pUP]:iprNh\_WSB#S?aXWOo$+#gQ2;.(58KL+s)9mBGVWn&)=#fnQb(_L:A%,lg+6n,!s[J?$b%[PQ(%Zk/eR4f
%R@[=BNQ6`PZZXWqoua&hTrA:ug)\c0R;bg,*ZIa`Lh'4SRHH-BgiTec.l<KI:rcmU.#WbN($?Hhf`W#PRFUF;I6;#Cc'-8b3pF!i
%=i;C@)]pCE5'k^oA[0uoj25>,.k(k`UhV380DKUZZ9c5Tn8m7N*;Acp(T08A33.K`!giFA?d%LW9M)2VHB5^NJ^Q)(N16+%PmO!1
%8bgG[b(Q[>AO0ajlnoY^$&KgG2!Y&>s%m7*GEl;hD:](`hRL+ip^Gh9ZUhaGD'C1o@'?&d[57F9/nfd'0DAi:R[H)noB'ZAgru7W
%H#jd!pg<[U178#!h4)$-l![%F6YV6'FltMf2KS%nmbH$WS%3SBB[#8BR6,V6gc>+@\T=1cR1a^]ah.Wa>rEs?0&:'JFRND8b%[c<
%71J*qJ*s1^Zlk"=1FpO#r[/L"+4*g*BAfZ$Y/ID*k,b`('\8Nd,B>_5Gl9E%1<'udY*1"Vh^MnrY*[;o.ldX<g8/hlpN&>nBXcan
%=jI_W<pdmqG8WWc4uI_P&YEcGUFd&6<-$CDWtR8sE_\+%bcHFO9!p8fHJH#5Z>I1fQ^=EBL\eaI7]XYgo?Q>A%/(MS_>SYFl'Zm(
%I2I@r1+AqB37qYEpgsHAej6j2ac&m#*Z%ip1.f(Uc:P!?c&,Q5q94EgO3kuG^"o[89A.'&I)?'C?A;WNeN3Yp0g)PF*Lhkl1Ph7C
%^MAgXVYe0=jgaegeMDrK4MT$d.b<6AfZA<K]_Eun_EqX#WV5S`jtcFEoL7EW^Y5f%23U1IZ-*7h4OIWA@BX#(1,E$FVVV9FBm6\_
%7K9AMb=NAI1S\VEN1u_7oT(Zd5fnYX2Mu)QaqGi.^R!H=l-NS;q\OPhkG-bpLOhqT,-MEpaSDc]r=faeAE,AD3(sYaHa7Y4U.W_O
%W(F;84XXSeQ9)G1=ehGM1Bg^R*H,*oEkU&Y/(I,/AS0))Jd'k%3DP<k1?lq9$P&B'*3\UlbS9.!/!QH>S:99RN=k7)`s*pAkkR*A
%@sZG\Q`adI.H1Q_n@;\/'u.ioAnU"IS$nJJ<u17m@[h5W$PPBi1gGbj%9"Ffc((L,)tm2=\Je]O0ai=s%B"c`-=1CLV;C$$17G(B
%9(6nnQ^@6rA;c;6AKBUV&g+mf7GKkJB^0AD/7l'--b`-kdS6['n`uoC@mOc%^[rRjSD6?J74/#ZnP$c)ac/ru]8$8EnKJ!8$)"fG
%)d*Vp\s!E&G;^+1C1`dX*`&UqXWLMsf7_Vm78n,$h_]o_rhS9$Wcc;us-U/,mZig=SF0?E-`pX.M[N#LD:\2dWqDaUa]?/ZhOdCp
%Eg);1n)oYb9dd9F1GTn.R@-!@R&uE,3J:ZXe.F\,Pa^El/72;B5aoH2?N)M@1"h<E<7oSbFlTm*B;(ApVo's%KmJ10iVZu-SY]Hf
%RM<qP["<(B"R0f4gGFpKS!EbY8.9P?3dT=kma3FfU1R!5f;kgWVZ)q>rq3;9Igb=UHhBT$]?;:.T`l/\XlF/6^!lGAj^+7AV:00,
%\(dn/)R'!I:B%h%Wn2$aU<loh_cEi;OT+X6c\DAniI!8](.:]hQh(S])mMS70PZ=5S2t1ar;R4Ys/5hic`]Qt^D/fC"&oEl&jO*D
%[f1+6Dd^_u:IG^>&o1j1FC#QI0[Cfi)XVi.DIhgOnP>D3K`Bnq!849"nu`pV:6;4m4PMd9/'L)+'a4<JpDq;`kQfT1/_@rPQK`]=
%s55qHmX5,R7%%!BJ)[s#o[A#9rCPb-H^Xd'`Q2&.UHe1!7;1fj/Wd<W6,krKLY*^YeZ8F\Y>h_!H<!7Kn!L?d%"jo5G_Ud'3i:k\
%5VI4G_f4+'k<A:^!8Ut:"37co^uG=-Z(^DHr:[>-o!$B.HcNOje=X'Bb<>SA)7c[;^\(*OlG'g"?lS-J4jquV25eOSig*3#^Ia8-
%D"s%r59%YF3emK\\e#d1Ng`6c]%AM,)s"7<90M!j]13AV!2pXIVGo#G1jqIHc_Ila23.@]IqtF$BU2M1k3gWnB#<B!\U2Thd3#2[
%GNDF9JK!PZ=8L_BC:`Y:Vgb\8j>^f*V0]1i?G3Z"&[*Hp\i:9-*nQkU^tR>,XONPLk+LFT`Rn]d<,_b3'#f@7.@44IGE9%H71DP[
%9Uq7,UrQ49f,"e;Iq0?'BKI(7%m8&6DQhTX!:feV8T_LIJs?Q]8pm"s;Z@\`F)Z7'epi$02iEs5-\"kkI8>D>n():9Rj5pIM`f:?
%qpeUC&sT_N>F8KcI9h(!O>Fd.+,6J9-&.gO2p<dD4ubZRr0E;S@2N'UG@aOVXC5#2b!_Fp-EH_FISL/D,^.aCXip2oDY;)hfVtJ7
%G!!+\X$a#%R#@L^`gU9i.FD`+..^u:';X_:@NCGCY>cZ,lQ95&p`D0OG!uR-1=;WCRR&[/Y1K`)$>At32RoG]=4fFU>TAtOl`&de
%m?F';rR,C;\(>BhgC\iDntp7l@oV0i]P?OV:q9Tp,Voab2+l]r6!1*mM\s8'U'8#!Q-(5!G2'-*JnndV=6TB^\c#F8=7+N:>oaoO
%d>Bh-=6m<[V-Z#Lp)uN>WjQV&<Y4^eQn*<*a/r7;P2g$?3K)VcY8I)Jfd`W'qRtZuV\O-8ei(a[9C6IAf<$q,od"Z;O\9B9_f^F?
%eA3)M)Q6]1k5VRod.G9\WWo'\g?rW*bZlM*;I%oIZr;tKpWD=&<o[sH6JHY3ZNE:,)j0ASWVK&`H]Zr+m;Vb[eS_ed7l>KmrMu:>
%XOMQmj''.Iqg!baL(XG$*E0/qUbh%NH9!SF&[N2&rNb-?M[>K+2Rd$>6L/EbSEd?5n$S!MZ?BZb4`%M2\5rLe5"n$9c`tIZ[,*hr
%eb?-3I_D3ZX`'Dc4,FPd7iU%UUY9E,Nn_5q-1hZf7UbPBC:Qh^7Pg>)[IFDidJK0o[5K$[*8/)_)GY!Lh#X4#9iB`,j*BH6iRDm0
%eN^),.n1m%XOiok>dr=!SL6JkJlSFDZ3SqVZVlhiJ>TMn[YnGjo5KC'\(tb`96Ce7WjU^C&<809NWcoWjc-oZHg\PN^"'=<,LUpC
%mGOAqY=$\/1c.kM?7e[Z;X.lLNukRA`Nuq3%S3,4"6<K/VOenWY<?&cRngHd8+e=QUEaH5c+eS"Pfl+W4"3cA4Vgu`i*ZluP3LfN
%+#U?!N]*Ai)`P@IbL1ZY]i71VjfY#US(<P\YI-"H'>;ASDKWQX-W[@ia#S7YrG&+YXR%k258/L0/_(aKN\n4E9)cDD68DK7"21J&
%EmR$2WVmPF(#`)/FXkqa&;&1jI+@MYruQ1.%P_W_ajoe<hc9KLY/d!56p0OF9kIt%F<YsYH<IB"q@-/nI@3lf=t<*Xq[2kn;*B"`
%aLqRo:R&:?`-B30#aPoG=S>[Fj[.^-`>/\-0k$#UG*m60mqV3A2Bp-_^(hNqSs"Ze5hk*\\N6C82YR]aYq]p?e]u7'QY_Y$U%.Wc
%\VfAZ9HGN5c,9"Pj*[ZSaga>OZoSHHP3RgRG"&GA.=t=(g>_aWoM,oTm@Mq`a)iTi=1%!d.Fm`#cK.A[A3O[o>W#oB]bY9[`X2G'
%H0]^eH.'iL9&ejp%A?,;822i&AY_[Nj<,UPFhFK0ijdQTP[HGGNL/:NfA!c1)s@#dWH6p5SXec[2',^A(YTruY?Ya*CtI.\qqW`Y
%2V(LV=>FTY'>r*3e5taKd!0H\<8CkD?]hU<(Lo3?4t`;)G+,IT8_\Eb60bu:beAsXjiUH^N[/=!lq#muNbWdk7T1NhDl!D"2fB-g
%6>EM*j9!BGLV]pTWS$9NP+Yj`#-hRM:6nH#12i2C>T3??D/H,h's0RO.P>)4ZqjQ]*75TXCF+3&1KWq)Xj\.RD!9ari_lQXEcD%J
%\%6nSA?_AG.t?)gKC(9f!B4MLoa5D=WHN'Tc!`g):mlU1Jl.kpaXp^E[JEn'6H!hE`71'h4ae@f;6G-6NPnR5eYLu8d]rNXWON?I
%1lX(9dS],tb8PRSq,XC_L0?%n,7\R96Mg\_ebSriGrjT:mC"/ZkJ`9Ro9WCKC)#J1S&WN]r$F3@mE105>_-Uugocun?6ZJH;7YAn
%Pa8:GY?"FmW6n_qJ^mE\%,7Ho?A8GqX=F*+QO7:\lQVte;?Gum,.oeQ\>1]RI';*o==A*u,LnKiHe9GCZKMoAHrZq^Vq&M]%;`-b
%R7C>dlY-*@=3_1dpUJ`;??Uj5;aOPC=1@V^G[8j%=#Ck3->b%H=skiBcraYs0KqO3p@=LF(",kr[6#b<MkQo^G2<.;b`hb)e*7RW
%WIW=!-HA!2XI$D1<_lAE3aCMKIOs0Wh(*.E%8$4LY8FBZ@_>Tti,C\H%D-7!nm\Vcm1rl*H\goCBmn)@%39A[R6OC=s4,Dm@s(?K
%J"Ts-Jn8l3,FY31BKDl];NG!LC)FW1%4.6_78m*/Qd:PF=Xi_cO(d3]QS4O^gnK/KnT0U\5?g6\T]6b&#^OhR$lXbfSb/E5bD8S*
%WG"Zn@RT3BgJY?qhn<:Clq7;OgsE1%\Ms>:I-t;534I9Zf>!LG4Ep:4GOP-NmLO)tT@P-s::L4W)3iVV*`oIh)3s__'(de8IU6c>
%,qW?7Ze450]CU`T^$a85&Jd<^\*_`FWn-pESWdgJqRbHEJOGHgG"NKOICW7^U2CkRfh@S];6M!n$ORp=`O?p*HC7qYM$[^[l=-Y"
%1I\o9)#l2WO*`.-U1:hc#Vl'f]3as4VJgTtJ&ds!VJ(M'??,:EK*?EMF[\-GAto!t0N)`cfp&;F(U[ip>957gUM^=4pStnY;Bkul
%=<\)q]dosHS`YRS%HjtX(7N#&<gb!>#>Ej6j/\R-Tm$I'AHNL?,aLSUlSjinV-6$F+]kACOf2H#gI<a`Wb[ZX1[RcPjX"%hLT*\&
%Oo*-7+WIM*YdV5G]bYP):_P=I8ufC<F]o5`Kg/e4o:<fr)busOPj7MTcW=2eKq]'rC:@7XDu,>6eW:h$N%U_m/h(Kj.Oc0RKT?[]
%`*oRp^kTVQUCkdJP9K5^ZINb;Cp]1X9&[;Q`tau0nTbRV6$K9@Q1_`^)EN4qL$7t<[au#P13QJ>2iJi5>?\q@cS.pRXD>h6fP?Vh
%G(l/MmA(N``9X\NrY:I6W1?hq_NFc'L)IS?2sUO)3EM;Tq2CVD*H=]<8g#i*$KUOpQ[1`iT@H^2Df*p2m)iUokQ"+X^bj6NiXWWS
%gCjZ>UPr'P\!psWc\$fr""b"t[N@g8=57_$Y"Etp#'B,&c=6aPMhhtF/krPp4MpI\+d^HD&FF/qR$EE3:<[g!cm(WVeBq7lk`(SN
%d4QNm@3)5JE\\IrAAkk0=1(^5>u*dQQgJI6@@!Uh+BE8ak"`j0K+=;sT=;5nT98P%4<phf,:b<8IR[(<[,d#InZ&maqt$oCbTU&<
%\@C&4_'5K6IZ[nE7a../pnKruVKq/h[="!n6OZZgG,8P\i1I-#Y"^6gN_$;[q+e8())CDiWRf;DRaNje)<6W8RQ)@]8bhIp/IYU]
%k%^D5:s.<]ddJR3jQMOn63q:Lnar7c]\P.0<C&C-bcKqO3pP1o>:7OEC>E.0H&h(8q9eIf14mZ>>5P=5GNoI?CF8"[Oq/F*S1Hj+
%8=.=<;p/:XntItkr:&.EC93jp0l12<=rk!7ZEQornMJ\H'Iqfb[3b^Q<kU=JFc?g9iDHZ!ADjk+fa)G^;JkLo;cBsr2I_FtEbF!>
%OXjWqf\#$jg`j;8'n3B:f6OZKn'f/=]1;Ts9(*Rgg\5lXf%2rY)e[?lc!/N'DCs/ihl)h2h)jJ_B:IcFjg@$C+2;oh/FRu#s)P6j
%0DetCf$!!Skr?-]UKdY&4C'f3XK?lp5?M,qCj4LB0<Bpcc.^=cX\RC2H#NZRg$>3:<Mt/I;1%rF>g2C"T3dn#Vt,BcoSZptQi2t@
%Hc>G\et%jpMhOW9Vd%e;kaa:fp29W6MU%c:leh%&hpF:"'BAoYd*_:ViJIU.or$,i_i=TKdBi-*QG9N'So9$[>OLVm$cU)srN3W.
%PnTU@pM9(6*DQ(bb<(3e^/f`uI'S4PgGndhR].>'G->"+GCHWq5.U\g#,4P12nkl4D:)/RIMB7AgUGb#K(!mj#>;OqZAA7O8tVse
%^X"Kr2p:XT\W&E.BP"Sjf=n_urbCuX_V3$.2d76Ore&70TAMh:.@3]jpo1^+H*VK<;k(eEP2E7pq6jQ*qRj+?^\d*k;J4s0^T_cu
%mfsDk?X%f)B%&Tnb1eRbKkC.0A)YhYQ%shKo:qcC5O=uoKhcpJ>W?(KiuuUbkM<VSF8l-<s3<MPbI*=b,s#T.jeKA_`Thd*heNK-
%+*R(TD/?E4I^cj)\u;T)h#?BjIdD![^+QM$XaF<\Nc0F+E?@..&k\4u#Ie\(T=fC)lR'(*nbW'o\"j<%D.UaA^YF9@HrsRc[rlKF
%@gCJ-pqp/SKq$FG`prNP%f`j(G\^=X[/+\3Ks]`>h#&Lo=Wa_^U>Ydc_W/\+McTAikp&(4]18nPQ1(ojnnH)oVX\i]h.R^A[Ji9p
%_O"d>k1l_[[&Q.qF)S/sO*J9.oKR?.O5BVOiNW**Tm6.t`K/8Al2I5rn+b/nE:<5l2hg(IotBA,61)_HO"\\S1sNW'iUBAroV5L`
%\9VU;]Noa<(O!9FhqoGke@p8?=&'ZX:U`5W*gj<iO2(MiI\i<'(``He]I<.74F",2S?KSeh21i/=9'VnCZf%X4F(0-+XfMIK$rAq
%@INs-iU^CU,'!dTX6i;s)"0PqU7i'QK6B1M!+PP0jmK,@D=pKJf_W6m1EEQG>MUbANBC<J=Drn##L=p6\bb8SLEYaMjK.,!I0)>'
%<^#>c=u^hG1>T#aZratYc(2Mg(Q?n^O4O6"YH+sloT"1prNNjjGHX0EETZY\D_CD;[h=!555<K6@<8YU!MQY.G;\e#Ejt3j:<ti1
%r_!"2I_l%t]c0(h]k@#IWPO(6]",1m*"G&rn@\U,K;L(;^8rlIY^%3(f69EK%pL\Ge_31bi1CSPCg)Sde9Q>%I!U-Do6^.qXeP^?
%>'Tu;)bOWdW"E@tPHE*(l`YY.]5LjGjNV=U(O=Tk_f+oIled&S`d5>o[T,:LH[ggjGd.ejd,&#D]s>*7/bu"Gq^6%NWS<bdle]M(
%R1c(^`KU2F4Bc[h9LRn&g\9#<M,#k>pi:%dXdqY%%se2WGjLs6/%iDsm\\ap/*n@,WX%GI9<0W"'"rg0Op8&O`p3Er>e@GPqUD%a
%7/b1)#:4e&8@N9,gGFrfRraX>]Lt*-^gBCSF$9Pf(0E`0cli+lYd3(J+o,EXmB2rWqPV3H\*"^qY@6DEg?Q#(4>ls.QK5m-]lipV
%s/9n`5BN('Eb!0IJi)%>jlLi0A3-JLr36$.GGFF"01r^5kIjZ,`f%CI-N-kG2dVl:K)G9=_kW<BHN0@?V)99*T!!,F9VXNuWLbd*
%:,eo=hs%'7E)/Noma2FuOGqcIU39?+l)3u=BqcNTeMQdtd7PL:VeHhMa3^+opNV-n.B;LNR]ngoKbhMR#c9^0Q8QF++>>Ykj2KK?
%qqs*GM]SC2B3"=/N@3A+HD5P3hV2>4<c=SV5G&;ZDY!^H?e;$3>^`_kJo'\lqlc_k^(umV`AHi.)LfEP4cFrU8>`Y04cT/nQE&Yg
%H5pd%C.G(*nuE<2P7OP)\;4#7A2tFF6%4]G<.@X@$JOFE)*o=1d)O+14$$[S]j0>GrW>qPCqg*YhMc,<1p#)Lke8g'BNV;u9K$`!
%EU'>HN5nIB8)mW9ps\9QX;F`FIK*FE-98C(dE;/k881kh0oTZXB;-@?5UTR'lao1s1q;ss?V*)elgG!;NRHh8:HAeHSo4HX@cV#r
%#g9)":Lj*DD`@NL;$%qnli#.DS+&`&nEl.rf%U)f+o)-dQEEHh6Bee>l-@khQQMO&DEZ'.XVo[LjWLi/QL9ht;`nE6GPfYL7d]Nh
%g1L0Ya$%geRZ6;"p-uYU\h15WNnk_#CMAibQWcLWRXZM>iSO;+k="R2r%[7*g=uLGiPo#Ms'tT<M]_7G9']!t_LAi$]6<\OEt%*;
%^=G!edk%_=Z2DbC+0@/DgM.2sp#5B2T?'lXgYOJ7*^3j'(9Jn-[5?Kr:Q*a.S'M_2M[cWJr@lnDAY"5ZFuA_`[k,UMK``=G[ot.g
%[Tsa.]gLVA=q>!.IkG,;0VHLQG<c'Sc:\AfKak!\d!<ak\O>Rf9W1TL:)rSaL]$g-nR-rp^@P$h_je:$b%uD(I%;kEA?1leDOfb'
%rc[@B4o8K3Z0pGG)<R"3?a"m(Yl=LeQQDX=`q-+*5@gg:=,!XRZ1fGLh#?`.P+@6cJ^%+`:hW&ahpuu]$bL=`&D7_d$B6A_)<Gq\
%Q9P#T#;I;_?*AUQT@c)qBbL0ui_lhh`M_mCX2JYS<tYE[dnbn8VsWB&_f0&'H'KFpB7pf%H=$uJVhKd"g&cC]rF)#dTBo`sDf19O
%SNV?sV>WH!Xp>M>+4"kDS:/,Z9Ii:fMFcYuSe017$ETl7>TcOJn&1&#AJos7fCa4NdB2I?1!LZ\Pt'TF;*@^#dbaiOlK78W4GpoH
%oui!B>FWl$f[IDN2?KSU`B+Sp"b(a[q>0Ej[68=)6fXG8CB)3-_Wt8.DrHjLIsC_D<nlE@BDCZgj#pnMSZb9FmT)CO;b-170`+'t
%2,+`_k13_6F8!UVIeiC<c`gk@=nr7,E5OXA2n$-1GMDH0et)fO@4o:YhFa?VVltenji(-qLI:5p^/be`D0'^!oDA,l>7]j4*>2ZH
%a8oJG1eD!?Df$N>h`:kBp=eg%fB1f!f*h>=cP@"*U^b619^\@N^(BRS[T%Y2H14O*g-rT`[J<pn`giP;/K5X5?Jus+7#or*`Q<99
%VnAOZ[?Z9%a]iSPCt-$RO2DK$T?*t`r37t1A;4cJ2X]m8Us(&A[`t]h0C%>'faMc3JeXUPYh(D<pg@.`/0DQM<@LreiF53,F2*o#
%s26='4M*2fBrQ7@EF&\N&oE!iaBbrt]2r!:oka*UH9K#]d\$h>[RFjJRIesui6191f=RYgq5:^QI]S$iMcJD49RS1=]fUFP1W""m
%T[V0GLEC;GbD,-Q-[,$F$K!jt!Th(CffhsmF(spCg7-X;YIhhFA?i4$p70?FQ5>M+"_TH89qq,_+SLAThnHe4qW,o7ic_*jC#+47
%5$rR5@.1J,J%2]d^:F.5Mna^Y<][em,7<S\_rCBfSHlAap:1LOlICMqb7>*Oh)X+K\pa$7nV">e]cPs3/3]\qT4='4OTK?*SDHCV
%ap<K(3Os3M2IojDeEVL,F5_[oU?an2=8Q\0le:)T]j<ho%NY0*/[)Xi"fH=q4j5RUrc\=-Z2NqOWZ!*_\K'4Lq>KAb\T\#G9="4+
%$X:R\cQ3K^0%J6QTP7H@Zp&oPXOZ&1ri>V4mQcu$lIYiQNk6mX3aJ_%0"*s4,UQg'E8YV^H.qIF\;tgj@psG0Q>Un<\%Fg:oB(o(
%roqG'NOM[f#XmKsFDcLNPPW<`Sb1VHc"p?H)0srpG:6_>pEr>R+]"'n_XegcrHPbSXREZUJZK@Plg7oqPCmeUNS<iF>bZ.L\'TN8
%h&8aRHo@Y2h,_',^-$[S(3Z$'?`^B2[ro#^X_i2uXg8`8+edKprg1d.i^rq4iTA0qn(tjGL>P)e&'5U^qOu7sgO4TH99W%c7IdRR
%PNC9!Snr2<o(\>[&#5<W]WcZ`nAB[_-]a-4YIdWZ+uRkrTAAAX.""&2g/pGmIs1";\QoI_Sem,?.6RC>p@`I;['a*(C!.[1I/EZG
%j`f8([@l>9i_\d!Bf<*h#CKiG97(;SE>A@(4j*'=qTHmqA,kdLkaNY9=$FR#AWtX!llsCJRV:dZ]sY<sLOF%/a56E:0u%'u>$HIK
%rEQ\al(:?3pT<S4]"3aop.)s9<Q'39oO7"jmaiPP<PO!@[_(hg47[3s?[VRTgFY$!Df)Z&hmrW=..Y9:ou?E0pEJ"trghQlq+!?9
%<m3Q:HHog%i=6qF:C]JI%iQf)N>8q7?bS\:]63GY>3GV2?LaiAaUb*"OS%c$4>)EGDf)",YnK$Qr#8`H5/Od<H>VJ`s1N#HmeL#U
%l/TBUZ9(BK,.H[C+1q'Q.pI)LQ$7145=8Ve032/h_NF%8,X,[b9k6JURh+<"au_AESpi?ZRd2kWj%mtP<ZeehlV&1!8+]aATsg(Q
%GO_I&pl2U_E0jnDL<)'(9Z*uWWF*-9_kB]fpT:"KB%_%Le4]W5+o?Dsi#fVeU3$+6=(i=Dk!i$3]Dj&l29$UR<Q=:ob6=AWlf#N]
%R92@9rT\2g0gH_f2gWEfLWtEZ4kY-UV"N!b/:Zln`O0@G+&V(;((<?%W9NQ%[5qYZ7OH0mUZW_kCE#ZVkf\;.?b=4IL:RrhE&6H;
%kX0IY0/&ltG%+_L=N/Hro>Z*ihYoFkkA-<ZWUf)o@q52GDVqK<4o%I=?E3![j#/N:N5C$ZVcR-YrDAC[W:PJNm$,6CC$oi(J+p[=
%VfSoF[2J<q)mhkZ4PSb%GC&AHEUOropYW[&6lKML]Hm<dRHF[m1m]$t/+5A4G4.*2*e%D+XPMp'`/cS>d*u:q@8kW3na,_q<pNu]
%\q*%)g;.G,">Bf-GdSE<@g04.\GJ!S"=6G`Y^//#HN""/Qraf6\!L0]XW+\%3iYF:876c:2?3X>Ag)EQmGT7;Bl!/4db>6&9r#<u
%?,"o5XS:oNW?;.RY^+>'qFS5d(7kCjE83Y-1^&`oO0;4&a9ZT".jt:1B2B/K*Y]]24lSP8VAquaI[K'p)<1s+>AL-)lj*L,b11%h
%Z"M9B!AECXdEjt5N0MkZKnI?%3h+S'c."RDURUBEmmi(>.K;J'7;m^t83\u4lcsdPik9d3j_`p?fm'rFp8RUE>d3,;<aXTgM_AD<
%rZ9rY%sESr[T0oJ\[M(j%9]M+lNP10r)"f7s7)W/n4C6r?[(D(6uqPj>'KuEn&6*hD5.$alg8-/2+dr&qrf+CopZ6A*SfLr<'5<:
%hcCWkT53<D*tL9O9mZ;=CNZ\ZLbb8rZ'^EePEKWcj`BeE>BmO;s'Fbs"Brp6%KE*L>(rs4^@QIrM23cc.cnQZX7Te<]tS"u5(3J$
%I?VsR\":P<Urf[@a8N,Y?i"EVi4.+Ydo(8Wd,Dmh&)?(r%EOBr4C!2&VuLA3coaMZ`c<[hjB&Cu>#EJt8<*M4m+SXkg;=GF8]8=1
%-\#-\p9&B0`]m/*00EV=^-ft#hPJ)Zf]d>C88#>iDS]G'e^af$]O1"!<tC3"C(JLgM]Z9,(P9VCN-DH0Cm]!J4)*447gGh`^J2#=
%f#rd'(XI'hHMRY(@AVQIqKL@&eP@]lGHL=QE?B(I^Uplk[VD:=hk.S*fsC<Z8Gd>^S)$ltQ*ArpqE/ffXnggGCU<BP]B_-5kA,Nf
%qt1"Pm"8a5f459%gq$9\IHTYQdYHb&h0EWdBd?OP\p.C</9W+[5@0SG4<b;^NkDPq1Hf//b(E4BS)`W%8&[-h&%=E:M[*_cT6*n>
%e/7oFNO-%8;K9=_nSZ,N0W`luDf<n6=:]@/HQO&.g(pJ.k[#ebC@G*Vc/Z]92\D7QWB\7eGZNcoG8*aH(ioD*4_`ZLUuO8SS#(&\
%(CSJ8\+[8Ec$ck4'VC<0Dk.`e!i*Sm^92;@525gthnM/uCoU^^FsMZ<EoX]]!&<iTH(*]u*p<9`Dh#ln[H*'4$_&dc6K5_57H1/]
%mUl:b1E,Q'^%S#dc/tociTWFKd^6GqM!=*;((S[54fn5S*rd!?XKt_H-b%9ES)%>3$Z\^nHh++Qn5\.-1Tp?-qrqQaqG:AhpKWk-
%.uAXu(uLL"K8$Au+blf4,C=d1TN8\SN8H>hSK^/'k'=YpbElH33;5CYF1C$gcf"sW,9@dFPl@Vqm+6TlG.h(h:ke,mm+Nh4#/8Z/
%(Z0Q?2SWt`N8`@snpql]I1HV`qI.[VJfK8%.-CZCF8Xe-k.#QZSBpRZGpd8k_^]N<fe1^u8F%L8/Z9RXeGN$G^C1K5_A@On;ag*S
%`$,QUkbCZ"q(U-;5%LH]<Tg1SET=NX8TAAj#S^rB#P#!;TCd&Ao98)2ec5#D&,M5X)e]q:5\TteO)O^N.njKYWAWf?cgi)XI>s'&
%E^S0q/_LnJk_'_;A/]@BZ"t@U5B"-)bnCc?nj3>/]^JttP*J[)3$*WeN9f+!o(&)\3riE/bONh^).!3R@g"uge0PCaW/WKLftc=M
%_n9D]Ia0dP4K[8c5j3!0H/CHL<5Xg[2:QSR5h"s?D;GCfCN`DcID*:+R96da9+Ad(T@\,R%4asFR^?Zg&1A-#aD5sHQQ%u2h[4$5
%$*u;i"_Q]R2Lr!%2d@<V8h3Fj0S5`G:=p!nC>4$g#YdKYg0i6"6[^J'"N7/;>%'T;/4KV61S>KX%\W@&RLUM/3dqDQ+1>",!J1?d
%D@ejLkT8+]PCdN3?.9okTVgu9%EIXdFG@/3*FtX-D4Wf!"A5%CKWd;(mEf;^$l@5/JXBn5ROtc9L.4EqS$kMN#1DX.T^`)Ii=[t"
%i*5@"Gjn1iacp'S_R;cAB1Dbl#;!Jrk.T+HD&=UjKK;\VqM+)<'V@X#W+T%5'7AiO1mZ+f?s.)*,ShJTqKWmL;HpFi>+HH>5[=W-
%@.7uumh(Hkb:V,0k3^Od"<->aQWbqc`/1AS0TB0XS[Uo%@*'W3nZYf>#.,gk^ebXmY$pDl1'3BZLNk'd&0:ruWj8m*Sn7)AS<uA<
%2*J1+7r/lAL<U1P!.r<;C#ItNXH7\J`K#2]Q*s?Qd5N?5+[Z6+LIRsi<es=l?4o?.@1X&Z4c^*"[u#O3)p'en5!k('FF4](BGf)c
%aP%&\"9CtI*.ou].Yuo*9%l8BEs5Ru%PT2+V[9O#9KsV\L`m=,Vb;W$6,^>mQl/^5R%?RfGk5TuHl""G7%fPfLD#]QF_h_H!X[i,
%U!S7A6-':%16gon6Z%m1\Uc&^9oSOq9J3\`OJtoA/e6>LJ.dL&I+['WgK-Xq`0s?29BSZ,fg;/lm12c>JeDo)7c:,:\j5dN(A9/L
%M5`hjM^[HE@fpr-^*RVLnr+o.Yj]<HRr!XKBVc/'8OLi2")?4\\YbmmjYIW:[*kA:PnEjn6inWae_ur<+"g-1e+(f3aW$fr&7S%d
%7f*tT9KdLQ[$f@mTMokG9a(PkNf_"QkfU8]TZGc)"&lH)#r1\&RVoDp,'/NrO/<A[3'hqCj8-;0kRJ7^(a687*#^7?f+^@f6a:rm
%YSVk_5`&fq@Qf6.#H*1hGXS5PG1!#^=i(4[T4B):&dAkKkrOK\@EHn0mhpj3^]7>pdgchFgQ=De!s8;N"4tsd)iBA%cdnb^@>B"`
%E##bnebEjWCI9g)NmXMAN$0WrMj@f)fN?c!M-WX[=u<gh&eYSZ`?CuY`GCY.QG$;j&"pm&+$ac[CNYdfl3KN+3e2Uq</j5&`3UAC
%,`\Xm!Jr4T>aM:?`CgJJ\54Lpm#7$%eAd6t:+0Z5_-DMV-'>)rc808qLK9.@Z&GLWZs;.JcI(Xc,S6B,TT`WC:,$\/8qDi<Vp9-G
%LCG4O8"6lQ#Zs,k&tV"_(#]AFI\;+r'(a9K3^f"Vf;=+1&*uDl'bI2gB^)lg[!/aOA>;\7H:.eH;$?PSQKt>BLg.A0)-#D:'AJ+=
%Z3qE1Odr_)PIhHrMU>!RPIY0Qg5)C[R7=XF%79;,$hS1r3>8\2Yj!NuAKHJgCikJ<Lg$0"l%"1u1lu?sSOG109]mWs,G8m"1RBXo
%2Y6,[dQRZY;3GVB5i<ZGL4QB-fh@T*S:]!VB0ePTTO9$'Pl[]sU_"Xa@?&n`(/:)H3,"[2!SPaYJ4Ka74'@oa"cHFaH#eKUdT<*Q
%UlL!;fcb0A;X1F2>*=V]M>^$18#f`Y?oA06AIY$)8M`]d@sWrdMBL<*=@N]E%uH\,&Tki#*lJC+:7_kG2\KHX5I$j`$[QD[Q[L-3
%%@DGX`Sj:\6,3f&b<oh^3,Fbo^pd#kZ9CrKQOS?"O3@kX@qK?uY_=B[O?DJd=uQ7%ciS#;E^O&uK5?dfFdXPtV$[pOR"9?*K?4b!
%"j>(t\i78EC<,+GS$<FaMNB>=/i&f>Bj+EaXu%t(MLa%U2g5kg@JU)3P?g^D'IhSZJ<i^LC&"F.>mM49Z5!rN',@=:Cq=q%\!R1q
%]e:F'JBocsLWGAsEBFM\*:TV>ChS<"(r:gJnAHN*+/GuCLIQ6N^YhpKMDntr^l9M0%&[O3J\EB&,6LL@OE(M67&e>GZ,kL8:!fBk
%_>Yes6.,p?_,VVu!f4dj!Lt!;M*XaUk;fO[W5J17OEoUglt-SQZsbEQ&B^.^V<G7pMqM7#ObZVOL(#8CifeLsJ^Q-S36?O,KP47V
%fj92leOFVi&@$>%"G/K4'^/pm;->Rc%5k<sgRlHF#;;A>P+(kL"qfC>,QIfO*,.i@#Q;OAR)Fr!nXdUW$3E5O(eSD,/P[Q*Z1u<!
%k_Gr6ifc:R2DBZS,Q13PHYiK2,fZ?NJ8AtX@h%`sM#^Z'JRo?W#sDEUgTlBnY;+NN+X7G5g*B1*#k*lc"NdrTW$p14J]g)GN+RuY
%'^[mH@p1Z+CL.(M'\"lQ<[fG64rjo[bRfX8`JUWtdO'LLUAPH#BfUaFZj[=3=?-C]4dfCf@OD0l7u2Gp=h,KBWs<sF4n<!r>-sb)
%*rt6r^-)Hm*f:D>&Q/_H:qTY=5b#`<"LQ6l&pJmbag\M\1;:[H@COVs]@MO8U,D_KfW,!SCt_/<]-R.g_A\RS+:*\(BQTlC/[aSV
%I.&Ik@#D[+o+7!;i$lcAEeuj!e0E]`A4doFm>5glOmF8#0H-I&f#k@rSn%:oD.9bTJp%:518%(R5QgE[csef'JAe-6Dnd)J!g.PX
%n&O1:fSgWfH-k,&d$t-6iq%\=A'heX>E[AR1;mgT$g7!,5''4]"eNdV#<+@[@#\c=#gQHk+e@Ps\HiFW%$Tb`mfY;eM>3ZA1s:/0
%L!KKA1\>bZB7iL$+ukA^f";!:oT)Nd=/en8RnTFoM``:Vab'*m!R\I\&ME./fhl+^lF8"u)Z25aF5Xr27i)YoYaeY0@F%<7F>%[!
%!Tiu_<O+fie0W:G#eIoq+%-p7*uKTSb%0T=e_if3,#I8g`Y#JJkjUEng3W8Wi74#no*:p3PdVmH>lZ&`=,SaXI@c)M'U!bYfh)2O
%(aS[?PZ`M;b@2h2.C7kU2_lMt"'Oj"*"O:FB*Lk-G3,A:fqg=E>/Vj9D+Gk&a:i`gMQ*&ABGD3KVZG2"^6TqKdP<u'0P(SLN(h)9
%#R/.9)@T;#31G%u#Z5>]d[*]jJ0,6E#ZGb29b*r7'5)`RAI*(V)\/'9=f)NuA/ncFRM0Gq$UaTSQ5rC09V,@=\WJfOrPose$B!ej
%i5ZE_Z9H*6O@;@o0*>XnY\Af1Nu4ZISZjC]RAh"%7h:L*6t?=PU?kR/f%CU-hXI4VOtEL4$3J7K+I>A++/,lL8[*e?8MX%G70K;m
%j2=M^86cr$`cM=NlW>n^@7$n\<$9\Bis7dpZk/OuJfmCq9BL3(@>GocK-\kQ<4ii-0`Vj]^bU:n`$)W#j#4-@CW<u"8YdPbP/BlP
%.nUO=86j?HOA/j0&WkTLZ\L,O"<`NI4ZR@<,]3W[=I*ZX=>Cn(p're_1U=h:GjU;pfn&*13J-@[UbTf_Jlj53=R@,NT!(O!qt:R*
%7,`]a&f`+sMn0B34IK<#kfN5rU?*4$PEZ-n5t6kTZIh"qb.o9Njr;#b+<0:>Z:*?dZ`jQ>+!4#V[YSN.Y@35%PK1Ofb?]O#@PsJ2
%DqN7/aAoGkJu3c8^`j>"`cQs56GZJ@cn@R6E`]=ig.o]+p4ID,.28J!nPF?TTL$\H1'N05GK%0:o=u"rJ0J,"fQ\P^*3El6*.9fN
%b+NmNB6d:ob'$-N=H7\=mJ6,E=j"qt%G=O6DZf'p@%#_E6&NoO@"f&tKIbs^+?"l^-.g-OMXjL'i*r/j3P(:il7a41U0'2;kTS"W
%irVH&d]uDshqsM,JS!REKn'DFdff0FQ6;Y!\2(>s#WtXiN`h]K&<9,T,^sSi<T''+S/9'U7h&ap^]VCcLUr&"$BU_]4%V,IfQ"r'
%YVZF&AsXEJ%EGoroMHSC5RalFNQWd.[?q-=?M7qZ(=!SAM=!W41-+NlPC2jJFpba)bQ<U6F#Y#r"W&;/YbiKL]`o&?*(u-^,l9o0
%&M_/4&-KX"g(D^p15>oQB;Pc>IKm$[=l^M7pELJ>oDjes0nKuGF)Yp,`5h-M@mCLn0kio?7-W$NX?-EAc8ii\A=Kl-`(JUE]-/8>
%N6f:)pm+2c-&'TV_*C@h=!4B=Mm@/Wak'-EEXnLf$OdMI0Z[l.Jf+TEKDR,s'nf&GjiAG.lS?QSGk$Taf[AAa\]QE\`Rs<E'M1WI
%,,4EKG2e5X+rqh":1HA=0lVr_"$7=k#)a@''&_1E6CNm;f2hTF"9h5W`?FLI1>_3X[`,?.7Ri!IXsfrZ7'_C,Rc"\a`YP:IA93L8
%X="S#8n+S%1_C[G6_`352!uNa"5.87VE0eU*lNJ_I3t-9j"IHI9uKr_GN*=b>@%1.7,0:LDL3q6D$5r[Qp&OPk"0C"m1lb>:,ZHQ
%"sWi`FN;%[-dG^pA1KYf[NIo*!I`qD94,-46`(<^FX6e1Tg]@A&5@)!OFo@RWYg3o'aIlU#emS8PuHs/_HVc+5h(@\QH3Q;%-P_1
%'k4JW`2Z/ogCtGr0K(ulSRFo@TO$V&%K;lM&@N4J'#ioVZ<Ye?[`+h&5R''*#A92',5U"cW"ETc%YQI;-]"-@-5J>LEL@^f\q%+5
%ZM%hlq#X@V#U^rB$[8_c'YYu-OR5)&"=jD&^9iRWe1<=m&R=rZ3An@+^f!^X9&BYsL[buK0GA;RlX?E6)HHt\%:MG$ar=0RdV7pd
%Y191)AP92g(^cTV%5_'Q%lT!<>Z8@#K/jKhfEBV+`1jsO6IMl#V]iDtW#&?`*Aj&kU$)i:r*\DKV/[?."%"hEjBID*YWj`si-?Ml
%_uT<-jP%-=JNL'BTIGm(qVpr"0jUV.ELTNi-&++W`9,GY6+'EiZ40a+/>3'#c2tHT`Wn:,>8iGb3WB__&PX<`'ZUtoAQGV908@=H
%2!(#5[t>aZ!<`rpSmiR9\Wf,d<f73$%*TG9(uI/C&>+=k.q26H*$UQu)+H!"\:>,(H%R+Cajq"QJmYQP'$`FE#[\A,oYgF"Y'+4-
%U,rp!.LW+II5k@;&K'^W.l(=&g^`;1SC$q.8&r!2G_cK%0a"qG+b=;N'jtZs`jQnR)n=m[1=7&'f1,mL:.MI<)'j<E!S*lKL&D6&
%i]bnX8-&d\^6$+J/>=Pj!85k"4D!6/(.,$V-$NG'N<Tc:*D4$a>60P2o-IfPLg*YJGtDNnG_,WN#Rr4A$+oB*YJW)6i^W:>>XNRG
%featU,Ul/9FD8F;`*/t^Pr6gQ/0'a.fS:XEa$m?SVbS4Ij\c\-E0_;G)N_97c>m<iL<;l<I>Nrf7>B2^$kP#b[Gj/)@M?8o73$n&
%Ub):EJ[Z</Gm:gQ&Oc.ea'pt6:cVCu2@0QJ+@u\K^fLLO2B+t(A?r3aCsS+0g-V9ODjV@R0bESFZ"A+.]e)S'UnR`8S?7D73Y_>%
%+c!!)(pK_S'.EaiL5LDC#9\sC69NnXs#oK.lTbu##OI9/]TGD&gFT<]kDbE0fNiA]^,s5G3[FeHA:H'&1F+&<,QO3#H(^tC7Ees#
%kWfNi`0lmSk.ie\,3_ZE@u<Xo8Q-`V&Tf-+a1%?+'^O==DLn]&foAH\I!Xl$i:&#J#ilp-L)dLVEO]=Cb`;8UE)4?H&R3$`'!cOF
%&08pnY)9E<0G2Aq`bn&B>I^Pc8J#P*`)'81M/'R`0J*mQd-u.?MHG\Vp]eOn,SIg*5e<Ya9EA?_4ugM[-A\RE#%;/69i9[kH7Dn<
%fkW8ZP_+c9Na*PSOfEp;T,>F"Ua#k[&BY;"IF8C#Q3@L5Jr/6M#jZN<'NQgH4[=S9.-S"+&Cqi1[?1e`/.7R*]=o+=Z,glQADka2
%h,7@:F55=<ittVpAZ+?_(GA;a1/1QmPuo=_Mj'ZGCB-tUM;oFMnA>M7LmTaN+/j-?pCC6m,Wbpq@5O,+T)d7EhA8s5WT##CB-A-Y
%q1?ZL8-e]=pg-;ifmHeq"C2.@LFp_aU[_sXZq1FoNm-Q4DU\q@Ls!eu#1>cYKGlOJ=>Ep_r!R`ZAY24n_;M&[mnk!d<8gDj^uL5L
%P\Hg*4u8H:MD5hA2=R?A$tsu`<+QWsm!,D.SA5-V?H@SX!2G5Z^.R:g&1eEka@")m27*FM1P.6F"6>Q"@eu5Ii$akC`"0+F&L=Sh
%J0;<lHm`0jJ`i`*jdla+4^[$63:Sj-XaoV/0$.@jY=LX.J-6Ya9)]@P*$kqX,C/Qr9t<L/]TIDilk`hT0#bnXpLR:E*-C8%/V4>9
%W(^#mR#;^)q'':aOI3o@h>f6[:M>TfYp@$4`e=NX1GPpu"t8.*m"WPN]eblQFCq5sKqY?gL]].:_:SDUbi-aV#-ROT9K7TZ6H`E]
%Jrt-`E;&fRT[.hiZHj(T8-e9M5BcHGgrVhpEAe4!77=O7Q_L:M6R@>PL2^_h.Gp/<8_fSZ&3/2iArA)P$'At(P_#oUNcsuaFl;>8
%?os$QE5=m?Tdf_b#5jX=,W9WD/<YY90uPaOAQ%Qoi@t(mTgdeZl&BR\`>qIHOL(=ekka.9[LL83*7n&"AX%=&<,AL0Z_d)eXm"a[
%&PmH'_A%eScBSN;%>r(2N6%K)7'UpUJc\a1NBiBd(!"6%*I%pSg43BdFg"KqS2i8V/u1pU+NYef1bbGh$9j7+>]SHCE<AMN6,M6.
%jH"Nu)g,,3n;[uI+NV$Va^mG(#9lg3<[LS.l`$ES'U8PA"T*>4_q/hb6XAlj5isaf9E7.AaWe\p&8'-.\Br4kPan"$j;?&#/&<Vh
%ZqNBu1ls(9We=X\73W1?^,?s&73qEfo.!R>W(h8:glTV*jD<ab3";\.X$PbL-H!f9>ekP3/%Ngp5WT,e)OgeC65n/_;OC"]aoNkd
%gi>f&?Otg,*&U8QM=Ugh-4Q4jm,;!0+)6m3m2D#?@`np+6Ml.AWc#'^>=.8P#Ebm6$Pp0U/C%^[^;UPk(g!rg/:!`%QW"B0@0@-.
%-n9nVjN<*k!aLL'_2*89`TLb2c?H!J'@IId64'!V1mtOJ@Uh7PN$C'cUh#bPAlPYhLc3q/S?c\1#Jh4GVN(KS>Ws!>""db6JX[9#
%/9k7G2_I3UMdq[H^Wea<+X&*?k]"NQ'HON>`.8pSPhCG0Q"5mu!918/)]eXt0FH0p`oD#:+9;Y78a(f19I/ERauq,)4Pu19iW3rt
%?e!5XLKp6fDAaf*nj1.l"Ta`7UZ2'?!A-R7..<_:YN)!IDO8<:0LaoTTh7F'<.N-/%2\aRD2Km,-pWJ;$/&)/^>j7%pYGJk8K*U/
%f`8<F36"7'N-!j<29PBoBM4l2=6ZB&!MM&#S+!N_.h+oGKkKu"1g@7\!B$W_7NIB@7MV)-&\E)hT^6)0>=./k]4R_1q1c)I.iccU
%P[S)F":rH4U)b?]c2k@DZIRWU$<?("#:fpLoAI.j(m+qOpN7a%W.W/f5\<YldUs7.8^*@;@UZOa1pl&fZk95f2!<SQY;bMJ\Ynj2
%30sac$815[kd1,j^9T`_.qB^0-$]\**ag"0:'>4!n[f>p'*96[(:69oW[#O3NXd?K)_!_[S/-+2`NKFg(M'T:i5?0%U/$IJ#j?p#
%OmIXG-#b5Ljaa$7"5cXcfed5>"=<A=af6&>:pE#hb![?_91_FWb[hT/-CESC!_lEqE+LLp$($INGD9"B8j(HQMd3\";%uWNW1Am?
%P'uC>O'JbS%>5^/7jP&<Ksq'F,8lO/8JnAI]Fh(nZn?''8OHa$pdT!X%A_7L6/r-g_^/u$^iu`1n5V@[EmUQX3eog!04:9)p=pm^
%:WsbF)%7rBKU>0MBf2KYLlN/=h%W\WV?hV0$Gd\^l619c6M:S]Xipnr-,ZrRIapeJU99h/*.a2*56,3TmCDMq)F=],b*%s\^uTam
%AjmNl#YcM<M?=/)</`"BYj*L>A0=/ZrX2V7m6Fr_n1u/8#:N_m#*Ju)P<a#FkBfh-GU=:1[LkaB_F!1>g)S?+eKqO,Q-=Xc/]_eM
%F1OVJO^_N]KQ&nIig>?7'k%YV/#iK*Tk$$-JV6(#7(Os^)r+@A5ESnA&0'2OfPL7:3JC%h2^d+[dB#\I;fOrqD=ljm7.O-0.Z?YA
%4F;i>=qHehj;D2(:!!H$nl1AF9b(sM8j_H9/771&KY91+giX20&Z;dd#V-5SK[EF@-s@FeMGs?Q2GN\@&Cerf9sLA@o;&YpZ&$m3
%7:>IPL3S4]&VPcB0N5C-pOVC8F'gHO.pT#-PN*F:morrXLT]q.$]Wg0KWq!+*opQk&7[/0`h=9`9,g->W,uuXRP0UZEj\5r%S..N
%r(,+*ACTb#%o.I*J@:Y(`Y)&`=5&4g)$s7e:H[6jX5c%d5pf1%0g2+$M>\%V4;,b!:.EZW*q-:!O,5jUGs'+_XfH[f4^AQFBIqI?
%^*Og6YrplgLr5R`]FC2mUk$JUE2u=Od9.Mf04fr0/<=FDQ>[8;4Q<:(3`WFIk*:/-1!B/eG&F*q4FgtZ?eEdDMMrZF8S9"n`uq(S
%q+VZHZD$,iM#%m^_SNL'HqfCj4R2==M\qsp1[@k*CW$uHB[rtgV4fs!,!bD(UO[Rr`QjL,)NrGf'B.55daU5o]B2\J>f=_].Rso@
%LliQcR'+HMgehBqBoJ!f[!XCR(`C71V9C>WAkM/qELi5/IOc\>W>M$hG*Fu*N6H];haoW0E!/\I,=^g.:9L:3nfY6U(`<kEpelh;
%bY3;'l[Vi"2F2=gTrst1AjSrN)Uo:mCHG;,Z+Mn-:8$X:n[ihXcc5(7WM7%u?T(GkP[H`X)E3oDW$W^?TuF3R%@<8ji<2R&)sP:g
%6&gl`Q]r&0#(&(LQPJH3*tj\2=sJbM2<q1B'bi.M<F+/*Q4?NaeY%-t%XuB9NZ5PADJX8[e+1]J8:J1nbm)[J4(QHU4+ln`;6nF_
%l2Z&sdYVtiP=!]Nl6TF=j]JhUa!MP#C5rp2#W!n_4,AKR3n/^3i%,+^M]ncJQg`b36)])37,$O]X?[f)ZRka:a`4On5Wj^YWXZHD
%Uq(<S6o;D0PVNJ#EZgDq\O(kLFE.eDD"*[<ZYc[5!Ij(Lr2t?H&qe>96].bl)Of'sUL^kO'[<\W0S0LVd@lPS(IfC^8Z%J4aqR\<
%9,].e7AF/(Fso!KOU9uni[-H7,F^Vk(Y3RE4L-_)%Nk"54CO>aYs=nlUk"OW^))(knsl98?XESC5j]$q]%3+O.Q3sj\.oWW4i5a"
%Nid1k^j^H;59Tmkqs"mj_Lj'E#%Y+pDoG6_&dKTcgNV3>0m8$X@oYs1\<V<kG5S"dTt!(jOZgsp%I<*\<]2/kS/73LiMWPanS/KH
%^LdE_9T=oL*[_laEJ70m-ROoV"aKVS>*9J3]DU[/'rVGA`aqc`iCH(kjJOrF<.IhD,H>"#9i-Of=Lt.@L(bu=$gT%D=?r&*Mdm&u
%OW2@n;NI[Mh0Y@dCQP7+n+*hub@ol)4^8>O>?b1oVBAp:_VtldhocnBN0d3TPSVXL^Ilo_P>F7B0L+C69pXlHPW02?A-5*P?'n/V
%5k8HMV<B+*+Vp^TooMo+i8U8s%^FDZ:e`!V;8nFO5SJ)";>Gcs'[j*CTdaHRSY7U4)]M>BE4B?^*^NuPhSAfA'A,q2iuJ=P2[JJd
%@<LS_]SfGiVHafY_@t+u$@\H7Zj6EIJ]"jLPm_#RFSLAGMPu?A4Crtn-;@>mZtQ2%*,[HDk>^+V2@Z'D9dOKJ@<>XQ/@j2ZMRLEl
%"gpJdZE2gmCki9F(\^rM6/soB0R4UVb)eh*jfe9`.<ZM:7%X#8:t(<n?#^$`H?!=9OA!%c$L&Ib5>Lf>FYYd%6MB\9-f\f,jQsC*
%j9(=T.XO`[@#H9E^*=j-pPd`gK>X!(,6;,Q&jB&ijal_2l';TK3K_W:j$]K=RsIG286>JDN"ZYrc'pt.j2<ibh;^tr;*;$oST"lC
%%Ru)dpg+\NN[W;@8d>2U=*=QrWg):(Xsh&.'G"28R08B[,#44f(-&OZGUC2Hk(C)%e//XPC\s42VYhcGfcasl9U^QR(+&i'JLt*E
%@KJK>S,oQS4d9,(ftO`-05_\q&dZE&XucuHGF;kjO`2hhc:::Y4%!^GjcTbH9UBY>B[Fio!%#^uh:P'1ES7%'gdI/+LWd)KVN_A6
%#)aUm7A0b$nBcoIXHR0ec&0o7QF'<3M?^\CkYM<=W2K'2_;ng:`NZNnM2Rm=.GO7*MI9dE"[u]V7:!W,#htJInJi,[)AMFiI-!`$
%Nde:O!@Y6eD3aFIdO4r\_FE':dnr\_Gk#T0"&RlODecO#VG`cf&Fimcm>`B*Q9V=(R?YSi+>+0!8KphS>@koqr>1UjJ0L4%jisSb
%$B[I98n%JUnJdVpc+o2E>f_VWmC9Z9#amFn7*AS/35cCr>Qiq`eL_5fW%dQZQu+1n'Rj>a:FZ>ZbOALrBnV?o#1m1t"VH\ZJ-*.\
%;D[$hQ@Lu++M")E#$Opt"W8Ii^`XdsPghHf'Ei\ASBRBV3'CWf=&VrVn>i"2n5:NdTg;D/?[9X$,LJGd:L6\K.`i=o;0$DM:fIR^
%93_Ueh9[$idWW[1T:?K<3CkP#,OlWV'c'41kthl.Z9!W3Wm^&AM,?9_3g=fEM3Zt,+Yq#7MmTNpKP;hApfQ1q,nkPOTsCG&W%JKQ
%V3$E6:#,EB!3keJ%aao,p>-\0oE.AudpqDXWCs+!4`JpdQgL^W.`Im%hiVR<Kt\$`DQk()Od_3$aR/S!&Jl=FpW2iEg:S"gdB=f@
%,n5t;-BGCkiA?WSDZYn7Qjf=SE<4s*Jhh:F9d[S"2W^cD!_%QF<'nP5ORZq_oK#aT@d>n1h?W=BgP?p,dV:cJ[A*e9Cl7IB(nkB&
%M&go956/[/-C%=X*XP1GYqT/t'(LEr<f>"@jG`5'?#VP'4O9+!C'8QEQMuFRYq-*K+3L?k1U:"S<PoL,[Y4t8XKOV?++q^fNZmX#
%EC5c?8mb4+p.7OG]Gf:^LS-c"_<#"m:=ud<I9r0)#ilI;>"E3TU7d%76I_;KFa$Nif!i1ZS0*<D3"?g<H7BjHn!MA@'9@Zg+KV/[
%8:`@9U/3)Y'q#,?.7FYD:_L!0`ZcH59%=_:0VaD[.4B3mUSneiTM@d5PJWThJ]A)LXsKbc<PoB`JF=Sen50VTH?=2&jDeW2HpbP=
%$Uq$A5[DTYNbH9A^bAM9nF-j:ZPsl5&uriI!N@2j[tFSq;f'>pr0ELCIe6AYnE!r),7P+XOZ/Uriij>&(rSLVV?u.e1f.=sLjBH"
%1c42!:!mV\`/gr"kYT3f!^ETB(>+dGY>#seP[mbZ9,]-J`5>lr2N^g@DV.bhRnZmX(gS_B"RgZ:rad;`72dO'3<mn0Sr7,+4JT:Q
%TU^)Q@Z\1gG50'(C$;N/.EQ60`/4HG"Gi9n'H5?<ieW^5k`\IY^+G@H(H5$,LkiTu/Fi0E]),%R&#D04-PSGd:h7Q'*DHNLe`7XE
%a@=0L,0JL+X.1$F]3n.t_;^3*Qh!"E17SPhZp^bsl@tIoSW(Qg9(=)`R5P9>5"+^0)TGmtUKtf=[_^qcE9o]\5(P.8O+W$,nq]#P
%,2YYcL#=u$LOu`K#d8DjEDr1AKF!I.#.aBJE6-.A&F`6QNBucd\%H#SlGP?.PMn?[2K&YV(Dm[LTQ(QN[1RY-+B(r(INo$VC7*N,
%_3Gd#b<W?a>]g:jP2n5B!gU_;P[_'m6Nl3*AQ^in!f8!2kV1Y%A?]fYU&$Ue7%6"7Tl76J\=nXX1u'4NMBOs+>C7fVXF>G<UL5F?
%UjC,;O,\OsG,UkN&%,Ma`?9WX!1jUA.)5bG_N+/*#q26B]q^CVV@js?E/5>c)^k6sTX$Zd;PbP"L(RnB@"Xih#*?J+F*$r`p[?Np
%pGGSsA&WU5[mDLPYlqgr1FjDp+ub6pTtp(EJ)Kp&?]O=mk7^^4TASNm5M/0O@H@CZ%7>#t#jP"g1Ck9,-ARs[0EcW_JA1*[_H[Q"
%43Y"3L-ltSGXc)(JNsZs][Zi]\&-DZ9i[":]CMLP\g$e-EFEZ-'`9;hS/6_r@!&_B2PY[N^/4JsP]^SFQI2FML^eVl4Jrb=l!b*,
%jdA%V<98$U."\@O'L;EfBesZJim31?mIlXSJIG>Zc@%,sTl%L_`[1/0*/S8`?riG\$4RJ:1^"8jF0`_:-dE)2O&q)t&;\,A=+`jt
%GiTQp9(WR"9R\uAPRR4^@>OkgK!5sjJe7Yq4`.Gs5n\R?b>U)m!"iqTZ4=;G\>oilaU<9f":D$1-%LPu.g@C'73`C\B*b.%79kWC
%1a':>?e&8!OSspPN.sUn4U4>KR%5:U)PKP3JLifkO/kTOY(-pR?7("i,P0lt3gNa^p-SF=Crnu]2]u]"Z#q,soYe@U>WWQ4A'g(t
%TKk'lUarP4;!N=?;kQ#hb*6BV!D4Ld6*N-Dg4E7O6cjIWJg89riG]Eq-+ad\/S]f`<ilXjF'0?AZ,LW@F=;qV+d@MXC2tMo3s]t/
%"[PBojBi(cTh+[[`5;6\B]ibiHrrHtO&.'H0TX,t;&i53jpaShGeXZDTm<=`_%7W?]+NfJqPq4UoqQL"nWOH';*W`*olZA5'1h#*
%'$HFp$>h3u-s<n52r[)>OouIPjT<06a<!q-S1W^p5ofLg+Yl#?(o@^+=S"[Ob(qT/JLS("5(Y^O/.dSB:Q_<k]l^fQX(4D31\%W<
%5bYiB5u5cd>!aj&i<e0NY98**I7$NIXnntF!S.hoe,ULCS0:Q%Ei"6W7@>6BFZ]t[>f)8X6"#50iqkj..o.O;`L[F;po+#p/]"Ag
%TKF;l(Kg*6"1Y#&cb]eYP7AD+%(Q;?%S_f]"dU`sA[M3'4J#23FUAYPf<&F+'IP!&68\OQ\PgLVBBU5uU)ln^/3/h/)3omWcF+8m
%QPM?]?]NXh=[ISFO36&/fAqnt,\_n?$dQC&aAsO:^uo/WQE;8XP(9l<JhoZ?G>Fb`mS5<'VEbYWHsrC-'ku^2HtA3>)kjnt_&T1W
%*3N'Si^=>u@7_0#&TM&@Fr8WuRiuCc^l[Id[KQ99OjD7iJI4J&T#SZRkL'&bN"5F='P7f3HsNO%@PgN8S5;ZLB[]EnoL0KMLTsAg
%#4e:>LElI`9]U6-Ci`uj.""7$Ku?=tCW>rf@3R['clE++\H"q>P\T7[DSgA6,$R0daX#4I28U>Um#b*MXJj3nO6VP,pcoRB@]3a%
%"XQn$]:@4*$&GdVLE&ujUL_$<_\6K+1Nk_sEgZb.ScfB(j*6"qFNZCK*<_B:NMf-0IC'i>3(qn(T3$TdJl.%Gc?_ibWm9kH,p7Wm
%"<&pI)(nD=!kq$Y):bCJd)9%M9lZu'ck9]&nkf7/K7:jPZ42mCPnDXcnWba/MD>6>#-8d=dZE?ko2@n.d)!*oCbY8rW33':@EK#V
%3XYqOT1!'!>jE4I8YLI9=NaVI4'Yo#!X:(1LCc_*)@Ich_D+@/Wkd$q?>T/V#39\29j%p1Ut,!*5r#5O8l5aGRg%MO6LH#*!N2^f
%L!0/aZ<?Edf'*fSdp[=Ji?AJg%Wu`u_:YML.1%:)nP#f)eZ$nqa\pTQY8`]0.5PANMUOoR&a&^><"M#M=>qVlE`]F7*`84L$[(O:
%/e$b;'.eg#UKG=QL8.LsH8u6kT`hR83BmO_]#FKk%!$_=LB24H;'d&E*50G,_OdE2XE]D;Y>C1BV.S^n5oE6hM=+[Rl7mA>?9s"O
%S@0'B=7?4/;UjO'"KGB%>79S,W2DBm)!W8U,E09;Yp)<l']D&`-q9'7ZBQ$ggTc+"S6.0frkOl_`;5?@;EcXHnM0ti4tJ14Z>`L-
%fSdACdj6OXfqc]%C'^,oLBKe0),eA/]I4ZMijYL.QO1^JpU#d(#RK1AM0k'JIE:@Zh*".M\)iCVHcUp(3.Ej[&$]O(pLt*]9H?nE
%*'&fTKt;VU&_/$ml1($"hFbY4Z<W6N_\D:6K*9/QL@;A6bQ8<O6;]5NMb5=;:VNu3Xt,hg+_W,PNTffHiEH5XaaH<,cgXt6I:!0/
%IOO>=?=>$B#RfTJ.K\Sk*U[@7MT'RBrnI\SLF?oTC*2RObWl]XGnh_=2ZbTV-h&a.>Yn%<HRP9&aWhC:-O'.=l4SX*:6n0j@/P\B
%JUTEdNWZhU*bq!\oS2Ceiqm'7qm,X[)=mckQZ"<)#1n_#+;rK*T==="YSEWdd>'_E'Na;p!i)pT9Bc8rcQq/X'$><(322]m\geST
%)QpRP<0"RBWYeblr()l!D6dsA6aMtRK-gCYb<[b(.`CVWMo3pC4M$3b"-BgKnMCp@%>LN;9SQ_BX&(F$)JLV"h9s=?S:MG(>-dXk
%.YOsh*fiQt(%qre'VgD]F3,UO),::5Gu^q75uF*"jBtVCS?EQ%[!<l-a2d0C`XNS<io)NLX%P6^.[+^,]F@rdX$`TC6A4QqZe0li
%#I6`.54Vj)[\P)YYKE&E42%=@c`6Zs&l9DYXp.<P?"a=W3-_Pb<,LIt`-pYL-4OHAP2S%O4+p'):,I*A&UYY6X[fu939khk#rHU#
%65HOT24P.sj(qF1C5C99%>TgYA?b.%Gp<msg?K=`>!or$iP^jh3";\.X$NKa-H!f9>f9^=OT6[t\==HmUY1%1DP/hCfSC+ri3J%@
%2hZc-;5Jmb\T][L:.A'CYb\/hd<mBiY>;2a]GZ`W#?5Vt=#QSt)3:(KZro8"Zoi34#`4Jl?:lBFf3%sH-mXNo#LAHM&B`?cQ4t`C
%;[>Ve,We;e&<u=2a/Y\0"A2T`gb:b`GdnTTRTG,2$]Kj6d("o#E!co^'W3lT+V?OkGR)@MW7%Dm/5ZHt$?>jt_$i.5JZBE:L8USB
%$qcY<ehB.2D7B_Ec)X.*"XZ&=UN$n'KLSGeqV[B"=YYKNFfNq=GQUI9pFc[uS]HNP%7E\\%9n?1!6@lB(h[[tba3i`RCfM/J4lOX
%Y(08$6PB0[Y`B:GV`!rY;2;n6K=t:H'F;q5$PaAJ!@<gN76c&c/o8<WG&V_IfOWdj;uT_R)X<e-L9IV8'20lXnB<T<"89ARg.FVt
%VqfLY(P&l-A>V'/Y,f,X<b9GJFWANthI)iUM6.=K88<&5B7?Ad\chAU:Ue5o+>RN<(Vgh^8W3K9\kSu=nt1@';O2;:J![uVptO`q
%"?<8pNtgk;,0PrVel!SP'sOdYnS%baD4<N9`2W$;Bp`23ob_;aD(hM?(U%F!*s:[SH"oTf0a5QD,nh"eEp3u[8%(oV%sUA5<#?SL
%]>G1%+r<rUTaS<P!edWpWC%PTT(s!BL=2rRQMMHc;Ln(o+F8HJW`8d.'Z@hq#CVhqF_p`."1_tS'.Kl4fs"B0>KQbQf<J;`%tI>m
%SArhB.03m<iSqc(>eh`&%AG(")STZ0=jmC!@$oFrW^7>cnf7rUK)4</\N1Fb.?0,!aD+)uCp&$Gk`[Je=k5+&mr:/(;,rW:S;79_
%7qO(?2DqJOWU.FX[)H/NaQ64@@D,p'g1@iL'N,ncglQ/'Xp__`8,6KafZ*%:U,)e&(DZH&O:_1ah`_J=Af1q7%E2>%bsI<Re4Ni-
%La>k6Z=u"BF:q^OY*<<-2R\jE)@8=`gNkW0_]O:GJ6o$HNO`=BqO1oEn,KBuA)fYHS@T[Bn^(FQ0o^&5ZoK.;bEj3lnfg,HRUUVZ
%UOh*7+i@to"]FM:02&[,[`Y%47ajWVZl1c)T/Kr-`C4Tu\P#I(7Efm'FAr;/L>;!6qJ"%.,aTm+8EXKL,7R'O%SP\UC5<8fE#8\^
%c8:c!P&#>t>]u)TgdgQ8lOK'/M=9lCcraP+28ie)qG?&KVsS>E/Ou,q^*h8heAQk?pg0*,%qaN?W=4j5a<"G>6eDK.K-L]>?N\'V
%q-,@)R65i*%0KnFJ_OJ22T\WJ59_=QX:R`m7GKt=bq++9C+6"Dn4<rFP<*0(\`^@;H9&Sl$I%<;qO+Lejbk^V6>\\$V"[gW&&`*h
%\'tWoVJt8Fm)RZAT<cX!8VUN//oT_$XE1X8W\3b`K'@$2N^#KE@&%B:h6=Trj;^:ESa,dX$h'X5]S._*[XifG=+ad7pWKfX0?k#,
%0ejI&:5$74f;i'9i8G?p--l'%26[^6f8'p8ZG9hba=NYl2p'@'qZ6/!1?-/Z_:]>8[ldqFiWj]cUEI$mO5R4&j*Fu;<-b5\nQp!O
%l-XO/P?[(j.,8-.eS<j2fGRBFqskRRo']rLk5#c*l;Ad5=.7_r#L;[hSGObZ"3(3,`[oJMp>]=]!M\f8&"1emPRi3AjR,D!4)%0a
%N3/r=X3s&uZF-b3H*\bq6TSBUM'n0rMf;+cblS?V"HhYp\nQBT#\)Xt/,88L@+aZ'Ie@c`pA#U:gq(Rrf?Wm]kmF!P+4mNqDi<2F
%&u2/%k9`hVq-#t=p7tegQ\WZC\=/AFTM@ltqVBT\ohl-O.T50(6E@kG!S>YN`8ooPAbV*(d]_P?1Y\rm;6?d`[Bea6@KMO8*!KsH
%5,QkiP5(#hYd<PTqbk_5o>P[NRhsbD4Ah/Bd#.?.Mm;m`X2hV`WjWt@M-Q63Kao0U<q7HQ!P]\VqCF/H:%)AjAOCMAn:!hS*uS6E
%/[;f`LD.l$G%pMfWN,7A(]mZ!LNV(iH_/rj)c@@oa@?YH67otNU)#RBbruR0AX22#L='@l.me:C`OXp#;H]PH6Sq<sH%Dt!1[]$g
%R#-70("-l#O=G\GotiVF\#iHi:=re*0ql4qbI+/OQ"`El6"W48qWc%n9SlBuY`@;l?9k(!ekr%'g;::[T=Q22d+,>>[2K&t"C1dM
%j^"1o)_+#ZXk..ik;<D)6`;J"Npb>[)nOe:?;%DSUTG&0T[B"urdHVl,_me#)i:t36,lNF1G/>7<FXM@A8(AR1.lXr)*3FHoG[I)
%mRqOZ_V2%']a!2*bHgiC4Pf,Al#@P;H^!hQ#p=1(EU='U9R5+6k1L9YY/dp]-GaY%r:1r;D^"[Dkpp,]'&I\3,&q^^#NUu]UD_>o
%"4@^Hp9*"F?r.Tr4,u#UqDkpme@;)cLn.!#"Z_&XB!HAC%[LN[;;"CU!burkp2ieQm9!N<[Rk&hoO?69j.NB[WgBFp4bF0rM5r]]
%R9=1KFdGi=H\MYp97&q9[:9YW#<[+FBem%\2$$jQ'Gb2#.]]k374"4Gm(d.u:*[Zr%O"6Q)'W<93IhL[jB:XRb!FHh,0_.57;bDI
%"Pkd5==KEB8<pL5%P:!"RsfJu+g"!UQuQEnDKi4/.PJiT'CebsPkJ\U;&Hp[]o8Dr`?JMQ,+6>uMcXkm+6M,6!!a0-0*J!A./UeG
%a0g/pF'q[N7ZWg3Ds6i0CgJ$t\#IA+_hct<MF=H2j[q;o%psQG+@N6]AfM:nXmNeT`=XXnqYc'NMIsNqe>lDE@Ir&[f>]-+D)@GQ
%V_OmtAimK\kN\sfqltkq.L"6<8n.p*7*H+C:&%hZJrT<"F`QP52P`#/[]$I-60@-t'^arfjuY<ujKP9t'$\d,/H3T2%3Ak`[ElK!
%<jdrX-njaNB0TP#EgLGW\NWW,<^mfiV:=\RI\u,)I8;]#WYr"4&jL@?dA2pem=?`NXC[K!cE+iOihMOWKA=:8',+Wt"scXCJBl7#
%@31jb,S[FX6\\2i,["$T=SQ24\S?+tnbTHXATls9+.DDtZH2\n=[c:a`f%`K`gBeh(5-3Nd7-JVP$Gdc116N&k#:hBc?#%>PD*KD
%m9gR6L2NTK@g*`PcQJ^Q5!HdEFh:MP=^gJ'Fb`CQ+.u'<rdgr_nQRU%WcG7,0Q]*1QsW4Rb_%(a_a=L>&!Y:YW<./YIW7K8&qtFL
%Ki31]rfa(]_R>I5cgAgV;VBo^qliFRWc`:sp)4Xd'tUB#$[N!\o(F/KAljIE23<UnE;j\M&%Pc)"*D$`+4%Shqpg21'`m*1g3n3`
%Z3b:01'!"_;57B#\.@urRWIl^df`p8kZ5a5-)liLF5KI-(cj5*UF?ksSg^Mk3m1<9L.[P2):7NnC"RXSO#68!A.fNi1':*cLi-X<
%9nn&65h0E'+[3h":er".aWW<$OAtaWDKGDKh+l]B=q)1G`\?o#J*V")dF0,fM:9?d?Cd,j]R>YXQ30'JTplP&U=hi7j_en;D05nT
%ki$noIQ2_4pY?TuH0g-Cp+<`m]m0#5Vj/2=US`%OXH'P/.o%'W:5I/4``$Flo+)DEdKU=uYe`J4R<)c4+4;F#LK`b-9d19I6@_OX
%5c,^'eofPK>[%<Ab\^DC,fYS3W'a9@4H5Ho_HuQ&2gE`2@VQnopn$INS>2=02j?$([B=N`F%pe=8!B@YYW^kPC=sG/98K=<QoPR_
%mU>gFejL^3g3j\YA,t48iA;`ITqFn;-[tJ'7dPSKPm28BQ6,2Jj@:)CZ7rk#P+5p/?>E;pFsMh-fOa6qUXR&2@M)Ur?j0[n`0@ps
%VeoRj,KSbn=bUopBgZo`Uo;/ebFKCNHHk;a[)@^CR?.EAd7aTM-V%s8!i\(>VbTl>ZCIt=a33`dY1017?H4HnjR%<Qd!a!EYt*Ji
%-HG)i*72)$)>,J9?;srj^1SG(<:>qS7,'dd$Mp!7+;4GOPmtQ$FB=meNnJmX\E_R<(3EQ/NcXTUjl(nCL["u5&f3(eiZVYN=C,Y)
%1U<Zh7fIRor&&Y]B:s_Kol4:j.lpU#"Y)Bg2Y*NT4dGA!kUJl"X/;%39+=`R+hEPXDK5/Ck(;a5aGp==7&dfZXLt9O9k'2==*N7B
%d%tGM-"7XK(&lqb8pQeKe_DB"GtPEOT.qG5@BD!qHfKm(=?Q/O+8sfHm`(-eR_i7+<:2!J8U(mB4k<,Cfl.""#LM-#G?C%o8$[+H
%2!trk\3J`&D[[:]+qXTee=TYfV"hL@4_uQt?Huu5nF[KYOAl@l'5b0+@GKU`R3rV0-n78RqfM%bo6L)d\sK]5h>ORR.h[-'plnD8
%rO0$W[2QZO818Xs*8uA5$J88OqfFA3lL)SS\*&/\4EHiB@]N_7N!cXr8R87W(i*]hs%95c'`"7s-ffH?^CLE]$a\.#nViL/S[$T0
%AG.jT$Bc4q-1i?,J>Y(Ob"#W&#gp5b6h+Vd`srfJ:Js:K+':N.SO.I^?-/reX09Fa"',"3Ct(@r8%re:+.M$d&!V%$Jq)uQn(("l
%(JZ5hMU-,te")0(5\Y0SPRM.;VQ&RS*/(!OA6;S>Z<"nE5),pQQL[tGGBI>qXq;^m<n;%9G:W4eF>cbA?oj_,hs)d45m(+K;3"5,
%&33!d$8g#%c-?t9f&[:aB)L(RDj>QUW4f@#-!!WWYlTHD6'b`_ZabjpTi71ndH^31fg'tYKl*ei5C.XMW9^J$h?+dn2)`i1Tg@C(
%q!AhR.tCp=1FlWBW,&WZ"b*mcQ?pk7Nf2LJGO5@M,[B#-7/Kb7"3t#.^Q"Q5itX'8O]V"]T,_6T%\*fqm_tMlM9)o[pDNKUj\Ru_
%aj2*VW&(`og52d?0cO[[J7[%S*cOjiJ9W%P!@^3p[+)u$f'V?=&MYTDbJmUn5Cr1qhUQ%oUVA4`!Id=2Vca;LX8qoK7A2moD!8OH
%M9j"H]Z5Ss`b#9uDI.jnr*r0\dY;$S.M@fMG8EnhgY/m1UR!HEW]nU/2cL8WS8plT,hmIHV;XeLVQ8JW1,#SuB"'6qo0\$"p!^e&
%?'EU]eN2:pqV7f=/>tJ_Z6pI)l1m/G#W9uRMEq(f>dQq/L9bJl>3pEOa89+=6AACHlM5C-nLlDUA[c=R+c=ekDT<n$KHVfkUE=/P
%Hr$kWZ4kQG=5_?G/WBG?RFV.S2W`"ne+i$A4%Y!dF^#r=!KO6l"F7siYH7UXm^%>R2hYs84h36-\>#\jEdF7JJKqW`LC"U,_Mc*P
%?b[QX\2KD,Ju1qY13`C;`UcFUKqa44&uUO[h]D3-\9p`WfKf-/PNt'HM`O4c</'pXBLT8-)Y#:VUbJlkeU2$p;4YL+6jOL2%Q%2Q
%[rTK1"r?U8#A5h=Lp?(TR<j/n].U*glS]IsO@A?#1Yf6(b9H7^*Pn#HH#kI(FIH>,D:puXZj]s8jE?qXMFH'p9/r>>'gpRs/XFBf
%eNoY7/qlT:Sa\:\Qs.[RHqJ>FXStaOR!_E8IuK$rBl>:)@]`IeE5fIJ7aWofG8EbPTa:,Cf.p+/.DMB*lA'I-%$Ks2RrUm&c&ZY6
%4N\AK+0n/,.I[4p247rt\DF:8_6a7aF1>5VRTY3q0(TT44R3I'WTl?HN7_Oq8=j/n?KtBs@d_BfcQ7Ci\+&%Fk[Y&(8)WLjd,c-u
%C..;/TU+ZVPpuo:NHtfmE05[^+(T.!P@bDh[ZNVUf3]U\qdE?6b(j?sN7='[E.H&DjBsAdC2oi-0#JQ'^8Y;%9>btc*BoKQoog-U
%G*CdLOs3*G^@MrHKbZ"&@GY>Y(.A\!(9c?`@G68^_+W)>6Rt('C*mPhRN+@.T!>R"L'se\YW<L.=;2nm%_K_62dfbURtNe,jD9$G
%6a7*\aP$9T+EPBLeVDt(U37@(8!JWYEqJ6JLo"Qu4>1>fgRHMnX'E>',SJ`#EA_)H(d%&9i56-(<J)LJ_,nn@M;N0"?G;2D!mUja
%@X9'2o>5ER2Y%HJ\//1nr/iM-O!)M/^Dooa.#tE.YlkALl64Z^r@f3m]2BBZ[#(EX(%r[<N>OMad9=qrEO>:kUc0sE3%g0kVu!^q
%m`2_ArE:B$f%D.3#5;:'DE`\p;SL,uOrLu:]O"fpP^Yi-JOWSpHL"XPI2n94j.;e@^Or`Dlr?-r+N+r)c;15F:ZJs0$l9*?e07W7
%#M+:>HX,Emo'<@:1#mYk2J0d;Ze%j2&Hc5YEas<'IeNRNB7a;Sh<kQjpEaJ7Aa=*R08CM>4Q]s=?9PR5o;If7hk=[[WUdOma9X+%
%oZKiGc6$Al!S:Slhk9Ju"")it[l@toDWAT7r!Rc81Sgh7?]Y*uV-&Er?jjjSNhn&!*[oI>@c(Z2b:*TE/U;^+<jW?`'gG&O2ZpT(
%HcK-[6E,S.D.@l\-5"p_[O-j]#X)1=<NfUU$eUI*Rj@YkY>r7IRs<o%>bTVA`T>hDQ!_fTN/,pD3H[qnr!94ccAVHO6<6G[79\s5
%n9f(<U+5o!hniNtF6cER&b9a>#d"QB@,ot-a5.R6#_!M7/dkY'Cg4)[o@134UcZ8#D9@P"2D<Zk!8Eo*+0n/,.I[661ojR[_)0R+
%Rd&]N3@]/jUL-f=TB(Fg&4_<W)Ma+VNU.Fg;(6=P$>qmd.F@&0Z-<_M9Oog*XbIH$,ug+EhD$Xe(s.ah?<#NliJ!e6_JV92"c9Ad
%'38pb?)odb.,@6diI6SrY=bXe/QTLL.MUJUNF"98G;aMhe@jl_`0R)XM!(rPDu98i6??ZsFlc0'_533a;pb?%N8E\`Ym[@"#$RVX
%dcf"SCHP=*@OlPFX][=5k3BQ@KC!?]Q_bueFLQM.[KMffI`MSMVS)Tq;i%Ue/hAAYf:)^L_-a<\(S"/C:kVBuJdX[,beQI.Z\L1E
%lQ#Yf(-^Y!mKq?s\8UGB97_Unaa@u*7&&tT*jhDQ0Ac.Th._tQY7%BPTPD)68A<kCA]XTuD+C7`^j%.G@,*D<XIu.^i5;ZoJcQ*n
%=M2UAE!Q=6KM+;p"Ri%=ncn.!FQXCjYB:*u>o9p?fRJ<qouhAZOTNmmXJRiF"nZ@m*R,T=M65e5eFjj6obA1;eUjX@LCA2<7lpHO
%lon/P/,SN7Unil$>H+h*J=Glcks70f>j[SPK<j5\XDu9qDaI]Xm.8\.>KID=O8rC?%hTe>:L3uWG.5iGpNJcU^k._-U1j'6]22:/
%SRec5ZW%5U1&?Ppd#9-PiRu=C>gA*M1>mNi%j4Wf'J(^'L'GZJW\Id#YTe7'A:H4U5^ZBiPV=]Jp#t@k=.:Hb^g34ZiA?hCQK^ce
%)b,p*ZR8FsrCCG&Q)I>W<J4Z.&G[`[&Wt^-HW67n/OV7+O)obsKj]@V6WIT,%-skE+B[$I)\uKJ2b<8oNG4`>U7@::VL)X>2D_`-
%a/:Q?ngM7i+H/T];e>P?j",.X_'bL>[`;kh9m("`Ec3K3HG+0\)uOiH7fW)n7rXl)&'ZQD(Zg+f*/tX%?H$,Xjhoo<+K35a[tbiT
%2LP,n&cK^"GZ"]:YSrNd*LE=hPTr,IB)BAl@GU>h]sJsX-^[n@<r1s3P-XoU`-Y0e`Mte!E.@bMS*oN1b)$Edi,fS@(*u-H^6m@h
%N+$:<3TM9E-j8/CnjWIdNt7X'=T;so&8+i'5U7Q\TbgXFKus<]DT,"r)q2;=dV1Ya?)`8E6u1Xk-5I,$.Y-bH\kP3rCPml3]#R\X
%0t29ls+$H$>;5A/NH%;cSe.6_LJe6E#X-@59TGFZrlAkfH&BV.D"1::1'bCEm3-gF*QU83%PJBV#EM9[1/^^62jJVY[ekg&V:osK
%%QS#6fbOa;[G&dTWQXJaVQ=>l*.G)H$"7amSS=1mQGI%>s0N'8LOs$7ql7=RcH-!%UF7*L=?/@b`Y*2N&,SHui?aJl*eXZn:EF,g
%iKtTe3O\He-"-r*jVWnSR76)"F'$?_B5ORL14Zi68W2i+Hd5XcH@^+A`:O_2dgnK:kWZt(.\f9R214\8GZ%t$k!$6$l2iL?qI`K;
%<YRkk8AC3c!=V1?DgZH=251J;W\e=1aBAoi)[t7'F7mM-(PTHTn#ijR;rJ_N,7[P7<nj2nF=gR/[nacR\2_."0cB5!49r\]A);l=
%.1ak[Hac6,l7GL68YQm[jkG)Tf't#BNjB+n[)$VE+^KuVPXc9#D[W9>&kR(RKN+#,!"qlJ:(<(t0XeMM*:)V;L>)/54"3oqH(!?,
%/VATbdZuK-&;nkVknmrrkc>G9$-gX)D'L1L@kG3DDq$lf/X<qb&>GlWeEfd6$FA19@JY!)4tP0qM2OgZD'VO=+><\![;\&]RGi._
%3%JQU/\f!`ec'AFP5&^lD"DSG389YH:,c6H=\ZU>q?[U+8m1<?Z.;E[1G@4(!M'if;j("5%dDE96Bl5@Xf@`YPeSaZAedBg,QW.H
%8)(RK)0V;gRd?i-4pm;5>(eTTGXtDhniB+uQXc:?ocLdBEH#fXHEhCQjU:f+E#:\G2JmJ)*54$Rk\ps$6SbIS+uVoGA*;QG07dKi
%$]X0_8)PlMjCADrYWRiI9%U,tZL,)/Ql4Ql\>@]+7p[iFFVQf$qSsATVFI$""d^CTIBBX-eg!RIEY^2%GOd<KGHC>L,<aK<S,g<q
%@$BJjN5t/.'/eZE@N^Q?HK;)`pP+_g9CqQLV*>0!NN<oOr.sH6Ak">d/M^H#XsH93QfU"O]`0ZU(@>[m_sW-i"`B'[1(I)Ik_EU1
%(q),dRka-\pak+Z/rb_CrUf0Fk?u3E_7R&H3Fq4Pd@68.QN9.U(t==fs7NAS+/o@ha3S_@Mf$U[ZUsL6)=8XWk.hgb#KS-C_011E
%MbgIi*=*)MeBffNZF'\.WoZ['B,+>a3eh)alq#hMp+qsn0nXZ"dprWIh-<qJhJ4Eqe()$^%K<j<DT@p8_WCsuEWN"Y3^+=GU,@#1
%YAEhbi2YfY`H8*::'J!SUSsX?<j#Eg1cP5]%OTCfYq0DbJMej^n>MIt$u]?,jPP-a7,S;!m;<j].su;\=1!`NS`8PhV<R(#['^S\
%rg6:i-^9E"!j?<MFo`VT[^)kP=AIP)1>,62*YW]a(?\BM=*Mqg1Q)hi.i/$*U2J=F38aocP<t'bF&S.<1J4(n-@2'fmUZkb_$(YR
%_+qkjTN>]4+J7,.Wot'K-NNC"Vb!(7a]t(=UQQlWSPQ(>C3ZONrescZ7*S\c%=r_Jq$mfZoY$F6BZYT^;*+IT^EXVq.5lWs7q#0"
%W3h"Ui?/G(\[)Z`VXSLo!5bXjiqXYQN.\+e-o*2kd2aP";]nZN38Ut&"o<)VMg]LW'kdC\A=8#.p,Qt;nIVZm_JVs5h<'o`:-hBL
%mulc"TKr2_TR*8J3"cHg%X^AVa-Z,m35kfbGh4s/BS+f,P+L*lVO`P;Z[`\d2=Gk+[=hq)[K$Vh6RA_b@G'BuAfqm^#ML%)^J-?E
%:4'hW7gcom#3TC8MR<Uj8u6a*eqO5U,Qq34m58oP=Pp92lZWp`(Q0DSOb'i-c<!l'F8ScZ!"7=8<0j#cD&Ifh2JSC*nL*I"`[6KG
%mu_nAh3usBn76rLbh(lUC1E2gng?5Je!?.J95n`W#45SeZj%6EYm^]PN5%%uD)8&N6/u!_)k!2<co]]:Ap3I';II70%jK@L8`#]p
%8f%7G5[c^[n:Y>):l!aR)34TT=_mhJFc8_E%t0Gt($Rs6U4G^lr.Oc*-=)X3>^'S68erFtY:geXcloG&_8c7,6FR`&AlnC_[HYs9
%K[%TkWe_X%,5cmZp`74K5I=IRI4<SgH$S7Zk?rnI;1ih\o;jQEomm"mSPPojWI2&KVEOdh]:\(Z:`H`HZDo?iY0*01jiXMLE\>[=
%(jhFi7c^&H0MGR/_kTC!8O)1g@Z=bSk900BL/OE!E.,`,H"#BH:bV\MABb!>8lR"CZa$L^_hG(),Nj#(SN&PPf$;h^ULZ?Z0bua^
%Hd/u8L>"PQNsqQkGS'&c<Xc2g4"iRKT.i"1>!O^S_!Y:k_4h'D,YBO62;6=kYXQ:N)<kpsiH%YD[^$Cb-AI3>=L&r_"+*%3^6L)4
%U,)VUT=\3KPCE^p<*s<pk1a(R9?n1X%tk`_Kao8-(OMTM'm4Sn549ZXUUP\?7`d*RTDe8DA1)s>(A9ll@VcB''4L4,L1kA_VA!iB
%nH6C>=P[s=%bhL=o<G+Q82jHl,_Y`*94[hZf[bej1[O'`6t'Wn,Wj5kiO[5Q&"[9c+rQQ>95r&i?;QbtRg7I4>OPGc=dPc0Dp@^V
%a`ZC:CBYKLQb4(`2<sY3a9=6BV_MrCgU*pNiJ5m=55"j&bgqe^^HM](@qKX.;Y@6lLmmdfX,Ydn:h3;oS*Fo<H]H,-ENV,S8t(pk
%,'[LnP/PqP&M:(OD>J\mM8f[-cY_mG9Cl!(_R8dSjepPpm#=APJ1qsO<!re"$aCH_)fYt.pd4EG%/W]jD=,UenCJ11haqi>;nLk:
%%sX"1VAh!Rpc;^3bUXoB1tMAu\%dr0nkN[T4AVODokh""7bths`RR;>rdjGm?kuhabAH3#-"!.G^]Vd>;Ec^f6Wimbi6UTQIQ<J_
%9PeG=HMJGJq!t']MY;G]pP5FmV(8_S&jKb5-<EpYoHIZ6A.GT%cJ"h\OIbdBfY!6n;ipK-;MQ*Zdem<[$MuQ"6^j/b/Ne99%fJ8b
%=ncLH4HkGplKFJO&p[VSin'QlfOSV)@EO]U-,u/>>U9!@e4(m`EAt=)r)r)<m`Lc!0-pm+Q-VbX$crr4d*Q1JV*,MDpND8se9o7J
%8_<'og7IYkm4<%2f5!eqPC=bR_'r5ER<`OSpE<7LapOa(_*tSk<)_t0:R!N*g<NSoii6If\HMpV^Lou>kQR%jU*H*4,>32[PpGf]
%HJ7eSj\(5`PI>#6.-6Q_b8-Q.,d;rp0=_a:8j0B?o4je<]*]<!4,U=M3ejaY4J/@BV,F"PA[h,'EKM[;Vbt2[)9OJciqnc'NZ>i5
%nqDH&]b3)4YN<-pOGq5m?5j!_/8.5'c,^(*BdG4@qqC*omq"e_GR0Hr":":[9Op&+]hi%t\isPR7Q]K'q?iN8bGo.3fDm,Ojap.X
%'T<HcmZVVMppN+NrCr3uopLbRerb,TWJ=l>5HnTOLr\W1H0;nh5)Ic`K%4Xp(@5r:j75)rS<kVZf\N:2^45_=OV"EhYLK2LZbO1I
%\H]asXKgrVV:VjdR`>ch'Vumd0'E!B^Wi[\f%C$Jf/R@u+gTpi+fY)gDc[W;CLk#3daColk!tdqR;Ik/oMM.LJaP/.e;br`&]s8u
%s$"h5g_09r1$HBRcKCFX-V>)Ykr!-N>Fk4FeQn,@%dWk9`_[\N)nNMEFSnm5PV5Y2PADl&*S[D'MiVkaEN(oH^0cb=kQ6GReoL$M
%\h?^_`A:n5OmGPsQG`faUf;>n4q*Cjl@STEGl/,;[Fh/,fo+BYl`&C]M3NM0Ll';aRn3+EU3s)c[jtEJ;Y.Q.=ZGIW_>s+ZDR]Ds
%L^DjR?*5Gk]1J675%0"S45Ti0d5B5;X"dte?/C^miqgP+/NU@EniSZDPj7?.Q$T$+GR@sp\8=ji,t[CU8Hm*/;5mO6P;KmY^E^S[
%gu;lT1DF2!pT,W_MW,XKk@3MD5<q!=Uj:>V+1$M^d63f909<tVAIti6Z.7HaKZ`da4]'!(k:u<C7jE"N7pbcgC*V7c>6IHE_Q$X6
%>iB1-*%e/;lalR%n<2Y/PHE$04^l#tR7)sT-W++R-6MG+b+>sl8ifHV_32PDPSI?#m>Xe%Uti\#VE$m3JP*LTY=O,mGk3k?^iRb_
%T80_DG+<ZA$i&g'9tMbpk[*DW[@-ga(&lLQp'q._Z9r8I!S'_G#!AKL*2=:$>HVH:E%L2Y*@B;oYbUH;mK%fiOGoEF%i(rMAUdLJ
%pNa3M8J5q1X>rCk@hrD:Ip,[ZCQ$X2Z^i^!;B=PBq-=CCRP^JKbMBa0DqE#6o^\.fO7W=^%Gm/[q7PG`/WX2aB\n0DfnHoLITi(/
%T(H`lKK@P*A0P5II\8)J3/O'r^Ykeo-uJpAc4;'(#tDnF*/`W=eo@AsP3KX`*a,R&p9if/98EZY;F2[QcRRHF%CkJ_(b"JJ`-t]<
%NtJ@YVM.K]W7"%LGA@,76?EtXN/XE-[UCa]Sb^$PH*JfW#`9:1`EH-(T@FDrDcS,7hZguM8mPdqhebc<^+:D5B-4MW*PF#6OYtjW
%HQ$QMTbo"Iij/JPI^ScHR=C)?.I$bDZ.I\n]0AMHKD!gdPQmS"1`R.lB1-#+P2#&a?D-EGhe5$g]]!b)]>hc+9CILNSYRNKAoH^K
%Z)tH-2S35N'.co6N&HCdr=-:]`63dYJDH"LqdpBQ2f$(F1BUK],^F\g5?$]YHJE7dmRJnf/0$?^G'DlHUE<bXWYUdcOr=o7*Dgbq
%=l-!6%*(J`a_5YZ9)TudB`SRFn4JSMki-rhnc<`#M2*ERY]cT@B:U(-'4bem@sg_nA0eI]'O'Rkfmeur7m<!TH??Q=`'%)Or&(k<
%m<0@iq91@TD[/!-bms8B;b2@:X%<6PEZ(N;U#HL3dTZY3YMa0$S+c4^`1<Oijs)i/ZsaOHb$3akQ1":Q%*E4HH=0ZmIt">-</VXZ
%'M_VoK0*PLgAF.:Yb\`D;Cn27kb%((jf!$;@C;.T=i8brXEU\RB"E1bf#&A%egVT`X7.\[[ZCfQjig*Jd56.55OWJdN_DJfWB0nH
%_m0\;@g#8E^[>4`/,no1a&0"DW.'u$`2hLB:pp4T*&/^Q-:Xro^J2QYN=M[dI3,/";3273e[F<C0[=`:.74:qG8EJ$O0bDIFOaF_
%j`cQS.*-"t\9Mt=Q$tr,\E^tq;$,QCQe2$RV%T3he#_SohG7m(4-k!udI:,YiDGUk:Uq5R`o3<ZF#a1']\>6BOc./8,Xe7Ya#b%'
%U_?u&$!_H%a\o:n'UC:hMfhJt[L_9\1!mJ-4Upn@M1U-d=AEiNN3]XHKFl>4Lh"*^o,^cI(2QrlFcq`LD1T%9?e%3<7O>;boJ/o;
%U,"U2$sUi@6p$RUj&=$T@VLbHF*RP6`0R9$L-u9WHQIk4-64f_S,Ia'*WKYim96;3RF&UnIG<8c<a7)0AEsNCcE:1rg$Nqo+mKmo
%$8VY!)SBBNa?qK5>pL-:6CQHY_F-gZpce6TK19f^Qt,#l/+i\tU5pR@<f'-:2RN>$r(sWO@U:>.%Jb]p+BCVWVmnYs)ouri2ej'\
%EY6-N&@d,V%oc3-BgeGc?,76^4ma!'DVDPg]+$\P#"nmZ&a!;d@:V7bW*+[B[[hLNoSgBLG]f:nnE'TDD/*#l/5q]ZG/5q"-pOGi
%Ce6*j-C%DG,i#;kX)c/1.O:-`b8.M')))\lo>ng@*#qs-$0,U+1_ShBi\Xj0TsQKl-$8/nT.I5e6?dd@``Da?'r2s,-R?]pl.j]-
%hR,mG/!)8-q\Z>-B8Cq&2[m1h2WT]$,jJuT,bVL841&&3G^H1s$u;Rm*hOj-B`AZDWU(QVF17kL%@RGdHp:6T'NmW_%kqdUPs"0&
%XE>*!&BB#apSlnk%;+"G!c@'En&f*IA=mA'+N:=#/+7P+=W,sfZ^C4NgLuhO3['DsaD<#A+h'')"%H-Jp\:!Tj=^mdL&r8<JH]7%
%[mtfnQ0FCo<.*YB);Vg0.E!Xt#AbR6#n_O)1<u$dh+*;e5%rH>PAl3'O$L#t4)cigGt'\W6MBm(%GHb_5:rFSpk0BhREL?+JSG@A
%E+2+Ea[LA/8*/`o`n?G9gnltRWmc_p1Y"o$GTY[X%Se_j%;;!k+lnf--ulfGM4@+/G\2U`Y3hH87_4'UBc$tdFg-r3)oQ$"k6%gI
%!qNN*Sc*7$W(^2$"6O,FC==/:_(Hs'9"`7"eug5tM[=_rqlhn2l)]2D1lnDg<fFi:`%JCJQrb00h6Zg,b:M*Z,pRmZK`;,).:`rk
%a\FbF*q0am.ler#.lJ4sFqeJb?4T"^E]>Cd[+Q=9E[7?J!b@HjbPTLle*FS/[_)jCgN'u.WV4eCe[^bndcZ3R8\'XQRN1`+P9T*[
%*,%-9\YYHL9U1pmA"+P?biM4VNiXn]_./,VKt%]Wqo=1'<2?jV",Xq1ZG1a&[%Z(^N.XWBJ!">V`o.S9T9U*MihL#MIe=jcaPjJ(
%ph)f9>Cg:bHp#\18Ae;'EfNbVA-O#X31Irm`AqYIEcMMP0isRWUD'n\_f^2>jY5199qP<g_f,4]lQ9^L>Ie<=fVYHIrV]-.Dm@rJ
%&Y3hp,NMN,-ZD>PE%6>%XaU*YS^Pkl)n0%EGj``YIL"STpqL_pSRlZDo=5Oog=a:'LNb\smG@`PDDMptcsLB4Y^Sf%;unp-;/MH.
%d<[3=\"Rq'&N+9OQMYkP2X1*N'8^?kB*,FOid.Zf9Y]\OJ`st_C#aD]qr;"$^&38XCa152hq=,:\pM?J)hq)i;:"2RY?OL\aM`HW
%XMK*`ITiVuot9;oNG$#CHSOI"Y[?j$+t%&PGe*F!eoiZ1]mDbXq;1`++`17`:eBQ7j,c1X*+k%f25-%h56g,\ZgpeA+.+!;6@d;V
%jej>GHF`-sNMhiO%JXm_a*LBJ:YMC9+4r)=R*j:XVb98;/`6I)EU7)S3!H#2H"ea.*9gl*#>ijABY4!D=KqJihs_U6pDr_mF?f[X
%oJ#kfq6U"k(hncsN]6TTp&`QPhKQWEoA9)ZfHCRG8mC=+qo'O`V(Wp__i5s`mZ2j-O,q&ko1RoK]YE\/oZ+ug7ECoZo;=?pe+8k5
%[QaYEmtT].>WVN.pJ2_@0A:5`W?5mZ`k(USFq5r4G&aob&H5B:i&G^n<l`7c3coKf^pt'dNX;M+nSu.i$lQ3%HfR,.6%H73ntN*?
%[>:&f_T=<CB%<!RQDCmk<AB9HQ_omi,kfTI</AT5'_2B3i9k5bf<)!3,Cm';Ebrsi4fo9&2eO[F,[-TXe]DMdNGbMY8e4o>ck(5o
%`"]+u'na`j-(`)P[WW0g<*cpHQ%l07TXosCEuk6kI[E-&n.K$\&WZb0;9.3&hi;ZYoF5Ri\0]1U:Zt/Y57ENmNsO6"A?_5\,G&Kh
%M>mAf*(\_Beu[Q`4[Q42B19hmAT&f2?UD#2O"(\2"%q5_SY"cFmsFP.:2tgIn)i_e.3>/(*)lE^6=jRI<?1h&AX[]t#a%6K2jbSg
%Es.Uf"KP#?]qdff[Ii&=AY>Q&ALYrSha?bhgJU_*+1T'c<89TB$b8#0Uo,\]*,]VWH1:Bo%c7/eZ3-3Tq5)61dg*R^DArJV.P8C&
%N758M7F>nWm[&C!8Ui5-.BplfN43ecT:VbGX443`Y>TLd5'?V;=J9o'onfQK*VlQ`&_.%9DRDR3:b=E=nj7rUf;#"h!_uU6C"66#
%^/ra6oC/Akm_O:*)O1N>lJhaGS=TKJ'nHRW+qG6a'qK4=;!_$EE)S6cDae*Am%]/0,]Y?-ed6L--ut%ubAO;l>@.>\&mHrR/Nm]_
%i"_4Q1.#2Y:q%j5L=D7$AYP@H'I3u@C?,!CH1rs>E(5h^;2gr;cd;X/_W=nD[4s[M$MHcH59e-FUd2Jc.e2rdKG"KfdX0HF*l?I\
%Y2P77N#\0^1Jf!1RcW(]:>i@UMt^(64.UA*M7bu?W6'AKXR'aj-n?RFckNg_Gur^@i:eg:10<i.j(SEqP,ji]iT0f?U)Dj+6b)n:
%g3IO3JoYOa8X4rZ6^G4e9hW_q7Q"lD31r3p[aCj^g/C-=0gM)FQ*>?mXKG&QSK#Y^!prgE23OsP$rMA@]j#eNMBROt=3^4W#JngX
%hU>8!*u4S_'H+&q?3hJLTgJqfUj@@BY[2Rq3,k0W7q>CGJapq;bTWCYU=Xm=f3Q?sT(b@(;dC[rT.jp086ES(o]tT</,4:o3a16e
%K&jA_kfoE<<nkb..pPr;[P0a1)Z$`b]S00'BHB5GZX!'Q%ogd,=]%?4RHoQO@45Cr4S#JZT.l1gL^[A.$&1ifL(gPd!0:I2QS*.S
%cmbZU+e+1Va>Q,hW/I1>9:_26-C5Tl&?!ljR9!i?XPFap6Y]4>MGE>%;#QrP]BV&Ac<aB+50B:3Rp/8bja!AKDgJ9;o#T,96F^[5
%E15k9]/((_Q*ZLLTD87a;-5d*g.o89Mp1%GeHUY&Fc)=cOQ[i?Ddl$bLEuUWjM*n)KOru4+"_$ZddG?)W4p`EF7I[2DSAa1FQ`K?
%h*(opkImn7r>a<i[b/Yk)p/98Orc8HG/YY*_Ds0U7Q0q<`Lt:hI-g4-8#:@.KnKpUc)BEf.EWt#i?^UP.a8X,6)<T5AMg-e'eIdN
%G5nJ3Ip,E_U?=G+/>(A"iM"p\?mM[SBOY?LiWB?W+d$ueK(@YRCqN<=O.gW]B,VnrkW69_41=[YLD_abTOJY@_eUAM5Y&JZ4ZN?*
%Q?aQ4QD<kbd<]SV3;-$oSA%M<6h*!uDl1]:M\SjMfWg$W:9?/2Jg:c6O_*L1aA_A,3D'eXl3K8oDj(\7@gYi<X+j5KPS4&_Of:aO
%?t:`:AC\_nPbtDmh"P[`;J!l!:H#H7cHU8f1sQ1%ZGse%Ns":5jsfr!-X@L@Zln*#SYThH>9%3f+@<IFfiM)@>S-<(PO%>C4E<cD
%7>ZNN`tI<h$7"2"HqCKT#;i_K;g-=NDs%XKTiR>NHk=q,QGLQ.o2(=+WA(/+?ukRk=F4mD*M/IY.gq`UU6I^%mm?dYmrS^,3=ti0
%!2TBBP-V+Ek=e75e&m^t%3Z@Ba]kB=f9s!;RI5(A).HoG9;U'W]^,)R2kT2<54o?g_%^G_<p<dBNg1c37^3tB@N58hL7C'H]V$^-
%R=TS3Z$<d!Lb&_1a;s)\iktL&`DG.K=DlN.4M;#EkE_lY'k\Pk"G[CoX&+Be:lM4q^@6ZfX;s1:>NZH[DE7<8F^2"Gd#V_h86:dj
%5<dn*WkLYMCo]jY\U71(EG^GDB4Q%[87W8fZ^tZ^4/MU8>Wbt6\NE9\MI')<0-Q(;TXKnechVLmbtX*P6$(.J4X`/R=C<RRUBX-k
%.i?!+[Jd&al4=<VEbK7seQQ.ci>D,$i`/*r]qinU$+7N8DD]:GO)TW"j\WWP`]<+:br"6(XFqZGQl]`;.YoW,EaK>6P0<[ml+B!P
%P-W%"3ek5q*^5!0De^ZMYK"M:nqQ%V>@c>5T)tGG%W.&e\3%eHD<*U^+@d#<jo6B9r6td$>J6BuB&X8Xbh;9Ks!b6#"n2>qQK0CG
%8u-QS1Qc2X[u:J>74H+2cIkAO=:\sC!Y$I$1urG.U%UCIhJ5[-0\+3>P8QMe&t2<cMJ<o7,99t\nf6Oef12/;P6*$[4VjL(.RINT
%K,>g8j5mB(1U<fJ);(beJ)$#Z?LpC/[?&UV<MW6foZQtB?5/MG`SE_m#Map\.Xu1K;/=4#V5"X*]d0WC&/5],_sitS&X>V][DOiK
%U-JeQ3D;0F.'mOBj(]5*?1ju4LC5YeNkORF>jggnl&&AfpjA6HhijXL=^\f+<RPo)qVu=:BjE#ET8+W"ql#2rIrJJj!#eK;8=@f=
%j)n+=T%cGVP-6_MJ6Qg1hY0"%b'4l]L`AQ>HL_^u;uS-s*q(5o/`R"H6p@h'8\JG:o>52_cf*oV$=qqo=g6<Aa0h]]LYm;>B#3ot
%r9X)>Rf>IQ`rGE%k<Jl7.t'E,MBn!KZFrQ(1a)d%-+@n!k>tTPc,.c<$#'JkfFR.s(<*%I?Z*><j0<#Q%s3#Ae8i0CL+qWcg]<,f
%)\&<%]Xnr'Hgg;Y]`)!ppqQ^0s2l5*?C7,j/U$1[bZEM`g"M5EkM-:7G"\T,`5#^)iNCZ".9+I^%[W+nY0])m?S<ga#dBV\gPsS5
%qVXk'm;Ct_e%79nNh<m'>FK7*6W3OJa`RV)M*^Q>R*DkNf]+8_'O0A.?C#OL]".F1*7)JL))kf^A"NT7<'m(qSBT`e1m3aRbm.&.
%A_j8_e1uM5].rdJem#lmKFMFF/n*=Y5L?F7Ou,o#MlJYiEp'O85+n6"9c\YlJ#Mu?3JQO*2_^iFPmb0-6#!l4*hoG(;[;s#krW-]
%;k<RKfXTaa?fNG+A%'R+j<X%+4mf55JQ/D#PmCgNRPBU'Uq*'@5PtF''"#8Q.-#1q[,9QO2d39*?S/`3TGRn(Qr1oF3PJ]6f[>Cl
%Wt/KqGCYam:<:8Uq0o'g@h1$gRN5a5.H'&fRNS]%J\CDl*Wh]"Vf;PUpR=E1<Yktk8fXhnSWnN%ArK4i6t9o;D>rni^qA9G:LciO
%gcis>A<Zfc#<XK=&3CU7==71qC_ZVb$N5Wa/h&X&c/XQs[cgj8pKOnIoZNA`!?WnhBU1_$;6P+jp;"1cC$#9Wd[PO*%ip^4P0,<o
%JXSlbM!4uM+oeBkRXG3mI\I!oM]ps0bOpp"kh+4RmWE9ccW`$SG^:A--bR"<m<VFUn)!p$klZ98cYPF[rcIPj\E/L[O1Cu6Rb.<1
%r<)JR]t2dp=_D3V>0;MWPK3X1X)bVop@tJof5VQHG?hEM>HdPQjOIK'\7[IabHhGL<Vp[qr8l@rEPi=cN]3-t'F-+5*[)SDPQt.r
%.D.Z]StTA9"J=\.,'6n]#f6J_><-rbEQ-qr05F`"3"ICWE_CF%0bK_,%k&W@URC_?96]M=5P.(p$$OG)%lIr6+o-T(8moWq#t6Rr
%GkcX4E2um6Qu^Zm?B10/lDZssRKfI0\`JF&Vak98_Rm?/lRbmKN*[SI&/R"E*'[[i3UZX8j7,b<1%g\iP7]qUrW/@ajW]s%]0NDQ
%f?d/SU5V[7a_VC.=na:m#Z8Q/JGXdG(6@%s2bXBoBeV2aUpqGn/F0VIp2])@ZuZ.fl-6m&LQ;7s>Xt.[lX0[]?iT*bGlIGepAo]K
%n]mhh7,jCuL[0m$?O9qD#9N;\IB5F"W*GW.eVLsi=n168XB\/om\+Ln'ojG_+]l$!50a44aR4ljnr;cp`7]ne_8a;QPN&tL6ke]p
%%WO)uAP*(s/SY8kBL]g=Q%,DSmT7&eM$a5WY09Snd>kOdooM&P.$0_Lr&Z5"jDC.K#*S`\`O-Bmi!$&NrEA+mU?emmWQ/Fh6(7*\
%>uscTj"*Up-Z>1#83k-8ebc$RHF^l6Q]Btj6YT,9]*;kJ+r<1B*su15cE/q'94r9P;HCOV1bP_7(=@ipCs3#GV*0rEeD'i*KYse\
%i<.mr[d@__TuWLg./bWEqh=]B<QOd7]]:G2o(c+;hbmu(<b\U;?pkoZo'eb<j`0W*Y"L(\)a0+e;ndWOZF`t[ln-J.H:\N?M:rKg
%aup2/FOAhA"!*S8ENASoUaNq_(>8R(OBc?ZOqZBD4#Jq.;o]^8qH@Nh+ZI6sCoI5;f.k57%.fl#d?S>Ihj30mJ&[cFAeS=>3PjCU
%ENc5;5Pt85.sFC,Q%-$#*hfcq9@5;2HkN>unL.9&gk,b]LWZ8r^LW9O+lS"#Xs"EV`;6H"CW*1c9hQpi+I&O^,X'Sgf#V_.ZKOTU
%+%Ro#OuRujG\TiN;oZ?@g)fCGO!I?*Aku__,^+r6X<Lh7Qk.9hQRucU.VTnU`?pHgXu\YGm!'tm(1MMq6]Prco1!neFTU$%8PeX)
%I8dZ]<`]Y<o*1GY,Yar=`N'nG6Z08%gO"u70VgB6pHJ/t[T"AZ`V:2mh,V%OC]Aqu52VpkLV(Bb=\ZA&$7nKV`?hYN[`();7gn,)
%=C"+LTp7dV]>ben[1F;Bg[D$,?/Y-qY)3?QpPCQ)f(h,p=<;g4c;.;r>YElM-BO!^)dX)6AeB<e'jj$:V2P+?.>EsR'8[Jsju\JX
%8T=eY'k<4=L[iS5:>B^_RML4H6pUE9N?TG4Sc(D.&CJs>jN+MQdC3sN<V;`P6qW[TSeq_*T91UMKB\>l"FBI.jW3`BGX4AX]<t14
%RL!%_`$+0tX;&Y&<.`Uc6(+Cf1mM68)!2HkXGZR)955HcY*Pf$YT&b3mU`5p?*beJOl6)M&h>+8Pb_rCa+KP[?(7S@^Hk%3MD9=a
%YGcsSHugaI-&K$L[kj6V'B3N<m\DF8>15Puc(^;&/qrG`7*j@VlY.[%T*cM9[N:B)54oJ`JSjOS&1S`l6)%99>oCouPe8i,V6n?u
%G0GQ$Q4dBrV]oZLd,_KNf8OdU@T[2>J3ZWWFiGr['=gk,F]7!S%B@^U"I'Y_<Z-I:Ze2P)"Vc)AiI\g,XVG^Q#>PsZRnDC;aYM*)
%g:H*r=k*\TCDlfR@=q^&#9TN@j@P(;cVZPhM*hVJc8[E/UN-@k$n#3L6VZ5e4"_K[q^Zc\l/ARR9AB@FU<KFC0!Fsgr.uA(pR`)6
%Dj,'EU^C9]V^B`-X+aO\D$t80/=<L^;IDTLi+/i(<Q_E!P@mM,UKLE.$uN+YKQq["7(R/2_2ZDe)&fn;iKm+I/kHF/H.mtC83'Ds
%>X6oH/;QoPiK?SU7.d^:K-TQRd;De_3oLM)pYHBu3GWT_CC]Cm465PeB,5PTqUd!Ve/B:.8d?d.jt@gfmPQa)<!YC9#eRtNGl*Z3
%Z!2H,i"1[%R;$/o0k4SJ;lu6G1XK\q2AHabZB"C^L$'oJn6dq;>1ZTq_8T;4e/W[Zp@Z=,NKLK<2>L9&Lqpff=FNJE$Ap?Y8F<=e
%-(P-"lU\(Uq,^Hk_/A^/1e_q[`V#F843dIdF?reN!r%Kj.?5KNo8R?%3jDLmOsN..G*Zg!-)q`&`7]jQ-tAB:`4t/=`aNsS$csiN
%%=q^E+Hg15(;6;uXJ<qAB3"`=\rih=_Rc.8/=j*b$VBN6Ak[j>A+8$JCQ[?C_qg&:Y,XX$7)M&1ockA%Qc^H3;MiW=DM%Kd^GHUC
%boGV^Z>pYG*Z`:N*biQ=.VbM*i:K\L-p7/6duWoIBd)6Wh#3hQ@)WCOEJKC"4]#-gM)UDU_+hk-#T*Gjb%C?].Q:4U=Oq&kfA`Fr
%aM\<p7fXut=G`,Tb^u3T3=pTPpf2b@'f%"*#;[pFCX6@]1,G.r[!R;5Dg"Z?Fa[dC>R8N^mL,CBD9>[e<(eW#UY`,P^Gjc!i0C_h
%MCVf+B,g$W+`jZP2o-sZHCV7]aQiiU@im*W":g])Y25I6PYMGAVLG$Y"NLYiRZ&qX2]/1]g`FfmKZ.I4/jCTmh;`C>+d,o?II)P`
%fgOHCcu%8>fE`,'Y:6[:Gfl;_+H'-CqL#:Ecgj1,hjtr0Y4smu]P0Qdp7%+$.hq'5XVg*?_l&'`.of)*Cfsn&]o:gCbs5VOL"S]W
%[\<rITV<_O.R@>*qHd=4WE^T-bO&VF5/N\b+f=(-<Rf+)5'5AZ,-.:Th@2r8LofL*:7b/^bU4\V:]7Hm"tLBU.?4!>4WH%Zm^ATd
%Z9C.=)""qGeX%B;:eZq^/^X(@"Wcu7DDun3hHR`!2O\EF)YP*1pMV.LYDk=kW6VnEUR$j#'M_`.\-2ai$jW6F(L(ge4(>cbGFq0#
%#4?%4SW=jJ%I<%t$a`$?5t;$DgPp*`p\3.6]VhEjX->^\Wc)[E**p0?k)q4\P,bDNZKrcLVIHj^=Au#=^oBf*Y*<=p1cCNB:,e%u
%YOo%aZP!a'^9IRm;CBWMm>%hA9X/0Z.E^^lL,Ut7MP`14jr>!/+W6b=iiDhYH5&&@S(ik7%;.X:X3.m[#^HfDK$0,=!JU'/jV?AM
%'YAL#lYDgSO`LdW4RLZ;NLX*^D/-N;)Eb%UQ1AU-l*[MAE28Y,a*bTBOpn>^[2qu=%m*[24J<E;[lCX.25[iCbBubC-KO`Bj0e"<
%@Yr3mTk_QWqsaFgA;+?\];%K0k'SA%3rW$B=k((G(!4rc%k"B/En3iW?YfBII@ubU["gA7X]Z71U26:s$-F]_6F0f)[kj%=>E"nX
%Z=8c5eX8i)CY()ra<dH8:eB@fcHU9o8L*Z!ecjKc3?Uu47ntnhn-Cp'ZQYEs`K[g+[H2&,2I"t[-^P!?*dXUS$r7+"U9Uo`]@tu"
%3Ois97.Op#n0,b]rAL*Ui\7Cn`6/KoDrKT<:!]E8[iW<<UFM]jZ#G<(=@ha[;WN[uq8+l/iJ[)j[C7tf<NL]O6^T%_Qs=,F31s).
%@;;j\>o--u*54?/P7h?E(9M<mO3fZRTsq3S_pgWUa=/OQ\e6bl^#uu"/6(K_X%m382fD6)RMlp^DY1<!ol<.&Ff*UXg]>+$Cps</
%NutCoG?]!p5g+4eF>iX&h<`..Im5LA<56Z\76I$UrC&WB,-5eh-jJPdmd"gNUdD'7l3-VADsAhA1=UECA>*mFe:,5COU#Dc=Xn8+
%Z=-2KK-aN8/Su3mP*Jn(<$tpraU6SUNbIF6RDXkm_1-<G'FJ9Fn=m%u:1iDnTbWoa5J<dO.QjrBN-Q?P[e\PVKraOF.-p^s4BSN!
%.G"o`#>&Ceo'NMS-/2e0;0dQM\($hCKgh[ROFla=rgp]*1UE`beq_F[jp@PF.dDSb^3#@NV2l@iV=h4.e9n$K-B$\YUEZiU>H3Q8
%AJa]V;R`6BjJ]Y;7](*(X]nfHmT(+u#@ZKTaR+T=1$Su8E\>?QG7=+3p-#Q1B"K_;rR_:mC$K?$+jhX7gNfZ'mt:SH\t.+Pp+_6p
%8BL%Imo!2U.&u+bX>,):5$T5E@Yo5W5u5,2QJ4^>P</@7g]?ZnL6K<Q5HNW/5g7t7d.5s2]c/qLGB`)L^Gf`>RN)`A<<q-EE4t5*
%/taEY@Yhkh\t5H7ct;1u#h^094bgHA^0?R8`lh9co^_Q`+k,P.,m`VUh'TKmG!SXqmb>um]_D-;17<KI1fJQ4=]as`SZTCjUk<56
%;lX$33uD3p&C6N%Wl`U9[XjKR7%9qY*67abCTm^[5hBPh[`mg9f!T2/mZ)7#/`gjoA$U_:]#@VBfGUaW>-@4LTbL_)@bBb5A*m1<
%Me+>1Kl#DPP,X_MXFpff1m5#<M/&fSSDK&)05(^?!#].rb+'h5\s8WP5in^J[8MSb<\MrH\+^uC4EKT[IQaPG]C2oY6&MCl:Pl<C
%5d%G9or0-^l6E]_h21g_g/?VnfE<JbN>"br3jke48qhV'4!O(rrD/%MHBX4?iI&j>1/tQcR);`600_!KG18M9G(oBfgb68qr'B#H
%dQ<^[iWqAaMCm+!G`jOc\9_bl];\4*e8c$$A;f(8gM<;+W3[)>IT4-3Wf(/4TU_Ch:4`28lhB=dS#Z?E.Sl7L-C?@<k]F&^ip]?X
%]T.%78"2(#7Hk<U.95KI1j_@f"%QAtAj:+;If$fXSV9&hMd.a1a<aO=97.k.<Jjr2rNsHu<nU1mmJ/J/)(m+R9U*_ZK!mKl\[7p0
%O2ZN/rBnHBfG-Y82sf3h;d=YeE]oj2)dUk=.\%OM$l)@#CL</U0nJ]chM++hhtD*#A\[WTG5YmD>)ZW='/5G8$-K:"mJuuuK*ZVt
%N^0[1"G*kbqC&"uT%4DIZNR+D,V*U)$kO>I<fbrYXEtW`af!kKU"Pda:5AdN`O&K`YA5EW_1CQiq;0_!4p^FeBYCB5)ep'6/ia+L
%gq&+]9/tCUA<]EdQ3p6FBI9cVW.R:%$oH4?l2bj4VN@QbXidpc(LOD)>JrsJcV0h,Am/0ITP(Cq]DWFj3#O'aPg[2@MYH,/2+dk9
%mCB"CPTq:nVQ;+:n%68W7mrl7@l8X[;3HaseU]>u(L-Y$K&sf-'a=odHhd)5kFg!Q#^YSL!$o9O7LdA,!6h*ljCcO@m-d&(^):2!
%hP-\B&rbmD(PKlPR4`=b]e'*g\u%7o:V@Nr#`)"tJBc<50rkH0*ZNNk?V@&!.k8S*GOu)PE7=*RrFChBr^7V6TrCbSMJKL<:QSqT
%>!>iKNjF4<IL#LH23c2SoIrBiO']P-n]shKMs#L.(Z;YE-<)8cA#"JLB,n5qRf*XglOKC]dD9&-.'hYmN;`G9&!]ooHgp:.h0Bc=
%(:e[$f/lk^)*p8l8^d+Tf0A@!K>'&[adil44reudr=F$<UCLtd[)H(u_Y638PSn_trn773*DHf*kM_.@A.5uTCUL"X\)EJTd>(gb
%?^6pf%qF^l()oD$H5gLHhP<c)n7AC^qe^Gfc"p$NFaEC4U-OK3`d"VSq'a#G5&X7p`H@M4X[*JK=.G\I_q2o3p/>Cd]\hSt4?m;4
%c'W.>G/fnBQjU4]OLD8ZNH1i4j\\R-CGj$a=jj#"7)_"d]lj(eW_'HdqdUl.)m)03d)>9LBnpKsUh]1DDK/3K]`uVs3W2hVQe8/a
%k@O&@3bfcr7F0t4.uc-B?nOEdWE#/I?<2!n!I@QIOjK@<GQjcH8R7lsSS\6P\qd(t:dZce9D6ZXo>)>dNmilON,.jC0pJU\?_/Y[
%c4U0;U(o4,'4-pj*bYks$^Ml)r\R2FE3rAcjDhQmcnGs]6)hISr&o9/il/_:%bAL7@i#O+Z!sA'f0o!@UCIiU$!tLoRA.J(?gVjg
%<T0%[k%)WJ;#*lFo'DMA<rlO9N6e3p6E[JiOiZGh@KagDc+P]@*RJ7s#>:;lPrY9[X%5jD+aoRG3$f0'XAO:^J.T3D:a[IgfK?\R
%J(C9s*l/YBTZ"Kki0,jClT\5:QdPd@-BR?0._.2EqeT0e`p`[jH\bjF7$PnP..Q)m8Tr)kJ;Sc-6OSQbYNeEL!H#!k9N>+4RCI`,
%TMm,gq?rh5jf`QlW-WE61a'>L->gr,!?o)2<'n7*KWs@2p1d$kL60^C_)k%7FTTo>,*Zg'c_*"L)aSi-+WZd-nJl'bJ`cJOp=LQ#
%/C/!mpHetd`E<@Xka4,9NiHaqW9Q(_YZ$](PRS;)j?-Ob&HLSG4Hu]ZP\ik/."*3jqk:?F'tb]&2=bq6B#gh+S)<WODm!e;d2J#]
%JQ"(WA3#ET+]8>D-;PSDpncn/1IB5J]JJR-C=)<o\3bp`44cs%J6l;AoF,GDkW?sqTd>=n(A[L3[RU';d)NN3kd'-M-tC1d5BQX`
%1RQ)\e)TAJZ!Jr-H\a4PZUW5I3X?bDiGud_=KWs_((1NR";aKCWuMA0=KonuN]Q5%O3m]%J:uAUSn*dTaa?kUl[cK,mCS7sPgg!<
%!^6'7LLfCqN_E3k^4Nq%Q(k/2N,ihXO`'gX&,[1lS'uB5;-ZttK&!Qm^37.Z]o/o-\)p[uf[,t$ZIOWb5J]+!X%3?dYJjiGm;=iH
%]#o(GM*oA/@t=sILr)XQd[0\pMgmFF2pqaD8-,uCXOl%8.bah0Kr4XNZQ0^Im<r6l68N1u_M%?#]_1sHO;/!sAl?=#"c0Q(eB6dg
%-.L4UNB-p>S!:!np8!,Lr^b8N8llT,5cHK]Lba[Dm?Ek?kaWY4M_h;cUpVnLLR:Tf)[?hU=X9Ko%lhak>fak@FdePp*9s!SSe]dK
%!1asR:3DtqhcBVrN@kZ]NU[rkk6',iRf=;&82D=[0>CU:G\d4I&=r^d;Kedi<]2.&T%rn0pO)`alQ@fIIa!i8&lOd-XGgfe"%[mI
%mY,IGc,r/na2(8p3D1ukiB+3fn*>$q<YsHI\RV8M4E4(U&V8+`,'NT">t$:.b0eLC8<Bj8.1k[+SNpc%.Lq4U8)2_V*8ptMSe'ZU
%1lfo?Rcl?KQ\%uoh?L;XJjZW7fomu_5d.XA]dZ5l&l\6F5K+SWpF&TZ]n*!Ge/YJ;RYtT).%mL9`%"6#6:0V;!`i=S*r:c^Zl'mC
%)o#*iZ%X?NE-g[@:=oX]_i"KHIEE\30q=Jc-gk0T$*q+1\Um>7PYjX&d'u3#4YH\IOU7#hFuY_i5Z3Q@4hg@]RpH?_3Jr.(1^cgg
%_@!/cK6$8=FmTddPLe^W9OBRfc7"dLG<&VKFGW=$7/19,5Fi;&9u?l3)Msd$g,V?Cg5b>rms/GlM#J`7Y7ZSSg&:KgZ"K9b`'I-m
%O0q/Uguh%Cn$0u+r05B05&34t-cEhKD<Gm*mRhj%$WNIB^#.55mtFAe!FsI!k(LQhVu6b5(L!8*&0O#[j8lOI6:Q&7?EVhUr\F/N
%gYXAm0PXW[WO%>O?H&\Mf#jdgH$n@'CTjoVSm_)hGcXJ2Qr??Fi%\\p@B+@ZR@rc]edR36dYFb"*Q0=R]!`d\^!8OV:R#O``qCGp
%'o3tEYU1YmbS=+(PD0-u3%VapQej:0.[-IB0$Hua<I$;GZb4'Op!b+f\^!Gg=B:bk+oc<4AfKVs%_j52q8El022G;@F2$LMZQ4\'
%!9AA_?dh\dKPgB;Yb"2Bhf%/0'g=.iCV(4^8jK;SPF]U(`rS*Q@9l;"F%8hVrs9;@%lOS3m_-6)(2\ea6gZ=#3PTF)7L2+FThrGs
%J9DNkA=D4O^idKHJ0bciJ5eKUqXm*6bFUS5]6!&Hr"U.$ka,"$9,6r#-'ZT5Fs6rBHuP?^q0@<`d_=2u1^\H;]$TV<^9n+-otI.s
%Jta%;7Pr&lcol6U8?3])Z5\J\2Y.K)'A<n[GcR,Q!>ceNKi"SSJe)0-IRa>)EU5Ho^HR$qFY.5afQ21'0eOJZC+)0knVjQHJj95O
%LKOg&]00JfW6o$*O8cqLMAD"UXtM-*+4n(H&m_SOM:^BM&g%EHA.%O.FnAeU2J*IoG/4EsSlgmB/pt[fYWs$+./R4+Zg^2$pVW@U
%;o02ZEru3IA*%`jgaI_nqsKIf\pbmerJ`1\(b9V_pT7=5;jV-oqrE&qbY_EVrBgtUO*f,90+Y_#B\%3rdIn*A>fHrAY-+A>lU9)p
%DkK1&2aI]p@J1p<0*>s?,537*.g%B+hmD0u;c8g\iI'p@?<2]<_tEuG*!-H<Ft7Z!G=A9XbO)#?n"'Eu!h3-qjn4u[#7^%`W@t46
%4[.Q]-rIZC'Ze112g@T=Ad8L*gC]H8pNCiMJ6r3h<RnN*HJ\Jbj)uqp5BfD+"7P!hDS5^f>rS"j.TTM?/h`s.O[CR7U<lJ:L][Yf
%l!W9P%+TC,_.";Gl&;@uDE.KT9NW>t+C3`r&F`(*h*G0][p,R'\I1IQ2t(p6iiT]a#l1Fh#=CZh-u,8=^E4l$2GsSFr3$c2Eup@P
%-2?$%a8lBh3B]Zg]DHe%1S`ml]\<mTa1e(&1!n0%YPW3KcuSQP%d<"2KP96?iR5,R\+ebYQHC:A[QuSd"7Z2EQAFsBI1V*c'KG1r
%Z>06R"G1>ShV$I]Zo%K6rGf:M]#Xc$k2Q5lbO%iI<Bt:_Fs(%92fG?^-cXt+o[^5)4@Qah^Xb+hr%)Lj/g%))H42u)f!*>p)+/=-
%N*=(l`reKH-!!%YqeceK:B@3oKrIWFgiC#YPO7'=QKJbAj\dXIhu)<dM0ZT)hYK)D.0a1m_W?kJrV\uiIprec"LXcQaR5OB9f-4r
%#q#9eCY_3k/XUtXFpg-uX18"c&eff.J)?8dUPZ!*T0&^4#scnRJZbQ%gO8;SGS/J9badS>1s--5'(j*/LiYmsh<mFX_*/K*kiEBL
%2(6rM_kuM+ZJ9>K`a`@ffaX20b8FOdh[Zd+/=sb,mXXpJAci:LF=lqShV!,[f7k8m&JX:4dsOC-l7B1dYE"j8lpQBa>`kA6`g]rG
%k0FSa<oi>Uf)ioYFm205O-^H-hi.e*Z'bEf'7-c`J'/?m+7@msG;`LC9F16GYdUXsW,`PaKn7fs)_(QW3%3RD7,5[S\tG9diqRKM
%%L%&#Ls'iE,VL<2T=gmLAL^MqhsEo0_`;LO[dLl]m)+0_r>)]uW4YJSAT=MpYFrbuKiGT7OunTeI\8n.9DN6O`1Vj%Y*?p&LBo6q
%G_PS?h9^E5b=Oi!h&LjWD[5r+S>c=q'7)YLaUPn4G^"#[mB*]L+\EVg&j0H^KX.>sHRff4lVs7A]VUT0.RYOC%nKY*<R*,\%ll("
%[q+?5JW?-.ZCi[g,3J($h9b%dSi\'t]c/q\G^!ZSm_-AFH,Np3#&/R'QRdB.K?I0Rh]`_1gL,cN*diinm[($J6#E/WD"*s[R5/]i
%5f_Y5(Gq2+nb[M*n34?EG<dh14JRH0?+Mb.pS#?N&cWq.D#\tffMq+a,o\-,[CO5eo^R<d-b4.KFk#"QSc?HX<PQC=!>X^<)3Q@@
%AiV/@`*YWZ-apf\gSV]S`5Q#2rn+,Tdt7!U![G^:eFmUmVeuMAfEUFS4G!aL[FL>;=PiOm8h^Cu2%m"E0m.r/V:HTK7]PmBB-ATV
%&7#34-#aPfm^Ni.dDKPK<$Hs!;kcC0M\,l=9<.ECL:]nXpE)/tbm\W]FbWrg3KIE>71V_(dSBgs\l92Kepe=N",W2-/6/iA,#Hf;
%RoaM-9!tIQ$^?40iuqlGf>q`\d*sS"o38lu&?Ju"$!p+j74IbpDSEoAb+tj.Qu`ZWa>.YnfC))UDX[Vas89A+m_A_Ds72dgs72f]
%bCBMPs6]jcofn$+l[M2"75jVlr;*o&qnN'<s7Dr`Y@%>+huES'pNlf4n,Mdir6'TNa8b;Rs2\"9BDugK*eeq#nt?bukZUpcUR\.T
%<=hOMWhU\lM19mhf7=0q[B,qR?i:QHc9Zj,4bPp.$_9.HBXp[Rk%IOe<:$&?1)[]\9.b<:$"=@ZC6&nH*kCeM:KE^k233D3TL>fP
%aV"%!dF[:P2BQh!hWh&lJV0e%fWg>q,Vek@15(ZEb-Sn:O!lJX=D\a7d=%6U_ML]MV_8j*O(tSBM2DNdoF*Y`W5<#.+28u(FW'Mj
%ck@*C*"<EEP0,C'DK1lM2CJ#+@W@XB5?nRc7Dc_+2+dU7Z1aWn@V9ba[>B&Td)`dqbM:m:*?T-s^<r#lJ)$(J&^KO9)"Aq$HS(ql
%G*2?K_0ou:ku?>_LFf6Ilod\aq[pd(-G:"JL#Vei]ZX.6f@>d,b.B`*FsC!q0?^m%q]2r-5#AV/["I`0R.;B5iHQk;;)3tZI[jh(
%=`rdp&(n/M&_i(-=<+UVoOs9U'.!^,*jM\@O\0!IYM^&3.m5RY'cfdbnrOO>'/c@[E\H9=pRbQUO:.81I[@9pZP?H`5neT0+q'qb
%I4_BL7NK[qA/<P-(7l!F*8_>%3a&4P!IO'(V^R5>IVG?QTTOB?kc>+2EincNCa_"S]4oP/_qB[A\T)V+h!kZEJ2UsTH6S(f$K-8T
%s53rI%H_HMBWoW,SUGk)\7cP=#%rm@dXae?fa.mQp=2aJ@dt2;5Vt3L[U;XW9!$r=/AMV+/3'[-6TruEe*ss/jrB$frk7J,HO.U/
%=u.a1YLDLgD:Fg'`L[F)WP/OQK]U/;BBVS2(*cn+@+YBR@DZ,><2be[6Y_HXQDL_-1-nOBK(cfmL!-b()G=GP2lpkXGo1h$Nu4#u
%o.a?ip]FdhO+f>i(mr\LgcPLs''hUsr%/jN%TgtU7IFL!-lSpQq\aNST-u_qW`H'^8q14R9&Lk][VmH\M/j$MS;4p@iM;&p>:_J(
%"KQEXU,Xr6?BmJB+M(7olgV>]$\g28^!<u,[M`F%@bRPK@%rlBq-GOom*.]\Tinj2%Ws<.k^'h\@);n,<H8@7OXLJcetXLK09>rS
%8?k%o(u>ciG=Q6='%-2S21t=t+)PX4@;r?^%0)XML3.SkX9L,4(FRf"Dd>NalTd5u,ZJq4Zb[[cII!Jr.-%g^a/28j.%;&Pp$:W@
%rW?r?3bk6VU0Jc`-(U+<$5RD@TasijdfXYXeDog2U9AefE[($6b,H:QUg2H`4L)dNkDtOr^A7Vm)nK600915QiqkGEa/nOWg6rt,
%lh0/I(6c0\XH$m1`pZH1:qR*e`T!$YZ/-M5QSB"!TY/>)=mVLgW9MD2kjs\?]>I1(%QKbVO4&h_CnI`=_ZHA=YA;\RG,MXh]X!l,
%.#IWRmh=1ci5dkN.I;jW-6IR2#IcUXLm/6t6C;:mIRi3K+)_JYM:J:lGcj`I@Qet`^-"k[*qcM5Z;3+]`-!p(bI_)JE\s,`M-AKC
%`McM+\f(nA.U]6MH,5pl`GJ[&1Z]6i=GP@[D6#PT7Q76Z4KUU)ZOb['7$VF?92XlNarj43-k<o*=o.l&[>.\KPgbuHV&W\DIo$kF
%'$Z[sAoGUGAq%:SKJ=M#6Q[.S+?J@,Yp[^j<66IqH&h`Wbe^"KF/)53%n*'pTZNE/Q:QJj;XYlWL[\Xa3>Xp'",6D^.g;K&k(^-4
%a#SB10hVuqnKd!H@6iL)?'FjbC3T,AQ3rB'M1i#@%_Q/;1SfmU*rpJBV(3h!7g8HH73+uG=?VVq+LIP5GK0J!Jm.AUm\AVg.;k[5
%d-($-J\1:h;h3(=jK[MY-3CMKK:.QKOj/:g`6H,FkG_<]-qid]bCTXrlNZek<hL^F?(43WBiZ#o6)ho4/\CN6fkP2U9_?N-@1GBf
%30DVQq6EF0Nh[=(>P6M?^3NFIbF=g@"f7`NM\$rjD>3E&M?,D1_5KiaP*fsEI)[O+2>&\;;`$EV7iI"QNZT@^T.n;sSMF&09#ipM
%WKN>WrNVI0(:,P^_Se<3PLf=Q.KuM^p&3u784Li/=;4el>(R@agEWOdJqlS;e&V0c=@Rq;Xb%ImK;9i`"kDZ2\h(_EF\j$-iTtB,
%'k@dMdClp$YMk!"Q=2rf78c6lE(H(tq<^dLRo3%8@]Q5">NRcnE"V0"`(K99h!7pVA0#.#mH)]tgUVhf=ds)2Tu(VQ0@3P#3V/bd
%T]4l`cm:BJgF7H^R@`Z`#4Y-\I7QB1bkrnnHuUOP<rLD"^\=:6Ce-tT+&_19PNeW^O7NbOR;5C\^E-KtG1>RC>PH=K>ifj2GU[dj
%`FVd"=tgr8@T,EC&+b3t:_21#g7\?.F%YXZ*n2`UnS$:/]lj:7g,M(g<*(T6cKg%^^#,*T;)2tDI>)bdAIO`ZM*8J`XaFtj?15L^
%#)jjN]8`$f8LJ%<9*NL]hP#*@*F"K@=+#EBMNYQQi\:5Od7c%:Dgp*';@Klu`$pIq'AspDNt+>W3TKC8</LS]%48CIJhrG.e<"a:
%>n13kXS>&Ad\`I^htKtdX+rlIlk>k#p]EWFnpGA<rRUaZHPN5H-sV92L7C8;o0iQ)L6G<3g<NFoeY"edFdWLJg;Snp:,g<LppcWq
%K?A;jV)(gKKnKq_A22B5/%F(`Wa13V?@[9T#^mMHNIO*u%#4u5(cH<d.h/=\H1c/#rNa$P?b=`$7JcP4.^%OJ>I$Jt8)3u#06HeT
%0gU5c(A5T8;i9Q45SNEL&H\Z?@8]'8mC2YRWZF(eRUtp!/c[FW^V*?GDaABTZlGRc;8W0;r$b+/EbN`tf/TTn]dr)7;M=<^O^+mA
%dM[[n%-Z6@;Q^JJbfX<\rbXFiJ\A(ggU\XkL,C>hNf7iO5'sBqI.5d,LrUt3*rT7]@61??kGoUJ9%B-3O>K;kQgCD-TPIj4)X4Ad
%LCAUNcMnYKcC;bujcNAB9En=/O\)?a>DXNW_aW+"T+$Cki(hFmqp=*4H`pnK.'68p&4_u;-/d9(+eG5(kQ.I.2)Il=%b,I(UJnH7
%&Q"PBnlA8A_5V1"kAD=5DPs_)4/\BcH&`CJ[[$JtiA'db:m*7Il6g(9hOG*+RJ0ht])U5:GZ(qj>HMnb(RUAH5'6[_L;AmhB4_nX
%opAbD>B`8$r>FT=/lfi8;o'Ou-*\[$4(o2=NTuk'4]K<YrmdC6bu0?nF<lQj;JSN$"-StEJN7/'!:93%pG-c*&':[!+(3+L.fSZ`
%2L\K<51VcP9HT]`%l>_pW;Y@^jAjd!o)Al9XWKtn*>$i"6p-H6"95TZ!$ZtrT->>gOqMe8BQ<H4PWuXf4*MuuZq:CJlq3)Q``b0A
%,pf%Y]'N%n']`)8lq5du9$=)"nq4's\LI'2>SVA:Q0?lOekPCBF$CV5&i8m!Cd<6t;i/H&F^%`P;nEZTZKsVDSP6:VPjs=eTj2nO
%9uZX=6.%J_p=p;K3u-d<`;1Lhh4cAl@\4/YX\.9H\Z3%kIX@h,?Xjmh;;".rAC#Cc23'eMC.[h!r+eG2`%db8`FH'Hkt:F*jN?q^
%2&!-,80G`7Yai%Jo,WsJ\@22=b-gG.C[bjhEisSj7ltc(Js[=%)//T\MB!X&0K/p_,GR@,]gsorU^iC^g5#@\:[Flf3]X^^m\CJ6
%OX2o0;Nc\QVj][r=n\lao@QX&6H*GYm%g(M@RnY5FME%1ALAek/Sg0gSJ6FfVV'ZqPm:@]O.DM@aG"0f<XKNs1:GX*mf'mQ[:>ZJ
%9;Z,03?VGmcD0N+[L<)b`KM(t5-%@HemO>3:P:.k*;s-/H0qas`)AMUn9csd/:IUV8<1BC#SO(JX[_%/^#ZQQ.DNH+>jOa&`#1j6
%pE8;*Aakd[]MU^;?)%r/rKDTl<hlhi_/SI@Hj;,k'/;Xq+$(Z'R3_8*7-3d:f[:-1lHSFs4%X\f^E(IA9`2+_T#i]2Xk/:t&^Gpf
%SX-6^UEJ)Qkb"%`O?_\INmRG[J;W@E#M,"J#qE.!G<)T91sU>VGY5)krD[[/c?N>;j2b*][#=RolGg"sSpH`:R!)aT/!n6(Q!B*@
%`\TI9<f!EP>qIR1c,8bjphbaF5_@Y/H&uXX>lX1,3uJs*`*#P_b`b+V8mn_F<oRtJF"Z=U:>P6#N(=CL\(bA>*UnS]G(Aq"+?#Uq
%Hj\<tKJB^+i;)rHFm>fb<36(_TdVkHJU.mAIglE#JUsPq+_)gVV'VA4\jfZl%o9g:4q,+hYT,G=m79B2:_)k0%AACX:FH^E^5p/%
%#K/pAWdQ-mkZ*=SRo"kB#^FO]Pgj<%cZ,-HY31,p#r3a,'D[o5,o$1\rW4/DFZZ]p,"q))hi7]1:k\o!5RkIk_N='%=ake_m@U2"
%W.<)(^;m"Y$r+oLkV):iW)5C]_1"3gCI(#pP1%&eZnaV!2k'G:Z($[u*TJ"j:d(DKCp2k9GL0kkK[Nf/VpR#[b45X'#G\gLE:J>N
%MEnD\'MJ5KL\%$pD$^I`EZjraPiu3'C,k-31F]q>Kctg15@A8.Ure.CF9*"`cH2F*U\&q6[F3jS@V?CPX?G@X_L+J3cS:UT'N-_9
%Kl"Zo3d[;4iTHh4bA]-tP9t;U.q[NF@YF,oW^b1*DoTWP!%-,sWL2CI=Vi]/oC=q)*5k)%Vf9I`_:'SG's?G3<LA5J(b4V8GRsaH
%c$_fHb&Kp[/M!E!_Ba4QkD3jo;_:1tb.f"%Wj*RKR\Sf&k!@\<S:/8[2X@0>PVCph780lX=2b-&7$:Lk2P'BSL[)$O3@W7'E/&"U
%B7fV.(s3<$K_'adN9Z?L;0Q4*<1tb"K_u!;(qu]k+P=[]Y]s*8O_=GqM7\`h2afnUoX:DBE@LKZ*c!jQN-5C'@NY^U7h[O0%YZ6m
%g`FDDS&m`t0\?O(2#6hl2b?CM>Lgb;5nW:re91RWTq^7L-IaWg>WZbH6#q2=gnBrYe.*j_f(L`>3?4qrGEF&oF7#H]#4<OLVBV9,
%WOV`*O*;*1$s!EtWt28jmm"a]8J)T6?MF_K-7$K:b>gQJb##l9[n.*\WN3^l&6NV_BOEo(`nDO96W(:41Q15]Su%-,6@iB((pTM]
%5'Jfl473K_\?&@nnWm@YYKiGl;Qa%1LM3B[ZD83Hr?WqkeL&^+FWTFl5P(Z5IkuT:OKs'#B[;fth_Y@pA"^55i_UnH-:!oQ6I7nC
%^u9YVU$=@B;$R]hcLEZ8L#X#9pRlo"&d!M[5V,4%.99h=:"\B9p66PL0t)l8*e7CE.B;q%7O?(p2APbqUOP2'KJ`+Qj=4$s4+*k_
%,)Q-<lBbTEZkdr1Y#_CB9cG7;Hj>Cd_-j=^/2Z924_Zp\1SVtOLm1a1A&Ze9!?jkD_'6I:)PLlp]Mo,Z'ZGC8SBTF+AiW>j$edp/
%J&8?X55'9$dH8fFbR7jP*o$YrD+>;=8E@h!Y]t&-&",JPBC+PJZKsG3d=Z:_%sJXapMr:_#Z?AR/3H`ZbWSdV[cGGH`O+2LPF\fU
%"hM$?_(^lp*,<&]*X6q=E5*gW&nEbFA@DAZ9!p?\+m]FY$nm;?q`-.;raR<N[%BYX+7pe*-3p5EDAPAEiYJ'*iBN+"#o&7AC9r2p
%d,*!FDDMDqc+@gbERuH]Gpu_6(ES(`IC]J@&He/f<:X)7qYh),;u*NPk4Jrer2^Ztei,PmLLrsmm.pp>'Y!$NS1#Z"'@3$I=?TEI
%&4^K2M_/VQ<V,-6ojEf5jJN7C3G>l4Qp#@0b4mD[DT7?N2MZYk3P(5o\2B;7EAh7U4H$QKr)2KH7P/>u'fKV>fW"R8)(dRj>eWbF
%@;/26Hn_Sc?<A,/4Esuj\q'L8"k?d3WEri8j9"$e9'&(f/PO;kGYLtp]Co_;pE97BEcho;]MFI>TC=>I8!?H")0-U`1L7gRA"h0#
%$K:hNTh\0t5c0t.`Z*Zi.Q]UbQ@)0bDCL<hQHkJ]lMH3mN'+Oe[fr"5*m.IKD\Vi]Qif(N$4l72FMp*Q>i7`=N!LH^e;'i1S[ZoD
%h;Pp1j-l?+\L:I+e5!BK=?+rUPZ-fYV`@XXG]t#Zqp]=oE>3i?0^]]=Uen8=XD>aj]`krE^)QH#Xqp%Ic!``n_()Gs7Wh6lkAF!t
%_QLTtH^6!<9qUr9]JZ1cbZZtLeXU)+C6kV?_sP.tJ'ts-Km5\le8s-YpB!p'M[54r?s')e+KK504\Oj#@\OB*_`4`K7a/@_iS#r1
%XS?a:YD!nUM"UGl1KT4)e%)5TaeITOid%:Z,MBJ'B>YTcdSTR]Zm3%p)s^0=#`c^qLJa*G-sZOaS#*<7h?U6ANc<_::oWN":ok(t
%Hd?apimSYVB*\gsLSpJ0`1p\ga9Feh==WdCq@=Q,BM,)>&lSD(l):,@P_OLbgloh&7LTm@9!>7RS36Vj:Nrq"m$MS*M!`'kO"<8$
%3RtOmjp$.g:.Dse:OL6,E^\q.Cl/;ac"0<Eq#Jb((tp"'_;-D-+#BXXU#80h<8HuU[suhmL8F%O2hcb[gU%Bm.(eL,,UgP!%a.$U
%MiAJ&GobSP+3]`[Cj%3!mCr9=kV!V!Ussbj!Reqma+_c@:N.fc3[-OY:Ei:F(O(sb>FQc_4P$Uu9m$O1\YS-.Y/,=?bdGo&6R"(H
%&V9&SkV*#HLI;WQO,/.+MW["k^93HB3O<KmV^YLGe_si;[L[<VO-"1<0qcO+;;ZVj\XY*Jp[r.`3So3?F[gZMH3H>"=#"O8kp1.p
%*5'dp!$V]3Z)BI$)i5Z1T.'D,bAiE(7p]$eF4,;7kB*G_=_8(kNl/MM#H=L'7%Sgfe1_oq5'6NpmPX!fCZo_>E^$CuYfAX_<VSV_
%:l8bfZUNeLm:A\fGEOD%/5DulaD?G:ElK#5o5@\jV-Q_^;!IQ0!\(CUq4P65h:IrJ#b4_)`R\FpL]^%/h2msjrAFb$Q.]RT,Ep%"
%Jcau!Tat[2!R_BG[7RN<Fqrr.KJa88`$\e4<>L%5;1BeVU7smC/F^A6\pg+UZT1IF'c=e44(F@<M@-6JH<9h1nd73<a7ei[7D=Oa
%C*%[""CjHRGF-AX(@oPMAHrN+#BV'V7stNjEOI?3Rn'3/L;CCH+^5j9d/]bGf&s1mG(Q.NSc,=$'Ehs3I%#)OO3;e(8s%%>ln_rT
%s&#MZ:ItDdn6ogVGUKra>I[7e'0^@B8*N,^egN\>)"-du(asaBWYao%H:I.M?,\d`rW=a7bnVeTXO:'XJ9%TJeW6]0aC?1-j'<NU
%0k]5d+R/b9gk=^N4jAk*!kN29B8n0LB>3/g(>!G9DF,d#<LNkhH6fFVB<dXu%/CgJ[^I<Yn.8GZ+h:!QLar1#?Y^:aLAqi?6&>SV
%eWg=EO`g<"X_E>mcdd.q`>YpP1a2_i48:^'V8(IQR69KYT!k,QrBQ48O5`"J\"+[0g,ZGp-CVk:3R/5DLlmI5mgRE7FNI8*#Wl9c
%7gV%5ca/''pE"966i/KE\:jlSY3SG]V-N^?3K:!cHQ'Uofud)-$*$f#4F02?4Ags[QPRjW`i%A@a-kQK4PLIiZtEWqN[fbb)_H-F
%UA0ppcm`TDV6qp8L"JR!EtN4&*V3&QQtgh(<L*\J?,>b?D2OtRRkoi&YIXrh&55=M9*Z,sbPSplZWV0\_K1mR&S=*jrdSRg6AaSh
%lsS>[dp8Ln-?m.%Tc'OfKou_!k=@2Y1g@aP%XpnXdAR23Ai+^_WL0GMq%LW@0)C7O%'h6S+nb`-m%H\(8+rC0H,>\(No-n%O\#8U
%DLVP@^^REd3m4`<lgQL)>_PNqRs-2fc8HfPEkbbTP7obna89ocUP1A"VI.#Q6""@'W4o>;MLu7@4K+M`W+LAHS0/-i3g?(u;_(Y4
%`r6b<-oDd[$gsdu9fK[Zh`A;-LP#26d!Nh5DCX9nNm)&n4mq(jB4NJc$N_`XJEH?7f1B<'G.obGTRrRlRYt1\TjKeiJ(k\#W#`$6
%6g.+%<kT3=+o8MfgX"q,b#%+0C[Zj#%^oL1#NLUd?Qtc0WgWjdMD0DRoqB!IdXEMsY#G%F:E`jtr^N+2mD1+a=i9o9,G4tYS"Kj<
%WhVNnd^;M)PL=_#ZOkW[nuVJ'5$I>^k!G*kW7t>$`:Y7Z;NU'bC"diCh678J&Kn.8V*;k4+'Y$\dN6uU*\+7%;J9db3`%O:ES*u*
%9bA4B>/h]Bi;6GZ%Q&M9UA_LM&C.<8FA\mVeD#%TC="r@G_hF8X+t?\.lf.9J7[Y$P1*S;^VflD-'lF!>PB#JF1OEF:I]J\#C7dj
%@u`T_5s%:RXA+tX"XVG-Zu6G#VNWMj^o'JJ3,!K8.0\eG&JJUbGEppXflecE\_/4dk_93g2B>J<3*;h,h'^;_oMLI2+X<hYY5CjV
%ekeFuP/Dj"_sS-t8m4!RRLgSbU37#ma<>sGr6&_sW;9>>`0Q-Z^d@D[/[@tA6!>4YgEqb?>ta#!e&:\Ylr.<\_sI1$HV79=_%@Hl
%.Ns2O1\&=!5#hF`1<#OQ0K\=9#un^H%0(kd;=Xq!s)>?Skm:l\XYrkF@hI5<nF.qR(Vn-T/`tY.cOZ.$6@@cGd:2JuiBOP#_P)jf
%O>(4BT0_btL4ADWDu]8(,f_6tV-"Sqf9=9bA8@UiGIAn_`Y,0&*6L)O,@@9^9stfFh7AV+V*qG]glR_6Wq-s-,Kp?iMUts;W)2NU
%C`Ik6ngd"#JP@HM0Sb0p46MjrV[d%+'8Y/LA)-I-b^^4PrM+")j`'/H3-d`ucnU-Trrqd+q#R%M^'(?)6q2bn,>8:\l%$p;UlK2^
%WY.6!he=k>LnhPERY^r+N'U.8jMH9p/Gf&]b,3q;5G,.eU/#25Mc/=@$G)&_nq8=`T$R;80MX!<VX^`Abdi!4nh!NCVn,Ah;67'q
%IfZl:7YKE/TOt5h?t/sjS!=P1r]jVf7]QJhj61lL!]a%Y5/B5=f-;O[>0'?p5>YgO?9pPuZCS-sdiK^0`#`4_W_]KWM$+XSn1A+"
%;tb:R";<t@?uY9$i#tu5R%6p":A<`a3$*WVS:cA[\A8+BlOBl,,P6Y.gE83P6&_*iNs',,*?%=/K$c'-c"g,ui>:A"/aA?fe^)@G
%gKeDqW(Ci1UiZnUM#gldf$/LDT1s?heJa"4Xc>AUMNITjCRlQZ?rD,f8IJ15N8s;YTi_!XXXo+o+Ad;)R0K2.*sm7r_MVr?,ma-[
%&-V\=Q:T/@58>,UELo^q(F_Y>)EgiN,Mj"";$SH8A\u,t;V.MX2j01m!ogP./%;nMV\*^\OWVD2OngS!Or_#2eq#PY.m.+%QrgdU
%m*\W?)R@fD[kiCcoWohaYZ\$6bTq0PgM$L>ZAER,3l-"^Ie`4<f_dLO_4"nBY^_---WX7#F>g76MKNRK&;sP%o(Is>Ed6EIi'1)h
%P*uabIT)5=arBZ[4Q0Jt9RkY<OS)#\OnURAc4Q@i_Y8B%i9pI]4I5e-EhqQQLtFE<'Gb`!ILF[O_k#CSD'tm=YH;r#dD8G6b\`8_
%q_eVs8:>@SjMR-Ql'N(S,:$]OL"">C?<*mWS?bAiZX7ju.af6&d\'Mg;mb&Y_Se:;2)2.Em3Hg%8P&9_kC5;>&S@6(W"r2VrjU8d
%7TJCc`,a%2=V]O#+gWEE^_?u9/%NR'd!eNm['[)imT]Bh"`jSGCZXX/_A<lnI+QAeQrTHZ+/:S^D*(=2WbIW;C%5/I,+SBqHGuJ/
%a/.ln-''`Khg>4o><j8<dr[]g9&S[M>A0"Zs'j^Y7$ZaTdD[/Lq\E`:)/Ni8#\8gUCbfp_OjC<!IcNb9:odGHGCWSaOR3X(\q/sg
%$Q.."mrZ&;]p$2WW;a8/lc9fD&nd9:Zel8SLG[gP3sM7A"jB\9f/Gt?Oj>[2)!OQb^"A+b7MsGk8492bs3.)ITbFEs^=NGBcb.)-
%ft>kkqY+n,^$j>u"C'r^Mqr"]DN>EK':'>l97%bjMlk!@6i0+&d(m:k$GrCcZC!R=+nH6kBg-i.?4=FV8]qY=*"iJ!%<$'2oR`)]
%cMQE\H0b(Z4?.?4>=A-T1F<@Ko>hH,X:(AgKAiKo&.>:>`uL?Z4X3tn^)c9DN;VeJ"+!D)R?_:F%lkDMkfqj6d/D`'*=Z7k2nJOQ
%^OP\[KoI)%.UjUSIbL.Zd'=^k(4(%W\`A,\.T@A\rsa,dqcrR>Eho2[%ipc09W3-A`t-KS_YN50$Z\K(#"RG9Hd*&5p[iBqnA"tY
%J+\,#V@HA@TuG>Lc33ZoG)E(gVCir^/(]BGPrb9>$[Oc8[+pX.Q4dQn`ssL'=Q)H35KmVS]Pk8EbB%TD[-t``m)46hs(:.cLI3]u
%8rE<g(WId9l9P#1'aHlJaajhJ2`:3H>+'Z)%lik*/pG7K+YV4@kQ/dmc'\t^b5F[uXQ&[*[p,O&_$`;m\D1uoj?o:6TA%S]8!Y.*
%_S-$KL[0o06B]G\VQ%726U1a:+^Z(N/k,olZ\o\eK)WIS3tW__]6_+BZVRq&a<[0a`/,.7r(Q9HgQgLLFDKL(Rcp2d>iBe!N6lI,
%^=sX`PqmlFZDpjsfcK>?KPkjQ'qA3@<O\XRDEp\s=*8R$cf=u`#FYjlHcP;/HoeKhF_R?/M7&l6F&nY\61t]>joKm]LHG?6?!1-Z
%C(^?ok_/lXlK784&<i=aH`O^]`F]35\i6Zo@sB']=&70$H-2iqB/:>;<[*ffM4SR*?Xq+@.alk!E-&ShIRJC(2Ql<V2TsgtB"J/n
%'H?;e=$[/7a9si*$W(M\TsKBP\iG`4nUC!175%W[4(M58)QW+J/M.tp-@..CJgM#5ca^%X"J9OMGQPIE%a:qI_@)b&=0i#"F-#.a
%=$c'].@bS2(6Ho.6>-$nD0$97U]"qO`am9eDN%$K@;UWH3)Gu-=UBC_ZA[l`TQ\Q/C(]:hj:eQ2Zn!L#C3Mp`95K7"2[beIe7btj
%\c@G-(HOXfWggnN*q'n0:di]j&3)]uQ[!_$g-e^S#XpOdIR4H>Hmf$OSL:kG,E`MjGA)1cg3g)0d&?<;+>,^e/'dD]'\ZjVm,4m]
%%c_iI?i**b/SE08aAmcpgD!nnWFek(ll`ck&`bA+>(Fapj,!2J(h"gl\@E\6Zok":?\RUG%gCE)d>%K5G&'.SUQ`%$23b!nJ+^)h
%d[D&_dU595l8#.KAa-dFal_a-"f7<i.\aQN$<M?QDAd59[QC1<#P-MQE>G'O\Q)pc6G)Q)3'0+#>Jk\,moL0i\M')U`IbA,F"!;@
%ToDH'"$LU$R!#_m'D[\cRXF[V&njcnb"s,F+?A1hZNGK7#_A43&aWueS2jOaT[7FA]mHfg3JOH:Idq!`CkH-Q2@JYq[pWMYP9$Tt
%fB9B6oc9a5fEVe<\Q(fYQWH]>KQ!P]rV\Ft4qDV:,.O7M!b9`cT\*L78&&)1ZhMe`r7^?/Q+8@*8qa9;+Orq<)d@;08"LTkn]uRC
%H\_$SAJ`UWf`UGA]!?mu)+CBbgmY@j9V+Rd(4(3HSLt4$)M+e/3\$B_XAk(AD\apnA>Y*V%spUZ]o&)=%(,41inPUMfO8<KJ2Y8o
%iA5&UMHd>&&?IgeSD=As-%TUcS##FeOHNk;(EJ&nlmb"K-$`44?`e/;>hTmN`%]I=hl+s[@^a4kf65Ij.RU@/rBEO5=1HA``$_UF
%:GO!(;R/K`g?n!YSs)PX394<$m?XA<R^_%pPDK6`!@d=Xi[fg/C'&Y5Si6*nab95J+i>kH""P[ir`48qm,Za0Al;FHK"1^nmIPOk
%;Ie0]F!JT;4QHSg[lKU.T+(CHCmM/%)7Y&)$1M0MCsMn/A>l0SKK+NdjXDCK,OlMA^#A0bG8OsQ;=-6#O1e]i6m=/T*LGE`]AR`W
%$,FZ0RLm4[b,6uO=$\UOaE`5*MYB0^"XpeucslDRWjA55-E_;>e^,p:Btkd1j#Qb'&'aHVeRYp<38;6d:_lgGS'(/q'F4?fSlP0S
%)qpLdV@i'1VcN5o>G*dNI4+cM-t6,Fs1.t:Bl>FBW3qiArS>-N])Q^2QpbheRm]`!+eBZCmb(HH.uFI%B]s^[6?*CE4sqd2dJ)tb
%6("EIEZLu>a^TqPAr.'u$.=6B67**-'8St;I7B3hRYMp6NhY,j4Jn:2W*1UPgBTPcKT2%bV8T`KktbpU$T8l%'5KcBS)U.p^Y_lC
%e51db7%:l1*:`MT1BOdN3s)4'Fj3J`#GKr34*miB6DI]^FJ6=;hcFXtA\gJ9XU[ldS_[KRf?e,H:SW@"5(c1"2kM5pG2;__7<gUl
%ZR-*kZh14\pj_mL`&WPeGq,o=a<&J5QT-`nSDTY>ff<oq^S.l=)tuZ=,i.MP""JRfb9EIQe&BAc8:AX4APtSC:)6[jhKE`E)[(QO
%iM#2Z2UD,\Cb[6,16_flC[JBV!9$]>:35F<Oa'/$YJKK"BFR$LcMrW57Th/Y,^p^d'U0)d6Dh?EQq_uo+!B3=70SnBBmci(;bA7'
%P6plLW`!H]lBKW+^m#Q^ZR$FMlS8n]jT9!&BgA+=8rs#u]B7#Bh"4kUQ'<^f#qJPhSTKlSK^8&I=L/>JH.\l`d_jd$#8%3$CEBK'
%LXG8f*@_69"oeqMQ&<)FoX0jGjkal'_?uUES'.:R$MsHd9k"JN&Is),N$3p$H/5cn#1o/EHtkr0<j1p>8O?0H/JirLUWjJGC<FDe
%iB!q(&Z93B`pqg%'oXP&lFp+r!j=Lh!:+?HOu?7.BCl@+[h[I@r@5[g8Er*7?8%1FeHb-UhB)1e&i/EuTpPBEq4`>WiK"74STih#
%M3W1Qh[$_A%`/8-L=`HR+`/:I/L^9HIs._<&OUVMT0c/h9m)pO]1FWP5dT(K8Ig`j$q3Yu?chsS=f8AB?CM"^Jbk\Ffu"7D6MIJt
%m\E"G'B+s;lppC!Sd5/@?'u7OL&Wh7Uj`&fLZ(e3]oFc>@5fTG'0+GGPUM4`oPL"p5d>5adnF9d-.M>3Af]:#*;3PHh&':=PW4E8
%,af?SU!!d(L,tH49qk4)Q90u^G=fFalk<j.h,#@SFgfi/_!tI:IFWAD34Lo:4m4@t+p:T(HRWGd>Pn9)<fpTJg]Ho1U[-LT(5YLK
%p11"ZX9iic5eEmsJIe@^;;s,bc//AbgYieO'sL%iF@d1To]n#ZjsRkj@YKAL),u24pN,a#M)/KbC.Ga+@ZUqOr(9H6Ct!CYPl(q_
%<4,Z8NQj.s/270a@_80sP>Z-g&=0O#QhJEoHX3W80O`7[W@+Z)M92`D)2j$La4&&4S)?<]2dV<a`NkYU\@CO3;8@q$P.(1U7V+j*
%h^6HehnKKcBZ\_,NBHV:4kN38V)HI';Ud(a\>@[KH;;Md-f%Up[nf*'A^7OE"57"Jek`GC+3?m>V1""P`dt63GBDG\mh?"QRpi&m
%7<#+@fboP9BpPnr6*@p5(+cIh[8k*_]fpRjV2TitDP-i7IVnCi4c8Xlc^VdEG'-@CHL&*!Z7!_18me7Eeh"Wue'AgB_FE^&lfD=!
%ae6IoAG5jL!c?YI&Ph#l3lNu`@R7!LDQG%tlTCqFGqFa9Gbh`D[J_mY'b746?CS\P-[b.Mf$D7]Uihp+Uh-U0Z6t)VgfJC[/2pkm
%YBeJHG3%K;CUIW;i,IuHO6\SS0`hki%k%R)VrZlQc+9-WT(;6mXuY+0Wuk.@]<rq)8o.p[c[ZWn1/@Aok0$q_7OMCJ/a;oN'$bKi
%\o$!#<72omg3R[L+cq""DhU!H/1W8L73X7c8emRbp-)W`_7:+[L/-X5AhhD&SR.Y7cQX&A?"hn:=sp;\VD".3nt^,-NCoq]R=\'-
%Rd.EBT'G`$S%Y>V+llMI#m*YK(0D]TSuu?+jh&cJ0EMSq-CNRB2o]/_]rKO\-M1?tc,gkAd<S2,##g@imc]HIduHn:Mg2U"TD=7J
%QO>lLE_>iMV"bId^n&_`9FO\N\Xd4d8p9OtCaQo+2aUhT.t`+IWl<.M[+[GE%C`M4OI2tA]dF;:>@5Ih/q;J*El;DlHHu8r(?CJO
%bT5n]!tM`D4:lTEXU[n:S\852f,/+B:P4)S?6hnFpU"+sTPV*&T]C"a2*'--3%I%)6nBSLYhO;7Zf%iFb'od;TAGt0@#HORJW"0&
%Ds1l?'1Z#)A!i%m("I'-LOes')>00DVjXqCcWmsf<V2nG1oc/N[6j=>_6]R*nj2KKr/@*&`Qu)"UNK!sKOD3/*"`A`2f0N=ngThL
%p!*_Qn*'2^/F"6\\R#.0h*T0>bga2"Q9Lrm:O1.p.F.%9.*dFqh6'W<*%T%no4+%KM`Y*5YgJ6^C&<F(.B=aZQq;`BYaLa(!6&jD
%\=ZRm8]J66F6"O*;9F\">ADJF]F7k3QG'@58q^3`7/#8,]!=oc0]4dhqppGuUhtjo<No%!dAp3_PlQMM"'GL]^u\J>St<Q*h?qM:
%N:hEsX>*/p:Jf$se)aUj.KV%S;$59][n?sC\+$H/b_RYfq&>pWhCCM1H1C$VPf("U&`&u?0%ZQ!4qJ6)69nS>N$/k_KBUAsVHZ>q
%@f!dL"aR`Vm6Z`9]L$`Yd@n7lFpI(\4n%;Y\:u`=HQ)?'pJ1r38OH`K=EUS$A*,FVh3-Ln-u37#)Q]g3U0LpY9nR"jY3b69-t`+8
%]oq-eoqgNiG+pgd-\dF5!$_63lIo_sUl1JpJicF7IrQU)aT-Wj?ujI51+8/>HF#m`/b!.'I,UQIdcd@qf-\LCO'FD%r3VH%+f,m?
%p"`>ta.>t7H)g@-Zt$6U;IXUs4%u-h0l9JQ9_?[8e)O-l3pm>POq;F!NTqKb`JBBQ;YBE423'bsjlo9CHs^HOGrlo*9:L/EhS=rA
%"]dO,@Qa__NZt-<qFqR9A9C,]4K]._q@o24;lsi7T@]<ua$5e.hbU`\5mBBqEG4-k3K^V(UILIYV,C*fB7)JGqnV</\>)Hh\kY4j
%ZZ@YMLoRBE_crhPi=.&G7.tGrBXHJWTY0U>G=&T@(HMI;12`[T*bbhL7;jRZ>Bc(VR=0%J?"YZH*(^kq-/71n,e]mGf(9Porj7hq
%YT#r\dDqMX5fA`X)jothF1j@cH?-PVV/<1p+N=O/SFI#di[4=YS!?F`)teVkTOjqZ)4+nU_4HmsIMfD\Z=c'Os54]TOc1<U[-GKG
%*4&g-e0C2T[$/!V1+Q7W>Q\t6Us1pV;/AB/:CZmmk[&O)7q"\20eL7X2:rpt_P]4\be^oo6"2%J^26+]2seRCK]SYJ#J=C10,WR2
%IRhY*`Ap=9Vl*0B//7W7m"]X[<n?4B(M2T\p>Vd4DrtZ:cP,'7K[t(?o]WoBEMm98;+"TqGYnXhErp./GuCrU5eHS/2e!+bA>J%^
%Bfa*-Y"j#"m(L+bqnZk:RUhNFMbO+J&ho`a1%,>-F1*Rg==?`"o&S=mTKGKEh1/O!H'kK#r;%%4)pI/K]0+*G\WE6-3N1m#X<UVh
%=%TZ(:a7hHC*Hp7X:SfWEcg901LWHK<F,9,U7;J#^MY\#EccH*%,"WD-H[s>X=J5,rDg/XDu;u55R>lJ%7A@dkmBoVaAYQ/NpB78
%&S4%gr<?<:1na7b;(\B_"".uO,8,ct'JjXj<NaUrbAG;@3ukejr[X@WF>=%g1;3+bce%#(%`Y$[bi)`1ReQc@@\[e'V^",+4-+D6
%@;NmF..bc<1poon:h$u"h+t=k$]m=5X(%a7:[Ur`2PeG,71?:.8<\+<D\ZN0(puMfp6E[-q+fVhoU.p;EI+=Wn=8<74d[5cCcnC/
%ZXp>CI3c!(U[R<K)`idpQT?Ql:VS8B27KbQ]+\F/%[P*Le+!G68ooLC,=$:,+MOqZE>;0m5@Rcik7Ed&lp@c9`hg+"1[hN*i3c/'
%jjbp8-B(@:en]UV+IAH"0pW>d8!]o_)hKdqJDeq,+63RlqA`pf\)Gm(gQe#f4^lK"F]*%>ND\LLp]p:;n!gAd5/5]NXA!ZkD0te3
%]iidGLc-'0<3dFs0rlZ=,H%.r8/$<:kMk\t-o_TljaaC?<>QcrpL,+/7o<?@ob=DN\dhn]BQl`0A+L25Jo_d8]'&Utnn=e7%jhLB
%4o+,bKVbtV#,;>n;i*#EC7`m^TY6-P?\S'e274)\e&jdh>Vei\ZWT::./meuaa'>=dC4Y7W:^cCY*+jb7OTp@VS9d6:g7LD:pcVX
%N!"Bne$41XUL5P=Z_TW.b_]/0GG4XGnsaY4ML*[^V.9kVb#mUP4VdL^DP0CaP-TUb0mph6oUho&[5D1B8;1S(Z^h`!]<ojOja9!R
%&k54Jp0C[VYS4kG:>\6beZW)Y72[ZfH_CW!g\3ep]Zm5\U9aX'.e.EuQs"M9ig[0_nlE$X7at8dK"OsQ1QHY)&/].LMcG)2X4778
%\$L:bi#9M7mWl%?r/a[>_gtdbVn0heiV$o[Q$1VX>H!Q\S+B<p;::RkL'deu"ps;"NXUf?r"q1_'CBG(N'3JWT3%(`h6)HPcG$1<
%ondA4ek4Po4]iK0kTDT104$$HM*$$KECR.nfT]d2Fa"T=ULbcE[UsU',s_=kL(\lk"a:7UHYnpmMpQ2rJDF2sWQj!gk:/kT[a6S&
%RZr6$i)6Y[q<=m/eRc;_JX!->RddpI4RN4)c+_5"gGuaTM<:!<rfS"c`t=.>BTAMLGBA%7X0S3VnCg1a`2D@Rbd@QDrO.TX'agO-
%'FhH%aIDkS5#>%%(oq-bC9Lt23i(ZYrloJ!&@8gCdD#2Kb)Io9IpXSIR[&9tRuKQY^6te_9DKg"p8+9k`tT+gc`+'c3BXeu*0Nd*
%Cg'5Nl/tn1`*j8b5Rnp>d+,E?18dncIZMbFl6nB<gg``fl._/,;P,HEZt-1DS6%-p#=rML<H$.Y$/O;DBXccOaeC,_%8;YCZVeeP
%o#^YFGM3s:,G$#r[T9XuYp&>/*7>AaG];K0X5mo(C_Ud/$n*YYGJ5W>nQCiXE!,PNf2(8p/!fJWSTJphi\G8F"u)P7)**E;%RF'"
%:>3Xt9K*GDCkXq]C(r/8gH6tnO>Z6#AUl$Te!Xn"Fm).)>;S`$I.b[@L!GajSd,#="Zh6%ed(_._P_WRc3Im7aXX0513Vo9P%D4q
%^-[U3kuc/:,5qe!]t!&C+"J?F8]E9g:F?"-HT$bebB>=/P\>!f;m0!?%_kc?bN''F`)3_/U'6>p@b/`BNunPiOoMkXq(t@1blAMh
%D^k^i9Lp(f::7-*`1#D)e^od]GD4h3TLb,&l(M=Y@//Z,pOb9K3V_O&?$*:eTlcA!(J5GFcZbDjF%X\%bBiu?hN'[h]^1ud;RGUt
%H6]%kndk"PPHtM$s-6;3PtMX#Tq+"_g(FXdLWReU0=QOgo:SHn',p97`#7cV;O*q:Pe!IqKQ[SW2JDF7._#[AX*YcR.o3uP=R%5h
%aR4m0;GVKY?6_Xc_lJe#[XBJGWH'Ig6'!/K@.03)HjR$>\=&D+;nOC2S*PZ%5nrn%\7ESL#A]/uFIXRZ2q_I\WuV+61R@C!*[<qT
%fmji2lqMV(7FfC)h:'oU7"3p/M#"KFiiF+sfT6WIkO8V1*[)^*]fLh[rk"/uDVD6!iGs!X5eGe6=[lkKD98M#bA^f`oY0IPeGArM
%Qrq\:q;#MngTD*fq>hUTr"Z7Jg57[*ZR%&M^S@83UELUZbiLJ2%<"cM\33*ko@apk'pR9g\Q'FgDtd\P`BZSCBW+[/6-?=c!NFo.
%_,YF`@oi=\hH-j`>Xq4q6KMA*?&K^mKT'3X>JZJcn)uH;9t&,qjZA@dS`r1=UnR$6>$R`b_RYe`VX#WE*1uOc)HosN2LpE:1d+?e
%1pi^2U`kc`7s7joQulL$AE#S1$4b+=IC_hW3fQ.7O!'jK.(]QW"BifYnM"mP2FJh-0K0I_$QTN_hMgH0(.i'OgRRFbdJJeqg:.%u
%-<&(T);C@\H\kKeN\hP]&#`7QY'3YNiXV0jp$bMa!V0XlD%69X,^QFCkXL^Bk[68BB?T9u9s;d#,W34nX5%geXP*^i3)TbtUo%;L
%A3R+r,=Q?iD\ZN0(puMfp6E\c9fZ"*=D.hdqU+N<-K_DB_4./GX#SY-kp.JaTQif+QdU$gVXtiZ%Cs:Aa46FXDZ3FacflpmQHuL2
%akd0\^eirGk$Y1!,=3f1R:WNF^GaT+lO;0MpI-Dnr9C@O%oDe[o$8fB%WO;sH/alV)WM^+X[cOmlj>[&)S?_[-Pi:Ypb`a(GM(,o
%^ln7+Di,"8*o/3)rG,cG;mX"lg;>4R<&;3ej^.Ze(uk@%Hjc<NV:[WBcW`?kT,ph>2FNraGnH3qjIPaDc$+!n00fC4oFRtRd_]%G
%f$?kLSK9su;Kf.tGiYVi$[Wrl9@jd:?X48c'qCeVZ;AaiGX\qB5O(qP>>EC9K)%1=($#p<-BYA`H[n/QS#cnEe(MXm(l5KO'TNKq
%FCX2[p<$7bD!h:d]0Y?,W1\ZSZ3tV>?%m'?)V=2k][G:.!JRH=ErU*e]<<$X'Sc+mK%\Nu3La\`ku:cPltKE9'5,hS<g]sYa[24g
%=;#H@J&khe+(.NVH+F@4\uZD4EjbfW,c0/]%N,?H%^r=JK#6[Ei>[ZAV:c;[]m_XF.!LBoaap,<!`\T$OZAsl!pCb0heTi#+!qFl
%Gc$6^NsYH_1OQSII:PM!Jan/,>riM#Pm^2+CB=r9^I?hmC)dDp/D]u`5FJu6fSGoWrNJP^_fD0Yhp?sMa*#C"^9;ruV'r_WlbGhG
%-`"T;pU04X=`F.a6Zj%\m63)8B;!Mff0XU*Q#"FBh#T\*FQFNJ"kV[EF\h%GiSJX(Y`*+M)sjZ/5Y;<j:1aT]!GEHQr2JC$,".lV
%ed$27TUQh:=)HJf=').!Gp#mHN]dJ,P]&Q_'p-sV!530KWmUk0@D6-H6IXLX_D<cP.\hO^ap^Bu%R[P>FUg"Ab6N^iRZW;>K&*^`
%LT1XG3lL/%/NU`ZZ\S=W@N41->?)%;/M;!aCfN>Rs"q_3F#=26HT*RfW1$78*!%</BXap-KEej5/Z>/WnA?H*#+-s\o;[`L<N]5n
%d/cD#s41D8"Y1!Q8Q*dd!jl-:i9]:"D2mLgXKU8MPn-.i'1;1:08S+5htf`d0"q^!,8$2%6Hs$U+8.SsHK_^XC*Q!"%(2e^!U6L\
%.:<pmLO8<!D#jsF#'>$,f!YeQ1tn;Af&F^`0$fM1jL`[Ic.FrW(#`Ni7M7>k]GVlu.b^1*:dRj<X9d@m1<Z-'ZeYZX_eg/04:Ba.
%n^4DK"iYWe3]adNS&9Ilmn78/oudN!]2h_*CNm7d9bbmPfoRKEVHLBih6a+&`_@I%H6pUSUft/T2b;'J6F-c?=Hpb.O3E3tm;nu4
%"iYX$3r1dN>D%/=m47RKV\7MFT!PuEiqis?\P/_UI_BRc<q$^3"(r-[mk^F[&W,+VXMf]1WV:]#G1jib"`_QgT:YLZeu7Y0$A;Q!
%0?gVdf#q/PN+Q&bahV8'LH\PmZOB<64iDXFrW,K5"@Wo)%YpGm2SX8faF9T>@#MMHN06`D(VTOt>4,B[XKCPC&baFr[jk1s07@Wl
%0t34fNfKiR5blIt`r>X0q:"\4$K8IEOs\S3@CS;+*^G&8_F9tAq]6?ZNQL`Y7s)4fn"I$"bWObGJD?s\MHaZGIL+V,8Be"b6EApm
%HN-<K@gl.#rVj3m?4bU#V\-YRJfJ#!Wg%f4<30tMY\tj1*$A]O:<U-bd-OVHTt3pBAc3C5F[Y[!?&An#c#07"X0)WF7Me+4[q_CB
%GTQ2f5L%<*RXq!t`cO6U0g8Iij!O5P:n(e`6n6f=6+L,@*$`ip7V27+QB#Oa3[(D1)KC3@XFjK`WXI0gG(R&EZa)HAkHTL'__fca
%h'2-Lp%[@-e4d_uJ0rtsS_`\?<5B1#/T&I:W4PX]MEHENX(H3I2et<4&Up/F+G.gXo(Yd;@TGC\>H7cFh4)rs5s1/"M^KkG&Hu<X
%=HjScGkj^4CSD+G[H)[kh.X`E9Eb@n&@,[$2ONI0Y.\!c`mEq"Zp/)FFKC'jUj#6Ybj#6DRU,.DhPtIRiH_Y7r%q455g?qV`GCM0
%lmi?OO"_O%F`>o5&q25M[tm?L`dR)ufRP[[U9P91KXka0Nn+!A*q$-"PLY0q`S[Lf2/<UsBKMl^Qa+7bRSO.e[?($BoZH(jI/X'e
%s/H"P?[htJ\"E]ha)?J(dfo[A00fL-j'R<5q*4oFa)?J-GJF(ToDea`p@GK&;Y,sa?2scpbATUos6m`%p>aors7+_@"lVuC#=&1Z
%Q[caGrr9F0$D[~>
%AI9_PrivateDataEnd
