%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: plata_55.eps
%%Creator: Adobe Illustrator(R) 19.1
%%For: user
%%CreationDate: 4/12/2016
%%BoundingBox: 0 0 1200 1200
%%HiResBoundingBox: 0 0 1200 1200
%%CropBox: 0 0 1200 1200
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.1.0 x29 R agm 4.7731 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c067 79.157747, 2015/03/30-23:40:42        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">1</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:creator>
            <rdf:Seq>
               <rdf:li>Iryna</rdf:li>
            </rdf:Seq>
         </dc:creator>
         <dc:description>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Abstract vector background with high tech circuit board</rdf:li>
            </rdf:Alt>
         </dc:description>
         <dc:subject>
            <rdf:Bag>
               <rdf:li>circuit</rdf:li>
               <rdf:li>vector</rdf:li>
               <rdf:li>backgrounds</rdf:li>
               <rdf:li>pattern</rdf:li>
               <rdf:li>tech</rdf:li>
               <rdf:li>processor</rdf:li>
               <rdf:li>abstract</rdf:li>
               <rdf:li>abstraction</rdf:li>
               <rdf:li>chip</rdf:li>
               <rdf:li>card</rdf:li>
               <rdf:li>high</rdf:li>
               <rdf:li>design</rdf:li>
               <rdf:li>electrical equipment</rdf:li>
               <rdf:li>integrated</rdf:li>
               <rdf:li>technical</rdf:li>
               <rdf:li>computer part</rdf:li>
               <rdf:li>hardware</rdf:li>
               <rdf:li>engineering</rdf:li>
               <rdf:li>line</rdf:li>
               <rdf:li>cyberspace</rdf:li>
               <rdf:li>computer equipment</rdf:li>
               <rdf:li>graphic</rdf:li>
               <rdf:li>electronics industry</rdf:li>
               <rdf:li>digital</rdf:li>
               <rdf:li>technology</rdf:li>
               <rdf:li>computer</rdf:li>
               <rdf:li>circuit board</rdf:li>
               <rdf:li>illustration</rdf:li>
               <rdf:li>creativity</rdf:li>
               <rdf:li>connection</rdf:li>
               <rdf:li>computing</rdf:li>
               <rdf:li>backdrop</rdf:li>
               <rdf:li>science</rdf:li>
               <rdf:li>cover</rdf:li>
               <rdf:li>internal</rdf:li>
               <rdf:li>connect</rdf:li>
               <rdf:li>art</rdf:li>
               <rdf:li>industry</rdf:li>
               <rdf:li>conceptual</rdf:li>
               <rdf:li>construction</rdf:li>
               <rdf:li>textured</rdf:li>
               <rdf:li>computer chip</rdf:li>
               <rdf:li>mother board</rdf:li>
            </rdf:Bag>
         </dc:subject>
         <xmp:MetadataDate>2016-04-12T14:18:53+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2016-04-12T14:18:53+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2016-04-12T14:18:53+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A8qYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUxh0etvHPd3kFisw5QJOJi7oNuYWKOWi16FqV7ZaM&#xA;W1kgfP8AQHFlqvURGMp1zrh28tyN/d8V36KsP+rzZ/8AAXn/AGT4+HH+cP8AZfqR+Zn/AKlP5w/4&#xA;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&#xA;/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:75ec385f-6f13-2745-9e06-52de6f19997f</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:75ec385f-6f13-2745-9e06-52de6f19997f</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:9b4443ff-78b1-4f1f-9767-33ca951ab922</stRef:instanceID>
            <stRef:documentID>xmp.did:145A99264D6BE51194FFADFDE0B012D7</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F07763D45588E411BF89F345A28D8C9F</stEvt:instanceID>
                  <stEvt:when>2014-12-20T17:10:37+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:24845C695A88E411BF89F345A28D8C9F</stEvt:instanceID>
                  <stEvt:when>2014-12-20T17:11:02+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:28845C695A88E411BF89F345A28D8C9F</stEvt:instanceID>
                  <stEvt:when>2014-12-20T17:18:19+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4465C60ACE89E4119A65C8F5B8A1FEA0</stEvt:instanceID>
                  <stEvt:when>2014-12-22T13:47:05+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4A65C60ACE89E4119A65C8F5B8A1FEA0</stEvt:instanceID>
                  <stEvt:when>2014-12-22T14:37:09+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:A101F49FD789E4119A65C8F5B8A1FEA0</stEvt:instanceID>
                  <stEvt:when>2014-12-22T14:42:42+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:A201F49FD789E4119A65C8F5B8A1FEA0</stEvt:instanceID>
                  <stEvt:when>2014-12-22T14:48:24+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:A301F49FD789E4119A65C8F5B8A1FEA0</stEvt:instanceID>
                  <stEvt:when>2014-12-22T14:51:09+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:145A99264D6BE51194FFADFDE0B012D7</stEvt:instanceID>
                  <stEvt:when>2015-10-05T13:53:26+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:75ec385f-6f13-2745-9e06-52de6f19997f</stEvt:instanceID>
                  <stEvt:when>2016-04-12T14:18:53+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>1200.000000</stDim:w>
            <stDim:h>1200.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1200 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1200 li
1200 1200 li
1200 0 li
cp
clp
1200 1200 mo
0 1200 li
0 0 li
1200 0 li
1200 1200 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
0 0 0 rgb
f
1035.97 298.051 mo
1035.32 298.051 1034.8 297.524 1034.8 296.868 cv
1034.8 296.225 1035.32 295.694 1035.97 295.694 cv
1036.62 295.694 1037.15 296.225 1037.15 296.868 cv
1037.15 297.524 1036.63 298.051 1035.97 298.051 cv
cp
1150.17 276.978 mo
1121.54 276.978 li
1118.12 276.978 li
1104.29 276.978 li
1085.44 295.821 li
1040.56 295.821 li
1040.09 293.726 1038.22 292.162 1035.97 292.162 cv
1033.37 292.158 1031.26 294.273 1031.26 296.868 cv
1031.26 299.473 1033.37 301.584 1035.97 301.584 cv
1038.12 301.584 1039.93 300.143 1040.5 298.178 cv
1085.44 298.178 li
1104.29 279.335 li
1118.12 279.335 li
1121.54 279.335 li
1150.17 279.335 li
1150.17 276.978 li
cp
.376471 .788235 .901961 rgb
f
659.31 356.939 mo
658.659 356.939 658.132 356.412 658.132 355.76 cv
658.132 355.109 658.659 354.581 659.31 354.581 cv
659.957 354.581 660.484 355.109 660.484 355.76 cv
660.484 356.412 659.957 356.939 659.31 356.939 cv
cp
1150.17 354.716 mo
966.569 354.716 li
962.628 354.716 li
663.904 354.708 li
663.43 352.613 661.552 351.049 659.31 351.049 cv
656.706 351.049 654.598 353.16 654.598 355.76 cv
654.598 358.36 656.706 360.47 659.31 360.47 cv
661.459 360.47 663.269 359.034 663.838 357.065 cv
962.628 357.074 li
966.569 357.074 li
1150.17 357.074 li
1150.17 354.716 li
cp
f
1021.84 313.228 mo
1021.19 313.228 1020.66 312.704 1020.66 312.053 cv
1020.66 311.401 1021.19 310.875 1021.84 310.875 cv
1022.49 310.875 1023.02 311.401 1023.02 312.053 cv
1023.02 312.704 1022.49 313.228 1021.84 313.228 cv
cp
1150.17 292.162 mo
1121.54 292.162 li
1118.12 292.162 li
1100.62 292.162 li
1081.77 311.005 li
1026.43 311.005 li
1025.96 308.902 1024.08 307.342 1021.84 307.342 cv
1019.23 307.342 1017.13 309.456 1017.13 312.053 cv
1017.13 314.653 1019.23 316.764 1021.84 316.764 cv
1023.98 316.764 1025.8 315.331 1026.36 313.358 cv
1081.77 313.358 li
1100.62 294.52 li
1118.12 294.52 li
1121.54 294.52 li
1150.17 294.52 li
1150.17 292.162 li
cp
f
1111.68 332.003 mo
1111.68 331.352 1112.21 330.829 1112.86 330.829 cv
1113.51 330.829 1114.04 331.352 1114.04 332.003 cv
1114.04 332.654 1113.51 333.178 1112.86 333.178 cv
1112.21 333.178 1111.68 332.654 1111.68 332.003 cv
cp
1117.45 333.051 mo
1139.9 333.051 li
1139.9 330.694 li
1117.38 330.694 li
1116.82 328.729 1115.01 327.293 1112.86 327.293 cv
1110.26 327.293 1108.15 329.399 1108.15 332.003 cv
1108.15 334.608 1110.26 336.714 1112.86 336.714 cv
1115.1 336.714 1116.98 335.151 1117.45 333.051 cv
cp
f
708.215 335.737 mo
707.564 335.737 707.039 335.21 707.039 334.559 cv
707.039 333.908 707.564 333.381 708.215 333.381 cv
708.866 333.381 709.394 333.908 709.394 334.559 cv
709.394 335.21 708.866 335.737 708.215 335.737 cv
cp
1150.17 347.651 mo
1035.65 347.651 li
1013.07 347.651 li
771.815 347.644 li
757.683 333.511 li
712.805 333.511 li
712.335 331.412 710.456 329.848 708.215 329.848 cv
705.61 329.848 703.502 331.959 703.502 334.559 cv
703.502 337.16 705.615 339.27 708.215 339.27 cv
710.359 339.27 712.171 337.832 712.742 335.865 cv
757.683 335.869 li
771.815 350.001 li
1013.07 350.009 li
1035.65 350.009 li
1150.17 350.009 li
1150.17 347.651 li
cp
f
864.706 314.533 mo
864.06 314.533 863.532 314.006 863.532 313.358 cv
863.532 312.711 864.06 312.18 864.706 312.18 cv
865.356 312.18 865.889 312.711 865.889 313.358 cv
865.889 314.006 865.356 314.533 864.706 314.533 cv
cp
1150.17 316.767 mo
1112.82 316.767 li
1109.4 316.767 li
1100.28 316.767 li
1079.07 337.968 li
935.381 337.965 li
909.464 312.053 li
869.238 312.049 li
868.671 310.085 866.859 308.647 864.706 308.647 cv
862.105 308.647 859.997 310.758 859.997 313.358 cv
859.997 315.958 862.105 318.069 864.706 318.069 cv
866.952 318.069 868.83 316.505 869.307 314.402 cv
909.464 314.406 li
935.381 340.318 li
1079.07 340.318 li
1100.28 319.122 li
1109.4 319.122 li
1112.82 319.122 li
1150.17 319.122 li
1150.17 316.767 li
cp
f
659.31 413.476 mo
658.659 413.476 658.132 412.949 658.132 412.293 cv
658.132 411.646 658.659 411.118 659.31 411.118 cv
659.962 411.118 660.484 411.646 660.484 412.293 cv
660.484 412.949 659.962 413.476 659.31 413.476 cv
cp
1150.17 378.273 mo
770.028 378.273 li
748.827 399.471 li
678.156 399.471 li
666.374 411.245 li
663.904 411.245 li
663.43 409.15 661.552 407.582 659.31 407.582 cv
656.706 407.582 654.598 409.692 654.598 412.293 cv
654.598 414.898 656.706 417.008 659.31 417.008 cv
661.459 417.008 663.269 415.571 663.838 413.603 cv
666.374 413.603 li
678.156 401.824 li
748.827 401.824 li
770.028 380.626 li
1150.17 380.631 li
1150.17 378.273 li
cp
f
659.31 375.782 mo
658.659 375.782 658.132 375.258 658.132 374.606 cv
658.132 373.955 658.659 373.428 659.31 373.428 cv
659.957 373.428 660.484 373.955 660.484 374.606 cv
660.484 375.258 659.957 375.782 659.31 375.782 cv
cp
1150.17 364.145 mo
966.307 364.137 li
962.893 364.137 li
762.958 364.137 li
744.114 382.981 li
704.069 382.981 li
694.643 373.556 li
663.904 373.556 li
663.43 371.456 661.552 369.892 659.31 369.892 cv
656.706 369.892 654.598 372.003 654.598 374.606 cv
654.598 377.211 656.706 379.318 659.31 379.318 cv
661.459 379.318 663.269 377.877 663.838 375.912 cv
694.643 375.917 li
704.069 385.338 li
744.114 385.338 li
762.958 366.494 li
962.893 366.494 li
966.307 366.494 li
1150.17 366.494 li
1150.17 364.145 li
cp
f
689.935 444.098 mo
689.282 444.098 688.756 443.567 688.756 442.916 cv
688.756 442.271 689.282 441.741 689.935 441.741 cv
690.585 441.741 691.111 442.271 691.111 442.916 cv
691.111 443.567 690.585 444.098 689.935 444.098 cv
cp
962.893 399.474 mo
777.092 399.471 li
734.692 441.875 li
694.527 441.875 li
694.053 439.776 692.178 438.208 689.935 438.208 cv
687.331 438.208 685.221 440.319 685.221 442.916 cv
685.221 445.52 687.331 447.63 689.935 447.63 cv
692.08 447.63 693.894 446.193 694.461 444.229 cv
734.692 444.229 li
777.092 401.824 li
962.893 401.832 li
966.307 401.832 li
1150.17 401.832 li
1150.17 399.478 li
966.307 399.474 li
962.893 399.474 li
cp
f
659.31 394.629 mo
658.659 394.629 658.132 394.101 658.132 393.45 cv
658.132 392.798 658.659 392.272 659.31 392.272 cv
659.962 392.272 660.484 392.798 660.484 393.45 cv
660.484 394.101 659.962 394.629 659.31 394.629 cv
cp
1150.17 371.209 mo
966.307 371.203 li
962.893 371.203 li
767.669 371.203 li
746.471 392.402 li
663.904 392.402 li
663.43 390.307 661.552 388.735 659.31 388.735 cv
656.706 388.735 654.598 390.85 654.598 393.45 cv
654.598 396.054 656.706 398.164 659.31 398.164 cv
661.459 398.164 663.269 396.724 663.838 394.76 cv
746.471 394.76 li
767.669 373.559 li
962.893 373.564 li
966.307 373.564 li
1150.17 373.566 li
1150.17 371.209 li
cp
f
689.935 425.247 mo
689.282 425.247 688.754 424.723 688.754 424.071 cv
688.754 423.421 689.282 422.897 689.935 422.897 cv
690.585 422.897 691.111 423.421 691.111 424.071 cv
691.111 424.723 690.585 425.247 689.935 425.247 cv
cp
1150.17 390.057 mo
966.307 390.052 li
962.893 390.052 li
777.092 390.048 li
744.114 423.024 li
694.527 423.024 li
694.053 420.929 692.178 419.365 689.935 419.365 cv
687.331 419.365 685.221 421.471 685.221 424.071 cv
685.221 426.677 687.331 428.787 689.935 428.787 cv
692.08 428.787 693.894 427.346 694.461 425.382 cv
744.114 425.382 li
777.092 392.402 li
962.893 392.407 li
966.307 392.407 li
1150.17 392.41 li
1150.17 390.057 li
cp
f
1012.42 419.455 mo
1011.77 419.455 1011.24 418.927 1011.24 418.273 cv
1011.24 417.625 1011.77 417.098 1012.42 417.098 cv
1013.07 417.098 1013.59 417.625 1013.59 418.273 cv
1013.59 418.927 1013.07 419.455 1012.42 419.455 cv
cp
1150.17 434.766 mo
1121.54 434.766 li
1120.77 434.766 li
1104.29 451.256 li
1045.39 451.256 li
1015.75 421.603 li
1016.6 420.757 1017.13 419.579 1017.13 418.273 cv
1017.13 415.676 1015.02 413.565 1012.42 413.565 cv
1009.81 413.565 1007.7 415.676 1007.7 418.273 cv
1007.7 420.876 1009.81 422.987 1012.42 422.987 cv
1013.11 422.987 1013.76 422.838 1014.36 422.572 cv
1045.39 453.609 li
1104.29 453.617 li
1120.77 437.123 li
1121.54 437.123 li
1150.17 437.123 li
1150.17 434.766 li
cp
f
1104.29 505.166 mo
1103.64 505.166 1103.11 504.638 1103.11 503.988 cv
1103.11 503.344 1103.64 502.809 1104.29 502.809 cv
1104.94 502.809 1105.47 503.344 1105.47 503.988 cv
1105.47 504.638 1104.94 505.166 1104.29 505.166 cv
cp
1118.12 502.944 mo
1108.88 502.944 li
1108.41 500.844 1106.53 499.277 1104.29 499.277 cv
1101.69 499.277 1099.58 501.383 1099.58 503.988 cv
1099.58 506.592 1101.69 508.698 1104.29 508.698 cv
1106.44 508.698 1108.25 507.265 1108.82 505.297 cv
1118.12 505.297 li
1121.54 505.297 li
1150.17 505.297 li
1150.17 502.944 li
1121.54 502.944 li
1118.12 502.944 li
cp
f
995.93 419.455 mo
995.277 419.455 994.75 418.927 994.75 418.273 cv
994.75 417.622 995.277 417.098 995.93 417.098 cv
996.58 417.098 997.107 417.622 997.107 418.273 cv
997.107 418.927 996.58 419.455 995.93 419.455 cv
cp
1150.17 441.833 mo
1127.85 441.833 li
1108.99 460.681 li
1038.33 460.681 li
999.261 421.603 li
1000.11 420.757 1000.64 419.579 1000.64 418.273 cv
1000.64 415.676 998.53 413.565 995.93 413.565 cv
993.324 413.565 991.216 415.676 991.216 418.273 cv
991.216 420.876 993.324 422.987 995.93 422.987 cv
996.618 422.987 997.275 422.838 997.866 422.572 cv
1038.33 463.03 li
1108.99 463.03 li
1127.85 444.192 li
1150.17 444.192 li
1150.17 441.833 li
cp
f
1104.29 488.677 mo
1103.64 488.677 1103.11 488.152 1103.11 487.499 cv
1103.11 486.851 1103.64 486.319 1104.29 486.319 cv
1104.94 486.319 1105.47 486.851 1105.47 487.499 cv
1105.47 488.152 1104.94 488.677 1104.29 488.677 cv
cp
1150.17 486.446 mo
1121.54 486.446 li
1118.12 486.446 li
1108.88 486.446 li
1108.41 484.351 1106.53 482.787 1104.29 482.787 cv
1101.69 482.787 1099.58 484.897 1099.58 487.499 cv
1099.58 490.098 1101.69 492.208 1104.29 492.208 cv
1106.44 492.208 1108.25 490.772 1108.82 488.804 cv
1118.12 488.812 li
1121.54 488.812 li
1150.17 488.812 li
1150.17 486.446 li
cp
f
747.339 454.193 mo
746.688 454.193 746.158 453.662 746.158 453.01 cv
746.158 452.364 746.688 451.835 747.339 451.835 cv
747.988 451.835 748.518 452.364 748.518 453.01 cv
748.518 453.662 747.988 454.193 747.339 454.193 cv
cp
1050.92 408.26 mo
1054.34 408.26 li
1150.17 408.26 li
1150.17 405.906 li
1054.34 405.906 li
1050.92 405.906 li
862.765 405.903 li
839.209 429.46 li
770.896 429.453 li
750.67 449.68 li
749.815 448.828 748.64 448.304 747.339 448.304 cv
744.734 448.304 742.626 450.41 742.626 453.01 cv
742.626 455.615 744.736 457.725 747.339 457.725 cv
749.941 457.725 752.053 455.615 752.053 453.01 cv
752.053 452.323 751.901 451.664 751.63 451.072 cv
770.896 431.814 li
839.209 431.814 li
862.765 408.26 li
1050.92 408.26 li
cp
f
1061.88 419.455 mo
1061.24 419.455 1060.71 418.927 1060.71 418.277 cv
1060.71 417.625 1061.24 417.098 1061.88 417.098 cv
1062.54 417.098 1063.06 417.625 1063.06 418.277 cv
1063.06 418.927 1062.54 419.455 1061.88 419.455 cv
cp
1150.17 410.168 mo
1121.54 410.168 li
1118.12 410.168 li
1097.22 410.168 li
1087.8 417.232 li
1066.48 417.232 li
1066 415.133 1064.13 413.565 1061.88 413.565 cv
1059.28 413.565 1057.18 415.676 1057.18 418.277 cv
1057.18 420.876 1059.28 422.987 1061.88 422.987 cv
1064.03 422.987 1065.85 421.55 1066.41 419.582 cv
1087.8 419.582 li
1097.22 412.518 li
1118.12 412.518 li
1121.54 412.518 li
1150.17 412.518 li
1150.17 410.168 li
cp
f
1028.91 419.455 mo
1028.26 419.455 1027.73 418.927 1027.73 418.273 cv
1027.73 417.625 1028.26 417.098 1028.91 417.098 cv
1029.56 417.098 1030.08 417.625 1030.08 418.273 cv
1030.08 418.927 1029.56 419.455 1028.91 419.455 cv
cp
1150.17 427.702 mo
1121.54 427.702 li
1118.12 427.702 li
1116.07 427.702 li
1104.29 439.481 li
1050.11 439.481 li
1032.24 421.603 li
1033.09 420.757 1033.62 419.579 1033.62 418.277 cv
1033.62 415.676 1031.51 413.565 1028.91 413.565 cv
1026.3 413.565 1024.2 415.676 1024.2 418.273 cv
1024.2 420.876 1026.3 422.987 1028.91 422.987 cv
1029.6 422.987 1030.26 422.838 1030.85 422.572 cv
1050.11 441.833 li
1104.29 441.833 li
1116.07 430.058 li
1118.12 430.058 li
1121.54 430.058 li
1150.17 430.058 li
1150.17 427.702 li
cp
f
1045.39 419.455 mo
1044.75 419.455 1044.22 418.927 1044.22 418.277 cv
1044.22 417.625 1044.75 417.098 1045.39 417.098 cv
1046.05 417.098 1046.58 417.625 1046.58 418.277 cv
1046.58 418.927 1046.05 419.455 1045.39 419.455 cv
cp
1150.17 420.638 mo
1121.54 420.633 li
1118.12 420.633 li
1106.64 420.633 li
1094.87 432.409 li
1059.53 432.409 li
1048.73 421.603 li
1049.58 420.757 1050.11 419.579 1050.11 418.277 cv
1050.11 415.676 1048 413.565 1045.39 413.565 cv
1042.79 413.565 1040.68 415.676 1040.68 418.277 cv
1040.68 420.876 1042.79 422.987 1045.39 422.987 cv
1046.09 422.987 1046.74 422.838 1047.33 422.576 cv
1059.53 434.766 li
1094.87 434.766 li
1106.64 422.987 li
1118.12 422.987 li
1121.54 422.987 li
1150.17 422.987 li
1150.17 420.638 li
cp
f
1104.29 472.187 mo
1103.64 472.187 1103.11 471.66 1103.11 471.008 cv
1103.11 470.357 1103.64 469.833 1104.29 469.833 cv
1104.94 469.833 1105.47 470.357 1105.47 471.008 cv
1105.47 471.66 1104.94 472.187 1104.29 472.187 cv
cp
1150.17 469.969 mo
1121.54 469.961 li
1118.12 469.961 li
1108.88 469.961 li
1108.41 467.866 1106.53 466.297 1104.29 466.297 cv
1101.69 466.297 1099.57 468.404 1099.57 471.008 cv
1099.57 473.612 1101.69 475.718 1104.29 475.718 cv
1106.44 475.718 1108.25 474.285 1108.82 472.317 cv
1118.12 472.317 li
1121.54 472.317 li
1150.17 472.317 li
1150.17 469.969 li
cp
f
845.168 462.949 mo
844.518 462.949 843.988 462.417 843.988 461.766 cv
843.988 461.116 844.518 460.584 845.168 460.584 cv
845.815 460.584 846.345 461.116 846.345 461.766 cv
846.345 462.417 845.815 462.949 845.168 462.949 cv
cp
1118.12 543.17 mo
1092.51 543.17 li
1092.51 529.035 li
979.439 415.961 li
927.613 415.961 li
882.854 460.718 li
849.76 460.718 li
849.284 458.623 847.405 457.051 845.168 457.051 cv
842.564 457.051 840.453 459.162 840.453 461.766 cv
840.453 464.363 842.564 466.48 845.168 466.48 cv
847.313 466.48 849.126 465.036 849.695 463.073 cv
882.854 463.073 li
927.613 418.317 li
979.439 418.317 li
1090.15 529.035 li
1090.15 545.521 li
1118.12 545.528 li
1121.54 545.528 li
1150.17 545.528 li
1150.17 543.17 li
1121.54 543.17 li
1118.12 543.17 li
cp
f
845.168 495.92 mo
844.518 495.92 843.988 495.394 843.988 494.746 cv
843.988 494.094 844.518 493.564 845.168 493.564 cv
845.815 493.564 846.345 494.094 846.345 494.746 cv
846.345 495.394 845.815 495.92 845.168 495.92 cv
cp
1118.12 551.283 mo
1083.09 551.283 li
1083.09 530.083 li
981.794 428.787 li
929.97 428.787 li
887.568 471.188 li
866.365 471.188 li
847.106 490.449 li
846.516 490.181 845.857 490.031 845.168 490.031 cv
842.564 490.031 840.453 492.142 840.453 494.746 cv
840.453 497.342 842.564 499.457 845.168 499.457 cv
847.769 499.457 849.88 497.342 849.88 494.746 cv
849.88 493.443 849.352 492.268 848.497 491.415 cv
866.365 473.545 li
887.568 473.545 li
929.97 431.144 li
981.794 431.144 li
1080.73 530.083 li
1080.73 553.64 li
1118.12 553.64 li
1121.54 553.64 li
1150.17 553.64 li
1150.17 551.283 li
1121.54 551.283 li
1118.12 551.283 li
cp
f
1139.34 521.388 mo
1139.34 520.736 1139.87 520.212 1140.52 520.212 cv
1141.17 520.212 1141.69 520.736 1141.69 521.388 cv
1141.69 521.533 1141.66 521.664 1141.61 521.787 cv
1150.17 521.787 li
1150.17 520.343 li
1145.11 520.343 li
1145.04 520.025 1144.92 519.721 1144.79 519.43 cv
1136.24 519.43 li
1135.97 520.025 1135.8 520.688 1135.8 521.388 cv
1135.8 521.525 1135.83 521.656 1135.84 521.787 cv
1139.42 521.787 li
1139.37 521.664 1139.34 521.533 1139.34 521.388 cv
cp
f
1140.52 520.212 mo
1139.87 520.212 1139.34 520.736 1139.34 521.388 cv
1139.34 521.533 1139.37 521.664 1139.42 521.787 cv
1141.61 521.787 li
1141.66 521.664 1141.69 521.533 1141.69 521.388 cv
1141.69 520.736 1141.17 520.212 1140.52 520.212 cv
cp
f
1150.17 520.343 mo
1150.17 519.43 li
1144.79 519.43 li
1144.92 519.721 1145.04 520.025 1145.11 520.343 cv
1150.17 520.343 li
cp
f
1104.29 521.656 mo
1103.64 521.656 1103.11 521.125 1103.11 520.477 cv
1103.11 519.83 1103.64 519.298 1104.29 519.298 cv
1104.94 519.298 1105.47 519.83 1105.47 520.477 cv
1105.47 521.125 1104.94 521.656 1104.29 521.656 cv
cp
1136.24 519.43 mo
1121.54 519.43 li
1118.12 519.43 li
1108.88 519.43 li
1108.41 517.334 1106.53 515.767 1104.29 515.767 cv
1101.69 515.767 1099.58 517.877 1099.58 520.477 cv
1099.58 523.078 1101.69 525.188 1104.29 525.188 cv
1106.44 525.188 1108.25 523.752 1108.82 521.787 cv
1118.12 521.787 li
1121.54 521.787 li
1135.84 521.787 li
1135.83 521.656 1135.8 521.525 1135.8 521.388 cv
1135.8 520.688 1135.97 520.025 1136.24 519.43 cv
cp
f
1034.7 891.867 mo
1034.05 891.867 1033.52 891.344 1033.52 890.693 cv
1033.52 890.043 1034.05 889.512 1034.7 889.512 cv
1035.35 889.512 1035.88 890.043 1035.88 890.693 cv
1035.88 891.344 1035.35 891.867 1034.7 891.867 cv
cp
1148.9 870.803 mo
1120.27 870.803 li
1116.85 870.803 li
1103.02 870.803 li
1084.17 889.646 li
1039.29 889.646 li
1038.82 887.547 1036.95 885.979 1034.7 885.979 cv
1032.1 885.979 1029.99 888.09 1029.99 890.693 cv
1029.99 893.291 1032.1 895.4 1034.7 895.4 cv
1036.85 895.4 1038.66 893.967 1039.23 892.002 cv
1084.17 892.002 li
1103.02 873.156 li
1116.85 873.156 li
1120.27 873.156 li
1148.9 873.156 li
1148.9 870.803 li
cp
f
471.998 950.756 mo
471.352 950.756 470.821 950.232 470.821 949.58 cv
470.821 948.93 471.352 948.404 471.998 948.404 cv
472.65 948.404 473.177 948.93 473.177 949.58 cv
473.177 950.232 472.65 950.756 471.998 950.756 cv
cp
1148.9 948.541 mo
965.299 948.541 li
961.357 948.541 li
476.592 948.531 li
476.119 946.438 474.245 944.871 471.998 944.871 cv
469.398 944.871 467.288 946.977 467.288 949.58 cv
467.288 952.182 469.398 954.291 471.998 954.291 cv
474.147 954.291 475.956 952.859 476.526 950.891 cv
961.357 950.894 li
965.299 950.894 li
1148.9 950.898 li
1148.9 948.541 li
cp
f
1020.57 907.049 mo
1019.92 907.049 1019.39 906.521 1019.39 905.869 cv
1019.39 905.219 1019.92 904.695 1020.57 904.695 cv
1021.22 904.695 1021.75 905.219 1021.75 905.869 cv
1021.75 906.521 1021.22 907.049 1020.57 907.049 cv
cp
1148.9 885.979 mo
1120.27 885.979 li
1116.85 885.979 li
1099.35 885.979 li
1080.51 904.826 li
1025.17 904.826 li
1024.69 902.727 1022.81 901.162 1020.57 901.162 cv
1017.96 901.162 1015.85 903.273 1015.85 905.869 cv
1015.85 908.475 1017.96 910.586 1020.57 910.586 cv
1022.71 910.586 1024.53 909.144 1025.1 907.18 cv
1080.51 907.18 li
1099.35 888.336 li
1116.85 888.336 li
1120.27 888.336 li
1148.9 888.336 li
1148.9 885.979 li
cp
f
1110.41 925.82 mo
1110.41 925.174 1110.94 924.646 1111.59 924.646 cv
1112.24 924.646 1112.77 925.174 1112.77 925.82 cv
1112.77 926.477 1112.24 927.002 1111.59 927.002 cv
1110.94 927.002 1110.41 926.477 1110.41 925.82 cv
cp
1116.18 926.869 mo
1138.63 926.869 li
1138.63 924.518 li
1116.12 924.518 li
1115.55 922.551 1113.74 921.113 1111.59 921.113 cv
1108.99 921.113 1106.88 923.225 1106.88 925.82 cv
1106.88 928.426 1108.99 930.535 1111.59 930.535 cv
1113.83 930.535 1115.71 928.971 1116.18 926.869 cv
cp
f
607.31 929.557 mo
606.664 929.557 606.133 929.031 606.133 928.381 cv
606.133 927.731 606.664 927.201 607.31 927.201 cv
607.962 927.201 608.489 927.731 608.489 928.381 cv
608.489 929.031 607.962 929.557 607.31 929.557 cv
cp
1148.9 941.477 mo
1034.38 941.469 li
1011.8 941.469 li
670.916 941.469 li
656.778 927.332 li
611.904 927.332 li
611.431 925.238 609.557 923.666 607.31 923.666 cv
604.711 923.666 602.598 925.775 602.598 928.381 cv
602.598 930.981 604.711 933.094 607.31 933.094 cv
609.459 933.094 611.271 931.656 611.838 929.685 cv
656.778 929.69 li
670.916 943.826 li
1011.8 943.826 li
1034.38 943.83 li
1148.9 943.834 li
1148.9 941.477 li
cp
f
863.44 908.357 mo
862.789 908.357 862.263 907.83 862.263 907.18 cv
862.263 906.529 862.789 906.002 863.44 906.002 cv
864.088 906.002 864.618 906.529 864.618 907.18 cv
864.618 907.83 864.088 908.357 863.44 908.357 cv
cp
1148.9 910.588 mo
1111.55 910.588 li
1108.13 910.588 li
1099.01 910.588 li
1077.8 931.785 li
934.113 931.785 li
908.194 905.869 li
867.966 905.869 li
867.4 903.906 865.589 902.469 863.44 902.469 cv
860.835 902.469 858.731 904.574 858.731 907.18 cv
858.731 909.781 860.835 911.891 863.44 911.891 cv
865.682 911.891 867.56 910.322 868.036 908.227 cv
908.194 908.227 li
934.113 934.143 li
1077.8 934.143 li
1099.01 912.941 li
1108.13 912.941 li
1111.55 912.941 li
1148.9 912.941 li
1148.9 910.588 li
cp
f
471.998 1007.29 mo
471.352 1007.29 470.821 1006.77 470.821 1006.12 cv
470.821 1005.47 471.352 1004.94 471.998 1004.94 cv
472.65 1004.94 473.177 1005.47 473.177 1006.12 cv
473.177 1006.77 472.65 1007.29 471.998 1007.29 cv
cp
1148.9 972.094 mo
669.123 972.092 li
647.923 993.291 li
490.846 993.291 li
479.067 1005.06 li
476.592 1005.06 li
476.119 1002.97 474.245 1001.4 471.998 1001.4 cv
469.398 1001.4 467.288 1003.51 467.288 1006.12 cv
467.288 1008.72 469.398 1010.83 471.998 1010.83 cv
474.147 1010.83 475.961 1009.39 476.526 1007.43 cv
479.067 1007.43 li
490.846 995.648 li
647.923 995.648 li
669.123 974.447 li
1148.9 974.455 li
1148.9 972.094 li
cp
f
57.6108 969.604 mo
56.9595 969.604 56.4321 969.074 56.4321 968.424 cv
56.4321 967.773 56.9595 967.25 57.6108 967.25 cv
58.2573 967.25 58.7852 967.773 58.7852 968.424 cv
58.7852 969.074 58.2573 969.604 57.6108 969.604 cv
cp
1148.9 957.963 mo
965.037 957.963 li
961.622 957.963 li
662.059 957.955 li
643.212 976.807 li
603.164 976.807 li
593.738 967.375 li
62.2017 967.375 li
61.7266 965.281 59.8516 963.713 57.6108 963.713 cv
55.0054 963.713 52.896 965.822 52.896 968.424 cv
52.896 971.029 55.0054 973.139 57.6108 973.139 cv
59.7588 973.139 61.5693 971.701 62.1377 969.732 cv
593.738 969.732 li
603.164 979.154 li
643.212 979.154 li
662.059 960.313 li
961.622 960.32 li
965.037 960.32 li
1148.9 960.32 li
1148.9 957.963 li
cp
f
589.029 1037.92 mo
588.378 1037.92 587.853 1037.39 587.853 1036.74 cv
587.853 1036.09 588.378 1035.56 589.029 1035.56 cv
589.683 1035.56 590.207 1036.09 590.207 1036.74 cv
590.207 1037.39 589.683 1037.92 589.029 1037.92 cv
cp
961.622 993.293 mo
676.191 993.291 li
633.789 1035.69 li
593.627 1035.69 li
593.149 1033.6 591.273 1032.03 589.029 1032.03 cv
586.431 1032.03 584.32 1034.14 584.32 1036.74 cv
584.32 1039.34 586.431 1041.45 589.029 1041.45 cv
591.18 1041.45 592.989 1040.01 593.556 1038.05 cv
633.789 1038.05 li
676.191 995.648 li
961.622 995.648 li
965.037 995.648 li
1148.9 995.65 li
1148.9 993.293 li
965.037 993.293 li
961.622 993.293 li
cp
f
57.6108 988.449 mo
56.9595 988.449 56.4321 987.916 56.4321 987.268 cv
56.4321 986.619 56.9595 986.092 57.6108 986.092 cv
58.2612 986.092 58.7852 986.619 58.7852 987.268 cv
58.7852 987.916 58.2612 988.449 57.6108 988.449 cv
cp
1148.9 965.027 mo
965.037 965.027 li
961.622 965.027 li
666.768 965.019 li
645.566 986.227 li
62.2017 986.227 li
61.7266 984.125 59.8516 982.56 57.6108 982.56 cv
55.0054 982.56 52.896 984.666 52.896 987.268 cv
52.896 989.869 55.0054 991.982 57.6108 991.982 cv
59.7588 991.982 61.5693 990.543 62.1377 988.576 cv
645.566 988.586 li
666.768 967.375 li
961.622 967.383 li
965.037 967.383 li
1148.9 967.383 li
1148.9 965.027 li
cp
f
589.029 1019.07 mo
588.378 1019.07 587.853 1018.54 587.853 1017.89 cv
587.853 1017.24 588.378 1016.71 589.029 1016.71 cv
589.683 1016.71 590.207 1017.24 590.207 1017.89 cv
590.207 1018.54 589.683 1019.07 589.029 1019.07 cv
cp
1148.9 983.877 mo
965.037 983.873 li
961.622 983.873 li
676.191 983.873 li
643.212 1016.85 li
593.627 1016.85 li
593.149 1014.75 591.273 1013.18 589.029 1013.18 cv
586.431 1013.18 584.315 1015.29 584.315 1017.89 cv
584.32 1020.49 586.431 1022.6 589.029 1022.6 cv
591.18 1022.6 592.989 1021.17 593.556 1019.2 cv
643.212 1019.21 li
676.191 986.227 li
961.622 986.227 li
965.037 986.227 li
1148.9 986.231 li
1148.9 983.877 li
cp
f
1011.15 1013.28 mo
1010.5 1013.28 1009.97 1012.75 1009.97 1012.1 cv
1009.97 1011.45 1010.5 1010.92 1011.15 1010.92 cv
1011.8 1010.92 1012.33 1011.45 1012.33 1012.1 cv
1012.33 1012.75 1011.8 1013.28 1011.15 1013.28 cv
cp
1148.9 1028.59 mo
1120.27 1028.59 li
1119.51 1028.59 li
1103.02 1045.08 li
1044.13 1045.08 li
1014.48 1015.43 li
1015.33 1014.57 1015.86 1013.4 1015.86 1012.1 cv
1015.86 1009.49 1013.75 1007.39 1011.15 1007.39 cv
1008.55 1007.39 1006.43 1009.49 1006.43 1012.1 cv
1006.43 1014.7 1008.55 1016.81 1011.15 1016.81 cv
1011.84 1016.81 1012.49 1016.66 1013.08 1016.39 cv
1044.13 1047.44 li
1103.02 1047.44 li
1119.51 1030.95 li
1120.27 1030.95 li
1148.9 1030.95 li
1148.9 1028.59 li
cp
f
1103.02 1098.99 mo
1102.37 1098.99 1101.84 1098.46 1101.84 1097.81 cv
1101.84 1097.16 1102.37 1096.63 1103.02 1096.63 cv
1103.67 1096.63 1104.19 1097.16 1104.19 1097.81 cv
1104.19 1098.46 1103.67 1098.99 1103.02 1098.99 cv
cp
1116.85 1096.77 mo
1107.61 1096.77 li
1107.13 1094.66 1105.26 1093.1 1103.02 1093.1 cv
1100.42 1093.1 1098.31 1095.21 1098.31 1097.81 cv
1098.31 1100.41 1100.42 1102.52 1103.02 1102.52 cv
1105.17 1102.52 1106.98 1101.08 1107.55 1099.12 cv
1116.85 1099.12 li
1120.27 1099.12 li
1148.9 1099.12 li
1148.9 1096.77 li
1120.27 1096.77 li
1116.85 1096.77 li
cp
f
994.654 1013.27 mo
994.009 1013.27 993.481 1012.75 993.481 1012.1 cv
993.481 1011.45 994.009 1010.92 994.654 1010.92 cv
995.31 1010.92 995.833 1011.45 995.833 1012.1 cv
995.833 1012.75 995.31 1013.27 994.654 1013.27 cv
cp
1148.9 1035.66 mo
1126.58 1035.66 li
1107.73 1054.5 li
1037.06 1054.5 li
997.986 1015.43 li
998.843 1014.57 999.367 1013.4 999.367 1012.1 cv
999.367 1009.49 997.255 1007.39 994.654 1007.39 cv
992.054 1007.39 989.946 1009.49 989.946 1012.1 cv
989.946 1014.7 992.054 1016.81 994.654 1016.81 cv
995.348 1016.81 996.005 1016.66 996.6 1016.39 cv
1037.06 1056.86 li
1107.73 1056.86 li
1126.58 1038.01 li
1148.9 1038.01 li
1148.9 1035.66 li
cp
f
1103.02 1082.49 mo
1102.37 1082.49 1101.84 1081.97 1101.84 1081.32 cv
1101.84 1080.67 1102.37 1080.13 1103.02 1080.13 cv
1103.67 1080.13 1104.19 1080.67 1104.19 1081.32 cv
1104.19 1081.97 1103.67 1082.49 1103.02 1082.49 cv
cp
1148.9 1080.27 mo
1120.27 1080.27 li
1116.85 1080.27 li
1107.61 1080.27 li
1107.13 1078.18 1105.26 1076.61 1103.02 1076.61 cv
1100.42 1076.61 1098.31 1078.71 1098.31 1081.32 cv
1098.31 1083.92 1100.42 1086.03 1103.02 1086.03 cv
1105.17 1086.03 1106.98 1084.59 1107.55 1082.63 cv
1116.85 1082.63 li
1120.27 1082.63 li
1148.9 1082.63 li
1148.9 1080.27 li
cp
f
646.435 1048.01 mo
645.788 1048.01 645.258 1047.49 645.258 1046.84 cv
645.258 1046.18 645.788 1045.65 646.435 1045.65 cv
647.086 1045.65 647.617 1046.18 647.617 1046.84 cv
647.617 1047.49 647.086 1048.01 646.435 1048.01 cv
cp
1049.65 1002.08 mo
1053.07 1002.08 li
1148.9 1002.08 li
1148.9 999.727 li
1053.07 999.727 li
1049.65 999.727 li
861.496 999.721 li
837.938 1023.28 li
669.992 1023.28 li
649.764 1043.51 li
648.915 1042.65 647.736 1042.13 646.435 1042.13 cv
643.834 1042.13 641.726 1044.23 641.726 1046.84 cv
641.726 1049.44 643.834 1051.54 646.435 1051.54 cv
649.039 1051.54 651.147 1049.44 651.147 1046.84 cv
651.147 1046.14 650.997 1045.49 650.728 1044.89 cv
669.992 1025.63 li
837.938 1025.63 li
861.496 1002.08 li
1049.65 1002.08 li
cp
f
1060.61 1013.28 mo
1059.97 1013.28 1059.44 1012.75 1059.44 1012.1 cv
1059.44 1011.45 1059.97 1010.92 1060.61 1010.92 cv
1061.27 1010.92 1061.79 1011.45 1061.79 1012.1 cv
1061.79 1012.75 1061.27 1013.28 1060.61 1013.28 cv
cp
1148.9 1003.99 mo
1120.27 1003.99 li
1116.85 1003.99 li
1095.95 1003.99 li
1086.53 1011.05 li
1065.21 1011.05 li
1064.73 1008.95 1062.86 1007.39 1060.61 1007.39 cv
1058.01 1007.39 1055.91 1009.49 1055.91 1012.1 cv
1055.91 1014.7 1058.01 1016.81 1060.61 1016.81 cv
1062.76 1016.81 1064.58 1015.37 1065.14 1013.41 cv
1086.53 1013.41 li
1095.95 1006.34 li
1116.85 1006.34 li
1120.27 1006.34 li
1148.9 1006.34 li
1148.9 1003.99 li
cp
f
1027.64 1013.28 mo
1026.98 1013.28 1026.46 1012.75 1026.46 1012.1 cv
1026.46 1011.45 1026.98 1010.92 1027.64 1010.92 cv
1028.29 1010.92 1028.81 1011.45 1028.81 1012.1 cv
1028.81 1012.75 1028.29 1013.28 1027.64 1013.28 cv
cp
1148.9 1021.52 mo
1120.27 1021.52 li
1116.85 1021.52 li
1114.8 1021.52 li
1103.02 1033.3 li
1048.84 1033.3 li
1030.97 1015.43 li
1031.82 1014.57 1032.35 1013.4 1032.35 1012.1 cv
1032.35 1009.49 1030.23 1007.39 1027.64 1007.39 cv
1025.03 1007.39 1022.92 1009.49 1022.92 1012.1 cv
1022.92 1014.7 1025.03 1016.81 1027.64 1016.81 cv
1028.33 1016.81 1028.99 1016.66 1029.58 1016.39 cv
1048.84 1035.66 li
1103.02 1035.66 li
1114.8 1023.88 li
1116.85 1023.88 li
1120.27 1023.88 li
1148.9 1023.88 li
1148.9 1021.52 li
cp
f
1044.13 1013.28 mo
1043.47 1013.28 1042.95 1012.75 1042.95 1012.1 cv
1042.95 1011.45 1043.47 1010.92 1044.13 1010.92 cv
1044.78 1010.92 1045.31 1011.45 1045.31 1012.1 cv
1045.31 1012.75 1044.78 1013.28 1044.13 1013.28 cv
cp
1148.9 1014.46 mo
1120.27 1014.46 li
1116.85 1014.46 li
1105.37 1014.46 li
1093.59 1026.23 li
1058.26 1026.23 li
1047.46 1015.43 li
1048.31 1014.57 1048.84 1013.4 1048.84 1012.1 cv
1048.83 1009.49 1046.73 1007.39 1044.13 1007.39 cv
1041.53 1007.39 1039.41 1009.49 1039.41 1012.1 cv
1039.41 1014.7 1041.53 1016.81 1044.13 1016.81 cv
1044.81 1016.81 1045.47 1016.66 1046.06 1016.39 cv
1058.26 1028.59 li
1093.59 1028.59 li
1105.37 1016.81 li
1116.85 1016.81 li
1120.27 1016.81 li
1148.9 1016.81 li
1148.9 1014.46 li
cp
f
1103.02 1066.01 mo
1102.37 1066.01 1101.84 1065.48 1101.84 1064.83 cv
1101.84 1064.18 1102.37 1063.65 1103.02 1063.65 cv
1103.67 1063.65 1104.19 1064.18 1104.19 1064.83 cv
1104.19 1065.48 1103.67 1066.01 1103.02 1066.01 cv
cp
1148.9 1063.79 mo
1120.27 1063.79 li
1116.85 1063.79 li
1107.61 1063.79 li
1107.13 1061.68 1105.26 1060.12 1103.02 1060.12 cv
1100.42 1060.12 1098.31 1062.23 1098.31 1064.83 cv
1098.31 1067.43 1100.42 1069.54 1103.02 1069.54 cv
1105.17 1069.54 1106.98 1068.1 1107.55 1066.14 cv
1116.85 1066.14 li
1120.27 1066.14 li
1148.9 1066.14 li
1148.9 1063.79 li
cp
f
843.896 1056.76 mo
843.245 1056.76 842.72 1056.23 842.72 1055.58 cv
842.72 1054.93 843.245 1054.41 843.896 1054.41 cv
844.548 1054.41 845.074 1054.93 845.074 1055.58 cv
845.074 1056.23 844.548 1056.76 843.896 1056.76 cv
cp
1116.86 1136.99 mo
1091.24 1136.99 li
1091.24 1122.86 li
978.167 1009.79 li
926.343 1009.79 li
881.585 1054.54 li
848.489 1054.54 li
848.016 1052.44 846.137 1050.88 843.896 1050.88 cv
841.296 1050.88 839.183 1052.99 839.183 1055.58 cv
839.183 1058.19 841.296 1060.3 843.896 1060.3 cv
846.042 1060.3 847.856 1058.86 848.426 1056.89 cv
881.585 1056.89 li
926.343 1012.14 li
978.167 1012.14 li
1088.89 1122.86 li
1088.89 1139.34 li
1116.86 1139.34 li
1120.27 1139.34 li
1148.9 1139.34 li
1148.9 1136.99 li
1120.27 1136.99 li
1116.86 1136.99 li
cp
f
843.897 1089.74 mo
843.245 1089.74 842.72 1089.21 842.72 1088.56 cv
842.72 1087.91 843.245 1087.38 843.897 1087.38 cv
844.548 1087.38 845.074 1087.91 845.074 1088.56 cv
845.074 1089.21 844.548 1089.74 843.897 1089.74 cv
cp
1116.86 1145.11 mo
1081.82 1145.11 li
1081.82 1123.91 li
980.524 1022.6 li
928.695 1022.6 li
886.298 1065.01 li
865.098 1065.01 li
845.836 1084.27 li
845.243 1084.01 844.588 1083.86 843.897 1083.86 cv
841.296 1083.86 839.183 1085.96 839.183 1088.56 cv
839.183 1091.17 841.296 1093.28 843.897 1093.28 cv
846.498 1093.28 848.605 1091.17 848.605 1088.56 cv
848.605 1087.26 848.078 1086.08 847.227 1085.23 cv
865.098 1067.36 li
886.298 1067.36 li
928.695 1024.96 li
980.524 1024.96 li
1079.46 1123.91 li
1079.46 1147.46 li
1116.86 1147.46 li
1120.27 1147.46 li
1148.9 1147.46 li
1148.9 1145.11 li
1120.27 1145.11 li
1116.86 1145.11 li
cp
f
1138.07 1115.21 mo
1138.07 1114.56 1138.6 1114.04 1139.25 1114.04 cv
1139.89 1114.04 1140.42 1114.56 1140.42 1115.21 cv
1140.42 1115.35 1140.39 1115.48 1140.34 1115.61 cv
1148.9 1115.61 li
1148.9 1114.17 li
1143.84 1114.17 li
1143.77 1113.84 1143.65 1113.54 1143.52 1113.25 cv
1134.97 1113.25 li
1134.7 1113.85 1134.53 1114.51 1134.53 1115.21 cv
1134.53 1115.35 1134.56 1115.47 1134.57 1115.61 cv
1138.15 1115.61 li
1138.1 1115.48 1138.07 1115.35 1138.07 1115.21 cv
cp
f
1139.25 1114.04 mo
1138.6 1114.04 1138.07 1114.56 1138.07 1115.21 cv
1138.07 1115.35 1138.1 1115.48 1138.15 1115.61 cv
1140.34 1115.61 li
1140.39 1115.48 1140.42 1115.35 1140.42 1115.21 cv
1140.42 1114.56 1139.89 1114.04 1139.25 1114.04 cv
cp
f
1148.9 1114.17 mo
1148.9 1113.25 li
1143.52 1113.25 li
1143.65 1113.54 1143.77 1113.84 1143.84 1114.17 cv
1148.9 1114.17 li
cp
f
1103.02 1115.47 mo
1102.37 1115.47 1101.84 1114.95 1101.84 1114.3 cv
1101.84 1113.65 1102.37 1113.12 1103.02 1113.12 cv
1103.67 1113.12 1104.19 1113.65 1104.19 1114.3 cv
1104.19 1114.95 1103.67 1115.47 1103.02 1115.47 cv
cp
1134.97 1113.25 mo
1120.27 1113.25 li
1116.85 1113.25 li
1107.61 1113.25 li
1107.13 1111.15 1105.26 1109.59 1103.02 1109.59 cv
1100.42 1109.59 1098.31 1111.7 1098.31 1114.3 cv
1098.31 1116.9 1100.42 1119.01 1103.02 1119.01 cv
1105.17 1119.01 1106.98 1117.58 1107.55 1115.61 cv
1116.85 1115.61 li
1120.27 1115.61 li
1134.57 1115.61 li
1134.56 1115.47 1134.53 1115.35 1134.53 1115.21 cv
1134.53 1114.51 1134.7 1113.85 1134.97 1113.25 cv
cp
f
72.9478 659.479 mo
72.2964 659.479 71.7681 658.949 71.7681 658.299 cv
71.7681 657.652 72.2964 657.121 72.9478 657.121 cv
73.5981 657.121 74.1216 657.652 74.1216 658.299 cv
74.1216 658.949 73.5981 659.479 72.9478 659.479 cv
cp
1148.25 624.117 mo
337.067 624.277 li
315.867 645.477 li
91.7939 645.477 li
80.0107 657.256 li
77.542 657.256 li
77.0625 655.156 75.1885 653.588 72.9478 653.588 cv
70.3423 653.588 68.2319 655.699 68.2319 658.299 cv
68.2319 660.9 70.3423 663.01 72.9478 663.01 cv
75.0913 663.01 76.9053 661.574 77.4702 659.613 cv
80.0107 659.613 li
91.7939 647.834 li
315.867 647.834 li
337.067 626.633 li
1148.25 626.473 li
1148.25 624.117 li
cp
f
256.977 690.1 mo
256.325 690.1 255.798 689.576 255.798 688.926 cv
255.798 688.273 256.325 687.748 256.977 687.748 cv
257.627 687.748 258.155 688.273 258.155 688.926 cv
258.155 689.576 257.627 690.1 256.977 690.1 cv
cp
629.566 645.481 mo
344.136 645.477 li
301.734 687.879 li
261.571 687.879 li
261.096 685.783 259.218 684.211 256.977 684.211 cv
254.373 684.211 252.265 686.326 252.265 688.926 cv
252.265 691.527 254.373 693.637 256.977 693.637 cv
259.124 693.637 260.935 692.199 261.503 690.234 cv
301.734 690.234 li
344.136 647.834 li
629.566 647.834 li
632.984 647.834 li
1148.25 647.67 li
1148.25 645.313 li
632.984 645.481 li
629.566 645.481 li
cp
f
256.977 671.258 mo
256.325 671.258 255.798 670.731 255.798 670.082 cv
255.798 669.428 256.325 668.9 256.977 668.9 cv
257.627 668.9 258.155 669.428 258.155 670.082 cv
258.155 670.731 257.627 671.258 256.977 671.258 cv
cp
1148.25 635.894 mo
632.984 636.059 li
629.566 636.059 li
344.136 636.059 li
311.156 669.035 li
261.571 669.035 li
261.096 666.935 259.218 665.369 256.977 665.369 cv
254.373 665.369 252.265 667.479 252.265 670.082 cv
252.265 672.684 254.373 674.789 256.977 674.789 cv
259.124 674.789 260.935 673.354 261.503 671.393 cv
311.156 671.393 li
344.136 638.412 li
629.566 638.412 li
632.984 638.412 li
1148.25 638.248 li
1148.25 635.894 li
cp
f
679.094 665.457 mo
678.443 665.457 677.914 664.934 677.914 664.283 cv
677.914 663.631 678.443 663.107 679.094 663.107 cv
679.743 663.107 680.271 663.631 680.271 664.283 cv
680.271 664.934 679.743 665.457 679.094 665.457 cv
cp
1148.25 680.607 mo
788.217 680.777 li
787.448 680.777 li
770.966 697.264 li
712.069 697.264 li
682.428 667.613 li
683.278 666.76 683.805 665.586 683.805 664.283 cv
683.805 661.682 681.694 659.57 679.094 659.57 cv
676.49 659.57 674.379 661.678 674.379 664.283 cv
674.379 666.887 676.49 668.994 679.094 668.994 cv
679.787 668.994 680.441 668.84 681.032 668.578 cv
712.069 699.619 li
770.966 699.619 li
787.448 683.125 li
788.217 683.125 li
1148.25 682.961 li
1148.25 680.607 li
cp
f
770.966 751.172 mo
770.314 751.172 769.787 750.644 769.787 749.994 cv
769.787 749.346 770.314 748.816 770.966 748.816 cv
771.616 748.816 772.144 749.346 772.144 749.994 cv
772.144 750.644 771.616 751.172 770.966 751.172 cv
cp
784.8 748.951 mo
775.559 748.951 li
775.085 746.848 773.207 745.283 770.966 745.283 cv
768.36 745.283 766.252 747.393 766.252 749.994 cv
766.252 752.596 768.36 754.703 770.966 754.703 cv
773.111 754.703 774.921 753.268 775.492 751.307 cv
784.8 751.307 li
788.217 751.307 li
1148.25 751.135 li
1148.25 748.777 li
788.217 748.951 li
784.8 748.951 li
cp
f
662.603 665.457 mo
661.953 665.457 661.426 664.934 661.426 664.283 cv
661.426 663.631 661.953 663.107 662.603 663.107 cv
663.256 663.107 663.778 663.631 663.778 664.283 cv
663.778 664.934 663.256 665.457 662.603 665.457 cv
cp
1148.25 687.672 mo
794.523 687.84 li
775.675 706.685 li
705.006 706.685 li
665.935 667.613 li
666.785 666.76 667.315 665.586 667.315 664.283 cv
667.315 661.678 665.205 659.57 662.603 659.57 cv
660 659.57 657.891 661.678 657.891 664.283 cv
657.891 666.887 660 668.994 662.603 668.994 cv
663.293 668.994 663.951 668.84 664.542 668.578 cv
705.006 709.041 li
775.675 709.041 li
794.523 690.197 li
1148.25 690.033 li
1148.25 687.672 li
cp
f
770.966 734.68 mo
770.314 734.68 769.787 734.156 769.787 733.504 cv
769.787 732.854 770.314 732.322 770.966 732.322 cv
771.616 732.322 772.144 732.854 772.144 733.504 cv
772.144 734.156 771.616 734.68 770.966 734.68 cv
cp
1148.25 732.289 mo
788.217 732.457 li
784.8 732.457 li
775.559 732.457 li
775.085 730.361 773.207 728.789 770.966 728.789 cv
768.36 728.789 766.252 730.902 766.252 733.504 cv
766.252 736.109 768.36 738.211 770.966 738.211 cv
773.111 738.211 774.921 736.779 775.492 734.815 cv
784.8 734.815 li
788.217 734.815 li
1148.25 734.648 li
1148.25 732.289 li
cp
f
314.378 700.195 mo
313.73 700.195 313.204 699.668 313.204 699.021 cv
313.204 698.369 313.73 697.838 314.378 697.838 cv
315.03 697.838 315.557 698.369 315.557 699.021 cv
315.557 699.668 315.03 700.195 314.378 700.195 cv
cp
717.591 654.262 mo
721.011 654.262 li
1148.25 654.102 li
1148.25 651.748 li
721.011 651.912 li
717.591 651.912 li
529.445 651.906 li
505.883 675.463 li
337.936 675.463 li
317.711 695.688 li
316.859 694.834 315.68 694.31 314.378 694.31 cv
311.777 694.31 309.671 696.416 309.671 699.021 cv
309.671 701.625 311.777 703.729 314.382 703.729 cv
316.982 703.729 319.093 701.625 319.093 699.021 cv
319.093 698.328 318.943 697.674 318.673 697.078 cv
337.936 677.82 li
505.883 677.82 li
529.445 654.262 li
717.591 654.262 li
cp
f
728.563 665.457 mo
727.912 665.457 727.385 664.934 727.385 664.283 cv
727.385 663.631 727.912 663.107 728.563 663.107 cv
729.21 663.107 729.737 663.631 729.737 664.283 cv
729.737 664.934 729.215 665.457 728.563 665.457 cv
cp
1148.25 656.006 mo
788.217 656.172 li
784.8 656.172 li
763.896 656.172 li
754.471 663.236 li
733.157 663.236 li
732.684 661.141 730.805 659.57 728.563 659.57 cv
725.959 659.57 723.851 661.682 723.851 664.283 cv
723.851 666.887 725.959 668.994 728.563 668.994 cv
730.712 668.994 732.521 667.553 733.086 665.592 cv
754.471 665.592 li
763.896 658.523 li
784.8 658.523 li
788.217 658.523 li
1148.25 658.359 li
1148.25 656.006 li
cp
f
695.584 665.457 mo
694.933 665.457 694.401 664.934 694.401 664.283 cv
694.401 663.631 694.933 663.107 695.584 663.107 cv
696.235 663.107 696.758 663.631 696.758 664.283 cv
696.758 664.934 696.235 665.457 695.584 665.457 cv
cp
1148.25 673.539 mo
788.217 673.705 li
784.8 673.705 li
782.739 673.705 li
770.966 685.484 li
716.78 685.484 li
698.915 667.613 li
699.766 666.76 700.292 665.586 700.292 664.283 cv
700.292 661.682 698.185 659.57 695.584 659.57 cv
692.978 659.57 690.871 661.682 690.871 664.283 cv
690.871 666.887 692.978 668.994 695.584 668.994 cv
696.271 668.994 696.931 668.848 697.519 668.578 cv
716.78 687.84 li
770.966 687.84 li
782.739 676.06 li
784.8 676.06 li
788.217 676.06 li
1148.25 675.896 li
1148.25 673.539 li
cp
f
712.069 665.457 mo
711.42 665.457 710.894 664.934 710.894 664.283 cv
710.894 663.631 711.42 663.107 712.069 663.107 cv
712.721 663.107 713.25 663.631 713.25 664.283 cv
713.25 664.934 712.721 665.457 712.069 665.457 cv
cp
1148.25 666.475 mo
788.217 666.641 li
784.8 666.641 li
773.317 666.641 li
761.543 678.414 li
726.207 678.414 li
715.402 667.613 li
716.258 666.76 716.78 665.586 716.78 664.283 cv
716.78 661.682 714.674 659.57 712.069 659.57 cv
709.472 659.57 707.358 661.682 707.358 664.283 cv
707.358 666.887 709.472 668.994 712.069 668.994 cv
712.763 668.994 713.418 668.848 714.008 668.582 cv
726.207 680.777 li
761.543 680.777 li
773.317 668.994 li
784.8 668.994 li
788.217 668.994 li
1148.25 668.826 li
1148.25 666.475 li
cp
f
770.966 718.193 mo
770.314 718.193 769.787 717.67 769.787 717.018 cv
769.787 716.367 770.314 715.836 770.966 715.836 cv
771.616 715.836 772.144 716.367 772.144 717.018 cv
772.144 717.67 771.616 718.193 770.966 718.193 cv
cp
1148.25 715.803 mo
788.217 715.971 li
784.8 715.971 li
775.559 715.971 li
775.085 713.871 773.207 712.305 770.966 712.305 cv
768.36 712.305 766.25 714.416 766.25 717.018 cv
766.25 719.623 768.36 721.727 770.966 721.727 cv
773.111 721.727 774.921 720.289 775.492 718.32 cv
784.8 718.32 li
788.217 718.32 li
1148.25 718.156 li
1148.25 715.803 li
cp
f
511.839 708.951 mo
511.192 708.951 510.663 708.42 510.663 707.768 cv
510.663 707.117 511.192 706.594 511.839 706.594 cv
512.492 706.594 513.019 707.117 513.019 707.768 cv
513.019 708.42 512.492 708.951 511.839 708.951 cv
cp
784.8 789.174 mo
759.186 789.174 li
759.186 775.041 li
646.114 661.971 li
594.288 661.971 li
549.53 706.725 li
516.435 706.725 li
515.959 704.625 514.081 703.059 511.839 703.059 cv
509.239 703.059 507.132 705.172 507.132 707.768 cv
507.132 710.373 509.239 712.484 511.839 712.484 cv
513.988 712.484 515.802 711.047 516.371 709.078 cv
549.53 709.078 li
594.288 664.324 li
646.114 664.324 li
756.828 775.041 li
756.83 791.529 li
784.8 791.529 li
788.217 791.529 li
1148.25 791.367 li
1148.25 789.008 li
788.217 789.174 li
784.8 789.174 li
cp
f
511.843 741.93 mo
511.192 741.93 510.663 741.4 510.663 740.748 cv
510.663 740.102 511.192 739.574 511.843 739.574 cv
512.492 739.574 513.022 740.102 513.022 740.748 cv
513.022 741.4 512.492 741.93 511.843 741.93 cv
cp
784.8 797.289 mo
749.765 797.289 li
749.765 776.088 li
648.469 674.793 li
596.644 674.789 li
554.243 717.197 li
533.042 717.197 li
513.781 736.453 li
513.19 736.184 512.537 736.041 511.843 736.041 cv
509.239 736.041 507.132 738.144 507.132 740.748 cv
507.132 743.352 509.239 745.459 511.843 745.459 cv
514.443 745.459 516.555 743.352 516.555 740.748 cv
516.555 739.445 516.027 738.271 515.172 737.418 cv
533.042 719.547 li
554.243 719.547 li
596.644 677.146 li
648.469 677.146 li
747.408 776.088 li
747.408 799.643 li
784.8 799.65 li
788.217 799.65 li
1148.25 799.482 li
1148.25 797.121 li
788.217 797.289 li
784.8 797.289 li
cp
f
770.966 767.662 mo
770.314 767.662 769.787 767.135 769.787 766.484 cv
769.787 765.832 770.314 765.305 770.966 765.305 cv
771.616 765.305 772.144 765.832 772.144 766.484 cv
772.144 767.135 771.616 767.662 770.966 767.662 cv
cp
1149.31 765.271 mo
788.217 765.435 li
784.8 765.435 li
775.559 765.435 li
775.085 763.34 773.207 761.773 770.966 761.773 cv
768.36 761.773 766.252 763.879 766.252 766.484 cv
766.252 769.086 768.36 771.193 770.966 771.193 cv
773.111 771.193 774.921 769.762 775.492 767.793 cv
784.8 767.793 li
788.217 767.793 li
1148.91 767.621 li
1148.91 767.494 1148.88 767.367 1148.88 767.231 cv
1148.88 766.529 1149.04 765.863 1149.31 765.271 cv
cp
f
1011.07 52.0762 mo
1010.42 52.0762 1009.89 51.5479 1009.89 50.8931 cv
1009.89 50.2461 1010.42 49.7178 1011.07 49.7178 cv
1011.72 49.7178 1012.25 50.2461 1012.25 50.8931 cv
1012.25 51.5479 1011.72 52.0762 1011.07 52.0762 cv
cp
1148.82 67.3862 mo
1120.19 67.3862 li
1119.43 67.3862 li
1102.94 83.876 li
1044.05 83.876 li
1014.4 54.2305 li
1015.25 53.377 1015.78 52.1953 1015.78 50.8931 cv
1015.78 48.2964 1013.67 46.1865 1011.07 46.1865 cv
1008.47 46.1865 1006.36 48.2964 1006.36 50.8931 cv
1006.36 53.4976 1008.47 55.6074 1011.07 55.6074 cv
1011.76 55.6074 1012.41 55.4575 1013.01 55.189 cv
1044.05 86.2295 li
1102.94 86.2339 li
1119.43 69.7441 li
1120.19 69.7441 li
1148.82 69.7441 li
1148.82 67.3862 li
cp
f
1102.94 137.787 mo
1102.29 137.787 1101.76 137.259 1101.76 136.608 cv
1101.76 135.956 1102.29 135.425 1102.94 135.425 cv
1103.59 135.425 1104.12 135.956 1104.12 136.608 cv
1104.12 137.259 1103.59 137.787 1102.94 137.787 cv
cp
1116.77 135.561 mo
1107.53 135.561 li
1107.05 133.465 1105.18 131.897 1102.94 131.897 cv
1100.34 131.897 1098.23 134.004 1098.23 136.608 cv
1098.23 139.212 1100.34 141.319 1102.94 141.319 cv
1105.09 141.319 1106.9 139.886 1107.47 137.918 cv
1116.77 137.918 li
1120.19 137.918 li
1148.82 137.918 li
1148.82 135.561 li
1120.19 135.561 li
1116.77 135.561 li
cp
f
994.579 52.0762 mo
993.929 52.0762 993.403 51.5479 993.403 50.8931 cv
993.403 50.2461 993.929 49.7178 994.579 49.7178 cv
995.229 49.7178 995.757 50.2461 995.757 50.8931 cv
995.757 51.5479 995.229 52.0762 994.579 52.0762 cv
cp
1148.82 74.4551 mo
1126.5 74.4551 li
1107.65 93.3018 li
1036.98 93.3018 li
997.908 54.2305 li
998.765 53.377 999.292 52.1953 999.292 50.8931 cv
999.292 48.2964 997.182 46.1865 994.579 46.1865 cv
991.976 46.1865 989.866 48.2964 989.871 50.8931 cv
989.871 53.4976 991.976 55.6074 994.579 55.6074 cv
995.269 55.6074 995.926 55.4575 996.519 55.189 cv
1036.98 95.6514 li
1107.65 95.6514 li
1126.5 76.8115 li
1148.82 76.8115 li
1148.82 74.4551 li
cp
f
1102.94 121.298 mo
1102.29 121.298 1101.76 120.77 1101.76 120.118 cv
1101.76 119.471 1102.29 118.94 1102.94 118.94 cv
1103.59 118.94 1104.12 119.471 1104.12 120.118 cv
1104.12 120.77 1103.59 121.298 1102.94 121.298 cv
cp
1148.82 119.067 mo
1120.19 119.067 li
1116.77 119.067 li
1107.53 119.067 li
1107.05 116.972 1105.18 115.407 1102.94 115.407 cv
1100.34 115.407 1098.23 117.515 1098.23 120.118 cv
1098.23 122.719 1100.34 124.829 1102.94 124.829 cv
1105.09 124.829 1106.9 123.393 1107.47 121.424 cv
1116.77 121.424 li
1120.19 121.424 li
1148.82 121.424 li
1148.82 119.067 li
cp
f
745.984 86.8125 mo
745.342 86.8125 744.81 86.2827 744.81 85.6313 cv
744.81 84.9834 745.342 84.4561 745.984 84.4561 cv
746.64 84.4561 747.167 84.9834 747.167 85.6313 cv
747.167 86.2827 746.64 86.8125 745.984 86.8125 cv
cp
1049.57 40.8804 mo
1052.99 40.8804 li
1148.82 40.8804 li
1148.82 38.5264 li
1052.99 38.5264 li
1049.57 38.5264 li
861.418 38.5229 li
837.858 62.0806 li
769.542 62.0737 li
749.32 82.3013 li
748.47 81.4473 747.287 80.9233 745.984 80.9233 cv
743.389 80.9233 741.28 83.0313 741.28 85.6313 cv
741.28 88.2349 743.389 90.3457 745.993 90.3457 cv
748.594 90.3457 750.7 88.2349 750.7 85.6313 cv
750.7 84.9424 750.552 84.2837 750.286 83.6934 cv
769.542 64.4307 li
837.858 64.4307 li
861.418 40.8804 li
1049.57 40.8804 li
cp
f
1015.66 188.499 mo
1018.02 188.499 li
1003.69 174.164 li
1001.33 174.164 li
1015.66 188.499 li
cp
f
1006.24 188.499 mo
1008.6 188.499 li
994.267 174.164 li
991.91 174.164 li
1006.24 188.499 li
cp
f
1060.54 52.0762 mo
1059.88 52.0762 1059.36 51.5479 1059.36 50.8931 cv
1059.36 50.2461 1059.88 49.7178 1060.54 49.7178 cv
1061.19 49.7178 1061.72 50.2461 1061.72 50.8931 cv
1061.72 51.5479 1061.19 52.0762 1060.54 52.0762 cv
cp
1148.82 42.7842 mo
1120.19 42.7842 li
1116.77 42.7842 li
1095.88 42.7842 li
1086.45 49.8535 li
1065.13 49.8535 li
1064.66 47.7529 1062.78 46.1865 1060.54 46.1865 cv
1057.94 46.1865 1055.83 48.2964 1055.83 50.8931 cv
1055.83 53.4976 1057.94 55.6074 1060.54 55.6074 cv
1062.68 55.6074 1064.5 54.1714 1065.07 52.2017 cv
1086.45 52.2065 li
1095.88 45.1387 li
1116.77 45.1387 li
1120.19 45.1387 li
1148.82 45.1421 li
1148.82 42.7842 li
cp
f
1027.56 52.0762 mo
1026.91 52.0762 1026.38 51.5479 1026.38 50.8931 cv
1026.38 50.2461 1026.91 49.7178 1027.56 49.7178 cv
1028.21 49.7178 1028.74 50.2461 1028.74 50.8931 cv
1028.74 51.5479 1028.21 52.0762 1027.56 52.0762 cv
cp
1148.82 60.3218 mo
1120.19 60.3218 li
1116.77 60.3218 li
1114.72 60.3218 li
1102.94 72.1006 li
1048.76 72.1006 li
1030.89 54.2305 li
1031.75 53.377 1032.27 52.1953 1032.27 50.8931 cv
1032.27 48.2964 1030.16 46.1865 1027.56 46.1865 cv
1024.96 46.1865 1022.84 48.2964 1022.84 50.8931 cv
1022.84 53.4976 1024.96 55.6074 1027.56 55.6074 cv
1028.25 55.6074 1028.91 55.4575 1029.5 55.189 cv
1048.76 74.4551 li
1102.94 74.4551 li
1114.72 62.6797 li
1116.77 62.6797 li
1120.19 62.6797 li
1148.82 62.6797 li
1148.82 60.3218 li
cp
f
1044.05 52.0762 mo
1043.4 52.0762 1042.87 51.5479 1042.87 50.8931 cv
1042.87 50.2461 1043.4 49.7178 1044.05 49.7178 cv
1044.7 49.7178 1045.22 50.2461 1045.22 50.8931 cv
1045.22 51.5479 1044.7 52.0762 1044.05 52.0762 cv
cp
1148.82 53.2539 mo
1120.19 53.2539 li
1116.77 53.2539 li
1105.29 53.2539 li
1093.52 65.0327 li
1058.18 65.0327 li
1047.38 54.2305 li
1048.23 53.377 1048.76 52.1953 1048.76 50.8931 cv
1048.76 48.2964 1046.65 46.1865 1044.05 46.1865 cv
1041.45 46.1865 1039.34 48.2964 1039.34 50.8931 cv
1039.34 53.4976 1041.45 55.6074 1044.05 55.6074 cv
1044.74 55.6074 1045.39 55.4575 1045.99 55.1963 cv
1058.18 67.3862 li
1093.52 67.3862 li
1105.29 55.6074 li
1116.77 55.6074 li
1120.19 55.6074 li
1148.82 55.6074 li
1148.82 53.2539 li
cp
f
1102.94 104.803 mo
1102.29 104.803 1101.76 104.279 1101.76 103.628 cv
1101.76 102.977 1102.29 102.454 1102.94 102.454 cv
1103.59 102.454 1104.12 102.977 1104.12 103.628 cv
1104.12 104.279 1103.59 104.803 1102.94 104.803 cv
cp
1148.82 102.581 mo
1120.19 102.581 li
1116.77 102.581 li
1107.53 102.581 li
1107.05 100.485 1105.18 98.9141 1102.94 98.9141 cv
1100.34 98.9141 1098.23 101.028 1098.23 103.628 cv
1098.23 106.233 1100.34 108.339 1102.94 108.339 cv
1105.09 108.339 1106.9 106.906 1107.47 104.938 cv
1116.77 104.938 li
1120.19 104.938 li
1148.82 104.938 li
1148.82 102.581 li
cp
f
843.816 95.562 mo
843.165 95.562 842.638 95.0376 842.638 94.3823 cv
842.638 93.7358 843.165 93.2036 843.816 93.2036 cv
844.468 93.2036 844.99 93.7358 844.99 94.3823 cv
844.99 95.0376 844.468 95.562 843.816 95.562 cv
cp
1116.78 175.792 mo
1091.16 175.792 li
1091.16 161.655 li
978.087 48.5806 li
926.266 48.5806 li
881.51 93.3394 li
848.409 93.3394 li
847.935 91.2397 846.061 89.6724 843.816 89.6724 cv
841.216 89.6724 839.107 91.7822 839.107 94.3823 cv
839.107 96.9834 841.216 99.1011 843.816 99.1011 cv
845.964 99.1011 847.778 97.6572 848.348 95.6924 cv
881.51 95.6924 li
926.266 50.9375 li
978.087 50.9375 li
1088.8 161.655 li
1088.81 178.148 li
1116.78 178.148 li
1120.19 178.148 li
1148.82 178.148 li
1148.82 175.792 li
1120.19 175.792 li
1116.78 175.792 li
cp
f
843.816 128.542 mo
843.165 128.542 842.638 128.018 842.638 127.362 cv
842.638 126.715 843.165 126.184 843.816 126.184 cv
844.468 126.184 844.994 126.715 844.994 127.362 cv
844.994 128.018 844.468 128.542 843.816 128.542 cv
cp
1116.78 183.903 mo
1081.74 183.903 li
1081.74 162.703 li
980.448 61.4067 li
928.622 61.4067 li
886.218 103.809 li
865.018 103.809 li
845.756 123.071 li
845.163 122.802 844.507 122.651 843.816 122.651 cv
841.216 122.651 839.107 124.762 839.107 127.362 cv
839.107 129.962 841.216 132.073 843.816 132.073 cv
846.421 132.073 848.529 129.962 848.529 127.362 cv
848.529 126.064 848.002 124.886 847.151 124.032 cv
865.018 106.165 li
886.218 106.165 li
928.622 63.7607 li
980.448 63.7651 li
1079.38 162.703 li
1079.38 186.257 li
1116.78 186.26 li
1120.19 186.26 li
1148.82 186.26 li
1148.82 183.903 li
1120.19 183.903 li
1116.78 183.903 li
cp
f
1015.46 171.803 mo
1013.11 171.803 li
1015.46 174.167 li
1017.82 174.167 li
1015.46 171.803 li
cp
f
954.533 140.32 mo
953.883 140.32 953.36 139.796 953.36 139.145 cv
953.36 138.494 953.883 137.967 954.533 137.967 cv
955.185 137.967 955.713 138.494 955.713 139.145 cv
955.713 139.796 955.185 140.32 954.533 140.32 cv
cp
956.475 134.85 mo
955.886 134.581 955.221 134.434 954.533 134.434 cv
951.93 134.434 949.82 136.54 949.823 139.145 cv
949.823 141.746 951.93 143.852 954.533 143.856 cv
957.134 143.856 959.245 141.746 959.245 139.145 cv
959.245 137.843 958.716 136.665 957.865 135.815 cv
985.156 108.523 li
1048.76 172.125 li
1048.76 188.499 li
1051.12 188.499 li
1051.12 172.125 li
985.156 106.165 li
956.475 134.85 li
cp
f
940.398 128.545 mo
939.748 128.545 939.223 128.018 939.223 127.366 cv
939.223 126.715 939.748 126.188 940.398 126.188 cv
941.05 126.188 941.576 126.715 941.576 127.366 cv
941.576 128.018 941.05 128.545 940.398 128.545 cv
cp
942.339 123.071 mo
941.75 122.802 941.094 122.651 940.398 122.651 cv
937.8 122.651 935.69 124.762 935.69 127.366 cv
935.69 129.962 937.8 132.081 940.398 132.081 cv
943.004 132.081 945.111 129.962 945.111 127.366 cv
945.111 126.064 944.584 124.886 943.734 124.036 cv
978.087 89.6724 li
1055.83 167.414 li
1055.83 188.499 li
1058.19 188.499 li
1058.19 167.414 li
978.087 87.3223 li
942.339 123.071 li
cp
f
1015.46 174.167 mo
1029.8 188.499 li
1032.16 188.499 li
1017.82 174.167 li
1015.46 174.167 li
cp
f
1137.99 154.007 mo
1137.99 153.356 1138.51 152.832 1139.17 152.832 cv
1139.82 152.832 1140.34 153.356 1140.34 154.007 cv
1140.34 154.149 1140.31 154.284 1140.27 154.412 cv
1148.82 154.412 li
1148.82 152.96 li
1143.76 152.96 li
1143.69 152.645 1143.57 152.338 1143.44 152.047 cv
1134.89 152.047 li
1134.62 152.645 1134.45 153.307 1134.45 154.007 cv
1134.45 154.142 1134.48 154.273 1134.49 154.412 cv
1138.07 154.412 li
1138.03 154.284 1137.99 154.149 1137.99 154.007 cv
cp
f
1139.17 152.832 mo
1138.51 152.832 1137.99 153.356 1137.99 154.007 cv
1137.99 154.149 1138.03 154.284 1138.07 154.412 cv
1140.27 154.412 li
1140.31 154.284 1140.34 154.149 1140.34 154.007 cv
1140.34 153.356 1139.82 152.832 1139.17 152.832 cv
cp
f
1148.82 152.96 mo
1148.82 152.047 li
1143.44 152.047 li
1143.57 152.338 1143.69 152.645 1143.76 152.96 cv
1148.82 152.96 li
cp
f
1102.94 154.276 mo
1102.29 154.276 1101.76 153.749 1101.76 153.098 cv
1101.76 152.45 1102.29 151.919 1102.94 151.919 cv
1103.59 151.919 1104.12 152.45 1104.12 153.098 cv
1104.12 153.749 1103.59 154.276 1102.94 154.276 cv
cp
1134.89 152.047 mo
1120.19 152.047 li
1116.77 152.047 li
1107.53 152.047 li
1107.05 149.955 1105.18 148.387 1102.94 148.387 cv
1100.34 148.387 1098.23 150.498 1098.23 153.098 cv
1098.23 155.698 1100.34 157.809 1102.94 157.809 cv
1105.09 157.809 1106.91 156.372 1107.47 154.412 cv
1116.77 154.412 li
1120.19 154.412 li
1134.49 154.412 li
1134.48 154.273 1134.45 154.142 1134.45 154.007 cv
1134.45 153.307 1134.62 152.645 1134.89 152.047 cv
cp
f
928.622 116.761 mo
927.973 116.761 927.443 116.234 927.443 115.587 cv
927.443 114.932 927.973 114.409 928.622 114.409 cv
929.273 114.409 929.803 114.932 929.803 115.587 cv
929.803 116.234 929.273 116.761 928.622 116.761 cv
cp
930.56 111.292 mo
929.966 111.023 929.31 110.873 928.622 110.873 cv
926.019 110.873 923.911 112.983 923.911 115.587 cv
923.911 118.191 926.019 120.294 928.622 120.294 cv
931.225 120.294 933.333 118.191 933.333 115.587 cv
933.333 114.286 932.806 113.11 931.95 112.257 cv
971.023 73.1855 li
1060.54 162.703 li
1060.54 188.499 li
1062.9 188.499 li
1062.9 162.703 li
971.023 70.8291 li
930.56 111.292 li
cp
f
900.357 137.962 mo
899.702 137.962 899.175 137.439 899.175 136.788 cv
899.175 136.136 899.702 135.609 900.357 135.609 cv
901.005 135.609 901.532 136.136 901.532 136.788 cv
901.532 137.439 901.005 137.962 900.357 137.962 cv
cp
982.803 162.703 mo
926.268 162.703 li
903.685 140.117 li
904.538 139.268 905.064 138.089 905.064 136.788 cv
905.064 134.184 902.954 132.081 900.357 132.073 cv
897.749 132.073 895.644 134.184 895.644 136.788 cv
895.644 139.392 897.749 141.495 900.357 141.495 cv
901.044 141.495 901.705 141.349 902.296 141.083 cv
926.268 165.056 li
982.803 165.056 li
989.552 171.803 li
991.905 171.803 li
982.803 162.703 li
cp
f
998.973 171.803 mo
1001.33 174.164 li
1003.69 174.164 li
1001.33 171.803 li
998.973 171.803 li
cp
f
982.803 140.32 mo
982.148 140.32 981.624 139.796 981.624 139.145 cv
981.624 138.494 982.148 137.967 982.803 137.967 cv
983.449 137.967 983.981 138.494 983.981 139.145 cv
983.981 139.796 983.449 140.32 982.803 140.32 cv
cp
986.136 142.476 mo
986.986 141.622 987.519 140.448 987.519 139.145 cv
987.519 136.54 985.402 134.434 982.803 134.434 cv
980.202 134.434 978.087 136.54 978.087 139.145 cv
978.087 141.746 980.202 143.856 982.803 143.856 cv
983.496 143.856 984.149 143.706 984.745 143.441 cv
1013.11 171.803 li
1015.46 171.803 li
986.136 142.476 li
cp
f
978.394 173.382 mo
977.743 173.382 977.214 172.858 977.214 172.207 cv
977.214 171.56 977.743 171.032 978.394 171.032 cv
979.046 171.032 979.571 171.56 979.571 172.207 cv
979.571 172.858 979.046 173.382 978.394 173.382 cv
cp
981.724 175.537 mo
982.579 174.684 983.106 173.509 983.106 172.207 cv
983.106 169.606 980.995 167.501 978.394 167.501 cv
975.79 167.501 973.684 169.606 973.684 172.207 cv
973.684 174.811 975.79 176.918 978.394 176.918 cv
979.089 176.918 979.744 176.772 980.337 176.502 cv
992.129 188.295 li
994.484 188.295 li
981.724 175.537 li
cp
f
914.488 126.188 mo
913.838 126.188 913.306 125.657 913.306 125.009 cv
913.306 124.357 913.838 123.827 914.488 123.827 cv
915.138 123.827 915.665 124.357 915.665 125.009 cv
915.665 125.657 915.138 126.188 914.488 126.188 cv
cp
982.803 153.277 mo
942.756 153.277 li
917.819 128.339 li
918.675 127.489 919.198 126.311 919.198 125.009 cv
919.198 122.408 917.089 120.294 914.488 120.294 cv
911.884 120.294 909.775 122.408 909.775 125.009 cv
909.775 127.613 911.884 129.723 914.488 129.723 cv
915.181 129.723 915.833 129.574 916.425 129.304 cv
942.756 155.63 li
982.803 155.63 li
998.973 171.803 li
1001.33 171.803 li
982.803 153.277 li
cp
f
989.552 171.803 mo
991.91 174.164 li
994.267 174.164 li
991.905 171.803 li
989.552 171.803 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.1.0
%%For: (user) ()
%%Title: (plata_55.eps)
%%CreationDate: 4/12/2016 2:18 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Bj4fPdOtHHI]dJd#H'A?!7%#<+:/6>6:(_S1(V=U$ZIf.j.X)k5FgX1<_6ImBeA"Em+o@[BqIRNO1?iX/CgOol0dAecEQ,<
%[a-imJ$,$;d^&7B<f-cbrTjLOhL46C8GX"B<'0d3A^VXdpH%uChr!e-3kbMbC%GE.?$]L4K5YM$O%HD&q4k=EWmrc\2jGE`Ge;X$
%[QD1Gg7T.E/I&f,m)O&An11F;5;PDahRNdQ0Gt:l)c/J/pYa^/D%aI8s"/U^8C!\&6*E1[G1p:F@+!+l^oKXm\i'Hj<45]1iP,Qk
%Z;aOnCW"_R[olV*i8``]$*./Zm<'$*ZX3m_ONmd2`..\<4-Dl*hm/7A?PUb6_Tu!!/U>""rV\4SiU?o"<UtP4g(?QREt'7t^cI<.
%Ga)HV>I?c6(+ZVjZ<pets+gT9(5=\S"^T;#HdGR3Z-%&kMW1l,3Uh50QYfe<<pQ:RhG!oN.6UIANMIqfZdKd42ZF60-E0@[EA22T
%]smCk!+mik=NoCV<MttdTY.:4]2`@A9*WQ<'d\lT]sD5L"PIJuE@Fp\O_j.Pn8c#3.m_%Y73d08Uj^a<a1Aiu7r\MRo:;'5gAHS'
%G2`Id@*E%.E+"D&elioUCccL(XfuI?lbhH)G!]H:IA"cs?Lt8O??'GA_)Mo-aZf#J)iA)lV\JZN=OlMhr%ChF-TVad0Gl)&F<n;9
%]_RH3^/]W)LeVfq)k3Bk>`h5L\H,[eL(2PqS;D17+7)(f@b;E*@DMF!%fE!Q`esfhJ$8ZldID[$#[]d]Fb\_Cp1`\ss0kg=FA@u3
%FK:amppUc+$gc43s-@HFmXkh\LHPjr>ue\fXnM3TX4&@0o5[97gi(`s[9e]<+Y2>brXRi8?s'F$/=6i0'WMht[[YbOX;4h`;u`3d
%jJsJ!]n<&M*c.97C%(*fquKeO7TVY9e`s@epiibrAA#"m.jofnA#el+L4eQ+HiNIhpt9)b<ehE*[T`/*m']q.G3WMLf/tM3Ze]4T
%2`QQBH@nFC]aO1/,H3+-?DQ#eMe#XKcW2RCs/+fSg>Er=9@@_MjXTdb'a5^[E3)TiRl-S<ZX0b\hQ3&%HGf`-l)<'Fak@3]bEh@9
%lmr!F_-mb8?@/m#a-1FA'Z`0<N0F9RMHc:Z1:76lc;H1W`,%<"YU`3tM6UV%s/5tCml!rK&`_iRbEG]%ftWcZ;e-tn::&eL%Y+-V
%8Kk6^=D+0\c&r!jS0n>EBpSbl<Z&Su^X)`3qdoq2rGYTFm&#7IiHDa)Vp.-h`mWhM3CqX(mp($5lRa-Kf=D9Xk-X3CWmX*9.8-N$
%o(#3EC0UVZ_fsFWb7.9tH6b_A<oC.lYBF9*C;`;;Rs!5&C;!sf^03*?r-?t1_jAP#M_K1=*8lQE:pAC6eZrcOkKR&&QaBm%Vt=X-
%Uo!u%ru(aO@DeE>[Un9C:jR3hQ+#$26GM,U6W*,2BqCk+7[.]?/pT286!A5AWe^0N;G_qlLiV*)Qm+onZbS9oSF.Qu.PQN_f/JB*
%c>f]24g,m\PD@S&'Gq2n\urkkQmPF!rlJY2A\<qhGQe;LQ!PpuP\K07K443Obh@5'R63S/<thK#<dlV&C3L-m:!cHY&#[arU#Vfe
%@V_gDCN.S[;721GHhB\lpHjM,Ks-JQQ7[UWYYJs3A@n3+*!3)T@A91\f/5PC?BYWG9DZP,&X=Rm=HM3plE`XVc]ac-E\rVeO?S_t
%q.j+IeBoWQZI;O8X.mD(W1qm4AVZgbYF[l:Q?iSR4_jn`jDIcjY%b=7YsWpZcF**WAqTcE<E<M>r(Xk4b0&cT4K9a+V:E+*2hf/;
%RrZt7KNU%k]X]KccS4HUHSs13>H^-5rnNm1!Fr:J`gf>)Y(5\KDTg:A\[a:N\)lb\gt\2_j2\c7[ToNbb_Rj[m+_SVY1Okohk&Rn
%ISX.&kI!eBO2(OADAMU[/h*3NHNW>>!Ge>mBN12QRk1)=OHDng?e;e_>/O4#C50.YB=20_hlO4E7ZVGup#Z>:egSDd)qW0_Mi=>8
%=)V=g>;*EJVOi-W:/Cc/@*EMUiOutG`\s$m]S3@>7e>0`]okV*8)#VaSGC\biYrTnY"d:r0Tp<O+1>ptbtbl8W3qNp?2c5'2En2:
%!4VsoG1t''#,luk>luVhp<auU:2BO`Y[/hLO]q98:]IVQJV:<f*(<d*",9!VgiV5YX9*`hg9"f<.Q!)5[theu0/SW;(Dt0,Y?f3$
%mkidOh-qG.V8'2QLI*oc$GBjpQ(Aq=,Z'j?:VB<0U<D[KB*-Pq1:(Ta>j[bcg,M=ubM]*#D-^BkBb_M<>@\01oo5YqGeP$V`6lT_
%:%oJoXd(dKqte</lSSq1QcYoAJauK+`g_-RIK`;-os1jQ*3e3%F5cn$:&_NAeuO%AYHm&gF$X.Z]s@iSE[J2biZ%8sY/fGRMg:Q5
%4Nb](*;_'Oq=k-51@8u(6M*.s:<gr,nRe]Jg?9j)^C)%2c0oN)KR4Y]\\PW@?EMTp(7C;li3h7,2h5]`:!>\D,AlP3&h[6n%'sPH
%^?Y@%kEtG:J<63d1ZW/QYp+B-k%nip2u_;_Y8__GCrVmpa\><N[<s2#@W0-_/jN.;[_ZT9$MF[1N'AbaCJ?t,.`?G,IBVPl'EnXa
%FD!9r6%Q^*UF?P-Y_?3n4>WS%i+,fKc7Eu#K*''qS*.2&4)#]^/bU#HOjep;:TeJ\Pl`<<=!(fK-eC5i!]8O_HH"m4moJ3HSY;/=
%2Z44O79J<G8XjJ$hegp/#sLiMWn*_4O`OZXl3\N=c%`'9'CsbS-a$(PO1+b%nmL.k,0G(4E15ItoX!faj>Uj:Nk\^TN_)o'Ilf)e
%Q;0S9.)a`7I<QC9Jj#;h9+"MJ5NUJ^Bu+2Q;t`U`ObfRZodt!\fhQ8c,+$-eWT1%>"U:c[?Itir#uatSO/gcE2"=/P!i&X^YA7,)
%::nT/lLj,tE6L>O2CMJu\qX48+4B,ENPB)CQom^Kr,iISf(u08CQsjZo?]e*=-/:0P1MRe!YSqg.:Q"oVHR5sp,\O/\2Z!^D/3"!
%Zl2@GF7E/[Aec'u`^t2O8.--nY19hV[@<M:)"H&3eUng&R&tf^,#P([,g'('BLSk6f%_)58<diZcdm#$,YB5W47.Cn7Rs0e8VT0V
%TdVkpl,+^(@FdimN5q[BkHQG17Pp/pq-T,bJ8$\^Yp_OtCFH!n9n+]d&_8jUdUjPY12XJFNJp<2rrKAQKf#F$B@ZTUPc<\]opZMN
%;M_MNqsLtnYp`$hCt<e.?[57"M_R)C\Af7Agi]d]Ca[OZ'MCDmM:kPg0KT[4\+\fBHZ5bN(KP^>X"9mcnR(WNSON?S`7ZmrR=9$a
%QCP]E1%r"1euNAMRIdhen?lZLf*Y3fS?L35g75@k"CKpK!A[a.DO.l"i1eN-g755BZandp=h@PRg754g\_99:X3hTSj1dRt@MYA9
%JLUA4:GZYK!-#Z3Y.fn4q)0]V"nQRfhaZ:9[,:d;C$iBE^Q*6LD+rh:q#uBGpaR=!MWZ3qYA7,/[tP/_;D5TIN6M#NCWTeLm7)-M
%Cla$i;i?Is-FH.I:_Eb+p:?"0mp]mtahsS1V4$MCq0RiRM>PV_d[1ll2(,6*Mkgp[a(@ZKSg>i=X,^2cIJDDD_>dQp1]6-1pnIET
%go._H$ficT?`$OT3[scUos?7D2sXV]s+.jI`PhIG%cb;NMrKJ^\J/Rhe'80#Huq4DpQI\*h+f%cf=g.A%6h[g?o&hZ9QG[c5/)q!
%"EndEoMoE1UV_Pg0t>hK"V_fkW,j\1%,Q)e@FSIpA$E/a;!p1GkEj;`#j\$1l$,'44<mb0Yj+GO1@bY3/c<eFj=D??>]FUn-5^EF
%e*gn@s5&FqQLj]TD1qNP?fTASc[W,q1S)9R1-bf0TE!3_J$1i-q>'L/Sc:HV$Vu9nCUKhp2*^]'ZK%']=6Sg[^@O/<lgf;Er0_Ju
%H$VM&o)-MWZ[otWd_g\4['e?626("TX4@#Uo$CRbZh"23=KZ-@d/p)dra:VM:!i*9V[WuF]*NW%rSlQ'T*!eqfK08KYUEN:`M]2p
%:VEtabl.MiceH`.A9/:7[1-m=+e'Vc=WrK/mO"Dm2qe,FfP,DjE@l\5XHt4"<R@k2<KLM2Zd.k)bt]c,XS.gsC8Y-KO$)$cqp2Di
%j\>hpB$u:G$9Domfk]UW;1UIPrnY4,%S".5W%mhLj>FP`W_I(1m\7q:f%?3:2`Pu7n=3(U0CnmK^RN_=60V[kB$^M<q?1@!!H.kh
%"o[j]"&qLq5"0g_1[deXPib`-WHPkKqqtZHIS:\ZSNC0?NgI<:AaXf24'q'0Qau/<IjqADc,(JS_@+9Z06>1W'O.640m<IGKe1Fg
%895$a'g$FaN2N*;+PjOq'3?r'Vqs\RBfBb(_Vt!.0ne4T2Gk_c^pGJY-o-O&ZAGQ:,b-6O\6bTo[lf-ph3!=G+<Oh4_1&LHndK:d
%*2f0t9tPA7B4@;>iAf0%1r[>:3!5au\TgP9G\1LH49O'Wb.r+QFe*/PRV-!=/i'Qq*$:d()P'*1`7$g>,XmD=jdU:]]g0TAq/uD1
%;$gk63dZF5+rd;eNYZ!lkOjs<OYIPpD3Yj)md2b%goGLBg.qp_)gY)N+A8<64ho%WpeS6trfbmGRE!%LXisLf/:29.h)GeeG-/B?
%.J,_O(-*WJ?C/U:]ctAiUY.%0^*Up-f3jn]^VF67k_%Kc%Mg!O&V]]mog.][\-XU[kC/A>S0&uCq_;^(VO;]o7W\b1(e)FupL?n!
%V)rI>IdY7Dq_=sbA`eH#\K><Nr"s+@%;LT+X60-/9sDr=HaW^Cep?.d(("L5^RI2;ZMJ>S;Z.q%([?Ki8CBBW?8ro]#PCqX6Hs8b
%E_"ATTrZXGl0B6mOT\eRiT2+sYMT_IMAEq/6!<:NBp2;,rFEO,r#@'NH4eUX;gt22_E?4B:*@gq%F#OqbnCO$&U$)gd81Ee5L2,r
%'G/lcB?2P=GXQ5l.AG+3VHb9)m<(%>81@U+\jl8BVgZ-?kKd/V#5qhfT;,i`ACpsd1n.7V)jgN!OP)ea(@0kFo]/&=[9(!$20Y9#
%Z2SZB^fR5gbXfNNOeGHo\6"e99Rj:5'%+apDYMJ?:Nh2[:gfFjPLQm@4&3<5:@&&03A]m:[Vi5])n4GDMqXTREmnUC'r/(F20V3q
%AT#c;Xgtu"2n.qPc^HAW?d5^`RpaLs_!nQID9is<)DQm<>_,bsc+1AF2`Kp^k1na^S""I,[XYX-\O+3%&T_jC^&\FDYsD'u8b]sJ
%Bq4j270MK&T">=&>euoRe%XBlm2_#b#0o?7`71/51S7aC1[^G(/Fe::U<e+:N-U#6CIjP,4jN7,W2oj4l]mZ7Xa[NYi_ZOWX#C9u
%<XO*Zqh&7X,$o"]m^d):i4IiEc_:f-A(J*92A4k?m\2ng^peSVaQpkAC5_NWRj^pBi$G%GJr28:n)Y:6PB#<%>N+22%dUMh.ZIL*
%\jlA5H(g/m/b-4Dni2@p#FGD*'X*rJdEPFU]dI1*\BFm2\jfaDnu"_=S_!'t;52QucRmfL%J0Ip,W]@=i?fh'$4<RJ8m:^c5mK+n
%HYo;$/\k(qs))-Q$QX'+P1Qd!<L\q;mhRuj?MZ`F_O/0B&<&EEbnZ>;l!pJi&?#>r>h^;JYcZC2DZ/8U[$*!L;#Oq-m`cK@J"T,M
%V3d#<;+f5@-^s?hs#ck9;"0+*<f1dbe,,$k`D=%gq&A@YVgijOcL1_odM*7C(IdQRiYoq>a;@CCO3tu*:A5Sp`?o8.n?,X]-npBQ
%A[F2Ef/JFfY;nSW9F<pj0N/VTVFA-55Gaiuq:KElp1qp8I[R`cS7742mD?-L)!8\T3lWiiN`48SVd:u^d1W%o`n?]<Zfj]H5;kL'
%9$cD4$YO*8rmkE",XpM(*'Q=I<Uh$!Om#7uPBN-GbYCjg1W)9.N$fs`X?gt4nf#^T&%>2tps8S(,*PO?4r3)sBu*s)=]6u\T#%W-
%@j7@RQqOZqENdCL[HV9:2bQ6DWOXa$p)UH,c]PJ['66_s(Jn&.5.SVhk@M5jiU$LFDNN._P)1+o>B^6>m7-N7))rnXUBDRdd>c?S
%4PN.)='M/nha)FJpN1%GT;Duri54ZYm@p"MW,Ih=6<a8*Re4%X]kd7i9\TmbC*uGNG:'td:8u%>"WQsCU@(ORoJL]Rm:!VU0U$>6
%-4sB@/6Sg=:1hi7A9Qd>B&@uJ[W/Fc+j@m@HhKtC>.]8fj<]L/V"ktmqRDu_2YC8:Q1'7IK]@]Gl?Y>P\a./?3\9?odV@#YSH"g[
%k96.@:Pe,ie:T88JonK-@p?uXm=ousM.&S7a0.SlIAhjrW*'o27WR'rdr56YJ$6KN]81sGh\sAHHgE$lkYS,'3Cug^]j^rRoW$KF
%SL(tt?EXBXSFgBLJ%Jj![@1`5@#1OISPJJ_r&_!P)npdnTMu[IJjJVVq&>&HU45.S;*B<B6AKB4rI<""s!.RBp&0sIGEq%C&2Sq4
%@6_JBGQ)9^^Mm+(Hj4nq!F,F.V"5MGK^II1k%2#ea?ipA&-#5=SFF9(2+.r4T<doUJJXU06f>O6=G:<>EhWh(KV@R_%XbM:d.)P^
%i7NJiZOabdQTeBQRP]'M__:rR"ap.IfH2e1V,sM>?`d5d?h!.XD@pQm!?G]Ji^h(RSn"951=XEe[U3erK0d?Z[su7a'3Q+:Z56UY
%G1<iM0>QPc?>Nc9kj$%J"/qkWkV:+49HK5R_nU1Xoe6=;J,=B;j=S#W\Y[6rs4nsOfKjS\INb^qfR+)`#QOZ,s*OPYW(_TD^S,7.
%Nr<]<ZjUBma<j.E]Z>RnZ+uUVQ\W=.:HC)/lMmX'.YEar6$0]lW=LYuZDlCZ0Lp>J+/Js82?'S3?3#dd2LIYkb!BGbkPeQ5r'd`H
%&k@/,a/TesNu.5lqo?J'HMuBN\c`_e0.,E8Z8[41c^CE*P@baUp6ls4$>!X<&!OhF2CA[*M\]ZgMSZ__mE+W>P\YF,(WjTP?*#Df
%dD(hmrqhNhX0LJD0"0>*F@I#!)+@U#g)'eS9O[&WibSY=:'ZpA3:"K]TQ<*sm-ej=d?T.i[6^%N^hAU(lMk>N*)7!nqHs![Ao6Z/
%koWhhh_W'iqlOK/k-/j[!R(,_5uMKX)02u@LflCP/&X5!\3_h]ZVIGXM6DDBPK,O8lC57H-0&,\ZrRim^f_1s:!&cQf5,Oij2Q/g
%)1Z%uS"'u^HHie<ITY0hr/[^EKj_QU]:R[ha4$_LJ7tF0IU"4P=p("i^S!CQJ)-OI%H/HZ7!#02c@.ZT8^]k-Hq,Zq7.2Te[U#&f
%(f6WTh9p2CI5\0t-)LQ8GM#XS1V5SO/$5SoD3dU>:I+SJX/B.\>O8ZH^W9ll<\rP3DNK%O>AH($qm52I%+JB04/L)=cm^!bqLbTq
%r-(1Ohsm4-N[ug5H@qDVXk+u+h!QJdFJ<B_*a(,M8N'*'m$=+=:9-9DTW3\@&]U0OBS3_J)%K8O]oJUU;Dp.MCYbdfl8LAO/J\&\
%(`*r*?najTf#.C?:f4P"`T<Hhhfo%HA%##nBrk)]HIb_7rD&m+.i#cb-g2HPDWJsG.@G))g:u89LM@04D=7.F8O)J<Ss57u56n$e
%7WVBfBssI_?b)_?,5uF]KgF.A-"6HT9#R2D[hSQ5<RO*u"NXWHFH?K>%*9].5M-nb\j-NiJ&8Y]!NKmVhtlThcWZm'>3d<q%U8m/
%^HUq)1OEG%'C;9=mIqquJ`Ejj%oC]_06UDj"A[I9@1DD'[%$ubZjcSEPtpGB!Nii"mA/5RoK!dd\h2Q#fdbJKEYk"3m:!&\cMkGO
%LVnX\%J9t%r`XZq/4"JprIQ%-!#;;n(WlL+L\A:cE4"MdB<\(iO[!a^3Df'`9NeeP>%,9BS`<(F<W(utV]l"h3MSnWpP2?+H#3PF
%Z.l80>"E[^<ktdVaO8FKdbCa9Aa/qZ\@1%sOZYOhQ9m%=*\j#;FA$b*:O6;gn+ZDuVa'B",%(<iAe"Gj&8I21<Zeq]oiAC,9E>#1
%IfdAEKB\Q[ZWpES]6jsELJSV[k)ERC@b<g`St7k?*(T\*C)710X7d8M#:[%/JB:GfEb9/e9lKo#[[aVAKB0>kDX=c8Z8TZA826dF
%Ak+j_TgZTCCEs>k)3l8VmL8aV"#5[=R/W!$X#nl3<92e59XQrsnOq+b>::)G_O'KXX/+,_?4r:lomt+tSJ$bG$1*pnH'Ij/f.4A_
%Q(4Zrb%f^"ZIoq&F.eXiY3_b<$&9F?Z:5Qj;QM,8aVMoPS;faZa!lC'UMr:nFt^IC-;Tq5g=ed(_JEZF8^kZE/3%"LY^+)4OeE]8
%,A$%#qU%;PVnsJhR^9(FROnpD!%M.c9(bFrp%h78"YAldT.Sd3BQd0ZSLu7R@nTg;V35`gBY#$25t3W/_K>FgjX)f"gf,pf-Tg_E
%:.aX#,8OemC%=RoBiENK--f)_CKcQZ]<GOWW+eN8X_Bgq6*;>(-jm=BB)SD+WWP,Lj@>I$FR,Jh-2QZ#NKn/cMf%Fs&)5gPbuG2l
%U0gZ_-J"P`lu^m_X'+Hq,[X(rNdcI/&[SdNG$E[$@uBdYQ8.]*^FW_ANG%3eq64+MT:>nbJR.%ZI9AOW^UO7)60WT+`&p<hh-T9O
%.Fh;9g^;DCdVOu>10,&i=mD?g0#gR6.G5T/-bTiAk+k#IXPj[Z..+Bhp[%IFI"I5VkOc.*>sbM"1p[$jX`r1=PrF\"YC>,"5bp3D
%:'hdN:1Tl5@'Bsll9q_@Rd(DejT_oHE=+^#k'F;B-qEKM9\F:c$)c<+hMZ8]@]c/,<CtZ&G.YH0FH(uB];`(QqdmgXKM[oETHhc8
%a3giKRNpZ_6;X\-#u[YU!rF5p=gggYc3k.D?.)Ye6KoQU`V9r7neu'l!0)OlC6VJBQ)[!OOEr.-%=d7nR*lm=B'4)SWQB5%/*huo
%&sK?=QHM&k/B/Ya'3IXIkr6rB-<H4)/N=>;fWfS)P*@b_/Qh=[2Dn?]R37d[XWHTfUPbl<*6d8Zj1qD;JiI0NEaoIN)Wa_t#mO!r
%B=#U@Vk>B,GC';7fQ,YSb[-^Q[!BQ%jma$5$Ddb7[Pb?-];R8rRoo1S#p\ih]<1q51!GLkWjhk8Bc.6eROq6F)DOidYZ@l1?og]l
%E<BS]CU08DMY/]KE@_-s@[q_-NA7:];#HtH:g9mbp`ma3n9\-@1V@C[%%^FshWp-LA6Bd,-^nED9IeX=6*1gT77Yj!Xk+Z(J@[3r
%7EsoA"$3SVKrM""TEC=J'I^)0;P5`2M.n'&[Kkn`CBF7jKt=tH:>R.[/_;)9a?AdV<iZbKe_I4&+t$)AbJol_-YG=/<K8_drYs3o
%q\*WK$\ISV:T1C,@sp3p5Vo$bK)P9Z)!]5QftpY/!%f$s^DK\9/iRlCZ-^Gd_>_kGOQu$Z;ll>7ltq5?dBd(Th3tOCV+951^@K,-
%2ucQTqap65OX4/Bl.H+3,!G8B)CQ1j[<=p-5%M8jjur[n/p[mT4oQsT,*MhghA5hm>e)TgZN@8*o9o9O=4kQA==;Q(?,g7)Ki7/9
%RH1PRpq5'j%2m(MoLaUu9a!iWp8crgWRWk\TQ)EbkY\P7m7o-F@nCikYbAT#L^pYpdXP2g/3aJZ[`>@RC"_lWIfSX.]4UV(Wp:at
%K;DhQoo]rTasCI0Q!gq-["#j_a*H)cTd(L'[FQthX?U+-9BRAXFK*j30DW!rBLa,/Q:l/nXCCt6c[Vimr2VV)Fb)SGSTZGr2";O9
%%:8:%Xk><ag\c7AZJ\A%BNS<^L@LT7*NZ32Pa]g[>q<<tr-,pFTGH+WeZAAk\NX=?Je%7VX%]QqQ1://Ha![hr[r=g<JR%Ad]e.N
%f6bXb-nV8&W4Cc#Fse`9g(GH#OC!g)30T+<=^]2ZP-\4<*t*:&K3EkjM][pYJ^U:iTEX_Af7MGF8%n'HeU"m/1l;n:`n'3i!;rnK
%CD</qoX($Jg_Qg5c!$GU4?&J/iope?BB/j4O-fB)YW^Y%DDYm4q]2?l?Xj7H3g<^:G,KfGlWbc:TN`IOS7CH:+&$-KpeUrNSKH8?
%KX4jGN^Uu-2Q1f!5AlH7A!@n[b@Xs2m+D+n"I1PVCkM_.JF&rU"CP0I`m5D0=<:BWN\]2<BWfSBm"e&_'U\rkjk:h;3Zh\"Ztmoe
%8s#6kZDk3!12S6s39cfZbT:6=6JT^RV?eX"b__g;^Ks_,0G6PW]<YI2ZtFl^m@s.<n9qh"Bf@k]_[($6bKAZhKipM(1c&!i)3SA9
%47,(JX6d>cr,?[uLXFtAq?cbpD$*uC.J--.GHimEZTWm?723mh';KfFNENS00tmBi?]gBb>T_P`-?H-IQKN"h9I-/fG,3bpe^#7X
%nQ&CGdX3=[6$AiX6pP&:Qn6/7i-Tq:9m5hjd:;<?j-Nr9%RjI1@-#IqGf<D[A9[XP.F2(u[cGE86@Ga'NTE,EPSD#Gjf$-KZn4bK
%;?8AM;X\a'C4k?rYGCobE?D$1NZVqh!TZ^RA79Q%R.:qV+\pj_dbmgDfo9TYb#T!2GBP1F$Kc/W,m1[C4l*aEH#`6Mj85mb%neS2
%H[EpTlb-qtk::34>;*F'/M5c8Ct?c-42K\7>J]]los`8=]^hYsm!cMFC:uR-LYH%YX6?_RH+,B+?i<hb>I*[uYC7ud>[L_#p=K0p
%SO_&NqWdLN?<ZX5@,pVLS)*`p00.g(5(6D5QHT$KEc(2%5!jm1Fo1T!q!$J)qW$mrpM"oPEnT.5=*>&YkDN,fgV`EYGN\qEO4O:(
%cqO,^H?!Dqm7nLjL@<uHr_bc1/AE.[.P8.#Fa`Xdqs4)N^O3Ro?+N,Q??k$\KkAtbD1@=0WLeQe+)\I:>9?m@2pMYtkM[dmS!!16
%Wc`[_kPEo]qsSf!d-:Pl\$KunpiPt;Ff2KcCL]C$EMmieI(RWbnY+MN68S.mKuNmhh1)c8H0u]VY#Xo$pD,\o07@24hn8u4HSZO'
%I.H^EmISkS]lnt!RYtCJ]B?h@gNlg,Hd+Y0=.8#Q1cAN]TAErC/UeR<Fq='?_uVu&?[Zq^68QIC]<COcG5_F%io=+@O2B'nO.0SQ
%W.4)5HM&;*nRBJ'<S"3(qX7hS_YZq"hR+7Pc-8a9=Ch<Zj+ZTkA>9n-?h,q!gqC>6\[-JVrROm5A%m]_cKF-ZPAml"D/nrKj7A.L
%Er.AfpIY67%-^@Qn2;oBkMUdXVN"OIAE2Z8YUg(P?";Kl^YXE>I8jF_[s`&^;\,?(n;D4d(01R,Ytfc&n^nqA:U\lnVmZ8'07!B<
%V604!2WpjA!u1[L>(#mOCWWP>4aS_0HN/5,[IN;M2n#0\a&([ML7^@+V)DZ$/ppZ)YSS?&@&_(SR"&nHHH`6*PeX,&n1"-0Y8gPl
%/65Og^&5E@X51Os&Y-L^'CXiWn@#X3\ZoL)4`(+&s7pg!%%>l=4rta9$2kPp5&D=pMsiR:&!aiqlAt\[S'<%kUXdi:]4]lfV[mX3
%_^F?Zn=\0+%7Z+;04.cRFs"HRY!-O3jKk&q2;\I+!eYCdc/R2r[@_h;:P,OR^3VX2X`F&C0[(%[1V%$Cd`)".]9QE>#Wl^<'9bn%
%I;7P#F2"h@X]jIdem1`MCZ!aPX$@m?QPMM@n[Ik2l'"aV2dHhe5#9N%6T._")ELkOG+Vcp?eC<TeeYluhmXCs?^<4ng<h;2_4>L[
%]I3Q7"N,jOfj;2?IB[u<**d;3mZt<s]tuu.fO<"dE3"PC\dl@<nfA5-p4LVro<!JO>(:lq#sUH=Zg4jq]_,%#r3p<Cb=a4fBj'GR
%jQ.^F;`T0S=9N7-,d)%OI_7B-QPCh.Sp_#C@In:qQLi=IPp`3?rq;!Cf'7G/s5Y^pH1i9-C8diB\E^!H>?*oC#aY5A1#>j;T>+T>
%X]?NlmloP%0kag0[+at0Q)!p]GG't_Mm@s&el(\=Z[HaPr*26A4hhLlqg*0*=PQ%UXReaNo`"F^qV+$n/91"3LZ^*VLDF3F4`\$`
%cQ7R$IfI*-igmif]Y.P<lfIP7%ZW`^U*$N!29+I:>ejrNJ^+X=D<#*!gY?+^AhO]rs68HMND9l&(;dY"lX[N5nG)0n-$_9',!djj
%_DCC`EgS?gI:$78l(8%WY2Aq3ls]4$jm`/*:%<(*q7aT:I'X5M^:sc!Y^:<+r\Qa?*"J#lodq\Q4:RCqoj3(.*a^\6;'13kHb-]>
%%`=X@gX_;!kB6+P_W;R2e(Cm2g5QI>o]"ok(d<@m!a'<1@eSIZqZSlFMq5g"?S7jcVSE$0T,trJr(#c0Ba_Qt?<_Umauqn<:Htkl
%La_$nc,^B(.9[=!k-CGXK61K"il+?]._<OpKY:m'5UTYiI&*i9m+-fK6]R#WfXP$>q"*i'a\HJQh-C]#"8233I""\:raN+@#,U0?
%Kmu9fk\RQu(V[#L'=mgk9ELj7:\S4o[=#$Rai.laeM=>s<>Qmd&uli4f!BJ4TW=gbk9oLnBf!WLWBWDj0_3&Wo:6^URNfql`kXg8
%<Jk_&5ERkVg5I/80spK8eh.u0U6ke*YqK38VYT5hAWr8%#T5K82U3ft&2IuTLMG8C",@tT#%\g$GK=[`"9/3dCDH0qXaYN3pPi?3
%I;/NL@?nJf9SR9)Ln0Ae_gOdAQ*p9PX:5rTl?#fI)E-n'ptuFSajjHWiqr7^o04Eg[Obn'I+$Z=`mu47Hg)n9,TI(3lhrKJ:AD&6
%o^6:;Hi8D6"EqS[6fggCBnQ%?gYMl.lJp%\XbUI%CK>J]&u?M^nf?(iWYb!iDneHiCjnHPhl:&]]Z4S&d4tR8rb-A.l6;/TRCRt$
%RVqZ"Y#`l7+$AXGiVq,T01tGBp6]uLrS@F+Gk6<-n>Z9Tjj+AsUlFE1EmUuWXWN#XSY1#X>/.H;AepeKZ1?U`*Nq&EhsP$iIIu9H
%cX<]clYb7>NZN$?9?o:I/a\O]ZYK&Mla]p(Qicqi(ot1Zg=_g+O'$U*ZN0k;%H+b(h)XS3>HWPg*rKiboB=`@QO7mE'e%GjrD3HQ
%nP[/C@1(M6BtP.a>Z,]@''_4^NZ6Q<L&C=)=YN^Rgj:[)iU,G/Tf.=DZ,&8%2-$ZV)eXCLHTSXFSq!`Rg^*=8$P,ujhQ23U\FJ_L
%f)\g8XV]=McnJJL<+4;V,^<Ipmed?+C?En4^r[6_:h`-)hmIWg.XQ)@!nkILjYWu`1<Sb;;u.aF*m/p#Cnh`8I:fng1o&9IHrlNF
%lEcD\$1+uWCZtbr_l'?IZgM`ZEP/gH^"2N**FZjeh&";t=lllq^'Hqfqe=XmT'eW)Df<V3S3;1c^jKF4':]0MVi0<!k?i,/5`^te
%;\Jk/L&mX'$Z'(\=p.3(s4!5OAHhIUD]9M<j'1dV8b:M*j0E7T;SCF.l!S"JD<jhtee2kMqtfgUp/ZNrgXE\P?UgR"QL6m3*/4(A
%(E7;dfCtg@+"puZXq!\QXh8q-p^U$hoS`H.>VXKoHWGAG4P@2e]B.VMra+$r1nAO19^@1Ne'O&LbjG(0n,0;so'60Pf#"H[FS.^6
%J=G,(]X^BZhs5/Bhsc@>QG)q!InO"$ceg5BlH<c7`KBo$goPI1D/3k!pY1VhgCGAWH,.#JK)r@/BS3fUf\Sf@E9eLalE7=]Hu#q#
%J$XB<ja?U&$.:O,_8r2:lC=p8q/Z-sn)8IVBmI;#[Io1hPri-LXk5OTK$$5'&t.'XdS=tNT5sif-9]1^%+\nNFL0Y=#0d%Mr#(`V
%Xe2)N.LUJ'8A/qZJM9m/Z"lSYI+_st<p]&$CZGO-54/q200e/"^6Xge^2?mhQgmsGJd]>E3WIU/DEbh[L!t)*erqk5(iXEJqoA\.
%o)2l=VX"!VUQ&=M^kPGlgIrE7ApBfKhaUt^NkaEK%,F.[[Jk7-gO^,JkE>[l#7#J@_IUSH."fgR:*+gulC&1Bhk-<n01>U')(JJA
%qcDT@?(UY^iL7BDCjk&"3<kIS'm\-iK<>!EoqgY"`,C/@^5odQ+PM$XYHL*;H`t#%g&/MA^\^j1]Qq#:<]N-Cgr=b`pY"/;j2,^+
%Vujj?bi;4DS^4nY;$/gd7=\IC*LaP]*Sn>K\:&c%hT+n19\Dlc]!G@aZ1).PWB?%G0_OGlmKHEVr7gN$S\oM9Wud)IKDsH]_r-d%
%4'\uWn]&'2GBX5ng%6mJo@^6RYe,laiJ)h]?Ilj&J'6RAr+o*W+[n$Tlb<48HFhP;s5k'[H:sOjlGr&u9nUp;q2<VDlIX>E0B5[<
%HPjK"YO5tZX<ugG>VNqIb3QCak13GnP7;?V[k!75p=ErDK893+g^hMCEjTr#&$k<I3EL-j"s9FR^>=831d`DFm%\dj1T8ef%q)6c
%IhK.d<+V>'L>QLH>BYI)=GJYJe<`JjGl-[q[;'L/<sl68aD\P+<DO.?G;br*h=6'1]tI&8a\KlE88N.)p@^Q?DZ&elO^6XEfm:3C
%]$[?h\`hf%_Kp,\*[6AGYCp7%YH+SkpIAG[P/4iUPf>q6pQ%QUq"Cu@3T#1>PGXP&e=tTf?W?cn>>KGKWB>GG\0`\^0.L0rPqYC0
%qW)YhoM$E]2!5dO^X$h:DcXTDD/ZSL*B_+.f\WUGO"MpE,*dpJf&%M8e@*u/"4A4JbI;t*?[896X[h4(0lpnERb;^&4Cma]['Y<h
%FKAaIdq`*5ep;JLp`t7\*9GGk:TGT!C:V,;\,,=JIfhOuj50XEe"\(cr(6Be==kUOQIf2Es0s2?48a.6r3kG<'Lt*&hu9]:GSIE&
%$1^nsK);Z?kK14%l#\9oSWW)^_s6i3rI/nRA:&+Z_4A2VJKd>Xgpl-dioc0\c#4`M/j:unC=QVjVWZb=*U`,gp%50fp7QPS8[dVR
%s6KDlGIMM(>jpMJ2Q33jH=[37`ZRdt*oQ#(L[E@8Vln`CWI9C;6\t/7Y'OsBq=(.n3W@!Cp">P@$0WCL^cf1"GG"`;hUV"IS]6"5
%5eeGNpeX]9^7c])>Z<VU4=5(j/j+sfhWfGaQCe&Rm+E=1=Q<11f%6L8DpqFKC.IcmnVBl7eR/.e4F-70<W(sFDieP_L1XO:f%"]n
%cB1sprO0DohQ$HiBR75e^bB-i/)fHfD-2RSqisq<FC@Qn0`*Mu;0=F?;IuE$]NTDC[N=8:<G9Qje1]Bbe-;"`HYWW9q5@T(S>Y+[
%J@*$p>P4%?^UjEWq_Kh:e3QMVi7.Dcj*HV(5GfpNio:iI?B>Hp1%]U`'s?G&QA.@1%IdmPHoOOFENl`r]%3'TV7qggcQ?7.X]G1C
%`m,rr7R['oeqpeXTBc0Fb(+t=C"3hYe$tBm4]^[;ZTG*<mJUjs$Im$kG$C.hXI4E>p"tA)@-QJ3D/ViJca+P2cfYPFba`!&]tAP"
%XSX)j;NVAk_(4I$>@k8$fZY1$A+ffOinjW&R)<jcj2sN1"oIiO*GBc2ChalWOfcB*?YaLCTF-"R[_pK3&GPbAc.?1iG:$]5TCb@e
%MGYS``)/[(Gk9i<=tm-%2/f\"$!fJA[=-hV'EH#Z>3k.&Z`QjlX?XLQo]>Io(X)8*mC/G\eR[du-&h]Y!H%\TcV(-A1(O8iT'37s
%=G]eaB1,'?pA=)Km5ZSG*Gb=iR.R\C\FZs$M#9T20f-s<0?6jM4p5HpE-ls1%#Fk$Ggr*S`W<E)fhA'(n-Wjm]`UmLg8iBTdQ4JS
%fu(8L%&;4PqXCuS9!hk&%9:@i6Y%=3g<#(nd:`[OhL9khKhjY"Dk;Grr.ZQNDsM1Wgi(`00@tZ:kK_bQTq8\u]=52^qXlFRUu@e3
%b?=[E#H%Oc!lXSB[rTjdheOdRp0kZ7i59K`QS2U:rnAAt'6d0'!;8X28&rM*]'TuGDa(=qq8$ub9>`F-i5s<#>@8d@r40ML>o,mX
%H'Mo=.=2[iXY4LNrHjH`f>HLG//SD6noZ`NCin6)<U\f?[]DTc.ud$sBZ6r6gtucsgIKRRI/;3E[2Ed/ruWobqV0,2qto"(3C[uC
%B?&D@Hg/U]Ma807@]pI7'fg]Lr#So=m6[XtEn6S):93rTF314%M;-DBI0Y)c[iruSa1K.Hh@.rDK$rLWNo#L\CAQqJocLe"priE#
%RhKH2qg4E-?)q>;em<QW,F-O*`r3<?lGMbZqV'B<QQ)3'Ba<t9f>Q(@>q>TD;6ulIOAPna5f_TW=8#raa)fk=O#Rf5eu(IAJZMC+
%YL_QSI\;PpB^<^pmB*nIh"pa'r%7E0jc>/ehh/CbT77,YZb-0IAEDPV#-4;sHLS`-GkKu\1MlNm=_%_`erBV4FFdNJpOT@5I+hd'
%(nGMgn(hPA!mPXVB9f6,s'bEgAaS_lYb2fJqHC5u#%]@s+61'q=h/c^rS%0oRuj,@Lme8cK.][EiP*u-?Z.JsG?UL)1MVI%]_QSp
%Hf='UKPRpoBrOIs5kCWRP".@V7eO5cNja>S-FK^8Tec/N_*$PQ1Z_QZgb6m7G--MeT39jIIK-QOBg9;=^\rT>X+Qo$9D-9+;bM6e
%Xo.tKlH\8XK4*fYgCkDuZ7U/g+?71r?<HD67fDcV[.&eGq1Fse?OK:Sq=4"7euQb,G2M9lm%pKV<rL-]W9Wc`m[a.?f&o-bfmC*%
%Tl89)VdKF(3BF>SYa>CYahQmW49orlPkNb#RXV6Ynp.)ULA_$Vp@?mF>@*X,6Ts$7XboO>0;og`4HL*B(O(,7Cu-[GKfOe7@I<gM
%eZ^oEG$@NaP9oEWaiDkH?aTZ^EkO8npVPAEM*(*_&jG#9mj5+TW[7-/A=d\LMiYX228"F$#@pq--@ZcO(68a[^L:BQSZ'K`asm.B
%m[j@Brt\`$P5V&\gL`g+0q6U/^YPm+OEp)#.*]e?*CKA+19VR=oGF4n@IG"\p]ETTl)$*['n&K+5GD-Tocq\7bVLGM@T!,EQbP/[
%/&#)WjO^<2UX6X"MTUtH7AXSIFj"Y*?+WK]/Gk"]',2V5NGT0E<odqU=8%(;<9M"j;'5(XU!`0'Ep/6qM7+q-3q#cW"HHM:0"\A-
%B[nPf[]<6X5ujHq7W,m.>?Lj>LS*<:p+^[4Sc_3l6o6C22\&+cZ<]QO;!e(f#'o=G$9YDSU<msGN(UH<(ggg/-/,MPlF]'\+4>01
%^Am8>Zo.uJAdKsa-YnouaGi):%DITc)e>fh7EOb@^MI+OS:SPmE\l2&#=.s*5c4XUfSt:4TbPqP6'bHEPI2!Y1om=EJ$LsmLtl\>
%1dlmr%]o_ffQPD\(l('[Lg#6I&2XaLZL9gaLI0bh1^HXrO4^a7'PalS[m[9Lem6lVd<5]3Id9?aJYs7Tb7QoB7]TH!D-*F:K;psm
%N8/[R7+aCun+pi23REl*(k`+J:n%RBeqRdb.qF"M.S!5J+Qen55P,4^B0UU_NYUh*m;`auJR5+g7-"3s'FoN:/^YJB(]Y,Sf!`Bh
%Y>mM];*)k,`n\YS*f5E-J>u5bSc^R_+K-qR$N%mfBFmVod!&uQE0gU3Tb(0Fg728&1is_in"`"smp6QiBY+>_ho7'L-lBmG)+R86
%did<p6.>h4g>jAsUWlMcB9u!3Fu%O.U3q&HNm<8G$LJ67gOYdr%`/PV5tiZBK5S_<8@t'Pg*Fa[C2C16!i]3XOEF=K,mTMNBoZE;
%m)OR0>G`fWJcLLEjD#6"^))PBDAdf:[VVFR97R'kp*efjTp/acG"`8n/h!bF&8@K(Z@f/<3K2a<ZP*?j)<N_*4XI,JLJZn4)?P'$
%Nj$b2U9PMg-!D704S1*&QB4!8Wh:?'W_S1W]*(k*VeVEJaGj5>9?XT`OW3?Oftc6,NtDMIm0F"h_LPd#BT3<$]Bi\9Qo,:SNpj3[
%ahXSR8rcrK>D></QaG<I`ddElQs`@jU2JYi_a(Dg@\e,MX,a20eUV[M:M0hf[lB&O>]sSk*5oWu0*MbWlk('gi)h]h!@JAMYFrR>
%YUC'1SALq+3Ze!Q<#NL`Cq$4J/hm:r!;;5PQOM'1)gZgi$I]okE8"*h&[n&bT%q[k_<M&j@FOMZAGREi\6oIM@lYs---S'h"(dj.
%NXK'W@0(,\J,rFI27KrL5BgVaM?8Ct$Ijj&CVR?g9[h_;FXc^ZjhV^`OngnSj>[iGJE<(!(Ng)l1Q:p(`$3g=2%1nd$U^Bk@KHWd
%4%Mc89#(Km5X?q?:SGA`;XE).?IB)U.Z3j:'rEi@@F@qS,oKL%j?c6+5cY<T5K,$W>di%2EJOpcBEZa2Aimti;)EPn#(h9?\/%M]
%DTU8jJ;bIMD:5LNlF\d4m<`$IT^2a)BXK:F2G6op5?46o7<Z&k=U7i;HC7>9+;n@5r"=*j*=@GS*!F&bm#Xt.+;d%O;]toNW,coh
%Z8.-\7O]g5VeSk[O;TGgJ*;Stf8WTdprNF/-AMI/qJ#.,'Hrr_6-jbt/s*RI+c#0&MiIuBlt'?@#k8`i/T"QSFl"&lIB$\>cC_+s
%6E4=FaptH:j=kW7c#O(C$BPE])%IfuZL&6^Hn3RKYjB?ar6o'##COQDBiTaO&-c!g2D-,C6dV"\[\ku49P[nLWh6:`24j0UF%k$a
%`S$-#/CR:$apI#?&>PH.fK*Q1-<)(s@AknT$ct5uCeGlgQDr"u2FsiHR+=$HdnZn]eR5]#cB1YJ*7rG5Ld:4)LDF'nZ&XBcZuWL(
%0^**%Cj7,UZ;F/Z80Dq2gq_OaaX&=b;2hl`@+@hOUDcd;bc+4q$*F[dA-d!1ZFNTg1!XSKQsgK/"HEZL_pkmr'_-\m`]>)$Ti9C>
%"Pplf:t$Yk$]P*J.)T,k?8O)-U$q2F;N.uc@+A+SV&E0Jlr&7d-EPkAc3hA2j$bJ<6839T5\l<dfIthi$7pnM&4i(,W2+Ps.h3t'
%!S@$V;&?Se`Yhd9'N/cu<:s/>VacjhGWI,nP@+VbfdQsS62r@8"@Q1%CJ@BR/e\7Sf1BOoKVVm7)'DP>>U0J=LbM8d<_+snZ@Z'm
%TgI@ToRZ)Cb\&/4l:i8`PC]YGC3'u^L*PGm.%h?2@]\Io+u)46U7-fRFFHH[Confs"BO`#ePSlFW_hA/<Lk*pDPS^IfVm"^EL%_`
%e7c]aRn(76cdF`t_'kjhYZO=lV-Ilc3[G.Q=#SP7"9!$je#Q$)'I0_1=ERSCW<SS+4.hdn6Tf7cb0uY1"=kk81DI(A5fiihUDjEQ
%_r3s"71=f3B7k'I:0g-TK>Kp5p1,"jdDk!g[LJN*;S3.#5m=s2ETo54Er.9+_H$fFK#n0Q![GaC3/lu8lI't1MU7B,5hTb.$eRuq
%(qUH6X?nd>1G&dM3=Z>X+LVH4W[(uV\cI+I*M@[[M-.eT_cFUXP+g&-gU'R,PF2&:)G_OUj+t<7BL29]0upALMo"\rJQk#k]pStG
%1G_Z*cH^,4asX8ZFp09F=,VZ@AOjON[Fil/2<2(U*eLKF69,NLY)%p@$fs?%3C6E"K+U9OP:pC>gHp&4i!;'J9OMHR^*S,c9HYCK
%KLh`VNW\3O60o5+(JtE@$"Ftb!^*LSd^#/A4i[@a/sHH#\-9dHm/-\l$'[-jh6jR.!AWJ=O<.r2Jm^p>9,Jeu(/_'+&3[!jBESHV
%TqbUgLQ93tdZ2UNM"qMI1/i6n3>dG`7(>VB(U/T[#":/:"(5L"?eNqA#1*ngmcq-W:i4?F^hS$k;DoMtAIeCo.@fq0DZ$1L3W7-l
%&Xna3%**=AZau!KHEr%2,=:EfiY^[?lr109LS,N&UVXaoJimj<+?36,0or;FGqk'pkd0RX3>aZDcY1Nh/J(WS$VtK(7KBM'Cb;#g
%l<d7?/j!Q>hUn?sU*(IngsW?Zd[3T;$#.+ZKnB!\47'G^4r];"9L@RC/$RMZ*(Nc$W/nt(X=/$Ff4'V[J0"l\S4mg4VFeSV8O_f<
%S.iFOXO`<(A8t,TC:t>%chl%phL"?K2n@usHLI.!giOZHnt1t^[@:Fl'>=.?US\+oe(I$9f)WX;0e#F=UejGaEtejCJTin(9EOQL
%Z'7MPOVd+eOAnm^\mQ#!P(MOp+<nuqa.!H;*':!jkIN+^cZLtSAYpmB-nasn#K&o<:W'P,AHH?u"`s[C.R?U[2Mt.RW[oj\\rR24
%TGL&)+qV"05^]ZUg]VL-&i?,'?Y3\g3,U]C+*$"P3g_iHi1!KS7i[PY%ade:[i8*)9aCHjZi4r*LBj].DgPA4@t,nO=0kOJ*/:n@
%mkPTA:54?c9fi?-K5NIZ#A&0h*d(b\:EG]e+cqT%\N!D(&@YADNDbSO.J_u]L(qSJ'MF"g+TZ8,P6=7U`pg#'_>r$p[HJqAi6Q4]
%:W8nT`$.=FQrb!4YYPf;4\*Fr7:7Db;:5b:1^Z%&kMm/;m:U(#_(k*QA6gTWobB8VQ7Lc2L7#5>XI>(c1PVQ^O&[DjD7S"P;p:U`
%\BGM92CV[$G0gfsAr;]i[j.7S%W0$;J8jo&,;>IeTFk:,*k'EkPD+PqU66s]/e0)6:,1HQ;+a,oi,K2JCC]-e#bYI^5=0LEb8NW/
%^=#8?jabgQNRf`+2[gb;#GY372j,9i8eMDfB*.A+R,gr!T`u?h2QnY'Te-V6:agpiaq\?[Z8PN4/C_.C.$T6aZbX_G8^`2&5<!+O
%k$(#=<l)@NJV`O\:mKeb-O*FV&?/5(F4dn<3'6.7VX"nJ*[DIs[@.dVCJSA*.3i6.p?A_9KVW0GiFGKJ+i8(o.%C];1ITf^6ILgt
%CW6XhnY'nIAhFm&B*uHo\*Lne]2Xk0Kg<lmU\5DXj_&@k_[)>!<%PI6Je/Hc!]P`5Tt-kQ5B5%gYF3L8PhX;$OFcf<0sQp*jC<M;
%MEj!K=VXSH?`Yc6*KNNj@#dQ:$jV]IOj(IYQA?PR,@j,dBHiFH<DFIS*c+Ci*<=5Q`onF"r&1rciKuNQTE)n-HB(2@)QM@76L,i:
%g&hb,m@5";X-gAnAU%'!ek&=Y).T&R#<SoXW*JDJ.HnheSWjXnRMb<8]9eSK158njgCCH;5l:4Q=-2?qLq5m>\q6[/ae0fKgS9O&
%"$QEq1]L8S?Up(C6d+L0R">?n]QpU,&D2p0LDg+i"r.WFd,nLNEA6?;?0p44UIRS\K1QfBI\T_QXq[TBi<f_r"Z[<s%UG9A(i-D0
%!n&&^ZCGqh6#BJtq3ODZE5:DbhB=\-.&VJSM.ifBEH]&&Wg4t[Ha.3r=-94l`>,D8`s>dDNS/067_r_(nmr6C1"(Mu83VmdcUIVu
%K&[;+oS,p6M';]#J%5Q/j$eLb7O,7bKSF,\Z%Jqt4DIiPOq@"_jQ%k.2<+%@U]sZ?g`4BL[UftcKFmg8!$*=.j7@NhJ;dW"_$U=#
%(1BH6qP.%F(a?<\4Jon^3^gi5($K]T%B0cdIhs-0,kP,&pflr%GE8_T1!i*K<5o1^N.&N>H%Ep9MEPW'Ak!5t'FsQZq4g8Dbr%jo
%7ji6W&jeLOHs-5TP:_qMiN@0/kuPkq4_J6+AU(R*LjDClFW-H\#i%>W4WECU%5H?G6EOfiFtR[e(uIJWr;qt7?X"^1b<RGrbUc%G
%bq0/d'PC78*O^AuJ28P&bt*s*.\m?/_R2^)MW"El5nhr&.ATTK<DX#-W%RZ#5_Ea+\3^;M[[oj_#TfN?SgM-K8<Y7'S<>'m>Nc>`
%L_4es*_1&,OJrh*Af=rmhe&`j`!bj`:JbmW)-LKGkL()'MhX(<4VN&n,NXpTo]$&B8VDOFNo(NNDi0c<`7%Kj]U'Y_a71)Nrl=C5
%THO^*1:&PLC.DE]UJNF3/3H.<FgV3&ML\hKB1,;q'sbc_b-?S6V33-4GIhIpPAQmX\hm7fV3l4PG!j98'L_E:-oBl0I\]#H-qAm4
%V70S1UrsES:rs@UO&Z7:aqG"sG?aDA2)bT]bbJVbFNtI-_Q6"!W4&'1p0d!9MHFApTLc6gAaUneb=%(88!E?fa\,<^X%oNr6AF5_
%VCP0#mO$%K9Y$Wf`Z%cb[Y9L7n%])!UHXP*"!pU19'NPgjR[pAU#b"Z_tZ&*N7ea_G=]&kjeONWJH*H/7d,VFH7TkjGT+p;"!,jB
%A/+ATJ[;!GA]s60ZR_dFBon9(U\J[6m/"fsI'"f!s.SQ.>*T5cXXi&?A#KCRN)Z&P)Ie(ZZLno),CDo/'.N4`r,PQkE/=[a-QFmt
%q'#L*C%I8nJ1/\q$D;S+jAlhibR*p*66.AZ0`kBTTM>jc@8PW"//8A#Ni\Z\KLOq/no7s40W5Qq;s)0$#shZM?7R,LAI8GoS.st.
%Xb[CG_)`.d^6&]gPOP`*)2A;2Pol@3<<pB8kf#7e+s[Pf6N$$WO,b%rO<q"G[o:(W["0f=0J:=8?o*M18`\U$8fum5E>WD@blZma
%#9mu@QAgnEZ(bXiUCW*?SG?\Mp_rcoIL&]G8Y@!(lDPuNOYE>)<<ks6b<kGS(H.kE=I3IVjs]j.!UDSN4WacE#TFit?u?<>T,=o;
%qItb;cUZ0>P9O[#]5AN/(ucuN5i@m$A+XiH)^@YecOF$1S5;c_*$a,@WKO"Z#"HhAUI$.Y0KK8F)l^UqR)ZEH/@^$8C;94@/eJ.A
%dSu'](t9YZnJn[(/VD5XFg`'?Sjp4^1_gb$\s3/WG);m-:tU:e&<_XLKgOZA@KI^%=Je^t1:b30>g(AD"bk(8iGBGoc>rn]YZg12
%iu#Xd1P*Y'9K3i04>&<j"pc.lS4s%$`^jQ+]^_f5AD&t1S?jXeHJE+hJ3UohB2l#JeTd7;8l:_'\YoM7$$6@*ejMsfE;c>6bAj>P
%:ITsgWVA^/aPp2VN8+^`0IksR`)>iPOUdMWaXI8TU4S\)70V6ZL(9I_GXj3ggea=O%(2Xb;F<`*q.<UNB:ee>b>R"$>j;faq,Z("
%$XE>,=8ks^i==CogK(1U=VEH-WIC<(KGeZgjXAi7ksItlZA0rbmLQ2bq&T`l`!"B^"%U/2NPnDm<f%%(();]SefcLW!d4<a3ehfs
%b7r9k/MB9ZimCg9onA=Ia)El\aC68s9,sG?l&A2^JB%$a$Ln.h>U2[Wr@`lig]@sg`#pLb0s+,T\%n_t22#9sPb<hCiH;Cm4WeV0
%G_(&$:dB0[@Bkp"T^S\J#?`'u8@&GA5V>&/'X[Bc!36U<F5R62$Fmd'Tu<WYpXQ(N(^T0ddn_[':kSuBA4.YIo%,oYf1G)3:?*qR
%n^g@S^!kd(<7A6Mj8Dck/^[/A8S&,9[o6#Q=N:^]gLAcRF]fnR?'GoI64JOYL+!DAJk+gq@!#WskUeoiMB'qB>F$e@Dqejs"<L`,
%\j]>r/lCZ`7urM(:&tRi2Uq@J%AO`;'Wd73<Md""<U6+DNR8KDP:>dLp(I^sdg)aQi^:1RpR<i)AZ0n6BQd-:"g]F849$!p91;^`
%X<V,`>0?E]hb2/LLJp.\ne^-%hM5$RdS-"n9R"oS>[K9mF.7D!:3A=A`QiQADqm7e)ikb!0-ugSUA@4@BHU'(F]_7,9J7R?#s"EX
%:+5D5$kmM-A'/2`CMX:a(8d&VVRjJsAI(cgM84/8!3ZQiRr1+N*[TWk(k@We8LoZ<a*4p@$)UuNQ*AtkW_0[s<9r93_[E+'Ya6&H
%/ab6e^+To?'jHi)2/8_*"#F3r%93dl2c'D-[a\.8&YgaoI@4M1)C0JiGBl)nF][D*2;Q<DG]d*DT/GF/2Vju_?aVcHaIREq=7t!\
%("dbHGjOS"\0iK,3>$D?#*FXlq%0dk/fJPW[E'tF_0Y)1!>!Xjnj1nr)XLmG4d5m!rq);[]@usXFJlPp_)1t`@(DV#grInPX^1k%
%]@4Y21,i.]'!]Ka7YPR.c6]Q8VlEX33Rt^L47S&O'P<4,jj8(t!tN%,RB@`>%XofaVj_1;>!U\-4%)mq.,)fp2anHq:mB>S#[!1T
%[QF'srj1hne:iBn%Y4rN#&%V#Hj0]%L&Vaq!R*P,-DVTRR0iF%$r"bQ`bj'&cX3HKQH;rRcE*Cf.Z["6(*8A6rDnBGGq;5F@]it)
%.mcK=O+f.,h%75#:q)/HEe;\$'bj+TW]R[Q$oP=8/Q"qDANUa(V"@cBGW"+)>o',diFs1m[R>8Teke7(,N*ZHb[([>_^"3K:mjJj
%M*`QM'VXb]E`l$*R6Ab35YR#$-KZ">SMXk+a_*CIF8Y%VXW'o<PDN/a7]ft5]/o<:>ucrX98B`Wgt:dP3$i4iBL#%iX.rOFGCS7B
%+B,1*m]6Df_BMEhW3BM\_?,eR,%.RFjU8Deh25)JQVmrR\33@;c626<iXIu:"C>mLN_LZKc]^[YY[,*1-e0rPO/@23J$YaJhre$H
%=pAL"=[jk_jsmSQ&odd\p%csCScUr!!mODG,fuQO[6e;-JG=QEe^oMl(cph^^<Vs&)J-jCNiFn1;)"[S;?oX3,Xurh5"es(242V9
%Pu%35.5dL:dZmTbQI!ujb2m2*pbaKV=P>]$RP@/jZ8()GirgQTM#t16&4V?P%gh^i0[i=uNY^Yt=eX<#+;I@Aa;+M*MF+'DD_X[%
%k9P3r>_dP5f6;>`6a&^9E!NE6]\)0kLaS\Vh+2=D-&0]_pG(:/CXLt$,5N'TjlF_)80Cl^-q'9H.27DP*1(P?N/Ii+O>\U#Yt[T7
%P<bB8(*#*WTk[L;D-!>IRH;Ag+IMi$Wu_f0,LDrDG(%Gin^=&U2E@1(cs8f+>(TMa6HN,Vl"Z,lLLaNo$8__ke&<F68cobs^RAeH
%loQ5QgK$\l*ZkP!=sS5e1e5j2Xe02MbbR^m3=635%k"2CPW9'[R2-5l$B;S)%2f[(V+-^J1LsZGA7QDOT3ZtZ;=lC_V&Q73++\Dp
%I8nAYXu)n!`#RNlon8h:@sS2Yr2`In&ep(fVZW2A&kk-Rr`[.2KVmEjrQl.u1bg\+A;3rM-X)C)!eZs%V)BjLNh,l:K:1q60GpK7
%q^?,=2QHlNo['i`NeIOCZ*p_=0'L.<[]5!`SX?c0#U?HH]XV]Z!b5PT%AVCH_7nsKU*r*"-94O-oA$9`i`1/?M+js>&n:_/AAX2E
%6ilkmI?mu)&66I(d=')[<?K\%8j>@Bm&%"DKM81"Sgl/ikNL^.,>QJdGcAS!Z"+.k"nNFAU=:/[B6T*)oi"QoaHNc=AEr!59NFM\
%"B?3Q&QG-'_=aadl!lhbTLZShOD\R.OsDO"%TBio_ItQ-$DXI;#$M"lj-TF+hA"(b:T8@iH4$Y[ThAS]PX^ROMDS4qe#DfTgr>V`
%Boea._0ECS3D?"Xj]6iZ(jM<h+qo5jEZCRT-BCs,XQ<p:kA3';32U[nUnfGTntZE3Un=NSc%bT16@K-+d>!@gUY4^1ie[^.U*5"`
%-pk?M()DNh(Oe]E8D`'u-sBS(3OCi?@go<5m0]f;Hc+n78O;!O&\?^gFUFl1.TCRf<@<Qa)fM;/\&1lJ2A-mh<S:f3B:.Gp7uL50
%5"dM=o=nH'.m]hJa(63MJ9]H]FpY,r`k/WTQ"j#9pd=1dGA/e=2c'^XWY@d'<++E7<>FtKAorFEBV`Q`bHW%^k&'XinVD5)>b^F`
%@G15h`.F1$'_;m53rW0S^oACk(^I%c\+kq2dV]Dsh`@D\,BG49dHj;Y8#hc7euh>N#A&$m(qK1f`FC`<Pb>OC/Ne\%([s/,$27.$
%,3#hGC.*H)V'o/:8FFi'P\jl5)\=TiH*gQPe]#4Ojt.qa4`NAMWhYYj=.upPWk*9dftl7gLM.ZFR)@cgfb.SYk!Hn-a<HE0Q8?]E
%&Nb732=Pm;)*\I;Jh\lh>Je'CMmA]b8$A(bXS)5K.?)lRR#!%gL26urj'atsXdcVh)NCaM2fQSIU)5Pk"$*]g"X0`M6,jJP_LsnH
%$MM:YNR0u1D@nQ_UdOKL$JVWhNBi;OjO<D3N=HuURMK"rpP9p1OJ9"6l$n)_8rAbNF]`aL<%1>$+*`6,5R=^&]$-D70H$i/n:[8l
%`"M(n;rRk*`kH3\Kj89?RMK";8n:dS:0Am^8E2`^\k/odUWF$/.lsDT?V/\!7g^`V&7G\oYQBE0g]O:-O!nOY9VePA]8oL8!YNj*
%^oUV;QkTpB9b`]V.5:.TW[[=]DM2-n@U%'7meaQu;6Z2lJ-inX_a&"Aj,=OX0\`"!Pp'(=[)P,%8J+iS'b7T7%9#t7=S@p--qBIC
%GWj<U%JCHAYlaXaEMk\/\.Z[tKEPitdrGK,*(<_h@Mf`6=;8^<`=iD"A%2CLXYJm^3461^RB_reSoaC75V%^nMaL^LO^PP9%2Smf
%<Qajm8"S!4*mn/i!(O2NHs=P6+O$S`--Y@FHj:HK@b2j\//6#XH9f;))M:nDed,@ln?h/[nJ("Ja2Bf8TGPTF25n.8.M\hg:15YI
%-nB$X_o[m#Q*qOWaC^]kPd"tPWT/Qe)co!Tb&**,jWM1!a?\?u39Z"7(lL192pJ\,n6LTt)<U7M\.MMaV);oL>M<p%0;;X_&smMV
%DFe3C,,u[kB-qBS=ci]<n>@C4-IPZ>n/,;q?7g!7ck4<UZ4@"1Xg%l$HaL'q=lams=uDC`J`*QCW`D!]r%&+RdW>4Ib[hR@k9>af
%EgUDQ+tu(76Q<_h$tIsY1b=ef7Y>,dD!!u1<<CEiSmBcJ(KatQL-7.`<DfBX'O$b)UTG23G*GrT#F$;lSJ@cFj(!frDLU%XUbEgh
%O0"V;AJ!'ek=u-hGY1u<7ca7%\4\_4YfroAU2$L(8qQm2cqC+=S"rM6SG^J(S-4)mht<A"iV>T+,MLuqjsGq$$7!OmZ<7$Y*P"HO
%Md1-gBlF=nEPR&VX,P1:EZqQ-J[(i"J;>':+[nbIoi%oS@'k%c(*+]$aoUVE:)OI%(h6&j[[ZhV`<debGm8jdOMu%-p,g0!&<AQp
%JmPKV#4<TdccIdF;!0L=XCN3U<Xg<[+Lpd@W`0EX56lK5CZ.u?f8=XuPN(;Xna994fK#$u"=,t*O9+eVW>7.4=\_QWK)d_!6cuDP
%P?J80l?<gHT(Z79WWnc]"U"^RV&T1R0S>G)G:9VR)+2Y9*Y>&sbhgW?:]U&4Z@%(P=9*]<=hbZp9FrYR`_:+nT[j8U:]%2-<<LFj
%6E6"'V)sGI7m#E:pP(tf_5'$k`EAF4m.&KVie]c<FCYTD/<8?Roico(LTt(3H6BFKfI^WXn?fKo<*=46=/o])!sD]=-+0amjlSh.
%n"I7TPF3I>&=L%B2<[BJ1oDJM1Q(`Xd/)g2C#a;I0H`="'P7$aI(`8a,HVVaF]?qkL6E^+3\>TCQ3GfLVM/SZiSm>W"!I=ldIntZ
%4/_+d+LG00@bLuH3I$l5M#C"UG35u.W^3Y5!mA<`.fIRt0MFc<4IY;M&Z/>6_NkpNF+`(d4hSNtRaWt@ZODe&ct[ZJ+LTe19CA73
%]c`70/7OW?8.jCX6=h61F`K&/@Ai1<W=i'TcB8S5iTmgbV'-e"r[CCi9#pb5asuN,e&Ei1@%rE9c;58<R:`?AZq:d+bu7m@Q.@ET
%AJfpqYBrbE0+_Tip#QHb-*V7*)5ec=JqVS\$P@HNkcg9_)Jhh`57pA3Po2jbEXA=5@0fR37`L%LLW/:u/1lM_N")u)!etW`7)!OB
%$]Nie34X%%'u^`ULfYI6D]H_Q':cijoCUBJJRDX;?HrHc(iNYS$Rm"Qbs\&Q(c2,L%Gf!?(r\'#Uq!^q:6P[a;sNqtWS%HJ0Ng"8
%PJnOCX5tO$l/\?S)%R*pEgZbO'4!0;a^ObnR%,-@r#nP=aTMhVou6!?2CA/n5!2Ze+.iH+4KDs3ptYY2+GPdX2EuAYTGM(o'#t`[
%aCC.,NUai8U-THeB@$__'P2\$3^sh;[W_!_+ETJM-L3Y^BL+bN@s/bka5/\H&39/VW/gu%2AVP-q-M'*RNftlM-3)2T,(ptU\MJS
%Q62V+QG&B=a)8+2!ImO.c3m!&O`F2l+[P@71H9f.,e",6L^hCVqJi;l(,VO::,n85a+B&p:"-A?nbgaQauJ?>;K^?*\nO20*CIB#
%94k\^$>5_8Ke\+r28Bg<'B[?jAK*X\#`lr'\KK+i+R^Q+?SHdm-P-fZ0_5`->8V2+%kKCe4n1AcNO>LhcSGt0-Bo2Rdp1f<NjqeL
%X0c$lZ<1m*`ON-kpbA(8'[uCDlm+FMa`6"\/U!CU*is6k-;)),BoR@lJa=RWQn0,/aT@NReWQ'\J2ptdk+"`KqF;MHN'(ao+%^!=
%/rZD$&VgGM_h/9Y%.m(7Iro*[jY-gj#P]-.aA7+b/!n*\cB%*dFB:t$fPA'Y2LGEJ"8fs](ZS4IhdXXXY"5T)@k`r1])&,-_!3,*
%/<2JS@Dl"[Z(h"Q&C5!c0R=p<@#P-V76m3<d^AjmC"dljnM>/$l=,;MUo7X4M+=g?iPNa`Seb%c5HV]E_<PDm*rmu=<koDM?k,EB
%+4uW:gWtQRQt$:.5m?E'K7'''=EVOD5>Cf*rZhZ"`Eb!'6Vo`J73W*K6s"MuNlU7$iIPj(oXPjdF8;j4Hk$3N6rbrk$Sl^(*+>O?
%pqiR:dpe?YLl6D0Qn+%\1^ZmM5[ABJU9J0Fm#!hT+DE]efPb8k3`hTaFFBPC'd++"L(I.OMt(1+rc(l/'h%k5A7PaI,0%]7;j]+q
%b<9`GN<S:R*[?u;n7G%,>:-:D#.GI[ji.PUOm'D^N1MK.bnpUsLm=GD<$sb@Ls\!^o8VK<9E^.9jXk(*.Q@mH'gniP8mI9;Ml"=Y
%TV!M<5Y>Gc%B,f.*p9^fMD`Fj\"r#=h;,neq,&3pcbH-)&uRCOq!@D[W^1H.dZ>pZZ"PZr%n:4m%(9QP,RR(cBp:q0OGfbdVQ.[K
%e(SaGTMA6c9qaUtK-c<jeZ49F-B8T2S@OZtT@Vsef/O_0_kVYEbQp$]MeG80"J0_X.81MuiN]?7jeOS5HjUNb)$-eW=7>A6ior4,
%Hnq;=(nNZMNfO>@AYT;9nT:Y44(E*`p`Ma5m?`_;1^+DMgN3.17a1gM6%Bb&h%\oVQ1:@s`cV1&Z#HV6L!)6J1Nf(8pjs,*QX=?%
%1022M5%Pu%?u@4llu;Va=il3I=Yi`[R[m-09)BDYHnu82:r>gl%tu7@?lbMGQ2'>`M?)@VMJ;c>/LkZ"/i/9YM[pjXPF7+FGtuHI
%#&U4?S=*C0XWFs3klMDqXd-q4NgZGgYj^bN<P$sT"'`c7AYZZ]Lac7*f&U3j))5][s"[&;R=hP66!0?2[:Dc:&R_J4Z#Q8P7q(>o
%WKRV?S4ui=-/rjA;D\Y5mhmp:&J`J%?r2I"6me!eA9#$ri8"Dd^^9;dMr\b(6FC+hH3iXgA0r/0Ci4hX1Cjmd#X8NgP;.OE%3``4
%OK`YS@)*kupW8A#=U\5aMjbiS%LO=Ejsc&Zl&g=lH>jJc_LlSU79Fp`^)0@+I):F\d(u_KVN3_+%9"0rfL'bID!Ef"d*/T-`k^Vi
%bR>.aX[Z^g/*?]N+mSQ-V.>ht8kEIp9NFC6BDLb?rAHq[h/BkQ0_R\]\os`R9ZT`uk:Qb%XpC!"8Y@[UA1o6rmOmR-d?0X:j9?-3
%5tMVDX[WV\!0hma;#+%U0phRCq>igSc(Hcb4=o.H3M1[mL)]]Y9Q^:jg8)Qr!b9+UKLnRiH@0"bR0d8J<hNqZ:78mPIgMQEM5C7`
%]N))3(u#?T(\4qHm"dG+Q=YijgYa2?M.TH+"Z6b>UWq"N$$]OD<$aEcr)6Q-3C,)O,OAW[R'0qq$3Fg@S*gJJfQK/^>XirW!l66Q
%N6@T*;ZsZdB%n0ZD$g@u&2>fLBa@$aa/b774#jb\Is%#3,_9QpQU:645+]W_U#IeE%/XLp]s+a.<1?spKS!*h6p0G&OsQ58-:l++
%4)-+=%$8G+0``#_k<Su?6I$kmF$iT#"'^FI7B"d86k^jqW'gs+>_.H;;NbGc,2S^Be0cI"^>I/18Z>>F=%"`SKS)V!Kc:&n29H;^
%1eqDm/W^2*)m04#]e#iE'P-YQR"G&A1&e%s!+W2?a@c]iHO$G6$0.sJEm*J!5+-'gAnbS&K^B@JWWDJ?9&su7S&ga$R`Z84V$!WY
%"J^8f44%o_#V72l<)F2;/9LtTXH::FL$0O",tRMpB?[O;W#?[(^&OuK:U,j$O[Y*L6*E%]4X*Dc2;1#*]7EXRbT78?bbsG.FQt<T
%<_9"=MIPqRPrf<e$U$g9V"^:_2lu)".)X$'8N3a3*@K<q/`Rj!j)ld![Aa3dXCO7!QaY-4]>eY#(9tiGQTY6T4UpQaPup-fT>=)a
%+:DIMh4?)/:4r'Wj\V>^^,0*J+0NN+Bj8*O`6hh[`j.>J=pMGX)MOs((S;.E5N>6ubWp6sCS_3^U`b^"_Kkfa]eI([cKA;090bY#
%Lu<MUKpMjS[E'\r.+<qc9Oiph)d4bN;8KC[5^rU!4n')\Qn&Zq[<W:V1VTJg-An!u7E<"3!t[67E'cIXE'bW,fq!NWPTI=\"/eht
%=@M5X<8^_.(<daU2(HPe(lVH;E_AlI)8j:LZ"(ek`CRKu@c;Ri;8t$^GYDA"mg>S=EA+ZBPsJf7-WM/!G(?7/H`Mo[]4qWH5.P<I
%[tZGm+k7\k(qJQ4(06sA88pH&=^=R_ZrW,rArhU[[p)alG<mM6dE2[kCjMMg7p?Q54q?[;L_p7*?3o3-:7Au)7',@#=@_@mP%d&n
%2_<O_Q5Uqhc^p&o<rq^.0_kc)odZWj(ohM5BHIibD@D^^&6#e/CPpV#7eMh-88+I8<#Q6Y$]St[VkbCqOh:^YVWe>La9o!WN)-8=
%K5=9Mi2\mN^Zm/b%R0.;#2Js>8f\A9!Nc](K`c\o`qM;=66fZj`/-4gcZ_aY-pEUQnW(aA#tA-sY`LcMb#Eh'n[(p>Yg?V(=gauK
%W8ON3LWq]'8g]Qs`C3?:3mduS0UGu[MUQ^d.mS!>(Fc+u[I3>=SpYp+2E4m[-Q=8$-c\^"&7neM[4t)&*6i:.H6+.KXeMccZ.?q!
%m'4/O'&c,Zr@Z'q]M-5"i5suXi!CY-`doI]6@:Q9p[p$].@:i4Z7m"K@DoQa%A_UI1u&i:RoYG*.%3dI%n],no$F[?nmF:lqPp%u
%4V9l+'#clYPN#`-U#C)r7cA*NF]"=43gRCkVXBH^Dkn,X^*`</)=PK]09;+&BP+i;<oEP;lE0;CSFQG\rk0CIlKX4i4n1Wc^Jg:Z
%M5]q1gm`<Eo3lBoWbQWX[S#KaT5BVAGrS1%;&l:acK->6#]3BXai-6>'Mc=PnB6@RFF8Pl&q20d'kOkWnU_JHY2W"p%i/ZBNRXe1
%M%j'_>O)lnFB-a).JnC>E',#c0R=h)^bLmH-8kWX2c+5C.9>U6Z<XOibG)^&%n'ug'I/V'0_;@Npc)%hVRKdCLqNk,8O8$'ctH!h
%AnDqA$5./u9aE9dO;!DTDt?@d6Zigh@'c2=jY^03c.YaUE63Oar4QFs2-BI0=nBnl8XFD<IGOh7?K2dYYp,&gr?rCE`B.!\/#"GP
%(/!pt:(E<d&VeIs0+6uS3$)niGr0pWMcoC$-F78:\k&`NF:"$:>FPT-(YXdJfOljfC&4>(l?Ceb0)Z$N>3-BiQc?!(JA#7MA.*`^
%o0PZ7^ok$Ip_ZnjH5bH?o$-O&#s:/iTE`!lb@kut-r*j+icN]QIb9q'eLHaFKC[XdE]4/u\NSsCho(G)oN#E"rh9.bhPb4<k50WA
%XpU=bKndd+`g_kGI=!l5Gg?-YCi3p!QVb^WeY[:!;k+,&fB(U@3)>3N?1.O8E:ajL&@d\J&)UV*mV:kUEuehX8>dO5l-'`Em4Nd[
%-f)mb+-J^ag8;j!I$a##+GCh<7BYFGC'girJgIq^[%pm5&*Z5Z\nNlSdc&'$'ZSL8Yn*\[cUm_NB"`Y(ju"*GX;&Y<b.9_%4%BSk
%Vj'Pg8nk&>6%Ra%2I&euh1es3P"h:5a'OLt\#'VDX,Y_nbr:tZgi/j0*L^6(cJ>]_?H+%uMes&aQ/0D;NR8qcVr;%D\=oCGdFm\m
%+P/B<-+76*KbR0s3"8B?mt\G:N"8G4Z;n/b#s#"K9L8&hIDc4al!D8?I+Z7ih3H-jXmKNBVBKuS/5(N[g)7o'5b3fE>jbutXkK$#
%IQuZ(W*\2\T.):2"_enmT=G9p[%rWSg,?:D:6&D_<RQn5e=o9^[[$%:)GY"$ifqGPiJM<iX$jKl$b9LQ.artuI7&Qb%k?%[0nY-.
%e&&&b%*&2S"d2$imM[lPR'KGFh8U9KLPO[<D4KV=-.HnnLrnYU,6gqDn\eON_upkME9k%r"IO>MaMQH9JtX2[Pk!&GoH>-5Vb=Z5
%Ufr.]9.%/@q]N\5,DMF_NgLq=UBK$d0gWUm_m>Aj'[K[kL=9]OKr\oG3b$NB.p5@Nah_H1lr"r8N68tGbV!C!_D3<DM_VP2JM]'\
%^S^'I`^DX.NjG+r"k..kV]bbM7\JUa[R9T@%$!83rUc5CLu0._bZm<(&u9g<-k*O<nju5tO-:3N?@(WW#H%[o*WD34^)iD?7X3$7
%bbY*p&4Y0%Li?g@r2'W`Ph=tdhKQIEUL>Y"(I_bWGiOT\#Wn.td'W$OX7I\k/?W?[Or0h,,o5"OlrH#\LTB:qN#+Yh3_'7r9W7@J
%TNZd;$-G$67I3dI[T4<lU)@6O-jj.N\D!W;Y'/f<SC!9s&&eu789V?hMd&)nSBTu)8dmX5Kq-BHAkG[.bi350ph!,,2_g#Vm%u3\
%SM>WMfM.=n-Wm'eOt<n-Q4AW;AoL7FDF-+qX3Qa0+[gDa,J$E._54tF'_'?>S/!b+dOr:g`'e_P`n+L$^2Y?X#F,VJnT`t[KVpeY
%b\&+4SpZk89M7&fYg!*47EMut`-i((,O#XD*:qN+>%9+J#24=''FERQ*nQ]XabV%&cjCM`AQC'qaAi8\l@]rZ%m/Ej=s4E_ie([(
%ZC.+kd&7&<PsS[f"`"M0WJ_1,\J5NPK(%JNRtsstL'pp)]6b,"]KFfmE5EVbie1FAH73YRqAe,6'4PS&EQWs%VAu(hdrEN`R&1:a
%`e9`AgmP#ZS!2<@b)VoGHlA3"WgAp"c2sC\f!3[tJe[s(Wsn&B/2NAVs646,"j#1,Hom+s#>,Bab@B?+6E6lTkQ@kOa'IRtoA'b)
%Kr-G\Gt\iU6:Y2l>`*lEDfQ[*7=s.lo,HfhhRpnS(d4S"E=fhT$tF`FN]Fhp`9X7>:BK>eBFr?d\IfpRMoq(GUsjrI:^?7Wkd]r`
%#>YqB0:gSa[g^c-!H3ia*gIre9h]tqF\37H@3D2RGUUWu(F`o5LhHq%)(H`a'4[Z@"5FTTQ)0i''K6VjOUNVcX;Zn//"$(UWL5k%
%Z`kXL*7:U]M*-c>S>#c6cB2<So>jgqXtuA!m>`ss.&sB0$n?((]GPJV^+1/U`r$!;W/"#;0Ol?._DLi.[SspQ"\B2;%1d^K,->$Q
%gi(d?OFilS3Drn3ak7j3%9"3KVboKdPXam?CR[5saVA^Q#Y*Z*M:#/&AE7)Y8Sjh?lsrn4=i47^DIXm[!a3E@b&1]EEb!C4@Q2cA
%`^J_gZA,FZRW=N0o9Kc8m._dff5_G\KD.KH/Y]D#NWk8#?p]N?^V_::k2@U_aPO5@H?G<\Gp'MK2F!o_c))'L/\V[SC)&07iJrl(
%l6mpIQ([E6XA'-J2qg;cO@[(c4XfCET1Qd$8-Tl!4M4:A@^N$*=bt"i%&j]"csb-<Bf1V:=\o:`kYu[3U?tiXFAQ!c8!+g.?">\`
%?'1m/AFGSW8+&RTVhnq1@>8bNJ/GU4(rkHf$\OO/62>5F3f!+p@8`%W_.Yl5"26SS4*jQ1:@[b,@<uku63arta*'D9Y3l#f%0PSh
%@1^.f8s+X^?)Ws]66sq3T^N`h8t-P,rYAl7[KB#MkjWe'Blsb,m1NCjO49I*,!T6p%6e)*^de]t6W^o,J&tPq.PX5;gCecY6[[Me
%FVc&2PX%O(k92"V!Q9$*O_.OJrDnSXd=TGh*3D,UO@BQMs0m/'4-nsIFY?#[d$n0],@AY?QZb_#$l!)&]Jg&Vn^r@r1.Hj)s1N\%
%JrC?gl]r;i8>nPn)bduf'/06k0$7BP23n$rKNH]V0GbLDK"egie2Ein+L<<b1ljFZZ_##b%ON=1I?;up;!\<<GcHNEMfX^?A^ioj
%`V!h:mF@5qF7n;`AD'$cobI9'o[L"l;*`0Fb1;d,k^t%g$17<OM^WE7>hW+0-p&LE?>YJYVf5$,90ia1\!4,8>T+hnX/#XbRP\ct
%eCnVPJ.2LQ$cK0@TsWlVY`rc-&FAZ,1@,J>f7pks`RTqYgc<u%:u!#&?siIWc693Sd.W#9Xu0^,n'hrZ@.3hIF@8KqI7TK[qcSSE
%d>'iXW@ed90-kNk^3f,XTm@Xl42MC!p:7[CEP2D'%s2g))0:/&NnB=#N#g;BC*-EZYhs*WWN/s!C.)tcLh1R/DeE=Y6*VZI?uMZq
%A#S!PB_t%-f:"G'f/`uu9^uGlgKURk+)!k"WR9)uO_<_e#tTG/(qMOg3'Ja`jfEs:\0Pl2=0'ESIZ%=A;DG`$ZQodg_M7aPE]O*a
%Ve0]@n"Nd+B`;:6h/O)8kh>`gWaWu`-DL(Y/5Fqg[J&2/"n[/Q\CCKE&IV>H`K8^9B`C&Yese?OeYW=_"ctK&:4^:g5jCbUoue.Q
%_[qeu5]u!US;f+#lVl^AQ`.Z8`JWc3,$>>"V2k8Q/)Q's9MMp/E18a/c@^IFgJ7$%R.uQ!be';d)O#^:i/ou<@B.m+_N"A]$5YcU
%Z677ua=DD?J"96uD3u5W]mrXN@R(QPiIM74)5bi7dCaY*LEQGdJEiJb3,9R8lb2e</Ns[p#%*-uj6[sU]i%2of=A9FL8hHHJ(*WV
%7m^&1qmc:TL5VCC6-7l^U<R3j2]2o>rq.$W+S0Lf1X?]MN9DguZ)'r\oaN:!VSO=X9h:V_^-)'P+_eCh3L,bR?p5g)7ROD;KUFq/
%XKS_c`&/@*KXN'MG6Yq#Hden"MlQ_+>(<`\+fH"LUHK='c*/&n7]uEl3S1T/)iIn-ILhuX@-k>"7EX[$G*']F5)g78UCH"\m)TH>
%h$LGc9@T.o4k=0HXaL9THNt-sl@r%Cr?_qI5[$qr=ASpLqj`SENrZh[WCB8E6^WA2+)3N4*J'Gu;3"J4%-iVYW:oa[)].es)^_Hq
%j@!Tsf"A(3N1WjAmQ?i^D)WD[cjn;=oT15_kqJc7\V5?\#K$kbUKC@T)bO@sKhQ#^SNf6bV:KQa%M9GL-+bs((nj_F@eumq"U9EU
%MG$<!%iBaLCL`J(<$LHN/r52^?ht*M)@8c7]:Ht/1mKQ`9LI]H0D8Pm*U_hlA!/?o4G>H#;3#V\n]=md%HQ8aG\ImDkc;dn3IS;C
%_`jj?3dilLE!uMW`H!Q/Yg5;8rcJSUDT1-X%Jm/MO\,ZjS3K@/,0U^p_o:IYP_P`+d7bhG2n)]pcY2hWW%FV<eeq#:k;FCmk!BLa
%MoX$62$*#+C]jkq"7'@.DST8nL"-W&U51PmCJ\7t]qDR"\i$%'pX7b]W(/XEU5isOd#$[bNd^856>:BY%3o$U\u+M^NUM0^1]fbA
%#cG'H/GX'>h.c6[2nu)pQi-T0-%F1:qr]Q@q%\bdC.Z4qZTU7O-q.PJoWbGoI8JP-@Qk"'5A%b'*4Pcpdh@eh)pY'hQqZ+T9;p=E
%D?5&Z`m^nn3WNa<W%uoBG+'Sg>rl^I[.XIac0.4]E(gP46at5C]k`.nX0deD'bo)rR(1ki!:a(CdJI.N(Rd!&%RUS<KQ"9/ZR'Yj
%'lq/!edfBrh55hWg7oP?H'gR2!rF&9[:iC>@13F<nN+G<=i*P\_(Z<.22rM_RiSl/k*NsS5%tOb`N/%*k=L.P/7(E=Qbr#ZZ$:M@
%qEjEg35'N:c_>D>4o)A`117VF>S\LkHtg;$I8b726M"=_ZFZ\Sp/XVFIN1.UaktZ.=BDHm]jRCaZL'c@Kc_Rnq8!946gZKs<^PB5
%1[%XR,g7#\TfC;q@-oNKR&SH3Q@!;0dG_'BpmW05:q&8<bX=p7c3Y#,:4#&`dC5o(K=c:J#(@Z<oOh\R48l]t;a7$_Sc5-^ga2p0
%j@L/(l6is>o<Sf?G=D8?4:1<0gq'=)+jSct"m-/L@D6`B',?;$'nL6o%5e6Fj^OP[hXe#$kB-3b&'Mo);/Wu.'?%P@UMZ3LA+5e-
%hTDBjiB@4t\4h3**^3.>LoM`-D>,6RDrARncq](+lr,N\l@bsm*^7<i\Be)\erAkHa)6+J8#S\86XdZE3,p7Q$m;TJjrJkZ^]rYt
%0jmX4m5=9#r7o6MXVe8g<OO1&?8HLfd>^9FK'muj/>0[:Z:7B_IA`fOnOhOGJ\LqM;"ss1;eoXqqi@hFCg+7VML0h+fJdq4lY`FV
%lNf#_3d?-Aa>)QKEJ_\FS97iB5MBi?pO[h^7iYdd37H`6_Pp</j1&"rNVbW-TsLp>NHc:momYaSG_82bl1Gg,_GBi]?*?2f-^T.m
%V#kV0-N$Q0fG0GTp#J`+3F,'];cYfenm6&_-T'K4Bf\V:?(o-0i?.#ahX,5Y`3*9s[of2rl%"EcePJ%=:WTCWnWIc`))Ep1-&T`+
%J5tsBbIna4W3_6>4iJ=70&Pb'8d2#"]uD(M8ELf@59'6t02hHJoR_3=XY2,c<c@K8m>R.\];*],(oXC-$*/i<"tYm?o:?87f+0K:
%XV6"H\PJeJXW^QpmV(0:S*(8fn2/DdNVlk.l6#`Tg?]BE/q)5TJ*;;IBr$,c/1(r\]S0c[Y\,)rJsDb@CNB]cH^LlZ<e^cN$\Y@I
%_J=c.2gh!o,?ACjYHCaeeg!:@W7.kmY]*tQoPVr;!JNJ[e't>:WCmQ0a.Al47#g5hCQ1a8_:`5bjEC>Boc%1uScceq8gnmeR`59E
%Ar(SYNnPf$V6p[B/,fC?K[5#=4VXuWOQZdeDbN\UMq2Xa)S%"8][uo11PQCQR.Z%foJiU03f\rg6pdG"_`#@tq_0Kt#PDq4Ub7q<
%YI1j8k+.aQ.okk$j1<a_^/j-SSp+-<06G4;('O7HkBMOZqJ9jfL*rWar><(71[:K#2X>bDZ1+pKcA5s.Q[O75+KUo3_"T2^<q]B#
%H@ZVo^#NM\S-o0ZYFFDb?,=k5&&dOXEXLndc1T9.*+HM]8)#!$`UsIjgD/'s"SN)?E:e0YT68[pjWC^HWnD&rS@hAf"mEWq.#l`Y
%+XVtAA^k@CULC`a_nB^Xlor5`h(i/Q$t^a/Jn&L'o%Ii3bY'9-P_B:]daDW>&+\FnKIfed1R-QpjjffP.4ZSr`&1WD)ok8b*C`?]
%n&eE>$C5%d<Ub%@4[9Tp6m`P!Y\)clhs<uGF6TnE[O(+cX04O8fW`HEFpoPT`tN,li^`f@6QhM(&#UKNN`\e0E<Pf@GI3oU0!:gI
%AC<ldg>6:b;8MiCHu48aTbX";:R5:PaN35;9XXW_&,a&#PgqLI.\f00*"C@CHiD4-/E2;"1)_**eXFn<_>rsZ9=8Xu[P3)5R>rk9
%bU,EY=2o"Rdq5AaKl,TqQ2p%VRl[n&.sFc-*])4IN&j`gTLop6XTk90'*SYL4rBnN-kZ]sTJ-?G/pZUSJ$\*E_s0ZmW!)9&/0bQ:
%'*^mc^^G=G!,bD$C35JDc^O>IEWci2*!)b,X0Y!Q8(^:=bn2e%cG@B)=aD\/7mFC8m?X?M_<TIsF(l8u0HC&8_R,f,/dtc^QE;gi
%'tJ!%Ab6<D^)6t?48K^hbfS&VfHKeAAUAHe[.U/0#o3Vh+Zdhj.QdPJ\soK9&LZ$kU@rDJO>S$"LTj9\4>$&Q(;2f!fc0RDf53f_
%j3.\GL%(1]PJ3q3,4g7ROVG3@Y9XR#rjY[#[1.F`c[_1N=:iqXQiIFnH,H\U%dg$n./fFV*Fn<[M+A(s*FjjdqB-E,Uu7oN&J3o0
%^-6!Y;pJhC$#![\K^tS3YY<1?cK<@gAam'pV\h#/Ko<t/)U_nJ(*4Qi\V>2BNJ4:Pb!fh)bH^R3prkUkJ)J2mAEB!F@Tc$AhC*#n
%-&a3@8)FB*>I<M,7=\f<P,U>Y3h-N0!h^cY6Oob3G!sf9rM6D'&mj9n3ug9g1+"L^>aI$EHpdX5N!bk)ZtObHPsE#o6F(fs,&slr
%@_Mua>J#>960+.ri2L&8,Rig3W<=k&7:`&DdjTRJ3nW\C=;F3`"k>n,SZC#%Eg"[?M/hT&a0Mnt6qHu@DL12MG8AG@4EN`[1e`sB
%*Z7Gs;.t;&CI]4i6:#6eHn:jhV5NtGQ!\!p^UE]K>OsSeB%/f]TU@gdic4'M&%/q<h*Z&<nFh]K>^'(M\Cn!Se<\s-Zch)ra12+c
%$Qm!G1Z%*u=Y(O;HjF:9`@E4:T9fD1qNb!n64Tr#+mVj)@eoj8'%(KeG[4uZ]L)=D?&<Z-bYUXY=gN`L)*=#Sm*cuO61H#\"oCFq
%QS,MhFH8i`dP>,R%?-M"6(,e_i^QDH=28;3$s5km9(2pS'_Y)]*/V]P0Ze,(hVodtC^Idd=LU(Fs47'(C`)I+bI_N\<ZPFXRh+i%
%-2(9pg#g1545ql@=I7=9ZUa@pT!R7lG2\7ho%:A#;6X1JlIT)?*3'NJ9aQWbOCm3].%iU.E3;DXc$dl6dPN*8qHHJYAA<!@E.0t7
%$eK0Ur&.\-8Ldhr88]iB7Yo[M_>\R0X1)MPm(9bm+HrZbBYNn2kWhB&6W"5(da/'=2[Pl[>KLnLN"l%[aN$".^lk6V?'`p+l>2R[
%o[NMm>S&jO4c3aJfBQcD\1Z$10K%DW+SDrPg]sg%<0kl_>sa6eU[`X9o'ZmXI^_u9Xn-;<)rS^Z^@YAYC$'4Ia&&tj_>\^cRQ"\j
%X`_Oil27O\J?U(tZqD91p*P@\)[^6p;\;FCX8b6cW9sn2EFfjS5P:pKRUi_,9qc;26<fQ-92c=G_>8NjUW"R>&[+'dnp)e2)R3uC
%]*1PeO%Lr4l+GI(<'`l%+VPeG0mG5`;!lbY'H(L[hk<-cpU`p\g)aKK48`]pACOun't]Z_'ChNgDe^B+_-9:(Rcqc7eK^V)R_?8J
%'"c)F!$Es_C?`\UL+I8rK8quthZ4MSUksatPJh(,g'rD<(al?;jeD7AOVm1*Otium@K0.?kma*8Y.Z$QaE@l8H.]16U9O$r;&Y8+
%C3SQW-*%SE'$SWfW&^<3/g4q"jLD*@>cU0Z)L_#$PQ>+[;LXk,3Q0H/g:ttQoi=bg[0;O$I$.5>JR[oH>u*FnpbVtn6NQG`73]ks
%`@jTOcBScKe3Z^33/JDR<u]\*OSlPc1BnXHD+Abh%WT1Bp()7b]bsaqXWt'6QJ?iNOm?r%ApS"iJK2_Ho78%nbcP_*e4,Oq=WUVH
%2>8X\FZA].Xi,g<$fBj<&Ob.^g:iWd[8tMR*LB2L>6nOM%J.,:?lkGT9u*hV+(ngk7FLeUMLZHKB7a3_5ZeK/d&";Q85)O`[LW"l
%lB;"!O3Q-cj"7EO*Z6]UDdtnm-5l(+,LP5=a/hg_i=@*Qr3NH8a2'fJ1Frc9e?+l4WCB89LURH^pL92$l7T%:>[PDF=*6P%bJsh4
%LBGbHc?>HJ:>TC8nTRhq`P^Y"!:YApLI6cfHT3"*?,M56m0t!E#:eGOHkOO<e_Xa2cn:J"1pqc"PnPSSdQ."nK=Rs/=Q;J3%/K.6
%ZQ+^DY3([aOnF-imlPnu_hMKkU:mNOd]lW\_u?>^dMk$NII<@0L[KGK^!^;+.Xq"\O?paFrg_EX2>FH_q(/hSV<pC^G;X4#'e7q,
%8g58`[6*^sl6<o-;qp%5H<:0K]tQ,.7jCY.X`q"FkU@B).jT%MJPnN=JLh+HL#hn&Y"t=9V=!JNG_NPOhNkRal!P[VJ?]#[6.,,c
%D'g,4:'mcL:s#6#%ah7^9<W[aTNk6MeaM_);$'<oZ4(AFDhHp6CMqM/>VO\1'%AXmlVOOHd.W#b*&V5BYK^6]9h>Y_BV?Z4hdo/b
%>QTME59Q-&*esTF*:7+i`Hh?,]qH[4ejV.7W*hMn-PG%):bSO0".M8b`n9/!&bfn=Gj'r_mnI9LjUtIr\#IusOFN@erQDf4DdT\,
%F9G8>AVEss\e>?Nk2IB?H5X+$'QFC1m*1pOCF^/A$VuWXJGcPBEqhUB)-s_8H938:@gKH&G#>AQ?6f+CEjQkmG6!^PEVg($)@<b]
%CSLaea#:@t!+hh5\V<\[,FW9UdqHWa8h5301ZX2IBHOW7cH!BF)^YS:R)S`c$6BtjR`'?)lXeR0Y`&*b9^R9.S&Y-BLUbXF8FlKH
%/A(b.)Chq8gdKYBMp[!R^lS,%q*<\0`h5Fq5Ru__I%%G]&h448%5pf+YO@:'E9KJ27`#RfhJ4N].c?41)3&n%I$Jf6\0"Q9)5JJe
%AIs(r08P:/@\r/F3YZ4"8*d`8&(2J@EJQ%Fiu+F?#5-XNUFe*C=9>?FehKacU%V1&K34SKhP[h8Q(e*F[QM_m<#28,/Ij;+4pBN9
%&%8B$R[-9FK"_p7/*jMfkY#>jdAs+J?8IM)ouRj=[CTJfMl"24(%GrciA52LC;!m'dnJ6L2>GGS9pD@KH"-JL=QVaSeV<^H/I>1a
%b:9<3^.gI^?4\iWAQ=.If\gU6XDPu@*mLq-]!l@s-LjESiY(_-%F`In&&Z2%d9D%g7:a[q'XP&(?oM)J)gY*'3&^rnBAl?/G:8;U
%GTITkb);V/peLCHb3JNgkr[!o.]]K!lD='fULs2oq=L6=+1ccEX^5`-/7-c^:IrG0B77$H$46HuQ3eIEU:hkh6n!bP!a82:;GjaK
%Gu3eU<,2n(&!/hU/B-@XhuMX^$u9'+AEuQsq`A(2r#@*gel@QbjZ7`S7(F]g@Pl@F3bW/VMeY=8?((TnOF*#K2YCNNA$tt-^QdKS
%aEd[W/kd0cGj'$7I:tm_ltKQ[+/!\X]D:"om[8Oi>?r@Yh)":V3aPr*\%^DSE-6_ZFjHlLk]gZEgh^?!!Js$jhds;HFa2P[!ph;N
%#hqoN0/o7eo1:'Ji(p-Z)E+)h]dW:;E'W0]4((`>0oQMl3JYN1\8&W5I(L%tL(/n=(%$dmEG@024q%q21nW62d,8=c&$V,3#;Gi:
%C5["8gp"a27CQb)4sL>iU0DVt.uN`s2K-S2I7=drLTWVW'g4QODe*r+U].Gu>s3J>,Zg/J%DEJbNP3"pOcT^V6f3KKJG.\&Q"9LE
%QN^=N<TL"&l8`g^p$/%#@]6b#euJttJN\g";pI)If&TMc=F;9?6FOh!TU?<Fj2dB*o41nT&7M@"XHgu-(TX)SXqUIoZ[pdRKPBc_
%@SpFmMi0'S"en8A&hgsBn+s#PlEhA.gXrhu(XPT268^f[/.(tr#Gc7tb5!-e#6d,&pWCP6YQt$M]i_cB;[n\b]*W<6_P99?(H*##
%'E_2Id1lbiNo@AqU?`"qXi<[dYYlW<>)$+YM#LD\8n4RjBITU_DQ/e-StNn5/"5!kem[f5&@k99+t_#Q:Z]0s=AnJc:SP8Kj[j3t
%hEn%X182NfRX]hin$j\6)$uZ,b:Y73j-NH&ho<Sl^)tkr,@;[Nd*R"k1:l"'=c"d91CRe)]a9M<^S!NeIeGmuQf].a=pOLfLX9po
%"gIJ4^9_NI"XJ*X:0b$[]<[M2:'G_fZA0If<'V8_077CCR0l4K$upNfJsW@J6O86U(SmY*GLD90Z0dV/"aei,C(>^LMocW4;MR'n
%K>XVuA3s2HOU7].E@,(&7O'/D:Zs[`qN?tPl?4Ft=3Tls6<t5+0,[oiDC:$[_$%N_/`*^Lg@Ik9)&c!nU6guR!UZdF/-EA`Z#/03
%\H.E!HA7tsT\E4pTh%98D$UCK)gpZ"*9%InW3;(^a+!J=Y8ufoH''6X,.:l3G^QQ=kelC@'QjU#m>J'(o<mVi$=77>/qgWW2#C6b
%gCUk\<$=rDoe$]7gYVlPpO"'_6\C4(_oeoR!ChLKXAPSk^@3K*9[jB2DJ#m5H)VHdjjBl5>3KSL8t;`XkG:q0Pt.$qBq^H2Z1&<#
%%<hGbiAEHP:dC-\Xh]aQ;+X20WKOM0T,'juEu49iM?%Z0^a(JDX4b;]L"GLT00G#Ap9:7);K+"oih>Jf6XG!kX2"(A$mMCLUo:&2
%gn;1845(KW([!<k[ACP*O>UA"Y,PgW[id7c\O`-u^"fM<54;NM1scd:og9h(eAEg-cnan8J5MpoCXf850>:"F*&Z3@+^QRe5LE0:
%L3TEU?>,/HWoSlNq%M#[J)EZ@^!MSMi^i?(RIFH#30FIV*(b[O,8jqM8<>_@:J0V;,WNaX8;[U?L85V2ecSsZLNFGCA7*0WkZB$5
%?LQP>Y@slfY^mpjU7EEh^EaDY'-nNus)K"aOp2F"8UtL\5(L=F<s2)N5T-\5gb*/LlLLoSN8(21$uK$g.3Fq]X@un`[>OJb>oD@t
%CiV_dm7:RP#;M-\HXTJql?t&T/]%dQOHRWSJ*It,gW%tP!I<kYP+"X-;83i'qi`K#VKo;IXW.H<=DZ&^j`)'3\je4^]JME\\W;YB
%"rm,Nq7V"!cFk'rYHe*nPUKQ=+X9D\Dgb'd-s4?)qp%ZgL:h;ZjgrDI0)!p:%8jVHKF)KX0=/.#bFpAq]f-?.rK\!e>JlnT%hg@:
%Si(O%O+tJ>hSJ]GI/$m<,L*GG\,cEKq?WsD_*T!1-PnA\ahfmeZShp7fhV4J3GUQ-SIB!Ep8'8qe<R#u.uRF`Hl[$5B*6jhb7@o5
%:a4!ObI^3dl0qo4EJ!Rc!B,)X/.s+0JiUa!n5c$cDG<iu,^\Ek.n4JoNDV?siHIk&bNK*E6S_`CmFcMIGO_L4W@gs4P"g=f'Xidn
%L1HcsK>Pe'JpkmpA/G8/L<,[Pd%V!r,jrV0h,:1e]a^-Nmr+OP#u\U@:3\>8+h$?R'\gs!UnA9_U)1U4'[(okPaHtH1ACOqXZ,BO
%)Mc+*)D1#VhO\.\,pBV/b-n3]')4-c(e+tE<=^SknD,:"pj*CRYO7HZRZ/kOiH\$K(O^M+Ls@$sb@9G:nX4GgpTg/l793/!95fcc
%cc0b`%e9[hHpq(2--W;o[s/oMCJq!.:Q<40N(cV'9:/sQ&ZJViP6*d:*n\`#/8gMN<THf:JAC,;\J7]uN)L\B+[3_mY-U$SIF&CS
%:,84F1DL%Z.G>0.n^FllKClY@qW?]^1_-PQdOn03boV(Z1eMpW%\<48KGJ+C&2&dWFbi3K*3?i07.6s9d2q%Al:VfuHW3hnZIpVd
%r@2OgD#'O\p=fZOlB>9:cetmb1noOH8'l+db'a9%%'GZbNHl4@b<<Hc7aFVL;-\E0^@[@0&'E#?Eoj%*oOV9R4MLHH,S/&>cZ8-/
%3M*aWDAVK(q,mNfXuT:P6VSPA6uUW%.X'&+6`n/>Um+[e*f4Ig6]E8_6ZU[O+VKR:.doINgE9WS0Vpj(.%&4ChSg)FN_#2aTiQ,g
%kGA@%%Y+mC\WIqJ[m[%^MeK_.^NF[M]RJcYDh6a^Nq5>:]V(<n&jd<s)Dh2+3J]fbB@!^D0@h,Peo"m!rPcj_D"'VmqJ@f)]U!GC
%YPlG]Z#"GF>PY8#NYjo#PYE`qSgKI_SOp91"SgFjVPDMkan!`rHtBeS0aA_N&PM4d=4pRC0B+FLjjiXfZAQ_e(RB7Xa3Mk6P-cjJ
%1kMf8q/Lq#Dk!*^W@oMnRF(n[kkXOgTA]N<n:?*hNK:=0gC2h'8+uQ_2@UBnk#%)Z/2dqP]2%%75Y$BlP#&mE?IVd(i&?;W4Wc3h
%#B,bu$$p.r)M'U1Q2lh@9X-.%O?!4\`A#^)s0W?agQBh/Z!fiK!6fNF^!3-W!rOaWdmR>4Vj5U>l<eu&e>2OkIti7=eu$u,$8&10
%lWMn*J"Gb[eaW%ng%T!.IA4s7Wkk_R\<s54PTJG1ch+/#TBGT,Rtf7/4tscIRuX`#VT=(HXui#:JSd\4c=#mPfO.n6M\7&![\af_
%N*P-U`Y"f'^msE$\.,<H%3([5.b^&"mRS&cm*W0kbXh"JSrqO+@7a3%\APAT^=j6,D]cX@/2j;4$@H4PZRsV@)#h;Q&?K=ZHlE""
%!t_OX.]`[_m-@aWX-a*`L-P/<>t%^p"^dY"X!`jtA=M7r0a7QMrq%*G#N,fU1-h#.TL+G<IGDZ2hOo(h(H!*O's,aR>tEcl<c'&+
%+njr?'VQa1'^Xfja:fFsWSRj$*GRN]N#+TBpRWq\&ZXAICp\H2+]jCflG6E0p@oG[01f7`3'MllOP;7r7j>O8qHQjlRbF\'pV<CX
%0\h%jM-QY:VWokaE*h4pfA=!eq!gdqNjLK.Gj(8*Q@Tu]7sL\'&6$B#<MY=[8;:^6L=["Y-ksT60Obc"@[clU:"t!g8#+%W:#eDR
%1GbG!#j,U\Id7#8c\u\$r<#'+$as;V8b1BdEk)7iiFa.D&@`aq`;q?5?%6Tdp_b7o$W<>rSe8p?'r3S&Z$%*=cmGMqP6Ti"XPTr-
%#/+6BSa24<G7B;1N\"8Z7N<%#(!r78,L)c_S"8!kc5b2?k*NpW):iqVCon_PBs@H@T0ielObsQQ#9\=5W/)W9%<7H[+bQ)cKpE=,
%?AC$$O@E1(UK)i?(<$].gS]=W3s58/RH3O#Prpgck`Gqj[j>7\8,]n)4rup&<RV+FPT/ka989Eo[T.Jo]/2enaNMChpZ31Wh+9m>
%j@/DY1+h41[=\AAn)=WDC)uY_T1eLG+GDBlp(2epi&/X\EVC(AoobgX[m5udMPk(Hr;P:[[Cdi`hW?[M#??\5gcVOh*2;h3+L`Ch
%D%RG!'iAfcH>OOmm:@D!$MZN5Kj2NWRnj'<$9pt9=jNN-^0?Ak:CC4=/\<fZQ#8pn,Q._]l7mBO4A5Q2"7K,(\pW<,Xb]%N(oOao
%"?Xel#a-&0m:@\h=rJCtjq(Nbi2+.Z?.O(TiucfbM#=E_(IBce:99%0oq94SWtc;0HM<On=cfrea@>RH*FG)S86[6lh#X)DR&;3X
%fVsU4(kLkToVW]5FR4#J4bqbE8#UWdK0(%gpFe',3Gh'I;RH_:%_5ID"cF\S-?0Mm[1(dP\[:4LWO8qu-8;'<oLTEOdT!%P7IPgd
%gJrB`Q*(fX>G=S`I2@-bqS]>ahe[t=gu942=HSUb)TNYZ1bY\KXeoKgFT4h/frTjM/%F+Yoq[Mb&Oc:)C)K*8>l@0SUKjug;D0*Q
%66CG<`!3Vi$'$VAU#(jRUn-6d$<6Fo\1qgOE494sH.m[g1sVl;o6u_h3CFYM&O)N^6XN>!V%BG$T[Hi%cXer[<QNNgO[U]!knKt9
%(!a2B:?F(aO,k81?8u:CY(s'YA?GLkmskALTDn7#e%bn@O8nqIoDed[gXiVDq!"E#rq2V-q<dAFr3'IVqu,u4rU\A8o?3Jms7jW!
%rT34Wr:8b<T>(7"gFn'UbFa7\jia:rj%o[_"@)09q!"\@r6mn.rceAQ0$@+R~>
%AI9_PrivateDataEnd
