%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: plata_57.eps
%%Creator: Adobe Illustrator(R) 19.1
%%For: user
%%CreationDate: 4/12/2016
%%BoundingBox: 0 0 1200 1201
%%HiResBoundingBox: 0 0 1200 1200.0030
%%CropBox: 0 0 1200 1200.0030
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.1.0 x29 R agm 4.7731 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c067 79.157747, 2015/03/30-23:40:42        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">plata_57</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:creator>
            <rdf:Seq>
               <rdf:li>Iryna</rdf:li>
            </rdf:Seq>
         </dc:creator>
         <dc:description>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Abstract vector background with high tech circuit board</rdf:li>
            </rdf:Alt>
         </dc:description>
         <dc:subject>
            <rdf:Bag>
               <rdf:li>circuit</rdf:li>
               <rdf:li>vector</rdf:li>
               <rdf:li>backgrounds</rdf:li>
               <rdf:li>pattern</rdf:li>
               <rdf:li>tech</rdf:li>
               <rdf:li>processor</rdf:li>
               <rdf:li>abstract</rdf:li>
               <rdf:li>abstraction</rdf:li>
               <rdf:li>chip</rdf:li>
               <rdf:li>card</rdf:li>
               <rdf:li>high</rdf:li>
               <rdf:li>design</rdf:li>
               <rdf:li>electrical equipment</rdf:li>
               <rdf:li>integrated</rdf:li>
               <rdf:li>technical</rdf:li>
               <rdf:li>computer part</rdf:li>
               <rdf:li>hardware</rdf:li>
               <rdf:li>engineering</rdf:li>
               <rdf:li>line</rdf:li>
               <rdf:li>cyberspace</rdf:li>
               <rdf:li>computer equipment</rdf:li>
               <rdf:li>graphic</rdf:li>
               <rdf:li>electronics industry</rdf:li>
               <rdf:li>digital</rdf:li>
               <rdf:li>technology</rdf:li>
               <rdf:li>computer</rdf:li>
               <rdf:li>circuit board</rdf:li>
               <rdf:li>illustration</rdf:li>
               <rdf:li>creativity</rdf:li>
               <rdf:li>connection</rdf:li>
               <rdf:li>computing</rdf:li>
               <rdf:li>backdrop</rdf:li>
               <rdf:li>science</rdf:li>
               <rdf:li>cover</rdf:li>
               <rdf:li>internal</rdf:li>
               <rdf:li>connect</rdf:li>
               <rdf:li>art</rdf:li>
               <rdf:li>industry</rdf:li>
               <rdf:li>conceptual</rdf:li>
               <rdf:li>construction</rdf:li>
               <rdf:li>textured</rdf:li>
               <rdf:li>computer chip</rdf:li>
               <rdf:li>mother board</rdf:li>
            </rdf:Bag>
         </dc:subject>
         <xmp:MetadataDate>2016-04-12T14:19:58+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2016-04-12T14:19:58+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2016-04-12T14:19:58+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A8qYq7FXo/wCXf+8Vv/xn&#xA;H/Es2ui5D3vKdufWf6v6Fv5ROyrrApWNhBzHyEpH6sHZp+r4fpT7TAE4+/1f71AefCDpFgw6Nqms&#xA;mv8Az2hyvWfSP60/vDk9jf3s/wDhWH/cyYTmvehT7RmUeWfMIJoWS1C+5+sA/wAMycX93P4fe63V&#xA;D/CMPvn/ALlIcxnZOxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KppoOtvpdw4dBcWFyvp31&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:2bd6127f-65e1-a541-a75a-d0465753e456</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:2bd6127f-65e1-a541-a75a-d0465753e456</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:5366cf3f-37f3-49f5-af92-396ab55fe875</stRef:instanceID>
            <stRef:documentID>xmp.did:89E6648A4F6BE51194FFADFDE0B012D7</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F07763D45588E411BF89F345A28D8C9F</stEvt:instanceID>
                  <stEvt:when>2014-12-20T17:10:37+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:24845C695A88E411BF89F345A28D8C9F</stEvt:instanceID>
                  <stEvt:when>2014-12-20T17:11:02+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:28845C695A88E411BF89F345A28D8C9F</stEvt:instanceID>
                  <stEvt:when>2014-12-20T17:18:19+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4465C60ACE89E4119A65C8F5B8A1FEA0</stEvt:instanceID>
                  <stEvt:when>2014-12-22T13:47:05+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4A65C60ACE89E4119A65C8F5B8A1FEA0</stEvt:instanceID>
                  <stEvt:when>2014-12-22T14:37:09+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:A101F49FD789E4119A65C8F5B8A1FEA0</stEvt:instanceID>
                  <stEvt:when>2014-12-22T14:42:42+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:A201F49FD789E4119A65C8F5B8A1FEA0</stEvt:instanceID>
                  <stEvt:when>2014-12-22T14:48:24+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:A901F49FD789E4119A65C8F5B8A1FEA0</stEvt:instanceID>
                  <stEvt:when>2014-12-22T15:19:58+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:89E6648A4F6BE51194FFADFDE0B012D7</stEvt:instanceID>
                  <stEvt:when>2015-10-05T14:25+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:2bd6127f-65e1-a541-a75a-d0465753e456</stEvt:instanceID>
                  <stEvt:when>2016-04-12T14:19:58+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>1200.000000</stDim:w>
            <stDim:h>1200.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1200 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1200 li
1200 1200 li
1200 0 li
cp
clp
1200 1200 mo
0 1200 li
0 .00293 li
1200 .00293 li
1200 1200 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
0 0 0 rgb
f
631.021 945.453 mo
630.087 945.096 629.156 944.724 628.231 944.343 cv
571.356 957.573 509.652 934.994 475.805 883.396 cv
432.467 817.326 450.959 728.318 517.028 684.98 cv
577.866 645.074 658.151 657.598 704.321 711.418 cv
705.25 711.606 706.177 711.808 707.1 712.017 cv
660.617 656.085 578.295 642.707 516.07 683.523 cv
449.199 727.388 430.481 817.48 474.346 884.351 cv
509.08 937.303 572.798 960.051 631.021 945.453 cv
cp
.376471 .788235 .901961 rgb
f
649.729 661.694 mo
649.729 663.538 li
704.519 683.684 743.707 736.395 743.707 798.087 cv
743.707 877.099 679.426 941.382 600.412 941.382 cv
527.655 941.382 467.391 886.874 458.304 816.549 cv
457.632 815.881 456.967 815.206 456.31 814.523 cv
464.499 886.786 525.996 943.125 600.412 943.125 cv
680.387 943.125 745.451 878.062 745.451 798.087 cv
745.451 735.42 705.497 681.922 649.729 661.694 cv
cp
f
658.06 657.339 mo
710.945 676.784 749.284 726.572 751.888 785.49 cv
753.633 785.49 li
751.047 726.222 712.711 676.095 659.712 656.13 cv
659.902 644.627 li
658.158 644.608 li
657.959 655.76 li
657.956 657.219 li
658.06 657.219 li
658.06 657.339 li
cp
f
653.991 660.438 mo
705.944 679.541 743.846 727.932 747.634 785.49 cv
749.38 785.49 li
745.615 727.575 707.711 678.839 655.631 659.226 cv
655.641 644.811 li
653.896 644.811 li
653.887 660.317 li
653.991 660.317 li
653.991 660.438 li
cp
f
446.292 770.821 mo
456.258 715.362 498.632 668.958 556.203 656.164 cv
555.898 654.445 li
497.98 667.286 455.272 713.742 444.815 769.405 cv
437.29 770.79 li
437.575 772.51 li
444.755 771.195 li
446.193 770.943 li
446.174 770.843 li
446.292 770.821 li
cp
f
450.052 774.291 mo
459.842 719.808 500.915 674.079 556.941 660.352 cv
556.638 658.633 li
500.257 672.398 458.843 718.191 448.573 772.886 cv
438.212 774.956 li
438.515 776.674 li
449.952 774.414 li
449.934 774.312 li
450.052 774.291 li
cp
f
749.158 743.83 mo
750.993 743.83 li
743.455 720.621 730.194 699.888 712.821 683.372 cv
710.295 683.372 li
727.974 699.767 741.489 720.525 749.158 743.83 cv
cp
f
492.762 915.945 mo
492.026 917.626 li
473.811 901.387 460.165 880.902 452.036 858.355 cv
453.053 856.042 li
460.948 878.822 474.514 899.548 492.762 915.945 cv
cp
f
1089.07 319.623 mo
1072.47 300.786 1051.6 288.37 1029.29 280.134 cv
1026.57 286.566 li
1048.04 294.377 1068.21 306.015 1084.45 323.743 cv
1089.07 319.623 li
cp
f
821.584 452.079 mo
824.806 476.976 835.163 498.941 849.052 518.246 cv
854.907 514.438 li
841.474 495.952 831.263 475.023 827.718 451.246 cv
821.584 452.079 li
cp
f
220.821 664.559 mo
300.793 664.961 365.531 730.35 365.132 810.322 cv
364.729 890.299 299.34 955.035 219.367 954.635 cv
139.393 954.233 74.6543 888.843 75.0557 808.869 cv
75.4561 728.897 140.847 664.159 220.821 664.559 cv
cp
86.6533 743.271 mo
76.46 763.744 71.2314 785.809 71.1152 808.852 cv
70.8901 853.816 90.6895 896.022 125.437 924.647 cv
134.499 932.114 144.435 938.496 154.96 943.621 cv
160.891 946.511 167.07 949.022 173.318 951.086 cv
188.124 955.977 203.608 958.496 219.347 958.574 cv
301.493 958.985 368.658 892.49 369.07 810.343 cv
369.482 728.197 302.987 661.031 220.841 660.619 cv
163.602 660.333 112.185 692.001 86.6533 743.271 cv
cp
f
220.879 653.19 mo
307.12 653.623 376.932 724.139 376.499 810.381 cv
376.067 896.623 305.553 966.435 219.31 966 cv
202.789 965.919 186.534 963.275 170.998 958.143 cv
164.431 955.973 157.943 953.338 151.719 950.307 cv
140.667 944.928 130.237 938.225 120.722 930.385 cv
84.2383 900.334 63.4512 856.024 63.6875 808.813 cv
63.8091 784.626 69.2974 761.463 79.9985 739.97 cv
92.8389 714.187 112.539 692.439 136.973 677.081 cv
139.849 675.274 142.781 673.576 145.757 671.967 cv
144.976 670.963 144.128 669.863 143.229 668.694 cv
114.977 684.076 91.5283 707.972 76.4663 738.225 cv
65.4976 760.259 59.8726 783.999 59.748 808.792 cv
59.5059 857.193 80.8174 902.622 118.22 933.43 cv
127.98 941.468 138.672 948.338 150.004 953.855 cv
156.386 956.962 163.036 959.664 169.767 961.888 cv
185.696 967.147 202.356 969.856 219.29 969.942 cv
307.706 970.385 379.996 898.814 380.438 810.399 cv
380.881 721.984 309.311 649.694 220.897 649.252 cv
218.632 649.24 216.378 649.29 214.13 649.37 cv
214.175 653.314 li
216.404 653.232 218.638 653.181 220.879 653.19 cv
cp
f
123.657 926.906 mo
132.932 934.548 143.097 941.077 153.865 946.32 cv
159.933 949.273 166.253 951.842 172.653 953.956 cv
187.79 958.954 203.627 961.53 219.72 961.61 cv
303.752 962.032 372.463 894.009 372.884 809.977 cv
373.304 725.941 305.281 657.23 221.247 656.811 cv
219.113 656.799 216.985 656.847 214.858 656.925 cv
214.876 658.563 li
216.99 658.484 219.109 658.438 221.239 658.449 cv
304.369 658.866 371.66 726.838 371.245 809.967 cv
370.826 893.097 302.858 960.389 219.727 959.972 cv
203.806 959.892 188.14 957.344 173.165 952.399 cv
166.837 950.308 160.585 947.766 154.582 944.846 cv
143.93 939.659 133.875 933.199 124.699 925.643 cv
89.5322 896.676 69.4951 853.963 69.7231 808.456 cv
69.8413 785.145 75.1279 762.821 85.439 742.105 cv
99.6035 713.659 121.649 691.192 148.214 676.73 cv
147.912 676.336 147.602 675.936 147.292 675.527 cv
144.653 676.976 142.044 678.483 139.488 680.09 cv
115.678 695.058 96.4824 716.248 83.9736 741.375 cv
73.5474 762.317 68.2021 784.883 68.0825 808.446 cv
67.8521 854.45 88.1084 897.625 123.657 926.906 cv
cp
f
1029.39 947.231 mo
1028.46 946.874 1027.53 946.502 1026.6 946.121 cv
969.727 959.352 908.024 936.772 874.175 885.174 cv
830.837 819.105 849.33 730.097 915.399 686.759 cv
976.235 646.853 1056.52 659.376 1102.69 713.195 cv
1103.62 713.385 1104.55 713.586 1105.47 713.795 cv
1058.99 657.863 976.667 644.485 914.44 685.301 cv
847.57 729.166 828.852 819.258 872.718 886.129 cv
907.451 939.08 971.169 961.829 1029.39 947.231 cv
cp
f
823.138 805.048 mo
821.221 742.793 856.427 682.915 915.761 655.905 cv
915.036 654.118 li
855.342 681.256 819.783 741.268 821.214 803.853 cv
813.391 807.074 li
814.096 808.869 li
821.559 805.805 li
823.056 805.202 li
823.013 805.1 li
823.138 805.048 li
cp
f
827.995 807.939 mo
826.115 746.78 860.069 687.927 917.516 660.266 cv
916.793 658.474 li
858.971 686.263 824.665 745.262 826.071 806.759 cv
815.344 811.369 li
816.063 813.158 li
827.915 808.097 li
827.871 807.99 li
827.995 807.939 li
cp
f
998.242 650.578 mo
1084.41 654.076 1151.67 727.029 1148.17 813.202 cv
1144.68 899.373 1071.72 966.634 985.553 963.135 cv
969.044 962.465 952.894 959.244 937.551 953.563 cv
931.065 951.162 924.676 948.298 918.563 945.047 cv
907.708 939.278 897.523 932.209 888.293 924.036 cv
852.9 892.707 833.703 847.686 835.617 800.513 cv
836.599 776.346 842.907 753.393 854.365 732.294 cv
868.114 706.983 888.574 685.949 913.54 671.47 cv
916.477 669.766 919.468 668.174 922.5 666.672 cv
921.755 665.641 920.946 664.511 920.091 663.311 cv
891.309 677.68 867.024 700.726 850.898 730.425 cv
839.151 752.053 832.686 775.581 831.68 800.353 cv
829.719 848.714 849.401 894.872 885.684 926.99 cv
895.153 935.369 905.594 942.617 916.723 948.532 cv
922.99 951.863 929.539 954.801 936.188 957.264 cv
951.918 963.085 968.472 966.385 985.394 967.072 cv
1073.74 970.657 1148.52 901.703 1152.11 813.361 cv
1155.7 725.017 1086.74 650.228 998.4 646.642 cv
996.137 646.549 993.883 646.52 991.634 646.52 cv
991.536 650.464 li
993.769 650.46 996.003 650.486 998.242 650.578 cv
cp
f
891.35 920.664 mo
900.347 928.631 910.273 935.518 920.849 941.14 cv
926.808 944.307 933.032 947.098 939.354 949.438 cv
954.302 954.972 970.039 958.109 986.118 958.761 cv
1070.08 962.171 1141.17 896.633 1144.58 812.668 cv
1147.98 728.702 1082.45 657.617 998.48 654.209 cv
996.348 654.121 994.221 654.093 992.093 654.096 cv
992.052 655.732 li
994.168 655.73 996.286 655.76 998.415 655.846 cv
1081.48 659.218 1146.31 729.537 1142.94 812.602 cv
1139.57 895.663 1069.25 960.496 986.184 957.124 cv
970.275 956.479 954.711 953.376 939.921 947.901 cv
933.67 945.585 927.512 942.823 921.619 939.691 cv
911.157 934.13 901.339 927.316 892.438 919.438 cv
858.321 889.239 839.816 845.841 841.663 800.371 cv
842.606 777.08 848.686 754.957 859.727 734.622 cv
874.894 706.696 897.724 685.029 924.786 671.519 cv
924.499 671.114 924.203 670.703 923.908 670.284 cv
921.22 671.637 918.558 673.052 915.944 674.566 cv
891.619 688.678 871.682 709.173 858.287 733.841 cv
847.124 754.397 840.978 776.759 840.023 800.304 cv
838.156 846.271 856.865 890.139 891.35 920.664 cv
cp
f
720.076 534.611 mo
706.244 552.551 688.522 567.114 668.141 577.294 cv
669.806 580.87 li
691.393 570.127 709.685 554.876 723.754 536.502 cv
722.197 535.687 720.932 535.032 720.076 534.611 cv
cp
f
725.191 537.261 mo
710.721 556.293 692.06 571.728 670.539 582.45 cv
672.205 586.026 li
694.943 574.739 714.153 558.628 728.846 539.201 cv
727.542 538.507 726.315 537.855 725.191 537.261 cv
cp
f
704.775 329.003 mo
688.178 310.166 667.31 297.751 644.999 289.514 cv
642.274 295.946 li
663.749 303.758 683.918 315.396 700.156 333.124 cv
704.775 329.003 li
cp
f
437.29 461.459 mo
440.514 486.357 450.87 508.322 464.757 527.626 cv
470.614 523.818 li
457.181 505.333 446.97 484.404 443.423 460.627 cv
437.29 461.459 li
cp
f
591.188 579.272 mo
512.176 579.272 447.894 514.989 447.894 435.976 cv
447.894 356.963 512.176 292.681 591.188 292.681 cv
670.202 292.681 734.483 356.963 734.483 435.976 cv
734.483 514.989 670.202 579.272 591.188 579.272 cv
cp
591.188 290.937 mo
511.214 290.937 446.15 356.002 446.15 435.976 cv
446.15 515.951 511.214 581.016 591.188 581.016 cv
671.163 581.016 736.227 515.951 736.227 435.976 cv
736.227 356.002 671.163 290.937 591.188 290.937 cv
cp
f
731.63 504.899 mo
742.225 483.353 747.596 460.164 747.596 435.976 cv
747.596 388.765 726.586 344.558 689.954 314.692 cv
680.397 306.899 669.935 300.249 658.857 294.926 cv
652.617 291.926 646.116 289.322 639.54 287.187 cv
623.977 282.132 607.708 279.569 591.188 279.569 cv
504.945 279.569 434.781 349.733 434.781 435.976 cv
434.781 522.219 504.945 592.384 591.188 592.384 cv
593.427 592.384 595.662 592.321 597.892 592.227 cv
597.862 590.485 li
595.646 590.578 593.423 590.64 591.188 590.64 cv
505.906 590.64 436.525 521.259 436.525 435.976 cv
436.525 350.695 505.906 281.313 591.188 281.313 cv
607.526 281.313 623.613 283.848 639.002 288.844 cv
645.505 290.958 651.932 293.531 658.102 296.497 cv
669.056 301.762 679.401 308.338 688.852 316.043 cv
725.075 345.577 745.852 389.292 745.852 435.976 cv
745.852 459.895 740.54 482.825 730.064 504.129 cv
715.541 533.668 692.743 556.995 665.21 571.953 cv
665.529 572.357 665.865 572.784 666.215 573.231 cv
669.181 571.608 672.105 569.896 674.974 568.073 cv
699.33 552.593 718.92 530.747 731.63 504.899 cv
cp
f
477.775 551.859 mo
476.504 553.051 li
493.402 570.156 513.885 583.071 536.482 590.886 cv
536.579 590.326 536.67 589.791 536.754 589.282 cv
514.907 581.645 494.715 569.021 477.775 551.859 cv
cp
f
743.844 385.446 mo
745.522 384.977 li
738.462 361.993 726.287 341.062 709.873 323.675 cv
709.527 324.126 709.201 324.558 708.89 324.97 cv
724.719 341.854 736.775 362.391 743.844 385.446 cv
cp
f
576.229 276.709 mo
576.138 274.97 li
552.167 276.832 529.08 284.136 508.522 296.348 cv
508.888 296.783 509.238 297.199 509.571 297.592 cv
529.509 285.838 552.185 278.566 576.229 276.709 cv
cp
f
575.938 271.03 mo
575.847 269.291 li
550.641 271.225 526.382 278.975 504.834 291.94 cv
505.184 292.361 505.527 292.772 505.868 293.18 cv
526.773 280.685 550.626 272.96 575.938 271.03 cv
cp
f
575.881 270.883 mo
574.332 270.883 li
574.332 260.806 li
575.881 260.806 li
575.881 270.883 li
cp
f
506.981 292.248 mo
505.711 293.137 li
499.936 284.878 li
501.206 283.99 li
506.981 292.248 li
cp
f
716.646 332.729 mo
715.659 331.533 li
723.428 325.112 li
724.413 326.306 li
716.646 332.729 li
cp
f
720.551 337.423 mo
719.563 336.228 li
727.328 329.807 li
728.316 331.001 li
720.551 337.423 li
cp
f
228.961 589.129 mo
228.989 590.871 li
253.012 589.851 276.339 583.36 297.313 571.876 cv
296.963 571.429 296.628 571.002 296.308 570.597 cv
275.972 581.645 253.054 588.116 228.961 589.129 cv
cp
f
75.458 419.514 mo
75.458 499.489 140.523 564.554 220.498 564.554 cv
300.472 564.554 365.537 499.489 365.537 419.514 cv
365.537 343.098 306.132 280.3 231.078 274.863 cv
231.064 276.609 li
305.162 282.037 363.793 344.055 363.793 419.514 cv
363.793 498.527 299.51 562.81 220.498 562.81 cv
141.485 562.81 77.2026 498.527 77.2026 419.514 cv
77.2026 362.073 111.183 312.426 160.091 289.594 cv
159.457 287.964 li
109.898 311.053 75.458 361.334 75.458 419.514 cv
cp
f
69.7749 419.514 mo
69.7749 502.624 137.388 570.237 220.498 570.237 cv
249.204 570.237 277.122 562.137 301.233 546.812 cv
324.704 531.896 343.583 510.846 355.831 485.938 cv
366.042 465.172 371.221 442.824 371.221 419.514 cv
371.221 374.02 350.976 331.42 315.677 302.641 cv
306.468 295.131 296.386 288.723 285.714 283.593 cv
279.698 280.7 273.435 278.191 267.1 276.134 cv
255.449 272.349 243.388 270.034 231.125 269.18 cv
231.11 270.926 li
243.195 271.776 255.081 274.063 266.561 277.791 cv
272.822 279.825 279.012 282.306 284.958 285.165 cv
295.507 290.235 305.472 296.569 314.576 303.992 cv
349.467 332.44 369.477 374.546 369.477 419.514 cv
369.477 442.555 364.36 464.644 354.266 485.168 cv
328.994 536.565 277.736 568.493 220.498 568.493 cv
138.35 568.493 71.5186 501.662 71.5186 419.514 cv
71.5186 359.665 106.998 307.953 158.025 284.286 cv
157.39 282.658 li
105.714 306.582 69.7749 358.925 69.7749 419.514 cv
cp
f
64.0898 419.514 mo
64.0898 505.757 134.253 575.922 220.497 575.922 cv
250.286 575.922 279.259 567.516 304.282 551.611 cv
328.638 536.13 348.229 514.286 360.939 488.436 cv
371.533 466.89 376.904 443.7 376.904 419.514 cv
376.904 372.304 355.895 328.097 319.263 298.23 cv
309.707 290.438 299.245 283.788 288.165 278.464 cv
281.925 275.464 275.425 272.86 268.848 270.725 cv
256.651 266.763 244.016 264.356 231.17 263.49 cv
231.157 265.235 li
243.824 266.098 256.282 268.477 268.31 272.383 cv
274.814 274.495 281.24 277.069 287.41 280.035 cv
298.366 285.3 308.712 291.877 318.162 299.582 cv
354.385 329.116 375.161 372.829 375.161 419.514 cv
375.161 443.431 369.849 466.362 359.374 487.666 cv
333.138 541.028 279.923 574.178 220.497 574.178 cv
135.215 574.178 65.8335 504.797 65.8335 419.514 cv
65.8335 357.256 102.814 303.482 155.957 278.978 cv
155.324 277.35 li
101.53 302.109 64.0898 356.518 64.0898 419.514 cv
cp
f
322.85 293.821 mo
312.945 285.745 302.1 278.853 290.618 273.335 cv
284.15 270.227 277.414 267.528 270.597 265.314 cv
257.85 261.175 244.643 258.677 231.216 257.799 cv
231.202 259.546 li
244.45 260.419 257.48 262.89 270.058 266.973 cv
276.801 269.163 283.465 271.832 289.862 274.906 cv
301.221 280.365 311.949 287.183 321.749 295.172 cv
359.305 325.791 380.845 371.113 380.845 419.514 cv
380.845 444.307 375.339 468.077 364.481 490.164 cv
337.282 545.491 282.109 579.862 220.497 579.862 cv
132.081 579.862 60.1494 507.931 60.1494 419.514 cv
60.1494 354.849 98.6294 299.008 153.891 273.671 cv
153.257 272.043 li
97.3467 297.637 58.4058 354.111 58.4058 419.514 cv
58.4058 508.892 131.12 581.606 220.497 581.606 cv
251.37 581.606 281.396 572.893 307.33 556.409 cv
332.572 540.365 352.875 517.724 366.045 490.934 cv
377.022 468.605 382.588 444.576 382.588 419.514 cv
382.588 370.585 360.815 324.772 322.85 293.821 cv
cp
f
158.025 284.286 mo
159.457 287.964 li
178.022 279.316 198.704 274.475 220.498 274.475 cv
224.056 274.475 227.583 274.61 231.078 274.863 cv
231.11 270.926 li
227.587 270.677 224.049 270.535 220.498 270.535 cv
198.2 270.535 177.035 275.469 158.025 284.286 cv
cp
f
153.891 273.671 mo
155.324 277.35 li
175.175 268.213 197.249 263.107 220.497 263.107 cv
224.069 263.107 227.625 263.251 231.17 263.49 cv
231.202 259.546 li
227.647 259.311 224.079 259.168 220.497 259.168 cv
196.745 259.168 174.187 264.365 153.891 273.671 cv
cp
f
155.957 278.978 mo
157.39 282.658 li
176.599 273.764 197.976 268.791 220.498 268.791 cv
224.054 268.791 227.596 268.934 231.125 269.18 cv
231.157 265.235 li
227.617 264.995 224.065 264.851 220.497 264.851 cv
197.472 264.851 175.611 269.916 155.957 278.978 cv
cp
f
975.481 567.566 mo
896.471 567.566 832.185 503.283 832.185 424.271 cv
832.185 345.257 896.471 280.975 975.481 280.975 cv
1054.5 280.975 1118.78 345.257 1118.78 424.271 cv
1118.78 503.283 1054.5 567.566 975.481 567.566 cv
cp
975.481 279.231 mo
895.507 279.231 830.442 344.296 830.442 424.271 cv
830.442 504.245 895.507 569.31 975.481 569.31 cv
1055.46 569.31 1120.52 504.245 1120.52 424.271 cv
1120.52 344.296 1055.46 279.231 975.481 279.231 cv
cp
f
1115.92 493.193 mo
1126.52 471.647 1131.89 448.458 1131.89 424.271 cv
1131.89 377.059 1110.88 332.852 1074.25 302.986 cv
1064.69 295.193 1054.23 288.543 1043.15 283.22 cv
1036.91 280.22 1030.41 277.617 1023.83 275.481 cv
1008.27 270.426 992.001 267.864 975.481 267.864 cv
889.237 267.864 819.075 338.027 819.075 424.271 cv
819.075 510.513 889.237 580.678 975.481 580.678 cv
977.721 580.678 979.955 580.615 982.185 580.521 cv
982.156 578.779 li
979.939 578.872 977.716 578.935 975.481 578.935 cv
890.201 578.935 820.819 509.553 820.819 424.271 cv
820.819 338.989 890.201 269.607 975.481 269.607 cv
991.819 269.607 1007.91 272.142 1023.3 277.139 cv
1029.8 279.251 1036.22 281.825 1042.39 284.791 cv
1053.35 290.056 1063.69 296.632 1073.15 304.337 cv
1109.37 333.871 1130.15 377.585 1130.15 424.271 cv
1130.15 448.188 1124.83 471.119 1114.36 492.423 cv
1099.83 521.962 1077.04 545.29 1049.5 560.247 cv
1049.82 560.651 1050.16 561.078 1050.51 561.525 cv
1053.47 559.902 1056.4 558.189 1059.27 556.368 cv
1083.62 540.888 1103.21 519.042 1115.92 493.193 cv
cp
f
1077.83 298.577 mo
1067.93 290.501 1057.08 283.609 1045.6 278.091 cv
1039.13 274.982 1032.4 272.284 1025.58 270.071 cv
1009.46 264.834 992.6 262.18 975.481 262.18 cv
886.103 262.18 813.391 334.894 813.391 424.271 cv
813.391 513.648 886.103 586.362 975.481 586.362 cv
977.753 586.362 980.016 586.299 982.276 586.207 cv
982.248 584.465 li
980.001 584.557 977.748 584.618 975.481 584.618 cv
887.066 584.618 815.135 512.687 815.135 424.271 cv
815.135 335.855 887.066 263.924 975.481 263.924 cv
992.417 263.924 1009.09 266.55 1025.04 271.728 cv
1031.79 273.918 1038.45 276.588 1044.85 279.663 cv
1056.21 285.122 1066.93 291.939 1076.73 299.928 cv
1114.29 330.548 1135.83 375.869 1135.83 424.271 cv
1135.83 449.063 1130.32 472.833 1119.47 494.92 cv
1104.56 525.25 1081.23 549.262 1053.05 564.786 cv
1053.38 565.204 1053.71 565.627 1054.04 566.061 cv
1056.84 564.507 1059.6 562.889 1062.31 561.166 cv
1087.56 545.122 1107.86 522.48 1121.03 495.689 cv
1132.01 473.361 1137.57 449.332 1137.57 424.271 cv
1137.57 375.342 1115.8 329.529 1077.83 298.577 cv
cp
f
1070.66 307.396 mo
1061.46 299.889 1051.37 293.48 1040.7 288.349 cv
1034.68 285.457 1028.42 282.947 1022.09 280.89 cv
1007.08 276.018 991.404 273.547 975.481 273.547 cv
892.373 273.547 824.759 341.161 824.759 424.271 cv
824.759 507.38 892.373 574.994 975.481 574.994 cv
977.691 574.994 979.894 574.929 982.092 574.834 cv
982.092 573.091 li
979.899 573.185 977.695 573.25 975.481 573.25 cv
893.334 573.25 826.503 506.418 826.503 424.271 cv
826.503 342.123 893.334 275.292 975.481 275.292 cv
991.221 275.292 1006.72 277.732 1021.55 282.547 cv
1027.81 284.581 1034 287.062 1039.94 289.921 cv
1050.5 294.993 1060.46 301.327 1069.56 308.747 cv
1104.45 337.196 1124.46 379.302 1124.46 424.271 cv
1124.46 447.312 1119.34 469.402 1109.25 489.927 cv
1095.11 518.694 1072.82 541.358 1045.9 555.743 cv
1045.83 555.778 1046.38 556.379 1046.92 557.022 cv
1050.07 555.319 1053.18 553.503 1056.22 551.569 cv
1079.69 536.653 1098.57 515.604 1110.82 490.696 cv
1121.03 469.93 1126.2 447.581 1126.2 424.271 cv
1126.2 378.777 1105.96 336.176 1070.66 307.396 cv
cp
f
19.3926 1115.92 mo
19.3916 1115.83 19.3086 1107.48 19.3945 1098.73 cv
19.4014 1098.08 19.3848 1097.42 19.3682 1096.78 cv
19.2627 1092.55 19.3945 1090.34 23.415 1090.13 cv
24.7549 1090.06 li
27.9951 1089.89 34.0283 1089.58 35.3457 1089.45 cv
42.8838 1088.73 45.6826 1084.66 46.7217 1081.88 cv
45.251 1081.63 li
44.3018 1084 41.8008 1087.32 35.2031 1087.96 cv
33.918 1088.08 27.6768 1088.4 24.6768 1088.56 cv
23.3359 1088.63 li
17.6709 1088.93 17.7764 1093.12 17.8682 1096.82 cv
17.8838 1097.44 17.9004 1098.08 17.8936 1098.72 cv
17.8076 1107.48 17.8916 1115.84 17.8926 1115.93 cv
17.6484 1198.71 li
19.1484 1198.71 li
19.3926 1115.92 li
cp
f
14.4609 1113.07 mo
14.46 1112.98 14.377 1104.63 14.4629 1095.88 cv
14.4697 1095.22 14.4531 1094.57 14.4365 1093.93 cv
14.332 1089.7 14.4639 1087.49 18.4844 1087.27 cv
19.8232 1087.2 li
23.0635 1087.04 29.0967 1086.73 30.4141 1086.6 cv
36.374 1086.03 39.3691 1083.36 40.877 1080.9 cv
39.3037 1080.64 li
37.8965 1082.61 35.2529 1084.63 30.2715 1085.1 cv
28.9863 1085.23 22.7451 1085.55 19.7451 1085.7 cv
18.4053 1085.77 li
12.7402 1086.08 12.8447 1090.27 12.9375 1093.97 cv
12.9531 1094.59 12.9697 1095.23 12.9629 1095.86 cv
12.877 1104.63 12.9609 1112.99 12.9619 1113.08 cv
12.709 1198.71 li
14.208 1198.71 li
14.4609 1113.07 li
cp
f
58.8525 1150.5 mo
57.5664 1150.63 51.3262 1150.95 48.3262 1151.1 cv
46.9854 1151.17 li
41.3203 1151.48 41.4258 1155.67 41.5186 1159.37 cv
41.5342 1159.99 41.5498 1160.63 41.5439 1161.26 cv
41.458 1170.03 41.542 1178.39 41.542 1178.48 cv
41.5547 1198.71 li
43.0518 1198.71 li
43.042 1178.47 li
43.041 1178.38 42.958 1170.03 43.0439 1161.28 cv
43.0508 1160.62 43.0342 1159.97 43.0176 1159.33 cv
42.9121 1155.1 43.0439 1152.89 47.0654 1152.67 cv
48.4043 1152.6 li
51.6445 1152.44 57.6777 1152.12 58.9951 1152 cv
70.5986 1150.88 70.9795 1141.85 70.9814 1141.76 cv
70.9746 1074.31 li
69.4697 1073.32 li
69.4814 1141.75 li
69.4717 1142.03 69.1006 1149.52 58.8525 1150.5 cv
cp
f
67.0254 1137.92 mo
67.0146 1138.2 66.6436 1145.69 56.3955 1146.67 cv
55.1104 1146.8 48.8701 1147.12 45.8701 1147.27 cv
44.5293 1147.34 li
38.8643 1147.65 38.9688 1151.84 39.0615 1155.54 cv
39.0771 1156.16 39.0938 1156.8 39.0869 1157.43 cv
39.001 1166.2 39.085 1174.56 39.0859 1174.65 cv
39.0986 1195.64 li
39.0918 1195.69 38.9727 1197.14 39.3594 1198.71 cv
40.9141 1198.71 li
40.4707 1197.26 40.5938 1195.72 40.5957 1195.7 cv
40.585 1174.64 li
40.585 1174.55 40.501 1166.2 40.5869 1157.45 cv
40.5938 1156.79 40.5771 1156.14 40.5605 1155.5 cv
40.4561 1151.27 40.5879 1149.06 44.6084 1148.84 cv
45.9482 1148.77 li
49.1885 1148.61 55.2207 1148.29 56.5381 1148.17 cv
68.1416 1147.05 68.5225 1138.02 68.5244 1137.93 cv
68.5996 1072.75 li
67.4375 1071.99 li
67.0947 1071.93 li
67.0254 1137.92 li
cp
f
57.335 1125.7 mo
57.3682 1127.5 56.9971 1134.99 46.749 1135.98 cv
45.4795 1136.1 39.4141 1136.41 36.333 1136.57 cv
34.8828 1136.65 li
29.2178 1136.95 29.3223 1141.14 29.415 1144.84 cv
29.4307 1145.46 29.4473 1146.1 29.4404 1146.74 cv
29.3545 1155.5 29.4385 1163.86 29.4395 1163.95 cv
29.459 1198.71 li
30.958 1198.71 li
30.9385 1163.94 li
30.9385 1163.85 30.8545 1155.5 30.9404 1146.75 cv
30.9473 1146.09 30.9307 1145.44 30.915 1144.8 cv
30.8096 1140.57 30.9414 1138.36 34.9619 1138.15 cv
36.4102 1138.07 li
39.6172 1137.9 45.5898 1137.59 46.8916 1137.47 cv
58.4951 1136.36 58.876 1127.32 58.8789 1127.23 cv
58.9736 1066.43 li
57.4824 1065.46 li
57.4688 1065.45 li
57.335 1125.7 li
cp
f
27.2686 1159.61 mo
27.2686 1159.52 27.1846 1151.17 27.2715 1142.42 cv
27.2773 1141.76 27.2607 1141.11 27.2451 1140.47 cv
27.1396 1136.24 27.2715 1134.03 31.292 1133.81 cv
32.8496 1133.73 li
36.0244 1133.57 41.9336 1133.26 43.2217 1133.14 cv
54.8252 1132.02 55.2061 1122.99 55.209 1122.9 cv
55.3115 1064.03 li
53.8066 1063.05 li
53.709 1122.89 li
53.6982 1123.17 53.3271 1130.66 43.0791 1131.65 cv
41.8232 1131.77 35.9346 1132.07 32.7705 1132.23 cv
31.2119 1132.32 li
25.5479 1132.62 25.6523 1136.81 25.7451 1140.51 cv
25.7607 1141.13 25.7773 1141.77 25.7705 1142.4 cv
25.6846 1151.17 25.7686 1159.53 25.7695 1159.61 cv
25.791 1198.71 li
27.29 1198.71 li
27.2686 1159.61 li
cp
f
50.4189 1140.31 mo
49.1348 1140.43 42.8936 1140.75 39.8945 1140.91 cv
38.5527 1140.98 li
32.8877 1141.28 32.9922 1145.47 33.085 1149.17 cv
33.1006 1149.8 33.1172 1150.43 33.1104 1151.07 cv
33.0244 1159.83 33.1084 1168.2 33.1094 1168.28 cv
33.126 1198.71 li
34.625 1198.71 li
34.6084 1168.27 li
34.6084 1168.18 34.5244 1159.83 34.6113 1151.08 cv
34.6172 1150.43 34.6006 1149.77 34.585 1149.13 cv
34.4795 1144.91 34.6113 1142.69 38.6318 1142.48 cv
39.9717 1142.41 li
43.2109 1142.24 49.2451 1141.93 50.5615 1141.8 cv
62.165 1140.69 62.5459 1131.65 62.5488 1131.56 cv
62.5986 1068.82 li
61.0928 1067.83 li
61.0488 1131.56 li
61.0381 1131.83 60.667 1139.33 50.4189 1140.31 cv
cp
f
41.5547 1199.47 mo
41.5547 1198.71 li
40.9141 1198.71 li
41.0547 1199.17 41.2529 1199.62 41.5322 1200 cv
41.5361 1199.69 41.5527 1199.49 41.5547 1199.47 cv
cp
.203922 .313726 .631373 rgb
f
89.7715 985.579 mo
89.5781 985.884 85.1465 992.897 83.5244 996.423 cv
81.8516 1000.06 81.9863 1006.66 81.9932 1006.94 cv
82.0645 1035.27 li
82.0645 1035.56 82.0918 1042.41 83.3047 1045.51 cv
84.3945 1048.31 87.3721 1050.9 87.498 1051.01 cv
96.6709 1059.62 li
96.9814 1059.93 99.9287 1062.78 102.097 1061.85 cv
103.405 1061.28 103.998 1059.63 103.904 1056.8 cv
103.706 1050.71 103.458 1035.31 103.457 1035.16 cv
101.957 1035.18 li
101.958 1035.33 102.206 1050.74 102.405 1056.85 cv
102.473 1058.87 102.143 1060.19 101.501 1060.47 cv
100.521 1060.89 98.5283 1059.35 97.7139 1058.54 cv
88.502 1049.9 li
88.4502 1049.85 85.6533 1047.42 84.7012 1044.97 cv
83.5918 1042.12 83.5635 1035.33 83.5645 1035.26 cv
83.4932 1006.92 li
83.4902 1006.84 83.3584 1000.37 84.8857 997.05 cv
86.4678 993.614 90.9873 986.46 91.0332 986.388 cv
130.752 925.005 li
129.543 924.114 li
89.7715 985.579 li
cp
.376471 .788235 .901961 rgb
f
90.5449 990.737 mo
90.4023 990.964 87.1406 996.126 85.9434 998.728 cv
84.6943 1001.44 84.7949 1006.34 84.7988 1006.55 cv
85.083 1036.79 li
85.084 1037.11 85.1094 1042.08 86.0088 1044.39 cv
86.8271 1046.49 89.0498 1048.43 89.1455 1048.51 cv
95.8809 1054.83 li
96.168 1055.12 98.3828 1057.24 100.082 1056.5 cv
101.317 1055.97 101.586 1054.3 101.529 1052.61 cv
101.385 1048.13 101.203 1036.82 101.201 1036.7 cv
99.7012 1036.73 li
99.7031 1036.84 99.8838 1048.17 100.031 1052.66 cv
100.081 1054.22 99.8018 1054.99 99.4795 1055.13 cv
98.9102 1055.36 97.5791 1054.4 96.9219 1053.75 cv
90.1494 1047.39 li
89.9385 1047.21 88.0527 1045.51 87.4063 1043.85 cv
86.6455 1041.9 86.584 1037.25 86.583 1036.79 cv
86.2988 1006.52 li
86.2881 1006.07 86.2588 1001.63 87.3047 999.356 cv
88.4609 996.845 91.7754 991.599 91.8076 991.546 cv
133.663 927.054 li
132.516 926.067 li
90.5449 990.737 li
cp
f
91.3213 995.894 mo
91.2266 996.042 89.1338 999.355 88.3604 1001.03 cv
87.5361 1002.83 87.6016 1006.01 87.6055 1006.15 cv
88.1045 1038.32 li
88.1045 1038.66 88.127 1041.76 88.7129 1043.27 cv
89.2607 1044.67 90.7305 1045.95 90.792 1046 cv
95.0879 1050.04 li
95.3545 1050.3 96.8359 1051.69 98.0664 1051.16 cv
99.2275 1050.66 99.1729 1048.97 99.1553 1048.41 cv
99.0625 1045.55 98.9453 1038.33 98.9453 1038.25 cv
97.4453 1038.28 li
97.4453 1038.35 97.5625 1045.59 97.6563 1048.46 cv
97.6914 1049.56 97.4609 1049.78 97.4609 1049.78 cv
97.2969 1049.84 96.6289 1049.45 96.1309 1048.96 cv
91.7959 1044.89 li
91.4258 1044.57 90.4512 1043.6 90.1094 1042.72 cv
89.7002 1041.67 89.6055 1039.18 89.6035 1038.31 cv
89.1055 1006.12 li
89.0859 1005.29 89.1602 1002.89 89.7227 1001.66 cv
90.4541 1000.07 92.5615 996.737 92.584 996.704 cv
136.025 929.965 li
135.081 928.668 li
91.3213 995.894 li
cp
f
80.8047 1083.11 mo
78.4229 1077.4 72.4014 1073.45 72.1494 1073.29 cv
38.6943 1051.33 li
36.6328 1050.01 31.2051 1046.08 30.9863 1043.47 cv
30.9404 1043.26 li
29.666 1039.92 34.8154 1031.73 36.9326 1028.81 cv
80.3613 960.733 li
80.7051 960.255 88.8018 948.896 89.7188 941.355 cv
90.5762 934.311 90.1279 923.34 90.124 923.26 cv
89.7891 804.927 li
89.7959 804.927 li
89.7285 .00293 li
88.2275 .006836 li
88.2988 804.76 li
88.293 804.76 li
88.625 923.293 li
88.6299 923.401 89.0723 934.252 88.2305 941.174 cv
87.3594 948.335 79.2246 959.745 79.1191 959.894 cv
35.6943 1027.97 li
34.8809 1029.08 27.8457 1038.96 29.502 1043.7 cv
29.9434 1047.5 37.0752 1052.08 37.8828 1052.59 cv
53.8066 1063.05 li
53.8076 1062.76 li
55.3135 1063.01 li
55.3115 1064.03 li
57.4824 1065.46 li
58.9746 1065.71 li
58.9736 1066.43 li
61.0928 1067.83 li
61.0928 1067.58 li
62.5996 1067.83 li
62.5986 1068.82 li
67.4375 1071.99 li
68.6006 1072.18 li
68.5996 1072.75 li
69.4697 1073.32 li
69.4697 1072.33 li
70.9746 1072.58 li
70.9746 1074.31 li
71.3291 1074.54 li
71.3887 1074.58 77.2207 1078.42 79.4209 1083.68 cv
81.3574 1088.32 80.999 1094.34 80.9941 1094.45 cv
80.7998 1198.71 li
82.2988 1198.71 li
82.4922 1094.5 li
82.5088 1094.24 82.8789 1088.08 80.8047 1083.11 cv
cp
f
91.7627 1079.44 mo
89.3809 1073.74 83.3613 1069.78 83.1084 1069.62 cv
49.6533 1047.67 li
47.5996 1046.35 42.1631 1042.41 41.9453 1039.8 cv
41.9004 1039.59 li
40.625 1036.25 45.7754 1028.06 47.8916 1025.15 cv
91.3203 957.067 li
91.665 956.587 99.7607 945.228 100.678 937.688 cv
101.535 930.643 101.088 919.672 101.083 919.593 cv
100.76 804.927 li
100.782 804.927 li
101.354 0 li
99.8535 .00293 li
99.2832 804.76 li
99.2627 804.76 li
99.585 919.625 li
99.5889 919.734 100.031 930.584 99.1895 937.506 cv
98.3184 944.667 90.1836 956.079 90.0781 956.226 cv
46.6523 1024.3 li
45.8398 1025.42 38.8037 1035.29 40.4609 1040.03 cv
40.9023 1043.83 48.0332 1048.42 48.8418 1048.93 cv
82.2891 1070.88 li
82.3477 1070.92 88.1787 1074.75 90.3799 1080.02 cv
92.3164 1084.66 91.959 1090.67 91.9521 1090.78 cv
91.751 1198.71 li
93.251 1198.71 li
93.4521 1090.83 li
93.4668 1090.57 93.8379 1084.41 91.7627 1079.44 cv
cp
f
111.354 0 mo
109.853 .00293 li
110.21 804.927 li
110.232 804.927 li
110.543 915.959 li
110.548 916.066 110.99 926.917 110.148 933.84 cv
109.277 940.999 101.143 952.411 101.037 952.558 cv
57.6123 1020.63 li
56.7988 1021.75 49.7637 1031.62 51.4209 1036.36 cv
51.8613 1040.16 58.9902 1044.76 59.8008 1045.26 cv
93.248 1067.21 li
93.3066 1067.25 99.1387 1071.08 101.339 1076.35 cv
103.275 1080.99 102.917 1087.01 102.912 1087.11 cv
102.703 1198.71 li
104.203 1198.71 li
104.41 1087.16 li
104.427 1086.9 104.797 1080.74 102.722 1075.77 cv
100.341 1070.07 94.3193 1066.12 94.0664 1065.95 cv
60.6113 1044 li
58.5654 1042.69 53.1221 1038.74 52.9043 1036.13 cv
52.8584 1035.93 li
51.584 1032.59 56.7334 1024.39 58.8506 1021.48 cv
102.279 953.399 li
102.623 952.921 110.72 941.562 111.637 934.022 cv
112.494 926.976 112.046 916.005 112.043 915.926 cv
111.729 804.76 li
111.707 804.76 li
111.354 0 li
cp
f
86.2842 1081.27 mo
83.9023 1075.57 77.8809 1071.62 77.6289 1071.45 cv
44.1738 1049.5 li
42.1162 1048.18 36.6846 1044.24 36.4668 1041.63 cv
36.4199 1041.43 li
35.1465 1038.09 40.2959 1029.89 42.4121 1026.98 cv
85.8408 958.899 li
86.1855 958.421 94.2813 947.063 95.1992 939.522 cv
96.0557 932.477 95.6084 921.506 95.6035 921.426 cv
95.2734 804.927 li
95.2764 804.927 li
95.208 .00293 li
93.708 .006836 li
93.7793 804.76 li
93.7773 804.76 li
94.1045 921.459 li
94.1094 921.567 94.5518 932.418 93.71 939.341 cv
92.8398 946.501 84.7041 957.911 84.5996 958.06 cv
41.1738 1026.13 li
40.3604 1027.25 33.3252 1037.13 34.9824 1041.86 cv
35.4238 1045.66 42.5547 1050.25 43.3633 1050.76 cv
76.8086 1072.71 li
76.8682 1072.75 82.7002 1076.58 84.9004 1081.85 cv
86.8369 1086.49 86.4785 1092.51 86.4736 1092.61 cv
86.2754 1198.71 li
87.7754 1198.71 li
87.9727 1092.66 li
87.9893 1092.41 88.3584 1086.24 86.2842 1081.27 cv
cp
f
97.2422 1077.61 mo
94.8613 1071.9 88.8398 1067.95 88.5869 1067.79 cv
55.1318 1045.83 li
53.082 1044.52 47.6426 1040.58 47.4248 1037.96 cv
47.3789 1037.76 li
46.1045 1034.42 51.2539 1026.23 53.3711 1023.31 cv
96.7988 955.233 li
97.1436 954.753 105.24 943.396 106.157 935.855 cv
107.014 928.81 106.566 917.839 106.563 917.759 cv
106.242 804.76 li
106.227 804.76 li
105.875 .000977 li
104.374 .004883 li
104.729 804.927 li
104.748 804.927 li
105.063 917.792 li
105.067 917.9 105.51 928.751 104.668 935.674 cv
103.798 942.833 95.6621 954.245 95.5576 954.392 cv
52.1318 1022.47 li
51.3193 1023.58 44.2842 1033.46 45.9404 1038.2 cv
46.3818 1041.99 53.5117 1046.59 54.3213 1047.09 cv
87.7676 1069.04 li
87.8262 1069.08 93.6582 1072.92 95.8584 1078.18 cv
97.7949 1082.82 97.4375 1088.84 97.4326 1088.95 cv
97.2275 1198.71 li
98.7266 1198.71 li
98.9307 1089 li
98.9473 1088.74 99.3164 1082.58 97.2422 1077.61 cv
cp
f
127.463 380.79 mo
127.458 381.075 li
232.167 503.444 li
232.325 503.651 236.06 508.566 240.87 510.985 cv
246.392 513.76 253.536 512.834 253.833 512.794 cv
293.519 507.651 li
295.948 507.316 302.624 506.759 304.489 508.598 cv
304.659 508.723 li
307.802 510.426 309.235 519.997 309.526 523.587 cv
320.94 603.528 li
320.991 604.115 322.249 618.007 326.466 624.325 cv
330.407 630.228 337.895 638.258 337.95 638.315 cv
446.833 762.669 li
447.97 761.69 li
339.065 637.314 li
338.991 637.235 331.587 629.292 327.714 623.492 cv
323.71 617.494 322.446 603.537 322.429 603.356 cv
311.017 523.421 li
310.905 522.043 309.81 509.97 305.466 507.455 cv
302.655 504.861 294.257 506.022 293.31 506.165 cv
253.638 511.307 li
253.567 511.316 246.645 512.208 241.542 509.645 cv
237.052 507.388 233.403 502.589 233.337 502.505 cv
128.968 380.531 li
129.114 371.74 132.435 57.0927 133.796 .12793 cv
132.295 .12793 li
130.909 58.1386 127.498 378.682 127.463 380.79 cv
cp
f
130.542 376.028 mo
130.538 376.313 li
235.247 498.682 li
235.405 498.89 239.14 503.805 243.95 506.222 cv
249.472 508.997 256.616 508.071 256.913 508.032 cv
296.599 502.89 li
299.009 502.521 305.706 501.996 307.569 503.835 cv
307.739 503.96 li
310.88 505.663 312.314 515.235 312.606 518.824 cv
324.02 598.766 li
324.071 599.354 325.329 613.245 329.546 619.563 cv
333.487 625.466 340.976 633.496 341.03 633.554 cv
448.494 756.285 li
448.729 754.279 li
342.145 632.552 li
342.071 632.473 334.667 624.53 330.794 618.73 cv
326.79 612.731 325.526 598.774 325.509 598.595 cv
314.097 518.659 li
313.985 517.281 312.89 505.206 308.546 502.692 cv
305.737 500.102 297.358 501.261 296.39 501.403 cv
256.718 506.545 li
256.647 506.555 249.726 507.446 244.622 504.883 cv
240.132 502.625 236.483 497.827 236.417 497.743 cv
132.048 375.769 li
132.19 367.208 135.343 62.6064 136.765 .12793 cv
135.265 .12793 li
133.816 63.7685 130.577 373.974 130.542 376.028 cv
cp
f
133.624 371.267 mo
133.62 371.552 li
238.329 493.921 li
238.485 494.128 242.22 499.043 247.03 501.462 cv
252.554 504.236 259.696 503.311 259.995 503.271 cv
299.679 498.128 li
302.095 497.786 308.788 497.237 310.651 499.074 cv
310.819 499.198 li
313.962 500.901 315.395 510.474 315.689 514.063 cv
327.101 594.005 li
327.151 594.592 328.411 608.483 332.628 614.802 cv
336.569 620.704 344.056 628.735 344.11 628.793 cv
450.625 750.491 li
451.826 749.584 li
345.227 627.791 li
345.153 627.712 337.747 619.769 333.876 613.969 cv
329.872 607.971 328.606 594.014 328.591 593.833 cv
317.179 513.897 li
317.065 512.521 315.972 500.446 311.626 497.932 cv
308.817 495.34 300.413 496.509 299.472 496.642 cv
259.798 501.783 li
259.728 501.793 252.817 502.69 247.704 500.121 cv
243.212 497.864 239.563 493.066 239.497 492.981 cv
135.129 371.008 li
135.269 362.655 138.272 66.8896 139.74 .12793 cv
138.239 .12793 li
136.745 68.1494 133.657 369.261 133.624 371.267 cv
cp
f
136.704 366.505 mo
136.7 366.79 li
241.409 489.158 li
241.565 489.366 245.3 494.281 250.11 496.698 cv
255.634 499.474 262.776 498.548 263.075 498.509 cv
302.759 493.366 li
305.142 493.036 311.868 492.475 313.731 494.312 cv
313.899 494.438 li
317.042 496.141 318.476 505.712 318.769 509.302 cv
330.181 589.243 li
330.231 589.83 331.491 603.722 335.708 610.04 cv
339.647 615.942 347.136 623.973 347.19 624.031 cv
452.557 744.461 li
453.412 743.158 li
348.308 623.028 li
348.233 622.949 340.827 615.007 336.956 609.207 cv
332.952 603.208 331.686 589.251 331.671 589.071 cv
320.259 509.136 li
320.145 507.758 319.052 495.685 314.706 493.17 cv
311.899 490.578 303.517 491.736 302.552 491.88 cv
262.878 497.022 li
262.808 497.031 255.897 497.929 250.784 495.359 cv
246.292 493.101 242.644 488.304 242.577 488.22 cv
138.209 366.245 li
138.345 358.084 141.216 70.2802 142.717 .12793 cv
141.216 .12793 li
139.688 71.622 136.737 364.544 136.704 366.505 cv
cp
f
139.785 361.743 mo
139.78 362.028 li
244.489 484.397 li
244.647 484.605 248.382 489.521 253.192 491.938 cv
258.714 494.713 265.858 493.787 266.155 493.747 cv
305.841 488.605 li
308.235 488.28 314.948 487.715 316.811 489.551 cv
316.981 489.676 li
320.124 491.378 321.558 500.951 321.849 504.54 cv
333.263 584.481 li
333.313 585.069 334.571 598.961 338.788 605.278 cv
342.729 611.181 350.218 619.212 350.272 619.271 cv
454.998 739.009 li
455.653 737.479 li
351.388 618.268 li
351.313 618.188 343.909 610.246 340.036 604.446 cv
336.032 598.447 334.769 584.49 334.751 584.31 cv
323.339 504.374 li
323.227 502.997 322.132 490.923 317.788 488.407 cv
314.979 485.816 306.601 486.991 305.632 487.119 cv
265.958 492.261 li
265.89 492.27 258.978 493.167 253.864 490.598 cv
249.374 488.341 245.726 483.543 245.659 483.458 cv
141.29 361.484 li
141.423 353.502 144.173 72.9834 145.696 .12793 cv
144.196 .12793 li
142.644 74.4043 139.817 359.825 139.785 361.743 cv
cp
f
142.864 356.981 mo
142.86 357.267 li
247.569 479.635 li
247.727 479.843 251.462 484.758 256.272 487.175 cv
261.794 489.951 268.939 489.025 269.235 488.985 cv
308.921 483.843 li
311.304 483.482 318.026 482.95 319.892 484.789 cv
320.061 484.914 li
323.204 486.617 324.636 496.188 324.929 499.778 cv
336.343 579.72 li
336.394 580.307 337.651 594.198 341.868 600.517 cv
345.81 606.419 353.298 614.449 353.352 614.508 cv
457.215 733.3 li
458.372 732.342 li
354.468 613.506 li
354.394 613.427 346.989 605.483 343.116 599.684 cv
339.112 593.686 337.849 579.728 337.831 579.547 cv
326.419 499.611 li
326.308 498.234 325.212 486.161 320.868 483.647 cv
318.058 481.052 309.647 482.21 308.712 482.356 cv
269.04 487.498 li
268.97 487.508 262.048 488.399 256.944 485.836 cv
252.454 483.577 248.806 478.78 248.739 478.696 cv
144.37 356.723 li
144.501 348.909 147.138 75.1416 148.679 .12793 cv
147.178 .12793 li
145.606 76.6299 142.896 355.104 142.864 356.981 cv
cp
f
145.946 352.221 mo
145.942 352.505 li
250.651 474.874 li
250.808 475.081 254.542 479.997 259.353 482.414 cv
264.876 485.189 272.019 484.264 272.317 484.224 cv
312.001 479.081 li
314.401 478.752 321.106 478.189 322.974 480.027 cv
323.142 480.152 li
326.284 481.856 327.718 491.428 328.011 495.018 cv
339.423 574.958 li
339.474 575.546 340.733 589.438 344.95 595.755 cv
348.892 601.657 356.378 609.688 356.433 609.747 cv
460.097 728.348 li
461.122 727.239 li
357.55 608.744 li
357.476 608.665 350.069 600.723 346.198 594.923 cv
342.194 588.924 340.929 574.967 340.913 574.787 cv
329.501 494.851 li
329.388 493.474 328.292 481.399 323.948 478.884 cv
321.14 476.292 312.755 477.464 311.794 477.596 cv
272.12 482.737 li
272.05 482.747 265.128 483.638 260.026 481.075 cv
255.534 478.817 251.886 474.02 251.819 473.935 cv
147.451 351.961 li
147.579 344.31 150.11 76.8525 151.663 .12793 cv
150.161 .12793 li
148.579 78.4033 145.977 350.38 145.946 352.221 cv
cp
f
149.026 347.458 mo
149.022 347.743 li
253.731 470.112 li
253.888 470.319 257.622 475.234 262.433 477.651 cv
267.956 480.428 275.099 479.502 275.397 479.462 cv
315.081 474.319 li
317.474 473.968 324.186 473.427 326.054 475.266 cv
326.222 475.391 li
329.364 477.093 330.798 486.665 331.091 490.255 cv
342.503 570.196 li
342.554 570.783 343.811 584.676 348.03 590.993 cv
351.97 596.896 359.458 604.927 359.513 604.984 cv
462.775 723.161 li
463.321 721.504 li
360.63 603.982 li
360.556 603.903 353.149 595.96 349.278 590.16 cv
345.274 584.162 344.009 570.205 343.993 570.024 cv
332.581 490.089 li
332.468 488.712 331.374 476.637 327.028 474.122 cv
324.22 471.529 315.817 472.709 314.874 472.833 cv
275.2 477.975 li
275.13 477.984 268.208 478.876 263.106 476.313 cv
258.614 474.056 254.966 469.258 254.899 469.173 cv
150.531 347.199 li
150.656 339.703 153.089 78.1845 154.647 .12793 cv
153.145 .12793 li
151.557 79.792 149.057 345.654 149.026 347.458 cv
cp
f
409.323 566.87 mo
409.099 566.532 408.046 565.074 406.556 564.893 cv
406.079 564.833 405.634 564.911 405.231 565.045 cv
405.653 564.657 406.136 564.233 407.034 563.477 cv
407.3 563.205 408.161 562.522 408.929 562.616 cv
409.686 562.707 410.425 563.62 410.645 563.962 cv
410.677 564.011 li
508.467 675.274 li
509.857 674.581 li
411.878 563.103 li
411.651 562.765 410.599 561.309 409.11 561.127 cv
407.464 560.923 406.106 562.277 406.013 562.38 cv
404.726 563.46 404.288 563.87 403.622 564.49 cv
403.265 564.824 402.837 565.223 402.167 565.828 cv
401.849 566.116 401.511 566.23 401.093 566.183 cv
399.513 566.001 397.55 563.635 396.927 562.738 cv
393.577 559.079 li
393.503 559 386.099 551.058 382.226 545.257 cv
378.222 539.259 376.958 525.302 376.94 525.121 cv
365.528 445.185 li
365.417 443.808 364.321 431.734 359.977 429.219 cv
357.167 426.626 348.757 427.801 347.815 427.931 cv
318.899 431.929 li
318.806 431.946 309.47 433.577 306.528 433.034 cv
303.675 432.51 301.218 431.843 297.778 428.503 cv
282.894 414.04 249.349 374.629 246.556 371.343 cv
251.171 .12793 li
249.675 .12793 li
245.052 371.599 li
245.046 371.882 li
245.229 372.098 li
245.587 372.521 281.222 414.507 296.733 429.579 cv
300.474 433.212 303.147 433.938 306.257 434.511 cv
309.462 435.101 318.763 433.476 319.132 433.41 cv
348.028 429.416 li
350.438 429.054 357.138 428.526 359.001 430.362 cv
359.171 430.487 li
362.311 432.19 363.745 441.763 364.038 445.352 cv
375.452 525.293 li
375.503 525.88 376.761 539.772 380.977 546.09 cv
384.919 551.992 392.407 560.022 392.476 560.098 cv
395.724 563.637 li
396.108 564.183 398.464 567.39 400.921 567.673 cv
401.2 567.705 401.472 567.684 401.735 567.639 cv
401.509 567.844 401.302 568.038 401.067 568.256 cv
400.71 568.591 400.282 568.989 399.612 569.594 cv
399.292 569.883 398.954 569.996 398.538 569.948 cv
396.958 569.767 394.995 567.401 394.372 566.505 cv
391.022 562.845 li
390.948 562.766 383.544 554.823 379.671 549.022 cv
375.667 543.024 374.403 529.067 374.386 528.887 cv
362.974 448.95 li
362.862 447.574 361.767 435.501 357.423 432.985 cv
354.614 430.392 346.208 431.565 345.261 431.697 cv
316.345 435.694 li
316.251 435.712 306.915 437.343 303.974 436.8 cv
301.12 436.276 298.663 435.609 295.226 432.269 cv
280.339 417.807 246.794 378.396 244.001 375.108 cv
248.685 .12793 li
247.188 .12793 li
242.497 375.365 li
242.491 375.647 li
242.675 375.864 li
243.032 376.286 278.667 418.273 294.179 433.345 cv
297.919 436.978 300.593 437.704 303.702 438.276 cv
306.907 438.866 316.21 437.241 316.577 437.177 cv
345.476 433.182 li
347.862 432.855 354.583 432.292 356.446 434.128 cv
356.616 434.253 li
359.757 435.956 361.19 445.528 361.483 449.117 cv
372.897 529.059 li
372.948 529.647 374.206 543.538 378.423 549.855 cv
382.364 555.759 389.852 563.789 389.921 563.864 cv
393.171 567.403 li
393.556 567.95 395.909 571.155 398.366 571.438 cv
399.202 571.534 399.981 571.283 400.618 570.707 cv
401.296 570.094 401.727 569.691 402.091 569.353 cv
402.739 568.749 403.165 568.35 404.479 567.242 cv
404.745 566.972 405.606 566.286 406.374 566.382 cv
407.132 566.474 407.872 567.386 408.093 567.728 cv
408.124 567.776 li
504.913 677.899 li
506.155 677.039 li
409.323 566.87 li
cp
f
370.718 593.223 mo
370.644 593.144 363.237 585.201 359.366 579.401 cv
355.362 573.403 354.097 559.445 354.081 559.266 cv
342.669 479.33 li
342.556 477.952 341.462 465.878 337.116 463.364 cv
334.308 460.771 325.903 461.927 324.962 462.074 cv
285.288 467.216 li
285.22 467.226 278.298 468.117 273.194 465.554 cv
268.702 463.296 265.054 458.498 264.987 458.414 cv
160.618 336.439 li
160.712 330.912 162.058 250.263 163.384 176.988 cv
163.47 178.836 163.563 180.692 163.657 182.546 cv
164.019 189.706 164.397 196.954 164.28 203.572 cv
163.126 268.763 162.093 330.717 162.077 331.737 cv
162.071 332.022 li
266.782 454.392 li
266.939 454.599 270.673 459.514 275.483 461.931 cv
281.007 464.707 288.149 463.781 288.446 463.741 cv
328.132 458.599 li
330.542 458.259 337.237 457.706 339.104 459.545 cv
339.272 459.67 li
342.415 461.372 343.849 470.944 344.14 474.534 cv
355.554 554.476 li
355.604 555.063 356.864 568.954 361.081 575.272 cv
365.02 581.175 372.509 589.206 372.563 589.264 cv
454.46 684.069 li
455.558 683.053 li
373.679 588.262 li
373.604 588.183 366.2 580.239 362.327 574.439 cv
358.323 568.441 357.06 554.484 357.044 554.304 cv
345.632 474.368 li
345.519 472.991 344.423 460.917 340.079 458.402 cv
337.27 455.809 328.868 456.968 327.925 457.112 cv
288.249 462.254 li
288.181 462.264 281.259 463.155 276.157 460.592 cv
271.665 458.335 268.017 453.537 267.95 453.452 cv
163.581 331.479 li
163.661 326.772 164.657 267.034 165.77 204.138 cv
165.892 197.285 165.511 189.823 165.147 182.449 cv
164.88 177.049 164.602 171.623 164.53 166.479 cv
164.837 169.841 165.237 173.308 165.634 176.753 cv
166.485 184.083 167.366 191.559 167.257 197.817 cv
166.097 263.265 165.054 325.883 165.038 326.776 cv
165.034 327.061 li
269.743 449.431 li
269.899 449.638 273.634 454.554 278.446 456.971 cv
283.968 459.745 291.11 458.821 291.409 458.78 cv
331.093 453.638 li
333.509 453.299 340.2 452.745 342.065 454.583 cv
342.233 454.71 li
345.376 456.411 346.81 465.984 347.102 469.572 cv
358.515 549.514 li
358.565 550.103 359.825 563.994 364.042 570.312 cv
367.981 576.215 375.47 584.245 375.526 584.303 cv
458.487 680.342 li
459.585 679.326 li
376.642 583.302 li
376.567 583.221 369.163 575.279 365.29 569.48 cv
361.286 563.48 360.02 549.522 360.005 549.344 cv
348.593 469.408 li
348.481 468.029 347.386 455.956 343.042 453.44 cv
340.233 450.848 331.829 452.009 330.886 452.151 cv
291.212 457.294 li
291.144 457.304 284.222 458.195 279.118 455.632 cv
274.628 453.374 270.977 448.576 270.913 448.491 cv
166.544 326.517 li
166.622 321.807 167.632 261.37 168.749 198.204 cv
168.864 191.725 167.974 184.075 167.114 176.572 cv
166.37 170.097 165.606 163.532 165.513 157.819 cv
166.02 162.001 166.821 166.509 167.612 170.96 cv
168.952 178.461 170.337 186.163 170.231 192.063 cv
169.067 257.765 168.013 321.05 167.999 321.815 cv
167.995 322.101 li
272.706 444.47 li
272.862 444.677 276.597 449.592 281.407 452.01 cv
286.931 454.785 294.073 453.859 294.37 453.819 cv
334.056 448.677 li
336.477 448.339 343.161 447.784 345.028 449.623 cv
345.196 449.748 li
348.339 451.45 349.772 461.022 350.063 464.612 cv
361.477 544.554 li
361.528 545.141 362.786 559.032 367.005 565.351 cv
370.944 571.253 378.433 579.284 378.487 579.342 cv
462.515 676.616 li
463.614 675.599 li
379.602 578.34 li
379.528 578.261 372.124 570.317 368.251 564.518 cv
364.247 558.52 362.983 544.563 362.968 544.382 cv
351.554 464.446 li
351.442 463.068 350.347 450.994 346.003 448.48 cv
343.194 445.887 334.792 447.05 333.849 447.19 cv
294.175 452.332 li
294.104 452.342 287.183 453.233 282.081 450.67 cv
277.589 448.413 273.94 443.615 273.874 443.53 cv
169.505 321.557 li
169.585 316.841 170.604 255.706 171.729 192.271 cv
171.837 186.165 170.436 178.327 169.083 170.695 cv
167.808 163.521 166.507 156.192 166.495 150.464 cv
167.173 154.998 168.394 160.137 169.591 165.167 cv
171.417 172.837 173.306 180.768 173.208 186.31 cv
172.038 252.267 170.974 316.217 170.962 316.855 cv
170.958 317.139 li
275.667 439.508 li
275.823 439.716 279.558 444.631 284.368 447.048 cv
289.892 449.823 297.034 448.897 297.333 448.858 cv
337.017 443.715 li
339.444 443.378 346.124 442.822 347.989 444.661 cv
348.159 444.786 li
351.3 446.489 352.733 456.062 353.026 459.65 cv
364.438 539.592 li
364.491 540.18 365.749 554.071 369.966 560.389 cv
373.907 566.292 381.394 574.322 381.45 574.38 cv
466.544 672.888 li
467.642 671.872 li
382.565 573.378 li
382.491 573.299 375.085 565.356 371.214 559.557 cv
367.21 553.558 365.946 539.601 365.929 539.421 cv
354.517 459.485 li
354.405 458.107 353.31 446.032 348.966 443.519 cv
346.155 440.926 337.757 442.092 336.81 442.23 cv
297.136 447.37 li
297.067 447.381 290.146 448.272 285.042 445.708 cv
280.552 443.451 276.901 438.653 276.837 438.569 cv
172.468 316.595 li
172.546 311.875 173.577 250.042 174.708 186.337 cv
174.81 180.605 172.897 172.581 171.05 164.82 cv
169.237 157.209 167.364 149.34 167.462 143.89 cv
167.602 136.187 167.741 7.40625 167.88 .00293 cv
162.921 .00293 li
161.337 82.1474 159.142 335.009 159.114 336.699 cv
159.11 336.983 li
263.819 459.353 li
263.976 459.561 267.71 464.476 272.521 466.893 cv
278.044 469.668 285.186 468.742 285.485 468.702 cv
325.169 463.56 li
327.575 463.22 334.274 462.667 336.142 464.506 cv
336.31 464.632 li
339.452 466.334 340.886 475.906 341.179 479.495 cv
352.591 559.437 li
352.644 560.024 353.901 573.916 358.118 580.233 cv
362.06 586.137 369.546 594.167 369.601 594.226 cv
450.431 687.796 li
451.528 686.78 li
370.718 593.223 li
cp
f
450.519 687.834 mo
470.924 710.716 li
471.955 709.619 li
451.62 686.816 li
450.519 687.834 li
cp
f
458.573 680.382 mo
477.645 701.735 li
478.71 700.677 li
459.675 679.364 li
458.573 680.382 li
cp
f
462.601 676.656 mo
481.359 697.643 li
482.722 696.916 li
463.702 675.638 li
462.601 676.656 li
cp
f
467.729 671.911 mo
466.628 672.93 li
485.576 694.109 li
486.52 692.915 li
467.729 671.911 li
cp
f
454.548 684.107 mo
474.714 706.706 li
475.636 705.486 li
455.647 683.09 li
454.548 684.107 li
cp
f
1085.57 33.0385 mo
1085.64 33.1176 1093.05 41.061 1096.92 46.8608 cv
1100.92 52.8589 1102.19 66.8159 1102.21 66.9966 cv
1113.62 146.932 li
1113.73 148.31 1114.82 160.383 1119.17 162.898 cv
1121.98 165.492 1130.38 164.331 1131.32 164.188 cv
1171 159.046 li
1171.07 159.037 1177.99 158.145 1183.09 160.709 cv
1187.58 162.965 1191.23 167.764 1191.3 167.848 cv
1200 178.017 li
1200 175.712 li
1192.47 166.909 li
1192.31 166.702 1188.58 161.787 1183.77 159.368 cv
1178.24 156.593 1171.1 157.519 1170.8 157.559 cv
1131.12 162.702 li
1128.69 163.037 1122.01 163.594 1120.14 161.755 cv
1119.98 161.63 li
1116.83 159.927 1115.4 150.356 1115.11 146.766 cv
1103.7 66.8247 li
1103.64 66.2378 1102.38 52.3462 1098.17 46.0278 cv
1094.23 40.1255 1086.74 32.0952 1086.69 32.0376 cv
1059.07 .00293 li
1057.09 .00293 li
1085.57 33.0385 li
cp
f
1082.49 37.8012 mo
1082.56 37.8803 1089.97 45.8227 1093.84 51.6225 cv
1097.84 57.6216 1099.11 71.5786 1099.13 71.7583 cv
1110.54 151.694 li
1110.65 153.072 1111.74 165.147 1116.09 167.661 cv
1118.9 170.251 1127.28 169.092 1128.24 168.95 cv
1167.92 163.808 li
1167.99 163.798 1174.91 162.907 1180.01 165.47 cv
1184.5 167.728 1188.15 172.526 1188.22 172.61 cv
1200 186.378 li
1200 184.074 li
1189.39 171.671 li
1189.23 171.463 1185.5 166.548 1180.69 164.131 cv
1175.16 161.356 1168.02 162.282 1167.72 162.321 cv
1128.04 167.463 li
1125.63 167.833 1118.93 168.357 1117.06 166.518 cv
1116.9 166.393 li
1113.75 164.69 1112.32 155.118 1112.03 151.529 cv
1100.62 71.5874 li
1100.56 70.9995 1099.31 57.1079 1095.09 50.7905 cv
1091.15 44.8872 1083.66 36.8569 1083.61 36.7993 cv
1051.88 .00293 li
1049.9 .00293 li
1082.49 37.8012 li
cp
f
1079.41 42.562 mo
1079.48 42.6411 1086.89 50.5844 1090.76 56.3842 cv
1094.76 62.3823 1096.03 76.3393 1096.04 76.52 cv
1107.46 156.457 li
1107.57 157.833 1108.66 169.907 1113.01 172.421 cv
1115.82 175.013 1124.22 173.844 1125.16 173.711 cv
1164.84 168.57 li
1164.91 168.56 1171.82 167.663 1176.93 170.232 cv
1181.42 172.489 1185.07 177.287 1185.14 177.372 cv
1200 194.742 li
1200 192.435 li
1186.31 176.432 li
1186.15 176.225 1182.41 171.31 1177.6 168.891 cv
1172.08 166.117 1164.94 167.043 1164.64 167.083 cv
1124.96 172.225 li
1122.54 172.567 1115.85 173.116 1113.98 171.279 cv
1113.81 171.155 li
1110.67 169.452 1109.24 159.879 1108.95 156.29 cv
1097.53 76.3481 li
1097.48 75.7612 1096.22 61.8696 1092.01 55.5512 cv
1088.07 49.6489 1080.58 41.6176 1080.52 41.56 cv
1044.69 .00293 li
1042.71 .00293 li
1079.41 42.562 li
cp
f
1076.33 47.3247 mo
1076.4 47.4038 1083.81 55.3462 1087.68 61.146 cv
1091.68 67.145 1092.95 81.102 1092.96 81.2817 cv
1104.38 161.217 li
1104.49 162.595 1105.58 174.668 1109.93 177.183 cv
1112.74 179.775 1121.12 178.617 1122.08 178.473 cv
1161.76 173.332 li
1161.83 173.322 1168.74 172.424 1173.85 174.994 cv
1178.34 177.252 1181.99 182.049 1182.06 182.133 cv
1200 203.104 li
1200 200.797 li
1183.23 181.195 li
1183.07 180.987 1179.33 176.072 1174.52 173.655 cv
1169 170.879 1161.86 171.805 1161.56 171.844 cv
1121.88 176.987 li
1119.49 177.317 1112.77 177.878 1110.9 176.042 cv
1110.73 175.916 li
1107.59 174.212 1106.16 164.641 1105.87 161.051 cv
1094.45 81.1098 li
1094.4 80.5229 1093.14 66.6313 1088.93 60.313 cv
1084.99 54.4106 1077.5 46.3803 1077.44 46.3217 cv
1037.5 .00293 li
1035.52 .00293 li
1076.33 47.3247 li
cp
f
1073.25 52.0854 mo
1073.32 52.1645 1080.73 60.1069 1084.6 65.9067 cv
1088.6 71.9057 1089.87 85.8628 1089.88 86.0434 cv
1101.29 165.979 li
1101.41 167.356 1102.5 179.43 1106.85 181.946 cv
1109.65 184.537 1118.04 183.363 1119 183.234 cv
1158.68 178.092 li
1158.75 178.084 1165.66 177.186 1170.77 179.755 cv
1175.26 182.012 1178.91 186.81 1178.98 186.895 cv
1200 211.465 li
1200 209.16 li
1180.14 185.956 li
1179.99 185.749 1176.25 180.833 1171.44 178.415 cv
1165.92 175.64 1158.78 176.566 1158.48 176.606 cv
1118.79 181.749 li
1116.4 182.073 1109.69 182.638 1107.82 180.802 cv
1107.65 180.677 li
1104.51 178.975 1103.08 169.402 1102.79 165.813 cv
1091.37 85.8716 li
1091.32 85.2837 1090.06 71.3921 1085.85 65.0747 cv
1081.9 59.1723 1074.42 51.1411 1074.36 51.0825 cv
1030.31 .00293 li
1028.33 .00293 li
1073.25 52.0854 li
cp
f
1070.17 56.8471 mo
1070.24 56.9262 1077.65 64.8696 1081.52 70.6694 cv
1085.52 76.6675 1086.79 90.6255 1086.8 90.8061 cv
1098.21 170.742 li
1098.33 172.119 1099.42 184.192 1103.77 186.707 cv
1106.58 189.301 1114.99 188.143 1115.92 187.997 cv
1155.6 182.855 li
1155.67 182.845 1162.59 181.954 1167.69 184.517 cv
1172.18 186.776 1175.83 191.573 1175.9 191.657 cv
1200 219.826 li
1200 217.522 li
1177.06 190.718 li
1176.91 190.51 1173.17 185.595 1168.36 183.178 cv
1162.84 180.402 1155.7 181.328 1155.4 181.368 cv
1115.71 186.51 li
1113.33 186.871 1106.61 187.403 1104.74 185.564 cv
1104.57 185.439 li
1101.43 183.736 1100 174.165 1099.71 170.575 cv
1088.29 90.6333 li
1088.24 90.0464 1086.98 76.1548 1082.77 69.8364 cv
1078.83 63.9341 1071.34 55.9038 1071.28 55.8452 cv
1023.12 .00293 li
1021.14 .00293 li
1070.17 56.8471 li
cp
f
1067.09 61.6089 mo
1067.16 61.688 1074.56 69.6303 1078.44 75.4301 cv
1082.44 81.4292 1083.71 95.3862 1083.72 95.5659 cv
1095.13 175.502 li
1095.25 176.879 1096.34 188.954 1100.69 191.469 cv
1103.49 194.061 1111.88 192.889 1112.84 192.757 cv
1152.51 187.616 li
1152.58 187.606 1159.51 186.715 1164.61 189.278 cv
1169.1 191.536 1172.75 196.334 1172.81 196.418 cv
1200 228.189 li
1200 225.883 li
1173.98 195.479 li
1173.83 195.272 1170.09 190.356 1165.28 187.939 cv
1159.76 185.164 1152.62 186.089 1152.32 186.129 cv
1112.63 191.272 li
1110.23 191.601 1103.53 192.164 1101.66 190.326 cv
1101.49 190.201 li
1098.35 188.497 1096.92 178.925 1096.63 175.335 cv
1085.21 95.395 li
1085.16 94.8071 1083.9 80.9155 1079.69 74.5981 cv
1075.74 68.6958 1068.26 60.6645 1068.2 60.6059 cv
1015.93 .00293 li
1013.95 .00293 li
1067.09 61.6089 li
cp
f
1064.01 66.3706 mo
1064.08 66.4497 1071.48 74.393 1075.36 80.1928 cv
1079.36 86.1909 1080.63 100.148 1080.64 100.329 cv
1092.05 180.264 li
1092.17 181.641 1093.26 193.716 1097.61 196.231 cv
1100.41 198.824 1108.82 197.644 1109.76 197.52 cv
1149.43 192.378 li
1149.5 192.369 1156.43 191.477 1161.53 194.041 cv
1166.02 196.297 1169.67 201.095 1169.73 201.18 cv
1200 236.551 li
1200 234.244 li
1170.9 200.241 li
1170.75 200.034 1167.01 195.119 1162.2 192.702 cv
1156.68 189.925 1149.54 190.851 1149.24 190.891 cv
1109.55 196.034 li
1107.16 196.385 1100.45 196.926 1098.58 195.087 cv
1098.41 194.962 li
1095.27 193.26 1093.84 183.688 1093.54 180.098 cv
1082.13 100.157 li
1082.08 99.5698 1080.82 85.6772 1076.61 79.3598 cv
1072.66 73.4575 1065.18 65.4262 1065.12 65.3686 cv
1008.74 .00293 li
1006.76 .00293 li
1064.01 66.3706 li
cp
f
1015.31 103.483 mo
1015.54 103.821 1016.59 105.279 1018.08 105.46 cv
1018.56 105.52 1019 105.442 1019.4 105.308 cv
1018.98 105.696 1018.5 106.12 1017.6 106.876 cv
1017.34 107.148 1016.47 107.832 1015.71 107.737 cv
1014.95 107.646 1014.21 106.733 1013.99 106.391 cv
1013.96 106.342 li
920.494 .00293 li
918.496 .00293 li
1012.76 107.251 li
1012.98 107.588 1014.04 109.044 1015.53 109.226 cv
1017.17 109.43 1018.53 108.076 1018.62 107.973 cv
1019.91 106.893 1020.35 106.483 1021.01 105.863 cv
1021.37 105.529 1021.8 105.13 1022.47 104.525 cv
1022.79 104.237 1023.13 104.124 1023.54 104.17 cv
1025.12 104.352 1027.08 106.718 1027.71 107.615 cv
1031.06 111.274 li
1031.13 111.353 1038.54 119.295 1042.41 125.096 cv
1046.41 131.094 1047.68 145.051 1047.69 145.232 cv
1059.11 225.169 li
1059.22 226.546 1060.31 238.619 1064.66 241.134 cv
1067.47 243.728 1075.88 242.552 1076.82 242.423 cv
1105.73 238.425 li
1105.83 238.408 1115.16 236.777 1118.11 237.32 cv
1120.96 237.843 1123.42 238.511 1126.86 241.851 cv
1141.74 256.314 1175.29 295.724 1178.08 299.011 cv
1173.5 552.169 li
1080.18 675.836 li
1081.68 675.836 li
1175 552.176 li
1179.58 298.755 li
1179.59 298.472 li
1179.41 298.255 li
1179.05 297.834 1143.41 255.847 1127.9 240.775 cv
1124.16 237.142 1121.49 236.416 1118.38 235.843 cv
1115.17 235.253 1105.87 236.878 1105.5 236.943 cv
1076.61 240.937 li
1074.2 241.3 1067.5 241.828 1065.63 239.992 cv
1065.46 239.867 li
1062.32 238.164 1060.89 228.591 1060.6 225.001 cv
1049.18 145.06 li
1049.13 144.473 1047.87 130.581 1043.66 124.263 cv
1039.72 118.361 1032.23 110.331 1032.16 110.255 cv
1028.91 106.716 li
1028.53 106.17 1026.17 102.963 1023.71 102.68 cv
1023.43 102.648 1023.16 102.669 1022.9 102.714 cv
1023.13 102.509 1023.33 102.315 1023.57 102.097 cv
1023.93 101.762 1024.35 101.364 1025.02 100.759 cv
1025.34 100.47 1025.68 100.357 1026.1 100.405 cv
1027.68 100.586 1029.64 102.952 1030.26 103.848 cv
1033.61 107.508 li
1033.69 107.587 1041.09 115.53 1044.96 121.331 cv
1048.97 127.329 1050.23 141.286 1050.25 141.466 cv
1061.66 221.403 li
1061.77 222.779 1062.87 234.853 1067.21 237.369 cv
1070.02 239.962 1078.43 238.789 1079.37 238.656 cv
1108.29 234.66 li
1108.38 234.642 1117.72 233.011 1120.66 233.554 cv
1123.52 234.078 1125.97 234.744 1129.41 238.085 cv
1144.3 252.546 1177.84 291.959 1180.63 295.246 cv
1175.99 552.172 li
1082.67 675.836 li
1084.17 675.836 li
1177.48 552.336 li
1182.14 294.988 li
1182.14 294.707 li
1181.96 294.49 li
1181.6 294.068 1145.97 252.08 1130.46 237.009 cv
1126.71 233.376 1124.04 232.65 1120.93 232.078 cv
1117.73 231.488 1108.43 233.113 1108.06 233.177 cv
1079.16 237.171 li
1076.77 237.5 1070.05 238.062 1068.19 236.226 cv
1068.02 236.101 li
1064.88 234.398 1063.44 224.826 1063.15 221.236 cv
1051.74 141.294 li
1051.69 140.707 1050.43 126.815 1046.21 120.498 cv
1042.27 114.594 1034.78 106.564 1034.71 106.489 cv
1031.46 102.95 li
1031.08 102.403 1028.73 99.1977 1026.27 98.9145 cv
1025.43 98.8188 1024.65 99.0698 1024.02 99.646 cv
1023.34 100.259 1022.91 100.662 1022.54 101.001 cv
1021.9 101.604 1021.47 102.003 1020.16 103.111 cv
1019.89 103.381 1019.03 104.067 1018.26 103.971 cv
1017.5 103.879 1016.76 102.967 1016.54 102.626 cv
1016.51 102.577 li
926.358 .00293 li
924.36 .00293 li
1015.31 103.483 li
cp
f
1047.99 87.0512 mo
1048.07 87.1323 1055.47 95.0737 1059.34 100.874 cv
1063.35 106.873 1064.61 120.831 1064.63 121.009 cv
1076.04 200.945 li
1076.15 202.324 1077.25 214.397 1081.59 216.913 cv
1084.4 219.505 1092.81 218.344 1093.75 218.202 cv
1133.42 213.059 li
1133.49 213.049 1140.41 212.158 1145.52 214.721 cv
1150.01 216.979 1153.66 221.777 1153.72 221.863 cv
1200 275.946 li
1200 273.639 li
1154.89 220.922 li
1154.73 220.715 1151 215.799 1146.19 213.382 cv
1140.67 210.608 1133.52 211.532 1133.23 211.573 cv
1093.54 216.715 li
1091.13 217.054 1084.44 217.608 1082.57 215.77 cv
1082.4 215.643 li
1079.26 213.942 1077.83 204.369 1077.53 200.781 cv
1066.12 120.839 li
1066.07 120.251 1064.81 106.359 1060.59 100.042 cv
1056.65 94.1382 1049.16 86.1079 1049.11 86.0503 cv
974.779 .00293 li
972.803 .00293 li
1047.99 87.0512 li
cp
f
1050.96 82.0913 mo
1051.03 82.1704 1058.44 90.1137 1062.31 95.9135 cv
1066.31 101.912 1067.57 115.869 1067.59 116.049 cv
1079 195.985 li
1079.12 197.363 1080.21 209.436 1084.56 211.951 cv
1087.37 214.544 1095.77 213.385 1096.71 213.241 cv
1136.38 208.099 li
1136.45 208.089 1143.38 207.198 1148.48 209.761 cv
1152.97 212.018 1156.62 216.816 1156.68 216.901 cv
1200 267.523 li
1200 265.217 li
1157.85 215.961 li
1157.7 215.754 1153.96 210.839 1149.15 208.422 cv
1143.63 205.646 1136.49 206.572 1136.19 206.613 cv
1096.5 211.754 li
1094.09 212.094 1087.4 212.647 1085.53 210.808 cv
1085.36 210.683 li
1082.22 208.981 1080.79 199.409 1080.49 195.819 cv
1069.08 115.877 li
1069.03 115.291 1067.77 101.399 1063.55 95.0805 cv
1059.61 89.1782 1052.13 81.1469 1052.07 81.0893 cv
982.027 .00293 li
980.05 .00293 li
1050.96 82.0913 li
cp
f
1053.92 77.1303 mo
1053.99 77.2094 1061.4 85.1518 1065.27 90.9516 cv
1069.27 96.9497 1070.54 110.908 1070.55 111.087 cv
1081.97 191.023 li
1082.08 192.401 1083.17 204.475 1087.52 206.989 cv
1090.33 209.583 1098.73 208.426 1099.67 208.279 cv
1139.35 203.137 li
1139.42 203.127 1146.34 202.236 1151.44 204.799 cv
1155.93 207.057 1159.58 211.855 1159.65 211.939 cv
1200 259.1 li
1200 256.794 li
1160.81 211.001 li
1160.66 210.793 1156.92 205.877 1152.11 203.46 cv
1146.59 200.685 1139.45 201.611 1139.15 201.651 cv
1099.46 206.793 li
1097.06 207.133 1090.36 207.686 1088.49 205.847 cv
1088.32 205.721 li
1085.18 204.019 1083.75 194.447 1083.46 190.858 cv
1072.04 110.917 li
1071.99 110.329 1070.73 96.437 1066.52 90.1196 cv
1062.58 84.2163 1055.09 76.186 1055.03 76.1274 cv
989.273 .00293 li
987.298 .00293 li
1053.92 77.1303 li
cp
f
1042.07 96.9751 mo
1042.14 97.0542 1049.55 104.997 1053.42 110.796 cv
1057.43 116.795 1058.69 130.752 1058.71 130.932 cv
1070.12 210.868 li
1070.23 212.246 1071.33 224.322 1075.67 226.835 cv
1078.48 229.427 1086.88 228.261 1087.82 228.125 cv
1127.5 222.983 li
1127.57 222.972 1134.49 222.081 1139.59 224.646 cv
1144.08 226.902 1147.73 231.701 1147.8 231.785 cv
1200 292.792 li
1200 290.486 li
1148.97 230.845 li
1148.81 230.638 1145.08 225.722 1140.27 223.306 cv
1134.74 220.53 1127.6 221.456 1127.3 221.495 cv
1087.62 226.638 li
1085.19 226.976 1078.51 227.531 1076.64 225.693 cv
1076.48 225.568 li
1073.33 223.865 1071.9 214.292 1071.61 210.703 cv
1060.2 130.761 li
1060.14 130.173 1058.88 116.282 1054.67 109.964 cv
1050.73 104.061 1043.24 96.0307 1043.19 95.9731 cv
960.284 .00293 li
958.307 .00293 li
1042.07 96.9751 li
cp
f
1045.03 92.0132 mo
1045.11 92.0923 1052.51 100.036 1056.38 105.835 cv
1060.39 111.834 1061.65 125.791 1061.67 125.971 cv
1073.08 205.907 li
1073.19 207.285 1074.29 219.359 1078.63 221.874 cv
1081.44 224.466 1089.84 223.304 1090.79 223.164 cv
1130.46 218.021 li
1130.53 218.011 1137.45 217.12 1142.55 219.683 cv
1147.05 221.94 1150.7 226.738 1150.76 226.824 cv
1200 284.368 li
1200 282.061 li
1151.93 225.884 li
1151.77 225.677 1148.04 220.761 1143.23 218.343 cv
1137.71 215.568 1130.56 216.494 1130.26 216.534 cv
1090.58 221.676 li
1088.16 222.014 1081.47 222.569 1079.61 220.73 cv
1079.44 220.605 li
1076.3 218.903 1074.86 209.331 1074.57 205.741 cv
1063.16 125.799 li
1063.11 125.212 1061.85 111.321 1057.63 105.002 cv
1053.69 99.1001 1046.2 91.0688 1046.15 91.0112 cv
967.532 .00293 li
965.555 .00293 li
1045.03 92.0132 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.1.0
%%For: (user) ()
%%Title: (plata_57.eps)
%%CreationDate: 4/12/2016 2:19 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6kuJ`rZ8VXZm^;m4j;H\pC*!B0#_Xli2AkpG?m1e#7[#^r^"kp0C]ECNa=<IN&h<a&[j8C_TC.>!=]q/T0g$$cR<@uT<jUC+
%<u^=,c+hgb>%U2^1bBsPoC%1b]D&sa'Qh@(dB]3Qpa02,S#'FSBQOd>bu2pQCc?.SG%WD5rN"Sl]IKN%0?)/UTN5k-RG"ST9:,9E
%DU1Ku<,4dnfrc.')(2I>d6-NGhfe34l2Z;ih*'Sp'BqL?G%iY[2k&Vcg>.Y$&d-(%Q9HAokLE>:?0kU]NNWl?1q2X=f>g1X-pLO@
%CDi]BZU@#inj0,)X**NpR=6[_ZhlG//fnX8>+g!4.>M6*o7&Ui+8M8k7>1.p.m![5he_p<r,#ugN$[pQ4Nuh+L,<kVN+LJaL3c*,
%Gl]<d4@jG\,cJ1e`GWIak%IrLcE,+eMuP#<9P_EQ:!La_1eu<BZG)t$HoGgYoP`@-lDA=O?g$@.C@LCik'9cS#Apl=\T[_WqB&nL
%84M)>8%i*QIbUfEM/s0UHs)A/c#QWb@qej^'P^'Ch:P-kIoVDj@f&:OP#sVX4Y4QU`f&^E\l[cBrX'cm\pDIa.qkG0hsjNEI,1Yk
%RMi>[B'EnIK6Z[#s/q^9p$d+:VQ*SeJEOhA>qF>G8`E%JH<tHi)*[T7pDkQU]Bs@D0;G\4n`520l`:p"Y93aF%@&9sm08Phm(.2J
%r@0/]>5$K$?G4f9D`?uaK+@mk7<76-'rX"9eZ\q$n8HfFYGLBuK[\OIHD&tWa8c.jC\c4:4fn>?a5(pFf@k">RfEB=;Qee;$SjQ?
%G*%hn+(gi6TAfgr(9=Qm':pSR+pIFZ+Olt%+$m$^MKLK;de%cd.lN:P%0$l]\6o2eIOW^PqH]h(d/B'+:KlLR;!N'Sgh*Mb.iQ?T
%9(T',e?mmU2(</Jc@4,)W!bM#R?Mg!7#QYHf4mIW?HmXOpa`kKb>,Ou%?:gODg1HNj&WEQ.ore&kT?U-[4:G'EN*5,9/X$RC1Cdp
%9ImQ`Il?&J(g&dHp5O6a:6.&\DWtW?>=JM*FF73W?B?rL)Wa`$9(L<B"@+GiQDV^i,&ut^?#3eG9:;o*YB,gdBf9a(mg6a!Di4S7
%5N0_Ke*%#'`^)uS1\t/&@/,Fd.cm'9ITuGDd[TI@H$W-)R%88_ZuV+f\?aBLT1+q=rT[N8@6FNh5ASiMSU/e4S8q/h;_?OOj'S?p
%ONM;ZQ[!I@4<",HifbQnMbAQs>M.fG588J=^07C65OK<QXmf\3X<#m+;JhM4bT-AWh4Ut0c$Bb22fj@DC^&&FYiTl>9DasdCtsrO
%XA&8i\gBW_^Y:%bf*,VeNW.5)dD%lXg4)h)M#Yb%9>EI)p9+ceX_3t!Wn/0]isKdgAkpPnCUd%IF7"-j\4u4^=t@(7#.H9AX*`nZ
%UEB"jh-ZO-rOAY=g:`90eRRmOEB`%=O(,5h>$V9]o8E%(G)]s:RaDDXL<DA9SNe8`.;#@/9kuLuVXdfGC&BjC;tuVe$GWGsL"tO!
%Y1C04T'DN;;D"f6$Q;`T1/164Yu#r@S18?e32fJ)\Ui>Tl)$4O2R2"PT2?`c-j>gF,>V$E9@Wc:-Ic]MGH6Bg-;UPWm>regZe,A^
%V_pJEnuNbCqE_)br$0afif0jJ2RAi8H!4k":/GU/5C4ZUBoM7Pqe8b7l8<j-m@_q/V1BUp_j&/QgmIc8`]VpF"t,Un7Vp:MF+,Ts
%!fT<WP0I%CWJVCJdVh/u.6DG@g8/1Y,4uYAHeeN(4Ek;d[AMXpB+>10@8's63!S\f<0fjVrh`OH=ID:%eU138X=loN)4\trPaeKu
%bY'?s/OI!t7OV>P(CA::?8npU75-Y*_-@>dSAS_e7HS7qb:R2674bp(jVG,V,*kUcA)44g0%G(+,aMXhDEp%FDA'8tcYWi8"L[9J
%@_)<tn(s_,a*:*:,mUt>^e^h`#!1R\55:nq"h^gdS9XX>c0MI^)s=3_(cCatH_!p>f[q*,]@k3K.E&?Y`iPN)B\1_W+cTJT:XQ8A
%;id?U?Hl*='6LG)L,miX".n7PC3^7b(tF![5"Y>.`V?rS^sDqYV9'1HG#JLs.;%!89"eE5^"mLH]#@,WTc8DjC@fp&:N5L#<jNBC
%CP)LTVDZ1(AKRIL]2C0`a/*6+M&^3CYj)1cBg>K)HK.EYIpgW9c'kffR[-8fB0@0a[8bVBnT^FQqGbr=:PrlaBBg>oYZYgbpX<]`
%QN+[-*%TpNYAhBaJt<pj-'6glcb)o]B$06sHNLOe1@l:Q>]5s=egs(DaP\h5CgBe5[*m179JZopH?2X9ShJ,1E<bQ5c1W-sXjt3,
%o]aVofWKBNl9RARL@SSp`gaD>ILT(;o=hJ1mIK':$g7;7@fEJ)f'?jmYG6$b>gQP<q`Fj+k7[0X=1"I-*e3K((0*PV.\FZDkVoK`
%a%e@U=\ih1P-5a!C?G4b\!tXr<]^TdP@C;)EGje`SD2Ds.?8P[Mre\,%7e9i;i<MOJCp0g\7tG%`l^6:>V<u8jt3Z^eSM]IE6hr"
%-T-NbaNZJMC!J7\bh-_]rlc=b)gI<XcAgH/9t9\-j[Ks&h?<dP+\hR*i,`-,HNOeuT;B>,1N0Hp);SHIoc&<J6&H$*3P;(/L$m1L
%'a8<q_Rqn#3PV6FCg<+J4B^sE'\``E(WAigW#Z+#rYRnhh1CbZVDZ+nMOfCccYrH<C!A;b%!L&?Z'b+8MOT,6;PCSQYOG+ng?-Z7
%jK"hPX]Pr"0q)1_em,eVHBGd3Z.1`SOj6\2^TRT6X3AYWqS8_e-d.":!S_&#=Z-esDlQ`lhn7W%q+B=?7UigngKBE<FQQ:a._@V)
%g6(M'p0:p-P![%b.ApK&.>s<<r/%j='g&hf/SqQC#`:&\QRU!)iB*&K-IcrpX\#o&L9-SO<@jK;pnV8S=nS7ZCK?F,,L)HFV-^iZ
%`BO%3Ugf=]26@Sd0L!2>jf`qJP@ll-IThpdf)@6")M_/pD.pE2:2*+mjg:nL_BX/lBqhTh9Y9U_]3.p>`OX[Oefof]Q.'!^-*=$[
%'rIA<=`Br>"fc`EN@]sHC-@h*?N.Q+E!%_)/)?"R'Q6j*1(s[l)JPYLoYmO;AX;nnV41;<P03"6\usrS8sD0!iQYd[apn@B@2d$;
%Dm!`uCJd]^>*O"_>1B;EYND/q1mjJ1PT,/l;W5+<Y=2#mg?-Z7/8A$o/_7Ip[4(l9TGAggnsOc%]r4Af3Vujg$+21\m+SOVa%`[)
%8L%[8VY.]FQY%:SC/S2oCFIspf5eSYcV%82\6+U`]@^P@(?06Q`AC)(U[BeZm@ED85*aUSS4&o<s-4qa1+tTbgrN]?rl0l$VeT>;
%GK\4IY$K)N3=EHbJcuOo[]jNT]/CIKD5U*m"^JZBE%Sl"0!*dDWr99+g&eA3.'U.aC(%*9O1&fn*MLs>>\5^O`[q?%ri`r%F0u%Y
%:o!?WOh4Gb'J*@bd6`hIe`a76=&:u['n;e2K[Z<sQEa@&o>rI'V5i^:[@PmM(>fm"_5)6NDiVO"A)8hVWA_mbV:lddiQZq2W)ca]
%k#5Oe&8OA0WHDCSR:c#s(AH6.m\T`+VDZKl0.s(m1)s6,PX\GiKucLP-C!aG8Od&G[#AnOs(WGJmlLDAs*pSgaS\1K.]+#5>j'+n
%=bB1VkrrN=leqbSIFdk:&?jEaYl0d/pnng'gorr.PX]N@c+p`rNb8<=EjOV;FsqGqk`&O13Aq#piU#^T$Dbc5?)A4<b:1S8RQ6<W
%!udPZ3Q3Bh`>lnbM[dnHRdE+o>H<<8kYhnSgXY^\4m8at]lW9UY@iOO`(Qt^rc@0GDrA<_^Wf?qj$psEf62%hJJKX3DYF(u9t9#"
%Z2Zm>_o;Un,%h\g^JdOtMslf[p4!nU^Pi'JCJJTKs#Y<!^C7QT")MZ:.=p)[cZdC;7qNdg0D9c0HbRtOGg-,XDn0&No[8,9A*2$$
%l5]&.b58ON>#/p7^OfXkq<-h<eZ.dK?#$TA_A/doAiKY'$nn*5dHtOu!+mI8FVoC5CA9012=Iq''GmX3b/*5HD9Z_Mfqu3,s-1ja
%/i$sq%,',W[E+HS;2-V:i)lesAhd#gpgEHiV9&l%YFi:VTWq8E.Te(U<BY9's&!XaK'mqH.'GSa`Q$PYm7%"j)HZ@&aCYW6qH(g-
%9s!a3CkJ'`:<!64lb2_r0.RMLnZ_,>dkpkMa+=-W=];Fsa\0FSYFOc\MLCqS:Nfo-M#^0F)DV-Q,L^^qkpO"4=,ZS([3jOUA9pLf
%>Vbb;A<[j$Q^LU[KR,?&ZQHMc<#:CX7H.m@GZc:u(5\AHian6sq-SFtUfeu5U9ZJCIp"%'AiKjo>nP-';oum#J[@rj?#q./.X7EJ
%%+:-IB]<2=mE>h!2shmX9I(VW/qYk8QVF9d+CNbRRn,>j`FT]=;+\:-Cgst>j_stm`GATcc@LJH<P+%*lI\8$Kl`bmK/W&@EH)Z@
%CcKJS9h[A0*7GkbRJ2WkN.gB62_JuU\lgsG?"7.V[kB=N?^d:Jk4VQ208elRT/YcY4,Zah;FekgjZ%UE)oEH3fk1L%bl)PT'H`2`
%O0^kLobDsN:UJQo+iW&6\^>5oa37bkAu3o^]$Q1T:ek_fk=t+MG`MgB(uW/3h4#8jbhC4pe;n/o,.&:*U$8FtDmG%&"R.CkU5%.f
%Ge0/P3e(2RWQM\L]4juO7CQ2h-4M#d+rj98M)9a%MKl@ta1)FW82'NNs0t1GZcHY#;+re?Gms-Gj>#*,@?JTtfgp>DFFK@m=QD2K
%D.OK.N("dt:@]6Xd(71q[8i.[lmBY`Q$0F^/_45eX(f_Djgg5,M7T>%PY*kX\PW.I,tV%HHf;J=m?YcR#R@)9Zob8<;B;;LBK`K>
%V7?T,dAn@NHMrt@<q42YRZs+4EGa-,YnIi*_9ZH7.&@7+L>'tZ?!(>g1u]&_(C_rK)HpB&PfDD4aGYf$)#M986\u:^](ZVIfb>M?
%l8I,,q<!V<P"N>h:ZJ:]fsGA^qlbF:?Lm8?f*;1ZM4]u<qlEjDX#-G?_&IUq8ZK"Aeg&b\n^<V8VJ<;YaD6nd9b[K_XFdWTe!ZDO
%Y;B1GnT(fi;jdMmYJ,oY*I#)ESoV,p%>>Kil:uqBo<t3/UQa=ZWcR;VLTTCf,W=0<k#Le"@_(0LjjH`R,+>!][Oe/`75VK0jqcA"
%oV/l1phCDch1TJ0#*t&#k]e`!XV#Ukc_[#Z,+MkjF,P!T&^DuF\OAKeUt[gYS4b`13=4kLoG\@gV45EiLNN!Sc16.lR)\):ijkNi
%c_WbG4R6d2e%R&h,/@@:.krj=c.q2,dCeb+r&iY``C6DW$SiJ6A5(s6N9MU_CBR`#K@amO[:8B@4X6b7X&uBFJ$#Qi'R%(&C2(!'
%Wnk$m1$*VmBAQ%SSB&:A;#u8-QWhnt)u-j[Lj7ac>]!ZX^PT[H%_`)<:Oi`BrOol9hdi7"gQq\O;ob_D.S)ABH<RZOo-2^NrL3Si
%q8u\A0g</,#A/52P_a39)uMkp1r8#;'@WCUMTVPdY?`TCK![j)fR+:IrbmbQ5NSUQ[L+tP67=5#F[JHSrfo6)*,@Vn9519--H6!a
%lb-7:Ro.?X_l%mID=i:gh<!b5F!,9-p6B-X9/N!PRt`"(]nSThI:R(RO@$(edI-q_C,UZZ9sFZ=!q%W?d6A0R?0b/%s!U^N^dJQ(
%oZtECa3#II2(6%U8agGD07LohcJMa%4Su1c89Y"dQR7Cg]M'PWQW"U%1ijLXIE]JHbh8T*\CuUe3ET45*\$5*Y0Fa%o]aVofWKBN
%l9VE\(sJ8#]P/+al$)B(h`o\lh8<]ECgL`4*,!osc+7si1P^[*S;fN[SE%g4i0j=tf8PA!^2a.#j#gq8(EXTd<RC@3fY[GeO2#fO
%F"%\[n.)([oi:N$I3[.!r(Pg=^0u3EjZR[Dg#i3AU3_s596%/O>hF!YUT+8=r=r0Vc^+T)@l_D\o:T5Bn$I9&l-:"Y9lk+sph\`d
%X)r3ec,@jn7lU*YN156MD!pc5=Le`^9<=q>WAB%7`8?nmR`]^^rW+B;kP13s)cp6f%A7khF_;1B8[+J18Y+YXgOSJ!Lu<Sp1\2N\
%VtlqP>iP#C6DZ[23H&(XpON)eq'!i5LJ#oG<81?qJ'?URGDg*J<d-1%P=?n<^'.=-?/"r25jKk'P<uHM3gr\tEg)/-lXmNJ9c(.l
%KpYS=bk.BCbdOBP*5Wj/cInhsMiCIXc'K,V;!)\$lJm1ED<=^Y[EjBI7H-[H2-hK@8:;bc%[XiiC:-K`oA@^VU;ZWk.C&f?7W?V5
%+Pk6.l.YAsUE"[jM.nk=VluSL6gBB/W**!iXl-kGM#[&7J%]aiDk?lM=R4B7*q5LiBL'+Ko.7t![<nI&bc>3JGTO4J#OO:+ERKmc
%q/s;OX&[Kb@Ap%Nc":gXrjPt?8GIK'@4&#Z7$AH-cJL=`1#p.[`f9I2QO`6as.?1YIq/NSrT!Y6[p6OlN#TSpUlR/Jbs*0F0.>r1
%B9J#oRC04D3j2+K=D*\qoi<Z#)JPTAr(gGWK`?EJJoX9ZPI58RZ+LMDiL$K;;.8&H%*ug5Y%q1C6%A*qCY1QE0Qc(>q%)6N1EUZ$
%-ENa6n-f8B6%AhUg7Q<TbcAtNY?Ih$Du/u0.RJ&+df?pN*+BnSB-.P>9m&5;%Z@`fgC7\6LM&^g:XaR0QD8.2W249qKB`2tYA':@
%lI+i?lCcUCF5iRSLKT$"%i@A&_nZ4o=A!&ZdX/]49)\[;@q(QZRZ""8e_S[I'B1#1pETY2jV*e4ou#`hT.A=EY9u[61q*Lj).gK<
%q(F%[N"Z/8r2Y:tXJ)]p05dkGW8la-#+][uH?G*]o#36OkhbQ=8:X\"T*)6_#Vj)anFLlX7u\`XpV6"U2n`dm41]W^-(MJh\ob^7
%3W5`*m]94&'%@a_9T75kd<#Tm3VTU9X#BHUYK6sAe<X3_*->OD:K"DIhL'Sq-JN2l-GrJk=)4*SK8J3%nOUNo^JcQ[mu4ahZ/%K9
%\(4P)UJbeqRamu*ia:RkXSn:</>2BH#W_$Ml?0\_q@&b+^K!\R3^o]-peW_&kp?"PTf:#U$aoucj1/<mgo:33"7eS[QFp.sQ>V^#
%f*tHtC7=*o<f_iAm>?1eq[bIm-2&eIfpLa:aeehb0b:#Y@H-NID=Y=dQ@@$3B4O1VWRbfn,rgtDf8Rq1%*hn[H.@;fRU#t2qa%'*
%d&rs9:<)j47N\':*5MhWo$@6)j4ODFjPOQY*;,t///,ns%>43Nc\&c,<b[^r1)F^hBR[C)5u<:e^5I-:WR9i$F?L;6@gG$d>+,=u
%j1JGU%l/pb<j*7\kHJim>1c?U<R%OEQ6MT_[<DREU13e)kAlqjXAqUk0V*0uX^\h'XIl%aZeM*fDD.4>Fdneo@](0PX8`K=AK-ro
%75ONk`HM!W=_sE\I)10LaIMo`TT<qK4@nU3aPBOte#X:r!Hf,r1?%NLQOO:iS%W_%]\SNk)/JPN>/aOhc?-)Z?EIT5g,E8MdR?Si
%X4YFcDX+0(VWQ9r*SWL>nT38;m3lG9f^ufs7.NF%Qe,u"NBtM7a>#h6C)`&pG-UR-Z#e]5JNgmH_fjB5g4'6nPMiW^AuAo$(=0"g
%CA6>9js:=`JQAH`1h]IjT5H!AdYUp1j*h_b/g:>WQ-1-N,TFGL+q?_Sd-J,2&CNbZC3p)^(=ubPr->d&4=f!CJl])+)>EbpZSeQM
%MG9m.S`1_kncG^N%B35D:gXW40`m;[djp$"RJl')TU$_h>,DpPNF]_'D$68%\)"]U]\AV;A@67OP.Ack?D1H$L"q.oZnW$d25,LI
%epjsPX_)6+`D4R,F@cg+k'7Pg%dADDJ1TCr_(I1d.I?*??erHl]V6u2b!>!S2)S-ia]-CPhe"l@#*)(eKC8^uW')eWM&H38;R$Fg
%lYqJeE"KFSQNlijr'9$3mjD4A]K/nP[MYjZ,t&imb>tQ>bs-f'$T\43kfi&tZrtIOrZJA+:6V=dq8E,p$Wa9->@[kujS4Z"`At1R
%&tbFu?Y!4fA9_RH'URsa@d12M3poute\A8MqH(YZ5hbr)9'-_$Zr\U:"gs/mH;[OW42GmJ`&A_@okL7Ld&9CHoo2>?)9H'ig!?m#
%Mc-le%a#)ePZ`Fjljj$_W*/I#qfBo_mcFIQQ`nHc<28,Rr(ON7$`2!DA;NLb$Hgn*4_E*U4rc8a7Y]^l"S3O1H2)XJH4IOCpTniO
%jW:lS2VUi?NX!F6V!W`=$-*.f8K6:JUi/;!4/V"N,A)>rSOiP,J;!5UD%DB/Ahp^bbg,2;27S@kPLq10VW=(#:1i-(1$m4s[3+S5
%rb.m76YB2Fk'S#'%_!`H!2)3C<L\A6]+[$3C135&_bE4Ze^bV?e)c7+]MujRkip+5VM0VYfM!W7(sY=2G>j;$9(ep([b%H71P>CI
%b^tcc9kfhi2H>gU_Du=QP?-\H(+iU?HKrN*D%\r,%0[kJBM,RV`VNL@^k(L<aH(&gCmCHQ>'-p12JuC[V,Q?H#9*bk445u86mip-
%&h?am<p;J6IBJD3)/Z/X8#LF)&9HT8UCkIG=#?+HQ7LOe<6s.mLhGshp,JOe+.SIq+Y><Z^+:;>5</T30_:&SL/6;bX50jV,<0E`
%^P-2UW&CfA1@@^V9<%pVnd:]&=uNu/6$n3k3NI>h76E7.[)^q1cKghM1B=OhV37+.:`':oD-ns)00:EGPNFjWIBO<G94qAYG;?Fl
%U-sHoJIP`3@r<UW<Ln"Z>F*"U;FG=nmMF,J]9qA\dC*&0i7&\08're^lrE,Sh_Jn;>HRU0\OIh:h@M77G1K2h6>@E76$nohot>>s
%#86RK,"/Q5Fn.<@)T=(4bH*o$jjLZnCrJlD9k`@CNT04(9D\b3>Tt%1IoO^`rQ=3U'Hsm)#TK@R,_XSJ!]eK>nZ=/0:-*0j>9kP<
%2r&<#:nS[R@O@IuEmUeW2j.'!M6Po3-"4"DP?Z$Yj-:(3*ALJ+n]M'=<3!@d(4BGOd%=7hHdt7*1l<F$\4l=J`pIfTfre5';B.O"
%M(L4\'/#a@rsZke_p(/IR:*D``TPpT,u?H+WuuM$Cbn8W*;)4pi?&_Fg*sFEV-d:@.qqstFKUj>C=KB:"sDB^=jhoPMQITZ:^sUs
%!.1fh.#4:7:r.CQ!-9qNhD*!ZU+Jra\(^5M:tDkk\m_o=JD!;ukR&CoWDTYN]F)c$)h\l)M?#!2CW@o/-b^CRW3]sFF4C=%6A`4Q
%RG>@mT@]mYEEA>*"3!`mU31r2.2p5sP,(U57Q4PS9sB)pW7A%-7h]@Lm5hqe812ZXe`tM'#L]YE:!TaEbH>a3#gS@L<F4Jgq&@2U
%SI%')L?*Y!'7-_DkcYgt0\O`K_p1]5!qkJ$DP:(W70F9^?P5_sQ397RAo<e!Vtb$]"52SC)J[hE62%lQVWmnIe%o]](UbA$ceJC<
%ggTlZTQV0Z.m_[Jh](u(8/>pK>qEl<Ar;SRg3jeZ6B(Bl;u=WOjP'/=mtcob2>AfG$=*I>nlUdYL&;q9Wos0'6X$C`*P.qlAW'`G
%W\Q#1Z1N=F<pR$,Cpl.7.jgu>>DN$kBc(tu+ja<u1d,Oh>HLIKFgU5sK<;l<*]!e6)s)!9[$@cOC?$f-'t,\.4'`3Nhc5:n6`bcX
%6'62bfFBYN.VD^SPTaU,aaY]0k=*b=+H]Al/N,BBqEo]aj?<E_VV&_GEd!5p'5a"H1N,A11&Z#\Sf?ng=0n6-O`Y-&ND*0OiYNYj
%FF%8p2DWg;4I:mVpi;*q*-KW$q.I95FArT&<R,+k1UWr>pBqqJZpqH<8Ts8X3'Te5hJ;0ieb;.h2ll\8$;gYkBib'4Wcg/2`[/q*
%AB.5E-l(6QWEj@8!i?&mGVm6`p#S`'4DA>`'gE&N?bnt(*l_5C&tIbTj@T[l2E`<"[!+A7$CdWoX7be<Ge]:f`peu>jL@kVX4T&&
%?u`^2*##k'Oj<?'9/`BB_3OHQ)I$iUNEN]VYp7ob*_I=[-L@s.derE'`tqM4<O:((?*p*o+A[#.ji/P-gT[5?L'q>rM!`KKH0'^m
%g*DUk(McpqJR/5Ted0ksor%Gfg5$O<8q%`nA.,sP_EUOE#H8Pj=/DBN0,g6@L'o@rdF`]E/3H"N<J7/V!4Z;#"t(5#qH9RqXb?g:
%Be%kcPSdobQiTt9VS>HQ3*?Me5"Vc99&c@%hY6@/U^UbWcB;3De%,22-O-sAlM$)UDDrNrJRlZcBQMgj]an#1G1*a.TtXu.atW0>
%8n>&Yk;DD<ajhDgnQ(<=33uX.ZU/!^cY!&pCJnbkMu]k-PcI01oS#3FaF4PE8"[Mm*DO(.r7Z!_W/W@Sosc"5FOl^5`G#//gd?rX
%GLh_ia&m:7bi^et:tO>H)_uF*]52f6Zur,/8[_]%0D1u^8A!;!.p&lb/,%-H];q33[(gXp,u9R/#<=Z?=GAO7Ua.X06s?ZkC,'=c
%;P:*rWSKZeG5$p0K(a\,IJP)YlA5ugJ<?7s=kF<?f$>%,,E_E].,YNOfr]!+b3"_np\$^2:Z6,XDZmR_4Zg1Rq=2K%-P+dd+-p9$
%pCC<52VYk:Mm`/rXVZ[qb=`ASX2So<Y4MA_NcSiMoBktp=4X^cr@\[fD74d;\$0ATo'Yb.F[snAq&fG(AaSpJqR>gdc&LgcB=%3X
%=JaVcY4(7_LTOm)\'CV\g#(ShK&c7`PGb7)2Z)E[jB_ZEO7Yat?b!T-IbO2OIsg(X5-6C!lHT9&DXY)^nbB))VcUrDGMd?;W',B$
%YK9kQ(MAT<h0&[RqsM_l0=d;6m(;e+NON-h]")f`pq"#eajqQsQgaSS9=s9m]nZ>_peHa1YC(ceDUgX\+4_oG(Z"HdpQIeVOmi&9
%-%5gVk/O_4n"h6IFD(L*q6q^LFoQ*'YIo'pCW60j2g;oTV]g]f:b;A)2?&Z5a/,>irFTd@_E(u[aPAZ@5Mg_"r;H0Jp4Ki.m@a4;
%l+7aU0%N[li[+T(52N:*?c]9jD7/T9X*;=^<PQ3qDq48=Ha(qIr2#b75JI.2'6q$tro1ejf/W*b^2E'OV$H\6:L:0,](I^PWiitf
%WL15>Bhs5+\Y_l&QLZ[imtc&QK>;nRC?;kgp1f^*=b$*TBk9<WWk!n-RD[)DH^ic:)gC0-/Gh=XD920oG4%J8\!u7rDnITM?8Kmp
%I-#gL2X\tWSiVr#?s,ZTn!uBHYj1K(j[3ZL$0]"l^8?Cno.%LYgpg_$p%VH)YAs'L2suBhctg"pgNs_9j71U8LAG]GrQ\&M^V.;O
%?$\:j)LEaG+10'aTC+6Lq.Jkd<(HDLCoitQ]`,pO)3($[44pjVf2/NM(XWf.p4o:o4ZPj0^g`a\CFanWlmD5rb]5m-5>&JMr/\no
%b3I0B42p33]3ES6gG^(to;>B*-PrUsmdP,Y<URdZ+Ta[ulc2*Z;#/ScL[WQ8&XPn1#Gh%IA\U1-Q>Jhs([Y]g?THsl1J=_)ikrf4
%n#X9j<C5%(R[mCUn[gC=_i)BD]7'5#>'orA)6]39=5+4ei1oDS>>>.P0K067*bToB.Tp"u7B]jDr1pf$aOg&9m=i5Cs0Jb+V5's6
%=`\Z_UjG1IntOkXjlXp)``O=creL2!cq[utIV,Xk@93&]r1L99^\)RC_E%J"F/Ee:ap7>-Z5+ED=cZ#r*/W=Q^RI<5TsMs[XF)Zd
%ARB'@HU$;[Z3%>3hXSqgbM9qCX]L5DapV"o?_3MjgZA9%[\O5qYe*nVT"ON9mWA2qI+imqEp(Qk+Qt[>No2%pH[.9;GJ2[[Yq`Z/
%gAC$rG_b%=kca+9DX7"amlt-f?4ZR:IBV,$Cf`\uLJ?sSk<n:gS\=4bH*%<epZnX(7h6bRY9#oRn``L;f(1P*dnKW2hYs;+mV05'
%49#4'^KQ&k<0.S>&"YknP?6$#c$(O^`PRZ0jo`;/j0?&a-/qI2B=[il.,9$t51%1@r129tchlZ?=A`g%1"5k]5M.>fq;aj0W7H8/
%Dtg.(S4qlDb<<F]Pg-o>GhetD`%65ei,nS/]mm9"s78W#E$:;1k:=(JhZd?&;5%t*nC@b=KFDfE+P!dDL40S#!"COc4AY>68*!]p
%Rlee@V'j4&2t'>W5MU\boSI)KYIW]Tc,Oq7qPK4nh*R<hr6(GQ<sfm.p-\hEB64'N+mi'3D;O$I^!O&eYKqVcFhMG<8(Qh7ZW6bh
%q5Yb=m+^9bH2lIO*TQ,7Dqk-VpAQE<H:j@'5LG(h[:f@,de:#'p68l>plI=D)ZI8N$b=MXnir]*IH(ccIDV%8DqG829=i8_X;"od
%-%BHqIVS8CaTa:Qg4PQLhR/&<YPT?^C[f3W4uT1p5E27:k9_%k+chHbJ_<ji3>i6;.W`V6^n;@ff"&9hCUfF6/n**uDrlJ'9LG/e
%K+-jsf't7djB8+EdMS_m7Q/QDhaC-tAsPoifndtO^Of7b>i4%h0shScR\@]^LVU*Bk<'>geK@ARn@\VtjK>4Yn+HuPY8LTlVb)Ja
%jg)t#q6+I<o%*e)Q)#^`7gdp7j8EXtI<c]r>W&"Ur-BQ.AISu,nt\Kc1d4Iil]B9;CEbZ#)4G9XQF4OmSdc0B]DjG^3qV!BD>FSV
%PFI-"IG,KDD@C.<&l`I+)WG197RU5+C^SBZmPc`0@tV9hBUJ)s!Uql0r+V<OjN0hOH9G]t2,R'%Lu,qB4E<R_i;rs)9+]@uFl$[[
%ABo[laq=K\7dd3qrfR9EbLVdTaITtjfdL\%qB`gepYP<eZ,L$i@YglTk2&Sd[!V@WF'Ul?om#ZULZb@L>Ib]j(bqg?*(Ip%6(efK
%#cJoMr&>J)kro8-0=RGVKF&`L*ZK"-l_!kY3V2h0$]Yi(Vt?@o#C;B]I%e)4/'AYXs74i=/,l!>di`ka3.@>YmdAVL*q-9b%K9N]
%D#3m0@E```YTKIY)tlIfr6-0tD]LU=;5gNZ^`*VZJ^+J_)FGY8HKjfocMd=n.0$%?k^-243W&X(^"gg*Dh+P3f\YJsh!H'aD1r;j
%SLnmD?a<OBOhEf_\2pd#a:X.Bkfn8-ILTWG.rRJhX4>,6"K?ToD@7:?NSC)/Ng@\>9(\Qs[+#mk9MPZZ&%R<Zrl=obmHP3pFhL\f
%G>?NZO\T_<qV?:Tb"[h4V%9%0_EG&Mm<8_b<k[=j^r(F3,n?O/cW;/OP;g-/T7/-fGOT#;ipk(Ve`tU2CMLNe=Z$bj>a"_l$iO`V
%2D)WQLX15PkcNtfA/Y)0p6CTV7PZUY\GoOH]rqZrcYEeKqVf7uC_.PcIi5oSVC@cP(VZM*p%,d;h$QU<4,.A6>-E\XI<4`5Q_>6c
%8_Qr7ipUgVQ+)fua_DX_`l%A-W$7#'E!a5qZ#:TU0?<=D>PRpbd@J-LU\ETSkL[CD"?)S7Y($*"df,0,2i!kZRud6o.M:&)GVAgR
%p$oX\ra@hbTeH#^qjMlb4$1sc?_4\%On<U5_YA50[Fr:hEbk(4e(rL%:qjYUBc461[k;#N-K'AUkpu3@Z81=G/r_6fqEI@S")Y/F
%YA*JTYJK^(rO`Df_M#DumT1n=ofB7oXmDOtce]CdL2T%k2qMDc]M0R3`N?u%%s#_&jWCif:YNhNgKQkF"#%NTV4J8an1+><Ctc4R
%:6/K1ImYQK?Lt9iI@PD&:0[SJk5*g;fiV.sY\U`"/%rhB\WaMAO7\17RTB3hC!pslY=,gF37WS->-6/QN0>2DC3gMmEP/cFC2=A*
%+g9I-c#@^to4M*C4Ah)J,Cpc*6_Fet%r:Kb]`#rsr:K%$8#'@ea9KTZh2eQ*f)Fn;ZP73He9THbB911cRqo3W>XgpC`49/eCo_@r
%M;V"lB="%6rNO!RZLgGeH4bQ%%[M:fk]ZPnPW=0l`.mG6[d")niRS4kaD5SWTP&]tFrtjM*^=Zp0c/E-4p[BopWcQQF7&qPl?_Rf
%g%jdaLI/X(Z/62Rqe*u;_i&FaIrq9'k:qIhRVGJ0c?DpgL7d&g60hpN0nsa^hmroYOahZIl?<4+m^q3P$$j6tGBZfi`n,V",``)u
%c>rMV05#4c54=^GCCc1sPfdU0hn(0"lJHbHX0:FB:A-W?O8d;cn2HXkgFI_+GBgLkFfkMbX3dl]ItY4dTcW`":KC&)p)al_q=:t5
%\pgnFr)VkBcT83#q5qo6cUpM'#HUu[kFK$+Zhj9;bDJd4%%MK]pZG.WWTcVeqFs3/h_Y+W6nT:.I_E$eX(rF_R`eLPe$XghS*MY5
%+.\p:a(n%:?11MZdF_LTA?B*#q`3Bkdn3s<5<UE2#L6oK,[]'1C>Kt,1R<Mk2qJPre9KC#`b%W)G^&1>l,..3T)>YEdE1Os;$"5V
%frdMae_+1XgabG3S.E6dYIECPMdW:nqAXXR>5FcH.ifXJ=mq@<aQe8eF,QQFp85(din;'Gr(E`a!4#eL/;`+SBDprJ>U=lKkH!^I
%[BeNiP,aT>>mVK=Dj?t%g&&GPnF!tg#l2Kcg$5Kd+=rkaGpi@T*Z%T?gcqYR55qkZm74Y(C!0A>mWNg"[N7$JCXufT2F$A":@@!X
%&=I0X;8;uXWMO-8?VGM8cS&e(jS>@`G4$kha3?bX#7L@h'0AfBb'<m.gs/L:ooICHlha_RVR`O_D$%IK6nJ"MV6PC\_)@2":>S.G
%gt[/._D]eBXeFQHkTe`kI*d;HAUV5ipA'n*eq6qC<VUL*Q_j$bIa.!2CC3j\RW/LQ2Oj2s09@<Q$/=S_MBG+YrBAeSn(-gA_iKT/
%grkb)3VM#O041(;jgr2hYiA#Z>9]hlE-^<L`aY+#h_4>`b!p_"@X]E6DZ7^Yr"ld=fq[gqJ,akBUQDN6DK?;188'+IfFV;7]tO7g
%s759kWaIgHc1+D78$=HYeoF9i_c;-"7#p29eTk'64l(/H[I!ftZ$('('\*[8&pM&2_6@PC0DB?/d5@^k)p>q4O+g<1HV+\'3%Nd1
%[&d2rq\B_<#&01pSb2H?([K\#[.I/r;"qp,(2eV=hAb1c;g_\#/FCu/rl(5UG7+/`=3$#A/W8u>qqukNh"kRSPu=;#qQ#[hGU"p*
%*oGYrd=7d,DQI@j-GKbemdD@Ar.S>AR%qfIk;$[%D8"b.lC<9V:!nalV0/(gnKO&!YC%>iRcF>uj'h$pYn-fLM_YA"Qau7t_4u6g
%Fd:+ToLD4+PmS)am6C1P!nPQ9(QWdTm,$LqlB0Fup0s#nqh;4!!h4BOTC>l/@q]NH<BbbKYn7Z+Vp9=hnEAi:6g2V&8!1f'NV>!U
%"2FJ'mGg2[hT"^scW*(`$L>mEqf2V6Ur?VbX'@))^"i;@/'T:8k0"eC:s0lO[42ec)U@aAXnlo'7gqY"5&^CYe?eU^pbhNbNM=&a
%k27q;gj<gq3Z,K"hlBg?jN"^o1rPh]q#9QM59:OZXDK*-[Jd,<Ij]Nd6_NE6c.17f=nDI3KQ\a;hgaH2Ic%cN<I]B\k-H:(Md_c]
%Y<UBS=(?@Q6bUGQE+H+j0U5R?aQJV5&ffeU*B@glVE`cF4r!GZ>/?NTgS.N#!qKIWc;!Rs*gtLD:2T=;O2K6??MR;Ss'f]AJGmt\
%fm1`jMKMB^45Kd\\&)4]_"MLEY2)kT[gM*&n!"uDbIKQm:<@.7l?_5F^Z]gJ^!F;06Y[4YL1![=AF9'!ZX2Vf2kpjS1S_YZ:N:r3
%&o>P"!An+BEDO4E9YTN(;SI1dFiWa\lolkgf!;?/YGltT5,T.[4EB&f4[-lGdc9;o0cr;I!XVm^B0CLdo_%r3=**59Vi*S=!d]44
%&"B,F+)^7K^A.O\+)H>:h-W!q#ejO([OWr8,[XTC[BkM_BckC%5"/i)T,187?WRT(%t^"]*Bf2N72_RKDE&n[]t&1Bd0l:bG<^@#
%?Zs^iEprV_pAO9<-&[^aBYPb3/LF+Bb7601WZSI1\UF!nj(BNZ\Ck&4e`eprZ\a_6;tl@DV=!8Rr_[gGjDL>H_9St$hG0<`j<hpC
%qo8m8Waa7XakfM<A="m80^\@nHh..2C*DKXnb2)aJftY*nqBR$'m\;mLKg,2)_29(%!?hj`pU?\;XP?RLh0PV^:Cpg5:iJQAuE;-
%5ED4-e_oMKij<1PgY>YIs1@mpkJPJf?k##44kSEE=oQ!TMk2fkrKJr+MnJSH.[]r%kG&jhZOakaWSQ%d],sgQhq;C,C,C\Bd/p;k
%iY+*1.tp&[qp"_F"GiY3_1)3$MoQO.</ih0>tEM#oCfE$8h0^]\St>OU?MHud;o6*XbmmdK/@K1cF]^6*.*LY]mY*AW:QrB,cu%c
%ds30FBmtKSM5J50\$Gp9*jWp9]=i%H>OLUNLL+<j:f?djVpr?Wbr^/fT(qI=MtOsOo"2<gfgHjOlnjK&q-Z_M\'H]7&$UiW%1G;_
%T]PP&RQim7-lG%dJ$"141U-Q.2[*tMMXOmE=YLD'^EIFkWpjEj?K$/mMOQ#GH@IlCJ+<;o*Ii46HZuB0[Tqt#K_NJB7BYO^O4?Gu
%OP:VnOahL4f>"H[E[TW0.7L+F$H-"IMRd=O..g"W]pMI'p!*05Dn"NAhMIj(HN)G[?Jr?%\Jk02VW4mSMHJ]-3=he4S\k?]rDp\_
%.=:Bps3>Uj<6q,!Q&hPrSQdUKWu$b9nZIB@^.j6.NZ60Mo^1qGcOZ[-NusX9k-_fO%<hR@XmJV>KadY/'F_W;gI8^HSo4PBVuMd;
%jVbR7-Zd)DCc[tH?h#"7*QjMWiU^a'NT^MYlh^,jh?LQK(&BTV%lHpq+-%="V;:W@=Re#,06K<.rXlg.e[j:3/]\B,*;&,nd8Ome
%eiMW'WS*2iMM3DnpDTA9I*<mc<,k'pgXu7KL-FjB%j-MAah3,D4tOTORe!j/?%#r`s6KM!h=*2t%@rFelMfJOs0]eI1]##5IY4Oh
%F&'<,qs@^]VC\iFWO9r94/M(XUT;Zocr5>[LVIWsiD0k+f*]9cPkO-(no:Mu?U_j)aDsjm*DPYAIJN0T^A>PC=7gQf#E$o??.UcY
%#Hu>9Q>N!Is(T')jm)UDOlnGNlP!HFj9%l3WFn(UZSO,GAS3T!1[oS.e?YP+pd1h(bKDl"T@If!"NeftL?9,jb8R6q$->#P01.Ib
%mHRj'G)0hD=khJ#=sQ>ufK+=7XfUuTr*$7ooeak:XE^>)21<BaPlCV7b;>$Q`5r`iGI+/T;F?q.CX]%2^!+uC.q@%(Rc.-ha.qKr
%f>aSolXi<#V@FW*f[\6*@s^%A%*ua\I!V9_d5VU3D8k%J=uI<%Fu:5:/"#C2`#r-&ZFYs&JAf?I20u5t]Hr`'eTB9ZPE)DL*M#TL
%hV\s_N/[-:91TCD$mSEKdqQJe'A,S127#2cNN$+":>[ua0q,+TGo=fDkFsY:bhd@\LY,#T[2]9b_I'IhF!Z9M/dC@*0"m;?DS,O!
%hZ\pP9Jg3CPH_@I/1nudZ*[tND2/6SrcO^4X^$\sor'liO+pOCLSiuJ5/"aOLiYb>]KSl_l'f$]+U-nCh/e5UN^qOX=sbt[(<eWV
%OoX<p;1+G7Bjn.Vc#^,k[(q^fB._$p0JASGf;#<[cp:$[Oh`;QXCGK)L6b3>p,**QFKur>0*rK;Q"GTdZr"2"Z:8Z987IC+/;YXO
%AAP7=PP(2[P/(b.c6Q??FHA%V>!2+Q=j%$Tn.O=t.CK\TjPJhrRT\I>TuP-S82Or<$jhRH`i(MnSrNi7E+ucD`(1!#MMNVXV*eq\
%s8/Vg`,n0.lep:VRYaj+=YpB3!bF)\@KS3ZX2CgfOBiZ$+jG#+#K*lME/@q^:F)F:KQom1O5B*2-EED+$Z-egN!_kD[U^q;H/-b0
%0*@3.(]!V7NQ+Pi9>f7f0q_X[+kfCR?SaAQ1,k5%Tg)CpcVR#h]E2#;Yo8X>B3guB/L"X9n<ZF:KcTe5SkN^=lmk8f@_l*<r"^_/
%o8,G$2N[aqPL+Y;$aXK^+@3icJjSH?<2MUm-Xs%=qYh%uBJggd<q_*ogLM6;o#]($(_`c:[[JR9b@6-`,,teq#>[nB*17EKaEQtR
%.LR6Y6cRmkWVosH;gIfJ'[*5Io\"u1>1V.c[KOqe_fj^lg>ilo.q=^OP"^C%N^o"9PBfPH.$H3i6RiBi6<!B$O)6giP9l,]_OU9^
%?56@K_di^3]',%I-;.d13*M[j4N33DOK!cK5V(Meap;;$I.#;`CRN:T5Aa-U"OF\<5>SFUpXQliNqBgG_7-d8e]#Dsbi&Wt'D\n_
%V<K;tjHDhjBh^7nU1V;*\`=nBO5u9<mZY^0m+m'Z>;fV%?O+KI*A+h<r$Hc(WMR#DS1q\u=r:9bP'lin/FRi;JG.@M"q?]Z$g,mD
%9R[4\T'$^-nfXTsE02i/-i>;ea=<,lqR3@_:2S*%K1^'(2.-,IRSA6:g02(j7o[rZKPD,@@I!(+IkP`6O((sgKajAolN2k:At6Fc
%hT<'K3X25W4lqhCf6oO\4tQgU3t.Y"Vut>k,cf+7:UX7hKoh05@4YYW)NVLj$*uoo`UcfLM2cRH$"FZ*DY[g9*H70BS^uI*9dH`N
%2um]H/0'9oN9/KO3rG%./Fpk5&Y(-NAA:Q2lU,#rHB>t5#<,4N7\$5F945Oa"88*;E]i_nT(5gO%S_'(p"?h&A8GGr9Ype56mXlZ
%-_Z=&X/B_SJKkDc_^$OI#j?jB3WXDU<-YUG_#VjGFV5o"Hn-I3ZiU_N"EP%Ag@4U2:6!X$;3e1,1B(_e&lp2(JX**D,SNpB;PuI;
%eAEDu"<o^/8!b8J(n_pQ^8u)V&5*r*eUjk'9j<@=Q5(Zc'WP"0]S\>PU,n+7rGYC40Hk.VL-,bo4"N)0ZYu"!HR)smAFr)h_\0`D
%OX]u9q%2)6lp'q9ZWLZg+"Kqsoa#j^NkmBR"b[N+aa(]?&4W?79kM9+&?f[HbQ(dX1G&tCh3Whh@)NU@7m&J=RL3Sf,dSFE*J;jG
%A"ZPW(cFo3=tq^a%l>-4K?DV0-qbBCD*ZDVP?fTi2!Ql,(n0Y(.,9V"eVR.Vf3h;n@MC)C0J0CgCGtkEJ3ks5LS/o2.?VP,7'g"@
%#\47gdOcB""-\Xg=n'N>;l*")`kkA!">;4TdSei=7m2OAq'ZUL07lpH*PrAb==o0P*a;[6*GdhT97WD2V$\[QLKIO7Kc(4P:Z/Ln
%'UU;'hEWbU]uh]1lnRl#TmH>IXVlsEesW>*\B>EJAdH`)S5[I=QZYrX1QafrOT\"+XP;Nf`laSfcT:u)1aElUCF%4e+VDuh3QgjA
%CWWlNE;HpUKQ]MB+!hSq)mVZ9R!=3GA:LDGH7c=p-)(^LWq3PD=_Rf&WBTQ#8LM&_)joA)Moqu\>_i_D=^Xsd3`%Cj_%AMN-;u-t
%`tKEqBVYVPYa4DX.WBK"9c!mgFG1HC(`All),6+h'?([XNmU9I?)b`nPrfF1a5[gL9$nBI6WR_Ujh>F:Q$>YYYR,c"J8]2>8W\$/
%b!D):@B!b95`"!T<0Y0To[pOd5HKrY)JV8P=Un(+6C&agqCn;0)J##P+X>KI(%h\6_XM!$,.*@ae4#2UkctubdN-nLcP$.m8V/6s
%Y.p<uO5BlM^3HlbcTn%mKuN&*+i@o*\kjFFA]!8j3]*ClOn@18P(g],(BuTP('ZK9TiFs"H'G$RS+-^%hk[4##ql]WhEGa)Jm<WQ
%+MfD:j!ZCbe)@H(2?>)H*%:$$n#W\u*FZfedU</u6YWIYPDr#@86/$h"GM@o+Tma\PpeIsc#gq+PJTl/:,6JohBUZ<;??`J3M@:]
%3[6Pn#/_M'V'glU6$bZ#e"C%.0H;m-oms1m)?n(\=%/-+)(lNc:WSZ20qNH:>$MP_FI6!a6>;Gc5Y+p9CI(aYTcf^-6r*/SpE4m[
%br5&1Berm(;AC*4?icY^+QGdCIjjl(H&7E/M[$%'_<%qhP.e2-(ekCc2B*F;fu.kr:Z./SEAq"gYdpTt*luragS7S;L[@o`#qsFo
%kW1rm8?,J'/'-r,0N]i]L4'<k"8EE#TcpbY+O5A=><rN^g5Xb+2*g\*ai,CCJF!galZtb@PA%CZ`.;R=2:KVHKlq@#ciHr]9H`0o
%X?b0)ehVoh\e2rZa>R02b5k>V2)mhc.1*lc(bI%4Sh6<r7iI5HL6(8O?4XrSW?`s%6NkB>K5eV;M:X&V@'=#AEBkek%hW==%$Z8`
%`B1k@Hn>ZY@e`&D#;MJs:^6^uNF1ZpR5A&aYZ)<a"2WV-dmL&E;.;+G!WgW!/\Lj(eMM2J0>bk7P;*UD6!cjc%DF>,_d`9sFAF46
%Qj>8uF@W]F8;PM"#cO_*68FCS&-o*'P/4/c(u7BS+ZogkKh,MOkK$-7V8!Z0eF,8p3amBUAii8oK!1;,7,1'>6`_>,h])Y_e28<r
%)M4]o(;PY2o]HR_0Hk<b(0E*)&S,=s;NVM5V1KrqO9I/@:4\E"?\fE:fdmplAD0n:!@ENJL)<eO&2PA12IDRd9jUJ9NKfg,ej7qZ
%rmF4(jP[Ee762>$`8jae4W^^e_\kAhVFm_saEU$f@([qSnl1(_+NBV.OuTs$jhmLbP$iD6A#<(.p;jVJ^1XE%+MH$0ama+<%+1..
%:ad3QbIK4?-<jq.I[i\eW17&SQY7QI6o&U:)O"Si8=$"nQR+@H;a&/((PkYCVD=bX2)3(S!/?jIY]n:ophpW^Hn7.7)Mj;&MFu2.
%>?kUNi@#FR9?&"]Q<d/bZ3MG]%KK"W>och*!,2G#'W<O`+6k,)K8dA`\gNXgi)O5%)^Q+&/3eZem2<A-.hCNC@jaaO@u=!uAdpJG
%Q@]2M[W3@akWmMu*$O=_4,P]^ORP(8jf\th_&6)uW1Z..K&n`fQXFMZ-)%P;()mf?@2'V?5YU/PBUk5B6U'!&JQrZ'i&jX6BbI`s
%h^8N&"XGm4#pe%5!pCE:E)WTt>mMH4+u7QWmKh?"!W:abi4??F)b?.(",ZZc$@S:TRH#ds#ldDlglcc\"k*u88PkqdVUPegGcMLa
%>gBJ13dmLKKfGn_3Jf-f"UMtFg;i<g$J>l=?a[hQ)j5nDH@a*Ea6t0elsKq2;#%g-?3,+Q3#>m%j;pkD+[d;bO?k3L5eeT^XP[h+
%O\7E/ZinqRCe;S_O9/dJ*UgfUaVC#X1giXF\I^O#KqopnUNQ'/Q<5VR?a?"^c!*!VV\4)k*?ocHkU8P!(UAu2<)Z`liNX+?5sV#o
%_\s"$=B1KL14>H8m+q_'5jE%5.@at)"A8k36`uUWD-E*MLF:Pn?j,Ao6om>NbV4cG0/&f4MPha=r.4#;c1^pHP'9/ea^t?!:W+Cu
%K.>Uj["Qg\j?t>e"j'8$`aX]p1H'Wsd[m:Y?oc!;3?A]^LX#Ak:gfK,orrY]W>Y&(l*;&i'0$OK$A5"^A?C9uiK!(O"9Jst[)B_'
%PL1U(e_-4OJjJ:Aa^XLb@'5k$ROmAP,;GWOH!K^:@3GsU\ZuP&X).i52,cDa/4h?7LIEdgMc#>/Mh_I_GjgYMd\(0tn6=SGGVISX
%!p$SiUp?nS9k&eBk`HX6[k%@GhnI6W@0_j+j(Z(P<&9CHD:oX6WO`\eSFBfT*TG,8oJ^1Z6I+g5:.A-_2\7l6!bSs;E\K,f5637>
%.+i4qS1)?(jG@#`>\*RLaVSn#OBE';DCY[Dc!9Bj8MtGQ6HooXM$1=)pi,SJ)7Bd-,7LER-s^A<A$J];k]MRA_CfZ24!k=nZ,j@b
%))*"8=\%%]7:a"T;cGhr#o!?PS>C`EWDnTsRd<,@3CJ1\*2#hJ#<=gh9o>r5g&9s\]ag[3N#LFd?W&`IR9W;d_$V>U6TcSDan[Ju
%,a$'C?ndJ3:!&0T`11T/@Y+2'$?%\i4[`n6/ZaM^*3'E`>Oqu,g5],dpo#ibCmF*+YY#A0K!&q7X#^NYTXaA+WX==7V6#Tu*L]7%
%e-Xon(fOu,%#m(XW>&+HUK_b74C>C"=g#$g]GDAdGU?#c(gk(LPL+8@>7*/KMQCYh;IO,6ZQs4ECd+8;5(nDb8fQO8-4ht<-7qFM
%UXMaZ0(d60'!"%\F<o/Ln8+bA2Ru"jUCU"88b?eP5rZXo'WH&Ub7MlFdpb<G'@8>dPAcOk<!d*&=Ju\^$J/nZlduiqpkC+KP0=Kc
%O!&/N,jp2r?*Qs(KQtCnK6RX//0=AHlm?"Kc*147fp^W*L%hp(V3suj.[tF?Pdd<R`!B7>hTmH%6;@M0I`M+eiNR#F/84f.6UL=B
%Cf\Hm&pgr2G45L2iKP@D71@6>qStRYCnChc[!Jh)4q^(V=qVkZh\K>\aP^4>CdYLR@%SQiNf2O[)SSg\+A'V]0u+%,A'%9qJ8`60
%2V1ES@\AI2YdiC:K(cFXLA%"/'U%mLPV+D#Q9^og&Mtj8=\Waa,8r/,VQi0,d;52E\u%%_)am0bm[=b?ED[<N".C<T8(^?L:h&&d
%9@FUKE(j&^9c-be"U(d8(#Lr]qc-0$%hM<6,mP"gU4k.UEe7Q8`_HYt1OKfbq'3P)-K$D38*ZLM`$V3Jnp4&GeB"A"ETE!/<MVhD
%0Gmu\(H8Q_NRbuHW@Jb%`\sU0arjh:K\"?f((M'i8spUGFpMeA_99&O6YRAg&HP!uU2>o!=ZGmR9*[?X&>`g72'l?)eRY.t:E`[a
%\Yscbn^(C2fXMQ7JoC]V\RB@h3#D;C#.u/50\HD^<JP(i<7]oWYp[pQ,WoW\.,*U[aFemG>>6C^>Uu[*%V2#M:B2%i):EgT),f-8
%,[\"IRE@U@>WRLR$B'YX'2V(4/FqMdLla*kiPBK8!K&hQ^f'drd/LkRkSCLUl_\L7V7)3p#f8$21q)n)bqq5.QGn"e2BTA\ho'PB
%jUVnso>V'>J=%#rmL3A<iG.@X33d)C-o5ZJG_;<g\tj^UGS2!'A:a+kHT-QCNisoTZ.87e7a]m?=P1qI=:Gqg.7&fZ@9V=C_]<cL
%a5fX$L3M91o86::Cf^)/%8W>(!B-QBJr6?f&_iBO9FK'!@2gnN#3)$N]+u"k&l<'[;"gdEarEqs)/3.`4,gDLgUs'\B5*-8#>uQ[
%4J&C"8Xr!")b2T$a:u$DinbN(^^n&_k2bG;kcpbc,`D-\5+QS34&s^]@N1\"JqrE"3<mKl+EOJdSA>L[4Nho*nUg-hP#^'E+A&8W
%'N\GiI(.(#KY/\HP:Iifo$E66>7;Fe*?T9P-Q,@AXsr.)EKSQ*2q4<4QoIO+e`DIpX,nZ!)C#mWZDK&ZiMeS7%n/\7mR$:!0jqdt
%'(9W^(pVt6,uFucjZG%OQ;Nj'.kDaP*h"ZH4[bWK#0c%hOVJfA@Or%B%PA8ZdB"MA.%H.W\c<\K?"@2;nV)7]31$(KbVF.giVc!q
%7KrqUZD_NB!@#X`aOVi`>KA,Vm+cDU\U+`gP+a"<Ahd^8=2p<"RIgf-V<8Kn.\I:koj8!2<EUPJ0X#Hg))C7)s,_gsS&$o"!K^8H
%&@P\I2NXkj1,PK"NX,nHb#4]t":55Fn0SP')4O:!^aN!D"PUXn^8*Tq^<^6ucr-!=aWS:<V9V2::?3\Ej7i+9UJ\@o1s$qWR`82H
%KSQns.qGb.It5Bt'>%'k"q6/RnrG&L%g-2^'hC<>fgOE4E8eS@XpS$Bi_=m)N\L^mU@sGkQcXLh&iII'd4c5j7mdUb'*e5YX(B0E
%5RSNEfV:mk'U\q?Y\]"Y"jd::UD&B9#]$#J-DT?t2SHWY(e"t6OTHZdJ:XF5.7`0[Z=;WW<lHD!9/CQCW"nCl7XBgnSECOlgIdPI
%e5SGk6lHs#n#_hZ3HYZ2BTOQ[5Y2BgZ.mS*>su*Q8]!-J>S'W>Zqhmu,W/":0JB5r>)40*RH\p.]B%fgm)k$c%4Rg\e5V_i,f3V;
%r9X1.-cKHHVadHIpD2!s@Brc]o,DFLidJ`"=h6:"Skdd$;7Ue5*N+blPjcX@K7"*,2EO5,Qi5cW6<B[&MD6k30dh*Dg(dI^D9ogJ
%rU0NX5ur`iE.%W@U.HWS[\SqZjQ!lY(NMd<6=PPB9G4=<FV?#WH$'e=+@0*V8Q@U_;&N(Bjbd#ATN7$153]a,<S27XY`YHQYttI9
%CH@f<gRL0d@SG%'PN"reW$WBrY,LE-Hk2'Ve)IqNK<2+,Y`I#/L$GW#N.K:_96c!mj7'L]D+f!s%8#a31S3u;;VakE[QJ=E.^<HU
%r!,^6iUf6;3:&l!6jKA*:O4^=+qkFt+ReD2j@scLO):gHOPq[N+'Z=<KM?_$cIIe2,_&/7LM'>OBKul!T/7ZG&X?0(.1N@Te=B<s
%?il8+eh/4f0`^Pof/r[F+pd.=#>'-EmLVu[2*TU?P_*XH*Nl(-q,i[l<9%s&:Hn[i$FKUL0^KoB-G:up(e%m\+GgQ:(f;mGZ`pW.
%F46u.ThcS;6:`CG_qmM83pMa@\--:rk(b4`RtekOA&YBK8r%V*%1d`'RKce431h^8H!_)C,')-$=uHjK:#&%?KcqS45H3`%'-*I&
%!$@K9+>_,"E>60ua9M7P+3l."RZp_NT?(W!WH05g<!FP7_H$O]#2jM.22+f(?7'MTM1I]T,G[W5MQ#0WPuC6m$a\q<lGGUjC_\tO
%'L7h'6UGsdEF;MI3H>g%.@D/.\L.j/+H\#uK=IQaA:_a7X;.8aiX>r\&lA)&/rqa!,I'%eb\3UP9[Z)DYm>c^1bNrDD2.p)5N+$o
%9sV0?A$6Hu6+m.7mX0#Qi+i=o*^MM=;D^`WEC>E7&u.o.4ZQ"J4XAg!Y2hu>Z-CfN2CcXb#`T@3QuWI"@L-.Y1>8U)Y`N'E;=-gC
%BSK`c&F]*"!N9O'FeSAW5`d6F[ls*)GWM$f!.rb??3?dQWR`%jI%Q$3AeH^'rqX5=01'-9d>;,AIt]IBe$i9E?cb#F,iDA_Am:"[
%X+F`"<+b\=7S@Lr;1+6@r/0b&P0`2V;B3H?-l*s@jTpgS"&Vcf0%h%cm&LRp'@h40j(RG+VAhj2GMlp\MQ9'/nf;iQ$"5tED=J+^
%L<flj"`7c4)(!<0'=jQ1(18WbQ5Y<`Mq&Bn:N+k'7tN5f>mBBBOWuoK=jEe9WJ;&92Sq84L54J+8=:6J^'5t'Ct:P7H/KQ,-.a:&
%;[q4K,c8sd:'D83h_L%i&'l"EU$'f7[E2s1GT\'%6,WBj?pMRcY3(q)*$VLjH9U"3;.d>:hK;QOPHF+@%>Tk?*9!*Y:4f/k(WY27
%/j6-X7dMAGc+7aq[W:Z1<(k"oYk)JBA>4AR,`sj7O)\!l&!H,FqY6qXRUnrSIS<Cp;/f9bLLTaD$o3;(NeE8e?;AV9D<;7nWYqrd
%2&"1eS60C^#c[\'<)e0ZVBOHfLLb/$LC+m]84=M>M5r`'_G3Zb18@N9%cR2sCc/NNHEJ5p,U=e[>^!@1#%^-9=2oar5`rNKD5t[4
%&ibG>1(C$EUc]aL.lO#+0sPMeamhcOTb6'91)$,>$Pcm6#S9[#)(d:98,Jhk\e@$EeQsU@-MruR"j*((8MX!6e]sr3Oc5f2iR?A2
%A0d5oTiR/P#j)/.a<sUAm!`EY^N\UVDP+!6Je-tW:k)>D6pC7^rX_(r<4'KFEXj!^4llAI/nOT*nYHr@TTIupo-t.Ve1jm(4.g<`
%5i`$s#&ci<^3F6XG\edRWrs-k\"rF)MX'JH:W`dE9dY-`[Pp5Vd:OiLLC:G1Pom"::jj$P3B3<i5hX,RN6QM6`->6u8f_h<.S7Ue
%/XSPoEacWtlRX65mjtI'HV_:)XYWRoI'iuilFLeSU?Ib=FGO3NVO%?*RnJ]fd8Ijq\^mI8-mV;+X\ZjYE)tcSn<BtsSN^Um*$Go?
%cFS^%@?1@)UKR*anYn#Ol2q&gGfMP5Rc(g(9*)C&M)V[WjM64HW..\k]>Q3<(T3?GnHsY%KOZe.kJTnj!;B'i&bi7O;XcY5Jk\!a
%%1f;T+WEh:2Q(SXh"*ZXBLMZo/1P1g@lGY9D,%YK$KVTdJZ\!VD/lX<36.3d8E4=hHa>_`o3`-TTqH&FLhWT^.:Ps<$6[9n35XX2
%kHb/Y87lk9*iH?shmfUa1ruJT&GT_P3QQoeUTsoih#+6dMe,D_XRk+Vpb].^mgHDB7D4(`Cdcu'[:D8U%2&k4)NEPa3Bc^d.f98X
%L3YdCK+YUgAC/.+=-?(`6,FE@carCuW-V!Ie&sVu_L&.*>q*dj+`d+HbH#)C'`h>=Vcg8F`^\e4>uf(j3H6UTL7R<fBg<I1<7qM/
%cqs@G_;JETCkFhPE^h*lN()+6'_/7NV/@flY/rD-!)X(pGY^RpEX0WJ:lrlR(=_&PZ:0JdjnfT[ndY,]#0N\%=_)#9bDL(08:nZ3
%EQ*ZF`2KWR&D.N%+NYU#iff@X-L-l;M4j32/I&_%];3J,.:VjN1rq+Q3Pe2&(7_.MQM;P$#^R-$d`UU=%e.U$//o6!2!p)S0T_A%
%YXT4b:Gr<kUi"8?""g4GB(%]6P#<N3b[j?,bW;M6)e"Fd8DiJH7ZMOqfj.R'mobI]/<iKR=BLgP3kV\eVC&Ic8-<lF;RogJjas^0
%,dO:,?QIbnQoIP&8G)@DXN+AZ;tiKVOa8X=L*ni%C`u@C8U5$CQKGfR.@M\55EM]q9Vu8<PRS,0=Qab>3*qV9gi0oF)Zrqr^`+4%
%6sD^)B[hPDpbhho27@.*B3<.+B\3BoD6[HjB]t$fIDNbhf9WB=cetf(6AmNkEZ1>&N6>K>9LEJLpq3@SO7W1@]!u6J2H+q[*$$Bn
%/!;If*A@gu,7a6R&fV9eO<^5-QOj:lgYbC\=C\L\^j0J.1"g/cOoo<cJL_Tt7qeQ]c8+HS(E^?+'(ZlQT/7r(&J_2m@FS[SCm30N
%UMeoJPBobC6N]L$jsq$3,oI)oY$<Vd06\/Hi?>+Y@XVB<Ru_[7(-^fNb6WCZdmc\,2)P[1=#g!%I;;)\'WE@57-1(17!2Jb"E3*m
%C`K2Y-u):@:78:Hco$NHf`^WV*@Nl.'>oo/Y%qHuJI=M\?>ZL"=Ftq7NPQ8#cnnX"jFt.u*STR?INlqM3's>KF98D$ZRD9?Ws#hC
%%o$Am=G70+80Xc0!%SQ>RMjGhEDn.%)8Ks,Dhh5:WH>@(f`WJ7IPPqs.ooc$'-kJM,bdU`fIaF,ibP8"B!?24;&3e9G$k%`4A5Io
%[lcUn3O:O&Lt<40@,dCj'%EKtkeW-KhOt8:[hLIa%'o)e<mW,O6T(AEjFMY*=;N!cA&fA&<<Y@:UJ>)6(*E9p-!Fi`N0E6>Rh_GH
%ZcpKs\>\[JE9PUU%0l]9ILG'P%WC<@%\!Pj#PII08-sH*%*!e3D)Hp3lS2QKWY9o,1."cenk"?r&M#/YW_quFJC-^E`i3+B+BQJI
%$O0Tp`l!3?O?dVM,J(`mM+2RO;[18T&q/i(9K=@li5HBI63,IP@"BMejKu\@B9selW\$'FM=oGt`5@4hLtipk/_<isj=s4bA@hgh
%HO(LWC=aI@T\FKtCbU0Da>"=hN'p!(iDLs+J)Xol$Cqh!<AG+Y6>WF,/f=X9+iR;<R1).jn7_r]SH*m2\2XLP-c>:J4J%)Wa2%S*
%3++RF843qZ&0h43Mu]0j.LcSM$H<KE:'pGjEZgYZYpI>2aT:=5UmM]hNX7g<"4Y^@G!`DPMi(#7kJS3a1_rlCfTS]"KH.d@U>Y<a
%6BlX19hcn/0\B]j6nW:07REWm3%-LdWl4DQJB8YE:'gnN)2TY*[S^G!MuXNQi[C6h"J#kW1^V$*NHP,k2uu&fA*adYScIE`+T$g'
%+<aQP6k2d",6<UZ,*pSb$q<V,@LS#d$,KV^'UB<5,m8A4dGJW)3#YGMM)c6$dtA9U6EJoPMA&>>`"78P'Mf"eP9]sX'YnCRi9GDN
%P][g79I/[P<*!KWFCC(^*9)p36&Eu%o#$2*BBaYN`'[*"o"tTP<6Y[',>K4Lf:$`0*_[m0K^\'^O@^H)iXJ.'oO2!dJ[&B>YQI!7
%QU2OZi""k70,%0,?4Fo*[$0--'-)pSY&#^I(>$Ye7BW;slT7rJ?kDHN5X,ql,_QTJYsgtjOq=W=`\\"<:K!"5*(qR\>m[4XKG^j6
%lm7=<M4rsCLm\g1-:b-DU$ZOkHZb\q7FS"DpLms;U32+35%2'6CWKQq_4/GLcAiR!)C'*h`.2'L..L/&7+n-n*<BI%TYl+/g40K+
%'UDg+cM[@)H+Mc:^r7OG72A-R=R1OM1=Qa<`&$00$7.2:&Y/f`dQeNHl\<RKEqp*ppW8OH'1UUc4RM)-4g#)GYYB#W_Xho31"(T*
%KN-`j^c)k@"dA3@V(@2,PnT+.=Gm;%;]chMi4<1Hs*&lOFeR:D8drP="aaF$0G]ed<ua6-foPbEU(AGh970s`p`MBo6hB>uU@R8<
%IL.(sB4Jjr:;o\t8.]\]2g:,U;cFc1?s7I3mVQkN`2b.0QKhrh3?/nY1,\,>6]un]Aa'p77r]`f08U8iA=;58fPcRtBLXJ]I0mmP
%j$CV^l,;&:U@GB3^B/A=8NJ?c@Uf^9bV5Q]A(22jFa-HcI_[b$p-c<k,UVsFA"g1I*[sN"Y!XrSI`Z_&?m2#cfW'\%8B+>ITHU<r
%=mU)l/hWq<+/Y$L/hfuA@N<*ph%br1Z?hfZ^\I(C&p)8+j/S1J=`AJccU<%,p@XV(5m<S#<d0l4M>4e3QVF2n`&2$mSFLb+]#,r,
%EJfH[6gFZ\4r#qH3\J"%3]$P7$pllNQU[d6*,_#<J0HJ:#$4RZ_5D$-.S+L`0#JG0l$60;.<e_[@5+c<T/tCXS4qo.$_W;ej5)<r
%Q[\b%.X:"cRic9aCl6d&;f@>C<4tKm'+^d$*t73t5ocMN\)6fU&$ghJM?VhT"XQ2:^bi4P-'#SiB%*Zs=V`CV]al1Aeu(!5aAN+>
%\i=E%X#l0kVXn4L*]oN_XM6.lG;S.uk9P^m8H;1&JgK#TaIt2=>%*CCO]D2f(]Rq'\Eh<!\j)Q#<*/!6$!A^B-#M(P\U0^B^gqiL
%"`OfG+lBCOVrI+5rZ.`,r/-\qR[eHYVqD]'[3Y/Ln/U<:pTmc$NSCFOTbadD1V'"n2pcRsL[Y_K:LF\T?Gi$D\@kVG@'jmXZ0p"H
%ES:E5,;MA*q_B2F2RtdQaIZ&"pmeR'LMMT1L?!#-?g`tt"EQ75:$),"$#pi5Af5V[NU;%*4\.,(<=9W*Ef,RSj,bc\3CX4[,FU(U
%)mZ1#j(\EN?kK#Y#Cb'?WYh2Bp\(o0oAqJW'amU[:1RkEZnS5#I,cYg<)$.\jSP`=bmp^XA&lX5U[IXI">14FgCm#-C*T(>bL(m>
%Tt8U08`WW[)F0:0JB2>fO]s%qjh'X-(ibRt&Xsj`4b/AEE/5S`k5><ZQ=/Moh]?9gVb)jVRls:0\`ct3Jt>DfCQ]-;5l.8Wp-_ka
%_qh\Qkka+T\q>bTNCQi6!td+HHCq4tW]IkqUYf:72CQ`\3>u>-a(QY'1G2*dBB%s'bB=k6LFm_NpSkZ[LG*f50\*Cp6Qp0**?c/S
%HB_"qHXdXH]E'r6']FeK+JC"E3o?O2g\niqU`iALP,%"/qhle`0O)MR[f`]sqA,bb=Q-5@n+p#=1F(H887M2A6D$*MMMMTKj/X0r
%h'&lm*,U3D+fV84FYe1IM5:.m%]QB.83Uq2VLm&>A'49T4-i-qCbkL6M2-(BUol5a0Q`Y`1Tk$2<#XN<*A<RJ<=b"_W0YFed8DI6
%EMq-#"h2&&i5pj]:MZo@ZZK2Oa_>!TW9B%sphDWD]6m3n7N8Y[&K)&^=1,B,U]AFIU[LIpECH4)>YqQJ""L9sRj\X'F<NBr7'26!
%n!C9>ioX8UZ-sDLbN$YP2`UrGb09B]'@.:-VW/XSgNU1ZgZJ)2\A/W8P4.ra3RXa5H!=\`K/8_D(uaj+U60T&3'q]9Xi0"k\uQbt
%&Nqq_?<gQZ\$>1,Zaaf951pZuOG(-')aO3S'%uClgSVT+jP!:&i)p=1jm$4%7a?Pc#4=)cU(-ZV,U<6M&+d"52LHsYZk66bRM/BX
%N?2IPc<cB<FO\;0;NEAfF4@I!hB2f]VqG0M"3EUlfY6?,b38Zd.\JqoI3=AtS6Q:GoQ?Z%U:QCT2DknI\Q+#^#PHrDMm;fO&nm=P
%M+^dM$A`Jc,!eRZQ(.,=EEA9?>.b5Ob?:)oBi)E/.SdA@ETqpr2K!fZm7VH"U.Ct^Pg^=T4/>7j.tA?n`@2^6)a7f*I%jm.%!0?J
%TmS&6RR<#JmOdBVaFWU&DC$.0ddK4a3GQqHgdjt0E"3PO8Di0\qP7YCSm_:+h8;WV')A%0a->f&_BY;?Y'p@YKZ#.g0EGPQJ]K6E
%8bV^HGT[SW9S=721boDA'#BPg8"!ndlRMNE2X*f!J!-"Oq3(rr1WDj0HF"m#2o\-1q9gO\S*6A4^%eP0:W<MDi#rD99Y_j#cnYrF
%P"e?=/K(rUUS]Is=G+sa1g!+"5Z4D>'N-3p*_?sdKM\Nfo8H..aWXVMXHaK_NK)eX!kkC[E(oVc'P8\GUPXP;;M^eZ$;ZPJ@f^a>
%*1e.TO,!@b$%V)9J]2!]:h7W;/4!WjGo`Y5(@(FG/.&s8J\5MU3/S]>!+mu%Xf+pK,bU:"_7<U\5L@7GL*(:Oq[?$O0XkUc'bo*$
%iO<]d(AH;nA/['EiVUH9pW3#1NXU%4.`@G;DJ$+`8*(tUlUP&K5(CLB6eqYMlXNRV$HdXU&;hug,-gr`ZFUGmV"S`T,Y=3gD"L;O
%jsQta,cLlKl??n4<?8e2@"&e=1d=l_&2aSoibL&1146g`$eL_)l<,`B;W_U'6udqC#hBp5@u7]I!T59?^^57j%kL60B/34&`Nr.7
%G:Z!S_U8aPHOMl0_XU3B5<1P;N?JoZNCcE-4FTkXF2il$$.2[LPVk'9j86j+kf4G\_'E(qn70?ofRb)&iJO0bgJo+h41s::lR=\_
%cM4^<-3],F?cU@a7'dY:qq=o(A^,;6O]s!XM8QVraql9nY*u]9]T%tJ3Ut@&_D`SEJ7X*aN3=naF]3^ROEkOY&sl+q6+2R0BIfI0
%S1>=H3)aUGG'qZL7<WSp>qUjb+g[c%J00uT:WhrMAcItg#t?fe'"/gDpErH)0p4FV-L?UX]-egb/BPHF`2)O/l>ndP3g;YD%@OBV
%c^`/74Dlf^K]UA>YN1iJCG;[o8^%5l/+oGV&NB[BI+'?9\`+C@5%TfX+k=N%nG$[#e/<3[?gSEf]-8]B-&%j$Q'Tfp='p$:T#'h*
%G;Sn-8g+>GV2c,GMK66r&kGW<=#ABj1-9;6oAP(?W;KXWY06M20F=VU/+NEj'mp^J`)fl+\@<R+i6+>*?`r#B)_UmiL=#FGF[_:C
%NXZp39U>#[!<DtZbm\;R0k`t`q!p%Ki_6?#5Zl3+#-^ipngk1i(HMr^ZK7BFrY?I]&V!MN/gWp5P%h65Yej1Z@_[[_F2s@5XbCL+
%Lar[T(WbZa8f8_]cIe,MUb/CiIAZ*(W2-PrKIs>]]4$O8B8IRD'DCEpgNEnXHc\@#;L'i<b]efA]:uhi'onc%bN'''YUPNVJE0@n
%A;?MGkW7a+WA&>B24@3,@4EfSJ#.`G5!BU0YLJ4N>qT^A`ePR+@VmWk\cR5_m^N?tW#!+'@&\4d.rqsJ^0_m]VWt,,0HDT;!Yop.
%$IqYC%nM5R6ulg_9EFo2$LV8f'Eh_cDfF7oN80HjEq*-ocQ/hN^p`?qq!nJ`EW!V7m<b]K&Jb&$=Q.f?9O\.E,]&J3-eHb6qHOch
%W4R=p14h/X-'Gh`PtAEb8:62n4Nhlm3XQK>;iN"s7/6oj)@s])7,th7_s]toR3dB>hdHl8EQbr=mJ&_FVXPV9+L+r*Fl@.p4=]3O
%(Q]r0h]_UN%mXSueZFc\I'KrS^@?*ol;O<Kjbb(mbWsu+`)MaTn9&'G\P2"@3ZRrZZ;=)geT\4Y)^$YYo<!`L,>NK1LQ9Mj`og*A
%[5)5![SY`VX<T1pZc&GK?Z_"*eRL'Nq;4tGX8OP5P/n_5FjaXkK'I$Xo?:25PS.=]Trr'qS"Ob3_WE\?X[j5S0@Ef.+IL)5'Njb&
%>Lo4b2rF+KF;6WF.USNPWUCnL.eBV>[,S0SW1P6[#Lo.;iD*mEpn@keIeYOArsd=>="`aW98<'LmIX6T>[%JrqDjl<)R+h3\gkPU
%eaPC!!f*bhcWt;"-'B<II76!g)I-S0#7045@Z:*2n/Adqccf%B#7#!3#W3"s9QG9\'e>g(ZTV#R&5Yg$e?tK<jW_Y4)oSDhV9&9r
%.KX:WnjT0UA#el;cm&uO5se1FM4flU/6tL5c*/ntHjE*#^,O2A!*3+\9_Dhjn\mB"O+a&1h_bi/de>CGN8(;`;d\l(W]J5F[g25r
%U@K\sE(aNY!)(&9JWF+dMr7+g;u!6AaCi'YQlPk_L<bUg8F-NX'hqCC#E;CWE\L=*ZYuQXF^OAUM/D"U]N5M69\T9qDr2J1HKl`"
%3XVYW3[*9tk3J^pB?.e5=^I1`\[2]C^4oEW4A(D'6Y^;onI6&D12XhHF.9n'="-aj9?bBhKF0rcU5V2i1E`Z>[rHrD<7R;/i5.nC
%btLns1b4lX7u)[j^4D57r#HKVnX_8k_l$dFq:ZaW5bG&dc"r&tRV7<l+",$D>ES]D.N!G$5/IZ,/L#i=902ATN')U>K"k5lpPlh%
%<B9?5p(dS:"m<MkR4=P:$Pc26<$TmRI#clIopha[_?sOY6YImBb$s>41Sb0LZ?@*ImOkebajGo>rDoK..5tVH+"j!Z'q0O=\6)6h
%d#^EG19T+0]E.N;]kP&iKPo5#>'(F%Aa+Zbf2)Z/p$$[+%NFB.[jE2^PhGWJJkYjZGh1knZDOZ$Q*mr[D)W2EPXT3??rC>GXRK*5
%[efL2d^bntg42t%_Gh#._Fpgm[>,b*?OQ3G&2c[MGulWRASU*\Y`bF>3uB[[@R^uHWro.DGrBQ(?rtQ3g;_62o[Ys?P1mi5s*V]i
%Gm4/a*g.lV!+-DVk]#:__Oc/N\9s_G\%VZ>."-J1j$((\$.YFNfYZe#neB&p5%'J`k:9H?Ja',:PO_HE-8l$hk#M`r)dd,(5`)Or
%`K1s:J[@s&o4aeE5rbA:kHl8a.%tsi]\@D#bEeO\-mF-QRD3eoId$fMmsSAV=dEj<^-LT7G19c`b06m0b,2jt#/^MSiJq,3*+*6o
%gQI\PNPE0m2o`pBCX6/<@(h1sYGJ9ZHd,\L/*#NC&J;.WXm"a7s1-;&4SXl]Da(P#MYmoD8m5BNd/&/F)Ja6aj"G8Scm9SJ];W^+
%28Z\E'QoCp7(PH:Wl+^FrF<8"Q%-4>n94iaRVa=a*C\KKiKu,BL\0ca2rKJCN1?-SS=C0dldP9t9Co36'm0^Krp\OB,\F#QSUZVZ
%HkEf4lXkls9DYL'SY"9;6fT]Gi*Umg$*+Y_H7dsY*=T75j1[(')VCo'9#qX9mDoP@?fN+A#u5':`&MhbH9MZAB3c^l3Sp:Xr`OL<
%F,srldo93_;]['D9^CQq-$s6VH8m5sX7"h-m$Fl3NR5VU;^9B=OYhJec+]Md8dTZ&k)EZSTKAd3C'\FI55lf*8KTE>/+'gqTl-Q*
%!h6HJ:?kr<_Zg_L>1dKf@2p(=_LkJY\M<;pNq_#Kp1l;UO>&k/QGb!9=m4"s?ddKfV"QP?I7f^\F6VkXq]RnJ:#CFpnrrmahuTIb
%AFKX12ZJT<Xl*.)#JM=)FQqlpW:?^dn+ar(E5<eq:s'I4nc6osi&?]^cT<9AL)RbC90X,'^-Y\%ms!"@!SD_8^E.@"B/JuZ*r,7U
%P0j.%T0aQ'k7kWaN[9%g-^OB6aEWD#SoKlW:FH2&Cb27=l$07RX8:-Jb7]+=jNPn(eX"]NYC@jJ!;%c@q1nt#F.=QL#3>(lC*<!l
%U/dE%895ZsNGb>MSQjQi"d)h](A[qUXANVME/WaA;S;g&[?H#.-u38#STK7SOcj@=qdsMo6sB-#68EPh,a.=G(inG\4g\f]>WtH!
%NR!EhI\"Cca'iINYqXWD7?o?bor.(X2'q`Y&L9?Q[TPG7ok=0ODB4SPRW5DibBaf/Ut+g[ZUbq0[e&=L($='/1UFGM=Xs@B[Y266
%ZimBQI[sgij"``bd]Z1FJNre9lWACu,TJ,Pb'N+(J*W1s=/1FB[>HNmma/K(6Z*gqWC1)P1,pE&]UuBq4KDd1V([&hs)kX1s&Wb^
%X5_"5*@DOc,F,>kJq2h>UgO:n@),P2CociAHA[N3[QcQ#'[b;D7&E3ROTrqmoa'OHhgu"+hKk.uT@RWBcVB-i:B+[ZC4'o%>T$0n
%7joo7eWrp$[?ZlrbA*jHo"(i@$nJ,?,d6rtUT`TufppM,O[rQf&OO?o)?-kb@?%T;ob(IYTS:0uGU3*?<hjfC5IBJ?!M2c-g:!a<
%%DorIYW7(_99l^1R[-6r";S-Bp.I5#YI5lpem3be!fWB/RTFqY<NB$H$S@98qdoQG>&rc7e/`fXrUr:/Bb5]Bl+?uhgZ@W?ZHnkb
%]0hAR=mfV(GF#2_f5]Fco#09uW"6XPHVM!lY4J9c0(0kYkC9U9r?f%$"Oc0^pEf_@R=>G0ha.8)C;<3]i1[[M>_RF)<P0,**:piZ
%5TKC/<_AtK.?C_0"9/:Yd_EZp^P2Z:'+@'iQ2V/k[==c_4eSc=/U`=YhnduY'__XrI/nsCcsu6YY=Q"9p/af]!OmNt\"A6@#Is[L
%=+A$Ch_=mC/3aF?$go*is0Y,]=@RP;2`NaDc0q/A4sY^jl/I2p1]RJRB7A2%SdQ+E.os<_ih,O*hf'ohd8r<m*OC(1[N7-,#Gg],
%;02Eh'mqfDpkmK_@sO-&h\.pCJ07$BNDGr&4*(-(EW5_B)Z!^&GV<F:8QVJCW>b>,20l4)4Odc1C,JdES_)$1H\ofLl"`<$VX:eZ
%oMD*)7e.WDs2V^dC]323Defg.+R/=peJFeO;cW5d=9&(G>lad99`G7Y5Jd=0`IZ&Z_Ge#(V'tk?]_J1XeSC`9;g73.+S&>eGm9HS
%;!03Bq@1@AnQWN8H&1a@)HF4o$-0NiG>J7d_Y7X'\nZ7>YA6hg(0$#NBW`PH9U(2&jLe#RB7(G(6k_%)Ng6%/Qh;HoEt.9MG#sAi
%oVm0:L,O3[IWd9A[\e$XO1K/iaeUNNCjiun/V3jfIlkBXGuj&NqL1YhDUEXbUM\3,`2r5%G2\I_GPAN+>U?]+j8KgtAO\^fA!+f@
%dJNV:F$86(7FPM-f@&i/IIs4nC+@DBc1TPps0Xi`:r7X\oKLfXT8LXLe`E\aoR!k>[As2cG6RJ+G0;rZk"WE(1JbZP7fpsL;s0^t
%o>pfSi!6s#Lu.Ac%_5rG8PX843D9rWVe>kG43cfR$h?n.q=.[@a^`$^Tsc$,9+Cm&:B+SFrt@[j@")t2"=(*p=8JRD+>bf2mf,a<
%af&/A3rc7[,4IjprV9[5i]4>RRGIfJKoMP"h@UDWD(4A!\'O-j#7BqCj8Ja/&+2Y]76.+\*tr`."C-rAVNFM"GQNh%]<Z+uOp,>B
%ZnujPVd2D0PtHYZ<*lbd@KnCujb>V$DC:3Q)T$&.E&4^k4%FM."Lo-np\?;hq;$H@C*V7=7o7paR101)0ueA(G6J19:(pst:D"'>
%M-kZ3^s*3'C!t[JYIkp2<mqa$NWbcBOp7%7WWYq"?tO6Kl>dF\9,I0SMmjB!U"5eSTO"K3ZC*A<._&#YZq9(RgNNV%>I*nZ]!(rq
%7Jn-bB)kIZ+t?(oeW#mE><:KKL83%t5?Ecr<`^iJDZMge[N:nCg1Qk`WZa[H!%$*DY(6I<>pPc!34rfhWOs-BqW]\?o*6OAQb/!u
%]=nGfGGoTGYG8TUE.*M-hK)OhpX$KiFukPVR.O*FLYkZgUEkpm?K0SbCofO.o`<?#NQ.IF(J9,h;<eH-%Y!S7XI8s2(^a[Al*n9@
%j@I.)#u@gXe"LBu\2)4L_l,Z`d\&)ohn>HRA2HC$kbTHr5n(9Q@a3#E]Dha[/oX@Sng*\6.DS1jl&XW"_1,64]O^nH!Qk"RD]8YR
%#"NJ@hT=KT']-t":C4^M'qrbMb^.eD8B_=8;!-c$hHkdJ/ZlkWrFWjJ;bLHUFM2e^lEE=5@TnpX(+41]onUf-ct?m8"nX;W(97#$
%3/0@fk8ZpRbo]F6PDe\7E]R*r,=k10Y@H?s2ZSX7A(WH4#',P7/n7L_69iseWKOV_8TE!R^nld\V#*]2dL$mhPKeeTE$K-.gQ#RB
%@d7CR<4\5%gE,i<pW/;-17^pKeGAc9[)&B720>+$$2hu\A6'D;P(7athWi"XL/',\fACZ(ebIebDo%M"\$U0?&FV'6?oq"acd!G6
%r]1eW,C@[TR#]R9?="j@=U]+(,<5iZ@4S@A"ASA.BY\<5ikoJ^0n/=QHG6OuK3kla,Ie"WJ31p)G2mTo]M]46[R492B73/DHM>BZ
%M%\ish+0RQ\F3rHE7N\@FaGq2#3i*P%&l?3U*K]B.&P"Pam2[0-6I]SB4e>?YuI$\,ti;n2&%=ZO9_&W-*b<$m>&]+cPd)[dh@ZN
%oq5[,kUs-RlhI)f6E#\T=c:2^o1oZCm7[:])m8+(1BRLG)3Mb"Fk?5oinMJ0N"qn#>F%H,k^6$nd_34i,/6Co]'P.[R;'FTkb#kJ
%5$t.HBhmJV^O?2/BBTH3-RuJ%Tdpo2"T+o+PKn,/ElTLG1(_\KF0g-:pH76lC>UQQn0r'Z7&1aec[-1DJg(r#OY`Am74#Oc%0&B>
%h^\FLl5b06e(+]M@K3N'fNIgTS+AZi#,qaj\GI@g<`S0X^5H`J0DKsKUTG]ihk[!STZl<-!t3-Ll_E>JF/4^R9uNX,EN%K4Q%flb
%=8DltJ#M&t#ngdJQmm&.OmooLPpJEmW%:/Ts2O]1JcNi#be$c2</"b.h2rPL\NGGNq/S9kNqb)_/Kmd7T\jhIGE;hB6_2_pO5XU%
%9TJ)sJ%Md.rp?iqD&]Uqd?1"kUmaflf2c6YXma@.jJbk5^`im+6=`uCMT/62OdlaRDq]d#316*o%Gf0EX?A+uAJb<d@D1mtT5$8,
%Ag@[BS'Qk,;5Z>dIAi98*b!Qfkf)g*'TN[:p]GiW:K-UVmXuZPEJSH/;73e[,!J;6U5p$2GaSDPk<80<khb:oKrN6D!*$N4d>]<$
%-]gtuW[NXn7gXHp<6;t!4`?-UA+Xo@4_Ed(%;^>1K^q6<4R/`"-0I+k>^`VN\fSBbhH2Sgma9VFWF9nGpfMrJZ<L-9c[FBaHbAch
%r\qS'TbQWh#`QC7N8":+'XngugE6!!j7*%&$/:qC`^(+jDol5pX5%Ti;4AZGZuA3"[[*Ok7L%q5e35l5m&K3=JPoh#mj/KS>0A2=
%e`C?`p[s'?(Oh":9K!thO=p4#7=Sl[V_YM<mhDXE2M%niNe!\(J9+tHKBHAdAeNYu]4cnTeTo?!ho!fLXXQ2'5G2t3>87)$G'lm=
%dI$+c`d(JoqJg!mcW-+bUJG7FQ%\dU=#0Gedi81CC->WXT6kIJ.\sg*9Y>T4I]$FM,9rhqmD40cf8T4,Xn/7^o<Cs\Tq1hLkOcGH
%ouD"J=R-;R?_k;rAUVGNQh3g,F@ikWmB!?6AkqO^66?X)T8Ep6H:+jsN-O^oWESqQ)>AHcOS(doZ9hmt]YSAO!ci_qX8`A5o^6)0
%oRu!57R<]QhuVZENNf94o^@fSVK5U%J;[$G8QC@!b*W0`daoZAM.:NCE<0VI9dF;U;;#5lRYqn=R67b6mNP_YadcOrGq#,Nq]b';
%><#1F1))4G,jRNKMJQ1(![C+oE:WQY"<TFoAr1uQ&*IR-XQ(*Q0'UK#q,LUgL1&>;6-/.5b5YC3H[`6[F&AiBKECH3E3/#&Z859=
%RKe5BS<DcPS/V$2ge#7f,?^Nb.WiGNC%pB%MZM;l-q4&fHu7)k_&YCD\%ZTd)e1^\*C&A3g78"HDi>;X<1sjh>9Y_#5SHS(T%O]B
%buX;o&T`3mS1S8R%@9;u>M@9CSlI9p5,o.mcub;sArK0$]6UC.,@OiA:2XR:BeAi#LFn6mMKspg1O=qB!g1?Vf0-b66d/@S-V+Z5
%P*?CT$oIO""j^fhH2L+@J,T>Okt&GF%q6$KQg@Xb@o6d5Bb,Oik>iMDbC.q9VJ5%Z/hBq'l:YA,)65@GUk[SGDF5tdKiYKsJheO4
%>Ehsb"G+X!n4E#Zoh;W[WOYeW%<t&4AUJVe3SZH'R65[-M\^LX,%A[%7Gg&9pjV76?Ecgp9#Y=2R6:WpQ4n#$6h`rYa"rHmh`U1%
%bf4KcWT1Lk%A?YQ!n9aP.(smcSX__ncgSWNE+O8*,)Y.#78DQ!aJ`W<PNK%4U'D(00qr<TCnTsZDMI,;gnMA`&k]1FL]^`W_Bif)
%m^"mk'7EC^Y_orfB;+)N(Mu(r9?RN-#CTad/4N1`!PR4TPLAAUd`0Iq(ZTXWhLl1&GLkW]<)0s%aHa&)Lb=FWYJ\l?9bg=T_co$d
%.dY[V>^']n(USJWPja5'\r`rP^<oV+MU6(pYt!Wm(b20j9@WK4/aeP<&Qe@tSPU<'ZbN6BXN`\hYa'Q"1a-S52!-6Nf6-Ju!W,o0
%-G<DL,h<j5%Z!"X7AX-kNFXJGFh5QT.Gsp>\Oa;kGN#Uoq@dpKn@[T/W0mMR;g!]R%BeG/oRL@k/#k$>^<$)T5STt1>;0\iQ(.gj
%\H]'@o]8d=%nKbr\Nj$XDKaej^E=&t"tas[9D;\D[OQd<7D]l7/[JfLi@#WX<QKAYYK.N2lCkBVjJ(]V0G.6ISe2=%e;d3?3^TAf
%44Ck%WGi$8P&CB*T8!ME(8m=05V#iN2joY[YFfU!.$?`[J49]-VI/\tK`+2]4mj(!20ec^\LFiSRYOKp?A3_;69RlpJV8)-0/4Ja
%'r&t=2dMc%%kIY8$LI/W*GnJB%nuquLa?mt+MF>G,WTi*8@Pf(Pi2Cie0%qT8/FZD\s<UIc'0WA7Eg4Jank]JIV6:('=R=@/(IYI
%"pq9oi)O]I"X>'R$Nn^:s0<"tQmOD<bca4r%>\_'kGEje$EL-XVtbM>Z'2K-0#oXsgsA24Q%8_&Z+(Du((m!KkOD4A1KIc[+q7=O
%T+L%DoX(HdX8[M'eNH)<*IH0.5;t%Nm5\Um5]H%=lA@/`4d(qtk8g\u@<e1IWl`bH7aNap/$5lh]L"KQL7ZT5Wt_eZn.#XZ65.!U
%:*(T+EUOG";_=tX)nlcRMQ(O`I$XkaIsniN>8)@!.&j76?o\8"k)*On%)%0s0\CT)o&q0Zp\Y4JKkYG&A++@sL($\Od`Mq.a25\A
%:Y3q!]_V+B_^N)b!h*d[4M8*-WK7&q++dH\MI338_KF,`"mc!1%Ns8Cp+"Rra-WlBpXn>0Kh(WV4k2R9QZT=LT/hm@PPM/T5"?&b
%rUa7b5[`Rf9LYt.k07@..GX/moikQoE/^<or4dl>F__iH)A!=e1so!6)UXN4M*A</n]\"V,\IUlbW/`dbAp?!?I6p\E+5t:!)HG7
%b2BbE@&S&Ui\f7uA:6VsN$TX0-+3F+2Em!2JY]'Xg1%cs45JHL;u>3I@U.!<<,50cdU&E#L[,p/YPaOpSK>]C-4P`6T+Lcdjce(9
%2$?.YP.#,eHa!X&DOONpg-8`8HDQoGRin]mKV$.*.mQ".*!kHSUnALX#jl&^MSE1@)R,`;Rmk<'W9UV:^hQamr""0PDM'<UQ=c,V
%g]l=#Qpn.AhM=;<PNG0;7$t?n[ZmZlpX?1th7B:W[G[]PETum'YL7?Db3u5Um/n@iWC#<%O^5#Wh*&T%9LJ,.[R(J4A_3fmEFnuP
%,!)_.P=cihQ`R5)E4n&GRer%c;EqbJ2#El6[Z5+QAM7]]%CKg_F=.d#e0aT11^hN4VnEd,W2UZ"BWG'IUX:(/'`-Tbd]@/6l<1fJ
%V;/(?@&eDj+THQU@N$LfW1GAchj$8A24!l>cV:s>"M)?"Pb71s=^\%/?'LpU1]6M*q,SO0oE+I*ITK4b:A%"F6]7R)@TjpQUb6h3
%@39ag_61d0/s%JSb`HER'hSAdlS_K7\XZ/bOGb6;6LPb'K)TfFD%E"mX#c%(LJj;8o[P&8c#+(Uq7>A<Qq]'8RD5WR.[)Dtd7mtQ
%!NrKg7Wl+BnpGkJmQpk9Ya`6smB0nZ2r4,.g(5HCT#$E-[GjLtZ"QP(XCtV+V?<+C(%>9/"Ds=ur[o8&B(IgT+/Z`GqsCSt)krP>
%$<m(9]$]"S&Cq5nr^$6CPHtM[W6\"`[2\6i(/7A5DX^3an7RF!"4OlC=1/3DcJ@,c4uQ;[dZAcV[5J6aSMY+-bMIZpGtk]6?X*9T
%s+hRd41/^-=VE!!kn.X;W(#d"Z70RklEOnj[VX(pB1Qq@"p_Uf'@aLQ*AJ6Go#h-(r./go-)<;\lg#QEa*'H-AF4UGW0]&97F^f%
%a(J,.c=5<rJa:+`A;#T2")iI@.WK#Um*KpLiX-Lh5;_q93HYQ,4re@E94Je<X93Y:5+>+.O@"7$rJ_-B*mp!=o.OWRBX/eu)M"gf
%`h/QS@k\0>7Tt)Y>^%-eOIIKfK-OB1L)g\3,\-W[?rbFB<m&TLNbXpm'0.>=L&h"fZ,%E>khq9pk$T8XLhL?1IoDQ-&'m;KN^)@S
%Cn\#lCjH9JkrY7%(C\CY)0-Pi3AW;UYe",gbrqMsic`J[%1uX\m:uI,i_$W&b*iK_Lu%35#M`E7>XNc"[Sp?mipV&uZ%7'+!Ko;Z
%k31f<*O4i@q<tiR?/&$GR3J1iBF,:`6":0YiL,YK=.@7.V:l1Fd=h"odR]QnWr/&*&nh?!Ku`)q$8gWndAKQ,*oPkD5@8"g%@rKd
%%O@,(k$sgE/2G&QM*LoZ$+FC.\lVl7Q!(cD,cj^nqrss:]:Pt<hA8MdUZ7m.a>MR"8f+.^f/A$#'o7hAc@,EM[?j;!(fnPB[S19+
%-alBC9pR?.cpT#5fAW@-*a-H5OU?)qM11[P%l[qtb.SDn7!0PXQWII8>X6].gLWq27]jI[K14;?_0VaUI5PGmFH[[EP0SV)e<_6q
%%<3#E!9]HMoo4U:rgFj-]ikfYo`;'=F3:4nk)lm%bhu5D99FW)i)5&^6r#-dET+2CS'ugd@nPbX!W.WrO=\G7kdqLKSEDIU.f;lL
%3>rgJK9,7IVsQbq&RD;XA9d)K6ARYY=bhZKjTig-F"i:]XI,,E#,O>>dQ8<qaUlCj,O!TSLJ`^*FrN]5nP,KqQiKXX4Pm];k-??K
%_S(TcYkN)6JK37$PG5'akON_NHLp$7&"Vs)Ku`Gp\"qOY"esIQ\CCKb)mXJInf)i5kt3[MW2eO)X!QMoVH$GSZ)>u%Ps#]Gdsdf9
%1ZrTU"@>aA08"IiLYTYpYTD;jMMP`Sq;1L_Bh.]$PAg-tEX2@(Rlsm^f@=<S"rHWWTRc@XCj4e(`j-sT^UNmM`d_+#<=9PkE-qY_
%$A[82+M(gR#3CsS(opn7e`<tinfj>n:V,b9:",[#Q,+PO2su!OfB'#I0^-,cKa=&^b/kPY7,'Ft'UpZp1P"8YSWK>boi<J$Ek)Uq
%BpTQY"\YQCWZG!<L**iGhPu-+!TUc-g/0*;*:6o<Tc$?_U@\h[gs:Z1+s-Z$VG^/B>FS)t4tWn]l\MDEf;&t)ZCtmM&rVHsbkA?Q
%p@X2^&j+$l%]K\YcXJZ+)OahSdBlWi1bDiFlo0-0m(7:A=V]?k:2=N-?L4We87W[,34)RAHM^\[l#`#M[h'aO1!]AMB7n!rM$'<4
%f_.FP9nAQO.-J]jerlLBc=r-h;35Vm.t=X'].uOg+o.l8.H1>e(2GJk;Bk)u3>AR"`sPYNc)Znj9Wbd_f;2i:oLo#1:,S=ZamD.[
%BgkC<YUWrMIUWJf.H<3^*LER%\,A!7'n^\";Lic`*l2IUGNQ)h@,4lVd8S[1d^Ok<;JAP[kQ$`g(G8(JKbcg"h5>s5/^aX@E>*)f
%e2G%GV&oqgVKhoD<os<NhlOtZT2^Z%c53R6!kd+/qKY"@bG\):Y*ZfRK)Js&XkDd;HU[jE*+E9W9Tf1O,8H3KE\3!5@;+^oa?.Sp
%b#'ao1+26Gm\Jb(nTA`W0A)1meluP2Q3k;=AP!on_mLIZ\nCLUNlY%PcCZ?BAf5%160%GCXjC+A-)<Z[DJ,!Zh,HrB0S`HUG<Ii<
%>GG4Ce.JmZ:I]G;_qb@Fd@==u[S8$p)RPW=ERJ?0::,M$m?0aTabEQu5_33#]'9Fh'E\8QnmOMdQ]cOAA';(^U'9tP,kap#!U-b*
%Vf-#/L1m+#&`/=IXLW6X+rCf^)d'*9Hq@ZZ&21#S)lX0VNI4c%#0V5dh't4e2;=AO!CHpi9b!!X^n#mNr8sAT%d+fDH+E&)CA\Se
%0eU!Y6DtPk6*X+*:kNH3L&5=0bZQN-`Mhtq25\-!J_qceY)j7)*h(q\nXMS!lfIio?+'N8D,h(TW8X=cZ7K'XBp,8W<E7hlE@bn6
%#85PY*ndj`AVVO&K&(!(J8TAJ:7HDF]QOSio-)c(rg":d<a(J^qR"JrieFdI2Pc598o9tA^ii^A9o6YEK6$pcD^'VXZ>=#02&V&)
%n>iPW=Y\9mjbQJ/Z.DcgTGCf1T1c2cN-:r&;\Hu.p>/q?e<9V=g$/GZ<OJbl"B!0hQ'!"/l1A!-43H?Tb/5Y)ep8\8o*X@&7tYJb
%M@J<.^C5hCh8HR%oV]$%o5iZ<chn!W4%'[MEq`iYct$d$G]S0r2ZL`DH6*_tmB9gif@uDNdfBLP''Y8`'YHuOlCM<W6EY;e[J-K&
%a-_#[T94Fm)%:>QQ;"%1.?QBh[]fJ+e*n42'hO5/aKD@KQT%+$0X!T1^aC>RZ6_Q?YRGfBZq+I<Uj_9u0h>$D$;`hL.grY\Q&n*t
%jmbn?i(-kpD44+qHjihNM&S11&MZ."]4$7597XCT)\!Jr^2-`ll.h@VW4YM:4nlj5N8)?4>a=\@/Ste*:<.fk1<Coh2*-YL[LQ4Z
%`pPE5l01oqQSctRD4A"MXPt-IDpG92)`=cJ%f%/]#`R!MRF-a[Fl7p+L-&oui%G?PggsM]0+\Kki8t@!&1Ff.jQdra[#sb(LlD!M
%lD\r8%@YE\9gFc?$:r])95(:R&Xm)SFEnkZ_7Kp`rGGenrR?&?E[43sh$q@B8jRRP./7Q1fXh/eQK<'FHi8_7a7jXHPqX4JS<Z@r
%BEUEni]*#H!5'B-"(72GkRFC9nE\:uk8ajqOBpP1KlbUE@*@8*7@)A=F\s<&2l&jSESZSTRcZ-/d'`C2meY9L+Y9cB)s$^T*P$DP
%PLt)8P4Z6(.40*sdl3Z+l\ai-[W`^\WZ*1VYq"`U!eLUjghOFV%r7>6LR&o$7p1P2/FnK)Zoa7$kDI&^Go*t]:i.P]H"Cbi>=XfI
%.IO<Sg0l@uJl]t.*BeO;6n>Rt4-1^*nYcbV<M_?WO,]TG<*>9EnWI1I!'SR4WO"da.N/s9D8ph/Ye2YG70@K=XY65d"^+8g'ZV)(
%+F%%4=GOdn=G[I,_eJ5^Ii+B3Q4V9?jnmLnLJtg.D$H8F.KPrdl92TkUp?Hdgg[$NC'a_#WE4WlCHV2PdSbgHMSir#o^m;IXi;.%
%a<b.UOh.hZ01e0D_AB]2aI"\:VXarNh,6lT!oW=7H:HV/EQW/:8'+a)P/qkiph98p;%,`k1EPuTs0U.tZ#*:T=)RA5UpZh_.UA#-
%0<;rSdPAUV<oqOqN=9fm;,@P<X2e%"(lr6.Aq"XH@ihd#mg0^S*W%TB2]OR#6l2gmiuh>b]Y\sEIDsXUP@2+Qh0Dkt!6_O(Uu<`.
%FHjb6*h8&&+HSt=jpHq<^a`mcC/sEgorS6\XL*9S>roaTS4I049D>MA@Qe$V]j)mPoMD?p[He#YF<)gQ\\p5^'Wkf'*h"Y]GYQ*0
%?IunhNbc)8[M"+:CsFhVn4q*4j*@T'F"V9UL84[%o+8OQK>(791dn.>r:`WNBppDM7mt;91+^tF2(oWkm)`g@e8@VZ;`u%N-e(E5
%3K8V=?&7#-JL/iM+jsOOl='WJr/\r\i+RFQZ$[0oeZnTBI9NF!N7l/kdf#.]'S0;Cf/7m*dm0DtY'SDN"e8?ERL2k9$*^,`P%4XG
%g@U\`Ep/7V@4X:H<"UNEE:^V4!H?#6lU?*j\KhPCek0&<NEcWQ_k351SX-(LmeZ/Kag)XL)nk(Q/`kLCrsF6m5j3%)+&?g?(*KVB
%IpY/HP@66O=*%d"Cge1**^N/TeWGda&i*WY)'dX87%/-IaPr[dBn<7tN678[7NWlRKHA$fUa[f=0mYc"[OP:\\%"9&RQmiB_7&U.
%[('N196Q'%CT9Hpn2/9k3?XUTFDA/Mfp6SqM4n%.)^A-CcO_#G<lCXs'.30,blY]]^lT\B!UW^-`827`g=N?/ob!LKW'&KM^4Z7+
%4g8GBgP&Lun_p":?R2,XiF9n:/#M6+gaO$'R@6eE)I*j[e(MDYHPd#SPTR/cEl=SZj\@HE5<[?Oe'_&(BQ)B]U2d[gHSE/D/RnNo
%!))0M(qf7[B'G@DP;'4.F'F#3X9EdP1#Je`$cKCFXarsBrc/-;qm8%7[6EC9fbjH+>";A06N\2BYlN1qjObgCB4"QeYj"OgV4g[d
%9:I7l.H+\=o(4K)bMTjrI7Z5uI92M?JO[`KoOXE`JS#tk6UL'D$:m*:Z?FL5O]A.=&VLV@0Rr:!.7sKs^C>)^l)>!$-.W+E^nU?A
%cD^E>H@d\U+ALJ>3Di$"SD4t%lLlt=cnr:7iFd'eBKGq"+FOEN%M'j#eOWSEE)XV*kQmeH64*+u6,>ikoGQa-4`+s>-A+U6gn=GE
%l3.8\gc2+3p*$C'),I^0e<^V"2bM&hna%07SLa,G<`Gc+I+pC3mjj+>?3*7[aKT5id?26D=K0kH3D\*QWAbaCi6ju2OLqm%f50**
%;Vt``R&E';)s&87*K^i6,+&aFTiE.])l$i=d1/Lb,V#2p%&H9&[V7QMa4jY9!=GL!Z`?$;LJ^8f((B3-_[BlYc#B!u=`'tuW03BQ
%:./==DFiSk5ugT!T:_5Qqc>X<KG@=k/rJq2b=Qm5Fmr,tC7mf!8EN.N!G:4+8LO7,=cf%D5:q"7-VFJ_B8=B7<^o;Y.c847ODuMm
%4RF5QHN'e;Gi='TKfDJpgET=]MN?LJfQrOHinnlSZ0nSV+VJ.-LNBPi*Z`^&eDH9c"d)h9nsQ-i.juV%0!n;t;:!J35Q#S$/]**k
%EpY0(XVFu[cQN\+.`<=b,<`)32QuUt)LVg4Qg/u8iJ6VAHR'*o`JMbsp:CQU0-t0O5'G+_I&''FACR"X?Im3p/+gPl+K`$cXd"/P
%au+DCRW2Q3^re],Qe?_.:oDp@GS<pn0p)8V^iW@<6fKOULZU%,%PU^RM<VjmorTf>'YX4?qbbgP^cPTlL</FV&ErE')]Kas9Pn!m
%#K3Dgj[W:`F*fdWlX+(;AX6EMbU;u\gKaQ^9sAeV1;Cm`WS0#H.^p,+%STtCkU!VS<I5bj<!HP%i/\:*Cg^a:.(/<I=QM?Y!ioSF
%K,r.%aohgN+VA9#OXL48b=>%2@@('I4]4(la>N/la*sMb9cTq8%Kd^3??<X4l7*1sAUqC=`\=j=V@eW<9Si2a,;KhT3lV4)'=tW2
%fo5k=)M_;)MJ]ct@mdq($'X;>_%bBm&&S>"\D^)@:#+-Z.aY=IRD@nqFb[TGkt,1R>gm&b^+**_r1M5"'EtUk!7bZeKA&(f^)e.e
%n_JLTf[shHr&_gp@cSb^o`bpjj3bEM4/#/?p$C,`IG][4I!;DON-)bC?+K<Gs8:rs?bLkSJ="&:QhNXpG`"<6!YWJs0;6ReAZl-[
%HPH)l/j7-Q&(0!UQmOWZ(=L;u4N)\e&`Rj[q&"0:7]+KTlpIlO&.q-\c>O<g>87&VY!7X5&$c.UP45&:4CfG8R>DFQ/W%lk^LoV=
%3RMp=oT3THA7BI+gCIZRQh2n3r%/G,9,=.`b(o?T4[jcpAQ/8O8UEZRrA?Zc:S<3$BYS->%se%j')Vt[huPKU$X8,Y-G1@%s7&f_
%6[Id2>>L<=Ur$_hV>G`A>MF@tU="CX>j"_.'-b\)1Q"]nNN`SRYYKt*l%KsHD6FP!0k*%#),7-IA.,TlWLA(2\[$f]f.=?6?c]tJ
%>(Y4lnVcDAe-pg0U#+-S3c`cXT&YW..,jL8=8T!PeGN.bF8%@V]b*Qt<%!>8j!t0E[@<VG0_AJWMK(,$2jA<%:$f_.X-L\iH?lVU
%D%Eqs2=r-XbRqiXja-5=UUV^+U.HD[MnWnM9"RTMTpMg<OD)dMmH)C;5BQ$PbNc)aNG'3Yp=3%K>@B&r.i`t+ECikoMVWfRDRUJ%
%F+(;qXnRYF&:A$ToKJBEY!Z`k%AF4+Ms]lm%.6,B7?_FekD.F2\Y'3A5C,:b]?&)uN+1OCi`&u(6U0DO92JoaQV^`JNlO<%P92-O
%k).pf,PKSJ]XChI<!:IR-ff1j&p9Hd>6pLbO]+W=B8!0u8&eR_ZG-P"__l1Wm:i;WKGd)^l,@eB5/uE`XtH=Kh*`a,c0&U1q'dSp
%EMd@71])dRiMWO7GTbQ'>9\si[K('4eAdrc]D8R(q\OhQ0cuahq4=6DBi4qkV]74LE,.jcN<-rFAI&"K3m(Mq^m1]P"[c<]<7]m0
%8gW@G!.jk0d]V8B+&ia#DFr*%aqIW1F@i..4YDs"(-B48e^,!RDEr2\,cLfbV"F[rjiiP5@IBl'QZ5WoOQTQ#aWE.ia+//u/<:o$
%GH#0@GbLGi)9NRh@0V>O9+,-KBM7HbV.L.Ce`0X("_&BL[COa4`IW9NmDr<mI:?FP_gp^L"$r)9dVO`h7-qW)aFt,LN56g'oRah6
%j)bmD##u@lPU_e0pnP^Lm+FPVZZe]JiMW`enL>MEplidI'[",_4RhX>TtI'q6WAl5kt_+joSk]/*c/=*fQ!h.GM6$t;FUReAli'M
%,?r5=[S8*\B6ljT:=8JR6Z_[K-lr@c44DW"Xuq4X-`]gR21Zll[OTVaQTTYK,-7`p>gJb:1$PfS9QY"@Z1L?ZSTno:r`"SfG>U%u
%MU[fNqXAC_qSUIDl5GVN/@J%%p!pPUot'/+9X@R6apZ0[7:fI79W5u@Fq`Jq4d!n5*'1tDerN2JgS,!uF!(+ngK^rGjBe%W+00Cn
%T?[%B3P?4-#aKTGM3l`<X[,kG#2!==r9%ZAJC5[iS#OG$F_%ApgEN67a+thdkf\UL9)1sm0-V$g2h==%JAe\J]*b%)q>2IKBdbVX
%&S]Q$#I,D*g5-+nPLsjs["3thYOnHf'I",W(Y<C&&!Yq70Q-koDPB100jZ^?+jNHFFU:K$+^$_N*Z`0Nf<IdSn9A],iVnm3DUS\G
%;rl`C\fYX*F^\I]^*?QJ@o?Qj'GWg%;:uMSK5,Jn1+R^q$6LPcU@bjGVp\2-'hCkOE/msCoGiu*X!6R%k.c$oO-Pl/`_<p#Z/>q>
%)>(V3L>;;DM8^&IW[&CkjhmSk+f^tld5-0:0<rZcOUVeV%(B\Jh9)Wkn`!Mcor5,3nWSY=ep&r<`Z"VXi_/?Nm3elhC0+iS*CNgY
%55cU!jE7%=gal%IBr7$F,G]Lm1Yd!P9<HX!1r'bqNG'?-XVMBT-4UEm((7#JBKW(G#KWb'2/fj.^FDr$N6Wke7)""ANq8j\Af?2/
%qP2jS'k'8[>jS1#*i@;[P^HG[M7P4nT5nHnAHE'[1EarL()4$qk7aZoJs5\l`J?TVJ>p,aXo``U\YgOX$AZ'9*daEqB;FsEJgrUT
%Gm.O"-&c#Ui4-`hEN5I)A0/c3cusI6"hC"sE+W4+&/Vg&,+<:gj12a(=8"!DR;mk-,c:H\R7aU6f*=.MT96"C)_#3%;j"^E,>O"(
%(0l]JQEBjC2UQ_%$i1[8Zn4Y[B@)c/O:NYcOKbBaakZ[0mAh2FqcsMk<#'>?B!8`4=Lli5_CMqoV-Y7Rh(O'F3bWEZl(1FXc#.R$
%gYs/,js)\0\VO[-6:^_4&RAKtB<^/dbo*8:PltQ27];cNCBJs/n<C$7Si4E5c$cR$6".C(7S8%E#>B!RVkX@dg\;)D.uN_lV2"fr
%.mRiV"@V3VWa%Z5iqo,IPE8R3LLi1-[BF\beD`^;BNshaG%gW4<r+TJ[n*TUbc+U^N;f,+;^s"b:4R(pX0G"3E4]n7M!kC,O/J_^
%mTP:fW1(?j,<XY?e+!/(U1cm2[kKH?Ms.Xo"=S5&ko`LWRaq'TgtSemS\a%<:CUOK1URsX:2<Gnqrc13/cpf]LQ8k_`!tZWI7<qq
%DRMCM"Z=+SC8_!j+hPDURHo\g26,mKR.Z$;#\Z&Pbg@m"aBN>gdc]"@V84N4;9kD*`GMH`aKk3qDX[>UC/)^QV:l+hVSTN>]E$1n
%oX^"A&b8+`V6-dMbX`ARH"H>G3E?ej)PRro;JhQeRI_b=liDOp,sEo'/V4n#Hg?1jD*Ph@\Ofo?(lNjuo+@JO<Q1@Or.fh2&`H81
%2/>o1fg4_fbnK#YPo:B$@f2*&#BpmppCmc!!$%5$`r5rfCOIgLSsp.KQAm5'j;o8#>Ah<#;hNQnrScbM-TrGi(qlE)U0PQ*1F&'`
%4@G^bj>o#NPk+LS_5)cSM6Wd23BD-nGMThT@of$W/BjKH9WliuE3]dST1i&Z131-Vf(Gt=fI;Ef5FY]kEK2HJ]?EJa9e$d9I\ht^
%XGHsX*i<N`MW*O5CGLqqK5^F99VWl?E#jtuROeLao>eYI12[m+(7"j9D,e\>`ndUK97[q:S=U5AWRFX4KW&?Ze7LL!8XPsp2p9'I
%Qa&OQOSNT!&!0pSA#9$DBbuDaETC4gMG:Np$JAP4m-M6c]rX^Nkf27c0?"M'*]rIQ"u:?R!\"NMs%r?Vh9%jclB"HQ])=:B2)UGc
%\Ko[Q&IH/5=07a2r-J[&&H('E,HE=j?p(glkR;Rs1li2e8%.rfpU_G)DpQdIbA2s]b<:u&@gHDhq3oMRSe5>pKuq&W],g'[pV?-P
%gOXbnZgQh+_]!.:KYSHNa)S3I-jduO%!X<-]%\0kSOSD:CKihfP5n!\64C>]kin-!Y0.Qh9ed.O9FSmR2n(kaDiu#ClDc0dH<K"H
%+Ujh>I&)<<C`h:$NYW/q)6)!SK/j^O(C7J1`lTUA$'cEhL\p_gn^&@QD.fk\Mr$$P\/G%/^P^+%`$>]!i/TSha;PL*`fUP3UDD[S
%%Nq:_G5)Ijb[Z\KOMa-1cbjq,I/n=oS/G+<CVjB9R3[ZihtKR@f"n;4MTF9Y/]0bRPpX2V7og2([NNoA3O6Xo]g`Ln0o#6MgAW9s
%.-@<FZ&3a@W&XW2o+MPPCP14&7d":dU_:(Jd`#tAjp&<1V7NhcAo"n`U!D3(b^C3Q!^Pr\Q>Sj3Uf5!!+#43^e9D05k8k0$j^DW=
%=L01`Bsun0X1$-_.Uuuh#Z;1O;()!tEEbP`Whhe=;X$HVD1r?EaKjP=R#g[fE`X1%=rMo;b0D\]@JITo_3+p7:(o`M]2`rE'$q8D
%)4`>Z;eI2qVC)+NShCc%&ZIMFA#MFj,uKu?/]^_Q#S4El(=r#Ge[+GlZg)-=)XWdo8E@<Y=pF,c[?di/O93nA"ZpP$+5ob9+AtuD
%;Q>Ff"/SieW!>.(83@Rdmi(a.`pu*A(6SECU"%U'Uo['T#=P!8_?Pg4.jMYZ7_Wk%a4dOTgtHY]R!q4]]?0'EAtK)QEL^qB+\(-O
%5\tit$5$N+^Pq;`#au]0N(C'?NBlMuo2o"h;j0N?1MV]#W[[.Fb@luIon093Y@?tJEj[VEb(E6YSP0ofgB&GIKt-*878*)bY`h*]
%p%p_mH`5+NmTq^W@dQqZp:TRh32GkQ2t$22=QFGoK?l5^a(M=_&5jSKY]>GPVEPsoLC^TNViLk:XdI)G(OBU&?`9"Dcc=@;?^LuD
%.6SiJ^(B$m"1G-6[XIH=Ek@8',d_W(s":u7rD2\NiFDJ-)JQR\+;r<DhkrUX>dhp=WYQp$>sB&L^!@*$90hm5"Te;5C`YcaIGn:V
%kaLa^Rc^O_GJkea+f6o'Vk[EB'Q=6VB(MNlX3Za:r-\FtFeX6&eq50i7Hd/6bRPHu8mE<VoaCQ3Ym'q6igb!.+O908;gnOJIpq"e
%>g'bL(kUkAG_u/G@cn[JVlnt[hMfJOeJ?XIT-2f%>%F:?l/'i>nQAZT]GSrg,g2q"Y>oP4c3Yl-)hUg>1m]*tMcn5;/&uU=U0;EX
%Qu7#4m*`\<^RgbXRR:H-oJL;!lfA:$'9MI.G)YI1BPlUfp^.J.J"L<m0I@O<&Xat)8sZl"9S0)!gZ,@#k*bHlo/^9_+MpO7kkoPh
%s.u7@Z>fsQ_ELA^41a;pb?-VY=DPqXH8ju4BEbfP/o0=YPXLK_K[QHA?&FG/@c0Qo?qNOT9PsUh1(]ar!uFt;knu[Dr*N[El#DF]
%oGMX,mWkB33uDYGWL?V`OHGj;;UYO7J^_go[rQ2DHXrCQ>X*a1p2+$/Nl>u`[pao4b9t^KQ9bSp%.o:ricc?NU<l0'-?19^!+O93
%"YBUI3)WR#n#GbYo&WQAd'Baf<dn;!GYgH'WDH"0.3D1E'bDQsjgqb:>05Nq?J-95M7>Nj5kno^):&V-BdkT:,%B&Zd"&jk_K]ds
%&L4ls;M!fieo35>^+6X3pqiA0FtG4]-A;[FL"Gh@D-DaN34,cQ5^%B7KT8$-m4k3]L!%:)9/X@3e')5%;JhH-[-j9!d\r[!OIN]A
%qUS>9Ya>-jZ$U@_=8Jk&+CB;K%Th\UXBmO5+r7BWb)P9KUg*P?I2LI<4%#GC5Y,[#D(?FU$X/)fG"TgpPMob.V'UD(#Jk8X)QPa[
%=?#$A7Ue6?J"&kj#t3%65j_WRD(rCaUHeX5#i?AA)/4+.=US^<H"LE@dN/!t&nVUh@6f##Y!*C*SlU#1+[7e=-YnPeeEkV"E6V<^
%@:i%or"V>^7Ffk1`c8)HZn8>W-'t3@0<sO9%s=Rg.45S:]=)4KW$T^VDQK'HoOBG!EI'U9J;\_6;_H25*YtLhP<Yt=31gJM/n9Y>
%M3_DOF$!iJ<3D=Fm2E+L#LM,i[3@$c#'a"PRR]UHG,:[s?@\P7_mLP<Rn:MTpC\og`YB3t5a$!q9a70GFIPs8\Dq$i1(dJ]W)[#)
%=KX^HH/)j^b7fQWAJ0j,Vj=;3-.\+hZbbo2EQal;K)#sC,W2lJ#[8(A,V$RcNdd8?E,fbc(3e+an+Wm,B8[DRj0)bqU^_<B.mm(8
%@b8e:HD31Gep*dl/CTL]C\31.qRMkEGMr;g7.i<DbZiWoXePL4HXp=?U`4O-%"d*N/_5%-_Oc,"%]Wgo:Nj*e?Xkb&;5'E1j'LuM
%$!:[d7EIS5m2=`V`m&R45=ho;4VDT32&UFq@YaIo:"Fdco@ELlrEY:T6D>Y'@KfL#@nWgZ&28p/Q49CQ^;g=_*a?Bfm0>^0\%UVK
%ad\"6T7P;GgO4JAUL"ua,4,s`h/SPfFC^.iV8gCjOebJejSe3uD89mGQPPkK:)9hF?8?2uW8Ucg(gr[S7oPWIW;:o0Fp[o>*EiH+
%5?I5UgSqb\KNK19"DPt*i^88":f'1HAQkrnH$=&<m7L)X"4H8Te3*#ASCT>F?WDZj`ck;]Y^1m/G`H;+R"K:_IFIP^Y4l2g"_Xi/
%[GM#3R171L<t^al14R\[dYZnTB[)ammlO<@Hn5=g2*KhK0@JkG,WlfKliXpBZq3@9-+e&/1cl@(oX"5Pf'N670;'&`A[a0Q^"a%]
%f4>QlH7'\\4f&5@($MXV0Cbm2hn6cRTcEF2<-ug(62C%Dkmh'r%,0='ijHd^DB,cje+TcnF/7@pihJkFSn?<ccjgPaCk4(*mbsl4
%aO,oe/RkTSUj[Za=P>jW-6<E3)VH]q[.mP`@/sNpFt9mGe_Mq)]*dH,h7^l""+6*Dj(G/k>_;U*@&>N5=,91$FPsu1C`#G8X?s5#
%lr2O(4@"0\V>OGfhl57FM7V8='O,nL[NSY]KNe'dFj8[MLBJ*d$L!O=ZkS;mEVRe8:aS?8]M:dD7W^I9iD@ed0+-)?(W)L3%4)#H
%#?'\eJ#pH3k(:,HB<4g71M%jbG#VV=ATb+DI_6Qhf4/.'qH$eR]YP+1hPk:`m>9sSo'EsHr%D];^i.I2T<6-fr%su-o1Qq3Lim=6
%&%kC6Nn@SqrbO*GctYE.c_:bRPW^0%r3^8WCr?sE7"h=*e:p8g"t/C.UDUF6VLmf<?\*b:k=U\.".n=UrL%?QbI_;uFDAHCYN^RK
%47mPNZ[W_>02p`r0Mc4Jg$K*jnb*.s[D^PF!H3DR]#O6\@;5C,+%\o04e)PT3/&<fj^]l4'RPm=8-'a<Q5-!8iYlauclFB)]FsG,
%oq#a@!nS<=U1Mg&6$mZP4>N4,U(WI<]V]_KEJ(VrNa&PkQ1rjEB""`U/5ppaX0]n`l1K[=?G(0/,+5mhBj$[L_-rtH%$P*25s^lA
%U3N:NPHKp+,LZ-k\dJ0`c;D5onL41REUQ(B0hHu'O(@M3H`UM^;H6O0)gN-.?[LPC"1:p%nZPm$Oq+/rDL'\EEP$U.d>+"nJghL'
%>M2S_c_);7`Cu>;PE.cU6@%7KQ=NpY3ZF<YI`8YQO'.%CWEf+$EBKplSE@B1a&<XMau?.LiE1S.l=mu*[J*Ee:Y7bp[PKAUp@4s.
%,mXXom@]a;]8hXPe%J%N4,$>C!T&\M]*YRfYqHGepaaU`XO%#ugtJ;3AHU4\r7rk@:?K`.oQf.S-P&1n)#_I0V\cqq3bQ'7]_-Sj
%d<iJG5o0F_&7o[dQGoq-V^mHpP3c&%+u>N:/lEo]RkJRg(a,ND5httuFNj%38Qs>#("jY]dHq/.V%k:Gkn"IQ/b[I>o%;rp=F=+e
%TD=@b[MH/91qB(L\b,_uI;cf2e<4d#86J5EQ&E68%Nqk+Q?7!*,;=8UE>BA@aZ+V8!>Nis'TIT8`0%U\+7+6cOb:ia%uJR`Qj(!P
%LCHj#g6p2a1nMc:i<QQ%P8$0R/BG!O;-QNh'O2W1:6VeekG`aRc.Ld^hZ-qdEUYpYM;oPLGD(OA4*DYqc38,mIe;D15S-O9\WUA]
%=<*ui>e$K/$>A%KB@XEV7ib4".EaXNZk,oZ_3$a-,R-<bo!C6#\r?Zcf`h!t:2ntp.JZk%Eo0m#P_ipAkr+ttMX9`jh)Q;rZ1VEd
%p0!G$cp1s=!R[X?"t).%fVe5Z@9GCfJZS>#cA@;50D0m5Zo]:GroL'S>)'/d#YTI_D9DLNDb&HN&>O89Gj;/lFMG/kif3I(!M]r_
%V_;c(Ku[CPGLKCf+=o/8O['jh-`Uad_62)f*MUg:W*[HCj?P!W,*,`V4,S+7f&F.piEb'Z1hgt"5Zkn\l%iI/;PLK>^/TCqAm*YG
%%'NgU]+k-2J!XK*!1dGu!]FQ%mTCqg+o&:n_s<mjT;rG@cKlL&j'"V&b.0Vt#p2b`HU%WS*`KGl[RA8W=l%Y1n8js)/pFPG!5+,'
%]OOb,7p_B=QFOsr[,#C+K]M!V7;j^#K:OAL+5e`o9W-J'<6'GjDETj\05qtT;!m9&K(W"DO<-8^^o:"l]0&fA[&t01h2>$@Rkj\U
%dB%n0<4HXZXEI>'gHcts!`5h>mPpV3C48iu\7RGUQW>c^\FoUA7ONVF/+Oi6E:u!9e_ul>\G]Z'0cXWh4dC_:ERnlBS5K=7on8Q^
%bE445]&gP8hJ'-'^@pS^L,tOVop]asb(HaiBMN%%j_UWIksaZk(`mD`K;YgD]E:82X<fK?HufG&8IsMGP6t&/YNnu9noXU2YcAu7
%d7lc2g^S/eN#ggRRo*o+'moToSgu9l!ha)U=)b)M.4RVE/l5Rg!1B2q%O0;=[u'@CqFZtpB@G.Vepf-7[C^VUWk>f=n)d-%*]36E
%cQuS&YH+;gZm"+>QZg9,HJ#+%MNI:s!VKOmq*Req:WMof]PU<X&kUYmnrA`<qVVh>`<mKUQN^Dh)^Hta5ePcN*33q_:%)`u:+UuP
%epH9i,fH-'#]bMh!cLf<T8E`cO\ZtSJ@n%(#2QL&ImtDC)f\+'Tg5N9>ha[?/%R.5g*&I65@[-gI::2Zl4faAC'`=,cWOrt3H7Gf
%`qWU"@^hKbcsKrc"!l>h?(k3H8&eh=Y.K9.)+_\IHl)95Qp"JMZ&kVqh(X;MMGdLA*\aFh(KcEMUMr[ii3c32R:g3#!SMbL4!?Wp
%JX)n*D-IaNj[3S*:.$Cu3QQ(XXK.*:KpTZHpZ%;'ZF613#01ph^t^$fOR%Y/<PWT6eX!\=;0h&_K5>U/^PugK>hW\)//>W/`F/$A
%&?>0h\RKVk!D7Wc'@DN/0?"2MkC`cc6X_OR*$ol9MhtY+<?$`(?S"@#-ImRahHMoq]p/CoM/Q#'98WU[K^Z>DVjdR&b54t.J7#hg
%^EF:RE=X*=$GR`?4O>.@fFbkA;ESqOhM<%f9S+@q-%2I-r(9\NqAK6iW)+9Qa&&kn4]`9"S^`n8<<LWN*H/+3ZI^=3M5jT2E8J/[
%93A^,jDPEOd*&YATg=&3o3gN]/NJEn:dX#2icNJr(;+Nsge4NX](AX+9l1H*58#0C?,hZc7Zr%\0s]e(YML";@d"`6<bo"KioOYG
%lh8rc9^6J>DJe(_o<5=/OS`(F63qhl"jGE;jup30R>=8Kb@c[F<n'iVR4i@'!p^t.ALTQJq@=SMbXuY>dB"'h":_b&ZHA,u('#<m
%Y[*,)f;Q6a^pe)oH-tuQF31;P$r8Le$eH<5TeNS?"D3HqqQ*[Z?,"'$s8HE.>BcCe_cQhF1K-mFY5GmBSoG^PYi;94?s"@[p)2%a
%c_h'j2.1:KDEg.MVYLc2dpDjF`7o`q)^$Yc#9#tf/DE>+(T:N7)M88P6#3hR5'PVZ]\uh^G\kNmCH&"m^ISi&J'EKfj[RIpDt;;K
%=1Un%1P%q!!<uITSe[Otjl*jiVBJ$IYkd-L0GS<h1cnF16V7L=UdaZ%r,K0V#f9I^cZBpgC0skT=Om>C<M!)C"&KJIrVj"NGOY]L
%piQ!8oiE2.MhO^4<3c2GGZGiFA5&5YlmXsBdUqbI,,Kd6h-j#<fi0$$N9]L(8@%Th>UrC,m0L9Sc0!?)@r'tF[:m"-cMd<K4OSAU
%UJ)nj,4t`7?\KBU2QFWs=/lCP;c@M_QO=.ZL5I@_7st8q[=l0sn`$9&Z:>of]@EJ#*2g#W)O+g(CX'F/(RerB[++VJMSEfEe-F/'
%<'ZS3Wei-.)YkTR;%0C(%I&r1\*VE8d.n`'S4nADKn]HCUa]inJP+Vnl@/q#$dL6&eb0q^>LpOCltM0$EQsPM2.A.Rg+VgkoShI+
%8Mge9!#;d:@a4lhMn64P=r/[lgp*+B)\?sjH>#g$G1F':O^SF[EprhY.nBR7k37,7dk!6Pna8:8a]]KYM<u")7jp6TFC?Ch?;@TR
%jah2JHT<a@K4O1jgb5.jbAp-`_;ha6:74c"^"IE?;jC6'bTmMu4,Y]1qY&*([(,,_aLc,&i<&Ss3mG@>XB0jR0d$9#ZkXGFdp':k
%35ZV#I?iAgWjF>b)sVFo-.A@5\<8[`De*H\DE`.h5=_eemRtbTEk,M9]pco+s(M_HL6:*ohiZq;$?!6r4>n1S!`7FqW$D,:E+c_M
%j3F5k2jrlf/tE8.D*(,SP1Xr6bt3(dE3<[(\)cOK)g0'"^^6q[6[sP&OC?SSKL.?FfEK`;3h?f.BoL`:@JAImoeb?%WX*7X1<%<%
%iUkd^#T'Ll$n9&mLhYI[c9&DbJ@HEQYWMUWeMW<0#<C9=[hqZd92.V6PIkpRIYj?U+r5oLEEUSLP24g;>O:QT%AI-M3gL?0[fa#K
%U1B4J#)DM]Dd-QrgLDM9;L@V@=;,A'NI_pq/V4<TdeVW\N7?Nq;mJWY.QaWk!s(>4F&419fFrk`(]EHc('=rROo*no'm/+e%lj3>
%4VZ@",=eS3]M;aTYjJ;l+l;?amZbbs%?l0]WG+o\XXDJ''ae`NKtM(6PB;LdAQ?S.ZH<NjZ60&YDgkV_e_S.p_A&D*VSif6.8Br1
%o%0.G13CrA@7qQ-Cch-l78d'>grEKhC,]h\Q0Y+<2*"bJArX^tCXR6.8+#,,7NY;->W"==WEfVI7rcbEZ+g/'k5:M1Tpj/pcA\'/
%DhdAi%h<r@\sPhBVhaW>(b^7,j>iPQUl=^k_kmfIS1j6;Njt3GlnR.np9^P$KK-GT0:"1Mf3"WYUg[AN^aAIae)QBC10C_5JdOpS
%K/6_9-u_bt*07]"8U?r)<Ypnrh0miBn;5'MVNW<%a*A?I^XL]ie*N?Kdq'piq&IZdI`>$JhE^OG<C-%4gckq'\.*^XFWRs'J9,Ne
%=CsJI);F6TH;]?hb"C4(c6^q?>!/&9_i!Dh$ab[CQ(:XG#(o@pM_.o!itp7?Xc9=)9a-S/4ksZIbIIl`<0+2\;+Oq$%Asu(8:nNG
%\]GRuk[//.FigaPGrp=]B5M0\k`=@QPC;D7Q]q"d1E"4-&QXIK]RP1MVCh%(LWJ)f$L+bt8R%3T=[8ihpBt<F8YcT<8Jk1-Sl"/f
%ACRYL4R]a=GuWT8YV.41/2@)bdNkpO-<d*kg?.C%L$keQ*02Op$O-:J+eP'g0I'_m0cn39RX_NTFVTmo?Qk&/oFcCOm>+GCA*UD+
%)P42eVA?QWk8u8)hR=6dBA]qbIO^K#o;YX&J0%(Oa@nW.he.l_lZXurnO7:X&)-p?qlgNQ?ha<McCdGikUY.i!Me:)dKhNunVClp
%;H6%l^&h[bB`6)%0sX7E(lGgMbs4+A=f3^B:d8:AZrc'h8kmdJ4Kl!)l`krZGM"sIFTq;S&TlZ($]7^"D5K'D$aJJJh,jWmVB2Vn
%BJ(T%(kb*'IM7I/Id`1K91g'Q>!m,grMk__0(_noqm+1`6.rbq6h-^$T#[Cjqg)?,n,t9+emVs$*[um1mL#nh1,AciV&<sTB(m#`
%C3&:8ffc,WM-U9WQhD^DnRlE?1_-*Ur'W&Y9mhp0fSXA')Qp%F[B)P16q[G(RcD"dF,"i7?4>:roL8D(Q`L%<CHmm!,)=mUK!^d'
%i%VAVc2gaE?"W'Pk-XaOp2V[-M_V@WT0aWB&l.0r)Ha]M$@uH_N]5HCoJZZ&o^.S%jhsQbiIF:\m=&/L01TGT.rY'M2]@#a.FZAt
%S6N\%@'-*N0;(pLqN]I?WOY0SX\.j:fYRtZ6`T7rNpt+9[HB.DE4YN/E3uudT:(<honM3-Y"4/a7QEDnOq4NN@68'?igYCk_VuL!
%k%VMrB;k7LDSU[^k1)*TWl2Ai2qS%:;?:M2>XJ7]U#orUS(YX_l@3*kBn.Eof]MPlO8O6^V#?sHO]'ohp0khrP.<DIb.$AbZ@ng<
%d^OE72A*p+3Pp.Q[%dYu[JDYG9uD+BGGqLHW!tY[cuo%)>0U!sc;f]D*Y\m2m#.arAg.ek456JmWFrt9>03:SFf$Ap<[dga)c@s&
%3&eB9C\A?\3C[C<"G(9[Q-`$9n:t2f1g@fj];XTaV:d[.bp96McrL]pU".@%EpgO@eKk]q$;9t)"jIaXe*<rK/CUB5#l8sn0nc/9
%n5#8M4eq.8aB0kajn0`h,(aW<E@qT0n-_d#DG.<kV]4;72ShU6j5)*JVbQorihS0AiM)dNBb.JcU:W%+qM_h,YP?h)8t_S.VaYK/
%TQCto_586'/N:*`LSZ>6]eK4mf>#D0&.nmKjkh&TaV"6C(c<=WN7`.SpK5*SUPHl<dA!i1>"Q,s;c2r@0rmsT?SqNf`bW-u:dc#Y
%B;B,ic9"RkTXg\o@8'T$(cu@++kL6W%ZVlo+7[Fi70A@8k%?EX<4lpUWCen+[:UtaQo:[`b;AsAg]SU,MAU?l(8ge-BurMC=4\i9
%*f?,sH*\.'m6&3\lCK'.dsuDfSBUa8GDh>%;Tifl#jE/8Ba0j$X)USF0"e):`5HUp[Ct-KGD*h3hT7$nc/ud\+,f-tLap5M<J/iB
%);-iu7*fH?eg"'9g77>M-M_3$_1Lg']EocjgtQ/i/NsnP+V'tT5^<&Ld16*j-HV*Q<QTS2&*g^[@YYQ@)uA#\Llb!PYTJJO62S*U
%8F3[A4+qY;0#(WJId8.5j!DF6MIK!!8S@/VX8K,4p['CDp%'+2Y6du;++7MT?8Fm=?Z>]Ob!p+O78%1&AYp?emE_':_5nE.Y=j3n
%PL4;$DduV'$k]fc("mTih>ao<9A``6\gGTAm=;ZoVT+tjke2ZTl;jq6,42O6:n2Rfm$eg?>/cmh9&0?p2tF"!h`?42C?Pmr&fRQp
%7d>jMdW6aE=@k]eKMgFj=kbQW[\/U0_RZo_2q2)h.'#_!4-YPuj:":/qdSfN('"SD/?8Pm>Iai8Lq2e#UnkS%Al9[25E'!M04F0j
%<++]*C*ir6ZuuPE]#)b'=6*C^'$-[Q4#HS#M8'0k;uK'lR`#DLgY0J9_WV&L;0NLi)UGD(d7QT'AW,\kOklH*jjF^MUjIa)'\t^]
%Rud0;jQG.Ega/r630(jKRNt=04'1V.nHG"-#"Hu]:h9efpK:Ag197&\X!ji&!\6i,N4<mBh75>:]XArcR\(nZdC-5l.T&g7N-OC&
%B50];N^^`,YK[W&eTdp)fY+n=b(J91IT&COQir)V/SZ/VGpD5'&N"oQ[,""+>UiQRDrhkk<-Ia.]</qL%3G&M`$S6alXcQBDq!-"
%M;0?gZCl/GE/\iu_%qe2VDuVJ8/\T#6.G0A$LXV/%8k9TPAH3.&Ctl]7,Pa7n5j20Q@JnCJ,a`mnDF0<a8b_&rqV'Br5\j7Du]\(
%E=)X'J,I?:qV2&BYQ+C4s6%/qleh`u5Q0>$rh"];b<Q!t5QApAs5UlomJj]qdpN+=?iTh<s8F\OqR=6;g]-t#rtc=Ikl-3apkSnA
%5Q#_Ts*+JRfQ'ng~>
%AI9_PrivateDataEnd
