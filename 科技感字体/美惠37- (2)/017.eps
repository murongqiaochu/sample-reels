%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: plata_5.eps
%%Creator: Adobe Illustrator(R) 19.1
%%For: user
%%CreationDate: 5/12/2016
%%BoundingBox: 0 0 1201 1200
%%HiResBoundingBox: 0 0 1200.0020 1200
%%CropBox: 0 0 1200.0020 1200
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.1.0 x29 R agm 4.7731 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=100 RasterRes=1 GradRes=1 Text=1 Stroke=0 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c067 79.157747, 2015/03/30-23:40:42        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
            xmlns:photoshop="http://ns.adobe.com/photoshop/1.0/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">abstract vector background with high tech circuit board Vector Illustration</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:creator>
            <rdf:Seq>
               <rdf:li>Iryna</rdf:li>
            </rdf:Seq>
         </dc:creator>
         <dc:description>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">abstract vector background with high tech circuit board Vector Illustration</rdf:li>
            </rdf:Alt>
         </dc:description>
         <dc:subject>
            <rdf:Bag>
               <rdf:li>circuit</rdf:li>
               <rdf:li>vector</rdf:li>
               <rdf:li>backgrounds</rdf:li>
               <rdf:li>tech</rdf:li>
               <rdf:li>processor</rdf:li>
               <rdf:li>abstract</rdf:li>
               <rdf:li>abstraction</rdf:li>
               <rdf:li>chip</rdf:li>
               <rdf:li>card</rdf:li>
               <rdf:li>design</rdf:li>
               <rdf:li>electrical equipment</rdf:li>
               <rdf:li>integrated</rdf:li>
               <rdf:li>technical</rdf:li>
               <rdf:li>computer part</rdf:li>
               <rdf:li>hardware</rdf:li>
               <rdf:li>engineering</rdf:li>
               <rdf:li>line</rdf:li>
               <rdf:li>cyberspace</rdf:li>
               <rdf:li>computer equipment</rdf:li>
               <rdf:li>graphic</rdf:li>
               <rdf:li>electronics industry</rdf:li>
               <rdf:li>digital</rdf:li>
               <rdf:li>technology</rdf:li>
               <rdf:li>computer</rdf:li>
               <rdf:li>circuit board</rdf:li>
               <rdf:li>illustration</rdf:li>
               <rdf:li>creativity</rdf:li>
               <rdf:li>connection</rdf:li>
               <rdf:li>computing</rdf:li>
               <rdf:li>backdrop</rdf:li>
               <rdf:li>science</rdf:li>
               <rdf:li>cover</rdf:li>
               <rdf:li>internal</rdf:li>
               <rdf:li>connect</rdf:li>
               <rdf:li>art</rdf:li>
               <rdf:li>industry</rdf:li>
               <rdf:li>conceptual</rdf:li>
               <rdf:li>construction</rdf:li>
               <rdf:li>textured</rdf:li>
               <rdf:li>computer chip</rdf:li>
               <rdf:li>mother board</rdf:li>
               <rdf:li>motherboard</rdf:li>
               <rdf:li>black</rdf:li>
               <rdf:li>blue</rdf:li>
            </rdf:Bag>
         </dc:subject>
         <xmp:MetadataDate>2016-05-12T13:12:04+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2016-05-12T13:12:04+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2016-05-12T13:12:04+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A8qYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqmegaG2s&#xA;3n1OK4jhnNDGkgYtIOQDiMKDydVqwXq1KLU0GXYcPiGr3cPW6vwIcZBMfu7r8ul8hzO26fJ+Wer+&#xA;qFe4iMbR8xLCks4rX4RSJGbi6fEr04kbVqCBk/kJd/3l1p7fxVsDd8jUfvPQ7Ecx7qJC6t5B1Oxt&#xA;3mjkF08aGWS3EU8Uvog0aVFmjj5qh+3xrxrU7b5DJo5RFjf5/pbtN2zjySojhva7iRfceEmiel8+&#xA;m6V6BoNzrV21rbyJG6KjFpK0o80cI6A/tSg5ThwnIaH43r9Lm63WR08eKQJ58vKJl+hPI/ys84z6&#xA;Rfaxa2UlzpenpA91eRRyNEvrorkcgv8AupHDSfyjfDLAYmiR0+1hi1wmLEZVch7uHv8Af0ZPbeU/&#xA;yfi/J7VdR1DWnX8w7S5khh09JKVZJgiKsJQco2j+IvXY99uOVSjRI7nLxTE4iQ6i2JXvkHULfTZr&#xA;lJluLqHW30AWkakl5kTkHRjTZjsBTMqWjkIk8zx8FebqcXbOOWQRI4YnAM1noL5H3IJPKN+DW4vN&#xA;OghAJkkOoWchUAV/u4pZJGPsqk5WNNLqYj/Oj+g25B7Th/DHIT/wuY+0xA+ZR3lP8vNY8x28l1Ey&#xA;2top4xzyhqSEMA3EDeijv40Ub5ZptFPKLGwcftLtvFpZCJ9Uu4dO75/dvyRrflL5hRir3dkrjZlL&#xA;zbH6Iss/k3J3x+39Tjj2lwHcRn/sf+KV7X8oNWlV2m1G1j4bngJX26DqiGpcqAFBJ+dA049mSPMj&#xA;7WrJ7T4hVQmfkP0npfOvlZD2/JnX6gJd2xZhVVbmGoSONeKuKkGuxP01Xk/yXPvH4/H42QParB1j&#xA;L7P2fj3GodrukDSNSksDdQ3ckNBNJbksiv8AtJyIFSvem2YObFwS4bB9zvdHqfHxifCYg8r513/F&#xA;L8qcp2Kr1hmcBkjZgagEAkVUcm+4bnCAWJmBzLNvMv5M+efLvkzR/N+oW8R0rW/S+qrE5eZPrEZl&#xA;h9WOnw80WooT4GhwAWkkAWWGz2V5BBBPNA8cN0pe2lZSFkVWKsUJ60YUyRgQASObCGWEiYggmPPy&#xA;67qSo714qW4jk1BWgHc5GmZIHNbil2KuxV2KuxVluhflZ5413yhqnm/TNOM2g6Rz+uXJkjUgQoJJ&#xA;SiMwZhGjcmIGKsSxV2KuxV2KuxV2KuxVcjsjB0JV1IKsDQgjoQcQUEAii9Dt7pvNvk67F5bGfVrF&#xA;6W88YJkeVwXBCjvLwKyL0ZqPs3LltOPxsJMh6o9fx9vz58+YOE6PWQGM+jJ/D5cq+F+nuFx+muE1&#xA;/MXQ/MvlC0kM2mTeXpBcaTdWEalVCyTWl39Z9MxhVqsi+k/dgg5VyOXMOEmG1GHz4ZX+r4M9Lo5e&#xA;LGGf1mUMwN9YjJj4ep6eod3EapbqMVrod7qUum2atO91LcLCDwWSX9LT2trCSvHjBF9WEnBSOTU5&#xA;GgAzImBjMjEb3f8AsyAPcKuupddglLUQgMkvTwgXzoeDCc5ec5cfDxG+EchZXw/m9530exvPy/0W&#xA;eG407Ulhsr7jD6khma3jtbpYH2PF+HD7J8VpWuYGbfKANyKHxd/o6hppTl6Yy45b/wA0kkX8GGW/&#xA;l1tV1rUrudmi0mG7kWWeNecksjyH07e3X/dk0n7I7dTthjg45yJ+m/wB5lE9d4OGEI75TAUDyAA3&#xA;lLuiOvyG70O+RrAWlhfMiaxd65J5o1S0jYMlhatGwKzS7LUch8+g7V2kxw1E/UZ8ZH80eZeWwkZe&#xA;KcL8KOAYIS65JWPpH4++oN5C8hTa7Mt9fK0ekRtTaoadgaFEI3Cg7Mw+Q36a7R6M5DxS+n73o+2e&#xA;2RphwQ3yn/Y+Z8+4fE7PbIIobS3EMSiGGIBAiAKqBQaIgqAKAHvRRXf7TDoABEUPx+Px1L57ORnK&#xA;zuT9vmfxvtt9MVC8uRAnqNdRW0YoG9dTwU7gKGLRU+ydiOtaUIZEjOVda/H4/GwsxQ4jXCZHy/sP&#xA;4rnYlIGus2IdWfVNPk4moBKg9KbEytQ0PgfkRtlfij+dH8fFvOlnW2PIPx/VYZ+YP5kpBHJpOhXA&#xA;kuZARe6jG3IIG6xwuCasa/E4O3QGtTmBrdfXpgd+p/U7/sTsEyIy5xUR9MT185Du7h89qDyfNK9s&#xA;7FXYq9v0bzb+Us/5VaZ5dstJlj88QC8luL0pReZtpvVlMvL4leIKoSm23hXMnSyPFXSpf7kus7Tx&#xA;x8Myr1cWMfDjiwby15r83arc6Npuo6pc3Pl7y84ukt55WNvawxCnP4jQcQeCfPivWmOkH7wHoNyn&#xA;taY/Lyj/ABT9MR1JPQfjlunupWjW3lXywbq3X6zaaPqNzFDcRq4DNIvps0UgZT8L1HIe+bCcaxws&#xA;biEju8/gyCepz8J9Ms2ONxNdDYse7o8/m8xapLbS2waGGGcBZ1t7e3ty6g1Cs0MaMRXtWmas55EV&#xA;tv3AD7np46HGJCW5I5cUpSr/AExKWZU5bsVdir0L8jfM3lfy350fUvMvl+TzHpws5kFrDBHdPC5Z&#xA;CJxFKVQ8VVlNSKcq5KMSeQthkyxgLkQPfszv8u738t9O/MXzBf655QXVtB8yQ3N55StobeO6jWJG&#xA;eZ4IYZvTVZQg4bboRQfC1cyPykzIAb2LHnX6fJ1v8r4hAyn6TCQjMbegk0Cf6Pn3MI8s+bfOcPlT&#xA;zf5X8uy3Vvpt8wlk0OIerIsUknpTrupl/u+KSEUqOuRxYTKMqFyH4LZqtYMU8ZMhHHK7JquVx3+7&#xA;vTbzF/yqa6/J3y7Y+X9IuG/MKVVnvJo45Xcxo8sdw7sCyMjPH8AG4FOm+VDHI1Qu3KOpxi7IHCaN&#xA;7b0D+lv82l/KY/l55NuPJ2kT2mqXERN/fOkio/pqYpkldmZHl9dCRx6D2IwyxSERIjaXJGPVY55J&#xA;YwfXCrHvAI+G7yLK3IdirsVdirsVdirO/I93c2flbW7u1kMVzbuksEq7MrpDKysPcEVzYab+5n+O&#xA;hef7S/xvD+P4ovSNe0/8xvzR/JjU/wAwPMWt2ckelzRta2QRYaRWSzJNXgAqyytcggHrQDaozDE6&#xA;gY95B+V/rdvLATmjkv6Yyj/pjA/71jPmX/jqXH/MSP8AxIb7Nxn+o+//AKeSeP0H92P6v/YtiSpt&#xA;H+pX94sDPFPdNz1DVFTlJHHdktFZWSdXnnU0Y9e2yhiafC4ZGuvM+/lGPmfxtbmjVeJCPFuI/TDo&#xA;TDnPIekInl895cIElUJ5YSC3gghHmZYWexsXYNa6NasP3l1dSdGnYbu/f7KjjQNlf3NAAeJWw6QH&#xA;efPvPwDqSTrCZSMvy/F6pfxZpdIQHSI6DpzO9kFXl/y/J5lkdmeZvL7Terd3ctUudWuUO7ueqQIe&#xA;g7dBVyStOHD4vfwXuesz+r8c3M1utGkHTx6qMR9OGPcO+Z+3+rQPS/St7K3SCELFGAEVI1C0AB4p&#xA;GooFFAab7Cp23YbehEUPx+Px3vJcUskiTufP7z+P0Al2r6pY6Zby3V7OsMNuvJ6V+H4qBVA4szcl&#xA;oKUJYfslf3FWXIICyeX4/H44crTaeeaQjAWZfjz6e/Y9b/e8N83+b73zFehmBhsISRaWgIoooBya&#xA;gALkADYUAoqgKAM5zU6k5T/R6B9G7M7MhpYd8zzP6B5f2myWP5jOzdirsVdirsVZjoehzac/FlX9&#xA;O3NvIfSkPGLT7SWMpJdXZ7MY3+BD0rU7lVOfhwmP9cj/AEo7z+r9jodXqxlG39zGQ5c8kwbEIeVj&#xA;eXwG1kTTTtJ0XQdKs7ie0kuIZZA2h6Ky0utVuh9m6uU34QpX92h+yDU1Y758McMcQSLH8Mesz3ny&#xA;7h0efz6nNqcsoxkIkD95k/hxR/mQPWR/il1Ow2G0N84earma5u1kuUvtXvR6ep36bwxRg1FnZ9QI&#xA;1P23H2z02qXwNTqCSd7keZ/3sfLz6/fv+zOzoxjEiPBihvCPUn+fP+keg/h99CMMzAd+7FXYq7FU&#xA;28seYZtB1ZL5IUuYiPTubWT7MsRIJWvVTVQQR0Iy7T5jjlxVbhdoaIanEYEmJ5gjofx9j1gQ+W4P&#xA;L2jeYrEytpujM97axOoLyWVxcLb3dtMrbGSInirVoyih/mzd1jGOOQfTHf4E0Qfc8Tx6iWfJgnXi&#xA;ZaiT3TjHihKPlLmRzB+Tm0W20HzBoqW/FrqaTXhcXXBA0gt0eaIvsWYhmXqx+ztg8IY5xrn+8392&#xA;6jVy1ODKZfSBp6FnbiIia+3p1UtF0GC280wW9hayC08vac9pf38tCk1zcoZ4UiQ86yevNyFN+mwo&#xA;OQxYQMgERtCNE95O4+0s9VrJT0xlOQ4s+QSjEcxGJ4ZEnbbhjR+O++0J/M/VZz5hudBt+EGjaQ4g&#xA;s7OEBUHprx5ORu77tuxPU+JzX9oZDxmA2hHkHofZ/TR8COeVyy5RcpHz7u4cuXkwzMB37sVdirsV&#xA;dirsVepfkf5h8taNfy3PmDTjrGnW8vrXumIqSu9ubaeJ5PQkKpOsbSKXQn7PxU+HMvFZxyEed38K&#xA;Nup1YgNTjlkHpogHoJcUTH3XW3ntzKaeZbrQJZ9b1Xy9ZC08uXUx1fTNIYcIVP1VSglgUmP4Zav6&#xA;e6DYfZzJx4xHHZ3/AIh8nWajUnLqOEXC/wB2a51x9D0sfEXt3pBb3M91pGm3NxIZbieG1lmlbdmd&#xA;9bvGZj7knDGRMYk8zX/TSTGeOMMs4xFRBmB7vy+NmvltEbztYclDcZgy17H9GHfNhgH70e//AHrz&#xA;2vJGjn7v+nrELawjvndNSuCmlpDa6jrMzMzT31zcWf14iV1HIRQpyoq+G3xNUYMYcX1H00JS75Ex&#xA;4t/Ifjcu9yZjjF44/vOKcID+HHGM/D2H86Rrc/H0ijMYvNBTU7XT7SyMEEMmmJIJKRARXamSQBEN&#xA;ALeKNl4g/br14/FnDUeoRAoen7f1D7XQy7PvHLJKVyIy8t947Dc/z5EG/wCbXK9iZfMHmL/DVzf3&#xA;c3pastxdxSlAtIylrfOUj6hQslrGQR/KN8o8bJ4ZkT6rP3T/AFD5OwOiwfmIwiLxcMD77niFn4Tl&#xA;/pixfXYLy60XVpvilWC08vSSMzVIX9HjkRU1PxygmnjXMPMDKEj3DH/uXcaOcIZsY5XPUD/pZ+of&#xA;YwLNa9K7FXYq7FXYq7FXuNtZ2Eeq+YL2a2FzFZyajqs1lXit1cw388UAmY1qkYj+FPs1NaZ0MYxE&#xA;pki64pV3niNX7nzrJlmcWGAlwmQx4xL+ZE44mXD5m9zzrZgnnHzTfi/vY5bj6xr1xyg1S+SoSBAS&#xA;DZWn8sa7iR/29x0qX12q1EuI73M8z3f0R+nv+/pOy+zocESBw4Y7wj1kf9Un3k/wj+H30IwnNe9C&#xA;7FXYq7FXYqmXlzTINU12x02eRoo7yZYeaULcnPFQK7VLEDfLcGMTmInqXE12olhwzyRFmIv5c3qU&#xA;0dtF+UskVrL61slleLBMRQvGNXAVqdqjfNwQBpaHKj/u3jYyke1AZCpGcLHcfBTvzP8A8pVoP/GT&#xA;zJ/1DZkaj+9h/wAlPudf2f8A4tl92m/3aK826hd6X5K1rU7GT0b62lAt5wAShmNrC7LXo3B2AbqK&#xA;7ZPUzMMMpR5j/joaezcEc2sxY5i4SG4768SQ+FgbPnh3Z2LuSzsSWYmpJPUk5y5L6kAAKC3FLsVd&#xA;irsVdirsVepfkH+ZMf5fat5g159LTVPS0uixl/SkBa7giAWUrJxU+r8Xw70GWQhxCR/mi/tA/S4+&#xA;fPwShGvrlw+70yl/vaTDzC00uhXN7Lbx2n1+xe7S2gp6cazRs3poB0CfZA9s20oGOLf+b+h5LHlj&#xA;PVkjplr/AGSQab/yj+kf8w1n/wB1q7ynH9EfdH/dyczP/f5P60/+mGNnPlRa+eYmJPwSW4Va7fHp&#xA;s1dv9gM2On/vvl/uS852if8AAyPKX/TWP62L2lvJcWt7bx09Saw0+NK7Dk3l9gK/fmHGNgj+jH/p&#xA;m7nJMQlGR5DJkP8A18h2pPNZ/XLF4rnVNXtrvTrZp0ke3mnurmKaWMrxUPGkSqyqmzMzcmO3EMyY&#xA;3HeUgYjuJJB+Vfp3XABk4Zgxx4pQySqhIRjExB8iZbEnkBGo9693gjguPLt5NBYXqW8t3Lb+r6qx&#xA;tJbXEaiS5dv3ssp1Dm3EkKq7VJOE1RxkiJon7D16k8V+4MQCSNRASnDiEbqrqcDtED0xj4dC9yZd&#xA;AwrzVf38V2LOK5ljtLnTtJNzbq7LHIU0+3Kc0B4txO4r0zX6icgaB2MYf7kPQdnYYSjxmIMo5M1G&#xA;txeSd0ejHcxXauxV2KuxV2KuxV7vH/eebP8AmF1L/uq3OdGP8p7pf7uT5tLlp/62L/pjB455q/5S&#xA;fWP+Y25/5Otmi1H95L+sfve97O/xbH/Uj/uQleUuY7FXYq7FXYqnfkj/AJTTQP8AtpWn/J9MyNJ/&#xA;ew/rD73X9rf4pm/4XP8A3JehW/8A5JiP/tnXP/dVXNnH/FP80/7t5af/ABrn/hkf+mLIvM//AClW&#xA;g/8AGTzJ/wBQ2ZWo/vYf8lPudX2f/i2X3ab/AHbf5gf+S48w/wDGaL/k7Z4db/i8/h98Udi/8aGH&#xA;3H7sj5/zmX052KuxV2KuxV2KuxVN/LWqWVjfSRajEZtK1CP6pqKrUSLC0iSepGR+3G8autdjSh65&#xA;fgyCJqX0y2PucHX6eeSAOM1kgeKPddEUfIgkH32zCBbWPy/rcFnftqVnAJo7a6bl9gWyniOdDRCS&#xA;Ogr1pvmcKEJAHiG/3OimZHPilOHhzPDY/wA477d/7Fuip6+k6PaRsPrLWENwkZNC0dvrF28vEnaq&#xA;p8VPAYMQuMR14QflOVp1R4cuSR+nxJD4ywYwPmdmc+U/+U2T/jLa/wDdMuM2On/vvl/uS852l/iZ&#xA;90v+msGH2klxLZwz6fHHfC6h08JaMaC6S1036lfWinYrOvIkLsxX4lrtmDEkgGO9iO3fUeGQ9/8A&#xA;aHfZBGMzHITDhOT1fzTLL4mOf9Xz5XtKt0jbUPLuia2bexN1c+W71YpLqKdPTuYpY+XpvFJxjIlg&#xA;51DLTqV+Jdzj8ePHOhZxn5/DzH4t2IwZ9Rh4p8MdRCwKNxINWCN/TKuR8jsdgDtZPJ8/mq+uNWur&#xA;240cNJNDI29zcsGqFkf9kvvvT58eoricRykyMjH7S35Bq46aMcUYRy7A/wA2PuHl+L5F+vac91pb&#xA;eYtSuoLO+u/SFhoyLRjaIohiKrUsiKiDhyHxKteVSKnNC4+JIgE8o+XL+xjo84hk/L44ylCN8U/6&#xA;Z9R95s71yJqudRbMN3LsVdirsVdirsVe7WqKP8YyftMuqqT7LfuR/wASOdHEf3n+d/unzfIf8WH/&#xA;AAr/AKZh475q/wCUn1j/AJjbn/k62aLUf3kv6x+97zs7/Fsf9SP+5CV5S5jsVRM2nX8NnBezW8kd&#xA;pcllt52UhJClOXFjsaVyZhIAEjYtUc8JTMAQZR5jqL70NkG12Kp35I/5TTQP+2laf8n0zI0n97D+&#xA;sPvdf2t/imb/AIXP/cl6Fb/+SYj/AO2dc/8AdVXNnH/FP80/7t5af/Guf+GR/wCmLIvM/wDylWg/&#xA;8ZPMn/UNmVqP72H/ACU+51fZ/wDi2X3ab/dt/mB/5LjzD/xmi/5O2eHW/wCLz+H3xR2L/wAaGH3H&#xA;7sj5/wA5l9OdirsVdirsVdirsVVbU2y3ULXSu9sHUzpGQrmOvxBWIIBp0NMlGrF8mGQS4Tw/VW18&#xA;rejR3vlyx8r6vqFpZzDRL+4lsrGNqmRJZLYUbeT4VqjUq7kd65tBPHHHKQB4JGh8vx3vKSxajJqc&#xA;cJSHjQiJS7iBL3eY6RHuR/k/SZrGEW1ze2+oxxWf1uwaFg7W31mOT1Yw3UKx3K9OQrSvW3S4zEUS&#xA;JbWPK7cbtTUjIeKMZQJnwyvbi4SKPvHf3bJppetWmk+aZLy4q0No1lNdiP4njt3spYWn4faZI3lX&#xA;nx6A1y7HlEMlnpV+7hIv9bh6jSSzaYQjzlxiPcZeJGXDfeQDV80n1Py/aaLLD5fsoWYahYSSQXqy&#xA;gw6hPGwkt3gJ5Kk43C0oRy4jkCC1GTCMZEAPqjzv6j0rz/s365+n1stQDnmfoyAGNb44naQlyuPf&#xA;7uLY7ANqd9oupaRNqNwl5NodpqdmsljdTu9yqxxSLcqjSGQpzM0VRz+IoT8OwWGScJxMjfAJDYnf&#xA;rf3j310bdPhzYsoxxMBmlin6oxAjuY8F1V1wy6eniA9W5Jxc/klqOkaJaedb3SRqHlnzBEG0jTrW&#xA;4Y3cH1mMzW7zqVVVDxjakj8KjlyIocTAISyGomUeg/H4Hm7XXTzYsELyRhOxxSI2Pl+AOKtuG9oT&#xA;r155XH6RtriF7vVY7XTrWyvLeUGBJLW0ignHgw9SM/FRgw6cftZLNLHuCLlUQCOWwAP4/tY6PFqf&#xA;RKJEcZlklKJHqIlOUo/YeW1db5MQzBd47FXYq7FXYq7FXusUUtxF5ytbdTJdTR6yIYV3diL1vsqN&#xA;z1GdGASMgHP1/wC6fOJSETppS2iDhs9P7sML1zytLqM8MFxe2kmuLLaQXGoxygwTrdq/B5j2lT0v&#xA;tf7sUqacuuBm0/GaJHHtv0N9/nt8Xf6PtEYomUYzGGpkRI9UeCrEf6Jvl/AQRy5Ryw8oXd55iudD&#xA;W8tY5rYSlriSSkTeiKniaVJ8RSo3r0OYkNMZZDCxs7bN2nHHp45jGREq2rff8fHauYa0ryrPeWd5&#xA;ey3EFuliYi1vK/GSVZWpWOnUeB6E0AwYsHECbHpZarXjFOMOGRM73rYV3pv55t9Vlt5buW9g/RVt&#xA;fz2FhpUbgNClufTU+kPBEAJPxU4k/ay/ViRFkjhEiAO6vJ1/ZE8QkICMvEljjOUyOfFvz9593PuY&#xA;XmA9A7FU78kf8ppoH/bStP8Ak+mZGk/vYf1h97r+1v8AFM3/AAuf+5L0K3/8kxH/ANs65/7qq5s4&#xA;/wCKf5p/3by0/wDjXP8AwyP/AExZF5n/AOUq0H/jJ5k/6hsytR/ew/5Kfc6vs/8AxbL7tN/u2/zA&#xA;/wDJceYf+M0X/J2zw63/ABefw++KOxf+NDD7j92R8/5zL6c7FXYq7FXYq7FXYq7FURZ295e3ENha&#xA;q0stxIqQwg7GRjxHXb6clGJkREdWrLOGOJnLYRG58np2i2mn+W7QWdtNHcXcyC51O/5fuIrbdDKW&#xA;AJ9Pi5EKD4pWIalOCtuMUY4hQNnmT0r9Xd1J37nkNVlnq5ccgYxB4YR/iMudV/O29Z5QA4efEQRv&#xA;qtprd1aXWjtPB5xW6W1skQD0p4CWWNn5fCpVKI29GHVdycxjkGQgwsZboeYdiNNLTxlHLwnS8HFL&#xA;vjLa6rc77jqOh5BkVtfaebK60PW7Yro8Tg6jZxHlLpNyx2vLM/ETauWBK78CaHY/FlRnGjCY9PUf&#xA;zD/Oj/R+779VPDk445sMv3p+mR5Zo/zJ/wC2Dv8A4qvmPTcugeVbmVLi/wBe0DUL1KB72aS4jebi&#xA;fhaZIplRmpQMerd6nfE4cRNynjke/ff37rHWamAMYYtRCH80CJEfKJMbru7umylq/l/zD5mtI9LX&#xA;z5a62bcvLpuhi4YRBwCStvFX00otQoAAA22GUy0PiEkZIykejm4u3Py8AJ6fLjxDnIi68z8efX4s&#xA;HtZr+x0DWdOl0VZaTRLdX8sTepaOpKhC37JJG1ab+OYkTKMJRMeu57nb5IwyZ8WQZa2NRB2mO/z/&#xA;AByY/mK7R2KpnLoF9FoEGuMU+pTzG3QDlz5gMf5eP7PZq9PEZacJEBPoTTiR1sDnOHfjjHi+H39e&#xA;5LMqct2KuxV6df6leaZrqanNcejo+s3c+o6BrMPxSWjzvzcOnVo6SKs8R27ruDXbzyGE+In0zJlG&#xA;Xdf6P5weQw4IZsPhgXlxQjDJA8piIoUe/YmEvntyM9Q02LVjf31hYxtqvBT5m8txH93eRfaS/wBP&#xA;cA7mvNWXx71Ie6eMTuUR6v449/8ASj+P24eDOcPBCcz4d/usp5wPXHkH2EH7K9MWi8gLb363TTT3&#xA;OnRMJRaLp9+LuRF+IRFXtxAGP2SfV4jrv0zC/JUbs8P9WV/dX2u6/lsmNVEZO85MfB79p8Vdfpvp&#xA;szD84Pzp8z+bbjSb+fyjHoH6KjeK3uZ4nmkEsnE8o5JI4lXjwBReJ4neuUR48W/DXmRyc+fgaqo+&#xA;Jxd4jLn32Abp5ddWmkNoEOo/pJptbnuJFubJlYlU68y5612Na71pT4STGUYcAlxesnk2Y8mUZzj4&#xA;KwiIqX6K/FV5hKMoc52Kp35I/wCU00D/ALaVp/yfTMjSf3sP6w+91/a3+KZv+Fz/ANyXoVv/AOSY&#xA;j/7Z1z/3VVzZx/xT/NP+7eWn/wAa5/4ZH/piyLzP/wApVoP/ABk8yf8AUNmVqP72H/JT7nV9n/4t&#xA;l92m/wB23+YH/kuPMP8Axmi/5O2eHW/4vP4ffFHYv/Ghh9x+7I+f85l9OdirsVdirsVdirsVevfl&#xA;fafk3a/l7r3mHzHeq/nbT2lbR9Lm3jkpEDbhYirLL6kvJXY/YG/w9TbhycEhKgfe42s03jYzDilC&#xA;+sdi8/8AKEgk85aZIEWMPdowjSvFatXitSTQdt8s0xvLH3uN2nGtJMXfoKb6t/xxb/8A7Zujf8m1&#xA;y/J9B/qwcHTf30P+GZvvLIfyx/KrQvMmirqeoXl5DctK/ora8UVViIFS7xyDlyPiMydB2dDLDikT&#xA;fl/Y6v2g9os2kzeHjjAxoXxb8/IEbM2svyS8s2+oPeW2q6tHeozepP6sXJjItWqzQfHyDfF18Dmw&#xA;h2VjErEp38P1PPZfazUSxiEseEwPSj0/z9qrZH/8q20v0Xm/TOp+nHz5fDa1/dkhqL9V5H7O1Bv2&#xA;y38jGr4pfZ/xLjfy9ksDw8Vmv5/X/kp/Z1YV5i0aHTfNEFj6z3iWlxpd3Z3NwkSzxtPcmORecSRV&#xA;Vgo2IzX58QhkAu6MCO/c+VPQaHVHLpjOhHijljIC+E8MLGxJ33Yh+Yuu6va+bPMul2908dheXXK4&#xA;txTixVRv4ivenXvmDrs0hlnEH0ku97D0eKelwZJRBnGOx/H4HRhGa96FNdG0CXUI5buaUWmmwEJN&#xA;dsOVZGFViiQENLI3ZV+ZoN8uxYTLc7RHX9A7y4Wq1oxERA4sh5R8upJ/hiO8+4WUdrMEcFta+WrK&#xA;K7nvYrmSeZZ7cwS+pMkaLEsAaR/sxg1J3r0yzKKAxiyb7q510cfSzMpS1EzAQMQBUuIUCTfFsOv2&#xA;c0jgsryeOaWCCSWO2X1Lh0UsI0JC8nIHwippvmOIE3Q5OxnlhEgSIBlsPP3KGRbHYqm3l3zDNouo&#xA;x3ot4b0RxyRJb3QLxgSAglRXY1Pb+OX4M5xyur97ha7QjUYzCzCyDcdjsjtE84SWYjS6Ex+qs0mn&#xA;XVpIILi2Lmrxo5WRTC9TWMildxTetmLVcPO9uVbEfs8nG1fZgyWY8Pq2kJDijLuJFj1D+d8+lH//&#xA;ACtS7/6uOtf9JVt/2T5k/wAonvn8x+p1v+h2P8zB/pJf8Wybyb5iu/MOpWOn3t1Pqeg64bqyvbDU&#xA;uEkkcttB9YWSKWNY+oK9gQfoOZelznLIRJMoTsES8hbp+1NDHS45ZIRjjzYeCUZQsAiUuGiDfn7/&#xA;AJh5Xcahoz+XrSyi08x6rFM73GocyRJG32V4U+Q9uNR9ps00pw8MAD1Xz/H4+b2cMOYZ5TM7xECo&#xA;1yPv/F3/AEQlWUua7FU78kf8ppoH/bStP+T6ZkaT+9h/WH3uv7W/xTN/wuf+5L0K3/8AJMR/9s65&#xA;/wC6qubOP+Kf5p/3by0/+Nc/8Mj/ANMWReZ/+Uq0H/jJ5k/6hsytR/ew/wCSn3Or7P8A8Wy+7Tf7&#xA;tv8AMD/yXHmH/jNF/wAnbPDrf8Xn8PvijsX/AI0MPuP3ZHz/AJzL6c7FXYq7FXYq7FXYqvhjWSZI&#xA;2dYldgpkevFQTTk3EE0HsMIFljKVAmreheXvI6ad5ik1SXU4H0HRnEraoP7uV1APppQuDQkcuLN2&#xA;H2zxzaYNJw5OLiHBHr+Px8dnl9b2ucuAYxCXjZRXB1A7zy+F13/TulN9qNnfaZrr2KOtlBDp9rbe&#xA;qQZGjtyI1d+OwZuNaDp0yicxKM65ARHyc7DgnjyYhOuMnJI1yuW9D3PYPyKd/wDA0Sem3D15m9Wq&#xA;8a8qcaV5V79KZvOyD+5+JeE9sAPzhN/wx2egpJI0kitEUVCAkhKkOCKkgA1FDtvmzBeXMQADf7FT&#xA;CxeR+fv+U8P/AG5v+o580ms/vv8ASf7p7jsb/Ev+V3/TMMY/MmLUxF5jkGn2rae+rUOomn1lXVEq&#xA;vXpuKd6FqClSMTXCVT2HDx8+v4/a7jsGWO8I45cfg/T/AA1Z3/G2w61fLs072L0PyTZSXGgWc1uI&#xA;/wBIWd5ey6a03IxJcySaVbxyMqhi3D1yyih+IDY9M2mkhcAR9QMq9/7sfpeW7WyiOeQlfBKEBKuZ&#xA;iBqJEC+/ho+V7jm7Srm407XZLrU9QSLW57260xtYkUSQ26WcaKxiicRpWT1BGnPiiL1A7OORjO5H&#xA;18RjxdBXcPPlvsF1GOOXCI44E4RCOTgGxkZk8yLO1cRq5SPU9Qun2vnHRtW1xoJobmGON7jUjKVe&#xA;C+tmDn1Iya8hLGXoyEMASKjfIQjlxylVHqe6Q/a35smkz4sQkDEkiMa+rHLbY93Ca2O1gbcmMeZL&#xA;C30/X9QsrbkLe3ndIgx5MFB2BO1dsw88BGZA5Au30GaWXBCcvqlEWluVOW7FXYq7FXqH5P8A/HW8&#xA;uf8AbS1L/unLm37M+qH9aX+5eP8Aaf8Aus3/AAvH/wBNSwXUbPQYtG064sr559SnD/X7VkKiIg0F&#xA;DSnSlNzX/J6HXThAQBBuR5h6PBlzyyzjOAGMVwm+f4+FeaU5S5rsVTvyR/ymmgf9tK0/5PpmRpP7&#xA;2H9Yfe6/tb/FM3/C5/7kvQrf/wAkxH/2zrn/ALqq5s4/4p/mn/dvLT/41z/wyP8A0xZF5n/5SrQf&#xA;+MnmT/qGzK1H97D/AJKfc6vs/wDxbL7tN/u2/wAwP/JceYf+M0X/ACds8Ot/xefw++KOxf8AjQw+&#xA;4/dkfP8AnMvpzsVdirsVdirsVZFpEHluz0f9M3s632pLK0dtohBVOQAKyzt+1H1PFevSvXMrEMcY&#xA;cZNy/m/r8nVameoyZfBgODHVnJ+iPcfM8udckXpOvectVuJXOsTWllAPVvrwsVhgjJ/lSgqTskaj&#xA;c7DJ482WZ+qgOZ6D8dA06nR6TDEDwxKZ2jHrI/H7ZHlzKD81ebrzWjDaLLMdLtNrdJ35yyNvWaY9&#xA;C7VNAPhWtB3JhqNScm2/CPxZ/Gzf2d2ZDT3Ko+JLnQ2H9GPl9p5noAjpX/KNa7/0af8AJ05HH/dz&#xA;+H3tmp/xjF/n/c90/Ir1f8Cw7r6Xrz1FDy5chTetKUzouyP7ke8vnHthX509/DF6Evq835leFR6Y&#xA;ANQKb8t/HNm8saoUsAvPq8gLR/WKv6RAbgBU+nyFa9Kct8G9ebI8HEOfDtff5/seU+fv+U7P/bm/&#xA;6jnzTaz++/0n+6e17G/xL/ld/wBMw8x/M6R/8d65HyPpm6LFK7VCgVp45qNef30ve9h7PxH5LEev&#xA;CxXMN3L0DytZve+RLyGMOwV7r1/SHJ0Uz6VLUKKmvpW0rjbcI3gc2enjxYSPf9+M/cD8nmO0cox6&#xA;2JNcoVfL6dRH/dSiP84d6eXEf1zW20OS6hpDdzwXOo3tvDdM7Wtsrs8izekhkSjI0i8S6gV5EDMi&#xA;Q4p8FjmdyAeQ8638+rroS4MPjCMt4RIjGUo1xTIocNmjsRE3wkmqsoXUJFk/LaS6RFgNzYPI0MVV&#xA;iRjqFijiNKkIrlORVduRO2Qmb0998f8AfRbsIrtARJvhyAWeZ/d5SLPUi6s70Ax/znotoTrOtG6I&#xA;ul1d7QWfFaFOHqc+XLl4j7NPfMbVYh6p3vx1TtOytVL93h4fT4IlxfGq5fpYbmA752KuxV2KvUPy&#xA;f/463lz/ALaWpf8AdOXNv2Z9UP60v9y8f7T/AN1m/wCF4/8ApqWCal5iutQ0nTdMlhgjh0xXSKSN&#xA;OLvzYt8Z6d+wFerVOa7JnMoxjQ9L0eDQxxZZ5AZE5Odnb4fjbpQSrKXNdiqd+SP+U00D/tpWn/J9&#xA;MyNJ/ew/rD73X9rf4pm/4XP/AHJehW//AJJiP/tnXP8A3VVzZx/xT/NP+7eWn/xrn/hkf+mLIvM/&#xA;/KVaD/xk8yf9Q2ZWo/vYf8lPudX2f/i2X3ab/dt/mB/5LjzD/wAZov8Ak7Z4db/i8/h98Udi/wDG&#xA;hh9x+7I+f85l9OdirsVdirsVdirsVTy880fWNP0rTlsYIbLTiJJ4ELhbqXYF5qEE1VadairUIBoM&#xA;iWouMY0Kj9vv/He67F2fw5MmTjkZ5NgdvQO6Px+dC+VkL5h1O01PV7i9tLGPToJSClrFTitBSuwR&#xA;an/JUDIZ8gnIkDhHc3aLTyw4hCUjOQ6n8H7SUTpX/KNa7/0af8nTk8f93P4fe1an/GMX+f8Ac9v/&#xA;ACFnhl8m8I7gmS3nlSa2BWilyHViKctx03p1zoOxyDi58i+d+2UCNXZG0oij7tq7no6oyu7F2YOQ&#xA;QhpRaClFoAd+u5ObWnkydhsk/mjzDpnlvQri+1K7eNPjELLwMzSPUokSkcSy/s1HQVbuco1GaOKB&#xA;lI/r+Dn9n6LJq8whjiDyvnVDmT+n7Hh2m+adQ8z69d6rfUV3vdLSKJfsxxLdjig8aV3PjnPY9RLN&#xA;MyP86P3voufs7HpMMcUP5mWz3ng5oX8ytT0tdb8w6c2mo2otqHqpqfI8lTgvwcaex70NTUVCkQ1+&#xA;SPHOPD6uLm39g6fJ4OHJx/u/Drg875/jfbY0SGA5rXpU18ueY9R0DUVvbJtthNCSQkiA14tShBBF&#xA;VYbqdxvl2DPLFKw4Wu0OPU4+CfwPd+Oo5EbF7XpV75Z8z2ceoRQo8rcllUgJKrek0bIzLwo3pMw7&#xA;KV3FFX9x0GOePMOL8cv1fZ/sfPtRi1GjmcZJrp1HOweu3FXmDzsn96y48mWbeWzoSzyCD0JLaKcg&#xA;cgpuEuAWBC7q8Chh8PRvsmvAS0o8Pgvaq+2/0fjpKHasxqPGocXEJEf5pj9oka59Of8AFEvP3lHW&#xA;ItN1O6ij+sQPffpBmjBqsLRcXJBH+62+17b9K0wtZppiMiNxxX8Hd9jdp4jkhEnhPh8G/fdj5jl5&#xA;7d18vzTvYuxV2KuxV6h+T/8Ax1vLn/bS1L/unLm37M+qH9aX+5eP9p/7rN/wvH/01Ly/NQ9g7FXY&#xA;qnfkj/lNNA/7aVp/yfTMjSf3sP6w+91/a3+KZv8Ahc/9yXoVv/5JiP8A7Z1z/wB1Vc2cf8U/zT/u&#xA;3lp/8a5/4ZH/AKYsi8z/APKVaD/xk8yf9Q2ZWo/vYf8AJT7nV9n/AOLZfdpv923+YH/kuPMP/GaL&#xA;/k7Z4db/AIvP4ffFHYv/ABoYfcfuyPn/ADmX052KuxV2KuxV2KuxVdHHJLIsUSl5HIVEUEszE0AA&#xA;HUnCBaJSAFnYBMf8Na9+lW0n6lJ+kUBZregqFUcixNePEDvWmW+BPi4a9Tifn8HheLxDw+9M9AjM&#xA;mha9pCafc3GqzCF0MaEiFbaSr+p8SkE1404mpIHXLcIuE4UTLb4U4mtlWbFlM4xxi+Z+riG1bfHm&#xA;NmP215d2rFraeSBmFGaNmQkeB4kZjRkRyNO0yYoz2kAfemt9/jCwFsbyW9hF4gktuUslXBoRQBut&#xA;GB4nehB6EZdPxY1fFu4OH8pk4uAQPAaOw2/Hfy2PcU9v/KWpXWiW0UgvZPM8V4lvcWdy4aP07mOa&#xA;RHjZjxVUFq3MltjyDU45kz00jAD1eJdUfO/1b/G+TrsPaWOGaRHANOYEiURvcTEEHrvxittxw1dq&#xA;fkq1uLS7ura5jaK4h1DTUliYUZWW7AIOR0sTEkHnxR+9l2tkjOMZRNxOPLX+kTr8w38yxyea44rO&#xA;NtDk1JWuLpkX1VcKn2d68fiQcqfDyoCOZrka3xB4lD0cXP8AH4+bgdiDTkacmR8YY9h0rf7ee3Wr&#xA;I9IrmOah692Kpp5e8w3+hX63do1VNBPASQkiAhqHiQQQRVWG6ncb5dgzyxysOHrdFDUw4ZfA9346&#xA;jkRsXuvlzzHYa3YJdWr8g20kZ4q6uq1KsBxVZFVa7UVlFRRR+46PBnjkjY/H4/H9HzfXaGenmYyH&#xA;4/SD8SCaNk/vT5CwVfTb4R2bah6UNQDSop0qp2p2GSHWnz/H4+RG/m8s83/lJcz6gbvy7HSCYkz2&#xA;fCQ+i/X4fTVwFPYfdt002p7NJlePl3dz2fZntLGOPg1B3HKW24+JG/4O6Qf8qh8597cAdyUnAHzJ&#xA;jzG/kzL3ff8Aqdn/AKJtJ3/7n/imJX9heafeS2d5EYbmE8ZI27dwQRsQRuCNiNxmDOBiaPN3eHND&#xA;LATgbiUPkW16h+T/APx1vLn/AG0tS/7py5t+zPqh/Wl/uXj/AGn/ALrN/wALx/8ATUvL81D2DsVd&#xA;iqd+SP8AlNNA/wC2laf8n0zI0n97D+sPvdf2t/imb/hc/wDcl6Fb/wDkmI/+2dc/91Vc2cf8U/zT&#xA;/u3lp/8AGuf+GR/6Ysi8z/8AKVaD/wAZPMn/AFDZlaj+9h/yU+51fZ/+LZfdpv8Adt/mB/5LjzD/&#xA;AMZov+Ttnh1v+Lz+H3xR2L/xoYfcfuyPn/OZfTnYq7FXYq7FXYq7FVa0jaS7hjSVYHeRVWZ24KhJ&#xA;ADM37IXqTkoiyOjDKQIkkXty7/Jlklj5hH5hm0XzAj6sWK/pkTMR/d148l5MW4/BwWu/w5mmGTx6&#xA;4/V/Ov8AHydJHNg/IcRwnwv5lef3dbPTdR8v6P5ji13V7CDUv0ZqttBOtwrO4e44mjxqQPir9qvh&#xA;8Q6ZHDiyCcoiXDIA/H8ftZ63VaeWHHMw8THKUa2Hp7ifu+xjFtaXV1KIbWF55iCRHEpdqKKk0UE7&#xA;DfMJ3afeY9A82Wk+kWGqs89zNCqafZmQySRKXKrDwO6mvQDbwO22Vnw5YmMZc62H6HVaHW6WYyTx&#xA;UIiXqlVA7fVfX72U6N5Y/MLWNRvvLlpJJd+dfW0+/s0+sqJGgtoJ1YpcMwjBjFwh3cd8umckBISP&#xA;rBiefkevxcPBHBlljliheCUcsD6drJidx3HgO/u72NvDf+W9d1by95rt57W5kcRak3LlcQTo3qJO&#xA;pDFZKE8vtUdTsehzHw5QCRLlLr197stXpZERljrix8h/CRVGPltyPTzGz1fyZ5Ml/Ni4bylreqfo&#xA;7WLO3W+tNcgHrQ6jaIfTRzCXi9V05/aqGXetDyGZeqz8WPhn9fQjlId5/H6XTdlaEY9QZ4aGE3xQ&#xA;l9WOW3pHdfOuVb7+l4l5l0OfQfMOpaLO6yy6dcy2zTJXhJ6TlRIlf2HA5KfA5rpRMTRFF6XHljki&#xA;JQIlE9RuEtyLN2Kpp5e8w3+hX63do1VNBPASQkiAhqHiQQQRVWG6ncb5dgzyxysOHrdFDUw4ZfA9&#xA;346jkRsXvHlfzLpmtWC3MDji44uG4hkZV3SRRxUMFX2VlFRRRSHpNPnjkjY/H4/G30+a9oaDJp58&#xA;Mh+O8dav4gmjubyCZZ4C5o9zQHYLFMB9HwfieuSJHn9rVGEq5R+cf1r4FjdS9ZmjA+L1A60Ap8XB&#xA;lHNVqOVOlRsemGIYzJG21+VfK72Pd3pB518mWfmG1pVYdThH+i3XWoO/B6VLI1a9yK1Fa/HjavSj&#xA;KP6XT8fj9ez7J7VnpZd+M8x+keY/Yf6PDr+wu7C8ls7yIw3MLcZIzTbuCCNiCNwRsRuM52cDE0eb&#xA;6LhzRywE4G4l6R+T/wDx1vLn/bS1L/unLm17M+qH9aX+5eU9p/7rN/wvH/01Lz260TVbTT7XUbi2&#xA;eOyvK/VpmpRgCRWnUA8Txr1oadM1ksUoxEiNi9Rj1eKeSWOMrnHmPx9vd1QOVuQ7FU78kf8AKaaB&#xA;/wBtK0/5PpmRpP72H9Yfe6/tb/FM3/C5/wC5L0K3/wDJMR/9s65/7qq5s4/4p/mn/dvLT/41z/wy&#xA;P/TFkXmf/lKtB/4yeZP+obMrUf3sP+Sn3Or7P/xbL7tN/u2/zA/8lx5h/wCM0X/J2zw63/F5/D74&#xA;o7F/40MPuP3ZHz/nMvpzsVdirsVdiqe+XW8rQ295eax6s97bhW0/TwCIZnNf71gK8Q3HktV2rQ12&#xA;zIweGATPcjkOh9/4DrtcNTKUYYqEJfVLrH3efOjvv06ojT/MPmfU7+OztFtTPOx4qLOzVFABZmJM&#xA;VFRFBJJ2AGThnyTlQqz5R/U1ZtFpsMDOXHQ/pz/4rcn7Sm15q1tbeZLXT11y1udLfgLvUY9OtKIx&#xA;JDBV9MgjYGtdq+xy+WQDII8QMep4R+pwcWmlPTyyHFKOTfhick9/9l+K80evlOPXNQisr+SJZbeY&#xA;g6lZxRxC4sJo2a2uPTjXgy+sBHzX7PLi3QZZ+W8SVS6HmOsTyPz2+9xj2kdPAzgDUo/TIk8OQH1x&#xA;s7j0+qjzqwgNIne4by1NLIZ5I5dQto7hx+8MEUSGJC32iF5niD0rTK8RvgJ3+ofBydTAQGcAUCMc&#xA;q6cRJs/Gt+9Efkr+a2o/lz5jub+w0iLWJ9RgFmtuxZJAWkVl9N1V23ZaFab7eGa4Ak0HopSEQSTQ&#xA;DtRtnsdX1XW3vYG1q8tr27vbSzoTYTXEqqVDqzUKmZk6hhQ9qE7AYvCs8Vy4Tfk8/LVfmRGPAY4v&#xA;Ejw3sJgWeVctgRzFV1sAf5d0Dz7o+pHz1+WU9zq9vpsDS3uqJGjtExUrPFPDJyLVT4+PE0B8V5Zj&#xA;6jHGJBieIH73YdnanJMShkh4c4Hl04ehB5d4+HS6SnUWi82edtcv/Ml1PJfT2Jv/AFouKl7iOCOQ&#xA;gqI3HERhyFAXoBVRlsMMJTIO1RsV7g4uXV5seCEoVIyycJ4u4ykO8daHkOnRF/kt5W1Hz35hXyYt&#xA;0ltbPFNeQ3bsRLaSRqAZLem7FiQHjqAy77EAijHmocJ3HTyPeP0udqNHxTGSG0+R7pR7pfoPT3WE&#xA;58zaJHrWt3/krXrqBfPWhStaWOsLVYdQWP7MUpIBDkdCe/01zoyGpHDLbKOR/neRdDkxy7MmcuL1&#xA;aSR9cR/Aeso+XePwOT39heafeTWV7C0F1AxSaFxRlYZrJwMTR2Ienw5oZYCcDxRlyKHyLa7FVyyS&#xA;KjIrEI9OSgkA06VH04bQYgm1uBKtDe3kKhYZ5I1UlgEdlAY0qdj1+EfdkhMjkWuWKEuYBU/UeoPI&#xA;1HTfwp/TBbOg0ST1wJen/k//AMdby5/20tS/7py5t+zPqh/Wl/uXj/af+6zf8Lx/9NS82lvr2W1h&#xA;tJZ5HtbcsbeBmJSMuatwUmi8j1pmqMyQATsHrI4YRkZAASlzPU1ytQyLY7FU78kf8ppoH/bStP8A&#xA;k+mZGk/vYf1h97r+1v8AFM3/AAuf+5L0K3/8kxH/ANs65/7qq5s4/wCKf5p/3by0/wDjXP8AwyP/&#xA;AExZF5n/AOUq0H/jJ5k/6hsytR/ew/5Kfc6vs/8AxbL7tN/u2/zA/wDJceYf+M0X/J2zw63/ABef&#xA;w++KOxf+NDD7j92R8/5zL6c7FXYq7FXYq7FWb2vkfzd5Y1GGTzBpNzpiajpOqS2RuEKeoo02etPB&#xA;l5CqncV3GZGm+o/1Zf7kuv7T/uh/wzF/01ghb6z8ujW/LEUNkY7W5gspNTi5SH1WkektCZGI5Afs&#xA;lfkMtnHHxwAGxEb/AE9XEw5c/g5yZXKMp8HLaht/D99/Fm3lOOKy1uOw/uYXvbubR7ByzSRWYhlR&#xA;3+IuyJK/GgLfFxrv1Ow0wEZ8P9I8I8qP3vPdpE5MJnzIhATl0M+KJA6WYi722uvJiPlv/efy3/zE&#xA;6l/yZizCwcoe+X3B3mu+rP8A1cX+6klWj3Mmm+Xr7VLSkeotcQ2cV1+3FFLFK0hiP7LtwC8uoFaU&#xA;rlGKXBjMh9V1fdz5ObqsYy54Y5b4+EyI6EgxAvvAu65XzZlpflfy1Z6VqKPcOtxaRC3167mbhBVp&#xA;oHkSIKGciPjxDcaszAANX4c/Hp8cYnfcbSPTmOToNR2hqMmWBAHDI8WOI+r6ZgE9N+dXsAbqtzby&#xA;J+ZOpWNj5ysPLj/ojy3eRCea2jiSSVUWFlneH1Cwjkmjjp1KrtttmPGGPLKUgOGI3/X8/sdjkz6j&#xA;SwxQMuPJMkb8rJFedRv3lE+dvy3f8t4bHznrk0N1NrUXHR7HTpJR9VlEKlWadmQsEjoOQBBP7OQx&#xA;Z4CRmRv/AAgfr8m7VaHNLHDBAjg5zka33uuGv4rPdVc3lnmWZ7PzCt3Yf6FNLa2V3W2Ji4y3VlFN&#xA;KU4kcAXkbYbDoNsp1IHHt1ET84guZ2YScNEk8M5x351Gcoj7AN3a75jh1Sw0kejIurWMbR3WoM/J&#xA;pgGHpbn4qoB1Ld6dAMllziUY7eqPX7mOk0UsWTISbxzNiNcv53z/AG8yVbzr5og8xTabcBJDd21l&#xA;FbXtzKFDzSx1qx4k16/aO/btktXqBlMT1EaPm1dk9nHSicbHDKZlEDkAen7P1sbzEds7FXYq7FXY&#xA;q7FXYq9F/LTVLPSn0PU75/TsbXVLtLmehKxm5sliiLkfZBau58D4ZtNBkEOGR5CR+2Lyvb2nnmGX&#xA;HDecsUKHfw5CTX46hivm3ylqnlnVDZXoDxOOdpdpvFPEejof1jtmHqdNLDKj8D3u67N7Sx6vHxw5&#xA;/wAUesT3FJMx3YOxVO/JH/KaaB/20rT/AJPpmRpP72H9Yfe6/tb/ABTN/wALn/uS9Ct//JMR/wDb&#xA;Ouf+6qubOP8Ain+af928tP8A41z/AMMj/wBMWReZ/wDlKtB/4yeZP+obMrUf3sP+Sn3Or7P/AMWy&#xA;+7Tf7tv8wP8AyXHmH/jNF/yds8Ot/wAXn8PvijsX/jQw+4/dkfP+cy+nOxV2KuxV2KuxV6lrP5r+&#xA;dfPFmupebL6GSy8v2V1YwCONY5JrrU7SaBGIQfE7cOTHZQqmgqd8nTihKZ5AEfGQIDrO0JcRhiiL&#xA;lKUZeQjjnCUifsA8ynb+dfy88wflZoWhWPl/6r5t8vzWLXmrNFEPUQXCwvwnVvWf1PUUlHUKO3QY&#xA;cIMzZP0194CNbOOGBgB/ecfz4ZS/QlWnf+TZt/8AmBX/AKhc2EP8ZH9X9Dzuf/jLP9f/AH6fwab+&#xA;Usf5X+TrrSr+aTzi085uLdi9PUeFvraspUIETjHwINenWpzB0xlxRv6d6+W7ve0Rj4MtfXUL93F6&#xA;f0vOvJej2GtWlrpGoX6aXZX+t2NvcahL9iFJIplLmtB95A8SBlY/uT/WH3FyZf43H/hcv91B6j+Z&#xA;XkXTNLv/ADRoXl/VY9WGqNaOrl0Ho3F1e2iehK6nhsaNXsrCuZgkZYshOx/bF0xxxhq9NGJ4ogbH&#xA;v9GR3n7yVeeUvN7aN5hvbRJfMukJDZz2vMxiZUaGVWEvAiskhMY6EUWoOSxaiOSZB24o18a/FNeq&#xA;7PyabDCURx+FkMj/AFeKx07gOLzs7hisln5i0uGwt9ShOoQWeg6hZRmUtPFFLHPcXK+mG+xzhRB0&#xA;B41XYqeMhhliqxfokPjZP3fY1y1mPU3wzMf3+OQF0eExhA/KV+V0eRFkWoalrelx3N1baZDdadPY&#xA;6PFcXdzB6yRuNLjCqKnhv6tTyB34+2UznOFkRBiYw3Iv+Afj5ObhwYcxjGUzHIJ5iIxlRI8WW/f0&#xA;6VtxJJqumW1/ZtrGlQegY1VtV0wAgwM3SaJTubd6in8hNDtxJxskBMccPiO7zHl9zsdPmnin4OU3&#xA;f0S/neR/pj/ZDcdVHUPJPm3TfL9n5iv9JubbRNQIWz1CWMrFIWBZeJP8yqSviNxmM7NJMVdirsVd&#xA;irsVdirsVTPQtdn0m4kIjW5srlfSvrGWvpTxVrxanQjqrDdTuMuw5jA94PMd7iazRxzxG/DOO8ZD&#xA;nE/jmORD3P8ALjz3+XmkeV7rR/NVgdd8u6qxg0PULmOGc6c7xsHtLovR4ChIZJI61G4oF2y8g4hE&#xA;cX7q/wDS+R/Q6fARilln4f8AhfDuBynXKUfI/wAXW9jZq+KebfKWqeWdUNlegPE452l2m8U8R6Oh&#xA;/WO2Y2p00sMqPwPe7Ps3tLHq8fHDn/FHrE9xSTMd2Cd+SP8AlNNA/wC2laf8n0zI0n97D+sPvdf2&#xA;t/imb/hc/wDcl6Fb/wDkmI/+2dc/91Vc2cf8U/zT/u3lp/8AGuf+GR/6Ysi8z/8AKVaD/wAZPMn/&#xA;AFDZlaj+9h/yU+51fZ/+LZfdpv8Adt/mB/5LjzD/AMZov+Ttnh1v+Lz+H3xR2L/xoYfcfuyPn/OZ&#xA;fTnYq7FXYq7FXYqnliUHk7Uy4JT9J6byANCR6F9WhoafdmRH+6l/Wj90nX5P8bx/8Lyf7rE9b86e&#xA;Yvye1iOy/wCVdaPJpbW1vbLqhdPSDVv7X0UYcn5yJR+T969W7WaTr/m/7oON2tzh/n/9M5JDpwP/&#xA;ACtq397Faf8ASLmdD/Gh/V/Q6LP/AMZZ/r/79j/l+CaOLy6kkbI6XmpxurAgq4hiqpB6EeGY2EEc&#xA;Hvl9wdprZgnMQecMR+HFJIYf+ULu/wDtpW3/ACYnzGH9yf6w+4uyl/jcf+Fy/wB1B69rHkDzDpvk&#xA;LXfOeoW0c/lTUdSeO8jjm43i2zXCQJPGtONVuokoCd+44muZeTPGMpxkLEpb+79dh1Gm0OTLjxZY&#xA;ECUIDhv+duKPkQSNtxzSr8s9M8q33nTVNT/NO6udZ8q6RZ+mmo3D3TgSSlXtuYjZp+Pps/wLWjkd&#xA;t8xTpZeojeMevvdpDtTHeOMtsmW9udcPP4X1/bRxpPmmyuLy4RFkTy5PfTW3lfVLlwXlhV2EENxy&#xA;PNXKpSN3+1xoTyFc22i1EjAcfXYH9B/QXku2uzsccsjg5gcU4Vy/pR8t/UByu+RpFatpd5bo95os&#xA;UP1qONIrnS7iNGsrqGIKqxSIwAjYCNVVlp9kA7D4MjLiIFwq+oPIj9H4+Gu0upjIiOUy4bsTiTxw&#xA;kd7B6jckg3zJG59Qbzf5k/ND85/OOn3Hlrya+nX+h2ciXELyIRJHI4EizS3K2sZQ14iI16t17c9H&#xA;jxm6p9FyeDqYGFiQ57HfyIrlXQoXzj5suNe8pWHkfWvMMOl6foroh0tLeCaSGW2UwrAbhrmJmSGr&#xA;Knwg0+0WI5Zly0+Em+Ph8tj9vE6fH2jrIivCOTukeKJI6XHgNHv+4cmGJ+W+gPp0mppr87abE4il&#xA;vlsozAshpRGlF3wDfENq4PyuL/VPsH/FNn8qav8A5R/9lL/qmh4/I3ladvTtPMUl3ckEx20FrbtL&#xA;IQK8Y1N6OTGmyjc9sI0mM8p2fcP+KYy7X1Md54RGPeZyoe/91sPNJbryfqzTx/oiCfV7SeJp7ee2&#xA;gdm4R0EokjT1DG8TMA6k7bbkEE4mXFw0RvE8j+OrttJq/FsEcOSP1R5+4g7XE9D+mwkOUuY7FXYq&#xA;7FXYq9V/Inzh+Vfl9/MEP5g6bLqNrqNvFHaKsfrRj02dpFaPmvxsShR/2eJ3FclGRG17FqyYokiR&#xA;Fyjy7/h70Pb6hbwGXyH5y/45LPz0XVFPqNaFiRGysaExfskGhXcGnbaRnX7jN9P8Mu79jy+XCZn8&#xA;9o/7z+OH87vH9bz68x5wTzHoV3oOtXWk3ZVprVgpdN1ZWAZGX2ZSDmuz4TjmYno9FodZDU4Y5Y8p&#xA;fghE+SP+U00D/tpWn/J9MnpP72H9Yfe1drf4pm/4XP8A3JehW/8A5JiP/tnXP/dVXNnH/FP80/7t&#xA;5af/ABrn/hkf+mLIvM//AClWg/8AGTzJ/wBQ2ZWo/vYf8lPudX2f/i2X3ab/AHbf5gf+S48w/wDG&#xA;aL/k7Z4db/i8/h98Udi/8aGH3H7sj5/zmX052KuxV2KuxV2Kp75TuIpb0aJdp6mn6xLFBLSnOKbk&#xA;UhuIz/NGZDt0ZSV71GTppAngP0y/APwdb2lAiHjQNTxAkdxHOUT5Sr4EApl5G0e81K7v9GtJkgvL&#xA;ySys7e4clUSWXUYI0diKkKGNTjisRn5V/ugjVVPJhvkTL/pnJ6x+YPklvKnmK30fVL62u9YSyN5H&#xA;PDEeLQTGSOflbHkxhcq/rQqarX1Iv20XPw5o5Rv9Q/B+HeOnOLotZo56Y1GzikR1o2Pp36TH8Ezt&#xA;LaE96LGnR3dnRWM5aL1YvVHqPJStuRcDb16b2l2NpR8D/F9q77/xW/f/ADZfxcju4YIAo/TvRrav&#xA;4vT/ADP9Vxc4H1R25Ft5pOnXlrcxsn7i9b15ngj4P6tuGVrqKAdJIg5F1a9h8ce1KUyxxkD3Hfby&#xA;6gd4/ij8Q5eLU5McokHeGws3tKvQZfzZV+6y/wCbPfmM12TzNrnlG70Sz1Cd5Ip11O40FJ3e1nic&#xA;GtzYrXjJE8n7zhSqvUfapWObB4kTX18/eO+PePJs0mu/L5IiZPgVwA8uGV3w5ByEhy4uoo8rogtP&#xA;L2gajrgg1zzD+gIrmSwhkSSF3VreSKImZmDABVBqKinfpvmPkxx9RMuE0Nq57B2On1GQcEYY+OPF&#xA;K5WPT6iD+3d6kfy8/Lfyp+ZNl5fm1K98x/lpqVo02oGPndwxXwrwDy6eo4t8CHlGAwDAN8JrlWMZ&#xA;eAgAmJ+P4Lk6ielGYSnKMcsPMA0eh74+Xf5oU+YrSPzbqulWVpfDyzHMV0PVb2GcD0eIHpzvOobh&#xA;WoR5N+NA/iNro8+T6cgPvI+95TtnQae/E08oHvgJD5xA+4e8dQUEtfzM8sa7PrH5d6jLC15G0F7Y&#xA;S8Zkiqa1RbhXTjyWq7AqdulQIavQTkbhuO7ub+ye38OKHDmqMukgPqHnXX7/AL+fy/lP+YN9qMl3&#xA;qUDBrmVpry8YmV6uxaSQolXdtyaAVOYo7LzXuKDtZ+1Ojo8Mrl0HL7TsPe9Q0+78z2f5RXP5aoIz&#xA;p90zN9da2iM6RySidkp9aKFuY+12HuAcs/ks9/2D/inF/wBFEf5o/wBNL/qm8mv/AMstehuBFoiX&#xA;OqX8ZDGzggb6yVJossCQvP6qq/wvwNUb7QGY+bRnGLB5fi/xydlou2IagiMhXFy3sX/NOwINbixU&#xA;hyLOvyu/N/zJ5QvNXmstNjuPMcq+nq+j3fqRNcNbk8riJRQpcpQieOnx/a6qcb8Yf0hzH87zH9Lv&#xA;7+aOD8nKtvCIqMiL8PujLl6L+nfb6b5MH8zeWNInTVvMdprMcllIyz26MnxyT3DF3t9ivxopVjxU&#xA;8a/EF3yWXSwETOMvT0/V+PjTDS9q5pThiyYiMhvirkAP4vcTYFnetrYRmA752KuxV2KuxVGXWr6p&#xA;d3ENzdXcs89sqR28kjljGkZqipXoFO9Bk5ZZSIJO4aMelxwiYxiBGVk11vna3UtSvtTvZL2+lM91&#xA;Lx9SUgAnioVdgANlUDHJkMzctynBp4YYCEBUQmPkj/lNNA/7aVp/yfTLdJ/ew/rD73F7W/xTN/wu&#xA;f+5L0K3/APJMR/8AbOuf+6qubOP+Kf5p/wB28tP/AI1z/wAMj/0xZF5n/wCUq0H/AIyeZP8AqGzK&#xA;1H97D/kp9zq+z/8AFsvu03+7b/MD/wAlx5h/4zRf8nbPDrf8Xn8PvijsX/jQw+4/dkfP+cy+nOxV&#xA;2KuxV2KuxVNPKv8Ayk+j/wDMbbf8nVy7T/3kf6w+9w+0f8Wyf1Jf7ksh8kXuj2Oq6pe63aG+0i2l&#xA;tZdQs1pWWBNQhMiCpUGq9qiuWR+nJ+P4g4+X+8we8/8ATOTO/O2k335t+fNR81flNodzHZaRaWzX&#xA;0zPFbSNdJzKvDGZNmMaKqqn8terb44mQbvd2BwwMDAgcJ6dGLya9cfot7wwxGSPSo9QEfH90Wm1B&#xA;LS4gZOnoTq/qNH0V/iTjmzOY8N1/Bf8AsqI9x5138qeXGjj4ghZo5TDz2xmcZX/PjXCJdY7S4kz0&#xA;rUrLVbcXtrzk9Vo1niMnG4Wdf7kGU043Sf8AHtcHaUfu5Pi63Y8gmLH7b6b/AM7+bL+Lkd3E1OCe&#xA;GXBKhV0a9PD/ABbdcZ/ymPnA+uHp5DNN0XWdQdH06GV5IJGmgvbVFiWOViVaeD1SkUbMw43dlIw3&#xA;3X2shinL6R8R94vYf0oH4OPn1eLEKyEURRjI3Y/myqyR1xZog90mbppk0kaNfeWbi4uqfvZUuIIk&#xA;LHdikYuWCAsSaV+875sPDJ5wJPvH/FPOnUAE8GeMY9BwyJ+J4N136NijUn/Ct0ijdj9chA27/wC9&#xA;GPBX8B+Y/WjxyT/fw/0kv+ISTTfNflW/uri1sraTT720LLdJeM5aMDZjJHITSOvwu43Tv8NTlGPU&#xA;Y5EgDhI7/wAcu/u9zsc/ZupxxEpyE4S5cNb+4jr1A/i6eqgj7LQ/M+sa/DoGk+X5NQAieZZZbhY4&#xA;bdEorK5ZfhFeITryFANlotOqz+FziSPxs5nZmg/NWYZBGfXbn58/PfuPPnZh8vmqeLzRJ5WHlWeT&#xA;zBFctZtYQyLLIZ0YqyrwDBqEdQaU36ZifyjD+a7b/Q5m/wBV+z9qZ2mqyT+YLjRNat30PX4rqCI6&#xA;bfFlmaKQrzZX+CNn4MWQFDyoPtlq5kafVRymuRsfj3/jd13aHZeTSQuuOAjKyBsD0sbmu83te3CA&#xA;nUHmDzh5Xm07zNoFvb3Wr6dDJFe6bcIxWT1okWZECMpVkKJwCncUC7cQzrcE8mMVzHMfj8d3Sz2J&#xA;r8WDUSEvon9MvKzRPv3s9Dd/xVyXzlrV/wCa9Wu/zAtX9HUpZkl1S1hqrWkyhVjlip8XotxAVjur&#xA;bMTsW1Jh6ROHTn3jz933PWRzHjODOARO+E/wyH83+sB06jfvqOa5feYLqSAay03JY+VskyGMBHYk&#xA;si0UUZh1A3yGaczXHbfo8OCAPhVz3o3v5pXlLmJ3oXk7X9chebT4A0KNw5u6xhmAqwTkRy41HKnS&#xA;or1GZGHSzyC4h1+s7UwacgTO/uv593l379yaf8qq85/8s0f/ACOj/rl38nZe77XD/wBEek/nH5Fy&#xA;flf5kE8cV3JZ2IlqEkubhFUlRU0C8mNBvsMR2fkujQ95U+0On4SYic6/mxP9jE5ojFK8TEMY2Kll&#xA;PJSQabEdRmERRp3UZcQB71mBk7FU78kf8ppoH/bStP8Ak+mZGk/vYf1h97r+1v8AFM3/AAuf+5L0&#xA;K3/8kxH/ANs65/7qq5s4/wCKf5p/3by0/wDjXP8AwyP/AExZF5n/AOUq0H/jJ5k/6hsytR/ew/5K&#xA;fc6vs/8AxbL7tN/u2/zA/wDJceYf+M0X/J2zw63/ABefw++KOxf+NDD7j92R8/5zL6c7FXYq7FXY&#xA;q7FURYXktjf217EAZbWVJow1SpaNgwrSm1RkoSMZAjo1ZsQyQlA8pAj5s90fU/LdlpWqXiae13pe&#xA;s8be/fkr3GnmStVdGUh0D0khkXiSVAJBFM2eLJjjGRq4y2PfH8cwdnmtVp9Rky44GfDkxbx/m5K6&#xA;g9DXpnE3QNgUr+SvNPmP8vv8SWVlrx0631TTWexuIFDxXbqf3EkJaOTixBZK/CVqakFcxhhjEyEz&#xA;/D6T39zspa3LlGM4on+8AyDa4jqD7udjntWxSi41KPTdAtBc2Lzxatops4Lg/CgdLuWQ0JBDcHEb&#xA;EA12HjlksnBAWL4oV9p/Y48MBy55cM6OLNxEdd4RHwscQ+bF9K1a80u6+sWxU8lMc0Mg5RSxN9qO&#xA;RDsyt/aN8w8eQwNh3Op00M0eGXvB6g94PQ/jk9q/LXSV87eZtL02/wBS8v27alG0jjjLc3pKRK/p&#xA;8Wm3kNePxvXYmhpmwyagiIl+7JPvv73nNP2fGWQ4x48Ix6+kR5nlt9wpiHnrXj5Z836toFta6Pqc&#xA;Gm3DQJfRQOFkC+wmYBh9lhU0IOUfnT/Nj8v2uw/kSP8AqmX/AEw/4lGeVfMlpcxWl9cRaTHcyX8V&#xA;munwxSJcgSkKJkYu32S1fs0oD8StxzM0+cECR4L4gK6+/wDHzt03aOgnAyhE5TEYzLiJBjt/Cdv0&#xA;9R6TG2/zBlQXzapahrXWdMtoLuK/jIDSI9ybb05QAAxUcaNTpVSONArrTvxDacQDfxrdHYkTweHL&#xA;1YskpRMT0Ijx2Pfvt7jd3Z75F/MWW8sx+jtQk0PXbaJ0W5goTboQKsiOCslqaDnG393Sv2FVo5Qy&#xA;Q1GPhlsR9nu/o+XT3coZtNn7Pz+Lj9UJf7LyPdPuP8f9axOLaFN538q/mTF5n/SmmSeY7a6klmnv&#xA;7uMrI9yrJK0ylkl4yJK1ejUO2a+WjkJcJMfmHocfbGOePjjHIRV7Qkf2falP5tebdf8AM3ny81fW&#xA;Z7OS/KQKjaYW+rIixKyLGz/HVeXxct+VcoyYzCVWD7nN02cZ8YnwmIN7SG+xr8eTN/y+/MOLXVTT&#xA;dWYDXEThDOSFF4gBoj129YV2PffxYNvNFrRk9Mvr+/8Aa8P212IdPeTF/c9R/M8x/R7+74AgzuPK&#xA;nlttXfVre4uLPUZa85LJJ1kJYfESYZkNW/aoN+5P2jbLT4+LiBIl5X+guJDtHUDEMUhGeMfzjGv9&#xA;lE/D9HILXHlXQdQvPrV/FNqVwsfpJ61u0BC82kPFpWaHkzuzHktTU716ylp4SNyuR91ffs1w7Rz4&#xA;ocMDHHG72lxdK6eqqAGxod1cg3+FvI//AFax/wAjtO/pkPy+H+b9sW7+UdZ/qn+xyq2q635Z8u6E&#xA;7uBHCqiO3sUeBppGXdET0PgRASzMwANTU77PLJlx4ofo2/R+P016fSajVZgBueZlUqHeTxbk8gB+&#xA;Iw3/AJWxon/Vnn/6Sj/TMD+UofzT83ff6G83+qR/0jItP1rSvMeizfUkDwvxF1YTRi4kilH2CUY1&#xA;lHL7NG+LovGT4ZMqGWOWBr4jn/b+npR2Orz6TLpcw49iOUgeEEdd/wCHz225y4oeqHOfP9vOL61u&#xA;pX0k+tEUWPRi3pAIa1kVtwx5/h7ZqtbE8QJ4P816vsWceCUQMux/yvPfu8tvxbFcw3cuxVO/JH/K&#xA;aaB/20rT/k+mZGk/vYf1h97r+1v8Uzf8Ln/uS9Ct/wDyTEf/AGzrn/uqrmzj/in+af8AdvLT/wCN&#xA;c/8ADI/9MWReZ/8AlKtB/wCMnmT/AKhsytR/ew/5Kfc6vs//ABbL7tN/u2/zA/8AJceYf+M0X/J2&#xA;zw63/F5/D74o7F/40MPuP3ZHz/nMvpzsVdirsVdirsVdirK/yu84af5R88adrmp2R1LS4DIl9p4K&#xA;0mjkjZBVX+B+DlZArbEqOnXJRkRya8mKM64hdGx5HvZt511Py15t1C88w2MEGmeStTuoofqVFiud&#xA;Mu2RY3uVjT90RKV9SREb4ga0qvPM/FjBxizeMn4xPf8AjmOjoNTqZDUkQgRnjEkdY5IDoe49xI9M&#xA;tuIg0Yomiajfpe6CNbtpPLnl0tdSXgAICtVj6YQMztUsAOfDmaBviWoGKUrhxDw4b3+P7L67sjq8&#xA;eMxz+FIZ8/p4f13sOnTi4dzH0mpV5L/O3yv5U8k+ZfK1t5Tiu11iN4re9uJA0j84vTBuxxPIKfjV&#xA;YyoHQb/FmJOceIcI2Hf197tsOHJ4ZGSfrl1jtw/1fd3m9/kwxZWby82vfoPSvqS3X1PiRd8/V4CT&#xA;/f3GnFv5q+2ZF+jj4Y1ddf1uvMf3/geLl4+Hi/gqrr+bf2J9B5Vu5dUWxbQ9LureazN6ktlJco80&#xA;X2GFq7SOGkVjtVCvQn4TXMkacmXDwxIq9r393n9nwdbPtGMcfGMuWMhPhqQjsefrFD0ked9B6gpX&#xA;Nj+jLjyhaR2tq9lJfpPZ6xECs1whmRqSo1CrqHUPuwBAUUKtUShwHGKFcW0up36/p/tZ483jR1Ej&#xA;KfGMZEoHlE8J5Hu2NcjvZuwn/nKz0RLK9uNXuZbX67ZwWVrJHG8gEsdw1zRwq03HE7uu1aciKDJ1&#xA;UYUTI1YAHzt1fZeXMZxjiiJcE5SO4GxiI7b+/od6uggPPujflLoPkvyrq/kbzDNd+cJDG+pRq5ql&#xA;Ii0rsnFTCyTUVFP2lJ60rmkEuGVxPLq9wYDLjrJH6hvHn8EJb+avMz+WpNcnt9LitoSIrWKdZkkn&#xA;4sFb0F9QJxTl0Wg2IUfCabOOoyeHxkRrpz3927zE+ztONQMMTlMjua4SI/1vTdnz7wSd0m/5Wjq/&#xA;/Vu0/wD5Fzf9Vco/lCfdH7f1ud/oexfz8nzj/wAS2v5p6yrBl0+wVlNVYJMCCO4/e4/yjPuj9v61&#xA;Ps7hOxnk+cf+JZLpXnrW/NOg63b3sj201lbyXdtc2k08bK8MEsoB5O9QfS49QKE9+JGXj1c80JA7&#xA;UL2J6Al1Go7Hw6PPilACQnIRIkInnKMe4d9/Duu+cy+ZPMU0TxTareSRSArJG88rKykUIILUIOao&#xA;58hFGR+b1cdBp4mxjgCP6I/UluVOW7FXYqmXl/WptG1SK+jX1EWqTwciglicUeMkeI+475bhynHL&#xA;icTW6QZ8Zgdu49x6FkvmW5m8xpat+mbKS0h5Pbm6b0LtTIEDrOAOLOPTFWXZj8XVjmXnkcteqNee&#xA;x+P483U6DGNIZfu5iR58PqhtdcPWt+R3H09AxbVdHvNLmjjuOLLNGs1vPEweKSNujI42IqCD4HbM&#xA;PJiMDu7nTaqGYEx6GiDsQfMIHK3ITvyR/wAppoH/AG0rT/k+mZGk/vYf1h97r+1v8Uzf8Ln/ALkv&#xA;Qrf/AMkxH/2zrn/uqrmzj/in+af928tP/jXP/DI/9MWReZ/+Uq0H/jJ5k/6hsytR/ew/5Kfc6vs/&#xA;/Fsvu03+7b/MD/yXHmH/AIzRf8nbPDrf8Xn8PvijsX/jQw+4/dkfP+cy+nOxV2KuxV2KuxV2KuxV&#xA;uppTt4Yq6p+/rirWKq31y5+p/U+Z+rep63pbU9Tjx5ePTJcRqujX4UePjr1VXwXfX7z6tBbCVhDb&#xA;SvPAo24SSBA7Ajep9Jfux4zQHd+P0I8GHEZVvIAHzAuvvK7UNTvtQu2vLyYy3LU5SmgJIFK/CBue&#xA;pPUnc7nDPJKRsndGHTwxR4ICo/j8eQ25Jm/nnzg32dYuojWpaGVoWJIAPJo+JavGpr+0S32mJNp1&#xA;eX+cXEHZGk/1OB94v7/xVDkAt/xv50/6v+pf9Jc//NeP5vL/AD5fMp/knSf6jj/0kf1Jbf6lqOoz&#xA;/WNQupry4oF9a4kaV+I6Dk5JplU8kpG5Ek+bl4cGPFHhxxEY9wFD7ENkG12Koyw1fUbBLhLOYxJd&#xA;RtDcAAHkjoyMu4PVXYZOGSUbo82jNpseUgzF8Jse8EH7wEHkG92KuxV2KuxV2Koz9K3Z0r9FuQ9o&#xA;soniDCrRvxKt6bfshxTkO9B4ZZ4h4eHo0floeL4g2lVHzHn7unvKDytvRujarPpOqW+o26q81s3N&#xA;FfkFJoR1RkcdeqsDlmLIYSEh0cfVaeObGccuUvd+mx9j1ea7kvfyllvJFVJLmyvJnRAQoMmrhiFB&#xA;J232zcmXFpb7wf8AdvFRxDH2oIDlGcB8sKd+Z/8AlKtB/wCMnmT/AKhsyNR/ew/5Kfc6/s//ABbL&#xA;7tN/u2/zA/8AJceYf+M0X/J2zw63/F5/D74o7F/40MPuP3ZHz/nMvpzsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirYBJAAqTsAMVZXF+V3nOSNX+pqnIA8HlRWFezLWqkdwdx3zNHZ+XudJL2h&#xA;0gNcV/Arbr8s/N1tbS3MttGIoEaSQiVCQqDkdq+AwS0GUCyE4+39LOQiJGya5FiuYbunYq7FXYq7&#xA;FXYq7FXYqmXlvSV1fX9P0t5DEl7cRwNIBUqHYAkDLcGPjmI95cTX6k4ME8gF8ESfk9c1yG3Ok2vk&#xA;3RbcRy6jan6ssslI7XT1uDNLdXErfakkeIsVXZR9HLeZgOEYoD6h8o3dk+bw+jlLxZavMbEJb0N5&#xA;5OHhEIjoADVnn9wjVtRs9S13y5e2UomtZ38yNFKKgMBbkVFaeGSyTE5wI5fvPuatNgniw5oTFSA0&#xA;1j/ORX5gf+S48w/8Zov+Ttnk9b/i8/h98WnsX/jQw+4/dkfP+cy+nOxV2KuxV2KuxV2KovTdLv8A&#xA;UrgwWURlkVDI5qqKiL1Z3cqqr7scnjxymaDTn1EMUeKZocvj5Ablm35mfkn5t/LzTNH1HWpbWaDW&#xA;FPAWsjOYpFUOY5OSpU8W6rUdfasG0G3n2KWUeU/J8epQTavrE50/y7af70XZ2aR+0UNQ9W9+Jp4E&#xA;7ZmabS8YM5nhgOv6nT9pdqHFIYsQ488uUe7zly2+IZKnlP8AKz6vBNcXmo2f1mMTQxXFzaRyGNq8&#xA;X4eiSA1KivUb9My/y2moEmQvvI/U6g9pdpcREY45cJo8MZkX3XxdHf4W/KH/AKu13/0mWv8A1Qx/&#xA;L6X+cfmP1L/KPav+pw/0k/8Ainf4W/KH/q7Xf/SZa/8AVDH8vpf5x+Y/Uv8AKPav+pw/0k/+Kd/h&#xA;b8of+rtd/wDSZa/9UMfy+l/nH5j9S/yj2r/qcP8AST/4p3+Fvyh/6u13/wBJlr/1Qx/L6X+cfmP1&#xA;L/KPav8AqcP9JP8A4pG6L+Xf5c67qlvpOjXV/f6ndtwtrSK8sw7kAk05xKuygk1PTAdPpa+o/OP6&#xA;kjtDtQkDghv/AEJ/8V9vTqt1/RfKP5a+ZJ7W+03Uv8SWCLLa2t7Jbywc3UNFIHgCDav2gxpvSjUI&#xA;hDJpsZ4oiRkOV/gORm03aWoj4eQ44Y5fVw3ddRuT+Oe1g841TzBrGp30t7d3UjzympoxVQBsFVRs&#xA;qqNgBmDkzTmbJ3d5p9FiwwEIRFBCG8u2BVp5CDsQWahH35DiPe3jFHuCjkWbsVdirsVdirsVdirs&#xA;VROnahd6df29/Zv6d1ayLLBJQNR0NQaMCD9OShMxkJDmGrPhjlgYTFxkKKMufNPmC5uI7mW9k9eK&#xA;2Niki0Q/V25cozxAqD6jdcslqJk2TvVfBx8fZ2CETERFGXH3+rbf7As0/wAxazYPbNb3LAWazrax&#xA;v8aR/WozHNwVqgclOCGecao8rr482WfQ4solxR+rhvoTwm437kfqfn7zVqWn3GnXd4Hsrpg88Ijj&#xA;XkVKEbheXWJT1y3JrMk4mJOx/H6HG0/Y2mxZBkjH1x5Gz5+f9IsezFdo7FXYq7FXYq7FVyIzuqKK&#xA;sxCqPc7YgWgmhZe3+S/y1tNW16HyIGjt/rE7R3E9wzgTvb2yXbTOsTxySfDKBDAHUKOTMS2bTNGO&#xA;GJjV7/PYGz89h097y+iyZNZlGUS4fTY2vhHEY8Mb2v0nilzOwFBd54k8zeXLnVdH1KbS9dsvLjLB&#xA;Db3t3cX4VV4hfRtrp7hYGAlpx+E0BAqFxxT4cZkIwruJv7Da6rDx5445ZM3HyEogRG+/1DhsbeYu&#xA;kx8geSfMvnDXP0XFoXliyQWhvWuZLaF/g5KoURovqEkyDenHrvXbJ5sssYBOPHv5Bo0mkx6iRjDP&#xA;qLj3yl08+Xw5+Tz7VtS1W8/MO08tavDax2miai1i2m2a0svUt5jHIyrsGDMp7Up23OUR1BzZIggc&#xA;IPLo7CfZ0dHpss4GRySibmTcvmwO+vru/u5by8laa5nYvLK25JP+ewzBnMyNnm7zDhjjiIQFRChk&#xA;WxE6dLZxahay30JuLKOaNrq3VipkiDAugYEEclqK1yUCBIE7hqzxnLHIQPDMg0e49Cm93qfk2Sdn&#xA;h0OeOM0oqXhVagAEhXjmZQTvQu1PE5kSyYidon/TfsP3uBj0+rEaOWJP9T9Uoj/Yj3KX6Q8pf9We&#xA;5/6Th/2T5HjxfzT/AKb9jZ4Oq/1SP/Kv/j6O0LzZpOg6va6xpFheWepWUgltblL1CUYbdGtypBGx&#xA;BFCOuPHi/mn/AE37F8HVf6pH/lX/AMfR+seftI8y+ZJde806dd6pe3G1xJLdih4pxQCOGK2AVaD4&#xA;UZRkoZMIO8DX9b+z72rNp9YY1HLEH+p+sy+4sOvXtpLyeS1jMNq8jtBCSWKRliVUk1JoNsx5kEmu&#xA;TscQkIASNyoWe89VDItjsVRemaZdalc/VrUxCXiWHrTQ26kDrR5njWvtWuTx4zM0PvA+9o1Gojij&#xA;xSuvKMpfZEEpt/gPzF/y5f8AcR0//qvl/wCTyf0f9NH9bhfyxg/p/wDKvJ/xDv8AAfmL/ly/7iOn&#xA;/wDVfH8nk/o/6aP61/ljB/T/AOVeT/iHp/5b/l9+XUfkrW73zPcRy+eomlHl3S4p4byKQiBfqxMM&#xA;Jkjk53DMHWRqBRU0FTjHBOEhsJH4H7j96MmuwZsUvXLHEczUoH4cQB8vTv3bpTpFlczMsP6NtL+C&#xA;MsL7XxYWFvpkcikBoo5vqMvqcK7tXxNOI5ZnYiDLhqMiOZqIA/2J+f6HRaqMoY/FJyQjLaEOPLKc&#xA;vf8AvY1f839JpJr/AFCzfSBrdvFpktisotdQ0WW1sI7gM1QTDcW0MEhVlHJXWlPemVTmODjHDXIx&#xA;qN/AgAuVhwTGXwZHKJ1xRyCWQx/zoylIeRBu/K2OeYfLttY2dpqun3a3OlagWFujkC5iZAC0cqDY&#xA;leVOS7f6tQMxc+ARAlE3GXz+LttFrpZJyxZI8OSHP+afMHz7jv76tIcxnZOxV2KuxV2KuxV2KuxV&#xA;2KsjsdD0608vp5h1V1uYZ5Gt7LTYZQsjyLXk8rCpREArQfEar0BrmVDDGMPElvewH6/x3OqzavJP&#xA;P4GL0kC5TI2A7o95Py2lzIZHbeUtHktobiSPSLP1o0lSO61aSF6OiuNnQVoGAPGoBqOoOZcdNAgH&#xA;0D3zp1OTtLKJGIOaVEj04QRsa6Hy69N0wh8rpqmsaRaT+Z9E0fTI7tHuLyLVFmuUMrIkk/qSFSWS&#xA;NFCioAp8zkdRhJj9UKG/1WS2aDWiGTfHn4pVGzi4YxF9w2Askkoj8x/yo/L/AEXzmuiaT55ju5Lq&#xA;NJFa4T1+M0vL4JrmE+kCxAbcVAYV8Ti4MMJ7GXDL3fpdnr9bmwbxxHJACyRIX5+nma5sO0FJvKHn&#xA;FIteN5p6p6kMs9lM8LhWrH6ivEVZ4wwNQrdu9OJMMQx5OHKNvxujLqp6jTcekkOLYi/nXkSO/wDa&#xA;zKX8kvOHlWfQfN1y9veeXtRvoRaXkEvqOY56yQSyKVG0iCtQT+OSxQEc4ANi+bDV5pZdBKcomEjA&#xA;2DzDyDMN3DsVdirsVdirsVdirsVdirsVZJ5DedNZlMTSoBbuZWjf0ECKysTPcAh4YRSrsnxH7A3b&#xA;MvRk8e3d7vmeg92/Tq6ntgROIXX1CrHEb3+mPKUu4HYfUeT0J72xiCC41D0HdVkVJprqJyjiqN6c&#xA;uupIoZfiHJQads2ZkBzNfE/9VXlxinK+GF1ttGB367jSEbctiQt/Sekf9XaP/pKn/wC8/g8SP877&#xA;T/1VT+Xy/wCpn/SR/wCyRbJf6JLG0cupwyRuCro1zMVIOxBB17fEzgf4h8z/ANVWUcOYGxAg/wBW&#xA;P/ZIn+ref7G//KpPy4S8sLPSUdSs0CWpcRpP9YCr6uqykN6nVuXTbMSemxE2JV/pf+Ldth7S1UI0&#xA;cRme88d/ZgA+x5RrvlfQ9NsmWG9up9V+CSGCS3CJJbt/u1Hie5iZKdGWXfpQZTmwQgOZ4vd0+0fa&#xA;5ui1+fNOzCIx72RKyCOhBESD3gx+KD13y/YaRptoJb7nrshrfaYEP+jowqqu/TmP2l670oOJrDNh&#xA;jCIs+vqO5u0etnnySqP7kfTO/q9w7u4+V9UhzGdk7FXYq7FXYq7FXYq7FXYq7FXonlbSvyci8w6d&#xA;da7r1xNo0Uym/sDaT1kjB3HrRFWVT3CrXwOZk8WGrE9+6v0umxavW8QE8I4b5iY2Hu6/MMh85fmF&#xA;5Qt/OkWlflzeJonkiNAHujZiYtOwLySKt0jz8SeKjlT/AIGmT0+slGoWIx76Bae0OxsUzPKYyy5D&#xA;VR45RHQUKI9/3MtuJfy7uvynk1HUPMiebdfuLn6vH5dijtbW4flciJTBbxRLdI6RfvA5Yqfs9xlp&#xA;1hlMwl+8gfKj8K6uJHsaMMIzY702aO+8zKI8pWaoj5MJl8qf4i0TVddTy35iuoNEgaG5vbqSOQQe&#xA;nGXAKt6Ln0wQ705UG7DeuRzZMR+oT4q6/gN2j0+riAcc8HhmVngBF9/exfyx5x82alf+XfL17qt1&#xA;c6Lp10j2WnvIzRRkV3C/5IJ41+yOlBmLpP72Pvdn2sf8Fyf1SwvMd2LsVdirsVdirsVdirsVdirs&#xA;VZJ5BtBda+I6RGQRs0PrfEA4ZaMkPSdx1WMkLX4m+FTmXoo3P8fd193z2dT2zk4MF71e9d3nL+Ed&#xA;8ufSPqIZteXd/wA1TR01iW1PJjc6fqcdlHPKWPqSFmhke5bkKNMTQkUUBQM2E5S/g468pVf2er3/&#xA;AC2eexYoVeU4RLuniMzEdBtICA7ocwPqJkSh2u/NC/aj8yLXpXzBEP8AsWyHFk/2z/lZ/wAdbRi0&#xA;x5HTf9c5/wCLS+6806ra3yWE/wDihLyTiYoP00Szh/slALQ8g3amVS1EonhPi3/X/wCOuVj7OxTh&#xA;xx/K8I6+Byrnf7zZOLbUPMllpD+YdSsPN8OiRv6I1Ca/lmgEwcLxYGG1A+L4asxFdqE4Y6zhPqOT&#xA;/TfsCMnYxyQBxjTEHuxVt5Hin+j3pr5D/PTUfy2F3KNAh1Kw8w2kVxZxmUww283xC4EPwS/ummJL&#xA;wgih6EZjamUvSeQO47r618XZ9nYsY44/VMHglfMgfTxd/pPPqObze5/LzzyfKH+OptKl/wANTylf&#xA;0nyQryaT06lORlCmT4eRWldq5iEu1AAFBjGKXYq7FXYq7FXYq7FXYq7FXYq7FXqXnP8AMryLr35X&#xA;+WPKem+Wo9M1zSTAt9rRSNQ3pxGOVg0Q9V/XciR+Q6j9o0OEIJod7GpvJGu2WtW50Wb65aGk9rrk&#xA;FVtkVa8neVS6R+nwPKrbfhmYdJOMxwGx0l0+fSnSx7Ww5MJ8YcMuRxn6vcBsTd7bMo0z849Q0Py3&#xA;q3lWy1zUrrStUVormVo4CSHjEMptzLykiSRF4gdh04tkcksZO5lLzbNPi1MI+mGLGDvW/wBtbE95&#xA;YRJrmm2NlLa6FBLFNdApdahcMpn9I7GGIJ8MaN+2ftN06bGJzRiKgOfMnn7m2OkyZJiWcgiPKMfp&#xA;v+cb5nu6Dnz5EOYzsnYq7FXYq7FXYq7FXYq7FXYqm3lnWLfSdUFxdQvcWckbw3VvG/pmRHH2S1G2&#xA;5AEqdm6HYnL9PlEJWdw4XaGllmx8MSIzBBBIuiPxz6cxum+ofmBczaeyWMB0/U55SbrUIX4v9XUn&#xA;0baEqFaKJFKrwBp8C7D4q3T1pMfSOGR5ny6Adw/U4GDsWMclzPHjA2iRtxfxSl/OkdzfP1HyQ+ie&#xA;Zbm6vodO8w3b3mi3sscd2bt3kMCs3H6xEx5MjxhiduvQgjK46mXKfqie/wDR3FysvZsB6sIGLIOR&#xA;A+yQH1RP9lF6l+YPk/yd5T1LS7Dyr5kg8waakX1mG6bU9NS8066DVDQys8UbRTdTEV2pyrU726aR&#xA;I3qhy9UQQfKzycPtLHASJiJcUh6h4c5QmOXq4ImpDobvv2pS81edPN1z+XI/Le21KC+gkUXQt3VJ&#xA;LqaCOczejDNGQhMcsfMIEqy04MRsbNRprOxufd3+79Xdyaezu0uGPqhwYQavccJO9yvob+rpL6qS&#xA;X8kfza8qeSYNYsfNOgfp6x1BU+qgrHL6LUZZV9Ob4QsoK8iu/wAIrXamAJcok+l308YBM4xByVXd&#xA;fcCaO3zQX/Kw7mfyXF5Ek8yXkvlUTBxpUWnxCRlE3rCFZmmaTj6m6hiaGnhlwhiv6j/pf2uHPPqq&#xA;NY4DzM9h/sGGeatRiv8AVjJFpUejpGixiyReJAFSpf4Uq3EgV4ioArU1JjqJiUvp4fJn2dgOPFRy&#xA;HLZvi/Vz2+PPy2BPlDnuxV2KuxV2KuxV2KuxV2KuxV2KrxNKsZjDsIz1QE0P0YbLExF3W6zAydir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdiq6OSSKRZYmKSIQyOpIZWBqCCOhGEGkSiCKO4Kc/wCN&#xA;/On/AFf9S/6S5/8AmvL/AM3l/ny+ZcD+SdJ/qOP/AEkf1Lo/PfnWORZF1/UCyEMA11MwqN91ZiCP&#xA;Y4jV5h/HL5lEux9GRXhY/wDSx/Ulmp6ne6neve3snq3MgRWfiqCkaCNAFQKoAVQNhlWTIZmzzcvT&#xA;6eGGAhAVEX9ps8/NC5BudirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdir//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:1b517148-c37c-494b-8bcf-8af9fd7bbeef</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:1b517148-c37c-494b-8bcf-8af9fd7bbeef</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:4a2204fb-0fb4-4459-9485-011c3b1ec700</stRef:instanceID>
            <stRef:documentID>xmp.did:0ED623E8DFBDE511B2BBC0EB12123494</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F07763D45588E411BF89F345A28D8C9F</stEvt:instanceID>
                  <stEvt:when>2014-12-20T17:10:37+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:29845C695A88E411BF89F345A28D8C9F</stEvt:instanceID>
                  <stEvt:when>2014-12-20T17:19:01+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:2E845C695A88E411BF89F345A28D8C9F</stEvt:instanceID>
                  <stEvt:when>2014-12-20T17:33:07+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4365C60ACE89E4119A65C8F5B8A1FEA0</stEvt:instanceID>
                  <stEvt:when>2014-12-22T13:34:24+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0B5A99264D6BE51194FFADFDE0B012D7</stEvt:instanceID>
                  <stEvt:when>2015-10-05T13:38+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0ED623E8DFBDE511B2BBC0EB12123494</stEvt:instanceID>
                  <stEvt:when>2016-01-18T14:35:43+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:6FFFA719F2BDE5119314DC75DE111CE2</stEvt:instanceID>
                  <stEvt:when>2016-01-18T16:45:21+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Bridge CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/metadata</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:CA809509F8BDE5119314DC75DE111CE2</stEvt:instanceID>
                  <stEvt:when>2016-01-18T17:27:51+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Bridge CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/metadata</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:1b517148-c37c-494b-8bcf-8af9fd7bbeef</stEvt:instanceID>
                  <stEvt:when>2016-05-12T13:12:04+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>1200.000000</stDim:w>
            <stDim:h>1200.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=0 B=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
         <photoshop:Headline>abstract vector background with high tech circuit board</photoshop:Headline>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1200 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1200 li
1200 1200 li
1200 0 li
cp
clp
1200 1200 mo
0 1200 li
0 0 li
1200 0 li
1200 1200 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
0 0 0 rgb
f
556.073 987.964 mo
557.424 986.614 559.611 986.614 560.962 987.964 cv
562.313 989.315 562.313 991.503 560.962 992.852 cv
559.611 994.204 557.424 994.204 556.073 992.852 cv
554.722 991.503 554.722 989.315 556.073 987.964 cv
cp
417.232 992.813 mo
415.883 994.165 413.694 994.165 412.343 992.813 cv
410.992 991.462 410.992 989.274 412.343 987.923 cv
413.694 986.573 415.883 986.573 417.232 987.923 cv
418.584 989.274 418.584 991.462 417.232 992.813 cv
cp
417.803 985.392 mo
414.646 983.39 410.881 982.751 408.237 985.392 cv
405.597 988.032 405.597 992.315 408.237 994.958 cv
410.881 997.597 414.457 996.614 417.803 994.958 cv
419.123 994.307 420.998 993.127 422.003 991.884 cv
551.271 991.884 li
552.269 993.141 554.167 994.337 555.502 994.997 cv
558.848 996.651 562.426 997.638 565.068 994.997 cv
567.709 992.354 567.709 988.073 565.068 985.433 cv
562.426 982.788 558.66 983.429 555.502 985.433 cv
554.168 986.277 552.552 987.328 551.549 988.427 cv
421.791 988.427 li
420.792 987.315 419.154 986.247 417.803 985.392 cv
cp
0 .862745 1 rgb
f
237.075 1008.85 mo
235.725 1010.21 233.536 1010.21 232.186 1008.85 cv
230.839 1007.5 230.839 1005.32 232.186 1003.96 cv
233.536 1002.61 235.725 1002.61 237.075 1003.96 cv
238.431 1005.32 238.431 1007.5 237.075 1008.85 cv
cp
241.879 1007.89 mo
250.099 1007.89 li
250.099 1004.43 li
241.602 1004.43 li
240.6 1003.33 238.982 1002.28 237.649 1001.43 cv
234.492 999.433 230.725 998.79 228.084 1001.43 cv
225.442 1004.08 225.438 1008.36 228.08 1011 cv
230.725 1013.64 234.3 1012.66 237.649 1011 cv
238.981 1010.34 240.881 1009.14 241.879 1007.89 cv
cp
f
189.45 1076 mo
188.096 1077.34 185.909 1077.34 184.561 1075.98 cv
183.217 1074.63 183.224 1072.44 184.578 1071.09 cv
185.932 1069.75 188.12 1069.75 189.468 1071.11 cv
190.815 1072.46 190.808 1074.66 189.45 1076 cv
cp
190.048 1068.58 mo
186.894 1066.57 183.133 1065.92 180.481 1068.55 cv
177.831 1071.18 177.813 1075.47 180.448 1078.11 cv
183.085 1080.76 186.661 1079.79 190.018 1078.15 cv
191.111 1077.61 192.587 1076.71 193.637 1075.72 cv
201.624 1075.72 li
201.624 1072.26 li
194.512 1072.26 li
193.654 1070.92 191.647 1069.6 190.048 1068.58 cv
cp
f
118.722 1069.85 mo
120.076 1068.51 122.265 1068.52 123.611 1069.87 cv
124.959 1071.22 124.951 1073.41 123.594 1074.76 cv
122.239 1076.1 120.053 1076.1 118.705 1074.74 cv
117.362 1073.39 117.368 1071.2 118.722 1069.85 cv
cp
249.681 1064.36 mo
250.964 1062.95 253.147 1062.84 254.563 1064.12 cv
255.981 1065.4 256.093 1067.58 254.81 1069 cv
253.529 1070.42 251.346 1070.53 249.927 1069.25 cv
248.509 1067.97 248.397 1065.78 249.681 1064.36 cv
cp
124.162 1076.9 mo
124.848 1076.57 125.684 1076.09 126.472 1075.53 cv
127.106 1076.27 128.033 1076.74 129.078 1076.74 cv
149.538 1076.74 li
150.518 1076.74 151.452 1076.33 152.108 1075.6 cv
166.926 1059.17 li
208.94 1059.17 li
219.895 1069.72 li
220.526 1070.33 221.367 1070.68 222.249 1070.69 cv
244.291 1070.98 li
244.309 1070.98 244.322 1070.98 244.339 1070.98 cv
245.235 1070.98 246.048 1070.63 246.663 1070.07 cv
247.561 1070.71 248.585 1071.3 249.484 1071.81 cv
252.74 1073.65 256.532 1074.09 259.038 1071.33 cv
261.543 1068.55 261.331 1064.27 258.559 1061.77 cv
255.782 1059.27 252.264 1060.43 249.001 1062.25 cv
248.076 1062.77 246.876 1063.57 245.924 1064.47 cv
245.46 1064.22 244.941 1064.07 244.383 1064.07 cv
223.707 1063.8 li
212.735 1053.22 li
212.092 1052.6 211.229 1052.25 210.335 1052.25 cv
165.385 1052.25 li
164.406 1052.25 163.474 1052.67 162.817 1053.39 cv
148.001 1069.83 li
129.078 1069.83 li
128.647 1069.83 128.24 1069.92 127.86 1070.06 cv
126.856 1069.06 125.406 1068.11 124.191 1067.34 cv
121.038 1065.33 117.276 1064.67 114.626 1067.31 cv
111.975 1069.94 111.958 1074.22 114.592 1076.87 cv
117.229 1079.52 120.806 1078.55 124.162 1076.9 cv
cp
f
206.789 1002.11 mo
208.072 1000.7 210.258 1000.59 211.676 1001.87 cv
213.092 1003.15 213.202 1005.33 211.921 1006.75 cv
210.643 1008.17 208.458 1008.28 207.039 1007 cv
205.619 1005.72 205.51 1003.53 206.789 1002.11 cv
cp
206.595 1009.56 mo
209.852 1011.4 213.645 1011.84 216.146 1009.07 cv
218.651 1006.3 218.439 1002.02 215.667 999.519 cv
212.895 997.017 209.373 998.179 206.11 1000 cv
205.02 1000.61 203.554 1001.62 202.558 1002.7 cv
193.569 1002.98 li
193.678 1006.43 li
201.977 1006.18 li
202.925 1007.45 204.966 1008.64 206.595 1009.56 cv
cp
f
257.544 1033.84 mo
255.647 1033.62 254.289 1031.91 254.506 1030.01 cv
254.725 1028.12 256.441 1026.75 258.337 1026.97 cv
260.235 1027.19 261.594 1028.91 261.378 1030.8 cv
261.157 1032.7 259.442 1034.06 257.544 1033.84 cv
cp
263.718 1029.68 mo
263.322 1025.96 261.483 1022.61 257.771 1022.18 cv
254.06 1021.76 250.703 1024.42 250.274 1028.13 cv
249.85 1031.84 252.844 1034.03 256.222 1035.62 cv
256.933 1035.96 257.86 1036.33 258.814 1036.6 cv
258.943 1037.3 259.28 1037.97 259.842 1038.5 cv
269.351 1047.39 li
270.015 1048.02 270.862 1048.33 271.71 1048.33 cv
272.633 1048.33 273.554 1047.96 274.236 1047.23 cv
275.54 1045.84 275.468 1043.65 274.073 1042.35 cv
264.565 1033.44 li
264.369 1033.26 264.155 1033.11 263.934 1032.98 cv
263.934 1031.88 263.825 1030.71 263.718 1029.68 cv
cp
f
228.704 1091.1 mo
227.354 1092.45 225.166 1092.45 223.814 1091.1 cv
222.464 1089.75 222.464 1087.56 223.814 1086.21 cv
225.166 1084.86 227.354 1084.86 228.704 1086.21 cv
230.056 1087.56 230.056 1089.75 228.704 1091.1 cv
cp
229.275 1083.68 mo
226.118 1081.68 222.352 1081.04 219.709 1083.68 cv
217.069 1086.32 217.069 1090.6 219.709 1093.25 cv
222.352 1095.89 225.929 1094.9 229.275 1093.25 cv
230.347 1092.72 231.785 1091.84 232.827 1090.86 cv
241.168 1090.86 li
241.168 1087.41 li
233.787 1087.41 li
232.947 1086.05 230.903 1084.71 229.275 1083.68 cv
cp
f
156.45 1005.14 mo
157.807 1006.49 157.821 1008.67 156.48 1010.03 cv
155.14 1011.39 152.948 1011.41 151.587 1010.06 cv
150.233 1008.72 150.22 1006.53 151.563 1005.17 cv
152.904 1003.81 155.093 1003.8 156.45 1005.14 cv
cp
181.085 971.263 mo
198.638 971.263 li
210.74 984.104 li
269.315 984.104 li
297.349 956.054 li
548.054 956.054 li
571.826 931.554 li
633.318 931.554 li
633.318 928.097 li
570.362 928.097 li
546.592 952.597 li
295.919 952.597 li
267.884 980.646 li
212.232 980.646 li
200.131 967.806 li
179.647 967.806 li
152.126 995.495 li
152.126 1000.53 li
150.986 1001.53 149.893 1003.23 149.023 1004.62 cv
147.043 1007.79 146.426 1011.56 149.082 1014.18 cv
151.739 1016.81 156.024 1016.79 158.647 1014.13 cv
161.272 1011.47 160.267 1007.9 158.592 1004.56 cv
157.947 1003.28 156.8 1001.47 155.585 1000.45 cv
155.585 996.919 li
181.085 971.263 li
cp
f
92.4072 1044.41 mo
90.5029 1044.52 88.8662 1043.07 88.751 1041.16 cv
88.6396 1039.26 90.0938 1037.62 91.998 1037.51 cv
93.9033 1037.39 95.541 1038.85 95.6553 1040.75 cv
95.7676 1042.66 94.3145 1044.3 92.4072 1044.41 cv
cp
160.31 1028.62 mo
169.561 1019.85 li
169.561 996.979 li
178.004 989.413 li
270.677 989.413 li
299.494 961.628 li
551.527 961.628 li
573.858 937.856 li
633.318 937.856 li
633.318 934.399 li
572.361 934.399 li
550.032 958.171 li
319.681 958.171 li
298.099 958.171 li
269.282 985.954 li
176.68 985.954 li
166.104 995.433 li
166.104 1018.36 li
158.932 1025.17 li
105.311 1025.17 li
95.9033 1034.57 li
94.3018 1034.48 92.1533 1035.1 90.7734 1035.66 cv
87.3125 1037.06 84.2031 1039.08 84.4209 1042.81 cv
84.6436 1046.54 87.8467 1049.38 91.5732 1049.16 cv
95.3057 1048.94 97.3271 1045.7 97.9277 1042.01 cv
98.1816 1040.45 98.4668 1038.54 98.3086 1037.05 cv
106.741 1028.62 li
160.31 1028.62 li
cp
f
192.58 1117.59 mo
190.673 1117.58 189.13 1116.03 189.14 1114.12 cv
189.147 1112.21 190.699 1110.67 192.606 1110.68 cv
194.519 1110.68 196.058 1112.24 196.051 1114.15 cv
196.044 1116.06 194.491 1117.6 192.58 1117.59 cv
cp
297.931 1086.85 mo
297.931 986.714 li
315.124 967.698 li
514.813 967.698 li
520.644 971.591 li
522.566 968.716 li
515.86 964.241 li
313.587 964.241 li
294.474 985.384 li
294.474 1085.37 li
274.189 1104.69 li
231.031 1104.69 li
215.472 1122.04 li
202.653 1122.04 li
199.008 1117.5 li
198.915 1117.57 li
198.963 1116.1 198.583 1114.27 198.253 1112.77 cv
197.447 1109.12 195.251 1105.99 191.518 1105.98 cv
187.779 1105.97 184.74 1108.98 184.724 1112.72 cv
184.712 1116.45 187.928 1118.29 191.462 1119.51 cv
192.919 1120.01 195.21 1120.53 196.816 1120.29 cv
200.995 1125.5 li
217.015 1125.5 li
232.574 1108.15 li
275.573 1108.15 li
297.931 1086.85 li
cp
f
235.226 1048.75 mo
235.443 1050.65 234.087 1052.36 232.189 1052.59 cv
230.294 1052.81 228.58 1051.45 228.357 1049.55 cv
228.283 1048.92 228.395 1048.32 228.63 1047.78 cv
228.82 1047.66 229.001 1047.51 229.171 1047.35 cv
229.503 1047.03 229.754 1046.65 229.928 1046.25 cv
230.357 1045.97 230.847 1045.78 231.389 1045.72 cv
233.286 1045.5 235.003 1046.85 235.226 1048.75 cv
cp
126.182 1044.58 mo
124.826 1045.92 122.64 1045.91 121.292 1044.56 cv
119.948 1043.2 119.954 1041.01 121.309 1039.67 cv
122.662 1038.32 124.852 1038.33 126.198 1039.68 cv
126.664 1040.15 126.956 1040.72 127.099 1041.32 cv
127.086 1041.44 127.063 1041.56 127.063 1041.68 cv
127.063 1041.96 127.104 1042.23 127.168 1042.49 cv
127.085 1043.25 126.768 1043.99 126.182 1044.58 cv
cp
130.52 1038.22 mo
129.951 1038.22 129.423 1038.37 128.949 1038.62 cv
128.232 1038.09 127.468 1037.59 126.779 1037.15 cv
123.625 1035.14 119.863 1034.49 117.212 1037.12 cv
114.562 1039.76 114.544 1044.04 117.179 1046.69 cv
119.816 1049.34 123.393 1048.36 126.749 1046.72 cv
127.581 1046.31 128.636 1045.7 129.556 1044.98 cv
129.863 1045.07 130.183 1045.14 130.52 1045.14 cv
186.421 1045.14 li
186.807 1045.14 187.191 1045.07 187.557 1044.95 cv
203.45 1039.43 li
216.652 1039.43 li
224.281 1047.28 li
224.602 1047.61 224.974 1047.85 225.37 1048.03 cv
225.622 1049.1 225.994 1050.21 226.334 1051.18 cv
227.573 1054.71 230.13 1057.55 233.835 1057.12 cv
237.548 1056.68 240.209 1053.33 239.773 1049.62 cv
239.339 1045.91 235.926 1044.46 232.27 1043.68 cv
231.585 1043.53 230.726 1043.4 229.846 1043.34 cv
229.69 1043.03 229.499 1042.73 229.241 1042.46 cv
220.597 1033.56 li
219.945 1032.89 219.052 1032.51 218.114 1032.51 cv
202.87 1032.51 li
202.481 1032.51 202.1 1032.58 201.735 1032.7 cv
185.837 1038.22 li
130.52 1038.22 li
cp
f
536.089 974.075 mo
536.089 979.358 531.808 983.642 526.523 983.642 cv
521.241 983.642 516.956 979.358 516.956 974.075 cv
516.956 968.792 521.241 964.511 526.523 964.511 cv
531.808 964.511 536.089 968.792 536.089 974.075 cv
cp
1 1 1 rgb
f
266.655 1006.16 mo
266.655 1011.44 262.37 1015.72 257.089 1015.72 cv
251.805 1015.72 247.523 1011.44 247.523 1006.16 cv
247.523 1000.87 251.805 996.591 257.089 996.591 cv
262.37 996.591 266.655 1000.87 266.655 1006.16 cv
cp
f
207.811 970.153 mo
207.811 975.437 203.527 979.72 198.246 979.72 cv
192.962 979.72 188.681 975.437 188.681 970.153 cv
188.681 964.87 192.962 960.587 198.246 960.587 cv
203.527 960.587 207.811 964.87 207.811 970.153 cv
cp
f
195.495 1004.42 mo
195.495 1009.7 191.212 1013.99 185.929 1013.99 cv
180.648 1013.99 176.362 1009.7 176.362 1004.42 cv
176.362 999.138 180.648 994.852 185.929 994.852 cv
191.212 994.852 195.495 999.138 195.495 1004.42 cv
cp
f
287.182 1046.99 mo
287.182 1052.28 282.9 1056.56 277.616 1056.56 cv
272.335 1056.56 268.05 1052.28 268.05 1046.99 cv
268.05 1041.71 272.335 1037.42 277.616 1037.42 cv
282.9 1037.42 287.182 1041.71 287.182 1046.99 cv
cp
f
258.224 1089.13 mo
258.224 1094.42 253.942 1098.7 248.658 1098.7 cv
243.376 1098.7 239.092 1094.42 239.092 1089.13 cv
239.092 1083.85 243.376 1079.57 248.658 1079.57 cv
253.942 1079.57 258.224 1083.85 258.224 1089.13 cv
cp
f
201.387 1037.42 mo
201.387 1042.71 197.105 1046.99 191.821 1046.99 cv
186.54 1046.99 182.255 1042.71 182.255 1037.42 cv
182.255 1032.14 186.54 1027.86 191.821 1027.86 cv
197.105 1027.86 201.387 1032.14 201.387 1037.42 cv
cp
f
162.055 1067.86 mo
162.055 1073.14 157.773 1077.42 152.489 1077.42 cv
147.208 1077.42 142.921 1073.14 142.921 1067.86 cv
142.921 1062.58 147.208 1058.29 152.489 1058.29 cv
157.773 1058.29 162.055 1062.58 162.055 1067.86 cv
cp
f
173.884 1100.08 mo
173.884 1105.36 169.602 1109.65 164.317 1109.65 cv
159.036 1109.65 154.751 1105.36 154.751 1100.08 cv
154.751 1094.8 159.036 1090.52 164.317 1090.52 cv
169.602 1090.52 173.884 1094.8 173.884 1100.08 cv
cp
f
215.434 1073.29 mo
215.434 1078.57 211.152 1082.85 205.868 1082.85 cv
200.587 1082.85 196.302 1078.57 196.302 1073.29 cv
196.302 1068 200.587 1063.72 205.868 1063.72 cv
211.152 1063.72 215.434 1068 215.434 1073.29 cv
cp
f
975.539 866.838 mo
976.891 868.188 976.891 870.376 975.539 871.727 cv
974.189 873.078 972.002 873.078 970.65 871.727 cv
969.301 870.376 969.301 868.188 970.65 866.838 cv
972.002 865.486 974.189 865.486 975.539 866.838 cv
cp
970.609 175.997 mo
969.26 174.648 969.26 172.459 970.609 171.107 cv
971.963 169.757 974.148 169.757 975.5 171.107 cv
976.852 172.459 976.852 174.648 975.5 175.997 cv
974.148 177.349 971.963 177.349 970.609 175.997 cv
cp
971.113 180.556 mo
971.113 862.313 li
970.016 863.316 968.965 864.933 968.121 866.267 cv
966.117 869.425 965.475 873.19 968.121 875.833 cv
970.76 878.474 975.041 878.474 977.684 875.833 cv
980.324 873.19 979.338 869.612 977.684 866.267 cv
977.025 864.932 975.828 863.033 974.57 862.035 cv
974.57 180.768 li
975.814 179.763 976.994 177.888 977.646 176.567 cv
979.301 173.222 980.283 169.645 977.646 167.002 cv
975.002 164.361 970.719 164.361 968.078 167.002 cv
965.438 169.645 966.076 173.411 968.078 176.567 cv
968.934 177.919 970.002 179.557 971.113 180.556 cv
cp
0 .862745 1 rgb
f
970.305 118.426 mo
968.951 119.773 966.764 119.773 965.414 118.426 cv
964.063 117.074 964.063 114.885 965.414 113.536 cv
966.764 112.185 968.951 112.185 970.305 113.536 cv
971.654 114.885 971.654 117.074 970.305 118.426 cv
cp
972.842 947.541 mo
974.752 947.541 976.299 945.994 976.299 944.083 cv
976.299 923.651 li
991.088 911.029 li
991.857 910.373 992.305 909.41 992.305 908.398 cv
992.305 140.69 li
992.305 139.769 991.934 138.888 991.283 138.239 cv
972.904 119.944 li
972.697 119.737 972.465 119.573 972.225 119.43 cv
972.305 119.28 972.379 119.134 972.447 118.995 cv
974.103 115.648 975.088 112.074 972.447 109.429 cv
969.805 106.788 965.521 106.788 962.881 109.429 cv
960.242 112.074 960.879 115.839 962.881 118.995 cv
964.096 120.913 965.736 123.41 967.332 123.83 cv
967.5 124.196 967.725 124.543 968.025 124.844 cv
985.387 142.125 li
985.387 906.805 li
970.598 919.424 li
969.826 920.081 969.385 921.044 969.385 922.054 cv
969.385 944.083 li
969.385 945.994 970.934 947.541 972.842 947.541 cv
cp
f
985.768 118.426 mo
984.418 117.074 984.418 114.885 985.768 113.536 cv
987.121 112.185 989.309 112.185 990.656 113.536 cv
992.008 114.885 992.008 117.074 990.656 118.426 cv
989.309 119.773 987.121 119.773 985.768 118.426 cv
cp
988.258 944.083 mo
988.258 929.952 li
1002.97 914.969 li
1003.61 914.321 1003.96 913.453 1003.96 912.545 cv
1003.96 137.081 li
1003.96 136.203 1003.63 135.359 1003.03 134.718 cv
990.988 121.884 li
991.73 120.946 992.377 119.854 992.801 118.995 cv
994.459 115.648 995.443 112.074 992.801 109.429 cv
991.637 108.264 990.152 107.614 988.631 107.478 cv
977.16 94.5918 li
974.576 96.8916 li
984.736 108.303 li
984.199 108.602 983.693 108.973 983.236 109.429 cv
980.596 112.074 981.234 115.839 983.236 118.995 cv
983.838 119.941 984.541 121.03 985.291 121.941 cv
984.389 123.253 984.484 125.06 985.617 126.265 cv
997.047 138.448 li
997.047 911.133 li
982.334 926.115 li
981.697 926.761 981.342 927.632 981.342 928.537 cv
981.342 944.083 li
981.342 945.994 982.893 947.541 984.799 947.541 cv
986.713 947.541 988.258 945.994 988.258 944.083 cv
cp
f
1007.4 117.561 mo
1006.05 116.21 1006.05 114.022 1007.4 112.671 cv
1008.75 111.32 1010.94 111.32 1012.29 112.671 cv
1013.64 114.022 1013.64 116.21 1012.29 117.561 cv
1010.94 118.911 1008.75 118.911 1007.4 117.561 cv
cp
1004.83 944.097 mo
1006.74 944.097 1008.29 942.55 1008.29 940.64 cv
1008.29 934.879 li
1018.32 926.224 li
1019.08 925.568 1019.52 924.614 1019.52 923.606 cv
1019.52 134.927 li
1019.52 133.66 1018.83 132.492 1017.71 131.888 cv
1014.8 130.311 li
1013.15 122.335 li
1013.05 121.855 1012.86 121.423 1012.6 121.048 cv
1013.35 120.104 1014 118.999 1014.43 118.132 cv
1016.09 114.785 1017.07 111.209 1014.43 108.565 cv
1012.38 106.52 1009.36 106.065 1006.87 107.188 cv
1005.23 97.6104 li
1001.82 98.1914 li
1003.83 109.951 li
1002.48 112.43 1003.19 115.49 1004.87 118.132 cv
1005.46 119.079 1006.17 120.167 1006.92 121.078 cv
1006.41 121.825 1006.18 122.771 1006.38 123.736 cv
1008.36 133.285 li
1008.56 134.28 1009.2 135.14 1010.09 135.622 cv
1012.61 136.986 li
1012.61 922.019 li
1002.57 930.674 li
1001.81 931.33 1001.37 932.284 1001.37 933.29 cv
1001.37 940.64 li
1001.37 942.55 1002.92 944.097 1004.83 944.097 cv
cp
f
1025.36 127.73 mo
1024.01 126.381 1024.01 124.191 1025.36 122.842 cv
1026.71 121.491 1028.9 121.491 1030.25 122.842 cv
1031.6 124.191 1031.6 126.381 1030.25 127.73 cv
1028.9 129.081 1026.71 129.081 1025.36 127.73 cv
cp
1027.56 944.097 mo
1029.47 944.097 1031.01 942.55 1031.01 940.64 cv
1031.01 132.583 li
1031.01 132.047 1030.88 131.545 1030.66 131.092 cv
1031.37 130.178 1031.99 129.131 1032.4 128.302 cv
1034.05 124.955 1035.04 121.379 1032.4 118.735 cv
1029.76 116.095 1025.47 116.095 1022.83 118.735 cv
1020.19 121.379 1020.83 125.145 1022.83 128.302 cv
1023.35 129.117 1023.94 130.037 1024.58 130.858 cv
1024.28 131.368 1024.1 131.952 1024.1 132.583 cv
1024.1 940.64 li
1024.1 942.55 1025.65 944.097 1027.56 944.097 cv
cp
f
1041.97 118.426 mo
1040.62 117.074 1040.62 114.885 1041.97 113.536 cv
1043.32 112.185 1045.51 112.185 1046.86 113.536 cv
1048.21 114.885 1048.21 117.074 1046.86 118.426 cv
1045.51 119.773 1043.32 119.773 1041.97 118.426 cv
cp
1044.16 948.995 mo
1046.07 948.995 1047.62 947.446 1047.62 945.538 cv
1047.62 126.13 li
1047.62 124.878 1046.95 123.789 1045.95 123.183 cv
1047.19 122.174 1048.36 120.31 1049.01 118.995 cv
1050.66 115.648 1051.65 112.074 1049.01 109.429 cv
1046.64 107.064 1042.96 106.823 1040.32 108.692 cv
1037.24 104.793 li
1037.24 82.6279 li
1033.79 82.6279 li
1033.79 105.995 li
1038.1 111.46 li
1037.18 113.813 1037.91 116.581 1039.44 118.995 cv
1040.32 120.388 1041.43 122.085 1042.58 123.073 cv
1041.47 123.65 1040.71 124.797 1040.71 126.13 cv
1040.71 945.538 li
1040.71 947.446 1042.26 948.995 1044.16 948.995 cv
cp
f
1059.6 133.303 mo
1057.7 133.141 1056.29 131.47 1056.45 129.565 cv
1056.61 127.66 1058.28 126.248 1060.19 126.41 cv
1062.09 126.572 1063.5 128.247 1063.34 130.148 cv
1063.18 132.054 1061.5 133.462 1059.6 133.303 cv
cp
1058.19 945.538 mo
1058.19 136.041 li
1058.19 135.93 1058.17 135.825 1058.16 135.718 cv
1059.03 135.63 1059.87 135.474 1060.54 135.308 cv
1064.17 134.416 1067.54 132.864 1067.86 129.139 cv
1068.11 126.251 1066.49 123.644 1064.02 122.467 cv
1064.04 122.467 li
1064.04 99.0557 li
1060.58 99.0557 li
1060.58 121.839 li
1057.48 122.13 1055.39 124.799 1054.38 127.997 cv
1053.9 129.527 1053.33 131.405 1053.29 132.905 cv
1052.1 133.453 1051.27 134.648 1051.27 136.041 cv
1051.27 945.538 li
1051.27 947.446 1052.82 948.995 1054.73 948.995 cv
1056.64 948.995 1058.19 947.446 1058.19 945.538 cv
cp
f
1078.96 118.077 mo
1077.62 116.727 1077.62 114.538 1078.96 113.188 cv
1080.31 111.836 1082.5 111.836 1083.85 113.188 cv
1085.2 114.538 1085.2 116.727 1083.85 118.077 cv
1082.5 119.428 1080.31 119.428 1078.96 118.077 cv
cp
1065.77 947.541 mo
1067.68 947.541 1069.23 945.994 1069.23 944.083 cv
1069.23 155.023 li
1083.71 141.322 li
1084.39 140.67 1084.79 139.762 1084.79 138.811 cv
1084.79 123.898 li
1084.79 123.08 1084.49 122.338 1084.01 121.746 cv
1084.83 120.766 1085.54 119.571 1086 118.648 cv
1087.65 115.302 1088.64 111.726 1086 109.081 cv
1083.36 106.439 1079.07 106.439 1076.43 109.081 cv
1073.79 111.726 1074.43 115.49 1076.43 118.648 cv
1077.07 119.655 1077.82 120.82 1078.63 121.765 cv
1078.16 122.354 1077.87 123.089 1077.87 123.898 cv
1077.87 137.32 li
1063.39 151.02 li
1062.7 151.675 1062.31 152.584 1062.31 153.532 cv
1062.31 944.083 li
1062.31 945.994 1063.86 947.541 1065.77 947.541 cv
cp
f
1102.17 118.542 mo
1101.25 118.463 1100.45 118.024 1099.88 117.381 cv
1099.83 117.302 1099.76 117.228 1099.7 117.151 cv
1099.22 116.498 1098.95 115.68 1099.02 114.804 cv
1099.11 113.762 1099.66 112.879 1100.45 112.31 cv
1100.78 112.31 li
1100.78 112.079 li
1101.36 111.752 1102.04 111.59 1102.76 111.65 cv
1104.66 111.813 1106.07 113.487 1105.91 115.389 cv
1105.75 117.293 1104.08 118.702 1102.17 118.542 cv
cp
1077.01 944.083 mo
1077.01 162.269 li
1093.14 147.891 li
1093.88 147.231 1094.29 146.293 1094.29 145.307 cv
1094.29 127.464 li
1099.58 121.623 li
1099.75 121.433 1099.89 121.227 1100.01 121.014 cv
1101.12 120.956 1102.26 120.761 1103.12 120.549 cv
1106.75 119.657 1110.12 118.104 1110.43 114.38 cv
1110.75 110.658 1107.98 107.386 1104.26 107.069 cv
1102.94 106.957 1101.78 107.26 1100.78 107.849 cv
1100.78 99.0557 li
1097.32 99.0557 li
1097.32 112.227 li
1097.19 112.557 1097.06 112.894 1096.95 113.238 cv
1096.69 114.075 1096.4 115.018 1096.19 115.945 cv
1095.54 116.104 1094.93 116.451 1094.45 116.982 cv
1088.28 123.811 li
1087.7 124.449 1087.38 125.272 1087.38 126.13 cv
1087.38 143.757 li
1071.25 158.135 li
1070.51 158.793 1070.09 159.732 1070.09 160.718 cv
1070.09 944.083 li
1070.09 945.994 1071.64 947.541 1073.55 947.541 cv
1075.46 947.541 1077.01 945.994 1077.01 944.083 cv
cp
f
970.793 97.9004 mo
976.076 97.9004 980.361 93.6201 980.361 88.335 cv
980.361 83.0537 976.076 78.7686 970.793 78.7686 cv
965.512 78.7686 961.228 83.0537 961.228 88.335 cv
961.228 93.6201 965.512 97.9004 970.793 97.9004 cv
cp
1 1 1 rgb
f
1035.51 83.5508 mo
1040.8 83.5508 1045.08 79.2686 1045.08 73.9824 cv
1045.08 68.7021 1040.8 64.417 1035.51 64.417 cv
1030.23 64.417 1025.95 68.7021 1025.95 73.9824 cv
1025.95 79.2686 1030.23 83.5508 1035.51 83.5508 cv
cp
f
1004.83 99.0557 mo
1010.11 99.0557 1014.39 94.7725 1014.39 89.4902 cv
1014.39 84.2041 1010.11 79.9238 1004.83 79.9238 cv
999.545 79.9238 995.26 84.2041 995.26 89.4902 cv
995.26 94.7725 999.545 99.0557 1004.83 99.0557 cv
cp
f
1065.77 101.76 mo
1071.05 101.76 1075.34 97.4785 1075.34 92.1943 cv
1075.34 86.9131 1071.05 82.6279 1065.77 82.6279 cv
1060.49 82.6279 1056.2 86.9131 1056.2 92.1943 cv
1056.2 97.4785 1060.49 101.76 1065.77 101.76 cv
cp
f
1099.66 101.76 mo
1104.95 101.76 1109.23 97.4785 1109.23 92.1943 cv
1109.23 86.9131 1104.95 82.6279 1099.66 82.6279 cv
1094.38 82.6279 1090.1 86.9131 1090.1 92.1943 cv
1090.1 97.4785 1094.38 101.76 1099.66 101.76 cv
cp
f
544.11 333.988 mo
542.735 335.314 540.548 335.274 539.222 333.903 cv
537.894 332.527 537.933 330.34 539.308 329.015 cv
540.681 327.685 542.872 327.725 544.194 329.099 cv
545.522 330.473 545.485 332.661 544.11 333.988 cv
cp
501.665 443.959 mo
623.197 564.911 li
625.635 562.46 li
505.124 442.522 li
505.124 376.954 li
521.942 361.12 li
537.56 361.12 li
544.022 354.319 li
544.022 338.07 li
544.976 337.091 545.884 335.743 546.632 334.603 cv
548.686 331.482 549.397 327.725 546.802 325.036 cv
544.206 322.35 539.923 322.276 537.235 324.871 cv
534.548 327.466 535.47 331.059 537.069 334.438 cv
537.782 335.944 539.161 338.181 540.565 339.051 cv
540.565 352.938 li
536.077 357.662 li
520.573 357.662 li
501.665 375.457 li
501.665 443.959 li
cp
0 .862745 1 rgb
f
523.716 376.524 mo
524.048 374.644 525.841 373.388 527.722 373.721 cv
529.601 374.053 530.856 375.846 530.526 377.727 cv
530.194 379.607 528.403 380.861 526.521 380.529 cv
524.64 380.2 523.386 378.405 523.716 376.524 cv
cp
512.259 444.467 mo
631.842 563.388 li
634.279 560.937 li
515.206 442.522 li
515.206 391.211 li
523.302 382.87 li
524.628 383.043 526.185 382.994 527.505 382.933 cv
531.237 382.761 534.692 381.123 535.343 377.446 cv
535.991 373.766 533.534 370.259 529.854 369.61 cv
526.177 368.961 523.811 371.821 522.019 375.096 cv
521.171 376.647 520.112 379.269 520.386 380.91 cv
511.749 389.81 li
511.749 443.961 li
512.259 444.467 li
cp
f
525.519 437.627 mo
524.153 436.29 524.134 434.101 525.47 432.736 cv
526.806 431.372 528.995 431.349 530.36 432.685 cv
531.724 434.023 531.745 436.211 530.407 437.575 cv
529.073 438.94 526.882 438.963 525.519 437.627 cv
cp
526.157 449.723 mo
637.531 560.518 li
688.244 560.518 li
692.635 564.907 li
695.08 562.463 li
689.676 557.06 li
638.961 557.06 li
529.614 448.286 li
529.614 442.428 li
530.841 441.469 532.021 439.619 532.948 438.122 cv
534.913 434.945 535.517 431.168 532.849 428.555 cv
530.181 425.939 525.897 425.984 523.284 428.653 cv
520.671 431.324 521.692 434.889 523.382 438.22 cv
523.987 439.412 525.03 441.059 526.157 442.095 cv
526.157 449.723 li
cp
f
526.724 407.645 mo
525.386 409.008 523.198 409.032 521.835 407.696 cv
520.47 406.359 520.446 404.17 521.784 402.806 cv
523.122 401.441 525.31 401.418 526.673 402.755 cv
528.038 404.092 528.06 406.28 526.724 407.645 cv
cp
691.963 554.177 mo
702.113 564.877 li
704.621 562.496 li
693.449 550.718 li
640.984 550.718 li
544.886 453.767 li
544.886 427.293 li
527.11 411.315 li
527.899 410.365 528.638 409.198 529.263 408.191 cv
531.229 405.014 531.833 401.237 529.165 398.623 cv
526.495 396.009 522.214 396.054 519.597 398.723 cv
516.983 401.394 518.005 404.958 519.698 408.289 cv
520.55 409.97 522.274 412.553 523.872 413.053 cv
541.427 428.837 li
541.427 455.19 li
639.541 554.177 li
691.963 554.177 li
cp
f
554.341 441.393 mo
552.977 440.057 552.954 437.867 554.292 436.502 cv
555.626 435.138 557.817 435.115 559.181 436.45 cv
560.546 437.787 560.565 439.977 559.229 441.341 cv
557.894 442.704 555.704 442.728 554.341 441.393 cv
cp
693.15 548.416 mo
709.934 564.917 li
712.357 562.452 li
694.566 544.957 li
644.435 544.957 li
558.716 459.523 li
558.716 446.121 li
558.53 446.121 li
559.722 445.143 560.866 443.346 561.771 441.888 cv
563.735 438.71 564.339 434.935 561.671 432.319 cv
559.001 429.704 554.718 429.75 552.104 432.419 cv
549.489 435.09 550.513 438.654 552.204 441.985 cv
552.862 443.282 554.04 445.119 555.278 446.121 cv
555.259 446.121 li
555.259 460.959 li
555.767 461.467 li
643.006 548.416 li
693.15 548.416 li
cp
f
554.548 378.243 mo
554.88 376.362 556.671 375.106 558.554 375.436 cv
560.435 375.77 561.688 377.564 561.356 379.443 cv
561.024 381.326 559.233 382.581 557.351 382.248 cv
555.47 381.917 554.216 380.124 554.548 378.243 cv
cp
697.467 541.787 mo
719.146 563.388 li
721.588 560.937 li
698.894 538.33 li
646.006 538.33 li
574.997 466.733 li
574.997 427.428 li
567.87 419.065 li
548.532 419.065 li
543.733 413.793 li
543.733 395.054 li
554.979 384.878 li
554.776 384.654 li
555.946 384.744 557.226 384.703 558.337 384.652 cv
562.067 384.478 565.524 382.842 566.173 379.164 cv
566.821 375.484 564.366 371.976 560.686 371.327 cv
557.007 370.679 554.642 373.537 552.851 376.815 cv
551.856 378.633 550.563 381.927 551.479 383.38 cv
540.274 393.52 li
540.274 415.134 li
547.003 422.522 li
566.274 422.522 li
571.54 428.701 li
571.54 468.158 li
644.565 541.787 li
697.467 541.787 li
cp
f
564.446 400.995 mo
564.446 402.906 562.897 404.453 560.987 404.453 cv
559.075 404.453 557.53 402.906 557.53 400.995 cv
557.53 399.086 559.075 397.537 560.987 397.537 cv
562.897 397.537 564.446 399.086 564.446 400.995 cv
cp
701.207 536.6 mo
727.783 563.381 li
730.238 560.942 li
702.644 533.143 li
650.209 533.143 li
581.479 463.278 li
581.479 416.809 li
567.321 404.45 li
567.372 402.976 566.979 401.125 566.642 399.611 cv
565.823 395.964 563.61 392.844 559.876 392.844 cv
556.138 392.844 553.11 395.873 553.11 399.611 cv
553.11 403.346 556.335 405.176 559.876 406.374 cv
561.311 406.859 563.55 407.359 565.151 407.147 cv
578.022 418.382 li
578.022 464.696 li
648.762 536.6 li
701.207 536.6 li
cp
f
585.901 410.433 mo
584.573 409.06 584.612 406.87 585.987 405.544 cv
587.362 404.217 589.552 404.254 590.876 405.628 cv
592.202 407.005 592.163 409.192 590.79 410.518 cv
589.417 411.845 587.227 411.808 585.901 410.433 cv
cp
704.371 529.973 mo
737.289 563.374 li
739.75 560.95 li
705.82 526.514 li
652.514 526.514 li
590.411 463.282 li
590.411 414.885 li
591.47 413.895 592.489 412.389 593.313 411.134 cv
595.368 408.014 596.077 404.258 593.481 401.567 cv
590.886 398.882 586.604 398.808 583.915 401.402 cv
581.227 403.997 582.149 407.59 583.749 410.967 cv
584.413 412.37 585.653 414.405 586.954 415.383 cv
586.954 464.693 li
587.448 465.2 li
651.063 529.973 li
704.371 529.973 li
cp
f
592.911 377.973 mo
592.911 379.884 591.362 381.431 589.452 381.431 cv
587.542 381.431 585.995 379.884 585.995 377.973 cv
585.995 376.064 587.542 374.516 589.452 374.516 cv
591.362 374.516 592.911 376.064 592.911 377.973 cv
cp
707.836 524.21 mo
746.805 563.381 li
749.256 560.942 li
709.273 520.752 li
656.824 520.752 li
605.398 469.516 li
605.398 391.22 li
595.743 381.843 li
595.903 380.313 595.479 378.253 595.104 376.587 cv
594.288 372.941 592.077 369.822 588.343 369.822 cv
584.604 369.822 581.575 372.851 581.575 376.587 cv
581.575 380.323 584.802 382.153 588.343 383.351 cv
589.649 383.793 591.62 384.245 593.173 384.163 cv
601.941 392.682 li
601.941 470.95 li
655.396 524.21 li
707.836 524.21 li
cp
f
617.063 439.888 mo
615.699 438.553 615.674 436.363 617.012 434.999 cv
618.348 433.635 620.537 433.611 621.9 434.948 cv
623.266 436.285 623.287 438.473 621.951 439.838 cv
620.615 441.202 618.426 441.225 617.063 439.888 cv
cp
710.43 517.87 mo
756.029 563.385 li
758.471 560.94 li
711.861 514.412 li
659.426 514.412 li
620.668 475.093 li
620.668 445.022 li
622.065 444.229 623.44 442.08 624.49 440.385 cv
626.455 437.207 627.06 433.432 624.393 430.815 cv
621.723 428.201 617.438 428.247 614.824 430.916 cv
612.209 433.586 613.232 437.149 614.924 440.482 cv
615.56 441.738 616.685 443.498 617.881 444.518 cv
617.211 444.518 li
617.211 476.511 li
657.98 517.87 li
710.43 517.87 li
cp
f
913.699 1000.9 mo
915.609 1000.9 917.156 1002.45 917.156 1004.36 cv
917.156 1006.27 915.609 1007.81 913.699 1007.81 cv
911.789 1007.81 910.24 1006.27 910.24 1004.36 cv
910.24 1002.45 911.789 1000.9 913.699 1000.9 cv
cp
823.377 983.615 mo
889.654 983.615 li
907.564 1000.03 li
907.293 1001.64 907.82 1003.98 908.322 1005.47 cv
909.518 1009.01 911.35 1012.23 915.084 1012.23 cv
918.82 1012.23 921.85 1009.21 921.85 1005.47 cv
921.85 1001.73 918.73 999.521 915.084 998.703 cv
913.252 998.291 910.93 997.806 909.377 998.121 cv
909.935 997.511 li
890.998 980.158 li
821.824 980.158 li
800.551 1004.07 li
700.127 1004.07 li
700.127 1007.53 li
802.103 1007.53 li
823.377 983.615 li
cp
f
880.957 999.169 mo
882.865 999.169 884.414 1000.72 884.414 1002.63 cv
884.414 1004.54 882.865 1006.09 880.957 1006.09 cv
879.045 1006.09 877.498 1004.54 877.498 1002.63 cv
877.498 1000.72 879.045 999.169 880.957 999.169 cv
cp
705.266 1015.89 mo
818.076 1015.89 li
842.049 992.259 li
868.055 992.259 li
874.82 998.3 li
874.549 999.907 875.076 1002.26 875.578 1003.74 cv
876.775 1007.28 878.605 1010.5 882.342 1010.5 cv
886.078 1010.5 889.107 1007.48 889.107 1003.74 cv
889.107 1000 885.988 997.791 882.342 996.975 cv
880.914 996.653 879.197 996.296 877.769 996.298 cv
869.375 988.801 li
840.631 988.801 li
816.658 1012.43 li
703.68 1012.43 li
698.816 1018.09 li
701.439 1020.35 li
705.266 1015.89 li
cp
f
724.504 1043.92 mo
865.418 1043.84 li
883.932 1061.95 li
886.35 1059.47 li
866.826 1040.38 li
723.037 1040.46 li
698.885 1065.4 li
701.369 1067.8 li
724.504 1043.92 li
cp
f
939.941 1098.12 mo
940.34 1096.25 942.176 1095.06 944.043 1095.46 cv
945.91 1095.85 947.103 1097.69 946.703 1099.56 cv
946.309 1101.42 944.471 1102.61 942.605 1102.22 cv
940.738 1101.82 939.545 1099.98 939.941 1098.12 cv
cp
873.037 1064.52 mo
859.672 1050.12 li
729.254 1050.12 li
698.916 1079.85 li
701.338 1082.32 li
730.666 1053.58 li
858.162 1053.58 li
869.58 1065.88 li
869.58 1081.79 li
898.531 1111.26 li
932.824 1111.26 li
939.576 1104.49 li
940.834 1104.67 942.275 1104.67 943.506 1104.65 cv
947.238 1104.61 950.75 1103.1 951.527 1099.44 cv
952.307 1095.79 949.973 1092.2 946.32 1091.42 cv
942.666 1090.64 940.203 1093.42 938.297 1096.63 cv
937.338 1098.24 936.096 1101.05 936.508 1102.67 cv
931.389 1107.8 li
899.984 1107.8 li
873.037 1080.37 li
873.037 1064.52 li
cp
f
851.408 1064.44 mo
852.76 1063.1 854.949 1063.1 856.299 1064.44 cv
857.648 1065.79 857.648 1067.98 856.299 1069.33 cv
854.949 1070.68 852.76 1070.68 851.408 1069.33 cv
850.057 1067.98 850.057 1065.79 851.408 1064.44 cv
cp
727.935 1068.33 mo
846.605 1068.37 li
847.603 1069.62 849.502 1070.82 850.836 1071.48 cv
854.185 1073.13 857.762 1074.12 860.404 1071.48 cv
863.047 1068.84 863.045 1064.55 860.402 1061.91 cv
857.762 1059.27 853.994 1059.91 850.836 1061.91 cv
849.504 1062.76 847.887 1063.81 846.883 1064.91 cv
726.521 1064.87 li
698.914 1092.03 li
701.34 1094.49 li
727.935 1068.33 li
cp
f
937.185 1125.5 mo
938.535 1124.15 940.725 1124.15 942.074 1125.5 cv
943.424 1126.85 943.424 1129.04 942.074 1130.38 cv
940.725 1131.74 938.535 1131.74 937.185 1130.38 cv
935.834 1129.04 935.834 1126.85 937.185 1125.5 cv
cp
709.697 1103.95 mo
707.785 1103.95 706.238 1102.4 706.238 1100.49 cv
706.238 1098.58 707.785 1097.03 709.697 1097.03 cv
711.607 1097.03 713.154 1098.58 713.154 1100.49 cv
713.154 1102.4 711.607 1103.95 709.697 1103.95 cv
cp
727.422 1080.72 mo
712.785 1094.3 li
711.355 1094.34 709.721 1094.73 708.586 1095.11 cv
705.047 1096.31 701.82 1098.14 701.82 1101.88 cv
701.82 1105.61 704.85 1108.64 708.586 1108.64 cv
712.32 1108.64 714.531 1105.52 715.35 1101.88 cv
715.768 1100.02 716.258 1097.66 715.914 1096.11 cv
728.779 1084.18 li
791.957 1084.18 li
817.172 1107.52 li
841.131 1107.52 li
863.102 1129.42 li
932.381 1129.42 li
933.379 1130.67 935.279 1131.87 936.611 1132.53 cv
939.961 1134.18 943.537 1135.17 946.182 1132.53 cv
948.82 1129.89 948.82 1125.6 946.178 1122.96 cv
943.537 1120.32 939.769 1120.96 936.611 1122.96 cv
935.277 1123.81 933.66 1124.86 932.658 1125.96 cv
864.531 1125.96 li
842.56 1104.06 li
818.525 1104.06 li
793.31 1080.72 li
727.422 1080.72 li
cp
f
824.217 1087.1 mo
825.568 1085.75 827.756 1085.75 829.107 1087.1 cv
830.459 1088.45 830.459 1090.64 829.107 1091.99 cv
827.756 1093.34 825.568 1093.34 824.217 1091.99 cv
822.867 1090.64 822.867 1088.45 824.217 1087.1 cv
cp
829.68 1094.52 mo
831.777 1093.19 834.582 1091.35 834.582 1089.62 cv
834.582 1087.89 831.563 1085.89 829.68 1084.95 cv
826.332 1083.3 822.756 1082.31 820.111 1084.95 cv
817.471 1087.6 817.471 1091.88 820.115 1094.52 cv
822.756 1097.16 826.523 1096.52 829.68 1094.52 cv
cp
f
883.1 1036.74 mo
881.75 1038.09 879.563 1038.09 878.211 1036.74 cv
876.859 1035.39 876.859 1033.2 878.211 1031.85 cv
879.563 1030.5 881.75 1030.5 883.1 1031.85 cv
884.451 1033.2 884.451 1035.39 883.1 1036.74 cv
cp
877.639 1029.32 mo
876.305 1030.16 874.689 1031.21 873.688 1032.31 cv
715.568 1032.31 li
698.904 1048.95 li
701.35 1051.4 li
717 1035.77 li
873.408 1035.77 li
874.406 1037.03 876.305 1038.22 877.639 1038.88 cv
880.986 1040.54 884.563 1041.52 887.207 1038.88 cv
889.848 1036.24 889.848 1031.96 887.203 1029.32 cv
884.563 1026.67 880.795 1027.32 877.639 1029.32 cv
cp
f
830.512 1115.41 mo
831.861 1114.06 834.051 1114.06 835.4 1115.41 cv
836.75 1116.76 836.75 1118.95 835.4 1120.3 cv
834.051 1121.65 831.861 1121.65 830.512 1120.3 cv
829.158 1118.95 829.158 1116.76 830.512 1115.41 cv
cp
729.193 1103.43 mo
727.283 1103.43 725.736 1101.88 725.736 1099.97 cv
725.736 1098.06 727.283 1096.51 729.193 1096.51 cv
731.103 1096.51 732.652 1098.06 732.652 1099.97 cv
732.652 1101.88 731.103 1103.43 729.193 1103.43 cv
cp
839.508 1122.44 mo
842.148 1119.8 842.146 1115.52 839.504 1112.88 cv
836.863 1110.24 833.096 1110.88 829.938 1112.88 cv
828.49 1113.8 826.703 1114.96 825.736 1116.16 cv
800.713 1116.16 li
768.248 1086.48 li
740.682 1086.48 li
732.734 1093.76 li
731.213 1093.73 729.336 1094.17 728.08 1094.59 cv
724.541 1095.79 721.316 1097.62 721.316 1101.35 cv
721.316 1105.09 724.346 1108.12 728.08 1108.12 cv
731.816 1108.12 734.029 1105 734.848 1101.35 cv
735.232 1099.63 735.674 1097.49 735.467 1095.95 cv
742.025 1089.94 li
766.904 1089.94 li
799.367 1119.62 li
825.953 1119.62 li
826.994 1120.77 828.707 1121.84 829.938 1122.44 cv
833.287 1124.1 836.863 1125.09 839.508 1122.44 cv
cp
f
859.969 1005.26 mo
859.572 1007.13 857.734 1008.32 855.867 1007.93 cv
854 1007.53 852.809 1005.69 853.205 1003.83 cv
853.602 1001.96 855.439 1000.77 857.309 1001.16 cv
859.176 1001.56 860.365 1003.4 859.969 1005.26 cv
cp
859.582 997.13 mo
855.93 996.351 853.467 999.125 851.559 1002.34 cv
850.791 1003.63 849.848 1005.7 849.711 1007.3 cv
832.912 1021.94 li
710.064 1021.94 li
698.869 1033.83 li
701.385 1036.2 li
711.557 1025.4 li
834.209 1025.4 li
851.863 1010.01 li
853.297 1010.38 855.205 1010.38 856.769 1010.36 cv
860.504 1010.32 864.014 1008.81 864.791 1005.15 cv
865.57 1001.5 863.24 997.908 859.582 997.13 cv
cp
f
911.281 1035.16 mo
911.678 1033.29 913.514 1032.09 915.383 1032.49 cv
917.252 1032.89 918.441 1034.73 918.045 1036.59 cv
917.648 1038.46 915.81 1039.65 913.943 1039.25 cv
912.076 1038.86 910.885 1037.02 911.281 1035.16 cv
cp
897.33 1055.56 mo
910.953 1041.53 li
912.201 1041.71 913.627 1041.71 914.846 1041.69 cv
918.58 1041.65 922.09 1040.14 922.869 1036.48 cv
923.646 1032.83 921.314 1029.24 917.658 1028.46 cv
914.006 1027.68 911.543 1030.46 909.635 1033.67 cv
908.67 1035.29 907.42 1038.14 907.865 1039.75 cv
894.848 1053.15 li
897.33 1055.56 li
cp
f
820.594 996.22 mo
820.594 1001.47 816.338 1005.73 811.086 1005.73 cv
805.834 1005.73 801.576 1001.47 801.576 996.22 cv
801.576 990.967 805.834 986.71 811.086 986.71 cv
816.338 986.71 820.594 990.967 820.594 996.22 cv
1 1 1 rgb
f
852.291 1019.22 mo
852.291 1024.47 848.033 1028.73 842.783 1028.73 cv
837.529 1028.73 833.273 1024.47 833.273 1019.22 cv
833.273 1013.97 837.529 1009.71 842.783 1009.71 cv
848.033 1009.71 852.291 1013.97 852.291 1019.22 cv
f
900.123 1059.2 mo
900.123 1064.45 895.865 1068.71 890.613 1068.71 cv
885.361 1068.71 881.105 1064.45 881.105 1059.2 cv
881.105 1053.95 885.361 1049.69 890.613 1049.69 cv
895.865 1049.69 900.123 1053.95 900.123 1059.2 cv
f
804.125 1111.95 mo
804.125 1117.21 799.867 1121.46 794.615 1121.46 cv
789.363 1121.46 785.107 1117.21 785.107 1111.95 cv
785.107 1106.7 789.363 1102.45 794.615 1102.45 cv
799.867 1102.45 804.125 1106.7 804.125 1111.95 cv
f
927.631 1088.34 mo
927.631 1093.6 923.375 1097.85 918.121 1097.85 cv
912.869 1097.85 908.613 1093.6 908.613 1088.34 cv
908.613 1083.09 912.869 1078.83 918.121 1078.83 cv
923.375 1078.83 927.631 1083.09 927.631 1088.34 cv
f
852.939 1091.06 mo
852.939 1096.31 848.682 1100.57 843.432 1100.57 cv
838.178 1100.57 833.922 1096.31 833.922 1091.06 cv
833.922 1085.81 838.178 1081.55 843.432 1081.55 cv
848.682 1081.55 852.939 1085.81 852.939 1091.06 cv
f
900.123 1099.59 mo
900.123 1104.84 895.865 1109.1 890.613 1109.1 cv
885.361 1109.1 881.105 1104.84 881.105 1099.59 cv
881.105 1094.34 885.361 1090.08 890.613 1090.08 cv
895.865 1090.08 900.123 1094.34 900.123 1099.59 cv
f
100.173 585.882 mo
98.2627 585.882 96.7158 584.335 96.7158 582.423 cv
96.7158 580.513 98.2627 578.966 100.173 578.966 cv
102.085 578.966 103.632 580.513 103.632 582.423 cv
103.632 584.335 102.085 585.882 100.173 585.882 cv
cp
412.792 807.519 mo
402.753 796.442 li
298.969 796.442 li
218.294 715.981 li
218.294 600.229 li
208.352 588.56 li
208.352 578.196 li
198.79 566.718 li
114.278 566.718 li
104.663 576.331 li
103.056 575.989 100.599 576.525 99.0625 577.048 cv
95.5234 578.243 92.2979 580.075 92.2979 583.812 cv
92.2979 587.544 95.3262 590.575 99.0625 590.575 cv
102.798 590.575 105.009 587.458 105.826 583.812 cv
106.136 582.433 106.479 580.783 106.501 579.385 cv
115.71 570.177 li
197.169 570.177 li
204.895 579.446 li
204.895 589.831 li
214.836 601.501 li
214.836 717.417 li
297.54 799.899 li
401.22 799.899 li
409.335 808.851 li
409.335 860.448 li
419.315 871.032 li
421.83 868.659 li
412.792 859.077 li
412.792 807.519 li
cp
0 .862745 1 rgb
f
218.638 588.083 mo
217.264 586.757 217.227 584.567 218.554 583.192 cv
219.879 581.821 222.067 581.782 223.442 583.108 cv
224.817 584.437 224.854 586.624 223.528 587.997 cv
222.2 589.37 220.013 589.409 218.638 588.083 cv
cp
418.843 805.538 mo
406.685 791.04 li
308.045 791.04 li
222.833 706.183 li
222.833 592.652 li
224 591.6 225.077 589.805 225.683 588.53 cv
227.278 585.155 228.201 581.562 225.514 578.968 cv
222.825 576.372 218.544 576.446 215.947 579.132 cv
213.352 581.821 214.061 585.577 216.116 588.7 cv
217.033 590.094 218.189 591.8 219.374 592.762 cv
219.374 707.62 li
306.616 794.497 li
405.069 794.497 li
415.386 806.796 li
415.386 856.567 li
429.265 871.044 li
431.762 868.649 li
418.843 855.177 li
418.843 805.538 li
cp
f
437.231 848.346 mo
435.638 849.403 433.494 848.968 432.438 847.374 cv
431.384 845.782 431.819 843.637 433.412 842.581 cv
435.004 841.53 437.147 841.964 438.204 843.553 cv
439.259 845.148 438.823 847.292 437.231 848.346 cv
cp
253.901 556.899 mo
252.014 556.608 250.72 554.843 251.011 552.954 cv
251.3 551.067 253.063 549.774 254.951 550.063 cv
256.841 550.352 258.136 552.118 257.845 554.009 cv
257.555 555.894 255.788 557.188 253.901 556.899 cv
cp
409.616 778.505 mo
326.528 778.505 li
259.787 711.372 li
259.787 559.37 li
259.526 559.37 li
260.395 557.948 260.225 554.993 259.911 553.202 cv
259.267 549.521 257.946 546.053 254.253 545.485 cv
250.561 544.917 247.107 547.45 246.536 551.146 cv
245.97 554.837 248.718 557.497 252.196 558.858 cv
253.468 559.357 254.983 559.923 256.329 560.172 cv
256.329 712.8 li
325.089 781.962 li
408.188 781.962 li
435.267 808.901 li
435.267 838.094 li
433.851 838.833 432.325 840.435 431.423 841.596 cv
429.134 844.55 427.457 847.86 429.524 850.971 cv
431.585 854.087 435.782 854.938 438.897 852.876 cv
440.869 851.567 441.638 849.555 441.601 847.37 cv
443.495 849.821 li
454.718 849.821 li
454.718 846.362 li
445.194 846.362 li
438.725 837.991 li
438.725 807.468 li
409.616 778.505 li
cp
f
307.972 587.753 mo
308.369 585.884 310.204 584.692 312.075 585.091 cv
313.94 585.485 315.133 587.325 314.735 589.192 cv
314.339 591.06 312.501 592.253 310.634 591.854 cv
308.767 591.456 307.573 589.62 307.972 587.753 cv
cp
493.458 833.829 mo
429.058 770.724 li
335.708 770.724 li
284.424 719.653 li
284.424 615.278 li
306.384 593.86 li
307.843 594.297 309.876 594.31 311.535 594.29 cv
315.27 594.247 318.781 592.735 319.558 589.083 cv
320.336 585.428 318.005 581.837 314.35 581.055 cv
310.696 580.278 308.232 583.053 306.325 586.267 cv
305.618 587.458 304.763 589.305 304.524 590.844 cv
280.966 613.823 li
280.966 721.091 li
334.279 774.183 li
427.645 774.183 li
492.048 837.286 li
615.576 837.286 li
621.553 844.198 li
621.553 869.846 li
625.012 869.846 li
625.012 842.909 li
617.156 833.829 li
493.458 833.829 li
cp
f
339.929 611.396 mo
341.777 610.913 343.664 612.023 344.143 613.874 cv
344.623 615.721 343.513 617.608 341.663 618.089 cv
339.814 618.567 337.929 617.456 337.45 615.608 cv
336.97 613.76 338.079 611.874 339.929 611.396 cv
cp
350.718 756.894 mo
438.023 756.894 li
469.574 787.581 li
476.328 787.581 li
476.328 784.124 li
470.98 784.124 li
439.428 753.437 li
352.116 753.437 li
344.502 746.075 li
344.502 700.409 li
327.537 683.843 li
327.537 632.833 li
338.883 624.12 li
338.883 621.646 li
340.376 621.308 342.102 620.398 343.222 619.667 cv
346.349 617.62 349.009 615.038 348.073 611.423 cv
347.136 607.805 343.444 605.634 339.829 606.569 cv
336.21 607.509 334.854 611.081 334.977 614.815 cv
335.029 616.447 335.122 618.447 335.6 619.88 cv
335.426 619.88 li
335.426 622.413 li
324.079 631.132 li
324.079 685.298 li
341.044 701.866 li
341.044 747.546 li
350.718 756.894 li
cp
f
337.511 557.544 mo
337.907 555.677 339.744 554.483 341.612 554.884 cv
343.479 555.278 344.67 557.114 344.273 558.981 cv
343.876 560.849 342.04 562.042 340.173 561.646 cv
338.306 561.247 337.114 559.411 337.511 557.544 cv
cp
525.192 814.06 mo
526.542 812.712 528.73 812.712 530.082 814.06 cv
531.432 815.411 531.432 817.601 530.082 818.95 cv
528.73 820.3 526.542 820.3 525.192 818.95 cv
523.841 817.601 523.841 815.411 525.192 814.06 cv
cp
316.624 733.413 mo
347.395 763.81 li
434.716 763.81 li
490.904 817.981 li
520.39 817.981 li
521.388 819.238 523.286 820.435 524.619 821.093 cv
527.968 822.751 531.544 823.737 534.188 821.093 cv
536.827 818.45 536.827 814.169 534.185 811.528 cv
531.544 808.885 527.775 809.526 524.619 811.528 cv
523.286 812.372 521.669 813.425 520.665 814.524 cv
492.299 814.524 li
436.11 760.351 li
348.813 760.351 li
320.081 731.966 li
320.081 630.846 li
329.084 622.208 li
329.37 570.608 li
336.228 563.746 li
337.656 564.096 339.532 564.098 341.075 564.081 cv
344.81 564.04 348.319 562.528 349.098 558.872 cv
349.875 555.219 347.544 551.628 343.888 550.849 cv
340.235 550.071 337.771 552.843 335.864 556.058 cv
335.089 557.365 334.127 559.465 334.009 561.077 cv
325.92 569.169 li
325.633 620.726 li
316.624 629.372 li
316.624 733.413 li
cp
f
189.518 243.949 mo
191.427 243.949 192.975 245.496 192.975 247.406 cv
192.975 249.317 191.427 250.863 189.518 250.863 cv
187.606 250.863 186.061 249.317 186.061 247.406 cv
186.061 245.496 187.606 243.949 189.518 243.949 cv
cp
168.3 176.27 mo
180.136 188.28 li
173.771 205.953 li
174.072 233.885 li
183.374 243.16 li
183.134 244.764 183.646 247.059 184.141 248.519 cv
185.337 252.057 187.167 255.284 190.903 255.284 cv
194.64 255.284 197.669 252.255 197.669 248.519 cv
197.669 244.782 194.549 242.57 190.903 241.754 cv
189.246 241.382 187.2 240.961 185.672 241.114 cv
185.945 240.84 li
177.514 232.434 li
177.237 206.541 li
184.126 187.402 li
171.758 174.851 li
171.758 94.5898 li
136.079 59.2998 li
133.647 61.7578 li
168.3 96.0352 li
168.3 176.27 li
cp
f
198.79 218.006 mo
200.163 219.332 200.202 221.52 198.874 222.895 cv
197.548 224.27 195.359 224.308 193.985 222.979 cv
192.61 221.653 192.573 219.463 193.901 218.09 cv
195.227 216.719 197.415 216.68 198.79 218.006 cv
cp
176.657 153.037 mo
190.055 170.796 li
194.811 176.212 li
194.811 213.252 li
193.561 214.266 192.388 216.202 191.746 217.555 cv
190.149 220.935 189.225 224.527 191.915 227.122 cv
194.602 229.717 198.884 229.643 201.481 226.957 cv
204.074 224.268 203.366 220.51 201.313 217.391 cv
200.45 216.079 199.377 214.492 198.268 213.508 cv
198.268 174.908 li
192.733 168.614 li
180.115 151.879 li
180.115 92.3032 li
148.001 59.3232 li
145.522 61.7344 li
176.657 93.709 li
176.657 153.037 li
cp
f
208.15 291.629 mo
209.521 292.955 209.561 295.143 208.234 296.519 cv
206.908 297.893 204.72 297.932 203.345 296.603 cv
201.971 295.277 201.933 293.088 203.261 291.714 cv
204.586 290.341 206.776 290.303 208.15 291.629 cv
cp
199.298 73.7012 mo
206.913 81.0625 li
206.913 133.783 li
204.905 152.271 li
204.331 286.748 li
203.022 287.719 201.774 289.77 201.106 291.178 cv
199.509 294.559 198.586 298.151 201.273 300.744 cv
203.96 303.342 208.243 303.268 210.84 300.578 cv
213.434 297.891 212.725 294.133 210.673 291.014 cv
209.851 289.764 208.838 288.268 207.786 287.277 cv
208.352 152.554 li
210.36 134.064 li
210.37 79.5938 li
200.696 70.2441 li
171.012 70.2441 li
159.561 59.2793 li
157.17 61.7793 li
169.624 73.7012 li
199.298 73.7012 li
cp
f
217.96 275.453 mo
219.334 276.779 219.371 278.969 218.046 280.343 cv
216.72 281.713 214.53 281.754 213.156 280.426 cv
211.782 279.1 211.743 276.912 213.07 275.537 cv
214.397 274.163 216.585 274.125 217.96 275.453 cv
cp
205.352 64.1934 mo
225.642 83.6602 li
225.642 151.786 li
214.115 164.371 li
214.115 270.593 li
212.817 271.573 211.581 273.603 210.918 275.004 cv
209.319 278.381 208.396 281.974 211.085 284.568 cv
213.772 287.164 218.054 287.089 220.651 284.403 cv
223.246 281.713 222.536 277.959 220.481 274.837 cv
219.655 273.578 218.635 272.067 217.573 271.077 cv
217.573 165.715 li
229.099 153.131 li
229.099 82.1836 li
206.744 60.7344 li
176.078 60.7344 li
173.944 59.1445 li
171.878 61.9131 li
174.931 64.1934 li
205.352 64.1934 li
cp
f
131.472 439.249 mo
129.561 439.249 128.015 437.701 128.015 435.791 cv
128.015 433.881 129.561 432.332 131.472 432.332 cv
133.384 432.332 134.931 433.881 134.931 435.791 cv
134.931 437.701 133.384 439.249 131.472 439.249 cv
cp
246.112 305.537 mo
219.591 333.789 li
219.591 391.674 li
196.977 414.29 li
153.647 414.29 li
136.877 430.08 li
135.491 429.119 132.241 429.777 130.36 430.414 cv
126.822 431.61 123.597 433.442 123.597 437.177 cv
123.597 440.913 126.624 443.944 130.36 443.944 cv
134.096 443.944 136.308 440.823 137.124 437.177 cv
137.388 436.003 137.681 434.629 137.776 433.382 cv
138.077 433.702 li
155.018 417.747 li
198.409 417.747 li
223.048 393.105 li
223.048 335.156 li
249.548 306.933 li
250.146 273.797 li
238.031 262.547 li
238.031 93.6953 li
253.881 76.9844 li
253.881 60.5293 li
250.423 60.5293 li
250.423 75.6055 li
234.573 92.3174 li
234.573 264.053 li
246.661 275.279 li
246.112 305.537 li
cp
f
162.196 463.071 mo
160.286 463.071 158.739 461.522 158.739 459.614 cv
158.739 457.704 160.286 456.155 162.196 456.155 cv
164.108 456.155 165.655 457.704 165.655 459.614 cv
165.655 461.522 164.108 463.071 162.196 463.071 cv
cp
247.253 251.338 mo
253.015 257.1 li
253.015 311.289 li
231.692 332.899 li
231.692 388.211 li
165.864 453.42 li
164.319 453.352 162.376 453.799 161.085 454.236 cv
157.547 455.433 154.319 457.264 154.319 460.999 cv
154.319 464.735 157.349 467.764 161.085 467.764 cv
164.82 467.764 167.032 464.646 167.85 460.999 cv
168.227 459.315 168.657 457.229 168.482 455.694 cv
235.15 389.652 li
235.15 334.316 li
256.473 312.707 li
256.473 255.67 li
250.71 249.906 li
250.71 95.2422 li
262.811 84.8691 li
262.811 60.5293 li
259.354 60.5293 li
259.354 83.2773 li
247.253 93.6514 li
247.253 251.338 li
cp
f
250.511 500.69 mo
251.886 502.017 251.923 504.206 250.596 505.579 cv
249.272 506.954 247.082 506.993 245.708 505.663 cv
244.333 504.337 244.294 502.149 245.622 500.774 cv
246.949 499.403 249.137 499.364 250.511 500.69 cv
cp
260.796 321.792 mo
246.675 335.77 li
246.675 495.824 li
245.374 496.802 244.134 498.838 243.469 500.241 cv
241.87 503.62 240.948 507.212 243.636 509.808 cv
246.324 512.401 250.604 512.327 253.202 509.642 cv
255.797 506.954 255.089 503.196 253.033 500.075 cv
252.208 498.819 251.19 497.314 250.132 496.323 cv
250.132 337.213 li
264.255 323.236 li
264.255 106.709 li
272.034 99.2168 li
272.034 60.5293 li
268.577 60.5293 li
268.577 97.7466 li
260.796 105.236 li
260.796 321.792 li
cp
f
287.304 60.5293 mo
283.846 60.5293 li
283.846 70.2441 li
287.304 70.2441 li
287.304 60.5293 li
cp
f
280.57 316.127 mo
282.481 316.127 284.028 317.675 284.028 319.584 cv
284.028 321.494 282.481 323.043 280.57 323.043 cv
278.659 323.043 277.112 321.494 277.112 319.584 cv
277.112 317.675 278.659 316.127 280.57 316.127 cv
cp
268.577 308.897 mo
274.405 315.604 li
274.25 317.19 274.725 319.313 275.194 320.695 cv
276.39 324.236 278.22 327.461 281.958 327.461 cv
285.692 327.461 288.722 324.432 288.722 320.695 cv
288.722 316.96 285.602 314.748 281.958 313.93 cv
280.385 313.577 278.456 313.177 276.956 313.267 cv
272.034 307.603 li
272.034 138.453 li
302.29 108.715 li
302.29 60.5293 li
298.832 60.5293 li
298.832 107.266 li
268.577 137.003 li
268.577 308.897 li
cp
f
464.743 610.224 mo
466.411 611.153 467.009 613.259 466.078 614.927 cv
465.147 616.594 463.045 617.192 461.374 616.264 cv
459.706 615.331 459.107 613.229 460.039 611.56 cv
460.969 609.892 463.074 609.294 464.743 610.224 cv
cp
279.81 148.33 mo
280.679 289.533 li
280.684 290.223 li
332.673 344.271 li
390.886 344.271 li
396.513 350.018 li
396.513 535.159 li
445.905 584.841 li
447.632 594.612 li
459.389 607.085 li
458.601 608.398 458.063 610.278 457.82 611.596 cv
457.142 615.269 457.171 618.979 460.433 620.8 cv
463.695 622.618 467.814 621.448 469.635 618.185 cv
471.455 614.921 469.808 611.471 467.021 608.981 cv
465.688 607.787 463.998 606.319 462.533 605.768 cv
462.726 605.585 li
450.856 592.995 li
449.124 583.173 li
399.971 533.735 li
399.971 348.605 li
392.341 340.813 li
334.145 340.813 li
284.132 288.821 li
283.276 149.742 li
342.054 90.2578 li
342.054 60.5293 li
338.595 60.5293 li
338.595 88.8398 li
280.314 147.82 li
279.81 148.33 li
cp
f
499.047 618.196 mo
497.298 618.966 495.259 618.173 494.489 616.423 cv
493.72 614.675 494.513 612.634 496.261 611.866 cv
498.011 611.099 500.05 611.892 500.82 613.639 cv
501.59 615.387 500.796 617.427 499.047 618.196 cv
cp
290.475 156.398 mo
290.475 280.877 li
290.475 282.019 290.925 283.115 291.73 283.926 cv
336.97 329.45 li
337.781 330.268 338.884 330.727 340.036 330.727 cv
399.907 330.727 li
409.767 340.586 li
409.767 523.495 li
409.767 524.639 410.219 525.737 411.028 526.548 cv
494.014 609.821 li
494.222 610.03 494.446 610.212 494.683 610.369 cv
494.61 610.433 494.538 610.496 494.472 610.558 cv
491.716 613.077 489.497 616.052 491.004 619.474 cv
492.506 622.892 496.498 624.446 499.918 622.942 cv
503.34 621.437 504.107 617.692 503.39 614.024 cv
502.973 611.905 502.39 609.149 501.183 608.053 cv
501.644 606.573 501.308 604.898 500.136 603.719 cv
418.411 521.71 li
418.411 338.795 li
418.411 337.648 417.955 336.549 417.145 335.739 cv
404.754 323.348 li
403.943 322.538 402.845 322.082 401.698 322.082 cv
341.834 322.082 li
299.118 279.096 li
299.118 158.19 li
359.227 98.0796 li
360.038 97.2695 360.493 96.1699 360.493 95.0234 cv
360.493 60.5293 li
360.493 58.1416 358.559 56.207 356.171 56.207 cv
353.784 56.207 351.849 58.1416 351.849 60.5293 cv
351.849 93.2324 li
291.741 153.343 li
290.931 154.154 290.475 155.252 290.475 156.398 cv
cp
f
428.328 250.037 mo
428.727 248.168 430.561 246.977 432.431 247.374 cv
434.298 247.771 435.491 249.607 435.092 251.475 cv
434.696 253.344 432.858 254.534 430.991 254.137 cv
429.124 253.74 427.931 251.904 428.328 250.037 cv
cp
305.169 167.496 mo
305.169 250.756 li
326.494 272.367 li
326.494 290.213 li
349.378 314.303 li
372.224 314.303 li
387.149 299.307 li
388.644 297.601 li
412.238 297.889 li
421.292 288.186 li
421.292 262.801 li
427.066 256.242 li
428.491 256.588 430.354 256.591 431.891 256.574 cv
435.626 256.531 439.138 255.02 439.916 251.363 cv
440.694 247.71 438.36 244.119 434.708 243.341 cv
431.054 242.563 428.589 245.338 426.683 248.551 cv
425.908 249.852 424.952 251.94 424.828 253.551 cv
417.833 261.497 li
417.833 286.822 li
410.752 294.41 li
387.094 294.123 li
384.624 296.945 li
370.788 310.844 li
350.863 310.844 li
329.951 288.832 li
329.951 270.948 li
308.628 249.338 li
308.628 168.927 li
372.727 104.893 li
373.235 104.383 li
373.233 103.663 li
373.233 103.465 373.174 83.6963 373.233 75.7305 cv
373.251 73.5381 373.767 71.9775 374.767 71.0942 cv
375.944 70.0542 377.544 70.2246 377.544 70.2266 cv
400.546 70.2441 li
404.284 70.2441 407.132 69.1875 409.004 67.0996 cv
411.585 64.2227 411.216 60.5 411.198 60.3438 cv
407.759 60.7031 li
407.763 60.7266 407.964 63.1055 406.408 64.8145 cv
405.217 66.1221 403.245 66.7861 400.546 66.7861 cv
377.88 66.7861 li
377.206 66.7188 374.665 66.6133 372.534 68.4546 cv
370.728 70.0132 369.802 72.4521 369.776 75.7041 cv
369.722 82.8223 369.765 99.3105 369.774 102.953 cv
305.169 167.496 li
cp
f
360.379 293.592 mo
359.056 294.967 356.865 295.006 355.491 293.677 cv
354.116 292.352 354.077 290.164 355.405 288.787 cv
356.732 287.417 358.92 287.378 360.295 288.703 cv
361.669 290.03 361.706 292.219 360.379 293.592 cv
cp
317.849 247.234 mo
336.757 265.029 li
352.261 265.029 li
356.749 269.754 li
356.749 283.641 li
355.345 284.51 353.966 286.747 353.253 288.254 cv
351.654 291.633 350.731 295.225 353.419 297.82 cv
356.107 300.415 360.39 300.342 362.985 297.654 cv
365.581 294.967 364.871 291.209 362.816 288.088 cv
362.067 286.948 361.159 285.601 360.206 284.621 cv
360.206 268.372 li
353.743 261.571 li
338.126 261.571 li
321.308 245.737 li
321.308 180.169 li
441.818 60.2314 li
439.38 57.7803 li
317.849 178.732 li
317.849 247.234 li
cp
f
342.705 242.162 mo
344.587 241.83 346.379 243.084 346.71 244.965 cv
347.04 246.846 345.785 248.639 343.905 248.971 cv
342.025 249.303 340.231 248.048 339.899 246.167 cv
339.569 244.285 340.823 242.491 342.705 242.162 cv
cp
327.933 178.73 mo
327.933 232.881 li
336.569 241.781 li
336.296 243.422 337.354 246.044 338.202 247.596 cv
339.996 250.87 342.361 253.73 346.038 253.08 cv
349.719 252.432 352.175 248.926 351.527 245.245 cv
350.876 241.568 347.421 239.93 343.688 239.758 cv
342.369 239.697 340.811 239.648 339.485 239.82 cv
331.39 231.48 li
331.39 180.169 li
450.463 61.7549 li
448.024 59.3032 li
328.442 178.225 li
327.933 178.73 li
cp
f
346.592 185.115 mo
347.929 186.48 347.907 188.668 346.544 190.006 cv
345.179 191.343 342.989 191.319 341.653 189.955 cv
340.317 188.591 340.338 186.4 341.702 185.064 cv
343.066 183.729 345.257 183.752 346.592 185.115 cv
cp
342.341 180.596 mo
341.215 181.633 340.171 183.279 339.566 184.471 cv
337.877 187.803 336.854 191.367 339.468 194.037 cv
342.082 196.707 346.365 196.752 349.033 194.137 cv
351.701 191.523 351.098 187.746 349.133 184.569 cv
348.205 183.072 347.024 181.223 345.799 180.263 cv
345.799 174.405 li
455.144 65.6318 li
505.859 65.6318 li
511.264 60.2285 li
508.818 57.7832 li
504.428 62.1738 li
453.715 62.1738 li
342.341 172.969 li
342.341 180.596 li
cp
f
342.856 219.936 mo
341.493 221.273 339.306 221.25 337.968 219.885 cv
336.63 218.521 336.654 216.332 338.018 214.995 cv
339.382 213.659 341.57 213.684 342.908 215.047 cv
344.243 216.411 344.222 218.6 342.856 219.936 cv
cp
455.725 68.5142 mo
357.611 167.502 li
357.611 193.855 li
340.056 209.637 li
338.458 210.137 336.733 212.721 335.882 214.402 cv
334.189 217.733 333.167 221.297 335.78 223.969 cv
338.397 226.637 342.679 226.683 345.35 224.068 cv
348.017 221.454 347.413 217.678 345.447 214.5 cv
344.822 213.493 344.083 212.326 343.294 211.377 cv
361.069 195.398 li
361.069 168.925 li
457.168 71.9727 li
509.632 71.9727 li
520.805 60.1953 li
518.296 57.8145 li
508.145 68.5142 li
455.725 68.5142 li
cp
f
375.413 181.351 mo
376.75 182.715 376.729 184.904 375.364 186.24 cv
374.001 187.576 371.81 187.553 370.476 186.189 cv
369.138 184.824 369.162 182.635 370.524 181.299 cv
371.888 179.963 374.078 179.986 375.413 181.351 cv
cp
459.189 74.2754 mo
371.951 161.225 li
371.442 161.732 li
371.442 176.57 li
371.462 176.57 li
370.224 177.571 369.046 179.409 368.388 180.706 cv
366.697 184.037 365.673 187.602 368.288 190.273 cv
370.901 192.941 375.185 192.986 377.854 190.371 cv
380.522 187.756 379.92 183.98 377.954 180.803 cv
377.05 179.346 375.905 177.549 374.715 176.57 cv
374.9 176.57 li
374.9 163.168 li
460.618 77.7344 li
510.749 77.7344 li
528.541 60.2383 li
526.117 57.7734 li
509.334 74.2754 li
459.189 74.2754 li
cp
f
373.535 240.443 mo
375.417 240.11 377.208 241.365 377.54 243.248 cv
377.873 245.128 376.618 246.922 374.737 247.254 cv
372.855 247.585 371.063 246.329 370.731 244.448 cv
370.399 242.567 371.653 240.774 373.535 240.443 cv
cp
460.748 80.9043 mo
387.724 154.533 li
387.724 193.99 li
382.458 200.17 li
363.186 200.17 li
356.459 207.557 li
356.459 229.172 li
367.663 239.311 li
366.747 240.764 368.04 244.059 369.034 245.876 cv
370.826 249.154 373.191 252.012 376.87 251.363 cv
380.55 250.715 383.005 247.207 382.357 243.527 cv
381.708 239.85 378.252 238.213 374.52 238.039 cv
373.409 237.987 372.13 237.947 370.96 238.037 cv
371.163 237.813 li
359.917 227.637 li
359.917 208.898 li
364.716 203.627 li
384.054 203.627 li
391.181 195.264 li
391.181 155.958 li
462.189 84.3613 li
515.077 84.3613 li
537.771 61.7549 li
535.329 59.3032 li
513.649 80.9043 li
460.748 80.9043 li
cp
f
377.172 225.154 mo
375.26 225.154 373.714 223.605 373.714 221.696 cv
373.714 219.785 375.26 218.238 377.172 218.238 cv
379.081 218.238 380.63 219.785 380.63 221.696 cv
380.63 223.605 379.081 225.154 377.172 225.154 cv
cp
464.944 86.0918 mo
394.207 157.994 li
394.207 204.309 li
381.335 215.545 li
379.733 215.332 377.495 215.832 376.06 216.316 cv
372.52 217.516 369.294 219.346 369.294 223.08 cv
369.294 226.818 372.321 229.848 376.06 229.848 cv
379.795 229.848 382.007 226.727 382.825 223.08 cv
383.164 221.566 383.557 219.716 383.505 218.241 cv
397.664 205.883 li
397.664 159.412 li
466.392 89.5488 li
518.827 89.5488 li
546.422 61.748 li
543.967 59.3105 li
517.39 86.0918 li
464.944 86.0918 li
cp
f
406.974 212.174 mo
408.348 213.499 408.386 215.686 407.06 217.063 cv
405.735 218.438 403.546 218.475 402.171 217.148 cv
400.797 215.82 400.758 213.632 402.085 212.258 cv
403.411 210.884 405.601 210.846 406.974 212.174 cv
cp
467.245 92.7188 mo
403.633 157.491 li
403.138 157.998 li
403.138 207.309 li
401.837 208.286 400.597 210.32 399.933 211.725 cv
398.333 215.102 397.411 218.693 400.099 221.289 cv
402.788 223.884 407.069 223.81 409.665 221.123 cv
412.261 218.434 411.552 214.678 409.497 211.558 cv
408.673 210.302 407.654 208.796 406.596 207.805 cv
406.596 159.409 li
468.697 96.1772 li
522.003 96.1772 li
555.933 61.7412 li
553.472 59.3164 li
520.555 92.7188 li
467.245 92.7188 li
cp
f
405.636 248.176 mo
403.726 248.176 402.179 246.628 402.179 244.719 cv
402.179 242.807 403.726 241.26 405.636 241.26 cv
407.546 241.26 409.095 242.807 409.095 244.719 cv
409.095 246.628 407.546 248.176 405.636 248.176 cv
cp
471.579 98.4814 mo
418.125 151.741 li
418.125 230.01 li
409.356 238.527 li
407.805 238.445 405.833 238.898 404.526 239.341 cv
400.985 240.538 397.759 242.367 397.759 246.104 cv
397.759 249.84 400.788 252.869 404.526 252.869 cv
408.261 252.869 410.473 249.75 411.289 246.104 cv
411.664 244.439 412.087 242.379 411.927 240.848 cv
421.582 231.471 li
421.582 153.176 li
473.007 101.939 li
525.456 101.939 li
565.438 61.748 li
562.987 59.3105 li
524.019 98.4814 li
471.579 98.4814 li
cp
f
438.135 182.854 mo
439.47 184.219 439.448 186.406 438.084 187.743 cv
436.72 189.08 434.53 189.057 433.194 187.692 cv
431.856 186.328 431.882 184.139 433.245 182.803 cv
434.609 181.467 436.798 181.489 438.135 182.854 cv
cp
474.164 104.82 mo
433.394 146.18 li
433.394 178.174 li
434.063 178.174 li
432.868 179.192 431.744 180.953 431.107 182.209 cv
429.415 185.541 428.392 189.105 431.007 191.775 cv
433.621 194.444 437.905 194.49 440.575 191.876 cv
443.243 189.26 442.639 185.484 440.673 182.307 cv
439.622 180.611 438.248 178.462 436.851 177.669 cv
436.851 147.599 li
475.609 108.279 li
528.045 108.279 li
574.654 61.752 li
572.213 59.3066 li
526.612 104.82 li
474.164 104.82 li
cp
f
226.232 854.134 mo
224.321 854.134 222.774 852.585 222.774 850.677 cv
222.774 848.764 224.321 847.216 226.232 847.216 cv
228.143 847.216 229.69 848.764 229.69 850.677 cv
229.69 852.585 228.143 854.134 226.232 854.134 cv
cp
174.71 803.303 mo
172.8 803.303 171.251 801.757 171.251 799.846 cv
171.251 797.937 172.8 796.387 174.71 796.387 cv
176.618 796.387 178.167 797.937 178.167 799.846 cv
178.167 801.757 176.618 803.303 174.71 803.303 cv
cp
157.265 618.757 mo
155.893 617.428 155.854 615.241 157.181 613.866 cv
158.506 612.493 160.694 612.454 162.068 613.782 cv
163.444 615.108 163.483 617.298 162.155 618.671 cv
160.829 620.042 158.64 620.083 157.265 618.757 cv
cp
227.62 845.021 mo
225.934 844.643 223.844 844.212 222.308 844.389 cv
184.542 805.302 li
181.8 794.096 li
175.936 789.351 li
175.936 659.8 li
161.241 644.96 li
161.241 623.51 li
162.491 622.497 163.667 620.559 164.309 619.206 cv
165.906 615.827 166.829 612.235 164.142 609.639 cv
161.454 607.044 157.172 607.118 154.575 609.805 cv
151.979 612.495 152.688 616.251 154.743 619.37 cv
155.609 620.688 156.686 622.283 157.801 623.267 cv
157.783 623.267 li
157.783 646.38 li
172.479 661.221 li
172.479 791.001 li
174.819 792.896 li
174.429 792.833 174.032 792.792 173.624 792.792 cv
169.423 792.792 166.018 796.198 166.018 800.398 cv
166.018 804.596 169.423 808.001 173.624 808.001 cv
176.705 808.001 179.352 806.164 180.548 803.528 cv
181.405 807.034 li
220.037 847.017 li
219.972 848.56 220.419 850.498 220.856 851.786 cv
222.052 855.323 223.882 858.552 227.62 858.552 cv
231.354 858.552 234.384 855.523 234.384 851.786 cv
234.384 848.052 231.265 845.839 227.62 845.021 cv
cp
f
206.351 858.452 mo
204.438 858.452 202.893 856.905 202.893 854.995 cv
202.893 853.085 204.438 851.536 206.351 851.536 cv
208.262 851.536 209.808 853.085 209.808 854.995 cv
209.808 856.905 208.262 858.452 206.351 858.452 cv
cp
152.532 586.024 mo
152.929 584.155 154.765 582.964 156.634 583.362 cv
158.501 583.757 159.69 585.596 159.294 587.462 cv
158.897 589.331 157.061 590.524 155.194 590.126 cv
153.327 589.727 152.134 587.892 152.532 586.024 cv
cp
207.738 849.341 mo
205.739 848.893 203.173 848.369 201.641 848.879 cv
150.004 797.452 li
150.004 733.798 li
135.74 716.509 li
135.74 668.173 li
145.259 659.229 li
144.395 598.976 li
151.165 592.204 li
152.602 592.575 154.52 592.58 156.095 592.562 cv
159.829 592.521 163.341 591.007 164.118 587.352 cv
164.896 583.7 162.565 580.106 158.909 579.329 cv
155.256 578.55 152.792 581.323 150.885 584.536 cv
150.128 585.813 149.2 587.84 149.045 589.437 cv
140.917 597.565 li
141.781 657.753 li
132.282 666.677 li
132.282 717.751 li
146.546 735.04 li
146.546 798.889 li
200.171 852.299 li
200.268 853.628 200.625 855.075 200.975 856.106 cv
202.17 859.646 204 862.872 207.738 862.872 cv
211.473 862.872 214.502 859.843 214.502 856.106 cv
214.502 852.37 211.384 850.159 207.738 849.341 cv
cp
f
386.479 859.321 mo
384.569 859.321 383.021 857.773 383.021 855.86 cv
383.021 853.95 384.569 852.403 386.479 852.403 cv
388.388 852.403 389.936 853.95 389.936 855.86 cv
389.936 857.773 388.388 859.321 386.479 859.321 cv
cp
251.479 858.358 mo
249.569 858.358 248.02 856.812 248.02 854.901 cv
248.02 852.991 249.569 851.444 251.479 851.444 cv
253.388 851.444 254.936 852.991 254.936 854.901 cv
254.936 856.812 253.388 858.358 251.479 858.358 cv
cp
387.865 850.208 mo
385.927 849.771 383.454 849.267 381.909 849.702 cv
367.752 833.829 li
274.295 833.829 li
256.052 848.831 li
254.446 848.449 251.933 848.994 250.366 849.524 cv
246.827 850.719 243.602 852.552 243.602 856.288 cv
243.602 860.024 246.632 863.053 250.366 863.053 cv
254.104 863.053 256.315 859.935 257.133 856.288 cv
257.442 854.91 257.782 853.262 257.806 851.864 cv
275.534 837.286 li
366.202 837.286 li
379.95 852.702 li
380.272 852.414 li
380.255 853.919 380.686 855.743 381.102 856.974 cv
382.298 860.51 384.13 863.739 387.865 863.739 cv
391.602 863.739 394.63 860.708 394.63 856.974 cv
394.63 853.239 391.513 851.026 387.865 850.208 cv
cp
f
187.061 589.805 mo
185.151 589.771 183.632 588.196 183.664 586.288 cv
183.696 584.38 185.271 582.858 187.181 582.889 cv
189.091 582.927 190.612 584.499 190.578 586.409 cv
190.544 588.319 188.971 589.839 187.061 589.805 cv
cp
253.693 798.155 mo
255.065 799.481 255.104 801.671 253.778 803.044 cv
252.452 804.417 250.265 804.454 248.889 803.128 cv
247.515 801.802 247.475 799.612 248.804 798.239 cv
250.13 796.866 252.319 796.827 253.693 798.155 cv
cp
192.516 585.329 mo
191.382 581.771 189.608 578.517 185.87 578.448 cv
182.136 578.384 179.056 581.358 178.989 585.093 cv
178.925 588.829 182.005 591.094 185.634 591.976 cv
187.192 592.356 189.104 592.788 190.602 592.729 cv
190.308 593.042 li
205.759 607.659 li
205.759 622.571 li
194.522 634.313 li
194.522 713.104 li
248.981 766.269 li
248.981 794.102 li
248.02 795.163 247.163 796.623 246.649 797.708 cv
245.053 801.083 244.13 804.675 246.817 807.273 cv
249.505 809.864 253.786 809.79 256.384 807.106 cv
258.979 804.417 258.271 800.659 256.216 797.54 cv
255.165 795.94 253.802 793.933 252.438 793.106 cv
252.438 764.81 li
197.979 711.646 li
197.979 635.702 li
209.218 623.96 li
209.218 606.169 li
193.133 590.954 li
193.505 589.354 193.01 586.88 192.516 585.329 cv
cp
f
243.386 828.079 mo
243.001 829.95 241.171 831.151 239.3 830.764 cv
237.43 830.378 236.227 828.55 236.614 826.677 cv
237.001 824.81 238.831 823.606 240.702 823.993 cv
242.571 824.38 243.772 826.21 243.386 828.079 cv
cp
185.499 619.06 mo
184.126 617.733 184.088 615.546 185.415 614.171 cv
186.741 612.796 188.93 612.759 190.305 614.087 cv
191.679 615.411 191.716 617.601 190.389 618.976 cv
189.061 620.346 186.874 620.385 185.499 619.06 cv
cp
247.759 830.118 mo
248.516 826.46 245.909 823.663 242.505 822.124 cv
241.036 821.459 239.229 820.676 237.743 820.461 cv
237.743 764.823 li
189.335 716.415 li
189.335 623.928 li
190.638 622.952 191.878 620.914 192.543 619.509 cv
194.14 616.132 195.063 612.538 192.374 609.944 cv
189.688 607.349 185.407 607.423 182.808 610.108 cv
180.215 612.798 180.925 616.555 182.977 619.675 cv
183.904 621.086 185.074 622.815 186.271 623.771 cv
185.878 623.771 li
185.878 717.846 li
234.286 766.255 li
234.286 823.456 li
234.497 823.456 li
234.318 824.784 234.376 826.291 234.509 827.38 cv
234.965 831.087 236.104 834.616 239.763 835.372 cv
243.422 836.128 247.001 833.778 247.759 830.118 cv
cp
f
191.55 90.2539 mo
190.178 88.9282 190.139 86.7393 191.466 85.3652 cv
192.793 83.9902 194.981 83.9531 196.355 85.2793 cv
197.729 86.6074 197.767 88.7959 196.439 90.1699 cv
195.113 91.542 192.925 91.5811 191.55 90.2539 cv
cp
198.595 90.7031 mo
200.191 87.3262 201.115 83.7344 198.425 81.1382 cv
195.739 78.5439 191.458 78.6182 188.859 81.3042 cv
186.267 83.9941 186.975 87.748 189.028 90.8711 cv
189.949 92.2705 191.11 93.9844 192.299 94.9443 cv
192.445 106.209 li
195.903 106.164 li
195.755 94.8145 li
196.919 93.7612 197.993 91.9746 198.595 90.7031 cv
cp
f
832.959 799.085 mo
831.609 800.437 829.42 800.435 828.068 799.085 cv
826.715 797.735 826.715 795.546 828.068 794.194 cv
829.42 792.846 831.609 792.846 832.959 794.194 cv
834.309 795.546 834.309 797.735 832.959 799.085 cv
cp
354.767 511.778 mo
352.856 511.757 351.326 510.196 351.346 508.286 cv
351.362 506.378 352.927 504.843 354.835 504.862 cv
356.745 504.884 358.275 506.444 358.257 508.356 cv
358.237 510.267 356.677 511.798 354.767 511.778 cv
cp
827.496 791.661 mo
826.117 792.534 824.439 793.629 823.445 794.769 cv
817.658 794.769 li
805.988 784.124 li
738.805 784.124 li
721.805 802.128 li
665.48 802.128 li
659.434 806.821 li
610.178 806.62 li
574.873 770.88 li
574.873 754.839 li
566.023 746.969 li
530.777 746.969 li
524.114 752.487 li
467.745 752.487 li
368.831 654.481 li
368.831 624.507 li
381.997 611.837 li
381.997 569.839 li
360.7 548.161 li
360.7 513.489 li
361.494 512.053 360.935 509.178 360.467 506.991 cv
359.683 503.335 357.509 500.196 353.77 500.159 cv
350.036 500.124 346.977 503.116 346.936 506.856 cv
346.903 510.589 350.111 512.454 353.638 513.687 cv
354.614 514.029 355.97 514.385 357.243 514.514 cv
357.243 549.575 li
378.54 571.253 li
378.54 610.364 li
365.373 623.036 li
365.373 655.925 li
465.818 755.446 li
466.325 755.946 li
525.359 755.946 li
532.022 750.427 li
564.71 750.427 li
571.415 756.392 li
571.415 772.3 li
608.725 810.073 li
660.611 810.284 li
666.666 805.587 li
723.293 805.587 li
740.297 787.581 li
804.646 787.581 li
816.318 798.226 li
823.35 798.226 li
824.369 799.442 826.201 800.589 827.496 801.229 cv
830.846 802.885 834.422 803.87 837.064 801.229 cv
839.705 798.585 839.705 794.305 837.06 791.661 cv
834.422 789.021 830.65 789.661 827.496 791.661 cv
cp
f
647.23 792.101 mo
645.951 793.519 643.766 793.626 642.348 792.344 cv
640.93 791.067 640.818 788.88 642.102 787.464 cv
643.385 786.048 645.568 785.937 646.982 787.216 cv
648.402 788.497 648.514 790.685 647.23 792.101 cv
cp
402.041 650.024 mo
400.669 648.702 400.63 646.51 401.956 645.137 cv
403.282 643.76 405.472 643.724 406.847 645.052 cv
408.22 646.378 408.257 648.567 406.931 649.94 cv
405.602 651.315 403.415 651.351 402.041 650.024 cv
cp
641.422 785.352 mo
640.285 785.986 638.736 787.053 637.74 788.185 cv
630.818 788.185 li
577.777 733.13 li
523.892 732.683 li
518.558 739.604 li
471.442 739.604 li
405.876 671.769 li
405.876 654.893 li
407.179 653.916 408.42 651.88 409.085 650.476 cv
410.683 647.096 411.604 643.505 408.915 640.909 cv
406.229 638.315 401.946 638.389 399.349 641.077 cv
396.757 643.764 397.465 647.521 399.519 650.644 cv
400.344 651.898 401.36 653.401 402.419 654.393 cv
402.419 673.165 li
469.976 743.063 li
520.26 743.063 li
525.583 736.155 li
576.295 736.573 li
629.35 791.642 li
637.379 791.642 li
638.359 792.868 640.324 794.016 641.906 794.905 cv
645.158 796.743 648.951 797.194 651.459 794.423 cv
653.963 791.651 653.75 787.374 650.978 784.868 cv
648.201 782.364 644.684 783.53 641.422 785.352 cv
cp
f
661.379 742.341 mo
659.508 742.729 657.678 741.528 657.289 739.659 cv
656.904 737.788 658.102 735.96 659.973 735.571 cv
661.84 735.183 663.676 736.382 664.059 738.253 cv
664.447 740.122 663.248 741.948 661.379 742.341 cv
cp
402.041 586.206 mo
400.669 584.88 400.63 582.69 401.956 581.315 cv
403.282 579.942 405.472 579.903 406.847 581.231 cv
408.22 582.558 408.257 584.747 406.931 586.12 cv
405.602 587.493 403.415 587.532 402.041 586.206 cv
cp
668.43 736.212 mo
667.67 732.553 664.094 730.2 660.434 730.96 cv
656.775 731.721 655.639 735.251 655.185 738.96 cv
654.994 740.51 654.957 742.913 655.545 744.434 cv
648.877 752.571 li
638.758 752.571 li
591.625 701.688 li
492.758 701.135 li
475.887 710.36 li
453.678 710.36 li
421.4 679.788 li
421.4 611.101 li
405.876 597.069 li
405.876 591.072 li
407.179 590.096 408.42 588.059 409.085 586.653 cv
410.683 583.278 411.604 579.685 408.915 577.087 cv
406.229 574.493 401.946 574.567 399.349 577.255 cv
396.757 579.944 397.465 583.7 399.519 586.821 cv
400.345 588.076 401.364 589.584 402.423 590.575 cv
402.419 590.575 li
402.419 598.606 li
417.943 612.637 li
417.943 681.276 li
452.3 713.817 li
476.77 713.817 li
493.632 704.599 li
590.104 705.139 li
637.248 756.03 li
650.516 756.03 li
658.766 745.96 li
658.631 745.85 li
660.074 745.592 661.783 744.843 663.182 744.208 cv
666.588 742.665 669.188 739.868 668.43 736.212 cv
cp
f
434.192 672.524 mo
436.101 672.53 437.642 674.083 437.634 675.995 cv
437.629 677.905 436.074 679.446 434.165 679.438 cv
432.257 679.428 430.714 677.876 430.723 675.968 cv
430.729 674.06 432.282 672.514 434.192 672.524 cv
cp
426.306 674.563 mo
426.296 678.298 429.513 680.144 433.047 681.352 cv
434.16 681.735 435.757 682.122 437.169 682.184 cv
437.445 682.86 437.926 683.459 438.604 683.858 cv
447.348 688.991 li
447.897 689.315 448.501 689.468 449.095 689.468 cv
450.282 689.468 451.436 688.856 452.08 687.76 cv
453.048 686.114 452.496 683.995 450.849 683.028 cv
442.104 677.896 li
441.558 677.572 440.959 677.433 440.368 677.43 cv
440.235 676.473 440.029 675.489 439.837 674.618 cv
439.03 670.964 436.836 667.839 433.101 667.827 cv
429.363 667.813 426.323 670.825 426.306 674.563 cv
cp
f
344.854 589.237 mo
342.946 589.226 341.403 587.675 341.412 585.767 cv
341.419 583.856 342.972 582.312 344.882 582.321 cv
346.792 582.329 348.331 583.882 348.325 585.794 cv
348.319 587.704 346.765 589.245 344.854 589.237 cv
cp
832.34 813.812 mo
833.621 812.396 835.801 812.278 837.223 813.56 cv
838.643 814.835 838.756 817.021 837.48 818.438 cv
836.201 819.858 834.016 819.974 832.598 818.694 cv
831.176 817.419 831.06 815.233 832.34 813.812 cv
cp
350.526 584.415 mo
349.72 580.763 347.525 577.637 343.79 577.626 cv
340.053 577.61 337.013 580.624 336.995 584.36 cv
336.985 588.096 340.202 589.94 343.736 591.151 cv
344.95 591.569 346.745 592 348.24 591.997 cv
359.63 602.991 li
359.63 658.743 li
463.126 761.747 li
463.63 762.249 li
528.288 762.249 li
534.392 756.892 li
560.491 756.892 li
566.229 760.969 li
566.229 775.712 li
605.693 815.673 li
662.352 816.558 li
668.416 811.648 li
725.185 811.648 li
741.176 794.161 li
802.051 794.161 li
827.146 817.213 li
827.76 818.729 830.24 820.177 832.154 821.255 cv
835.416 823.087 839.209 823.53 841.711 820.755 cv
844.209 817.979 843.988 813.7 841.211 811.202 cv
838.432 808.704 834.914 809.872 831.654 811.702 cv
830.746 812.211 829.57 813.001 828.629 813.878 cv
803.398 790.704 li
739.652 790.704 li
723.662 808.19 li
667.189 808.19 li
661.148 813.083 li
607.16 812.239 li
569.686 774.294 li
569.686 759.185 li
561.597 753.433 li
533.089 753.433 li
526.984 758.792 li
465.058 758.792 li
363.088 657.305 li
363.088 601.523 li
351.112 589.963 li
351.37 588.413 350.917 586.187 350.526 584.415 cv
cp
f
822.23 781.469 mo
820.951 782.889 818.766 783.003 817.348 781.726 cv
815.926 780.448 815.813 778.26 817.09 776.843 cv
818.371 775.425 820.553 775.305 821.975 776.587 cv
823.393 777.864 823.508 780.05 822.23 781.469 cv
cp
403.325 612.339 mo
405.231 612.312 406.8 613.841 406.825 615.751 cv
406.852 617.661 405.323 619.229 403.411 619.253 cv
401.505 619.278 399.936 617.751 399.91 615.841 cv
399.886 613.933 401.413 612.364 403.325 612.339 cv
cp
825.961 774.229 mo
823.182 771.731 819.664 772.903 816.406 774.733 cv
815.248 775.381 813.658 776.483 812.67 777.644 cv
733.605 778.075 li
717.617 795.313 li
663.076 795.313 li
656.451 799.964 li
613.195 799.964 li
581.788 768.425 li
581.788 751.339 li
568.579 740.469 li
530.511 740.469 li
523.594 745.743 li
469.899 745.743 li
388.206 664.116 li
388.206 632.721 li
399.448 622.01 li
401.038 622.15 403.169 621.646 404.55 621.161 cv
408.075 619.915 411.276 618.04 411.226 614.305 cv
411.177 610.569 408.108 607.581 404.372 607.63 cv
400.636 607.678 398.469 610.827 397.696 614.483 cv
397.366 616.055 396.991 617.979 397.097 619.474 cv
384.749 631.243 li
384.749 665.548 li
468.467 749.202 li
524.762 749.202 li
531.679 743.927 li
567.34 743.927 li
578.331 752.971 li
578.331 769.854 li
611.76 803.423 li
657.543 803.423 li
664.166 798.773 li
719.127 798.773 li
735.119 781.526 li
812.438 781.102 li
813.439 782.299 815.357 783.413 816.906 784.284 cv
820.168 786.118 823.959 786.563 826.463 783.784 cv
828.961 781.007 828.736 776.733 825.961 774.229 cv
cp
f
179.045 347.535 mo
179.441 345.665 181.278 344.475 183.147 344.871 cv
185.015 345.27 186.206 347.107 185.808 348.975 cv
185.411 350.842 183.574 352.033 181.707 351.635 cv
179.84 351.238 178.647 349.403 179.045 347.535 cv
cp
182.608 354.072 mo
186.343 354.029 189.854 352.516 190.632 348.863 cv
191.409 345.209 189.077 341.617 185.422 340.84 cv
181.77 340.06 179.306 342.836 177.398 346.049 cv
176.327 347.853 174.882 351.176 175.825 352.627 cv
176.768 354.08 180.122 354.1 182.608 354.072 cv
cp
f
512.118 854.755 mo
511.721 856.62 509.884 857.813 508.017 857.415 cv
506.149 857.019 504.956 855.183 505.355 853.315 cv
505.753 851.448 507.589 850.255 509.457 850.653 cv
511.324 851.05 512.517 852.887 512.118 854.755 cv
cp
222.682 558.396 mo
220.772 558.36 219.253 556.784 219.285 554.876 cv
219.317 552.968 220.893 551.446 222.802 551.479 cv
224.712 551.513 226.232 553.087 226.198 554.997 cv
226.165 556.905 224.591 558.428 222.682 558.396 cv
cp
511.733 846.62 mo
508.08 845.841 505.614 848.614 503.707 851.829 cv
502.952 853.101 502.028 855.117 501.868 856.712 cv
495.093 863.077 li
436.444 863.077 li
424.895 850.86 li
424.895 800.696 li
407.89 783.69 li
315.835 783.69 li
242.066 708.644 li
242.066 569.802 li
228.868 558.731 li
228.968 557.185 228.554 555.224 228.138 553.919 cv
227.003 550.362 225.229 547.102 221.491 547.036 cv
217.757 546.971 214.676 549.946 214.61 553.685 cv
214.546 557.419 217.625 559.683 221.255 560.563 cv
222.928 560.969 224.999 561.433 226.536 561.289 cv
238.608 571.415 li
238.608 710.058 li
314.387 787.149 li
406.458 787.149 li
421.436 802.128 li
421.436 852.237 li
434.955 866.534 li
496.464 866.534 li
503.965 859.486 li
505.405 859.864 507.335 859.869 508.917 859.851 cv
512.651 859.812 516.163 858.298 516.942 854.644 cv
517.72 850.989 515.387 847.396 511.733 846.62 cv
cp
f
321.69 858.614 mo
320.341 859.962 318.151 859.962 316.803 858.614 cv
315.452 857.263 315.452 855.073 316.803 853.724 cv
318.151 852.372 320.341 852.372 321.69 853.724 cv
323.041 855.073 323.041 857.263 321.69 858.614 cv
cp
314.268 849.616 mo
311.626 852.26 312.268 856.028 314.268 859.185 cv
315.038 860.401 315.981 861.852 316.975 862.858 cv
316.624 862.858 li
316.624 869.846 li
320.081 869.846 li
320.081 863.835 li
321.559 863.077 323.065 860.743 323.835 859.185 cv
325.49 855.835 326.477 852.26 323.835 849.616 cv
321.192 846.976 316.911 846.976 314.268 849.616 cv
cp
f
345.265 858.354 mo
343.354 858.319 341.834 856.743 341.868 854.837 cv
341.9 852.927 343.477 851.405 345.386 851.438 cv
347.294 851.474 348.815 853.046 348.78 854.958 cv
348.748 856.866 347.172 858.387 345.265 858.354 cv
cp
350.722 853.878 mo
349.585 850.319 347.81 847.062 344.075 846.997 cv
340.338 846.93 337.259 849.905 337.191 853.644 cv
337.128 857.376 340.206 859.642 343.838 860.524 cv
345.263 860.868 346.975 861.256 348.405 861.278 cv
351.849 863.749 li
351.849 869.846 li
355.308 869.846 li
355.308 861.974 li
351.4 859.173 li
351.643 857.575 351.183 855.323 350.722 853.878 cv
cp
f
367.044 859.829 mo
365.134 859.796 363.613 858.219 363.645 856.312 cv
363.678 854.403 365.253 852.882 367.163 852.915 cv
369.072 852.946 370.594 854.523 370.56 856.433 cv
370.526 858.341 368.952 859.862 367.044 859.829 cv
cp
372.497 855.354 mo
371.362 851.794 369.591 848.538 365.852 848.474 cv
362.118 848.405 359.037 851.384 358.972 855.12 cv
358.907 858.852 361.985 861.116 365.616 861.999 cv
367.553 862.471 370.025 863.021 371.579 862.606 cv
381.861 871.175 li
384.077 868.517 li
373.239 859.486 li
373.206 858.076 372.854 856.475 372.497 855.354 cv
cp
f
392.22 713.648 mo
390.331 713.368 389.027 711.61 389.306 709.721 cv
389.583 707.833 391.343 706.528 393.231 706.805 cv
395.12 707.083 396.425 708.844 396.145 710.735 cv
395.866 712.622 394.108 713.925 392.22 713.648 cv
cp
398.209 709.915 mo
397.541 706.239 396.202 702.778 392.507 702.231 cv
388.81 701.687 385.37 704.237 384.823 707.937 cv
384.278 711.63 387.038 714.274 390.524 715.616 cv
392.313 716.305 394.587 717.137 396.176 717.014 cv
404.531 726.62 li
407.142 724.352 li
398.397 714.301 li
398.583 712.858 398.429 711.123 398.209 709.915 cv
cp
f
312.362 557.239 mo
311.967 559.106 310.129 560.302 308.261 559.903 cv
306.393 559.505 305.2 557.669 305.599 555.803 cv
305.997 553.935 307.833 552.743 309.701 553.139 cv
311.568 553.538 312.761 555.374 312.362 557.239 cv
cp
311.977 549.106 mo
308.323 548.329 305.858 551.101 303.952 554.315 cv
303.266 555.471 302.434 557.245 302.167 558.757 cv
295.216 566.677 li
297.815 568.956 li
304.003 561.907 li
305.461 562.346 307.498 562.358 309.161 562.339 cv
312.895 562.298 316.408 560.784 317.186 557.13 cv
317.964 553.477 315.631 549.885 311.977 549.106 cv
cp
f
346.878 648.626 mo
345.552 649.999 343.362 650.034 341.987 648.71 cv
340.615 647.384 340.577 645.196 341.903 643.823 cv
343.228 642.446 345.417 642.409 346.792 643.735 cv
348.167 645.062 348.206 647.251 346.878 648.626 cv
cp
348.864 639.593 mo
346.177 636.997 341.895 637.071 339.298 639.759 cv
336.702 642.448 337.41 646.206 339.466 649.325 cv
340.515 650.922 341.874 652.921 343.231 653.75 cv
343.231 661.745 li
346.688 661.745 li
346.688 652.81 li
346.653 652.81 li
347.634 651.746 348.509 650.26 349.03 649.161 cv
350.628 645.78 351.552 642.187 348.864 639.593 cv
cp
f
190.149 749.749 mo
190.149 758.68 li
193.606 758.68 li
193.606 749.749 li
190.149 749.749 li
cp
f
362.354 710.427 mo
360.508 710.903 358.62 709.794 358.143 707.942 cv
357.665 706.091 358.778 704.208 360.629 703.729 cv
362.476 703.255 364.36 704.366 364.84 706.214 cv
365.316 708.063 364.205 709.948 362.354 710.427 cv
cp
365.579 700.296 mo
364.091 699.415 360.832 701.003 359.069 702.149 cv
355.942 704.194 353.278 706.773 354.213 710.389 cv
355.145 714.007 358.833 716.185 362.452 715.251 cv
366.069 714.317 367.431 710.745 367.311 707.01 cv
367.233 704.526 367.071 701.175 365.579 700.296 cv
cp
f
212.234 807.21 mo
213.561 805.837 215.749 805.802 217.124 807.126 cv
218.497 808.452 218.534 810.642 217.208 812.017 cv
215.884 813.389 213.692 813.427 212.318 812.099 cv
210.944 810.774 210.905 808.585 212.234 807.21 cv
cp
210.247 816.243 mo
212.934 818.837 217.217 818.76 219.813 816.077 cv
222.409 813.387 221.7 809.632 219.645 806.51 cv
218.598 804.917 217.239 802.918 215.882 802.087 cv
215.882 794.091 li
212.423 794.091 li
212.423 803.024 li
212.458 803.024 li
211.477 804.088 210.602 805.576 210.08 806.678 cv
208.483 810.055 207.561 813.646 210.247 816.243 cv
cp
f
310.114 812.12 mo
311.44 810.745 313.629 810.708 315.003 812.034 cv
316.377 813.364 316.415 815.55 315.087 816.925 cv
313.762 818.3 311.573 818.337 310.198 817.01 cv
308.823 815.685 308.786 813.495 310.114 812.12 cv
cp
315.703 819.446 mo
317.298 818.399 319.298 817.04 320.128 815.683 cv
328.121 815.683 li
328.121 812.226 li
319.189 812.226 li
319.189 812.26 li
318.126 811.28 316.638 810.404 315.536 809.882 cv
312.159 808.284 308.567 807.362 305.972 810.05 cv
303.377 812.737 303.451 817.021 306.139 819.618 cv
308.827 822.212 312.583 821.501 315.703 819.446 cv
cp
f
195.903 460.993 mo
195.903 462.901 194.356 464.45 192.445 464.45 cv
190.534 464.45 188.987 462.901 188.987 460.993 cv
188.987 459.083 190.534 457.536 192.445 457.536 cv
194.356 457.536 195.903 459.083 195.903 460.993 cv
cp
183.757 461.546 mo
183.757 465.743 187.161 469.149 191.36 469.149 cv
195.559 469.149 198.962 465.743 198.962 461.546 cv
198.962 457.344 195.559 453.939 191.36 453.939 cv
187.161 453.939 183.757 457.344 183.757 461.546 cv
cp
f
395.716 815.956 mo
393.807 815.956 392.259 814.405 392.259 812.495 cv
392.259 810.587 393.807 809.038 395.716 809.038 cv
397.627 809.038 399.174 810.587 399.174 812.495 cv
399.174 814.405 397.627 815.956 395.716 815.956 cv
cp
394.633 805.442 mo
390.431 805.442 387.028 808.849 387.028 813.05 cv
387.028 817.247 390.431 820.653 394.633 820.653 cv
398.829 820.653 402.234 817.247 402.234 813.05 cv
402.234 808.849 398.829 805.442 394.633 805.442 cv
cp
f
391.022 838.466 mo
389.112 838.466 387.565 836.915 387.565 835.007 cv
387.565 833.096 389.112 831.548 391.022 831.548 cv
392.933 831.548 394.479 833.096 394.479 835.007 cv
394.479 836.915 392.933 838.466 391.022 838.466 cv
cp
389.936 827.952 mo
385.737 827.952 382.335 831.356 382.335 835.558 cv
382.335 839.759 385.737 843.161 389.936 843.161 cv
394.136 843.161 397.54 839.759 397.54 835.558 cv
397.54 831.356 394.136 827.952 389.936 827.952 cv
cp
f
192.445 527.358 mo
190.534 527.358 188.987 525.81 188.987 523.901 cv
188.987 521.991 190.534 520.442 192.445 520.442 cv
194.356 520.442 195.903 521.991 195.903 523.901 cv
195.903 525.81 194.356 527.358 192.445 527.358 cv
cp
191.36 516.846 mo
187.161 516.846 183.757 520.251 183.757 524.452 cv
183.757 528.653 187.161 532.055 191.36 532.055 cv
195.559 532.055 198.962 528.653 198.962 524.452 cv
198.962 520.251 195.559 516.846 191.36 516.846 cv
cp
f
191.665 556.116 mo
189.755 556.116 188.208 554.565 188.208 552.657 cv
188.208 550.745 189.755 549.196 191.665 549.196 cv
193.575 549.196 195.124 550.745 195.124 552.657 cv
195.124 554.565 193.575 556.116 191.665 556.116 cv
cp
190.578 545.602 mo
186.379 545.602 182.975 549.007 182.975 553.208 cv
182.975 557.409 186.379 560.812 190.578 560.812 cv
194.778 560.812 198.183 557.409 198.183 553.208 cv
198.183 549.007 194.778 545.602 190.578 545.602 cv
cp
f
255.835 520.952 mo
257.744 520.952 259.292 522.499 259.292 524.411 cv
259.292 526.319 257.744 527.87 255.835 527.87 cv
253.925 527.87 252.376 526.319 252.376 524.411 cv
252.376 522.499 253.925 520.952 255.835 520.952 cv
cp
254.749 532.565 mo
258.948 532.565 262.352 529.163 262.352 524.962 cv
262.352 520.76 258.948 517.358 254.749 517.358 cv
250.548 517.358 247.145 520.76 247.145 524.962 cv
247.145 529.163 250.548 532.565 254.749 532.565 cv
cp
f
225.287 523.858 mo
225.287 525.769 223.741 527.317 221.829 527.317 cv
219.919 527.317 218.372 525.769 218.372 523.858 cv
218.372 521.95 219.919 520.401 221.829 520.401 cv
223.741 520.401 225.287 521.95 225.287 523.858 cv
cp
213.142 524.411 mo
213.142 528.61 216.545 532.014 220.745 532.014 cv
224.944 532.014 228.349 528.61 228.349 524.411 cv
228.349 520.21 224.944 516.808 220.745 516.808 cv
216.545 516.808 213.142 520.21 213.142 524.411 cv
cp
f
344.391 526.69 mo
342.479 526.69 340.933 525.144 340.933 523.233 cv
340.933 521.323 342.479 519.774 344.391 519.774 cv
346.302 519.774 347.849 521.323 347.849 523.233 cv
347.849 525.144 346.302 526.69 344.391 526.69 cv
cp
343.305 516.178 mo
339.105 516.178 335.702 519.583 335.702 523.784 cv
335.702 527.983 339.105 531.389 343.305 531.389 cv
347.503 531.389 350.907 527.983 350.907 523.784 cv
350.907 519.583 347.503 516.178 343.305 516.178 cv
cp
f
374.538 519.221 mo
376.448 519.221 377.995 520.771 377.995 522.683 cv
377.995 524.591 376.448 526.139 374.538 526.139 cv
372.628 526.139 371.08 524.591 371.08 522.683 cv
371.08 520.771 372.628 519.221 374.538 519.221 cv
cp
373.453 530.837 mo
377.653 530.837 381.056 527.435 381.056 523.233 cv
381.056 519.032 377.653 515.628 373.453 515.628 cv
369.253 515.628 365.85 519.032 365.85 523.233 cv
365.85 527.435 369.253 530.837 373.453 530.837 cv
cp
f
298.186 333.098 mo
298.186 331.19 299.735 329.639 301.645 329.639 cv
303.556 329.639 305.102 331.19 305.102 333.098 cv
305.102 335.008 303.556 336.557 301.645 336.557 cv
299.735 336.557 298.186 335.008 298.186 333.098 cv
cp
308.163 333.65 mo
308.163 329.45 304.758 326.045 300.56 326.045 cv
296.36 326.045 292.956 329.45 292.956 333.65 cv
292.956 337.85 296.36 341.253 300.56 341.253 cv
304.758 341.253 308.163 337.85 308.163 333.65 cv
cp
f
317.064 277.389 mo
317.064 279.298 315.516 280.846 313.604 280.846 cv
311.693 280.846 310.147 279.298 310.147 277.389 cv
310.147 275.478 311.693 273.93 313.604 273.93 cv
315.516 273.93 317.064 275.478 317.064 277.389 cv
cp
304.917 277.94 mo
304.917 282.139 308.32 285.544 312.518 285.544 cv
316.718 285.544 320.122 282.139 320.122 277.94 cv
320.122 273.739 316.718 270.334 312.518 270.334 cv
308.32 270.334 304.917 273.739 304.917 277.94 cv
cp
f
347.849 278.143 mo
347.849 280.051 346.302 281.6 344.391 281.6 cv
342.479 281.6 340.933 280.051 340.933 278.143 cv
340.933 276.23 342.479 274.684 344.391 274.684 cv
346.302 274.684 347.849 276.23 347.849 278.143 cv
cp
335.702 278.695 mo
335.702 282.894 339.105 286.297 343.305 286.297 cv
347.503 286.297 350.907 282.894 350.907 278.695 cv
350.907 274.492 347.503 271.089 343.305 271.089 cv
339.105 271.089 335.702 274.492 335.702 278.695 cv
cp
f
375.986 281.6 mo
374.077 281.6 372.529 280.051 372.529 278.143 cv
372.529 276.23 374.077 274.684 375.986 274.684 cv
377.897 274.684 379.444 276.23 379.444 278.143 cv
379.444 280.051 377.897 281.6 375.986 281.6 cv
cp
374.9 271.089 mo
370.702 271.089 367.298 274.492 367.298 278.695 cv
367.298 282.894 370.702 286.297 374.9 286.297 cv
379.1 286.297 382.505 282.894 382.505 278.695 cv
382.505 274.492 379.1 271.089 374.9 271.089 cv
cp
f
405.955 281.6 mo
404.043 281.6 402.497 280.051 402.497 278.143 cv
402.497 276.23 404.043 274.684 405.955 274.684 cv
407.864 274.684 409.412 276.23 409.412 278.143 cv
409.412 280.051 407.864 281.6 405.955 281.6 cv
cp
404.868 271.089 mo
400.669 271.089 397.265 274.492 397.265 278.695 cv
397.265 282.894 400.669 286.297 404.868 286.297 cv
409.067 286.297 412.472 282.894 412.472 278.695 cv
412.472 274.492 409.067 271.089 404.868 271.089 cv
cp
f
436.75 274.684 mo
438.661 274.684 440.208 276.23 440.208 278.143 cv
440.208 280.051 438.661 281.6 436.75 281.6 cv
434.839 281.6 433.292 280.051 433.292 278.143 cv
433.292 276.23 434.839 274.684 436.75 274.684 cv
cp
435.664 286.297 mo
439.862 286.297 443.267 282.894 443.267 278.695 cv
443.267 274.492 439.862 271.089 435.664 271.089 cv
431.465 271.089 428.06 274.492 428.06 278.695 cv
428.06 282.894 431.465 286.297 435.664 286.297 cv
cp
f
436.75 305.971 mo
438.661 305.971 440.208 307.518 440.208 309.43 cv
440.208 311.338 438.661 312.887 436.75 312.887 cv
434.839 312.887 433.292 311.338 433.292 309.43 cv
433.292 307.518 434.839 305.971 436.75 305.971 cv
cp
435.664 317.584 mo
439.862 317.584 443.267 314.18 443.267 309.98 cv
443.267 305.779 439.862 302.375 435.664 302.375 cv
431.465 302.375 428.06 305.779 428.06 309.98 cv
428.06 314.18 431.465 317.584 435.664 317.584 cv
cp
f
437.19 383.736 mo
437.19 385.645 435.642 387.193 433.732 387.193 cv
431.823 387.193 430.274 385.645 430.274 383.736 cv
430.274 381.826 431.823 380.275 433.732 380.275 cv
435.642 380.275 437.19 381.826 437.19 383.736 cv
cp
425.044 384.288 mo
425.044 388.486 428.448 391.893 432.646 391.893 cv
436.849 391.893 440.251 388.486 440.251 384.288 cv
440.251 380.087 436.849 376.682 432.646 376.682 cv
428.448 376.682 425.044 380.087 425.044 384.288 cv
cp
f
436.21 341.885 mo
434.298 341.885 432.752 340.336 432.752 338.427 cv
432.752 336.518 434.298 334.967 436.21 334.967 cv
438.118 334.967 439.667 336.518 439.667 338.427 cv
439.667 340.336 438.118 341.885 436.21 341.885 cv
cp
442.726 338.978 mo
442.726 334.778 439.323 331.373 435.122 331.373 cv
430.925 331.373 427.52 334.778 427.52 338.978 cv
427.52 343.178 430.925 346.584 435.122 346.584 cv
439.323 346.584 442.726 343.178 442.726 338.978 cv
cp
f
433.292 403.362 mo
435.203 403.362 436.75 404.912 436.75 406.822 cv
436.75 408.731 435.203 410.28 433.292 410.28 cv
431.38 410.28 429.835 408.731 429.835 406.822 cv
429.835 404.912 431.38 403.362 433.292 403.362 cv
cp
432.206 414.978 mo
436.405 414.978 439.81 411.573 439.81 407.373 cv
439.81 403.174 436.405 399.768 432.206 399.768 cv
428.008 399.768 424.601 403.174 424.601 407.373 cv
424.601 411.573 428.008 414.978 432.206 414.978 cv
cp
f
430.378 462.194 mo
430.378 460.286 431.926 458.737 433.835 458.737 cv
435.747 458.737 437.293 460.286 437.293 462.194 cv
437.293 464.104 435.747 465.651 433.835 465.651 cv
431.926 465.651 430.378 464.104 430.378 462.194 cv
cp
440.354 462.747 mo
440.354 458.546 436.95 455.142 432.751 455.142 cv
428.552 455.142 425.147 458.546 425.147 462.747 cv
425.147 466.946 428.552 470.349 432.751 470.349 cv
436.95 470.349 440.354 466.946 440.354 462.747 cv
cp
f
434.376 490.384 mo
436.286 490.384 437.833 491.933 437.833 493.843 cv
437.833 495.751 436.286 497.3 434.376 497.3 cv
432.466 497.3 430.919 495.751 430.919 493.843 cv
430.919 491.933 432.466 490.384 434.376 490.384 cv
cp
433.292 501.999 mo
437.491 501.999 440.895 498.593 440.895 494.394 cv
440.895 490.194 437.491 486.788 433.292 486.788 cv
429.091 486.788 425.688 490.194 425.688 494.394 cv
425.688 498.593 429.091 501.999 433.292 501.999 cv
cp
f
434.524 518.046 mo
436.435 518.046 437.982 519.594 437.982 521.505 cv
437.982 523.413 436.435 524.962 434.524 524.962 cv
432.615 524.962 431.067 523.413 431.067 521.505 cv
431.067 519.594 432.615 518.046 434.524 518.046 cv
cp
433.438 529.659 mo
437.638 529.659 441.044 526.255 441.044 522.058 cv
441.044 517.856 437.638 514.45 433.438 514.45 cv
429.24 514.45 425.837 517.856 425.837 522.058 cv
425.837 526.255 429.24 529.659 433.438 529.659 cv
cp
f
191.298 282.152 mo
189.386 282.152 187.839 280.603 187.839 278.695 cv
187.839 276.783 189.386 275.233 191.298 275.233 cv
193.208 275.233 194.755 276.783 194.755 278.695 cv
194.755 280.603 193.208 282.152 191.298 282.152 cv
cp
190.212 271.641 mo
186.013 271.641 182.608 275.045 182.608 279.245 cv
182.608 283.445 186.013 286.85 190.212 286.85 cv
194.41 286.85 197.813 283.445 197.813 279.245 cv
197.813 275.045 194.41 271.641 190.212 271.641 cv
cp
f
235.472 286.648 mo
237.381 286.648 238.929 288.197 238.929 290.108 cv
238.929 292.016 237.381 293.566 235.472 293.566 cv
233.561 293.566 232.014 292.016 232.014 290.108 cv
232.014 288.197 233.561 286.648 235.472 286.648 cv
cp
226.781 290.658 mo
226.781 294.859 230.184 298.264 234.384 298.264 cv
238.584 298.264 241.988 294.859 241.988 290.658 cv
241.988 286.457 238.584 283.053 234.384 283.053 cv
230.184 283.053 226.781 286.457 226.781 290.658 cv
cp
f
192.749 404.717 mo
190.84 404.717 189.292 403.168 189.292 401.259 cv
189.292 399.35 190.84 397.8 192.749 397.8 cv
194.66 397.8 196.207 399.35 196.207 401.259 cv
196.207 403.168 194.66 404.717 192.749 404.717 cv
cp
191.665 394.205 mo
187.464 394.205 184.061 397.609 184.061 401.81 cv
184.061 406.01 187.464 409.414 191.665 409.414 cv
195.864 409.414 199.268 406.01 199.268 401.81 cv
199.268 397.609 195.864 394.205 191.665 394.205 cv
cp
f
311.434 526.69 mo
309.522 526.69 307.977 525.144 307.977 523.233 cv
307.977 521.323 309.522 519.774 311.434 519.774 cv
313.343 519.774 314.892 521.323 314.892 523.233 cv
314.892 525.144 313.343 526.69 311.434 526.69 cv
cp
310.347 516.178 mo
306.149 516.178 302.744 519.583 302.744 523.784 cv
302.744 527.983 306.149 531.389 310.347 531.389 cv
314.548 531.389 317.95 527.983 317.95 523.784 cv
317.95 519.583 314.548 516.178 310.347 516.178 cv
cp
f
363.925 739.13 mo
362.591 740.499 360.402 740.53 359.034 739.204 cv
357.665 737.878 357.627 735.685 358.958 734.313 cv
360.288 732.942 362.476 732.909 363.847 734.239 cv
365.217 735.567 365.251 737.759 363.925 739.13 cv
cp
834.469 829.11 mo
835.748 827.692 837.93 827.575 839.35 828.856 cv
840.769 830.13 840.883 832.317 839.605 833.737 cv
838.328 835.155 836.143 835.271 834.725 833.993 cv
833.303 832.714 833.188 830.53 834.469 829.11 cv
cp
601.81 822.372 mo
664.504 823.026 li
670.563 818.235 li
728.639 818.235 li
743.336 802.229 li
798.984 802.229 li
829.244 832.418 li
829.789 833.969 832.328 835.454 834.281 836.552 cv
837.543 838.384 841.336 838.829 843.838 836.052 cv
846.338 833.276 846.115 828.999 843.338 826.499 cv
840.56 823.999 837.041 825.171 833.783 826.999 cv
832.896 827.496 831.756 828.26 830.826 829.113 cv
800.414 798.773 li
741.814 798.773 li
727.119 814.778 li
669.361 814.778 li
663.318 819.555 li
603.262 818.93 li
562.339 777.792 li
562.339 764.614 li
557.243 761.218 li
535.484 761.218 li
530.408 765.969 li
460.982 765.969 li
441.755 746.954 li
392.962 746.954 li
380.974 735.282 li
368.782 735.282 li
367.802 733.985 365.781 732.749 364.385 732.085 cv
361.011 730.481 357.421 729.553 354.819 732.233 cv
352.218 734.917 352.285 739.2 354.968 741.802 cv
357.65 744.399 361.409 743.7 364.532 741.651 cv
365.796 740.824 367.313 739.803 368.306 738.741 cv
379.568 738.741 li
391.556 750.411 li
440.332 750.411 li
459.56 769.428 li
531.776 769.428 li
536.852 764.675 li
556.196 764.675 li
558.882 766.464 li
558.882 779.218 li
601.81 822.372 li
cp
f
645.271 732.792 mo
647.158 733.069 648.471 734.821 648.193 736.712 cv
647.916 738.601 646.16 739.909 644.271 739.634 cv
642.381 739.358 641.074 737.602 641.352 735.714 cv
641.625 733.821 643.381 732.514 645.271 732.792 cv
cp
440.748 648.001 mo
439.469 649.421 437.283 649.538 435.864 648.26 cv
434.444 646.985 434.327 644.796 435.604 643.38 cv
436.882 641.96 439.065 641.843 440.488 643.122 cv
441.909 644.398 442.024 646.585 440.748 648.001 cv
cp
451.575 644.19 mo
445.729 644.19 li
444.882 642.825 442.669 641.538 440.925 640.56 cv
437.663 638.729 433.872 638.288 431.374 641.067 cv
428.876 643.844 429.099 648.12 431.878 650.622 cv
434.658 653.116 438.175 651.942 441.433 650.112 cv
442.44 649.547 443.772 648.637 444.754 647.648 cv
450.08 647.648 li
497.096 697.68 li
602.182 697.68 li
618.953 716.968 li
639.082 731.56 li
638.73 733.047 638.852 735.098 638.978 736.769 cv
639.26 740.497 640.996 743.898 644.693 744.438 cv
648.389 744.977 651.826 742.421 652.367 738.726 cv
652.902 735.024 649.977 732.747 646.646 731.052 cv
645.398 730.415 643.477 729.673 641.918 729.546 cv
642.012 729.413 li
621.432 714.55 li
603.758 694.221 li
498.591 694.221 li
451.575 644.19 li
cp
f
310.424 617.538 mo
310.822 615.671 312.657 614.479 314.526 614.876 cv
316.393 615.274 317.586 617.11 317.189 618.977 cv
316.792 620.844 314.954 622.038 313.087 621.639 cv
311.219 621.241 310.025 619.407 310.424 617.538 cv
cp
547.829 777.224 mo
545.918 777.216 544.378 775.663 544.385 773.753 cv
544.392 771.843 545.945 770.3 547.856 770.31 cv
549.765 770.317 551.304 771.87 551.298 773.78 cv
551.294 775.692 549.737 777.231 547.829 777.224 cv
cp
838.047 851.444 mo
822.174 836.239 li
822.174 830.819 li
794.35 803.714 li
743.986 803.714 li
729.723 818.925 li
672.271 818.925 li
666.869 824.319 li
601.529 824.319 li
554.151 776.527 li
554.095 775.197 553.784 773.682 553.503 772.401 cv
552.695 768.749 550.5 765.626 546.762 765.612 cv
543.028 765.599 539.985 768.61 539.968 772.349 cv
539.958 776.085 543.175 777.928 546.712 779.139 cv
548.323 779.692 550.942 780.26 552.538 779.812 cv
600.087 827.778 li
499.503 827.778 li
433.806 764.241 li
346.94 764.241 li
305.169 722.894 li
305.169 628.255 li
308.77 623.624 li
310.231 624.081 312.301 624.096 313.986 624.077 cv
317.722 624.034 321.233 622.523 322.011 618.868 cv
322.79 615.214 320.456 611.622 316.803 610.843 cv
313.149 610.065 310.684 612.841 308.778 616.052 cv
308.136 617.135 307.366 618.762 307.052 620.205 cv
301.712 627.067 li
301.712 724.335 li
345.52 767.7 li
432.407 767.7 li
498.104 831.235 li
618.563 831.235 li
628.9 844.159 li
628.9 869.846 li
632.359 869.846 li
632.359 842.948 li
620.223 827.778 li
668.301 827.778 li
673.703 822.382 li
731.223 822.382 li
745.484 807.171 li
792.945 807.171 li
818.715 832.28 li
818.715 837.716 li
836.66 854.901 li
866.793 854.901 li
884.865 874.757 li
887.422 872.43 li
868.324 851.444 li
838.047 851.444 li
cp
f
344.6 373.301 mo
342.231 373.301 340.315 371.382 340.315 369.014 cv
340.315 366.647 342.231 364.728 344.6 364.728 cv
346.967 364.728 348.886 366.647 348.886 369.014 cv
348.886 371.382 346.967 373.301 344.6 373.301 cv
cp
344.6 434.885 mo
342.231 434.885 340.315 432.966 340.315 430.6 cv
340.315 428.232 342.231 426.315 344.6 426.315 cv
346.967 426.315 348.886 428.232 348.886 430.6 cv
348.886 432.966 346.967 434.885 344.6 434.885 cv
cp
344.6 465.073 mo
342.231 465.073 340.315 463.153 340.315 460.786 cv
340.315 458.419 342.231 456.503 344.6 456.503 cv
346.967 456.503 348.886 458.419 348.886 460.786 cv
348.886 463.153 346.967 465.073 344.6 465.073 cv
cp
313.479 404.055 mo
311.113 404.055 309.195 402.135 309.195 399.768 cv
309.195 397.4 311.113 395.482 313.479 395.482 cv
315.847 395.482 317.767 397.4 317.767 399.768 cv
317.767 402.135 315.847 404.055 313.479 404.055 cv
cp
313.479 434.885 mo
311.113 434.885 309.195 432.966 309.195 430.6 cv
309.195 428.232 311.113 426.315 313.479 426.315 cv
315.847 426.315 317.767 428.232 317.767 430.6 cv
317.767 432.966 315.847 434.885 313.479 434.885 cv
cp
313.479 465.218 mo
311.113 465.218 309.195 463.3 309.195 460.933 cv
309.195 458.565 311.113 456.647 313.479 456.647 cv
315.847 456.647 317.767 458.565 317.767 460.933 cv
317.767 463.3 315.847 465.218 313.479 465.218 cv
cp
312.904 364.728 mo
315.271 364.728 317.19 366.647 317.19 369.014 cv
317.19 371.382 315.271 373.301 312.904 373.301 cv
310.537 373.301 308.617 371.382 308.617 369.014 cv
308.617 366.647 310.537 364.728 312.904 364.728 cv
cp
281.543 373.301 mo
279.177 373.301 277.257 371.382 277.257 369.014 cv
277.257 366.647 279.177 364.728 281.543 364.728 cv
283.91 364.728 285.828 366.647 285.828 369.014 cv
285.828 371.382 283.91 373.301 281.543 373.301 cv
cp
281.543 434.885 mo
279.177 434.885 277.257 432.966 277.257 430.6 cv
277.257 428.232 279.177 426.315 281.543 426.315 cv
283.91 426.315 285.828 428.232 285.828 430.6 cv
285.828 432.966 283.91 434.885 281.543 434.885 cv
cp
276.491 399.768 mo
276.491 397.4 278.409 395.482 280.776 395.482 cv
283.143 395.482 285.061 397.4 285.061 399.768 cv
285.061 402.135 283.143 404.055 280.776 404.055 cv
278.409 404.055 276.491 402.135 276.491 399.768 cv
cp
281.543 465.073 mo
279.177 465.073 277.257 463.153 277.257 460.786 cv
277.257 458.419 279.177 456.503 281.543 456.503 cv
283.91 456.503 285.828 458.419 285.828 460.786 cv
285.828 463.153 283.91 465.073 281.543 465.073 cv
cp
373.271 456.503 mo
375.638 456.503 377.557 458.419 377.557 460.786 cv
377.557 463.153 375.638 465.073 373.271 465.073 cv
370.903 465.073 368.987 463.153 368.987 460.786 cv
368.987 458.419 370.903 456.503 373.271 456.503 cv
cp
373.271 426.315 mo
375.638 426.315 377.557 428.232 377.557 430.6 cv
377.557 432.966 375.638 434.885 373.271 434.885 cv
370.903 434.885 368.987 432.966 368.987 430.6 cv
368.987 428.232 370.903 426.315 373.271 426.315 cv
cp
374.136 365.145 mo
376.503 365.145 378.421 367.063 378.421 369.43 cv
378.421 371.797 376.503 373.717 374.136 373.717 cv
371.769 373.717 369.851 371.797 369.851 369.43 cv
369.851 367.063 371.769 365.145 374.136 365.145 cv
cp
359.909 484.714 mo
363.205 481.104 379.193 464.11 382.97 460.392 cv
388.302 455.142 387.349 451.17 387.349 451.17 cv
387.349 364.111 li
387.349 352.841 387.935 352.207 375.313 352.207 cv
289.417 352.207 li
276.796 352.207 274.356 356.298 274.356 367.57 cv
274.356 467.323 li
274.356 478.594 278.524 489.351 291.146 489.351 cv
351.272 489.351 li
351.272 489.351 355.02 490.071 359.909 484.714 cv
cp
f
195.569 164.442 mo
195.569 169.694 191.311 173.951 186.061 173.951 cv
180.806 173.951 176.551 169.694 176.551 164.442 cv
176.551 159.189 180.806 154.934 186.061 154.934 cv
191.311 154.934 195.569 159.189 195.569 164.442 cv
1 1 1 rgb
f
190.642 197.09 mo
190.642 202.341 186.384 206.599 181.134 206.599 cv
175.88 206.599 171.624 202.341 171.624 197.09 cv
171.624 191.838 175.88 187.581 181.134 187.581 cv
186.384 187.581 190.642 191.838 190.642 197.09 cv
f
218.148 142.509 mo
218.148 147.761 213.893 152.018 208.64 152.018 cv
203.39 152.018 199.132 147.761 199.132 142.509 cv
199.132 137.256 203.39 133 208.64 133 cv
213.893 133 218.148 137.256 218.148 142.509 cv
f
131.995 639.87 mo
131.995 645.126 127.737 649.38 122.487 649.38 cv
117.233 649.38 112.977 645.126 112.977 639.87 cv
112.977 634.62 117.233 630.362 122.487 630.362 cv
127.737 630.362 131.995 634.62 131.995 639.87 cv
f
175.352 651.278 mo
175.352 656.532 171.097 660.788 165.843 660.788 cv
160.591 660.788 156.335 656.532 156.335 651.278 cv
156.335 646.026 160.591 641.771 165.843 641.771 cv
171.097 641.771 175.352 646.026 175.352 651.278 cv
f
312.95 662.958 mo
312.95 668.212 308.693 672.466 303.44 672.466 cv
298.189 672.466 293.933 668.212 293.933 662.958 cv
293.933 657.708 298.189 653.448 303.44 653.448 cv
308.693 653.448 312.95 657.708 312.95 662.958 cv
f
327.861 708.862 mo
327.861 714.114 323.605 718.37 318.352 718.37 cv
313.102 718.37 308.844 714.114 308.844 708.862 cv
308.844 703.61 313.102 699.354 318.352 699.354 cv
323.605 699.354 327.861 703.61 327.861 708.862 cv
f
296.514 835.558 mo
296.514 840.81 292.257 845.067 287.005 845.067 cv
281.753 845.067 277.495 840.81 277.495 835.558 cv
277.495 830.305 281.753 826.05 287.005 826.05 cv
292.257 826.05 296.514 830.305 296.514 835.558 cv
f
472.533 846.487 mo
472.533 851.739 468.278 855.995 463.023 855.995 cv
457.773 855.995 453.516 851.739 453.516 846.487 cv
453.516 841.235 457.773 836.977 463.023 836.977 cv
468.278 836.977 472.533 841.235 472.533 846.487 cv
f
493.195 785.852 mo
493.195 791.104 488.939 795.362 483.686 795.362 cv
478.433 795.362 474.178 791.104 474.178 785.852 cv
474.178 780.601 478.433 776.344 483.686 776.344 cv
488.939 776.344 493.195 780.601 493.195 785.852 cv
f
454.188 553.173 mo
454.188 558.428 449.93 562.683 444.679 562.683 cv
439.427 562.683 435.169 558.428 435.169 553.173 cv
435.169 547.923 439.427 543.665 444.679 543.665 cv
449.93 543.665 454.188 547.923 454.188 553.173 cv
f
456.879 592.743 mo
456.879 597.997 452.622 602.251 447.37 602.251 cv
442.117 602.251 437.862 597.997 437.862 592.743 cv
437.862 587.491 442.117 583.233 447.37 583.233 cv
452.622 583.233 456.879 587.491 456.879 592.743 cv
f
334.882 668.846 mo
334.882 663.596 339.138 659.337 344.391 659.337 cv
349.643 659.337 353.899 663.596 353.899 668.846 cv
353.899 674.099 349.643 678.354 344.391 678.354 cv
339.138 678.354 334.882 674.099 334.882 668.846 cv
f
376.969 630.687 mo
376.969 625.437 381.227 621.178 386.477 621.178 cv
391.731 621.178 395.986 625.437 395.986 630.687 cv
395.986 635.938 391.731 640.194 386.477 640.194 cv
381.227 640.194 376.969 635.938 376.969 630.687 cv
f
201.954 742.646 mo
201.954 747.899 197.698 752.155 192.445 752.155 cv
187.192 752.155 182.936 747.899 182.936 742.646 cv
182.936 737.394 187.192 733.137 192.445 733.137 cv
197.698 733.137 201.954 737.394 201.954 742.646 cv
f
201.005 765.106 mo
201.005 770.358 196.749 774.614 191.497 774.614 cv
186.244 774.614 181.987 770.358 181.987 765.106 cv
181.987 759.856 186.244 755.599 191.497 755.599 cv
196.749 755.599 201.005 759.856 201.005 765.106 cv
f
224.229 786.989 mo
224.229 792.241 219.972 796.497 214.722 796.497 cv
209.469 796.497 205.212 792.241 205.212 786.989 cv
205.212 781.737 209.469 777.479 214.722 777.479 cv
219.972 777.479 224.229 781.737 224.229 786.989 cv
f
335.227 824.034 mo
329.972 824.034 325.717 819.776 325.717 814.524 cv
325.717 809.271 329.972 805.014 335.227 805.014 cv
340.477 805.014 344.735 809.271 344.735 814.524 cv
344.735 819.776 340.477 824.034 335.227 824.034 cv
f
168.882 691.173 mo
168.882 696.425 164.624 700.683 159.372 700.683 cv
154.12 700.683 149.863 696.425 149.863 691.173 cv
149.863 685.919 154.12 681.663 159.372 681.663 cv
164.624 681.663 168.882 685.919 168.882 691.173 cv
f
250.415 658.024 mo
250.415 663.278 246.159 667.532 240.906 667.532 cv
235.653 667.532 231.397 663.278 231.397 658.024 cv
231.397 652.773 235.653 648.514 240.906 648.514 cv
246.159 648.514 250.415 652.773 250.415 658.024 cv
f
197.411 837.487 mo
197.411 842.739 193.154 846.995 187.902 846.995 cv
182.649 846.995 178.393 842.739 178.393 837.487 cv
178.393 832.235 182.649 827.977 187.902 827.977 cv
193.154 827.977 197.411 832.235 197.411 837.487 cv
f
294.942 77.9541 mo
294.942 83.207 290.684 87.4639 285.433 87.4639 cv
280.179 87.4639 275.925 83.207 275.925 77.9541 cv
275.925 72.7041 280.179 68.4453 285.433 68.4453 cv
290.684 68.4453 294.942 72.7041 294.942 77.9541 cv
f
398.961 295.682 mo
398.961 300.934 394.705 305.19 389.452 305.19 cv
384.2 305.19 379.943 300.934 379.943 295.682 cv
379.943 290.428 384.2 286.172 389.452 286.172 cv
394.705 286.172 398.961 290.428 398.961 295.682 cv
f
204.03 114.064 mo
204.03 119.318 199.774 123.574 194.522 123.574 cv
189.268 123.574 185.013 119.318 185.013 114.064 cv
185.013 108.813 189.268 104.557 194.522 104.557 cv
199.774 104.557 204.03 108.813 204.03 114.064 cv
f
303.44 570.544 mo
303.44 575.798 299.184 580.052 293.933 580.052 cv
288.681 580.052 284.424 575.798 284.424 570.544 cv
284.424 565.294 288.681 561.034 293.933 561.034 cv
299.184 561.034 303.44 565.294 303.44 570.544 cv
f
182.42 358.675 mo
182.42 363.93 178.163 368.185 172.911 368.185 cv
167.659 368.185 163.402 363.93 163.402 358.675 cv
163.402 353.425 167.659 349.166 172.911 349.166 cv
178.163 349.166 182.42 353.425 182.42 358.675 cv
f
329.688 59.0059 mo
329.688 64.2871 325.407 68.5723 320.122 68.5723 cv
314.839 68.5723 310.556 64.2871 310.556 59.0059 cv
310.556 53.7212 314.839 49.4395 320.122 49.4395 cv
325.407 49.4395 329.688 53.7212 329.688 59.0059 cv
cp
f
639.635 718.921 mo
639.635 724.202 635.353 728.487 630.07 728.487 cv
624.789 728.487 620.502 724.202 620.502 718.921 cv
620.502 713.635 624.789 709.354 630.07 709.354 cv
635.353 709.354 639.635 713.635 639.635 718.921 cv
cp
f
607.291 755.54 mo
607.291 760.823 603.008 765.106 597.723 765.106 cv
592.443 765.106 588.157 760.823 588.157 755.54 cv
588.157 750.257 592.443 745.974 597.723 745.974 cv
603.008 745.974 607.291 750.257 607.291 755.54 cv
cp
f
554.674 718.921 mo
554.674 724.202 550.392 728.487 545.108 728.487 cv
539.827 728.487 535.542 724.202 535.542 718.921 cv
535.542 713.635 539.827 709.354 545.108 709.354 cv
550.392 709.354 554.674 713.635 554.674 718.921 cv
cp
f
512.092 677.661 mo
512.092 682.944 507.808 687.227 502.526 687.227 cv
497.244 687.227 492.961 682.944 492.961 677.661 cv
492.961 672.38 497.244 668.094 502.526 668.094 cv
507.808 668.094 512.092 672.38 512.092 677.661 cv
cp
f
490.517 712.747 mo
490.517 718.032 486.233 722.313 480.951 722.313 cv
475.666 722.313 471.385 718.032 471.385 712.747 cv
471.385 707.466 475.666 703.18 480.951 703.18 cv
486.233 703.18 490.517 707.466 490.517 712.747 cv
cp
f
467.036 684.065 mo
467.036 689.346 462.753 693.63 457.469 693.63 cv
452.186 693.63 447.903 689.346 447.903 684.065 cv
447.903 678.78 452.186 674.499 457.469 674.499 cv
462.753 674.499 467.036 678.78 467.036 684.065 cv
cp
f
389.833 737.013 mo
389.833 742.296 385.553 746.579 380.269 746.579 cv
374.986 746.579 370.702 742.296 370.702 737.013 cv
370.702 731.729 374.986 727.446 380.269 727.446 cv
385.553 727.446 389.833 731.729 389.833 737.013 cv
cp
f
380.269 693.428 mo
380.269 698.714 375.986 702.995 370.702 702.995 cv
365.421 702.995 361.136 698.714 361.136 693.428 cv
361.136 688.148 365.421 683.862 370.702 683.862 cv
375.986 683.862 380.269 688.148 380.269 693.428 cv
cp
f
536.17 791.435 mo
536.17 797.101 531.69 801.692 526.165 801.692 cv
520.638 801.692 516.159 797.101 516.159 791.435 cv
516.159 785.769 520.638 781.175 526.165 781.175 cv
531.69 781.175 536.17 785.769 536.17 791.435 cv
cp
f
420.201 731.88 mo
420.201 737.165 415.917 741.446 410.635 741.446 cv
405.351 741.446 401.069 737.165 401.069 731.88 cv
401.069 726.599 405.351 722.313 410.635 722.313 cv
415.917 722.313 420.201 726.599 420.201 731.88 cv
cp
f
382.962 562.767 mo
382.962 568.023 378.704 572.274 373.453 572.274 cv
368.199 572.274 363.944 568.023 363.944 562.767 cv
363.944 557.517 368.199 553.259 373.453 553.259 cv
378.704 553.259 382.962 557.517 382.962 562.767 cv
f
372.373 602.251 mo
372.373 607.505 368.117 611.76 362.864 611.76 cv
357.614 611.76 353.355 607.505 353.355 602.251 cv
353.355 596.999 357.614 592.743 362.864 592.743 cv
368.117 592.743 372.373 596.999 372.373 602.251 cv
f
693.814 73.4438 mo
690.357 73.4438 li
690.357 83.1592 li
693.814 83.1592 li
693.814 73.4438 li
cp
0 .862745 1 rgb
f
687.082 329.042 mo
688.992 329.042 690.539 330.59 690.539 332.499 cv
690.539 334.409 688.992 335.958 687.082 335.958 cv
685.17 335.958 683.623 334.409 683.623 332.499 cv
683.623 330.59 685.17 329.042 687.082 329.042 cv
cp
675.088 321.813 mo
680.916 328.52 li
680.762 330.105 681.236 332.228 681.705 333.609 cv
682.9 337.151 684.73 340.376 688.469 340.376 cv
692.203 340.376 695.232 337.347 695.232 333.609 cv
695.232 329.875 692.113 327.663 688.469 326.845 cv
686.896 326.492 684.967 326.092 683.467 326.182 cv
678.545 320.519 li
678.545 151.368 li
708.801 121.63 li
708.801 73.4438 li
705.344 73.4438 li
705.344 120.181 li
675.088 149.918 li
675.088 321.813 li
cp
f
871.254 708.139 mo
872.922 709.068 873.519 711.174 872.59 712.842 cv
871.658 714.51 869.557 715.107 867.885 714.18 cv
866.217 713.246 865.619 711.144 866.551 709.475 cv
867.48 707.807 869.586 707.209 871.254 708.139 cv
cp
686.322 161.245 mo
687.189 302.448 li
687.193 303.138 li
739.184 357.185 li
797.396 357.185 li
803.023 362.933 li
803.023 633.074 li
852.416 682.756 li
854.143 692.527 li
865.9 705 li
865.111 706.313 864.574 708.193 864.332 709.512 cv
863.652 713.184 863.682 716.894 866.943 718.715 cv
870.207 720.533 874.326 719.363 876.146 716.1 cv
877.967 712.836 876.318 709.387 873.533 706.896 cv
872.199 705.702 870.51 704.234 869.045 703.683 cv
869.236 703.5 li
857.367 690.91 li
855.635 681.088 li
806.482 631.65 li
806.482 361.521 li
798.852 353.728 li
740.656 353.728 li
690.643 301.736 li
689.787 162.657 li
748.564 103.173 li
748.564 73.4438 li
745.105 73.4438 li
745.105 101.755 li
686.826 160.735 li
686.322 161.245 li
cp
f
905.559 716.111 mo
903.809 716.881 901.769 716.088 901 714.338 cv
900.23 712.59 901.023 710.549 902.771 709.781 cv
904.521 709.014 906.56 709.807 907.332 711.555 cv
908.102 713.303 907.307 715.342 905.559 716.111 cv
cp
696.986 169.314 mo
696.986 293.792 li
696.986 294.934 697.435 296.029 698.242 296.841 cv
743.48 342.365 li
744.293 343.183 745.394 343.641 746.547 343.641 cv
806.418 343.641 li
816.277 353.501 li
816.277 621.41 li
816.277 622.555 816.73 623.652 817.539 624.463 cv
900.525 707.736 li
900.732 707.945 900.957 708.127 901.193 708.284 cv
901.121 708.348 901.049 708.411 900.982 708.473 cv
898.227 710.992 896.008 713.967 897.516 717.389 cv
899.018 720.807 903.008 722.361 906.43 720.857 cv
909.852 719.352 910.617 715.607 909.9 711.94 cv
909.484 709.82 908.9 707.065 907.693 705.969 cv
908.154 704.488 907.818 702.813 906.646 701.635 cv
824.922 619.625 li
824.922 351.71 li
824.922 350.564 824.467 349.464 823.656 348.654 cv
811.266 336.263 li
810.455 335.453 809.355 334.997 808.209 334.997 cv
748.346 334.997 li
705.629 292.012 li
705.629 171.105 li
765.738 110.995 li
766.549 110.184 767.004 109.085 767.004 107.938 cv
767.004 73.4438 li
767.004 71.0566 765.068 69.1221 762.682 69.1221 cv
760.295 69.1221 758.359 71.0566 758.359 73.4438 cv
758.359 106.147 li
698.252 166.258 li
697.441 167.069 696.986 168.167 696.986 169.314 cv
cp
f
834.84 262.952 mo
835.238 261.083 837.072 259.893 838.941 260.289 cv
840.809 260.686 842.002 262.522 841.603 264.39 cv
841.207 266.259 839.369 267.449 837.502 267.053 cv
835.635 266.654 834.441 264.818 834.84 262.952 cv
cp
711.68 180.411 mo
711.68 263.671 li
733.006 285.282 li
733.006 303.128 li
755.889 327.218 li
778.734 327.218 li
793.66 312.222 li
795.154 310.516 li
818.75 310.804 li
827.803 301.102 li
827.803 275.716 li
833.578 269.157 li
835.002 269.503 836.865 269.506 838.402 269.488 cv
842.137 269.445 845.648 267.934 846.428 264.277 cv
847.205 260.625 844.871 257.034 841.219 256.256 cv
837.564 255.477 835.1 258.253 833.193 261.466 cv
832.42 262.768 831.463 264.855 831.34 266.466 cv
824.344 274.412 li
824.344 299.736 li
817.264 307.325 li
793.605 307.038 li
791.135 309.859 li
777.299 323.759 li
757.375 323.759 li
736.463 301.747 li
736.463 283.863 li
715.139 262.253 li
715.139 181.843 li
779.238 117.808 li
779.746 117.298 li
779.744 116.578 li
779.744 116.38 779.685 96.6108 779.744 88.6455 cv
779.762 86.4531 780.277 84.8921 781.277 84.0098 cv
782.455 82.9697 784.055 83.1396 784.055 83.1411 cv
807.057 83.1592 li
810.795 83.1592 813.643 82.1021 815.516 80.0146 cv
818.096 77.1377 817.727 73.415 817.709 73.2588 cv
814.269 73.6182 li
814.273 73.6411 814.475 76.0205 812.92 77.7295 cv
811.728 79.0371 809.756 79.7012 807.057 79.7012 cv
784.391 79.7012 li
783.717 79.6338 781.176 79.5278 779.045 81.3696 cv
777.24 82.9287 776.313 85.3672 776.287 88.6191 cv
776.232 95.7368 776.275 112.225 776.285 115.868 cv
711.68 180.411 li
cp
f
704.697 346.013 mo
704.697 344.104 706.246 342.554 708.156 342.554 cv
710.066 342.554 711.613 344.104 711.613 346.013 cv
711.613 347.923 710.066 349.472 708.156 349.472 cv
706.246 349.472 704.697 347.923 704.697 346.013 cv
cp
714.674 346.565 mo
714.674 342.365 711.269 338.96 707.072 338.96 cv
702.871 338.96 699.467 342.365 699.467 346.565 cv
699.467 350.765 702.871 354.168 707.072 354.168 cv
711.269 354.168 714.674 350.765 714.674 346.565 cv
cp
f
723.574 290.304 mo
723.574 292.213 722.027 293.761 720.115 293.761 cv
718.205 293.761 716.658 292.213 716.658 290.304 cv
716.658 288.393 718.205 286.845 720.115 286.845 cv
722.027 286.845 723.574 288.393 723.574 290.304 cv
cp
711.428 290.854 mo
711.428 295.054 714.832 298.459 719.029 298.459 cv
723.228 298.459 726.633 295.054 726.633 290.854 cv
726.633 286.654 723.228 283.249 719.029 283.249 cv
714.832 283.249 711.428 286.654 711.428 290.854 cv
cp
f
754.359 291.058 mo
754.359 292.966 752.813 294.515 750.902 294.515 cv
748.99 294.515 747.443 292.966 747.443 291.058 cv
747.443 289.146 748.99 287.599 750.902 287.599 cv
752.813 287.599 754.359 289.146 754.359 291.058 cv
cp
742.213 291.609 mo
742.213 295.809 745.617 299.212 749.816 299.212 cv
754.014 299.212 757.418 295.809 757.418 291.609 cv
757.418 287.407 754.014 284.004 749.816 284.004 cv
745.617 284.004 742.213 287.407 742.213 291.609 cv
cp
f
782.498 294.515 mo
780.588 294.515 779.041 292.966 779.041 291.058 cv
779.041 289.146 780.588 287.599 782.498 287.599 cv
784.408 287.599 785.955 289.146 785.955 291.058 cv
785.955 292.966 784.408 294.515 782.498 294.515 cv
cp
781.412 284.004 mo
777.213 284.004 773.809 287.407 773.809 291.609 cv
773.809 295.809 777.213 299.212 781.412 299.212 cv
785.611 299.212 789.016 295.809 789.016 291.609 cv
789.016 287.407 785.611 284.004 781.412 284.004 cv
cp
f
812.467 294.515 mo
810.555 294.515 809.008 292.966 809.008 291.058 cv
809.008 289.146 810.555 287.599 812.467 287.599 cv
814.375 287.599 815.924 289.146 815.924 291.058 cv
815.924 292.966 814.375 294.515 812.467 294.515 cv
cp
811.379 284.004 mo
807.18 284.004 803.775 287.407 803.775 291.609 cv
803.775 295.809 807.18 299.212 811.379 299.212 cv
815.578 299.212 818.982 295.809 818.982 291.609 cv
818.982 287.407 815.578 284.004 811.379 284.004 cv
cp
f
843.262 287.599 mo
845.172 287.599 846.719 289.146 846.719 291.058 cv
846.719 292.966 845.172 294.515 843.262 294.515 cv
841.35 294.515 839.803 292.966 839.803 291.058 cv
839.803 289.146 841.35 287.599 843.262 287.599 cv
cp
842.176 299.212 mo
846.373 299.212 849.777 295.809 849.777 291.609 cv
849.777 287.407 846.373 284.004 842.176 284.004 cv
837.977 284.004 834.572 287.407 834.572 291.609 cv
834.572 295.809 837.977 299.212 842.176 299.212 cv
cp
f
843.262 318.886 mo
845.172 318.886 846.719 320.433 846.719 322.345 cv
846.719 324.253 845.172 325.802 843.262 325.802 cv
841.35 325.802 839.803 324.253 839.803 322.345 cv
839.803 320.433 841.35 318.886 843.262 318.886 cv
cp
842.176 330.499 mo
846.373 330.499 849.777 327.096 849.777 322.896 cv
849.777 318.693 846.373 315.29 842.176 315.29 cv
837.977 315.29 834.572 318.693 834.572 322.896 cv
834.572 327.096 837.977 330.499 842.176 330.499 cv
cp
f
843.701 396.651 mo
843.701 398.559 842.152 400.108 840.244 400.108 cv
838.334 400.108 836.785 398.559 836.785 396.651 cv
836.785 394.741 838.334 393.19 840.244 393.19 cv
842.152 393.19 843.701 394.741 843.701 396.651 cv
cp
831.555 397.203 mo
831.555 401.401 834.959 404.808 839.158 404.808 cv
843.359 404.808 846.762 401.401 846.762 397.203 cv
846.762 393.002 843.359 389.597 839.158 389.597 cv
834.959 389.597 831.555 393.002 831.555 397.203 cv
cp
f
842.721 354.8 mo
840.809 354.8 839.264 353.251 839.264 351.342 cv
839.264 349.433 840.809 347.882 842.721 347.882 cv
844.629 347.882 846.178 349.433 846.178 351.342 cv
846.178 353.251 844.629 354.8 842.721 354.8 cv
cp
849.236 351.893 mo
849.236 347.693 845.834 344.288 841.633 344.288 cv
837.435 344.288 834.031 347.693 834.031 351.893 cv
834.031 356.093 837.435 359.499 841.633 359.499 cv
845.834 359.499 849.236 356.093 849.236 351.893 cv
cp
f
839.803 416.277 mo
841.715 416.277 843.262 417.827 843.262 419.736 cv
843.262 421.647 841.715 423.195 839.803 423.195 cv
837.891 423.195 836.346 421.647 836.346 419.736 cv
836.346 417.827 837.891 416.277 839.803 416.277 cv
cp
838.717 427.893 mo
842.916 427.893 846.322 424.488 846.322 420.288 cv
846.322 416.089 842.916 412.683 838.717 412.683 cv
834.519 412.683 831.111 416.089 831.111 420.288 cv
831.111 424.488 834.519 427.893 838.717 427.893 cv
cp
f
836.889 560.109 mo
836.889 558.201 838.438 556.652 840.346 556.652 cv
842.258 556.652 843.805 558.201 843.805 560.109 cv
843.805 562.019 842.258 563.566 840.346 563.566 cv
838.438 563.566 836.889 562.019 836.889 560.109 cv
cp
846.865 560.662 mo
846.865 556.461 843.461 553.057 839.262 553.057 cv
835.063 553.057 831.658 556.461 831.658 560.662 cv
831.658 564.861 835.063 568.264 839.262 568.264 cv
843.461 568.264 846.865 564.861 846.865 560.662 cv
cp
f
860.699 651.088 mo
860.699 656.344 856.441 660.598 851.189 660.598 cv
845.938 660.598 841.68 656.344 841.68 651.088 cv
841.68 645.838 845.938 641.58 851.189 641.58 cv
856.441 641.58 860.699 645.838 860.699 651.088 cv
1 1 1 rgb
f
863.391 690.658 mo
863.391 695.912 859.133 700.166 853.881 700.166 cv
848.629 700.166 844.373 695.912 844.373 690.658 cv
844.373 685.406 848.629 681.148 853.881 681.148 cv
859.133 681.148 863.391 685.406 863.391 690.658 cv
f
701.453 90.8691 mo
701.453 96.1221 697.193 100.379 691.943 100.379 cv
686.689 100.379 682.435 96.1221 682.435 90.8691 cv
682.435 85.6191 686.689 81.3599 691.943 81.3599 cv
697.193 81.3599 701.453 85.6191 701.453 90.8691 cv
f
805.473 308.597 mo
805.473 313.849 801.217 318.104 795.963 318.104 cv
790.711 318.104 786.455 313.849 786.455 308.597 cv
786.455 303.344 790.711 299.087 795.963 299.087 cv
801.217 299.087 805.473 303.344 805.473 308.597 cv
f
736.199 71.9209 mo
736.199 77.2021 731.918 81.4868 726.633 81.4868 cv
721.35 81.4868 717.066 77.2021 717.066 71.9209 cv
717.066 66.6367 721.35 62.3545 726.633 62.3545 cv
731.918 62.3545 736.199 66.6367 736.199 71.9209 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.1.0
%%For: (user) ()
%%Title: (plata_5.eps)
%%CreationDate: 5/12/2016 1:12 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6B3Q=sdP1TH51d4B6-`k'9FcSi'G/8""p6d/=@aZu;6kdt]cZ\"r`&*Qkts^`*rAK;oq(p7#F@JOGBN#MH12s2l8L6$k!c`O
%f1&A*Xm(S;V;ORa9)IX5%j!j:*<k8=D7$[I);Hk%.ealJZZk&9Q%Ns5f;c;@h2PD%B;q<Q03u@HV:>C8?>oe1b195I/*N2MZd/ud
%H;J9t)Ppc_8S\Gcc`$H)0(a_rn8EojB6t'f*='8!/-X%jH&m-TlBJe@r85rCUYqltm<)%7>-%IE)4P73*$4r9BUAK!(i1Fn_uH%\
%a&G7$QMU7qc^BYo_4SF&'FqC23bTb69>)=48>lK%id^kZh$X8SIqq+Es&$,]^[Q.dAYq#MkO:0dEu<]Jd8H8>59$>L4u<:,Q=uDj
%K-rs[>qbjP3\Ufaa\Ju.s.fQ\2MO#\L8JRY/Qeo_BPH@"H+ocV%/@<tVfbopNm9Z[;%*BY83IJUQ(T@^1XkS/fD^M7$RnLAE7D&r
%SN"es%sH5AR*TEMhl6g%BHI[[W0c^i'h%<$U;]^'EtS%p-sQ@.*lUUk$YOb8D\Pi/"!g!79QJJiRO>5H[+$thEHT(@L4.W9r^0>J
%nGg=&4Yu1:#+cj\k/..nbK9"%`=t9QN[Eq/n[K'[/e:"NMct2>n6lQMh[q-GgSn0sMKOoCa8_j,e"6,[^AL4#E7fnO05*sOFQ4p]
%YL("LhET#ZGFFe%X+;YH`IDKNlC2`9lE(HaC\//6%>O)U"YKp;He!]X[3cC]a+%FcDr0/U]am?qG$=k<?F/A^j$-2)9'\T1]a`,t
%<X6p[OubT&#6.e#/^_7*STIJ8(^'aX[Rlg#mH"WV!hPr*`P4`HqPX7@POsW'$iD4fJ>#'L+$mTj<X.]08ObhDQ^XaGMLGg9/Co9c
%0.#8KBLlqVo\Ll4'8WIogHqZ3Rt:+5BqYA\@B+4Kh[>GPLMq@0gMsi)L@)+nlgPFpC\8V$e)PJHG+NASMm_]o8dJJ_o_rZLY413s
%5q-:$8Hq>l$@:gW_-mN>^DZgNe@Pk"&i;,pE(g#!d;e+W1+^P'\J"8]7AnYLXHc`;:;;.D3bc"eiTMM8%qediUS"c'68X!SVg6X"
%I"l8K%0e0_[`Nr0Gdaj.W0uSaH(%0>bYFu=S8QQ1^:);VT-^0+@dQ8i0cp@2S@@dkDBg-,KcItSWKlecn]u)+8AsMJbI"cVHPHK/
%ga<-:d4YCk=btt+*\tJlX]=</O*d]m>Q-,Z\&5PUesaAn;oei?08M6*X3jDM2g'LNC'V,jZK6'_UjWG&<gB@oCD3PFY47RnDg-cU
%oh^!=&-#CA^q\an(LM`&7"=B8A^kcnSY$REg.X*seYkFca#2L<^`56;\D\nob]GnB_)CDu>.r>jRaf2FXm^gS$\-+poR8"<nDf\7
%Bb-M.lc1\mo-3&T8#b>]XY,7[`FWs]]4S%Yc!U^\iTa+3o-[F4!c19:Bd&ZCQ+ms)n^hTPn1t(P5Gs9'Mf`CH:7dDAQ**4%6j[gj
%[@S/"RD#q#]mX$EdjLnlX!GIf)m(GknZ;9!?GCOk7W#IO9\p0F2/tRl_5D>^e!`E;Q1Im4.!1(0ID@teSK)<-/`_l4Qo4c#K6"0f
%,=lhqe]-(TWS'?#eNet]N*;S%Tq<\=DR%dA64U3NAAgMp[pMq*El`tARE`6!ldr7a1<0o#-8>s@c.DF^$m/*D3UX>p=?j6_(3Q=U
%0aWh?46VpEE_CpUe9"k"*Okm9Ej3_>LEoBSk_,g^?cWH;P#[h+])8F*OQJEG!UKQSRbD#6E\iNs_N^N9'GdS$/=CP0_N_*E8taAZ
%?aXY)gLJGR0[](5Q:jKJ$X7LWb:RP@Ke9d<jVG;[/[jcBgL\PS6>'&0\M`C_=EDTGQuRH_/=gVH,H)\kQ7B"$(SN?.@*&9C[Gkau
%c%0c9Oq3#k.%*#Vd]>@!(1-1sr]!J,a'/(PWSd*o9$Q^Ilt0I?:-`]^,TO'EgD4lWM.in_;)T`4*])-U>1I@HkZr6Kk4l)$&8lQ7
%bNl)6@l@\^?BtG63SnY1adJdo,ecRlDJG';Q2m1n;!uq.SXmOLX_,pR6?U1OVM8K!r,SoO[o^-QISlGGiKkZ_Vq^Z>9BG*A>Y7JJ
%Z/uFcra2@MKQ>E]7oK?hL-BD.FNrCD"?^>JX^PL.KZ8u*_dLtA6K@M;B`(#9*TOA(C\EY-4C"r%D]-S^2ACl%0UGDX%K-?daM?",
%QA(-b(-fB5P[i9(5Q\302,:\_%g*bFMmSZ*0[9\3_nhdU"6Ra"JqH)<3$](Z=&Y>+2dj-O0+CRF>48a/oTI.Wk=R6'`d%<DHqumT
%1p@OOs4-8XRV]ZoVfuHf3qe3O7=[H[QeG4*Mfq2.j0u1#Ol`pjnem:EI[dWjliaiB\m$s&IEf9#o3_*&,M-\\Z^i664$bjs[c]C0
%klf>D4/GQOTB(Z:_eC-/V1o`^DP_2n>>i]Yi:'N9Z<>0.=7_L1VJin(m7XO$Qp=3eTGb%C@l)HND?KM,9i&!*'pf*qqB&iN[icbN
%d6kEH^YT:V/b=%uVsm==G?s\uc@W``&*"=#eu[bO/W%J,Vm#t2jL-[IpC#bgicY9H''j+H"A])0k!ed`H%CQeq(:lK8XeI!jg=_,
%6oFiJ,e$*^SgPY]q;G?\OLY\,RSH[(61?=I=_]jIqJf?0:Q$KT71FC-(4Ja[,(qnqDn*uTV+n\TD:_GB!'`oY?Y[o`aD$lH\-/MC
%\Zg1MDaU@UrmYG-:.CWM9VRZlL,7'dB3n%Rn>XZnN1*(a_;E5lpkr_80o=TGDi)bKeo+'Aa1ZOsmj!DH@t&<D!b?1qH:g&'RSK,3
%d?Z$[WBNaf@\!'l4c[?I,46W.9ad3hgd+4USGX+10G1jHp<u@6fkMiV]i)DrDtL4>fZ,[E)G^_m3rp4"P#N4V<msC1'9K>\i.*;B
%)LhH9amk$YB36oj40:sb?:W8;7UufV^fD*FY;JH_9(bDA58.9;:_\5P:-t4t>>>R&HEA'L&j2a7Qg//[XDe62U8Cks/5"/j,7tGm
%rEUq`"bkX\]L=0i9GhI)gQ[PX"IXOT?S!s0B$!9,LpCXkY2AN*"t$=5\&^uM\BRDo9)1C,U*N$:?:<,0kFs4u/a"Aq,nX#!IP/dF
%&>&"<P`(\-R7/aN+rB?j+`/"*-o5K$9LqFZS[g/*39&0*W8!PpOp%1udAZ4k(F@I3bkg_:XgokAgQ[VZ"IXPGotN7S1QOORM9bYr
%>[s483T%gI&nQ;>:1F3[;p<QRr74kAEs9%QIUQjW/5J-3c@3$RBHH8:&s(qEda-DNQJK-50Aj"Vb_!%SKWdBD^6W.7(49u8f+raN
%0)4-q#9XCsm<5IE!?UNXX"Cj8^RM8UPdO_lX=^s9JuejN\XFEK3h&H`He,VN_%usX+kaC5!%tG%c**8A\4-e5?u_/Af-j*E[[+34
%,k*P:7u;9]Pd]&h`r7if(-8Pq("<c[V4VC!Gk3n1[+ks+Xg)FRk,il$X]Yt1[H@5pDoU5:g-M^):K0\KBfdorDGa].8UPMTP\(VA
%1Jj<*:I9_mW\dYkl5!Del*di4b%-b9BdK#.gnL%IBkSsOLAu!;pqKPu)ue_hp`]<WSqTka!kCnAQW[7HDV$iGrWe2GFRjJdI;""G
%P5(67o5@=_T8sQ&beGPJbGaP\MNmVMbW:5+[i4X7(JNG5r]!+7?h1O;14l%7DD&Ib!b^E@3+%hp(t`M:%YOsEN/K.(E3Q4<3[_^O
%>UiY\#BR=n80UI)VC4fLW#<po9It=$]urml9-WBY8iGO"W6CNcr(Y-HDhX:Ca$@QPcZX2hJJKp;(@g9Nr-('Z^JcOC3,>n6M#T*e
%^PhmU,6#31s,K.67Jum\IgKV2g*9(;%;dnp-Fns.cDYAk`r.3AR-u6]]86:>=NsF1jOC3[IQ,?URNNcC8SDq=a0^ZiB2Ge@rg\pV
%]lnDKK*H+&/ARYR_ncg]do)BML?!rPlsm/qVDTW,jo%pheCp^3`LG15n!eGk/$AUu&k\!8>'S+T\&Q9P[d]CW)S7qZls7-CB%9Va
%piu8E9t##)r=V2'o:cm$btZOtK2%G5[>WVuO'8S*oJScsA[Bo9293_E(]LaTPh\jgbm`n,YCum%V<udb\X*;odbhH%^GkRjK/!ia
%>>EjGPHU)nU55hh<-)"/ChON:c81etY9u'NgHc]6PKqH\D:!VB3K8d*9^NH<\-$cZ2t2\6GF>&.1X:rm'gAmVqe2k_8+I]pp$Kf$
%1"D!<A`7l:3*q%=RL@0Z_X[1]a(jRXR1I>rE3le/7<i7^s0?UVbch8^E4juEnM38hiqDI/b_uYg=;XhTm6S=#:MOfRR>DlNkR30`
%1ca$4(Rmrn+CJ&_@Q&1mojSS+E1$<-'?Lp8Am[%Eg-QIfnP^K-da`]"V:sQ=ej;@A0LK%Ma4X9eAmICQL.Y,uZq;)8EqT[ZgrRK(
%"fC$SJa!C%\u<?MW4k)?1B#hS.6>0o<Eal)5#QIV?KEQ53jj3t5;Oe*gcoFIn=doqJhNBeUM5ik&fep5JJ\lHc2.+#H1'4_<kCX.
%DaPnN,\5$gG39AAa+'inn4ugRFrCIhFu$Q"A(_4tmFGER\u@i[9VIe=ZHT#HiNsl%DC%U3cWVVl)Ob=u/S*FS3rq*.FK$^h;TY"k
%U=;q8Vu=+#0c%`oDj_]b=nj`6aJPAP5DF@ir"r"E=SOU_f$^+u42:8p/Gp?kFtsFi`kmck-[q#(O+l.8--Ea/mIj\j;_%N6oiJ8!
%P'h?=2fV(!iMV9*q%m]89IF=.SY1GVH)V_s3l1Q>cn$QL!s[IT$b%CHQ(%Zk!>+CS6r0f4`m[8SffJQOHKB/Gd$TRggRZjZM/\B\
%T%]H%i5qFW1=&OR\a=3_;.q?iTh`;J:_F8Q.*aUUZPb1:Z`),)rck;HRjX>M<UI.38_>+BRiWm_5'k^o-.1IOe&,Wl.k/TRM:G4e
%T(D+lAV5Guj6*5q3UbQc0$^e%E)HRE$ng"Y^6Zi6QkNQgboV-^*2Q5S(q2$S.hOg`P44_>Po3Bl8qOo(fkWK4$'?EP2X^PD^W<b2
%S"u@p><"oACU_n1T--4.iJAA\c%IGcYLi0bg0*'K6P<d8bPfb*c,,oR=E=jcDILdAXLVaRrf,K6!k&':>B@8-4\SKr.'52$k$.u3
%(?XDhS6MA%$Zg1cNJ0C%0^!>73G75%F"S%cF(3Fsl*nI$98:C%UmhgWm^1NE>]`S0`8GLAkAK$E$PF:=Mh2AdIr^\@!WAO9#&`kp
%8hB7;0'Z'Q@9n^=,'SC$f<6Wb0canK*>CO5:AMnT]i;`"9JNKr/sU4cT,WVl]A;>iH4hm=BK%NS9DCO@\[b3:nX5_Z<'\<ib?OVb
%lGP6DS?mNM(>?S=\QY=,4m$VuDk$4ajX$l)+hk.JCGk@'hFXf%_&h&L\3DV[4`dfb%th&ka$ir1#<PTe^VjL33\Ha3WH#2oe&!S#
%-:t](WKt[m;RGH.(C'5UKgt(jmEU\r9)]"Q>OM!('%@g,lL;!1mU;sZe6&N7J=Vr(Xu6'4idkO]C#MFRB*pMAI[BnqYE=iA9GUo?
%rLF<>-;YDNI6P'L"SYuH&U*?@G,lK+dcZ@sbcnr/(OH74Fh#U]@9ogTs$G9(7UM)Q?$VaB``*aHd<m?2$_?LJ0B?7)K=P$?((&,>
%m^p5re60l>KsUY8=q=]pg8KdXNM]-N$'^RQEH1po%b>IV0WmB/$jUj^EC_9GY,3U=P5@CT?Rh@&[GGI>8G&=%\WVu^/IAsolQ):+
%A,S.jiAe^`D'9m36V3\giKsb'=Vm)WZq;)8EqT[Z68m-(Cn+!+o&=/3Z`<Zq*o8V9kODbX0p`So$Z#OmY-3`?joVlIDnXD"8YV'\
%HfeFCS+FKbN=lYdTM37.n8LOeM>rS3.tgU9QMsQu]k#$+\61U@[!&-epR7&<3T^tHS7hl5]/JD[ic]$+\$a/pmsbp.br[cV2)<_q
%ki=O,,\-4"<6=o`?Da]pF7;D?%m/%j5K?2>rlO]S6*0.uV:aThs."A#J>!+A\<C-"%=#UN#]=fD1J_b3P0Y2qV*;"&<.`_To6-&S
%?D5)M%/X<fkS.d&.Jc8@m=]h_o-C4q(Z%_.Pot$3#es+!IZ1\+1,gZSS)pEUA0\R?aO4ru9AObHgKfoo[)l"VrQHfSe`78sENkJ=
%8Z1))<g.o&@0UHF`d.@fYK(H0So^Sq1Y#3$P?ta_7\($c]OgC$Kn]+ol#i+tq0Q!jJ("aBp^s;,R6=h;gM'^*O!,+Z7aThh<q?kl
%Tb94u!hKiRC/+Af5Q:8S9ttuOgL7c+s#m"cZbV/JQ.C5Bb'*X;bLD!?=h4l"WImqLei;p7'`XUPea'UN(?hLW8ZPiuL]@(kQQprc
%?V[H:JcLZ&Ede+*A(HDPN*G6rV%2_orVr<Us/5e`f<=)ph_LbZ0ieGG_L6gbD#N%_J)R5/q?Z^i!k.e?8EU_L$/O:p>,,@6_F@_o
%!<4:mSFD$s8dIG/s.jMdF"AsJIlO=)K2n;I4N$d[&(e3?f76)-dktq\s"JQLn`^S=nl,!43/l(OHM8*Qo`G-h#-^=#HW'a?O.WgZ
%jU_.V#d4NX>_*&VQ8k&49$]\=OFlcY4Zb4FK3g3=j:9KB)c+prad/]9\55iM/-jSo/RQsXZ.,V27kd3;f-/0hC`['UmVgn-p^_lP
%kHI'`o9N.N[ZpPIl*St3k_YVZL&]=[d7"#PCkQY]e'1FY#]#H__sit4PCH,[^hi5Tj.D>&<ZQtlIju*MJ<$*b/3;Z<pD[MFj@_Yg
%O9]Fa&qJJhs,;e6!%@D]`6[J?(GlW`fDfTQ?Soqc1%X>i=uG9Tg![cMpZtDLe(pOm,=#c:@A;!eY,30<kM0uU'+F%L]2W^6YC_Vm
%NbB`El0:qbG[>1F#M(57Z9hcgRH't7MQf[&W7q/N'#f@8.G&<D&'g>T71Ge]M/GeGPFafYgmfg0r(,*KYjH6<4Q9N3GC-I3%'[M(
%8tm9\&o)\?6fB(5Vptac]fD[SJG$Z`cgA<dh<LUg5i6Xuah.4Lq=_%4h#N@Sr?s)EY<b2%[tSN2b1D>["1be9)&!TUoX/+28G'US
%l(^35i$Kd<oB\8bcWVN%S=$-J/,2+L3!$e9[T_;AF5H25DG^hB]n9)I@^;&[(,O`[B%.+GO6foEY;+@X*Wb8;-J$QMHDLrs=MJ5u
%rdVVKHPPKc8ORVllT"d`eq9WI[.mZ>>SF0]m-/gGoYuF8e8M7BV<14]F:k;Y>O?lDdc]QE1c79_V-Q`P<gE`N>P1`J'48"6WI$K.
%/(JG+!go!QE4])K%,T<J]@DgYc0V8^rE_!s<9j1/:@7LXE*P_&DFgeYD:M:m+9dWG=i[8ED-2N/mXq,]FaE5Q;Q#\P.dnegg@ltR
%I+8Ac^X_eL/ip+RX-C&AWa0?ESQ*)LkguT"eVGkeP9.a6gSGBDSqhl3'kmSj0L4+)$PX$igG\Hh=Ql_Zkae*noV*"PoK.&:DUeFc
%MbnS&G>-<kgIa6GQ'sp0h;d-/.>Mus$+`Fc8!#b<rp$>'.^`UI]N26/ILb2H;8cglA*O4l3&;JNQVneEiK_9&mg%[lO9"NY;b$j"
%>$j;O=GMNXY76_ZZjU0oP?*%geg`m*Te<8BCs/Gpl`KbVr?u@RleQ5fFdoa;2+4f'2luZskd8`ggE#DhC53:mYkB:ipY`ttV@l$J
%*kEb7T5qWrL*K.qp+N(n$WpGRJ8*pgM=&@DH/1.4WMPKgO.\[FFLZqq=u/]lH_&_f,ZBKJq7)ML%dMA54Wj`l53V@p]Cb].JK2*M
%[`YF-&k/n0g>W5e:n1]EEns<&Bsm0[<G&G]YLb)b]a[#I9^q?R1`ZbE;R9Ft_60$6$2:2"=((eSNO*,&Vu6+q<=,YF$d%]G(=\)f
%Xo/NKJKLGVo[ru?2bpkn8_o5#iqTd7C'OtW8,uHSQ@@=K4#u&0E`1]f(Ajr/+Bp=&KmZs_Y+*iJk-)1IjGDUM9fL_*^ki6fn2Np5
%GSDuLc,r>Yr\M-(]VS5q_3(&79$shX<T'8P*N0trQ/d>$>5Kfq._qt;l;WAX#_GgR^M<H$^WW*GKF=4\I!%+B:IW"#b->P/@LoGA
%PHM442IS^4mK]"\^S,VRcc\%DCSX43:LL@5eYA'nEmGl=7m^Ek@PhO(),!^YQD5:,)/=L@Y/PC>9k`RUSOBs-[?^'1D4$<d^L\IR
%NU]8^T^BQ<?QB\D4,:j8fGJEfBkM\7CUQ\OC-6f\-;e$$aa.LGXFG#VVkmW'jlU#KlPs^KU)t,W$*?62#Wge77<o..SK;V$]rJKd
%iCL*u[%gPKea#Tc1=Qk6*Y_9p%4JJ_4D[>E_>EhuFhZJ/[Si!E(d>VF<2aT;98otcd\.LuO:Wc[n$o,PYOre[e/RDi9;o_.mFrG:
%X)t,d\a$W'eMNc8K48AirAi#cU%Y7)4l3j/%=kjK<9f4.8P,<eFhUCp!H!I0k=/1rmFBZ#*fG1r,fA$i@WTpl1"EF@gTE@u*7p\%
%=4+0E*0l.$;9Mg,g2;+&]B_?n)Mra9r:B<_1%GUDWToB4/3WBIj''HmP+tSM>1FO1"k.V@6tFKJ5'CsaghX<_Q"gt9GEc*4^L1q$
%UWb$W0t=<MeG7Ei^&trAB+2%Rs5jTN,"@ZHq_u7>jLsTi>2k\BUu;O4%8d-`,E$[G\#okig-p(Ibr_)$SdT2\[:<+X<jbu#,V#/j
%GF;0"AFB!Z(e2'm8N.hVH!HPRWsQi'6Vk[DG[SusP6)V%^:LIeVikq?C7qMji\of;Q;s%@Q`\Qj"7#,Y1Xb#I=Id8B?_jm'5g`+,
%K6;$I1O=utN]+0$NsV1sbO'WOk;CJ@)jQoKCM=Y)okO.jKc6!u**Bo(:9Yb5iH5Ef`!XT"\X"[SZS!SF>t_u_N1%.q0s53u']5ta
%U+;Hdm'1":pc[mb"2*h9)*Flq\^P:hC4j)u%Fh.Em5dl!hSa]efKCm1]%7s1>a8,Sc/dG='sC2g<DerFB2VcnTQRW)"HCrsN4MO0
%AhRGh:Z-]WW84G]L0[<%mCN8fn4oFI:9+cd`Z.1;R[hu+A\GfP1Unj,fAZR,BZG]GgRUSsfFUGHF2DU5*QK[a#`e%gd'.k"!\5V-
%DRZiMcpOF#'@mtjdE(h^R^o2<s'P/8gfG<&n->D)L,=85*n0ajW9K\(69H_=WDW:'2.TeFKVfm]Y+HFlAu3#.4Jl\j?+u?Z:lFaa
%a%n9:rFGnhJW:C#&?qn@#p]^4X7i%El\L66$#`1TfHW-#[a],JZ'T6p9sc"b%98<iHBUNfVbVm9<3?D%IjOc%l1jo/nC)FCLG@(L
%COf`hC4Dum8n`kn=06`gQ-i.hoI`(O?E8TF/R,p3d,9hOo,64f2<\$NM]MWJ%VpOtou!G$%3j9Y<oO8K1"u#Z.]E$:9$N6L1^m\H
%Kt#-07<B>V3o#Xf+%*_`V%<G+&kk1<.D\\u2[B;r)>`q9plIVX8PY)<O*gPGT-SicPPQZHr$Xj`\/aW=B/sGR[9/5u'[=_m=B[!-
%qQn;sGV<jWd'l-#S'#Wh+SUIo!JJN+.P-a7D.g^b=J5IL(?$7`gq`&j\cL4=aacuFG'r7i4Ak+!8N$R^P]1200)LY"AuSgt4Cf'S
%\Ob4"gGWYpPJSANB0'Rab<BT!-a?(#Z27"AO;ph4>h`\f?4/]$U^AEGippr?:9+CsiQkQfWYd1"UT%0e.GgTmHo9#!,Wk(>DQh(2
%oE6PlL`S:0Y+LK%Pcu$jR#*fB7Z\R/d]#*C_bX9NKJcY=OBqQabuSqGp<]Rt3H+k`J=.IMfB=_uO4:Y%L21]MZNmWEr6B2,j`%B7
%%YEb2h1sCHenFJ-MGoT$RP5;",LY5FJC(5pCS=G7fi:&$@!IXb.1m;\r6lLZk`4N$+W@[6OD"A%Q5bcCV/&(&.h!:LG0`gp@d.OP
%l2IGP3XJNklOb/I&OVp43EV5k2g^=]?mXkgU@hj!%.\\*d3PC(d:)o,oKOM5ID%&**?($92`lraUd2j8;&:V40c"3gr/g5VNehj@
%G>(Ur8LGiG3:;>==R%:YIJh*>l"J\0CQT#=Tpu8.%k'1"p8!udU=mU&FPVt3!ODoG)6mB:3ccJZ)fWl+qn0$7InJC8EX>tq"^5"8
%m#7/7[%r3VnMt/>p#fo59OY((gu;3fKc9J:ooj\V?GogBMa-cZB:(&?<(j,S3Q-L-^Kp7D)u+'HT5'!NScY&_OMA[a\-sGNU/Yp*
%C/+,_;O$_%'MKJVcij8F]bV)W%T5/V'.B^B-1:L@e)]GGJ3u#)GO`p8/9n@dVbfZ9(sabq"$5_bWa""e6+(U1hn6gMdHU2\=Xl`!
%:9?\$gDrAmjH>Ag3:M\+-Oq%:C.QtQ+(NL8:(3B,R\*jN<t.S3#_p%Y?)rT=?'8tI-([FA4%r)R;Ob#]C;I<lW>fB8NV6O]`rg7u
%bJm)jQtQTn+.BLTQO=6tC!L=+dZhurkP"U33tLIiKjO%/Yaujtr4'%TqW-%9l.tV4oARMhG.Y*8\D4T-hK_u.Zb#cW="C,ZpRO7h
%GFX"!gM_8-mT\!qMOtsWDg2%h\$0B/HOk5A\u08ur3uUCWcil=o1SrMp=<uj]A7mLXMZmLS&IH0g$2!ZHh%#VEI5k9NcVTU:WrQU
%qU*:/>fFj4R*a(o*c/>.G'j%'T<m+([FIsG<U=>kNdI*C:Ruk26Jf;'Rf-9:F:-LXX4iL'Oe^`VrMobgouBjrP?dtOpfZ-j)kXUK
%XpUf12nJ7n8q-G!^Tb(LWPUL!?\P\&2#6G";`@q<Y.r_iAhSMA9D=&[gQAZMo4>W1I=(;5UJi3>(>[5`\bOU)^E.jMmoB)LACnJ4
%pG9j*pR8aNGGRnRVX_DQXd"%Pp?SR1V005WQ$Hb$>fj]`rOT;*Hh=1s$i5pV^3t"iEjK"'?/].uQ(;[[P,Hm=ooe(/h>b&`qspJE
%XZq((BW\W3WLkU\5Q$NI/8oI@\27V4BCkNRm7akaW3Po(IrjF_I!S\3h=Y[9b]M!SqT@?C*Y)>u^Z`CcST>kVm]!0c2JTeq&fe3k
%s(#h\29=A)_Zo/j^A)(t\$pMKFD'.5Z'[k,n"XsmWLI[O=kS+*q7'k'htp+-5&EI`Pb'psn):O!FAACY:#)bHfrJ[s9b?OC8l=&%
%hqQJ\QaRqNm]:g"i%trCn:a?*-8:F&IWs,4J#kaaCl,p8:3U#bqqUJ^=!#V2DsRK.^XH5T52B@!o$8q[Lk/<nCi*4e^%t'n)6Ogr
%436,r)JGCa&ME$`ZikgAaUtrg/:uQ!ZM?<1DIEFh/E_ZWXdhDnIp:#rf3a!a.?tt1cT:6-?MfKghS%#NjKaR:l>c4gp@llP(GJS7
%H@KtT)u@CMI+UI.=5IPkGF=(MrnH[?Y4g+ChlJ^W>SM5/a#`SGe$#p$<,"c7HH4n^0/EjPa"IhrjiU6Q*P'dL"crk5mI]_0B5^H#
%)5X6k=5)Lnl.sUS]]f$DOW2qXALHPI]^+@86QO&R3lkakLRes@#8bD3X_2p]n7gW&3nX;?<QG9%4C2=8[eqe2k7ulZol0#$0_miC
%m.P.c&0#bm?5.T>B.nA$S#qtLk1@IJojp1ZD4Q&.QLB=Vig%H+`9AB>6"0"dHT?<7**qs5'[qbl?Jus<D\9<9hPhWkDStjV49Xa5
%/a"`=GIm3Sq9;dVrEu-*T#9OYqV0Z\GB\8^<mU_Aa5UG0068gAk%)64!mKf+T?e;1?]A5B2-&At^3?VsH$0V@fX:F.aes>b=?`g)
%(@q/(A*)tC=0.AnTa#b,X+d+Wm:MosK=AdGde`REX#+U@rG2:Mp04`KaOZi!>FC\uGP>O)QRh"pm@DeY/#2TQc2F"iWa7l@DP&"_
%SX&32@%GL:lD*MPXLE>o/90k?]B>?P_[J1_T9t?"M^RtThg`nC>F27U2\4'eGe8a!UQ^a]mot3WMmut:(N>hA60j65Q+^@9f*Y`o
%qNA_\59)g=WS7K[7:G#`G2D+ZHLh"kOuri],!dmTg^@4lE'2Xcqms)Df<#,S0&O"AHGBG6F8Y]":AjBi^2@jPc_[>Wf=/O+M@[&i
%L]1H=\:7sV^J\S&B`Mj`GKLj8q8h'D])I0Efg2e*\h?_NZkpE:gY0iI`X_pEP1<n(Pmm]cir'N4rd+;Q@&7]TVI*l5#>V$P/W$&P
%QS*<ak;W0Ofg"OmU:ZqH#NF.b"_dYs#la[dk9cpC>>,\_&6l+9d56j\i#'W-_]CJ6.XA9=?5'K%7Y+"T1lNjmM9B)J*]$KK7X3<;
%fR7_*_F5!\>20b&"62*o+.k"<?h=i:T[fNEn=PaZFZ4%6V(^SD,I^u0S%r8)iR'/9b*Pf/\N!=]Zpp\V9b1al,bf"341fOJ@&]n!
%a/<sY@QVHoU44rG&Gb86_i#@e9p0!0*;D0IV"ch@:S\F\Rk`uD%;gL&;cN:Ek[f"RkQdPge:'-`Zl*mS'WeS0aF,?9;6Ug_(i@tL
%im:7j(lf28NcJ>AiK$cEZf63llas'BDk\J7+"_CQ%a"*H1IbXfEAOj=h?0$BBs)C6Cp:`M[sK=Hd&t,nj:k2o:I"-_p[KI%O,/pY
%73KgD7X#b`?Zlq??\B%9_RMf+'\<X5B27<tC_jH$"Xd[_<"2iVpmEI"c\l8kli-d@_O\_]'Pglk^>VWm@-p/A1\n*=dsH!cEj[Q5
%gH4MtmgiR0.6<4>3ui2,W4L'm.@E82Xi2k5>&+%GD>>(8KSOotT-BsFZcBG"gM\/cq74]Jd>.YCQf#,!9%gNnF4ADUC`e/kS>1+/
%heqZJBi`<^fQa7CcaME=(0Z@*Y2<Oa#_qX!p.fo+A3K7[)Jb4EWFsO1o"j@WkE3nU$Ik!J+75'7c9?LYMKPh3(1=nO!USDGXX^Ag
%6Nb!-T\EXcIK/M0"rE"$'^5,]L]>A=8RT)j!qfn=0*s0GW=FZ9\q\;2@3)\9^Ka2CN)rf!Sr7Z7oAE6>:%)D!8]-Or.N7U')'3=,
%98i-3Vu4`>o*Ar150pt"rqJJMqSD>9WQNqQ?/6O+<N<#beGn$DREk8LF%ap+U#CQl-]T=uI."_N(JcdkDdELu__l!DNE.g[k27h>
%l8XjBHa'!A3u9!\2LoKco3cgB_*NPEl9PFEm.D.*5K`KIC2^S0pY>LE2Q^'NEJn=CR&rl1g$E=2le<r:rSkFq5'hB[CqmO@$Zl%&
%E<,lYAPI+R(a#pKjXrdRfmjg0SOjIhS-FYqa9AkNq^Z'Q**032U26LYn0NEm4Ll.(&CS5";/+N;4K92P9A7K'[WXj2_bo4+Qd:`]
%'m?$o]Um+F^YpnqXkmFbkdfg7MsTcIm6bCZIH-SpCB+6bbj/?NDp]hs5Fd0Y`AY1HC@5+%r(noPe+MPb6-pL:>$fO+fmi\E0MP*+
%L$_Xunr:&^J,5+9f[QL0IRO>mVcE]NShg(,48V-Uos:+$qPJTeFq,V/AGj]=CZ,dOf(X8<_q*Pel?;@YMs#f7bGuD_Y#@$)<\$lU
%=%@t]g%(\,`7<Z"3rdX`5(1-8E8u!#\-CC.s$l(PnEM/ua7H_:MpC@dK$oD<k0D7NDAqBmfP&C0Z/K47P"6jjc(phF7XiMGYHbAG
%]Z+>2[]6lA\)reL@I59f'g(;o"%+F)"t8NG^&u5W?=Qpkc+U2WP7??[o*W%Do)$=2k2gs'_Ir]*jf;"fddU<a#qk$;F8hSncTT%`
%_J-,pk@pA*#4-1gI:@*t?QTJ]X.CE9BC"e,*<nZEOtHgbn=6]=Gb93*^-)/rbJ1QnrB:$h.263W+nYjHG4%SFc1(I(#$pScYCELi
%2&kQ4+3DG;,.r/O$C#nKh`d(DF)L8\R6/71Q\4lccr`2gpJdK'at)2DN4%`]#$-!6Z$mhX2t(U%4aZcS^XoE4bh@!mV),:s+'rK<
%:0%^HD]\7oG-b7rV5#Lo/7>'NkP%.U+/9$\6qr25D]OmB^3B/;rc-o`hS]*`.Vr7rmbM6p^K=ZG,*aP8!i0.-4LbI8nF(6qmiPns
%R+28CHIUbRH0eL1H&(S550JE.IXAi]$`>Vo0ji^UHGoq(Kj"9u]b^M4d2d)mj6i3M,8@]LfA6I-X_uW0^"s!"D`(J7^OQ6-'QUI%
%p'OL"q761gdrheL5'C:u2\-+]C^+74YK61@n`jSi[^4]aTEC[jous[Hpq5AF4ar(O^4jdCLmIIO6+6,eZ?l,dH+08iQ$`CEJ3ZNh
%UN>TCW79^ci2!is.r(gr8k[&3T45cCMP#heLGW8cQ]C[5nGW/`^0\/k"^)i+Q[<rIe`3j8>j^s-)sH$;a>BOW[71`@SIO$(6*&f7
%pT*V+k$V]^jn<;pXfCJlD-KZfSMe0C*-s^,I]g?+=8f>g4!0(2_gsE4^NCTgJ1g?QIAV.4n/+)9:,8LY7K<9"/K^;OCel4>Vb\:R
%'UAGpR@TP#lQ;6QH'YYJm\5eTXs)Bnr*CP5q0Z&\D-n8G^]-^ZbP:C)RF+_aO2#PH4kV>#[dlRm3P_!Mh;-pI%5,*&G3=fhR3ST^
%0pWp1Gl]K;?7*XVotU8M>J'S,`l_5(pGpBcmiOIFLSn\bfA,VbMuPZ]aL?rZDlY76AalVCMgdj<<*@u4GkLGrdG3\F-dLO71FGLJ
%iP#2]0ea<(D1Fa-*PnNIqIT0XX5*-Y;Kq3t5sPDI9=LBt4YQ/</`2'I"t9'@pMAmJWBEp3YO@'&]D=c"e>Bq_9[A"b3o%i'^3\3.
%HVgb$PcM=GrVUg46/g,4mEWBu]mR6<8WTNK+6;Y)1'WNj'lqi;Aos$.I=iGjMsaeM]aFMkIB.(:I<Ct8IJP&d]u,'HF'F+jTc9$(
%=]jCYS>$&\$+\$eI'E8I%>k'VA0Zh;,4k?QZ=eA>:I/.;rK]IjZR/f7c`X^cT!n*eQVqQgn5j1,fgr6WqS@IR`nJPeCG0$>bKraQ
%6`k%$?OFfp80N,b:i,Qam3YN?Q<kW;?]Qu1nU:MaiVd2^Q)QBqR0Ij7V)N:N,uCVKMiIZM'4gFN_`N^XClJ50fo3NCU#02B_0%qU
%Ai/ONiAH_J=)Fl5^16?8T=;SY`iC[joGja*h=oZH$9q.JA*(gj%kj.V!\s=->BdRFPGKE(U(0X>grFhR*Ch&aeZDT&X6Qb<J%i!q
%lh0u'!BXY^1e!Y$n!n/tO&Z'a%-d6lR<g<tR)V8tp1Tkh<j@uu4nr?G$Ii'?>]rftcnl8Wb'0E&@-QJ2'R%-akCX\opZG%818d(3
%NJA%\])Un\.aeU)?m#1<:7;Y4Vn#:EfK@tm3I%n4Hh_1>\opmDiBFug%oX:mUS`c[_V%_o\*AZY<C%]Hm<JO4`4Pq1pM.bK8ciVd
%C%m6%0hPuILt.]cf?<X1JpFb1]=5$kFC!S"E)p=iJ71M3D>2l*:<)&Up+VTB<`j[Qp,8h`Bll:dNJ@tYqIj$&qW[_YWL(PsT9Y$g
%lg/8soCdk^+c-)GG[5V*8mk<HXS.:l+<tbecEA`]_AG(+%XL.Lli&Uej2Zkjp&u$)EW;giR>`/lN+jZd9%X@e3]0/og"OalYAV82
%>WcoDVBHl6.JN;&A\>GC>uVQ0!?qXAe-rY6<Me]fIIm9:k<@'PcWu"$gdMnCme54Io1T)EbH8Bbgj-+Cl=kt#_k$2>cYl&nF^M=c
%`p3:R0`;M`+GQrabYd1[NNqQm]C#%W]=[m*02/&<HeJ*@mOFD#%R7HNBDj0gm>gYsT&_P@kO-o9s&70fqYfpoQq<@R(UaZ^6'NOr
%$JCYS:P,KeL!=W4E953MHT+aB#dBK<3VU&3g-SfQIK.Joj:U4H<6?R-7d9GO[_AW2m(WAdXpJaib=;IqDY!)9H,&kAF8lk/3$+4P
%[+8JFZ03mk"4u`M"+2<CosI^XrARB;k4qG)jE%RL^DIECMFu_pCtuLmf7)u%*km+(/FIXFqGgAGC$+K9HP11fJ$o6W#fnr"@r>&s
%l*%!-ZeASAUM[\Z.umT_YO&$dPPjIpH?j<!rQB#s>M[3e*nClA]!\6'1iE'L!=@:p#B[%`3HO]\3Q>>XhW%?JYr05/$aLuO\61k0
%I7"ZlIHT@;_N*NRm<j2'q$))igA;KL^H-9C5(40hVHEUMG4<@hDmQiMG*_O^rpk*SD=5)D+bP3iNVsc;Jc3G1T^)CrG1PMs(Kp(R
%>Z41dp1<n@F->uUG.t^B4aR5GoFb85>C(\6E0SC=nD9[R>Wp2YY._TJOBX[URK"C^)WSgk?fs&N.r4soHL>l?%FC'cTC*G[?=l>_
%S&5c;/S,<!*crdj&N-pmm@Ej4*BR_oZ)Ks\1@`"DSo3ddq;@J6Ke-q:X2Orm)`sn"hc;PXB6Ogn?^EqqGUYi<?ehVqd/rFfB4!Rk
%%\=b&)t2XR"#`G2k`.oIJoA<Kcp<Weh_NFF8bM[:)tuNDb$)+LZ^%*['d%>Nasu2CPO;3Al#R^,c,97's38j0qu4P`>10X`kNLAj
%J'"3cQ@$-as*OT4por&Z$9>'fb1l9[nl1]L-LUE!]"qHZa3Cj6KBpO825rqlg##G"Q7OESiPYF+[i6l'V%,4(2'0*5#7>4R9?lr8
%o04\0;eo^i]=i<seIQ_^jdX0$k#Dc']JAWSiGn*PYhuYYC@->/)6-"[4M1/9Sq54p4MVK@+?"]t+,ciE%/aZY?$ln`s6KM1h=+>7
%d@c_`d,OjCs&l)I.=F3VCsl(oJju$XI^>ArS`/.4d$dh^cCk!&Y^RHBoF*t/6f0#4pEqR;e!=?&]#bb6DXmrU=ehFd+#gDas&nEd
%";R1[nUH8;WdjrEs2TU1pM'#3>]q/)ll3+ri^\:aF%`1"M)D+ma)EV7I!3TZh6a'tDJIGjm'Q$C%^*XrXgDRu2F>Zql1n']YYBHc
%+:]M=mD<P&k+rO923k=Ukc3<MgNR<r0<LXsO]"HYOZ%@:;Z$;kg:'61)GT2&g]J@%g!nJB41]"#PQe*NrNpHud7hf9jVk?(^5!75
%IY*[j"*]_/f3oTH9BH0JO)=2s_prQ,>"#<O2B:$T]e.K#fs[0s*AOU/3^,e/.m+#>L[XN<&DQp,T&n)ugU`ZU*@#D=[`;K1-N%O=
%G$8rLCS7lkVHq1_G0,I`MBKEoY%agt@F$OSE4BO?"eL_:kp]knj3[AT">.N4Pm+3o#qtT.^eV\%+S)`g"EMtg6%eE9g[[I5L]q"8
%HY44Bg@]Rl=@Aed5XTYE!=:e+gG6_^(*G\jkfQ<5)H&3eC7'ap)r^%Ybp7#@q%t1ARI9"KB%lc,;h`$,=klL='P%CI2Y`4_8,#ph
%aR]FLb>S5Sb2G:OqhB1-ib^dZAK_X6>]HjK#>E$mbon7X6ABI@SZlsd:Rm2^9HQ40[U%O";p7u1_7"de6T8#,"5)Sr;-uU7-;Hhl
%Tj+IG?pQ^-%](g2a>Rk3P&M&dC.#=h-GlTITQ&/\^/irFFB>"Y!ej8b`g8XDnJc(W`7,2'/ue0Ql?$FRE"'N#?s=$Y322K.2$+R!
%^_U:/+qF`6_]Aj]O,$q4?sn9bO>c$`L+?gIbi&@!C^YK_cS.Mp8;7F<#qGNaC7&rV%#`bo#Ibmg(iYJJTq2Hn7nZNb_(OA0MI<=%
%C\3,r30rd1km/O1om'k(#sa&D/KH3n'-ZcK0I)PlO^lR8HR"-RKUO60_Mqq]%!0>B[1JT8)kW%k/.PG@k2gp1]^T0"4'J*X7,m-j
%RVCMuoJk&cl^hUeh$%Q/Ol`CIB)/DCb\#RcFZ2\I;.kKuUT:)k."Wn+=1\Q91Gq*TP6)+n1lV;;da`ag7a%W^42;&^F2A^/]$m6h
%dXiHH-]Vu=FPtf_C!cAN^\;j^efK9/Oj=>\><^.lh1`0hF[FL+e%,p_9JF'-!!=]k5V>lWbG-r+?<Tk+YrbXT0p+a((F4G:fAei"
%6m%8O(9Y90ltb:-T+72j-^Fa?+>"$n98@;$HOf#u3b_[IYWEDml*t1_Y&9Hm0]3!l9_/m#N'lR8fcEG%?nf$l]0fsCR03nJJYI8t
%B7g49QV_^M\Bf-k8+!r5DP.rI(n)T`%6'Ks"YQ9_])k.EZ=%<2=S\D(8/RM`m_RTs?1'TV>>+Cc6#m^UTM$0P'OV+e25!7eS%?5'
%4@%OeQb1.3VX=^H>RPnrhA^k>&S.@:K;CZ4-]]?p9:8Ar6ZNnT+[Hc8';oLu9,N6U.)Ii<\/Mqlj_L_b)['R"F9l]X;PF9FE]emr
%%-R_Wl@tK,R4lnD"rW?^%k8Huf<I_Bd^F7.E2G)9irXi9Qk-[Ldo@6.\);5M3#G3g35-tY<K7(%Me.\0-bca9NhZtW%#Y1@hP!g*
%#5Y,cko*)T<%3VOJO`n42#mff`q+%=BeCGXJjKFA%=o<N<#bV@Sq[V\#`o//!&1'UbEj=nBHAg\Km[*k"HE/haA>fF0da^>1CS=1
%-<R$r+Wn%,:bcc:hUDk8"O:r&77EU(Qu[?Z3>&C8N<gMkKSBO0eJMLe*=3Y""o+9m#oHMXc40[;>(XUf35L%]+R*`"$^_Q`j:0aC
%bm^e,$2pg7K6jFE0.n`N#VlS(F"C@mi5FiSZNLB$'PWCN#KGcn6nl@6J6?9AAoA;>Ju1oJ*7q?MMhTr?[5UJdYV644FaT[eaCFLU
%5dn0fb.,&IWBmm4ijLl(FI"\l8/+%.3kcn"\Ac#hSX='2cG8dlb7,-YfbMuG^?m_m_(*A`g;mQI=+W;:B::^1C,0lj(;mTb$jk2*
%R2@.Sd6#E,cghbu?6[;iAlbQcXM])S@KX]&.f_+$R#EP^6V9IH9J>0p\0+>eA@"b73!T(UDG=Ml)1lB!L6s-fn/T[[.2/YB=9tFO
%buY?X_C=0VJ`PN*'Qh-lLk5A2kE0W9FMKqB91a37%l?;Hj/sU;$*F9PNjc1NaPMNS61h"%f9.,Bp]J?Kan#s@E3Z`$:<,f_0m)jN
%L'IiZecnHkAKlmF&k@cQ;7osB>tDNE:3a=HA!p48-7ssDf1-TpfP&?`XbN%W9e^CJ?*"<!GEOT<hFO1K2[8o$]!NUU4L#9=qlr(n
%M/ijB[\ho#1CRW2-89D3-/;Wr@#"$q1[3?`"q*uc9kL*/FggGSH$g<D#W$n6FM-$?G9=bn2b"#kMerj!.C;E4>\VT.`]5$o?"=0!
%$ipS!+(1tMFL\s+H\)KRpJA(VAG-G[-#^-JoVo=eS!!nZe5WA*9Os#DEBs(+V8@h#6cr31;eYQeXip,\^'(j2NaVSENcEkh_h:Ja
%.mf$<.+Ca);&V,rjLT-&hh*(B4s*-*>lY:dCnb`%aJ,mabX3rfe/Fu*Tl'\NaRJ7uEq4Ds(rWLf@T-6mRERtOer\)b0V9A/Uqkcs
%@+E'2=I>hD7)OYmjTl*Ra,2IO>M#8PYR?Br:;bN'ROu;b[P0t-#7ZGc"H?5J>>?sk='ggf2C`\Ycm!=^cN_0KYhN!bFBQ;.GqIKc
%Uk7mD9T-D#f+E<ZoJDqtJmAB2"=+>_SF8-n!"He""U]ldYMNpe)2p+\Z&kF2?j-ZI3E'Am(+Jcp_e.Fpdobp*[dU_87Q<!?&LV(C
%&jd7:!+E*FSdFgEn.k<W)oCr_aMUN=@7#n*+"RM"@(71,`/E9E!D%"'=L]#j[.%aBms,\q!oZ&41Jm])C2=Q%o*E!!&M?[CST-R+
%rGOAll9`;cI0Z#TciYiK`=[iJ*rHH$Q$-HaA.5g^/YOMAjL(D:TgoLZ/94Qg@pKAC3AWCL[1*84.aFT9%s\q72XuBlH3=l/Z^;&L
%+g)Eh"9*"jWsL+$g,LoHm$5\^CZ<KNNDe8oW3!j*U3\$n3n%N,#.4RQeP\la7);8i""Qh>a=n^D#_[I=+$Z3t^pBt$E!R-0+G)nu
%1OYt3U4Cd^-_`$0$]6W6n/p`1Zm]<CY-()&+0[XC@CSc9UT8(=KHggoP@_+TmOpJd%($KM)pk-X5*>Z`kA?XR]thq[-NY-2ll;@s
%5uGYX_<eW^TV*K]9ns#_^d&X=+"6F$r*^GA#Y7:rangu'<uEmK*)flDf%DL(0[F-Jh\>qV#eEuR24Q+/Z+cUP6RQAr`N3$f!/r1S
%UhGR2!:u>T8O?Tjd:;1h(p9Z<l,Z,1">,1\bRuD&iNS/p<'p"fLA@ddO_1_L7KH\%BRl2Q/VFoKl!q)Qe8<g&Z[9dDKjq4>Csp+J
%\`iuZ3g4G4,^TbjT+S#_]%@3J89m(#,_m2j5_dT?c9p1FZ/K4#.HLj>%S\[E)40\aS-sS)@-eq@,oq89"9X:D]RWUmi;'&jU<MZP
%m-m?>S<)MnKE6/Gd#q:mY',TF,2,Gh_>XlGNn!`hE\Q-rVAd%K4G,;M05apQ?'N3Q+JHake,pirC,\Fe@ps$B+Y_7tars5]6h`aH
%MKDCB=a5EdmCZ'&L<#(m9.%W3%`[T1"_1'R2/WoHm2-+h>SkXQDm?^9:es7HA/KbF#"+$,m,k6.7Lme7,i#5*,/Ad'7U8dmMjCO>
%`]I_;/fIK\_SQHc@m8$qJi&:\Y`DDD@h@J]^;k5b#[1b1b-j".QS`_Ck"rnq*f'UUEhWOJ.c/610eA"eR94/3MY=K0R]R)'AdbO>
%<+5&+CD[LL?OPSF1kI(Hb8A`LK^%Jh]963,Z_oAbF^,EJ!>ZTCq8+tR@1`[C;*5I]^g7rVl?+e5QlF&<kbg/VJSqgT;LtqFTIW=<
%IR#ZW6MVc<"MI3pDb-3Yn.URbRUJg,]7^"bF_m.-)S6nQQ_=s/83mhf,NY8V2<rF+#qS/D>ShK:\O+%9m?kO.3ZaF"qLXamNIu,H
%aPOo(L<Gm]K0dRTo4F%812+]76Q0Wk@<ZEZ_U<:#>%i(<]]k6K$i1(QmYV8ML)M$R9EpIUGu@GHCl@q9&;gK]3n`L@Z7[U:;\V%)
%D$\9(-u3?Xi%dDhX;G,cGQ8"*fU>,IR-\PRm]jJ9=$f90@%#W?S#f2Dq4Tn2VXoMr)E.k')t(-+0k5E_6Y:T@Ue1&LY"f7<lmC[+
%OmA.@402-7ic.CuVC>lD^WGaVY"79Z#h*n#p]9/?Ym!*M;qT+Rj+'4A4+nYh7pq?L)./s@9Lg37&/Q?9VU$tP9/h!mSiJFDCDA6e
%S:"jJ^4Qo;fB4P??3;sV<%-s?*X<iS6R;]R!4s'W[Fc'V,CjHL-lAmL1"\s54l8_]9r$B8?/"NmeF5U5R#=8X&)\<L5j]eEdQTX@
%Z0r/f*AjNOE[cUn0dpilkWPk8'5R)(D`S18hI$]Un7b9eA8ae$Rcp3l8XNCVJM&g+$R:6GjE+T_[$bW[W-2I?OFqG+q@V'Y`PM@j
%A#'C@Lkc"0[Ot7\TL%W00G)?0#cP/ZJ*LG\#4%o&NNEm'jpAEs30B%K(PA_c+i['b:U:*DVJmkbLco!TPUSrL!"I]QJQM[bX_&g0
%_Xn+W=.mCsnTJ%P2hG6=+Nnc#%7*iK!(j@NiFS,qY+mFYYua=iIW=Fs:`'Q)$Q:OZ(:kOf"1TqeRhRDcW/VS,kHRn-p&KB:!T^Q(
%KTm^FZnDsOY;"+LVJK?o`di_[Mh+]HFhu'(%V`N@&450skkn`K69a*L\j5(=WU/@Z5iE/mKuY%'Y/C5B$\PU4#1ALX@*#_dCA\?J
%7qond1*Y)$&ON"qTn5#O&&]nL)3?M.=V..b*PhOX!lcIrMa7eH3-:7ggV1]'/tdXGN^G%9@5-!H6jL"dI<8rYU!dJKi4gbk!)2'3
%9GnipO!]G[(,l&jLl%hh,Y=f,#kjZ+:d9\=@1Ilt)'XTaIPf\]l#C_<r[C\"7n4h-@d"pB2$T^RT+$4&P.*qJ*MP5nQX2Zo6Q7k^
%DK08"Jg`$t0I)N/J6ZMI&$FJr"&-c(Pn>ktF7F[;52l1qL_R[e]2O4jI1a1B_&T8YA?\JBO:sMu(rm&!EjRU$4)45q>WPG%h$Ykl
%3W_VIiG^4,R39]aM&bQ_XMjAaL*UC[Y$DhT&fWl&,@CV>J/R],6hS^u)+eqYq]\#Y9"0?Y"WN,h,`Ik'MguRHqTQ6Si"7fLWZ;dY
%VU,C8,1:@]K:S#QNX%_rk_Aaa*R'l)6QR(r0iQHlaOs9q<lo<5@0^I2T;&tZ3kp4"im\GC.gb:ZD7%rJ.DY.D_G/M3b=LZ]@O!a7
%oAnC\*HalYbR@R0l5U:Jq77`RTto_;`(0&3VT)l()&;tG)]X0dDJBJIQt7si"dk-,#AEX3^2-8REK28#XMPWQ7!.83/VBQ,fdb!N
%"?dug,U5=`dBR*fM+H>5dNPRR;Sj'P'FnPlVV[&dP!lQt'C@Q1UG:2l!;r&IJ*]oO@MY.;Z52`n9DTrC8`=st6WJk_Dc,;?f$:O&
%b@/Z#bQ2H&-3fr#AmqA!15/[r&W6F`JUUi)ZU37UJgHl4<5Vpj-Ns>3#agW!U3^PeQK,?6:`g8,U<")^3d*K7kD%qIR`T)H@,%EH
%`B#j3>r0u:9g?dJdP4aarHg$H5];l.qWZA0&7A#WV;oq=0KR'u_<<J;F(!?i2dK/S#W4H[EbrHO#()rhR)4e4Eif$e@nC<'59$,M
%d-!]UV/7`hk<WiEkQ.HE\?1/52=`\74;tn-,2DE<F"VO&OtFQ-[_imsZ^o$(@i1D7Q:PgYOi'.Wf\6qslPT<FCsFDk)$;;4*V/E5
%7O^DNOY4g.gk>3/R;B6Nk*GB?R"]8[qI;W".Kc&PELJA/*M;0)W;2NJ))&6J2+AL?]K&=SZI#;^I5R.890P>H:a1D*[tG\7UG%un
%"u+:;H7glloJL(dLE,jl/B@>5';m@s67g;BV/QPGrJ8BQ&dZ"dRN;[>V#rHmGqYcY<_?t(*6m2:aaeh,WN`,FDB!#=MBUJ<iO(pV
%6)oYB1GNR@PAh2KD&M:)6eg'F3Pghc65KcIP6;s#%eX3h--,UgaNkH\>@auCjg)[RCgJL+9Ss\(g3lb'8Oin0&.Ao6/lYO(V[2m2
%8&ANnjDL@EB^$K@&_T%7EVTZ0:18_\Ao(%_7N<c2Ifj)9W,TV6ct-(YTk]67[L/,O0`*Sn>](O]:;gV<DJT[)BZ-mT=MmdCaG[n2
%]gsKW7(gDQmNbJJe:]Wn2V<l*fmmN%KC.?cj,\:+#*XfKSU<c0,*T8_L])tCioT8LG#;jI.,6jNXN:]APFIFD+:<=+gt`RdaDs:C
%S`B.0Th/Q_[NXL.OXboB2FpLIdY0IqK/+:9.J*3CD'@P:eBSUp*e#:)CuL<_m5YEdWKIptBShhq8ILbO.IBZq,r]ime+5nncDgKX
%8Ia".Au"H$K="'"4jCn2Ie_86-)D]sV9m/E%UD1^!*^(rO;s.\8:GEoTbs[/).T-[YD=sf.F6NK'!fWG(P9eCc00`e7LaKcFe[h/
%OI-j]7SpIFJ1E%C@>md5)kp"V6.e%u?e@'L6B3s_Xe9s[$#N9C/DFtDX'kRMTcJ&Zf!\u"]$5U&""cWQ"J[@WY)22`@8eF0i;a=B
%<+'b?ZH3!-@%\@g8jsu!Z\ikPB^QF"+X4J>W1f*D(iBK1@RJN.M+STNP[K$$3#)<TNm4hXG&q*/.QRLTA@(?:LDh1:4e14I2FL=A
%];O_/.S,I3fa%q?97fqWc4L)%AR5ZmZdpH$E&(<5Tco11JZhUXOfn.1:00q?eeeBs"H,qi4k-7C9F"MOihTQd[$!+0#[&Qg5__uf
%4]94D_]`$IR(^^M3>"%9IAr"E&b/-eAWfH&LS-D8%eD0FL*8>"E$N^FP^s1F'H@SjP=?ONBkrs"i1X@VUi&6[0fLdj=_G--_F3`o
%-HO;pE+q2QpL5?s0KD-j])nkN\2'Y40-r/&2RA'F?Y,@.;\_eDDZnX#5AW!s.jcLm'_18jm)p@Q3,&u!`>8iJ1kaO^Nm.oeK[J<T
%m?7]sfFiUt,5`Pg<'YJ=Tdbb)F>n!VG/=87isgE\lI6Fn1<AN+_knoDEl8Q79AY5o9W5U57iQG%WluB-4]&0k,2A#[2DSs>lnmF&
%,!S@OoIsS#o%!7EOE/8oYTXG6E'0QFW(nmP_UBd^.)@VH`IO_f(+]T50f`q!.'&B`qi*Sf`P`l+\[\@#j1=S'^u,KPEtjuIR2MG0
%CM=Yp%T,3[!gAgHDZq\n!bFb^>Mk62/O1N>,o8!LW[Q$K7\D=k"G7g2YLI\g-1a)d:kdW?3T0]'Yn4MB-jKnhA5,gI%:QUn9O`2;
%=Aq%S6]W@NW.9,-l77F1[4$'n%#7CSjChG'%Uiq/+NYEo@FGLMBZOVh`J$T"X%7>PKtc.U!.3]PlBqFa!l5PR]J-8,'?Q&:o^^1e
%M.m;6SR+(9,);,n`9b?*-Gdc0;;kK0`2jnOWD[Aq0ZsEO()f)2&.414JNN<-.'A#6BfYkS2#d56IVap+GKMjJ6X`PmUP9-KjEiut
%3Dgt9lI-g:\"OlOPt97<49SfW3//Q[5]m2i*&,B'"NJ9"$o5V!0dH0.oV/+5f#*E&^'(:9Me4ms*&t'9UEK0dGfY/kWY&f/-kKIm
%o2'c88u@0bhIm*m[S?D'i&W7m:[+l3fL;hF\KPI[o;ius4sg-k=U;%O[]>7EdS-.Sbm:>u,:;%$mB^Bp#V(0<_Y,^:R_;Di6jg86
%Bf2F(l8kU=U1J,YLQEX?E"G$<rZNV%HRaGp\HoH3HUSE&aun,b@9Aah)9j<18WU4:Q(E4c-97g<)&u0//B\0+V5q18,Rc#.=;3bV
%LjWkZ-pl;r3.gpG7-:8:bqEL-&`g-je1/OO1Z`YlERa9=Pj]3<n)j4854fNtk-[2['Ib"H]0oUZ^-+g_[gKuo+^VG?M?u64/9Dc*
%EJ+]:%pWbt2$2HFHa'7iSLre'&O`cgp9VZ,<Fp8R,iL.eLd4=PQ@J".d_[E+(9`RMGGl[(nhn!@*f&)V&8(IBHuVPUbgA9.%C:^h
%"E,ZMORF)]+pnIWZ;D9pF`lbf#cEJ$d5o.IEksT5S-#\EUPO!$NX.IplS%);=Hiqi`7_@Y)RgL2-fsV4&I`m6nEId$-!\nK#b=^;
%o:?MLOU_uE_KX:oLMY9A)+9L'!VOMEj5X>`YQsE`5MOU)-?HslW??:8Gn`r.TXpu),IeSCU;Io0OuS5)";n0d(5LHVF"VR*R_DmK
%R.!@j:/7-EW8kJklI$U8!?l$_@fXn&2JhlH-3@>)n&c6]C35Sk9H\d@X:+usL(dE_O5l%Z3&tmZ?O,NV,=Y:PLg`+IT.#+F&Z$&g
%.:!o'-Z1(X[1/-8KchUfe#`6HY&;VpZ#C=GP7O3=r/L,nV6@IBI'CR#7'Y5E3g+JhQP5ht;k,3u3&2?1JMol"KeI*NK^Y)n!aqE$
%hGAj!>Kl5$*qD*[NWO05SJ6GZ;rCbR#_BbpGUJ1<@/H1?88#m2GhOZC'u[>[7fpXG:V_@*%u$-''kD9P@8:bBL'mc1`e!)3d0'bF
%QYGs3rR1!ParO'%*bXjtKO!TjV_1:s-rXE#!#U9;&a?)-aM.4mfa!PBD5N9u"K16N[7^'+YK_e#,ps98%Fh4FOKrJp05t7fW]?S;
%!Qh/Hj80d@VWWfF-M$@>0d&oP%F2?=2`+Lf6c\pSii+g_coE"#5DsTf`FF7paJ*0L&jnB'%'2E]]Mjd)3p%>(i>)[6%]<:r9_>F/
%KSs96%>H!FRnS`].#=j3_C4Ml(fBN6A='GjTdIG'(_IlSlO&O>Cg^1@hLZJ1Pp;r#`:d1Xk(b+<OM=1h<CVYff#8kZNut=[ntc*@
%EhNQ,nsY5S%@XeB1ZQFs%-84^[t[>N'[od#34;>Y_NOg'Ko<qo43BYIHj<?m`5jS,c$d%(4[)UDa[[;m\l"Z%-5[rjJ\3]dmknXK
%;."IXd#V\J^(`jU4)l\h?DFut-piHrnV_(2:n&H.=@=VI&R[qeG^jP^S4\?<*AW4#dR<R%kgV?5QOHE4$tF9H;?TFF9skdNB+,89
%qt(H9k,.ndJRkQP5qU>-PYGb/#$1MM^Jkd,bIPjl,H/IH'qjW]BJ!/K6HDOak_/XAnkdU4UWX9.Mf*8hf&5Zg%9gL_VS9%bf-@c,
%b-`FLA8Oq7Ka4?UP:Y1==^n'A%^Um49[p>8XH^H5&Z1*#8JI7kM:,Jaq8ss\3%.E+5ss<(52JrXD]uIWr%O5i+L!*YEX:gjGTQ1U
%L3Ptb_DDaN1IDVfVSrlQ0iZAc2%2e+@JCkLPr4"J@#IVf#\"gta*\G/:GJ6Y#u`k3>Gu$cQS/\7`P<hPWhT;XaPIU3AUq=Cb&r#_
%,na`BJY$XJ@<MVso(&`VA=Ecbi$D?I!g2)enXH8q31`hk*5L3TM(lcl8/lT'psCf2_\Ka(7DW\ecHg+"jtk*<4C_'R5X&#AhG1#l
%>5SGXO:k>MnZBM@n#^m5R#QG3i>[3LpiT7;`9<-gkrN'-J-a"*:Yf9aanVNG_2beqQnB#Gl$4]QC,"8kf<%l>P)`-sT!T4]dOgg7
%2%A.2q&q17*MNASVo(koFm+6P%"6B$/-njkk#e6C;0(Gg-=2J&lFce'NogJ8M[03*EX$A%p?"+TE5jLVC!rJ\/u=*K'C]U)3]Cn[
%&/e>m;1M(^5*ef-@te\=Z12=]V[34;JCB6IOg^JfBB$-c*qTqgF]+0L8TE<M,!YLfbr+6L9HH%(kR8l+$X`+b\F0R\pPM/3&UBZS
%LB.`[+UWek=r.FZ&I6*^:FFF9L3UkE=39^_$<aTKS9:mc+m5TOBPX".BF&@7&:?-Hd!8*O@96``]u=nOR$Mhh\DV+&VT@[(@CUZe
%51j'MCCruK.58"HV6a8_GE1h%";"j7WQU,`6Wj@`l!VS#^USC$gb?n&<t68"X*&_O(=@j<;l)he7Q,(0K"PSi;O@/U.,2b/i.h(h
%_*m](p-=U:%VkS-Jh)mXlhQ[D:r.R/'Lq%4=9g;5*rGtOpG(,eE,_nj@,k9t)N#uO6h3(4h6@lM.Cgj<bIE/fW9+N%qQS%?;.52i
%Jar/sbUJE]_Km5=g1+kJab6U:D!a\;5(%Ot'24XC_:OI@+OX20<n\-TO*#'qU-)-)6B$!t9I'EU@:Xf*@!l^p2acVq632kk@+[5d
%+&U9:Jc-'ZJ[qMF/IV04rRI!fA;\9@:ljg-JVgrjZ0oK\_#'/g0jRS>n<@Y20:OOL#/eqE:8Nhj2mH,NBuag`@,[!-mUG]KHSgr4
%2J[+t&SqaIhoRQ'X=-G3`@PGUd8"1;.*C$M_47Gn\tJ/*DO_'>\c*A,R"S@0TA^/`14l6TM3[-MEm@8=.&9"("jg'P@?fq*a4*6b
%Yun%-KdJ2#$&qZl-fQ+TU"`)G-"dL(qP?$g.E,'cCo">9G#umkcD\(Z3!,sDdcJK![3HD@NtOK.&!LL0A35])?5.i)IRO_52T\00
%'[/Z7*05,\q,R3'.).#>moV8\<9N%PH70\l.l'J6PMc:Wo`orE$G;??78Rk\=(@)((#cq5V2=1ePVd.%b=U2o4Ft5fPr)1[1?W`,
%,nhR832SE,G,cm,-r?oc!soU^M5^e"P#F(FNT^lD-Yu"BSjSb?4#iE=ep1.e>?W6b\$RP`OK^fVSKeN-1V9&iUb,6k5h%bm@#fV%
%&FU+;)]M2f9G&gZ:t.Y6;e%TiM`/#<#W@A3n)R.:&CdKLhi\`n0ed@rRX"b068?B://!W`M[.^sFom9Ja>`M5mmk@TUcZrcA6je<
%b,7%SK%s<JN\hYt--F)3<%?(&RfM7^eC#(Sl7eEnOut__KR"<42Nk=Q]SnEI1pDgs*Ci6KV&Nt8e>Su(K):ZWQP3;=9`bVQW_e*@
%ArDH9[!9n6"!h*nPX[l<nn%\.=fp>;0[sJ9cP&IO&E+T?<&3T-cR(cJYkd;?(d4]<s.Lm6D,\\??gJB<S`$h.AE:c>IDAgGgD''Z
%MUTRQ9F'?W6K8JB!J_WtF2$>6&TJ@U\fkFab!Gf:LrJ5[W+eYkd?$^@qs.O'7%*&F%DKj57#;441_H`D7>Z%g3'27rgE"!D=;-G.
%X06a_&4\?oL+Z,B^=ZkO445I\'h=H(%Ej"]S>ngl<l1V_WR0kLi/3>lpeh\<!c[]8.K#L19o<?7Q!,Y+Q`+Yoc+Xmf!_fU7L%k%H
%58^uL&s$d0QnC*0!L$>4<bJX#/3L!g=Qj3oTN"It0SDC#1M)P)q-\ikplqB@<D\]8F9t*'.KL7A`Hm+c%*LtO_T`aF1!kaMB5n2N
%`M3`/%NF@MF2^gNWRen[FnBWPiJtg]mZ*8pk/lf5'G%'+%]9'uN\Holn>&3K4tG*![Y=c/.\Vt+6][P_m[?t0b@76"l\5bNOlOXX
%Kpo$YSBu2OG'?Y`;_4BZN?!&6f.-&,><HLC3Gc_4U0K=ffP<sa)VNTtH<f9mG>:OD\5G*JT2\A&Zpf2)0m"7C7)iW+029.dN3CTJ
%VP:R^-7+"H)%.p?<ts7`<%C<NfB&K;aKbp?#f_aS`"TMJkfmK]-kV)$FD_GRVHenmHh0=@0K4<VNTj6A\=JjZD$qANZ;k?fMg9?E
%]?0Dukt@5$o<GYG(*')+7DXcoR)r4?_="`_iXjA1^qpg8h8SBaHScBS*i*p/.gf_&\Go;^LfCPe7!]RrB%0_XAg.ib2?nNRnBE?/
%V$+-GT]0j"2<,JSI+"h[=V;L);*d*iZ@drf!n/Z0;lD*H/!AB<$pEuKT'<"KLLF-`KHQco7?@</!%?<]oj'pEY](pCU\L#r'^*F_
%56*HL:)^B!%EiR^UROmni]Bb*'_LHA(S9[tkg@3oi49u@^JUsRQt.hJ4E8bs!fPnRB>EhHBDSoa18nM;c#&0RMFH>VT%f&N$)`2h
%M5A0Z0m:Qfn<QkU?%,MoGY<!L1\:j?)$?_Em'rT!/@5J;Qe4^gIe[H8C3bsXMrebk;^=jMVT8!mYf"aC?+b_4R&*AW60758-E"-E
%XX]Nj9Gc`h%:kt*QE9RBjUfM66fE8qYQt#^"3WMs<]m/R@ZlLmTg"/6+&QMlQrJ<IY0[l8WKq?'##gD"&nt;rT0s)("!X$6@Z!&a
%X6l$nJBJl&K*`J1Y7)ocF#:j^$,J?>X[#6sNG0U_CEn"^`>G_.0J\,)_"M:*,!HPI2olqeK=6]F/W;4X<f4j,H',`K_*KY`L.'!X
%*Z<M]il`uQ[p8XOjTLn]8dp;S%7/8_&p1>j1RT'c'?o4mU(joFW8s#87=J-!XHe=]-("7?5:e<SJOremHha+&QR9@AiI!l^9c:V'
%(d8/9[c3W2";cj/'N-H=D%`F.<-`;4=dm>g/=&!]Qn]Gj&qZ7hL=qG!/kZuqYUI.4$@%)1m\+Jf%Ok\pegM&]]A(PgEC5/<\X,ie
%VR"3ri3;b3rT1o_R]!$IMG9VejTej2V3Z2(-'7]M7<pC\-n'an*efhIk)4bXCrJdeJ]Qti9KA^JPW@!X]e<eEXSuh)q&PJ06)+0A
%=LbAMUi>FJq#/XcV/Qh6/ItLcC69m&I!d*%b>=;$d.PAE*>FUW]NDb>)!XX!M2$*HM4$-$J?Wruj!X%f1TV`c2^fRp"N;^IT],1Q
%d39QbOT!.f)22IP^no:D*J2_^-'ZgZ9T]\cQenrH&CuC'V,8:"`V5aaiEW"i;P;5a6'O1c$W!)lqGbRmSq2^6'M(&p"I+h&L5IZ%
%6M2.5AS?^X)MH:J#h^^9X:$^R3i`4@=+ks-.L:9_00Y=.5s7_;M2908Nd>8K#q?<9)^VpC%;h6!W!jJo@e3(9E.Qte$6I)5s5H2$
%A<a['aO=_J&@iR`\cl`093+:bD@n_\KP8#3X2:97Hg48]UXDsP&^4oa6VqSp,A=TbiGcr2%\rqpp[jfe-F9t_4o/G9/?*(,$P<VR
%BV`Z%plJ,26s0`s];U1]d?ao+M6Jj71sWtRNpoet5SN$IM->fqV-XcKb<D]f5q(=4TsEo;W$V!aekG]OlQ#b!TNFV)eO$5'iX7[Y
%PBsK#J;pD?l%,Rc*ddha!LBFUPY(pYr5u:gV/RIOjHk_+:?:e#ep*q87$r_MVoQMN[M(na5Gg"']_'l3J78\%^]Ed.rbN[-kb0rp
%`tbmSMI3Ynai:':<'eSNqp^?XA&&(mXgAcO^I*X%\]cn5R9k$$H,o],1l*-b\\NK5qUu^&%$d$anM>8dakXg9e0oT_\E4?[PtH&7
%U8X6+/cgL69Y@+>+4j&@5p`q+V!YcKR%tk$W"/5.Ir3"Y:!V2&\f@%6#S#cYD\Zu#]HpY]"A@f#>$UHdqMMJB+TD;<1DB?n0Mm9B
%/q@l/ip1[<QXVPN_`jF>.5Us.If]<"_8%`WKtaIZT!u\jT)8AUk\Du*dj,X/7$-Lb)?t][C]qK6i?E'G0"sOS>@qj\#&bNIrn$C`
%M=5NDXi&XDd`:RHMC',V`N"ehIBe\H6;=J?^_K^`9H7L;ogH>:Jm-A"!GYN[@[g!S@&ORiOh#'Ciq%7#P$e)CFn+-bKT_)m.@L=i
%!+Lup&i>(Edr\$[K=[d#Luu($SlPCdg[p%[Ma/2!MiID1W"QR200WMFV=d^9>*GP^!d6I>h`B/[GkGrQdMulV,)Ob&RPJq+/r>3C
%M5!:,i&^[O9W>n^'Y;<&9sFMFmqLk;[*]<A4n/8O2+7[>7.5r&*^3Zu/mu*hf#+1=d+<R^Hk-&d/^kGW>&@Y'oF2)[,U*A\Lm.6.
%m[GAW`F(tb/FH#V8Zf3GkJshEI4>;1S+:&uGS9R1*^U$qA'o+?<FHgff+0+u4\%G"OW)_`&Ob`bbCXo9rY7caX"d"Q]QO"`(F*uG
%n/ZWfn5SWs!2/esl8UQ\TNn->Sk/NRq@`5uH<i'1)oSCO=&I$bMa'0d:h^ZKZnd"M_&"1P_(UjIL-OKK5u03`m4Qp?ZS4"l0=hC]
%#.mrp]UO:Z(8`kFK,#=-;m^Z_QK1C$T5D_Ce.sfS;4nKh%VZsa'oIrEFot3^/<d.-@or68X]bE5^p`%f&;d)`BTHO5*[2X<?j&f/
%+<CYsJPoiF'SW5)Y&kt/%Z9$$/`Bom/+Lt7kAs)SJP.mh&KHK#BZCd((>A::a[XP9*FJoF*3I&VEOh2:*kN]+W.o"`Kj@d:&MB8`
%i<p[=pD1LHUkN:C-dBs=eA>+&VVjE.FYBb&9Lub%:_A_!O@>=5j"es1QfNa+F'LTQU(=Jq>WiEn-XA8+)(bLC;S9MI=b"XR`&EZh
%gO'Dad8IiP,]ET7Z6LuXj3)YaoTa!SKnW0,\1r\p-=hggc51e=5W%pc`I\F?K""ifRp:IL[5?hl<hUqVkURB`5_d(HfiP4>%JIul
%7<!sZZS5likALhQPfh4RiRa2d9]WVkq&oiuP+t0m(d&Od?c,Za;c9-M/+bt\r73h&fVoi+*P<_0%X-Ao"2XFN(uZobPog[?TkYi>
%YRE$O7L4YW&K=)s<5K3Y'&f*EXY0Ii%o,D4Yd)Rn85dd^puC;bQ&6[4HKjH>iW`9*,9c1on^4`9I34B;g'6FWehAY$5JWNpD9@i)
%@>8uhWYH:Z:b6/GEUGci=q6jQ"Ag(0(9qZ98D;%,?P\,_([6pI1bP0NYVrKWN1&"gf54.GYXMXN$+Yc"?C2sunN-fG>c2G57""@d
%18iMfFZdJlLtU/k;].l)$'k'.ORCNhi!R-Le\s:&eC>5)f>BVi2bbEa]/lI)56BT%(C;1++Mjf/Dt,dO>s(,nBZd1^h]m6,d`Vp-
%8)dOCK.l8`^,=R`XSb+-kY7!h.mX#K3_MZ[p:9m"*,7M3*(W>3_)GAm0BBg#'j<>Q"@XB`/[q[U-VAR[:*imH7@m/5>&_fl:'kXd
%aCmiB8'JL(-j^ag#T<?#bhle9X3@nJ/O9aXSbZdNii+/TD#1:r(N@<QZC[@V+7AcX6/,Z%f;=V-dM9ep^p_5>KI8Da/Q^L76R[F#
%$Lsk=rAZ;^(;uaHVepM:fP$K<%O"fM>O'dn:fNg!?NQ(R!Dj:a1C'tRdT;PV72/7SM0cAP*Y%3n3Q`8!!e8P@ZLB(m0Fr`udNWK$
%nADB\QR[Z_m',19L$PJZ6<^67`/>N>Ih@l0(^e2k&Q7I"A\.,nOo*cpcTpCU+csSh%qP(U3df%JEPWF&+DDHDU+FKL-Z+c;eI]fp
%ZQ;GVjL'$I.fn^;Zjs`Mpf=$8A6!+D831Tdb)^;]!,%#9+ALNgd$+tR#Et#?E"j_U8kp:WK>b67ibCnY1oR6KL=pWI4OCr(6]R7)
%pi/k$`'bS[nn>t<?0Q?j5SLOsq5G@gij.jBrJI+U!HmY%T*Q`h(N`0nIgPCDifj+AifZRjVR+1dCN3])eM'2pCU4S:>Y[3-,d8h.
%aq<OL.Qt^/;3.VS<pK",,%+r[P86]C@iU,<-$#F3+UJ)QI4pr9!_<RIaNgOKKV0)o>?h5nbR]#U9%VX+gV_t\7@3gc+k$;Xpa^7#
%#j>JABH#=:4`"\d*AfdL/\D`J4&,XAU3QGI5qW""JS>HS`>,dJ/c=ma_:=>RCXH1:i\q2q(:6=97LY$>PVtb`794:f7#$kdM^->j
%J0,'+Ko<AG(D0'6LKMs\:k_7U;rrZ5C@aBbM=]2OQqUX@;I"#6:*`-I4\O"f^3"l0*:5&(9X2o-^CI0U](fG?DRG>XEk;9E_O)j*
%GtiOtr67D.M>D*\W5ARfVkipP)f366)Yrto+?P/s\>ZAMZa/gOK0G2rZsP74OP'Zhb:Z4W4R(V)peqX#g@EiACe@=\YHg-rW3EB*
%!?XTuE6#iLiX1paUVrQIa:5(Y!3$UL74"2+1TEH#[mGI,LNF3R?:'GjIrt-g`ZslZbmF<d*U$G4Ln)BN+('E0dAEFA7tK$)43[*B
%G,FmOiKrP#do@O5X<A9OFeK#l%Msu/kZ^H`1+=YfDFbaHJ"D1TJVD:4$EPbB3^ARsec[0,N`QlY,=Kg1$fCZ(>TQ.]ib+:"I_b/T
%h-LEsLBLEn72>)>_XO&A,dm,%M$h44?hb"3U+gKL$r*%5_A&7XWQ@skSu<f5F_=,n*)6NK@Hq_5`I4Wcf[4Z8mgB%1c5V?<cfPB\
%%4)q?E5VI2]LWlG+DVI&A%6=_]BE+hN't6K/mfK[F-pW<K!JZ5BLcbqjM]Hb\(`TtO!9`:eFkc&%*&%_j,]l_;#*M0TXqK5n=^-1
%D;1EM'eO`EN"X#efs+3$Trb8.qr7K)A4NnYk=b8"SeT]l^qO(Q*A='::PPoY,8AB]ZD;=JmNj<W"@@UA%0FN#`SI@qTJA;+9$a.l
%6](s7I%Y@acoIpZ?rqO9i>YLH^Wp7dYlSmjkl79\1Wbbb=.8aghB)(hnj+JM:u_]X;=5WYRcUdI?X]S;P>m9S'l%oPAVc>aef1rg
%,2P`p@;COZXYFt+,>WYS1DH>5#Klt#Z\mfYD$2nC)pe:3CICAZO8\Z0"QjEnOOn'']/Hp0^M^:cpY=tS;\B4OSu7$\,,`\'/W?%N
%AjTff#)9$&ju:L"HloJ2q@[+?p?l27(pFd[?7=E<6&6u/`Eui*e?.^FA&"ee$g0Sr"`\35,JMd@k'-dflf43i*H1a"$W6FcF:1F1
%qpr)ZOUH9gHEN)"fB)_]j3nt[YWII]iZpg6POP"h(2p,\n5mi:n3XCh,$u8PeZGrAaU3oHd2?sjJpcImL`0gN])itk8G,FsN)))g
%]K#C:l-,j:&"DJjM@gkmB)HVUjbi%We]lH?mm,iGP\3^'i9jmd8iP9no_$Ws1Miq]3aleM+UEc(DNS4!;a4$`,*^L5q:9<jg(q-?
%UW#[(UY@ep]gFe-,a-(Wpj!\lo-?ZA#j7UX%qClqdEBg'[FTCd?ZD:J&0lD>H'D-!U4"Q$haR7p<8%ID[BGtFJK@i<*2SLN8)nEc
%25-A'j_/!#iRE]8mBa8tdn!Dr`4bmbom3<gKGLCI;:TIqHFLNM4PADudeVCAC>KTU,R#n2`-e%)ZnQEs%+3_?cB(Z2JVrlPPPcT]
%%OZAo=1Hi(<UFlrCs4[0+!ji!F;q-K00QA:o,\]g*CUJ1.;YZ\%^=KYNdfYld#UiE+feY[PbG`(>p0^BJlQ%.,?<jP*m$12B.p:k
%*:aBgbYg#:E=g'')uJkO85BjO6\DiR0fmlKfHkY:5'9O_,dB]tX%Xg#\>^LoSC\]g7FccO$0d3Dge^^Z8IP#^'Jcb)qR?HL*!+NY
%3S"VfQ(7rfe#s^,aX^MAY^HSD[aQ=Y.ca_6c7h^JQMJn,P2(5o-_*18!1]Yil1D%F@#B"e9!#S'&Q%OZZqXkP.R;8)2Z%67Q8i3>
%*;#>O18:oDNnM.,9N*bnL[[ZTa/!td_I*j23DKhr&Im<+6&MNsO;u#qr^`gRN/K'@#+b%!3@!-MKH.3h#YG+/SRciGLZ1%AlQJh+
%$,Ydrag_LaY6[m7W"5GEAAuJSUe'`Xn1S':rE>!)8H5OQ_XY#,8YmNbYc712?6+oN6%r]td`YD)?M=Ub]T;KTEC1ULTNJfoF@gZ<
%QO(#R.][W>\QA+Z^^F'n`$m`oa7sNrBHsrZ\(J4U[ka=d-<.A!<`iQ34*?:n.B-`GJGfiopB?H<R><fs@k^T_8KA;?3!:gTIS`_;
%k)RPl4+%W=*:h%eGDI3H3SB8@35K&V'BA@_jQYm`>O@"3pmR%8dn`DS)7$Z`a9e>OTA\SQWQ<qicb;W8lh6_+.$1fJL6>"]Mkpst
%f%\bNi:upp*:cG8L:LN0A4"To#.fTEe^91lIudT7b2TAF\sCD^Db(GJ25]CO\I%`2nUJlH6XN1N9WZi3p7lk)Jh!4ViQPi`0g.._
%odFt\oJ.f!Mqhjs]jXk,1VD@4ei<'+lD]>4Cp2T6_%)Q@KKV:&q!]T-SOmK?#k?<>0ES.f!L_h;jP9*XieiAYOAE+ag#*<..P;F'
%K+*Vd<C<SV#%J\a"[7A(b9fJW'S;-+,Ut[GOe.<M1th*OIepsbLK.1C1<_c/dDik<bJAMi.WiR#qJ1"_jD^([9hX!33ZAfXKTU:d
%@"&'GU1LKN.rBl-[1eqpl_R>3ptOUZ]1rsW/><#A/Yeu*!?#SZPat^E9_[hnO$$H5.K"Flk)Q1Rh.a#N.%!piD/kX_k5T1Z)T2&i
%jTeP$ZJFJ`nUYIpOeLoD_h[a7Ck(BJpR\-$<0Rl1`_FRjVhK!]V+2JrE^kfgec[)9]r':MlbdM_Ht4P\<?2[hOr6=Hb)/<P6f.O.
%^NkHS@gp1-fauuq)/[:>gnZ58HF>#C47&[UZWC\"hVg!,IhWV*1QC<e/43X7g8)^>'+%>7H8fgup#m#@$n^Qdi*"<J#s6##O9*cd
%7#H:6At1X8KYXHRqN@FR858@bN1+`g1'A=RT.ang`c4B.V.-GV2)=%R'oKmF6AnmXQC18pR0lWuXQH0UX2`'"H&XJ2U6:=s($ZW0
%UW[DSSI9A+\R1Yqq9itd#aphN(6lm7qggQiDX]LBRX)GnT#]g&n^jh>i9;4+;4h3F/:n_p+"e@U'3KGV*cWot5\3MUfa[Wt6q*3a
%40K(7U8lfmbYs?(r1I5[8nl#\&0L$(UQ\boJOT5t5&Ttpn:k>5h)]g%$'-5YXL=`]=<\rM0c>mS^:gGI5OJ?BLo?HLX^ge<9sc@<
%G8[Wt>&6*0dOH\_?C0WZTm=[(eqNO?S8S3:`W1V\+i)WSW[J3Q"X,q%4%PQ%N,tMRoZbP*jI_:\5!LZFM(KuA,+ui@40Hm_?]Q9>
%4d"9=EG?RQa^]D+0>(!d7]C$H3CI\$r;8P1X=8c(8"&4'$R$Ug>V"Mp0<U`#E$89-MQS=(IR/)t@EO!%F9?&Z.]n^W0ZL$AQth!>
%_mc'n?MXMbcrZA*H`LJ:9.5M@8g^H"7B-V(/33:Aj71u(J5"W)9)?50Vh9>6O'hpH>L$L$):H]LK*F6AI<mr%rO7)"XLIB!kPm<g
%\)Q48&gT50r&PT>3Lm6KIh)WSnetclVO-t=a,HS3OuUEX)&f)%-&*4-Vkb<8#irW'a2s!o7C\`pAAX_[*pbgbr5e>JU.j*Wjb(NE
%m]rh_NkHXL-6LR+P5`1-Oc7:Y[e)+k<5&k%>`uBg4adGrYnoCQ%J@=sH4OXB1"KQ)BU4MFN5u-U;u(YrTaa_0/"c,g(RC;oXl^N!
%",iBhGdWEGg9FT.+TA"\g/SU?o@,fojLZ'\(&+S>W8/mN<oE!g530&!*\LD(O>%PjiL1Rk45<u^H"Zf=*oHhe*f4UuF#RpEM3u=X
%ZQ]S\ilu^qe5V%ol[iB[q:NiDQTK;,r;8PQN&9("#ORfC]tu\NPNg?22*ig72QNX%EhF8.)db;(Ot[dd]Xf3QV&s^j54M?M#WQJN
%cgq:0(,4"9PdQV?7HULTgQl>uG50SS3-W4577K29)n,NP``26--63?,WCRZ]'s'1@hQ`E6JKldorMP_nDtbF\G,p%GZ_=/8WC*;+
%pC_Z"cEO4mZ%_XIB<o5=q)MN0Ll`Q6("g;o:CYUi@t5^]+o(QcqhBg'g&-(8[beQl)A:G=MZu'X5<gdgYMe0]MC'b+o?d)aA\BO!
%4>+#K+=q-$Chgj*h_SArS'lmT6ST!l'-u&#83aNR9^(`oX7Grq>AeHJSZ?Xt?'0FO9lrU*D=V@L5i26TX*Ge])Yjt\rVNrQh`_IK
%Eo]Mu9_pRQIIZ?GhkK"-5&(]2KPj;^/)dd3Zh?Vs[b#Vi-sPi_WtcoBl)c;=\DMlReY^EOlrl`n6BVlN<gQWh&A&#VdhAMbLeN'b
%_q3U@I-,1N]I;QUDU#sd_f(SP#797%)H^q)6bf5tSHs%*O<i+TFPhOaQjUM;,qG08-<""8BS_rgqENe?%Wc6tKWD&6Dst?lT7lg'
%(aiciSLN28O,7Qh=M;.^E,kO_gD%,m4<ND;/NLG^6b+UtjjjIsG.t/BF'k%[.]o2G,2mYP=+X+'q]oLN1"Vl-6%>NXQ/<M4ng`ko
%Gf+o4nADt.ja.K$:tA!9F)>#g:34j>%2Zpudq>*S\Iu5Ho)A-l$>\2ghtT+SZ*k*me+*`ZiU%KnLM\d`"nf/-be.B7+UPWu=/VXC
%_5c+o@"=]7PJG]7l-\(M<(8GqQE>Grp!XK(XYR'Hi\A[SKJ(D2r$/Qmca5E*[V?(`/b.l;d8V+)aVlkc/nMn#)G.!;)\(B;5Lh71
%l,'@=PsJt^1mg>.QBm!I(9*(_0(B)Ab[F!9L*=ko9aPUT*/u@0:&2]p5lql=Hc#fu,en0+k!2]D]I's4Yi8GipSr5"]JaFVFZ<^E
%#*h5'Y;!N+8U@i[Q6LTi(hM(tcm`C2OGN7`_nX%";fl"`(0b,H\62UmGO4Fg[sU;f8j^gg[fm3e5qtH>Q0YMS6`g'gCJgJ4P-gbf
%lrh5QjZX;OTI!A=%%eZM!P]-\I`i'1N$WCsh_eB:fJ#@g^&mVA-\KeUmRiXSML*U47Z=@ngHci<&%*D@N79o0kp$FJ*kb1ddadYt
%SkNpY#/PW94RJ8Y'(MF,in342)RWhjhV6_:@G<eG%%%?]FH*7jG'WoHVV4*IT=ipZnu#^sb.Yk6Rqa&7B]pjblHj2$rG&_.-bHK?
%ra]Vt6^shhR**UGK*mk6<cK&1meq$L4;O8c1.(SF6:0=?IM@*C#OKdEPb?d!>;NM2nG.(s1i?4)VA\^eq<[k)g8h:je&%\gYJQI/
%G;npJW#o0H69mg(LU(Ctg%T+!E:?>O.HS4jO+mg>-EZ'?ARfs\+L!X[,mCA&:2=c?X#-0i+ub#4[4?u?$+Ka6j)#(2_KudOVT@di
%3$I-cAW:A(h1kVWkU:*.g3kqX<jir&UPaNpr'U'coj,<u>&.UUU5^p@m<5-MU_E?K$p'Ef_)tg8QYtOkX=Lk7_83K-nH^?"K]P;N
%*JjBo2^`]ajb_kIRjIHk]rp;frqrG\0k??Ejc\Sc$ZF1:7bkgoV&%:BZ25)u:^^RRA$"nY@[=Fi+2pf(ZWgYfd6Dj.(d@bY,Uu`_
%>:DNk?.C6'pJa^F"1='0CS8\s/95kefurbX;nBh=[?0SmfC[Zpa,`B+qe7[=h(Ic+hMko^s4RJpCHb85C*Vt34HL(9MWu@>@SNsb
%6b7.bQH7gU0]#8eAYb5TY_%WAM.sD"DMtJ.05_7S`"0o:&sZ=X\phJDe/Z79Clpc1_H!;VJTT6'5SLG(8/:N;J;$KZ0)`"2E)TYQ
%QIob3]ad[u-qNI(<0%N8g:A$BZE4.afPZcFQM:rq-X!s_?%$LT)i`n6ch!X@KiP3'GbHTgOg"a&2B/i\U$_=c#VJ9R(d-#D#4`\u
%>X]!oM?]A#S1.nqHl5fd<._ff2#S*W?<TO`VJ/IG3@(AR/P9a:g:#M$bCY5\n4gVZFts+b<u!#0C7(j`PY71\P9)bK#4DM?i\]+q
%I7Kt:O1sUSIqR8HLTYN8h5==K>]$c$2sJeGNB&^fZmBQ9j-Q3R)+9T5G-'<?_ZPm3ls?7ul_\D!GWE(Fc-%2'4j.k048U(0s'oDh
%AHJ\Xf&+>0'j)m1jnja99AC3!>uT<Z]45[4VeHh,T5*/LL3s[q@9IlIne/*3O6.XQfF[6"'>lI[)VT[%oeK2<m'tro7?A0?aXabY
%U3]/fcd9q0ajh4A=3PAX,X[;h$Tl?kE"C7+l),^78V^Uf3FQ(dbI?@==1`D5,.GaXp2fVXl1(aH$.$;D&g'.U@mm<AAs$>")o[9p
%k\1A>h$%9BK3;6`n+Zdqo*QkBo;Voqo@TX!D0q_>7ZfL8G)P,aMbo_ocr=Pq?d5u+p@>%+)k-9GT.KN+j"X#"X'F(jL*u9\%P+)G
%([-c2\9(*u/^cs'b(q'r[4Z[-r_r2-nO7e]':+pHG*?n<Q#eSKCks^gPm8#XA@++A2g7!7Hg(0*7]n_/8AfehNa,(8*%n])!S*XQ
%/<"@]X.AW:0iinW>qu;UiYW#`75&]$U@q\[&sdrJ;3Y"AMDuamCoY0YZ&j'C6iM2m:bVC5miP2Z_@:$Y\1K#m&e`aD$l.B`0=G@G
%GO3&.N1Z.'@2(`()-Qd-V*mLHm2PXp,0%*8?V(=qZ]G;NG;4u%kd=d<s+AAZs+eEbM+J&Uq.f[KIJu'[6@k(mg'tJ#'q&ese)&GO
%!AqAri%o69+7sf%Jm`r!80M^j.*H*2O4o8EZ9I\OX.jp^YW4b\M!i@0jM.CA+R-8GbJII^RCSdNnVsPSE#`Z^DMN^tDbirI:7Ms)
%nE(+TfU_O\m$XiQR*U]A[)KS''+uio9`>Nn:5`#m)PLui>pB)Ue<n;b7aQ?lGqr6dVY%==q:\\1M7C(+:9Cc@J%q55(*)C*W2Z`+
%m-G"%_ImtF>l(p9V^,u0/Y)uS`NLK;nr+>YL's^_15>aa-</R`Gk"5S%kN@UZ.YI.i$il2YI6l^ehD__VLA9fd#6DO5Nq2SeYW`?
%DOU;#.P)oWPa.PqH2O_"/@.ATEPij+5^k.GM(=%EA"O0(LWk0AM!8*9&`a@q*C!].6S8(H3d;Z2etE3o[;c8*KjHWA"rMFuUEhhn
%q<5N3KOVSFI,OP,)B=IEYSe@EcD]JU$HqQrFS"J^Wbc#4dCs_4:;%o!#nm"'V5OZh2X?MBRXl3,$K"eX6qYuYfc=%l&_@mc9uZjZ
%AH!@t-:q3Id)hn)kYMRl<b)eel*3#\M\[+sOr65djJ'cM<_APAqGfQhNHT8>@nBOTGC_?W?A=gKAPF(Mc&,Ji/Q1kn74s2E9%ruP
%b-';3g#uL5k2o#Dc^o.;hQN#h<P?t3e13N?E%N!g&BnBFU]%;b"&o99&RhV<+(I1YY(EcbLhg^U)tJ`dam[]#Cl;,`$/H,idk[OJ
%bF*^CD:V5h-'mT<Qt9LGh(_Sk9,&o!_r-sFR6#39-bZ&^J^DTF(4gL9+h.bDi.f0M[>s^_qcD<nUG'A&'=3a\;N`25-Xue_;AA5F
%5r6ZiYuqlsPcXlCAuZ"W3!RJKIQsMr$'8T+:1Yp*JZjsI8cir\ZL)qFGV>o:H`?i-mF,m8BuHY74]%"$J%q2)pKQ0k<&6uH5a_;&
%oK)@H)Q5F>CSYMV8;866RShbFbc7BO0.j>YaCp/]lB:&"&6VPY1"J6iZ@iu;DoM'q_lQ[j9`!a9KuU-K+bDL>B>W`_`UhN:8FNf_
%#X@G<9D1u\Q$4H(7JA)\&4/\TW+&h"/VcVZ0pG+C!Y>pB(C]p[$DNHEm*,U0<%D1ZIi,cJC7hK="Mr;c7$UTO?k=Tj9,"M(7,(-C
%#]-]mfD.HrM'5#2AmVerp)TDqM\i8XNC;ki>"@S(o%D6W,#i>(*)*G6b*RWR8e[?[r_((>HdGl4W5)C=[5X_p+hV6(/)F35;]>dQ
%1;_28I\$23W5'G-A<AAkT3&-NP:U^8+qIYaSEUEca#ZFh8Vt/@@D19?;ehhX4-?G`WW@^0;@R%GId>Z*b\Yr'2/2^f3igcFTu!0A
%<#ea(<8LG+>;;:P%Cm\,I6qLM4FFYdR!/'^V(4cejeC/\[%`7h04A7D\4+S3JL7Q2:+^i^8c($KY=\K,86d08_q8RL;C1D]17q<=
%e1`k%I>]5'5JB5mbp+[E^(7aB+1=9PC>d:_WjtZp4AFdjag7m0`L"YNTQ_l4\8.Kq%,6R:HDr)?<^JlT]'SCGrUg^C?Q+)aZ=WQ1
%lA+`8E.N"Ap;c'2`7="d)C'+:Q[A6W6SP"XE8D/E(W'D'LuIu6q!1'#FBR5#3kc.tb/Gs3c8aq=.gWp/ghCD[CT(Fd5*9eIo_*"<
%<f2HgG7@?1UX(g4hKN6GO!KueSFQa3Zp*7R(@=#uXIUd;e9XWM+.K>h(%$:?8qL\&K:]?iP4L=[defJOq?8%tq5_a/`4#J3l:Rmd
%np6!=M4c=#'>lN%%[m0o3"bD5[^+PpW]Z&3Q[bWM@+2-H&s:F?.s$tR!:`4(Q=(u?dN\8A/8A;[9h.^ci:duiM"K5QZZ^SMe?d(+
%[kdAE<Pl48m^,C]#kI6b%>CtZ>/:s@UI4[?nuMT95;T;V"O&cOWFSsl("=>g<ir-Pp7XRJ\9B?^)S@T:W2V0XN70^bjCY:_LI!t'
%V$;7)1a6q=3t(ml:rrhn^>g1rPI$=eT;SAC/SZ1](QhaEPLonbI>2r4Q1"kE=/XC+)$DOEN`m/VK>1,KC[bW1_]1cc)Il9b>U?P^
%HqoY-;\//?jiNLE!rq2M2Bc)[b:L2kje=%kp$c=:14-RRk3[eE7]nrJc28nB9'DZ?d+sK!>a+@ClX]+X2O%lf``1;^]j2po&QjA%
%%a]SV<o/4hfBckl%AGDh-.;'kY_F:T]<:F/W5^(*3r@BbC4k-Co0cR4.Dl6e&9!L<&XPQtqiFYukX?i*qF8KONtAcR0caf%gPi;,
%"Ona4oO/:`or9u$;<NEXD]YL6.`t5*.M"+MG4npQe8Q.<kkY[\OPOBfK@.$J2o0]#f!XCPX3QUhG"8E2W=HdG^-o0A(_N`1A,Zr%
%8n7_?$7E$Lgf9bS]$L-V^7tAr&d0rK(OQ\.n=[bTnO0*R5XJ&(8P<Ip8;IX)SS^Ys-e*eM*W<OBMRlq2'.FLnKU0>?p<IgPN_90:
%ElM\Hi`c%E\jb[>9dhc$^>_9am<LQSQ_9mu%0S3Z\g0cg+7`F4KmM2Q@bB\B^mV,5#MY[`<q#AVTc2>!,YhZARdH;7^+_CpYj(BU
%Efba\/T(/.Bg,3_[iq5b`Z21%:S<FeDK5Ne^)j4),jAD;Jla>>&PDram*f.BqTehXEr;l:hoP$e^<TE>@a].&j11lS-5$?Vi9.J8
%RQt1(jGpAQD1&+FU]!p/Xo"0lOmr<8WfBPVA$`J]=FA72Z+_2<]g@Ql.u%.0:,nA-!T@]K5H8BNEB8Ot%t`Cn6^s'gH_ujOae,".
%,#]d\,j.K[:W@'Pik@E1H%'r/%E^4][l"p4?BG:kTt&(A&S_UkqR<q<VeL:<05q'Uh5NJQfFG<<5YH&dFZ7o?s&-cOS,Wp\+DUXo
%MnF\4nHX:9Q5Gr)N2MWIT3,5-SUk$i4(@#FS-3IF`T-0BVU9$s;+!B*BuYH`'bgmX9d0E45rY)sG^/0ek$>9+,!!P0pFPjqAS"Pk
%DHAE2gR34:.CY1r9Ciai'(->LJu^3RC*_Rp,eL*@S0tdgh>"@&B^%j4S/VMWh-;/7%Ds8:c\L(LRmE;8X^l;m@IY*JV6"4b^.;U!
%HG!<oO1Mi-6P.CX6:C+b1bfM)KZtR1ZZTI-6m^)LK/&SH2V@E(IqoIal[$AdD>oXu<=OjA4W-WE*jCqRE&2V4Q9.7`*%h"B>BNp8
%mLj`Zd>id:p<J`M\G2%5-7Bi(fiKhEqM]dV6t7qK)MPhUZ#[p'<sbp!1@\)i&Jf,O<*X7/WVY7ii?IUKb:NMnnSjss)R,kW9R@;t
%.ft\II9\7^(jm&j%Zg#=rAlbJ_`W@cOlPPU8;40QW:)8pC@WKO=$qK6qQRi?8'lO/Xf&<=(Rs82\egACX0a-U80U]*K1Sn*]dGM8
%B<]'s'cjQ3mqQ]O?2Q2@:9K@D`rt*Ko3S^BF=kSM<\f/uLTp%hW3",p=g`3BaI4cC,NQTV*RI)ho&-$)Ft5MQCc=,MG=[d$WP^Ih
%n;NW5V%qCV:XEA6KPnMpX#RGW'OAZm2)s-ej$H-XXm^mdd38i'*U$*BKQc]+@0*2OWaho1d'*5#hsRYd\dG59[^E4][`.*$0I?Jo
%,Lf%97E7Lu8b!R=+AnE";Y/)^=jLIOC?]%CW-[$h.ccW""^R\g7I'B@_L*BoaNlu%`)0Zc"Fh7iZZiApl]Qu-Td1P!=46qhF;5CW
%=BE4IoL,]fL/+Y\n=9b5^Y!ns9uUgd=.%$-DaJh!/L<.\:HpsnoP>4#5uYH1RLL7Uoko0NpLu6PEsKetBnjN]^fsrnOCq"&dRRFL
%6;.1EIb46'>(Re&Y_JuWhAJjkoX9.sP'7+O[bfU"_7H4D3CT4&s&7Kr3:Rm:=:aL4JBU@+_Bpa.<9gkFl\IbWil"nVed@$9o3ZcY
%3\M;g[m=J,MY36AG.0M>;,olS<"s6X/[lY(06.OO'U`&B[2>ldSmC>LXKF:0f.1O=eGo9T0/S>kGu)BWJ(kQR<3q45h]In1Z^Y`(
%_s6_)/#8qnp5#9STmFP5bq#i4E5'7Pe/'ZIZ8@]D%rgS+/,-u0/Iu?#SjsAR:p<#aPtj!JFJ:b;jLe;s!h?#S<YdEEo-IM1jo;r/
%79K(X;]`-5hsDaQ#3's0iIiT[cX(8=F8hTU\I`;T3HUOj5c>il'#)eo8rK16AlOV8>P_m.c>%+:jro))kjRE35#!0A#8:@8SP&<G
%hFAt0I^S*orL#r'B`np!S,ZYg>h#oqY'Zn]>'uTI+`b@:Us;E;'X_*(&Y&G4MBm++X-\ERFV)sDc/dm_7Q1S5Y#eL$./!dUBg(c<
%6WL)Y(05M<'oOCX<pNbn7cXc8kK4])##@R`'Aco9N%[UE+P^:F_Xg`-As5uXHIhp:C,*/FC;%J#j0$'meI1]j)eqB'Q&s6'U2<Yl
%k3k=o75&f8.??0>e.PYgI``%KSfq^XLEf@-f="Q`T5CjHaW##0h[,O&cT\b[[S+EbW[gcN"<ft^`^'?F)EkG,6iJXt/dc^%/`tb%
%N$(RdNrlqE]HLN'8\ui!gqSrJdpf"3]Z.nai.kP3:'ABX`O^g86dJ*R_R$:+<`Hr*#"%.L]I2AVon^J8n?:\S?[XD$,rsHj#NVj5
%(1dJLMEgR%r]X"8SHJh-O3K[OH7?G15QfnqXPd^q[9fG5$eBnLX6:-0c8W+$]fi;h2-B79/lF"B_GZKKAnEM-=#RO>O[`:8%+e#Y
%?XF`/#B[:G0Il%r/b2\pOK1?;>0,:T#rQMFg1<sQ)o2l7hd$e[4mbfGFRV7A6A&.,ni6Zkn#j;i/X^eG((naXIP`su1Ru#7`BSO+
%IqLHEflt0X[IE@c;gX3]a$"I9X120\=Kk]!Oc9KINZ0HKiYLr!%0nLMa)]q)9Xf3JX0jfBiRZ8;=AtDWcS)5@`\$-^a_r7M5>T2[
%()_+tdM4#aD0kc5`k+8oQQ6Lo+V6qdHlpeajk,)lR5]HQh!,s`1)2,6!9r!>@!Xf4T>`S-ZOo+cY2jWS/^WW]IlOQ&cQ]hjPEY:G
%TG4LQZbA(3Z^QK,)2(<QVlNTl9cPD/@9fQ!GTls<"sWrs'bdO@R_39mJ@?b>\ft[od%A=0&+gM^l^(1T(MB0<m\[lei<Zh70r;Od
%/-00(>pk?9`H6U`n&,A1or9"$S.\5'@Z`AbRu0V%U!qCF4PS78bc`MaYaB<e^8]h>oOn\Le,7*.oM4r-lS,cIZHb7r[>GYMhSEW<
%83obE$Z02]=,]Jdk"]m1djYo6CGPH)Nm<R>c,'"#dI3tkTB!<Gj.EiT=uSe6;OeP]*=WZS\k5@;.^6^ep6-EBAKp@0X]g))A_FGb
%QGEl+A38QFU(Y)Q9NW_;[gA6U\sm@0!07]%N2dkKnHb_u.EJG9)>A85?6*B1^iG)dkDoj06Es4@grUY8^jHp#OXUD2E,jBhQq;ZL
%88qT*["N>!#Gl9dL3A^^)0c7BDU4"O:=aKW7UEeSgI",QQAaWKCP#$H':<X+$B#CAo^d(13$[QV@2?d`s7ui/:C;\U6=+2qQ'A4L
%6Y_K`9!pUq;^\r[/tK%k`hlSS+d/r3)PY`SXRkaTlmtL^;&8NkLeUrZ/LBI+<t&-8okYm).aiM_Kgft9"Gp%4fpFQ4:0*Wl5ML@O
%@<LkC-Lu2(c0R:c0$&Vq9d0D'+;9"E[E@4>%7Ws57-/Gl[!jAp<k:u<+UAA;eoBBk;jbhnf<f=HJe#/*jotO"g^AC(?h+VtAmQCK
%bZe0j@g\g.m2)_29UO+aS)]41'%gY9JV#,\I0X\3qD)?l1FS9Ro8Is`K24#?*c^bC,BBBg7g?"c=Tt#$B!2:+\579hPr`=GpK`3$
%StJ57B,LsW4Y>>F'dmE5*Nu>d'8ho;9]Z,h4Uu"$E<DZp*GBBL.'@dSZbK;Bp]uMu<u&3YX^nMm\qO=r4Y1@Nh3;nVig.">[_f``
%X@YTd`=,>j.kYcr8Kl(M[EDCNRIa%j8?9VpMPHJ])NuJ1/A(\GATK?>-Xhn`'lgJlUqfod'Sm$PFlCs!Z^f#FXW7G"&P:*Naa-H.
%(0TSm'"TcK_Pa\=^GaXoLCZ&#Vsn^d>$8.L=p6b6er,`CdU;/A@rEVD>V?85b]iE@TX(')!Q%7WC`InRJEl7\L-"_F5LlGII;W=8
%f>o<&i&kZ/b5d[Pc_-Z'2`%+en#q\+;>oBL0qXo^PJlb4[<[Tg]er3/G(m_i_aG'@So8:`iZ-9Nrfn[O]I@Oq.GTHn#Ec"Bj5>ag
%fIatOo]-T5j;Mg!(j@MZKW/jO/>IAr=O`O)nL.LU5D]t_b/s%.GWN6bZu)J9mH1+K@i"<L<^hbu?aF&ATca/WJ+jtRC^K.l7rWeP
%J)+^QIR]%P&0n2YcO`A<WbYE8rYX1$XU8<2gBH4L;p"FRc/?gM:AJK^Sa#MiPQq/u@NlX*jUBi,01E6aE\)177@5\>4kfVb^rPnI
%MP_oK(9>=U:"9_QC;B]!*[Y2;Rbk*kW)J7D`S%e,_oTP-lD+EZT.>QqLgrC<W"'F+p-$_E75&*L\BQOp[^Y`o<AEi$Fg#/!':V5\
%j`JI39LP/5aDZ,t-[fk55EDF]Sq"mSi=`)5Zs"fS-nC!5IY'<g5SVDn5Q'dN,ao%cK)mI`<T0`P@GD.FhgX&m#\,..J&]g[1QTkq
%X8u%<:11MI'\5A8\"?InQPdQ0[D,"MHh_H2>UIJ/UjN/Z2GYs&/0f>2KK7I5eAX.D6f[Nf*YDYP31hML7L-MGUl'gRL!VV#&SB`:
%eZalJfbm.Y:j<Au)$c%7782su#hU>]qnSBeIW^5^]rXaJ>erHOpdhA4Ri\.RM^5_b!aA*,"GH3>idHnggl;s8ZK(tjX^&mMjs/7j
%KRrEq)R2X*XrC3C9,o5-=LMTN&Mr-)QI:%[V]W3[41\*58em,E&3WZn[7&XuY'DQAUT:9MiDX\5BC8LGb3Gr@m'DRM&_/X/Y!Vl1
%InM2_U:$fLG<Wh(b;`WRV^J#,!,_(eVBnb/)lf!]]OOS/b$)GuS[[/#INgHO>+JO8/T:GgfJ:+RE0,cD9/5XM9ZAfJbtisJ*1m>'
%<Y@FUhkTAl5h-Ro>a@g"MJP"@INI[r[(L@Wfc1I"=VAQ=`t8Z3qMK7Gn.d12YWC'6^Bt>iTDrU#@FoJ_*k&UtSWK>.>4!(dbAr]o
%O-8Nl'*B9k`\B(Y6-`o4g(NFjW>U&k7kb.6-Ou]&%ZXEun4D8fV9?o4L[I>X1D4*6pU_nB-%o\2WYZ\uatouKd!P$a\fd$^VoS4a
%\XWX76'n['hfE%nU7Y=$Q,k)B`N*NQ2<Go->+6[k:,MBH80-'$N*uc`3r7l)$jZCh.89Cn;unXV:7)@D9Tgg_5N86JG3Hp%G;@8B
%H5CRkNKm&k4$Y'0n-Lk`6t,QsWi@s-V;Ord:;2>*rIUPqGi6ZReh#3D^a%A7"d/Cg8H*Ud40sZ)!iIq]'H*@"!Gtch(in.FFc4`a
%od_CP.#J]ZNL/\a/BMkhcI?6"iq=*!]JNrm7Q^eL%8)A4-^&hQ?4kXZ:pCM23J:2#Q2"@k+rV6]@%JsDd%Gs7DB^KXW'l!'Dg/_l
%rMGeu.Ke;3SlIaG4X)X_"u&?O9cdga93HXFHB`?UPO[B6Kq@[h(X/,``&.63d/8M#UQ4]"po1taS-`[;'W[u]Pe&ZO(AX\dqp>->
%eM5'JEpcmh)=J*:'RFEF<&g3#]8o"N\GhM94-$c2KAfueU,sT`_05MM]VE'UF#)</6_W>Q3HFG4F(]?(^,=lR('7F.Jl-La9uu`6
%p2<0/E*fA&W-Yj;=1"mIUHbD9Xg/29:C!P3/D7<I\)$sZd!8CJ,a-]W%3<)Jl]096YHWbr^IFGKCD;LhfsdWKSeo)2:lgBCn9`kL
%P`Cf!N?a!,dFpVQhQAZ\*JsrarP3\Er(rk:1Uctdmta82C5"f#RMD>+RI(UD>TAC!M.e7^TuVp'/9F1%8f/`7nj%2WpQX2=22MLu
%nYphWH[5#jV;uJ`'[Br(\IoPpXf^ua^J=mUid`8d96NIaVr&B2@^\f!\>0^.kgK,+!m<[*UHo_,'Ra0TJW\Kf`+erD*1PS$D.gl@
%k[M/K(Qa'q.ti;d*&W59ZYpn,SAmUTr]'.LfifA+f&k24!QpiIP#<6.NXg1m\e/n6O&^g-kUtbtr&6P#!Qg`t<n]tRJ=tB-F_&4O
%"Q`.8=k]n3(iC%*+pa;RCk!%?,o6tZ:]dZ(hCG`@2\&k<q3Zsf?Qp[FBku4[E54eRs$"`-#CCNZhJVZ=-8uME0CaF:4KBT/HefDZ
%]^r4&$jhuW9k5J-F>NC?QOHSNbJJTeB>5GPPY@ZV$SN<h'l]#1f[`#2^dMHQlm",!dVm*m-22l279'M;=grR6jK0M:0:4ZfL5P_i
%"A)@n[JU'OYhAt798Kfb#IT6lG+c-:?R:I"WC+;^I5XSCJC]O8((0M77tZWBet3K&ER.OAJPfI1!Lf238*B:bf.3HJM,!^[,J^4I
%;ni*PX!HQUOlc.1XJ.qq)gr>S=8n>.lQ4.k%U/a^p`(W+EH4HZ>7Wd?/F*U[akuliphU,#,9?138GH+?`7@I&QC1SD=96B2Rs.$n
%QaA^M[mju$b!*N(0'5J!$';g6,E@OGaQ`U`_D<SU$IaUMIBbhr9=tMl5<fV_jD!XD3`l[H(SfH9BMUZbkN6mUa'eEt5Jjc!qT2>h
%%WhV_\El+qar]U?-Gu3m!.Bq$4Z&:!7KrVdHc12`fS?I-Yh3@ma;IqYELKfKcnK-ieFglnRR=D@)#=&K4eHXgV*t`[f(BHUg`W-)
%6bc3KXKhOh`2)a]-`OAi,/l*64`tt,h3/RInR>_sPA?1%&4)J^@o>_a*ZBWTOmrDc2Yu_2@.Ns)PkE8d6mFWkk0<&7=6-isB^"Y'
%Nm\A:+e#;d9]hq%c9?)q>.utLi1NqPa02[-cq_6?]"KVr.K_?`M/MNc4nta)ZIeCP'&O^$-dnN./<_8o'Z6oVP>b6t>Gk<k]r%Pq
%0#i^DemZ[`Yf%b8</k]HEg$f]@Wpd\A/i&<9)Wd?I%j\)SAGVUdL-0BZ8dlI^3@[)CXdePWbthLY`:D`YM&Ches(WX,r22oggt<%
%YZdDu8Z5cNe2>h8pBAnZW%V@MhlfI#n_>V\"P.7W:h`=/IKs67^2cY-XkgENT_Ao>A46./1PF<`8t]p0R#$ouXX*Zm:A4[,%OQ;0
%?ZL?Z!l,X(le*gjqsue#VE)\t55e&f-T':dhOIU+]db>sn><`X`)?ab-BgQK&Y)]U'1`7+clIRH6&rM&+cIg$T#JR%ft)J(1G28)
%Q762-9KM/plNZC`c>:/lCPrdlK"Ll(OU6!G`E832+DQasN'=lN2!^O3V8#QZSIDkjR^tnEA>F*(\"Mha&!^!e7d0C+NYb2Djhbbr
%X(;3NZr-BmfH866]8fu2E:V,8ANi&='K&GGWP2TqChl[>X'uGZE<9bRM7L,;[=2R:WEnX__iK6/'aGS:ajgE89$'E=nD3-JrW865
%0f04]a5CN-RrblhU9S3,hASU(Le/WA4GV%+?$stM@"J)&Khf"Z(3fC/(DOB"PR&&\iu5$"m`;6n;;G5bAf,X^$!D\**^B!R(IUIp
%;mQt:#T*D"a),`b,_//:7;B%sd8p;51smQ'q3ip?]Ti$&4tVQ@:5(rb.3tC]mRqks2K\P1K&reO^4&h/\qi?1NR_"aQ&USFeE_u1
%etWbI*0-M2`,!@jd4H^36Vj>O_3WYUI054:ADEIcZJLm?4aBl.87J1(W`'26aXGVLbDt-%Z"ltKB_4sFCs35t.<''4R#il!*/3/c
%Gpc]7`)]@5mZD>;6KmWu4L*MjNA]?aP>tt`Q6OC!M/!90'c$Hh7*1+K7P=DcP.Oqo%n`VVX"rDYI1D?d=3L/k/`NuDBgU:`a9\(p
%(X(6EB?$"8b^2mIbTMM9@D4(*P@(cN$s<6een#J86GC;P,+O`+*^8$U:1*WE2Xp].IcoIe34r(:.HtOU%=#Pj-Rc1^G-E0%St<79
%fJE.JVg5RY+tZ&5B#VU)-RW%q6kNNTJE3dST5TLg;VDhY$VEHE;9#VgHS:JkSCNd6E@rArI5IAUop>:GQ5Ge8-XSa-E0(-1%"7dA
%@:n^Rg(c/Wj1>&O8?pQ?;oe^kZp,'tHmnmC=UAPeKkUBDo;DX,L8(I]^)Zbb;+iNlL4'LT4K$@R,tJ-H+D4WW.ZZ";eEM0Z)T6b"
%<>#nJV08C9dM3c'X"-3\8f#r0^q?N09pm@tR3kR[?c.>sOr>PAXF^u81Y*J$8oU$\=f;R=EdWcs@SY$lOB#*'K'@poPbXV3JT-8D
%H^L^r@`&ZdQ/-&ZT,Yp)H&FZ_LLf15D9a;lKj3OFQGkBaRVQ[A=mf+AmQP-#Fc-Q>CM\IqT;UZ;B32>g9l[q7CtQ"Mg6g"F3NI6#
%SMpn_Ro4cj&D"A<Fjl^;aq_HFUc/;LoY"EC%7UA2[)n^MWc$;tA#J$jXEN5n$mZ?:PL2:U2=rcdM`HngFZ>(t94%fRdJ`p8Z]ESu
%MUAF@$YAAaNTb^k77h4"\RWf3l@#1%X>nZ=<!946S:?56YQNe0E(tbCSk6NgECC00H3X%JeNlC-VT#H&%[BO6#.E0AFQKaMgPLSE
%@4Ai#H]XORJoTdrm:7]0+%<:b$]%pmJ/T2hZgWC%6fn!Bem[!nfUud6I'7L/&Cs__.8(sW!U1W8ck_!(.g3.QmC^XLL#p:1;qP0g
%7,[I+^FSXYb-5&5hJ5Vmed1-N@gSU!oBZbg]*rK%CJL75J!$j`D=kkomH[A:[k?gg/D-<1*lpY;o/'A-RAG.UB8O%Hg^/q7:nqaD
%4Tm1;3D0BLQZ##YL_>%=1*SCGP>"6TFI81IU;GY8#h#VLB)MVsUU2UH+uZI$%c[A9/=YLRh>MYC+(p?Z(1:/%Tr2h1j"2k!(C]AU
%o$Q-gR3bMU#+;<7qJ4"2km;mrU3:TjTZ[,CdKj#c$R/;"=CCdO)r^'<Wjl)I3$PBU_^sY1fg*h?Se!P[cMa,cIQY*D.$-bi4Kg)0
%g6]o=B;/kEdR>ILr:Cb!5>9;S^=c8<pnY7BQ$B10mJtA^W6N7iE]D]P+%7P=8AVeXCQ"I&jIY&p>a0JT%9p<eh:`4:DAF5TFcTbe
%]>6<!jfj/gkZ+DZYq'KVDl4%bWu#bAnFC8+3:b2LS2f+o(=gMej!A*FA=kj%iLtmW4ls,>X=n.i4A4>6_`g;98q81:Joo<M>anRS
%,4.,V9?]utp)\!cQH=kCK4J@@qsCtl31h=s*7qT(Rh&8[*4S3DKD@G"CQQMLoP@`k4_2TJ!!q88NMFab2tMHf-@==Q/[;-]<fQG7
%$M0)EHL:QnM37\I<_TF]'.Y)XY>ZCs*bjfC/*iZbcH("6f?1!#;j]u:6[)RENVcod&tq)l^!$f9:EMXo3:F>\XXi?nXZ21QnAdVm
%dIoAIjNT;/]NM9QXL7)`EmM%@ou#t\;oO"d&#PEmddudInd+JMbfspp7c-SN1HEd%\LS,f9GWQn4abjYEOB3Q-m>KGeXOo9>&;AY
%s.SFC(/1Q&0I5;G-)^=9?:C3r)FYFMmKnKHR\_nuO+=lFk]A4K0S(E\0MX'.Y,1$PUFW,^[Lt(6VrDMkFPYMO*]8StBEGXfPajUX
%[_SofED2s+8U':JS$+8)rm0&L\BUUE"BXS195)P@JnTO%EUBk'N<nR5U")'l=Q9J5]>EtiMUT2cej%]S:jb1m)N>gggb95K=knPi
%H7-'YYST70n^6778T]\#7[sOcUA[-K_?<(Re@i]GW^q@&pWTa_#Kq/]\YX8'AnD`')L('K=`Ymsd"jQbED`]n-!W9.F,79e)ku\a
%bklch#f!;p-])k^B\mim:>esK(IPj!]MlNi!Jpme<`sV>pS4eXOuT`67o4_nEmjKGm<RsW;Ptl_rBm#lL'bt+l25Yr9YMe&)OD*@
%roufrVjJ^^9@DjKS$:]so-JV^2^Ra."M[cQpNE5QQ%]p<$.KaPLs-.Q!3?dWZsPsl8(TnFbiX][H2@BDCJ'`]-gpskbUL<p/YP+C
%McJ),Ya"I3*BH%QXY6pr_Jg&=5]]Wq-0),/iUI#5,>''*L:+;kDsY[H;!25j$u>V<m:Y;B.doOQo[Vq6L0E,i_e7(g&\\`B>+$IY
%q_VU"o@?C61e@kFr]6pu!^$;S#TYHg=^?'V-o[!`U;ARAI3;`(#gc9epC5*CC4qeq#(,VIL?'D"YUo#_67Q-0kptSuAW)q;)*0=G
%q=7^[kiE@P?E#=!*h#/h]a;ZFO874RW*h[LI*!LLV_U("<iaU"2fp[&]3:GQ@;RVT1@&"CnEqjae\3%gK";t'o>ifT+A(X,SCc%)
%>MohpJMWH'IHV7B)g^jga1UTnH9:G@c]JrU,s!M>rm0&L\4rY[EfokOWc>;V3r6@]*qWR,PVo;tfF2VgS?^!YWYcWon>!MD]?a`#
%5VJ2)Qu(f<$?Fnh`=6L`GG)X#UU]0?O8_=<U+MBG"EJ0.6g#rp7P8<l/o:o(n;^,5-4RX"FJ&qe6T#Pq$>4>1U5H1O\H%uoL7YKk
%W<HpK\?@'"OTe]CG?iZ<=_*D4=G((14Jif)GOFF/YP+)fJ;<N6K=hZB!tl,bL2Wb:_m>o*]nUe=![GF7XH;!JLTG^SGVkC5`N`Mu
%4%#R6UlJl#Ki?aWNFn[,L8//`1D$.pDj)p\M?bcBCso%0-/NrsZO@_NL,bla[:"@ANoNi(JRmtDmiu:82NK(^PdVW/rp]mL3J4-'
%I4`$CeD6le%[&?$%JVf3aSiFWr9u3ZX3j+k)W>'qZ`q<2]f:bi1^cQ0n*2tqXU,qJ&0MWo[bH6P>er[B%BmlGHumP'(7Ml]S,&@g
%[&mBXV(%bup8d3i+1h>'A[qCK1itXp3S6EoKA?]\Nd.U!?3U"0l3oWqZBT=5$R0HKgLP,t2\b;kZ3Ea(W14u*P0pJ69PH7tIN_J<
%.G>Ct'QfshCs`3a`;[h0p]hIT_NMYBa..EuFf^b*9h`L$Q^EHiL^P0<eKmnR8n]N%QuG\N&aOE^Y;#L&UcWL_dt7P177q\>m@?9_
%:CVD.S<O0hkDRlHq+;e+'%CCuA:[l\Q#J5fJP[Vc-k-2f,R=Mtl-!TF*Xq<Q:FIKSdumj-;2UOe?#c">WD#9Ue*f0@T,WZ'2DX&&
%`T/@T;-qO0M?_GUq+j]KIpU)t;Lr^F\NiTP-,U]?k<bEg.?5-A'a=(^I8TJajKFg'JN[>&AV?BZW%#gLo%@nM2]mfFBk">IK6s-q
%]M&<8QgXY!(%a*+d:&0R^Lnbc-"LK!4jk@/+i+KOD*OIc&XJ+(!+)6=F-i8i]PX@4#"9#!4]:R,ED;6jMO&'FYQ(7]6^@`K4(S']
%C1=.;L,$s@KO,u`Ld^t96RCSnQsgN6[MbP!*N7anIWeH=+P@J[*'k[Ib%jV"LXcA8O5pOhlcZI[<;=IQg'%iuADOk13`E%=R(Du&
%CB`$S;?ZS],Q>c?>G.N4p0q[(aeD4E_]\2KinOpr`c;(j.SV)ON?i[Fh::ZJ>_3>lai-Of=CdoDQ%OQ"Ut'r9HL#d[i\g5h+Y;U(
%o?$</7n#.34;:j]h@[]U6Dn8o:G8?8/56dea0Wnu`)mQ-_t[B@[rX%",BK+N:+aYpVWRpCV)p=4Oqf+n*a/@+4'NQ"3i[c!fLP2P
%a<ikk995=+;!A'JgGVZfO\mI'WS3#M[KWH%oY\jDeoPgO]%&mhCgSi4FQ0():OB?5?jV(EYY(pmQ6d/DBM!0@7E2!c8p!WS,hZ:8
%VjX<B"b);q?%#:r:k*A]OpltJ?E?Z8=+6]4Na#]!U[M\^:K(N-Si8s8MXNX-:'$ZIP,RHPa*&Z5q]<<Y9=!07aJRg&:>B>l/5,mP
%9lk/^^)I%mToHQ0dm'cPd=cYh"`b5:9=%36jUbsD?GUsi'q2E\&STY;Ic&X5bEK_LW(DrtL4pAceT]`QgP+JMpeWo2'pRP]Mm2'?
%e[NpYX)Y9Rj$L#*jDKiqAR)*gf]c&7+J4K&&_"DA2hVQrGAt-e]]oc`H[gR-\):b1].\Q5_^"f.8u;'"1>PPZ$";a!g"lX8OI&#e
%!]Lj+'5KqD:/kp+d'd"_gYa\8]=/>b.YO1f[Lng?K6GX:'9Y[21dX#tQp1p07?h`7K7mPX-F4Rtr,<,4$Pd4JV1D;T%^:UkgY-e+
%oO[*qJ!bVm/ZU.R].Cb:Tu02;\"f"$mM$\i=R@E\8GG6d1!>r?./G?7CftN^6l+*3<tb-.3N_X^^IS8m=0HkuP$CQ9-l5mQN9t(F
%NN.CFY.f)c;Uk'V*,#nHn0jFWlGOUc4.V<%d+_[1Q2PNiZFtNH@>,&8b<Y`[]p\1RE+b`8&OeFL'bf>,g?KP4=1e/tKa$,GK]@iU
%i]TmQaB\$rHh0^@]b;L$I1#>i>9e5bA#X_#Y+i;Cbg]J`;HueoEBb#Q@9]<IY;?)+,fSm(jb>J4pctL'2s,k_8"KdilDI\KSiNl=
%2c5JE.:5_a&%Jh(ZSfo[Jo,(\ObE</T<:-X'rB&VbmqdVDh8ISC[c.1Q)ghrZ0;fBe;ft1J\Bon?>f?AB?p.e,=Pu$NYNYBW4X*P
%GcOo[KIqE"9.<Dc4,em[WkU%kC!.R8"U_GO^"5E13G.(o\^MQlHp\W4ckhjU];mO#<']CC9GH>'2;lo>*q'Hf1+eUCj=53!IQ":G
%0?4M]eO&`P\H=OUZXugH6H=Xkga2TuPPK0SrJ/NpNb90@mLq?W4/'erimBW(*;.UCJfjIME1`Ff-[k&J;"r%+h_L/!UVtuofrG:0
%2UBb4?m!D<5`=)Yk2KD`h<0(dHC=+O6rq;<\$.HCi[/?=G=&We;fUKMci3cX<#L_+(H7_cf*EGNHHQC:?igOi7eBI/DpWCP[rA;n
%>!3;WieiSFk'BZJB2sCl[_2Y0lM^%f%;;ngTY5oO\DE4+r]VluY[kq.bmmfB4HCo@B'nU.+V$9!+gg7(eqsIESfD%A6AF6%VQEZ]
%K^H3+DX&AW:2H!ZF.u;R,1cU%Ak<.X5,pInW@JHr:1-+Q.Y/2RJhBC0TpC"W/:oZk<Qp'>\QbS2EHW`;D4GVQS'lithI3JX<A'7q
%EQX?4\?fsR:T.1<,N/f'"r"#SQY2n_JY&SR9&c[!GYPnIX_EQ-Z4j7rm\TR5HENg5F,%D/g0;M>k]3Vs$S+9S-+[!ET)T/j=KH2F
%XPA-DC@u&A7)Ccb$fT+2N+?H@Z^FlI%A@C6WuBdIK$KHkol3]LZolq,_&brY)bYPdJO<RkG_r6q>,o]Uj=eubE?e=>aao05e%'d^
%hpP!YPReE'P*kmrXD<CP-5"Br@W6NaUs,<CB`gL0Jdf>!nU7(RFV$M0#K+%c"T,4N@X:Y':T]O*K-iSUafHuu7j,i0;ApWhg237\
%p3(N(kM5q"f<QAFh2]O42mlb^IC7UXO+RGADY-RmXmfZ<.j!SW8ZRpa;lRa<Jk*?^]hFa%YQ!LL`-l9/pT#Umq0CO*APt.:h$tbn
%7[\uYef_ArL@I!Y1(W1M$V]lak#<?k&8!jO^!Fc+O+t;n,hN2>Q:W&dOYr>NXi&G^OFWh^PZm-1Z?fos!bu./QH&tPA$-:F&W%fV
%Ga/!>LCKPrWl;1AnraW+:G"Du'[e's6L(&AEY$uSZ9iBl]kqo^(&HNtK*P?h$,?S.?(>1n,XN/ijf)Jl8XhAS/"-pE&_6k%5rD=?
%#Tt/YjXD=uVJW]d`71[+ekmbub"6R8fkmV=/6gIUk#='b#;<8APG:,'h**SB+=-KNZPkX=f"Y$2G^1lHD8d1KQbL*Vq3(7tfK`7K
%JNW$WIle=M[]W@H"W&[12f^n]@=>RGk6t+Re0HF%`G$ZT:<W(XP-G87,/m^Kg!hOb]X5]"Zhg3E>o#0ZOKW)U+]64oe>fdr@+:ZT
%Ck$fMkA(CrB1>\&*eU^cH,(uVCa]mN3)GS=>iC5pXQ;*=8\8\J1ReZs)1tS?'i`:O3k]11k><(g8I0YRc./Ea+sAr')rq`4W[,,s
%A<Jl?8#H));[;4DiPc%:7uYqTf!L4;58sXq*O"D]8QE$u4`k5;#gr%a4<qHI.QkgW(YsQZO3%IC:W:rJGKlP,LA'aUTK8QO%@-@J
%cV.(`3Dp-!SOeHd7"]-sk-h__m.,&miA%PrH>mHQ#Tj]OKqEc&$\5`9Lrj?WF;B@cqG!9c,,+I9X-)2sLj[\`=5r<g'<rn[7[Jgl
%P?O(!6R09tThQ*"Z]'u`H`d)E95MU9[@gmDWhbg[_4SHbBlUXt:qjqpMJ!f7l@e70(kq9?%t/jge0a)+'l4('9LB4G3k-)ni^R+"
%X`l`hK]l*Hh#_@3BWnf:@UkYu#aO-KJ8JSE`!L<Bh_(W"Q(lAMT)63_0YX)GTCCZF`Y,+U,Y*q,#5P4!Zg;fA;hip3nJ`C8&r]nF
%6%8\^:IGf5YU.AqFeD&?CeZQcTEHfq?!GYRJY=/UQ`,%eeN.9.abs3/r:AIaZVbpFU<fO4Zb.:s:?Q?^\bA,A126O3'tVMVjb8kQ
%YG9LMa*ZDPXRZ-&/"cWn/4B"KC,%+7Y807f0-BbT&((kc+Fs5[7"h-Qg_:FoF[a5uI-=RP&mt8UjM)NA="&KEp@)McBmk[3!=p_L
%o"RLI-U^^.$lf_ndjkp8OSZ:5o*ogO3-@6+Ip(8*G<:HZI=EnqoA=&NhUIHZ9fEic)(]QR9pXXFpVNV3W91G^KISt/JHj<FH.gg`
%r=t[:Nl225+`^1ql7&_p5RA0+T:C-$I4aBYJFgk+PWkkmD/Z@PO',U\SRG_jcH-8\i5LX)V8B:VJPtL=rBV_B[b0l*D(c1N,%gM&
%9(t*q>HuB0$\4LP?2pQ)LhoZ<'mum?93XIU#e;_3V0R(-HTAGNg1'YY/$6WE60<cG?fh%/7>=g0K.Y:T<f(2#2Z@_\]8ps)`ECnY
%L;6d%*mXMeX[';R[!k$ueVf#7RU@aGBe,%1HTGe>X\W`.0/P&gM<r%DrXKm<Cf6-a-"'4SS!A<YGUGe5#(AX<1f3!_;_OV_<VD$p
%e/K'5I_RJkZd''27j<8."4`3$N0GLdkF#72%,4X+BKC_76E`Wh-tnUF)d5U4q2I#(oO8MiZZa?QQ+-/sFXE(6"tES%iap'Dk;:=.
%DSsqYkMqAc/l3sG5UA_4,i"r^cSQtWoFInEH(nk_\T=qKS)\`?PU(u!f<,a$Xpp-!lhHBU_0NiP;oW'#@8b?mR:k02[8'dlmL\hA
%dSdiHPm-??c@U&g>H5q;1?=V2r9)``!^0;ZP5R0]Rnm@>FP3Q<Q:J9APDs_4Za)Wb8uu6IIe^-0:O?4"PM/S7l5W+3IEoK$d/>Z?
%"NLf1:s@D=LUXHM6fDBId)X,D'K!eL*k+_NafXaL@^u^V*\$^5lt`9"[o<bc9G^PZC$Q#X?!;<n1!d:ij])-Dgt:Y[k$D<"jJ0>9
%)6FYWUA4S*gLptYr5R_IVT%E=7PLZu8g0>Aam<]qGkC+RchWs\W"cQq6ZFNH+5Q95j4UMd0I=Ejd?4h$%A"WC),iHYR%S9;hnD9j
%lA$"@@r1OU?N1@<9L8bP,3'gNb_f_s0)+'/%W9PdnQYK+^DB7*Y!!X9A`Ymm92q-bM*4ji7"hM1U82\h6W7.tR0dg(lGW*p:EI6D
%M\?N6%`tgoRCeU>5$6Co)=p9$5KQ4@^H]Mbg*DLTIT(/1njQpJSI8V%h;dQK,m9a]i3A!$9VioaWL%g_\O7V:[Qs'TiF>bpa^s=1
%6+Sm%Mo8dK`tjPBGY+&N8p*,B;R$sA9@XXV'(da7G;L1T_j?#@@D?j70(K_-huQgWOcN<a[R7k&U8hPL\)Xds<ISQL*ZgZOFmgPL
%[<^cP)&^^7\t`HKq:),0_#QI3XXJ;;>s^m4YstotWt6c+*JdneBZhF`MC<2PC.i"Ilm\uthOjs$"lXEKBgBkiQD$g9H4F)T8R0l#
%@:nb0D)p42OH\(4P\c<HQ\*N8K4L:qRn'cJ_^R14c5,0WWMjIsp'N3**W)gp1kkB^9Yf7"I4r_-eK6`&!VCBVRA;=BE<9R?<$WcM
%4N88,!d$UtcGWiJ^^UaQN3j,X?pRC;f!'QugsaS%&^<hcKW.PP=RgrON&E%NP(aO;FI/!DY=KnR>H!l.';:/[@ZSasceeLu*&(cG
%>C<(,(MA]-C&%e1kC=oeUQh7'O:o)f-R@i7LLQ-M$6Y^8bs&R]fjZ\_ZXe"ETsqqkU4^'=laoJ!'UG_alsARR6knqr?)SD#faRo/
%97m%n8haB;hH$,8[ENH%o1+"s<c2mY\dp[*MY0k<g1F9_`Mr<],f!g/4N4/!F8c1J53&l1^<AQ$S.Y81<g/j5m-.>qL$gAO:WV73
%1Y%11+5CZ;psPRiYm5sSLI`kYriQLJ:jk^#li-VT^qHYX:HG'!Bh4,Md2g%s=:\K&4b$.&*C#h:UW,%a<&Q*YKW0b'@qH`Zi9mO;
%`K2>bb!MA5rJlb91213=>>]b^)0pFF2:^&jYE;2k4%A+DA2kr2^2GnbY`h;!gMD%(R9H.>)[2'Q7/CMjI5O`AA$aQgQ.XTkfa)W(
%Eo1^*/8!GeAtqC@]o:458$Iut#6.IY?bP,(4K#?=J\dfb\#EsG%!E@9j'7^;Enb@jqK#/rD/2AuKJcE2BonlN5G99639.JpgeVld
%[ZJJ_d'm9R5Nn@bQ]p'=T-4JOih`8V^T7oBe'<X.7(4Aml7ae@iN]nf/_;0u<(CCf70$-bbZg`t@DR7B'H/2b^,n)VdtO"X!M'=n
%OjYH?%b5t7Amo;?;F6FT;<=2+?1N'5GhQWr/hQ4#*a9%F*^1M((*f^hiF?AU_#_8>3`4dD4Hu)Je@-8;?.$\.UM&OV]59:&KL=\M
%@al*j-cQps2Qp[pmop2DC``S\`<[X4m'F1+`?<.Hi^IHIXGfX4R"Jjr;\Wan,N@XDPuEdN"?Dm)*TJ:!$Zchf##1"`b71:',ZMM"
%mKMr#=JiN/Bj)oAp\O[[YP<dh0X.XrU9:=0!s?ke6/&-R(m8&clS5H8dDg_3kj61k,H>Ai)]c"#Oi::_,4Q5*`W[a^Q2K^#CXj"r
%ksW?$:2!%+c\h/U+N.@O(V6B7e*$me!\>JEX_4l_*\!_^PsX&K/;QWL)'MSRi.iH7m332mNoa02g.g-N!?.R2%bYSQ(L6MR`&8Yg
%e-/948>N$m\EkK3ijdnV^!(++LT(3i4bO<DK0-Kl+B#W(d-7=VbM/*^7h:Sb=e,+OhqS`Y_RgLHQDCr:)TN^;)[@"e-gHU\G7i<&
%Y=f*o8ae5:<EF[F1DD'U;C8X[8?2ap0#9[K^-=^A<=m`b2md4Hf+k:S)@/k.We@\/^!XghVkiESP96F*3KfS<73=h7<u[,9\6Y%C
%Y(Y1,h;JB3b[19o(kD4hV85Q-bTYi#4<*=WUHZb_([!PW,[859A-@QV)tbpQ2*jln\&QYnSQbnJ`AiS0"_2cfUp_,m-',l/jVAWP
%YaH7$<a*R@,@R%>ef7>Ug^r!sq7j?M>R_oJ4o]fkm)+dIZ."QT3:YUn/A!*M:f6Dc.k?rVgEt8-N`1=S!05tpgDq2.!hj1fIEJik
%&3+KFR.14uL6/*66CT4US'O;Q@9T#%`O14W0e)>QK]hc7`\PRu$74sGRSMUqi'(r=IWCt.'q@@k3;WoePWm2:<86qDK:JUgPBrBE
%*L-/!@NFEI'GOr)S31PHYSi\)`E!@8m%nP5SI;SF2tSd3jL]qR\,ljaK'q0B9+l8coLN2=Xc1^paa>f?nn4I1FIWJ=:"+tC2,EBo
%'F3kD)3JY)QN_FB"ofSpB1O#c2j:f\6<V([B_,o&!R`&UE>1sgakR"h#OrUUY`reU%>D4O\?L=s:+Lu8g6?*O)HuLCdutbm/iSLR
%VC!2r4@<tF'5<*MeA#0M^o4W.7@1):#gd-),7MK;?h2`WD0(?]@%IcO0AN:?[('pTlHH]7HK>Bt7F,b'&7QI:c]YKlZCPoR[CEA+
%JG,!9b>KPS0D/GS*!T!`%=N`BNAq-mD_a3`4kWMCB8sQ9Bp95+H_-o<Gt2:T$_*ZbXl2&rAJ#97CWV-1(\EHJ:oo,@/`e_KO'$4s
%)k^lb+t,_i_(of`d3Sp#Ir%JY,O-[:e,l`^^sjr=f12rZ:/-;QmF_I7>jJ9#Tck$8!F$RCMk)fuh"A[e[SMlXB<1S9Fk\)MRq5dL
%VQuLWeDXB-eJ@Pl20FuM)-6Ph4cch"KT3KbpO`/_FXYXF>TDcl@cmQDUF,GkgGTmXda4J)=-[_P+s>ud-+d_0*kL[(!FI3gNI&@,
%c$rH))4*[`Ef@eLC!ToiF[DbO$heIJqC;h*I5U&<V)W<,kJP"">cO?@,LEmk+C1:Qk:i0/fMYTb%S]RE'0pfKW:gS4Xt>7MBHM;O
%dN\_QEpickG9?e9g3pMbBo6R]qmEm]Y#hnSlTV%]j1mae]=>7^$/TK(KNHC)?@3#RfHM^X_g$g4dklu<1H[P1_D7nRFRub<eo9i6
%hIps_P84B``l"dipUJr[.C\=j$?r,e@$f2J34>k*;/[jkc`s$08B;f?6onW./Qb;\PLq56[`)ZnW)dr.R'qFsAs;J*7ZfY@h2@qr
%^S<Y7F+mrBO)R?)PS>riE2X.5cPm?Ah\j?f[6``W78/?,2>gmo9eO_Kf?@HOiruOnKeB>U!EN6+__:a>kmQ79p!n.8;-?qmeln"g
%;O%k"k2>NF?"kEA6?+QuFVU'LV*<<$kZePdfO[[*c"#mIMAmqJ=KZMiZf,RFrX-QLI^QDEG6PHoB*#g6Gpm[D^]+G5_QZ$]6?Grq
%ih'`h3eCHG$R_?72md0bR#M#GpE?06#2RW^-b*u<=7G$>W.mjI.j)8D1F!cA&]=KfeDq(ga>q,D9-b79k!Cir%dF8315aiO%0MB*
%0mOE\=)uZVE@WX#O>O;g.4Km4>EP5%E%nZGZGDs<"D9Hu\lK)^Z1k@@^:ZFs'i..(EAO2&\K&#u-l!H1[PO;H*u:uJ%B%4?.FT+i
%pt#]^PL"kr@@$#nRG&polfO6O-D'$bg'gn(1/8>L3uH[u?I77/Wu\QH5[f8koQ5%)W:j3>U`E=&l2XtRW3q<c6Du2DeNBSd<LO4n
%l%El1&%rG8Y"0sW3/=ZT<,h[ji?u\`BTB@+bs<RXZsoqq5gMbd'J$di$tieW'FBB>P8,&*(C'rIe+C>Xf(!Q41GIPbMf"(\KJBKt
%!geCn&2^!7_j!g\!m->R/BCiLZtrrG$Ve*cr]Z#Fb$;tBAO2AT*DLjI`8,)MOS^e[bEj4E=>V&ON.AN6og-Vj>T4:.0X39t,Q97O
%/-:'5?,UmFfL!]Q?4f:>M)V)t@j&EdX?0['57lG-&(9ZQC_80LJaVMi::Co=&.TTu-$<)uWJeg'H?#0E4b.RUHV;M*$i?;7d9o2O
%WAtCVbbSt@cde!N:f2-:7n[o/$jP@X;4!TLKCD44<$DRj&Z%uc9#qHQEkOpK/ZrfQU^fAU#`^6^]:q0f*VjN-:gtnPgpgUH(b=*U
%'GYlIW;0'LVagUX),t=Cn2;a^l%o%e0`4:V+3#)D'p+E`/`PrBc*hN5(H`_,gaLf:XB$M`qNlfEBH10<OZ7sjVpda$YT*si1o[e"
%Lc(E!TkUfs1WTGseuUB"Y+40j`kB)U4NSUD*:IHNP/ZS%4/sn03X3,87%G\s(Eo=UQg0#)($o_@Jo_6p_&Kt`<7d2A+P_fZ\#5;n
%.Vo?YjuW\k]4i=0R"*)?#UqgY%ut)AUsGAVQHZPBPPV:qQEmDaL]Jg5'm.UM@VEk'B,5+'m"F-,5E&/YpZA\<D@Ad`m&Jne,d9je
%a)S7?F$2cW!*ah?!gYYMI*#9Lei](/O@B8.I7.Ta(OcPl+HdloI9hU2*^RmAXdJJ+;tnkecPW=fHqRR7&;IP^0P)DW]ZEUTo)tq"
%m4EX+6KM>WjX43m/Gn/^LC"/+6ul.gRo,1=a='k1C5[>L-2!KF(-%ZsV__#*]_f;#m#*.1()5a8B-\>1W&FBU)'l$).7Y*$]V);Q
%/8''\QtL7KeDM]]EDOtXLe5)q5KrM/2:RCC\1_Rgo"_H^LE+tWWbGK(B^gb:8AYp+GgWYoSMLJt'cJ7-Nf'8,&/)5Um\JBJ!%Pa:
%r&LGAMG^a+'`c2h0o/["4Ub,</.oDPZ9EoukQob$StN:F>,Ok>)dfB3TsoIeq@"_NcjRj8oc)(`n_+b^:'%[QL`jRqbqdBq[P;WB
%07ZRVQ3r;G;*f5GZ`sLF125NSKQumU\"+d>fNS!qXP^RV,g-km:G$PtUB61emAq'bP(rmMSM&F"4doI=:k.]rP8X3[gOc[tC43\P
%am("4A;S_o2H:T0P8f'!IX3g[<A-#5^@3STSBrQJ&Mu.Z)00;(:I@*6GQ%k*kuNC#2t6,.7MQgfbX;D^<Yg(u2&)#HSg$=1k;8A!
%:<n:X"8BNc_"2S]^Gc_2DU7A:B)7_e!ai+[5(LW[]gnDL"\d:`bFc[;iF"R!:i+%am\<?ji'.eK7htc6?X<dp9FNnPNGfL+R*\XN
%]eDaa"+o]K,K>OP7jZ.Kk.)o])Ju(;ebe3@FUTN7o%DcInX>+`jrUtdE1?2Gc3GM0FG?dub\BZ#\SP!urElOLQ-r-pkc`+,k]AIp
%V-7F57H0?9dTDr(iU9VsPc898M.cj"8!Y,BX`iEQn-8\"C"f#p-OWGiHV1B:'WQg/Z/ZgD:At1<Um_a\_q+4Z#u2.#/9#2Xq%n.\
%75IPT*">j)*;83mV<W)^Iaam7m[[nViNp`1REf]dQib;J+0A:cF'Xk7Ji-;\9Zq8m*]H/=_m"D<af^?r6D`e^%&uJ_PZgt3UkMkp
%_rNhN-YbcgH'%0Dg#C7\`sMTt]qo/d@L7CW'm&l"b)nlp_b*UP3r:aoc]U;MHAD;gc4&0V>YhI9=24Jga8fXR<b;C,I>D-kVrR!a
%I?#3k-;?/'#I>"GO6.5-p(ZZm:f:0@B$+.@M7nKZ,L5>2/C/'gQBbD+bHs+?-#:b[,[$iLQI]Q^76RWV(@,$lUs1FWV'3D%,f1-u
%aCo3gk2HZ4LS+U"Q?&.!jH0j-k$(50=Y4(jM@ONG%ki8NSO`0iqJ[5B'C)[pNuE,8)A@-PP+0FQc!$IaM>^CS_jCu"6mX,^6*,(m
%ENo$5N83^O:OiW7k0)0]ggpq4LIFjPYAJW*3<1)APJXU%A[)Vi=VuEfR$E>h2mgaOr=@_4)P>0h^k/uHo(m.f-;6k+@b49VPCton
%W:4Xe.Sb-gb"s6aN4g2m,#CHH7F:$R;C!'Vo\(L]q[K*%fh/3Hkg1a!9T+ojB8fbN-lO-uE:ntZYmi4DFNq13CcLF\Z.>]ZpQg>^
%iL\5HN'i^UKM>WbmU'TEl"3<kiZgUOS?doglq2i<'/T:/&p8$`)TN^Ha_!V?/I(_7U?@YqUaiWWBXaN%)4!,#Y17M9PuNr'?P2/p
%QA-:mbk^sDg(q/2Z"A>WGsFPC&Q8'.)jX#\aTkYG=>"i?C&[m&<7UXZ&n##kdm4d2@YWl><_M9O/CG8^&`<Md;l1Tsqfl?Tq/`^L
%E.7#9.-IDUaHX$?$GAq^S9mYX<o*&.%(]?t3F$76]Vl4M(GLP"&okPP+]qQLV`Wr8YH,,b[?C&'[sF[&p!?uV2qaUIOX%;NH/7*3
%\V.u8Y*<%G`;jhu(6JX5g-I9@#*%(*%NKE-0VRbs:/hfR(Wa1b&A%;mgtni#CgAJ@']J'`C(5<$2b5o/Z\E-`]i`^Z*o?QP33hu4
%%b=;$EY'%B&5V!>RB"a^h!\tmeBbPOq<M*`ne!<..;k6`rhB-#FGP8tM@1WrPOI$:fp%9W$qf2TPQOlpLiZ#X@6uaNkH99@#",_c
%m!s&KhI2[]+77h))L1K5e*+a<$JU0>=_6Id[4=,I;)JiT*,Dca.7eSI0TS>@SF3?TVK1`0C$H%EkE`&Fk@SN-('[=Q\Ir-pQGR,.
%T+7Wn:a,!&JL/i>7R-&_.<f\jgETSTgF'>CLq,6!Uq.-P(=/p;[\1>87:bYCp/!B+.h4Y+SS<E:Oe-$==^opiX8;s@_Lt^J/-h2I
%81[,L8+8a4b3'#>SO8G`[#eS"=NaHJ]MZhjWJ6$ShjW%!fn;>(P#+gf8&%&(V!]`<^o&\rpWlOn+<QZ>.W7WiJPtOWe;,REB0CWG
%h43+p68('!n75/P@_)`T0$,0Kf5tp^U072uhtoFR.Z*U@C/V.d2Y,l;lL&e$_3>R;$3,`L!C'AVrj]s31ZZ<XK3At_3_j\9g4J)A
%\?7GWmndcpNO<)5LkX,J#7;r+q$LV9R8+8<"=[>1c3\N]5tSM'+VI$Y5qqS'oRZbhXE!7a!6eW?@fj,h*N+<=ep4"V?)oa7U2=3@
%0HI&L_OK6LfIQ#g7@'FFEj7DhBX.8?8t9i7K5H4!#Qd"Mhp^tk>2m]#b/jSD/M?:(=r.]-p#h.eqML3LT)?JGY-nu3n[(9<hAMqP
%^H:I53cnZh4+?H_qBP)=98GD3`E8t_l)Za*MBcA&KLb@T\42.-&uO9f]T\5M+'Jl;K+JFHB5\mC>UeqP1_/X6`GmNbk'OcOW<2=5
%l/#MJOukEQ:.l%bY8e)GD!(<1IV=e1SBP7'A.Nn4I7nE]4W?ok-*k$7N4+ZROs*Y\=6l7j(V*1`1?F4HldK!9LP_$p$c,>(ocn2=
%T2=1KMH)o-p\#D.o3T'4!KGr<&9;M=eYPi63.XK"E*DR%jJO=e-Ws^5$j]^"5Z:p9*^7AUH7%Kc96rPGTI<jaKqLNGa4VKs!!:oA
%:+dia$_CNiRs^?&P)WHpge=:(Q;6STnI-)KB)Ba&>?cR+VCtk"]E,tG65S<#7!_nSN0f<%ke+#@)$gq(rlu)Tkih'kFZ3_8Tk#_O
%^HRV\Z)>7]$Gre.eKGXpASMTO';ARRriGZA7?H<];fZNXoNZ\W):=?ANp[D2_:D[3@(!5jap;2lnKt<>em$N=e`>b#kf0kAFpMC_
%&JmLqOj1h6@;"]3Ai%@Drp_t*7ifQ0O?sp?e`6@F8dshtc+jU(<ujS'.mNog$+0K1,Hnd9"WlP"m6%u`j+hAV_`Om9iO1<m"h_LO
%[>0qMEN2^hSF%1OeZg<EA^R"4=GRmFA:,uGSTp=@.$6!YQ+>HOj_<pg?TsC3L[-[h.78aXORR..S)Hg2LV'++Jq>ro#rVSKdFlQJ
%K]&O&g(\tHH./A4L_PKPNZ3kmaOm8]mpn*8d*)&>[`)$,Cc5El`D'1Yq_FpETX)#k^,ZqKWP@hA]a;B(R*uN259/MC`I7H(%OpTm
%7M8FLP3DY#(A#J%,KQm#&r>?:`@O2JM!<8:q"\%(`Xe@,_Ei5W2aL)LWgZa)O;&Kb8s?)P1NTQSTpKK[U4)'W]beAhO5<'hM7-5u
%e@JAoIon+H-L)up)oi+i/<KAjJ.sE&CVYUphH-T68iXYaHHYf9ad-BBJ<"M??^7t-)&i0CBQ)fWY'8p4^GgMa*aEK6,4/.OP<B)G
%Z[lTOY_PNlK@jod.("H?I[0,+Zdi$F;Go*_fBZ/pATOD*%-)Pu`QRDl"uKCCd,)JfD04d4[ne5Z&-\ELk*I2W\'T%`;2"'[L(4Z_
%dN.#QqW.k"/U8g]X.JEOV$Xgt=Nq18IVAH,WNZk+<H]o42@:A)s6/T^@'%3*6aFV7#93RU!VIJ`kdTi1!mr[ri<Q[cZ4aJhd2G#,
%;e`:B7H\CfMD5jAn)K1-nhg+#->9E'6DJs-C"\?hhEGd/IA']s"0SW\H(jZi=I%-=Z/1SE1[r_(oB`)A':0=gRA8JhDYqlS_q]-!
%E>(1Z4/('9;-NG,B5_]m9<QaUGV+OjI4XS&*NQo!40Yd0;!g[41V,UIGqO")g,7Koo]9oU&(;&12jfIAcrBIeAcnsjZ5]G7I2jE$
%e96adiJ`I9+1@rA4sdg+[Nfm#"sgOj'(Ln_4FP2<8sA@&\+ZfTK]8j'>!2bfKcbCN2aO4m!VYZ8dX!9)H[?\TX7,9[Hs%[d6\1b>
%;!dC<BR[:ERh]C!'SLT%dmJY*Wh%:qeI=.k?=tIc+I^<.55fBn9l1S&OK$M+B%'4P^&9&OI(Jn;&J_Lk8kHe6qb?oQ7n_1JgWL>U
%jV,"Hg?O8KThCaW7WIa^[/O4q3X2^rVChO#IOD&_7V5:HD1\X"-T'R:MX.tNkj<c2Njoe'b2!f#$WKYY>*+\OmM?^F-X_"7.\5h^
%@?:=ke7m(4WQIJ4jphpQr:.C.p>2dQNm)Wh0O$GmlE1*@b==or%F894rqDF2]>f_+1Uhb,\GHPcF4+ei01W&<hEUtC,p>c3DM"a'
%:$;XqlmRhfRe)n^9aGN%DdNJ&e-Qrbg"1LG.#t[n$n7<As*I7[dr.escs4Ji_m3ptdM4N@$,&Zgd$\GCLIB@Q>B(;jonLj@d5>Tf
%VrAmiCp#]>hVr3Vs5E02(AHM>8*<PTb%+s7A`M2^XG5Nu5\or]^EL3^-_u]3O;WJ=q.(nC9%.2\^9CIO64npWgE"pr-moHi(o+SI
%Rd(o,[VqD]47V"YRjUU,d7[/._QG*7d&4L9b+mqUS\?k$&MmC'dLL1dU*4h@'t7L-Rn`Q&oWhi$3_jepn;M=`WOMuRoa\>fYST70
%n^677TH%+(.]^?o]-K[&BDAbnWkal2'+p?OhSokj=uT7iArG/L.S^0dg%;.f'8fVJLrJaG4G&B$.W.Lm]b?hD*6%SgI.hb*,N<\c
%aC6NPB^pIIMIc(3JZ;4+.mQM-N-#^I>_+QCa[@@gG:KbK?#Q`%TpGkYm/NQ(\;&CW.W.Lm]`[X2m)=s%I.[/IN$saKW1Br)d!b-Z
%#_@j]'&B'h$b@k-N09`/QOMX5OOcB'896ZPB[NZ6+Q?__"D,8/44)G`Hn'"A0&*A^KO0[0L^&k]Nm:(5&,i&C)NM6eY>m38?;kKY
%[<];fQX-!N#bJ>Z2W_AC:tU;BB$Bnb4d^J?EAJ=%7M%hZ]!J!qT;ae))+o1$W])*XA8bkMF#Ti'L]0Jt&\EM+M?\HNcLLrI-_at*
%<KX&gTE8K<ArSWeLVf4%+p9]N=>D%7'K;\d<mONS.Y!H;:5'<tF1$S318orijj-E2ZD`hUhCRr)BOg80luBdaoZF\/4ZKuE$dr@?
%m',Yp-pfdb\hX/&M/9;n\,i.1a.:T5nm#+5B8tR$;/\cSqe`'Yj+jBK]ss.&4q3O$C+)^8\u`1nTuq_p[#Oab6rB\Hk`s2chP&\,
%@f3GP&OpaBb'Iu=M#n,l.FV_"Y\pmR]a;C7UXT"se@@-uZbNu%88d>]/,nej)liO%0qXD!]dPgA)1Z3qn'Gi6`(WD>ZcQ0OLU,dk
%+f:%r<S<g>EG+cl:A#rU42afW*1cE7IJ!:(+L4F`F+:N4]h<j=q7_o3*KKkW6.:$!BHIe\\3=^u^%;"sG+mdQoYZu`5,5Ugc1OhF
%2K0A^]CFS3gHd)uNQ2k6ofI2]nG(;U/R<Muc3'NMo7Z7])9)9p2sQsKo9iQgdgrY'>+CHhcs1KZ7g"*XUDk<RI2F3`'(!$80f$6=
%a32.oBmb;[$(ATY5kCaG`T="ilCGp#oU,Du`t.9.3-3,]E<DZpS^D-/<*XV,Ttf%n;8TrOqrTW-B9mC`Og%hl*]<Hk-><6T1E,.m
%Pa3D?Wc]4'UnAcYIWu#\b>d2Gk%Zt=g=M6%^%ggYdg2q":nmT#nnT^7!l:cfV._[kfZ0<sd/9^e1r%NgY(*EJn+<Hb\ctOdp`WW&
%b<?_$5uYH!m0t&Soko0NG9.obUmu'Ln"Q4'@JWlkj\)K^23@&aFg-@m;-*]j=lo:<P_KOuhYa]pX4pTS,'0"Oba+6oHLq11o)Ca'
%FCGRBd.iV-NfRJ.Vn1.k;NR3sPA[-^#Oq=Y(.+@raLnuX+"*3*R-6d#?[@qo5uXT^mB%>(AJ[OVqCj$3MrNLYpkTsX?X!!<*0M]1
%1-=MY+EXP-Tkl2oNKhXnAHK=A1&WZ;oMej8F-QjOQAr1roDeOTBg@nG;F8I4&A-<X*Gs*3d7a4N>s:HXIDp\LOcL!cr,-r,)*cpC
%*1KP>aO[1#-ZF'=bZ*/=33d\-1nba!dCT=pW=N.eB4l.8i\ZkR=)C6Jpj5MT?QL(g=C<YRYBAkMSRaI!.)rb!Ei'p2:0O'D)c5&]
%1>cW:.Rdmm;fR^q39GMhHGqFr#50.!DY2pPqYN*7+Oo5X=>uE\rSGq@B5-3a&OTWB3T\eM@.":GqIL=is&fYbKW2$ZMG!]c*L.<<
%%/.sp9mldln"\;r?=)TbD>CNcJR6o?:]Ds`/p2;o`38@-:Y$Q:nAMHjjANL*'9PdI,$?;_)"T]/6IYF;s7@cSG^5QpWo*G)d@Zu=
%Z8saBRG_a]05EEE:G3gaO:jkBgO&b`,=;#C6q)9`SUeqf/OS/;8F_3j,R.?kHnn;m4:7$$UY64>?9eM_pgMi,FuU3q6)3-7p?)%r
%VG;O2p,4C0*JWnD.'[;2F%(8YNoj6P@5NNt3<?BGQ's5$Z(Mu&$::3gP2*,mO]Z6-/=_/j0"]@t@0;pt*+3\e05EEDD^QXYM'X@S
%'tjfSlgG;=S&=O@9Cp/@"QROk0!_I-`0YUe`qUQdrps1EJ?mmqpTHsqVc$:/aeYb-AQ5-iI"Z0>s4u24/FBdQ[o!aKQ2HmUL#4u'
%=Ir);gU's"e2!q/[_G?WZ(P%;r4CEe>Z5&O.:%L<!]P0u:LtuSG@.hYc9u,<7GGiN7LsfZ+'j;"11CBC&4h()Z*=MH9n7PhcA^J=
%GqA=eamr@,#s?VSQ&a9NWB+d0+2^"!)":9^)8@\KUbRkW->9E&6F2*R\DE(W?+l5U&@L>U@BD*t:(-0,<1P0YAJ9&=ltQX%S[`J;
%9aEZoFZOblW\T[gI@N)OrGDqNlmQZmF.EF#D&]>E%fG_X^C1H"V^hlO3rTs3U&(+SLspcgPQ-D[P8PjI%sjXP4](AV6gd-q>9hF:
%WcoHa\b_K*<o&7-,"#cgDEr9V':K@M`V"+rp@lncE"_aP^#a_9?.D9%M8H-N@LXsJ/&k4I,rkj4GU+2tLf8:2M_`gEKr8n4-GaQq
%@4:Wh`=6L`\"f^L]suILO8_>%&Of/$d?!DIfTmcB^eA\'d6S'dRlm:L)%,BVf?CO%>%jI%`CVXm]?I/hod9<O+ILV2V]Q+7crAeN
%k'AC3)`W`@h>$@*1e&0&2(Z<(Sd^0OE*[Qb_2i;E=>E^U6^)Y(7Lq#;9Z<R=><LH*d*(BU@3"OH$aQJ*ZjE2$*GB@u0<KHXZaUGi
%7'od';^,KZ#N?faoFnf=)nAMS)bhu2nqpu3&/ciMW'`4:PEA!lIRa`Y]9P9?;=2QTp49XSnto9O#V8E10iaYRQ1if%+-&Nq@@qt=
%*O9hV7b@ATG`0ojBs``^GbAg#"VX1ao&'+(9h`nkeE:JOQjA$g:(_jtbF@ckLhANkC\hI-;U*/iBWeh>UOg+gd>a4d5-?"?<N,\(
%Z4%u-f[Og[7ACk4FMci[mPl>ORrUlA=l)<h_mq_$388D]FTaLDjQ/'dRrbLb>sSQM8t2KQg5_3ep#8Fo5'hQ[5)Q*AFkAo[B96lI
%EL(3,[0$!lrZ>Nj:;Y2tN_N>OBEO9he3rM9H^,V.fmgen5Q+@Am,tLT5]1]S0O!%c)Qj&'jcc$*3Pe`RRKLDfVq[$('"NjO+>_qj
%+ELrAKOtA=.':O8NG@X,0PD?M><nQX)D&&=MjpB=hLT;97VTOLT=qr6lIViEQik4^,8A"_.?[<F_q'&"nQ$;[Kcj*'7W=@HHCWTc
%G7FmW`Z2'*dgroa+!&<pcrBIeAckPC]c3UBI2F+tc98H?$"EfiU%Q.8THb5YTW(-5j<<hT8UCdj5rkZn.c1]kWi[pb!(6Q2</Cb&
%.7aPX*$V(KX!k(rGbSZDKFO;.d1n)!mV,DN6UmiT<A\/gS=qCj"-[gOC&6\>Urs@pWKHc$#&BW;Fn/E*\-&i[@McClWe28fIFi1T
%NZX*/mg=K)c<-lY!W>^1(N`<BknFZCm$K'ulbU(hWE\c4`#=l,PdV36%OF];'u,J7ZJNeTP,<.hHn8T3mk!KSCTXCtc`"c]i#YtB
%'*_";bGBVt@I+l64\PQ5U3EYM*"^5&eg<[,:ost6$foYX].nk,.%(J1b2e_s.>lK'_-P2Y&0'HP-)b.qA+*;QV!;+(E^lnXZ<PUO
%Fq&5UOLR[3api3G$/qs0.:FG(6'OYbOeY!a#/-pf&KhH[gn>6+;RAQM'>OsFg<bJ)mG3uF_?B.ZW$+StYaGbg!\Oc2Mt%5s#sI#*
%[s/^G?95->O$G7HN*;3mmmPlQ=:9"h,@<`[?m0DS30\*),WiHsUid>.]doZ0entefB;UKOiBch"k';J^>fKDkdHF"&l]MrP'Y4-Y
%[spr/-Mlbu0ScMKjh=pJ#GVoA?j=T*A#\uC,ccOOs$R:SN[>]-@k1+#8>e_Vi/Y8,*&rNTpQ"P,&gQgQ/c;#*>df_bn-&C_d4d@6
%cWsH9)_uA6Us>,#U"h`Q$>V]3O:KloE?<C^>>/9IW&9_k[FQc4]qI'l8)d]Ub#m<m;M_9V<\^pf#V%2'0^flb+R7GFN=8ne]:/Xq
%,?TU6JumD!VH<ucZb,'X7/^_)KZ4/>r\[c38c0.Z&B>47W9=Y,;5W%C[Q]YZ[?"Gr3b7HZE-l,)C+_Q`>Ic51bR!FX?=j?I2(V=W
%PJ'"*3s<AS,G%k0"aW(PNF8fn6A"bN;'J0IJms;L4h0t[FS3bk,Ea*`G\ijT9pgV.'N.SgZ(D0hikVh#*(lWb:L5'5MdB_pY4g:$
%J$AGSVhu`OM?gG#>2Q*017/O*RnLX_&Op@_ODE>"C0L82n_K]VO5J3P3\V/224_4BNY-UNq+<VG)"]"4ZD-Isgt4_^P30sU1K+[;
%G\GtY&AsIN&GM!M:@I9!Oere=dUn4\8IgJ[@A8idLZ8-]U$FuUp./Z;@Q?AHHPEaBU:ap:'IoY=Fqpj.C;ouTNF+1PUf+!2G^LAO
%`5*MZ015DqI#s[&9[WAV7?j'5/d%r9>[j=eg*RB[K#?FkoF<hdK>L$25W\eT`%]jt6nn:_;'d"0d"6f*b4A78P`5uq-Ous/RqTqV
%IUr+1:H;lb$=tpY:@!p>[7O?)3?e*NF?+-4[OYL`^@e;iXD"gdDHl6X]g);5H!+q(gr+3KiR`jfBd'3\U[mslrL?:)g8bP=!Ojoh
%cQ\l(,\nY<TGN:uJE%C)NN#nKnqd9jWa9F[gPgkD+L^'7@]RcN+T>s<>O'"JL3el'T:!K)K#?8SWau35OO`1s",WUSF"0J?F[[Aq
%;q)67doe*43>Uf/eQ6FECJBS(8Y=R'ABg'pOk6fPD%i)hk7Xg9P/p=9&%rnH">;uTd6K,FQ\1u@"ZNQ,1fWkd=t^PY]fZL8*"be0
%+H)4:K=+=ndNtjc$$<=!=.["V>.WM%g.Mg!aj86r/A'U;Xm'SDEI4=bF%9Pd4h;'XN%R;6E?!SO>Ll>NI5X>DLtKWbWp<3sYVe)Z
%gk\QZoS+EBRI]6>kN9Fm3*eKfF%2EDC<gPc<m')mlb#iW"j<"5D7L+jU$Bu8aSZ<RQ699VP`_&BW@aZT`NZM(9-9P?Pd[>d`Y=0q
%enasU^(dX_6D5LV2%1VK<Cp^&!r:>kQL7ELATrUt5mQ>=?is&`SJG1t<_U4gEb3OSaXfF\8kWFP-abjWcW]i"WCtN@dBCVbel&kg
%LOaJ:Jrjtnfq\plVOACQB_/3'/6mHae`:@m\tR9O?pd+NK]:h7K.C)D;TnHdI`rr9`=d:\99K[Kc"ud/.jF<bF@H,B`u.]-F32d;
%RV>Tcq4psjXd\n$b`43W%(?U]El<q%fhrAUQ%T`3ABKk`aIP?LPnf3EB0JiL/)4EqA4tTpKX-tFK\poHP,]+g.IJafg,a,qUsE.;
%%(9;9]IcJrXEglR>0K:2r(`[HFDY.2(_hb464PN=%ho*!i4'S[@IXN[oJPbY>^Q\Khb`F=Y]/nPSL+ZN--R/]W]RnN[^GYl^:mA+
%`%!Ak\@Q&INhU(:U4ah8)lI\#E-kdB+&p?/VJXc#UY,^C%6I4Mcn-ooY_L9"^f%%u:"D0u=Q%a^XqLq3r'=-MS,?A(dO%HI^_b2/
%82B8=l5rhJ`Wl\[W=J>CKl++*,I#\))MN/r"P6#^JQ;R0EUB?@Hg/=*;-'_&!](IoODOk69+%2r]67$]XBHo1)?]dfY'1e0@%^SY
%.5L*9N>M;[^@i"7/M%B`lJbaO2up&G#c]DCk]Yk8R59_!-Fb0[EMtet<fGUG+KLuhK?AmcBU*i+DVVVW"GBHJZ(89+?e=;I(?YFd
%:L2T1+L"h;E]Gh7(<Zu,9b[<5TV#ePYgH<FUM+1Rp;3j=Te=Q[g=/k&ZBA,)fgRA=:a%>c#e"R!&Bu[Dg*YB6SEOVE&dSA"I9fLh
%,tE"3$hPNe,Hr!A:g(!G>)o(,(^0QL`oE=ub3cIMG;MkN1&gpMF&'BJlcKK$F2#:!)-'i8Ll==0Bbj0o5b/&[nHH\4p74^#Z`V?i
%MSaq3j^(!3MHY"2!PMLt$/5&+LdQjCn-@o_%PJG""F<"]A[Oo+%`0'JfoBo`6^>lF&L3:^KbBmMfb<1hSfD&6]S)MoBa$6o\L,'/
%`S+Nl$s\Os:o"WA6%h7V>NGXq``RdW9oho^&D*,0X(tT2nV6b2>ADqil:QBA*@M9ibU@_\;aNa:SM>M;<X[DL.no?73"ci#5$uH>
%mTHu%+NQOWH6Igpf',Gd50Q;^g<b8^6Q$YE:_ZE"?;HBp#DeRldHf/Y9N`Fm9#KKM(_q#s<P8Qq%YhJMj'f->c_0jlDNUdVRm2_R
%68ns7`XMGp5B(RSfq8D_6fXSB"i]*u2,T7K!Iu`QWRmhB\Q21L((L"G>RPNT.XDcQ%YhJMj'hE:6#?8KmLR1^@NS2a[;gi?!%q$L
%MI'L)&u_Y:h+P&L?AIqZ+r[>,+`=J'FeLbAlsPWB1EQ8T5qkT6XdX6pNL?h/q]JaH>L#^mBDnf+p8=S?T-DRGVqTQ>>f`rKAnd%S
%KqhX^$!"A:p&:etYi9)n4U#B;1T2mW>@2T]X)&/U/h?R=?l*no3s8U*6QD3@,%#"t\<VtjM(;DWg*V[[.ILhI*##-h&fZ-!ioBbC
%B#?;I`BEVeFu]75GomNVQFH5<Bnc+>/Z=/s7@\jlWO@2Ojo&c&Gfq6^TrPPohS0a@<]mJ^jsf5piF_oZ'EV"h=B#M%irYpsLm-U.
%FI+M_Ltgl5+6=pSEdJ.iSK!pD$<5M%)Z<<K@E$,fhu(=(GO*RJC"f"I!p+T"q$l2Q$>"\olMW0k>^Ok&3eYc2`]?37&/?Ko'Kj>\
%<:q"`3Z-l)N/,+G+;RUG?Knfb_c^c#$(<9#80"*ng>\>KOQAWt](7ipn^T\fL:Ai3(j[2`o`B6):`=N-UT`YYWd5'<*DCH]`m`eb
%K.,29l$4i?BjWFO"Y.]?U9TZT\6-aLDj_\>ca.'4Qf8(HH40!Y9Q=L\e)&,tn6,Ja+<3!,q:qH9SU2l%MaNA[,p`07[3g6,)S1>c
%>XCkt5)AE15):oQBs0[UFk&:]m2qG90DAE5B5ltTJh=O*.8\^D,T?QJ'GpY7e6=gBoVV#bN<Y;@0Z^PU$g=HHdHFto9/@X_4s!,j
%1pZ:!VUE0qGm,Zb1sm/`.5");lE-[Jp,j:KI46eAS)-Q.K-;klGhDo\K;a]@p,m!VYV0YXK^.o0:nR5T>g2'(\'3^^o?u"Q/)h2A
%H3;D%L:B)#@;e19rYl)=rR^i%n%T\M.LTK<0N&j^F%,&C?58g-)A`jA.%k6d">tfG!b-i@AA7/ALsmd#S;XlYX[tpLk[l[E73$\m
%Lu9b/*BK0d<ZR-RBh!o*g3Xk-s&K_ob+;#F2XA>s.QSe])=@nGLanQ(AKYqJJ3r*B*>]9H\Y_"A<+SFMGJfc>dMrRqr+1CQ6!5WE
%;5Y@\kc$D3e&YG-%BYr,\>QTX$D?g&LoL?_2Ya<$o=C]aU"`7)65BN;-teS<6PPU6Q_Qn"p*"d!ge\-]2O:HUE>:7BVkRN-AVJFs
%3cLoTS>oJ`#f00CnE9.^r;LE']mh:kOfAgKf^rXeDCFfI>_3n7eVab:*P)Dki3=7\#b>m?rZrLm;o`,(OHt]<j\HOq<S"!;>HE'o
%;<ndBS,J8"`AAD*[+69#>][QTgc$`KqRWH6@\kbJVh9,K\8Y^mqaM&VK^/bo%\[!a0"@Z"8ghLSQdQL$XnZIXl`R20+q#Q3\7mEb
%*O7?>H5@%>L(O)9<_n:YDoUDs+QYQUmK*m!3.^TiY:?\=`J'9Q((0VOk]DD53ftFOJ@qh96<o4VY<c>W:pWpB8Yui"Mj4Q@XUb/(
%6f!ZTBnT')g1nq6['%#U'b,.E]P]-"(_FcEb.\5)l6Q@>iJjO'M$a!cg8(qYDs2lXMn"FFYF4D6@Kd90*,8&"0/N8*`/?nL?oBRU
%\[\QN2CBQXmbs?SrcLR?V)FHlDmk;k@&YbtVP:R$foQ7rFelK=i6ecQOms6-#o.@SMGE0p.cSMs#l<N0ld.*O5jMf7/B561VnIBf
%.nGmAWe_L":-Gd"MAgC=0j$0'Gr(?KX.3g'(5>hc?\8mkJhbnr.*?[gGqHu]jEgXV7.'uZLdO?ZY%ii#L[a'b?o0FS\[\QNp)pM6
%;Wjf=X>981L)tO(Z@\;],^C35=^(K#<":c/F9nHnIcT/nIWO))9lUKM?N)k18[0d7gpNndWKX(.+oF5[(_)CC0(*GW4U?^VE$f%B
%`@fJZ7>J`Z=+k$;$5AWLV!1:;gYPGS:((R#alslV(CrAoE<S,2Vt-Yn75POtAJK4N_Q_1Wee!Q[7JFGtg(:Q]`qiV!of_S'XRP<:
%Ncl.g>W8^<qLK2@"BV`S,flFaNgtt?D"J9-1PC@[(hLc<O=<=E3EYLLeEE.*%83-\XT@sEo%mrqZm!@NNOAFgM-/&O7!XQF?Jd7X
%4V0`uRu%$sQ)h2f&F9S=1XBKpaKm%IN?=,'#]U"d8K=-HGi#\#0&jImkq7:/QL6@GN.u%9LjRik&#/NM`9.Vhhq[OPcJ/#3Z61nH
%)Z$=h@--_tkHEd9;h<ub,&"XJYsl0]MbD.ao!aHn.YLd>Xd8fioK'q&i94Q*/B561VnKNX+r=SYUCl"6dW)HPg@^JF#h`A5l<;1A
%^7>EP!]mGc#Re.R6el.W%SM[0OQep1(<#3`e]dG7iXkX>khDi`Ti5[<ej2fa)(t?:^%ieX)C(WnCD[j%TbJu?Yq(a7GKUW8O\Mp!
%!SJnt.72^,GeqgmQB80/DZ`EgE*S,6ELR-D'tk*Jb/@6Y*%XRhZo?RiA!g=D3F0f6_G!rp\=hKGXNfDWRH)stEZ3c$Oc;0S+<E-u
%kVX<RJ?YcE6<lj[QbQ8%l,ZiB@@%->A'sVhC$bWnL0!>>gs]T%.PK=..lqrT)n4BNFC_K-VE9(c*V"``6C(9j/T.5J%EruDihfG!
%UnZHaF(smnc\@8O,r]k%9;q,-W-9r7Kc*[5mBjENilR3DNpRo<C)+eJXP$VOFjdDm*ZYt5#`)!j22[]H6WCPO=cYM;'r]+FTqGm/
%h*m4U7oMrYl4&Q)>jGb*9-ZdWdouW&2FX0DleG>7o;dJTQ+<FtOj$FU3s&],DOqGD5B1jjkYt<e'k<8YaFbW$BSoI(eag2+cH8j0
%i_[:U<A@CT6hkMA0H-g&0(!)K45d]uT,<@HVi-.YW!gWHE!A/\1Vs6?0TE\Kn:*\]j6s#m&\T>'FS^bj>XGT[%YR5_*=%H]AEREX
%(VL<LU.DKu7`/]*MgO1DkKVO%I_40p<s>if6Qjn;!NDZFNXJm)qAnNlo3/Z7h2Q"hS"1;_BH^@c\3:ri"2(3=;Nk#,5.!_T6:Z:?
%N'LNaQM.heLP7W>ZETX."uZX-^FBRoHTH>4kM@*7`].KA`$9YgjdQA3%VE+ho%C7Bg+Z9T.5%:?HRalud7NM]'F42[f&6Z;]`E-)
%jW2R"`Ae\.[+@5FX&VQ+-s40d[W>(5:d-?kUs,/(BJW72XlA26c?2CMjmA7&+<)N1K*3SOY!AkN^C:mKO[`Z>&;Suj#W4)X*ASG6
%FjSNFL5UCgYDnA-CMh/$?7imrTLdL!&0P5s*-N8]<EjUM"iLp\>Yc9Cin<gIWsZ7.E<Ve_QG9*&Ma$p`KfGm<@VI?=*BI2<^cL[m
%0uLuDZ.EU.JQ2,kOcVrpS?EmC)biIB/h>h`%okO&<gme)C),`keO;u-)I>apUR:$REkVBfU5Q5%+V&)#p7#5QCgOO;H*^tJbBb(B
%:Z9c@s.kX;(qG_n3E]qh!0OmDg-F:(.2`&iDsJf<*2O5e3K64QWS,Z-i>Bef%8h\d`m]N)"JSG51OapE1g/GSLrgu#3b"R9FY'#9
%75!k6UFu+\-6@/5Ar=i$isU`--TKt&4M)X_2P4AK`U\W@fnAkIKMFqtYJr,T%;41WT<#=a>jJAVIKLCc0<uqrZkfK:\n"J&Z=-r!
%ih"0D;aA1d_[e-M/gZ0cI0fR9^7ApXiuA-hM:.^TM.kq;DcpjC0[OW.UbHclP#D4`@$=ir72TM!O]c%u3clhld(8CR1!?A@CT,HI
%51JGUD[&KnrO!eoa<LT]h'1:>N'"L7J<V?[e'<\eriUAT,Z<Jg!U[!(=oN;sdP;)#n"O6qbf)`)[AUflmIJA@&MLn:-k?0rV:`S]
%4u(r=F?)1\@I*^h%\64ieN#V9Q)"`8;8a3jp%#SKcFWEoii]7l6Eka_lOY+*FtagMj%S5IHhAKmGeQ$^X0t@3=jWkj;'8*Q,pH6t
%(kKGRrdjan"/8F+#pak7a/B+?'IBkHKnM80WU$E3V3./\`8.EC+ZcBnHdOO,#\d(Mm4f^hS`T*[Ou6r[W$l<aY5+OIS\-W/%qMZu
%<Ip)q4tMK5,HB`ffb!#u8V]\M=!5sb-Z5T*-j?K(,Q%F6XWb?IM!fPpZlrsCNR^tCI['JdE(b3&p8T6E<KL#X*bo_5O:5[c#:^X!
%P7D*s"$2^M+TGk.N&i.3/g4;CIfE\BRo8m:33^#F<OM%5Lcb@p?oAGB>h[(tIg@Y>091DHf,YmSbK.gF=$Lgq/=gtJ'L@>UPsiO'
%H)=r)/!0!Y7=J\oedD]XKXg?L,`dB=%I!`(PX<KHBh!o*g1taT=>5i@_b28<5ecZ"^F&(LafXsaDifALeZtR3KsGK@75.`8c8pC6
%frk.M5G]+9eDdro%P&Ziinu\(NbkX'j:q3B\sMg4Llh>;etrWu=Z3$8?m*_[Ncs\m;:h=U4V0T7neZSDg4D;;:NY<T!)slRla\*1
%&QTHAb+Al!>?"F](=R-#Xj_<40A<6/+mj"0C"Z#34:c'*_?CmR/RN^DW0TBJMKi=>NZtf@a(>'3LJB.D>atDs2T5,OV,'H`JP>NH
%lmY91Y%bS*6UbQ!O/-*;:8L*V#GY^r&`TDUqDHOq)o]qO-/7a?FYTAk2nFo_9r38(WaZqT%e7E8b7S)"?JSdC`Z9`B!l]RpK%hFe
%X:uG:CoOi!pLX*)U"^-q^,8m`s3p`"*M<>rY<W!bTC;eLQlpG!61H[X\rJGeKHDpf&/3Eu>IE*LbVdD@Ki>%.NH]@ADLG7K`sO#5
%`06)=kAS3-o7*qPD;\83AB[OEfquCU*?,?O4ojPc'9O1uAbIcb'LDp.gp8eO*aI'n*?H?p-)'0=-l0'La09!l1C>@iOoPll=A]n<
%H>V7fs(_@Q"M_m__k[sK2*3_8\5F(kq'o@.-45KNFRGMZm!:S$S"b!/*Nd2NG>QbO2/OKAgU075Ik<hud2pq#@LZHBC?BKPVF's2
%EEq>&/W-j<*Gn@:h3H%*fGJ4:2l*fi96<PE>O.[-'XI<?CcE=Dja#u]KbOH!iss(u/m6TSTp)tjO)!)P$6IFmdf[P(]?VWq6XW9S
%@teOPF&d0Zc;G7/S'DI=cW(n!kJ#W4PHD&h>],]+8VN"H^J^5=r`^&^2hZm@pLO,A"'OEZ"WkFSZ]esD<mSVVE[2`G1\$3hH1gTm
%_Q;5+B%2LDeDtj(-n%=p9nV\d:9GPIK6IL57A(Ti34fYqAFCbQ>3Zqo[e"hSE7aVilQRGQ^l77\fX9-:OL0jBAMO<'5[mIjbp6D9
%:Abep9?@9hpb3OSBIN:b(PVc0V*C"ZT)Of.,57X=1&)5$)B&L3k_J(@`U2%9]-R\Lg15d"".j=X=ZDZTE%@ZV8-=.M7@g(:>\t'A
%Y`%BhIllDBLTc>W5kJTVaJ(MBV/(dmLBs[jZA,E^cS5*t#n<gShU[Z.$)<sb<CAe#;..9$GK!Xm.nAWGF\Ph\2\]ItdS(K^V'quP
%HE"K<.tWt0?gd.'!+TU\K"V4+j8]=>,s29H[hO6_5ap%la0EV6gsA*/d#YF0)V?Cs4oE\S7(tYaNV4[GDa'N1C"GX397d5NGc6'?
%?I(naLX%)df,NguAC>Zl?4=I[BZ9FB"(4"c9LNoZOpJOoGb]Lnb0B;_*=&PaGSTTk]uG%/A(3KkY)tiM+MoBk%K/T>]@oeVa?4dX
%G3sPuE?1h[Tl4AsV3f[9J8k4,A+$rH#29ET5S1TSDt-h)\@]@+h?d?k4rDAlKdB(s7,<HY#mB!5-<<C-#l#sB+nZ]J'FX[mphj.J
%Z=(?eN;65O/f+%IW"unkGq^Om7R3S_&@YM%P'pT][!*IkgXPX6M7`\<.Hi>.:I*V7OPU2JbTJp`6.Q8p"R8bV5lG9b3T+';n->u!
%9gD:Z!JpYjHir!rosfa\Yu=AiYgZT4dCD-.bM(Kc>).gRnfj456j=!slSq#r\7^f18LrN1X,uWZX?2fX`mHB,ZF;Ar4,uZOqj\6Y
%N/i!aiXg]lf`P$=d;s-3.EM1L%VLa<e;8Yq37VuWMP7dpkbFD;rN/LS@A$)@$7VoFHqYd9Lor8&A*Qf52];E?T@L1#=%o0\*CI_Q
%1\%Q;"Suq&E&blj\mdpLJj+>HE9sq$nN$p[Lu,kb^iPD;MXR0a/%G7leN,Z^3&cHF&"S:bn:0f)3->Zb0KX<bJXf9ccqUF/6*D]N
%*EISTFN_Imi)Q^#T/BWs':#N`[.]n5s+c`dh,&dGF4pa(Y1$tOrXE@*dip2,2\%R8fCNdM5V"[R$+XIs*8:qe$4'"c!j*,YK&GLt
%"r$WL6G8[7h32qMI4D0WR,[%V^Li_*1u!bI%#(WJ9I%+\?m@8402>oVilZe_*Cb^<M/#IU>U,ZU^eQUs529?7:N,C4caeEC'3nSU
%p)2Z#]RYTLbL$?*2gi633oq+YC[o6.Q*uQ@q:&q0MhA:fb/-r'eu!$,RlN`!/o%o\&.pRFMlTrM):=*,DM5=jU@]aUgHM;BQDIIL
%l`h:Tj$dOkaVV#^F6X];hlIfZ9D6I<,]Rg]H<#(,^<@IaY]I`?(Fu(=iGbOHZ-M(1i%AQ%-5)(XVlT3(#:qEs=&Cqp`B)mqi3TWF
%fPHT+,p)23B7eij%1jHJ6gmJUL5cV6bRI"26ukcUAfVcW1WHD2D[&kVcN9L=MO8Gs7L?q<&LH1VTaHU>(8bGlmNU:[-l*4:%'\s3
%"a)E%$r2T$mt+Rl=o<+q%\S*>30f'AlWWk1CgB!H%!<p4d0qq(D)2CaDHj:P&Ig(H:^Q<E+-2QFWg5[oPqCBPPiYSbUV!AkAFJZt
%aSlWBBRglL%%'UR]Z'6<ZQZBe[Q13g6P2t!CFRh?<p=!Db[n6M_Vpn(,Zk._'%*Re@M[F'+V0SL>cm61]nkU4A#lpekoE.m*Ep87
%ltR2MTJKl[Mc^[uW?_F)*WVh^%7U%<o9Ir3Cu.&:g's.;*P4J/Uc8^'-+[lZ4]#GuOZ=!9[?#+/g=s$Ib!lY;Y]*]r+tqi]glPm)
%)]fQZ*LLEs/THGD.e#f1c?#\"rhr"3%@`@tUuU9nlc[n7XD=i=rZ3V;SQ!.Q!uHG2DSAS)%n"sdZV6GERa#Z(Mea_XS\!+PK3Wu%
%HY%jJ!AS<24ikV:qF!15,4B/H-h,rJ&eoVR:q:<or;d6q*.S7AUc>Tpl99!UJu+u_]H8PA^3$L1U8l9*Kc;qpFp&3%nA')MnM5kS
%0EEH2W1;\5OR'9TGH"O!J5\pm:C^s%S\cmCkn[lPOK!VD3Xc'u/-?,Ce)_'*mRU4SCY=K3TlfKgj*Z-cBDn"Z-'IfW#l=IBEj$i>
%etpn%NheG\;'6N2a#g/WBe67jcoLP<Hl)m.QjO?V`%q_%ePg$J@E%2IL0HLYN]+-\%j\$YI:BT1P0ht2*0]1-2:ldeOFWj[UmOQR
%V`D(.RtUG_c\)5^b`&07s$e&KleSR8jVqF]/r"h7c!mJl4'>EBolP'^l+=cq\3?e3T90/!ES/<P/iO3,D8,m(5nu/7oQ18J9qq2/
%_Vh$%-qKVXS9j5H0lNAk%p;[acQ!_QOm`O9?gAcBP81J,K5cn@`(P0[m@*6a6F+kC60o9k3_=Q1%5BX"1C\=-g>ep3U6ah<`>ts7
%<:q0J(Q]YrL1uC#HeS?Iq]oC];+kP#ZsQ8*`E/@6Us5o:"U8_3XE^TP"C4B3'M_9J$l)R(GuRWE17e>WTYgt]ObS,.oqp6#;Zg0.
%McS7(&G<E:NX_%BjBkJ,q7<=L"+c47H:<&gja+FsOe6U\<)&O+fVd\4TP2u$o>dZ:!h!Bo2UGlp^d[$4a*Z2qdMH7OQjprl&GNR+
%h:Pi3Ri`b!j@-oNNc(:%i>9np)VZMa2KT)/[s]h>H3Z3:/&(*S&VeY%Q'Ot!l\P`V98ikZ,)\O9jegP$;a*8.>rE*16JU&B3^C.(
%%WhF2A9k["222\'#4[dN2q3Qk!s5J:W#a6aKCa)%erPQ$\+$L6=.g>Z*t(-4bs$;N73&fRNcEP6&0GG)0H5`a+ms(5])a[U[`\DV
%?a_2`L[39uq`-L*G=(s[(Y"4-MMj3QHL'KUH1Rn:Fj]\Te[Ha*5XfUcdD6M5Aj#I_@g&9"0#dfVnLt0M=BJHT?8K&fXhNmbb"E3u
%?:r@t<u3p`.n6K,1i?e(Gp(jbQPNEJ>#=ZnM@1(=VS3ogfUsjF*;@i(;WOU%[Np([^+UOVJ]_2sW4gJ#c<knF>=JiVni@n+_dPaP
%'N^s%2pphsM@253p6O*W4hUJPFa+>7nZKQufYu%U)/l07q5Oeen$IoB2dc3C+bDKSO.)mcOtN'4[",11JpRG`=r?e:p>$"*O+Bf[
%GUG/Fqpk"F4M]J%"o4'+:jGop`et1<nX`WoGu(LV7,F,DLk;m[^.CtrW\(1D0?'b&%r:M+=M:A/]FmDd9c4r47?P95gg3rHogKVF
%?W;o@2jJ^4RpqL<emldU??W?).o=W_BQc)JV&9ejs5+E?]B](!%hQeP[DVs_PBhjY3C&U[Ji9AO8RW`LXDc42gXu!bn\S4"6<.G[
%]k8cF])SmpDoW#\ObW0[/cs;Lbut4Z+0Q58T<q%gk\C+('SjQRT\qGK*P.5gC`'?;`>,?8/SK5[`2+=^Hf'g@`SAJ/ojc(dX.kDl
%@hfKd!0VSZYE*!BF@2<s!]p"A[Gf5^;4Jl-"Vb_MJJu,H/WeBl-+\X9.+JN4j$OgHfe+j4@8C+B)'<t[>^tR05jibbLYUu2AIM=9
%-S'QPa+f2a"$3QW);3`=*K&Co$^9!GZq&r`MQWsB(Xa'3Gt_4R5jiQ&pI`=[_PKDtI624h?ik5jkh17;d'`bkO#$"$:@#"775k]P
%T`NgLTUY"Y\0,Xih4u@XC@)`tMO9BKHn+-a_kqr\CWNK9>eQ%rBpXa(RX,nmo5D4?ghs1XhS-!S.o;1"F(mG%Z/(M=RhtsV%;#MM
%^Yt7Y&qn*3,LebBF&opP.h/U?C_[a_eQYl9?V1\NT%:WH3eho@=59Uii0Y7t(EaLuL23lsh;q[Nb/'2gDq'MRF@g7;,ZD(YA=VWL
%+9MRZfIZqKV'T*k(=`5JikgSN[<6l8Pe;=\_+U!)WfdLRZgs".!bBq_aR2OC\m2@nd9CfHr[)M@/t\li+oBCd*RgkDDV*&\/to;S
%T\dL!(M5esI62lP*SCXHmqrWr6oSAb9I`6LIkV4sNcognYWj7Ok-@HBD<TA-.4udqC[]s(<@hQIghm;UMr$T)bEi]._d]-oHeNfc
%,J2cViigV>5R#-'ggi5>b$tE&;M5CO;#+,nZDjEshmFWQrTd0_6E\okEcb@PM^!&J]'i)VSd"+H#GY]^cG_s6bq\dTa)p7=0np0;
%I_8R.h,0rV)L0_Qi9qp)`5N=gRP7o#+Ii1fV,rm3":r'mY!Al9[V1D9rTMtlR5i^(6n-0Nf-1&M3uAFUN"G`jpG9^u&aX1q7Ynmu
%TRGWnj:L6M%@!ermQd%g;#(.;,aFrWKVf0Ij.dLX$nYIY,,WeS)M+Of!*;RG63nc<3)aBRHj&<6CmYE[\>Q0L"Gl8=\cCO0\EA.n
%^g/Z?M"o=#G+0h(%D^/\Yg@nq"UusW,TFVrZIgJ(Ua9JB:IUBR*#?&NZ>b<&*EB!^VkR&<2[?\h0'[/JNIY_AnCIn9'=jfbh,&'d
%Y4UI*$S]LW?Pb#5V7Po7#S*h,6#T[j4)^)rY2nRLjEg(78p&H>PN$NeB7Zl.)\B\5hSDIXE@1+5]q7s+33MKt]!b&1C]V/2>ELJS
%j@]1`#;3LF0#S@5pAM30c!%RqUQC^2MgX%XEKc3GNYI3$i4'1eNK0MYH`!T7D\ZOg8Il1d=oMTZa,b`ArHCL(p@#G>rS8RqmDgm[
%qt9-5NskaA+27[3lTbCHjZie2ld+I<pP3+ir8m7B07Wo[:OiB7kHBBHrq,Fc5C`XncThC+p!YSon^IL<_2mR\5Q(#_^V?B9rrHcF/\D~>
%AI9_PrivateDataEnd
