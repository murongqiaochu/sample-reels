%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: plata_49.eps
%%Creator: Adobe Illustrator(R) 19.1
%%For: user
%%CreationDate: 4/12/2016
%%BoundingBox: 0 0 1200 1200
%%HiResBoundingBox: 0 0 1200 1200
%%CropBox: 0 0 1200 1200
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.1.0 x29 R agm 4.7731 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c067 79.157747, 2015/03/30-23:40:42        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">plata_49</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:creator>
            <rdf:Seq>
               <rdf:li>Iryna</rdf:li>
            </rdf:Seq>
         </dc:creator>
         <dc:description>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Abstract vector background with high tech circuit board</rdf:li>
            </rdf:Alt>
         </dc:description>
         <dc:subject>
            <rdf:Bag>
               <rdf:li>circuit</rdf:li>
               <rdf:li>vector</rdf:li>
               <rdf:li>backgrounds</rdf:li>
               <rdf:li>pattern</rdf:li>
               <rdf:li>tech</rdf:li>
               <rdf:li>processor</rdf:li>
               <rdf:li>abstract</rdf:li>
               <rdf:li>abstraction</rdf:li>
               <rdf:li>chip</rdf:li>
               <rdf:li>card</rdf:li>
               <rdf:li>high</rdf:li>
               <rdf:li>design</rdf:li>
               <rdf:li>electrical equipment</rdf:li>
               <rdf:li>integrated</rdf:li>
               <rdf:li>technical</rdf:li>
               <rdf:li>computer part</rdf:li>
               <rdf:li>hardware</rdf:li>
               <rdf:li>engineering</rdf:li>
               <rdf:li>line</rdf:li>
               <rdf:li>cyberspace</rdf:li>
               <rdf:li>computer equipment</rdf:li>
               <rdf:li>graphic</rdf:li>
               <rdf:li>electronics industry</rdf:li>
               <rdf:li>digital</rdf:li>
               <rdf:li>technology</rdf:li>
               <rdf:li>computer</rdf:li>
               <rdf:li>circuit board</rdf:li>
               <rdf:li>illustration</rdf:li>
               <rdf:li>creativity</rdf:li>
               <rdf:li>connection</rdf:li>
               <rdf:li>computing</rdf:li>
               <rdf:li>backdrop</rdf:li>
               <rdf:li>science</rdf:li>
               <rdf:li>cover</rdf:li>
               <rdf:li>internal</rdf:li>
               <rdf:li>connect</rdf:li>
               <rdf:li>art</rdf:li>
               <rdf:li>industry</rdf:li>
               <rdf:li>conceptual</rdf:li>
               <rdf:li>construction</rdf:li>
               <rdf:li>textured</rdf:li>
               <rdf:li>computer chip</rdf:li>
               <rdf:li>mother board</rdf:li>
            </rdf:Bag>
         </dc:subject>
         <xmp:MetadataDate>2016-04-12T14:16:21+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2016-04-12T14:16:21+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2016-04-12T14:16:21+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A4J/ibSv+Wuf/ALhmnf8A&#xA;NWZ35iPef9LF0X8n5f5sf+VuV3+JtK/5a5/+4Zp3/NWP5iPef9LFf5Py/wA2P/K3KqLrEN1Z30lj&#xA;dsZ7OD6xwn02wRGAkSMjkvMj+88Ml4oIPCdwL+mLA6UwnETjtKVbZMncT1ruS/Uwv+M7VlRU5tYu&#xA;yoqovJ4omYhVAUVYk7DKsn96P837g5Wn/wAUl/yU8+UpJ95z/e6dqdvH8c8c2m3Txj7QgS1mjaSn&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:b8eb3bd1-8058-0c44-97ca-d7827798e58d</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:b8eb3bd1-8058-0c44-97ca-d7827798e58d</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:e5386139-e20a-4e86-bd39-57aa8970e18a</stRef:instanceID>
            <stRef:documentID>xmp.did:0E5A99264D6BE51194FFADFDE0B012D7</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F07763D45588E411BF89F345A28D8C9F</stEvt:instanceID>
                  <stEvt:when>2014-12-20T17:10:37+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:26845C695A88E411BF89F345A28D8C9F</stEvt:instanceID>
                  <stEvt:when>2014-12-20T17:15:28+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0E5A99264D6BE51194FFADFDE0B012D7</stEvt:instanceID>
                  <stEvt:when>2015-10-05T13:46:07+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:b8eb3bd1-8058-0c44-97ca-d7827798e58d</stEvt:instanceID>
                  <stEvt:when>2016-04-12T14:16:21+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>1200.000000</stDim:w>
            <stDim:h>1200.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1200 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1200 li
1200 1200 li
1200 0 li
cp
clp
1200 1200 mo
0 1200 li
0 0 li
1200 0 li
1200 1200 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
0 0 0 rgb
f
850.125 768.757 mo
851.254 768.757 852.17 769.673 852.17 770.795 cv
852.17 771.925 851.254 772.848 850.125 772.848 cv
848.996 772.848 848.082 771.925 848.082 770.795 cv
848.082 769.673 848.996 768.757 850.125 768.757 cv
cp
850.125 778.977 mo
854.641 778.977 858.303 775.313 858.303 770.795 cv
858.303 766.291 854.641 762.628 850.125 762.628 cv
845.607 762.628 841.947 766.291 841.947 770.795 cv
841.947 772.002 842.209 773.144 842.678 774.165 cv
658.023 958.806 li
658.023 1200 li
662.113 1200 li
662.113 958.806 li
844.346 776.579 li
845.826 778.054 847.867 778.977 850.125 778.977 cv
cp
.376471 .788235 .901961 rgb
f
850.125 854.59 mo
851.254 854.59 852.17 855.504 852.17 856.633 cv
852.17 857.756 851.254 858.674 850.125 858.674 cv
848.996 858.674 848.082 857.756 848.082 856.633 cv
848.082 855.504 848.996 854.59 850.125 854.59 cv
cp
850.125 864.801 mo
854.641 864.801 858.303 861.14 858.303 856.633 cv
858.303 852.115 854.641 848.454 850.125 848.454 cv
845.607 848.454 841.947 852.115 841.947 856.633 cv
841.947 857.828 842.209 858.972 842.678 859.996 cv
707.076 995.589 li
707.076 1200 li
711.16 1200 li
711.16 995.589 li
844.346 862.412 li
845.826 863.892 847.869 864.801 850.125 864.801 cv
cp
f
850.125 825.979 mo
851.254 825.979 852.17 826.888 852.17 828.018 cv
852.17 829.146 851.254 830.067 850.125 830.067 cv
848.996 830.067 848.082 829.146 848.082 828.018 cv
848.082 826.888 848.996 825.979 850.125 825.979 cv
cp
850.125 836.196 mo
854.641 836.196 858.303 832.535 858.303 828.018 cv
858.303 823.511 854.641 819.843 850.125 819.843 cv
845.607 819.843 841.947 823.511 841.947 828.018 cv
841.947 829.224 842.209 830.36 842.678 831.385 cv
690.725 983.335 li
690.725 1200 li
694.813 1200 li
694.813 983.335 li
844.346 833.801 li
845.826 835.275 847.867 836.196 850.125 836.196 cv
cp
f
850.125 797.368 mo
851.254 797.368 852.17 798.283 852.17 799.413 cv
852.17 800.543 851.254 801.456 850.125 801.456 cv
848.996 801.456 848.082 800.543 848.082 799.413 cv
848.082 798.283 848.996 797.368 850.125 797.368 cv
cp
850.125 807.587 mo
854.641 807.587 858.303 803.931 858.303 799.413 cv
858.303 794.896 854.641 791.232 850.125 791.232 cv
845.607 791.232 841.947 794.896 841.947 799.413 cv
841.947 800.608 842.209 801.749 842.678 802.774 cv
674.375 971.075 li
674.375 1200 li
678.461 1200 li
678.461 971.075 li
844.346 805.19 li
845.826 806.669 847.867 807.587 850.125 807.587 cv
cp
f
870.563 682.926 mo
869.434 682.926 868.518 682.01 868.518 680.881 cv
868.518 679.751 869.434 678.835 870.563 678.835 cv
871.691 678.835 872.605 679.751 872.605 680.881 cv
872.605 682.01 871.691 682.926 870.563 682.926 cv
cp
872.375 688.852 mo
876.019 688.027 878.732 684.769 878.732 680.881 cv
878.732 676.369 875.078 672.701 870.563 672.701 cv
866.051 672.701 862.385 676.369 862.385 680.881 cv
862.385 684.606 864.883 687.755 868.287 688.734 cv
868.287 864.801 li
725.238 1007.86 li
725.238 1200 li
729.326 1200 li
729.326 1007.86 li
872.375 864.801 li
872.375 688.852 li
cp
f
899.17 682.926 mo
898.039 682.926 897.133 682.01 897.133 680.881 cv
897.133 679.751 898.039 678.835 899.17 678.835 cv
900.299 678.835 901.209 679.751 901.209 680.881 cv
901.209 682.01 900.299 682.926 899.17 682.926 cv
cp
900.992 688.852 mo
904.627 688.027 907.352 684.769 907.352 680.881 cv
907.352 676.369 903.682 672.701 899.17 672.701 cv
894.658 672.701 890.99 676.369 890.99 680.881 cv
890.99 684.606 893.49 687.755 896.906 688.734 cv
896.906 856.633 li
737.496 1016.04 li
737.496 1200 li
741.582 1200 li
741.582 1016.04 li
900.992 856.633 li
900.992 688.852 li
cp
f
1111.71 960.857 mo
1112.84 960.857 1113.75 961.767 1113.75 962.896 cv
1113.75 964.025 1112.84 964.948 1111.71 964.948 cv
1110.57 964.948 1109.66 964.025 1109.66 962.896 cv
1109.66 961.767 1110.57 960.857 1111.71 960.857 cv
cp
1087.18 987.424 mo
1105.92 968.673 li
1107.4 970.161 1109.45 971.075 1111.71 971.075 cv
1116.22 971.075 1119.88 967.414 1119.88 962.896 cv
1119.88 958.379 1116.22 954.729 1111.71 954.729 cv
1107.19 954.729 1103.53 958.379 1103.53 962.896 cv
1103.53 964.096 1103.79 965.234 1104.26 966.26 cv
1083.1 987.424 li
1083.1 1048.73 li
1103.53 1069.16 li
1103.53 1200 li
1107.62 1200 li
1107.62 1069.16 li
1087.18 1048.73 li
1087.18 987.424 li
cp
f
1111.71 932.24 mo
1112.84 932.24 1113.75 933.162 1113.75 934.285 cv
1113.75 935.415 1112.84 936.33 1111.71 936.33 cv
1110.57 936.33 1109.66 935.415 1109.66 934.285 cv
1109.66 933.162 1110.57 932.24 1111.71 932.24 cv
cp
1074.92 971.075 mo
1105.92 940.071 li
1107.4 941.551 1109.45 942.459 1111.71 942.459 cv
1116.22 942.459 1119.88 938.806 1119.88 934.285 cv
1119.88 929.774 1116.22 926.113 1111.71 926.113 cv
1107.19 926.113 1103.53 929.774 1103.53 934.285 cv
1103.53 935.485 1103.79 936.624 1104.26 937.655 cv
1070.83 971.075 li
1070.83 1065.08 li
1091.27 1085.52 li
1091.27 1200 li
1095.36 1200 li
1095.36 1085.52 li
1074.92 1065.08 li
1074.92 971.075 li
cp
f
1111.71 993.553 mo
1110.57 993.553 1109.66 992.637 1109.66 991.515 cv
1109.66 990.376 1110.57 989.462 1111.71 989.462 cv
1112.84 989.462 1113.75 990.376 1113.75 991.515 cv
1113.75 992.637 1112.84 993.553 1111.71 993.553 cv
cp
1113.53 999.479 mo
1117.17 998.654 1119.88 995.396 1119.88 991.515 cv
1119.88 986.994 1116.22 983.335 1111.71 983.335 cv
1107.19 983.335 1103.53 986.994 1103.53 991.515 cv
1103.53 995.234 1106.02 998.382 1109.44 999.368 cv
1109.44 1036.46 li
1121.69 1052.82 li
1121.69 1200 li
1125.79 1200 li
1125.79 1052.82 li
1113.53 1036.46 li
1113.53 999.479 li
cp
f
1062.66 617.531 mo
1061.54 617.531 1060.62 616.615 1060.62 615.493 cv
1060.62 614.354 1061.54 613.441 1062.66 613.441 cv
1063.79 613.441 1064.71 614.354 1064.71 615.493 cv
1064.71 616.615 1063.79 617.531 1062.66 617.531 cv
cp
1064.47 623.465 mo
1068.11 622.633 1070.83 619.375 1070.83 615.493 cv
1070.83 610.973 1067.18 607.312 1062.66 607.312 cv
1058.15 607.312 1054.48 610.973 1054.48 615.493 cv
1054.48 619.213 1056.98 622.354 1060.39 623.347 cv
1060.39 693.143 li
1133.96 766.714 li
1133.96 1200 li
1138.05 1200 li
1138.05 766.714 li
1064.47 693.143 li
1064.47 623.465 li
cp
f
1111.71 903.638 mo
1112.84 903.638 1113.75 904.547 1113.75 905.681 cv
1113.75 906.804 1112.84 907.72 1111.71 907.72 cv
1110.57 907.72 1109.66 906.804 1109.66 905.681 cv
1109.66 904.547 1110.57 903.638 1111.71 903.638 cv
cp
1054.48 962.896 mo
1105.92 911.453 li
1107.4 912.933 1109.45 913.856 1111.71 913.856 cv
1116.22 913.856 1119.88 910.194 1119.88 905.681 cv
1119.88 901.163 1116.22 897.502 1111.71 897.502 cv
1107.19 897.502 1103.53 901.163 1103.53 905.681 cv
1103.53 906.883 1103.79 908.013 1104.26 909.044 cv
1050.4 962.896 li
1050.4 1065.08 li
1079.01 1093.68 li
1079.01 1200 li
1083.1 1200 li
1083.1 1093.68 li
1054.48 1065.08 li
1054.48 962.896 li
cp
f
1038.14 1120.25 mo
1037.01 1120.25 1036.09 1119.34 1036.09 1118.21 cv
1036.09 1117.08 1037.01 1116.17 1038.14 1116.17 cv
1039.27 1116.17 1040.18 1117.08 1040.18 1118.21 cv
1040.18 1119.34 1039.27 1120.25 1038.14 1120.25 cv
cp
1046.32 1118.21 mo
1046.32 1113.69 1042.65 1110.03 1038.14 1110.03 cv
1033.62 1110.03 1029.96 1113.69 1029.96 1118.21 cv
1029.96 1121.94 1032.45 1125.08 1035.87 1126.07 cv
1035.87 1193.79 li
1032.97 1194.63 1030.74 1197.02 1030.13 1200 cv
1036.94 1200 li
1037.28 1199.75 1037.69 1199.61 1038.14 1199.61 cv
1038.58 1199.61 1039 1199.75 1039.34 1200 cv
1046.14 1200 li
1045.5 1196.86 1043.06 1194.38 1039.95 1193.68 cv
1039.95 1126.18 li
1043.6 1125.35 1046.32 1122.1 1046.32 1118.21 cv
cp
f
1017.7 1067.12 mo
1016.57 1067.12 1015.65 1066.21 1015.65 1065.08 cv
1015.65 1063.95 1016.57 1063.03 1017.7 1063.03 cv
1018.83 1063.03 1019.74 1063.95 1019.74 1065.08 cv
1019.74 1066.21 1018.83 1067.12 1017.7 1067.12 cv
cp
1017.7 1056.9 mo
1013.18 1056.9 1009.52 1060.56 1009.52 1065.08 cv
1009.52 1068.81 1012.01 1071.95 1015.43 1072.94 cv
1015.43 1200 li
1019.52 1200 li
1019.52 1073.05 li
1023.16 1072.22 1025.88 1068.97 1025.88 1065.08 cv
1025.88 1060.56 1022.21 1056.9 1017.7 1056.9 cv
cp
f
1111.71 875.018 mo
1112.84 875.018 1113.75 875.935 1113.75 877.07 cv
1113.75 878.194 1112.84 879.11 1111.71 879.11 cv
1110.57 879.11 1109.66 878.194 1109.66 877.07 cv
1109.66 875.935 1110.57 875.018 1111.71 875.018 cv
cp
1038.14 950.639 mo
1105.92 882.849 li
1107.4 884.328 1109.45 885.237 1111.71 885.237 cv
1116.22 885.237 1119.88 881.583 1119.88 877.07 cv
1119.88 872.552 1116.22 868.891 1111.71 868.891 cv
1107.19 868.891 1103.53 872.552 1103.53 877.07 cv
1103.53 878.266 1103.79 879.408 1104.26 880.434 cv
1034.05 950.639 li
1034.05 1073.25 li
1066.74 1105.96 li
1066.74 1200 li
1070.83 1200 li
1070.83 1105.96 li
1038.14 1073.25 li
1038.14 950.639 li
cp
f
1181.19 560.31 mo
1182.32 560.31 1183.23 561.225 1183.23 562.354 cv
1183.23 563.483 1182.32 564.398 1181.19 564.398 cv
1180.06 564.398 1179.15 563.483 1179.15 562.354 cv
1179.15 561.225 1180.06 560.31 1181.19 560.31 cv
cp
1166.66 640.012 mo
1183 623.658 li
1183 570.32 li
1186.65 569.502 1189.37 566.243 1189.37 562.354 cv
1189.37 557.836 1185.71 554.18 1181.19 554.18 cv
1176.68 554.18 1173.01 557.836 1173.01 562.354 cv
1173.01 566.082 1175.51 569.223 1178.92 570.203 cv
1178.92 623.658 li
1162.57 640.012 li
1162.57 709.491 li
1195.27 742.19 li
1195.27 1200 li
1199.35 1200 li
1199.35 742.19 li
1166.66 709.491 li
1166.66 640.012 li
cp
f
1148.49 564.398 mo
1147.36 564.398 1146.45 563.483 1146.45 562.354 cv
1146.45 561.225 1147.36 560.31 1148.49 560.31 cv
1149.62 560.31 1150.54 561.225 1150.54 562.354 cv
1150.54 563.483 1149.62 564.398 1148.49 564.398 cv
cp
1150.31 570.32 mo
1153.95 569.502 1156.66 566.243 1156.66 562.354 cv
1156.66 557.836 1153.01 554.18 1148.49 554.18 cv
1143.97 554.18 1140.32 557.836 1140.32 562.354 cv
1140.32 566.082 1142.8 569.223 1146.22 570.203 cv
1146.22 713.58 li
1183 750.358 li
1183 1200 li
1187.1 1200 li
1187.1 750.358 li
1150.31 713.58 li
1150.31 570.32 li
cp
f
1083.1 564.398 mo
1081.97 564.398 1081.05 563.483 1081.05 562.354 cv
1081.05 561.225 1081.97 560.31 1083.1 560.31 cv
1084.23 560.31 1085.15 561.225 1085.15 562.354 cv
1085.15 563.483 1084.23 564.398 1083.1 564.398 cv
cp
1123.97 603.222 mo
1088.88 568.132 li
1090.36 566.658 1091.27 564.614 1091.27 562.354 cv
1091.27 557.836 1087.61 554.18 1083.1 554.18 cv
1078.58 554.18 1074.92 557.836 1074.92 562.354 cv
1074.92 566.865 1078.58 570.528 1083.1 570.528 cv
1084.3 570.528 1085.44 570.268 1086.46 569.801 cv
1119.88 603.222 li
1119.88 721.754 li
1160.76 762.628 li
1160.76 1200 li
1164.84 1200 li
1164.84 762.628 li
1123.97 721.754 li
1123.97 603.222 li
cp
f
1095.36 617.531 mo
1094.23 617.531 1093.31 616.615 1093.31 615.493 cv
1093.31 614.354 1094.23 613.441 1095.36 613.441 cv
1096.49 613.441 1097.4 614.354 1097.4 615.493 cv
1097.4 616.615 1096.49 617.531 1095.36 617.531 cv
cp
1097.17 623.465 mo
1100.82 622.633 1103.53 619.375 1103.53 615.493 cv
1103.53 610.973 1099.87 607.312 1095.36 607.312 cv
1090.84 607.312 1087.18 610.973 1087.18 615.493 cv
1087.18 619.213 1089.67 622.354 1093.08 623.347 cv
1093.08 709.491 li
1150.31 766.714 li
1150.31 1200 li
1154.39 1200 li
1154.39 766.714 li
1097.17 709.491 li
1097.17 623.465 li
cp
f
1115.79 564.398 mo
1114.67 564.398 1113.75 563.483 1113.75 562.354 cv
1113.75 561.225 1114.67 560.31 1115.79 560.31 cv
1116.92 560.31 1117.84 561.225 1117.84 562.354 cv
1117.84 563.483 1116.92 564.398 1115.79 564.398 cv
cp
1174.83 754.449 mo
1138.05 717.666 li
1138.05 595.048 li
1117.6 574.611 li
1117.6 570.32 li
1121.25 569.502 1123.97 566.243 1123.97 562.354 cv
1123.97 557.836 1120.3 554.18 1115.79 554.18 cv
1111.28 554.18 1107.62 557.836 1107.62 562.354 cv
1107.62 566.082 1110.11 569.223 1113.53 570.203 cv
1113.53 574.611 li
1133.96 595.048 li
1133.96 717.666 li
1170.74 754.449 li
1170.74 1089.6 li
1174.83 1097.78 li
1174.83 1200 li
1178.92 1200 li
1178.92 1097.78 li
1174.83 1089.6 li
1174.83 754.449 li
cp
f
993.176 764.666 mo
992.045 764.666 991.131 763.753 991.131 762.621 cv
991.131 761.491 992.045 760.582 993.176 760.582 cv
994.307 760.582 995.213 761.491 995.213 762.621 cv
995.213 763.753 994.307 764.666 993.176 764.666 cv
cp
1070.83 836.196 mo
1000.63 765.993 li
1001.1 764.966 1001.35 763.823 1001.35 762.628 cv
1001.35 758.117 997.695 754.449 993.176 754.449 cv
988.664 754.449 985.006 758.117 985.006 762.628 cv
985.006 767.134 988.664 770.795 993.176 770.795 cv
995.435 770.795 997.478 769.886 998.955 768.404 cv
1066.74 836.196 li
911.435 991.515 li
862.385 991.515 li
862.385 1200 li
866.477 1200 li
866.477 995.589 li
911.435 995.589 li
1070.83 836.196 li
cp
f
952.309 854.59 mo
953.432 854.59 954.355 855.504 954.355 856.633 cv
954.355 857.756 953.432 858.674 952.309 858.674 cv
951.18 858.674 950.266 857.756 950.266 856.633 cv
950.266 855.504 951.18 854.59 952.309 854.59 cv
cp
952.309 864.801 mo
956.822 864.801 960.48 861.14 960.48 856.633 cv
960.48 852.115 956.822 848.454 952.309 848.454 cv
947.791 848.454 944.129 852.115 944.129 856.633 cv
944.129 857.828 944.385 858.972 944.846 859.996 cv
796.992 1007.86 li
796.992 1200 li
801.082 1200 li
801.082 1007.86 li
946.523 862.412 li
948.006 863.892 950.043 864.801 952.309 864.801 cv
cp
f
818.021 1069.97 mo
816.898 1069.97 815.98 1069.05 815.98 1067.93 cv
815.98 1066.8 816.898 1065.89 818.021 1065.89 cv
819.156 1065.89 820.074 1066.8 820.074 1067.93 cv
820.074 1069.05 819.156 1069.97 818.021 1069.97 cv
cp
818.021 1059.76 mo
813.51 1059.76 809.852 1063.42 809.852 1067.93 cv
809.852 1071.65 812.346 1074.79 815.754 1075.79 cv
815.754 1149.71 li
819.844 1149.71 li
819.844 1075.9 li
823.478 1075.08 826.199 1071.82 826.199 1067.93 cv
826.199 1063.42 822.541 1059.76 818.021 1059.76 cv
cp
f
952.309 809.631 mo
951.18 809.631 950.266 808.708 950.266 807.587 cv
950.266 806.456 951.18 805.542 952.309 805.542 cv
953.432 805.542 954.355 806.456 954.355 807.587 cv
954.355 808.708 953.432 809.631 952.309 809.631 cv
cp
1009.52 860.726 mo
959.762 810.948 li
960.223 809.924 960.48 808.787 960.48 807.587 cv
960.48 803.067 956.822 799.413 952.309 799.413 cv
947.791 799.413 944.129 803.067 944.129 807.587 cv
944.129 812.102 947.791 815.76 952.309 815.76 cv
954.563 815.76 956.605 814.844 958.086 813.364 cv
1005.43 860.726 li
895.088 971.075 li
846.041 971.075 li
846.041 1200 li
850.125 1200 li
850.125 975.161 li
895.088 975.161 li
1009.52 860.726 li
cp
f
989.088 1067.12 mo
987.965 1067.12 987.049 1066.21 987.049 1065.08 cv
987.049 1063.95 987.965 1063.03 989.088 1063.03 cv
990.225 1063.03 991.131 1063.95 991.131 1065.08 cv
991.131 1066.21 990.225 1067.12 989.088 1067.12 cv
cp
989.088 1056.9 mo
984.582 1056.9 980.912 1060.56 980.912 1065.08 cv
980.912 1068.81 983.406 1071.95 986.813 1072.94 cv
986.813 1200 li
990.904 1200 li
990.904 1073.05 li
994.545 1072.22 997.262 1068.97 997.262 1065.08 cv
997.262 1060.56 993.605 1056.9 989.088 1056.9 cv
cp
f
976.828 736.065 mo
977.951 736.065 978.871 736.973 978.871 738.102 cv
978.871 739.232 977.951 740.152 976.828 740.152 cv
975.699 740.152 974.783 739.232 974.783 738.102 cv
974.783 736.973 975.699 736.065 976.828 736.065 cv
cp
927.785 787.15 mo
971.045 743.879 li
972.523 745.358 974.568 746.281 976.828 746.281 cv
981.34 746.281 985.006 742.62 985.006 738.102 cv
985.006 733.59 981.34 729.929 976.828 729.929 cv
972.309 729.929 968.658 733.59 968.658 738.102 cv
968.658 739.303 968.912 740.438 969.377 741.471 cv
923.699 787.15 li
923.699 856.633 li
776.557 1003.77 li
776.557 1200 li
780.637 1200 li
780.637 1003.77 li
927.785 856.633 li
927.785 787.15 li
cp
f
956.391 711.534 mo
957.519 711.534 958.432 712.452 958.432 713.58 cv
958.432 714.705 957.519 715.618 956.391 715.618 cv
955.262 715.618 954.355 714.705 954.355 713.58 cv
954.355 712.452 955.262 711.534 956.391 711.534 cv
cp
911.435 758.539 mo
950.607 719.365 li
952.096 720.841 954.131 721.754 956.391 721.754 cv
960.902 721.754 964.564 718.093 964.564 713.58 cv
964.564 709.068 960.902 705.408 956.391 705.408 cv
951.873 705.408 948.213 709.068 948.213 713.58 cv
948.213 714.775 948.478 715.918 948.939 716.945 cv
907.352 758.539 li
907.352 856.633 li
747.945 1016.04 li
747.945 1200 li
752.033 1200 li
752.033 1016.04 li
911.435 856.633 li
911.435 758.539 li
cp
f
972.74 785.102 mo
971.609 785.102 970.703 784.183 970.703 783.058 cv
970.703 781.938 971.609 781.019 972.74 781.019 cv
973.869 781.019 974.783 781.938 974.783 783.058 cv
974.783 784.183 973.869 785.102 972.74 785.102 cv
cp
1042.22 848.454 mo
980.195 786.43 li
980.66 785.403 980.912 784.26 980.912 783.058 cv
980.912 778.547 977.25 774.886 972.74 774.886 cv
968.227 774.886 964.564 778.547 964.564 783.058 cv
964.564 787.571 968.227 791.232 972.74 791.232 cv
974.998 791.232 977.043 790.323 978.519 788.844 cv
1038.14 848.454 li
903.258 983.335 li
854.215 983.335 li
854.215 1200 li
858.303 1200 li
858.303 987.424 li
903.258 987.424 li
1042.22 848.454 li
cp
f
1029.96 617.531 mo
1028.83 617.531 1027.92 616.615 1027.92 615.493 cv
1027.92 614.354 1028.83 613.441 1029.96 613.441 cv
1031.09 613.441 1032 614.354 1032 615.493 cv
1032 616.615 1031.09 617.531 1029.96 617.531 cv
cp
1109.44 758.539 mo
1031.78 680.881 li
1031.78 623.465 li
1035.41 622.633 1038.14 619.375 1038.14 615.493 cv
1038.14 610.973 1034.48 607.312 1029.96 607.312 cv
1025.44 607.312 1021.79 610.973 1021.79 615.493 cv
1021.79 619.213 1024.28 622.354 1027.69 623.347 cv
1027.69 680.881 li
1105.34 758.539 li
1105.34 848.454 li
913.25 1040.55 li
884.643 1040.55 li
884.643 1200 li
888.725 1200 li
888.725 1044.65 li
913.25 1044.65 li
1109.44 848.454 li
1109.44 758.539 li
cp
f
960.48 1067.12 mo
959.35 1067.12 958.432 1066.21 958.432 1065.08 cv
958.432 1063.95 959.35 1063.03 960.48 1063.03 cv
961.609 1063.03 962.519 1063.95 962.519 1065.08 cv
962.519 1066.21 961.609 1067.12 960.48 1067.12 cv
cp
960.48 1056.9 mo
955.965 1056.9 952.309 1060.56 952.309 1065.08 cv
952.309 1068.81 954.801 1071.95 958.213 1072.94 cv
958.213 1200 li
962.293 1200 li
962.293 1073.05 li
965.938 1072.22 968.658 1068.97 968.658 1065.08 cv
968.658 1060.56 964.992 1056.9 960.48 1056.9 cv
cp
f
931.873 1067.12 mo
930.744 1067.12 929.828 1066.21 929.828 1065.08 cv
929.828 1063.95 930.744 1063.03 931.873 1063.03 cv
933.004 1063.03 933.91 1063.95 933.91 1065.08 cv
933.91 1066.21 933.004 1067.12 931.873 1067.12 cv
cp
931.873 1056.9 mo
927.353 1056.9 923.699 1060.56 923.699 1065.08 cv
923.699 1068.81 926.193 1071.95 929.598 1072.94 cv
929.598 1200 li
933.684 1200 li
933.684 1073.05 li
937.322 1072.22 940.043 1068.97 940.043 1065.08 cv
940.043 1060.56 936.385 1056.9 931.873 1056.9 cv
cp
f
972.74 617.531 mo
971.609 617.531 970.703 616.615 970.703 615.493 cv
970.703 614.354 971.609 613.441 972.74 613.441 cv
973.869 613.441 974.783 614.354 974.783 615.493 cv
974.783 616.615 973.869 617.531 972.74 617.531 cv
cp
1087.18 852.542 mo
1087.18 762.628 li
1013.61 689.055 li
1013.61 652.276 li
980.195 618.854 li
980.66 617.822 980.912 616.687 980.912 615.493 cv
980.912 610.973 977.25 607.312 972.74 607.312 cv
968.227 607.312 964.564 610.973 964.564 615.493 cv
964.564 619.997 968.227 623.658 972.74 623.658 cv
974.998 623.658 977.043 622.744 978.519 621.269 cv
1009.52 652.276 li
1009.52 689.055 li
1083.1 762.628 li
1083.1 852.542 li
911.435 1024.21 li
870.563 1024.21 li
870.563 1200 li
874.644 1200 li
874.644 1028.29 li
911.435 1028.29 li
1087.18 852.542 li
cp
f
903.258 1067.12 mo
902.133 1067.12 901.209 1066.21 901.209 1065.08 cv
901.209 1063.95 902.133 1063.03 903.258 1063.03 cv
904.387 1063.03 905.299 1063.95 905.299 1065.08 cv
905.299 1066.21 904.387 1067.12 903.258 1067.12 cv
cp
903.258 1056.9 mo
898.742 1056.9 895.088 1060.56 895.088 1065.08 cv
895.088 1068.81 897.578 1071.95 900.992 1072.94 cv
900.992 1200 li
905.072 1200 li
905.072 1073.05 li
908.715 1072.22 911.435 1068.97 911.435 1065.08 cv
911.435 1060.56 907.773 1056.9 903.258 1056.9 cv
cp
f
441.605 546.282 mo
442.735 546.282 443.65 547.19 443.65 548.329 cv
443.65 549.451 442.735 550.365 441.605 550.365 cv
440.484 550.365 439.561 549.451 439.561 548.329 cv
439.561 547.19 440.484 546.282 441.605 546.282 cv
cp
0 707.713 mo
286.296 707.727 li
438.239 555.788 li
439.261 556.241 440.402 556.495 441.605 556.495 cv
446.117 556.495 449.775 552.84 449.775 548.329 cv
449.775 543.809 446.117 540.154 441.605 540.154 cv
437.086 540.154 433.432 543.809 433.432 548.329 cv
433.432 550.58 434.346 552.625 435.818 554.104 cv
286.296 703.637 li
0 703.637 li
0 707.713 li
cp
f
498.827 546.282 mo
499.957 546.282 500.871 547.198 500.871 548.329 cv
500.871 549.451 499.957 550.373 498.827 550.373 cv
497.697 550.373 496.782 549.451 496.782 548.329 cv
496.782 547.198 497.697 546.282 498.827 546.282 cv
cp
0 740.408 mo
310.822 740.422 li
495.461 555.788 li
496.49 556.241 497.624 556.5 498.827 556.5 cv
503.339 556.5 506.997 552.84 506.997 548.329 cv
506.997 543.809 503.339 540.154 498.827 540.154 cv
494.315 540.154 490.649 543.809 490.649 548.329 cv
490.649 550.58 491.567 552.625 493.04 554.104 cv
310.822 736.332 li
0 736.332 li
0 740.408 li
cp
f
246.714 789.377 mo
247.513 788.58 248.804 788.58 249.604 789.377 cv
250.399 790.178 250.399 791.467 249.604 792.268 cv
248.804 793.072 247.513 793.072 246.714 792.268 cv
245.915 791.467 245.915 790.178 246.714 789.377 cv
cp
0 796.215 mo
5.3877 790.826 li
239.981 790.826 li
239.981 792.918 240.784 795.008 242.375 796.604 cv
245.568 799.799 250.741 799.799 253.939 796.604 cv
257.132 793.408 257.132 788.236 253.939 785.041 cv
250.741 781.854 245.568 781.854 242.375 785.041 cv
241.534 785.893 240.911 786.879 240.504 787.932 cv
2.50146 787.932 li
0 790.432 li
0 796.215 li
cp
f
551.86 516.833 mo
552.989 516.833 553.904 517.742 553.904 518.88 cv
553.904 520.002 552.997 520.919 551.86 520.919 cv
550.729 520.919 549.823 520.002 549.823 518.88 cv
549.823 517.742 550.729 516.833 551.86 516.833 cv
cp
0 655.565 mo
60.0693 655.565 li
74.1802 655.565 li
278.019 655.57 li
412.898 520.69 li
543.89 520.69 li
544.712 524.338 547.971 527.054 551.86 527.054 cv
556.379 527.054 560.033 523.392 560.033 518.88 cv
560.033 514.368 556.379 510.706 551.86 510.706 cv
548.132 510.706 544.989 513.198 544.005 516.606 cv
412.898 516.601 li
278.019 651.481 li
74.1802 651.481 li
60.0693 651.481 li
0 651.481 li
0 655.565 li
cp
f
412.995 546.282 mo
414.121 546.282 415.031 547.19 415.031 548.329 cv
415.031 549.451 414.121 550.365 412.995 550.365 cv
411.865 550.365 410.946 549.451 410.946 548.32 cv
410.946 547.19 411.865 546.282 412.995 546.282 cv
cp
0 691.367 mo
274.037 691.375 li
409.632 555.788 li
410.654 556.241 411.799 556.495 412.995 556.495 cv
417.51 556.495 421.169 552.84 421.169 548.329 cv
421.169 543.809 417.51 540.154 412.995 540.147 cv
408.479 540.147 404.821 543.809 404.821 548.329 cv
404.821 550.58 405.736 552.625 407.218 554.104 cv
274.037 687.291 li
0 687.277 li
0 691.367 li
cp
f
470.212 546.282 mo
471.343 546.282 472.253 547.19 472.253 548.329 cv
472.253 549.451 471.343 550.373 470.212 550.373 cv
469.083 550.365 468.168 549.451 468.168 548.329 cv
468.168 547.19 469.083 546.282 470.212 546.282 cv
cp
0 724.06 mo
298.551 724.074 li
466.853 555.788 li
467.876 556.241 469.021 556.5 470.212 556.5 cv
474.731 556.5 478.391 552.84 478.391 548.329 cv
478.391 543.809 474.731 540.154 470.212 540.154 cv
465.701 540.154 462.042 543.809 462.042 548.329 cv
462.042 550.58 462.949 552.625 464.436 554.104 cv
298.551 719.986 li
0 719.986 li
0 724.06 li
cp
f
266.943 769.148 mo
267.742 768.352 269.034 768.352 269.837 769.148 cv
270.628 769.947 270.628 771.246 269.837 772.037 cv
269.034 772.836 267.742 772.836 266.943 772.037 cv
266.144 771.246 266.144 769.947 266.943 769.148 cv
cp
0 773.09 mo
2.50146 770.598 li
260.21 770.598 li
260.21 772.688 261.013 774.777 262.604 776.375 cv
265.806 779.568 270.978 779.568 274.176 776.375 cv
277.361 773.182 277.361 768.014 274.176 764.82 cv
270.978 761.625 265.806 761.625 262.604 764.82 cv
261.763 765.664 261.141 766.65 260.741 767.701 cv
0 767.701 li
0 773.09 li
cp
f
198.139 447.343 mo
199.277 447.343 200.184 448.258 200.184 449.387 cv
200.184 450.517 199.277 451.432 198.139 451.432 cv
197.017 451.432 196.102 450.517 196.102 449.387 cv
196.102 448.258 197.017 447.343 198.139 447.343 cv
cp
0 483.907 mo
49.6855 483.907 li
55.6108 483.907 li
79.6147 483.907 li
112.31 451.212 li
190.172 451.212 li
190.998 454.848 194.25 457.561 198.139 457.561 cv
202.658 457.561 206.317 453.899 206.317 449.387 cv
206.317 444.875 202.658 441.213 198.139 441.213 cv
194.419 441.213 191.268 443.707 190.291 447.122 cv
112.31 447.122 li
79.6147 479.816 li
55.6108 479.816 li
49.6855 479.816 li
0 479.816 li
0 483.907 li
cp
f
851.672 345.17 mo
852.807 345.17 853.725 346.085 853.725 347.209 cv
853.725 348.339 852.807 349.261 851.672 349.261 cv
850.551 349.261 849.633 348.339 849.633 347.209 cv
849.633 346.085 850.551 345.17 851.672 345.17 cv
cp
0 349.013 mo
318.561 349.021 li
325.395 349.021 li
843.707 349.033 li
844.525 352.675 847.783 355.389 851.672 355.389 cv
856.191 355.389 859.85 351.727 859.85 347.209 cv
859.85 342.703 856.191 339.04 851.672 339.04 cv
847.953 339.04 844.803 341.535 843.818 344.935 cv
325.395 344.935 li
318.561 344.935 li
0 344.93 li
0 349.013 li
cp
f
222.657 421.003 mo
223.794 421.003 224.709 421.92 224.709 423.05 cv
224.709 424.18 223.794 425.094 222.657 425.094 cv
221.535 425.094 220.62 424.18 220.62 423.05 cv
220.62 421.92 221.535 421.003 222.657 421.003 cv
cp
0 457.561 mo
49.6699 457.561 li
55.6108 457.561 li
85.9707 457.561 li
118.667 424.867 li
214.694 424.867 li
215.517 428.502 218.775 431.224 222.657 431.224 cv
227.184 431.224 230.839 427.561 230.839 423.05 cv
230.839 418.538 227.184 414.875 222.657 414.875 cv
218.937 414.875 215.797 417.368 214.817 420.777 cv
118.667 420.777 li
85.9707 453.47 li
55.6108 453.47 li
49.6699 453.47 li
0 453.47 li
0 457.561 li
cp
f
551.86 451.44 mo
552.989 451.44 553.904 452.354 553.904 453.484 cv
553.904 454.614 552.989 455.522 551.86 455.522 cv
550.729 455.522 549.816 454.614 549.816 453.484 cv
549.816 452.354 550.729 451.44 551.86 451.44 cv
cp
0 447.108 mo
64.1538 447.122 li
70.0874 447.122 li
85.917 447.122 li
134.965 398.068 li
355.669 398.068 li
412.891 455.301 li
543.89 455.301 li
544.712 458.937 547.971 461.664 551.86 461.664 cv
556.371 461.664 560.033 458.003 560.033 453.484 cv
560.033 448.964 556.371 445.304 551.86 445.304 cv
548.132 445.304 544.989 447.796 544.005 451.212 cv
412.891 451.212 li
355.669 393.983 li
134.965 393.978 li
85.917 443.025 li
70.0874 443.025 li
64.1538 443.025 li
0 443.025 li
0 447.108 li
cp
f
48.9512 388.44 mo
48.9512 389.564 48.0405 390.479 46.9111 390.479 cv
45.7881 390.479 44.8662 389.564 44.8662 388.44 cv
44.8662 387.305 45.7881 386.396 46.9111 386.396 cv
48.0405 386.396 48.9512 387.305 48.9512 388.44 cv
cp
38.9365 386.617 mo
0 386.617 li
0 390.706 li
39.0635 390.706 li
40.0435 394.114 43.187 396.606 46.9111 396.606 cv
51.4258 396.606 55.0845 392.946 55.0845 388.44 cv
55.0845 383.921 51.4258 380.252 46.9111 380.252 cv
43.0215 380.252 39.7705 382.981 38.9365 386.617 cv
cp
f
766.828 381.955 mo
767.949 381.955 768.863 382.877 768.863 384 cv
768.863 385.135 767.957 386.044 766.828 386.044 cv
765.697 386.044 764.775 385.135 764.775 384 cv
764.775 382.877 765.697 381.955 766.828 381.955 cv
cp
0 361.284 mo
198.696 361.284 li
237.883 361.284 li
656.467 361.29 li
680.988 385.817 li
758.853 385.817 li
759.672 389.46 762.93 392.173 766.828 392.173 cv
771.34 392.173 774.99 388.511 774.99 384 cv
774.99 379.488 771.34 375.826 766.828 375.826 cv
763.1 375.826 759.949 378.32 758.965 381.734 cv
680.988 381.726 li
656.467 357.201 li
237.883 357.201 li
198.696 357.201 li
0 357.193 li
0 361.284 li
cp
f
495.291 418.738 mo
496.421 418.738 497.332 419.66 497.332 420.777 cv
497.332 421.907 496.421 422.829 495.291 422.829 cv
494.162 422.829 493.243 421.907 493.243 420.777 cv
493.243 419.66 494.162 418.738 495.291 418.738 cv
cp
0 414.87 mo
64.8115 414.87 li
70.7368 414.87 li
86.5703 414.87 li
123.355 378.091 li
372.67 378.091 li
417.633 423.05 li
487.433 423.056 li
488.429 426.464 491.567 428.956 495.291 428.956 cv
499.804 428.956 503.47 425.296 503.47 420.777 cv
503.47 416.272 499.804 412.603 495.291 412.603 cv
491.398 412.603 488.144 415.323 487.321 418.967 cv
417.633 418.958 li
372.67 374.008 li
123.355 374.008 li
86.5703 410.785 li
70.7368 410.785 li
64.8115 410.785 li
0 410.785 li
0 414.87 li
cp
f
296.242 508.653 mo
297.356 508.653 298.279 509.576 298.279 510.692 cv
298.279 511.822 297.356 512.744 296.242 512.744 cv
295.112 512.744 294.197 511.822 294.197 510.692 cv
294.197 509.576 295.112 508.653 296.242 508.653 cv
cp
0 577.905 mo
49.6855 577.911 li
55.6108 577.911 li
189.969 577.911 li
255.368 512.518 li
288.268 512.518 li
289.094 516.159 292.345 518.872 296.242 518.872 cv
300.753 518.872 304.412 515.211 304.412 510.692 cv
304.412 506.186 300.753 502.526 296.242 502.526 cv
292.506 502.526 289.363 505.018 288.379 508.427 cv
255.368 508.427 li
189.969 573.823 li
55.6108 573.823 li
49.6855 573.823 li
0 573.823 li
0 577.905 li
cp
f
257.336 539.985 mo
258.458 539.985 259.373 540.908 259.373 542.037 cv
259.373 543.166 258.458 544.074 257.336 544.074 cv
256.206 544.074 255.288 543.166 255.288 542.037 cv
255.288 540.908 256.206 539.985 257.336 539.985 cv
cp
0 595.169 mo
8.81152 595.169 li
208.276 595.169 li
253.961 549.489 li
254.992 549.95 256.133 550.209 257.336 550.209 cv
261.847 550.209 265.506 546.549 265.506 542.037 cv
265.506 537.524 261.847 533.856 257.336 533.856 cv
252.816 533.856 249.15 537.524 249.15 542.037 cv
249.15 544.289 250.069 546.333 251.548 547.813 cv
208.276 591.077 li
8.81152 591.077 li
0 591.077 li
0 595.169 li
cp
f
551.86 484.139 mo
552.989 484.139 553.904 485.048 553.904 486.178 cv
553.904 487.308 552.989 488.224 551.86 488.224 cv
550.729 488.224 549.823 487.308 549.823 486.178 cv
549.816 485.048 550.729 484.139 551.86 484.139 cv
cp
0 614.688 mo
64.1621 614.688 li
70.0874 614.688 li
228.975 614.695 li
286.196 557.474 li
331.155 557.474 li
400.632 487.996 li
543.89 487.996 li
544.712 491.639 547.971 494.352 551.86 494.352 cv
556.379 494.352 560.033 490.697 560.033 486.178 cv
560.033 481.666 556.379 477.999 551.86 477.999 cv
548.132 477.999 544.989 480.504 544.005 483.913 cv
400.632 483.907 li
331.155 553.385 li
286.196 553.385 li
228.975 610.606 li
70.0874 610.606 li
64.1621 610.606 li
0 610.606 li
0 614.688 li
cp
f
173.617 467.78 mo
174.747 467.78 175.669 468.695 175.669 469.832 cv
175.669 470.948 174.747 471.871 173.617 471.871 cv
172.495 471.871 171.572 470.948 171.572 469.832 cv
171.572 468.695 172.495 467.78 173.617 467.78 cv
cp
0 504.33 mo
49.6855 504.33 li
55.6108 504.33 li
120.488 504.33 li
120.488 471.636 li
165.651 471.636 li
166.477 475.277 169.731 477.999 173.617 477.999 cv
178.132 477.999 181.799 474.336 181.799 469.832 cv
181.799 465.313 178.132 461.65 173.617 461.65 cv
169.893 461.65 166.742 464.145 165.762 467.559 cv
116.399 467.559 li
116.399 500.252 li
55.6108 500.252 li
49.6855 500.252 li
0 500.252 li
0 504.33 li
cp
f
300.331 447.343 mo
301.453 447.343 302.368 448.265 302.368 449.395 cv
302.368 450.517 301.453 451.432 300.331 451.432 cv
299.193 451.432 298.279 450.517 298.279 449.395 cv
298.279 448.265 299.193 447.343 300.331 447.343 cv
cp
0 532.947 mo
49.6855 532.947 li
55.6108 532.947 li
165.443 532.947 li
247.19 451.212 li
292.352 451.212 li
293.175 454.848 296.434 457.561 300.331 457.561 cv
304.835 457.561 308.497 453.899 308.497 449.395 cv
308.497 444.875 304.835 441.213 300.323 441.213 cv
296.595 441.213 293.456 443.707 292.468 447.122 cv
247.19 447.122 li
165.443 528.864 li
55.6108 528.864 li
49.6855 528.864 li
0 528.864 li
0 532.947 li
cp
f
316.671 488.224 mo
317.801 488.224 318.715 489.139 318.715 490.261 cv
318.715 491.399 317.801 492.307 316.671 492.307 cv
315.542 492.307 314.634 491.399 314.634 490.261 cv
314.634 489.139 315.542 488.224 316.671 488.224 cv
cp
0 557.461 mo
49.6855 557.461 li
55.6108 557.461 li
177.71 557.474 li
243.101 492.079 li
308.701 492.079 li
309.53 495.722 312.782 498.442 316.671 498.442 cv
321.183 498.442 324.845 494.775 324.845 490.261 cv
324.845 485.75 321.183 482.089 316.671 482.089 cv
312.943 482.089 309.8 484.581 308.816 487.99 cv
243.101 487.99 li
177.71 553.385 li
55.6108 553.385 li
49.6855 553.385 li
0 553.385 li
0 557.461 li
cp
f
292.153 586.313 mo
293.279 586.313 294.197 587.229 294.197 588.351 cv
294.197 589.481 293.279 590.403 292.153 590.403 cv
291.023 590.403 290.104 589.481 290.104 588.351 cv
290.104 587.229 291.023 586.313 292.153 586.313 cv
cp
0 641.481 mo
45.5967 641.49 li
59.7002 641.49 li
243.101 641.49 li
288.786 595.803 li
289.813 596.271 290.95 596.53 292.153 596.53 cv
296.668 596.53 300.331 592.87 300.331 588.351 cv
300.331 583.838 296.665 580.185 292.153 580.185 cv
287.638 580.185 283.975 583.838 283.975 588.351 cv
283.975 590.61 284.89 592.661 286.373 594.141 cv
243.101 637.404 li
59.7002 637.396 li
45.5967 637.396 li
0 637.393 li
0 641.481 li
cp
f
851.672 247.075 mo
852.807 247.075 853.725 247.997 853.725 249.127 cv
853.725 250.249 852.807 251.164 851.672 251.164 cv
850.551 251.164 849.633 250.249 849.633 249.127 cv
849.633 247.997 850.551 247.075 851.672 247.075 cv
cp
0 308.153 mo
659.578 308.153 li
696.363 271.374 li
818.977 271.374 li
839.414 250.945 li
843.707 250.945 li
844.525 254.58 847.783 257.299 851.672 257.299 cv
856.191 257.299 859.842 253.639 859.842 249.127 cv
859.842 244.607 856.191 240.945 851.672 240.945 cv
847.953 240.945 844.803 243.439 843.818 246.854 cv
839.414 246.854 li
818.977 267.285 li
696.363 267.285 li
659.578 304.076 li
0 304.062 li
0 308.153 li
cp
f
851.672 312.477 mo
852.807 312.477 853.725 313.385 853.725 314.515 cv
853.725 315.645 852.807 316.559 851.672 316.559 cv
850.551 316.559 849.633 315.645 849.633 314.515 cv
849.633 313.385 850.551 312.477 851.672 312.477 cv
cp
0 332.668 mo
319.015 332.679 li
324.941 332.679 li
671.834 332.679 li
704.533 299.984 li
774.014 299.984 li
790.373 316.332 li
843.707 316.332 li
844.525 319.974 847.783 322.695 851.672 322.695 cv
856.191 322.695 859.85 319.032 859.85 314.515 cv
859.85 309.996 856.191 306.347 851.672 306.347 cv
847.953 306.347 844.803 308.835 843.818 312.255 cv
790.373 312.242 li
774.014 295.896 li
704.533 295.896 li
671.834 328.59 li
324.941 328.59 li
319.015 328.59 li
0 328.59 li
0 332.668 li
cp
f
798.539 193.944 mo
799.67 193.944 800.584 194.859 800.584 195.994 cv
800.584 197.113 799.67 198.033 798.539 198.033 cv
797.41 198.033 796.502 197.113 796.502 195.994 cv
796.502 194.859 797.41 193.944 798.539 193.944 cv
cp
324.941 271.368 mo
647.31 271.374 li
720.881 197.8 li
790.574 197.8 li
791.393 201.448 794.65 204.163 798.539 204.163 cv
803.051 204.163 806.715 200.5 806.715 195.994 cv
806.715 191.477 803.051 187.815 798.539 187.815 cv
794.805 187.815 791.664 190.309 790.685 193.715 cv
720.881 193.715 li
647.31 267.285 li
324.941 267.277 li
319.015 267.277 li
0 267.277 li
0 271.363 li
319.015 271.368 li
324.941 271.368 li
cp
f
851.672 279.775 mo
852.807 279.775 853.725 280.691 853.725 281.821 cv
853.725 282.951 852.807 283.866 851.672 283.866 cv
850.551 283.866 849.633 282.951 849.633 281.821 cv
849.633 280.691 850.551 279.775 851.672 279.775 cv
cp
0 320.41 mo
319.015 320.415 li
324.941 320.415 li
663.668 320.421 li
700.451 283.631 li
843.707 283.639 li
844.525 287.274 847.783 289.993 851.672 289.993 cv
856.191 289.993 859.85 286.338 859.85 281.821 cv
859.842 277.302 856.191 273.653 851.672 273.653 cv
847.953 273.653 844.803 276.14 843.818 279.548 cv
700.451 279.542 li
663.668 316.332 li
324.941 316.325 li
319.015 316.325 li
0 316.319 li
0 320.41 li
cp
f
229.374 812.502 mo
228.575 813.303 227.276 813.303 226.477 812.502 cv
225.685 811.705 225.685 810.406 226.477 809.607 cv
227.276 808.816 228.575 808.816 229.374 809.607 cv
230.17 810.406 230.17 811.705 229.374 812.502 cv
cp
222.154 805.277 mo
221.304 806.121 220.682 807.109 220.282 808.16 cv
5.3877 808.16 li
0 813.547 li
0 819.326 li
8.27783 811.057 li
219.759 811.057 li
219.759 813.144 220.551 815.236 222.154 816.834 cv
225.339 820.027 230.512 820.027 233.709 816.834 cv
236.892 813.639 236.892 808.467 233.709 805.277 cv
230.512 802.082 225.339 802.082 222.154 805.277 cv
cp
f
209.145 832.738 mo
208.346 833.531 207.054 833.531 206.255 832.738 cv
205.456 831.935 205.456 830.635 206.255 829.844 cv
207.054 829.039 208.346 829.039 209.145 829.844 cv
209.936 830.635 209.936 831.935 209.145 832.738 cv
cp
201.916 825.508 mo
201.067 826.352 200.445 827.344 200.045 828.402 cv
8.27783 828.402 li
0 836.672 li
0 842.451 li
11.1714 831.285 li
199.522 831.285 li
199.522 833.375 200.321 835.473 201.916 837.065 cv
205.102 840.256 210.278 840.256 213.472 837.065 cv
216.673 833.869 216.673 828.693 213.472 825.508 cv
210.278 822.313 205.102 822.313 201.916 825.508 cv
cp
f
798.539 226.652 mo
799.67 226.652 800.584 227.56 800.584 228.69 cv
800.584 229.818 799.67 230.727 798.539 230.727 cv
797.41 230.727 796.502 229.818 796.502 228.69 cv
796.502 227.56 797.41 226.652 798.539 226.652 cv
cp
0 287.703 mo
319.015 287.716 li
324.941 287.716 li
647.31 287.716 li
704.533 230.501 li
790.574 230.501 li
791.393 234.143 794.65 236.856 798.539 236.856 cv
803.051 236.856 806.717 233.202 806.717 228.69 cv
806.715 224.171 803.051 220.509 798.539 220.509 cv
794.805 220.509 791.67 223.003 790.685 226.412 cv
704.533 226.412 li
647.31 283.631 li
324.941 283.625 li
319.015 283.625 li
0 283.625 li
0 287.703 li
cp
f
239.012 236.701 mo
240.134 236.701 241.049 237.623 241.049 238.739 cv
241.049 239.87 240.134 240.778 239.012 240.778 cv
237.883 240.778 236.968 239.87 236.968 238.739 cv
236.968 237.623 237.883 236.701 239.012 236.701 cv
cp
0 210.135 mo
49.6699 210.135 li
50.9961 210.135 li
79.6147 181.518 li
181.783 181.518 li
233.229 232.961 li
231.749 234.441 230.839 236.486 230.839 238.739 cv
230.839 243.257 234.501 246.919 239.012 246.919 cv
243.524 246.919 247.186 243.257 247.186 238.739 cv
247.186 234.233 243.524 230.571 239.012 230.571 cv
237.813 230.571 236.676 230.831 235.65 231.3 cv
181.783 177.435 li
79.6147 177.427 li
50.9961 206.046 li
49.6699 206.046 li
0 206.046 li
0 210.135 li
cp
f
79.6147 87.9805 mo
80.7441 87.9805 81.6514 88.9028 81.6514 90.0303 cv
81.6514 91.1548 80.7441 92.0693 79.6147 92.0693 cv
78.4844 92.0693 77.5698 91.1548 77.5698 90.0303 cv
77.5698 88.9028 78.4844 87.9805 79.6147 87.9805 cv
cp
55.6035 91.8486 mo
71.6401 91.8486 li
72.4663 95.4858 75.7178 98.2104 79.6147 98.2104 cv
84.1182 98.2104 87.7769 94.5444 87.7769 90.0303 cv
87.7769 85.5132 84.1182 81.8584 79.6147 81.8584 cv
75.8789 81.8584 72.7358 84.3506 71.7598 87.7598 cv
55.6035 87.7598 li
49.6699 87.7598 li
0 87.7598 li
0 91.8486 li
49.6699 91.8486 li
55.6035 91.8486 li
cp
f
267.624 236.701 mo
268.753 236.701 269.664 237.623 269.664 238.739 cv
269.664 239.875 268.753 240.778 267.624 240.778 cv
266.494 240.778 265.579 239.875 265.579 238.739 cv
265.579 237.623 266.494 236.701 267.624 236.701 cv
cp
0 197.866 mo
38.7407 197.866 li
71.4331 165.17 li
194.05 165.17 li
261.84 232.961 li
260.356 234.441 259.449 236.486 259.449 238.739 cv
259.449 243.257 263.104 246.919 267.624 246.919 cv
272.139 246.919 275.797 243.257 275.797 238.739 cv
275.797 234.233 272.139 230.571 267.624 230.571 cv
266.421 230.571 265.279 230.831 264.253 231.3 cv
194.05 161.086 li
71.4331 161.086 li
38.7407 193.788 li
0 193.788 li
0 197.866 li
cp
f
79.6147 116.597 mo
80.7441 116.597 81.6514 117.512 81.6514 118.642 cv
81.6514 119.765 80.7441 120.688 79.6147 120.688 cv
78.4844 120.688 77.5698 119.765 77.5698 118.642 cv
77.5698 117.512 78.4844 116.597 79.6147 116.597 cv
cp
0 120.453 mo
49.6699 120.453 li
55.6035 120.453 li
71.6401 120.453 li
72.4663 124.103 75.7178 126.815 79.6147 126.815 cv
84.1182 126.815 87.7769 123.155 87.7769 118.642 cv
87.7769 114.13 84.1182 110.47 79.6147 110.47 cv
75.8789 110.47 72.7358 112.961 71.7598 116.376 cv
55.6035 116.363 li
49.6699 116.363 li
0 116.363 li
0 120.453 li
cp
f
698.945 176.428 mo
700.068 176.428 700.982 177.351 700.982 178.473 cv
700.982 179.602 700.068 180.519 698.945 180.519 cv
697.816 180.519 696.893 179.602 696.893 178.473 cv
696.893 177.351 697.816 176.428 698.945 176.428 cv
cp
172.214 256.125 mo
166.281 256.125 li
0 256.125 li
0 260.202 li
166.281 260.202 li
172.214 260.202 li
498.669 260.214 li
539.54 219.34 li
658.072 219.348 li
693.158 184.251 li
694.641 185.731 696.685 186.646 698.945 186.646 cv
703.457 186.646 707.111 182.986 707.111 178.473 cv
707.111 173.961 703.449 170.301 698.945 170.301 cv
694.426 170.301 690.764 173.961 690.764 178.473 cv
690.764 179.667 691.021 180.811 691.482 181.837 cv
658.072 215.257 li
539.54 215.257 li
498.669 256.125 li
172.214 256.125 li
cp
f
229.85 0 mo
225.761 0 li
250.636 24.877 li
254.729 24.877 li
229.85 0 li
cp
f
246.198 0 mo
242.109 0 li
266.984 24.877 li
271.073 24.877 li
246.198 0 li
cp
f
608.443 170.806 mo
609.572 170.806 610.494 171.715 610.494 172.845 cv
610.494 173.974 609.572 174.883 608.443 174.883 cv
607.313 174.883 606.402 173.974 606.402 172.845 cv
606.402 171.715 607.313 170.806 608.443 170.806 cv
cp
608.443 181.024 mo
612.961 181.024 616.621 177.356 616.621 172.845 cv
616.621 168.95 613.898 165.702 610.256 164.872 cv
610.256 0 li
606.184 0 li
606.174 164.99 li
602.766 165.969 600.268 169.119 600.268 172.845 cv
600.268 177.356 603.93 181.024 608.443 181.024 cv
cp
f
256.65 0 mo
252.554 0 li
277.429 24.877 li
281.514 24.877 li
256.65 0 li
cp
f
153.18 236.701 mo
154.306 236.701 155.229 237.623 155.229 238.739 cv
155.229 239.87 154.306 240.778 153.18 240.778 cv
152.05 240.778 151.135 239.87 151.135 238.739 cv
151.135 237.623 152.046 236.701 153.18 236.701 cv
cp
0 252.82 mo
49.6699 252.82 li
55.6035 252.82 li
91.8696 252.82 li
108.221 240.558 li
145.206 240.558 li
146.032 244.199 149.291 246.919 153.18 246.919 cv
157.692 246.919 161.354 243.257 161.354 238.739 cv
161.354 234.233 157.692 230.571 153.18 230.571 cv
149.456 230.571 146.305 233.065 145.325 236.48 cv
108.221 236.466 li
91.8696 248.737 li
55.6035 248.737 li
49.6699 248.737 li
0 248.731 li
0 252.82 li
cp
f
210.402 236.701 mo
211.531 236.701 212.446 237.623 212.446 238.739 cv
212.446 239.87 211.531 240.778 210.402 240.778 cv
209.268 240.778 208.357 239.87 208.357 238.739 cv
208.357 237.623 209.268 236.701 210.402 236.701 cv
cp
0 222.392 mo
49.6699 222.392 li
55.6035 222.392 li
59.1777 222.392 li
79.6147 201.955 li
173.617 201.955 li
204.625 232.961 li
203.135 234.441 202.227 236.486 202.227 238.739 cv
202.227 243.257 205.882 246.919 210.402 246.919 cv
214.921 246.919 218.576 243.257 218.576 238.739 cv
218.576 234.233 214.921 230.571 210.402 230.571 cv
209.206 230.571 208.065 230.831 207.039 231.3 cv
173.617 197.866 li
79.6147 197.866 li
59.1777 218.303 li
55.6035 218.303 li
49.6699 218.303 li
0 218.303 li
0 222.392 li
cp
f
181.783 236.701 mo
182.913 236.701 183.835 237.623 183.835 238.739 cv
183.835 239.87 182.913 240.778 181.783 240.778 cv
180.661 240.778 179.747 239.87 179.747 238.739 cv
179.747 237.623 180.661 236.701 181.783 236.701 cv
cp
0 234.649 mo
49.6699 234.649 li
55.6035 234.649 li
75.5293 234.649 li
95.9585 214.225 li
157.273 214.225 li
176.007 232.961 li
174.528 234.441 173.617 236.486 173.617 238.739 cv
173.617 243.257 177.279 246.919 181.783 246.919 cv
186.303 246.919 189.965 243.257 189.965 238.739 cv
189.965 234.233 186.303 230.571 181.783 230.571 cv
180.596 230.571 179.455 230.831 178.429 231.286 cv
157.273 210.135 li
95.9585 210.135 li
75.5293 230.566 li
55.6035 230.566 li
49.6699 230.566 li
0 230.566 li
0 234.649 li
cp
f
79.6147 145.202 mo
80.7441 145.202 81.6514 146.123 81.6514 147.252 cv
81.6514 148.382 80.7441 149.291 79.6147 149.291 cv
78.4844 149.291 77.5698 148.382 77.5698 147.252 cv
77.5698 146.123 78.4844 145.202 79.6147 145.202 cv
cp
0 149.064 mo
49.6699 149.07 li
55.6035 149.07 li
71.6401 149.07 li
72.4663 152.706 75.7178 155.426 79.6147 155.426 cv
84.1182 155.426 87.7842 151.758 87.7842 147.252 cv
87.7842 142.735 84.1182 139.073 79.6147 139.073 cv
75.8789 139.073 72.7358 141.564 71.7598 144.981 cv
55.6035 144.981 li
49.6699 144.981 li
0 144.981 li
0 149.064 li
cp
f
1019.56 147.195 mo
1020.7 147.195 1021.61 148.109 1021.61 149.239 cv
1021.61 150.369 1020.7 151.278 1019.56 151.278 cv
1018.44 151.278 1017.53 150.369 1017.53 149.239 cv
1017.53 148.109 1018.44 147.195 1019.56 147.195 cv
cp
1011.39 149.239 mo
1011.39 153.758 1015.05 157.419 1019.56 157.419 cv
1024.08 157.419 1027.75 153.758 1027.75 149.239 cv
1027.75 144.727 1024.08 141.06 1019.56 141.06 cv
1017.3 141.06 1015.27 141.981 1013.79 143.448 cv
880.6 10.27 li
880.6 0 li
876.512 0 li
876.512 10.27 li
1012.11 145.876 li
1011.65 146.903 1011.39 148.032 1011.39 149.239 cv
cp
f
637.049 170.806 mo
638.188 170.806 639.098 171.715 639.098 172.845 cv
639.098 173.974 638.188 174.883 637.049 174.883 cv
635.92 174.883 635.012 173.974 635.012 172.845 cv
635.012 171.715 635.926 170.806 637.049 170.806 cv
cp
637.049 181.024 mo
641.56 181.024 645.23 177.356 645.23 172.845 cv
645.23 168.95 642.514 165.702 638.871 164.872 cv
638.879 0 li
634.785 0 li
634.785 164.99 li
631.369 165.969 628.887 169.119 628.887 172.845 cv
628.879 177.356 632.537 181.024 637.049 181.024 cv
cp
f
1019.56 204.415 mo
1020.7 204.415 1021.61 205.331 1021.61 206.46 cv
1021.61 207.59 1020.7 208.499 1019.56 208.499 cv
1018.44 208.499 1017.53 207.59 1017.53 206.46 cv
1017.53 205.331 1018.44 204.415 1019.56 204.415 cv
cp
1011.39 206.46 mo
1011.39 210.973 1015.05 214.627 1019.56 214.627 cv
1024.08 214.627 1027.75 210.973 1027.75 206.46 cv
1027.75 201.941 1024.08 198.281 1019.56 198.281 cv
1017.3 198.281 1015.27 199.19 1013.79 200.683 cv
847.9 34.7979 li
847.9 0 li
843.813 0 li
843.813 34.7979 li
1012.11 203.098 li
1011.65 204.122 1011.39 205.266 1011.39 206.46 cv
cp
f
1019.56 233.025 mo
1020.7 233.025 1021.61 233.936 1021.61 235.077 cv
1021.61 236.194 1020.7 237.116 1019.56 237.116 cv
1018.44 237.116 1017.53 236.194 1017.53 235.077 cv
1017.53 233.936 1018.44 233.025 1019.56 233.025 cv
cp
1011.39 235.077 mo
1011.39 239.589 1015.05 243.244 1019.56 243.244 cv
1024.08 243.244 1027.75 239.589 1027.75 235.077 cv
1027.75 230.552 1024.08 226.898 1019.56 226.898 cv
1017.3 226.898 1015.27 227.806 1013.79 229.286 cv
831.557 47.0605 li
831.557 0 li
827.471 0 li
827.471 47.0605 li
1012.11 231.701 li
1011.65 232.727 1011.39 233.871 1011.39 235.077 cv
cp
f
1019.56 175.805 mo
1020.7 175.805 1021.61 176.72 1021.61 177.85 cv
1021.61 178.974 1020.7 179.894 1019.56 179.894 cv
1018.44 179.894 1017.53 178.974 1017.53 177.85 cv
1017.53 176.72 1018.44 175.805 1019.56 175.805 cv
cp
1011.39 177.85 mo
1011.39 182.367 1015.05 186.023 1019.56 186.023 cv
1024.08 186.023 1027.75 182.367 1027.75 177.85 cv
1027.75 173.331 1024.08 169.676 1019.56 169.676 cv
1017.3 169.676 1015.27 170.585 1013.79 172.072 cv
864.254 22.5386 li
864.254 0 li
860.164 0 li
860.164 22.5386 li
1012.11 174.487 li
1011.65 175.506 1011.39 176.649 1011.39 177.85 cv
cp
f
714.707 113.578 mo
715.846 113.578 716.756 114.493 716.756 115.623 cv
716.756 116.752 715.846 117.662 714.707 117.662 cv
713.578 117.662 712.672 116.752 712.672 115.623 cv
712.672 114.493 713.578 113.578 714.707 113.578 cv
cp
706.537 115.623 mo
706.537 120.129 710.195 123.797 714.707 123.797 cv
719.227 123.797 722.887 120.129 722.887 115.623 cv
722.887 111.105 719.227 107.443 714.707 107.443 cv
712.455 107.443 710.41 108.365 708.932 109.839 cv
665.672 66.583 li
665.672 0 li
661.578 0 li
661.578 66.583 li
707.264 112.26 li
706.799 113.278 706.537 114.416 706.537 115.623 cv
cp
f
894.488 233.025 mo
895.619 233.025 896.533 233.936 896.533 235.077 cv
896.533 236.194 895.619 237.116 894.488 237.116 cv
893.359 237.116 892.445 236.194 892.445 235.077 cv
892.445 233.936 893.359 233.025 894.488 233.025 cv
cp
886.314 235.077 mo
886.314 239.589 889.977 243.244 894.488 243.244 cv
899 243.244 902.664 239.589 902.664 235.077 cv
902.664 230.552 899 226.898 894.488 226.898 cv
892.228 226.898 890.185 227.806 888.709 229.286 cv
706.477 47.0605 li
706.477 0 li
702.387 0 li
702.387 47.0605 li
887.041 231.701 li
886.568 232.727 886.314 233.871 886.314 235.077 cv
cp
f
694.269 138.098 mo
695.4 138.098 696.316 139.02 696.316 140.145 cv
696.316 141.273 695.4 142.189 694.269 142.189 cv
693.141 142.189 692.234 141.273 692.234 140.145 cv
692.234 139.02 693.141 138.098 694.269 138.098 cv
cp
686.102 140.145 mo
686.102 144.656 689.754 148.317 694.269 148.317 cv
698.783 148.317 702.449 144.656 702.449 140.145 cv
702.449 135.631 698.783 131.971 694.269 131.971 cv
692.018 131.971 689.975 132.885 688.494 134.365 cv
649.316 95.186 li
649.322 0 li
645.23 0 li
645.23 95.186 li
686.826 136.78 li
686.359 137.812 686.102 138.942 686.102 140.145 cv
cp
f
894.488 204.415 mo
895.619 204.415 896.533 205.331 896.533 206.46 cv
896.533 207.59 895.619 208.499 894.488 208.499 cv
893.359 208.499 892.445 207.59 892.445 206.46 cv
892.445 205.331 893.359 204.415 894.488 204.415 cv
cp
886.314 206.46 mo
886.314 210.973 889.977 214.627 894.488 214.627 cv
899 214.627 902.664 210.973 902.664 206.46 cv
902.664 201.941 899 198.281 894.488 198.281 cv
892.228 198.281 890.185 199.19 888.709 200.683 cv
722.824 34.7979 li
722.824 0 li
718.734 0 li
718.734 34.7979 li
887.041 203.098 li
886.568 204.122 886.314 205.266 886.314 206.46 cv
cp
f
894.488 147.195 mo
895.619 147.195 896.533 148.109 896.533 149.239 cv
896.533 150.369 895.619 151.278 894.488 151.278 cv
893.359 151.278 892.445 150.369 892.445 149.239 cv
892.445 148.109 893.359 147.195 894.488 147.195 cv
cp
886.314 149.239 mo
886.314 153.758 889.977 157.419 894.488 157.419 cv
899 157.419 902.664 153.758 902.664 149.239 cv
902.664 144.727 899 141.06 894.488 141.06 cv
892.228 141.06 890.185 141.981 888.709 143.448 cv
755.519 10.27 li
755.519 0 li
751.435 0 li
751.435 10.27 li
887.041 145.876 li
886.568 146.903 886.314 148.032 886.314 149.239 cv
cp
f
894.488 175.805 mo
895.619 175.805 896.533 176.72 896.533 177.85 cv
896.533 178.974 895.619 179.894 894.488 179.894 cv
893.359 179.894 892.445 178.974 892.445 177.85 cv
892.445 176.72 893.359 175.805 894.488 175.805 cv
cp
886.314 177.85 mo
886.314 182.367 889.977 186.023 894.488 186.023 cv
899 186.023 902.664 182.367 902.664 177.85 cv
902.664 173.331 899 169.676 894.488 169.676 cv
892.228 169.676 890.185 170.585 888.709 172.072 cv
739.172 22.5386 li
739.172 0 li
735.09 0 li
735.09 22.5386 li
887.041 174.487 li
886.568 175.506 886.314 176.649 886.314 177.85 cv
cp
f
560.712 104.029 mo
561.85 104.029 562.75 104.943 562.75 106.067 cv
562.75 107.203 561.85 108.118 560.712 108.118 cv
559.582 108.118 558.668 107.203 558.668 106.067 cv
558.668 104.943 559.582 104.029 560.712 104.029 cv
cp
558.891 98.0952 mo
555.255 98.9253 552.535 102.178 552.535 106.067 cv
552.535 110.585 556.194 114.239 560.712 114.239 cv
565.232 114.239 568.882 110.585 568.882 106.067 cv
568.882 102.339 566.4 99.1978 562.984 98.2241 cv
562.984 16.1519 li
546.825 0 li
542.743 0 li
558.891 16.1519 li
558.891 98.0952 li
cp
f
392.199 30.2266 mo
286.871 30.2266 li
285.603 28.9604 li
281.514 28.9604 li
286.871 34.3154 li
395.857 34.3154 li
394.209 33.4146 392.91 31.979 392.199 30.2266 cv
cp
f
529.202 161.251 mo
530.331 161.251 531.238 162.159 531.238 163.295 cv
531.238 164.417 530.331 165.333 529.202 165.333 cv
528.072 165.333 527.165 164.417 527.165 163.295 cv
527.165 162.159 528.072 161.251 529.202 161.251 cv
cp
55.6035 22.0522 mo
100.043 22.0522 li
100.043 46.5669 li
296.234 242.764 li
386.151 242.764 li
463.814 165.107 li
521.231 165.107 li
522.054 168.753 525.313 171.461 529.202 171.461 cv
533.721 171.461 537.376 167.807 537.376 163.295 cv
537.376 158.775 533.721 155.115 529.202 155.115 cv
525.474 155.115 522.327 157.615 521.347 161.016 cv
463.814 161.016 li
386.151 238.674 li
296.234 238.674 li
104.125 46.5669 li
104.125 17.9692 li
55.6035 17.9561 li
49.6699 17.9561 li
0 17.9561 li
0 22.0522 li
49.6699 22.0522 li
55.6035 22.0522 li
cp
f
529.194 104.029 mo
530.331 104.029 531.238 104.943 531.238 106.067 cv
531.238 107.203 530.331 108.118 529.194 108.118 cv
528.072 108.118 527.157 107.203 527.157 106.067 cv
527.157 104.943 528.072 104.029 529.194 104.029 cv
cp
55.6035 7.97168 mo
116.399 7.97168 li
116.399 44.7549 li
292.145 220.509 li
382.063 220.509 li
455.624 146.941 li
492.417 146.941 li
525.835 113.521 li
526.865 113.987 528.003 114.239 529.194 114.239 cv
533.714 114.239 537.376 110.585 537.376 106.067 cv
537.376 101.561 533.714 97.8989 529.194 97.8989 cv
524.683 97.8989 521.024 101.561 521.024 106.067 cv
521.024 108.333 521.946 110.366 523.418 111.845 cv
492.417 142.85 li
455.624 142.85 li
382.063 216.42 li
292.145 216.42 li
120.48 44.7549 li
120.48 3.88135 li
55.6035 3.88135 li
49.6699 3.88135 li
0 3.88135 li
0 7.97168 li
49.6699 7.97168 li
55.6035 7.97168 li
cp
f
230.199 28.9604 mo
234.285 28.9604 li
230.196 24.8633 li
226.106 24.8633 li
230.199 28.9604 li
cp
f
335.915 83.5918 mo
337.045 83.5918 337.96 84.501 337.96 85.6304 cv
337.96 86.7588 337.045 87.6807 335.915 87.6807 cv
334.785 87.6807 333.871 86.7588 333.871 85.6304 cv
333.871 84.501 334.785 83.5918 335.915 83.5918 cv
cp
332.548 93.082 mo
333.579 93.5508 334.716 93.8101 335.915 93.8101 cv
340.435 93.8101 344.097 90.1426 344.089 85.6304 cv
344.089 81.1113 340.435 77.4624 335.915 77.4624 cv
331.395 77.4624 327.745 81.1113 327.745 85.6304 cv
327.745 87.8882 328.66 89.9272 330.139 91.4082 cv
282.778 138.761 li
172.432 28.4087 li
172.432 0 li
168.343 0 li
168.343 28.4087 li
282.778 142.85 li
332.548 93.082 li
cp
f
360.441 104.015 mo
361.571 104.015 362.481 104.938 362.481 106.067 cv
362.481 107.197 361.571 108.106 360.441 108.106 cv
359.311 108.106 358.396 107.197 358.396 106.067 cv
358.396 104.938 359.311 104.015 360.441 104.015 cv
cp
357.075 113.521 mo
358.101 113.974 359.242 114.239 360.441 114.239 cv
364.948 114.239 368.619 110.585 368.619 106.067 cv
368.619 101.554 364.948 97.8877 360.441 97.8877 cv
355.925 97.8877 352.263 101.554 352.263 106.067 cv
352.263 108.325 353.185 110.366 354.661 111.845 cv
295.049 171.461 li
160.162 36.583 li
160.162 0 li
156.08 0 li
156.08 36.583 li
295.049 175.546 li
357.075 113.521 li
cp
f
230.196 24.8633 mo
205.327 0 li
201.238 0 li
226.106 24.8633 li
230.196 24.8633 li
cp
f
18.7954 59.8423 mo
18.7954 60.9663 17.8813 61.8813 16.7515 61.8813 cv
15.6294 61.8813 14.7104 60.9663 14.7104 59.8423 cv
14.7104 59.5903 14.7686 59.3623 14.8452 59.1484 cv
0 59.1484 li
0 61.6543 li
8.78125 61.6543 li
8.90771 62.2056 9.10791 62.7378 9.33447 63.2314 cv
24.1685 63.2314 li
24.6523 62.1997 24.9292 61.0513 24.9292 59.8423 cv
24.9292 59.604 24.875 59.375 24.8599 59.1484 cv
18.6572 59.1484 li
18.73 59.3623 18.7954 59.5903 18.7954 59.8423 cv
cp
f
2.04102 61.8813 mo
3.1709 61.8813 4.08496 60.9663 4.08496 59.8423 cv
4.08496 59.5903 4.01953 59.3623 3.94678 59.1484 cv
.134766 59.1484 li
.058105 59.3623 0 59.5903 0 59.8423 cv
0 60.9663 .918945 61.8813 2.04102 61.8813 cv
cp
f
0 61.6543 mo
0 63.2314 li
9.33447 63.2314 li
9.10791 62.7378 8.90771 62.2056 8.78125 61.6543 cv
0 61.6543 li
cp
f
55.4463 59.375 mo
56.5757 59.375 57.4829 60.2979 57.4829 61.4214 cv
57.4829 62.5435 56.5757 63.4663 55.4463 63.4663 cv
54.3159 63.4663 53.4014 62.5435 53.4014 61.4214 cv
53.4014 60.2979 54.3159 59.375 55.4463 59.375 cv
cp
0 63.2314 mo
25.5015 63.2314 li
31.4351 63.2314 li
47.4717 63.2314 li
48.2979 66.8809 51.5493 69.5938 55.4463 69.5938 cv
59.9497 69.5938 63.6084 65.9395 63.6084 61.4214 cv
63.6084 56.9028 59.9497 53.248 55.4463 53.248 cv
51.7104 53.248 48.563 55.7397 47.5913 59.1484 cv
31.4351 59.1484 li
25.5015 59.1484 li
.691406 59.1484 li
.706543 59.375 .760742 59.604 .760742 59.8423 cv
.760742 61.0513 .483887 62.1997 0 63.2314 cv
cp
f
380.874 124.452 mo
382.004 124.452 382.918 125.374 382.918 126.504 cv
382.918 127.634 382.004 128.543 380.874 128.543 cv
379.744 128.543 378.83 127.634 378.83 126.504 cv
378.83 125.374 379.744 124.452 380.874 124.452 cv
cp
377.511 133.958 mo
378.538 134.424 379.679 134.67 380.874 134.67 cv
385.393 134.67 389.048 131.021 389.048 126.504 cv
389.048 121.992 385.393 118.325 380.874 118.325 cv
376.362 118.325 372.7 121.992 372.7 126.504 cv
372.7 128.764 373.615 130.802 375.098 132.288 cv
307.308 200.072 li
151.995 44.7549 li
151.995 0 li
147.906 0 li
147.906 44.7549 li
307.308 204.163 li
377.511 133.958 li
cp
f
462.618 30.4531 mo
463.747 30.4531 464.669 31.3696 464.669 32.498 cv
464.669 33.6274 463.747 34.5439 462.618 34.5439 cv
461.488 34.5439 460.577 33.6274 460.577 32.498 cv
460.577 31.3696 461.488 30.4531 462.618 30.4531 cv
cp
403.617 34.3154 mo
454.651 34.3154 li
455.469 37.9585 458.728 40.6719 462.618 40.6719 cv
467.136 40.6719 470.795 37.0112 470.795 32.498 cv
470.795 27.9805 467.136 24.3179 462.618 24.3179 cv
458.89 24.3179 455.746 26.812 454.766 30.2324 cv
407.325 30.2324 li
406.61 31.9922 405.281 33.4199 403.617 34.3154 cv
cp
f
429.921 87.6807 mo
431.051 87.6807 431.966 88.5898 431.966 89.7192 cv
431.966 90.8491 431.051 91.772 429.921 91.772 cv
428.792 91.772 427.877 90.8491 427.877 89.7192 cv
427.877 88.5898 428.792 87.6807 429.921 87.6807 cv
cp
286.871 44.7622 mo
384.959 44.7622 li
424.142 83.9414 li
422.666 85.4214 421.748 87.4595 421.748 89.7192 cv
421.748 94.231 425.402 97.8877 429.921 97.8989 cv
434.441 97.8989 438.095 94.231 438.095 89.7192 cv
438.095 85.2017 434.441 81.5454 429.921 81.5454 cv
428.726 81.5454 427.585 81.8066 426.559 82.2739 cv
384.959 40.6719 li
286.871 40.6719 li
275.158 28.9604 li
271.073 28.9604 li
286.871 44.7622 li
cp
f
395.857 34.3154 mo
403.617 34.3154 li
405.281 33.4199 406.61 31.9922 407.325 30.2324 cv
392.199 30.2266 li
392.91 31.979 394.209 33.4146 395.857 34.3154 cv
cp
f
258.817 28.9604 mo
254.729 24.877 li
250.636 24.877 li
254.729 28.9604 li
258.817 28.9604 li
cp
f
286.871 83.5918 mo
287.997 83.5918 288.916 84.501 288.916 85.6304 cv
288.916 86.7588 287.997 87.6807 286.871 87.6807 cv
285.745 87.6807 284.831 86.7588 284.831 85.6304 cv
284.831 84.501 285.745 83.5918 286.871 83.5918 cv
cp
281.092 79.8525 mo
279.608 81.3325 278.693 83.3706 278.693 85.6304 cv
278.693 90.1426 282.356 93.8101 286.871 93.8101 cv
291.387 93.8101 295.042 90.1426 295.042 85.6304 cv
295.042 81.1113 291.387 77.4624 286.871 77.4624 cv
285.668 77.4624 284.531 77.7158 283.505 78.1768 cv
234.285 28.9604 li
230.199 28.9604 li
281.092 79.8525 li
cp
f
405.396 108.106 mo
406.533 108.106 407.448 109.026 407.448 110.156 cv
407.448 111.286 406.533 112.195 405.396 112.195 cv
404.273 112.195 403.355 111.286 403.355 110.156 cv
403.355 109.026 404.273 108.106 405.396 108.106 cv
cp
286.871 61.103 mo
356.352 61.1084 li
399.624 104.378 li
398.14 105.853 397.226 107.899 397.226 110.156 cv
397.226 114.662 400.884 118.325 405.396 118.325 cv
409.915 118.325 413.574 114.662 413.574 110.156 cv
413.574 105.639 409.915 101.977 405.396 101.977 cv
404.201 101.977 403.063 102.236 402.037 102.705 cv
356.352 57.0195 li
286.871 57.0195 li
258.817 28.9604 li
254.729 28.9604 li
286.871 61.103 li
cp
f
275.158 28.9604 mo
271.073 24.877 li
266.984 24.877 li
271.073 28.9604 li
275.158 28.9604 li
cp
f
285.603 28.9604 mo
281.514 24.877 li
277.429 24.877 li
281.514 28.9604 li
285.603 28.9604 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.1.0
%%For: (user) ()
%%Title: (plata_49.eps)
%%CreationDate: 4/12/2016 2:16 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6CKh`<dQdZBhWrnai#G91!Rp36O9C1j+X)C:3?O'^)fRL>j$RFa0E.UBWKLF_WOn.ZHcauRI*Xs^n3^JZ8Yo=a<%?/;D6sPM
%HD>VkdJeKh?keo#b:j:i5K:J<2)k9BE=he4PUX(WK?L4Dhs\!h;6RI^DRR0jQ,;\PC9-j(H3Sku(-Y44B)AdK7^H:1J8\%AmW#)N
%N%45_A[Pn7M?X1MA+oHI*de+on7RLQa#fUf*Cfuk1]qEtH4RGCBU.4,r+H$#6$1]Aot/b'UYYdXJ43*m*[c@QFfP?M5]!9)_E[Y]
%a$MdIXU^eJ?=uQhJfjjt"XNWJYh)1:a1h,;,*Vt8`;f>abWl6hT-Y0N?PQ66KKiZE]AW1)p@la4LW'XG7_s*'cW9spRAp7LH.GOQ
%_5$5"e#`6f2HZPZ']$V=ru_)q-k'V$$JL57FJ,1ZAJE%d&;5M[Z/Bgj/=L`e=H.CoWtG<<;Ks6_lVTS^c;M-$f_>scS!8s.%gR`!
%e:$(doV(G1L4t"+?FB)r'?Vg,Q"H;@/n("C2_K)Lm@Hap&BK$9J4$S>#\5Nj#FE'Qh[p3e)-=,qM-<F:GH@c:VJFige+%uqd;fW1
%W*f$FkZ3aEis,b:'K*1)NThW!,U&!@3(EcfN-jC#=eiB6L!X[Fkf%SRh/1Z,R/0i,i;[5]MZNW4'`Z1T"lB.TW$RmN>0!,9LqjtK
%=,0oN<i`sf^;OIDiNF1Cl7JA,c1Y<<=7lsu)itnY@U9mjr43=Z1g3HFhuA#IrtZUC2[Aimm;@9tfkI"cs8B.s;S@Jk'qe^cW5/GE
%:mbn1MZ58/)kDZpho!Ba3N`X,FK>'bC:63W0JAcJidS5fWced:&!GjgitqWi$>_/S=>9#ia@-c^[M.3fN!_)!TRTB2nu"TM]n<'H
%0$KQ+@IN7^quS.2Ft4PTX#1_.r4Uc'0Ep%q(8JX>.nKC1K77oEfmgUCT,i*T2&NSfZO+C^'PfU7H61YKNK[U!gMO;qbV?3QmJk`)
%?=:\9;,ulJ4@B]5U42Jl8N''<)oDL&r].&-;6/Q;UVqX^&qElrYri^ZX3b?hh.l,c;(HI)#JK`G;7kYKe2.(VCSH;gJ&3j[ZI+`E
%Xh>M5-XCLm+B]k$9E*0=f-\8TWX8Ya9soe;fr?u=<Xqt>=-blEWsUVsgGm;$N/,/$:YO&_mo!&]a?Ih<7]dOKrpKHS>[$a'`Yt2o
%8,Aig5K3-"HKgLB_Xu[]IBN%q2sN*^L]-LL8,SZCgYpeW2Hlam$\s@(5>i0-IG$nb[r?Rum6n%F7EIncdQN=bQEHrT9-`%ie)5^<
%I('PgY)c'$ZM_8;!l'/.[JLm/+nfuf;+'rPgAO1o:TK3F^Fu'.pu<"Z,&e$_"57]+$C89ZC9gP#][<g)UD>@g'pa&O[?Q0Zs7Cdc
%g[N7/dkKo"$Hn2iZur5^qGhABi_nr:j6XECUg0sHabrFm7)?j!B'1h3TH)b*ji585*`i9c_8bArc,/oh/GpP2$`0ES;R:FN4Z5g:
%d\u?e"Ug<JR5VB>aZb22:T$m1Z$fmfk-WQpq,j%AS_,$+:LGj1W^W\0LOV1e>9raD0[shZp)@D'N+T!.b+Z9ecX:Oba2OQ+R]G#t
%Ej+&trlW1o/Nbr!=Z"p]Cn4OP;5G61*.Y!M;5/p<j'iLrf4a<X;/ah*@rdBW3L.jn2OddUH*i`nN^bH,dcRTWIOp,'2YngKgRX/2
%.WPrT.QT124)>G=[:l&ue8q_H_t_hamae2[RRV([3n3u0`]db^*j!D*AN?X2+)1s8<^o#U\K%.U<bGXI$"R\WQ('$7VI_:@bdMQl
%N31lL[gKQko6%[mRr.;b?o+-Z@SYlo/r/V'[[3KNj^rkMfj8R)Q^dC(E:`,FY.\'mG,Ae'[q+<Hh-<,j-@\7h&cITULZd36qlcJQ
%TUWt"%UU[<-MJ:WP<!dg]mdX7rG&PRhHZNi>'sS&SMUSh<iRUWR^]>M?E[4CD%,TFZL-coi`=C#f'?hqlZm`rUXe[?<9s@Wa2Dbs
%p??9El<c7bVKf941#AdJQ8d2*`b<()]1heIq=&fj[a+egk4&o#ji1nGkMW-LeHX95GI-,jorG2W6C7[^D#>1H);P)#dr%V+@ShJ.
%/d?BMIIma"dqUHqXB"j`UfMl?e,LpV:f-ii_aNd>T[5&\RkD7+O^h-]qJOqBEj7@XqdJ.,k@3I93S=,QfPQTGG,*UFc0+%hr,^+B
%N7Wg?fP['KUZ^2K$05.*'>L>Jdq*Tk1P*XhR;(FI>jmnedPO4LS\[`9ft&#qB]\3hcGP8t4s"_qcPOKh3#W=QAFhKkX>D!BnaTHC
%2YuU';*WBXnl2`M\*^Et)Ctd)YDpdrTB.\m/WTj2k>0gcH6#fMFlqF<#P;$G4c?NlVpa;@5LFB3Gl5ribbBJs;*LE7R("Nea3DHD
%Uq8L*ak)2-2+p$OS*bB?UDlZ%a`1-9]=2c!mVS?1*7qd6eTt_eVaj.kZ0aDeJ_8NmQu)7mmZh]`\6KLbVJTQ5Wnm'4A"LRXMpqlI
%6Z/5/bB%<)VT's(i_R5X\qSbWVHeD;gkLJ`9=H)fp,:.`*7?Z\'7>\4?uP#Cplc]+f#6mT>Y94gkPD;U;33"hG7%7_jHr#-R\Cpc
%>*uaPB?Cl%S.#eRR3kXVOQ1Rno=Wdl7Er`KaW:Q*F'=\%A6f%tEh"+ST>1"Gj5M_I%/06uYo*)gMVDMpjKdVh5Jee/C7DZ^VVLBX
%RakSpO3tV?G,B<%\Z>kC*(OkpZ.$5mq<QPB<e]%aVY9%`B%`5jN,;F2P1@J2X6L\a2f1U95?)fkP*g(aG*6?>3q4[CQX60RfobG)
%p/E@jaWY*mPZt>h3J3Ghfb84J,'KF8)q\bt'if<C0#K$6L/0hl?q;"Q(K9.GRB30oWn-JFI*sYQ=/tJo\8&EUH!%)s#+'rmcFGg0
%8E"QnPsZWkp-e#G)&o>2eB<o2a_LFNlL/.>Wie_deS\,.b"IbQV&V!P^R]!reXl!dqR#"kbbN-[Z*B9W%ah<>8^,.HNGVaaK8l)Y
%/=.(gQQ,89U=s?ek#0-UJ#W[]+>I*f<^`YbZUg=;fV%>gVJ1*YbT]n2aZj"A%?W'LPjY?noiiGnOs_.('S`@;ihm=Y.#)G?HDWe?
%V)F6#)91&T(?L%b?]M8)Pf0<O$EG>:rAOJV.!\eH[&l6m=HlD3leKWb'_<CXMiu9SR<V^pMaa$nrDpN>Ypd0Tg8*&TgDZ!58&D-?
%f&,O;br!GijO+suQuM(*bNVcnQReA@2A4K*fO9(1ifCNWS1V6Nq$ThWa(:Q4jnOS$W7/8*j`._&9;\=cR3h#,-H7+-@_H*6R@.Bn
%NaD<hH7_W'bk0U_YKc^n<9U`l/g)rkm<4n5&J")"X3J$*5?k25N3ul$XNe-+9WS,e[2M1?3kjQ,MeQ..3P+.`4jBLs"2NSH])FPW
%B@A8!(X/c(C`4Utd=1-EW4Cfer]\%*[kV0`i8t=-j.gj\/"Vfd*>_e`[tSjE;E)1'&'ai'D96!#Xa5*CBFTH9;i?Is7+H`H<tYL2
%G$M-A3gc=I1g@<!1pahOItk(&g4,EQ-;/?;3@TrU-\]W+2A=5XL884[>"6>MiP.h_r`t5MiI=qf%u!5hULJU4OR$G)R5ECV,i99d
%PA]15Y%R_4#Q+0#(:J^5)#otH'Y!GQ-)XY1F>\%)USGrGTA70I[!T$"h&?cli)?]_2?e;'W<I>;pb)+CfYn]h.h<0._LOHalnRo0
%EptdL>YO1oR;<q!NKqM93Q@&!\'[FTN;@g!mo6ELf2KObZ:a7;rMOCi]S1V=DetQ+`e0(_NpY=!"3k`[h<smlgQ:63G5eO^3'7/b
%m$ZQ&mhdY*ft/N9oAA6sn*KuHROl_/Ija[^QPj"P!c/aT3=W1FRI>eLO%d,N5<JJ-Sb\;hj"^4>^@fM1koe=D)\]CZEr/B<F6:s&
%8rnn2hbg`5rbF?+c,SF^*ssRL0SO0MmZJYcn?Bke]%LtPJ_A2@*E$7'c2PhYbm3''fGE\89"k"1C\*BiCiaC,J'.Ak1Cr0_6T-j"
%Afe6,nrVrg3+d'68T^0@*fQXH2]9*q=3nHTe63%1.U%P6X)Z]srRGR?U],!eWirkCe^i)gm@!uj*%?)PGVc*Ar0Gf/6ctE`2Zu-c
%WrAo93Tq!#=]&,WU?%]t2!"qr#O^T?2:gEE1>d';`f'"ZMLD):-[VD_"pR]o)LM2M-f\DRo/!oLG6dKHCGDbO)5!TcbaEZ*4A%E-
%b="Et`&nn&h2b-+W\_]=bjdH0]Z_?K1WR\_nM50ur%D,$FL,r,9C.@@rg0&5AV,-!bq&MXdhK)AF!/^I8Cq\!@D$lSC(Jap9/LXj
%/a^Jpcu7Z5g50c.r$d=Rh8q#7,RBe0A.s65QmJ5hLe,BcZAJ+S.=^FSMogu!S:^F=g$%m+)ahrUArG[P/$qlT*+t\,-=_%cAR_+d
%`A,+/T(mHuRQKK-=W:ukQu5t0VJD.V/GmjHqpN!m['Xn%G[@M]s1/q@n'$q/jk_HDQL!lt15=&VZVQNO0_O&NF$(.>+/X1fpkli,
%-X(e?aRRt6.l>r.A)amtqt.63ol2m3UO#\#4Df.gO7E!@g]RI]7e_(D"t"1tDX1fcZQ7c%gS(%D0fN9&c_GlM6aGX[<]njQ_p2VK
%HEQb>\D4T]=YeeQbiH#6a(PtF@j6t"3(A6kq(ZbS$L*s#iudI)n7I-..GE6E]cSK/"b)Cm4O!^?'>)_a[Q-SDA'FifP;Y0P5K:p.
%0dV8WgnFDA\RMUOqm5%]5<J75C]/#>Fh<b`N1#/SZ=>0UZ*73>%F0[]%>Q3g.JL\f^X94oo+>`LAh8/UB]cleXd'qDF*SC+[0DtE
%0YMqsieeKm(K3dX8(sc&C+lT/US!1;<Qh^k99c&Z]eE)9PZeW2M2#W!L1Z9sngnsn1=8o>AO"?oPds&<2p[R_bjgKc^R`E8Dbml/
%EnYA;k#nN_Z#Oc(o4ai:kPVkcg7U[lpc077:BjP?9%3#=]QMn'Ec&E9IE20hPFd`^<I;DP?8G)cT&'G6$M_c_cBJHZj^D`;_nGWF
%0_rOkC5G+qG.W6mI'U'\KcHZ5+(^a4gMt*4G%0WjcC%!@[W-YbfJpQ^?e!A;0/m$\\U7:5gWb^j[`io9ZeaDQ2`KL9NGgbB_nMT,
%k&/(SmM:P4h<OrDNiWgk\=^s\eSI<+gWn'PF0k8hCcaT1cHVjHmFokI@V8<AF%bXIf[/_i@e.!Mn([7+=gsi4_40iTDSpoUk=t)1
%+7%\TN^Sm:c7H0;`,'@h5-IBOW_;p3U^(Lg5%b0WAdL64O<A$qcKHUBX8Kg"Q'5gfG-P6/:qKZ.2>Y'hEd8"=rSPj^?L#&U\7@>W
%]A=4)U3#l[D:>G8JiAt$W5g[_D;Goq\oka@]^u+\Y,,(d'$rkZ7%!E:o('Q;39e"+pM3]_[;%=X7OpVSY5UK.F]#mk5Ae,VPsV:j
%,sRdT;2[kbZe]*Zalh@4-,195G<$jsH@tX"[2.j=9"k"9#Q)85IfGX#-VQ&GL4iB0Nc[Wc'7S-h+=:[?VCCmPg8+S;`oS>p_58bD
%B(N"W?oiTmhs'^kT54d3#.sEB30i'"Nn%)k2L:AE2#YPKk!4r@/R#dZGGj8SY/R(1A7k8S%&/6E6$05qM#U=AdEEr+fgPj&S*2QW
%#?,IRh)_J.2;a=an29A>`[O^_kffRQs3%+XYlJ+kOfsZtMH:i?L8BsYGd&QbLLIFo)@t+19og8V$nJ+C@#g;'C:DST^Pm1r?nbS2
%jDBg"c$r>Eq<MOsdGM,cLAGInMrOpjZq4UEoC+G<*%-Aog#>!]$@(R^`G=mpB5?Q"YDq#p6(U4t32oBnT@&AA1EM%Q'iQOn[kNT`
%m<Ve1<bE\hQ-Z8^jp\R@PP7bUbr4[?M(Yho/k96#WR0U9_2/-5qFMm+\Re"fd2\n=1sE%X?aR9#leW?g9iJ,>f\O&==3\.p<YMsc
%3kDH(0lH_+ZDl04Z#gq*9.]0Y;^Xc>`1QWVNJ3q:J%uNA.8DX<lXK1_@Ar#)\MFDE,^>Q(9HDs3Cr"L?6u]iERJ7Y1k'9aH.d^q2
%:cU.U:>7=gH@u&PX[=LP+&8SKV9p<Ys'sJH\6hD@1V-NDS[8_ac7KmNn++%3[F/R9-C$ltFtf1rj>I<Id4Z>jgFd*m1GKiXR$kEj
%R;Im?3.u-gn=KSU\(^,<k'9O,!bMA^\N[0/VG4_RH0m[9;rRN0>`I?uT".%j7Yc]1Q(#tN%d3jAYHne`58.N%LK\ZA8!)k*4/R#1
%eZ-g5O;R+(FSr`+g'9)Y7En_hDa\5t(B)Fks7Nt@rYG"<m5G:>h`^[r#rJS[DkBFONUEH`??fIe<R7CW@BWmj2NIWDJcBl!g2&[m
%pjs(o4_hHqbOFCTm6'FTb6s#5g`TukDpBG4D+OPcK4-?:@%frb`W"aKfY?L>Rr<ets&SFY%l#;R&*Doq<r9'9q[Fq7r+D+H.]BbY
%+?H\l9\>juCg;.POXt#Wp@(9jbR+=F:dsFFr_mpp^iP)/r8?8:$+n'K'3IPN5PVtQp_Nd8g:l[[pk*.h?H@S7SZqUWKOdL3e;)rV
%gC*f@#@N$IpCppK5(>Esomak$%rdCkc#m\BM\8N7VXb^9#8(!,pXt#')>3k=B5[a&E>'/nCU2t<"uasc%ECj0674Su-Z85Ik5ujR
%lZ\cW(ci2<q!]Bl;#Lq)rmuTNX7PK2ZeSIKTDuMuXKmK@C@*2l2o#.kH4KrQ#lhVd!`Bg6@=LZ;MWF_^,.%`jBk!:oH=#\4.']G0
%fH1WR?_4Wo8F$5MasqrPX!)A&\Qp.Z_To#`m6_u?*A7d#V&Fj6Q<jR4\t&<RiN!q4QL!?+MTcO[12Jt>420.5Qogmhd-;YOWci`i
%,Ad`8N.2\T2j^Z2l+]uA=.M0OporB6J5@X%?$[@\?aDr<d9X-Si^>KTC:?[%QVaj<Y$FF?dr_j\LnZgW'`WSO>\UIf*TnC-#!/N"
%c&=c[48-M*^/A)/Q!Z+NfuXeGjKgc.p"PfHT`4qhLp$BMBFWr>$Ap1FV#E%0c/IkOXoENjDV%kUSc1JIni[/F][puLDN>\p/_HID
%+%4ZA'eJNpK:'&u]L"_,biO/5Qo.4D8N_IQ7e8JmlC6Bh+oEnQ)QSudi2d*s-\Nko2&krV<W&Aoqd<Ll7]63uDW>Q?+-nc2rR&QN
%&55$'f/%d5GVX(@=P>*r*LBX<=pO*Q"r\0Sf8[=BO$+c!A<)o*e^$]@MWuUJmg*nXDI$ts1^h_F"")Ki;qS4\c3Dh*W3G1I$p$^=
%PB522"H@`*;2e..0iVpI];d2A`@e4)M^2>?2T,a&4ji1_[9cYScX*O*=1jiB$Dg&'>r\eVqGF`l+2O4X3E@7_$ObL&s.irfedF%<
%Hbh2%W#dXJQ:j-!oo\Io6DN.M<r3JjMO5LElI$J#fIaQ;rPD^H/c1]q%1A_A-gDInNQXUd"hlJ*KgkhT%+(tsnNJlCC=JrejOnT[
%gE"SG=m4#QqT,CDh+5]WaM,;fiG19%NfdrZ[O`rIFL0]t<UCg,/hj]IhsX%JW;A(p*(>AO$X<9n^O"=A2Yt0e1G;Dr.kh>/W!,Q*
%kk#8$Rj4gF[ej(S4-p#i7]p\AJSYb9+DN"b%Jh(VKY3q]BmYB-)P+@?q"&[8I8Xo'7%HWM2sfk*Fsf$-j)0IZe#WI_^aa<9e`$U%
%g@WAH`Z9UNok%%>r[[>)^S5=p]GlQ'fkV_rbsj35o_RD;Kj<Hr9s84EBn!UNdS=B#Cl7)!(NkiLphL(^O3k)=qMbP5VqT>IO?Q3d
%ke'1ScT]k1M*Rj7MRHq[*M\)=qR`r\k7qR]TP0%92RSPU5umHE^[8W)"/[skqJq'&24mtIcl'I_>.'22f4+uiN<<<%.ZM#$AZ[N^
%q[ni?<h1Z\)pCpJ&n2@8bDqrfm9``"KC8\ERWJ<kQO3K90Bb9\dibShG$4dd!NS's*Dch$htS/_`>Nca'VD5%'%s*[:cq./W&/El
%CDVWKiSa@8nb6$]s/LAWnZln9EBZpeSN:k!e<E+3Al3m/Mj!0WCHRD*)m/sCX!t"sjZn]SX>S_S\I'Wtm;>(eB8BDnq/s<Qs'7/o
%]?pMQ=Kh.Ws0#)08XHDW>7H%Td:*1m8#5VtqYVhC2[5U:UO?Fp<39/NAUB)V,uYl:Gb"(GSEjp\V'=&1DPGd"`aX"^M+t#:?E=eM
%2<A?W.s@^fL[UBTNb,^=?[g$AHpa*:1Jr<K3GV*.Q<Dko5J0I(@HgYF`G+K$04$WM_a]KViac3ZF-_<_:PrVd#D;.iBo47\Jj"X=
%eqd40=Hg>0W6GAZo^5Kjm9MP0-SS:3,Kd9bW]%gg2k6?I`_$e;7M-?i':2p>Z/DF(d6?5tS[Jp;^)f$P6U[+Sasif7`M@I5)VqKW
%pq$XGeH/?kZJ9&7LFU@SKFpX=<j*?i."UMG<>YHS-/4toHW5jY<RSlZe-GfHE8nd$2K)Ni@7'UD&[TF@UPbTP=uFiGHj*(XMA8Xb
%GGPkWZIMuKm]EW?`Xc1S(pDY)nPWLPo5BPB`PVN9"EY*sid0S,r8IOdr@\P4?e1<f!Wnp1qm7Nk;(K6oOO^;W\k:*^-#U$</q755
%dA<XL]71lE7qeBU7fTcO*t0mXC&-'-j[J\B%B]?gBp$#\`#`T*q9*OIU6d@%`M61Wd#2:'B4d]<A4S[WAq,GbNS%2Xb=Yf8]md:i
%kHpVROPQ-q(Q6>qLtl?7[So]4Bt!TAU/N.*Q-63XR5Le2:3X'MA"gD=@4[.NdE3Fq-q[dlJR]J5?s$"F&YCXA:o\LAX%]c)q\)i4
%BF_/7([eaoUnu(edTt:YWuK:+CQ^[g1'[&A]l<PS;!u11WB3N#nG?8+<a$0XAH*)l27i69Z$)X&@MH@`\[8*H@a#E?6:KD!?K8,P
%jiY\%$Vk.Ym$0D18ZEZ3/6M:Z2)Wg2)6k[ARU)r@LD:Ee3Ga&GiWG+]*Q/8BOLq6+[pElp)mDW-l=r5`j=-H&kO%\e&pq0"0t(F,
%TsT*aB>pnt0J4UP+A?9Y0m6Ds;B&d.f*G,u[8+(%q[-oR$e8Fo.qKS*oc$WMA/`<2$s9jiajD,K_5eD\/(SAaLDB,`nD]]7b_gE%
%9d[jpAO5>QNP:iJ7EZ^_%"l8a1HV:gY#p<H'rlE2=';i1$uRF2YQG_BY"O@M8(NTYW0:u*GLZ]YV?C1>7[NOA^.&j792,m8LpSEt
%C"8@dKkX2ck0[nD?`Z1VBKoh%dlhQG*Fd-2]toPqPBPMjomg>m]p_s^Uk.:+X37lEZRYf$Y:bP.)mEh!,@h&f_U?mO6*4iF]rGTs
%>L,UOhK]holHrVFKr(M-mU4-8-$--9i>We8bg4`9YlE-7OQu$Z;667mlqM[pdBceLI5bLGV2+I$?0-^nDu:V5pS7.j,YPFh`Rt:d
%,&MP)F^,LdeQ+gsI7Q8IoXjm5(VL!K0)pg"Lnqc5lf)6%CKJM?b>Fbmc_OXU`.$KsEQU>99DC#!:eFEH;>uIKcTBD6J18]c[r>8m
%,%0*W03=1QY3QFG`hC2B8)7pX1TI7--/%h)L=4dC)SjKfs%SNZr$])&]#sXXALl;;+1CY,)UVp/eiu3NST:FXN=)mi0#W+2!_cXR
%p?raq3fdGJFC[b:<a,aoo`b&[k^-R4$e6<tO^HjoHK7q;Z1,3B#fD.=r&]o-n+NF$!U2#>>D9$4^q[*cE2%!q7]XmLna?fq^_[AT
%Yp@ZtrX8Z_&unBS#4lA,$dC1$mPc3:_AG-L21@U<_lH/Oi13o:=nRXhY;r`rV?#tt$ggmCTLQ+=BO0QhT&L;Q'2ejqCY_HmP[UR$
%iPC?#9?@cInh;;0N;,\\p'TElgs+KE42K=`O01<j7+$FeJp+<*Jje"]DWC;6/`'JC`K5OY@rg3,rDi79F*+ZHD'gI9`MIX^g>N:_
%NTeOHko*')=1+G<0B7msX2!!:BW/fAgE=bUY?^i*/$I[/G3urs^5U2W[li(uV7nP5)l:(6T`B*o5GZF6B=1l#&f#2LT\?CE<F^\"
%UD-?S)_F(S=8'ZXQu#X7!qsq@We4OsJ5t^kT+)^;4D$2c-$Ee9[5.3W,8(TOVZX/iX8V8GHuOAZW]$;4+@i]BWN8M9D*o4$lBqR.
%3Q.GA30fQ1,,DMj0#$$5qt2?J,LNhO/$&K3p>d%D/@rD64qBU,Xh*Y2(p_miWj;@rDUf4Q/R,0W?n#+b409E7X!D%>4rbU!Oh'A4
%p'L>l<C!\%.eHfSHa,<JZTU\Vj!^.m[i"oCD6bbj+l/XeqO2^ekP28r2jm#b2*BLVA[9`E=)s2#<UJR-(N8Q6/[pdOF-,bO4:tEA
%3$q:s3;>R"oHpnejO06oYHAp]I<EUmdQ&ORY,*XllEGFj:)ibOja':ch^[-&8tT4O28i&-kcC#U34Yp*OAX//AX.#dp.;[,>Q#Rb
%s)6U])51+fRSWu5:@em1ar"'K![u!`HW+fA`HHF"+h"\Q_p+aC^b*HI[a($:bW4#C*diFLpAW1Oe`qq/(\WKpV2b09p>u+m=mO@k
%b+6NILRX9<Z$5)Pqg?T!\$H!VqroWofui`LLTf:@K:60#Z<d]UVW6GfN*c<Mq/"Hg^V9QHph5(mZ-uqG]sO*!Re>4e4'b_K7=X@a
%q4$452((H?CcluH.i4*ScVeoQeiuKTI^q5Cid]\MQ[aD=E'>j*Q7gq(^!b27s8;Ccn(s^8G4*-&psFKa*i^Z])D=i@WSR<d;ub[C
%cX0:7S&KThCSg,n^94YF<5,N=oSSurbDUFob5?G]'WPU?<V[,W;Ek'UhVW"L2a=C6DOgG[ci$Y:eg'&oP\]FLch4\Y&)VFpd-0?K
%\$L!iq!#W@nkOVrcGicOj*p63l!B9,i^:+;J82qCo8dZk2>>Ank.,QG\lP9++$AD)^%hQrqW>])Q-F"3kio\qpWciU[H[qpe9JWK
%\pM`'2N?guheh0K^=)fMU;#$FHhMEXqtS@-[!VT+-Shp1^A?jEL2+BOG@/rpXkL\9a%p$D0)LuBShthE\T_eT]!WRMn\pA78_2$;
%HLINir.gF7hDXXLNQpQ7%'o]oao'Rr[*eO?00'ObGN[O9GLl2qhc^Fobh#\Jq<Zpal>O,G4^NJ:s1Dg3h##7X5&JOF92E5kpMa4u
%HgeX,/aTL8)]&n=;CnL0lFVfHp"lb?Ecpb8jj)m^?*)&`5C?s?=:qLO34ZZ]Y[8G9XfTK+XhEV<aieTTDLL]tXH1pB8FQlEn^FC?
%McTZ,foqfMq^60[ocLBPZ-edf#'tV8Y,DOsD7ks)po9cjc9F>);N\jNpWc8(Qut>)J'T,'PP:hQ3\(/S>WuGBq/`T?I<^7Z4*g^8
%m<SO&C$Fioeh?FJYIuD+=Z2.&aoD5-*dgre[.WDTZ[qHh0"dX[I_/G+JnD:b>R]?,G5:cLX3S9jkZ/K@5J=Q&SrXL^L2+/Wc,]92
%S.@8&leV")>A*'Jqe'`0!k6SM?j%Q'52Kt.hib[PZVJ,=F;5m&,R)`"5(58SYEYO=L@N,dJcBO*%8Q,dGLBf)4mLoV*PLYId_2%c
%:"&]DoKRHd+EiE!m:W\$8p8bC+H.fA%lt)fkMF%QXV543;*!ob(QE,.af9.`mh+4n]A'1B(FG?V[AE=,S?af+jddKB2:_hV<.i)\
%QS2!Yh_ne@2G[Z_LACD9?J2DeIUnm(@iVp9Rbj8&MR_9qII_+4q9cl'M+0`fd#MeC]R;LN6!\E[:taL@l,rmH]"Q4+2>Cmj^YQGI
%&r)HKS_&]^=l&>M:H'6+L<!9VdcZ$oiSMk$`Rek3o&(/CoYCS9frN.h?@7&BC-DFq3mEDocL!gLmN:%698DD3Pa<=bjsut;l,2[j
%l0).ED#N2;::7AB]_MQXX?AJM^;qA[Cb<)&>EoHMap/dY6+Bq,q"[2)^a;[[b16-:cOY4c=$Cn33bW[Xd;j0*cTr:0FSpd_8&`p"
%O,#<cL1k[+i->4AJ$?Dmqt%nYQB4TIb,;(khm=]gTMddV\9#q4!<q89?u!5"M8'B0^]G>+b!S@B"O$(RHY`/Mp&mGIc$Pi;+7;@B
%qS]_n?V?04l`JE$j%UP^]7WP4atI*c?`L2E\I7c-N17.D/RJG?eb\&jo7^&[nbT=6WZO?=4EB$1SLj[8cX.][-f<dHlj%b&DcmJB
%^MTFoS%J"]do2?Mo8+'MX?89Tk;T#)lmYo/J&I7#%"I(u%CsTpAA<GG]@Ir!lP'!&XC2dI%8Nq1[T)eQV=K1[r2I#V7Fk:&@sLJb
%ZE=Wfoi_seeR4(lNHNqPVt,aG<Wnnuce?;UJ_U7!&oS2!b'D!=@0[er[`YPJC)Dq@04CW^C1Y/;:.(2"HAAee<q3APO_:[QH!tM0
%n&X)5l5SC_LTF-[2/AEq21eW-*8fP(OVeD'-8?A8,O@'PS2%ml9(.liN%aiS,:0DI<fMWEoDsB/-$WK$$Z@m!8b0i9<PQP:Q73k8
%A-35.9"pP&,UGD3AnZZWiOlH6,^SO.iYi3nAbBhJb!Itk)kSB8Q//a?ds.`KB2a6%rgKccN/a9V6uKB*IB%se'unNIAPALlfu/<<
%7_#D:gf.B_1:hbCRl'+sTjbWp,(P(jM*K85L5\,Q8$=;!CeWh`>E^qK<ZZL:\Zj,'i^4i6ot>Rg;c)XAm!'Z^9<HXYl.J]`3+$hA
%lUU4'h9/i1h)$dXRdIZQA*=\PhBNfZi6C%\jg]g4BRSF`^[l^9h1t0&D-OSIC^ac%,e$XX*""Oj)n8`IX7Bc+Gr%h?d(J0'*eI+r
%n9O5@b?t4T>:J5ApKt.1K$MeS[XE[@K(]Sihca2GFilA0rH)^1)okh?TQU%<FP,K]gj6WF4Kndm=]l9u3b$ETYb8F;]S<!'7mBXn
%RiD7KZAG]d9<E,?Ru5dbc7?.br70NUK9H8r`Bj;gpX/^d![[U:f:C@5pM\E5Nna8NmUEf;(Nj5WE7`ipV>Nt`DCp`ID_8-K="oh*
%Cb:a;n%\f>]e#eikoDB8p-41$^%HH1)rnALp[cqIV4h*>W.s`+Pb94AHmAWaZr\^VG^mBZpu*g.SmK^5Ja*'QKPl)3h=hHFD/A$k
%17M_\pTXHnO[=VZWSO_:L\F>#%\B!4Q56(^)W'+B^OlQrpMfa%n]/o9`mZ:cnTa;(V/93b5l-BR[9H+k7`Ss;3?&$ue\6fFL0ZG/
%Z&Fj3%,5hcGfn!2c%GuX:#'ulm=Du1+AE:uU6h@b;Z1Usqsi.>]`$5BKjFSAAQ[^4X!HL[G8@n<p+WbID2F.b^F>ehICp"m]2H'Q
%l<AWcZL'1q#pEAZhpriR%%CUQjkJBWpF9CL_09ZI]F9H!X=`:9rZ(^@h%q#Kp=FkbO-d%[8&4'C>j9N!_fqC:6='LTaaEu:iEm!g
%p5Rmp-QTUY:-'c(:DYuKS*+/HX?:sCI=*U,lY@)eZ1rA"imhNmr:a";jBY'TbdWQ>lcC1?#O*or<pH#G"4rdhf\rHe?N`<A)7A@D
%eZf/JRSMj;n]g*,n#AT@%7gEolH>64@>fD[7jl#P3o$n<J?aCJ[FX6l$/%;B6$P.LYTado;t^IGC!Y(O"#eTd)c3e9c*o1L39k?$
%GKc9De[H'I`2R@Zc+C$SKDcmgUUSd7:r>oSW-haWTfLGcUomJ(3maMMXL(cYac.a-*f4T)WTBYi[cW7UH6sSs=*d\,EMC@5e!RKF
%VstW3FCemq\QUGoT<-(/5CS$F-CMaj5j7X!BtU]tI*T;;a6'Aq@SeZue<e`f?N7NsCY"Vl\'iuh]nmk`9:_^B7X=gIlFQ3-LXG[<
%o^+_`BeOA[G54_2:>\9UETOYf0)(ssZDO$7YFUZdJc,ndqk1FkplTbmQ7sV5-rAe!HU!/UQ1mK^X/F9>cIQ&\<%'2u^\JX04@)1g
%Y2X5T+2-ir3*FSfU;f<3kPI+R_b[>pW3`tVC^fdhY&b+.X8MPPeQl1is/rnZ"=rB9qch*1lYH=gW/M5GXi:"76-3CcIGV!k2]!*-
%<:%jlS%A[f)W(.6bHKfgNcs#o5))_pk-*%5GF-04C&_T:lUp2AE!iB>rXk/"Z$Q3AoOJj#B(ln)/RR@8N`XPnPI4RiIpTu_TA<ZM
%q5b@25N$bq9#4*^XCseI[hrU/b\3mph>b#bR;[igM8,H+]/u=Q+dZGMo]r?5k,!&)6?D\=Hb-NWEIG5.RVCpDEboQbW#rZd58m^_
%'j7Nf:O]1!Hs/!=iMVHrc,dLF*L3\f7PhOj(tR]m`qmj7RjK(2WbbS=`(i7_e3887a]!Xg3]L=CR21m2^!4Q\=2"9lb$<JDk'bn=
%I(f@DR5>jGZ/57kNS<Rd:@2G=_g-1n;ksB[hAo]lN&R$t(XI9Bk?f_;fKbH%Z3]I`dT_-F^N<XC]D'kG=$";p0Tm?8'Ido0,.5mu
%NO&;(D;kKL0ada1f#dK\Nc(0S[KT/3mN5Jiml`W5%Ng2RqY$[k@rBJ3QYuQ,:,X0<6T$Bt*o!;[7n4*XBHm%a8(-4QSQ`:7luJ@B
%If2#i8tOq@CmMeemC9l_hSDg0n]6u57c*"kU9o&Bo#$*dd.tCq$#FJr6]9m6:rU,t_GY1>8=FD":HNmslsbD1Ba9]U2OZ5X5mE<^
%j5OMI`J4!Smb?o#^,QXEnJ^/3)O:-X(KSf"c>2((CpiL1o[_d,5/'8e.5:,BpL"6r.9&-)bi$e4b/23tId,raZVG7`o($q:>e^[`
%[1a'agH6n_]o+\CNO_Z!Im8/!Pa,l'>l?j8h>U88%::s8-]]0eiU6I.>,B_bh.8e"K[?@ti.9h/lcnNEjd.XPQFRH;]fB>tCmh3m
%Q'Ke6>qrAJk@#Mn>5"Oe8l%CY\W0nNWA`p;Wi3JC!58!s!#9:Sr,UsQ3k>q[Bl.jos08kIoT*G=>:5[tNttIBkJ"or647Cer>k%\
%Z[gE1+3cJ.%B+d;IhTk0lZ7n-]XT%a/+YihV==E+l[+ofri<rZ>fQk.o0,3>[l6K2C/W(&&cAHk/p7e.ndk2+QJgZ`lYB/4L$WQY
%e:VU[14OjQ>BY=uh7G'qo,DVWk'JI_;5]f'r\AeXT@b:%$srci]UHao%;Xqp.$KD]n3n?Veh9\`o=[Y9CN\0lA^W4jKi_"Ll*p]:
%:(VBWXE*uQqoe]gp=B:tk$gR_pNJ,p5m5d-1])hGFYXoi>CTX*m[^NniI0uC[O[CS(-Sm^S2o59X>eh#j_>L\hSnZ&hM\k-=6ci2
%AlVkJn#Ceb>12V4hPm,Jk$N"]FJP>G^A2d[s3N;;Soda'L=5Y\So%`h%=SijCAiG@Vjs>n]j]I(\(@YZlC5Kcdc',dQ!RkRDL(EN
%d=ZRXit@g5oIAa*c%X';K"[F,FEDB6Wpeff*ckb'"CZYf[WU#I^,2S>d=_1#\#S>0mVZ8nIR)J#.;?^IH1q(:%!R?B!@4V+$(0]e
%(RWZ](s(m$IY'Soo3*cp9UYnD55\6&0^(nDc<pa_6EhU\>Ba-/E]sJG>23k1r:mP3?J_Zrl'Gc$cWBTuFbcSOQ($5rAhe/q+7.bp
%<PQ?0eI9'52p8^j/_od-3_J:=l-5u5=>O`Z-<8>E#(:"EoCc?s=pT#]CoJGW]`*(0W-nVW?)".Jnne:='rWM-#$DCS`q,dh1G1l/
%>4H%8I/9LWcg/@45H,V]Mp$E(NGj_f0I"2#rlV^jLNoQc3&rnj6H]QX_5W`jLC`.5q>TJr.G4(]0b+3m]q+GDp"mQ@]B,A4^A]ZR
%CZ"Q[6/t%Ymg^o'V]F,0?^ABjPJ%3H5K@\0fR5o4?9.G'?)jtjN/mND4cdjS=P8LY_`k0QlV$CA<4KHOr@'`&Z?:1eH=&jW+#FV!
%9I_cj^Z<8V<E;45>AQ8Qq>lX42pX^lrN)7Wf/kLdH@rZo:%Z)jAp@.TD,r=4NuH2!J'Hi-[Q^8MCe9s?.rko:s0.)j<OEMl(%7mK
%A=I9ehJ)kZr1i`,QRh/`M&gNK!Aifq;Rt4*]n.!lBOTq1F_rQc>7r4-5hR.fNp8)2KPSSpkaT1'mQq*;CprUZjYNVlirVaFigu1B
%mqq<^^&-W4qK(VIDQL+42]f-hDCp=n\-(VlQcc/Jq?p?a0+I9TV`u9:.%bmC%Ue!RID5[M\FZ7?9KA)eoY)<<fX(>UeG3#(T%AD^
%r#$>>cTkpRr40Yt,[IG$S,#6?eXH5U^V1+Tp?c=#cCB[Gop^TQnr#T-#3CCPm[2kCT;O!D6<*)jrKRM*=VrHeo&.u"X*iY#qNs:3
%1*,8Wk2-HkX*h9;.!E=i?@H&`PR(Yf_8ED/i9n'^n%!i\g5@Ub/'!S:<g)6/6:Y8I`)<`OqS%5u??q?>k^h;u8YG*\QeFZNb8<"?
%=8pqKGY^Et<iTQh7J5IeeHOZ=q[M2tY::'lk:4e2jh;%E;"*ihb:apoF(s1Lrr&tQa^Ufp-+p^Y`UN!F#<;S#BZR;i54YoVqWbPd
%60W(35DG_C*B)p#9@ZqP'NJ,u3#-eS[(=!Jp$ILkg,Uq3?dHGikSH3pXtL/tTK;f40G,7>^p@XLDH.`omrh[/;t8.cn=AaUBUj?<
%9-6B$>BcAkQHre.lM^5=I2<h!*&EmtR%''sT-*(*H2OW7ZY\E(C9])B]sIOUKIt+'?.]Ru4kW;Kl^V\h^Sh*tfCCIdY>a(`f5,be
%1/%-dU(7!a]]=LJ_j7r$n,"9Qn>;<lJc>9+;A5,Y_^icE?7qWQMiu.Vl?$/,'tkMBqi+?,.O>]4rEiIp1g1^??GBTX&*-_FEFX!d
%F]#qu>j,2,eI8bEBqN=Z/p$e/%,T5*2gJ>V7;;=JK$=!q+oJMc(/-5,Yig'7/u#s*s8LV4.pXhF$G.n0,4M+fM>Q[8)-H$tO.eDn
%_)R2/De5q)D!3UfoY[7WqX>:ZU=9d9-fobXLqg!Ts$7o(O3Ee5?Xcn3j">h#BK,q&qFUZ(Fp%ou<bS-4s&\h%^T\CV+Z.LROVWJo
%B]$$#$rC'u4N@RU1lAa1l&]%i9ued6n7r)07F1]*!i6af7G"pa-L)?XqqAE7JIR7/Q*cH51de1>0NpJf75GZI`D)5.p_X.M1d%_P
%1T\HV#F$4KFBFS@*n4VR-@l1RMOs(<U/'*Z*EU;:U(c5rCDDOdrf]h"LS%8PT[b)nr,Z6qE%Sc%!uutT71![N92r;sd8Shr(lu9s
%op+nZD;-aS)3MT^@+tE7[(pd+a=1:pBk!HG]4cMVWK!*Y'eK[E6L0Z*RP(54Ulmc-O^PP:!m>1*MMdlKhl.*:Xppr;8p6#@.@Yi*
%QL!`OHkC[BZ:@/6I*^7f(Bc.*I>>7'5`$OZ,o)o,,/IsS"BOnh,S`O8cGd-sh4b@1PFONSFLuD"R\7L([S=fm"Hm.lF9sLPS</tV
%J^dGm:$;U06_?91?Z]--C*XOkeZN<1:dn8:Pi>sSMA&6h$VJ#b.Q2[u-,oE5"5>.V?pNB7).jX9b=Q(W2Lpi'6(tm*`j$^%TrB3<
%H*m,Zj.F4c>C&jW7b[Q1N?Z20h#p`[PQV^W.DCM+">DbDdnB=h&X^P!$'lceR"=Ope3u+B.Z0,W;i60&=ukgZ,63S+4ARWq(87L/
%SYX,9jU,#4<"p'/.F+bNEFWje9*klpVpeI'Joj5na?U>:%]LX#8"N[SAH\l"B\@rCe;n_aV5Q(O[mF(F'h-)9MJq>rTaSet!*U9X
%DUEToILTShB_nF+^^u1Hnm#3(V?Bkq5qq=$O7>Tb!;'>hTYs*AU$_ua1ksY\^oM<u>!Z*l?qh8K$DFjW<&RNL'0IOCNP!!8@/NjI
%paFp0kd!DAc(YFMOJ!`Vcj&7c:h]_eAAc@T=hdka.@PhL'du'R@Slq*>&OhSDs\`fASMCbWX*E6,GuYfY<le&'fjB*MI53PJ]jXr
%K`869U>boa>mXp6/?kZN$??9-IYa(#nd.m]!,1rs:t.!"JaXB\3QhT.&`C-m>(PV0T[psk-^?.dO9*NI+f5fKW<,NK'J79jP1??Z
%d'Zj_Sj_*?b6<ejC2'GV]EhDUnQJNM<NE,<4Anua0d3G;>-C8(!u3i<7Z-)V/GN$cE1jNp=cfR#@NW)e/LSmfi#VMs\h*Utb\l;F
%M(JECb\l#?e@8%;P6Fr]%'h'(&R).87H5(6`Boa<jE*(LY#FuW+Aa9D"t\Gf9m\"9/WXV8M&lp)Y`N:08.UAe<<O(ONBm+WOQ@a'
%P*eR,V/eJM[].BA(e?D#:BiKZ:#?DaQZ6Z_f*9kB)NGI\&GLi)C26)mqp<h9f]lQc,=ta710k_S8r^$AZr2pg00t7#>Ye?S[qM1q
%:.mm[;ME9E.;FHg,c<sLJ>TRQlur^2a9C%NW<9m@X-uIR:f,-H2mK"rK$A*l)AEbUY#&5tIB]LQ3IkKFM)//_.j4Pf>6OcL$VHD^
%a=2qrX&.J78PZOQi\rk6g]6IU(`3$R&1EqSXq/G0L)L15bI3#@dbquOCtM]-"L+E.5tKLV7.d<AQBP3!M(+*WW^+rk6;+VGA5u`(
%YVQ^tPT!B)Sf(</T]G)FWmD<kj-GI=U-$.J2986/'c0Sr=toIt/?$X`bCZ-6WnnS%hh"tJWh:(@7M$`@+Bks8AHNZ-a[V0F=;H:3
%4r\ji6XdEk\HM4*n7$_O$p[n+\0_:j6>r>-$"2d5E3kV"TF;5K:.5Sad"7*G.MWMDM^rLT3a+h:qhFE7EWdTZ.TEcN;%l'f=H0r.
%"@9=e^eM^fJY^?<7p(p?*$#@kd!9&-n=gu*9IP#tK?8%9giB*-#ZdLKT+dA2he$T1`u+[nllF_4BLOL,DgW*+8s3YZFpcEI&sAEO
%2"0rC0l35mI_bpa<iKqTF_SWj`u.G+&69\W<rrR\m7/<9VCB!)#j?g\2aP\eE]u\8%cU,sN\U5b#WfCi.ghF\#(]O4@&.[lb!m#$
%P*\#[Z'`<nb`s0=.Bm+tg_VE8%+]OGOd&7f:l-Ks&8aj0:&n9CR40:1s-ss`b.a.j#bl'6@,*_.8huLh1UXb=b6HXf$'af6KP%*C
%dbkh!2*E6%0*ejj[;M(cW%'3>X,<F!BY=b<%92C6)_$5i0*[bP4$^?mmCDHbh"u$B54<fL!skrSBQMO5ii$>f(L-#7Tm0\H*A]*W
%<%XE-88A3\pt&m]Gc5sh6!X1&>Eg66C$cV$/QFV6954Bh*o6nXb63t7&$LYCUEomp1IJBY2%1D]o=:d8TN"3f$5uL&D\m-LY1u;U
%G:Y0lh6qt\_._p5<p`j3'gG:8;bh65KZsr(UsiP`e<=ab63.1lA$BnWL7dZB<+<#jKppI0PaH+\g/3u_&l*@F;L,P_7=rq0$*;j[
%81K(OS;R[VioM,VPuq8;b6LEdS)OE7eZRk-c)lUram3oY*p?S`KgTd1>%@V'SHl$W?5Sp'@p',D"Jea7Y\GeaWYeD'6EFp1hr4pr
%JZQO;:>sRKegkHXP')anC'CE3==YghZ)5slan"a(56icT`<Iq<8MO4*77B!]7DV_'k<`i50S;K:*_0!u/F6R=>f#u@T.)dM+;d8A
%+L!uY:_`$M#H=2aPLq39(^=/@)qSG$5@5ZQXdm24SV3fu-cL?^-VuelmA--%#"YD^$!RZ\pg0'S5K2,C;,iK'V's?Te4laW[UYV:
%8Z9um/=e!$<8A6'XeZX72eg"d%LKp%%fA$6,6<b/kNGAc@"sk!#UuWS78_H]8l>(L.jnU8)VgZTMb<.=+\=Cg3CQ@m.7M?RRWI=5
%Ns6G$;3jK_5,^f8nO<O[He;ER0)O&i4i]M?#<rJ2<Wl>5pX0m`6(D\o_tH6S3t.XRkHHP75g`E6%6RGW@9L#.'+.V:TgY%A&D^BM
%)Y<^u+a"mH#i#$)L52<//Ve8<Y]Ds!9Hfl):n]l=d)fm>CY8AukR>LCM!+Z:\IM_"DIN.os70FM,hZ!Al;5i&5)+\<<!8#%cluSZ
%m4<p>))s>)*LBcX9,"[WQZEpET#LTUE,B]RqaK/0=BZLgLSDd4;[aZ)[)5o<o.%dsLAQ.IT3"%+1Yftf51_@CCo.=/$9p1d#:Fr>
%=h\J2LIZ9>`%1;;k<SJTJM+DE<T4j?38HnNb.=?@TfB?\70FE2l*q4G_$WRD>ZFN+UnU=$lKV9GcaC(n?#3F&Rm%G?!*46n>p-ae
%It920;MDh`2ZQd)Q_HfEdICbQ.$c\V^JqKXJ8@<?c#hVJ5ktO+=;b@eEAL8!3B8'^Z7GZj$)aTk,%gTg7l_llpG0Y,RGf:4E[57C
%)m=9S'&R9K_3sBj*A4t..0N@]-Y-;O6mTU=E,?qb'%5(o'P`7TL(5Lu%]n4]T8$Cs$:L4d=\agLUdcJQJu;Gt93SboA/FS>gB2Mf
%a=]%22Y7m9]<KTVCn1q9]4f*^ZqE]aA4)G*f&eeU4sZ:!-3Y&I?#jekB_eeuZnCV(jBuLjXuP4d-!)+HAfRJ(3bajLZ5EnV)5j'/
%Vk]YMW)oOsOosCuWGU5NmVp8_L\eUC$BtfAlpAP.oVo6kS[Bm\"u^R/C+b$f`(iS==^-jKk(5.^bQ(4o5kMEX9!2S&Q,"Q+CV\NP
%$)ui$(78-__ZUcl#<]1s_S]g"LFKc,5UiP6Jih2X:F#L!,.Oib2ke1s_1bUnLHZP!\>kURA!(IXLiZ,C>Yq>c)/#LA+,[)9du4sk
%N!%5(K?UF7cJ_9fg<"("GW"e(2C5e>VQfU\!\i/0Mbdh:cra*J6U:pM))+TF$5,U!&^1b]KBS_V7"L5TCE`:7q#POQ>C?$<:F0J+
%SYJH`XqB$4(b(-,OcWM'Fp=^<LS'I."ZPAbAmE&HE]rbBhrL='2O@[&au()3!LW8Y8S/no"(_m?[LN\7!E>"pBm,1skbk_mBf5,e
%fHnD'4u:V_Whdg#lNh7D=d;+u8tC<?SJbuZ/Z"N#7N>@+o;mmLYH6chUqEGb5%LpM<+++!kFno?nqt^OgGM,<Y8!^D!tl=M`nZ1I
%LP-M-irL@-TLq@0C8V6?I4Q:*b,^-$P7WETGn"U&/Loj>oO(=LVcT>"8lSu&.!2m.T6ndh@DYF<\KW?(OA8XBXOV$8I]0iHerh`f
%<*n$$2u7f^3o\7@#T@\l,Ys`SVb\1c2sE,iN+8M2%u\r*;X30hqh-FJXJQ$YBJN.Gf84#-dj*=p'oi+J68.8d]j1hP"L3UVAs`t'
%B>u[j4FC3_Nl8gdTNW=hBiu@uN^(mhJU2jRl'NBbKp)lYXU[Q$$^;^"*PN8uZt9?hic_X3R[/UejBA7Z;,io(9s.m%BS<P7Mo%D(
%_Aq+._ZJ=.=B/WBh@<8$6Y7s786OWd],D+8_:/K12st3R)`peQdA*>Lj&s4no$#J)L:"/75jPgh#QU8E):A9%WrX]15:bT?jOF5F
%SY(&Z+<rp34,uNUhLG1J!7fARgBLgT'%6@VXN,R[#anH3*sYU>9fk@b:naR+60F;]&LH.BSet&C*`YtZ#s7ii;+S<i,#DD8R5I[[
%_8_'e_aqHB8k^:+;U#J9;.9=_'Eu*;-ZC)Co"`8iZh1d1bCSif2P3((B*.5T,F5f*V+[,J\<ZQ/cpZg_F,^;TAr4+YO9OlUb7W;U
%9+QFD]Fbs+P';l7NM*AB6R+6%aa63S\!Af;q./@gb.'DfqMLDMA]CjKXSY_k=bD[O14acVT1=O?j)#Gs#")KX4dR8T$H^9G$2G1>
%KX?)H!Y)s;#l-e276G`PctdYA8I2gWVhA*5;j`"q:r-linD`pXjMVO%1!f[`'6n-$S^"ZS3R#>K*'ClAWkoDB-g20[@l&(e\5`9i
%)pbB48H7CCCPu4tH9ed4=^5B/go==4)mes)NkSOCD`24_e',DVBP-.Qbd],_nku<qJ!kFT1ZLr;H4>BNa'lqLbN=5qY?2#!+bOE1
%gcAGmbJUOphpi9a"K>4M8"B-;.Mb56iJ,-)?1!ZI^t@7Hd$P<_Z]Ut72DT5/Op%PF'0,&m]mtBJfGlYV]68Q\e..(tDqfhLA1Cg"
%)"Hoo*Z$On7!(eF)?^FWW1ut,@4a8hbTRAB^*W_Q/'8\=.a&]2;Nho+eWnXc>HT2(`2[%@=a+\gDP[iR^m]8hFi8u9e]Os$[TRfo
%e']d;?^a[qMoJ.\ODQ<r)ON`?b`Q'c^eE[tRc5&Y_PSJ&Kd$a^'lcA<dUR,>MC0UVVX\Y)k%Y9e5]i!hasf3Na:V+(ZVdsIrAW6#
%1!k3hFeLX+TLYZ=69[V=Qldm5<-Ic6"t/aGpse5QO!3rf*A<7B$V"t]1*HO23QQMXl*8Q@#"3]611X"r2eBroN=;4Q;+k%h=;at/
%g$qd>EDWDtVGoW5U9Lr_[F/!o!Q,7f>Vq'$15WpC9W/DB;=g/'XO47h.hTW7K01Euk''^;=W)ZTWD\f^&JEm9CMTWej'NdL.=rEG
%kcY06NUKUBL)1s6LJ'586'D.B-t/b\qX!"X6t[0?jtJL.Ag,DQ,2<lA?lUqQilR%']I?6X_>:WgT77c"*tnai!<$sIAC3tP?O;hg
%<D[ej4JHE)"@6.=R=M9F^`]'3kX)\rELCj_00t[^5&<-!MWMkU15@J,(WIJPdgVRWcC_snmhFFEoE-9i\e02-a3'rD$*:Du;G!`V
%e`^b6$9:gM]ZSmVbS\nN!O"9>1c("I1ZWXKHtl\)CS%2#e_G6lD-"_pH=E&!4u?dY&YoX&7Q<g>D??#phW*F'm.&Ul&lhJ2gk2BL
%#o18`@'fWNN2U.M$\go-<ldR3.<u=0`MM4TP%Y&1pbolr^i6Msbh+WW<%X#rFV[a&+H.8YmO79A@=Z4X=V*fHSVqYa7NZB.Qk?ls
%$6E30S!a;NUOu':jCW!pC1cPhYV=DIJC)][UT1km+fUn"X(dETEf3f`*r_s>=^Y8E6+;(F.k:ljk?sqhZ*Jr]pROKji(-DJZ=qA4
%GR=NEXD<V5j"4+9G!KjgX2q!Uj6\-jZ%*I!Q7=>C-UNr'>)9Y>"+E%VfNB';m24XS-g[oW0_dpG=2%FW<[YM(=+f1*Z>_tbgBLFV
%;mK99Zd&\+B;9Q5V%NZ1V4I7id\EFKB?A6iA@0&XXj7?j*uV2a!p6gA!+Z5V';LAJbR20.*NcO!R;i6Ml`*5(I0;nMT5('D'c%J>
%6$Q%pm;G6?ZG5j+'^C:LA&Otk!(b%20#Di<&>36^Vf)PAGO,H%&jdu\j1]?lMhS.L2IS5jctqeFaGe)F@dImfMdmDk;,lgsE?u;6
%7dDD"a%\J@7l,id@Cuf3(ku^l+_TQH]CF,",[nBI0FZ`(.mnKY%f<2@n6.JtdEgpZqibF*R\A[c@'stbAK6%8dQa$bW`PH,Bl0TC
%*nE*+JF9elj[GASJ/C!'*)5EY0KQcPQ&.d47@?Do<).LoJ.=?i5Yk%)F2eN.Op%PtX&.>?78^=Ri]M:Zi22[n_NrWr3lm!Y&,,Kl
%qXF\'h7?S^#tB!u86!\\&7hP'AQgD)dDR,C?flgcMAi49'hO*naat3V`#n%g0H=F5J&gS6-,a0-nuAji,(/`0=85AkWalnjcFMW"
%L@fCq^ZuW2LI2a<FG?Q$H6ngb.4],\W:W\3`DK[QVQ:b-RG!\-OsZ/^YG>?icI\;KfdSMsTX$o1@ieI6U/nAh%6W`bl4b8A+<9ok
%NY,W-FG12J#=2IQB<qIU_+51aKh?p7P>[J;F-Y[H,Y1nS%6re0$DaI[0-V)F7dDBLgNBg*"[S)5Z.R>n<@oou2&_8f\>'d]j"glt
%)a#r!NPLH^g2PWI:nLHsn&[3=V5S=KqWnRH/P$!P\Q(Ba3ilp"7MFH`O9t.nb;%SK8e8VtdnM4,8nR$[M6O:,CL*KbMrs=tkOlti
%KJb#f<`X+?;-CD.1UHXuAYfB"D`9@>`FnqEkRe!b?]+sV/uU!%ATc0P$47B[1POqQ65[^[,'*=Ko#YUD'VQ*XT;8EE7N`r_7_RX]
%QDYDthFukiNBF$C6&i4W&FGQGTXq\-e@'Nk+^l\2GXjf:ge:7'V3"ud<L#9_RRF&0!%.:JWXOD\8HhWH+&j*XZVh]RAH3^5/2/TR
%i5khKWhEQE%C<>^VO%DBiHm1!^"0E:E04167IW$$GN^DF/eA7t+Wa`:@b=@/idtP@.@BN@/.j_>X<sp5Lt+mIZ4ncfR5bu)Q(sg8
%.Z'[-248(C(*uC\W"1&N0NpJ&L"1jS/*rQLZ's`&Y\l<1R.c\&]$n8j*qReIpVfQi3EA2bB!*)!nT#jDQALQ]_>cPIVjuPfA3iRH
%cE<$_N,6F2kl_Zf$ro4%XSdaH1)[*.Jf1O"Z]YW`fm*h/ne7&+A>i\"PoDG.NFGBH;sa1MG@=lR0mI.nd"ARSa4\cQSm_t!)8inu
%+tG>uh@/EB,`<[Y&5:n5UbJBXRm,]<":5HU(F'0GjHpPk##'W&aLr+a+KVc$_;nRY;\5pqU)<'M)(61ZEBT?395_s^5_rpV*'gNs
%+.odr/\3'TrkK)-cunAQFNi"=WVN)qmp^5d*kjCm18&'BL6cJI@Wl/S]&V7n9Hj$d)6H?$)<4F<90/tQ,*A;7.@-*gCfDT7R8YZ-
%(+gc/=B=^lN;R4]&t-kmV:2/MA5>jPJZCURjH:bMHO;=ZrCBmnXd>@o#t37;&2_+e8B?Y2Mkj["b;"YZT?k0IZCD$?L_YT-)M(Ge
%"H>&p,/aXXhJu"4i0Rm9/Op3O&$=nE!s/ib7-+tj!qaAAp9OT5K\g_XnZE1fU@OTp\lH;U>]t174NQbU7P^H$&fmCa-6kIpW$FDZ
%R8$.GSucH\R9=G`EoW*NU*CVEOcq.CGu*_j%EUp?UC+=VcG4#3r^I'$2VGm2q(=@c:kM:G/-=iP$U!)K9ImhL`HK![fG^-TMf&J*
%_UXH8'S4Yo+KTC.s,eC*B#@.b#^OcQ?B#ZH&*RXqpC(B31KgG9euSk25)O&G]EfMK$JQ#V)`"]h1-1Ie>ZQ<YA9KbsMC^8hg$%d7
%1;?pl_R.Pb@[X4:Z;R"MaDN=DRZT9U41ADI^6#7n!W!K]f+[CLI$R5T^ceF0IFtJ=\SD]ZN#=H?@:E\U]KSb-P1c4q2SYf^1on:>
%VWJ<#kU&0f.]3uXUdcJ)X[:;-]O0o;-Kk5!'i:u;pf/S;d#7?H"fB26*\TDg!E4q2ASk4F(5<c8VioknP6.k2QDm3cj9YVd(*A_D
%8o6.4ntc?1J'%,8,\g.hegU!!C1`U43fuO/VQilD`?(:,>GeZ#VrGumA"AnP3[5sEW8-(#E>aVCZSH^%$k&4qKZ#X]";a"m":C$Z
%(ucH*cLs,SUf&@L*6*N6d#PpiY)$Q&@-IAX2[s4=E'4+:J/bct3!5id$trqWbbS/<$tpmW4II[J6,Q5/(4ll'0`[!R"54FQ5,50.
%7Y[:@H5`2F-9LJ9M"EMLO\Imq9kK-Ib[`Js8S:MiVicgP1(rGSkJg*8SE7fg5p*dXXs#TEa6'mAo-fc-T&#l3BA[_)M$W7_FZnl(
%_ZQ:Ae<Ah1&F2.)jDh*%/?&8L(bfS?-A?.(?%Ue8Q(uE/pmW#nZsEd`Gai3n/dp[P2gukuaUs?Y9@/dXLI[.r-d;&fRM_jK6XM<\
%IN=VB-f_kU1K^4g=ENj]7CBakR$,I#>;lXo+FJX?OhftVA74n_p+1lGWWlJ84dd@+Wf>IfPP&2*.VEck$Kb3rRUse*N7?0V3Kl7_
%.qbYc*gNd/2D?BKF&n=beF\jWATT9'ORGiVd)7pSbW&p:Q`k&,)[*7=^kn[fLj-Gib_+s[(/ShFKEa5)A3ga((3;O3;$E\p5pRPW
%689;pB-SRT(4i1B,8O+g+(9H.<&l<;qd`8m6*sgI3nt[0;!\6LCXih1_S\WeF@J:gm[(NZ/:2N+U>"r6]87VClSj_:/ER"W5DIKr
%+kka]3MtNs8<:,iX/*$l-aHgs/CGD-WCLO'Q<C">P$r!7Oj6WZSWT._<;(([^l2gV=]r'e_P/VjRLAT%-+>m.m_-N58.:()jX@m>
%J1kt'0JLFU_3[17X]c'oQT5b;a//"f7odD^?obKu9te^nTNI!@P;Q?:bnirF6*s[E_T:Y8:I7fe2^.jW1ao;U6FK(WE^"\Ppiq7I
%%T-2enTa([2qmpe\kRj>a\LZgfqE,7*>hJnFG>@hAf']:dKmN*9^AA'RF@q4/KCa6=;();aEL`ASokqDrel/Z-0%"RXERc%+)K&D
%en*A.0=$-HccK_24-MkGP.1JTb/(AXqE?uD(&.]OFdS[:ZI!uBFe2nrPN&9RRLr*6G,\kpjD$dHL6rt*Wbe$U.B_e'P<c7Kag^#h
%,f-iUT*gm^\<b$L5C/3&M&QHk0s6+B7put+c29b)9bUWu1T"I=>8f1>fHi`rI8"p;2p-ll@ZFjI$SCf^6,5O9ii\cL7Y*r-BToa_
%69?2_k<2Q#>ZDY>ZP'6tbdjb%ZY!`fc,t@$SKKdGOm:#XX"$8J7N0n&N3=[_N23MNHXp6q`:ciA%HXIVC`t5s'(ll:Cm*W,QV9?[
%DBP_;kpBQL@S?'=`h`DM'VK<*nJ!Rh+Y:+DEmm=_a:oj:IL.M!_ZRF$/MHuEUW_j:3@"E?1A.p);e@@5*guk,-:uKRVOX3*3'0uW
%<^Pi/WK1VRjK)n7R<b,t,,]J=;Mh`-Y/"^HbP`G!&W2^@^B>8aa.1KG9b8If(7o4:ah&i%('96BaRBg?(8Ap@%ILV!oa3-h:4/p*
%7#jO4eH?TQ@E*j@1%E[47cc4m`]0AQ=c?-W@cYocP[tcnN24[cBoKA3*bQii*g&dW,[4"kA^3p*Hpua14M?Y['I9Um;hqiPGi5;4
%K]MQ_Jq8[<H]Beq\QS@Zr>*o9RTYYcQT<'N[EUOOi40ao*_@TTTjD67W-(Ct80c-.ZD1DcBl,A0"<t5d'FuIWo3[Xo_=+1+!E$1n
%P`*e,Zq-Rs.'q^HYTSmOhpe1LZr8ET%=sJpdg&R`@W]#[-T@-sWM=Ks%7,\FJrr-TPE"KMDoLIH>)Pd)j=SihVq+E$"+2!4oSn1C
%:VNlrnN:41]6]kUn7=`22sNOjft`R0!OLVp9]pt*0@l4"!HWmMX(294#9uiPC7%sF)B,dbljCANeXB_TA.CGE78U58rs!(![-UIS
%>7pA[K'sN+MElh`/dW4jlAqZK;8<Ro5$uFmU6*c:FB-D,JggHiOaMa/j&)Q`NuuL<LU,c7b'\[eql-<k-]LSZIO#l#opeqBb=f+Y
%_>f:Eq1Z\@p](5ZK?(,1MfX!ekK)Q/F"gadb<k7nlCdV&A!(0/mr/\*K7&-iU5%PT'Q5[XE)CYCRhlW6/P#;'BPJ+T+YAF?6nF<5
%JOlU?'s/_16M*te13fq+bkcD$bGB*kgo0lbm8gXl]<Hn>r">ACm/Ih.bD6%6UNKV)hq0@-C4j]^G/&og(CH(&F;=fXXha]eLL#"q
%SV\!sPI[^-`,"N%HB)gC63pKs7-9+'TbR53WDI_IkeTSqBuO>alRYY"+gaRib(_?SZLoY!DmgT:e62-o_St8X[`qQd/SL!_0?aaP
%_GgR&f"#R*>WOG1"MuB\>_-YbX[6G2p0=L\aC2/#lm`@<?3.<L@7j]S%TaC`b=ep8'KH?EH6oR0.*3nr;Z,CU>QWRY,<t9h5d=ka
%=4hp;0g@@gMW8Eg:EUi/";TCK:lC$f<2sIB]"qk]kH^JkJho5e"N!dALRFmBFc)Vq+j&unp7uQ2N-$b"%Q[ubSeKl@CVNYARk=8W
%=4IW;lp_*ZPKn1Xei8Nk(u=-b#W],`/.>5soa6M'MoH([`ZPH4KF*$cS:YFf&lfC*j:iO^IW'J6_kM"ZC`9TA)9h/mV$gjeJ/6/[
%#4+Yh?38)VIhXZK?H3q]:cmb.>D/FcnC/\Y<WTID@3/U,Wtf`d0:%cbOB/POAHO5=a[MBGS*`lc%hO/49,"cg##>BiiaEgr2Ze*;
%,koQF6'u0:oJMH<pV;*.U)mtp0Wl6M_dSYM,Htmi0neH$"EYZ-.omF=M<iiG7ZKa0?@n%=&os.p'Y?<*2t8TY_YY][Dt6;d2GlN&
%?B]X@Q"D3Od@17R\rKUF'dBVVktO:0Aqlp/Ad9ks*?h6j;PaF`dg.DMrZmslgPrGR_8(Nf"p\(lB=>B>'Vp7bRZo5?bk&I72BIM'
%crh'7[56kk1)..cY+\d%j?/nt-BF7dou7R?(:O)+nhDR1a)"Rm$DR2C<&RR8PAI&i^"GTgGW@.e?n5J6>W7o9TX2^]KsL))b:/4X
%*;pfj_1oQWjhF&t=:\Z.o3Y>#GgJ[W2MU^*8#/(?"dumr2C1j9;D1>rp(;&&M%mEXgR[Q)_%^]Y%Q)%Cpg"$K1:UCUJr$Yh?[sh%
%Ofoolo7#3aLB7m/N$k<QH1XJ"-*)t:p8-EOO`G\p$h#GT@L=<E.T!KH&X*VKq>=1iL]Lh%p1M@V!(dDU%Z`9;&-cJ4^_r#]#nP#g
%kt)Yk!NRZK1e.,/<97X$.:NXY[45-6:Q^i7,^K>u;r#2G<cPd]RZmk";\pdED$Qa=q93-<:N;?6%9ts3JUQ/\3HV8-8>"kHTUNBB
%)F7?!";Hh?`$>^>?>k.*NqO@S@g>ITYQBmSbV?^AZYfr(qcsjg=?;iAc@B%c&:AP[RsPK!6gj+aZqPku^rK0XW)Fi*92'iuRp%f[
%drh#r2$n!).TEiOP#EnW=hWLk1iQ<MNJYjRf+;6Npsu+WNGfd0'R7HX?b`l\J3+:'+2%=t0aB@4LRt5-J@HY2?@b;T"KMe3*`)I1
%WY7o4?V6Qb&u\*p(j\%ufMV!t)KqEZiLuCqZS`ZY[rDI+A0m*l!I,qe$W!9dkS";S/KF?$;&$HuSq5ckEYbOS0_&@MYCLBc%Mb&e
%,mE*a=!/Za+Bks8AHO5=`C>aB)qKfg7[`0r23re"5f3<\FuR.9/5^dh`+:*<(<4jZGVt7A/<L+fCBOeVD::%4EXmiGTYk$b)aisr
%0PjuV?m#Whr*eQ:KUdX-]aC#6<9,;D.=V;]KUV62'&1h\<2*"S0Kl=J>(Hmg4QEt!TpY1%!)'jfa^Gr.4"/I%@n;e[;G[W?+f?Gd
%Y<le&'fjB*MVjoj:nDlnSK^rD2%@plr8t8;=X4YFTTV('@7j][30l(SA1W15m7L2Xi^&$\6An1$q!8/18MF=0JRq1T8]aetpHR9A
%2NG(U-$r_/[*.+X@lr$l4L=V'AFJNO]Bs='MeDID'5Hk?/CD#(W9c61O[-9k!m>0gMNXMekC6+5@R`*I9inFu<!niN:%7Zf8-8T@
%8%H6tU)qXe9W>Str.n@G[Dn<*=\1oQ0F9`Cd<ZNW)lUga/s=HXZ-IGo)NGrfRfXnLKILED^o%a4_I/iY]$gt1*Y(LHb\b^f!Tcs>
%H?ZB@ZBl7c"jqWBWZ!;-.5k*%hQWId?`4?,2nnNgn;S`-pS,iLFg?p<nop:QWfsV[9B:+`lc08c!fu/W`+W_hI_ZdX2(0$(8Em#p
%;1TBq<@CDH6@LE<b.a-`J9#0\PXnF]PiD:1D(;XfitU:eVGa.'ZY8<=@'61jm)$)VSl_QhIqaRto@[V<+kbdF8D@1FJo\W)a:X6X
%92O#$78C+MiqJM98ORQ]"[o"oR?<q0_itY[i)n`J'P!u<eZI=K=[6XtZ-X&F"J`@<=>lD*'`=aDs)U=rZmb;I!RhMlC5QIgTkSJI
%qC"q/+_g=3QdUm:7:h6'Op%Pf.p+Z.O]2acH2hB3!&$-T:;VQ5;)5oV,.'_.9CNmAJa$nLrG<B87u3kRc$(a#*<i7>!Ei7DDFojR
%W`fR`egY'cKbU^L*O/ud6P%d5(O[3V(%@"_]Xc(Caok<<!q6r!5`6oo!kbHYK+8%L__).G"=,_o@[OCFW(LP&56S93_Br,2^q6Eo
%DjMS8&5jf?j/+8/Wr4A9s3qW-SmTBeDTX1tG3C>OFYr>::QFmX&-d@Jo0A1Bg+d8'-&4E.6[G%H+mf\:'kBguVG51Sdn6`KJr0aF
%EfuCr^Gg!iiUpWD,R7]C#l/h<(>eps8l25t56#M/E3Wol$0*E:o'#RB&em3#A3cjp3>4cEd?7B"`Xr"_PH5ZL/SO.g("]8B#Xmr(
%W,/+N-eV&\qo9rroAs*P@N#h-JJ,f:8'XhB$&)JB[4ibt/l0/MWF6cWkYa\YO=m33TFt'eN?G#tJr8\&C6FDf[l:EM0n2&5I[gLu
%9m@W7Ve$B_8CYX\QLOGb5R+ssX?ifWH'_?h4T^/q,W.\&GAL6MZ<@8`[>Tm8:q`!C,'6MAUQDRCJ>.=BRU@=lgD`&>I#F1o_DocT
%2gBpqho642!b*'8-4*<^SB9YV<=ic2Msjd\&H0FYmRUe.`oDf0a@ZWS4uIWT(+k?97_Y]r;\5p.JuWsVRc5L0lOA%bVB'_p:R=f<
%3lG7d$:Q?O".'E[JP\l=*lgRoJ0-0PE^JnZ]gOj-h&4kBWtf`6(`YoB8VGYE5h.ne9C\*Qp4eXdd*ER"[s5FAN(7iAoP4`^_7*&W
%Fo`%nQsq*i$=P>;J")n"#)hhj$A=o]YZ!5UCCIEX*AFJQgn&L7],4&-91f95C6YB-R3\W_TB,Tu2'sZr@0nVA^NdPTKrlK+OsS3:
%3L7"Nk_#R!!#K\[3QgPq\c7PsNY4,Bi09(*akC3WIHD;na46&U>#^,POoVUZK!J7:P&,?*]c.I?Zn[>hX7`'D:K9Eb.ha$LU!$f;
%i@Q@3@YfQ)D*f]>)-*<o5ML?L-5B\+jr-o*OoVUZK!JC>P&,Dq^DlT)HkMEM_m2Uf[,dG'i)p`tjqnqULnTlS,mZH5"S);7'l5p&
%d,RnE&kZiM_'Xib(F.QCptW&ifsDSI0pq'.Os5^^OaqGh#V"X('SA?G"nCH8al:l*OVJC[F"hg:j-pBt=JAX!W7aOe^-`K7p@o7n
%0N]>MG`klYpnO=S_AH]'Jr1'mS4+11a*$kiM'=5X;PD$>ZQpjMoH]2Ngk.0<&ge.q9m.NY3tQ=Z]4fF.(]l7"n.I(-G=%K96-.=<
%)ZMDo"!6$k.#Ibpl6A+-!Vu8nC$'r5`=HLuPU&NZ':<U$Ua$eLjR.as)@RQn@EOrrO<:+R/L:>d$%p#o%K^fj*OC$9Yf/P?]?fZe
%-H9s,->(ekfIgX9`SX@H5Humi-_A#k7$I<#n<,3Z4tsUGa4!Z(kR`;R!/]sG]`'=F/ce4j/Q5-,E"';YD\#Dp0$fCuX,;Di!@DL/
%Rh@O,kCuI^:mJ)B7/KkUh!i&._VGJn(;LPb1Y(leP&i_e\i)_n`(_Y=ie!^8KeTJ@O%,kBK?*Yhdo=hi,=.7q[+6)2:G$quf=/,=
%0&Fn(W@<X&92O#"6;DK^k4XP]5tiB[ZVU]2e,=6R$Udl"!?qU24"CMm!jdGVaQ!SNC]%+^K)Gs5;1VVdnD.)HS4Kb:K\teJ8c7S<
%.#;$S/H1`s+@dPP00r#/#s#gjP1^fB9MCl4n4T&%+NMdGf<B[p.YE@3k&:h*'DL^;pMC@;1."inkJEnA5iaWqR+<0Cpao6Mp2$i^
%LIs/j-o$F;8ei`mVaq*uP'm7[3KF!K-.Bc)%boOs\,aY#`OF/fD:X@9Z/U0''ZF9.kl4W#9R`Cc<bfeS7:]/nJs^=UUEon<V8VAJ
%&NZZZBeF>4)a1P@?.Ol52pBK8o>"15:NoIY6VB.E&'t,t=:73&$=V@DIRlb%$p]Da-e*N;Ad8*ge1)U7XVX3^5RP+#bsOfl,.(AW
%b19-fP(b0Z2_:&XTGNhj@aP45@&JuP?[I#dSgRSO>+IoHr=`/3'82lX9h;s.fn&t_#'!D7\00p,pB$<oJOmHW'b)GL,TA1]s,a(0
%:Vh9ATNO;WP=>sE_r[Z:Os%Pp_f)Fcd,u3I'ICD(JPVl9q?3N14;'LW'go1E+RL:Y`beF)oS<8NO3bI8[gWEe3s(W(\dmu?d#^3\
%-&+#c4SY(Mct@t+IUl^cd(2i"L8&'h'c<s"op'3"MN8_E-9OaT0s`hVkM0.!:*i$52Xrm0dg\A5(_MJk_/0a&nnl0`etT(_&J#0C
%Cd3Ro+af]JVaaYtSgiT'2!n3Hp?4&WTrLFFZ6Ad;d:2gOX926p0e3EAM1SX\ri'%Xh8ShpWOWaRCAQo.Lqp;FK'@/(I?NSQ57>sN
%+lo@A1<CLKLd"B6C(MkL<f97I5sOE^9sJcG]u<p.qHSYtT#kLR;ipSE5pV>u?K652fh\8Q.HD9)<!3nWGcDNOc0!,D8?FV`5.*go
%'NNG9T84`A'LZ\9TPU0n-@&/QHGbo$a]LZ1ciYeIaoWqGo2;ph$>`E'$n?uu-GR,f^9qC3[<^%07!Utc!:sC#O9.7X4m%Kp;!94?
%%%n\9]a=qbL;[GVp9H>_"b7L.<^N6@T`hPXC^4DdZbr=1/Bb*=Q4FL)1\#iO!l`Ye:<7TP5!E!T5>_\.Ap:aZ7So;Ha._Q&%+YI^
%O45+9pao-Q`QSckd)-t7>9g$g;D1=)!sq!(7[i3R%Q[K()G'ca\T&chE\Be578l_\:fETK>#T0U4>s<B7;e:s(TO.@Q6E4VK\!/"
%ffV\t16LSiVY;O"GX*43%Ku^8!S[MMeO57gi?-s;E%ma)dNM_(SbV?B6LBkI0-K?F9gj*3PBmDN^4hio_+@9,>4KegKUd_&H5.nK
%.*3nr;Z,BjLYD;*#!1^[O]+Tk'P)u38sJq(5\/jd<6S0*:<[3G0:D<SP%2%R<mZhubpMKc7-djOCnSthCFC,NIW'Hk@`_#X;=o:\
%Ra/+P_&11<#3HS*6O$i!+FN)P,PoKj?78Tg/55BjYa60=J1#NL4M2>frW!#Y,<%UToP^;qWC^*F5ZC,3Q_MIc93DFA1;98M)PWl=
%[l8a1L*t+E5KdK'#qn<[p(0m`DB<D,!@(a=a"au_#X;q:G]c.<f]8s?*r?F%rbd?LI2+X+AlZHiZ\K1WHU*"aA3"nh2;m/E")'K:
%80hjQ(4Z;k'Pb^QKhr&Ye+0%A7=Ad@.:SsSID`E!Uf%5uaHI/K(f1op.^!EqKG[!GV$%O8;q)Kl.:-rH!lQ+J([.E(J`1%DPYDdu
%0STUH>-%?p823S2h>r:ukTs+Ykt\V[%-A`W"o\4:]qe+/;Cb%%o+X((7%2jL4tq&oF:I'%Cq;ONW^d9EFYM3u2Z*\%E^J,TSeO%2
%FK/LoSM$uGm%Ioh&@Q+#K;5/1&5k#EAb2"PCM?J<\@q,1_;k"=kgJ_knU!K8@.@r0?]7/i]IA@:M#q0i;O!umW@FlXU?e2;Efu%L
%FKOq-C'pZ".TEcL&l\0n0m^`#Bk(IT59ZEHcB.GD<D1th4#WX#"<r4*2!/.BPF\MLV7d1"H_DNp"l2-qWhQ@%>,su$o-?347#K`g
%m7s((eL9dXo)r*54NoMeBV`3TT%Lo@[dRXD"oL@d/:NIlR.tjhLFRA>pm@ciF1,HHV:5k"Q=agCCgo^Xb@Y[&]?%K(UR:_+-0]I?
%=`B<IE/]%bL(J/>4dIXV^JlO'oFR]ha7Lsc@*"tc=i/hN!+3)W&3>-sZk*qZ0lrph+QV/o8K\P>?3.=`#r!D&c_1MZnOB&n7j(^5
%689_tI=Yf(`G5ghfs>'r!(mk4RXhYo3@u4g[A[uNq(l$_ESi-mNJE*5*ko2O(M00?9QUP(4(e"*'F0%.]JF%3;o<iT(hY?V6^AWa
%6$+4`$9!O["@/,[=+smP'7^q"`G*IsN34XDj7ORZ;H!iA"prH'8Qq",'XP1dm8>MDZ4Xj&(+6;ls8UriVF?so\TU1ks.M=Qp>R[r
%S][d7fO-,;?<k"sRASbu%Bcu#0fK%*=!p=l36J>e<Fp*[h`R__oIYdV'6,g,lk;gZp3-u$;C&6Z[Y[a1s0->a`%"JMOW)7:'/<JZ
%+>F/U*>irD2N=IhZtTk]H\`d_6q6@6-ZZXQ]O'G^a;#`][YN.YQ*>*sJnX]p[691RhT-d2HO)t,I0\/e,0[cu>7\3H2%*4H*uYRA
%5:9QtK>7h85^A@Q!pr(fF5Z7cn4!kV@N</;e5,:<#47,QSdUQ?XKS;+PF=j$"cgn%&NST2pYJ*HJIqW$We#;H(&4K6Pb+=;-SF+O
%PpB^g@YsY"(N"p@$A*&HDu`M6RUcVkjIhBSdDT_(7aZ9EWE53-5n``K"G,9Pq.Vu'3'40Y7TLHoE/;XjN3](5a-Aj0]a"67,Gk^R
%_kGUeqB[=<Ajcq.fZu;0kiis2V4]r#a2S9.-8La[lbleW]*G4D0Rb]pmM._!n`Lnl#IY+!>`u5C<+_c&D6$N49UTXt:DY4,?jBMO
%AK04uH#EI@Jk54*^YEpJ<Wh[AAih!<p27X!/?6(86>o/ep:L%kfmV?-i\XS5[\.qI#N(Xb:d]);?oh\U!p3k:_1p$B'[oaM>t)#H
%8m+1&]>Q)RcnbHSVf#34(C,>r%LnI`TE@)3LH:.2//TXU$00ArjJoJ:BY2@(.oK_?&4@(mFGsM)[M4a^H5d80S6SHSL"a&n"b!?H
%=Nn$k_9n7K$Yp^Q4KSi&69-p_CI?1t[r#pa%IH3:;)@G&6gc'kNe?;K:S4KPhM43Cj31W&<o_n>6SQoFdn<Si+N!Lh2GF>%CcI<N
%LI'tm:<io,%q-L"MdSjnlBA1CEA(Eh%D(lT*8t'-[H8>an&2?;%r]E#<p4;RS]2QZ@B-&Wb\*&sf<YCC"[kcJ=u*F7#h<pdgH,bY
%b"o9;k'*'BYCs#cK"JOuL$Kc@&2OB@/uHn8)/JF.MXEh`ahng$/.=."''+XX&O_mFC(+LKGVaGR!+E#E`FYM[;*LfS=@l`6r&TkN
%51_>J_#r+n&.]V?i]]&R:o-Gt<W/1L&<-pgMf!NUp,&McV`,:ka1$)*"lXd[G&e(dhJ!iqW&;rCGrKX>I@(B^G=`V^2[r20GQ@8K
%&G4=s4NNs7I+#`aT\)4BD]q]B_+uDfAL>*qkS7*Z%0obD\R;$I?[W/>`03^T>4kY9G*(>!Y:/UNJm=UBYeb!!<@13Iea'/NU&h7C
%b;U$7;3;N)gI+6(Ld-n"'9iI.I'/<N@MdFBcn9pVCe:1a+*-l#Zq2GIie_Vr/UJjX:F'*DoTm?\l'XJ-l`VM(G@HU%//Yl8B;E0F
%\#qp-JWS+^SiiXhq'/fR'Y<4)i8kQ)0E)@C=?\2V7abDtMm9,id6&U`Ju/onbEE'LAC9uYnC5KPJcdhtTnFQb61+P&@1"QS!OQ#c
%D\:L7=UiZ<IbNlN:^O4'JS^'4`S%R8L0/6eLZ>R.92_q,2T/SrUfr+5@i$.*`oFihncLW$75k(@j1@M4pYgS\eV*icVHt$dn5MJ_
%C+W='_mi6DLCEk2Y'T:dBJ&mO@I4W,[HDHeD6d0Yg>pp$LTJ`:9siV]H6!B5XnJm+cgI$L!;Qmj/5i"+@+RZVE+"kCq@:@n?%XO=
%#cHo<5+up_:U$Z".Smo\mc\]'02TYYnUF=9*3+sOHbF#A2Fs'jBdPht'Ho+c[-&&JUZ2AK&:)_\>+kl2DiGa\=5k'CWcp`NlA;^1
%Vc5?RE/G(Y5dWPq-ue\JO(hk4Dqi>aF;mUNiJR<`LRUQ$(]qVRP:#>%[il:)$t17Z'i$#<4?;[r)"ZR)UW<WJnRNL%YmlX3a(JM4
%^ge<+;J_/k^$J#rU9H[HcCcbbJtj*-_8pnLL0K/"h2$lY/f0M'cBg\GTXnA`]YP0AT#%Q;Ddn!(Xr`L*,F)hZ6&/ui32W].f;^i`
%,fZ0akm`5m*"q'MF<;<PM5J5[Y#2T8"EBNL#F":l,\jQ\)K-UuG!YmTKI1YMVLmHpin^%lmT0rG0MefKL;3k&WGh[L9_<`T6V#&j
%%*:]r\3I33W37`Frhmb?l_1^<FFTm-`'(iL,;d7I;S%BIbTcV)XWETHOjjSRf=<$L'hNka"o)F9,m&%)[EaV3(N+YLpuYc#s1Gnr
%GnRV-V$-KQKl[Z[cV$>V4B8#Wjtn-P9u@$LBH;kd*#7t@$jg@HqUEI#"$NK#Ue+Of.T(.#oV$h(kD<gTEu6H\ga[$oActs:/P!(M
%1P38"\[ZN5YBN9A"k;N/aQ5lENYC+na>u_:M!jsbd)oS^[Z/K6pG'mqK==XCd<:W6`PM&_VpE>ko8c'\.rO%<7RB2^ZA1SqIK(?-
%bn,o/Ag#&r>I5rGR9/[IbRi]K]\1b7&<(837RgSn=6leBccK<3DOl3#'7uh_b*.nL7BF%,QlKXfO]=gm(/R,:CbShlVe"FH>`[6D
%F94!D%?j)V8tdP."tllpI.%^E*F0<S;KWqgJ0#:VjR(to;M.Y.+!VRY\N?b3!&I"tg)M]Kd4FC5a;)(c,d)>WRt0?'RXcGhG//pN
%"n]f:^[4DKlo#C7i":;gf-/K2Nnib$QM%Xj-IG,JD?n&qT6#]K.`o.:HCH1P6LZQ-]uTAYK]Dkg8qI!X22eR!eTtahQb@a^Eb]RW
%4]($f323%?X*maf3cXKQK:<hR@j3fulBN.XKc'#pZ;9X_+c3JofV,kD?jY:m1*a>('N64_c8,IJ/%l@_6<1N'^jmQu7dZ3Z,@_N2
%%m"TaC`T2h0E`S&lStf5;@ekL'rl0q@S[)l\e:B=?PTT<Q'4I%[h3n45UtDDMtE=6LVT<iV^mhpM0OCV/R)#%@(6jSL:T5hirEZV
%EH('nEC)/`%h54Flg[GI0lQe1FmIo%Y:;pokkS?.s4Snp@A3/=(fT5c)/[_F6+9#);q>t.CZ?,<+Cl#tD@*6$\-Z+M^SBuOLCoc[
%]c<,.Vt87]*09WaKV5FpSY?FMiIH/$B?=(c"cmY$MgZ;ZXi<)I$rN$P7q'2nkY=MU+iVKSQg7r(LZV)8VnCog?p1DM*Pk59(r7$\
%G$Z)8VEB=^7n2?knM6!Cj9dpI52q7Dljt*-1S/:e3I$k(Hh5XpXR)+BR]g`AK'/XD;r2PDiLH)AER%-G.4M,r2c7^hYLZWIMI9K/
%Of2ZU09%Q9jat!G8$.27c?aKrm_dg(hA@p[<c1d?C-/AQ`fXK__9mTac.Kh!AirR7b]#&8QQ`cWbB$&@`#2L8M4k,7NhhgafIYBQ
%%n4ODPXOl%Y]`Y_b<3H4:)I8/`jdf;nt@s\4ifEpTeIfEm6$Wl(XlH?4?X[XZ)JBWOb8"$&85(U&?.S5ZqXj:q4ij3$jZe<'*/DM
%SKq`"*eW+/Dqi>5XhA%2Z"P!0ID?l!W<jKeE1]N'Bt>;n?[V\aJ%t6B%Gsk:pGjg$;`J,DWSd6GS@dtV>KE,YcToW33,*Y-5?fS.
%d8/3g[1p)jq)+EF22A\B6bRV3cF\&_lE_GA*ofp%2/cY$!Pp(dFF_1e0#k6j$]=$"A,1p`97e9f9oNIX.'iOe4_Ntj(q7FE2D1`k
%k>KQ*7RB%$)idFJ5p%#DqP^q9RO-"?W6:<6F`=B#,Y:]e@$IDe3Lnh3;%!]Yf9<7@d"eJ6W'O)eX<:3tRODn/(EXrRIp^3#0JZ52
%?YO0hH5X`m!`#_%7bg:u)[F7sT6!&cON5_H^unT1#t`RW2$0JG:P\R7h!F@C&BtBR;6?Ua>"fhFNL.G6jJV#RNG8c4"cGhM@qlKn
%[>'#)N1BY%f%Yt(,2.QT7h@N#OdcW(=22IkM!kSDGka0SfDsg]]:q_m\-k?B+IJNS)#6pZJoTFCZ2;dBHTEu@be9rnb:5JROKl[#
%)8IA_2i'>fL?:iZ((`JodN+NEeP8Mk@af]q>;9Y.;>1KojUbKcBE?9u`L]!Oc9cUkfZkWL8M,?o%/"V8^?oDK?c/S@@iBe$_\\q/
%%H"nQBT,^2G(n1!=SO)+Ad_9Fr\@4>[PN^kYsU?=KT9\mK.P]SQ"cjY[4Y"!3jqA:?0MO5.B<YG:<arbekp4TOn2o7HMaqG,?+fM
%&t.0D\V(E&_&7lgGjKqr8'k2\=ZApj;so@eN<6S=n7!8TV<S4QXC\f4//%V[,qUDBgea2aNcisHdNeiAS60O["J?.V/<mi@b;J7s
%Jch)W:81''KVse<PRHoGF0g]\BU=3P6'm)pC#2YV:V;'a&j(Ra)V9`80[?3^QQ[`@VC/>>e39'+d[WB9^A.?BIo$9Zo%`RU:f!9b
%U.nF\it,kZEKnoC/97'T`p<<a2^Gf<JnCjl-.?!.BAG9[W&N)F=Z:6sIJ?,<Yj2g>B5JHp0j4](,b>4%q&4rm?H_WJK2@r;b-PMD
%)ZgRY2]l$OHXf.8<Mf'jKEu9hdr"ja69GAC`:8EjbJ9V1#Ac3XPU)(UG7[k6aq.F&)?be'<:,;,>ECjdjFX-CC)dC=9SjX>mN,)r
%E?UCt:_et,\ulnHc7%Jd6nGs2\:ZUs%YcW#I6,*u7YXBDVG6m94=hE&SW]s;*Rjc4/.PN4'a$JHbG=:B<.#."1)3Bc,4PZ3@%?be
%[bNDIibBL@jr$&F`3$KZn&-c?s1[s?"`EXX5V0BB`$gqu[#A!D24;)tCT:GMEVo$#$?])AL(FASN/a_")@sWR<Uo5&C3V0#>dn`E
%YUgHtN7A3nA4R2*Xh>BP(2-SphJJa])Ho)09"&G$+,]h$S#I;e4(aNG[;Xg8Y]A;"0o80e1>W01bRbWZT/7GC]ang,aArc'V+OI@
%k4&Khis/==jUf[jJXjMj;Y)_H^&m(h:%CcE\Ie$Zeh,k1KK(]OK9j<qW-Kb.]mY,IJeNhGpU1SK\?-,?&b/sDGb'mii;/(>`"<=?
%cpJm*?[W!!FM+n*<YC'iOpNDodG@;pNC<FC8iq9oWHlL80RrT^l#JL]6.kgcQjBdqjKE,CR,&IMP43'W%?X#JpVCol]aM\qiA`%4
%]O!;-X7ko&^XVd?PjL,)S<Ik%8N3B'bsJm:FG?'8gHh8F#K%@M5""5A%;AKu+_6Vnfc8M7GbQnB4/-=b4Or_[+J&s-7I#k`2f^mj
%"1BPYJI0G:lZfpt"PO5!%@b])*9)8Ro`c<pn&DKE%mN;%oU5UkAZnLC<cG4-nQ8"$[g.Q"YVpS[q</Gf!XZk5:.r=T-.6=X+A33E
%0S9r<WT/etM^1Wpjj:Yn2!VNCIT"_d'+sgL6jZR*bqOJp01nueYWD-*a1nS0"at&FXTjPj.bO??d5a4=30C57Gh`K?=X!7!])@ZS
%)GCb4Cs4*uK*\^"\8PG:jst[@D%i"n6bKDuUJ2JS@=>$7MJfctL_/-m:34[/.\DobP<b:N=tX#L39RE=Sf;n%ncZ>69KW>mJhSaP
%CSof6*\1"1&['[3eN+pe4h,\-@=&*pNh8)oL*6(#6eKc[)5gCi_?l*F2&>CP^WBuH_*!#c_.5kBGnuB3?l%W]\1G?;Z5$G#\+k\[
%/A[=s9lpiu/AA)+/@colJQu;f7Kd_nBEsIX]I.HUe036i<P+pKinFj0`A_t((c](F2^/V$.Q20$0GE5sE'-Y=;EO_g1J0G*;.MOg
%"+3!_%B!oec8=;hB5a[+P]qK-HrG3+LM/:KUh&AHR&AF,(#\>`h4!(+R`RK9kFMtBn93.sB>hFj\%Y&=$T!fXQ-8:qqgPf<#C:J,
%#UZ@+#j74+]TdKj_.0R')5m6DWNque5RS(B]H'.f?4Gfr`c(.N@s?:I1uND#+CMJOBY]QCcYbM<?dS59i<@L#,)RU9g7V<pb`P9V
%i'^")9]Y+R"XOQ,]:dtO_[<u=#.W=03u6UiWk)bU?j6mfct*UtcXf[OICpTnWC\m;gHLOSqMZ(+m[n9[4M&5R@?KU;Sf\=dQ]=$c
%F,"r!*$#H;WU0J4>TOHEEO?J6>sGE`]6#T=KM\e(>4\8QFlM!,-S886f&a2R)K)Y8nN53!g(eq00Xs&5Rrc_6+g50TTmsYH;;&,p
%$#f\Be%*<Hb[@eD7/^sfn@ju$jU8pZ"dfkCTsrB'1E,BN#9;PLI3XC5H-W1O:h2f2!G\uNLPBf=]j@[(0_.90pY\;-"fIpf%lbbF
%ps,Y@q@\a>-^302gHI;)IG`&+DG(o:jtS31QSBEHT/&q$Z86@[hS5T,#BhAP+cP5iH3FG^;@aL04/NDK(Ham.Ki=3\4EC]N6@?Xb
%EEZXj?X2iKAE(T:+bm?=7+?pt;)?-@-#g;PC!@-8dF3lS>GsF+LAe[uF?8I061&?$q,OOa;p[pjEr7/a.85Eb)O$[m)qWgl6b7?P
%')Z:q_8Q#`.L%=dM#1<$cLlM"FZ%;L&'mXuU./tPfj6Z'LY/$^Kiku7^:Oj.fj62mD!qDbMR,%lMqA%ahL=467aSLQ,&nDUhE]QF
%a?DP9LA<hFMqsS<5+gq`OfRtJMZdKh(J=UA(TX%25s-*H-HIMDk'Z^WDtVa`_1[!Wf*XQ3CZGbqH3pt`)EI9+XhPBa7ehJ4;bdj%
%C&"ZVBAuAP"4rNcWtoob0'U7cX?44/4p;D?0d)/A:bh#<6>2`=OcK?!V4I=*NqK1Y-dBqq/A)SjGVsY^65m+TrX,)o4,?r$&9aH!
%8J"2VPXM`R*=&*``?2B186/(DKH)h,)+-AA,fr"D1q+?4+197"64hX!'%G3V\q]cCh(WI^!>=5\64G[12@88&jjUF'eE!9t(J-65
%:UOK,LZB-S]7rZV?D?\7FIAeu>$aFa"$641W&&Mu-lWGDCe!R(IYoO[Gk$9^A*^3`AD%Ema]d\c[?uG*7Pr8il'2fj9tBuka^#V=
%@4<Xa@#&pL6qh+HMA^X\A"_dLE#q@J1Eb)XBW)#Dg]Gt_#kT'SM$;1AK4rq.Zs?XoT'rEL7L8se$()JULA2$SG3IOcei_!I'U1`4
%\S=l2mh$a.[k]1Be/8Oc([/qKM)qLVBhKIuX00mKhhnKsB<>1>3t[^M229]0J%J2@6PCB^8lAP#")<]\f1C3r'*[%d<D%`5WRcH"
%16-33Z9g-WKA%.bRH[AeX\rrHjQ9X---igR?;bF\8j#n828u9>jR&l.oM))A*3tl8Hi#@$#d3MZ]$63f'JsQ\/RnYbV.U(-,T"6>
%*+k:(HctfT^#_"[oJuJH%Ym4&hrlZ$T`$IO:jo0SL5c$k<p%5[XS,Kak?JXDmVpTq:9M%PR6`cFHd5L)3+!Bh0b5FuoUM,?3,3P>
%)OlFe`mIq'*qLp+U@sqAKAlee-hPg\)7n1,l<\s=)/9\c,S:\4l?7iY_Ed=hNg&=4==OQ_=hFe_[(Xeai-]b]2+,#S!b^8Df':$e
%4ahPsNWW@Q`AgbMJP]8g(mF$l+je(>_'EhW>_mZm]WW0;?'-s>7oDEh60$2`MbR<r5Wsu.p/W%afF?ii&r)FE:o_CUPugNlSAb:=
%*%N"h@nHlPW$Y9`]W!#I=aI,Bbos6Ucn`+,ggNqf#L!c9f=R]:l.-\/3K+]kQ.WB/*=9]I1LhFm&_\"?m%@cMi0IEt4p(eK"sEHH
%6Ajg_!MX[:#n6Q(Rbhtt8nh+6*YA]s/N%S&)as3+Yl4=_,)#Gj34cDR3&OHnZIXP=(NC6i.bNZ*Zfb5+LmO^./,P0#o+WX_hEJH)
%CXor\a>,<'b9Y9rCFe$I$PRM-hCbSb8@!cjFjtCO_8H_I6jRUB954LuOF<*#:.5Q..5+Q.`f3qj@DHq*)qM%o%Q?-U_S&lR$budG
%2+Y=q8i,aL0:EFmamgXYH(XoWhl-P_j!@K'\:2iX=F%c$j8-j1[RO\;ObU@jW3_UpY`Q'*mEb^Y#4REf2KMS3R?^q/B@g'V,HX)8
%;dK_g'*`]DEPUlqCc0;TX<uj$p$<\GP'Y2^4s`%>7\qs2?1pY-OK62u;-o=P)RN9[IQ(5RM8UWf]<5=fdobSpWZnk08tr-5'gZqR
%3,07'b7\ZXDP8Dt8\JA1@g@f-3u'kYF=*pJ&6DNg\uqQnh*PF$?WV))X&?bpNAg^GC'_tLYLaKuCXc$Eq[>GTF-SV?`;?(NbGW\I
%pI>efrmT-AqK1Ac/7RelSp2#*7lZEoURpF\'([Y`52106@FQS=(DT@'JUY^4[LfUldFC9&k$>Lip#1<*=Y]!jbZc",B.S[YH#;KN
%]cu<.E+HHD.h5$OEiD,nZk0se%(+1a?L)o<)M3cW7C.1OLg]9+l'GM*0FAls?K4BI)Y7G(*^d#)3E#2f'.8O0D&8UJ/aYJ7KAlf$
%6hT(XKf[14NGg6Jm08F\+[9iM%BG-ElN+>'-REfrcL[t7hc*Wi>s_#9&?h,0fd`o,>(5quKA-IQ&kV*ZMRRE%Ep:IV-?Z`%RHW_S
%0:rM:*L>NprJ"1I:FJo+eQG;X=K=jt4<[-\"po]T9m8tg1@ag0<)6rEg+8A*A&k9-o6!<7U:He&rXA6?fMkS)1'/VaL@ibs9t21[
%`#u'K4U=Gf[htm)K1d(a</3/ELDgp_$I@dQ:C/nhA!'\M_rd;c?-n?b\QJFa=`>q-Q4G1[OOq\>WR`4eN!c>%2o)7kOO=`h)"0?h
%')f8"C=QO8)h5nAVJ,80=>^WUF<31k!1JTIRRIOck:!!%3sd42YiZ)Y<&k;jr`G.J%c3ZEg_P\i1>'Y>q"%rho/\l`L3T:0SZO,O
%Wt/QZpA;>48;)jGSGZ>DaoSj=+?X4h1q(PLO"`\R($%0R)s/ukGL"$'7RZt!`Zb)&(^j+YLKNSB"XV`]"2=$rE&PpSHuJ'3^hciY
%M4Xo/<.M=Z(-Q]%MN,bF)fuLODHE`abVhhQ7,?8A20)!@H)<2,%n'Q)E@NsQ<&=^`2Y'22^J+cWj@3KHmeVjJT5$;%'(2ZpUsCq/
%W<TiLetiBpG`%+sDCM9[9-MVP@G^PO#X+gjTitLNHHE(-:3Ss!Ae2?5PRH<1fb;<qi93dF:ZPP3H`G\]foKF7WZWqHAnG$ek7E]S
%UT8r6DKY!rhZqG^g,)$mDS_cJ.oLf[()4Skhp2N>XGTK"c4$K<ck[<Z"L0c.MjSa?bfV^Id7FuZ)$2#a@\bu[Ej\[$E>`t.=?4nP
%D92Z#@o,!b4Yg>Z'Rb<A9;6:F-H;,0=:Yk^63YEi;c9gQgY!06WpS_l3>8Of+JqcqjW#Qg8rHpciB`(Vj3DpTI=j47.jd/QFs-6c
%+-t^SZ*TEtko)Qt)f#M'<X9-"F1nDq,/2mPR7>-Pd`@?<_j47c,%ASl$*7+jNc7U57k+3/UuoeDIJ3Uo*CiUe%='H@?Xp6a,NfWi
%lf`(*dL!=eFlM!,LG^s9IREG7D8?BnbC[Q/P:gaG]m)r-?<*cY522%5B!nI]<Sra>8<a9'%ib7J8k3H<(dTFJE7?.8TgFR,=jA;t
%+5?5^d(&CSMOWZXG)`^oj;d0*$!dTe-YIHPYEoE%j'EY%e#'kdLcJa9(5P7J5;e0@&@6B47$@9-,g[oSZrP=i[V7%L<-8\*q^5,7
%[u8OFUe#SCUY7tpg^//]&d?@0;hXWC3P)RO:<c19ZnP$oL'a"SE*a+L&[e0'NZ_YiNm@>Y2=JJc[h!EON5p'*p[,]1D-[]t+M+pP
%BcVkhE0XpTXS;5j;*b4&\rLl=d.%kYiQ1n>#EMm6_:tMUMm_@YU;PJX]6'*Dacc%'2C7O0Ku;Jb3dk/IF,$')EXm*&KW\P7ak>eB
%p$s\p-g+XAJd@cK`<]piGBn6ZK-hpH9nS_X\@P.pVLZ&;5$=YH<j1!;?t&AS"bnZoIF>n/G,LIsgE!#WQm5ssi^^'9e%@gMi<aOH
%?,o^b/o=c/FM#Gj[`,?k9P@(79TC6%OH-L;))^m$Xg\hab)pFN-7O,30>O!$fYt`2\u_DfPEjaqU"3LM5,a^q8/l6`-7`FGK]&"D
%*%]KgF@_E7#E3up&I(gN@8T%,iC@@NmQrg/\J6nt3V*#S4Bti<@D64(A`X<TAE<rK00\Pi5:S1Mk=gcFXF,RO"Gcat_'@#5+'-G%
%"U4UU.*3]i7Wed%W-f=8)>KpnLt+uIC_IDLmCmf58P+2`ETRarT&d$tP6cncJ&U7Ta:VX!4Wg,MD.'9E+NL_`K4IRhR>MeT8CQ0L
%M?^2oouDe&2?%'20M8<(GGse\afj``FMAQmLu-PoP@Zd/kWd$X#JSLQ2M7^->Y95KMN+^)dk=7`rdESXU>jh?]_EV>`kI*D/gbP%
%W"[0C'7gFl=fCu%_=-YGqUL6]+DBIu%fqI.S9JXq:(c,2(hUSi`A%%B\12=I2K]3s(/p#%La6Fj*Co"Rc,=_l`bpkTf3Is85"7rg
%Z)r2$XeAM<4*9rgK3Ja],spkp,$U>-2cLPI@_ZQ,9Fsc,ajqFhfkNfHAl5%bCc*H9Z:\Lr[OUL(5e"SQ8FZ*HCR;/8p]R1NAZH(_
%e_@pG<JS)\WNXLc\hmOG.d=:Qj7a.36FQ0eY\\H@7tf0[KT`hmOcYksQNU1S#[P;D,.Bt;<%l?oF4DO6>S+0<j%dlCY1HNdi#lY^
%\(QaFIt*rG"?)=;C#Th]Om3n>,J$Dk`LB209.jnm7_IZj*/L+NX5`L^&OD>fVW\eHV&a"Mo3&<%b:Q%Lm1qu!Y^W0kMnnSPFcCr%
%5))?)p_VQf9b5AQlHLI^L8eLnp]ko)5SOo-<>3hU,/2?Y&@[YuCun_So'B)6,Ue"RQ^bp$\fT5@/FP[?[cqjXSEab.0,mL$ju_n;
%E#,n>,[>Fs%n)R7Y+8s9.$:kHh>@0jm4fR]E)sa?0dsZG11mu8MBjb*2qc&#]?H2emW"*oc+<XdL0&C1%`[bL*9]NYBj00'c+)uk
%B!C7_O@/Ut9.(^_FIS8ZWE,#*C0BO*e;]_)lu$Nim>HJ0gC+;X1TNEP1O/42D4?T.ShWCCR$<B8))N=)rH<H^/=?1W^s9U]]RBJn
%L5n:gD3nhdJEZcTjV,8m1+I$Ca%6o`[1g4,8JJ9gpR_CS0;?:hoGXm%$j)ZPCo$tQ6AD.tbBBR1m.)@kU@urRM?^2opD;4b$m[GE
%dt9A#'%:pP$bP2*<7L?A6eleKp*)iOoHWXZ8.ABa%>(sb1F(6LF^)8H6&YFirW0ck#/=*J)WL7eka3e([L$UsCAVaD*e"hiC_AQQ
%'L-"AbYOc35%j&`A)$W9gbmU.7M8"VpQ[P.bF?Q\g,m@>&]RfaCont?esh$,+5CAdgg"at"M[N29qVn7@hTMbCI!o\K-VmP)k`pF
%-k(Z/A[FWE/N/k]@NU#Z(c@(\XnX>rEP*/>KOI>en-K_Mf5"ZJe-^,&G\9scY_%Ekh_A1*b7TiD0FG3d?)mB&6ca8(9$g&224'M8
%qA=!F6_s*V<$!B48PS:Xe#?'X,Wm1qIe_Q5lK6:-%5(*9!3\3J^io9G6a-X!?JK-B_RVFJ`6i,'!^cbq$A9Rp.g#7E"<1^GG!Nds
%BW`*p5Flq:\MU47W&[8R3bYX:C=\/U?Q\&f>s^"*NTba4UQ]EXd*HB!^;\fK(hZGHHtEHWGnP(N7/$:?M'9XN)4g,$?bW8Obu&>r
%p[p<oRfb="=J>"\41W(cLoB;T5s-5)mY]/*/=_8W^W(,J/\QXN9Oc&s3:7b.`ik9IUbR6ZUm'^5@dG2h3](`mmI_-TL/mt2d11r`
%l'/;4'I2I"7OME[e0aq0eN0>S:Lp%Yb>qHhaE]#n&D-73C7eG2:>C0mUd,DM07o_8E+^`%%q665l7KcXNp%ne<-dI__dOWK(nYtP
%Jj.\]GC#<&'[(A49.t;oc$DTrI81KJWB$oZmNdS/!TO1>H5@k"%R(=S^f4-RHk?WC>=CLI1',Tf0.#C=#]hWL\k%>#VnY9eaGaV)
%n!k\9gqU@H8,gXX%37rPT@WD^+Ypl24EAgt)dDCm/MK#q:Vmc#58pu5&en"s]JDu=A#P&0<SM'jou=&)+_i0q;%lA23LKQ$D7(sZ
%$%5JLIl6?^K&\-#ALHXPf5%<Dd)^JkDZ0NNXs"GR&\:APF:Cr)*pn3=pZ^3_^ZfK9A-aAf%AQkMf2iA?&_qY;/E67_L^L:Ha96m>
%#Ea7,GfBkl/4o.9e6>Gk5*g6bg>mg.#E`tdm[tl\j&)D/[P%jaffOumHZX$SPjXh`/Ruk+aQSl(0tAa3j*G",8(WJ3[(F<!3Q1SO
%C(59*er<m`J!8-pMH<-2QIIjSku)4aPL``8r;q@N(aXc)D8teh[jn5N5,Ht(d7X;V$ekS_C0'(RXCN>64If,BDJ;fSdetAH3pQBr
%Fg?)WY_q!*NbMU@OJd^'MfF5gn$%,g(V?BT,tqsnOLL=uV$A;e93o[j_\K5dfW!f_&k($<X^4N"JO[qsEU3(3ZZer.8*H,6dGA#(
%2eje`kB+ZrJ@<Cj6kIIA(nHgMV6gAB<#^\TB^^13gH/%NkBi!&ECYcZC>?dJ#3pX<qi*#Iqq!10Zi*8.38-Si(<6M?7<)[nrNlBV
%"ECg,(J<Fk$+LiC(,@q)AkYrgCL!uui+TZ*1#!@:b9=%<;/;_$ZTd/*qr$V9[3O11P].l+X>=3lePP3)cW%6H*3<;=`ab-(N^/?=
%:2)M,\t]if[n<5`GnQ"Q,f(`;aXE2u5)K`b:D*%<0@@onfVb"G;0.D+-$3tN49i/Na]4*%,H(C]eX!(bh)Y)C^oYdGa]P[]s,^Q1
%E,SZeJBXo]8aFP(N.5dc`<RsMB[i+[+XrIK&NrJ_0c>j4Br!+AP4=>O*]?M!=I6E3-8uG0Z$^i*(*jP&=ciDs=i&g)NYs37&2+Yd
%<s+;LFlV'1n)"Bg)+icIoHOU+o6tF$;DjbC+<3)H=?qn1Zbm<Z>b&\KZsSk!G1:mV)8Yq1;(c7%9q(`?3D?gB'T'*-i6Ra:oA6'Y
%3$V4b_7lbFks4l7#2^:ddcdP_B-ja)<o;H'*o#mbQQ8tIZntlD9Y\oY.WbchLqS:*;6S\.c%mDu<HB+<RObF*+=PVe%Dj#N^t9>2
%/r5HM+s1NS"sbN@^S\?]?S6:Ke)M9D7C4ObMN@^1PqE>,9o/;,gK&858ElM]O(-:hcK:i*;hJ55.a+W-RG^8^isFTQc!s/Z9k]bM
%i]])O`C#Wm2R@#6^2@pLjE3"Y^M"@D2j@a[-1o+nkefSR8YREe%*V#pEK4)p#@qDR&H<QWC'inQFqjDX0g.q,C79.FG![t=/&VE&
%4HMOlLcI_C3k3m5UfJ#o?%%qJR$3;1e5<PuHFh]3^,(T>+ekjJcNI9`cS8p@b1]:?X)pW8C.e?^C)ZnGel.ajg-G#%Y2NLpoM=N!
%5Xj&<.WKtdQrP"c"QLcA+lU^"q8-NI)ooT+[(X3K$Np1<EY*D_n\lrnPmj)G]Z,ZH4;S_G;)+FpMVrB7,(s\VZt!fA\[/Zb$>$`N
%eV%^*(osT,&`:$Z9R;n0#2N.FTSP:uk@H7Pe5XPOpX6-)LeQuf[E,6G@<Pfc(9V#O`iM:2[fuWTkq\S7F'*l4(i/,dL+t@bn]Gin
%Ys^ut0ht\$EEIZ:GenB=<,l_2EWkq/EHF("aK9@8qtp=^N._]X(2!)-i3;,^f#t<S:/\CCBGW8Hr9mGkZlQc@r8,EN\SY`GN7@#T
%`]GbcAt,=^%/_t:M2e,Na,Od,M(<siXt9:ZeU]HV\HE?flD;L,$Bf]Hci#UG;ioinN+:$\Y9Yf:'HSWUJ-?DX;ceY\_!b[2NI4H,
%8h>`i,>*tmKao<Tk3+^$278;Q(_EA`oP);Z874MIhnd[PJb)V$)(#]GUJ9K'GXiq)mLKW5Y/s!=PXcJ@4%Y^LJ+4&*2BQAZ$$tN/
%Yd*S*^<bGS&O9l)Mh=:?.L?G=0J3A_ZjssqT^2%nV845H_.7k?'9M*'@sfpe<R=.U&?aBqeL[J+/\grH5rKrhA=P0*hru!%$;mOr
%Y2V9\cf7#6H-,uac4/b2_n"[h)86ERmfga@Kbo>Hl@dM%a_90P+AN@^2PPVEXUDruCK7Wq(TXdN&UBPe,)@]pFKBKg)7"oQ&Bgbi
%ZfbMhHR)tc8AMZMpnMJB((34f:9tf?)5d;1Nr"lkErVm)9Gr\/B<]J3A3I30Hs1Lp+jh0nKNL3*euaYg_(-=M+Q5p[C'B?:?6)0c
%&Ls"1Eh.0WMTFjD$Qc:s=IJu$9Z[m<<!-4FS<>c0f$C8^>/!9e2$nlI5W-PUQlJ]mp"T.[%=_kTU&I/oi(;cP2>8nCN7&#.>3(g#
%(A8!o;;uPG;\#_T!as@\XqjeF.tig?0UW*G]'q5eeF%edX\2Dt7!KD2F,V>)7-W_2)Z38(eHT5XI<i^q6XJFbG)FhnO0KT:4G(V7
%-$_P%,9M=6j")gGGZ\N!f]#G'#Jo'0h??iQ=?IAFE=!k"5f2%Z5s[qIN!3$2)$>X>d>P$u&OB-RYRE'@FV-nZKkI3AMQWC;L?;7O
%mQ-cn];Q;D7c[unL2f+b-3o1=*D'/52<b<ARi%?D@h4GOl091-ZScuDo;!UMJ7smdm`1uEalBUS)OtWrC(9$un\<`&64<S>\*qn<
%fQ-n[$*A&9h3OX?Qh>W._7+"TG23E7Ku.#qP^m&t@eL7o73`d2XMD:imQE-"2*n/JX'*QQ=N@Nd+mg4\096?8*G9I=i'S^,Lf:-Y
%aRBt<(kVo9Z6D@A2/aNeF;@oTo%D)`QrR$ao,BR+FYG7$g0:BV,(5KD(76tt]WG#r4"X8JUM\C&-!Ig]j<MaqX]$B6Yf,P!`Wk(q
%2K0[%O9=PR<be1&@6<&SrLn+]VsP6_a:'p_+]ppM#_`h<'sm=Yc]Vd_7R2F3W/S_h6jI'2'>Ue>Jq$[lN'K7Sa;@0b)7CHjaK-.a
%3qXa;IRn-Y1"FGQP9T2TJOCo$5DYE'@pNVu+#npB7\#ZPXGDh6X+s7-('G+\4?3W7*OgX`38b8Q2).J,&sSKG79t6XNN_M*\:,V<
%(ROL]/dT3TRNB:E&-4A7=PXoVJuE!BnQILmQn;nS]O^-5<UI'0KJF]?3jp''(PY+:4[gCkY#3Eg'>'C'A.)B)>PpZh^3oG]R.ea1
%qu5-14i**S+:e[Me2RR.O/jadgiT5m_T%B9%gj2MJn'Taf?s,/c/\_4EZP%2kB8%)4f:`JT#J\N*P8^6/V84Z*F5clC=\/EB-5oL
%-"(FQfWu9B#Wks2$eDk&"X0s!d+/%*@DNem!_!ft^m:Y=#A"l3%0Ag_^uD`k7`hmL[:2Xng_kbR=?M7q8(&j<NalecNc7SsbrWAO
%L#@a5H?Tg`3/caq.M@ZEM6/El3;BDN8KI\,7+>>sfW#.MfAf"O?F6W15-\l2$lgSI[\u^:TC-4a^tn!UbnNg#*;/><*$$#;A-f/m
%Zo96'&Ks?HNZiJq;-o%kd^`m0gP*]Z&_%`cW#%g+/Esg015%,6baN+-XQe=X5.L#d)ic/GWFe0b!\p'P=9*UC'[;N6L:[N(Ue4'Z
%EflC^@/*\Z=Wg9\jFgBi-t43MMB.,"AlaN*/Wib!kDVf")OhqeecI:D8tHe=7`bY5cbZV!l'rB&"<cXo$5Xlq`R`$5nR@7ZXX#8)
%Pgh#(/FbsE_3kKT-l7u)@'H/d1t2Ygqb,tjZ_ZF;8q1E]5dU%K]?:Ff$8Sluo&M#)"ELrN)/gu5ed15C?f2e5YrfZZWH5.knX-.e
%<aZBJb3)j"6XopRR0@DBC14/77`LmFleN3i.p#B,c`_4&3E#;Nkl$UVT#GVT)9'6=Gd0uR=g)(7p:\Lf_L3(D^CFt@^5ChIlZ(cq
%aknL1oSA3p:k3B\#E/k&Os`ncT__q)"N_CMNgZm^B4-JHSe)_'41Gtpd#R0Z\g?7XUk24[_^XG\<_NY2Z4e!"6b#GfVrGch/`i/I
%83/.RRM(1;(Fq;Uk]*QP$qW$d5ZlXcX`u\-D#G(PiC33Z+5-s[/ajZ.JWPA&]QFNSaNkT,g#CmGQA/,I%?['6#1_kV#_mA=Z<OT=
%\oZLp)8[+,\6<I.XPMLrr?`LMK9*F_oI@Mld_bi;O#q"J,`'YL;a8Y>7jjG$=.ShC0'ebePgdg`9b?+"X.!3J$H?m]=N:6?pY>!:
%M/uV7q=N)d8DkH_q,tYF=$<]&0nR&=6:993k=uIm8rt`QV$iDXEQ!TA.u/rCe'^)sE+;2.F7nB"8b7#<nVBMi")!MYMJ)FZ6h'F%
%niChf0F0iPWe:,s\&#H&SmW-PHVsYD35Dr=&<AuJ1L_n46Pp/T-d[f"o2h$i59q8#Q\2hlh1urcPqLE&B=+`FQ[V,k%D&fnT78#\
%aKMK_@D;7>B(A$%poBDAk?gcqnEYoLGfAO!G/(;qA!#$'^\[8_J,4Z0s5!S0%d\-5U&OZ@rTR\GJ,8&pJ,/VE!.XdaTDnWWs8D&W
%J,Au4J,0'3rqPZKrqklFTDnI1;#C&Qa.H];prh!5ric@sjl_sps6G14%hSZ[Idi+Wr8%DKqqqGArr]cO/l)~>
%AI9_PrivateDataEnd
