%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: plata_6.eps
%%Creator: Adobe Illustrator(R) 19.1
%%For: user
%%CreationDate: 5/12/2016
%%BoundingBox: 0 0 1200 1200
%%HiResBoundingBox: 0 0 1199.9996 1200
%%CropBox: 0 0 1199.9996 1200
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.1.0 x29 R agm 4.7731 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=100 RasterRes=1 GradRes=1 Text=1 Stroke=0 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c067 79.157747, 2015/03/30-23:40:42        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
            xmlns:photoshop="http://ns.adobe.com/photoshop/1.0/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">abstract vector background with high tech circuit board Vector Illustration</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:creator>
            <rdf:Seq>
               <rdf:li>Iryna</rdf:li>
            </rdf:Seq>
         </dc:creator>
         <dc:description>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">abstract vector background with high tech circuit board Vector Illustration</rdf:li>
            </rdf:Alt>
         </dc:description>
         <dc:subject>
            <rdf:Bag>
               <rdf:li>circuit</rdf:li>
               <rdf:li>vector</rdf:li>
               <rdf:li>backgrounds</rdf:li>
               <rdf:li>tech</rdf:li>
               <rdf:li>processor</rdf:li>
               <rdf:li>abstract</rdf:li>
               <rdf:li>abstraction</rdf:li>
               <rdf:li>chip</rdf:li>
               <rdf:li>card</rdf:li>
               <rdf:li>design</rdf:li>
               <rdf:li>electrical equipment</rdf:li>
               <rdf:li>integrated</rdf:li>
               <rdf:li>technical</rdf:li>
               <rdf:li>computer part</rdf:li>
               <rdf:li>hardware</rdf:li>
               <rdf:li>engineering</rdf:li>
               <rdf:li>line</rdf:li>
               <rdf:li>cyberspace</rdf:li>
               <rdf:li>computer equipment</rdf:li>
               <rdf:li>graphic</rdf:li>
               <rdf:li>electronics industry</rdf:li>
               <rdf:li>digital</rdf:li>
               <rdf:li>technology</rdf:li>
               <rdf:li>computer</rdf:li>
               <rdf:li>circuit board</rdf:li>
               <rdf:li>illustration</rdf:li>
               <rdf:li>creativity</rdf:li>
               <rdf:li>connection</rdf:li>
               <rdf:li>computing</rdf:li>
               <rdf:li>backdrop</rdf:li>
               <rdf:li>science</rdf:li>
               <rdf:li>cover</rdf:li>
               <rdf:li>internal</rdf:li>
               <rdf:li>connect</rdf:li>
               <rdf:li>art</rdf:li>
               <rdf:li>industry</rdf:li>
               <rdf:li>conceptual</rdf:li>
               <rdf:li>construction</rdf:li>
               <rdf:li>textured</rdf:li>
               <rdf:li>computer chip</rdf:li>
               <rdf:li>mother board</rdf:li>
               <rdf:li>motherboard</rdf:li>
               <rdf:li>black</rdf:li>
               <rdf:li>blue</rdf:li>
            </rdf:Bag>
         </dc:subject>
         <xmp:MetadataDate>2016-05-12T13:12:28+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2016-05-12T13:12:28+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2016-05-12T13:12:28+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A8qYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqmVj5b8x&#xA;ahbi5sNLu7u2LmITwQSyIXAqU5IpHKm9MnDHKRqIJPk05tRjxDiySER3kgfeif8ABHnT/qwal/0i&#xA;T/8ANGW/lMv8yXyLi/ytpP8AVsf+nj+t3+CPOn/Vg1L/AKRJ/wDmjH8pl/mS+RX+VtJ/q2P/AE8f&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:b8e204e0-c909-304d-9dc0-ccd01048fc35</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:b8e204e0-c909-304d-9dc0-ccd01048fc35</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:ecbd178b-2f9e-45e6-8b30-128e0c9a59c2</stRef:instanceID>
            <stRef:documentID>xmp.did:11D623E8DFBDE511B2BBC0EB12123494</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F07763D45588E411BF89F345A28D8C9F</stEvt:instanceID>
                  <stEvt:when>2014-12-20T17:10:37+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:29845C695A88E411BF89F345A28D8C9F</stEvt:instanceID>
                  <stEvt:when>2014-12-20T17:19:01+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:2E845C695A88E411BF89F345A28D8C9F</stEvt:instanceID>
                  <stEvt:when>2014-12-20T17:33:07+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4365C60ACE89E4119A65C8F5B8A1FEA0</stEvt:instanceID>
                  <stEvt:when>2014-12-22T13:34:24+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0B5A99264D6BE51194FFADFDE0B012D7</stEvt:instanceID>
                  <stEvt:when>2015-10-05T13:38+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:11D623E8DFBDE511B2BBC0EB12123494</stEvt:instanceID>
                  <stEvt:when>2016-01-18T14:36:35+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:69FFA719F2BDE5119314DC75DE111CE2</stEvt:instanceID>
                  <stEvt:when>2016-01-18T16:45:21+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Bridge CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/metadata</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:C7809509F8BDE5119314DC75DE111CE2</stEvt:instanceID>
                  <stEvt:when>2016-01-18T17:27:51+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Bridge CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/metadata</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:b8e204e0-c909-304d-9dc0-ccd01048fc35</stEvt:instanceID>
                  <stEvt:when>2016-05-12T13:12:28+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>1200.000000</stDim:w>
            <stDim:h>1200.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=0 B=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
         <photoshop:Headline>abstract vector background with high tech circuit board</photoshop:Headline>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1200 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1200 li
1200 1200 li
1200 0 li
cp
clp
1200 1200 mo
0 1200 li
0 0 li
1200 0 li
1200 1200 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
0 0 0 rgb
f
225.564 1053.81 mo
226.914 1055.16 226.914 1057.35 225.564 1058.7 cv
224.213 1060.05 222.026 1060.05 220.676 1058.7 cv
219.324 1057.35 219.324 1055.16 220.676 1053.81 cv
222.026 1052.46 224.213 1052.46 225.564 1053.81 cv
cp
220.715 914.969 mo
219.363 913.619 219.363 911.432 220.715 910.08 cv
222.066 908.729 224.254 908.729 225.606 910.08 cv
226.955 911.432 226.955 913.619 225.606 914.969 cv
224.254 916.32 222.066 916.32 220.715 914.969 cv
cp
228.137 915.539 mo
230.139 912.383 230.778 908.617 228.137 905.975 cv
225.496 903.334 221.213 903.334 218.57 905.975 cv
215.932 908.617 216.914 912.193 218.57 915.539 cv
219.223 916.859 220.402 918.734 221.645 919.74 cv
221.645 1049.01 li
220.389 1050.01 219.191 1051.9 218.531 1053.24 cv
216.877 1056.58 215.891 1060.16 218.531 1062.8 cv
221.174 1065.45 225.455 1065.45 228.096 1062.8 cv
230.74 1060.16 230.1 1056.4 228.096 1053.24 cv
227.252 1051.9 226.201 1050.29 225.102 1049.29 cv
225.102 919.527 li
226.215 918.529 227.281 916.891 228.137 915.539 cv
cp
0 .862745 1 rgb
f
225.912 852.508 mo
227.264 851.156 229.451 851.156 230.801 852.508 cv
232.152 853.856 232.152 856.046 230.801 857.398 cv
229.451 858.746 227.264 858.746 225.912 857.398 cv
224.561 856.046 224.561 853.856 225.912 852.508 cv
cp
226.83 1131.05 mo
226.83 1109.03 li
226.83 1108.02 226.389 1107.05 225.617 1106.4 cv
210.828 1093.78 li
210.828 881.098 li
228.189 863.815 li
228.492 863.515 228.716 863.168 228.884 862.803 cv
230.481 862.383 232.12 859.885 233.334 857.967 cv
235.336 854.81 235.975 851.046 233.334 848.4 cv
230.694 845.76 226.41 845.76 223.768 848.4 cv
221.127 851.046 222.112 854.619 223.768 857.967 cv
223.837 858.106 223.912 858.252 223.992 858.401 cv
223.751 858.545 223.519 858.709 223.311 858.916 cv
204.932 877.211 li
204.281 877.859 203.912 878.74 203.912 879.662 cv
203.912 1095.37 li
203.912 1096.38 204.357 1097.35 205.127 1098 cv
219.916 1110.62 li
219.916 1131.05 li
219.916 1132.97 221.463 1134.51 223.373 1134.51 cv
225.283 1134.51 226.83 1132.97 226.83 1131.05 cv
cp
f
205.559 857.398 mo
204.207 856.046 204.207 853.856 205.559 852.508 cv
206.908 851.156 209.096 851.156 210.447 852.508 cv
211.797 853.856 211.797 856.046 210.447 857.398 cv
209.096 858.746 206.908 858.746 205.559 857.398 cv
cp
211.416 1134.51 mo
213.322 1134.51 214.873 1132.97 214.873 1131.05 cv
214.873 1115.51 li
214.873 1114.6 214.518 1113.73 213.881 1113.09 cv
199.168 1098.11 li
199.168 877.42 li
210.6 865.236 li
211.731 864.031 211.828 862.225 210.925 860.914 cv
211.675 860.002 212.379 858.914 212.979 857.967 cv
214.981 854.81 215.619 851.046 212.979 848.4 cv
212.523 847.945 212.016 847.573 211.48 847.275 cv
221.639 835.863 li
219.055 833.563 li
207.586 846.449 li
206.064 846.586 204.579 847.236 203.414 848.4 cv
200.772 851.046 201.758 854.619 203.414 857.967 cv
203.838 858.826 204.486 859.918 205.229 860.856 cv
193.19 873.69 li
192.589 874.332 192.253 875.176 192.253 876.053 cv
192.253 1099.52 li
192.253 1100.43 192.608 1101.29 193.243 1101.94 cv
207.957 1116.92 li
207.957 1131.05 li
207.957 1132.97 209.504 1134.51 211.416 1134.51 cv
cp
f
183.929 856.532 mo
182.579 855.182 182.579 852.994 183.929 851.643 cv
185.278 850.292 187.468 850.292 188.817 851.643 cv
190.167 852.994 190.167 855.182 188.817 856.532 cv
187.468 857.883 185.278 857.883 183.929 856.532 cv
cp
194.847 1127.61 mo
194.847 1120.26 li
194.847 1119.26 194.409 1118.3 193.647 1117.65 cv
183.61 1108.99 li
183.61 875.959 li
186.122 874.594 li
187.019 874.111 187.655 873.252 187.86 872.258 cv
189.833 862.708 li
190.033 861.742 189.81 860.797 189.296 860.051 cv
190.047 859.139 190.751 858.051 191.351 857.104 cv
193.024 854.463 193.738 851.402 192.387 848.924 cv
194.392 837.162 li
190.981 836.582 li
189.348 846.16 li
186.858 845.037 183.831 845.491 181.784 847.537 cv
179.144 850.181 180.128 853.757 181.784 857.104 cv
182.212 857.971 182.869 859.076 183.621 860.019 cv
183.356 860.394 183.162 860.828 183.064 861.307 cv
181.413 869.282 li
178.503 870.859 li
177.39 871.465 176.694 872.633 176.694 873.898 cv
176.694 1110.58 li
176.694 1111.59 177.132 1112.54 177.894 1113.2 cv
187.931 1121.85 li
187.931 1127.61 li
187.931 1129.52 189.48 1131.07 191.39 1131.07 cv
193.3 1131.07 194.847 1129.52 194.847 1127.61 cv
cp
f
165.962 866.703 mo
164.612 865.352 164.612 863.164 165.962 861.813 cv
167.312 860.463 169.501 860.463 170.853 861.813 cv
172.202 863.164 172.202 865.352 170.853 866.703 cv
169.501 868.053 167.312 868.053 165.962 866.703 cv
cp
172.118 1127.61 mo
172.118 871.555 li
172.118 870.924 171.936 870.34 171.64 869.83 cv
172.274 869.009 172.868 868.089 173.386 867.273 cv
175.384 864.116 176.026 860.351 173.386 857.707 cv
170.743 855.066 166.458 855.066 163.819 857.707 cv
161.177 860.351 162.161 863.927 163.819 867.273 cv
164.228 868.102 164.843 869.15 165.553 870.065 cv
165.335 870.518 165.202 871.019 165.202 871.555 cv
165.202 1127.61 li
165.202 1129.52 166.749 1131.07 168.659 1131.07 cv
170.567 1131.07 172.118 1129.52 172.118 1127.61 cv
cp
f
149.353 857.398 mo
148.003 856.046 148.003 853.856 149.353 852.508 cv
150.704 851.156 152.892 851.156 154.241 852.508 cv
155.593 853.856 155.593 856.046 154.241 857.398 cv
152.892 858.746 150.704 858.746 149.353 857.398 cv
cp
155.509 1132.51 mo
155.509 865.102 li
155.509 863.769 154.743 862.623 153.636 862.045 cv
154.787 861.057 155.895 859.359 156.776 857.967 cv
158.308 855.553 159.035 852.785 158.114 850.432 cv
162.431 844.967 li
162.431 821.6 li
158.974 821.6 li
158.974 843.765 li
155.893 847.664 li
153.252 845.795 149.575 846.036 147.208 848.4 cv
144.569 851.046 145.554 854.619 147.208 857.967 cv
147.857 859.281 149.03 861.146 150.267 862.154 cv
149.267 862.762 148.593 863.85 148.593 865.102 cv
148.593 1132.51 li
148.593 1134.42 150.142 1135.97 152.052 1135.97 cv
153.96 1135.97 155.509 1134.42 155.509 1132.51 cv
cp
f
132.878 869.119 mo
132.716 867.219 134.128 865.544 136.028 865.382 cv
137.933 865.22 139.605 866.632 139.767 868.537 cv
139.931 870.441 138.519 872.113 136.614 872.275 cv
134.712 872.434 133.038 871.025 132.878 869.119 cv
cp
141.485 1135.97 mo
143.394 1135.97 144.942 1134.42 144.942 1132.51 cv
144.942 875.014 li
144.942 873.619 144.112 872.426 142.924 871.877 cv
142.882 870.377 142.32 868.5 141.837 866.969 cv
140.829 863.771 138.738 861.102 135.634 860.81 cv
135.634 838.027 li
132.175 838.027 li
132.175 861.438 li
132.194 861.438 li
129.723 862.615 128.111 865.223 128.356 868.11 cv
128.673 871.836 132.042 873.389 135.671 874.279 cv
136.345 874.445 137.19 874.602 138.061 874.69 cv
138.051 874.797 138.028 874.902 138.028 875.014 cv
138.028 1132.51 li
138.028 1134.42 139.573 1135.97 141.485 1135.97 cv
cp
f
112.362 857.049 mo
111.013 855.698 111.013 853.51 112.362 852.159 cv
113.712 850.808 115.901 850.808 117.253 852.159 cv
118.601 853.51 118.601 855.698 117.253 857.049 cv
115.901 858.399 113.712 858.399 112.362 857.049 cv
cp
133.903 1131.05 mo
133.903 892.504 li
133.903 891.557 133.513 890.646 132.825 889.992 cv
118.345 876.293 li
118.345 862.869 li
118.345 862.06 118.055 861.326 117.588 860.736 cv
118.392 859.793 119.147 858.627 119.784 857.619 cv
121.784 854.462 122.427 850.697 119.784 848.053 cv
117.142 845.412 112.86 845.412 110.22 848.053 cv
107.577 850.697 108.564 854.273 110.22 857.619 cv
110.676 858.543 111.39 859.738 112.202 860.718 cv
111.727 861.31 111.431 862.052 111.431 862.869 cv
111.431 877.783 li
111.431 878.734 111.821 879.643 112.511 880.295 cv
126.989 893.994 li
126.989 1131.05 li
126.989 1132.97 128.538 1134.51 130.446 1134.51 cv
132.356 1134.51 133.903 1132.97 133.903 1131.05 cv
cp
f
90.3037 854.36 mo
90.1416 852.459 91.5537 850.785 93.4541 850.623 cv
94.1709 850.563 94.8535 850.725 95.4365 851.051 cv
95.4365 851.281 li
95.7685 851.281 li
96.5537 851.852 97.1035 852.733 97.1924 853.775 cv
97.2676 854.652 96.999 855.471 96.5137 856.123 cv
96.4521 856.199 96.3906 856.273 96.3369 856.354 cv
95.7685 856.996 94.9658 857.435 94.042 857.514 cv
92.1377 857.674 90.4658 856.265 90.3037 854.36 cv
cp
122.667 1134.51 mo
124.577 1134.51 126.124 1132.97 126.124 1131.05 cv
126.124 899.69 li
126.124 898.705 125.702 897.766 124.966 897.107 cv
108.837 882.729 li
108.837 865.102 li
108.837 864.244 108.519 863.421 107.94 862.782 cv
101.765 855.953 li
101.284 855.424 100.677 855.076 100.029 854.917 cv
99.8135 853.989 99.5273 853.047 99.2627 852.21 cv
99.1543 851.865 99.0293 851.529 98.8955 851.199 cv
98.8955 838.027 li
95.4365 838.027 li
95.4365 846.82 li
94.4346 846.231 93.2744 845.93 91.9521 846.041 cv
88.2314 846.357 85.4678 849.63 85.7842 853.352 cv
86.1006 857.075 89.4678 858.629 93.0967 859.521 cv
93.956 859.732 95.0928 859.928 96.2041 859.986 cv
96.3262 860.199 96.4658 860.404 96.6377 860.595 cv
101.921 866.435 li
101.921 884.279 li
101.921 885.266 102.341 886.203 103.079 886.863 cv
119.208 901.24 li
119.208 1131.05 li
119.208 1132.97 120.757 1134.51 122.667 1134.51 cv
cp
f
225.422 836.873 mo
220.139 836.873 215.854 832.592 215.854 827.307 cv
215.854 822.025 220.139 817.74 225.422 817.74 cv
230.703 817.74 234.987 822.025 234.987 827.307 cv
234.987 832.592 230.703 836.873 225.422 836.873 cv
cp
1 1 1 rgb
f
160.702 822.523 mo
155.419 822.523 151.136 818.24 151.136 812.953 cv
151.136 807.674 155.419 803.389 160.702 803.389 cv
165.985 803.389 170.269 807.674 170.269 812.953 cv
170.269 818.24 165.985 822.523 160.702 822.523 cv
cp
f
191.39 838.027 mo
186.106 838.027 181.823 833.744 181.823 828.462 cv
181.823 823.176 186.106 818.896 191.39 818.896 cv
196.671 818.896 200.955 823.176 200.955 828.462 cv
200.955 833.744 196.671 838.027 191.39 838.027 cv
cp
f
130.446 840.731 mo
125.163 840.731 120.88 836.45 120.88 831.166 cv
120.88 825.885 125.163 821.6 130.446 821.6 cv
135.73 821.6 140.013 825.885 140.013 831.166 cv
140.013 836.45 135.73 840.731 130.446 840.731 cv
cp
f
96.5537 840.731 mo
91.2705 840.731 86.9873 836.45 86.9873 831.166 cv
86.9873 825.885 91.2705 821.6 96.5537 821.6 cv
101.837 821.6 106.118 825.885 106.118 831.166 cv
106.118 836.45 101.837 840.731 96.5537 840.731 cv
cp
f
335.915 164.936 mo
334.003 164.936 332.456 163.391 332.456 161.48 cv
332.456 159.567 334.003 158.021 335.915 158.021 cv
337.823 158.021 339.372 159.567 339.372 161.48 cv
339.372 163.391 337.823 164.936 335.915 164.936 cv
cp
155.802 82.2373 mo
309.976 82.2373 li
348.158 120.982 li
348.158 145.996 li
339.804 155.305 li
338.229 155.177 336.159 155.643 334.802 156.104 cv
331.263 157.299 328.036 159.129 328.036 162.865 cv
328.036 166.602 331.065 169.63 334.802 169.63 cv
338.538 169.63 340.749 166.512 341.567 162.865 cv
341.927 161.265 342.333 159.298 342.223 157.787 cv
351.615 147.32 li
351.615 119.564 li
311.425 78.7803 li
154.401 78.7803 li
134.806 97.7979 li
89.958 97.7979 li
89.958 101.256 li
136.208 101.256 li
155.802 82.2373 li
cp
0 .862745 1 rgb
f
337.12 129.158 mo
338.457 130.521 338.433 132.711 337.069 134.047 cv
335.704 135.384 333.517 135.36 332.181 133.996 cv
330.845 132.633 330.866 130.443 332.23 129.106 cv
333.595 127.77 335.784 127.793 337.12 129.158 cv
cp
162.716 92.0352 mo
304.231 92.0352 li
333.175 120.423 li
333.175 124.372 li
331.935 125.372 330.753 127.213 330.095 128.512 cv
328.404 131.846 327.379 135.409 329.995 138.078 cv
332.608 140.749 336.892 140.793 339.562 138.18 cv
342.23 135.563 341.626 131.789 339.659 128.611 cv
338.811 127.24 337.748 125.573 336.634 124.565 cv
336.634 118.972 li
305.642 88.5781 li
161.318 88.5781 li
136.25 112.848 li
89.958 112.848 li
89.958 116.306 li
137.647 116.306 li
162.716 92.0352 li
cp
f
333.224 194.041 mo
331.314 194.041 329.766 192.492 329.766 190.583 cv
329.766 188.672 331.314 187.125 333.224 187.125 cv
335.134 187.125 336.681 188.672 336.681 190.583 cv
336.681 192.492 335.134 194.041 333.224 194.041 cv
cp
144.827 73.8843 mo
313.728 73.8843 li
357.956 118.396 li
357.956 161.773 li
336.948 184.393 li
335.395 184.311 333.42 184.762 332.112 185.203 cv
328.573 186.402 325.347 188.232 325.347 191.967 cv
325.347 195.705 328.376 198.734 332.112 198.734 cv
335.849 198.734 338.059 195.614 338.878 191.967 cv
339.253 190.301 339.675 188.241 339.515 186.71 cv
361.413 163.131 li
361.413 116.969 li
315.165 70.4263 li
144.054 70.4263 li
133.618 75.3462 li
135.093 78.4731 li
144.827 73.8843 li
cp
f
110.993 80.0161 mo
112.344 78.6655 114.532 78.6655 115.883 80.0161 cv
117.235 81.3652 117.235 83.5547 115.883 84.9038 cv
114.532 86.2549 112.344 86.2549 110.993 84.9038 cv
109.645 83.5547 109.645 81.3652 110.993 80.0161 cv
cp
116.455 87.438 mo
118.013 86.4507 119.957 85.1826 120.857 83.8848 cv
125.086 83.8252 li
125.039 80.3672 li
120.193 80.4355 li
119.142 79.3867 117.593 78.4331 116.455 77.8721 cv
113.106 76.2139 109.531 75.2295 106.888 77.8721 cv
104.245 80.5122 104.249 84.7939 106.89 87.438 cv
109.531 90.0786 113.298 89.437 116.455 87.438 cv
cp
f
395.77 230.435 mo
393.89 230.768 392.096 229.51 391.765 227.633 cv
391.435 225.751 392.687 223.958 394.569 223.625 cv
396.45 223.293 398.243 224.549 398.576 226.43 cv
398.907 228.311 397.651 230.104 395.77 230.435 cv
cp
395.554 221.223 mo
393.985 221.149 392.073 221.085 390.624 221.403 cv
383.108 216.985 li
381.356 219.963 li
388.401 224.107 li
388.503 225.707 389.356 227.76 390.066 229.061 cv
391.859 232.336 394.225 235.196 397.903 234.545 cv
401.583 233.896 404.039 230.389 403.392 226.711 cv
402.743 223.029 399.284 221.395 395.554 221.223 cv
cp
f
393.837 248.21 mo
395.746 248.21 397.294 249.758 397.294 251.668 cv
397.294 253.579 395.746 255.125 393.837 255.125 cv
391.927 255.125 390.379 253.579 390.379 251.668 cv
390.379 249.758 391.927 248.21 393.837 248.21 cv
cp
367.464 168.957 mo
350.464 187.459 li
350.464 223.226 li
365.248 239.855 li
379.968 239.855 li
387.523 247.95 li
387.658 247.824 li
387.543 249.395 388.005 251.436 388.459 252.78 cv
389.656 256.318 391.487 259.545 395.222 259.545 cv
398.959 259.545 401.987 256.517 401.987 252.78 cv
401.987 249.044 398.87 246.832 395.222 246.015 cv
393.519 245.633 391.403 245.197 389.863 245.389 cv
381.472 236.398 li
366.8 236.398 li
353.922 221.908 li
353.922 188.807 li
370.922 170.304 li
370.922 113.801 li
323.167 65.5464 li
320.709 67.978 li
367.464 115.223 li
367.464 168.957 li
cp
f
363.995 194.074 mo
362.084 194.074 360.537 192.527 360.537 190.617 cv
360.537 188.707 362.084 187.158 363.995 187.158 cv
365.906 187.158 367.452 188.707 367.452 190.617 cv
367.452 192.527 365.906 194.074 363.995 194.074 cv
cp
376.976 172.059 mo
365.893 184.527 li
364.806 184.681 363.71 184.96 362.884 185.24 cv
359.345 186.436 356.119 188.268 356.119 192.004 cv
356.119 195.74 359.147 198.77 362.884 198.77 cv
366.618 198.77 368.83 195.651 369.647 192.004 cv
370.162 189.716 370.776 186.681 369.814 185.317 cv
380.433 173.375 li
380.433 110.916 li
335.314 65.5435 li
332.861 67.9819 li
376.976 112.345 li
376.976 172.059 li
cp
f
385.329 177.245 mo
379.583 183.696 li
379.071 204.764 li
377.528 207.72 li
380.595 209.32 li
382.509 205.651 li
383.011 185.049 li
388.786 178.563 li
388.786 107.752 li
347.085 65.5464 li
344.626 67.978 li
385.329 109.17 li
385.329 177.245 li
cp
f
398.522 189.907 mo
399.859 191.271 399.835 193.459 398.471 194.797 cv
397.106 196.132 394.919 196.11 393.581 194.746 cv
392.244 193.382 392.269 191.19 393.632 189.855 cv
394.996 188.52 397.185 188.543 398.522 189.907 cv
cp
394.55 185.14 mo
393.319 186.145 392.149 187.972 391.495 189.263 cv
389.804 192.594 388.781 196.158 391.396 198.828 cv
394.009 201.498 398.292 201.543 400.963 198.928 cv
403.63 196.314 403.026 192.538 401.062 189.36 cv
400.205 187.979 399.132 186.297 398.009 185.291 cv
398.009 105.163 li
359.192 65.5537 li
356.724 67.9717 li
394.55 106.574 li
394.55 185.14 li
cp
f
305.271 195.271 mo
303.359 195.271 301.814 193.723 301.814 191.814 cv
301.814 189.904 303.359 188.355 305.271 188.355 cv
307.18 188.355 308.729 189.904 308.729 191.814 cv
308.729 193.723 307.18 195.271 305.271 195.271 cv
cp
171.646 100.968 mo
294.694 100.968 li
317.329 124.359 li
317.329 176.629 li
308.643 185.609 li
307.151 185.605 305.368 186.026 304.158 186.436 cv
300.618 187.633 297.394 189.465 297.394 193.199 cv
297.394 196.936 300.422 199.965 304.158 199.965 cv
304.547 199.965 304.915 199.924 305.271 199.859 cv
305.271 208.51 li
308.729 208.51 li
308.729 198.137 li
308.45 198.137 li
309.673 196.888 310.493 195.119 310.923 193.199 cv
311.325 191.41 311.796 189.155 311.524 187.604 cv
320.786 178.027 li
320.786 122.957 li
296.16 97.5112 li
170.251 97.5112 li
144.896 121.929 li
89.958 121.929 li
89.958 125.387 li
146.29 125.387 li
171.646 100.968 li
cp
f
303.531 128.336 mo
305.44 128.336 306.987 129.885 306.987 131.795 cv
306.987 133.706 305.44 135.252 303.531 135.252 cv
301.62 135.252 300.072 133.706 300.072 131.795 cv
300.072 129.885 301.62 128.336 303.531 128.336 cv
cp
213.208 111.054 mo
279.486 111.054 li
297.396 127.468 li
297.125 129.075 297.651 131.423 298.153 132.905 cv
299.35 136.445 301.181 139.672 304.916 139.672 cv
308.652 139.672 311.681 136.644 311.681 132.905 cv
311.681 129.171 308.563 126.959 304.916 126.143 cv
303.083 125.729 300.762 125.244 299.208 125.56 cv
299.767 124.949 li
280.83 107.597 li
211.655 107.597 li
190.382 131.511 li
89.958 131.511 li
89.958 134.969 li
191.935 134.969 li
213.208 111.054 li
cp
f
270.788 126.607 mo
272.697 126.607 274.245 128.156 274.245 130.065 cv
274.245 131.977 272.697 133.523 270.788 133.523 cv
268.876 133.523 267.33 131.977 267.33 130.065 cv
267.33 128.156 268.876 126.607 270.788 126.607 cv
cp
95.0976 143.326 mo
207.908 143.326 li
231.881 119.697 li
257.887 119.697 li
264.651 125.738 li
264.381 127.346 264.907 129.694 265.41 131.177 cv
266.607 134.717 268.437 137.943 272.173 137.943 cv
275.909 137.943 278.939 134.915 278.939 131.177 cv
278.939 127.441 275.819 125.23 272.173 124.413 cv
270.746 124.092 269.028 123.734 267.601 123.736 cv
259.207 116.24 li
230.463 116.24 li
206.49 139.868 li
93.5107 139.868 li
88.6474 145.532 li
91.2705 147.785 li
95.0976 143.326 li
cp
f
114.335 171.359 mo
255.25 171.277 li
273.763 189.385 li
276.181 186.912 li
256.658 167.817 li
112.869 167.903 li
88.7158 192.836 li
91.2002 195.242 li
114.335 171.359 li
cp
f
329.772 225.555 mo
330.171 223.686 332.008 222.496 333.875 222.894 cv
335.742 223.29 336.935 225.127 336.535 226.994 cv
336.141 228.863 334.302 230.053 332.437 229.656 cv
330.569 229.26 329.376 227.423 329.772 225.555 cv
cp
262.869 191.955 mo
249.503 177.559 li
119.086 177.559 li
88.7471 207.284 li
91.1689 209.754 li
120.497 181.017 li
247.993 181.017 li
259.411 193.314 li
259.411 209.226 li
288.363 238.701 li
322.655 238.701 li
329.407 231.93 li
330.665 232.107 332.106 232.106 333.337 232.093 cv
337.069 232.051 340.581 230.537 341.359 226.883 cv
342.138 223.23 339.804 219.637 336.151 218.859 cv
332.497 218.083 330.034 220.856 328.128 224.07 cv
327.169 225.679 325.928 228.488 326.34 230.109 cv
321.221 235.243 li
289.815 235.243 li
262.869 207.811 li
262.869 191.955 li
cp
f
241.239 191.883 mo
242.591 190.534 244.781 190.534 246.13 191.883 cv
247.48 193.233 247.48 195.422 246.13 196.773 cv
244.781 198.123 242.591 198.123 241.239 196.773 cv
239.888 195.422 239.888 193.233 241.239 191.883 cv
cp
117.767 195.768 mo
236.438 195.805 li
237.435 197.061 239.334 198.258 240.668 198.916 cv
244.017 200.573 247.593 201.559 250.235 198.916 cv
252.878 196.275 252.876 191.992 250.233 189.35 cv
247.593 186.711 243.825 187.352 240.668 189.35 cv
239.335 190.196 237.718 191.248 236.715 192.347 cv
116.353 192.311 li
88.7451 219.467 li
91.1709 221.932 li
117.767 195.768 li
cp
f
327.017 252.934 mo
328.367 251.584 330.556 251.584 331.905 252.934 cv
333.255 254.285 333.255 256.475 331.905 257.823 cv
330.556 259.174 328.367 259.174 327.017 257.823 cv
325.665 256.475 325.665 254.285 327.017 252.934 cv
cp
99.5283 231.387 mo
97.6162 231.387 96.0703 229.839 96.0703 227.93 cv
96.0703 226.019 97.6162 224.471 99.5283 224.471 cv
101.439 224.471 102.985 226.019 102.985 227.93 cv
102.985 229.839 101.439 231.387 99.5283 231.387 cv
cp
117.253 208.159 mo
102.616 221.734 li
101.188 221.779 99.5517 222.167 98.417 222.551 cv
94.8779 223.748 91.6514 225.579 91.6514 229.314 cv
91.6514 233.052 94.6807 236.08 98.417 236.08 cv
102.151 236.08 104.363 232.961 105.181 229.314 cv
105.6 227.457 106.089 225.102 105.745 223.548 cv
118.61 211.616 li
181.788 211.616 li
207.003 234.956 li
230.962 234.956 li
252.933 256.855 li
322.212 256.855 li
323.21 258.113 325.11 259.31 326.442 259.967 cv
329.792 261.623 333.368 262.609 336.013 259.967 cv
338.652 257.327 338.651 253.043 336.009 250.401 cv
333.368 247.761 329.601 248.402 326.442 250.401 cv
325.109 251.247 323.491 252.299 322.489 253.398 cv
254.362 253.398 li
232.392 231.498 li
208.357 231.498 li
183.142 208.159 li
117.253 208.159 li
cp
f
131.384 236.307 mo
130.011 234.98 129.972 232.792 131.3 231.418 cv
132.626 230.043 134.814 230.006 136.189 231.333 cv
137.564 232.658 137.601 234.848 136.272 236.223 cv
134.946 237.595 132.759 237.635 131.384 236.307 cv
cp
129.449 293.952 mo
128.098 295.302 125.91 295.302 124.56 293.952 cv
123.207 292.602 123.207 290.414 124.56 289.063 cv
125.91 287.714 128.098 287.714 129.449 289.063 cv
130.8 290.414 130.8 292.602 129.449 293.952 cv
cp
89.958 293.16 mo
119.728 293.16 li
119.827 293.074 li
120.843 294.298 122.687 295.453 123.987 296.096 cv
127.335 297.753 130.911 298.738 133.556 296.096 cv
136.195 293.454 136.195 289.172 133.552 286.53 cv
132.341 285.318 130.892 284.804 129.375 284.788 cv
136.084 278.965 li
136.084 240.373 li
137.052 239.311 137.913 237.844 138.428 236.754 cv
140.024 233.377 140.948 229.787 138.259 227.189 cv
135.572 224.596 131.291 224.671 128.692 227.355 cv
126.1 230.045 126.808 233.801 128.86 236.921 cv
129.91 238.516 131.269 240.516 132.626 241.347 cv
132.626 277.388 li
118.438 289.703 li
89.958 289.703 li
89.958 293.16 li
cp
f
151.759 232.025 mo
153.083 230.65 155.272 230.613 156.646 231.94 cv
158.021 233.266 158.06 235.456 156.732 236.83 cv
155.405 238.203 153.218 238.242 151.843 236.914 cv
150.469 235.588 150.432 233.399 151.759 232.025 cv
cp
156.056 281.99 mo
157.429 283.315 157.467 285.506 156.142 286.879 cv
154.814 288.254 152.626 288.291 151.253 286.964 cv
149.878 285.637 149.839 283.449 151.168 282.074 cv
152.493 280.702 154.681 280.663 156.056 281.99 cv
cp
151.644 277.624 mo
150.562 278.693 149.579 280.347 149.013 281.541 cv
147.416 284.918 146.491 288.512 149.181 291.105 cv
151.866 293.701 156.148 293.627 158.745 290.94 cv
161.342 288.251 160.634 284.496 158.578 281.374 cv
157.604 279.894 156.362 278.065 155.103 277.145 cv
155.103 242.135 li
156.603 241.413 158.123 238.975 158.886 237.363 cv
160.484 233.985 161.405 230.395 158.718 227.798 cv
156.03 225.204 151.749 225.278 149.151 227.963 cv
146.558 230.652 147.266 234.409 149.32 237.529 cv
150.001 238.564 150.812 239.773 151.669 240.721 cv
151.644 240.721 li
151.644 277.624 li
cp
f
424.989 250.182 mo
426.897 250.182 428.446 251.73 428.446 253.639 cv
428.446 255.551 426.897 257.098 424.989 257.098 cv
423.077 257.098 421.531 255.551 421.531 253.639 cv
421.531 251.73 423.077 250.182 424.989 250.182 cv
cp
403.771 182.502 mo
415.606 194.514 li
409.242 212.188 li
409.543 240.117 li
418.845 249.394 li
418.605 250.998 419.117 253.292 419.611 254.752 cv
420.808 258.291 422.638 261.518 426.374 261.518 cv
430.11 261.518 433.14 258.488 433.14 254.752 cv
433.14 251.016 430.02 248.804 426.374 247.986 cv
424.716 247.615 422.671 247.194 421.143 247.348 cv
421.416 247.073 li
412.984 238.667 li
412.708 212.774 li
419.597 193.635 li
407.229 181.084 li
407.229 100.823 li
371.55 65.5332 li
369.118 67.9912 li
403.771 102.269 li
403.771 182.502 li
cp
f
434.261 224.238 mo
435.634 225.565 435.673 227.754 434.345 229.128 cv
433.019 230.502 430.83 230.541 429.456 229.213 cv
428.081 227.887 428.044 225.697 429.372 224.323 cv
430.698 222.951 432.886 222.913 434.261 224.238 cv
cp
412.128 159.271 mo
425.525 177.029 li
430.282 182.445 li
430.282 219.485 li
429.032 220.499 427.858 222.436 427.216 223.789 cv
425.62 227.168 424.696 230.761 427.386 233.355 cv
430.072 235.951 434.355 235.877 436.952 233.189 cv
439.545 230.5 438.837 226.744 436.783 223.625 cv
435.921 222.313 434.848 220.726 433.739 219.741 cv
433.739 181.142 li
428.204 174.848 li
415.586 158.113 li
415.586 98.5371 li
383.472 65.5566 li
380.993 67.9678 li
412.128 99.9419 li
412.128 159.271 li
cp
f
443.621 297.862 mo
444.992 299.188 445.031 301.377 443.705 302.752 cv
442.379 304.127 440.19 304.165 438.815 302.836 cv
437.441 301.511 437.403 299.321 438.731 297.947 cv
440.057 296.574 442.247 296.537 443.621 297.862 cv
cp
434.769 79.9351 mo
442.384 87.2964 li
442.384 140.018 li
440.376 158.504 li
439.802 292.982 li
438.493 293.953 437.245 296.003 436.577 297.412 cv
434.98 300.793 434.057 304.385 436.744 306.978 cv
439.431 309.574 443.714 309.5 446.311 306.813 cv
448.905 304.125 448.196 300.366 446.144 297.246 cv
445.321 295.997 444.309 294.501 443.257 293.511 cv
443.823 158.787 li
445.831 140.297 li
445.841 85.8267 li
436.167 76.4771 li
406.482 76.4771 li
395.032 65.5132 li
392.641 68.0122 li
405.095 79.9351 li
434.769 79.9351 li
cp
f
214.048 214.537 mo
215.399 213.186 217.587 213.186 218.939 214.537 cv
220.29 215.888 220.29 218.076 218.939 219.427 cv
217.587 220.777 215.399 220.777 214.048 219.427 cv
212.698 218.076 212.698 215.888 214.048 214.537 cv
cp
219.511 221.959 mo
221.609 220.631 224.414 218.789 224.414 217.057 cv
224.414 215.327 221.394 213.325 219.511 212.393 cv
216.163 210.738 212.587 209.752 209.942 212.393 cv
207.302 215.037 207.302 219.318 209.946 221.959 cv
212.587 224.602 216.356 223.96 219.511 221.959 cv
cp
f
272.932 164.178 mo
271.581 165.528 269.394 165.528 268.042 164.178 cv
266.69 162.826 266.69 160.639 268.042 159.287 cv
269.394 157.938 271.581 157.938 272.932 159.287 cv
274.282 160.639 274.282 162.826 272.932 164.178 cv
cp
267.47 156.756 mo
266.137 157.6 264.521 158.651 263.519 159.75 cv
105.4 159.75 li
88.7363 176.393 li
91.1807 178.839 li
106.832 163.208 li
263.24 163.208 li
264.237 164.465 266.136 165.662 267.47 166.321 cv
270.817 167.977 274.394 168.963 277.038 166.321 cv
279.679 163.679 279.679 159.396 277.034 156.756 cv
274.394 154.113 270.626 154.754 267.47 156.756 cv
cp
f
220.343 242.85 mo
221.692 241.5 223.882 241.5 225.232 242.85 cv
226.582 244.199 226.582 246.39 225.232 247.739 cv
223.882 249.09 221.692 249.09 220.343 247.739 cv
218.989 246.39 218.989 244.199 220.343 242.85 cv
cp
119.024 230.865 mo
117.114 230.865 115.567 229.317 115.567 227.408 cv
115.567 225.498 117.114 223.949 119.024 223.949 cv
120.935 223.949 122.483 225.498 122.483 227.408 cv
122.483 229.317 120.935 230.865 119.024 230.865 cv
cp
229.339 249.883 mo
231.98 247.24 231.978 242.959 229.335 240.316 cv
226.694 237.675 222.927 238.316 219.769 240.316 cv
218.321 241.234 216.534 242.398 215.567 243.601 cv
190.544 243.601 li
158.08 213.921 li
130.513 213.921 li
122.566 221.202 li
121.044 221.164 119.168 221.605 117.912 222.03 cv
114.372 223.227 111.147 225.057 111.147 228.793 cv
111.147 232.529 114.177 235.559 117.912 235.559 cv
121.648 235.559 123.86 232.44 124.679 228.793 cv
125.064 227.073 125.505 224.932 125.298 223.389 cv
131.856 217.379 li
156.735 217.379 li
189.199 247.059 li
215.784 247.059 li
216.825 248.207 218.538 249.274 219.769 249.883 cv
223.118 251.539 226.694 252.525 229.339 249.883 cv
cp
f
249.8 132.703 mo
249.403 134.57 247.565 135.762 245.698 135.365 cv
243.831 134.969 242.64 133.131 243.036 131.264 cv
243.433 129.395 245.271 128.205 247.14 128.602 cv
249.007 128.998 250.196 130.836 249.8 132.703 cv
cp
249.413 124.568 mo
245.761 123.789 243.298 126.564 241.391 129.777 cv
240.623 131.07 239.679 133.134 239.542 134.739 cv
222.743 149.377 li
99.8955 149.377 li
88.7002 161.265 li
91.2158 163.635 li
101.388 152.834 li
224.04 152.834 li
241.694 137.45 li
243.129 137.815 245.036 137.818 246.601 137.801 cv
250.335 137.76 253.845 136.246 254.623 132.592 cv
255.401 128.938 253.071 125.347 249.413 124.568 cv
cp
f
301.112 162.594 mo
301.509 160.725 303.346 159.533 305.215 159.93 cv
307.083 160.328 308.272 162.165 307.876 164.031 cv
307.48 165.898 305.642 167.092 303.774 166.692 cv
301.907 166.296 300.716 164.461 301.112 162.594 cv
cp
287.161 182.997 mo
300.784 168.972 li
302.033 169.144 303.458 169.145 304.677 169.131 cv
308.411 169.088 311.921 167.575 312.7 163.92 cv
313.478 160.267 311.146 156.674 307.489 155.896 cv
303.837 155.119 301.374 157.894 299.466 161.105 cv
298.502 162.731 297.251 165.574 297.696 167.188 cv
284.68 180.588 li
287.161 182.997 li
cp
f
141.108 81.7739 mo
141.108 87.0264 136.855 91.2822 131.6 91.2822 cv
126.349 91.2822 122.091 87.0264 122.091 81.7739 cv
122.091 76.521 126.349 72.2646 131.6 72.2646 cv
136.855 72.2646 141.108 76.521 141.108 81.7739 cv
1 1 1 rgb
f
210.425 123.658 mo
210.425 128.91 206.169 133.168 200.917 133.168 cv
195.665 133.168 191.407 128.91 191.407 123.658 cv
191.407 118.406 195.665 114.149 200.917 114.149 cv
206.169 114.149 210.425 118.406 210.425 123.658 cv
f
431.04 170.676 mo
431.04 175.928 426.782 180.185 421.531 180.185 cv
416.276 180.185 412.022 175.928 412.022 170.676 cv
412.022 165.423 416.276 161.167 421.531 161.167 cv
426.782 161.167 431.04 165.423 431.04 170.676 cv
f
242.122 146.658 mo
242.122 151.911 237.864 156.168 232.614 156.168 cv
227.36 156.168 223.105 151.911 223.105 146.658 cv
223.105 141.408 227.36 137.15 232.614 137.15 cv
237.864 137.15 242.122 141.408 242.122 146.658 cv
f
289.954 186.641 mo
289.954 191.893 285.697 196.149 280.445 196.149 cv
275.192 196.149 270.937 191.893 270.937 186.641 cv
270.937 181.389 275.192 177.132 280.445 177.132 cv
285.697 177.132 289.954 181.389 289.954 186.641 cv
f
193.956 239.393 mo
193.956 244.645 189.699 248.902 184.447 248.902 cv
179.194 248.902 174.939 244.645 174.939 239.393 cv
174.939 234.139 179.194 229.885 184.447 229.885 cv
189.699 229.885 193.956 234.139 193.956 239.393 cv
f
317.463 215.779 mo
317.463 221.034 313.206 225.289 307.953 225.289 cv
302.701 225.289 298.444 221.034 298.444 215.779 cv
298.444 210.529 302.701 206.271 307.953 206.271 cv
313.206 206.271 317.463 210.529 317.463 215.779 cv
f
386.626 215.779 mo
386.626 221.034 382.371 225.289 377.117 225.289 cv
371.866 225.289 367.607 221.034 367.607 215.779 cv
367.607 210.529 371.866 206.271 377.117 206.271 cv
382.371 206.271 386.626 210.529 386.626 215.779 cv
f
426.112 203.323 mo
426.112 208.574 421.855 212.832 416.605 212.832 cv
411.351 212.832 407.095 208.574 407.095 203.323 cv
407.095 198.07 411.351 193.814 416.605 193.814 cv
421.855 193.814 426.112 198.07 426.112 203.323 cv
f
453.619 148.742 mo
453.619 153.994 449.364 158.252 444.11 158.252 cv
438.86 158.252 434.603 153.994 434.603 148.742 cv
434.603 143.49 438.86 139.233 444.11 139.233 cv
449.364 139.233 453.619 143.49 453.619 148.742 cv
f
242.772 218.498 mo
242.772 223.748 238.513 228.008 233.263 228.008 cv
228.009 228.008 223.753 223.748 223.753 218.498 cv
223.753 213.244 228.009 208.988 233.263 208.988 cv
238.513 208.988 242.772 213.244 242.772 218.498 cv
f
289.954 227.031 mo
289.954 232.282 285.697 236.539 280.445 236.539 cv
275.192 236.539 270.937 232.282 270.937 227.031 cv
270.937 221.777 275.192 217.523 280.445 217.523 cv
285.697 217.523 289.954 221.777 289.954 227.031 cv
f
439.501 120.298 mo
439.501 125.551 435.245 129.808 429.993 129.808 cv
424.739 129.808 420.483 125.551 420.483 120.298 cv
420.483 115.046 424.739 110.79 429.993 110.79 cv
435.245 110.79 439.501 115.046 439.501 120.298 cv
f
646.462 201.735 mo
645.111 203.088 642.923 203.088 641.574 201.735 cv
640.226 200.386 640.226 198.196 641.574 196.846 cv
642.923 195.495 645.111 195.495 646.462 196.846 cv
647.818 198.196 647.818 200.386 646.462 201.735 cv
cp
651.267 200.767 mo
659.486 200.767 li
659.486 197.31 li
650.99 197.31 li
649.988 196.21 648.371 195.158 647.037 194.314 cv
643.878 192.314 640.111 191.671 637.47 194.314 cv
634.83 196.956 634.826 201.237 637.466 203.88 cv
640.111 206.523 643.687 205.536 647.037 203.88 cv
648.369 203.221 650.269 202.023 651.267 200.767 cv
cp
0 .862745 1 rgb
f
598.837 268.882 mo
597.482 270.226 595.296 270.221 593.948 268.864 cv
592.603 267.511 592.61 265.319 593.965 263.976 cv
595.318 262.63 597.507 262.636 598.854 263.989 cv
600.202 265.346 600.194 267.536 598.837 268.882 cv
cp
599.435 261.46 mo
596.28 259.448 592.518 258.796 589.868 261.431 cv
587.218 264.06 587.2 268.347 589.835 270.995 cv
592.473 273.647 596.048 272.671 599.404 271.026 cv
600.498 270.49 601.974 269.593 603.023 268.597 cv
611.011 268.597 li
611.011 265.14 li
603.9 265.14 li
603.043 263.8 601.035 262.479 599.435 261.46 cv
cp
f
528.108 262.733 mo
529.463 261.388 531.651 261.397 532.998 262.751 cv
534.346 264.104 534.338 266.292 532.981 267.64 cv
531.626 268.983 529.439 268.979 528.092 267.625 cv
526.749 266.269 526.755 264.081 528.108 262.733 cv
cp
659.068 257.245 mo
660.351 255.831 662.535 255.718 663.949 257.001 cv
665.369 258.28 665.48 260.467 664.197 261.884 cv
662.916 263.298 660.732 263.409 659.314 262.129 cv
657.896 260.849 657.785 258.661 659.068 257.245 cv
cp
533.549 269.784 mo
534.234 269.448 535.071 268.971 535.858 268.415 cv
536.493 269.15 537.42 269.625 538.465 269.625 cv
558.925 269.625 li
559.904 269.625 560.839 269.21 561.495 268.481 cv
576.313 252.046 li
618.328 252.046 li
629.283 262.604 li
629.914 263.217 630.753 263.563 631.636 263.573 cv
653.677 263.862 li
653.695 263.862 653.708 263.862 653.726 263.862 cv
654.622 263.862 655.435 263.513 656.05 262.948 cv
656.949 263.589 657.972 264.181 658.871 264.689 cv
662.127 266.526 665.919 266.976 668.425 264.206 cv
670.929 261.434 670.718 257.155 667.945 254.65 cv
665.169 252.148 661.65 253.313 658.388 255.134 cv
657.464 255.65 656.263 256.454 655.312 257.347 cv
654.847 257.105 654.33 256.953 653.769 256.946 cv
633.093 256.677 li
622.122 246.1 li
621.478 245.477 620.617 245.13 619.722 245.13 cv
574.771 245.13 li
573.793 245.13 572.86 245.546 572.204 246.273 cv
557.388 262.71 li
538.465 262.71 li
538.034 262.71 537.628 262.798 537.247 262.941 cv
536.243 261.943 534.794 260.994 533.578 260.218 cv
530.425 258.21 526.663 257.556 524.013 260.189 cv
521.361 262.821 521.345 267.103 523.978 269.754 cv
526.616 272.405 530.192 271.431 533.549 269.784 cv
cp
f
616.175 194.995 mo
617.458 193.579 619.644 193.468 621.062 194.747 cv
622.478 196.029 622.589 198.214 621.308 199.632 cv
620.029 201.048 617.845 201.158 616.425 199.879 cv
615.005 198.599 614.896 196.411 616.175 194.995 cv
cp
615.982 202.439 mo
619.24 204.276 623.031 204.726 625.533 201.954 cv
628.039 199.185 627.826 194.905 625.054 192.4 cv
622.283 189.898 618.759 191.06 615.497 192.884 cv
614.408 193.49 612.941 194.5 611.945 195.579 cv
602.956 195.86 li
603.064 199.316 li
611.365 199.059 li
612.312 200.328 614.353 201.52 615.982 202.439 cv
cp
f
618.675 294.334 mo
620.566 294.6 621.882 296.347 621.617 298.237 cv
621.353 300.13 619.603 301.446 617.712 301.181 cv
615.822 300.915 614.507 299.167 614.773 297.276 cv
615.035 295.384 616.785 294.066 618.675 294.334 cv
cp
612.402 298.346 mo
612.708 302.069 614.462 305.463 618.158 305.983 cv
621.861 306.503 625.281 303.93 625.804 300.228 cv
626.32 296.526 623.382 294.265 620.043 292.588 cv
618.361 291.739 615.453 290.697 613.871 291.235 cv
581.542 291.235 li
581.542 294.694 li
612.281 294.694 li
612.222 295.892 612.31 297.207 612.402 298.346 cv
cp
f
666.931 226.724 mo
665.035 226.505 663.675 224.79 663.892 222.894 cv
664.111 220.997 665.828 219.636 667.724 219.855 cv
669.622 220.073 670.98 221.788 670.765 223.685 cv
670.544 225.585 668.83 226.944 666.931 226.724 cv
cp
673.105 222.563 mo
672.708 218.843 670.871 215.493 667.158 215.066 cv
663.447 214.64 660.089 217.298 659.662 221.007 cv
659.236 224.722 662.23 226.909 665.609 228.505 cv
666.32 228.842 667.247 229.208 668.201 229.48 cv
668.33 230.181 668.668 230.85 669.228 231.376 cv
678.738 240.275 li
679.402 240.9 680.25 241.209 681.097 241.209 cv
682.019 241.209 682.941 240.842 683.622 240.114 cv
684.927 238.718 684.855 236.53 683.46 235.227 cv
673.953 226.325 li
673.757 226.143 673.543 225.994 673.32 225.865 cv
673.32 224.763 673.212 223.589 673.105 222.563 cv
cp
f
638.091 283.983 mo
636.742 285.334 634.552 285.334 633.201 283.983 cv
631.851 282.634 631.851 280.444 633.201 279.093 cv
634.552 277.743 636.742 277.743 638.091 279.093 cv
639.443 280.444 639.443 282.634 638.091 283.983 cv
cp
638.662 276.563 mo
635.505 274.56 631.74 273.919 629.095 276.563 cv
626.456 279.202 626.456 283.483 629.095 286.129 cv
631.74 288.767 635.316 287.783 638.662 286.129 cv
639.734 285.597 641.173 284.719 642.214 283.743 cv
650.554 283.743 li
650.554 280.286 li
643.173 280.286 li
642.335 278.93 640.291 277.592 638.662 276.563 cv
cp
f
644.613 241.632 mo
644.83 243.526 643.474 245.243 641.576 245.468 cv
639.681 245.688 637.966 244.327 637.744 242.43 cv
637.671 241.802 637.783 241.2 638.017 240.66 cv
638.208 240.538 638.388 240.396 638.558 240.231 cv
638.89 239.908 639.14 239.533 639.316 239.131 cv
639.744 238.855 640.234 238.659 640.775 238.597 cv
642.673 238.379 644.39 239.735 644.613 241.632 cv
cp
535.568 237.456 mo
534.213 238.8 532.026 238.794 530.679 237.439 cv
529.335 236.085 529.341 233.896 530.695 232.55 cv
532.049 231.204 534.238 231.213 535.585 232.566 cv
536.051 233.034 536.343 233.605 536.485 234.202 cv
536.474 234.322 536.449 234.439 536.449 234.563 cv
536.449 234.843 536.491 235.112 536.556 235.373 cv
536.473 236.134 536.154 236.875 535.568 237.456 cv
cp
539.907 231.105 mo
539.339 231.105 538.81 231.255 538.337 231.5 cv
537.62 230.971 536.854 230.474 536.166 230.034 cv
533.012 228.025 529.25 227.372 526.6 230.004 cv
523.948 232.638 523.932 236.919 526.565 239.569 cv
529.203 242.221 532.779 241.245 536.136 239.6 cv
536.968 239.192 538.022 238.575 538.942 237.865 cv
539.251 237.955 539.569 238.019 539.907 238.019 cv
595.808 238.019 li
596.193 238.019 596.578 237.954 596.943 237.829 cv
612.837 232.31 li
626.039 232.31 li
633.668 240.159 li
633.99 240.489 634.361 240.735 634.757 240.909 cv
635.009 241.98 635.38 243.092 635.72 244.064 cv
636.96 247.593 639.517 250.431 643.222 249.997 cv
646.935 249.566 649.595 246.209 649.16 242.497 cv
648.726 238.786 645.312 237.342 641.658 236.56 cv
640.972 236.413 640.113 236.283 639.234 236.226 cv
639.078 235.909 638.886 235.606 638.628 235.342 cv
629.984 226.442 li
629.331 225.773 628.439 225.394 627.502 225.394 cv
612.257 225.394 li
611.869 225.394 611.486 225.459 611.122 225.585 cv
595.224 231.105 li
539.907 231.105 li
cp
f
676.043 199.04 mo
676.043 204.319 671.757 208.605 666.476 208.605 cv
661.191 208.605 656.91 204.319 656.91 199.04 cv
656.91 193.755 661.191 189.472 666.476 189.472 cv
671.757 189.472 676.043 193.755 676.043 199.04 cv
cp
1 1 1 rgb
f
604.882 197.3 mo
604.882 202.584 600.6 206.867 595.315 206.867 cv
590.035 206.867 585.749 202.584 585.749 197.3 cv
585.749 192.019 590.035 187.733 595.315 187.733 cv
600.6 187.733 604.882 192.019 604.882 197.3 cv
cp
f
696.568 239.875 mo
696.568 245.158 692.287 249.441 687.003 249.441 cv
681.722 249.441 677.437 245.158 677.437 239.875 cv
677.437 234.592 681.722 230.306 687.003 230.306 cv
692.287 230.306 696.568 234.592 696.568 239.875 cv
cp
f
667.611 282.015 mo
667.611 287.298 663.33 291.581 658.044 291.581 cv
652.763 291.581 648.478 287.298 648.478 282.015 cv
648.478 276.731 652.763 272.448 658.044 272.448 cv
663.33 272.448 667.611 276.731 667.611 282.015 cv
cp
f
610.773 230.306 mo
610.773 235.589 606.492 239.875 601.208 239.875 cv
595.927 239.875 591.642 235.589 591.642 230.306 cv
591.642 225.025 595.927 220.742 601.208 220.742 cv
606.492 220.742 610.773 225.025 610.773 230.306 cv
cp
f
571.441 260.737 mo
571.441 266.022 567.16 270.305 561.876 270.305 cv
556.595 270.305 552.309 266.022 552.309 260.737 cv
552.309 255.459 556.595 251.173 561.876 251.173 cv
567.16 251.173 571.441 255.459 571.441 260.737 cv
cp
f
583.271 292.967 mo
583.271 298.245 578.989 302.53 573.704 302.53 cv
568.423 302.53 564.138 298.245 564.138 292.967 cv
564.138 287.681 568.423 283.4 573.704 283.4 cv
578.989 283.4 583.271 287.681 583.271 292.967 cv
cp
f
624.82 266.167 mo
624.82 271.448 620.539 275.733 615.255 275.733 cv
609.974 275.733 605.689 271.448 605.689 266.167 cv
605.689 260.884 609.974 256.603 615.255 256.603 cv
620.539 256.603 624.82 260.884 624.82 266.167 cv
cp
f
662.302 492.465 mo
660.39 492.431 658.872 490.853 658.906 488.947 cv
658.939 487.039 660.513 485.516 662.423 485.549 cv
664.331 485.584 665.855 487.158 665.818 489.068 cv
665.787 490.977 664.21 492.498 662.302 492.465 cv
cp
668.494 491.828 mo
668.421 490.493 668.091 489.029 667.759 487.988 cv
666.622 484.43 664.849 481.174 661.115 481.107 cv
657.377 481.041 654.296 484.017 654.232 487.754 cv
654.168 491.488 657.244 493.752 660.877 494.635 cv
662.958 495.139 665.671 495.752 667.179 495.141 cv
672.331 498.82 li
700.115 498.82 li
700.115 495.361 li
673.437 495.361 li
668.494 491.828 li
cp
0 .862745 1 rgb
f
124.305 457.891 mo
122.396 457.891 120.846 456.344 120.846 454.434 cv
120.846 452.522 122.396 450.975 124.305 450.975 cv
126.213 450.975 127.763 452.522 127.763 454.434 cv
127.763 456.344 126.213 457.891 124.305 457.891 cv
cp
604.031 497.956 mo
568.146 497.956 li
514.118 443.496 li
175.685 443.496 li
165.743 433.555 li
142.248 433.555 li
128.146 448.254 li
126.575 448.139 124.536 448.602 123.193 449.056 cv
119.652 450.252 116.428 452.084 116.428 455.818 cv
116.428 459.556 119.456 462.585 123.193 462.585 cv
126.929 462.585 129.141 459.465 129.959 455.818 cv
130.323 454.195 130.733 452.199 130.608 450.681 cv
143.724 437.012 li
164.312 437.012 li
174.253 446.953 li
512.677 446.953 li
566.704 501.414 li
602.568 501.414 li
616.831 516.109 li
696.369 516.109 li
696.369 512.65 li
618.294 512.65 li
604.031 497.956 li
cp
f
156.847 642.346 mo
155.495 643.698 153.308 643.698 151.958 642.346 cv
150.606 640.996 150.606 638.809 151.958 637.457 cv
153.308 636.106 155.495 636.106 156.847 637.457 cv
158.201 638.809 158.201 640.996 156.847 642.346 cv
cp
316.602 590.019 mo
297.584 570.568 li
251.179 570.568 li
184.616 638.428 li
161.651 638.428 li
160.653 637.17 158.753 635.973 157.42 635.313 cv
154.071 633.658 150.496 632.674 147.851 635.313 cv
145.212 637.957 145.212 642.24 147.853 644.879 cv
150.496 647.523 154.263 646.881 157.42 644.879 cv
158.752 644.035 160.368 642.984 161.372 641.886 cv
186.068 641.886 li
252.63 574.025 li
296.13 574.025 li
315.147 593.475 li
331.118 593.475 li
353.304 572.299 li
603.574 572.299 li
629.941 546.364 li
694.914 546.364 li
694.914 542.906 li
628.525 542.906 li
602.16 568.84 li
351.918 568.84 li
329.734 590.019 li
316.602 590.019 li
cp
f
158.43 550.053 mo
157.08 551.404 154.891 551.404 153.54 550.053 cv
152.19 548.703 152.19 546.516 153.54 545.165 cv
154.891 543.815 157.08 543.815 158.43 545.165 cv
159.78 546.516 159.78 548.703 158.43 550.053 cv
cp
445.39 503.967 mo
446.74 502.615 448.928 502.615 450.278 503.967 cv
451.626 505.316 451.626 507.504 450.278 508.855 cv
448.928 510.207 446.74 510.207 445.39 508.855 cv
444.034 507.504 444.034 505.316 445.39 503.967 cv
cp
193.402 549.533 mo
235.111 508.113 li
440.774 508.113 li
441.81 509.285 443.564 510.381 444.814 511 cv
448.164 512.656 451.74 513.641 454.385 511 cv
457.025 508.357 457.022 504.074 454.381 501.434 cv
451.74 498.793 447.973 499.434 444.814 501.434 cv
443.392 502.338 441.643 503.475 440.665 504.656 cv
233.687 504.656 li
191.978 546.077 li
163.185 546.077 li
162.177 544.842 160.314 543.672 159 543.021 cv
155.653 541.367 152.077 540.381 149.436 543.021 cv
146.791 545.665 146.791 549.945 149.436 552.588 cv
152.077 555.229 155.844 554.59 159 552.588 cv
160.362 551.727 162.015 550.648 163.012 549.523 cv
163.012 549.533 li
193.402 549.533 li
cp
f
452.257 541.318 mo
452.656 539.452 454.493 538.261 456.361 538.658 cv
458.228 539.055 459.419 540.891 459.022 542.758 cv
458.625 544.627 456.788 545.818 454.922 545.423 cv
453.054 545.023 451.862 543.185 452.257 541.318 cv
cp
126.286 579.354 mo
124.936 580.703 122.745 580.703 121.396 579.354 cv
120.047 578.002 120.047 575.815 121.396 574.463 cv
122.745 573.111 124.936 573.115 126.286 574.463 cv
127.639 575.815 127.639 578.002 126.286 579.354 cv
cp
363.714 525.365 mo
244.712 525.365 li
195.152 574.313 li
129.968 574.313 li
128.986 573.496 127.785 572.779 126.858 572.32 cv
123.509 570.662 119.933 569.678 117.29 572.32 cv
114.647 574.961 114.651 579.244 117.293 581.886 cv
119.933 584.527 123.701 583.886 126.858 581.886 cv
128.642 580.758 130.928 579.258 131.577 577.769 cv
196.569 577.769 li
246.13 528.824 li
362.259 528.824 li
385.599 552.702 li
447.614 552.702 li
452.021 547.709 li
453.249 547.869 454.634 547.869 455.824 547.856 cv
459.554 547.816 463.066 546.303 463.847 542.648 cv
464.623 538.996 462.289 535.402 458.635 534.623 cv
454.982 533.846 452.522 536.621 450.612 539.834 cv
449.62 541.502 448.335 544.449 448.886 546.035 cv
446.055 549.244 li
387.054 549.244 li
363.714 525.365 li
cp
f
124.305 610.515 mo
122.396 610.515 120.846 608.969 120.846 607.057 cv
120.846 605.148 122.396 603.6 124.305 603.6 cv
126.213 603.6 127.763 605.148 127.763 607.057 cv
127.763 608.969 126.213 610.515 124.305 610.515 cv
cp
470.241 544.969 mo
470.64 543.102 472.477 541.91 474.344 542.309 cv
476.212 542.703 477.403 544.54 477.006 546.406 cv
476.61 548.273 474.773 549.469 472.905 549.07 cv
471.039 548.673 469.843 546.836 470.241 544.969 cv
cp
202.918 589.299 mo
242.394 549.533 li
319.388 549.533 li
330.911 559.906 li
462.317 559.906 li
469.814 551.336 li
471.085 551.523 472.554 551.521 473.805 551.506 cv
477.539 551.465 481.051 549.953 481.83 546.298 cv
482.607 542.648 480.273 539.053 476.62 538.273 cv
472.966 537.496 470.502 540.269 468.597 543.482 cv
467.64 545.092 466.399 547.896 466.808 549.519 cv
460.746 556.449 li
332.24 556.449 li
320.715 546.077 li
240.957 546.077 li
201.48 585.84 li
142.414 585.84 li
127.389 600.865 li
125.96 600.91 124.327 601.297 123.193 601.68 cv
119.652 602.877 116.428 604.707 116.428 608.443 cv
116.428 612.18 119.456 615.211 123.193 615.211 cv
126.929 615.211 129.141 612.088 129.959 608.443 cv
130.38 606.568 130.87 604.188 130.509 602.635 cv
143.846 589.299 li
202.918 589.299 li
cp
f
153.581 609.641 mo
151.679 609.49 150.258 607.827 150.407 605.924 cv
150.556 604.019 152.22 602.596 154.121 602.744 cv
156.025 602.894 157.447 604.559 157.299 606.463 cv
157.149 608.365 155.485 609.79 153.581 609.641 cv
cp
490.994 550.807 mo
491.39 548.938 493.228 547.748 495.098 548.144 cv
496.966 548.541 498.153 550.379 497.759 552.246 cv
497.36 554.114 495.523 555.305 493.655 554.908 cv
491.788 554.512 490.597 552.674 490.994 550.807 cv
cp
204.35 597.469 mo
246.141 555.585 li
315.603 555.585 li
326.847 566.54 li
481.513 565.379 li
490.463 557.154 li
491.759 557.356 493.272 557.359 494.558 557.344 cv
498.292 557.303 501.804 555.79 502.58 552.136 cv
503.359 548.482 501.027 544.889 497.37 544.111 cv
493.721 543.336 491.255 546.107 489.348 549.323 cv
488.431 550.867 487.249 553.519 487.519 555.164 cv
480.156 561.93 li
328.241 563.073 li
317.007 552.127 li
244.704 552.127 li
202.932 593.996 li
168.843 593.615 li
157.678 600.106 li
157.774 600.273 li
156.276 600.138 154.423 600.426 153.165 600.744 cv
149.543 601.662 146.185 603.236 145.893 606.961 cv
145.6 610.685 148.382 613.94 152.106 614.232 cv
155.833 614.523 158.278 611.588 159.379 608.016 cv
159.917 606.275 160.556 604.082 160.418 602.515 cv
169.759 597.082 li
204.35 597.469 li
cp
f
125.234 552.928 mo
123.323 552.894 121.804 551.318 121.837 549.408 cv
121.872 547.502 123.444 545.981 125.356 546.012 cv
127.264 546.048 128.786 547.621 128.752 549.531 cv
128.719 551.44 127.142 552.961 125.234 552.928 cv
cp
464.339 511.642 mo
464.737 509.773 466.574 508.582 468.442 508.978 cv
470.31 509.375 471.501 511.213 471.103 513.08 cv
470.708 514.949 468.87 516.139 467.003 515.742 cv
465.136 515.345 463.944 513.51 464.339 511.642 cv
cp
130.691 548.453 mo
129.554 544.894 127.78 541.639 124.046 541.573 cv
120.309 541.506 117.228 544.481 117.162 548.217 cv
117.098 551.952 120.179 554.217 123.809 555.098 cv
125.448 555.498 127.468 555.949 128.995 555.834 cv
137.453 565.381 li
189.377 565.381 li
241.243 513.227 li
436.394 513.227 li
446.189 521.729 li
460.374 521.729 li
464.075 518.027 li
465.31 518.191 466.706 518.191 467.905 518.179 cv
471.64 518.136 475.148 516.623 475.928 512.969 cv
476.704 509.315 474.372 505.725 470.719 504.945 cv
467.064 504.168 464.603 506.941 462.695 510.154 cv
461.721 511.794 460.46 514.67 460.939 516.273 cv
458.943 518.269 li
447.478 518.269 li
437.684 509.77 li
239.806 509.77 li
187.939 561.924 li
139.009 561.924 li
131.413 553.346 li
131.534 551.789 131.114 549.783 130.691 548.453 cv
cp
f
94.5469 577.66 mo
96.457 577.695 97.9775 579.269 97.9433 581.178 cv
97.9101 583.088 96.3369 584.611 94.4267 584.574 cv
92.5176 584.541 90.9971 582.965 91.0303 581.057 cv
91.0615 579.148 92.6377 577.627 94.5469 577.66 cv
cp
333.725 540.427 mo
335.076 539.077 337.263 539.077 338.614 540.427 cv
339.965 541.777 339.965 543.967 338.614 545.315 cv
337.263 546.666 335.076 546.666 333.725 545.315 cv
332.373 543.967 332.373 541.777 333.725 540.427 cv
cp
92.999 586.746 mo
95.0596 587.246 97.7314 587.845 99.251 587.269 cv
107.583 595.063 li
128.804 595.063 li
141.769 583.535 li
198.583 583.535 li
238.637 544.348 li
328.925 544.348 li
329.923 545.606 331.819 546.802 333.154 547.46 cv
336.5 549.115 340.076 550.102 342.72 547.46 cv
345.36 544.816 345.36 540.535 342.72 537.894 cv
340.076 535.25 336.312 535.894 333.154 537.894 cv
331.817 538.739 330.201 539.791 329.198 540.891 cv
237.226 540.891 li
197.171 580.077 li
140.457 580.077 li
127.49 591.606 li
108.946 591.606 li
100.616 583.809 li
100.528 582.511 100.204 581.109 99.8838 580.102 cv
98.7471 576.541 96.9746 573.283 93.2363 573.219 cv
89.5019 573.154 86.4219 576.131 86.3525 579.865 cv
86.291 583.6 89.3711 585.865 92.999 586.746 cv
cp
f
302.008 594.121 mo
303.358 592.773 305.547 592.773 306.897 594.121 cv
308.247 595.473 308.247 597.665 306.897 599.012 cv
305.547 600.361 303.358 600.361 302.008 599.012 cv
300.657 597.665 300.657 595.473 302.008 594.121 cv
cp
307.468 601.156 mo
308.536 600.629 309.966 599.758 311.005 598.787 cv
334.747 598.787 li
355.494 577.769 li
607.781 577.769 li
631.267 553.298 li
694.914 553.298 li
694.914 549.84 li
629.793 549.84 li
606.306 574.313 li
354.049 574.313 li
333.302 595.332 li
311.988 595.332 li
311.155 593.97 309.103 592.625 307.468 591.59 cv
304.311 589.59 300.545 588.949 297.901 591.59 cv
295.261 594.232 295.261 598.515 297.901 601.156 cv
300.545 603.799 304.12 602.813 307.468 601.156 cv
cp
f
298.671 636.379 mo
297.32 637.731 295.132 637.731 293.782 636.379 cv
292.435 635.029 292.435 632.84 293.782 631.49 cv
295.132 630.139 297.32 630.139 298.671 631.49 cv
300.026 632.84 300.026 635.029 298.671 636.379 cv
cp
303.476 635.41 mo
311.694 635.41 li
311.694 631.953 li
303.198 631.953 li
302.196 630.854 300.579 629.801 299.245 628.957 cv
296.088 626.957 292.32 626.315 289.68 628.957 cv
287.038 631.6 287.034 635.881 289.676 638.523 cv
292.32 641.166 295.896 640.18 299.245 638.523 cv
300.577 637.865 302.478 636.668 303.476 635.41 cv
cp
f
268.385 629.639 mo
269.668 628.223 271.853 628.111 273.272 629.391 cv
274.687 630.674 274.798 632.857 273.518 634.275 cv
272.238 635.691 270.054 635.801 268.635 634.523 cv
267.215 633.242 267.105 631.055 268.385 629.639 cv
cp
268.19 637.082 mo
271.448 638.92 275.24 639.369 277.742 636.598 cv
280.247 633.828 280.035 629.549 277.263 627.044 cv
274.491 624.541 270.969 625.703 267.706 627.527 cv
266.616 628.135 265.149 629.144 264.153 630.223 cv
255.165 630.504 li
255.273 633.961 li
263.573 633.702 li
264.521 634.973 266.562 636.164 268.19 637.082 cv
cp
f
92.0713 606.5 mo
93.9824 606.519 95.5117 608.082 95.4932 609.994 cv
95.4756 611.904 93.9131 613.435 92.0029 613.416 cv
90.0928 613.394 88.5615 611.832 88.584 609.924 cv
88.6006 608.016 90.1641 606.479 92.0713 606.5 cv
cp
322.254 573.57 mo
324.162 573.623 325.667 575.211 325.617 577.121 cv
325.562 579.029 323.976 580.533 322.068 580.482 cv
320.156 580.432 318.651 578.84 318.705 576.934 cv
318.756 575.025 320.347 573.519 322.254 573.57 cv
cp
90.875 615.323 mo
91.7988 615.648 93.0615 615.979 94.2734 616.123 cv
94.4531 616.781 94.8252 617.394 95.3877 617.865 cv
105.473 626.283 li
106.095 626.799 106.879 627.086 107.689 627.086 cv
171.656 627.086 li
172.544 627.086 173.396 626.746 174.037 626.136 cv
194.936 606.299 li
207.963 606.299 li
208.87 606.299 209.743 605.941 210.391 605.303 cv
249.146 567.111 li
307.157 567.111 li
313.65 573.211 li
314.325 573.844 315.192 574.148 316.056 574.138 cv
316.114 575.477 316.431 576.947 316.754 577.994 cv
317.853 581.563 319.597 584.836 323.335 584.94 cv
327.069 585.04 330.177 582.094 330.28 578.361 cv
330.378 574.623 327.322 572.332 323.699 571.415 cv
322.388 571.082 320.828 570.715 319.47 570.631 cv
319.454 569.729 319.093 568.834 318.384 568.169 cv
310.896 561.131 li
310.254 560.529 309.405 560.195 308.527 560.195 cv
247.727 560.195 li
246.818 560.195 245.947 560.553 245.3 561.19 cv
206.544 599.381 li
193.558 599.381 li
192.67 599.381 191.818 599.723 191.177 600.332 cv
170.278 620.17 li
108.942 620.17 li
99.8213 612.555 li
99.3555 612.168 98.8164 611.938 98.2607 611.832 cv
98.1426 610.752 97.915 609.621 97.7031 608.629 cv
96.9209 604.969 94.7461 601.832 91.0078 601.799 cv
87.2734 601.762 84.2148 604.756 84.1728 608.494 cv
84.1426 612.229 87.3476 614.092 90.875 615.323 cv
cp
f
590.881 520.246 mo
589.53 521.594 587.343 521.594 585.991 520.246 cv
584.641 518.894 584.641 516.707 585.991 515.356 cv
587.343 514.006 589.53 514.006 590.881 515.356 cv
592.231 516.707 592.231 518.894 590.881 520.246 cv
cp
158.272 459.367 mo
156.92 460.715 154.732 460.715 153.382 459.367 cv
152.03 458.016 152.03 455.826 153.382 454.478 cv
154.732 453.127 156.92 453.127 158.272 454.478 cv
159.621 455.826 159.621 458.016 158.272 459.367 cv
cp
585.42 512.824 mo
583.97 513.742 582.183 514.906 581.218 516.109 cv
570.286 516.109 li
507.614 455.166 li
163.012 455.166 li
163.012 455.367 li
161.999 454.138 160.149 452.978 158.842 452.334 cv
155.491 450.677 151.919 449.691 149.274 452.334 cv
146.632 454.975 146.632 459.258 149.277 461.898 cv
151.919 464.54 155.685 463.898 158.842 461.898 cv
160.29 460.982 162.069 459.823 163.036 458.625 cv
506.211 458.625 li
568.883 519.566 li
581.439 519.566 li
582.479 520.715 584.19 521.779 585.42 522.388 cv
588.767 524.045 592.343 525.029 594.988 522.388 cv
597.628 519.746 597.628 515.465 594.988 512.824 cv
592.343 510.181 588.579 510.82 585.42 512.824 cv
cp
f
154.301 484.02 mo
155.647 482.67 157.839 482.67 159.187 484.02 cv
160.537 485.371 160.537 487.559 159.187 488.91 cv
157.839 490.261 155.647 490.261 154.301 488.91 cv
152.95 487.559 152.95 485.371 154.301 484.02 cv
cp
159.761 491.441 mo
161.269 490.486 163.135 489.269 164.069 488.016 cv
185.626 488.016 li
204.211 469.429 li
501.439 469.429 li
572.755 541.177 li
694.914 541.177 li
694.914 537.719 li
574.193 537.719 li
502.878 465.971 li
202.779 465.971 li
184.193 484.557 li
163.616 484.557 li
162.566 483.464 160.941 482.46 159.761 481.877 cv
156.411 480.221 152.834 479.236 150.191 481.877 cv
147.551 484.52 147.551 488.802 150.191 491.441 cv
152.834 494.085 156.603 493.443 159.761 491.441 cv
cp
f
94.2656 483.371 mo
96.1748 483.371 97.7226 484.919 97.7226 486.828 cv
97.7226 488.738 96.1748 490.285 94.2656 490.285 cv
92.3555 490.285 90.8076 488.738 90.8076 486.828 cv
90.8076 484.919 92.3555 483.371 94.2656 483.371 cv
cp
93.1533 494.978 mo
96.8916 494.978 99.1006 491.861 99.9189 488.213 cv
100.148 487.191 100.394 486.02 100.519 484.91 cv
100.538 484.93 li
109.113 476.56 li
132.564 476.56 li
140.393 467.022 li
140.393 451.594 li
148.134 444.361 li
162.295 444.361 li
170.94 453.004 li
510.373 453.004 li
565.846 508.113 li
599.134 508.113 li
612.964 521.729 li
694.914 521.729 li
694.914 518.269 li
614.38 518.269 li
600.548 504.656 li
567.272 504.656 li
511.8 449.547 li
172.372 449.547 li
163.728 440.902 li
146.769 440.902 li
136.934 450.094 li
136.934 465.785 li
130.931 473.103 li
107.703 473.103 li
99.5664 481.048 li
98.1221 480.19 94.9883 480.83 93.1533 481.451 cv
89.6142 482.648 86.3887 484.478 86.3887 488.213 cv
86.3887 491.949 89.418 494.978 93.1533 494.978 cv
cp
f
124.609 484.797 mo
126.522 484.797 128.067 486.344 128.067 488.254 cv
128.067 490.166 126.522 491.713 124.609 491.713 cv
122.7 491.713 121.151 490.166 121.151 488.254 cv
121.151 486.344 122.7 484.797 124.609 484.797 cv
cp
123.499 496.406 mo
127.233 496.406 129.444 493.287 130.265 489.641 cv
130.537 488.428 130.843 487 130.928 485.721 cv
137.491 482.767 li
146.704 473.761 li
175.676 474.195 li
185.626 464.243 li
503.185 464.243 li
574.933 534.262 li
696.369 534.262 li
696.369 530.805 li
576.34 530.805 li
504.592 460.785 li
184.193 460.785 li
174.264 470.715 li
145.317 470.283 li
135.513 479.863 li
129.833 482.422 li
128.353 481.636 125.296 482.269 123.499 482.879 cv
119.96 484.074 116.733 485.904 116.733 489.641 cv
116.733 493.377 119.762 496.406 123.499 496.406 cv
cp
f
625.097 500.377 mo
625.132 498.469 626.705 496.945 628.615 496.98 cv
630.523 497.013 632.046 498.588 632.009 500.498 cv
631.978 502.406 630.402 503.929 628.496 503.897 cv
626.583 503.861 625.064 502.285 625.097 500.377 cv
cp
633.951 499.42 mo
632.816 495.861 631.041 492.603 627.306 492.537 cv
623.568 492.472 620.49 495.447 620.421 499.185 cv
620.361 502.92 623.435 505.184 627.07 506.065 cv
628.47 506.404 630.15 506.785 631.566 506.818 cv
636.906 510.49 li
700.115 510.49 li
700.115 507.031 li
637.98 507.031 li
634.628 504.728 li
634.877 503.131 634.414 500.869 633.951 499.42 cv
cp
f
643.232 495.623 mo
643.263 493.715 644.837 492.191 646.75 492.227 cv
648.658 492.26 650.179 493.834 650.146 495.744 cv
650.113 497.652 648.539 499.176 646.628 499.141 cv
644.72 499.107 643.201 497.529 643.232 495.623 cv
cp
652.085 494.666 mo
650.949 491.107 649.177 487.85 645.439 487.783 cv
641.705 487.717 638.621 490.693 638.556 494.43 cv
638.494 498.166 641.574 500.429 645.203 501.31 cv
646.706 501.676 648.543 502.1 650.015 502.076 cv
655.505 505.736 li
700.115 505.736 li
700.115 502.277 li
656.552 502.277 li
652.785 499.766 li
652.964 498.184 652.527 496.055 652.085 494.666 cv
cp
f
95.583 553.262 mo
93.6719 553.227 92.1523 551.65 92.1865 549.744 cv
92.2197 547.835 93.793 546.313 95.7051 546.346 cv
97.6123 546.381 99.1357 547.953 99.0996 549.864 cv
99.0674 551.773 97.4912 553.295 95.583 553.262 cv
cp
482.634 518.449 mo
483.029 516.58 484.866 515.388 486.738 515.787 cv
488.602 516.184 489.793 518.021 489.394 519.888 cv
488.999 521.756 487.162 522.947 485.295 522.549 cv
483.427 522.152 482.236 520.316 482.634 518.449 cv
cp
101.04 548.785 mo
99.9043 545.227 98.1289 541.971 94.3935 541.902 cv
90.6572 541.84 87.5762 544.815 87.5117 548.552 cv
87.4463 552.285 90.5264 554.549 94.1572 555.43 cv
95.5537 555.769 97.2295 556.148 98.6416 556.185 cv
107.836 565.381 li
128.582 565.381 li
134.634 571.432 li
192.824 571.432 li
245.268 519.566 li
432.626 519.566 li
442.853 528.823 li
478.141 528.823 li
481.868 524.75 li
483.214 524.993 484.831 525 486.196 524.986 cv
489.931 524.943 493.443 523.431 494.22 519.775 cv
494.996 516.123 492.666 512.529 489.01 511.754 cv
485.355 510.975 482.894 513.748 480.985 516.961 cv
480.103 518.449 478.988 520.953 479.144 522.606 cv
476.617 525.364 li
444.188 525.364 li
433.959 516.109 li
243.848 516.109 li
191.403 567.975 li
136.064 567.975 li
130.014 561.924 li
109.268 561.924 li
101.679 554.332 li
102.018 552.731 101.526 550.309 101.04 548.785 cv
cp
f
680.32 479.34 mo
682.228 479.371 683.752 480.947 683.712 482.859 cv
683.683 484.767 682.105 486.287 680.199 486.256 cv
678.287 486.22 676.767 484.645 676.802 482.736 cv
676.835 480.83 678.41 479.306 680.32 479.34 cv
cp
678.773 488.424 mo
681.189 489.011 684.46 489.748 685.706 488.545 cv
685.712 488.54 685.714 488.531 685.718 488.525 cv
689.671 491.041 li
696.369 491.041 li
696.369 487.582 li
690.677 487.582 li
686.347 484.827 li
686.322 484.865 li
686.191 483.754 685.927 482.627 685.656 481.777 cv
684.517 478.22 682.744 474.965 679.009 474.898 cv
675.271 474.832 672.193 477.806 672.128 481.545 cv
672.06 485.277 675.14 487.541 678.773 488.424 cv
cp
f
433.044 535.592 mo
433.044 533.682 434.591 532.136 436.501 532.136 cv
438.409 532.136 439.959 533.682 439.959 535.592 cv
439.959 537.502 438.409 539.049 436.501 539.049 cv
434.591 539.049 433.044 537.502 433.044 535.592 cv
cp
443.019 536.148 mo
443.019 531.943 439.614 528.54 435.414 528.54 cv
431.214 528.54 427.811 531.943 427.811 536.148 cv
427.811 540.344 431.214 543.748 435.414 543.748 cv
439.614 543.748 443.019 540.344 443.019 536.148 cv
cp
f
642.24 591.486 mo
642.24 589.573 643.787 588.023 645.699 588.023 cv
647.607 588.023 649.156 589.573 649.156 591.486 cv
649.156 593.394 647.607 594.941 645.699 594.941 cv
643.787 594.941 642.24 593.394 642.24 591.486 cv
cp
652.214 592.035 mo
652.214 587.836 648.812 584.43 644.613 584.43 cv
640.412 584.43 637.007 587.836 637.007 592.035 cv
637.007 596.236 640.412 599.639 644.613 599.639 cv
648.812 599.639 652.214 596.236 652.214 592.035 cv
cp
f
664.939 588.023 mo
666.847 588.023 668.396 589.573 668.396 591.486 cv
668.396 593.394 666.847 594.941 664.939 594.941 cv
663.029 594.941 661.482 593.394 661.482 591.486 cv
661.482 589.573 663.029 588.023 664.939 588.023 cv
cp
663.851 599.639 mo
668.052 599.639 671.456 596.236 671.456 592.035 cv
671.456 587.836 668.052 584.43 663.851 584.43 cv
659.656 584.43 656.247 587.836 656.247 592.035 cv
656.247 596.236 659.656 599.639 663.851 599.639 cv
cp
f
218.046 632.669 mo
219.402 634.015 219.417 636.199 218.076 637.559 cv
216.735 638.916 214.544 638.93 213.184 637.588 cv
211.829 636.244 211.815 634.059 213.159 632.699 cv
214.5 631.338 216.689 631.327 218.046 632.669 cv
cp
242.682 598.787 mo
260.233 598.787 li
272.336 611.629 li
330.911 611.629 li
358.944 583.578 li
609.65 583.578 li
633.421 559.078 li
694.914 559.078 li
694.914 555.621 li
631.958 555.621 li
608.187 580.121 li
357.515 580.121 li
329.48 608.17 li
273.828 608.17 li
261.727 595.332 li
241.243 595.332 li
213.723 623.019 li
213.723 628.057 li
212.582 629.055 211.488 630.75 210.619 632.144 cv
208.639 635.313 208.022 639.082 210.678 641.707 cv
213.335 644.332 217.62 644.31 220.243 641.652 cv
222.868 638.99 221.862 635.424 220.187 632.086 cv
219.543 630.801 218.396 628.994 217.182 627.979 cv
217.182 624.443 li
242.682 598.787 li
cp
f
154.003 671.934 mo
152.099 672.045 150.462 670.592 150.348 668.688 cv
150.235 666.781 151.689 665.144 153.594 665.031 cv
155.499 664.916 157.137 666.373 157.251 668.277 cv
157.363 670.184 155.91 671.82 154.003 671.934 cv
cp
221.905 656.148 mo
231.156 647.371 li
231.156 624.504 li
239.6 616.938 li
332.272 616.938 li
361.09 589.152 li
613.122 589.152 li
635.455 565.381 li
694.914 565.381 li
694.914 561.924 li
633.956 561.924 li
611.628 585.695 li
359.694 585.695 li
330.878 613.479 li
238.275 613.479 li
227.699 622.957 li
227.699 645.886 li
220.527 652.69 li
166.906 652.69 li
157.499 662.096 li
155.897 662.008 153.749 662.621 152.369 663.182 cv
148.908 664.582 145.799 666.604 146.018 670.332 cv
146.239 674.065 149.442 676.908 153.169 676.684 cv
156.901 676.463 158.923 673.221 159.523 669.533 cv
159.778 667.97 160.064 666.06 159.904 664.58 cv
168.337 656.148 li
221.905 656.148 li
cp
f
194.419 487.367 mo
194.419 492.619 190.164 496.875 184.91 496.875 cv
179.66 496.875 175.401 492.619 175.401 487.367 cv
175.401 482.113 179.66 477.857 184.91 477.857 cv
190.164 477.857 194.419 482.113 194.419 487.367 cv
1 1 1 rgb
f
328.251 633.684 mo
328.251 638.963 323.966 643.248 318.685 643.248 cv
313.4 643.248 309.119 638.963 309.119 633.684 cv
309.119 628.398 313.4 624.115 318.685 624.115 cv
323.966 624.115 328.251 628.398 328.251 633.684 cv
cp
f
269.407 597.678 mo
269.407 602.961 265.123 607.244 259.842 607.244 cv
254.559 607.244 250.276 602.961 250.276 597.678 cv
250.276 592.394 254.559 588.111 259.842 588.111 cv
265.123 588.111 269.407 592.394 269.407 597.678 cv
cp
f
192.116 612.441 mo
192.116 617.727 187.834 622.011 182.551 622.011 cv
177.269 622.011 172.983 617.727 172.983 612.441 cv
172.983 607.162 177.269 602.877 182.551 602.877 cv
187.834 602.877 192.116 607.162 192.116 612.441 cv
cp
f
257.091 631.943 mo
257.091 637.227 252.809 641.511 247.524 641.511 cv
242.244 641.511 237.958 637.227 237.958 631.943 cv
237.958 626.662 242.244 622.377 247.524 622.377 cv
252.809 622.377 257.091 626.662 257.091 631.943 cv
cp
f
1060.3 256.84 mo
1060.3 258.752 1058.75 260.297 1056.84 260.297 cv
1054.93 260.297 1053.38 258.752 1053.38 256.84 cv
1053.38 254.93 1054.93 253.383 1056.84 253.383 cv
1058.75 253.383 1060.3 254.93 1060.3 256.84 cv
cp
1078.06 105.469 mo
1112.71 71.1919 li
1110.28 68.7339 li
1074.6 104.024 li
1074.6 184.285 li
1062.23 196.836 li
1069.12 215.975 li
1068.85 241.867 li
1060.42 250.273 li
1060.69 250.548 li
1059.16 250.395 1057.11 250.816 1055.46 251.188 cv
1051.81 252.004 1048.69 254.216 1048.69 257.953 cv
1048.69 261.69 1051.72 264.719 1055.46 264.719 cv
1059.19 264.719 1061.02 261.49 1062.22 257.953 cv
1062.71 256.492 1063.23 254.199 1062.99 252.594 cv
1072.29 243.318 li
1072.59 215.387 li
1066.22 197.714 li
1078.06 185.703 li
1078.06 105.469 li
cp
0 .862745 1 rgb
f
1052.46 227.523 mo
1053.79 228.896 1053.75 231.088 1052.37 232.412 cv
1051 233.742 1048.81 233.703 1047.49 232.328 cv
1046.16 230.953 1046.2 228.766 1047.57 227.439 cv
1048.94 226.113 1051.13 226.152 1052.46 227.523 cv
cp
1069.7 103.143 mo
1100.84 71.1685 li
1098.36 68.7568 li
1066.25 101.738 li
1066.25 161.313 li
1053.63 178.048 li
1048.09 184.342 li
1048.09 222.941 li
1046.98 223.926 1045.91 225.514 1045.05 226.824 cv
1042.99 229.945 1042.29 233.701 1044.88 236.391 cv
1047.48 239.076 1051.76 239.15 1054.44 236.557 cv
1057.13 233.961 1056.21 230.369 1054.61 226.99 cv
1053.97 225.637 1052.8 223.699 1051.55 222.686 cv
1051.55 185.646 li
1056.31 180.23 li
1069.7 162.471 li
1069.7 103.143 li
cp
f
1043.1 301.148 mo
1044.43 302.522 1044.39 304.711 1043.02 306.037 cv
1041.64 307.365 1039.45 307.326 1038.13 305.953 cv
1036.8 304.576 1036.84 302.389 1038.21 301.063 cv
1039.58 299.736 1041.77 299.775 1043.1 301.148 cv
cp
1076.74 83.1353 mo
1089.19 71.2129 li
1086.8 68.7129 li
1075.35 79.6782 li
1045.66 79.6782 li
1035.99 89.0278 li
1036 143.498 li
1038.01 161.988 li
1038.57 296.711 li
1037.52 297.701 1036.51 299.197 1035.69 300.447 cv
1033.63 303.566 1032.93 307.324 1035.52 310.012 cv
1038.12 312.701 1042.4 312.775 1045.09 310.178 cv
1047.77 307.586 1046.85 303.992 1045.25 300.613 cv
1044.59 299.203 1043.34 297.154 1042.03 296.182 cv
1041.45 161.705 li
1039.45 143.217 li
1039.45 90.4966 li
1047.06 83.1353 li
1076.74 83.1353 li
cp
f
1033.29 284.971 mo
1034.62 286.346 1034.58 288.533 1033.2 289.859 cv
1031.83 291.188 1029.64 291.147 1028.31 289.777 cv
1026.99 288.402 1027.03 286.213 1028.4 284.887 cv
1029.77 283.559 1031.96 283.598 1033.29 284.971 cv
cp
1071.43 73.6274 mo
1074.48 71.3472 li
1072.42 68.5786 li
1070.28 70.1685 li
1039.62 70.1685 li
1017.26 91.6177 li
1017.26 162.564 li
1028.79 175.148 li
1028.79 280.512 li
1027.73 281.502 1026.7 283.012 1025.88 284.272 cv
1023.82 287.393 1023.11 291.147 1025.71 293.838 cv
1028.31 296.523 1032.59 296.598 1035.27 294.002 cv
1037.96 291.408 1037.04 287.815 1035.44 284.438 cv
1034.78 283.037 1033.54 281.007 1032.25 280.027 cv
1032.25 173.805 li
1020.72 161.221 li
1020.72 93.0942 li
1041.01 73.6274 li
1071.43 73.6274 li
cp
f
1111.43 445.225 mo
1111.43 443.315 1112.98 441.766 1114.89 441.766 cv
1116.8 441.766 1118.35 443.315 1118.35 445.225 cv
1118.35 447.135 1116.8 448.684 1114.89 448.684 cv
1112.98 448.684 1111.43 447.135 1111.43 445.225 cv
cp
999.699 284.713 mo
1011.79 273.486 li
1011.79 101.752 li
995.937 85.0396 li
995.937 69.9629 li
992.48 69.9629 li
992.48 86.4185 li
1008.33 103.129 li
1008.33 271.98 li
996.214 283.23 li
996.812 316.367 li
1023.31 344.59 li
1023.31 402.539 li
1047.95 427.182 li
1091.34 427.182 li
1108.28 443.137 li
1108.58 442.816 li
1108.68 444.063 1108.97 445.438 1109.24 446.611 cv
1110.05 450.257 1112.27 453.379 1116 453.379 cv
1119.74 453.379 1122.76 450.348 1122.76 446.611 cv
1122.76 442.877 1119.54 441.045 1116 439.848 cv
1114.12 439.211 1110.87 438.553 1109.48 439.514 cv
1092.71 423.725 li
1049.38 423.725 li
1026.77 401.107 li
1026.77 343.223 li
1000.25 314.971 li
999.699 284.713 li
cp
f
1080.7 469.048 mo
1080.7 467.139 1082.25 465.589 1084.16 465.589 cv
1086.07 465.589 1087.62 467.139 1087.62 469.048 cv
1087.62 470.957 1086.07 472.505 1084.16 472.505 cv
1082.25 472.505 1080.7 470.957 1080.7 469.048 cv
cp
999.107 103.085 mo
987.005 92.7114 li
987.005 69.9629 li
983.548 69.9629 li
983.548 94.3032 li
995.65 104.676 li
995.65 259.34 li
989.888 265.103 li
989.888 322.141 li
1011.21 343.75 li
1011.21 399.086 li
1077.88 465.129 li
1077.7 466.664 1078.13 468.75 1078.51 470.434 cv
1079.33 474.08 1081.54 477.199 1085.27 477.199 cv
1089.01 477.199 1092.04 474.17 1092.04 470.434 cv
1092.04 466.697 1088.81 464.867 1085.27 463.67 cv
1083.98 463.232 1082.04 462.785 1080.5 462.853 cv
1014.67 397.645 li
1014.67 342.334 li
993.345 320.723 li
993.345 266.533 li
999.107 260.772 li
999.107 103.085 li
cp
f
1000.74 510.209 mo
1002.07 511.584 1002.03 513.771 1000.65 515.098 cv
999.279 516.428 997.087 516.389 995.765 515.014 cv
994.437 513.641 994.474 511.451 995.849 510.125 cv
997.224 508.798 999.412 508.838 1000.74 510.209 cv
cp
985.564 114.67 mo
977.783 107.181 li
977.783 69.9629 li
974.326 69.9629 li
974.326 108.651 li
982.105 116.143 li
982.105 332.67 li
996.228 346.647 li
996.228 505.757 li
995.169 506.748 994.152 508.254 993.328 509.51 cv
991.271 512.63 990.564 516.389 993.158 519.076 cv
995.755 521.762 1000.04 521.836 1002.72 519.242 cv
1005.41 516.646 1004.49 513.055 1002.89 509.676 cv
1002.23 508.272 1000.99 506.236 999.685 505.258 cv
999.685 345.203 li
985.564 331.227 li
985.564 114.67 li
cp
f
959.056 69.9629 mo
962.515 69.9629 li
962.515 79.6782 li
959.056 79.6782 li
959.056 69.9629 li
cp
f
969.247 329.018 mo
969.247 330.928 967.701 332.477 965.791 332.477 cv
963.878 332.477 962.331 330.928 962.331 329.018 cv
962.331 327.109 963.878 325.56 965.791 325.56 cv
967.701 325.56 969.247 327.109 969.247 329.018 cv
cp
977.783 146.438 mo
947.529 116.7 li
947.529 69.9629 li
944.07 69.9629 li
944.07 118.149 li
974.326 147.887 li
974.326 317.037 li
969.404 322.701 li
967.904 322.611 965.976 323.012 964.402 323.363 cv
960.757 324.182 957.638 326.395 957.638 330.129 cv
957.638 333.865 960.668 336.895 964.402 336.895 cv
968.14 336.895 969.97 333.67 971.166 330.129 cv
971.634 328.746 972.111 326.625 971.955 325.039 cv
977.783 318.332 li
977.783 146.438 li
cp
f
786.322 620.994 mo
787.253 622.664 786.654 624.766 784.986 625.699 cv
783.316 626.627 781.212 626.029 780.283 624.361 cv
779.351 622.693 779.949 620.588 781.617 619.658 cv
783.287 618.729 785.392 619.326 786.322 620.994 cv
cp
966.046 157.254 mo
907.765 98.2739 li
907.765 69.9629 li
904.306 69.9629 li
904.306 99.6919 li
963.083 159.176 li
962.228 298.255 li
912.214 350.246 li
854.019 350.246 li
846.39 358.039 li
846.39 543.17 li
797.236 592.607 li
795.503 602.43 li
783.634 615.019 li
783.828 615.201 li
782.363 615.754 780.671 617.221 779.339 618.416 cv
776.552 620.906 774.906 624.356 776.726 627.619 cv
778.546 630.882 782.666 632.053 785.927 630.234 cv
789.189 628.414 789.218 624.703 788.541 621.031 cv
788.296 619.713 787.759 617.832 786.972 616.519 cv
798.728 604.046 li
800.455 594.275 li
849.847 544.594 li
849.847 359.451 li
855.474 353.705 li
913.687 353.705 li
965.677 299.656 li
965.681 298.967 li
966.55 157.764 li
966.046 157.254 li
cp
f
745.541 623.074 mo
746.31 621.326 748.349 620.533 750.099 621.301 cv
751.847 622.068 752.64 624.109 751.871 625.857 cv
751.101 627.607 749.062 628.4 747.314 627.63 cv
745.564 626.861 744.771 624.822 745.541 623.074 cv
cp
954.619 162.777 mo
894.511 102.666 li
894.511 69.9629 li
894.511 67.5757 892.576 65.6411 890.189 65.6411 cv
887.802 65.6411 885.867 67.5757 885.867 69.9629 cv
885.867 104.457 li
885.867 105.604 886.322 106.704 887.132 107.514 cv
947.242 167.625 li
947.242 288.531 li
904.527 331.516 li
844.662 331.516 li
843.515 331.516 842.418 331.973 841.607 332.781 cv
829.214 345.173 li
828.406 345.982 827.949 347.082 827.949 348.228 cv
827.949 531.144 li
746.224 613.154 li
745.052 614.332 744.716 616.007 745.177 617.488 cv
743.97 618.584 743.388 621.339 742.97 623.459 cv
742.253 627.127 743.021 630.871 746.443 632.377 cv
749.863 633.88 753.855 632.326 755.357 628.908 cv
756.863 625.486 754.644 622.512 751.888 619.992 cv
751.822 619.93 751.75 619.867 751.677 619.803 cv
751.914 619.646 752.138 619.464 752.347 619.255 cv
835.331 535.982 li
836.142 535.172 836.593 534.074 836.593 532.93 cv
836.593 350.02 li
846.453 340.16 li
906.324 340.16 li
907.476 340.16 908.58 339.701 909.39 338.885 cv
954.63 293.359 li
955.435 292.549 955.886 291.453 955.886 290.31 cv
955.886 165.832 li
955.886 164.686 955.429 163.588 954.619 162.777 cv
cp
f
815.369 263.572 mo
813.502 263.969 811.664 262.777 811.269 260.908 cv
810.869 259.041 812.062 257.205 813.929 256.809 cv
815.798 256.412 817.632 257.602 818.033 259.471 cv
818.429 261.338 817.236 263.174 815.369 263.572 cv
cp
876.585 112.387 mo
876.595 108.745 876.638 92.2559 876.583 85.1382 cv
876.558 81.8862 875.632 79.4478 873.826 77.8887 cv
871.695 76.0469 869.154 76.1528 868.48 76.2202 cv
845.814 76.2202 li
843.115 76.2202 841.144 75.5562 839.953 74.2485 cv
838.396 72.5396 838.597 70.1606 838.601 70.1372 cv
835.162 69.7778 li
835.144 69.9341 834.775 73.6567 837.357 76.5337 cv
839.228 78.6216 842.076 79.6782 845.814 79.6782 cv
868.816 79.6606 li
868.816 79.6587 870.416 79.4888 871.593 80.5288 cv
872.593 81.4116 873.109 82.9722 873.127 85.1646 cv
873.187 93.1299 873.127 112.899 873.127 113.097 cv
873.125 113.817 li
873.632 114.327 li
937.732 178.361 li
937.732 258.772 li
916.41 280.382 li
916.41 298.266 li
895.497 320.277 li
875.572 320.277 li
861.736 306.379 li
859.267 303.557 li
835.609 303.844 li
828.527 296.256 li
828.527 270.932 li
821.533 262.984 li
821.408 261.375 820.453 259.287 819.677 257.984 cv
817.771 254.771 815.306 251.996 811.652 252.775 cv
808 253.553 805.666 257.145 806.445 260.797 cv
807.222 264.453 810.734 265.965 814.47 266.008 cv
816.005 266.025 817.869 266.022 819.294 265.676 cv
825.068 272.234 li
825.068 297.621 li
834.122 307.322 li
857.716 307.035 li
859.21 308.74 li
874.136 323.736 li
896.982 323.736 li
919.867 299.647 li
919.867 281.801 li
941.191 260.19 li
941.191 176.93 li
876.585 112.387 li
cp
f
886.066 298.137 mo
887.441 296.813 889.628 296.852 890.955 298.221 cv
892.283 299.598 892.244 301.785 890.869 303.111 cv
889.496 304.44 887.304 304.4 885.982 303.025 cv
884.654 301.652 884.691 299.464 886.066 298.137 cv
cp
928.511 188.166 mo
806.98 67.2139 li
804.543 69.6655 li
925.052 189.604 li
925.052 255.172 li
908.234 271.005 li
892.617 271.005 li
886.154 277.807 li
886.154 294.055 li
885.201 295.035 884.293 296.382 883.544 297.522 cv
881.49 300.643 880.779 304.4 883.375 307.088 cv
885.97 309.775 890.253 309.85 892.941 307.254 cv
895.628 304.658 894.706 301.066 893.107 297.688 cv
892.394 296.182 891.015 293.945 889.611 293.074 cv
889.611 279.188 li
894.099 274.463 li
909.603 274.463 li
928.511 256.668 li
928.511 188.166 li
cp
f
906.46 255.602 mo
906.128 257.482 904.335 258.738 902.455 258.404 cv
900.576 258.072 899.32 256.279 899.65 254.398 cv
899.982 252.518 901.773 251.264 903.656 251.596 cv
905.537 251.926 906.791 253.719 906.46 255.602 cv
cp
917.918 187.658 mo
798.335 68.7378 li
795.898 71.189 li
914.97 189.604 li
914.97 240.914 li
906.875 249.254 li
905.548 249.082 903.992 249.131 902.671 249.191 cv
898.939 249.363 895.484 251.002 894.833 254.68 cv
894.185 258.359 896.642 261.865 900.322 262.514 cv
904 263.164 906.365 260.305 908.158 257.029 cv
909.005 255.479 910.064 252.855 909.791 251.215 cv
918.427 242.314 li
918.427 188.164 li
917.918 187.658 li
cp
f
904.658 194.498 mo
906.023 195.834 906.043 198.025 904.706 199.389 cv
903.371 200.754 901.181 200.777 899.816 199.439 cv
898.453 198.102 898.431 195.914 899.769 194.549 cv
901.103 193.186 903.294 193.162 904.658 194.498 cv
cp
904.019 182.402 mo
792.646 71.6079 li
741.933 71.6079 li
737.543 67.2173 li
735.097 69.6626 li
740.502 75.0659 li
791.216 75.0659 li
900.562 183.839 li
900.562 189.697 li
899.335 190.656 898.156 192.506 897.228 194.004 cv
895.263 197.18 894.66 200.957 897.328 203.57 cv
899.996 206.186 904.279 206.141 906.892 203.471 cv
909.505 200.801 908.484 197.236 906.794 193.904 cv
906.189 192.713 905.146 191.066 904.019 190.029 cv
904.019 182.402 li
cp
f
903.453 224.48 mo
904.791 223.117 906.978 223.094 908.341 224.43 cv
909.706 225.766 909.73 227.955 908.392 229.32 cv
907.054 230.684 904.867 230.707 903.503 229.371 cv
902.138 228.033 902.117 225.846 903.453 224.48 cv
cp
738.214 77.9487 mo
728.064 67.2485 li
725.556 69.6289 li
736.728 81.4067 li
789.193 81.4067 li
885.291 178.359 li
885.291 204.832 li
903.066 220.811 li
902.277 221.76 901.539 222.928 900.914 223.934 cv
898.947 227.111 898.343 230.889 901.011 233.502 cv
903.681 236.117 907.962 236.072 910.58 233.402 cv
913.193 230.73 912.171 227.168 910.478 223.836 cv
909.627 222.154 907.902 219.572 906.304 219.072 cv
888.75 203.289 li
888.75 176.936 li
790.636 77.9487 li
738.214 77.9487 li
cp
f
875.835 190.732 mo
877.199 192.068 877.222 194.258 875.884 195.623 cv
874.55 196.988 872.359 197.01 870.996 195.674 cv
869.63 194.338 869.611 192.148 870.947 190.785 cv
872.283 189.42 874.472 189.396 875.835 190.732 cv
cp
737.027 83.7095 mo
720.244 67.2075 li
717.82 69.6719 li
735.611 87.1685 li
785.742 87.1685 li
871.46 172.602 li
871.46 186.004 li
871.646 186.004 li
870.455 186.982 869.31 188.779 868.406 190.238 cv
866.441 193.414 865.837 197.189 868.505 199.805 cv
871.175 202.42 875.458 202.375 878.072 199.707 cv
880.687 197.035 879.664 193.471 877.972 190.141 cv
877.314 188.844 876.136 187.005 874.898 186.004 cv
874.918 186.004 li
874.918 171.166 li
874.41 170.658 li
787.171 83.7095 li
737.027 83.7095 li
cp
f
875.628 253.882 mo
875.296 255.764 873.505 257.02 871.622 256.688 cv
869.742 256.355 868.488 254.563 868.82 252.682 cv
869.152 250.799 870.943 249.545 872.826 249.877 cv
874.706 250.209 875.96 252.002 875.628 253.882 cv
cp
732.71 90.3379 mo
711.031 68.7378 li
708.589 71.189 li
731.283 93.7954 li
784.171 93.7954 li
855.179 165.393 li
855.179 204.697 li
862.306 213.061 li
881.644 213.061 li
886.443 218.332 li
886.443 237.07 li
875.197 247.246 li
875.4 247.471 li
874.23 247.381 872.951 247.422 871.839 247.473 cv
868.109 247.646 864.652 249.283 864.003 252.961 cv
863.355 256.641 865.81 260.148 869.49 260.797 cv
873.169 261.445 875.535 258.588 877.326 255.311 cv
878.32 253.492 879.613 250.197 878.697 248.744 cv
889.902 238.605 li
889.902 216.99 li
883.173 209.604 li
863.902 209.604 li
858.636 203.424 li
858.636 163.967 li
785.613 90.3379 li
732.71 90.3379 li
cp
f
865.73 231.13 mo
865.73 229.219 867.279 227.672 869.189 227.672 cv
871.101 227.672 872.646 229.219 872.646 231.13 cv
872.646 233.039 871.101 234.588 869.189 234.588 cv
867.279 234.588 865.73 233.039 865.73 231.13 cv
cp
728.97 95.5259 mo
702.394 68.7446 li
699.939 71.1821 li
727.533 98.9829 li
779.968 98.9829 li
848.697 168.846 li
848.697 215.316 li
862.855 227.676 li
862.804 229.15 863.197 231 863.535 232.514 cv
864.353 236.16 866.566 239.281 870.3 239.281 cv
874.039 239.281 877.066 236.252 877.066 232.514 cv
877.066 228.779 873.841 226.949 870.3 225.75 cv
868.865 225.266 866.627 224.766 865.025 224.979 cv
852.154 213.742 li
852.154 167.428 li
781.416 95.5259 li
728.97 95.5259 li
cp
f
844.275 221.691 mo
845.603 223.066 845.564 225.254 844.189 226.582 cv
842.814 227.908 840.625 227.871 839.3 226.496 cv
837.974 225.121 838.013 222.934 839.386 221.607 cv
840.759 220.279 842.949 220.318 844.275 221.691 cv
cp
725.806 102.153 mo
692.888 68.7505 li
690.427 71.1753 li
724.357 105.612 li
777.664 105.612 li
839.765 168.844 li
839.765 217.24 li
838.706 218.23 837.687 219.736 836.863 220.992 cv
834.808 224.111 834.099 227.867 836.695 230.557 cv
839.291 233.244 843.572 233.318 846.261 230.723 cv
848.949 228.127 848.027 224.535 846.427 221.158 cv
845.763 219.754 844.523 217.721 843.222 216.742 cv
843.222 167.432 li
842.728 166.926 li
779.115 102.153 li
725.806 102.153 li
cp
f
837.265 254.152 mo
837.265 252.24 838.814 250.695 840.724 250.695 cv
842.634 250.695 844.181 252.24 844.181 254.152 cv
844.181 256.063 842.634 257.609 840.724 257.609 cv
838.814 257.609 837.265 256.063 837.265 254.152 cv
cp
722.341 107.915 mo
683.372 68.7446 li
680.921 71.1821 li
720.904 111.373 li
773.353 111.373 li
824.779 162.609 li
824.779 240.906 li
834.433 250.281 li
834.273 251.813 834.697 253.873 835.072 255.537 cv
835.888 259.184 838.099 262.303 841.833 262.303 cv
845.572 262.303 848.601 259.273 848.601 255.537 cv
848.601 251.801 845.375 249.973 841.833 248.775 cv
840.527 248.332 838.556 247.879 837.003 247.961 cv
828.236 239.443 li
828.236 161.176 li
774.781 107.915 li
722.341 107.915 li
cp
f
813.115 192.236 mo
814.478 193.572 814.503 195.762 813.166 197.127 cv
811.83 198.49 809.64 198.514 808.277 197.178 cv
806.912 195.84 806.89 193.652 808.226 192.287 cv
809.562 190.923 811.752 190.9 813.115 192.236 cv
cp
719.747 114.254 mo
674.148 68.7407 li
671.706 71.186 li
718.316 117.713 li
770.752 117.713 li
809.509 157.033 li
809.509 187.104 li
808.113 187.896 806.738 190.045 805.687 191.74 cv
803.722 194.918 803.117 198.693 805.785 201.311 cv
808.455 203.924 812.74 203.879 815.353 201.209 cv
817.968 198.539 816.945 194.975 815.253 191.643 cv
814.617 190.387 813.492 188.627 812.296 187.607 cv
812.966 187.607 li
812.966 155.615 li
772.197 114.254 li
719.747 114.254 li
cp
f
1049.92 99.604 mo
1048.59 98.23 1048.63 96.0415 1050.01 94.7129 cv
1051.38 93.3872 1053.57 93.4238 1054.89 94.7988 cv
1056.22 96.1729 1056.18 98.3628 1054.81 99.688 cv
1053.44 101.015 1051.25 100.976 1049.92 99.604 cv
cp
1050.6 104.248 mo
1050.46 115.598 li
1053.92 115.643 li
1054.06 104.378 li
1055.25 103.419 1056.41 101.705 1057.33 100.305 cv
1059.38 97.1821 1060.09 93.4282 1057.5 90.7388 cv
1054.9 88.0522 1050.62 87.978 1047.94 90.5728 cv
1045.25 93.1685 1046.17 96.7603 1047.77 100.137 cv
1048.37 101.409 1049.44 103.196 1050.6 104.248 cv
cp
f
1064.65 361.068 mo
1062.79 361.467 1060.95 360.275 1060.55 358.408 cv
1060.15 356.541 1061.35 354.703 1063.21 354.305 cv
1065.08 353.908 1066.92 355.1 1067.32 356.969 cv
1067.71 358.838 1066.52 360.672 1064.65 361.068 cv
cp
1070.53 362.06 mo
1071.48 360.609 1070.03 357.287 1068.96 355.482 cv
1067.05 352.27 1064.59 349.494 1060.94 350.273 cv
1057.28 351.051 1054.95 354.643 1055.73 358.297 cv
1056.51 361.949 1060.02 363.463 1063.75 363.506 cv
1066.24 363.533 1069.59 363.514 1070.53 362.06 cv
cp
f
1053.92 466.971 mo
1055.83 466.971 1057.37 468.518 1057.37 470.428 cv
1057.37 472.336 1055.83 473.885 1053.92 473.885 cv
1052 473.885 1050.46 472.336 1050.46 470.428 cv
1050.46 468.518 1052 466.971 1053.92 466.971 cv
cp
1055 463.373 mo
1050.8 463.373 1047.4 466.779 1047.4 470.98 cv
1047.4 475.178 1050.8 478.584 1055 478.584 cv
1059.2 478.584 1062.6 475.178 1062.6 470.98 cv
1062.6 466.779 1059.2 463.373 1055 463.373 cv
cp
f
944.716 345.99 mo
942.804 345.99 941.257 344.441 941.257 342.531 cv
941.257 340.623 942.804 339.072 944.716 339.072 cv
946.625 339.072 948.173 340.623 948.173 342.531 cv
948.173 344.441 946.625 345.99 944.716 345.99 cv
cp
945.8 350.688 mo
950 350.688 953.404 347.283 953.404 343.084 cv
953.404 338.885 950 335.478 945.8 335.478 cv
941.603 335.478 938.197 338.885 938.197 343.084 cv
938.197 347.283 941.603 350.688 945.8 350.688 cv
cp
f
932.755 283.363 mo
934.668 283.363 936.212 284.912 936.212 286.822 cv
936.212 288.732 934.668 290.279 932.755 290.279 cv
930.845 290.279 929.296 288.732 929.296 286.822 cv
929.296 284.912 930.845 283.363 932.755 283.363 cv
cp
933.841 279.768 mo
929.642 279.768 926.238 283.173 926.238 287.373 cv
926.238 291.572 929.642 294.978 933.841 294.978 cv
938.041 294.978 941.443 291.572 941.443 287.373 cv
941.443 283.173 938.041 279.768 933.841 279.768 cv
cp
f
901.97 284.117 mo
903.88 284.117 905.427 285.664 905.427 287.576 cv
905.427 289.484 903.88 291.033 901.97 291.033 cv
900.058 291.033 898.511 289.484 898.511 287.576 cv
898.511 285.664 900.058 284.117 901.97 284.117 cv
cp
903.056 280.523 mo
898.857 280.523 895.453 283.926 895.453 288.129 cv
895.453 292.328 898.857 295.73 903.056 295.73 cv
907.255 295.73 910.658 292.328 910.658 288.129 cv
910.658 283.926 907.255 280.523 903.056 280.523 cv
cp
f
866.916 287.576 mo
866.916 285.664 868.462 284.117 870.375 284.117 cv
872.283 284.117 873.831 285.664 873.831 287.576 cv
873.831 289.484 872.283 291.033 870.375 291.033 cv
868.462 291.033 866.916 289.484 866.916 287.576 cv
cp
863.855 288.129 mo
863.855 292.328 867.261 295.73 871.46 295.73 cv
875.658 295.73 879.062 292.328 879.062 288.129 cv
879.062 283.926 875.658 280.523 871.46 280.523 cv
867.261 280.523 863.855 283.926 863.855 288.129 cv
cp
f
836.949 287.576 mo
836.949 285.664 838.496 284.117 840.406 284.117 cv
842.318 284.117 843.863 285.664 843.863 287.576 cv
843.863 289.484 842.318 291.033 840.406 291.033 cv
838.496 291.033 836.949 289.484 836.949 287.576 cv
cp
833.888 288.129 mo
833.888 292.328 837.293 295.73 841.492 295.73 cv
845.691 295.73 849.095 292.328 849.095 288.129 cv
849.095 283.926 845.691 280.523 841.492 280.523 cv
837.293 280.523 833.888 283.926 833.888 288.129 cv
cp
f
813.068 287.576 mo
813.068 289.484 811.521 291.033 809.611 291.033 cv
807.699 291.033 806.152 289.484 806.152 287.576 cv
806.152 285.664 807.699 284.117 809.611 284.117 cv
811.521 284.117 813.068 285.664 813.068 287.576 cv
cp
818.3 288.129 mo
818.3 283.926 814.896 280.523 810.697 280.523 cv
806.497 280.523 803.093 283.926 803.093 288.129 cv
803.093 292.328 806.497 295.73 810.697 295.73 cv
814.896 295.73 818.3 292.328 818.3 288.129 cv
cp
f
813.068 318.863 mo
813.068 320.772 811.521 322.32 809.611 322.32 cv
807.699 322.32 806.152 320.772 806.152 318.863 cv
806.152 316.951 807.699 315.404 809.611 315.404 cv
811.521 315.404 813.068 316.951 813.068 318.863 cv
cp
818.3 319.414 mo
818.3 315.213 814.896 311.809 810.697 311.809 cv
806.497 311.809 803.093 315.213 803.093 319.414 cv
803.093 323.615 806.497 327.018 810.697 327.018 cv
814.896 327.018 818.3 323.615 818.3 319.414 cv
cp
f
812.628 389.709 mo
814.537 389.709 816.085 391.26 816.085 393.17 cv
816.085 395.078 814.537 396.627 812.628 396.627 cv
810.718 396.627 809.169 395.078 809.169 393.17 cv
809.169 391.26 810.718 389.709 812.628 389.709 cv
cp
813.714 386.115 mo
809.511 386.115 806.109 389.522 806.109 393.723 cv
806.109 397.92 809.511 401.326 813.714 401.326 cv
817.912 401.326 821.316 397.92 821.316 393.723 cv
821.316 389.522 817.912 386.115 813.714 386.115 cv
cp
f
806.693 347.861 mo
806.693 345.951 808.242 344.4 810.15 344.4 cv
812.062 344.4 813.609 345.951 813.609 347.861 cv
813.609 349.77 812.062 351.318 810.15 351.318 cv
808.242 351.318 806.693 349.77 806.693 347.861 cv
cp
811.238 356.018 mo
815.435 356.018 818.839 352.611 818.839 348.412 cv
818.839 344.213 815.435 340.807 811.238 340.807 cv
807.037 340.807 803.634 344.213 803.634 348.412 cv
803.634 352.611 807.037 356.018 811.238 356.018 cv
cp
f
816.525 416.256 mo
816.525 418.166 814.98 419.714 813.068 419.714 cv
811.158 419.714 809.611 418.166 809.611 416.256 cv
809.611 414.346 811.158 412.796 813.068 412.796 cv
814.98 412.796 816.525 414.346 816.525 416.256 cv
cp
821.759 416.807 mo
821.759 412.607 818.353 409.201 814.154 409.201 cv
809.955 409.201 806.55 412.607 806.55 416.807 cv
806.55 421.007 809.955 424.412 814.154 424.412 cv
818.353 424.412 821.759 421.007 821.759 416.807 cv
cp
f
812.525 475.086 mo
810.613 475.086 809.068 473.539 809.068 471.629 cv
809.068 469.721 810.613 468.172 812.525 468.172 cv
814.435 468.172 815.982 469.721 815.982 471.629 cv
815.982 473.539 814.435 475.086 812.525 475.086 cv
cp
813.609 479.783 mo
817.808 479.783 821.212 476.38 821.212 472.182 cv
821.212 467.98 817.808 464.576 813.609 464.576 cv
809.41 464.576 806.005 467.98 806.005 472.182 cv
806.005 476.38 809.41 479.783 813.609 479.783 cv
cp
f
1051.6 288.129 mo
1051.6 286.217 1053.15 284.668 1055.06 284.668 cv
1056.97 284.668 1058.52 286.217 1058.52 288.129 cv
1058.52 290.037 1056.97 291.586 1055.06 291.586 cv
1053.15 291.586 1051.6 290.037 1051.6 288.129 cv
cp
1048.55 288.68 mo
1048.55 292.879 1051.95 296.283 1056.15 296.283 cv
1060.35 296.283 1063.75 292.879 1063.75 288.68 cv
1063.75 284.478 1060.35 281.074 1056.15 281.074 cv
1051.95 281.074 1048.55 284.478 1048.55 288.68 cv
cp
f
1014.35 299.543 mo
1014.35 301.449 1012.8 303 1010.89 303 cv
1008.98 303 1007.43 301.449 1007.43 299.543 cv
1007.43 297.631 1008.98 296.082 1010.89 296.082 cv
1012.8 296.082 1014.35 297.631 1014.35 299.543 cv
cp
1011.98 292.488 mo
1007.78 292.488 1004.37 295.891 1004.37 300.092 cv
1004.37 304.293 1007.78 307.697 1011.98 307.697 cv
1016.18 307.697 1019.58 304.293 1019.58 300.092 cv
1019.58 295.891 1016.18 292.488 1011.98 292.488 cv
cp
f
1050.15 410.693 mo
1050.15 408.783 1051.7 407.234 1053.61 407.234 cv
1055.52 407.234 1057.07 408.783 1057.07 410.693 cv
1057.07 412.602 1055.52 414.15 1053.61 414.15 cv
1051.7 414.15 1050.15 412.602 1050.15 410.693 cv
cp
1047.09 411.244 mo
1047.09 415.443 1050.5 418.848 1054.69 418.848 cv
1058.9 418.848 1062.3 415.443 1062.3 411.244 cv
1062.3 407.043 1058.9 403.639 1054.69 403.639 cv
1050.5 403.639 1047.09 407.043 1047.09 411.244 cv
cp
f
1050.79 173.877 mo
1050.79 179.129 1055.05 183.385 1060.3 183.385 cv
1065.55 183.385 1069.81 179.129 1069.81 173.877 cv
1069.81 168.623 1065.55 164.367 1060.3 164.367 cv
1055.05 164.367 1050.79 168.623 1050.79 173.877 cv
1 1 1 rgb
f
1055.72 206.523 mo
1055.72 211.775 1059.98 216.033 1065.23 216.033 cv
1070.48 216.033 1074.74 211.775 1074.74 206.523 cv
1074.74 201.271 1070.48 197.016 1065.23 197.016 cv
1059.98 197.016 1055.72 201.271 1055.72 206.523 cv
f
1028.21 151.943 mo
1028.21 157.195 1032.47 161.451 1037.72 161.451 cv
1042.97 161.451 1047.23 157.195 1047.23 151.943 cv
1047.23 146.689 1042.97 142.434 1037.72 142.434 cv
1032.47 142.434 1028.21 146.689 1028.21 151.943 cv
f
792.171 562.607 mo
792.171 567.863 796.431 572.117 801.681 572.117 cv
806.933 572.117 811.191 567.863 811.191 562.607 cv
811.191 557.357 806.933 553.1 801.681 553.1 cv
796.431 553.1 792.171 557.357 792.171 562.607 cv
f
789.482 602.178 mo
789.482 607.432 793.738 611.685 798.99 611.685 cv
804.244 611.685 808.497 607.432 808.497 602.178 cv
808.497 596.926 804.244 592.668 798.99 592.668 cv
793.738 592.668 789.482 596.926 789.482 602.178 cv
f
951.418 87.3882 mo
951.418 92.6411 955.677 96.8979 960.927 96.8979 cv
966.181 96.8979 970.435 92.6411 970.435 87.3882 cv
970.435 82.1382 966.181 77.8789 960.927 77.8789 cv
955.677 77.8789 951.418 82.1382 951.418 87.3882 cv
f
847.4 305.115 mo
847.4 310.367 851.656 314.623 856.908 314.623 cv
862.16 314.623 866.418 310.367 866.418 305.115 cv
866.418 299.863 862.16 295.605 856.908 295.605 cv
851.656 295.605 847.4 299.863 847.4 305.115 cv
f
1042.33 123.498 mo
1042.33 128.752 1046.59 133.008 1051.84 133.008 cv
1057.09 133.008 1061.35 128.752 1061.35 123.498 cv
1061.35 118.247 1057.09 113.991 1051.84 113.991 cv
1046.59 113.991 1042.33 118.247 1042.33 123.498 cv
f
1063.94 368.109 mo
1063.94 373.363 1068.2 377.619 1073.45 377.619 cv
1078.7 377.619 1082.96 373.363 1082.96 368.109 cv
1082.96 362.859 1078.7 358.6 1073.45 358.6 cv
1068.2 358.6 1063.94 362.859 1063.94 368.109 cv
f
916.671 68.4399 mo
916.671 73.7212 920.953 78.0059 926.238 78.0059 cv
931.521 78.0059 935.804 73.7212 935.804 68.4399 cv
935.804 63.1558 931.521 58.8735 926.238 58.8735 cv
920.953 58.8735 916.671 63.1558 916.671 68.4399 cv
cp
f
908.109 693.656 mo
909.447 695.019 909.425 697.209 908.062 698.545 cv
906.699 699.883 904.507 699.857 903.171 698.496 cv
901.835 697.131 901.859 694.941 903.224 693.606 cv
904.583 692.268 906.777 692.291 908.109 693.656 cv
cp
904.138 688.893 mo
902.908 689.896 901.74 691.721 901.085 693.01 cv
899.394 696.344 898.371 699.908 900.986 702.576 cv
903.599 705.248 907.882 705.291 910.55 702.678 cv
913.218 700.06 912.617 696.287 910.652 693.109 cv
909.794 691.727 908.72 690.043 907.595 689.037 cv
907.595 679.471 li
898.658 671.545 li
896.365 674.131 li
904.138 681.023 li
904.138 688.893 li
cp
0 .862745 1 rgb
f
662.002 831.488 mo
660.091 831.488 658.544 829.941 658.544 828.031 cv
658.544 826.119 660.091 824.574 662.002 824.574 cv
663.912 824.574 665.46 826.119 665.46 828.031 cv
665.46 829.941 663.912 831.488 662.002 831.488 cv
cp
894.484 707.621 mo
882.668 695.807 li
782.98 695.807 li
754.453 724.332 li
706.931 724.332 li
674.634 755.291 li
674.634 813.818 li
665.609 821.83 li
664.076 821.777 662.166 822.222 660.892 822.654 cv
657.351 823.852 654.125 825.681 654.125 829.418 cv
654.125 833.154 657.154 836.182 660.892 836.182 cv
664.627 836.182 666.837 833.063 667.656 829.418 cv
668.037 827.721 668.468 825.617 668.285 824.078 cv
678.091 815.371 li
678.091 756.768 li
708.32 727.791 li
755.884 727.791 li
784.41 699.264 li
881.238 699.264 li
893.052 711.078 li
912.685 711.078 li
919.412 703.68 li
919.412 672.838 li
915.953 672.838 li
915.953 702.342 li
911.156 707.621 li
894.484 707.621 li
cp
f
693.66 793.967 mo
694.994 795.332 694.972 797.519 693.609 798.857 cv
692.244 800.193 690.058 800.17 688.72 798.805 cv
687.382 797.441 687.406 795.252 688.769 793.914 cv
690.134 792.58 692.322 792.604 693.66 793.967 cv
cp
892.455 714.824 mo
879.777 702.435 li
785.835 702.435 li
759.326 730.385 li
712.382 730.385 li
689.759 753.008 li
689.759 788.879 li
690.134 788.879 li
688.746 789.76 687.365 791.875 686.632 793.322 cv
684.941 796.652 683.918 800.217 686.533 802.889 cv
689.146 805.557 693.429 805.604 696.101 802.988 cv
698.767 800.375 698.164 796.598 696.199 793.42 cv
695.189 791.789 693.877 789.738 692.533 788.879 cv
693.216 788.879 li
693.216 754.44 li
713.814 733.842 li
760.81 733.842 li
787.322 705.893 li
878.367 705.893 li
891.048 718.281 li
916.382 718.281 li
926.041 708.625 li
926.041 672.838 li
922.581 672.838 li
922.581 707.193 li
914.951 714.824 li
892.455 714.824 li
cp
f
724.779 793.967 mo
726.115 795.332 726.093 797.519 724.728 798.857 cv
723.365 800.193 721.175 800.17 719.839 798.805 cv
718.502 797.441 718.525 795.252 719.888 793.914 cv
721.252 792.58 723.441 792.604 724.779 793.967 cv
cp
889.308 720.01 mo
877.206 707.617 li
787.869 707.912 li
720.306 776.644 li
720.306 788.879 li
721.255 788.879 li
719.867 789.76 718.486 791.875 717.752 793.322 cv
716.06 796.652 715.037 800.217 717.652 802.889 cv
720.265 805.557 724.548 805.604 727.22 802.988 cv
729.888 800.375 729.283 796.598 727.318 793.42 cv
726.308 791.789 724.996 789.738 723.654 788.879 cv
723.763 788.879 li
723.763 778.06 li
789.324 711.361 li
875.753 711.082 li
887.853 723.469 li
918.375 723.469 li
931.804 710.668 li
931.804 672.838 li
928.347 672.838 li
928.347 709.185 li
916.99 720.01 li
889.308 720.01 li
cp
f
756.293 765.799 mo
757.63 767.162 757.605 769.352 756.242 770.688 cv
754.882 772.025 752.689 772.002 751.357 770.637 cv
750.019 769.273 750.041 767.084 751.404 765.748 cv
752.767 764.41 754.96 764.434 756.293 765.799 cv
cp
884.125 726.348 mo
872.888 714.824 li
791.476 714.824 li
751.71 755.029 li
751.71 761.604 li
750.714 762.637 749.812 764.08 749.267 765.154 cv
747.576 768.486 746.554 772.051 749.168 774.721 cv
751.783 777.389 756.066 777.435 758.734 774.82 cv
761.402 772.205 760.8 768.431 758.831 765.252 cv
757.822 763.621 756.509 761.568 755.168 760.711 cv
755.168 756.451 li
792.918 718.281 li
871.429 718.281 li
882.668 729.807 li
922.402 729.807 li
937.855 715.283 li
937.855 672.838 li
934.396 672.838 li
934.396 713.787 li
921.033 726.348 li
884.125 726.348 li
cp
f
814.752 764.07 mo
816.087 765.434 816.068 767.621 814.703 768.959 cv
813.339 770.297 811.148 770.273 809.814 768.908 cv
808.476 767.545 808.5 765.356 809.865 764.019 cv
811.226 762.682 813.418 762.705 814.752 764.07 cv
cp
882.668 731.826 mo
870.56 719.717 li
836.271 720.018 li
810.783 745.981 li
810.783 759.199 li
810.919 759.199 li
809.638 760.176 808.406 762.086 807.726 763.424 cv
806.035 766.758 805.011 770.322 807.627 772.99 cv
810.238 775.66 814.525 775.705 817.191 773.092 cv
819.859 770.475 819.257 766.701 817.293 763.523 cv
816.359 762.018 815.168 760.152 813.933 759.199 cv
814.24 759.199 li
814.24 747.394 li
837.732 723.461 li
869.142 723.188 li
881.238 735.283 li
925.017 735.283 li
943.617 716.99 li
943.617 672.838 li
940.158 672.838 li
940.158 715.541 li
923.603 731.826 li
882.668 731.826 li
cp
f
896.71 750.123 mo
895.359 751.475 893.171 751.475 891.82 750.123 cv
890.47 748.773 890.47 746.586 891.82 745.234 cv
893.171 743.883 895.359 743.883 896.71 745.234 cv
898.06 746.586 898.06 748.773 896.71 750.123 cv
cp
900.234 744.957 mo
899.283 744.193 898.16 743.525 897.281 743.09 cv
893.933 741.434 890.357 740.449 887.714 743.09 cv
885.074 745.732 885.074 750.014 887.714 752.656 cv
890.357 755.297 894.122 754.656 897.281 752.656 cv
899.117 751.494 901.484 749.943 902.054 748.414 cv
921.261 748.414 li
950.246 720.457 li
950.246 672.838 li
946.787 672.838 li
946.787 718.988 li
919.869 744.957 li
900.234 744.957 li
cp
f
862.486 753.873 mo
860.576 753.836 859.056 752.262 859.089 750.354 cv
859.122 748.443 860.697 746.922 862.609 746.957 cv
864.517 746.99 866.039 748.565 866.002 750.475 cv
865.97 752.383 864.396 753.904 862.486 753.873 cv
cp
873.66 757.471 mo
868.677 753.199 li
868.603 751.875 868.273 750.428 867.943 749.394 cv
866.81 745.838 865.033 742.58 861.298 742.515 cv
857.56 742.449 854.48 745.424 854.414 749.16 cv
854.353 752.894 857.427 755.158 861.062 756.041 cv
863.113 756.539 865.775 757.137 867.296 756.568 cv
872.38 760.928 li
919.562 760.928 li
956.872 722.732 li
956.872 672.838 li
953.416 672.838 li
953.416 721.324 li
918.109 757.471 li
873.66 757.471 li
cp
f
758.226 800.615 mo
756.875 801.963 754.685 801.963 753.333 800.615 cv
751.986 799.264 751.986 797.074 753.333 795.725 cv
754.685 794.373 756.875 794.373 758.226 795.725 cv
759.574 797.074 759.574 799.264 758.226 800.615 cv
cp
977.33 733.717 mo
947.787 764.097 li
838.31 764.097 li
804.884 797.131 li
763.333 797.131 li
762.476 795.721 760.283 794.316 758.798 793.58 cv
755.449 791.924 751.872 790.938 749.23 793.58 cv
746.587 796.223 746.587 800.504 749.23 803.146 cv
751.872 805.789 755.642 805.148 758.798 803.146 cv
760.091 802.326 761.652 801.313 762.662 800.248 cv
762.662 800.59 li
806.306 800.59 li
839.732 767.555 li
949.247 767.555 li
980.787 735.121 li
980.787 715.303 li
968.111 702.584 li
968.111 672.838 li
964.654 672.838 li
964.654 704.014 li
977.33 716.731 li
977.33 733.717 li
cp
f
693.976 920.71 mo
693.976 922.619 692.429 924.169 690.519 924.169 cv
688.609 924.169 687.062 922.619 687.062 920.71 cv
687.062 918.801 688.609 917.252 690.519 917.252 cv
692.429 917.252 693.976 918.801 693.976 920.71 cv
cp
842.341 769.572 mo
802.287 809.336 li
688.048 809.336 li
674.63 822.44 li
674.63 907.229 li
684.525 915.868 li
684.002 917.445 684.58 920.166 685.142 921.823 cv
686.339 925.361 688.168 928.586 691.906 928.586 cv
695.642 928.586 698.668 925.557 698.668 921.823 cv
698.668 918.085 695.55 915.875 691.906 915.056 cv
690.732 914.793 689.357 914.502 688.111 914.406 cv
678.089 905.654 li
678.089 823.894 li
689.456 812.795 li
803.71 812.795 li
843.765 773.029 li
952.974 773.029 li
993.466 732.832 li
993.466 672.838 li
990.009 672.838 li
990.009 731.393 li
951.546 769.572 li
842.341 769.572 li
cp
f
746.742 916.379 mo
747.14 914.512 748.974 913.32 750.845 913.719 cv
752.71 914.115 753.902 915.952 753.503 917.818 cv
753.107 919.69 751.271 920.879 749.404 920.482 cv
747.539 920.085 746.345 918.246 746.742 916.379 cv
cp
844.058 776.777 mo
804.871 816.541 li
694.257 816.541 li
681.404 828.764 li
681.404 892.633 li
706.185 918.092 li
706.185 927.854 li
715.212 937.848 li
726.82 937.848 li
738.662 925.119 li
744.269 922.115 li
745.666 922.919 748.267 922.941 750.304 922.916 cv
754.041 922.875 757.548 921.364 758.33 917.709 cv
759.105 914.056 756.773 910.463 753.119 909.684 cv
749.466 908.906 747.003 911.684 745.097 914.894 cv
744.515 915.869 743.837 917.287 743.476 918.615 cv
736.521 922.342 li
725.314 934.391 li
716.747 934.391 li
709.642 926.523 li
709.642 916.688 li
684.863 891.229 li
684.863 830.248 li
695.638 819.998 li
806.32 819.998 li
845.505 780.234 li
955.867 780.234 li
998.939 736.557 li
998.939 672.838 li
995.482 672.838 li
995.482 735.14 li
954.421 776.777 li
844.058 776.777 li
cp
f
723.943 920.71 mo
723.943 922.619 722.394 924.169 720.486 924.169 cv
718.576 924.169 717.029 922.619 717.029 920.71 cv
717.029 918.801 718.576 917.252 720.486 917.252 cv
722.394 917.252 723.943 918.801 723.943 920.71 cv
cp
935.398 781.098 mo
910.328 806.742 li
822.175 806.742 li
807.193 821.438 li
712.375 821.438 li
692.929 841.188 li
692.929 894.471 li
714.392 916.215 li
714.048 917.823 714.585 920.283 715.109 921.823 cv
716.304 925.361 718.136 928.586 721.871 928.586 cv
725.609 928.586 728.636 925.557 728.636 921.823 cv
728.636 918.085 725.519 915.875 721.871 915.056 cv
720.492 914.746 718.845 914.406 717.447 914.383 cv
696.386 893.053 li
696.386 842.606 li
713.824 824.896 li
808.605 824.896 li
823.587 810.201 li
911.783 810.201 li
936.853 784.557 li
959.023 784.557 li
1004.7 739.172 li
1004.7 672.838 li
1001.25 672.838 li
1001.25 737.732 li
957.599 781.098 li
935.398 781.098 li
cp
f
724.259 953.773 mo
722.349 953.773 720.8 952.227 720.8 950.315 cv
720.8 948.404 722.349 946.857 724.259 946.857 cv
726.171 946.857 727.716 948.404 727.716 950.315 cv
727.716 952.227 726.171 953.773 724.259 953.773 cv
cp
939.699 790.029 mo
916.937 814.234 li
826.808 814.234 li
811.824 828.352 li
718.734 828.352 li
699.558 847.221 li
699.558 890.993 li
715.812 908.17 li
757.302 908.17 li
765.541 916.923 li
765.541 929.902 li
760.818 934.391 li
736.861 934.391 li
727.458 944.118 li
726.003 944.144 724.312 944.545 723.148 944.94 cv
719.609 946.136 716.382 947.965 716.382 951.703 cv
716.382 955.438 719.412 958.467 723.148 958.467 cv
726.882 958.467 729.093 955.348 729.914 951.703 cv
730.328 949.856 730.816 947.514 730.486 945.96 cv
738.326 937.848 li
762.199 937.848 li
769 931.387 li
769 915.553 li
758.794 904.713 li
717.3 904.713 li
703.015 889.615 li
703.015 848.67 li
720.148 831.81 li
813.193 831.81 li
828.179 817.691 li
918.431 817.691 li
941.195 793.488 li
961.033 793.488 li
1013.35 742.348 li
1013.35 672.838 li
1009.89 672.838 li
1009.89 740.893 li
959.625 790.029 li
939.699 790.029 li
cp
f
972.222 804.209 mo
973.56 805.572 973.537 807.762 972.173 809.098 cv
970.808 810.435 968.621 810.412 967.283 809.047 cv
965.951 807.684 965.968 805.494 967.333 804.158 cv
968.699 802.82 970.886 802.844 972.222 804.209 cv
cp
968.398 799.334 mo
967.113 800.307 965.877 802.222 965.197 803.563 cv
963.507 806.896 962.48 810.461 965.099 813.131 cv
967.71 815.799 971.994 815.844 974.664 813.231 cv
977.331 810.615 976.728 806.84 974.761 803.662 cv
973.943 802.338 972.925 800.736 971.855 799.719 cv
971.855 798.244 li
1023.14 747.408 li
1023.14 672.838 li
1019.69 672.838 li
1019.69 745.967 li
968.398 796.803 li
968.398 799.334 li
cp
f
722.519 888.096 mo
722.519 890.006 720.974 891.555 719.062 891.555 cv
717.15 891.555 715.605 890.006 715.605 888.096 cv
715.605 886.185 717.15 884.639 719.062 884.639 cv
720.974 884.639 722.519 886.185 722.519 888.096 cv
cp
980.5 795.074 mo
980.5 812.197 li
975.333 818.809 li
844.193 818.809 li
825.464 833.252 li
724.736 833.252 li
708.49 850.727 li
708.49 879.207 li
712.951 883.669 li
712.638 885.277 713.173 887.693 713.687 889.207 cv
714.882 892.746 716.712 895.973 720.451 895.973 cv
724.185 895.973 727.212 892.943 727.212 889.207 cv
727.212 885.471 724.095 883.261 720.451 882.441 cv
719.043 882.125 717.355 881.775 715.939 881.768 cv
711.947 877.775 li
711.947 852.085 li
726.244 836.709 li
826.644 836.709 li
845.371 822.266 li
977.017 822.266 li
983.956 813.39 li
983.956 796.514 li
1047.42 733.338 li
1047.93 732.832 li
1047.93 696.234 li
1062.91 681.25 li
1062.91 672.838 li
1059.45 672.838 li
1059.45 679.818 li
1044.47 694.803 li
1044.47 731.393 li
981.009 794.568 li
980.5 795.074 li
cp
f
725.029 862.203 mo
723.117 862.203 721.572 860.656 721.572 858.746 cv
721.572 856.835 723.117 855.287 725.029 855.287 cv
726.939 855.287 728.486 856.835 728.486 858.746 cv
728.486 860.656 726.939 862.203 725.029 862.203 cv
cp
1050.23 735.125 mo
986.259 798.137 li
986.259 816.81 li
979.945 824.894 li
858.502 824.894 li
833.363 848.525 li
796.63 848.525 li
790.867 844.49 li
736.912 844.49 li
728.281 852.545 li
726.816 852.563 725.095 852.969 723.916 853.369 cv
720.377 854.565 717.15 856.396 717.15 860.131 cv
717.15 863.869 720.179 866.898 723.916 866.898 cv
727.652 866.898 729.865 863.777 730.681 860.131 cv
731.087 858.32 731.568 856.033 731.277 854.479 cv
738.275 847.948 li
789.777 847.948 li
795.541 851.982 li
834.734 851.982 li
859.872 828.352 li
981.63 828.352 li
989.716 817.998 li
989.716 799.584 li
1053.69 736.572 li
1053.69 699.412 li
1069.82 683.566 li
1069.82 672.838 li
1066.36 672.838 li
1066.36 682.113 li
1050.23 697.963 li
1050.23 735.125 li
cp
f
953.183 810.863 mo
951.269 810.863 949.724 809.318 949.724 807.406 cv
949.724 805.496 951.269 803.949 953.183 803.949 cv
955.093 803.949 956.64 805.496 956.64 807.406 cv
956.64 809.318 955.093 810.863 953.183 810.863 cv
cp
952.072 802.031 mo
948.533 803.227 945.304 805.057 945.304 808.793 cv
945.304 812.529 948.333 815.559 952.072 815.559 cv
955.806 815.559 958.017 812.44 958.835 808.793 cv
959.238 806.998 959.71 804.732 959.435 803.18 cv
1017.96 745.224 li
1017.96 672.838 li
1014.5 672.838 li
1014.5 743.783 li
956.517 801.203 li
955.035 801.207 953.271 801.623 952.072 802.031 cv
cp
f
962.859 731.873 mo
964.197 733.236 964.173 735.428 962.81 736.762 cv
961.445 738.1 959.257 738.076 957.921 736.711 cv
956.581 735.348 956.605 733.158 957.97 731.822 cv
959.333 730.484 961.523 730.508 962.859 731.873 cv
cp
955.833 731.229 mo
954.142 734.56 953.119 738.125 955.732 740.795 cv
958.345 743.465 962.63 743.51 965.3 740.894 cv
967.968 738.281 967.365 734.506 965.4 731.326 cv
964.468 729.828 963.287 727.977 962.06 727.018 cv
962.06 672.838 li
958.601 672.838 li
958.601 727.357 li
957.478 728.394 956.435 730.039 955.833 731.229 cv
cp
f
976.412 693.606 mo
977.775 692.268 979.96 692.291 981.3 693.656 cv
982.636 695.019 982.613 697.209 981.25 698.545 cv
979.884 699.883 977.697 699.857 976.359 698.496 cv
975.027 697.131 975.046 694.941 976.412 693.606 cv
cp
983.742 702.678 mo
986.408 700.06 985.804 696.287 983.839 693.109 cv
982.984 691.727 981.91 690.043 980.787 689.037 cv
980.787 672.838 li
977.33 672.838 li
977.33 688.89 li
976.097 689.894 974.927 691.721 974.273 693.01 cv
972.585 696.344 971.558 699.908 974.175 702.576 cv
976.789 705.248 981.07 705.291 983.742 702.678 cv
cp
f
889.947 789.277 mo
891.273 787.902 893.46 787.865 894.835 789.193 cv
896.21 790.518 896.247 792.705 894.921 794.082 cv
893.593 795.457 891.406 795.494 890.031 794.166 cv
888.66 792.84 888.619 790.65 889.947 789.277 cv
cp
889.497 796.32 mo
892.872 797.918 896.466 798.84 899.064 796.152 cv
901.658 793.465 901.583 789.182 898.898 786.586 cv
896.21 783.99 892.451 784.699 889.331 786.754 cv
887.736 787.803 885.736 789.162 884.906 790.519 cv
876.912 790.519 li
876.912 793.977 li
885.843 793.977 li
885.843 793.941 li
886.906 794.922 888.394 795.799 889.497 796.32 cv
cp
f
909.974 790.32 mo
909.974 788.41 911.519 786.863 913.431 786.863 cv
915.339 786.863 916.888 788.41 916.888 790.32 cv
916.888 792.231 915.339 793.777 913.431 793.777 cv
911.519 793.777 909.974 792.231 909.974 790.32 cv
cp
919.949 790.873 mo
919.949 786.67 916.544 783.266 912.345 783.266 cv
908.148 783.266 904.74 786.67 904.74 790.873 cv
904.74 795.072 908.148 798.475 912.345 798.475 cv
916.544 798.475 919.949 795.072 919.949 790.873 cv
cp
f
1036.15 682.109 mo
1038.06 682.109 1039.61 683.658 1039.61 685.57 cv
1039.61 687.479 1038.06 689.027 1036.15 689.027 cv
1034.24 689.027 1032.69 687.479 1032.69 685.57 cv
1032.69 683.658 1034.24 682.109 1036.15 682.109 cv
cp
1035.06 693.725 mo
1039.26 693.725 1042.67 690.32 1042.67 686.121 cv
1042.67 681.922 1039.26 678.516 1035.06 678.516 cv
1030.86 678.516 1027.46 681.922 1027.46 686.121 cv
1027.46 690.32 1030.86 693.725 1035.06 693.725 cv
cp
f
1036.15 720.035 mo
1038.06 720.035 1039.61 721.584 1039.61 723.494 cv
1039.61 725.402 1038.06 726.951 1036.15 726.951 cv
1034.24 726.951 1032.69 725.402 1032.69 723.494 cv
1032.69 721.584 1034.24 720.035 1036.15 720.035 cv
cp
1035.06 731.65 mo
1039.26 731.65 1042.67 728.244 1042.67 724.045 cv
1042.67 719.846 1039.26 716.44 1035.06 716.44 cv
1030.86 716.44 1027.46 719.846 1027.46 724.045 cv
1027.46 728.244 1030.86 731.65 1035.06 731.65 cv
cp
f
1048.44 765.379 mo
1048.44 763.469 1049.98 761.918 1051.89 761.918 cv
1053.8 761.918 1055.35 763.469 1055.35 765.379 cv
1055.35 767.287 1053.8 768.836 1051.89 768.836 cv
1049.98 768.836 1048.44 767.287 1048.44 765.379 cv
cp
1058.41 765.93 mo
1058.41 761.729 1055.01 758.324 1050.81 758.324 cv
1046.61 758.324 1043.2 761.729 1043.2 765.93 cv
1043.2 770.129 1046.61 773.533 1050.81 773.533 cv
1055.01 773.533 1058.41 770.129 1058.41 765.93 cv
cp
f
886.839 681.666 mo
888.75 681.666 890.298 683.299 890.298 685.31 cv
890.298 687.322 888.75 688.955 886.839 688.955 cv
884.931 688.955 883.382 687.322 883.382 685.31 cv
883.382 683.299 884.931 681.666 886.839 681.666 cv
cp
881.464 686.482 mo
882.66 690.211 884.494 693.611 888.228 693.611 cv
891.96 693.611 894.992 690.418 894.992 686.482 cv
894.992 682.545 891.875 680.213 888.228 679.352 cv
886.566 678.959 884.511 678.514 882.982 678.68 cv
875.353 671.572 li
872.996 674.102 li
880.652 681.234 li
880.531 682.891 881.007 685.065 881.464 686.482 cv
cp
f
869.806 782.17 mo
875.062 782.17 879.316 786.426 879.316 791.68 cv
879.316 796.932 875.062 801.188 869.806 801.188 cv
864.556 801.188 860.3 796.932 860.3 791.68 cv
860.3 786.426 864.556 782.17 869.806 782.17 cv
1 1 1 rgb
f
843.556 830.547 mo
843.556 835.799 839.302 840.056 834.048 840.056 cv
828.798 840.056 824.539 835.799 824.539 830.547 cv
824.539 825.293 828.798 821.039 834.048 821.039 cv
839.302 821.039 843.556 825.293 843.556 830.547 cv
f
819.533 852.006 mo
819.533 857.261 815.273 861.514 810.023 861.514 cv
804.769 861.514 800.515 857.261 800.515 852.006 cv
800.515 846.756 804.769 842.498 810.023 842.498 cv
815.273 842.498 819.533 846.756 819.533 852.006 cv
f
1088.27 705.893 mo
1088.27 711.144 1084.01 715.4 1078.76 715.4 cv
1073.51 715.4 1069.25 711.144 1069.25 705.893 cv
1069.25 700.639 1073.51 696.385 1078.76 696.385 cv
1084.01 696.385 1088.27 700.639 1088.27 705.893 cv
f
880.427 666.801 mo
880.427 672.084 876.142 676.365 870.861 676.365 cv
865.578 676.365 861.294 672.084 861.294 666.801 cv
861.294 661.518 865.578 657.234 870.861 657.234 cv
876.142 657.234 880.427 661.518 880.427 666.801 cv
cp
f
415.729 848.568 mo
416.126 846.699 417.961 845.508 419.832 845.906 cv
421.697 846.301 422.89 848.141 422.492 850.008 cv
422.096 851.875 420.258 853.068 418.391 852.67 cv
416.523 852.271 415.33 850.435 415.729 848.568 cv
cp
601.214 1094.64 mo
536.814 1031.54 li
443.465 1031.54 li
392.181 980.469 li
392.181 876.094 li
414.141 854.676 li
415.599 855.112 417.633 855.125 419.292 855.106 cv
423.027 855.063 426.538 853.551 427.314 849.898 cv
428.093 846.244 425.762 842.652 422.106 841.871 cv
418.453 841.094 415.989 843.869 414.082 847.082 cv
413.375 848.273 412.519 850.12 412.281 851.66 cv
388.723 874.639 li
388.723 981.906 li
442.036 1035 li
535.402 1035 li
599.805 1098.1 li
723.331 1098.1 li
729.308 1105.01 li
729.308 1130.66 li
732.767 1130.66 li
732.767 1103.72 li
724.914 1094.64 li
601.214 1094.64 li
cp
0 .862745 1 rgb
f
445.267 818.359 mo
445.664 816.492 447.501 815.299 449.369 815.699 cv
451.236 816.094 452.427 817.93 452.03 819.797 cv
451.633 821.664 449.797 822.857 447.93 822.461 cv
446.063 822.063 444.871 820.227 445.267 818.359 cv
cp
632.949 1074.88 mo
634.298 1073.53 636.488 1073.53 637.839 1074.88 cv
639.189 1076.23 639.189 1078.42 637.839 1079.77 cv
636.488 1081.12 634.298 1081.12 632.949 1079.77 cv
631.597 1078.42 631.597 1076.23 632.949 1074.88 cv
cp
424.381 994.229 mo
455.152 1024.63 li
542.473 1024.63 li
598.661 1078.8 li
628.146 1078.8 li
629.144 1080.05 631.043 1081.25 632.377 1081.91 cv
635.724 1083.57 639.3 1084.55 641.945 1081.91 cv
644.583 1079.27 644.583 1074.98 641.941 1072.34 cv
639.3 1069.7 635.533 1070.34 632.377 1072.34 cv
631.043 1073.19 629.425 1074.24 628.421 1075.34 cv
600.056 1075.34 li
543.867 1021.17 li
456.57 1021.17 li
427.838 992.781 li
427.838 891.662 li
436.841 883.023 li
437.127 831.424 li
443.985 824.562 li
445.413 824.911 447.289 824.913 448.832 824.896 cv
452.567 824.856 456.076 823.344 456.855 819.688 cv
457.632 816.035 455.301 812.443 451.644 811.664 cv
447.992 810.887 445.528 813.658 443.621 816.873 cv
442.846 818.181 441.884 820.28 441.766 821.893 cv
433.677 829.984 li
433.39 881.541 li
424.381 890.188 li
424.381 994.229 li
cp
f
1016.71 1059.9 mo
1015.36 1061.25 1013.18 1061.25 1011.83 1059.9 cv
1010.47 1058.55 1010.47 1056.36 1011.83 1055.01 cv
1013.18 1053.66 1015.36 1053.66 1016.71 1055.01 cv
1018.07 1056.36 1018.07 1058.55 1016.71 1059.9 cv
cp
462.523 772.594 mo
460.613 772.572 459.083 771.012 459.103 769.102 cv
459.119 767.193 460.683 765.658 462.592 765.678 cv
464.502 765.699 466.032 767.26 466.014 769.172 cv
465.994 771.082 464.433 772.613 462.523 772.594 cv
cp
1011.25 1052.48 mo
1009.87 1053.35 1008.19 1054.44 1007.2 1055.58 cv
1001.41 1055.58 li
989.746 1044.94 li
846.562 1044.94 li
829.562 1062.94 li
773.238 1062.94 li
767.189 1067.64 li
717.933 1067.44 li
682.63 1031.7 li
682.63 1015.65 li
673.781 1007.79 li
638.535 1007.79 li
631.871 1013.3 li
575.502 1013.3 li
476.588 915.297 li
476.588 885.322 li
489.754 872.652 li
489.754 830.654 li
468.457 808.977 li
468.457 774.305 li
469.251 772.868 468.692 769.993 468.224 767.807 cv
467.439 764.15 465.266 761.012 461.527 760.975 cv
457.793 760.94 454.733 763.932 454.693 767.672 cv
454.66 771.404 457.868 773.269 461.394 774.502 cv
462.371 774.845 463.726 775.2 465 775.329 cv
465 810.391 li
486.297 832.068 li
486.297 871.18 li
473.13 883.852 li
473.13 916.74 li
573.575 1016.26 li
574.082 1016.76 li
633.117 1016.76 li
639.779 1011.24 li
672.466 1011.24 li
679.171 1017.21 li
679.171 1033.12 li
716.482 1070.89 li
768.369 1071.1 li
774.421 1066.4 li
831.05 1066.4 li
848.052 1048.4 li
988.404 1048.4 li
1000.07 1059.04 li
1007.11 1059.04 li
1008.12 1060.26 1009.96 1061.4 1011.25 1062.04 cv
1014.6 1063.7 1018.18 1064.69 1020.82 1062.04 cv
1023.46 1059.4 1023.46 1055.12 1020.82 1052.48 cv
1018.18 1049.84 1014.41 1050.48 1011.25 1052.48 cv
cp
f
754.986 1052.92 mo
753.706 1054.33 751.521 1054.44 750.103 1053.16 cv
748.685 1051.88 748.576 1049.7 749.859 1048.28 cv
751.14 1046.86 753.326 1046.75 754.74 1048.03 cv
756.158 1049.31 756.269 1051.5 754.986 1052.92 cv
cp
509.798 910.84 mo
508.426 909.518 508.387 907.326 509.713 905.953 cv
511.039 904.576 513.229 904.539 514.604 905.867 cv
515.976 907.193 516.014 909.383 514.688 910.756 cv
513.359 912.131 511.172 912.166 509.798 910.84 cv
cp
749.177 1046.17 mo
748.043 1046.8 746.492 1047.87 745.497 1049 cv
738.576 1049 li
685.535 993.945 li
631.648 993.498 li
626.316 1000.42 li
579.199 1000.42 li
513.633 932.584 li
513.633 915.707 li
514.935 914.731 516.177 912.695 516.842 911.291 cv
518.439 907.912 519.361 904.32 516.672 901.725 cv
513.986 899.131 509.703 899.205 507.105 901.893 cv
504.514 904.58 505.222 908.336 507.274 911.459 cv
508.101 912.713 509.117 914.217 510.176 915.207 cv
510.176 933.981 li
577.733 1003.88 li
628.017 1003.88 li
633.339 996.971 li
684.052 997.389 li
737.107 1052.46 li
745.134 1052.46 li
746.117 1053.68 748.08 1054.83 749.662 1055.72 cv
752.916 1057.56 756.708 1058.01 759.214 1055.24 cv
761.718 1052.47 761.505 1048.19 758.734 1045.68 cv
755.958 1043.18 752.441 1044.35 749.177 1046.17 cv
cp
f
452.611 850.053 mo
450.703 850.041 449.16 848.49 449.169 846.582 cv
449.176 844.672 450.729 843.127 452.639 843.137 cv
454.549 843.144 456.088 844.697 456.082 846.609 cv
456.076 848.519 454.522 850.06 452.611 850.053 cv
cp
1016.1 1074.63 mo
1017.38 1073.21 1019.56 1073.09 1020.98 1074.38 cv
1022.4 1075.65 1022.51 1077.84 1021.24 1079.25 cv
1019.96 1080.67 1017.77 1080.79 1016.36 1079.51 cv
1014.93 1078.23 1014.82 1076.05 1016.1 1074.63 cv
cp
458.283 845.231 mo
457.476 841.578 455.282 838.453 451.547 838.441 cv
447.81 838.426 444.769 841.44 444.752 845.176 cv
444.742 848.912 447.959 850.756 451.493 851.967 cv
452.707 852.385 454.502 852.815 455.997 852.813 cv
467.387 863.807 li
467.387 919.559 li
570.883 1022.56 li
571.387 1023.06 li
636.044 1023.06 li
642.15 1017.71 li
668.247 1017.71 li
673.986 1021.79 li
673.986 1036.53 li
713.449 1076.49 li
770.109 1077.37 li
776.171 1072.46 li
832.941 1072.46 li
848.933 1054.98 li
985.806 1054.98 li
1010.9 1078.03 li
1011.52 1079.54 1014 1080.99 1015.91 1082.07 cv
1019.17 1083.9 1022.96 1084.35 1025.47 1081.57 cv
1027.97 1078.79 1027.74 1074.52 1024.97 1072.02 cv
1022.19 1069.52 1018.67 1070.69 1015.41 1072.52 cv
1014.5 1073.03 1013.33 1073.82 1012.38 1074.69 cv
987.154 1051.52 li
847.41 1051.52 li
831.419 1069.01 li
774.945 1069.01 li
768.906 1073.9 li
714.916 1073.05 li
677.443 1035.11 li
677.443 1020 li
669.353 1014.25 li
640.845 1014.25 li
634.742 1019.61 li
572.815 1019.61 li
470.845 918.121 li
470.845 862.338 li
458.869 850.778 li
459.127 849.229 458.674 847.002 458.283 845.231 cv
cp
f
1005.99 1042.29 mo
1004.71 1043.71 1002.52 1043.82 1001.11 1042.54 cv
999.683 1041.26 999.568 1039.08 1000.85 1037.66 cv
1002.13 1036.24 1004.31 1036.12 1005.73 1037.4 cv
1007.15 1038.68 1007.26 1040.87 1005.99 1042.29 cv
cp
511.082 873.154 mo
512.988 873.127 514.557 874.656 514.582 876.566 cv
514.609 878.477 513.08 880.045 511.168 880.068 cv
509.262 880.094 507.693 878.566 507.667 876.656 cv
507.642 874.748 509.17 873.18 511.082 873.154 cv
cp
1009.72 1035.04 mo
1006.94 1032.55 1003.42 1033.72 1000.16 1035.55 cv
999.003 1036.2 997.416 1037.3 996.425 1038.46 cv
841.361 1038.89 li
825.375 1056.13 li
770.831 1056.13 li
764.206 1060.78 li
720.953 1060.78 li
689.544 1029.24 li
689.544 1012.15 li
676.335 1001.29 li
638.267 1001.29 li
631.351 1006.56 li
577.656 1006.56 li
495.963 924.932 li
495.963 893.537 li
507.205 882.825 li
508.795 882.966 510.926 882.462 512.307 881.977 cv
515.832 880.731 519.033 878.856 518.983 875.121 cv
518.933 871.385 515.865 868.396 512.129 868.445 cv
508.392 868.494 506.226 871.643 505.453 875.299 cv
505.123 876.87 504.748 878.794 504.854 880.289 cv
492.506 892.059 li
492.506 926.363 li
576.224 1010.02 li
632.519 1010.02 li
639.435 1004.74 li
675.097 1004.74 li
686.087 1013.79 li
686.087 1030.67 li
719.517 1064.24 li
765.298 1064.24 li
771.923 1059.59 li
826.882 1059.59 li
842.875 1042.34 li
996.193 1041.92 li
997.195 1043.11 999.113 1044.23 1000.66 1045.1 cv
1003.92 1046.93 1007.71 1047.38 1010.22 1044.6 cv
1012.72 1041.82 1012.49 1037.55 1009.72 1035.04 cv
cp
f
619.875 1115.57 mo
619.478 1117.44 617.64 1118.63 615.773 1118.23 cv
613.906 1117.83 612.712 1116 613.113 1114.13 cv
613.509 1112.26 615.345 1111.07 617.214 1111.47 cv
619.081 1111.87 620.273 1113.7 619.875 1115.57 cv
cp
330.439 819.211 mo
328.529 819.176 327.01 817.6 327.042 815.691 cv
327.074 813.783 328.649 812.262 330.559 812.295 cv
332.469 812.328 333.989 813.902 333.955 815.813 cv
333.922 817.721 332.348 819.244 330.439 819.211 cv
cp
619.49 1107.44 mo
615.837 1106.66 613.371 1109.43 611.464 1112.64 cv
610.708 1113.92 609.785 1115.93 609.625 1117.53 cv
602.849 1123.89 li
544.201 1123.89 li
532.651 1111.68 li
532.651 1061.51 li
515.646 1044.51 li
423.592 1044.51 li
349.823 969.459 li
349.823 830.617 li
336.625 819.547 li
336.725 818.001 336.311 816.039 335.895 814.734 cv
334.76 811.178 332.986 807.918 329.248 807.852 cv
325.514 807.787 322.433 810.762 322.367 814.5 cv
322.303 818.234 325.382 820.498 329.012 821.379 cv
330.685 821.784 332.756 822.248 334.293 822.104 cv
346.365 832.231 li
346.365 970.873 li
422.144 1047.96 li
514.215 1047.96 li
529.193 1062.94 li
529.193 1113.05 li
542.712 1127.35 li
604.22 1127.35 li
611.722 1120.3 li
613.162 1120.68 615.091 1120.68 616.673 1120.67 cv
620.408 1120.63 623.919 1119.11 624.699 1115.46 cv
625.476 1111.8 623.144 1108.21 619.49 1107.44 cv
cp
f
602.132 1054.4 mo
604.041 1054.4 605.589 1055.95 605.589 1057.86 cv
605.589 1059.77 604.041 1061.32 602.132 1061.32 cv
600.223 1061.32 598.675 1059.77 598.675 1057.86 cv
598.675 1055.95 600.223 1054.4 602.132 1054.4 cv
cp
603.517 1065.73 mo
607.255 1065.73 610.283 1062.71 610.283 1058.97 cv
610.283 1055.23 607.166 1053.02 603.517 1052.21 cv
601.093 1051.66 597.81 1050.98 596.586 1052.21 cv
595.359 1053.43 596.08 1056.98 596.756 1058.97 cv
597.951 1062.51 599.783 1065.73 603.517 1065.73 cv
cp
f
980.435 1113.82 mo
978.589 1114.3 976.697 1113.2 976.214 1111.35 cv
975.728 1109.51 976.833 1107.62 978.679 1107.13 cv
980.527 1106.64 982.418 1107.75 982.904 1109.6 cv
983.386 1111.45 982.283 1113.33 980.435 1113.82 cv
cp
978.441 1104.03 mo
974.375 1105.1 971.947 1109.25 973.013 1113.31 cv
974.08 1117.38 978.234 1119.8 982.298 1118.74 cv
986.359 1117.67 988.789 1113.52 987.722 1109.45 cv
986.654 1105.39 982.5 1102.96 978.441 1104.03 cv
cp
f
950.349 1113.82 mo
948.502 1114.3 946.611 1113.2 946.128 1111.35 cv
945.642 1109.51 946.746 1107.62 948.593 1107.13 cv
950.439 1106.64 952.331 1107.75 952.818 1109.6 cv
953.3 1111.45 952.195 1113.33 950.349 1113.82 cv
cp
948.353 1104.03 mo
944.287 1105.1 941.861 1109.25 942.927 1113.31 cv
943.994 1117.38 948.148 1119.8 952.212 1118.74 cv
956.271 1117.67 958.703 1113.52 957.634 1109.45 cv
956.568 1105.39 952.412 1102.96 948.353 1104.03 cv
cp
f
923.494 1113.39 mo
921.646 1113.88 919.755 1112.77 919.269 1110.93 cv
918.787 1109.08 919.89 1107.19 921.738 1106.71 cv
923.585 1106.22 925.476 1107.32 925.958 1109.17 cv
926.447 1111.02 925.341 1112.91 923.494 1113.39 cv
cp
921.494 1103.61 mo
917.433 1104.67 915.005 1108.83 916.068 1112.89 cv
917.136 1116.95 921.293 1119.38 925.359 1118.31 cv
929.418 1117.25 931.847 1113.09 930.781 1109.03 cv
929.714 1104.97 925.556 1102.54 921.494 1103.61 cv
cp
f
876.8 1113.33 mo
875.865 1111.66 876.456 1109.56 878.122 1108.62 cv
879.785 1107.69 881.896 1108.28 882.828 1109.94 cv
883.763 1111.61 883.173 1113.72 881.507 1114.65 cv
879.843 1115.58 877.736 1114.99 876.8 1113.33 cv
cp
882.525 1117.59 mo
886.187 1115.53 887.488 1110.9 885.431 1107.24 cv
883.375 1103.57 878.742 1102.27 875.076 1104.33 cv
871.418 1106.38 870.115 1111.02 872.171 1114.68 cv
874.228 1118.34 878.865 1119.64 882.525 1117.59 cv
cp
f
679.32 1121.11 mo
677.91 1122.4 675.724 1122.3 674.435 1120.89 cv
673.144 1119.48 673.244 1117.3 674.654 1116.01 cv
676.064 1114.72 678.252 1114.82 679.541 1116.23 cv
680.83 1117.64 680.728 1119.83 679.32 1121.11 cv
cp
672.996 1113.38 mo
669.896 1116.21 669.679 1121.02 672.513 1124.12 cv
675.347 1127.22 680.158 1127.44 683.259 1124.6 cv
686.359 1121.77 686.574 1116.96 683.742 1113.86 cv
680.904 1110.76 676.095 1110.54 672.996 1113.38 cv
cp
f
716.242 1120.69 mo
714.831 1121.97 712.646 1121.88 711.357 1120.47 cv
710.066 1119.06 710.164 1116.87 711.576 1115.58 cv
712.984 1114.29 715.171 1114.39 716.46 1115.8 cv
717.752 1117.21 717.65 1119.4 716.242 1120.69 cv
cp
709.918 1112.95 mo
706.818 1115.79 706.603 1120.59 709.435 1123.7 cv
712.267 1126.79 717.08 1127.01 720.179 1124.18 cv
723.279 1121.34 723.494 1116.53 720.662 1113.43 cv
717.826 1110.33 713.017 1110.12 709.918 1112.95 cv
cp
f
654.081 1067.15 mo
655.718 1066.17 657.841 1066.7 658.826 1068.33 cv
659.806 1069.97 659.277 1072.09 657.636 1073.08 cv
656 1074.06 653.875 1073.53 652.892 1071.89 cv
651.908 1070.25 652.443 1068.13 654.081 1067.15 cv
cp
648.306 1073.38 mo
650.466 1076.98 655.132 1078.15 658.736 1075.99 cv
662.339 1073.83 663.507 1069.16 661.347 1065.55 cv
659.189 1061.95 654.519 1060.78 650.914 1062.94 cv
650.634 1063.11 650.377 1063.3 650.128 1063.49 cv
640.708 1055.93 li
639.22 1054.74 637.041 1054.97 635.849 1056.46 cv
634.654 1057.95 634.89 1060.13 636.378 1061.32 cv
645.888 1068.95 li
646.294 1069.28 646.753 1069.49 647.228 1069.6 cv
647.252 1070.89 647.595 1072.19 648.306 1073.38 cv
cp
f
1029.8 1041.2 mo
1027.89 1041.2 1026.34 1039.65 1026.34 1037.74 cv
1026.34 1035.84 1027.89 1034.29 1029.8 1034.29 cv
1031.71 1034.29 1033.25 1035.84 1033.25 1037.74 cv
1033.25 1039.65 1031.71 1041.2 1029.8 1041.2 cv
cp
1036.32 1038.3 mo
1036.32 1034.1 1032.91 1030.69 1028.71 1030.69 cv
1024.51 1030.69 1021.11 1034.1 1021.11 1038.3 cv
1021.11 1042.5 1024.51 1045.9 1028.71 1045.9 cv
1032.91 1045.9 1036.32 1042.5 1036.32 1038.3 cv
cp
f
471.682 999.945 mo
470.348 1001.31 468.159 1001.35 466.791 1000.02 cv
465.422 998.693 465.384 996.5 466.715 995.129 cv
468.045 993.758 470.233 993.725 471.604 995.055 cv
472.974 996.383 473.008 998.574 471.682 999.945 cv
cp
1018.22 1089.93 mo
1019.5 1088.51 1021.68 1088.39 1023.11 1089.67 cv
1024.52 1090.95 1024.64 1093.13 1023.36 1094.55 cv
1022.08 1095.97 1019.9 1096.09 1018.48 1094.81 cv
1017.06 1093.53 1016.94 1091.35 1018.22 1089.93 cv
cp
709.568 1083.19 mo
772.261 1083.84 li
778.318 1079.05 li
836.394 1079.05 li
851.091 1063.04 li
982.742 1063.04 li
1013 1093.23 li
1013.54 1094.78 1016.08 1096.27 1018.04 1097.37 cv
1021.3 1099.2 1025.09 1099.64 1027.6 1096.87 cv
1030.09 1094.09 1029.87 1089.81 1027.1 1087.31 cv
1024.32 1084.81 1020.8 1085.99 1017.54 1087.81 cv
1016.65 1088.31 1015.51 1089.08 1014.58 1089.93 cv
984.169 1059.59 li
849.572 1059.59 li
834.877 1075.59 li
777.117 1075.59 li
771.076 1080.37 li
711.019 1079.75 li
670.095 1038.61 li
670.095 1025.43 li
665 1022.03 li
643.242 1022.03 li
638.166 1026.79 li
568.739 1026.79 li
549.512 1007.77 li
500.719 1007.77 li
488.73 996.098 li
476.539 996.098 li
475.558 994.801 473.538 993.565 472.142 992.9 cv
468.767 991.297 465.178 990.369 462.576 993.049 cv
459.974 995.732 460.042 1000.02 462.724 1002.62 cv
465.407 1005.21 469.166 1004.52 472.289 1002.47 cv
473.553 1001.64 475.069 1000.62 476.063 999.557 cv
487.325 999.557 li
499.313 1011.23 li
548.089 1011.23 li
567.317 1030.24 li
639.533 1030.24 li
644.609 1025.49 li
663.953 1025.49 li
666.638 1027.28 li
666.638 1040.03 li
709.568 1083.19 li
cp
f
418.181 878.354 mo
418.579 876.486 420.414 875.295 422.283 875.691 cv
424.149 876.09 425.343 877.926 424.945 879.793 cv
424.549 881.66 422.711 882.854 420.844 882.455 cv
418.976 882.057 417.782 880.223 418.181 878.354 cv
cp
655.585 1038.04 mo
653.675 1038.03 652.134 1036.48 652.142 1034.57 cv
652.148 1032.66 653.703 1031.12 655.613 1031.13 cv
657.521 1031.13 659.06 1032.69 659.054 1034.6 cv
659.05 1036.51 657.494 1038.05 655.585 1038.04 cv
cp
1021.8 1112.26 mo
1005.93 1097.05 li
1005.93 1091.63 li
978.105 1064.53 li
851.742 1064.53 li
837.48 1079.74 li
780.029 1079.74 li
774.625 1085.13 li
709.287 1085.13 li
661.908 1037.34 li
661.851 1036.01 661.541 1034.5 661.259 1033.22 cv
660.453 1029.56 658.257 1026.44 654.519 1026.43 cv
650.785 1026.41 647.742 1029.43 647.724 1033.16 cv
647.714 1036.9 650.931 1038.74 654.468 1039.96 cv
656.08 1040.51 658.699 1041.08 660.294 1040.63 cv
707.843 1088.59 li
607.259 1088.59 li
541.563 1025.06 li
454.697 1025.06 li
412.926 983.709 li
412.926 889.07 li
416.527 884.44 li
417.988 884.896 420.058 884.911 421.743 884.893 cv
425.479 884.85 428.99 883.338 429.767 879.684 cv
430.547 876.029 428.213 872.438 424.56 871.658 cv
420.906 870.881 418.44 873.656 416.535 876.867 cv
415.892 877.951 415.123 879.577 414.808 881.021 cv
409.469 887.883 li
409.469 985.15 li
453.277 1028.52 li
540.164 1028.52 li
605.861 1092.05 li
726.318 1092.05 li
736.656 1104.97 li
736.656 1130.66 li
740.115 1130.66 li
740.115 1103.76 li
727.98 1088.59 li
776.058 1088.59 li
781.458 1083.2 li
838.978 1083.2 li
853.242 1067.99 li
976.701 1067.99 li
1002.47 1093.1 li
1002.47 1098.53 li
1020.42 1115.72 li
1050.55 1115.72 li
1068.62 1135.57 li
1071.18 1133.25 li
1052.08 1112.26 li
1021.8 1112.26 li
cp
f
753.031 1119.02 mo
754.419 1120.33 754.49 1122.51 753.183 1123.91 cv
751.88 1125.3 749.691 1125.37 748.304 1124.07 cv
746.91 1122.76 746.835 1120.57 748.142 1119.18 cv
749.449 1117.78 751.632 1117.71 753.031 1119.02 cv
cp
1017.42 1118.94 mo
1000.59 1103.08 li
998.863 1095.5 li
972.244 1068.87 li
854.32 1068.87 li
837.894 1087.04 li
782.185 1087.04 li
774.622 1094.64 li
756.691 1094.64 li
748.759 1103.31 li
748.759 1114.37 li
747.581 1115.37 746.468 1117.2 745.591 1118.69 cv
743.691 1121.91 743.175 1125.69 745.9 1128.25 cv
748.627 1130.8 752.906 1130.67 755.462 1127.94 cv
758.015 1125.21 756.918 1121.67 755.154 1118.38 cv
754.509 1117.17 753.394 1115.5 752.216 1114.5 cv
752.216 1104.65 li
758.214 1098.1 li
776.062 1098.1 li
783.625 1090.5 li
839.431 1090.5 li
855.855 1072.32 li
970.812 1072.32 li
995.71 1097.24 li
997.447 1104.88 li
1016.05 1122.4 li
1046.23 1122.4 li
1056.74 1133.85 li
1059.28 1131.51 li
1047.75 1118.94 li
1017.42 1118.94 li
cp
f
847.201 1116.1 mo
845.304 1116.32 843.591 1114.96 843.371 1113.06 cv
843.15 1111.16 844.505 1109.45 846.408 1109.23 cv
848.304 1109.01 850.017 1110.37 850.24 1112.26 cv
850.456 1114.16 849.097 1115.88 847.201 1116.1 cv
cp
1015.25 1125.77 mo
994.259 1106.54 li
994.259 1099.91 li
969.47 1075.34 li
880.742 1075.34 li
849.652 1105.97 li
848.154 1106.06 846.293 1106.68 844.777 1107.21 cv
841.246 1108.44 838.404 1110.99 838.837 1114.71 cv
839.267 1118.41 842.622 1121.08 846.331 1120.65 cv
850.044 1120.21 851.494 1116.8 852.277 1113.15 cv
852.58 1111.73 852.818 1109.58 852.494 1108.03 cv
882.16 1078.8 li
968.05 1078.8 li
990.802 1101.35 li
990.802 1108.06 li
1013.9 1129.22 li
1043.31 1129.22 li
1048.65 1133.97 li
1050.95 1131.39 li
1044.62 1125.77 li
1015.25 1125.77 li
cp
f
820.488 1043.47 mo
818.734 1044.22 816.703 1043.4 815.949 1041.65 cv
815.199 1039.89 816.013 1037.86 817.769 1037.11 cv
819.525 1036.36 821.558 1037.17 822.306 1038.93 cv
823.056 1040.69 822.244 1042.72 820.488 1043.47 cv
cp
1045.69 1036.63 mo
1037.23 1024.19 li
991.343 1024.19 li
985.978 1030.02 li
827.025 1030.02 li
822.921 1035.15 li
820.818 1033.57 817.953 1033.12 815.359 1034.23 cv
811.496 1035.88 809.703 1040.35 811.359 1044.21 cv
813.009 1048.08 817.476 1049.87 821.339 1048.21 cv
825.201 1046.56 826.992 1042.09 825.339 1038.23 cv
825.289 1038.11 825.226 1038 825.169 1037.88 cv
828.687 1033.48 li
987.492 1033.48 li
992.859 1027.65 li
1035.4 1027.65 li
1042.23 1037.69 li
1042.23 1098.49 li
1076.44 1133.88 li
1078.92 1131.48 li
1045.69 1097.09 li
1045.69 1036.63 li
cp
f
769.509 1113.08 mo
768.101 1114.37 765.914 1114.28 764.625 1112.87 cv
763.337 1111.46 763.435 1109.27 764.847 1107.98 cv
766.253 1106.69 768.443 1106.79 769.728 1108.2 cv
771.019 1109.61 770.918 1111.8 769.509 1113.08 cv
cp
787.23 1106.88 mo
775.341 1106.88 li
775.142 1106.88 774.953 1106.91 774.763 1106.94 cv
774.521 1106.55 774.247 1106.18 773.929 1105.83 cv
771.097 1102.73 766.289 1102.52 763.189 1105.35 cv
760.085 1108.18 759.872 1112.99 762.706 1116.09 cv
765.539 1119.19 770.347 1119.41 773.449 1116.57 cv
774.32 1115.78 774.955 1114.82 775.365 1113.79 cv
787.23 1113.79 li
789.138 1113.79 790.687 1112.25 790.687 1110.34 cv
790.687 1108.43 789.138 1106.88 787.23 1106.88 cv
cp
f
814.777 1099.32 mo
815.419 1097.52 817.4 1096.59 819.191 1097.23 cv
820.992 1097.87 821.933 1099.85 821.287 1101.65 cv
820.65 1103.45 818.671 1104.38 816.871 1103.74 cv
815.076 1103.1 814.136 1101.12 814.777 1099.32 cv
cp
823.693 1106.46 mo
823.523 1106.06 823.281 1105.72 822.997 1105.42 cv
823.433 1104.11 823.654 1102.46 823.824 1101.08 cv
824.279 1097.37 823.244 1093.69 819.724 1092.43 cv
816.206 1091.18 812.335 1093.01 811.08 1096.53 cv
809.828 1100.05 812.25 1102.86 815.179 1105.18 cv
815.746 1105.63 816.488 1106.14 817.279 1106.59 cv
816.976 1107.4 816.964 1108.31 817.324 1109.16 cv
820.349 1116.31 li
820.91 1117.63 822.189 1118.42 823.537 1118.42 cv
823.986 1118.42 824.441 1118.33 824.88 1118.14 cv
826.64 1117.4 827.464 1115.37 826.716 1113.61 cv
823.693 1106.46 li
cp
f
970.488 1084.09 mo
965.043 1079.73 li
902.515 1079.73 li
892.472 1090.73 li
892.472 1118.13 li
877.212 1133.18 li
879.64 1135.64 li
895.929 1119.57 li
895.929 1092.07 li
904.041 1083.19 li
963.831 1083.19 li
967.029 1085.75 li
967.029 1121.31 li
977.822 1133.81 li
980.439 1131.55 li
970.488 1120.03 li
970.488 1084.09 li
cp
f
963.572 1089.69 mo
958.546 1085.78 li
905.058 1085.78 li
898.593 1093.59 li
898.593 1121.16 li
888.435 1131.46 li
890.896 1133.89 li
902.052 1122.58 li
902.052 1094.84 li
906.685 1089.24 li
957.363 1089.24 li
960.115 1091.38 li
960.115 1124.72 li
970.308 1135.59 li
972.83 1133.23 li
963.572 1123.35 li
963.572 1089.69 li
cp
f
938.503 1098.57 mo
933.062 1091.84 li
911.083 1091.84 li
904.574 1100.1 li
904.574 1122.91 li
896.406 1131.49 li
898.912 1133.87 li
908.031 1124.29 li
908.031 1101.29 li
912.763 1095.29 li
931.414 1095.29 li
935.044 1099.79 li
935.044 1118.73 li
952.875 1135.66 li
955.255 1133.16 li
938.503 1117.24 li
938.503 1098.57 li
cp
f
1029.1 998.444 mo
1026.77 998.444 1024.86 996.544 1024.86 994.202 cv
1024.86 991.858 1026.77 989.962 1029.1 989.962 cv
1031.45 989.962 1033.35 991.858 1033.35 994.202 cv
1033.35 996.544 1031.45 998.444 1029.1 998.444 cv
cp
1068.93 1083.09 mo
1068.93 1005.26 li
1068.93 1003.13 1068.15 1001.08 1066.73 999.497 cv
1056.66 988.259 li
1055.02 986.429 1052.68 985.382 1050.22 985.382 cv
1027.19 985.382 li
1022.41 985.382 1018.54 989.251 1018.54 994.026 cv
1018.54 998.8 1022.41 1002.67 1027.19 1002.67 cv
1046.36 1002.67 li
1051.65 1008.57 li
1051.65 1086.52 li
1051.65 1088.73 1052.49 1090.85 1054 1092.45 cv
1092.34 1133.08 li
1094.04 1134.88 1096.34 1135.79 1098.63 1135.79 cv
1100.76 1135.79 1102.89 1135.01 1104.56 1133.44 cv
1108.04 1130.16 1108.19 1124.69 1104.92 1121.22 cv
1068.93 1083.09 li
cp
f
420.707 923.773 mo
420.707 929.027 416.45 933.281 411.197 933.281 cv
405.945 933.281 401.689 929.027 401.689 923.773 cv
401.689 918.523 405.945 914.264 411.197 914.264 cv
416.45 914.264 420.707 918.523 420.707 923.773 cv
1 1 1 rgb
f
435.618 969.678 mo
435.618 974.93 431.362 979.185 426.109 979.185 cv
420.858 979.185 416.601 974.93 416.601 969.678 cv
416.601 964.426 420.858 960.17 426.109 960.17 cv
431.362 960.17 435.618 964.426 435.618 969.678 cv
f
580.29 1107.3 mo
580.29 1112.55 576.035 1116.81 570.78 1116.81 cv
565.53 1116.81 561.272 1112.55 561.272 1107.3 cv
561.272 1102.05 565.53 1097.79 570.78 1097.79 cv
576.035 1097.79 580.29 1102.05 580.29 1107.3 cv
f
600.952 1046.67 mo
600.952 1051.92 596.696 1056.18 591.443 1056.18 cv
586.189 1056.18 581.935 1051.92 581.935 1046.67 cv
581.935 1041.42 586.189 1037.16 591.443 1037.16 cv
596.696 1037.16 600.952 1041.42 600.952 1046.67 cv
f
442.639 929.662 mo
442.639 924.412 446.894 920.152 452.147 920.152 cv
457.399 920.152 461.656 924.412 461.656 929.662 cv
461.656 934.914 457.399 939.17 452.147 939.17 cv
446.894 939.17 442.639 934.914 442.639 929.662 cv
f
484.726 891.502 mo
484.726 886.252 488.984 881.994 494.234 881.994 cv
499.488 881.994 503.743 886.252 503.743 891.502 cv
503.743 896.754 499.488 901.01 494.234 901.01 cv
488.984 901.01 484.726 896.754 484.726 891.502 cv
f
358.172 918.84 mo
358.172 924.094 353.916 928.348 348.663 928.348 cv
343.41 928.348 339.154 924.094 339.154 918.84 cv
339.154 913.588 343.41 909.33 348.663 909.33 cv
353.916 909.33 358.172 913.588 358.172 918.84 cv
f
715.046 1016.36 mo
715.046 1021.64 710.765 1025.92 705.48 1025.92 cv
700.201 1025.92 695.914 1021.64 695.914 1016.36 cv
695.914 1011.07 700.201 1006.79 705.48 1006.79 cv
710.765 1006.79 715.046 1011.07 715.046 1016.36 cv
cp
f
497.59 997.828 mo
497.59 1003.11 493.31 1007.39 488.024 1007.39 cv
482.743 1007.39 478.459 1003.11 478.459 997.828 cv
478.459 992.545 482.743 988.262 488.024 988.262 cv
493.31 988.262 497.59 992.545 497.59 997.828 cv
cp
f
488.024 954.244 mo
488.024 959.529 483.743 963.81 478.459 963.81 cv
473.178 963.81 468.892 959.529 468.892 954.244 cv
468.892 948.963 473.178 944.678 478.459 944.678 cv
483.743 944.678 488.024 948.963 488.024 954.244 cv
cp
f
643.927 1052.25 mo
643.927 1057.92 639.447 1062.51 633.921 1062.51 cv
628.394 1062.51 623.916 1057.92 623.916 1052.25 cv
623.916 1046.58 628.394 1041.99 633.921 1041.99 cv
639.447 1041.99 643.927 1046.58 643.927 1052.25 cv
cp
f
804.07 1112.37 mo
804.07 1118.03 799.589 1122.62 794.064 1122.62 cv
788.537 1122.62 784.06 1118.03 784.06 1112.37 cv
784.06 1106.7 788.537 1102.11 794.064 1102.11 cv
799.589 1102.11 804.07 1106.7 804.07 1112.37 cv
cp
f
833.539 1123.58 mo
833.539 1129.25 829.062 1133.84 823.535 1133.84 cv
818.009 1133.84 813.527 1129.25 813.527 1123.58 cv
813.527 1117.92 818.009 1113.32 823.535 1113.32 cv
829.062 1113.32 833.539 1117.92 833.539 1123.58 cv
cp
f
870.335 1096.37 mo
870.335 1102.04 865.859 1106.63 860.33 1106.63 cv
854.804 1106.63 850.326 1102.04 850.326 1096.37 cv
850.326 1090.71 854.804 1086.11 860.33 1086.11 cv
865.859 1086.11 870.335 1090.71 870.335 1096.37 cv
cp
f
527.958 992.695 mo
527.958 997.981 523.674 1002.26 518.392 1002.26 cv
513.108 1002.26 508.826 997.981 508.826 992.695 cv
508.826 987.414 513.108 983.129 518.392 983.129 cv
523.674 983.129 527.958 987.414 527.958 992.695 cv
cp
f
490.719 823.582 mo
490.719 828.838 486.461 833.09 481.21 833.09 cv
475.956 833.09 471.701 828.838 471.701 823.582 cv
471.701 818.332 475.956 814.074 481.21 814.074 cv
486.461 814.074 490.719 818.332 490.719 823.582 cv
f
480.13 863.066 mo
480.13 868.32 475.874 872.576 470.621 872.576 cv
465.371 872.576 461.112 868.32 461.112 863.066 cv
461.112 857.815 465.371 853.559 470.621 853.559 cv
475.874 853.559 480.13 857.815 480.13 863.066 cv
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.1.0
%%For: (user) ()
%%Title: (plata_6.eps)
%%CreationDate: 5/12/2016 1:12 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Bj2NJdPcD85M%dm6#LUK5d#M9Ca0MDf[sTI`_5&g8-3>/=\Esc5.nZ/`#Xt?PpH_bHJ0U#d@'UuMaP$DB'^+tFoVGeX5C#.
%RV1rg^Qrq1DTT6o,KKg=rq1d8n%Ygg=1d]TH,D>++;eisCmFmWC9tD$BpGaTmRF86l?&A6)a@!?h!<B+rDLddXOc^>5BH/`;Ybq@
%'XliXX]iELe`nt`]ptEJ(hb"4kBC4s70DIdLAT$G%0@PLHTbOANQq(_5@<$?";^digunY$=fpHEP^9`<o?07b(:H@DqOlOpaU^5\
%EmCK\c-_T_@eI+XYP2SQ>geN/m*4]I`'S@N%7lh4Gr1Z*s"i1)jBlL1"/>fIRJ?fGB#B,WD_#J`*1:GXYD>1iC#Bjha/,C[e\N5o
%!0B3I,^/[]g1])2]dfYBB,GnQ[j;!7rf=!4SH1[V%4gno3Xs9RLLDe@rOcXf^\oj)g8].5cIG-oeN]CA0<1j@[A/bgd-2S#r_:EK
%;ht3X^L+0fhDK(3g,Y4&Tq'*f<i&utp;m;=ob*n"L+*('[5]^[cDj%%b>u<;UKGeFnLSVTNLeMD.L=@"PO,`Yc,8+Z?L!^<=Z0^N
%dRO(fr*eZ'qYt6.JXuB`$YP7JI/8?:BQ?:F2$M";B[Jq+Nba^>Ejnt/X#66GOEN;d4[l[&41.[IZ+cJ2j?GbK51'9^N;cU)S@5-C
%X#;1r9^?r`[7:$_rq-;hhJ?4N=q-um(]R_fWc&M;e6?SNfAn%O)\(25.pNp1r2)n'C/#-7YQ&qo^BMZ)ofi?L][Q/T\!s:tJ,S80
%U!c!$k2'1_]iKp6\<>T0q+gsWccn1OjpjJL16"U"Nn`Vf[J'MU!tq2rC/05S^AQ=@s38uaR$Qf'14VVKRt"E'XgU-l[*(5a?G4i>
%F`RCI4Q'!%&,N+jqihMGL=P.99Oe^?ZtW`h'Q,]\rY5mLT<=T^g["U6#?uQDSl<+NG,\0i>H?B?+2hsf)Y*&X\PkT3[')R!k0Q^;
%<pK>VCiq@LmZhN9&`?dr4h.Hab3+Dp.d2@;n6W)<:5Yn%XE<JSQ%(.$Kd.:6Q4Z&JZt!a>;Z"+-cE2<eh=KE1X&Y3N+7X\?PPuO$
%KUs(/kZ'^hh59*d4KE3N3$F,Qkqg/^`P"ac6pFGq/CDIR<b`oE0&c"EgDp,o,+@DgSR`qaK:e-e<k[($`1uX[4lVu8\R%Gog$Mcq
%M7A0n05f8\V14Bs8V(fe9>>iiQ?PiG,4CP,'fu#??E)>4rfoq+iTs?U9p1LHK79q(9c1OnBZ'Je*LrJM<Sll:jZtYtHV?J$f:bi1
%f4nC9O<5"i5:7o3KD"jrr]@S_s8)52k7&:ur-,DHL7M9.r4M0iQ/(/%NI$e;>bYLLb\;,h)D4q*6Dma#Cf<O$eLR2*P?V/"a4mED
%iZI]_hG9e=5L,[OEIU1Hpj`QcSu!D);6'@jX7L)nm(@O6]4S#cc"I8X_o7I%k>+oN#&I8NE?UMLQ+o)In^h<Hn1t.R5KAOGMeunI
%<PBNL;eC7IM)+"TC-=1#$er^UHMb?sCgN0/Xc`]81g8,3i^o>j]mf-tSD%ScHMq/@YA8>,*dg(TQoEgd;)p(JX';.[O$7!DKdR,Z
%Nsdu6HH_iV`br=gqP0L5*VIG4_Pu3Lkgdb1]H4I5[mQZ5$Z;rpj$F7BFZj3)C:@Qr@WFjG1CBVpene[#k3F=Bp$b#9Trn.USY+h-
%WAQ?h[ZouGX)UuQS;lj]BXOn3&p\@4E(QLY$_`2R^Jh:!Q]OS#,Kb*pA*4[%_7JuuARLj3ZjO7SY$]!)@eDRe13;P(&=o4>2b>FA
%>e*FHjd__hGM4L./RO"VWc`6@1RGpHT2K#K"3&Q5\X>*0oAsSugru+Sq/WssQZI&20:*!9.IlMcXBXW-AOBqDrAjFjeuO:"lNcUL
%9'af+l7,[cm/Hsil=ElLJSqYhXSu)W@bsdJZeg(7Gb*@]QYEHK[[NhTqV?%ke6Ka.]?.LN1QYfeMaXX?[Kg*[U7*QAe4nWKA)a=d
%lh%Pgm9RO;;p=R>N8%<PGo`b9WqjebX5qUubPd`kT(uO8&fXg;`b&m'),P$KbPcadZh[\7eZ:[8:u-)WYp#JT^Pu:#gFM(c^SK&_
%nB4Y+e*V?S9BGG)\Wi't;pAr1rBEUNKX0@IN26F\!e&Lml&og!)._$gHc)_C$&o8cLWQOAKZ:b_T^hKUgDG:>>-k]%/]+pjl]uO`
%FMj-E)lD'I\RA`NQ5Q&l`A1ASj,unkbAp:F"N[5O/hSr_ots%iEKO9;*%hVLUi:9"g4?f=Zf#4e2@`khaMeuRa:/:?`,!7gVq*qJ
%<-qbgb#>,OIpp'=9X1K:5;Y&mNrRMh:RZ178YgQ6C-#[&4(hR[jA];Efbs1#T#WKi`N73p<ol+M*V20hq7%;]RIm^q-Mj2#T]Z9u
%V2^I8X1mGi<r\^6*I6E*R*9r4CYbOZV:Nt5_GS3j*H%^.(]/*HDg#>Wbqe5HG?hFF`T<_X+2?%VCj"IpGi^W3P+"WpA1#;C?B!\E
%iUr,3?qi+'1ZA"6nfD[74`%!RE0JT()=fB._r"t6V=CT'I#=t4DrJ\19U%F!]P_8b(oR"LItl\.g$O6BgI0ib5KVou9TA&RJBYAK
%Sgf/^i3N1pSQiC#[u\)$4UY+]IK@Qm:n8sOaD-$s<<cuO,-AkKeB!`!g,L`CS(7@$[EbB[ac_Q#l7t!ip+p4bDiW^oQSE9F@]eCf
%Qc`<UMWT&\4d@Lp;53#)U^j<>dn.7_PoKSK9`96"_Ye$^M_o0.d1UHYF]=*_g@XU-0g%/bX(7`JZ0Wq`1"l+Ldof@*G@\8>4-f8_
%A;GV,&(bGZk-gVSS7X>$3TX&DAZ7qpO3sE+9`+,fa6HeSl(Qgj$^D.K5sm,nr!d.T/TLs\a+\'1e]^:)V/j-(k[0IV:LU+X*Z&!t
%"u<8jH!*[AN=1_@Q$oJ;#?7\PnDVD=`tLD&@*O)QBf33;3c6i6,0SmF[^,[XXmt@HWrH5uR=SM^;!=0*),1HP3A-Q][:Zh2iUT[Q
%<%m:<_AR;bRZ>q)-oGe"9JUk_=0:Br4Nt5JbUQI:_Ef^0VFm((a@o8%@TJ=@8b(J-PVq^<I]G[OR,smO=Y5NJD'E^lb.">c,muKW
%U3`]L(+"TI3@2']R>>VKCJeu'ngr[q>*LSZb\C!e[4)%aD)84]R4r"2RKA`.=c8G7,#5e2\kTR\=cf$eMgF)m;)4]]UiXRnX[O\r
%VHT38a@luns-$TSBrn;UFI"kI)WNs'l$b`J;h`ii,c:$MMWm-W?b2,7Y2E?o?WbrE0(PJca8^+3BH$PFQAFGbV4Y"W=Ea!o^3mh"
%AnH)N-?@A#agDO]0U$9.\MfXe;^'aN3s:t>CU_JlX5Zrg;Jdc2rjS`XbZMJW`nF+dc(s(nZrGL16H<TWDbo)QACuM61aP4`$,@Dt
%h40K&)&m/>Jf,NPfI00EY*!c]'^uFWqjD3o['o##`r9U7/[SUVX'4D]Q[U!:iQgJZd;l/=BO1K$_R)J_;JT=5VmY[K+5T\VFg\9H
%?89nJ)Htm8Tlu@NV7B>Rc5rf"L"QSk8n2HV_V(tHA&@LH^4apOj"6M];>RmXTo=bbEor6jj@kp>CZO^Z<p4JuIokihgon7(1-Q60
%-83),RV?lU^?PB!E-0-!T:>(4j&8mpT+.@k`A7GW85W(YNUf^Ge[/qN131U7bNEoHd;F*KFkuFl-E$i1GrAD`YRt;&Pu8_lYj^SW
%=H\+MBJd-t63\D^b:09,E5lQPB>EK3;Pk-<p133F7>Y9.;2<rR17i`]=R+C^kDa40Mi+,Vh0:`P10$C+(HoKW/!T*O-6d>P[Sp*5
%1qW!2bQ#lY^QY)c*Q,dIP=Ea%r9l3:43RZLo"VO/n#-ngjaV4AQS?El4X'uE)(QRVa]Zo566f\J*\WrCHtPIs=jHc]AkiOTVfmC?
%moDAN:"#-J/2T97@pHtGZWaQArk';kHL:(37h(d,G^qRPL4^MdAu0+)$jRYWZ;7kLS(3TdPkR8;ACb?]/)>TiA`';!>/f@-81A,i
%BGMbL_]#iefdoJ`chP0kFRLbS2Q:,jfuJGP@Bs%'llYar<mEbVC3,*1`9I]oY1d#ojc<TG?L=k:Wg/iMVpr@9Y<@f9NT8-O%+3:6
%Sc4m/hP@P"RlCp6i)KPsXjQTCp9DGu"H6NE3D<AQE?J]qVT)_R;i9RJlmS?9.`pPkih!W[A[4ujRt%ifm`?/")X]@=-HNt)d;!S2
%'cZQr5%Eb22tg:j`+Iu'M%1UrHna-`+-S$NB7ZCPi+3[Kq%[Sg!\^mqbC:P5=l<jP!\Z%I,(UOFL#MgM/FYF2*p>0EEg+;^pl(-c
%;s,qk!MfhZ4ABr$l*als]lhXpgrMpV"WYN2RATkdM(B/?bT<7@$lgVmZ&("k9_r64faH1S?Rt!eLF.K/V`_t0X7u<[[7bRC1Z^U4
%!c=eS-c8KCFQI`d?=LL>=#*^9PHRf[7Q8V!@(KVs0\tYlB<Nu5?=+TeRJtOF;fltbWjMbqIAH#6h9+(5lI>0$rkt0,;h(?$_hTEd
%)89(mNQ+Cj=`ClE&#=1>CXUmGih]`BoX%iiJK$Z#8k+q*D*5SV3;tT-!.X0RDl5BFBd[t+5F+J(cu,D0B%k9'lRDJ=R]UTYDE'8.
%B0'2Bq6O,D</.:(N=2.#e'3D:(0bO4VGoH!Z5BuZZt]QliY]#BQ>]nG_jeV"VT>['qD^r`$fW"+E1"U!-J$Y:2P-P[0kPEa8NW>C
%*+Kc)R$'GKs,Mlc.qP`j]']LMBr=quQ0N9k[4M"5ddPogLkd&[9'(Q4RV+_tZhY$uf:8):eZDU>8&*b/BCQ'.g5cWN/2&M2qi+l*
%bWdjgV:HTH$`Rb(TNCHE08kU_+p;S'=K?)O/_,/`/<qBA2)W]BB0k[gMuD<r6^\4&ljjP:Omo]tGt)4#!KZirhWDBHGfK_@:F620
%[*rc#&V&SPI$eI>kY\OK`GTUR%u]+F8Qkg8oiBN9Jj22>2X"3GILc7GPCB(pi\UlDB<Rq4K$3qmY@V_fVBf,fZV+W25\ZN$`pG8N
%b(S')'RXIXA\uX(ZCim%p6pq>6=P`j?ZuJLIjhVP]?Vss[WI+`2f<O^5!sJ<//#.*RtsTtf^&62mEBsg+Up-sjo4RN1\9a@hV?>E
%RsB'2Df-DGs$^iYK@tb/]t%?L*bOIh4KU<6mT]t?B("HuSX[021O!^:NL;jeF6@G%46PHQG:jOi;rZ(SRCBu*bD*sZV4.m[m\n[9
%S97G,eDP3<kAK$E$Sj\(ZNhAfJ)qm7"o9\D%,B@I.kuAmF7ucT'YZ(P7c\HJnG6c=a;@],\k\!MI&DAfUg>NXXQ0N6C7!)NhTt:W
%U"sVTB0AnP>.#:ch.?L(qpb+47XV(eNOD)s;oqIXn"#hKOE4;;AnE'B;6"d7TuW/I-/5<oH[-K8s%qV)gh8S@Heqo<KY\_i,.Kk`
%1L5(*Wt0h9>pVp]":%#I$bsnmfK(FI17<-]f&OUs6R>=5h`39RX'*hB2kN+7rt-0;^UH9^H7A_-KPu.OgWT*;:pj'uaqu2Ng5\lq
%g)7h#l//m<5>sa"DE0=s=S7X39qG^'4r%jL,OAsa/hd4HKs2-@;6#%*Xgnl<)gr<Ao<3><=j:L'%<n4JK-sjh%IDX(/i/-&B%m1o
%RW^Xd>4f"uZ^`kG3\uYj_^Lu,70!$K%[9)CC85HCTKM2<q\s7?R1>bk]76OKE,f#"r@lT3>i_0d(qI.-YFi\JR;<iqHQ4AdK0@mI
%A5OWhA(2dWj.;I<'hb*$n%;NBoU1<1dZ1f=#e=:-m?MFQ`arc)EInAJ9K>k&OYZ1D0aeJTXrMBDQ-9s'j=?I_DOc133/nO2fuF:E
%e`cfdZ=A4+j-QoX.Oj?m^>X.F^++T$+./UIlYY@I,eE^>Sgh,$VYjks7YulCn4^`!aD`qJW;hkR.u%;i/cV5m]qU81^f_>S[%:4b
%mM-I2;_06i3m[,mG\sb*`9jjjDX.rX^]$^X3-f3&hoJpB@$=Ca,8j.`iK]@/(M+Km3kPEgqlo,Ar[E;,ipRl5']_l(?&@AHm*CM)
%#tQ@miXTngCV\D)6u]K=R<VUcZ[DIk.d^sKTJG:LS2N!gH@u(&$1&2#e]q3t1WK41Un)J.FHYa-V]n09jYA)6(ub3l_iLeJA!SHG
%rFU>).`KJG,-nkR1NKsqbb!/%CtrQ5hL8nA51\^)G&d#3^gX.jm%.hbP/7@Mr/L%5B2O`32E[nSNY\W6Y9c=>I>g3-/pStslSB(7
%n'^O'`:DNE=T5$0h!cOZpC#`QEP0u+`#h?UQj_:2RoXTk7c>_0Q5"_[H<+hH^\mEthR**f5^qIgpZ]H)r*^@E:nc;uWTMbnrU+t!
%FfAM)X*/NqSI2Lh\fZ"alUIj[YFUM:=%s30XnlQ(DngZ`ioeAR\\))W+d$*V00nofo`9]g<]JF%6`.j&^L?X3C&e(nf,r.RKhh(:
%07nD)+($m0Il@+0@*6%+6k:RVCL;m>h@Q)/cQ:RSm<UX-AE7q(T;]s?s8,UoA=rjbGMU&UJfOaJfsXIY@GV<l+M])5ml8$MJ!dZ_
%\M!lc9\0[J&(_,/*sri3WgrqT'E<AMIsi]sT<pblf=B47N*PIOo]&,;KP%C6!kCoCA?=7$L^hd/]me<$9(cr&<u'fi:)KJ90R1^"
%B,FaL@iC@4oKjo^$qDmlmdiUOd-Ys8E(l`+/3`tN)k-cb?iRT:*jp978,Tf[qDmlKgiNLPOaBk'\,O<BrV+kVCh&uQ7N+@qjqKfa
%DlGShS!6I\L4;>\ff3]r1"?6$$_[UbAM^8R(L-!MK05H/WCInJs7gR:!4CgY.@!L*:#D!+q/YjkNFVq[h\tW!RcQ:^F8u#-1ZA?'
%gk055plA=N]5k$55`P<O[6AfIRVqto;nl=,Eh'K&;S?)EW*]AV&[*Hp\i:9-T%'5(^tSIHXONPLk+LFT_q8Kb<,_b3'#f@7.9B\^
%pQ)Xt71DP[9Uq7,UrQ492\uhEIq0?'BKI(7%m8&6DQhTX!:feV8T_LIJs?Q]8pm"s;Z@\`F)ZO.epi$0[u6N`VghGAI8>D>n():9
%gEX^4M`f;*qpeUC$C%lF>F8KcI9h(!O>Fd.+,6J9/V]ZW2p<dD4ubZRr/A9s(tU!VD+V)c@7$&Zb!_EEeuJ<KISL/D,^%[BXfLqO
%C%]QafVtJ9G!!+<lQ`OER,LdR@na+kPi+<HPBepb#uYdWZ&V;]=/q@Moa`T#r/VY8\"[=XR:o?2/M\_`eb+6r=og4hf*41`l3c:C
%R>YQ1A3BP>\XcXiXC"#hk4W!GIQO:M6/Ju.BT,QqQ<11."Y."HSRa'UYst^>0aK;[CCp[$?F8X6WDXVpcYgAF95lJ!k6h/o/%8mN
%p8X\;^T3"I10W([jD*LO^!s+Fa?3uT=g`E)`sUgS#]lh;n"`tK<-%ofHd8AZrG+m:BXZ&"XaVpIenN*-V6pbRm8CRMa`VBYIQaZ8
%:#lqUoT7=9QTDWC:BT,seGS4S!Lb'9TPEDqY3fPUKph8F0oBb9Soq%frEd)t2em_m7;0;NH?N]:D'Lgl-oM#QFUqAsU`I`eVqS7r
%ri"rhX+0e_S!@0\FAf0kH9[0ED\V_[d4t<o9fb'OVjGlL*\g;rh63m8o9]ORBQO&N,.,(-b,Gl_rEbsA-#4</gV['=J8;P7pL2J6
%5K=P[o6T_u<8Xmfqt4h^[(]7(mPID?*GnpEO(tSP0Q)):9'@9VN5F!beT-^GN+OR0A`Fq'dJK0o[5K$[r7Jc?)U<#!h#X4#9iB`,
%j*BB4iRDm0eN^),CITZeXOiok>dr=!>pMIRaJ_lbfn4&<7B&c[5grdrgVkfF4B`oKD0K1F;B8/fC9=s)KHH)N,=-3nGpBLW4a0cU
%hWi_Y&a@!4G&U.IlNf=1%F%eW=3K!oPe%b,UIQjhI$W@R!JsacJ)%'Be.]d][7:U>e*5H_W'2SSF:@QAq,d#?jg*1o:5TZ;+,d+A
%E%ltKan0K8NuD.Ka.#dPNOujBldA4E]i;_%jfY#US(<P\YI0,WM;I5t\%5k='<B^EiuC)<I^N$g<d'u*T*`9SQ>2B`8"*X3-,2('
%P0DG>5jp,"*;!$&COa;k7JN*OSP$:FJtR1Ghm@^oh]knM+U0MH\[l)E].2^foiSPcLkf6;afMRY:'AnhYH*pl^S+6+0CpViCZS*(
%?R&l7WeZT>\JIO!M:0t/(lu0-_6Ta;bC3'f%(4nkCiPOL'?4V.%MS:#?&a9Z7`>)^pEB^k;_l]>BY->S<sM^Ok2*o`2?p:egDLn#
%MQJUf)NWaElR4C%jDj2-4T=1ua[^ZJN17.>X)kKsWI>[tf<jh),3X-L/Zq9.n+:#:mR=7+6:Z'99fkP(;S>89/jg(Fpn2&9h1-+2
%>+A;)-fCV`Xcr/7Be-)1M;co&6%u1u@Uc^e8;Cs$5si6PGV;.9P?P.eK&)MH?=FRSDr3`o>iZj#c:,3bHC>Z%GYjA.[6K4K)/;BN
%f@/"Ah("7>ek4b#122FUUWs\*=64;GG])#1h-N6OOg0-I@ko#e/t/haR]CU#gNKDZlF>]p^5@*qg/0.bP-c3OV!W=q[C^1KWKEW.
%dXRs[[mhD^2:^`,JRdi[i3JZJd,\l'TN8H)Z!b:@Q:N!+1G>;()Y[EPD5G60XZP5dY$S?>:Jp6od24TR-$So9=6u$Ne%(.ad(_TX
%V+;3Zi;R$=lMA2X_-6-(r,omd[MtqBDT3a`2:B'6mFKROUO:p\1@mm;UTPT#>II:Bp$5S2LuGLmWG@37qE0L0Y'9Gr`(n%J8\*BI
%A+(R=E>9O.)I$+8UWOBS2==H7X\Oia[8P^K*80nIo_j'9oBu_OFKcY;D'M0giJGnO=&Yc,'W$IWj3hOe,r6V0g4k)^K5%gMY*XWE
%+fqJ:\_4ZZQDm`b<_lDfbH[iFX-_NX[R2pb$3A^[<VC@6'Zt+?76/tb"O,+YG\`7X79cM]?EKQu:u64G<Pp*N@=o!0U+:?TFcFP7
%<r9HdYdJ4V*aRC#UQt:R4"m,[P>\<*eH)OA$!l(dhn#`GF^8K_eRYnP[$>08SZF)(@soYupuo*<b?*u\83^h<m[U_?6Uudr])@h[
%-gad/eKo<9!M<4`:22IcYAVgjSs9k0\@NFQ=L)GKf?b'IP3Qaf1KrVQGbl7nd;k6cG0`hB`Dj%p/[VPO&CY@AqN<WQ3Sm"WJ!B="
%X.<&,lB2_X5dSatAT,/H1d)dmH:^K#*jpgR.!eN)8gs.sVPN^aSeVjD;VFp\Uh-T4^.RC(MsaTccRgXFD"3U<Nn7AUj@+8KBFJd%
%g2E:\+r4mgU(,r;Lr<-E;R78(?ERsbXoD48kZ63g]DOrYG>p`ID7%CWYN1/)4#ksMqgC[&LNT#Wef_S"\,Ji7Pgfs[=06`_Q17BX
%oI`(O?>4p9/R,p[f\oK8o7a-Vma183(,q)ZmFD39f(Z28dq[n=]3:dk,"Bm?V$a<<>cCk'R>+!cdpu,$CBrgM6:Z?Ap1(%fWV)C@
%5_c7m4(Xd.g<IJ/Dh7rD,<6GYj)mYD\^0%'HCm'CX-<EBcMT(Z"'kPW>K7[6Y\U3Pd3tH?g>daH@dD@;eE"<C2<3?[88/ub4!;4<
%m;7sufn[BV;6]@l1DQKq5"K6E7l@d&r*?eSoQW?'dU"uKME)_mq8Y$*J1)_Km,<6)ERHDglB)Lc%[E#AeS<i^aTAY=HX&V\SjZgi
%PD+(F.eL5mh`)4R_-.(ZgM>>TnOAHoTq\OI&\"l;X$NiVB<-*YP8J&0WABu@h)tN/k.8'!e=g"3p1iS]?PB4Rd3F@meal=pOuB(u
%EY0tp&Yb7Em*ls+n0:(7iJ]T2U+WWRbuV\NgPDdB:0N-PK:*ULf4YqA8(q0Me$V-]f`Ncn^J!3c4.NA(6'9qNIMcp9NKuc',k\+=
%)&'86,)tss.?3%q/_5b;A!R".*089d8nE]$q.YgDF@U9#&</^%OD"BZQ<V&`Pcg69@PAM;ff^eWG"P!"SaPChUr1iM],K&tNYoVi
%bJ>A-hX'WdJX'*PW7K_J1?msf6'Hj88#P`-U&Sp!gK1FRhOssUHF'q[^Fg+<M5j2^lm3]]pA0lOAkn0UEp8sVL9aRuFE#SO40[5^
%<;P\q)jd=*4g)[`9Vlbb(dDQL[+j3?9FtK*6:"]?BUgd"crL^Y26V$J@^SLW9YSjM>4p34pDfcgeB!aeQ6SU=V\1RAU-W%am,n:0
%Y;UI#'d,+]206!XkIFr1(P<<@V(R4]>L,-%>c<t7O`?2.l+^NgQQ#X3X.O0k8Y./iX$XPL/6IW8H<.%'F1%n;bA"uk@ZDdq#A=bL
%\R#XGQ)hG6QO/msooetEM)%(P,E`U)g0NLHV?LlsMju7f#*YJ*HpgJQ>'9-f=\u5ilSgJ94$%l%HB*rWEi7L&0%ujW_X*^_Gb!h^
%L(bqm%i3TYn]0-7euqf4VOAT5)-;et'.J\'X$`q?2I.(VM):en)Oj&^)l9uBhpn`.`hmWM@5^/]Fd3BJOY"+4)l?RR\c:/Y/A@+r
%iJcRFoigG!((N72[fa*1mVIUGlecoXm6:<XY^5s&iC`@Pi_00bmaCr8kBZ*8q5el)jjp!A\VD-3;SIM(HhV!u]=Y`LmeP>`cElW'
%h]KR=lh&C"eu&+$\8OFR?,PkA^DG33NI,Fk?h9?0<YsNH[I,R20ho!_Z?)oW[<gM15C;pDB5Q1u*c0>t4=qB@q1iTMF6upjdY*'h
%li+3il$9K-rQDeDBkaj!B^KmLgBYF`Kr<e`r`7FWGI7@_rpY`@.@qG2:I^@fcOWhMpMW:r?9$`]^V>.s^"r7G[FL2;05JbeHt/k[
%Ge_!NpUkN=e*qg'IA<PdSpi]jfB[5F&'Lm:kIljrs-&l)O`(bfATR%Tg?Q#"7ktW-]"@M*lt_OYHLR]>?.lru^(bt0=#a<ngQY-S
%-rp+#:&'-STtFNOhp-)/43&kPL&:RrL%RB_h\Od$*kpC_W:h;rIK/m+q+A2&]"h[\L!A);F.(`=*gce"mG>>6g=M[Vp%nW"&!o<b
%^\8*t#7l7`Jbc^=Qfg8$j/ouoZ;tY)+#Xn+]O#mM2h$6SoDQ_c;nLC*Djq+Nb@WkI\bNK-Sp&D/=S7_kUU".ZG[-t12IA\:>?\,2
%fDWC;i:(aLrn>BclJ85[`R)Sf$H;DYhVG+/7dKBWlMJ`eAaAFF(EW<bo0/l?e9c9Ra7@nFo%l:0<DV4"k.N'0T^OBmLABs!lf-sQ
%l@Z3#$_KJI`kr<oGnb-_dhjIID*.ZVKr8.UlEAa5bu`>B@r_+0N+RLF[Y]T#(^j-3DD#,3B4k#i5Y"UN="<+bI-&h9=%qZAY.N(<
%e8"qn]S%r['$Rm6qe/uP)!9[X0-9_.PN[MYGb;Y;jhbHrqa0iFnZ*b$V:*8.le]aq\)H3B&+9k;)s_jidt?A8[3&bAcY/bikMtO+
%D!37MnnI^J>^4$OHmn?!'u(h2Dq)LJO&o'qpWp9+:*5n2LJP\\rdL]/9GecIBY5h]mQ>g'<Lg8*P21ug>$(bMcthh%/j+JfqB77M
%on(WGb$jbJ_Vr[EIi,_Ic.-t]3fFT?44-k0`'M!SGlM4D;s""HokjA)dFe;Dc"9"=rO0:;,T:s8\?Ofs^CHi:H?8bsN=J=skLk-i
%chdi]oW<GMo=T&?dU]pl?"gEhgR:3PPqNuTLS([DHXBic-0ZH?qYO]DC[OK8IcK5<^XufDa_rKt8pp-5`PUbFZN<I!,OT;/+QVt9
%Dk*A:G5[]s]D[?]aZ:>&LV4MspSkuYHbR%tGS6#tQLLXFC4iB4*58R,OKa!K(>!ao?Ar&@2q?VFs6-'fo5%Tbp"XgU9Kp/'Xnf[,
%b#ZpgA1]olrXCMk,cD;]jjU?VU?f"09=sXqp>jI7mh^9#io=tE8*f&ZQ,\-`q7]ig4TBA]`d"m&&('0<Cq[*^*\@,Z$i?jb&#n<M
%#OC6`cFFRYo>T1600EEVlWcj;k5,ZB,)K&N]_ZY^DloQnq#G^?Xa&iq*u3Yg06bn4*Ye;Y5M(PVoqbZSDM_]81eE>N94N,C@]j"k
%>((;6BqkUUrhGXj/YlT-d;9dLrQVl#5E6B$1[ln#HEQG'd/p?R6OeWc$S0uf;j-&"]C*8`YCA/EI!`DtILQ\BelH-ojJg81pEU8m
%*itj'qT";Brh5PRb)IRn#gui@Pa<K5Om.i$puCYGh2S<#^FJ%s?M6Rd)6`0@S+N>q](*qE']cHa+.n5Yf8$7,/$8%io5'tE?lH^m
%8bIHgGIA+Vr(_adLO7H@FcU-rJRl.](:ALt:OddG8e]abXeppkLfX@;4ADS13/4m>\AudN8l701eqDTD.'s8O7PNpIZ)mco"+dH!
%(b_Hbh$8-Q?M*0W40*+?BKX,no/!NGbMMY:[<hS+rq![nmj?@FpN8(AaORcR-HML%HMAg*j_H$m>YL>FXjQ<Ye&*"^M.@OjcLY_a
%BW8$1kGQ^.V058\-3"[R@Ih7a_i)#5Rk2Us365ISOQtHI5=$692OBNG't!MqcAmod68-7R`BWiKU\7@-jirU)7)Kq&8+%l@Lk`=k
%_dq4#&Z8B=_K_%3E\qYKKKh[qc&2%%edkQ1Diu><+0B?$L6VD=)5C;'E@/8J%s1_2\\>,N6%bYEpU*E,]Db*XdjQe3rM5YHj4VH0
%,"=a3Ks5A3o/('OpNE=H(aU:K\3BgRD%f)_*56pQgff&,4X<8MeC+"[=D3lk4PSQcpA3h?et#<VW&:>rZ5c7J^sYBOB8RL@7sEj]
%D:H9@YAKRYIQS1tVV)f(Dsq^j8%1o&NnE0=\!H`4GcAZgV>4b5'CK_`s.1XPPWrd8?$lTj0&/GTmsch$HM(cR7qqq3>1da/GLm>=
%G"uH#f%1gPHC>"\/XG92p#FT!Dd0?[?Q];+s-XkWp[-5rio/p?Dp_b:>YB/:jK)I3[.tn#\_)FYfaj:[;:aFh_62qVl';MKYAf$0
%qGuo]bdO2G4uh&/WV-&ZrpL"A$jIF!o'WFU`-KJ_\Zc,-+$)%m4I=,/N!XV5aGFDtnrUUm,T]WUcZ`]oF*Mp/6CCOi?EUVgRqu([
%e?*dSf\_]OXr"hh?`eYcBnlGIos\_/+0E;ks/!c5ZLRLrl&XIHh,RnKJ*O_i(Uq0VV.AcIG[U-m&JUZer:flT_ntiR=%)c#VF%'"
%8hT]qA4rP@hP6GKT!-bZZd7tWcnpT+0YGp#DXmPAr@7?jgJrnkb4O:pms4f>P;$6DESdM3h7:IZ=ad6%c1Ae<I;OPHTD^Ieqp0Gf
%[<Hg]jj"o2WmZ?%37e9<XA9XV2pQofZV2l55)r1l9:c^?6OKo%]Nu^NAae-*).a\7_q4PhlcG^YLR@4`j[u:ci2BtZ4DA_^CN]7C
%Hp!;$p%?M']3CcL51n>q+#X1oYJkjL56lX_kN2Qp]sU"=raXuJ>&+)trPI;J#OgW77m@uA\(*CG*Z4lFs('I.C$4g.]=ZV=^sisC
%%a=oJ:JK<VPe"3Ql(#M0Q<t^siu(mVB.Mlt!,`XOiPr;aphkHW`OaN*2pB6bh)hTWq#%N2Y.RqqIlMP!jD+qhei">r3kr@UZ1VdZ
%d36n[6k7RQV+KreIr"@prm!NC[F\GT^,FT'hC^om5$p:JOZ!W_1V%;,H77;5@]B..oB;[<ZsgPVZh[Rh`giP;/K5X5?Jtpc7#or*
%a2rK;VnAIX[?Z9%a]iSPDUc6TO2DK$T?4%ar37t1A;4cJ2X]<]Us(&A[a!tSYNjnRfaR;]JJ=LO\CW7DqIipj/>'S$;^k`ciF53,
%F2*i!s3)m/]XTK7BrQ7<BjLiF&oB^Vi\"<I4fGB_HEm3h]q4+?C!_JZgEJJ6bk^C,n7D4dli#/:r3JJ#5M!Tp`@C4:VEU0ZhS&fn
%)<!Jqd+RR'j%m(iA]+*91V<ESL$tPJJF\b-[h$p`>akMip1AI=lgDkL=Y)(b4f@n@jTX]=Jhn4W,uJn$LjbrY\*pK%5(!$s\D=*3
%??b:Va;<\sg,ghO+"hA\Dsfjiiic^VQ&]atLk9pC\@DK_k7K8,I;VBWHM([qnq4gbpC=WlmlpMK4JaW6Y6Xe;M_F8UkLeieU]?l#
%BD4'81;_pL:@B3nO-nH@[CY8O>^5>#lM;"ReNR=>](Z,0Y8:!J6cXRta6W,/_'rW5&+`Gnh]CW/[Qcu`<F`rsQfGZ\^Rq)Mf,hYS
%9t&nf@B91n`M6;OV:rHf1sO10f&tqoCA%Rgs/*H744%N7qK;dhj)3%Yc;n\LMlfc%M+Q;M*4T3[Si:tV*hqKb=P+&0dbQP?QIk;/
%hE:Bn4PtCinc%2AJZ.?okK[]qWIO9`8[&*>bXOISOf'3`_Rm4G58eGNH",9)T(cd]a,AJWIE,%jA9Eu@n(oLb*dha?e:,$m&q)jR
%L$$kOegNlEZN9I\[`\",p$#tmYe.RDC2IOqXdeEeD6%_nSY`P$$,'C/^Js&(:W%+32a:;h%gKI!r8)^D8@H=cO+l0\mNZOORUfkX
%MZ<L!Z@#j,ZYb\$Sj)]2;,e07'K-I0I^m_tjDj_^D&5fJUkW(AMn<14KeI(C)f'*`0CCtX[gV0TMo+[)Kh(%PhB-X%[T8;LD)il.
%n,Bc(HrN75$eh.]%V:ZfB%*2u`90Rr[!/)V=0_eRUT?Y_^MYSboq0!L^A7;5j^W[A2G)0</jfJSM+53D=F5ODf[g=WlFlO#oD=fL
%[H0@)0/UkCrc@<%[aj/0WLK8nIhXH0,1[^/%oZ!fYl=F1qXn("h,Qu&OVbY.iet"rDK52WCNFXthYhXdOWT(S2g1h)_aO+i2c=9)
%T@eZt1$;*k3VUXM4+(9q4m\7pBUgt;<o!+lq=aacet#lXS\&6U`R@j85D!c?d\CIH8.L(#g,OLm-YsLm2m=-HKQ"j%g:I%;Hd/eM
%Mt>s"Vt[6&GD)PUDThK5FlRIC[cY"K7rU_CLU?hQXKI#+,LKjhI)J!=A3ZNP&)>IQ&K+6f^DD(<Fdp&6B,>?a:YU)9VMqT$qQ'0h
%gIS*OprRmZcIjbY9<[2=A=+U=iE!V@Y?TT:81!r`ekU:mlo&SCV>U7IrH_T8%pj2%3IKU4ZjN^PQV9cYs!kNpN&`YnN3hWt$T@8#
%_ZtB@Z##<oe_+3I!--fNkRflu2@G94D!N[8ei.*Fr3>8tf3Yh67#`!e0_@K$VWT&QlC<<^9TFfS00d/"2Mfl0Qh@r)G)ncqPn<VM
%RID<k+Zf=`QVLUD0s5i(iq84TA%c2eIiInK2+l=sq8qcUZ2.;+n(!Mkr(s>YWlSo07C'r^m'h.a`PpXTQ,nKekf:kAko65V_.NL%
%mgFD%G</rt_>]?Y$fo?dr>g'Z=&'\F*ftUGh+LG;&QZ_`P2DaS5&a2:KqYbl[(3F<E.R`PldAf#T"ZP#I!(LIhTCnJR\kpS5?_9n
%Dp@SPqVZ#lQSTb/q8^LEc0uZ&R"_Ho:LPFq+Zb2)PI\0o+5t&KH!Itn]W,f(W7BI=rNSioe#T\J+3lbP_=MOTM=dXH\X,tX2p?K*
%mRhWt6%cDuT@]uiqP1mh,tmH7j_@t@p'\].qb5HM/:Kgs/\N8OY[so+p8a`M6/6ccI'!!sF3I<<LiWDI_ZM[6&%8ptcA:*`qM1@%
%ak1+LR!/U<_J>m>,E%MFe^oM-`AK]GZU`9i1ea[6jo02=KjZA0)b`\=JB18G266&g7A]"WJ+r&Qi'5t@Z#TcRnf(i<hpticg0]cA
%?EO2BkFDji_+r`74kO"Dq=9Os;ZH-9@4hI,PL0>O6#-2%?.c?m7k'R*qQSPAs6s7_eOuC1s6b2[P]VnB!;8VPLWB??_KH0.2kC`0
%>jo/P`W#<`n*,m'S)bnZqQ[H><E;L*bGnZ<7H-n\['&s[p)YbI=n@+nE\RWtjNE:-:hd&K<,^[k\s,TNQRe?liNcI0['s@K1(U",
%q"17OB@C'\id]D;c.A0Yf!d=2F&[*@AER[+\Tm?-@H[r6n:q5/6r"gW*RX,dRk$<kcFU9N9+C^IC9Uagl8DQ#^*gPdCS1=ij*_P[
%Du7Y[MUILlL[Y/YAGa6%[I621I,cUik/:#E4!L6G2S''%ohAWuV"/u:5?p?&5,pauY:b9O[9a+S[kZ`l)R*YQNU<ObG!A#1Abp8,
%NO<(Fm(Rds]^+6@m"CX-e(`bN=&_DfP`Ar)iSm&Xr-j-21MkT"^OA.l8$Zdlj,!Ed]Q^u[^FNa!Zh=3lK5]$/<a(u(Dr+cL4[3<F
%S(hitfO5j1A%s<oi:YYgU?[)t2O?T3BC!j*]qgcUmH`b7iNUs_jSa='HM3"SkW/4J<mC8inL0HiJ8\2K0:ilme3;a>a=SHhh1*j=
%NQ]>Ghensf<L/Nsoo5^I1Vg6OrdK',maZW6Ze>5_f[@2N'g_S'),Z$Il>E15DRt[l9MPHl`l*cB8%PI'b,:?=0C29b7O9(I=l(]X
%qn?0G5.e/1okj,T"fD(.q!u_0OXr1)r:oU#p?mieDu%;_'>gWXV//XG3$gLi)@-nlrgTf'Ib3WXhX]JURAuS.n9AC5og24)\$/E9
%FP,D#5CGgb]mJ,?(V\Z%HnRTDJgX9.H\%Q5rbLK^]\LCSs52:T`>@hk]TA?3jgr]SY/h,o7YQ20WG_3+fg.ECkJ?oAO#?/hC";*^
%8X6@ko&4&*9A0h=>bqrcU,3qAgB.t$[7ed>%eJS'A>e"kW-<UaEiU;6*_1Da\!n0oI"17@bD$7u5H:paoj4b+Y82k!+W?qXq]aA%
%a'.okF"b>k?eQl;pbmbPhoA]g"2]Qd0P=QTN^"PKErk)Wq:GYkEU0,TTA+)N:=+S^4gb0*]1>".XcKHhTP>HFo69a%AQ\.N51%2S
%,5UdV(/\a8h`SKlGBn)s*@&4B/2&)(0T/4A"bD9lBFt.Z6^,:E<i>uo^])"Imno]Yho<NkkSdWRki:^9q!8XHBPLQC^pAF/<M(A=
%XFNOXPZnJh2t,IoM3V1$qLf9bnofPs\+(=`/1rc2]Ot+YXfp^G6f7ESAW5j8*V/Co[I^io:cgIORIiuN0n[.))o4d8>!Zh+VET^u
%j[7MeA0GQPmMi9qqhBC>ZI,#M"E'$0l')U7)[:TFG%;m?iD,Ign'd?.%4kT^ksRnmE'M.8U:2.N$V\IW3OiK-PF0jb@:h\[**\_]
%cWpQ`k:JeFb3Pa$pqFXRO2qP6GOn*k/4LbCp=CN_p"l:*%h-LF4Z)c-:SS"cgZc4)&baat]eh:])kgmRG/m`GL7an@7qrm<>*'bN
%DQ:=_G0A39Y2uJ+[(O%_-o?pr7>UGj9Z&X9c<5_!p+lb[QX.eDANsl/PLdsUiE@DEUj3$#a_)A-?>]m+QC5NYF8+IQ$!Qgc:QqdD
%l\.)cRf-:P<L]AjMfQ8?>)SRT4eh4rOHAk_9J8;d+#)20B&9de0;nOjZ3Uj^5Kh1gSehauqQq!ed%O`eS.s&hH\OK3Pt7Fk<LY36
%74Us@WYKU,GRE.igG6"2nNml8&@VW*SmlQ>kCe_O!r=S=V\S_S!Ji!`_oef`Ibo6=5c)%*hhT-l&TTE[R#$Ua!l<1Q_DKKXHbO,'
%G/r!5Nh;b3LW(dl\uWe?#HDBV/Rl@HV_9G&%:fC`md6cn,2#\a>@J6b<+)0'8a$g;NAT91#t?0PEEio!7Q4VH/1&h?_l"(tfmaXC
%5/WUq!#lT2P2PMu$>kt)MN;7d&C;&_@<RkR#t!@%^r&?(.gSZ\ckHn2EUEi&-FOj9dgI!*":ddA_Pm9bLbL21"fN+H.0'b>OE<u'
%J68AP!;T%9SoBDN'%Ct&FlZ3r$@N`.O[(_tk`WXiXV**g8PUq7TaC#HI5_RZb=L<5.1km%a/d\d6>0T;UJF3UAAWBGV'nfnqs%rD
%BOFJ?g.A#6DFdCG'+i8qJ]N#GR+?@IgsU_UkmEZN6-'L@W$suZ6NFQ/$@i6]pG3ecD+RM8@8jKQJVm,*<:m+$0>nAhC[.QHmm4_X
%L_5jUUGMCR`gm.7V[eofZ!Et>-NnY)7#,:[aSld1kZ)>0i`TG>e2*5"hQmn2-I@P^#/QVl/rmp@Qu.\*BjY[`p;=@F*MuLHMiJt:
%<9(N6aC.9fp_@PdN@DZc].cns8iqB[-"KJ=%1+,>39!;`5t&ei?u2quP;gma/+c@88"qN3K=m!tP.l#r`&P%_aWqu2cckWHM*]7P
%otIf&SuL%u5b`r@A,@cF.<KDp.I*kb"sCdeYT"JaOOaga@YlKuLF!Y-K42M+*=H"b@$1Trr<\j,64OQc310>9%^V?u[2$n.k/+(l
%S./%^="snPLE.BD<d!VuOaQlTc3q]c[)dP*W(Bpl8FW.^@@JrUbt*q[Lo'\ciG?AHE*3kod*ok_eBme3.+lt";rEF+,YoDD6(oA1
%82]$=,3g@<CdQa,Sh;8JT"6I!TPN3hV=E3h-'2OjaUlOi%:^)?<YHMMXqP%2m(*<FoL[0Cnq+<0Tf,)2l\]5IJHFC:%LIDY<<=Hb
%NIYns-'GVZ@HFJVYbr%I%N@1&AK,TO/0-g)2VnmZ>lu?Xot<,R!<T[,J`U#sXV5r1BKS&>=[WlEb"2`=lO%p!+q4uHIBjW@:f.Jb
%@)-F9PH:V:!e_&M+XCc9<@O"Wf"d#^'e%HK=n&<W73a993>-VX;?M/5&2K3W4L47W*6Sp;8taO.C5V^GFFE*K1'5SNLlNSZl[i@H
%7m';MNGCLf5sBm[Itbd*qsM%hWCaLPdZoRUl=*Hi7<2,gX%?bE1@bfN+rds0HXdA<(t*F%@%]0?3>>sHRR@6H9@<TNP$"2!'%tu:
%@aG\#^JG]8+\;od+.<\%1l=dnM="#galOce<QHip_s+(AjoBJDOC21P[p_[V%R#SA%+D"L*AM?S!$7C;.'&a%.;&DZ%-@iO:k0Ti
%,\#mIEJ6`bAjD),Mc'UC;!.iK>W33(KW,.]nL-c?2096h2]8bVoDh93@Mk%7$!#_l,FK%hZ-YRc\28ocBj3q/=WpG7aRRq[I2t=k
%;?h:EZjk8"jG"q%aOi8uBq!C4AJ#l9jb+hG*7"t;bBuAWKEB9BZ^JXD=A.]pF7"^P!QeH&B_rEL:md?Sa+uW!VqP8D\\sXYEQTo#
%g0%Td-q:U1VIC#_&D4X7#8&5/)P&u!5CgMg+s3qkE&'FJLN,5nkqED+!3\6bMBRA6KS@uWa#Tg10J,eO?D%+Xe)?#'XY>.Kift'I
%T%[s9N![PE2p3(RLBsRWE+(<JOHc_P+j,EIP>"A?\jB$Bg^\<:7<2p5]7pSu6VM?OK&QLkI2K,_ham`9:'hMrB3T']D-Ij]N(os]
%.hgIT\`dF"<#VVWaXX.lM&'"J!3sCKj+FSEAaQj%[OGHP(5$CK&JN)j`Nt2)"Fj+38QR6oJG3`V9TY3C!`KeI)hso$WX45i^_-.s
%(RX)>b0XTj!YIOM$X"qk]dR(b+bYBS6O/aV$6::BW%Xm'Q7(``lJ!-S,(UMeS8^SF%jD9nIo@mIX_3GDT'2GQ$4R\&,jD@1>a@1&
%k+EBBqkYqk"q>#<.n./_a#NPn7=GXLn[lp\d%Q38+Hq6aR@smqgS$kp7q<sBXC2H+&B"Arj?1A("#L.uo4T0Oa<1I=&E*eo'KoQ]
%[ZD^_!a>gT+Qssd?mSs\$uj;leG@To6DAF#"CPB0e(Kfs+@>eC_K5l="[].5%+8EEKRR(^``%u)+>A]a*"p1odT'X/Xco:l?tL;m
%Z&/ceZ#.>7,kHjXd-\7fHY4JlNK*K?1i\d7@Zq<Fb7O&RMAT$>>ikW(d'P@N_%H"]0$nUJ.2Ji#HEJZ7>oI)kT'5XQWD5A!O<[<\
%=%EG1L?p7Qm">JO:e\)7N-a/tg-A_VGm&_F!39j_8VEO)):?R2W5Lu[rq0[XZ3lOVX;^GVStKgYL3O%7'J1TpWYWgB-;t%VnS@HH
%+[`d=8m1)XVedkfT:P,!%L,C5%>irhTEq?E.*6j6bXRPC!0KiRJ7f6SPLG>L(s!EYaNp!^1gJJR(_-HWl[BckR*9I=i4K(\eoY>"
%MC/f"_&gErY[&RIIH3T=MYqg.KK2QnR6)ttbncNg,OVA#UfH5)<7hAqL7+Ap*T6;&3t[.SnqT@>!CL^h]A[F78>r!f*P(Y8@Y#CT
%g%QiK=<eXgIZdPs*#AgJqeA/W=!BcLIF\2Z46.Mf.&mM!%]j,MdqlID+k%DI7g2!2=(,Aq&2>o$4Gogrm!P"_7J=/Nk.m[Mcp<O1
%\8MLELhC?#9\(fkcC!@./291j=h%$n7hfn+Yd/(SkS[.,WCE`3Lr4oC.jU/Xg=2m;%7/>Pj"YTLFHCMN[B>A`LlLm5a4'r[lpDoh
%HibKti^gRTn*<Gu&C7&$U6TD?'DG@r7/<8I;BjI![_G`43!^Y;JUYtY\MaloeFA08*@oX#?O%mtT7Gll)MgrNUnMtM85>Bh+Q4p2
%'ShW/MbO]0YCS@lQ%3D>fuht;I;WY$L/RZ^<eQ4M*g"$p145r$T-RB>_Y9`Sm3$H=^lmV!@-H:(MXGJG%W`snl=-\30$lF$&i^fp
%+b:N@0iU7L*D0Mik;5?FC(jJYW?Y=!_Uk(Wfh.pYe\[A>4;$*7m:^QW&=O'uDRm'RKU=Ffpnipq=anF@D0!@PA?Z3Z\T8FUWsY=>
%-Hga%=E0!+O?iVi!4j-Z-`B#bN'2)(JO9'o239llW%UNedRaZo@^7/Q<U(a)\RFe$"i2dl/F_>>L5fk=#md2$U(6E2=O+9Sj^uDb
%FDU;s(SM;E,;=iBCj:MS'SA;2TCML]=")S)'umtNqEa,r'3#rB&A*SQ+a-Ma=`!?U2UCZFU1O5Y(&FTbq;U1^T55GO9&@&u6maGt
%UEd#APlc[U&/o`YrMkfn!Y,d=2/ERXBi%p`Sfg;*L[?4.O(2:NJApe9#UOp'8jh6(&\,l$fUW`'j!][C$oMuR!3,HI_A3D@,A-'B
%JI4C4Lj;M>-lGe#LN"n]@N8`$)a/-nC2;hUMl1_8_1N#NE0H-A/r2XsQQtn_gNm3s)5HCgCD#+ATck=(LS0>.YU(DI0$"5<k_g:m
%cW4C8M%LkG0.UJg8aEB0fo/N*,dWBi7=bh9+8%Bk87Zt?c9atr&<F5P\>bD.HYc.e+1Bu/$`$%85,tf<qW&Cr[R?$1W2aGb3J554
%'3SFj$94>]EiT31"D.D'l6:b670]MT%sE&..eK;6X3`prYKM<XK\9(1kYVDJ%_\WuaDS\j`WabO,<4^b(f*\&H'\$+\X'BARqW.4
%OnD$fYEdR&[Rb/H0<A/&/E(E9MBO0>$;VOnCD%7T5^nr#8bEOcC!>'P#q0+PdT<Q=q^.MW$/qt!98Pr%q#3nU7NCc?ra6Ml6unW>
%:87gtZ#n#\PEc>FBHR<\@@/=I1ao@B>iL!d>TD_9O>t3(D[]RnfX?<dq'@^e*3TdH^lhm&SJ5&t0Jt9&=?+o%Uk-UKE\+L6+B:a`
%N<csEJJ,gjp3Ef%bL!YNc]AuBP)i!GLT_+W(15I]"J#j0=J72Z#u095&:"7eckB4/\W@3a<;rHtk7A3J'=(&C)lJ\.Yj3\rN_m(/
%-lUj)g,n$*+A0P?.%.qg&PP"K6<Z+UetZX6:'RXN",pd%mA_R!)0emdBg@NfOamon&h'R*6C1IUI]1/"%0EmH"_PBRm=?3F/'/Io
%X=sc&dMrP/RiE#/C;u'M)MV$Y,0[.*S5;U>La<n3ln\9/MR+E+?-eKu3,oJChP_E]&66'D;A;2R.OPc3UAId!6>ie/HJUH03'qBd
%f:YemKQ.[(R#W+8H:Ah&16m,[gZ1h7TqHrl<!T(,3\a2F`6o,7TE3VTK-1IVM)Z`BJg<9*N_k#`+\9mUWKnBi(@sRHk""KmHooT^
%_^tcpN)6ftCa4fnf^QQn$rgtKe_@?3j=#Y3@kMklNpB*eh-sldB[IM)^dSNkg]Jf1>QsUokn'%4!Z`bYVSbBD+f)8m5oRt*(SUCC
%/8:?IpJKfV5fh4lnkmOn%8eYi<C7=!1:;dDW'\?2!l,Z-FArh.Zm*)&KP^]fFD$B+.]6\W"qWjgs-!9G.YQ=20b=(;@4W@SB:'/8
%UAQBj6t].>W@:4D@u.4V>\HNYNX6;J)Et?S?Ho^?OW&U7>m2qBZ?8]9epK@_X_k%rMQ55P+I?@)_8H00$Ao[0q3%@#9B!D_>2giA
%6]j-iR^ZhM#c%e3I=j<fEC1[F0.`pZiA?WSD$#]`QOF\(0SJ[T]?qt,<mdTVC2PR]$GJQ5k\*d+RR2V+A?rF]d6X)^4-&pN:d`Wk
%2OkBTl,gRMW2u`[m.)J4IDcO]IC'icc^Fj/eKn_E3".&/&+=,#fo-YX6aGOF_2F5E8-oNeBN>`XCh4k7eBPit.SK1hK%d5>-Q13_
%b!obrR5Y1ef$K=a+V>D'8lAh6&#Y&CGr99J^gsqlNF@57i=1d[N50u`C-#g3U3`<^,_A@,OjBft`,S'C)Mgp^Qqdb3+C%C;N>=t=
%[:pj^=e]BPN_)%ILn'3EYQUarWWAm67:X:B$tK.[DIoQO[%4#a'/qe#"^WaDe4MShN)0S6n;[a2p*Q2&ha&KI<5s8uGYrWChSTJl
%m@a`Cp+R@9>5g4=s6M(q=pf=lo=5B%l+d8l"Y<F/(`)QRRDL.%CkKr,T-KI*89TdU"D$,*U=2H&NTCR6@:qsP")<V$%>;Y(NGfbF
%o@_'W>WrFdknC2P[$@NL?K$;VKL#6h=qG^_;<<a2#9ePN8O`aV'%@`,LMU5f68$K8_6&8JT]*2:e=iI%>&DRK\laifXF+mA#ZR*9
%X2mZ`&18tgA.Rf8\OpBR8%E)W?@6@Uj%DqCZe8e4Em>D%=L3^m;h3rk(bkO`T7\gUMD%Yi\(-gl1cm-7Xu:QG!f5'>eLUbXJ[@fP
%`*mRi#;V1`N,ViQ3<9`1j19b<0_QMm<K1U;Oi=IjLZh6G"L;$E,A^%*YQLitpK4t9V^51S6Z!bH2V1fPaF+n3$:G0rTq[/V$D5Hc
%k0o&P`>N^eg:S#Rqt`pMBaqtmm9<n3\/:I!2hAsVN/('Q(rBA,5970$U<kf$\jYGAYahINd0Rf%A#n)`=H6X1HP#IM<Jom7OocF:
%qLkP#X?!8I7A[Y2Ka]_'6s;UJ#3&W&6N/3]@5LT,gCQ7O7BWnMVJlsL7;WG&?G6FGAW,h+FX!gg<u?RX=qYZ\+ib5-kOLc#l=^fq
%$%%21A:4*6^b;:uB58_o)k,PZeRfs$K%^RNPQ>-%"Br%;E#-1*[#$;1.*fg^,_a1q+A^.d25lA5[a]EQ"q)No]-&P,j2`\4(,R/$
%^bsab[87%hVtjm\OF/7i't;fgj/Pob3^aQ/-M#^+,@muOe29-p%ihQFVB^5;Qij-)YV2M/0ga_5K2_'nI1FnoKe4V<M7pC?FNW8V
%kk@dTJjY6E-0pUfbneFHI16aD-'N:&+G2dE-H(YCV6@rs//\VJAYE=0d@N#!'>+s<XY>Q&AI.$f/EDm<ZOl(_q&tWkYU'QF,4l_g
%=CV+Vg`i^"DZGTV=#dEG65lQ8ROmCf;JD'V?ssQg!pMtfYrFg@+>+JgXl<;0=15)['l]G\WKFm2jfC@B;b@9TnjGN<"!Kq+P&*2/
%Q"VCsZ[H/&W$:`b]Fd[TDr@:7>&/qQKRe"D_Qat(M5\q:Fr1tIZ\rZ'_Lj%MY\(q_KV(u)22%CG=C+s;$40:g_!44<ROU2=.LR"F
%j<Tn)QJ<(gR2Tm'ks-3@C)dS\i>bW[8p1n',N\(_.a0n@&h+m-EQ*V$G<#<J&;^]$/VZR,q4>X//DM5P;BXc3(\s6p"6>-[0UI_5
%J:<2Ee;Oa/:<""4'/q.],YXL4'n`kB2.3euA?]bG6Wf@X*Rds]\5AT,X*d;Hq$1`i8eOiN5QiM'6tuseMcA?]@O?#L,@nk)()pCB
%3?A0;NXc[.H+j>(BZ\@b,De^,nd]]l%oL=09A2$_=pVHF]r2J8/Mg"Nn=<)q)bhT0EB/Y)ZMT#<`FU8X#S9JRqa&CdXt7gT;<uL=
%%Y>k9c9q,5E&6>nmM?=nMK_;S3;5^N-jTT/DE"r+jb3PnaU:IZU(+Y$e53+fLZt@)*o):h=g!_lQ3d[H$-.d#8!T+AC^r!-dD=Jb
%+L[M'C)n>:F)f66Hj"Iqe7Q[880IG#[>m^):DCaba+/C<K,BUk4d)S_45qV*:hg"h6q!R*,^b6p+e-B()J$qr&8Y)\l"A;Un9mnr
%,0i(Ri7[h^LDg6)p1n/8S-%dKQmcHTBV6nch#69WN.OY6]Z%u4P3'2-+MFJ3E8MFpbGBAe6KF(_=>E;>'mG[XLXARSL`N2i(31!G
%Ia*sbQq_2#j;APIj6Nu"QPKYJ#!+[-k=M\;rM@".5r]?;3J]u++b^l-XO+M]V<SM0NRU3O`C:VteL5Trmfna'CQ0J,.rJV`2.mQ&
%d5_KgEtltG;9J(;[rm3\k6ljKjI!/7XT-gW8H+=P&_[RNZN@O*Z@dC?Uq.'J:C4s9aVtEk.Y51F`E+mY5Qo1$4^YY6Z'>&Td*Q/G
%TGUB?5U#R3n.G8-'=M^E$IM^]l(LA506VUAU`St/8gjiKIMQQD!V1:$;-)7f,]_Q4[,CYh,2:1`L;'u!TJW$@/@9B$d$5T-bnkVL
%[nt+Y3AK$+Qq1&<`hs`J`X\\O$TDVKk5\f"&7?7iJf:@:!Z94qB8FWmV8=VCE6uOTY6.D8mLX)7)CX<B255\S?:36Z4teqF3[gCt
%K;/8V2*)R,n0+kb,j\p--ds7QB?IK0roEPg<uI;IZ[*`:'=ALh/+=_oF30/U4;gd/&;=/pNl'sGe+%jH'GS)O%VUJL6:7m^,uD=o
%J-\0-Tb0RfqIW8MSHd&e=[UUm2WC-pW8ce^jdRKiARI#Oh"ME@-QtFt("[qJ'G9Wm9,Ls\-TXV\[@p^Tn[o\ClF0),:>1"9GJ5mF
%+pZ9/dss>/NgMhD/4=)XQR"@:LuNF]BI(h2jX"YO,p7'M(mqBV*\:Lp!0X*ZQ1V`mVGM5L\:I1'0.KDF739/;@XCtZ"&KLE[;6O$
%RZZi0ZIVLT-4kgR'iu$K75_OK3.X\hg5&2f`F1ZV=Z@`NLe/:XESgoa8jWa"8Vn)7j6ZLco1#CY&?H_\>/MJol4:eg,nn`s+A**@
%c0H>6/f="<q'I@>DLla2%VVdMi/E+5pl[of:,/5K]RM>>oTc50J^EdriXN`JPla'^Lk7;kAO)o.gqVT8*L)p.rW"c95+Ti9]0tWd
%0OK5u**lMo"^Ii86#@mVD-uZmT=5:cjR";NckmZ(U>;$\@"H5/e>A3jAYH*M@&Gnskc7Bj10P)Xc'goXji*u@8.8pr&A4"OiS%Gi
%MBbtG/5I`aX9QB_(lF4SW8V7dEVnA^+s@+Y'/5Zp(t:gN6PUCW(NJK>@UQ0%Ea67g,23^iatUdlEM\mi),+T@o#_#jgSCO1c&H2M
%5)_EJ/J?0$P:2J=&efA$=X7dR!GJhH67nWl8aPj`MLA3$:Wed(q/R*\WZ8I%/6J43S0j#>=LkA?7h(@n8??/DE/h2V_]lV\do2s<
%."TiBT("2d].D-7%(2!1=pu2t7!]d`'_"-(C<9s.:pR%m@&8_W+tT%A82hQU9gA=M&(X#RNYS]0B47>$`di/E?A'/bb$fD"&k5"k
%L2DCc,`K[3eG3fD]R8_<GR&m:f+,kb/Kl(g8n#cgo95hMZMEQ9EM-fSjH65P);a4J3.uP(NmB4TL9rC4*5NfVlX2&@=9o7o0+P39
%K3#QW;NZ>bW9_D(6I,6Z#h#:rMni:9KZj;(YD)Ns:ZgTh@0V!l+iMgWePhs:X>k@P+ho`:8`8TC)QtE*<D3C*4cJ\TDk+!?1>s0]
%/u"GXL0#1',:Edkr.l@)p/Uj02(5W\+q)6g9l_?sd>3%W9=6W"ailGj6E_8_p&up872/6?P8$k3SOiVYAX&.1D@2WaDrKdthInNi
%Ec_T%$)(\B8q7s,e<n`^2$J4l,XbFFdKig<TX`2>b>SjML`IU;ZN1<VrL#uCU=1<ZL#P*mpho[rB]17&YbXk-3s(:LP(n_V$35#O
%E'_@\1C*:A6:#ZU\'<6d8?68?OJ]:nDApITQnSsDeHA\8+<b;PaL*!6W;*3T%:r#K68tose"E!Qd@)(l2d^Y#32+6t\3$]OJT'Z9
%5X`hLSm[EZ"&\C35Zcr%g`=h^(k`A2[*JZm8\)_%SG>EMSZok\g.8<6MN3)ZXr8RrLR8(0_n^?8=97i/-jl;$,=ksW6=<opFqGT;
%K>iM;cPZiFV8ZpjlQ=&d"RG*USYuV8PfP4sh[e84.ku,niZUK8\-_GWaH0nfHiTki+Bl#TN"h/%A?,n1Fh,j:F`rKiD_-X!Epsfg
%A@$8!"hPYkqa2*UA7h$aMuot1nG(,&U`nUY;11Su*\R[hk1-+?C\j.%g#WJ.pt<L5XJi[0=3troL)<,\0d+C>3T>B:@e"ISC.*T=
%g/O!f&<XHA_W\--fB5U6m>s&uChjaLLD$QHkD&ad%3<U=n3GE%`1cg%RP.,4SN,WR0m:[aC![G;OQ%$;HCPW\%Kr.;_F"g"rl.dh
%LrpmFW>qDX5ffdUb-T]m7(p*GU^]i&4X.DiZjNO0c',M.g^K<A.m6o7dO1$Jam.m5&fcXf*PjO:.a*lRiJJWCM)<^l4bf1D-n+d)
%R8!:@<@AY:!9NqZjR!-\MEB;(2P;W`LnV89?q#"P+g&pR-f@<Pg*Vo^hWG!h>h&iRi^s;rdeHuWh@K/Y.IcEa8][&t\54I9,QaYi
%*e9BnA<M[X/D=hmdXF5BRkk788DrbGL6??KbTJfM^e3arE:lk%<>Ie9i$mEti)2g&=<NsKnA683?gIOQY(2%u/f?r!H#j67E6B"m
%K*-#VffKX8"R(N?<Y6&;,l#6-T1JH>5bpccbJbK0>M^ofWdIVW_=b9!UM*!S+\"$@q@/?Y`"=/.iTpXUCAC_=J1h&rlUM6e=`_nh
%a-/b_GdC^O)\+;lMbbmq2Zb^6+;?0n1hqj$n$\>s:'55%-I@!ga`%P)6hi!EK_W;EZ2cK$(*kfUFeb20O6opuiT$rI*P!-I>)%?c
%N^*o:.A[9*#tjt*GPM>>6L/Y\MNsLJ0lU>;X(8g#fC1(YFf^=kCadJ(n'_]KG/4'_]QaX`m2%Dn&LIhK_ejKqO9+]#R4957eMr?q
%5_`Bl'+pYsENI;JX@ccY6NKY)T`j0#OT6O0EQ.e'Tu7P'Bh"\JWEsq0Tbo]q*a>j5,bU";Z%eWX2QGV:$)O=PJqUd&/!fbjnRa0s
%;u&"6_cM+lG)HJ+X.J2fjldU8XbJ<C+4g`O'U@l1D\?[h/Bmi4;4&M-'u)jKW4l#+Vp3%sgQ6FonXbkgnR+4IKboMe;$2\SN66Bi
%2ZY54/qka_UbE4ffo:Zoh"O2d_!k?7g[_-"_8EO,i,]6r&@*Prhujl,&'[-JqaDu"3<bo[0eLMn=H9NM!!L9rDu^di(MG$YIUQk7
%als]_M.(BXf_U]aQ9\.s"E<KJE2DF50K;(C98KOK^]=U&+/=OJlF%LqC,f7a+Q<8-j%PAFaUYr\&d5se*'.\r0K's#PWdtU)CUiU
%%>g5eE^>i66'<gi0<h2aO!mqZC&gXWXAIFg+R?pgjTo*]At/b?o&As8^*iB]H^l9k@%aM%/_a>e,VoR'6Hu4hb'$b+"$^:-3M?(2
%JO6o+A"e"['Q;;oD_jFO,+2poi-,R45B)ofn*4(r)2'A]Gm,II(8fl+Q*.Rd%W!LldmeCL)$F9WF_l1^(B,7[(=H6bpLViZ<G94J
%6>V0j#.D`knH6\#H9.PQ5pO9Smb)jU6idBeOqL>A-3=k+\@hA58Yub(k,5du2LHd]_B`H#D(T')Gb&Cq?P'GQ[4\_5%XT7N`F9Bf
%0SZ@q<P-2S%,Aq`fCrbTXqmC5WZRfsO_fY66,8gaoMn;@A@5T:L`oOl-W=]OGSrl9?:)G*&;->N?_g*XhSAFXSk?MuEO6t@`EY+:
%5[W?6itr?B`(]P1`A2k\j=]M1R4esT$1_<C;Tu65Qs@lORQ;].NDep!NRFB+guq2b-nnXBN*gg*-B''Y=hYNk&JT@!OWMA^/A>ZY
%.V5eZ$E-)Vb+c]E\R<8[,)IkS3Z)a&Nd(rc;%Le.XslSUaA/&#Wd4B=]YI0-+`sQ\PHUsq;HF:C,qf@sTQlZZ;\cN)i`)rn4gp]3
%g3@G&Tn-J3L\`]9=\/H-a9s0=bg0i#PS@]fc8ipd4d0f2Yu[,H2r9aKRXsC^>+/Dl47\fuJ_2Yc"iQ23QRQe9.M62:RLM&*Ro=CD
%lLg6_J@&oUguA'L/3C7KXY1b%CMqoMF"f1_J:m`iS@;L`e>*9Cau*4/X4R8#^0)aT[c@!/f/cGsJh9i;5-."4Vl^!qF[@_KM)f3]
%,X6"kL[UQb#GI^r+f,BM>Z89N!K#D;rWEH31U(lL14f40)3t$;5m5,o"FO-#@Tu@YG`-3n+D"tl`stHG$C6OK<7G;:.%+%iWl8\i
%`>B",.^B<1NRD?(e<8409C/qBLC:I[k!MX[8SnMp2VS\JSr.d6^h7\3j:`ClLhHu75LK@K;6q"l!GW+_C2Bl[Ntr@\Oqhb\@@N*N
%)Gd)YU889.4$j(j!>Q"$<4q/B&::"$$8G?pq,.;#.-K*Ekq8%D+gB6\pO'$+=UGK;=1I29Wknq$%2/.i9K<$QV%Hl%?+bst&L:sN
%='+Aj"up\0;0lSO@%jWekjT7P#m^Q=7*_S]X,$b!S>"etM=0/&S>QhWIZ@B-P=\G;'Ane'<Q7+XijBnjpD[51F/]iT!hQ1DI#4O,
%Eq-0@dT>m5YrQ:a'0Sb+>d+NU,_2/7U2<EECY0l7,b4[*&P&ks;[3.NOJ*"p62>nl!F:O[Cgdo3O?>I'I*:KB`WuAEkLU'olQD:E
%\0+k#LR'F.MB]ML&i?=4-%9&-TR^B>j'jLfXI<ts1@)ha[\RpNq\=.M`o8p_E4MD*Q%ZFn$=^"4,Rf@Yk";:k+>rZ=-0@JZ=<&^'
%;l@\97KYMgNQVF_f/YC3q0'7^GaSDO*(C<C1GDM5.AdYI5U`\mrJ:;*VRDB(=StKD<3c_FkG(;&8`'MjD3io7G`i%2W@^W6QBHdX
%2=#\dl$dffi^kt']TaReL$_SML/(^QK.<CG$n@*I<r0=g_'c2hIOs\n5"Jlmqj@;W;)rc69Ir*:+iGf3"rOL*+_1e>Cpk)Uq=6i[
%7e`#7jgolf\@*V.rd5GG*$G0U.dT,]a4KOj5C<X,X7:lM0T(i/B#BFbZ9A!e<_$g5<Y+)H2<64jR+oL`WT8IjG#V=W$\IK<n&,D:
%9R^65):hl-Ps\`.r.::PR0%rN%"b(nk(E85.&Q$[*'A@O*0/t#=Usm>;Pa47@I/U(+_F6XRY=r[Nb-BRW/\_A=Lj$7Fg1=mY--(t
%+DNh]BSGbKr!4?A,4#hM:1]P1%>Fp`^.H>BNX(7YopBD$j:I"XJ-]$Zd$2$f^R&V*&S<.m!<Xb.f2Q`h[\q1IcRT-\W8fX3^)J=9
%duIaE#6&5-A0#$R.a,3i$6aoT"%Cnq9t<O/+?tss$C*me;Z\8GA]_0=kGi&5?eOVo&%V<PFNE'Spr,;;La^PH095Qm_b>cS.slsT
%es*E%>7XD8&kg&8*>/mgI1b.$^mu(EW66jP-q"rg@9+9bQi-YJ?OKY2j-r.>npI:b>\63t,>i6d?QQ.OF&\]n:^mPf)tPgMU$SO0
%,nZ+.,/"[[h@u..[UP#B;p\VQIqO<cM0gGCXgn33F%A&&XQ8Cd@T\J-W<2kb9K,?&.e/4F<K+(uhX`p!M(:ST6f'AQ6jM0*GZ,%3
%l$+D,@cif"C-m.8(^D0-Z>hJ>ojg(s*Q]IRH+5Cf&.rTK?L>P_S3ikKnOr=YCb^oc:VNWuBZKX0'de"l)%[#*d8K&)T4)P+a=n=6
%pl^(pOV(NHA+I[Y3/OZ,o[lIQ&<"Efj'-k]UpC)]MI6m6dj,ss+I:(`H;YYsHP)JaH%QJ=Or*-9IY$`6`s/mVLrZ^t_$K][\`LUl
%'Ec2edW/_;8o2s4jZ-cT&OkSs2%[>C[O8e!g^r*/pa'U4`mI<tPg$-.:&-me7Pe"4,[5NIUkgi4&tj:s7g79@j];k9_%Q$QnG!6'
%NOYFK]jaK[J8>=9UG#XJCA>6k:H0pMiGeJ*O+9E,-ZL9C00p*7+D4,'P2[qTl6(O.flIko4)('jLh"5CBr7m@6@FuuJG^*&/4X4X
%6A]k5P[g@97frBOjJ7VUCeL_^=@6C?#I2*+j:AoA:^9j,dF"Uq7':YDY`e/lFJp_K)LXSP^-AL@X$GGV*XMWe8OHG<347]XO?RRa
%N>Irj(S`^<mjJAC1N=,"Y8jU;$O;5/M_@>Z4?(cBI@rffLV@RX<s>Cm**ZCO/0*.ZfTllsUUH2-=++&!KA*9rEVSB>;^t+<JNRb(
%aX-o/?@`nH.UM<fFilEKFL@A`[U\p$3CI*WgpM9]<#gS!-2lfnS#$T_):r5iBB4.o\?k>-b4MI*g!MlcI(9<t"6eqRdEN#0dQ3c9
%Oru6kXd7-d#5h1%rjJN^$Iekl9XOTDSgM3cPsE/$,[H+YX[#&<AGT&K>nfV&4pGOeJZ0>?<0("Yb"O7.k8HK`WuaYfE54i@6mOd?
%'MCGaRlc3GF=ncu8="8Fc]N-d2ImVgdDk&`UjZbbB9MAN%&mSt$5(I[m]aV4_Cc\QXUO\M%T*Qd(kS=AO*aHI+dAJ=MZ!rT7=hfW
%-"2nq7+i[Cmi<piRZ.L*.KJGsQh836[3@rB,3'.UR"-EC*Q:?9iBpo08r#!$7L(mJj`Q#Z^5T@m"6IK2$*?;UE-pk.HM#pg_mqOG
%@6uJn:'"=n/.cuaG`BF03-01mGa/S8*k4R>JmY-$b;,3fiNeitB&j@:_@dS@SAJhEkF+mn"[T\t@L[V;&I!&)N$/EZIIgN8(e"Dt
%j9pG#(T@32%R/"O2?oN:JMZd6"S4>`@=+Tb4aA/$eP`fA%PD\hdueT[_iPX*LPj_740f@QM!$Wtr#D*C'`qj83h0W8DXhe4@7LNd
%YI@p&\`bo&b0soS^1emP#)A6mCA<TYWW";>#b\7U+Ke.hL]a9;8lriejhr(/X#DW,X'BeL4sH,[&S.YXR1k#/"ksY4QHVbYW%T]r
%@Ymf%LVHUe<Ige]KN\(`\E)8]9e^-P370,$j=&C!;""cJ`)@;0o:5"]W"L&2QNP@F'C[V18FG<,9[#8/mOKAu_g9G*'gi+'c4gK2
%<.on(>$k,W9<8`8N\#qn<>>ceX/+C)^SW@JCO@M[2WW&0o(b&:Nd^^7E!#UlAc8o^oIkg-&oq'_irDBE#R]^W=\VOAIA<k-W>BjL
%'e>=7nJC-c5HY?tpj607Uirc=iC?I?;ghe>#DEf7PJ1@b+BqkgSWbKRocgc^WBQS:$,,-`-C)!gSV^"SCu=hQ:LD6fJ:,FBLeG&T
%^:VU-lhX?`UhY\EY%;n*9I`1#KsH4nQCEC+Gr\dg)WKV^qF4RL"]V;$*^`j68O1CTotFHP\s#,e:pcBoCe%>;mUGsGH;2D''j5gR
%qTL`X;LSfUQ!H#W=lBR*"iBi[I5GV/?NLT`Q8=I&V@p'jf5(4hr+\J6QW![2j8aAa"ei`?e0??,I!uI0=RrS1*=-5p"\##X8um6Z
%>lO3&o#Xf>2pW-q<M`sk&KWR:Onp=n<FFj%)1i68iXPR^NSYE3SG[M9=ppZtBHZBUpoE6+QeuV8[T&M\aW.H.edE7fT(??fLIbso
%C$>3T>O%-N^maUfq'7:,"tADa'Xkf8?5VW76NZqB@,*Uh_IF2!cgpQa%5j4jp9rP=596G25Fqt<7Gpq*[ZCV+Y?:7N$8Jf[j#Jqm
%[$"j68'ruK)`tVj(T6:*,7)5AZfK@qPOHq=`%0p;RmuKC*:>aKonhVj93`Hn7&lYL+h<>?#L\\cfI/'fGK'.kU9Q^sNcIAu!hN&.
%TRH=3"E:8$KS2YtcS3#q1NBQ7D%Uk["ZHLk!_lm.oK*]PPo%J>:h7c"%;aOOW=Q`%Ek!k/:%]MF1\rN!W"-O/n#Hu2njg*_%#aAg
%<[4d<ij!RR<;6#m>KR1S1f09p*qN0XGW1aL3b^Y?X%=9cE<B"/2?K.Tae"/[j+d@&ZH?1_ksBcRF!.0ASed7DTX:O8G:mm$gV@b3
%D%<\[l<+2f`j!#rbHLc@)tA1(8')tc*-$d*LE\MhL+;"!h9j-Vb!RapW2HY$pr]JmZSIX:Z9YUZn"e#R9Su/U>F%F$c<o;,`FIoG
%(I-subTZ9'j9:nBW=5"7YAQ3C_(8s0M4nNJQ!DDg4"1`"SNslLSNpK+@r%i*"*<Z[R5P,3--7"SAOR%gX`!I"Bb5,^%2pfO)(e-`
%#[>siBN&,EGkb0l,F@>Ur$?]Ea3"+?e++67khdcoQJY[q,p:un.ie&$&6rMg62^7r0@e[0K53tI)U3e9b>>p$*A&H>-*,Sm_M4.K
%7QcM3MO-)OkpV\YK[Gu>SDO[Laq^Nno&Se]MF9]H$*PJ(a<>S!q1Y\l\;4u9Y!h9YI8uh&(F!%+X;;IYYjHs,Y36H7rkJqB'NXj0
%"39ZFf>g$#Xs$J(I%sZb!;0B_Wf*-O=YC)hTpic_;C3*Xg$2N1Y_KZD<s.GJ/\+@UMdD+\J2Uj!#W+eOhI7jbbJ+nt$e=dA>&Sp"
%WDl3W8QDnGl>[6NXeH&o4E9j%jG`e*4Y0g'3b*Gc"6i5$T*UGJeQ'=MK[eP.e'h"oL]R<>,Ecg,.qm^.hX\]+)gjgtc'&D3Cf_Zl
%ib&GIL6O'gKRpX@:E7F=@KqW]534/)X31:5%H<-KrMZp2,&O:a)DI"IW,n'@20gJ\k2h9)&QLCAF+F2<2)^*]d86u%B2%9TNPK]O
%^#OPsJ"@0:48,KiEpH'*XQA[WSQY5fYB\@>jEir_*44L&@1[>")NK+bSjBds?i*]#c+"[BX8m/088J^CV@0TKk+H^)c\A<C7aXWB
%.M.MoFKJdY@cr[`+'_?Gpo4Zm4tYorqc;+F!1_U"qfV6243A,pbTQg_Gp/Wk?`;D=.*s*2GJre+f/We[g:gf^P,:h=$2=uTP!]2i
%N'#"t!%YHPl31""JBGSjdghFpm&H,)'r^fX<5t%<Vn9K"N=^6(-?3O,b`lF]lah1JhF]SS9_Un<ORJ8!q@TrQL)a99nF2K8Vs.r^
%s(7X%Bg,PG$I4_f;*Cl[Dik^;i"Yg:ClF0,`b1D%89l('?_$qlO^-_'Ep?RC!<f)FEef*!`Zrs$c=fS:Mj$\Ad-skn91+LWUN;Hg
%mINZ]YcYC[Y/0oUT1$#J:Io4`K;r^REa;DD/,g7+#WU7>=T+?7!)lXO_a)EJaV6b)5JuaR;PGG'Zk-=&h,`H^?c.kAQ%W[3=F!u%
%JXFa#B$F]-Q:F5ZrO^+t^LM=H/C96UVcgfR8&7[7.39,.9e1:^?(<CcB<M\/9<KC8"iuKtLF'L4*HIu0KqT@fFld!<oiW1CYrJ4j
%[0H8$m#G:/J%5=d`I6sOhEo'0W>u<^6RY2!4OL0ZG^*?%SIfaUPdYj/-3WWJ!fO-u&O/D:M+i81$ZW:%=hlW^>/b+2b/+5.G%XMl
%00,6O[eSP@^b"fbV]H,:,;>`K4Ss1B/G)+5hhR8V9^pHhMTp\P,0IG@4E5qI^g,mh1E<H<$AbE'&lls9>MuJjkZ/B#(u_:IWXS);
%QG/hHJ%0VOML4fk?NH![>kap`;@X^J(CDWMN$rf)/#EXSbtnRr"9./KG3GcA3=-J&+$uVJpV!qj7'3n^bh*qBQ+!ucT,M-WX3uOf
%k\ArMiTaP[pYK&dKl\RA+n#mmr-=s^a='KfX.(bP_jT@HROPi6)oBN_;K?'7jq!Rn:.eG^g-hZ94upI='^i$'#h[o^%HsXhU0BR+
%\FhD1Hge&m!i-2<,08LbY.6b-'\@]M'kE'@[NNdj(`"iuPnr)(?96s8K7;97E<[hfN30T!ML'\Q#kZKGIOji"&_T>5%EQR/2fSb8
%lWb.uhI"#'N"/]hp(t!\q'$$Er9)pPke*;BYePuX$!["V%,U@&?JL.@(U9a_nl=K3hl:mM&Z^KSLKir9\G,uKNrZ_SB8V?U&mT]H
%:NY74^f9f8-9tH;laNf7#.Vf#ClOsup_AffQG89>2CL6IiC"8l_AhA^%0LoQUa7L]Ljf#mmbhj[.dXjDIKPkg3Os*\:8aoV)d8dt
%Xl/L./RgCV].fkTG(UBHg[t<K*J@LO4LeD@7&!:8'+H-lJ6pu5'LZCB6F0Z0&A:E:C%I*a\"^D,Suu?sVDOelXr2^7bRlTSn7GnG
%%]"jp8*U+pWsb2^og=rehH6#N&D-/@1;I^KJQ:>'lNAcbX4Dg29?u\E+0KKMBtlb+H]+\n0.SpYL-f)^#Muip-&)D/[@=eYKH=@Y
%qI/`=X0d^OXnrm5LaKWJ<`sD3+GIp<Bg@_2Er4h\=VUVeff1TRU@=@!Vk>1a1`/'.fi6o'V;uiS6KPar:p?fb``PGfCjB7(D34(3
%M'6IF?9JQ,D8j=]#^aitDa5Y2\:O7,WuJCTp\sGHr$N@(r[YN#)@2O$iQbiaLgJme'h@hLId\\Z0c:ZooFU!OM3^eE>VVK+T2m(7
%I6,<.P$&6+j4pb2*5Q.pesAQOF%*Huk'&inP*#_rG6QqfT*5TMe$&m^+]'<g,r.TEU&\%#I'to9[.cHW;S>p6p*gJH1o1ZPit!im
%:u#mYo3'#I>XfC.hMlg"alnG0"`aJ_hY#c;.;3*q2^o>ii$G76K?C#pQ"=B<bfH<p"$3i4X_6H7H8/N/*ju#N&Aoe+@_//-J5K1>
%b,U-bP#k*(lhh)'MDd\k[D?gc,bV7gDuKWBaf;T)aQa4\2+M;uL`-kqGG!40T*e"D`Qc4ZE_i9!<D\D.+k0+]>]o\s]>?0%/Jpg]
%:;Q6dK-R"RV[SJ(HAZ@/ZJA*D7)!I_^-t]]E/*3O"st;5]EsGjIH;qoOLMgbK7]7HVFuP5V/r&?TMOE+J"sk"[hn*I^(b5.Qj33L
%)uBM$Q`(fp\.1:TJ"[+(=qJ<!AJ(1`W;qPbRF1$]9lDr@H;.igoHg/g`p_8KO?oeC?;Mfr5kulqpM6ljlRN)Dce`^m?Da[qYS*Q*
%?&D0LjDDVl8p[jE2uMsKl-\cA$k0@.rY;f9dWA)0<tmT@*,JALl-H$H\?#em'p*>lBF3hrLYdIuR>B9@h"VgE"S5_r_&gdAag;nS
%OJ\?],L*CT.qjd677%%;Uj93h!a[r=9WY`n=0,@mTCX9(Y_!;G=!@cC<X8rui&<o9<fQKLA5ei\XFX5m"/0q[Afq?`V1H"h'rNBq
%6l^)3[`0[%B&:TM7dYp4-#]=B5/@NPP]l+#7#AthMd#6H!`7Ko\)@VF]292n^5ZGR&;UD)I/AV2\I/\8>`OT[n#DbRWYi[Q7f*,C
%+a'(/[PW9soYYZuY6Hq8-Q<F7qS@k,MCZ>;5Vd#/5M';!eaK`1gbYZjn+.gVV)8_EL:<b!8clWb&.u'B9DFr+f6st.e2?<&QRZ5B
%PG@W40R'9c0rX/L$LWV\jh5jq`$O$QHFtN(U<0c38@1>!:>6VB;9Wk=,E95K3@#3B$!J\4*XbipZ=Dk_QH<<1"(?!NPk3i>Csj*p
%KsW5ueOhBkJIBUW!#1FWdOAjcNgJo?nWR;#^f9c-7Zh/lUO1*4WtL**C=!e&b*O1]LNW.73^?@O8D7=ZDJ8F"`Z%an8-^D`/fKq"
%bdq\i>@O`NQFBT7*OC]]0[/f/&JG.PN`QiSGr4FZoLu(T/:/X=p'L%XQVqldFB@KhUduqZ;GLM<C(@!h!uUHu_3ZbU)[K1RCEu#q
%\rn1cXG:Zs,HdT/$j/m?66bs:+*(aDJP3V%Fbp)petHJdjL^2_)qs8o62*S@@HH;<)OrRD`j\m5c>A3;UXG#r8aF#Z'7:5B_et9E
%c<JIH@mR>#fF-hp%qg,#:aH?G#&OJ0crmS]5%!#1+T:4YJZj'>8R\!*A*S>3#U&^oU92dO.^\c#1$b4)'0TBtA)%<%Xr`h+@S?-G
%H2dWd>J5q%V&SMNBMRNDm00;!fo$D0#LZi$;t9r#-oVl]%6A@a=W_!A`9'?&?,]uA-u0q``kq4:Y4AglADL9gK5<?r^u.dr3u#ES
%4UpQZ#)"=Al"8(>o&r*o;$/"##V"=E7kc3*qU!h))fA$On\I/6+I6ChC&sNhHm_N,ViI#XE=pp@TRMi@8P>'piF2=upg[eL\B?Y$
%oG09fb'@:.]n-lNNQ`Ku/oUkS][B,=@Y>TL^h^t38cL`Q.6Lk0bsb0,KBb!CM+bsVLV_HG?K"\0E4XN`NjCY*5-Rp+eFXG7RO"#@
%\8)_q\\ub`nW<`dU-['j2.!p+q[V!jB'5F-%Pgq3GgZEd";/)cjBcpfk%@L["EoXh`J:.D=hR5q!L@YY"^?)XTCF89W8eN,\._,M
%>W.WtRgYh4#O.)d^i#o/<e!<LefS:-Td@@.&CNu\H!$5uI*I1.FHb[tXQ9@uNA!Y?(/65sQ@.oaa0D&.\NpB!*\;eop;>tVUS22m
%oXsfmA.a<"e?G3k34iMNksiQ-#.qU$iSS=W'pNi-!(<q7EpN0G:M12_09a8Rj7#@sQa@?^I$K)%`A-"eB"r`;A$q-c-"2Kp\FS>U
%6$"T>%64o?jFO3d/!!kF>VQIbT\iPP806.\;13^W[;f],A)Ysoj[ot@4jI:#YPKt7LYQYrfW-@1=rVB+QsD[FnGW3;1`^'+q':MW
%QUUQ*\E!M&/"Yo3b4(Q8?Z:t?T^-5GA"MjMO0FaEf!CGn_"Y$&2iSk?,nL:;We9.%72!SM;d<)<L4SR5"01AEc?j1g%F(Je+HsN9
%;`<ag4Z"V(<cIj;8Q[("Mq5SKiJab08`G&;gT^.3DO*.=$#GKpEm_+hIIc7I84f+ciFkDb_YU=k0.bBBr=rNfQ/\T>`XT=YTUH)=
%q]MoDg#fMnPQTq@dD-H&.1i=qU/"5B'CfCeFV>Sg*!-^5[C>\0(;XRXNA]LJP#A`=9L@c5ldkYMnWd![(oIr+eI[DJ"a5PWTVhWW
%9N]rF&G(/:5\pQd5[<i)4an145"\_FT]7,*T;Sj8%H7+S14R2S*CtY/C)JD!K]#]?0r/!>6sIJ-\28cI0M!B$.$JN[V4oT8)Y%&p
%=osO^?:?PiJUo#8"W+,/'r!!o-XN(pa5&pTE<jXa($^+.W!tr'LHXjFq!a9Mo4h]q/q=GeLF=4)DmGRX-OCOu$6-R^;L&h?rHl2=
%D*r!dik*q+2i]0r(K"MTF?WBr<)e)GCCtd<bVoOECcI<')jLLu-:eX0;K1?;lg(Hoas^Ih(m%6sSn85HIt97JnR>an]1tK`Z4O%O
%NLLhBlWNZYg'IR%K(MA`;R"\f:EhM[S6]22+<eU"fpLoSCFJg=E:V[cr-7puqO%E]@BP3=Ohs?rV85S9p;MCS(huYrEVhsG)n=8`
%-]5-,.=Ark)hm^Yo57.aL79H`^\D-IR"lbiofb3P?b9&lN>jW;7$C,5niM)=+;S#G<YNT[qS\SHR6t&B!TOmFndU2G"G:5JMrYlo
%j4rq`>q]`(aF\#^+4"99]X_+LT\5R=hL7;)?'/7tlGC%nr!5.r44)-#ZGTjR9HOKfA4Aj@k/Fc!ZnJ5=A.g\bMCQI@Sg0LdGuL[g
%l^Con3L[g]#>06;,j"!P:o:eb7<D*&*H=65VFW$``U*tn71>V3;^M%ERM/Pf9S]_1i:WMkRFu+1l`Q%n^tjuecHUqZO^]<ob56=5
%;b*TJ8rg&%9bNP?a%3/V@U#7K;kb:<lCq;'ZAo$0a7et3kcZP6Tn6hI>NU"'?!NFH<,].B"BG[c:aBSiUrL-"cta\B%b')5q(pm&
%*[pT$Ef7n+AlZ=[]Wi)+JH$#_9\_sWk%')9Wi>+)M&YfXeH(ES,Mk@4SQqH"iS]kdPIjG\KHunZKkI>U_=1))SN-*m@qgVBdkZJ3
%`<T67Y:a0YMN_!NjZsOIXf>qG(*W&*ODARq(klePE"(DHR@+OTDA;!ETI7W/+/J6AC0Fm'mCoj-&XHkD-Hemog)N\Bn>4JN9+Fsm
%>OnV,b_h8?TdgSl9+u%G)rWiF,4^C]q.oTh.#rm478_-cE>M1c*E=t:HS.<8CFH]DgN,O+L3UofT/>gIk.h.Ca=9!<7b2U**>'8g
%0-W.QH?]%T<^tQKk^7kbTJdR'ANoA;_+]]MYgoAoP8s.O<6CN6/"h:;JE=QcWmQQ`C^*g87BLSFZ9DLRDrd\AFp%!b,QcO?o,!_6
%K-i]MRToZM#:VQV<!uH$T=qLm*&T5)RL$tH&=@E?KFtbrHActGn1XECSY1pg#pH9c5ro:"HU=tr5#L/QjK:I*T$Gg(=nE3aWTR8u
%p'OH&1KV\%9M$).=M9,*m6V7M22uiSOt=om:`lu8p'hf`'"QJK'q==<Cc;+;!o\"$NRL+fHP[1Nb=bi4=E%dDE5!ksB616q6f_!4
%d#<V#NDDo*di[G,[BNKjp[IH*\55^s%b[>%fF3h>3fFn@Mu_=T,G..c%&Diug-:ss&A:%r5W!>cI)QCDS"fA:^`>]i3:cW*j<XnZ
%X]QRIo(HgSLGh5F>E>>,d9q4jGrA*Lp%p+_mB#dJcbKFN:YbEiRg]k8;!F&V&.Ec)!T%`VFonHV_<AmY\obKj%Ik!joLroNIg@F>
%)5]\72^)9!ZCAlOmR4^06t+;Le9OcJ=sq8[Il)*BE-3['qpeQ)m(5ut5b-'4-s"e`@=*W_-QJ@7arje'\Wc+UjU!4UqF,BrWbqdp
%W*t-tBa^?:dOi2['M!a'%B@scaf]A+A=omU2po<S0())Fr>KYIO9$?d(L=MA"dU9h+:m'HnH,CI\21VAFgP?aYKH&#rko=/(@GN'
%iYLTiq)&sjHrX:F6.G;;-$!!)&>!1pRm5]>(<*u[eo(R9F'W-e,:L890/Um&/Vbe8@dNVVDr.0LBL!Qf8W!JU+$pfHhQpA?#,R`2
%F[LLSON^`F4?N%oDY43El]<&FJ%3'EMgOor?Ng.#15Ehar->$ejoqUk$(XtsilC9eG.h&ffa).)=MZ,C\6K`U6gKAB-l`6"BWTW)
%=+ErrW\b8^M:o?5]@DN^m6atBqLPECaJ4@iE@9(L7q!aB6bb^d=(3f9qhbfK^&id2KYAQrY8FD5LGadoat.F_>VD_?B[s(u.h.Ye
%#X$h@%1&#tp<=\^?:8Mr^%H0Nn"WM,"u.*6cT_qZpr_,3-ko^*g;3"'4\FHO[KbU^SG+,6')="hE>t.><qh=m#9,4MX#M"r?j'a-
%:'f1k#-K&n?HgjS3pZU'5[P1%L)MqTB2=UB%s&.+DI())odYo"_H!Ip\h2N8d#R6!&Ht)&9?cB2jD+MS!Y9R_[aM+NRHe*q5^(Ye
%IIi4uf:odahWc]j-\TNm-]J'<m1CEN(='+8GS!s`IuGR/^l9CD!Y=lnJYk#i;pAaR2q04g(Ztl=&I[SBBQleK@9Ah6aS%9Y/"k-7
%aJjFB(5=Dmi'EAlO^8V-@gX)?F??8Gn@&K']nX4nXC.e>=WP]8Uk*B3Y]P+nE`mkYb)TMVAC0Jq:IBHtT"Y*frfKQJi&KXXYV=D&
%ZGh!s7b"Vk5c_'_2EYc=IA$$NjEn?O@gu%H8eO]A2uu."'$ZW!PP"q]gbqFchseOBWDZ-KG?;FPg+H2?FXM++9(s4R(6TdH+l07p
%c$BHlLR:61`0\OQ9Se'd%NC0S"/S$nRn"J7'UFh,7"#%mn%GosXMot43q$Eu0jT:9`%cjeK")^D1lo3TKg^9]Lk]\=:AR6'68D:C
%7ECD93[SLGJ"S5?/(S5/<X`U-[0p!=%t_5--k0hs:Wilp^jr1`*?Aa<-:B7)cVi\o=_><G->@oOI`3t:57-rp[fqIW5-BD`1?r2F
%OdFdK;3?&#luJC3Pf<AmC$EdfZ<)ohS#Ts%dh)..5b0oDcs@%n!,CRQTMo+]s5K#MB?u:9(3uEtqm`N!?QaH"(io]11cf[P;3U%F
%+6^BDB`kC)9S.ok/_Y^bSIb@go["&a_sMQM31l'Yo1s$41X)*!KS4eMoR1+2ABgh3`[-3.(rc=prg'N7-RaEB`o#1V0cj.'/aa??
%rll[@XR3-s_\17!XbQc<AcCA3fU^u;.r@S![0rPm>K+in]_2!9<6bmi_EjB00),[>n/#hBTMJP^R$prjn/R/@\t_r2:YJgD0#*\8
%>7cFY-j5;[$XgLf=-0/%*+?(Bdc;gMk/1$(\0",.`+5]]QQkWISMKSPb;L,$O*WK0lL?F,1/,AJCC=b<6Fa`P6CEm$#e#slpj#m@
%dqtgMF`E'DCpO3Ji2stZB89BG';]K,;=c&fPN*-?-O%U@qu`/1!';3B'\SO]PFC^E'$D[X2[G+"a90+"?."\hQfW]O=r'M<)Q*SP
%50;p]JV'B51he3S?:kD/DND='%l@R8)HS>^1m9;Sj;L\65G:Xf+\NYMds7ZY!CRTEV%_=gO;Ts8`W(K9HMO^\d!gHab5:6icCNCI
%hL(DqW(Kbs1;b[r%P#+"=Ka[IFLHkuXG;O0UM29GDZ#/qmfI!4HT!B;d7Y,-Xom6GR)?D!/8-qeJ!;42rhs9mX!)Dpr@n&hNB4<,
%eRCT]`Om%&!VG#t?YQ=r4+Ep$4`2!LfqV0=PIV%cH,r.#W'#p7f@+K("6ru?(@QSQ'Pc"4EH3.R'Ujt,069J"A"Zh",If5<&*!Aq
%!p;(7I`>178<V-o`_5GD*bRluO[?gOQJo^5KDTjs4827-`KPRBl@IDs7u'iP1TuRH;(7Y"&1q=Wro-piV0/3a[knUd?H#l(/F<a`
%&uBAnU<,/s'lASaKI_isM;cR@/YI))E'XQ:B7SUWlF"&e6jOPg8F]6W\JBZ6./lJSjn\,rK[/X+[8;h@c]26S#HfH?U2Xs,5Z/Y^
%(5f"(/gL+g+gGp#nGXuj7ZKrc/LmDNfOst[0XD,3?nGWf*4&b/s6B8oW+EV+N:2P_.9o)m^LH!gEMDtgA55"Bki$WD$c3ddO0Lk6
%;'rG\4\Su1Te<J'rRmmN]B=ht3=g/T[['Tt[<R2,R,YfZfUup!HZ*7d&cb]G(Z+F.N)#Z]0g'iB_GhhSfi*fDK0\/<L\.no"B'QJ
%n3BV2ImM>)D:Z%tMmg1<]8klajfKg:RSDW\"eGN-O"(o%)tMS7:T'p&C;Vo3Rd%j!!-r1DkdT&;:0npEqsq\AX2nkUq\+Z@VX_.0
%p[BjqYjQ"fAaDGK#;JIK&BR[0oju>?i:KGB$*G/g1KVC:6KAL&R8FLfnLV1j<!Ym-PYCP)'[md"SO0GF4:>mIG`t72pgW;V"scce
%k%."C"L&m9LKg8BB;%"J1M0)T$MZ*<Y"I^ooa3a^*aM&]C#[C.ZrUOD6R`d/cT:"CV...;jKqYmPS>7s*+2%?87Q(c!mZcG`PTTK
%63U+.O,+';FA)\1^DOS@AB-V79J;^P"/L=@\dEK.A+UpV+P%rU7e2Lk>;dU@e!1hYZ5],GEb/cm@$KSuQmg>dB-lel"Y>,"h1Pm^
%!Cph\`Mbam<QIT%AHE-r7-DYqW%lpHNpEs%jMd"mG!T.#1@/Slk//_rJ>?;m>q1aYJq`L(7XO[e:u^6uarp^Phe1O#L'D*QCDn1'
%^Ad?QG&aEg&elZ_92=l\6)Q>Ao1<<9Nm`2.7\kG.ZQn#$aa2D5ka-1@XoVKgGRIP.Lu:,)20XP7d0o29`Iag)D`uW3K[1s,EGjO/
%e,k3XkD-39<hSm!)^-I"0M2sV'JLU@:N#g,ashpnP2^75Q@QDto-ud+n7i5"#:YH/e3;m6Q?]?ZRl./Lji56]94J*[>iMbc/3*:M
%gki4A'j"S+Zq7ka%m0I1LX(?NNT!(n-"'uhLff6PWt/uacOdHq=O[GD.In1>W,ig<<2MA>'>9Wl$_(CE54F/;>4Nheo$DC&g6gfO
%m^#dTaS&X:3ils(ih+4,[S<-2BPJiUJu:&Tl=8AgRXS!!0g#i<*2QHnqG=sdKU.rh-U(.@0m,2`\gMTt/YD>rf3VDP@Jr36G6Wj>
%7eLL"!\73,CBYb7C'=+n_$"%/J>QL.(GtUb!/][RQ[NW)/o[U#NpPK,Cj[bL[Uc3V-p1HCRG1NNUg;MWJ"\icA+2`Eh\ST2"sp8J
%5aeSRZOQ?]&c4D0`Q[5iaG8q(,iJfK/pPfPoNl]%5cnD.N.\X;%dpZ3oRkDF#rsqTM!4Uf%YBO*MtSn9dT^]4O'2X3Qj:)BL4'WP
%1&QLR#9WVN*q7ieH[R@'fT2mV;cf(?`]R1m?aS/64t*bgS8[:,BAn<,7`9H.Oe>gbnjdAPUTDg*$qo_=i0<D;-o`C7L4D:48=:<i
%=r&#/8Qb"-Q)(I;8s&TGdbhF8A#,@,l%h#8c8bN;4qu"DEn91&K'%'%0NeOOaQCd9Y1X//0t`6G&]erY,o"5ocs%ThVpPq`enS:_
%1^Zus=UsuL=MPEKU]EOaHd4%_`(0t>=Ira!!Bj,8gCM2B\<XLq^"S1cp<DSt0A_$PEVW(c(C'tMp00**OUiKl72SR3ZXR>ANhnF@
%^qf;A5D\W6ltAh8V3Re>2e.5EAY?>f:iPYI/Jqu0EB]#!8s5Hk/jRCTm0FF1bJ@;BQsc=1NbgBY%,&c7pj)h;,e"c-#bTc[I)m_d
%bBG)3X*F1f_4u4)HNbpBmTT9(6GQc5T0L"9Et:SbPTpuSOM8?DjR'5K:8+U@S2piJ)tIt+(\0;hAhDJ^FS8312K[*HE'q!/B++q@
%_Me2k<50L>35>1>B=m87g$'dJ,jn0C!,UR*ZLS]/R'*"mEsbLN:+t#9Yh4^IDVDmbb47q(Kq=9Y5U(^$I'5LAd4%i0$cLiZP'PJ,
%",Ko5g,C42)]*d+V=7Z&J&,Z(PRpO,j3"9c:gTT,8f$FmA%pn9"21X,TkVHBdBgmj/sk;@Y#AP87V9&a`0)]tfG4IqWAE:7cCBKc
%a#%VHh+@aT;94\F+!Vd]h&\r7jh`=4?5LgUg.&64!*A@P^->B8I5SbVhVC;OSG*_McmFET_.:h:*U,VMX5I#YAlehalFe1b/^>P!
%aok?KB9@<D'$cl\Kc,k'O/\P8k6`BRb!Z_1,_r>JPWaCc-p]r_cg5"E(,G(&f4bts-ht'q1S8lk>m;B3)jZWQ":JTUKJk(h:Ni9]
%/d9UnoGEUi20=@@6,*FL_,tD#An.%pp;p'jPa%3hDarUe3m.@WJEEMY9E_Ji4G-lsNCX3b`C[_WP2MW`:?IfElQK0#ED5oR7=-h)
%]''@=h-4e^R>f6;5%@m!fr9PSD7@#lZtgX>5IU(#hTJ:V'sm'P<%j,i/tU/##t%,O6:k`"b20VgD)m=>/63o'2Hnc_SpQ-O$>pc>
%d6\(E(">:niScau(lhI/LuED!Gk\IP547=Yk0.7<,E;6+#W;nfHqShW?A-H7<GY.5=e"D@hob_iX31un"lbPnYcjkY&#X,U90Z9U
%].8e.-qF$^"h$V?:PACm6<`T:V>5*s4jH3@\hj9W1JV[MZ&=lRSP^3k=;Vk^7;QP19_6nhj&Yr'X[U#=*IV+q5;MH):dsHNWLal9
%?Sq1^rY!AtHd+U$'oQs<K9M/YY_-t#kEBOpP5!*jZ@&@9!c::YDS`pjLgm*DHFis'\CN.@"FX"Q/AWsW\b#m<\K8`hNG4&TW\bcY
%2\Z["e]$o343dS4Kt\p\>#ZPI1>O`UQ+qtVE/8%ro[h3pFG];]@0XHSQ(.[_N@fNTkF?A8L1BBVVqT,2W*Lb0JV4BC$5S?r!L^LN
%^tG1u*j5=[4%!R=<5Ee[5YQ-U!IYAJ?grt0>phf@k7alB'ndWW/.*?t#7k[uh@-e^$:s[r,>1raZB\_F6U`:9Tf=,T)oqG_+XF/[
%N*ZCE"]_'!TO+JGC!Hng6AucA<FP%.!67nDOMX[fRe0a&8%uK*_5((ZLF7em8*SMqfZZrhqXQ9!%ucXTaUtOeRPW5/p/=a*fFE/3
%5__n!<7*RlEo26@@H@^$n)>d8^onm+%X)W"n"gR55]"<]Ws3+m`Es2Z`nuGl(9RiK_,lr-m+Zu[4*iQ34K6/#9[OQCbsrJPTo9<!
%iUFub7>Wh!,c7.]FQmp$X%KJrp\$R"qZ%HWOWd;&MiT9tTk&h6fO8sFPa@LmY4M.@]EbsGAm@FHOWI<8Mk\Z+SV?fM[R5g2Z9='6
%[7c:JXU52%UU<gT)_,mE[(%u:Iuq@<'o6#]TNI*dW3X2`&d!*bYRE4T`3ee-PreWP_42IeG7S^7NEkLGc:5ajam?=.fG-%XDSSi(
%1HAJAk)4S\LT)Eg$QKNL"'QB:?-&-9\[@W!BX6B_@es=DCsK'Y1iX2Cg*4R&j0A-KGSRfBQu=O2(JjAjW2*?rd^[0>e['FX!Af[r
%VXTh$9Qp'*>Vg`OJEcH[0o6i*GP*a#9_d<<4PH*.I))>Rh_u4i5rk>WCgk$=S'C^^]O5[)#ff=qbE%-UL(;6KC6\.J?$Z=R<I6El
%SWuJ5**Fmp9.$rJ]KZ_YjBNd,/8-s&Xg`Tm\4kYuhA(Zr[ALq4!XQda3*P+%i!I9;_GlQNQq:K363`Nq.=;hu]YFg%$;Ks9]iJIL
%q/P)<O36/).Ea]fEJ;fXi;BI'Gek"#WLS@G_D$FD'T,boBHt&3q)2H+heV-HpW88:`-JXc$`6Ka)nR[.M2Y_+!$j=gqK?sd1;4tP
%ah^YSciYP1o.RgMM>;+m<25lEf<W$7aJZlMRl9CLc(P2BX#6`F4Isfso$pP8:VZHRn:3kV*$O;.b[>7Pl^&+rK1=NA):B2l"=0)h
%)Y!r+?0\B-G]g_M*Am7[P4[(KBP4,t6@5),QF8*@"9>-HU28#<9\`9d<\EP7fcPq/M)+SOb?+EY)S/tQBBQaP.E@DtJJ"Tn7&oUO
%L[T7W<;U*/lmi@kH4G(Rf0EupJN8R"nLNi(#JhGl_?E@\nG2ED,;+8k5drB=5<I@dnCShrk1O=rd?m,lb^WYd2J=snIhl;(hY0&H
%1)of8gQ+,s/=U6L?TGNc@!F)he3q'DkW-2Q-pbK*'2;5A"GoZ)[eU4kXfE.I^=NRFj[_$BbdC+;4f1CaTX?!C*$A]<11XdKE$9q&
%ZuYm,:Q@tgM5D]QkD0P4kQr,\I'dBX?rUa$<I_%OWYS.%8Ze^6l5/7a>B@8$eM"Kp,/,/4Qgk'9iMPs'^L$Nh/_/ATHh^b9HWk70
%'Qo=SO-E*n]@.b.T^4K]o3(fWU9>!.7sMo],qUeIZ`!.ASu,B,Tps!WPR4HMY@mAX'PBQZfqI)`\,Lh3DM.RV@LG5D3.m)4=j59g
%mO$q!jSr\bCnp&O9P3fmWpLGK'.NcS=g86_'FfmRa[cCoCCVh)b"J<d:DFV(=;L7JPRq^h<ZuK):)!upaX"ZPq;dc\/]8;W<6rbs
%Y;M8.abdMUhIliU+gHX68u-&D/,`$`irbRAP-PJ?"qetZG+ladR)s6>]g*&]PtPg>UC[[Ao(Jri<Kl^i,4DC%etsPN9PmJ;M,(=d
%pb`!+OMMqu2EX#sADi>E/4ILj`W1Bsdt7m^an[o05X*,M3aeW6[)p%H2-/].(eP5a(OQBH_`>KBW3frN:h:s82^G4pU#;M-#+q?N
%?7kBSs3T@nf0)+jWh#*2\H;J$)$f,6iR'"<X@(Z(>ktYhl)WctSk*A0l&#ZuaaiWgV*(6o*b1p).YZ!j\b&7VT9pnIQ7Noi$UJhh
%$_Z9%R>P*9DiEi[,N&UOMh[iIPR'?NeMoG/0SSS@Y3U)k6tm\90cdM-8+)+FiZcXgX:Et7Vlpagq76Dma)msmAaXEhpLr]C\I)J.
%Pd1l4I7A^O?Vc\sI*Y`27lUgFg(8HB"P?>L*3V2f3#PVNI-!Tu:<@$k;r&/N/"T_VJNg(DY=2c[^LB[eMU\b5$cmdkh@u@\kT7W*
%eP_"b,u9Rm\F@'!aG$/A<ue[5&'ZO.<G3(l5k$29Kc"%s=Ts%c24YJ5[r?T`+tGHh\,+uTKT1>t25;1h8!K9M'6Xd$l;Y&2#&u]]
%$[e`/IupseT,h$&Gr13YZ4(nA=eEg3ZW7+SW_[`YdL,2U-&m,$k2-T(6=!Np*8TXRNum#.@H6D0nloMMlYJA,c_[FJKG_)6l[YLW
%!HGJ3.Z@-n5g=]r'OmX^6HZJEO&N+d:hGk[[V!Te_mBK8+ZQ5kUG_[!jn4"oP`t!SbJ[D\qQdgi+FQp)"JqfG"Cq.<_%>M,CKV%n
%ogEf[B*)^B)'Z3k'lp2S>N.i1+JS>c^5O!4b`?_bnh<fN(KCiU')C/gCW7Y@GK(Q8$lgd+f/bb7XZQ.6PuQuliBO#!S'mtSN"F\Z
%:*3:5E34__TZ85_&BR%)M1lmj&4E0$A71]Zda<bnYfqhKdA'4@(Df8$12YlLmeqG3j]>7+XONt($E"O)Oe+^C5hsq-gY<B-b`IMR
%4`:Q:[u&il%mHE@b0?_V-%eUG_BorA0j-i1>':_bKub7r8$GT+Y5tRDeOH(PXEpV+GM_bLoZV-_>TLESe/s!P"%.rJ+H1)RD:uit
%,'Xr26;k\b8%k5j-B?GVIEhGE2\DX,0u-%h7S0M$].C(-e96ZDE$MYD,K,7."#0.npUsHP(6;,dRk[mDc5sbUSAfY4GH\oh&9QQE
%$\!9e_rd!P<:NFs`/sHQnFTB>g6lMEa#\PWP':>e#=/R[\?\rT.(d6M'0h)0\Ad<U:bK(Pi>JgfW.MPQrs1C6^enJpQ8)!o:3nHs
%4B7"2G@<.V'7:LK0-f7::M75`ZD=NfQsD]TYG/g,Sub[5otI#Y_R,S.??'f;"pO=[O*4!'T#sV#P'>N#1fB8L7\NXYC-R`a[s*<7
%qWDBqe*2NG_XI_HJ>dTu.e>eP*`_8n^3gnJcEf(k>N)r!E:Z(Ar:MX1gEMF(%OP'5P'8nP_PZ'DYn>DeX<GJEZ9'?='Ge7,coDKQ
%4PVY[bt,PUiGNQ!bl6rD9(HX'O'"JC`HBt-NM62H"qF^T=qh]GdENUA_mho>o@G&220<fXbN4QWOdH"*,NL$-A\aknR2p[-Z5FVQ
%fp@=mBFVmm3#"Z_TIOgHrRmp_e4Y?#Xost&7PW2S9Op&+IukUKHdo9mfoFs<eVc\ggQ7[2=dn^-U")eJ9dC1e3NI1md8ukMKN@>)
%LhA^l&1VYQ&PO"Z%Q/8I[n"ao:=W#5D;q<+WEX9mRF#^>r[\b"jEHJB2C'43hV1g?"[me.KKrrISB68f'_-cNQ5G;3(imSG(oUDu
%LM+>1:"\D`O$a@3LG=NrU1VbsdN[@:)I4kjkN;q8A;AiB3&EY;`+EBTLr+IYlKZ474:._mP[m_tqBN`[hO5<`;MNuSF$p=rFf9F7
%gUd)C;2W(b!Wo+1GCQj.>nfm3-b24F7W00oAWnTYF%U>uPS(7_o^@$Mh=A`:1Q/<8odJUqj@$=#UrI5tO>h*)1qp(>Y3UU!21s2C
%=9K`NOV@V#<'8_E0H$YZ#_V9nc`e9"YnaFsS]58o+Q)(c8%fj@?8`tV^t`E]e:XkZ+*F#_PBC-LFbn\b2.T"R`V[!'emP$.Wae?B
%P5!g^Z63]4HLOgH)it_G0Gnh^O:p`5L>!NT^g1#XTjrm#n<+SaC_H#4E:_)_6,.1^6buB?>'f88!KnQ7VF8[%4Q-T+ff[F@*ca,:
%Y)qgt*MpUn@m+%_gs?_:?4r+Cr.T>nb#AY_N(@#%^JJ%ab2GehYi1L[YB6!l:l'.J<5$8si\mXeG*E:N>4MG0Un;L8pl'+''dctS
%2!G+=ItC2*/KPY8#I@i_'W5&>,7E1fD&QSGm!560lCi;("]L[EM'8X!6Zs#5W0u'IooK@8M,L.f$irb58<JL=hH=4QLl:&K?IrGd
%S;H3/[mK5)-F4F'iHZ1>64LsmaDnGqNu<*_qp^Na%_E(<`Jc4<^^c+tL9*\T5fEH7aTQ$91,@I/H(.jh3lLq%\;anTj]p?+41k28
%K=K,PNa0knHWFuSPLWd,df?Kq^P]lhJeu+8$q-[chSRmJ%S(iHOqt?'\A2cZPVem/f#(9f34LiW2dGM<s-QA&JWi>b4;8*W9N67)
%0l6:&qUDqp4@Ve$Gk&0_"lgbN>_/l'`?eu]UkWf,rH&DbC$)/NcmF/AA$@o\YRn49bGOneNAfPM!GX\s'aHo"oW;RiRJNA]2&MRI
%1fuX:P^bq/jl,uXqQrTLc]3StHKi:eXSK8!"?Y=qkt38gA`$r[.oqP$%q3P5L`L4)Kd7#-?Hd"RRPU!3OL-c#aG6lrHMF9f0jPlM
%Vt8O:mNX;(%7HkPf>m7chL1(-=R-/];8seud.Z93H=[FhTsW[$;dH0^D7JtGK*4['j^"i19'Adm'b%.5+F88hSJJ(RbCV9DA6,$o
%?N/]O<>[:Z=A6.q"*uDXU`YaSQp667q0Wl7O[l5USZSBXXZjDjou$Et6`93#`CRj=,5"Nd-u*Pf,X@uUFL@:;QG>[;V?!9X,7@;U
%8.]@1W+;?eWfj25jTcqZUg4<MHqE*f$Jq$[9$!-XCq(YeoGeX%ArI7GV+b%aOq``c\H6>54+2n.=9jYgJppm8DumnMa1iD_<p\5u
%VLJ!>A,h'#c78`D6!kpaGbW0gfTcc=]Zih>R'o)X*19B3Mr^+?kYN\uL[VO.A#>F#<5ubRn0@Fo_-B6\iW/0r3OgtEL7MJGL4V5b
%U!7h/=AtVB'I<X0\I9o?X_ZKa49H`6VcVt'eYB&95(5?630^;Q-57lDeVTp]C=XqDbi)3Hmo=s;fu"4]@hpPY`XV7IZ_,5lFhOS=
%=8k)+%j+R,L,m7M)p55UmSgM+[NO.DC:JD!G_]AWY7@Lo:C\883Bu8`Mfk=C#KeC^]L:rf-h9lib;[I#!nj;8as3g)'>:1RmnnH^
%?V+apL$&RP(nt6I\dF$E2$S&[$m-a0kE^T.f?\,^l-.g8S!-6&dH#[@(l:pl@T;MoG*2BZdHM:gC[uDXJ!GEn6R6#:KNG"Hqo9iP
%@2V+[4\I!Th9pJZDX]5X!@6L9,W71CH_M'P`/=ua_+^a;OjYd!)"AG2WB?0fIlBFSX]&kq$^<hCo5#c7>m[W3RK0'#A!)?F`R.u`
%hUbOn-)M^sQZ_M_s6r.PoW',-0c(?2_j=(/1^Y@@df^/GISGP,KRI7Ba#2:u_4k=\`f;KI*96f&O%9j)[&/+ZX>IF@p85p?@W*W1
%],p[Mdao@3B+c=gJ_J>^Ri2pIC"<6aCVW)^IYD!6B>)&lrIsA_g;#8$B+$AZFW36'qX'7`Z-C'f+>5&VQQ7["Y#1'OkY-)*%O/&q
%7q(VC&eGZ^.CK5VX-Q(;Ejq!(4cEPW:_>18`&=D=nHZtZXiO<lcRhuG2JhI4&$rVk0m+127,tAZ$+t:`e&m`5%W'?`4\H]:'TFr=
%s.!hr1`fV#B5(<-&M9_Z)#H0upK!s,$CKl89;N)u85PLnfO1iNG>^#0S0jNuDoD0d^ecPunXPE"eAE6HSWBl-c$b]ka?4nX$GpfI
%-t7kH=9B"V:e.6B:op**SpU7PEQ'&GTFi#ACC(L2Gu0,U1e<^Clt!+`c&>$Kc6"D'[c[)qWpq%3n41CZ8=/4W7F23n:MXC)`H_Jo
%W+VOUXoJ2pPc1G,n7&U5j/X[JX[7o<B)qMoAc)J2SW;8JnXj6DJ>\S8*I/`*&siTn7J7?Z+^RcVU1h,/Y_sfk7t:'<EK6ehb'S@"
%oW&QY!1#,&61Xo\:1?.IY&l,bGcHr<!uV\<j5p/qYWKuFADYMcs3a;9`F=<b3(IY\@BGl>$:([H1uU9X`6lddr<VDaPE(86fq^NG
%MQV6Dh,:?/HgJH?nC+??C#LJrXfH9(*pp2<s3(#C1J+&kZLQsa=2`Y_Ye?0u_lt!ZAGS-VqA%Ih&\tqVcj2$Kl!bl/0s%X8V*4"\
%oJ;<j6SYMK]?NH="j#FipSEPJP_#].3"AN8`W_MPG\$0X8qi!L<um&.Nhj18fB/PMH0ag=EW-u[7e`aR1EE'M<>:<9iI1CBB3.@W
%l"fdepTkcLau5bEpdode#"TQ+NLrcjrN84EJohW7L7g9'>MiP$JVijP54F"&)M]!a@F<<PW>gTf"@?NuBgWf_1j3k>'(M=.eo`uc
%!CZ4YmAnC=#.O+G;;ik.$EBr"XIrbQTAd]j7/7`5%bS@N@hMg-6`S"Ja&s?!;.`Ijei4@6hPkgpKElGOr@fTAdO-M'k^l6[*&c.M
%X@j&H*]@X:8<E%-dZ4C0;Ts_kb5)^uno@6mjXe@#iOK93Y`.so/#dcO>kJtCKsOeLZe=nPe6<1P%0Gd=7.,Upk#.e>*R2_f;j7W@
%jrnLT'ZNK0aH;g:6,@-n+Lu7c0Q]dmiYLU$h46eG.^tb!,U?4DfW$gI7p#TM%p(EY[("ok_qe'Jrnp>C<7T:s*F5ENLN`7Za^(*T
%qFi@p+Wf>L?(]F@LRBn'O5^ohotGOu&%'Fd[M="S`jsWH/S=1s_"kmMF&C_>Iim8hMqg)=JaUjV#7<[IP>>WjE^IYc:YdAQ3?)W1
%K\3:7Bqk1niMCLJ]snA;]mP!s-I6MIiJbpt.BD<U?FoI5Ja8)lF0iBcrdGb1@!"(9idA'Ji]hO[SaRLV"EH0YlX%[+Pp\O]_^]FN
%o?U&'_$-IGhd--k$5_$^3g%,("jWeqbF0Grn**"sRRs"7>Q-%M^u.u#^+cM+9MrL;n:L?e]V4je<cR`KXa9^pgp5CDDa-A'3noQs
%csH0/<s*)TWuH!Ur@g8T0QqAf*,1GA,,b@C'4R$=8gL7A,5)g+r85-SfE5^[\NVQ8D8SF!QO^&l1hW:?Ti#t9]#AH57]U?#hmToB
%lPBh>j+pOXe*+Kf6T=W7Ku1ea6s'i^-CF6GeNQfajD/MU+KeE>@0:LZ9]Cch.Fl)+6d^-HPOJ-;(J=rpF7fut+l(lRkIR4NKtp&u
%KXnUk\i7%4!AX;,3=>3g-_HXa$uL3G_)R(mb`$$L5Du&*6st43UnEfEa:*q]TJ.s:S"Uq.s/$LAG7:OgE=U<dqN5W#XECPkd!(*j
%JTCsNI>G.aL7B6JY\;L=qA52F[#"2?rG_geD]oe(k#%+jip"_X4Qg:t>hGC2)i9ZPB5mR[MTf_F1uD"`?jCZ&Une:6?LVV7?@I&a
%>eJgTM@+a\g;!EW,@+?bVH>)e-N%=G:^<VpQerbV#!Q62c&Ju'JS)9b0h)TXL?+-HI[]ilZo1A]lOsH,:\.hr9CZisrBLs2'2^DB
%b?5mbM6QnpofKb;+)"$1m_eoJYJYJ<B;M/HJ/C;3;faa2D);/5ct/c0DkR+3@p(!C^Y*1dZ%$#P[5Ut*a,OKCp0fBY&C^E>Fqf7h
%jQ8C'">!lo5U\.:UcibiO8t=T$o@gC;*a;:s+Nf.L:.?J.61WcAX++D8/.sQE:fAm%Zgf/^^k9%@?fI]M\g2jlekG>h%L]!V+-D;
%C[tW!<-'0P]8PokP3MqMnKd*di-h7B[V5):3Zf-$^R)tbLpnqaU`;PO/^a`QT>V/*c!8Jlb;)T/&RM5=n<h.uLRec<Yojf&*83r\
%L"dp(U1jR,[uOBR:lu-2Npc@sA,c?sN&(.<T42a=QmkU<?!_2a\Y\4]A$Q389O9&]RG3a8V\+SPCnRl53LYbe8db6"bSd7:&:i)g
%.Ag[c*X53PqQ>N&%$cf#(kL+s^P`Fie>kj:anL4VpXs5YH*hgi0Emc;CF#F!kj;P"ro6ou8V@ThPF_PZTe7&QeItP-PNNBF#K7Lu
%ES:u2ZQj!t#=0jga*I&`/LW)sM16(MP&"MW%<`$\X_kHMKP+BPjq"qm7<.de]nb.Qs#4TDUf<l@I'uW*kD;Mt0I^6t!Uk,M'Enf!
%AKAibJPbH9`*`G$Up$idASk881MfFp41H+G2+p<D"@YOUXT@D6e[kRoeV@;_HY538&9K>^0=%9uT:q(7#A2X)``FLdcoH#F!_o3/
%nd/`WK*.rj[]LVm;uJ>+S'\7'cRq'=jLgAfkuTU$Zec#Ig"F16_l[uWgj=PD,2cih'iK@T`P^M.#!$*9FON1R>L7J;67IT;cO"TE
%GB%lZmi^UM'Wr:LD,=CMd=iXK<aun6Bqae&.Q)e_=6&:QWs>u0pTAfr5eNZmN>AstT-r?(ZpnXDM3QERMnUoIGbXV75VF/CmNKsN
%+#9`gU_lsK)ru<P;M-]]'_Q/8<ZJ(:rDB\ZQP.WSH1A5kLKW2TB4([g1?dQ-*k%h!`3dW4EY$Q."(sj;'E0<caqEGd6j=9bY\8Bu
%Ma5j`G8N&?_2:9=!+jknkgC"-6Jq:o*8ujK[F=?4\g?s!_i5SN0F-\WgRg,n9']R\F^d_:".HiHGAF'tYD6`DNHKU+JWX^M/$3Ut
%bg$p7a8rD[ja"%$*7VTe6U<M8M:-X1a4rC20DP<ogSrc/8>inORb5`\h-#"gY@ou!iS-#*ekOgD8i;b"<$a^XDoqDPA8>^*di5Vi
%*o!jQB)(2YN9q`"JB9.Y0W">9V<=_Of=,1'I.1'GjJ(8\8)AQNIu#<AF,ki4^4t\1^HW7@rN(ZJR;m.TbD/g`&""hRG]?+M$DsG[
%o(9bg4c'!(R,2H&8`]D?`1W?-M$n@[H@!CS:[]SZQ=W0.%nr&1G-7HTh3g^Gp\Z7;!KjdcYFM7?'rsiVi@V>>VJR8!qHcPC]UZF<
%NV1+!q=+Wd.7NWQ_8rMhq)6TJ3.\e=I(;8H9'"O@*7*jB'2J10SfTo5EAs8i*%-B7GuGs"GH/g@8;nn])f%65l%YD)mPc,bF+?]n
%Au="l#E6l8bY'$E"?5*\iAcOc>4PX'&l9oZLXh2&[@hJ&?:2c$91DsjH`Jji>:](cF8s*/a2c0g6K9^LAaoXqO+I8Bn)bTR8V+*n
%+&-eg%!qY28JV!'QQa2@_1G%LY7bkA-c/9W=o-n:5jlf$>kp'e*g?#0:1;/oj90<aDRdp/#rE'X,)'Gs"=oU4]6MmU\!)d@Z$7>f
%[b5)R*#`-Zq8&/3JmV"5&#?I(J`^o[)G\"PY%kg+Yaj&Yd\6Fq,?idiig>#BFQkkRV1?U(1e8lT@^$/dkk<%'a.1apj)D49?OeUp
%>i*'r*;Q1]`>CSl-JG0.Lm'[`&q,!T@pUPll3E1TIcP<#?#<80X>D<rHj2:k$t4N31<0SM\f8S1\oeO$f_t\>N8`o(U%a?V!5<Wh
%=]Wg0jqks@MK>oVE0da,(Z]F(h79edH2IgLL5_PCa-jp*$\A1R]Fg.7s%\*nS>f)JP_DtmR?J_&MN<O7)*]m+^m_9F/J,ot><H)2
%Bn$6PM!HT\P47#pGgSnFBC`:M132o5:u%'_P)YsA!+F[@oIHiA7X3<+-L-RsH9_<WeB!'TQZF3s]*B$jS0R7pj1'D/8N84d3kTf\
%:,<f86fu(&@,kf3;]8piAauP]EDdOF8p-LGbheH4Xfk2+A%!7Rb[6O6,<f7>/Tj-Tj<g?G/#lcCZhGq--ps,f:MXr<gY)1b?OfZ*
%p^ldPgS8[[berA@kF\[6.3HkP_tCY!&*/*$]X\!2Omm@0iMdEW3dO=H"q1G=er7.LdZN=7UJOknQfJNPNMeRP/l^5I`BR,+'Ru[e
%:2A2\6]@s5G1Zm@cT7@$,n7GZ?k4L@39Ln'*+Nd%RCYK'g]:jG`!Hrq_Nh>TVAr*2Y\sp$D+YUa^h92O?>boa&WD"7WFKDdUauoj
%#u9jJcW%EW^V$S&MOI'@)]T>nCiqR)H$f$7c09%)1IpcqU8VgL&gNVK%4Sc2'utlMocm\]S8XBBc(((55++.&`619eZ!j_K3e"un
%lFBM<^o,f2(d[%$a44['6;r[FA(Z=9^&GMp)Dl/qk!Y.\W#H[24mHa2fP?X?DYOoi6Q_7&X!9V)j7*_:7+(dScu:sLZt5mWo"R2b
%pp/NrmSA48CG$Mi7e?JFY*ahd45LQ$U1m/c#Jol3J!cN<>bcC#j&b":q1?D6eC[:>[c&ct$g'_hVP%jl;.\YbK&dAg2\3,uC)TA@
%m2u?26Ep*@)%=o9^13ablpoi=W*5=KcQ\g7!9ekOY(5d;".>d\c[b8G"W&P!I)6%;2(6_S(HB,/.`B4mg&lU$83_O<:jp_0"nKg(
%IH*@;2pFlca,:)S`4AG+67faeFSICtgNR*:,%g-)AkNlBq!taAHT,OYMufn4p^D?_X?WUlPN/9]dd-`..g3kJ:JMQ]UP9QXW-Eq>
%1D'J/@Y&$PdQ"CU+WFa81,t[=S\MaE-20\YL0/I)&V+Hn3a?q,_!cNsi#6WiV5'h;Klqg;bLaETS=6t<p\/c'_\:<T#c-Mr#O8ra
%0qDmqO+3N:qq?(^Z18SacCO`BLU6,-^C/N:oDRl,N46W^-k"KsMBhBbe"Ke,;<5T!],k=`Y<e3nL[;I1g;id4lj[5b>od*;^@hFH
%<YrJq:1@fK"+:p4Nsrh^#M#)\Jc!lG`Jf#?O!**QLV2qTDF>e$AW%^g%i!UOCus4UCH9"%CN"mT:)"$tA1,B[kHe%-B!LeI.'B8b
%G/00S4eGpGF3X"+QT5>uo*RdaMIV`mdhfkg#/^m_hX^gX^bj9^UsAnO7[t_udW&^5d"i]l@P?Vb%Mq0U$6i2@5*_1VKD);mMIu1k
%!DrpdBSbWCQ#EiEapRP,=Tur1R`*H**B,lLFKE[q*KG=F7QjYpF_3GFI"['a`(=g?7ERRe`m,q#`QW(gcjQ\M@ZF:uit6I2hIHS3
%)l8T?"OeqPDY9/Yjl[H8-,%G"-.5R.=NsrL%n)qrM";teo#6eiSWBE:#b0O?>aR%nitLj9P.PWY_X)K2BB=^/l"K5QbLr@bi*3r\
%9lVEuAK2VpX$T,^;nP1WljH*0e@PJ4d="&C-TSSa!kCnR__XM*\ld@s.^IEk/PcsK!g80lp+DhC(<S$Y)q_AgE$?_0&K9>]gI]sE
%i%:3=MA$Rn+a=YJ_u2DFRVBJ(>LEDe_f#[/#/"AM%"KF[9VFc<V.plATWj$fCBHt-F1:'.D=0?K[&rl_jE(tm>_>^q\q`4F*'q`K
%'HdnUnSol<.Uf9G*d:/B]%D9a7@$3-G::dj,6IVT&TOXHOo"C7O_Bd=]^L8"5e]IG]R1P>O6M?D<I$R$1``/nL`oXn.?d.7og;5[
%#2dW/2gqTFjgd\COp&CbMQl+KFPA:RO&EC!l<0W4poNpH.k*QRY4lkN"?akp881(e\K=[RqG%8.Y!]Uf0r[d@5'2k_d,?ja/o]P^
%-5i"u=pR^1SKBXuJt"W44oQ&K*rk-p'OHt<)$R@6jB$=l*[_mu/DiP#[fsfRRe8jr30I)BjZ0RXK4:1c6CD@9Mm[]TbDPUs::<M%
%m0\:i.OBIWrh,$,q>Pg"EueCVS^&SBdaakMq2=Nh343,7^Qu:p[uba'&-AUo2fV3kdiuSe`U*q#'gB4/%>`OELHB<:]QDA.BjA$J
%/pZbqXjDN^.1bPHALg>m9XD^J2;gt@D-g$s4E(f1]73j2G^9UBs45q87&tD:#42tq,!S.[\Hkm+AtpVQ>[$F_$':<[+maFHH"d)G
%PYChg!f8sF)VkV0F(MGYW8;dKXj01<)BNeNqVCMg/F7RF5OE8p(,;sroU;l'#V?gp)V:&nk4]AR'**X^8,FZqGDjpk)935W5H7(a
%4i+O+6'XO^U7\#CH-b#]?oL-H-&nL0BjkY-VODG1$Y=cbDjR",W8^T#Z-nJ0Z2@,q.$c%A,L">j$`Aeq5cKU7bcRJ=pDTj\8!Io!
%4q:(Z2<I$5-UEeIQQ$j:2VEFF=[VV-Z3.dEd#g/M>ji+-^QLSejA8a.q!=)?O*IM]*.L#WX%\lA]t)J!.4T\^du?lV.%kLIU%f`F
%!b.T5<m.7c+3Nhl,Nkk;!Mm'mm`)+#@NXED.r%K06b8?@)a8M/O[6L0XdYKo&>Fih;%-S"7=i+Q[`pIM"fiUI$k!Co'O4,q;B-S)
%HWPqLaQDt">FYNp45-]EdpUr?;'_lg0)TK5/]tOL8$+Hs1K>a&!T+usbdP+T):6A6$NK#p;#c\8$f6p5_a_6^h_ul_+-$Q&W-cm!
%1$0<;.7+6RWP(A]kT@TbP>-da`cB6BEqDo,>.Eu$8Hf.^UJ2KBa\^WW%XH95jiYM\j_)J5U,A9%jBhPR]:W+A3[$.<!,3\UJJs_n
%2gup;QGL`$41_OB)[PW\I<$E+)<j7\=,@cSl\I94j98];mKg5r1ZnRCDkj7b\Al:.0L4F$RG[0(M'=fW\K?hJ!3(#H=J8JqH^RRN
%Q5pqpGc\U95n>Qo"f@*so_L$("<9.sFU8;)Ld9#VKk;Eh-9@MVHO/R]*:U3%nqTAce4as=?*VW1kM*??<RW(K6(")>m(UmX0[_sn
%Efi]gNXW&J/20m'e=F>#p(C%-18(2O\&5DHL$o]j^I(*AAC:sDS\rh2frf3f=b/pPb=K`=<a]ItfF3GR?*7-eh`GM,G@!L#ke*;X
%!+QpjqNC=nA"pAcJc^u+au.Q:j@T#R*@,37kkBgPYOhKg?J,pRB*0E".uCcMb\X*rbR$Fjgm"2a]fLb.'9aZQKA!"`5SiTVIMN>m
%V4bN?aljuV#iJhO9O-<MjKL=dVr0..Dp2tOS3$6Y7hq8<"Jhu$5hpn[+gW@R(l63UJ:YN:7:*5S50LXM%Hb-]HDLe8Fss?+J+]ni
%9Xtf'VV%a4j?o)o-;C$=3JZf]HD3]lR-6tko>(`Qkra&.=.BIM<-FQ$SBF\<7h_jL]J<HE#pD<cKIjnua)PD1,DLSad%LH%^NrrE
%$2He-4#aD-k'2S&`YYHC\CuC6$ib,!8#`cTB"cP5bokT=iQ[L>eAOd<=DN2+$L\9^7G<S!U^o#Yn%ruq0+N933%OQ$Sat<Ml'XXB
%oK:DYG$k?e4HS1)L#]$TG2b'u4$r8Kb8k<9PXMPIE.W:rD2UmVHZq^@*Wp%#3m1sA]uMd5$;h!k^j=EpFTeMp$T2:ae_Vl,1n]T!
%ksu3mV(ZM+N;I/r#eY/nm[*M4%`UeCGCd/C.&q1CRY%2hYO3(>!)&E#G]2"W(s'*V57b'T-OF&gKLPA>"mCYE%ab9]8orDXl;cMj
%#:"+@5p5#b,Uk]nK]%!aE:/1mWBa0'\q^e>NF/h1U="<gPLYP=Y'7-1#\kZsUt%Hg",3]f^.&7BgfJeTCRo',]a]3FGaReaWlE\8
%B_Ii1o<%%Bd#9k6-Pe!$n)*%d;=74f;C0$`@`%X2[>#+Q*TT.N!M32f*E8(&]*u7.H:gN.du5b/4J0e,P_7Kn@s7hYK5=fQJ\XS;
%QUn=fA-R[)JJpd$Z[)>_cR_Y,qk&uPj+3BQ(ZnlQE5Xh*>l5.SD*s^3_-?o8]Z.;^LG0C]E:'q7CaeKj]^^Ml5pmMqbEnF3OZMNI
%4H+s5(C-1]8:2E(=Tk=?:9#\q.H[TBTKpbM,E]iG8tbgoP9Gh,pjh3?LG_104Cerg;*("q1-0MO);osb`;h-FIgqK%`=BZf#G_,T
%*Mu?@BLq-A_jj5'Y6L#&HE(bn%g^(0Ns1/m=d]@[r05EQAKqFX:QQ_.:C=W9pR&D%*";:Xf<_m0hAr?;dMU2r6iStdG2SN1#`GIS
%P"2FM`VE/@L>p`Xo]e6R',-VcA5QhN82dJjabV!5]?2dDdL-g^00MuPe%4m8+TjX$!/H-9UK<s@FC,@go0UJHq@-6,Vs.i=V5JsX
%(4%0Nb4k34Mu%UTi`Gi#b8Su7nsLRZ$"R'IIX9`I;f&=]W/Jhg`#3Ab%kNGTgb[tahT7Gs8:Wu$CnJeOLS>m<(=OJ,Jt5Yc<m>hN
%bCt*^%T-`N?5af2G'O&MfS=/TccQNE?CXPPoqAje/l='FBBPA:*+$`qftK+OR**-?(GSsX-EHD^Uc<9;Tm7#qi'a"!X4pSU>Id3c
%P3j7.GH_d/Or]6UMs)lp8F]lh:iLKG!sZ4^8YI<N)oq.BD^bBt>kS@bT>`WHP0%s01V$aQ3ZLKl>W4KiKD<E\aIr0Aoc.oV.Vc@+
%nh@$G=2eS/?*\IFG@UpLfauaTe7YOBNY9Ledu[-jV4FpK%r<D0\7(\lW]q\fAl8:,FE;\._`<rlcp:7_1CN1KLmQGEp.P:I0>T^-
%0d#1-[eXu.d5b;_BZ$G32M1WO#M0lb&_Lm/4T+FBbchoWJj^81NphWtA]G;8B":\`%t:%cBTp6[_#k#f9(Cj,d5d(s2)CZDdJOAO
%,*+0;/kE?_8d;2.s5#W!/3#MN=+86>E:BP6mL4cU10qWiI-C$s8TuB;&:)Q,hu?2iXA"0a`gu<9eX<X]Lu`d6&J.'_kG4S\JqE\F
%-)Kp(=PsuNMM5'p@\->t4[jAX=&;PH:b_Nnon9bC6C3:g"q4Ya63'XL,S(A/]UK4e+Z6PM7nD*SBq/%\O!bWJQ`rDfdW$:k?NBYd
%]U:*mC$\tH%fm&B@p\"=4t"rkIQX\`Al0eQ#]p$B60t_;[QMWFT80g=)5DkC2La2aL7bbVi$rnRpA#(>:V;L2n#1uPhsoIQh#.:6
%&5Z@7D;_/f,?/\ZBJ3MY1iI"aG)BlZgFrZUT>OtU[S[&gYc\Mt_4p3,jsBtMj16ReUF6>/+5ue;Ae5BppX`i%1%cXN8;ma%Jg<tE
%>KRALLAk2EO[+^l2uMsH=GJ!0qe>sM@<>!N*PFY,!(fZ]N:m'S.-l2!AF0I%adZKH[O3(fHO^?`mSBhHksKeZZ:;6:Hi5B/o+(>f
%Eo0&hN6gMn]u8t+ek=MZ3[oU4n@")uC(T,iM:=hX->kRdM54qOQhIA`WaD='V($NP&:\(A2(A?ca3%o2Do]g)g"A?Mn/g\n,t*eE
%1\5W^0gG!O@jXaV'm9"VKdid2H\MViT<kb3=e<Ksa!r[6B<]H2'I7[E?J_in:PrCYR"9`OId"i-nF"=u<##@cl4j);@dSg;*K\-^
%41$!f5qRW23&fV_/&\cToTrs%T/+1ai^"'"jEMuhZOo]Yn#*c"lC`9O&?[-l#M7EjESAU.1h6qrM*_3G*8e^BI=cE"IdcTXH-s_\
%L[>d)'oN3L3q^7G%qA$Rc^q.*J_N&Y@d_^Q4Wuf:*6g+6#d;uJSsa7Dl=69c-AYna@=?!&W;R-m&PpkC6bE(C--$e[/VqEfBILG>
%&+;lCKJGKD4%STGADtfB8;tn`QP12?3!SWCO``e\(UcO3<^WAq0;dT"%YNbMLa?@34?Qe6WYSWE72\Dp#!>sH"AeE(BF3)l6A1gh
%dqCHb,b@+m5tsr6:Y'h?ORpoJR[Xr9&W&UbV*Z24.#&!0@b?TPN;&X>F*,Gh_Ri`oq!V"RiA#OsgifCMK#@GGAs='A''&e>R\d=k
%0nfgDITGrE>*;e="qQK,d;_PW08f4R-S[fbeKoLaH-(rddl?5:R?)$;YB"mDLGfl-7/<c[3FF,SG`5HH??HP<7KBJ4QtRR&qf2<4
%&KJZALQ_4MlL*"9M#3Rb]H%gPACa3@r<+'qNlMh^ofPT(-XA/?#b-r73Q-bqPC'#`"Bsc<juk;]%lCq_5iiKdRj)o)c5+'Ed-Psi
%=+Q]\BHLp4LM&.joWesqMu2UA"cG70eV]E1N_om:2UY7tKsXX?I#!PKO^X$>gICq:JksCO':rhX,Z01H=Z!LNe*Xp]#6lXuZrDjc
%Ho4`gEmZ\3J8e;NXl(IM[@eP+bZlgdYD`fP>O?>^5k@0uaf'nM4)kU[LK%27L;`haEO&qRHF:sB\j2J5O1HGo9C.3dScFpJ#7ETG
%?$qr[l>nCnULA??dM-_O7$nc*WlgZR:cJ:@k0?K/dm%;dd`$_tFO>#HM5,q.Zd!S"G,iZM"!0Vn8a!VC;o?Bb[rkl$5BQY[bXr5N
%6ECumJXLZ7IK-g\d!GgMiju=80\Y.lMWW%phjNsJ?Y0BFblsFS+C&S$-oRrJ$3SUC-9E&BS\#1eHF^h_BK4ntiq$toG.%W[4<8c?
%0<4gj'MID!RK9ieO"m!.5f-_+5pa0d`B<XFcsjn_;qRJ/9q"m$2UO,aPUj\&In(8E>h58V[/&q,o6P(\O-[cCcnuflN%4m0%iWQS
%K]o^]j'di3B!*PfT%3r[H#rY4K'jmZfq^]!SV[HQ1;l$p/(C/K!&Z/<F04DS"j=U:i/g@0N=Xl$ks_QM0G?SifgF79XKQ`I$SHbm
%hsMmj?udRPH.PYg$U&4RPGJ>=\JcF)q"rOmrj<Zs.KR<NOAm]+O]<#ok]<Y%hZmt&5]PlHb+F&/S+[d\8`Z=1<&6_4S3%t]VT.p+
%r>'k08OjgdHeKZlaEXY_cS<WH>=Bc5:*r5l-,E.&k$H#r6l.K5dul?Nmp5n!'#4UoP/)!.<@blt7]C!lff+#l/mA[m&u8IHeo"\U
%:4Yc5-'Ccc/pIIgM,A@m*^epm$`,D,_gt;K<LsG\Ael4\S]Hu3hD'[G\RC)F=]FEF03\OU>ctG]iK/nS)0T7rF?omi[6a<AX^D^%
%?h9sYnG6RS"#Qh=\8O!1X*10c[XVn,597eHr*ZR/SC2/R,X^]*Ue&AE%1W#feKc9=&%jq8$6d2^;]&IY"n;8HJl>!_#:IhHcWPYj
%mn]]eT0(sJC39Yt,:W$+L*fj:"uFD-3Bl>7(T:;.!fGG7rK$9"4_t>'\-5=7h@9Y4qFFh1#[eYN;/\^I_m=p[LT>Jngj=N8:7s(`
%2X*g*mQs#Nfd0&8^uaKnY.hg)-Crk$jrf"H&JmR5C1Y"IO3_8S$>6BKQ't)9(CD2('],<A]L!_C+M%URXH%ZWK&/c&&Eb=$QR+Nr
%4@aL/E,=c.Q`![u1=s#Ai*#ldE?bb.$2T!%hplsH-hXERUTbjK(``rIk%,`^#Gq%n6d1][\:HUP'H2llUm;d>4D(t+hkkYO<nC_/
%!"[5`!L/>UBf;^@\2ePPr0<&nk<@+ME)N"_X#IEl;]W-KaW!H/p@lTNYYU`d+ojWo1,&[+`O<f7hoNk!6?(dO-Xtf:J'H7c]?>JZ
%,LNM2s,rQQ?O'XeI"tg+RV_'_3mMTY.OahEEC.OWmeOBBo3%2YOr7]0p'B1\\rO%gJN`*JG/U;,lg;_aPC-jDp[("WQ&'jcK\p:k
%JTs<mE$)^;@GX(Tn!IpT+")E/hpIQ1<Z=Gqjs2&WV/cI<D\G.=XGgZ6.&1Jp<9;oV-+5DlXZ.TB>,bA*lV)+!eDYODopWk1n4_hm
%f=X25f)tQ)p9[u;$b?N_ib6aMD:NO&rN7P$LYlLFrDY:BFl<f`7sOBY%b>-%X2;E5[.?R@Eund&&WBZ/?TJ#NZ)!ON/jTLLMQ$4k
%FG%5"Ic:/&h]GA-5*$h(VIcnk,3e9I>4W[bpA@2@GUu]3]-J1fa:h/+mHoZT%#hO&%<B-8c0@Q`4N)Sd>pF3if8usldD5P9er;*G
%]t^1Od](_;Um)!:+-NG412&$!EW\m+D?ub'ZDQ[Q,hjd!a>8ipLD!,Di.sWOd[?0+E\.tAo/OTW/mG%ahgkl5JNgFfo3?XlBn864
%3ZtaQCI@"h)+K0sf^_I00%n?k<9_BMQ3IfKg:P31Ecd]sPtX`$QW_A>nD;JPj9XUcSQJ_oc(:SB8;N$1_4lcVjUXh=l0.-5+eX@g
%ESUabJ@?sG88rN86Zg5=:C0ZDV@4.:[]uO`%hpX_;]LeB*$[R1a-Zf)o_BU$Lu=;a9W$Z?O)PG1RX)E]N7/-R1fc=,NmBWLU7GVR
%cHpmQ>N/Ws"$e+t^,YI(j07mM4X.VE^hh-V06mS+,,&X:cXo7HnSD+2QH4AtPf[\C&+Y-&,^i$i'F:8Bn"'D2?1+D,kd!gt2QcF4
%L)D1^(\+\UPI'0JjKIc%3'do_'tA"4!Z$oFBV\UdN^!rBV/uf^Xq^CqM$RXNV'&i?0IT]q20?8NDZ@#*2^R!fh1\"g,RTc8A\e)8
%AS8%1(#P_jEt.V_LEg7528UXt7FO(7XZb1i&?eVJ&iqo&A11I*RK*dDUemD4OUdq;=b8:7<Fp7,akWTng(foI9\PD&C%!_QmiM%U
%m>1X$r0p2)"V&rR^_=f?.AYc.=TSuK*Pl5cjEt):;B_;orYi@9\e%*#P)EYT-h*Z]oSh+&o1_+b"IUSs=XoEC2B%`_MJ$Xj@GL%/
%fb6rEWOs@Jc_`D#$Erj.-e4j`c@-b,cqidU2E,7Vq?_!T:>:_(4)>i5WRsVcmT96pLel0EP2RW-aZ;"*9_oVG>GJ!(Zf];0`eV0`
%LRi>Y3E.KY_/>HD"t'E5:Q7K*`\Mi)eF.te7%qVCllq/qlsd2-F(T4tE2I$SkGhOdU%?peFdlafp*O:[@*-e]'3eFU?rGp0IrhfK
%4Q@]75`N('//@46i<BNl>-l5B!uE)k-uGl*3!Ln^Gs=D%@%L;rkbR(o).E<JKN]>ss%e'/,0,k<Y2j@PpdgS,kUk99ncSH]aKMM$
%)O4QKfJRToCm%/#@G?m*=`\Q8Vk/BE)ljY[EmJf,FQ+XB>Ra4fTFq<ecoVI'Q+]0gfDun;M1%@LRC2luYo#OPeGN$^rntJg%GPZ(
%n7pl2EV<o2lXQ0tRZGLU8eO\l1r;sh90#q;_DQt.]Kt@TrKo]:PDBEiGq]S6l/-4c8.Sq?p$k]D<dTB2HINquf#1_Jes#!>rl"=,
%93Va<e\37f.-n,=(Y1kU,Sr*N4/C4uGR50'!>m:7#H_W=(=5\o;173l6`@\(rDD!p[Mh(Y>..%mm=4Tb2E%]UHGl0uS:;@q*bNNN
%U?&-&C1uI48)0f6&2&/Td"B@"XgDoRo2]]nHrL-mqsT9Am&R@Em$02F[Oqnk?$P]$V_O=37C->nqh@$rr@^3s"2.S`iJG8KE)&<i
%a#)Sela.mcQ$1j/\Q'T15I'k8k3jFC-u8Z1D*_C.)]5]HL!;6_pN7Psn2aC]!_&2@a6]$+BpmnE/SQO\17ShuW%$YY]ijQ\,B&ij
%f`8A/)A!uRA74;D#\0ks*4*!]g8`uUftLVElGZtG5I//3eJ>)%BPge36Pqkk:biML#8icZh4ZPL!&jJTk3?"&AUEfFDa5X,,epDT
%iG$X/.W0mIH?V1N<GiQgh>#@SI=rSQn2]GW4VaTBB>up6%0[Wm-I-%feK*p!$_"jIW)^^Ci]uQ;rF4=sO@b4$WjC&l9epZ%[mR4Q
%*M!Y0`N=$jp%Q?@)(i]MkPP7(T^t7S&?MCoD\4i"mnCK_5O//TKVP[/(:9.+%?5qKMOVM+e[p7mXb$)!>N_`jp\qmM(JE4H4C@j/
%"8(?FLU!\(d*RnCqqh%P(M."O?2g1Q-u:']-XL0hKiQ\D0XK&A?u9bM^KV_7_VY.bBkUnjQ18r<)@N+n&sb:A#K-kfJhHok4u/L&
%n19VB?:lKMQ+!?6A8Gq,b#R6pi2b^_ABablhecYWdb]>_%uf;\d_:d$%?7QJ>alq&c;0HoP@P[s`Wg/(UHF!m_](FjgRrD*ChS4D
%<S[N=X588PX9QrlDV^-.hY[1aKYW$c-c\D;2De_m'`JpX\NU%[FIDXm:Be<cI2qj&LKSe)BcFF=OG1uR1eX=uD:Q3.bgjB!_qBlL
%g3[aF:Lg#L_"JAGU%)k@,/jrLq>ePC0A4(hd6mJErNHH8@2?=<gBcKZ(eUj=3T*rOqoE"OS3Pf?&]MHXp]!6?1=OlIB4FH4:0Hlr
%A6:kNrES5p6Mh$k^RH<oQ*ru]p+\lF3_.*U.Li,]\=d]H#4r`UgCIpEAng_IrA[+dJi%jCh9^73n76nHa@_R;[(b%C*[>4m@=7iM
%gk)9W`s@5?/aZ)5EG*i#E2tpj`s>g4gc?7j^%_9]#g#h#OqE[s.T%loc91)[PRU[O.rpQFkaA(o00f/bG+!AOE=cM(&SooYTl<EH
%AA!AI0R_W'AoScse[s2]^ffIX`d<1W@jFJg)e>Cu.m+"C'FBjUX:3:r#ekgjG_aL6@t,7tQ)\pVm:t*1i_#4"aj@_m5=8=%g87qS
%)miVVTsJmJ[+U/j4oI?"cEKFJ/S>ePpjluCSLA*AV<"\BfJ][eR9a8l9.W64\8mBrYgj\SVjdf$f+3q1hI%,.6!M#1SIJiCX_tfE
%G97epPQ-V#'T+dG4OG&\H!%8)('_<^%T0YMo[7\?>3JbKnDcLBHks1WY4ncL)lUY6[c63M+<P%B)j"?ZDW(HOer;*G]t^2Z846.!
%Q*]_Ur&di7LiIR7kHR:kqI%X,NQ2_'pf3jFqV`#);ldD;C>0SnBX/-H<ZK3SMG0W7#3<&R#0n<nDTq+sqtjJ\@"+sSmV*hpT-pY#
%;RA\$abBS!+M5kjH9ts('a_C!3&cOog4m+<^W/Tt/Fn.%87PSjeJe"5)ss+Z>b.8$^%M(@[MY"R!m;0.;*S7L`Nkp\?EJ$-V*g$S
%979'>jt5Cc83i2&9>-7!:2mJg)j&s7M"U(h7n=8oiYJoQ]:mWf<SZr\H[gN^0n*bkf,HG2SG-Qf.+o[HA6_1W2oqt6h'8\&j-&]8
%M?>N$bed@u5lT&4I((1e\F<PSK_B^N1`El]S)&>XmmlP6$(3uImMTR4o7TCYUcpq(Mrpg&Ch(g6(<Kbs(>^JH2f1bg-eh\]KVE?I
%4Af#]p@==-U6fNCJV>W*X^"*H3]W+Gn+b?RF4u,Vhshb,;tq`r(ief%V3HFp0^&cLGGJqll\AtV3`^M6>8OF_^5g;6YtB\GH%_5+
%XA6dP=6rt*5FoL@ML=aba)Q0l(48hM*\m#mK++Y%q?!N<EfRaZR266_?36=_Z&&jRm_W"0jrp9JZs!"=pb;?=HXp38T3e5-2+u_t
%^$5oBNLV;4I<k;TA(5IO%fJl`F?^9M+oauKB^#4N0bDMk6Mg\#IuoD:4+Vj"QmB800sR\Ej\HG$(O]^B%.d?qhH=>RH4SE)m>%`<
%Zb3brIU66i0:i=P]V8X""*U7TGmpN8Il`LaP/EFH40b.X\s%"rKi4u"/$'pRm$q3qG8LQ^k-8)9o!g`PPm931Rqh-_l0?SGn\+,3
%`?h&KL"Ga\4`8-`_smeT>"f`d;ti]E"a.Tdlt'h7(5Vpe4nbhVaGE@Qi@\FA'(S$V,'e8lT!\e=l`M2<rH.^R(&?GT20M/2]07(/
%&rDNmT.eCGV.E7LTC`%Bs5]IiEah=bW8sfA5J9aqfo"Rh4HoAS-rQ"f.^TONi.o`9XL\Lln)S)`T?c<;!e5FjYB!s5lG>%t@eI4S
%K+gGp8.10"lrpK0+#\\H7S;.F?=s4.)/f=#fWnu;Xs+Yt[Hm>dT:od[Me$qham=Ydp5&tG64Mb"](L+[q;1jj/)^<qA;[JVOn&2I
%,P%"#0Hl*$Sn#*m4EGHjbO!/8,mg!bmAFO\0ruQXCo&92@5ti`cZU$0+]P\[pY#`0j/\m>VlN1caS3F7X[!.ZZ&uHip@e)G]BiJp
%C>L^\:LPJ2*@!cl+2k"MZ$pqPJCZ8hLXIC;0=4ofD_%tOKABRH5VKKi2DEL[)c>CGrq](1C5`f^7'o`;8)I0^R2pH&)Bp*,]:ct?
%3?=q'Rh/ppM/_rLaTJEaFHj3WBk*qWXB,eAI[!:[D^`fS3Wn>&LpkR#bmqt'54hgXi'%cHFr0e'+f1ig;)%*rS>^PtTUj$f$-aCY
%'7!/Z=sWb91FB4Id5-ZK85tBM(RV"C\Vc9_4fcRf?4nnk_rf9WJ"iar*E9cY@V(f^'4N1pB3j_HBF,_>pJQ;@q5:G"%ihakOu#Eh
%@rd1fq6SX'BKV3A86#DJ44W*uMtO6IE9?5LHW<'L4?At?IQ0EnML4f+/<3ES6NVC>5#bHB2`T5GQ`5=eE3t6C?GpkT'HjW*>Yt(j
%qC*;<e2<[@DNO28%Q\%:M;?A1T=mW`h-Hb2c,p.;b.@6@k"f'&<fui6O*?2#?7DmC"SL(SmUhiJg1h+!\%_gS\Rceu(T)V"7-]Et
%;^d(B'YR,/:t5Ga:*?<'R1Au^E;L:tF&a6JhWSe;qWZSQ=laqMrC[(eg]*D7Vc*[_[mn3"$gb+p6cqA/U&@#_RTU?)5VR+tGYI8G
%&=Q"]fdpk^;'R0Q+Khgh^<E<j>"=h-W\G&I3#ac*[X&WV^%G5M:h5(OoABSgTE"RKT7?lr/i<l@&?dusU*((kT2ZtTQKkGZlTGt]
%7rC;X>bPJ58S]_T5_n8f=s]Wu%11@"nXt+B"%M#+I.pUC)9Tsb-16;[!('*]ObP,)2))fXQT?lgV'X"p8V@XQ]m)VAj5NNY3T;.p
%NBq:;6^g.P]qHIU;n($)I*V*F$QYSrB$hR@o$bJ)K>U)7n12gn/QoH$7G!WP"BQ2,G8d5s,_RDQA@rNn,6!H\A[Gf;/HOfi[&"tR
%Lp?6r#F1YqUQG%$F+(t33$eh&rUI3V'QHH:Tj?5&qb];:VRTpW\3YrHS/[]rW-($cIi;Rg;QTcElsI[9iqoU-5)JNWE-T4NdG^p-
%@n'4&'M):-F]_K/e5X/UU8^hW.#HTOakepX$)=a:R6iML_P+P%On??E48[-_%&k[jI.bBLY>elY0naHjZo+!+_igWR=tNhQ`OKDH
%EHRlP\G%Wf?V_.VaOMY0*A)5,f3"_"XbA%i8<+6*>-.<hNraR]\C!W@4!C<@fl,rU\f%/Q"%M<:ng'[#*SCu+a#);eH%@5U)ffpc
%kC\=sk7BmU]&chW*[dJ[c@B59/jo!7h_f=t.#l-D+X[@&!.1PZfT.qRmgkC'W%m(49M[p10l)S.V>'O6?KglZbIFp.qDAM8U]@3Z
%>)Ga`*Dg&*qBEV-7*Q4%d*BJ+:<lB3.2=G`%hsp?_]#KRdYB+[PEVFud7E6H@<CbZK/M$\W<t.n>c4oHrrYlQM%Tm@Vq(M'Yl=V]
%fXKB3A*IC(q0P=5ZY+&D]ZrcHo`Dp)``]l?@qMgqdAG^#>B,H`LC&<-)[Jr![[V^B>r>,k.r@RV[2U%O>K+in]_2!Yl4ENL*H[EC
%XFTbebC&Ct"Nj3t"?k,sKIuqli/fgN6&(J-k3fUMfHB5[7#DAD4.dpeFA%I#HTAL$m-&C,YHK!C[GfX'?VkkJs1TWWN`Gh[UdXb(
%L0*.`gdo!/+aRDN$MeIG^rN2_-Q,FCqYY$#Zjm[;b0]:ja=ml40dmbk!SC)B-%T\^^N&TGS;sZRgd`JZ/(l0/3$76?e#DN,@guII
%L%;!O*SPM3G47,<mUKj<2c,FqHbptHjUeqL][M^<CZ"\ejj;Ed^,jVQXhQ5E/.Bg&7r5pS"_u1(^S.<Nd8l!pi<YFXQp<A(7T0tE
%*\19eYR0[$)Bc);%M0^Ib^(c:I9R,HcD3J-^HW5'I>,I+b%i$3"!_Q[bYaUTkR1;$Gh5?^U4pfubX//^qr7)`1XSX\ZGcP7C`:Vo
%aq=^\U_Ac'*if":,J?(@oqj?W,m+cE&hSZt$m0=),?[p&YK,_?n:5SUOV>ehGGQ.\DnZ+V6pN,Y?=IRrn1\W81pn/.mFeDeRM;+c
%@2>!%(SoK5Ch&TeG!i_Ng>SkT7K.j5;><0;0mJS9ae&/:o]n@t-[gb=ZuHf#V!lC9VS+p#4W`/<GG"Pm%:g1=SFnl.82Y\<HL.?T
%V1-YbSg#1qb^(BU6dJnr7n%saB738o7D8/Wor(p6E-'`W&GVJ4A=N9X-#3!uW>!6"_1H>K9%e0f?Uk_8E7ZOnU0W.KN2nJ<n/$uA
%.HOc+aQ.A+^jO-BnN<[2p]R4qG!q(XO(\bGCXeck6<:KS#erS6c##61.G1n$k+5ae8+C*o,)=L7b^<A=8@HXqR1#5AZ'``PYOXKp
%aiqRn]%0'50j^\C*-7MRSbt4/q'63i5*n,QdPdBd^:f`,(klmVrA^'jf&[`!18Rl"9XSag,0$4[,!Aa^MC=^D6R3CqT4g<a.N>Yt
%M)Epod=i2PF'YaGc.TT-.:Yn=dVkc?OnhNDf"H@#,?9kr1lsS&3&.#TD?^o3[GfdUc*Q7Q%,>V(Z30+&V,L`j#=W<$R[f8t/,q$_
%@-.Z2KCf8N,oPq_)*",8i`)ICX#leO7i$"_4?EY43=bIdX7@K82]-:WVaO>sLtI2)*lNiaBn"e^)+;=t`rh=%*7l0;g9;g5-Tdd/
%,>#*FVU5(.k[P[riab<H;4JOA"3oOnp0IjeqpT65-RU,$3F82=@/T4?.V?F?Kf:iP$'EZ_Ro9gf;)7Ya3t`-l376A"K(4DK`H5'?
%5BWNN0fY\AW*=-5V3*6]C=L'"G!b!S&Hk=_a%G<gCiFA$XQ6].`\XeoBSJqJ#f/gthURZc1VP'ab%)tcU=6MsOiZ*)hUS,QS#bDF
%WugN*)OAUMB@Y1Z7R4:W`JZrWE8P>4_=6Nc7YccE)n8Uu@b%#('I01.#f6)SauS":,T&V=jI>\B\KR0=SNMTN5ST3_nI]b>'\``I
%=%adH,@s^9p-:pM.C^HjGp@YCl6oP8\Ju^7QA@<Lire?W[XiLu*_"[KA_j42q)6IO,3AWF;1D"7UX%2hQT@u5Z0Rc5Al9uCP-Sq%
%@u^Si5\D!qH/"&`nXQ2lUdEI]#?nEMG^WN8>j,\G,-Ti"Tm<A7%'&n9i)meqk;a$e57PnnA5)O(X#Xba:QW*`V*WFA5_pD6hL%9F
%UBe!rOIujtATft9HrC68deu_J(a5n]+h`ahT<3d&*3\)(OFpK#62*:<Ak6YM&%:0Je)Kho1TkN"@SW1EbNT,IA+4\<5>5V?DjB;d
%=m9;prK6?rLHgS[;36UC5Rj']dEZh7Pdk2na:W%E3<g'F``EJs+>%(/R%c&U1?E8[h4G]f1cd5r*/>KOAIn>nlWL<V2C*1*<,8$[
%Ig7nI0Pm!G?oIiNk[j]=/t3ZP4jU@V5gcA]p,,u[U_fp9ri<_#0p*.JVIk@$B6o_)_#o(FlXk-scRAK^*n+t]nqG%)lhf-IgdaFo
%DL;LHpbMViCTJiG0:/@_9Yq`j>1#2KoikJ6Y>.g"X;jP-fi>ID$3;3SL:0,S?&-[CCWV0?M]^9*\/;>?(,VNO]=4E@Y!0%Oe\]B9
%5onqX"a_s>8YB6oWig2(,aF-7(n6Jg==Ms5XCS5[LD/5CM.3H*.[oYX;1(8k?91s%#b=`5#8ne2/U>4_')<57eNQHYaU3-qo_qfW
%$l24#)F,^rWgl&]0mOF4;L$op10_!)frAXH$r2LQjZnKe)(,tb!Af1r^VUWZ=3#@(8TQi%XMB\o.p]1\MPO]<fA4J2cLN!'9EV5,
%0^n-OYVQTaNr$9Aah'7AlM&>;]haZSi_jZR6Ondj<C7<%6mRgle9e+!&B)Hd8Mn($HJa,EQPUXC"blKo&aP0k94an2,)q3>Pjkg/
%22h3!$m7"jU,:#)&j!Z@Eg$"@8F+57[[]^%*daroU:g6ndq4+\#^t>ZU@A4Rq2ZS4&N5fqq)FIa;r`3pO[MLTqJ[Y+3/9Z&r!$)9
%IL$6kB)$OCUI.nS(N2L++OG/HS9a?3,0)MmIMBZJ"QbUUqG&_Qi3&B,qWh"]+5H-7X'mRc[pmLuX_0*.#@jbeCTKnoHn]\n/]*_!
%@"OfO\+oLW1:/-c,e9JpN.V\4H^\n4B4b$[H^*1I#u](6>=Vd5U`LqKEcliKM8K)N0(_V7gC6R)3.9@oV:6m8"I$s,hM5'NjlMb+
%Ck7Z#3L,sqURh4'S3_U`2osN]VeUK!Ko_^*#j@u>bq'g2QL7bVP2]m)oBG/c+:lBcUq`lLf\nX?TrukbHrOTU1N-:0iS*mqfo-)&
%CS),DntGCb/8-s%Xf%f"ZP&Fq\.-^lOb^mZ^Mn_!J<J_#L[BX3g*8+)4Hs8d?RU%^P4FFE/"s!Rr*8u.QicB\KY1b.ki_D*EX,5=
%*mo_<Z^`I(16!P;-la'b4lbBaX'T;-1*T(I4hUS)Y[*@H%F#(%*tB=hY;H2!'A4k++ECHl=I-"e#j`:s*j\Jk?`R5l('uA&@',4_
%$Eb/83\MsVb/18`!JIr0n:G\qJ>>bXme;F`$g]qlb+oj`[661,%\O`_UWilmfuf#]B%k%C+n5V$2'+0)[_<NRR4N'(O4ej44S]L9
%mT#D7!b=7o\'4C:rGbg9nlpp'Mp]pJGqBet`+OZ45R+"l.c'iGTf7QMcNV!=Y-k+/+!O8a:EHRH%:ZG_=r7@Z+-s780O2QTZriS3
%Z)bg&Rm3B*Qt?6akf4!7lsPCZJUYfbDks2_0EP&%MABo1*oI<&&"KfY:@AXGd5>.K44:?Ik[3Lk1tcnE08;jm^M%Vn5n(af*UOps
%&nGs>_T\c.(aoH/gZ<?mL<OFQ#%E*!'!C/?,GQ_3>+;SA,l1S`]qpu%(k!el-Z_GgoZjRP_:@\!cf1U1g-#pg]4a*dG///]1MFc$
%^nuT9IF\rg)CGR1&.hsR-GX"5J[p\t>St^XV"2-r@h?uG<**;*Q8gSVSjUX(LCKP_5\5tFAi:qjUPXYIV8X[0&A&Pgag?=qjg[l,
%pAl>e>T_3uJ"ii^I!>[Yg^1-$qdOJ#lSS2"AX@!fR'*UZ0Z$\lK@'?Vj;^6n.VJ6d_`>0!1J&tkm7c:CIBGppLrUT7*bUQET!]<0
%ZrrUYqr<pq:Dh(!q0YW\>5aSCTBW&Vd_et=EN=3tX>T\nj&Sc]fBN3r@<beh('L_s$gV2l]YWARp.;3/=ERK%phV5+`FXr#@@U,(
%;8oP%[i%[bV`UQu7&=7B<sYJOl-Qp+p'k.L5'6PJeK@pd>p?<RL\d'2_j'kWo%0"`"1.t+f(L]-Q7PU.o9T4pE`*MYZ4mh!%O'@)
%Ua*\U$"g-C\LN\#<N)o$ipV`s0R&Skj7]QeRHs5/#`nJ1\_49"N\W2""M;dA8nZX2;[KWHLp^7UV]du5rl,-/BcQ7HmnnKl4?e\L
%)3q&9GDV;$OGLPo)*DM=M;,^^9_/7j.FoQp,]LW!pt)`-E;7oa]c&2aT<T&h+%B\2@?mq@Eo2`-/n)jiD`k<uQFebm$(XaqT.l+@
%;YN'RU<Sclj/griiB`UUMrIV?K.$>76_X>Dg..rF0Eqn#&F#utnmX*2EC5dC%TW"cDnD(p&am6(.+092"mj6rrA\;n^;YsbFjj[L
%l`_&!\efTs'eX`\E4RW?%?EI:=G+%#KDb%Tkc_#j$:WD?1MrNpZgg?CIgIlcM8HIIACaL[L2g8j+6F)X(C4?9>G*Z$(+eg5V(io<
%b>"ldZTR%<g$$7clb0'SX$eoHZpmVeF1St13J%`Io"c5C3r]YCk)b@#;ZQ2X01GEW'a;]4MjfgQC:L&."EZFb0nC1u,7bNOmk7-!
%GfIFl70*Uq-kp1+JVOV`I0Jq-b1k+bbF14L!j(Ts>:$7o@h3Od^S?H2!>K&X10!qB0HUi?@+9l2"[LlY?kHr@=p%Lj'3<@c.s9FF
%88X'J2L4_#NAI$2maa[Elqi1Df$D!I5\>C#?TW_h6cpFgf+Qa\h5+(hpH<$(J5;nNG^(@F8PpQl1Nfi$H&s40=C_q"'DHC!-ht+i
%E-IOIl`MOM!/MS>I?TjAnT:74?&60TMt2The;@:sb0et&SLC;gA*=mbAOdYK'VB6;P3WQG%3QDm7)Y-IHZipLs6PJL+(UBc\Mk*2
%-mOheT_eq/,]O^^0ha63J_ud1mNMhL"!_L.`bDVL7X*)FYK'fGFm$//U$*jD\$W]\UCmnTAtXBmi\'-hHQ:i/-FCnaolat)\]FQo
%>Uj3u/GBUpK@`O3k7=VIJ=#C&FM%!0`rh@aAiDpMqm97e(7PYHF7Z5Mcj8ic-OgI?]oFS!eT<AUb(1u<#!N'6f>58#S:%`hV+_E2
%I-JQ0&I4!g@_HoigZaQCl*fPTE6,fGh&JaHXM`TI&1W9,3CdH8XRgnd\^B^kl&7!@EsJ&;jouoq#=Vr;)[]lF-^4E;,o?+U0[1D0
%@M/r]]>C:3fPNpD.#T(P>d,&WAVuolf`f)#E>m@"pL-r5JeYY@YTeeqYG]^VN-t7ejVF5-.B,&o>-T*roVgD9D&#(sWa6AlQ%Cli
%?b2G2l8H(EV`/cGEQ_.^C&Q'7PS]nBVW*YQXXW*p'orB\TEct7#oS2?Ou-p7nK+4Xj;[*K_^CRp#Y="9]sgeT*hnj=L=5Jb4Wq8B
%Fr*d<2>\h9I'aNA[\sPITEiR"bh#*?2Qt@qjG:"tk)(cU)lR(ucQ<h&rJsI=.AA(;l?\a/[*Bmk^*l(';^2][IjUDh+iOr>5]T:P
%2>GU>6sD"N0fIC:.iTT:8p7@H`Op%Q06Kb@RH94SXr0(:3OD&pD&4nl`.Z^;nqsRjA\6b6(%7=nR_]u*rs3>BLBsq1i<nQLK7YeW
%F?V&T(CkV'#ab%N!S/iPpiSq[\N+*tQu@pMn7J.0VVU+EjQ$naf"gJ5:k?\72\\B"3D^m/d-i+QX:@KLDdK\:<:1\U!/r9X6]8!e
%6(*L?K9[o.O^eX]j#_Ki>&sA<ra!$pUnd71aZ27ur5Fi*^c+J/c6i,-p8"qZfB7OnmE:7qQRM=:RJO1]h;r9OMiMZb3/8>7io$IM
%0H_H&UdV]i0ZVjc1cM,<mn<A"T_:i-bsB5Q1N0gB5dgpqJE)DXkG#N5r]Vl0'Z6#qK#1us!<L08*$e[5!kq\Lmas5Z3blR<XHnma
%Bb^Njg[PK>:=H$Kag_[)"fU=9a5#%dIPWO.aUBX=24R4DU5/Q1S847r8@tFI2Gq+V3#K:HYZPu<0otHE6=-MWnV0hC+ftF-DBB*`
%JRNIJ:t^SCZ(e.ETJ2O?p_IK7kN/jtGklB1FT*oV:hYi[3uf"]j)DWt\XV!#2_X(DBjN;3R<CCPHrhml<pT<R6PUY^Y.T][B+%+n
%d1,J,(,c@+j[VT+6m#K31j;HNQSU1iD$8`seGMlZ!pi^R+Dd$"MK6[b6dM_V/IRO/E,oiKjCEMJ7PYQ+"M_d^FfESYf4PqI!t<ba
%gWVqb.3l!&Nt^fe#aq%X'*O!kVaUDX7*$8p*+(028P0/R>76[dAnCseTJ/Sf[bMdg@<B'+gBQ`FJ[_u]_oUT"X\E?>lTjXnNRh\h
%5'm*:,@Q)'Ol!o*3jLHn8G,"Y(WPE9N_5I9o,H3Y(tCAg8>X&'\gb(lZFhL,>m#E+>;);Yr*bLHGB^R,P@C-\rN<*W8U;em=)\Sh
%4jFp)?F*$)G!=#i0IaP27-$,>X#Fg5^lHm8^Hg]#p%6:#':p$b.lANA+=l]]=V^J^,8q^LYgCO-5'!f)*sUm'kP'3Q7R$bA/>*1L
%4>`tpo2+XdTQ#.S;C7%bf]6,TR8P]C2$2#pcX*&-iC>S/QMUmImj1KJo#'GgL.cS$>40"qnURsVd>cKO5*"U'd]6V]O60&,.;6XJ
%9$Q/j&TbjaMo>]uR_aU(U>:[n=N$Cm`$p>R1JM@8SWKfY37,`r,G.EIEP1\IQb5!BQm5W`SqLhj+T>9fKN=AgWkhoEXbE=$oi"]M
%9FMdQ-a#S-+$i=(m;e^o#C:$d7HN69PZ_%t%Y(i8iaI8/LDCt''*e=Tq-foaH6&TN`Z[+EK$3AC>R3$1=\4bf:GQ%KaVNs6:8od*
%QG2F$,/o1QPKj<VFE,q6_;C2!G>[DLS4ntt;7KDK#s%.40>W&0k"E[+,CTG+X,.*AoF7N+%+8+8JEZn*m-NaEe90fLmY!/Sq?n(p
%M)L#QL@.GkSLep4SY-N[8uqBu[B4Z9Vd"@S&?B][',+YA_dGb.%Z5)537l[>aKm-U0Lff_Y0iL/W);N!Q2&.W4^7^!&g)(oaEp)s
%5+lr4E8F=K")a^-j@N!l:]to^Z7R@E5%!tD1i!d9*E!O-lD5>q;bI0-23V!oQGdnr:%VFY!oH9EZmhLGL`WrIS=r=(>rDe_0!Z7j
%Cdth<k9?Bm,6d*SRfUXcURnN&"s?fQVJO7b?QZUh\cfWa"JF$9XV>.V)lq*b6_R1ASo1NM0\A<"<l^J&8Jrdsad:@;bXHU--.Ds2
%Q5U=90'2:t)0&@*it.EcS`Z\&'q#BN3+[6<q"l/(b?^?eq,6p_S1i*iAQeJf#Lo"eKp,\aC9ZAKA.ck%AtWLTe9m]<,n&)ioIln0
%mW0?Lj)2sqgu]>ObWIjJ5@=FG>4G,Y0@5J!BKDeZL^oG;Zj7&Im_g"9+1hs@eWqCEs"-XL]OQ+#.6W2*%pDOEn[s8?a;Y/PeL@/Z
%>VS@]bd=5tNsG)oGFs);Vh<dc*9tFO#EZCP%au."oq-Y\>"CsP8E'9'X_!*G2*b9>PH0p1QKY,qpkH9LJ2gk>jNWW*_GF3tdV*Mb
%^+D"/TZbh<X^SfX5Hrp$TU3NZI_PWqfsPM]UUTPe"p'$)mZ<1_RCf,o.GkX*D`Juf*uS$KglXKh5^]LMBgqWK,r/h?Es%<s\jM#i
%o$f>;Fe>.iqZc[jJDLerI^jJPReuI?UG(`Q?Btr!GbcPFZdT?7#ua%4$9rEIJ`+CrO8EK;3MX2u`nDKVWCkW\hE!>sIG/:=Iu;%C
%[[5\.Jupu(n9iI5jQt-(a-Y1orOLQ._?9F,KS/rn]f0?m9gN)*fX[I.0SC!(`d*,N8<5DuG3r5;],T5\OV#&%oPf57[E49]mQTV*
%TX2bnToZqfb<lN3**9!6cl)<m&Ti@GegI%#GX/7cLCQ,lYn!l&m6uf`p""]MLX,J>0clW--[*,t!ftBl:!VUCG5QXL0UqbMrI+Le
%"(&tLI3L9!Ti9^aIH812_*mWoM_6r1]=G3DaB=!2_dRD&@^isFGWb/*EH^N?kKj-3YDpc",[]p8%GhhlPWH)UMY%K-X!>gH0sI!E
%+K=qCrq&6p*_lq\9eMh%Y0.&T\'TJn:"E25Hepoi=3*Ae6'n4(%a?=bqgKJG#]K%qLkB`-63@U3AIR+/(Rl'!bkD\3PegnoANupn
%2!,=T[EY$2(+]uZi=-jih3SoE<k@,AQsT*+b43rW2l"L@N^$_)]0hEWo?![GdW9DkUV-ldQ(qF#4=^lK2LM-O?Et($i"A8M37$RG
%'$^6'`,/kE"q/p5r+>&X$e\bjC#67$D;Z^MQ_%LNENJKSbZOP@a!BBVY7=C6isg#Y8fjed@?C;Qr[n[dP%GDFlCl&86u_b,&9+Ao
%M<?4:UbOVn"iBE0mGV(&9^NIjCj=!+D@"BNGsX3'PrX^"LAtGNXQ6aT;H<n-)UrT(WG^(/7mepY6:`tQq;H&EeC*!&QFeb_4PnMV
%qs`"\3@l9Fl&gejo`:OpO_-)WRZf`675.r2dU56cQ$FCs23=O>abj7HEAe%4kcV#=\F4rS:0Pk#Zje&Pg"ZW\pRUMm^sUs(`b0dN
%=_mhl>Jp8h_tNgFNAKDDc1"**:(h.NST,EE5VKCIS@1A*#l,aoVe:&YjSSN%JKC65%81IN)aPt@]PTne-1(I'`Xc]8U:&>(qDBD1
%<^?a%]oPcQ'<R/^_gAS..PcL]!plE@[0(_(mmI4_o7tC?'[pnU[m7uqi*B/uatr-<7WZX]G+C\Oed/FKO#MMGqCpY"m-HAU/@S.m
%)1lb`GF46r&BimsWlB\<DMPEkO7Nh@mXi,Q]C,SG'Nak-_*I#*0?;NEDGdrS1aZrpX$DX@%ZD3b7pLMSoPcY_g$<"']J<MsAURM>
%'6ER<L-fDTA`7C/=2%YSocW<>!pbAC8i4i?a]s;9oQ;YO7V`Zo]COC,mWN`sf!7r)/@Wm1fZ<W2j+g:ZU:JV,^A`8>Q4!a_Pb5bM
%780!4`Fb3\GBEA\<-Ko!f7')(Y(4.^#+qG4a1touK3O=OU9.V[$V_aV,a%qTKN!,)M.U_WG6KL@Un&kE7aKO\9a"Bk;"!P&,FZ7#
%Np/f0+M!)$^aUEqk\Lb+1D_fDmYttTT^$]sUEg+lG#9%!h74<iCQ9Kl-8/)FKFEsEn6.1ji*&r]1IFZH=8*=8N%*5nli;-OCOBaT
%=io]h^uVJR'.+)@T[$3e);p;K]Br"H7[bK2ls[8,'B5fk+`-UJbmsPQ;7c&O3oegYJ</5HE!11=4eFjQZo8\Ji=.N;CE0]i(/]5A
%r'WpKD;Qd!FOkXQ1koHG_D?k6IM^l-<\W9&9^=\]^RiL1&p_NeY=F[J5`>CA#\OC-6^*e20rQ_ZO%XOpQmGTb:1#F8h/Quln<c.?
%bInq6i%i&jh1XH[J5YQZ#<`krqubb9Q'ADWOcZ?%)*Q9J?ARQ]9qP_WIrQpe_ubX*(Wsg9U9fc/b\Wa/B5\k%!2p3LOuCdOB^)I,
%U1T.orfKP71Lm&WkPg2kZZt[._;Yrm%"&C9]d_&!#'\NoYI,?.a#,7PGUnWoK`W"N4@Hk+&B[<#F>c-e'0-Co$.]+1QnWTpjcXeN
%Om\P`lZHR\e)b:LTqlXn0&D:&M@]76o0+QELa4$(:\M#JHkm2MbELhd*Z_?5P/;R-\iK6(K0N\1')+$&^<9k#e9FdN=CHXf/0;A=
%,RtOs8-h.T4m7JAa7Wt@".\_DV4/ln=Y\qL(A1'><BGu7HTLIM9<.7Se7.r?h]',L0F,dmKjJQ8c8C[3oGYFMaXXD'kQKCE7R[Y!
%L,NaLj=gT<pC^cc.XAL*BCJXsM&mSJAR:7r5\pp'SREM1)uB]n#"YKqb9UdoaC?gma5HL!B'=,q004*t!7Cl6gI#n_QW/&/]>Ln$
%?B_!tn8#s0_`VB+DotgEf%kK^Who&;H,FMk-hOjhdR!"d97GD=&npdh[R\@/S>S@$7=*n0ls5o=$q@er3Q?"IP0W$!U7!V9%8P5i
%(8XpaYj-kp\CqT^K#\[2`6#PuNSMt:`Ei<9]R&Gtl5R&rfB8RSo&T,u]4>'r)_KE]Sr\>9jhj$jXN+W(MK-mZU";R!B4Xg]`^ATR
%Lk1hOVb>As.c%0KDA+"2E!$g'+go!r,g#YQ@N0kc$IEs6:#hL3Ts(lgEd0"l-C6a4S?G9l=:WSS/BU?:</s!f[@IA1bp4X^(CrR>
%LPP:]H4P5#QX7;2j_;FR)5cu"Agc!1d%O?X=MaI;Ve[[&dAMS>&k?EB@Ib1N3!aq+66rJ<>Bp>*VaQa:nBhJGbkf?I?Vf.PmP%O1
%4:\&lB?D^VQr7QA*3/5!"dasE.]X/q_>>]dEGF>-WN)@\"T-BL](Q-;]Ghh>X3*[_NB('B'1[A$;0=h,Aq?)^468jBhkf'2.+OTn
%IT7>YG8.KLT,G%TY=11(U))/9M*b:/*''`Q]hu$IoF$JF,c3gH<k2U9+e[j$dESU&SbQ6t"Z>PJ:=*;.H3Y682's!I.oLdPGM.mt
%m:WA/iOburU)`ic+dijj8n,?PdqV(c<ITc?VJB0^5G5RQiN'W2UlXKKVt;@5<l-6(2QaPmf<i*Nf_%%&Q[IfY.ij^p5ps+#A0C6N
%+CS[**[p`>aE1,67;M%WLMXF]>'EjBpgokKPdJ=do3Wm!.;^22F2i6*1Y4SHH@q>J3"?@MX5S('mILeTQ6+UfGBQ$mYHED"LRhoP
%PO-1X0jRW4`>L#7I@2jB(kUjKCa)aZhF3jl`(e.d6,>1OPes5h>jr]&RYt:pRsd?@\i49'h;N,NDO+"-EkrOe;96R$h<GFbp[0Ep
%8<V-7-''@H=?nC9f'$?Z_/1-b/X.X;AG'EmC^^<[!iXh3MKP(71MjDcn668D2QGrGY@Rm>:o+qNfr;5ClP\jPE*QBoJ>r!3Ddh+U
%T9f8kpPdduirnL.8J]qo$]Aj\U[X0h._p&0esP!P)*,)onDqWH$$")T&-o`fCop-f8ELV(gCL@Q##gE@b;[C!][%q)_GQO5i=1$m
%#jmk:.XdQ[`mhX0+YO*?mm2Zb?(E)glCk\5(Rd*C4ecKL('.O-Xbt/L?6n-@&]BXm,u])3\QkaU`$/2l)?]pJ(+Clk>KDH&G.Un#
%1?%W"(3&NTXbCA8mG%"DE'Dq;96dZZ.)-U/YPceRGu+a&R0er(hC,cTSH^DSEG(u8UQ!+?,Ps_dqa@q'B5alBS0i1"fVk(*h-"\l
%8'5:b5*l8,oQ,kbn8E`1@Em9d\i-q"8eqtnB!$:qeL=7OT3TFnoHU\QFeuI\+c?@t9@>ZMajYUq8f'[dNYlJ8H&)4*43a3FMTe+q
%<7XBa1(u#(.)"$&KL@=AOc12c)p_I08HVC2F&=I!1gI7&'ra/A<1@X?n%^6I8d=Ph@>2Lnf0R\S5"TYYbX,=XfJo+jLV$kKghI`Y
%_N8seZ%PF\2MPR`huTG4:pnTA1ia8EhYoOYRiF_i^Va[i$?q/"quJ4N`qBB.N7*Q\8#TT27Z3\Q?SS?U:?.A#Yob_]KX+$@](WF<
%Y;JlapX4([&_nO/0--p^/=oCi-oI7%4u^_>-nQH\cI">b`<_RoD*/Cf"(24Jg0rn[P-RgG4Bu![)GE03?Bgs+JB(7T9r'%8f>B^U
%<d'LnhG,L`nNcfMO.?c0Z0Uk#,m-1I8+p!&"R!0S[4aG)GN/+&`27d<@Er?#*f";1kj6RL*.;C>@HJ!-B.^`5_+aqd@.Sp9$6A\8
%C"R5/JTspp6apiQC/,lgTujXAr7FADod6X3c9)hj#^k!;BahuWRn0l?`/rKHI(6F.f1n&*%\OB'`>FaFU;HPIE[mB82,(%QX!s,o
%bO9j=9a#['Y*.@-((%u(bA0>;58't4_2hYf(']Md<5Ei)M.f5k^@ZZCr8XL":Yn=W/[i".X%Ac7[qtWR0*Rt*!u?a85q8\]<,4*`
%"A]eO)_&-RY$Q;ADA4-ES4m_n`Q98IOq7Fk\[1g(FB;noVH&h8hlQ/i%u3Q`lI-73.&2>,p@U;L4JIcViH-20!ml(':[H'.Pa$]Y
%/;(Z_ln_jaMdoYX'_KXB^!=!):VPDt$&+%Vs-OQAj8E>*GL52nK@=70%h7l-m;TM^.^FTt*1mi9p>UJ1^sl%V%QX*a;`Ht`&B>nr
%B%&.2TADf8AJk&%#Ujo!S]C!q*AB[6&()4t5"mG5TY/0!DgJoUYG$:OR?$+^;EB!BnXt0VAIc(A$kQT$i]jbglS^/8q`KTibDGaf
%;#'-"]tgO+C"[2OoIEYa*\piFlD[fP+]squ'f?G`A9&:l?Np0U[;\f(6Pjm0`YACC3XF+^a^-7e!ljA9_8;U)l#,79P4TN!!C0BU
%?(a]oSr8i<?[1s8s%q0-8E7q\<kBjjO6s)?]:P?dA08h.:VO]bP(.q@hOMc\@P>YE>>Vf%=pt!S8E/YXH\7ARUV!",_p4%A?4,r,
%)gWj/:e6p^;e?SUU0lBZ^VQnTNC1!GU$4X9U`Dpj44_"j-Q^j&W_pmuML=.i%>GZ65:eZPnWhCMc_^3P1YX-#73CeK"V1Y97Sbb<
%q!_`NkZ-UF_D@bjHh.$>jtYAMTgdkRl&s9U5-*kQc[Ej:X<u2n_jLhD>LseuH)^@H=CA-m&!M"ENt0T!d+"RULS4-U^+^Bu0TMq7
%gSX,._qR8Wh\EDsSO1[/J7ZEaKMN_setlW71u58e`6<*bX?rA?8B%-ogZ1a,38Hl:9YmkF+-Sn?E`0[TM!N-$;b5,%:"DgCGX6d:
%1ktoE5t?S2c.?7\&D68l];kF1Gmu)s4`pAEkIU=p*.n*GF\kib8>%7tPdD61b2G3<Xg#l&c#/^[JZ'jI`K%$e9m/J:UE+Vth1?.R
%<9;AZR2t66DWj3;@>!^i:h[1R$^@11T&:gHV0A3%kgt]XUnVpPX3g,'A[R+@(\%QZFIcokljA?X_(b;3$b#7%o2AP1M[NRMO>hDC
%c&s`&DW%Vh>2S6@R?8\e2\5X%b3Y<jV3H4Tg8']3Bc,YZ1CKQVoUm(fXQ*3VSP>6/ZGULl(8Ium[aXW"JSFII(oAP/(7Z2EO,^tV
%S)RhD<A>?`Xa0F-M4P(In(K;E>bT##Z%!2V]af0V&9A_;lFWq7DA;`g]J56%k,=`+1ScH.e\Mf'MeBhW%c0[U4D\K_V@!qpf!?$)
%H7=Z'fn5/3Bo66h6\Od/'npf],pN,tMET7l.AE%>69IlnG_76K>2"eMURB0>[)+CEi,J:I;HYMD-:/dh%^V5!)!%TSX--!JC5&]G
%qW12?.ccp"!8I#EV^#Y&Bdo^uP+u3X&XKk#!`JG+K>AJ7,LM\)>\'-I#6MG&`1](l",dOJZD@G4.(fP\:=0Fk@Sn)DP$8C/9!;+u
%Q&c^E,EN4sS?GO]$t1bE=^/b\3k(\V<PX\@`hf5G52BA<Yo16@:n.l6Y/+a:mNWl^C@:O`5+??$mM^\!FQ2e7m;bX*OAE[0@qhNQ
%S#HuZ5T\qW!6)C*WNN`5Rc@*JQ0S69)CEjRp]7']9_V,TPJ?tlrm9Eh4Q;%]\7dq1L4'S`cg"<NjL>RZ`\B?]>W5`uE,q_PMSe'a
%(A'!<4#,t%QkViR!l<)l%M]<WlJ!'BZb.)UG3pV]T_VD2n8O;JNuHOl:>%:5PmdU,hKPT7:6Vgq0e>(f?i_$h<$0u5_q%s5fgtY5
%IGZ$h6WADV_&:&f/qjEX7cAM+PJ?Nkp0_=t4+)9Eq=4^G#.esN?)fFZ,F=\/0*m_:LG2.ApWJ0JWJgZ_0E=-_8sH]L3)R[`gq_.F
%_oV`uL[/\c+4R_&hT5/,S-L4Y<+?!`6jK,ST(<nK_V9%f[J&%ZVr'ao#$hH,Re,a")&+n`N)iaT))/eEe.3[7.'f&9HgSUuC_D#t
%i6)KEieT6>ls9Uh'B_p^0fS4`T%r<OP#iCl_PPcZ:"F"<)LSh9_eFNX#-e0!,eL;MS1_`\HCB(EZP78Im4e&3mU=oB>*of=fHUd`
%UjPoq)l$`?0-@[cLoB>VEfud)%?AZH6ta?(8->uOo,TI@0i<hH<RY^n=I<DlGs8W;q3o"[4+&_R<nk\(BeM.EAk3YhM,eahh0)U1
%PJV)=,':-)DD23LWD[rVTV-(I_=Xr8$(+X)dmtchKO+<?Kb^-tN6,Z\Gf,Cp&I%]^Jjs$5gDa$NS2[QaA9W+2fpqX%S-2N6.7:?/
%R]T:sV5MGLC`iG4M$=POT=`#G:P_ghh.-mSQVK#0BR!_JQr#hacoL1#,$L1Ae0q)Dk"=nk6G`FIDOWFrW.6GNJJ!"KUI-F5?V``$
%]:5S!Jl'aiOjF9NCU#27=,!Ce4s?@V'4o223VXpb];p.,[j:8?Y;j/.+5\)m1q6`Zh%d/*j`oS>YJASH:[Z-YcAAoR76JHsJBK+E
%;'IjT,nZEupF)YV6"q`E!ENW/Y-M<uE??JNo:+4(KBKN*I-8?tgCfS8TnUmFm/b,lLo3A3Xo$K6V[W`cTjbEA/Qm<]fRpJ^]nWd"
%*'Vh>7DT_^9sG"C(^#LWi;.\3Ejm^GbdmE/g%B)eii-gem6TLO4ZoVNgsR(%U"e0kHFl;?KO"8Ba8s=WA`iJE2D3UUG'eDfWTUt+
%S)h&1fisrSjRG8PhV9m`Yj^tWD:p0n`O?VV/aY&lT_d>f6qE\WJ&CQQ`kK;qeDI)kE&lhn>ONTb92s$n3,_#-5IHrdj;)[d]_N!X
%cT.JbrV>gU_oV/O7D*5&(IB%qrZ0I^EA!sW/B%j-WR,nmL"&h'*fTmC91?$5_H4@?90M&c>'ING63P6I'$P*F&RLWJOe)f]k->I\
%KiCck,CXVl(h:a>l/_%=/ltUp5!*m(E@5nK:=uI^0>iP*J"=u+48LtPos4MSZ'(38"9fADP45@`]`tnr)3Fn)r=LLJnpr**KS-7i
%%%-2jlEq'NN4/,sP*(OW^Qge+YG@^#L5>p-[!<%[.<]=:PuuX_[cZ>rlG.=n;OS-PIMt"M[)c$h)`'/pWL:($)B?HOXdOeg*L=OP
%%iXqZFZ(1k-A>F;12*o3_ud[^RN0k:QU-8&V+?)Wd#`dY:U:P".%.RT)MBm-(n]jNU$M$SJL\(Pluh)/MbGb@##;dY^CQf5iZrRa
%2CSuJ/]3=^6-=Wq2n4e5Y]\`_CZ"`#g`QT>*m;'%XNCEJ`XMuuU6NuDPE.]XO)ad<mAFrFluDkkT#=G@im*#h^Jh^9=[b\DBGanc
%p_oEI\RC]Ap!Vs%!HQ"OF(b0tIX9eRrZu?7`2_8JVut(G1C3k?4u%;EBadd@Rf2#n=c(`Dg'kLD%LG6X,;u<aLdhh`btf?e7nmOM
%qi*X4%TaBV-h+7t@":4DPsp4I5ar%Hj/P2SGm[OqdSOF7G-/e9<81tg@>M]S_/63.WYci.qfc\DO;s$U\lef<&i0Z_%V"6YRk,qs
%a-&@h(fJk2_AA#PD&M3.Y!7jbpa0"t:8_:*UqW+U]J%hNF#"npTd)VT#!)Q[=]TbIccm$>bIPFFjA&_NUJjut*IL$#Lk]P;6$%Eb
%8q#Z5n2\2U3ZScgE[2[:fC4;I.YdgOSHa3</ssP'!JVgS#3\K-^>.hCSpJ*Z*VqX'Jt@9HB-*,"bhL-5D;&k;mbii$MonUl>Y;M$
%VZIUTZgu!/-@P<5%[\6Z/]JT&K79f-S?^Tu!X<JEj+Kt4*:jB%IBN<R5n2UT3`5aL9S<i5.fPTX`)FFCm-9]VYFeBb%WT5Hc#0X2
%@'Sr;*jDK$(tK2%DgShLWBIp[:rp8B3*fKL-`2M)'$R\`Kk#EUb@9<J<p'[a.[+2V.^+kpLtQ]Y4DkiP4P;)Ai%QV-V\\>:T0FAX
%^08KH/n\<@4p&nOIOcTlEP)[&9Wus.d'V8iJMT,"Z8NAVD,@hUn;kIAc?2f\6:<Pf9qAq:<j8r^L*bZdB'_tVj[gLrBHS9T2GWZj
%Kd$7T^>7b3IRBc@=Ic2;!t0/XlQ5'::Ha2:%Uq]LPmU_&kW#N1i(Xgh;G7^2W^P*U_>P0OO8!^QAb2'[]n8TI[6-4Cce:XmP]<iR
%=)5l2CY5&$Jcs(\"DKtZ=,a^CT1,/Sob]=SSPiAJC9cW]<\\R1/W"D?)^+Eo54j4?3+,W+*gCc[BEtGo^<DFD(N#b<r8,(g)[dkK
%]5)HXi_d,gYn8]QnX15/!Oe?B0;^2VEc[SS1*#g^V=DVMJfTBl_rcj"4bXU>Z@uL*nrWB>WlJ2k63*t*),/cce:OT95HQgt%_!$,
%5Fou^\%uI-?lo$f!oC9pB@T"uKcE/Za0V^#(tk\hoLO\a-ltfGaGSomK8aTL8iR)h7s.IrGu#!'J\>8!&U%OhO\U9b4Coe=L2ZOW
%LUXh,YmNLWKY.Iq!0XD8r(Gn$%j'F[I:nEjW"X:b`?SiK!15p">BW:<jC6@93Lp.@?*qcnc2s/V?6W^?TTrK#kY,F9TL4)>n=&Q6
%oe@EU+$NT2#29;?>u$PQE?`%P!g!poP/S)g-+HWAWj-CCj32/:27VuAXjT.hoIQ1E?in,jpFnk`<B2FRP`PsbEt=%%*mprb<3d>.
%!1=mY\@uAC">.5V6eYm3W)(KqiHrh8%b--Y`Da(o9Kh$?/^\#?<"a,BYX3X/O(`AFf!7O4ZcVbiff?0\+frPLO$U6@JSKY/cQ5:`
%&a8.k&YGc?i;4O=q$^.6]SS?uMYDSu[tRn&J>03"!71&Qqk0\.All3r#kJM77)l?/-=Un3NtC6m.U2GUo>aMM7]R&<iPt:GS@7TG
%RPihk)iG:Mp]VEFNYGp^KXufuR]2>USd1Tp2N&tO@si*<L&fcG4ViYF>F'e"hca=%oat5P4R[*/l.G0'pmhjX,)je2cIg4<h<0Ao
%<-PH]]_^?I#"6a?YuKs.c?mJWYS_71o)O850ZFlQho'*j8/FBe5_E=iPCc#.0'O7bM6tEc30h>`qRL=a*0lWnhRgE.,TDJ*(I;-E
%U`=HD6N*_-_R[o5-hW6J2c9i'C:m%E>HkU%.*BM3&2+IrC]3:1I%KIpN`<4K?9js%["+fE<X9;;Yh./P\me@92IaQ2ZlA=$X(!1u
%BbUGm,;Qe"oc&ia`5Jl26]ReQ%X.g\hW%98FrDU8?RhqZH"X6S+sj^.)m9MJB!VP?(anXERq0_.OYhDW,JQL@c9l5u+jI1/*VQ:#
%7G"cXp/L.<X>"t6+!V0#Lj,7acYN"<E.Yii.NH-\d[JDR'X.LjZ2h_Dr,,\=M/%:;-j>?J8J:_^Oq3Z1+0-K(2(Q"_3s9mb0T[Ba
%f>aVT:&0(YL*ET+c#%'TJJ!0qR_75"oLRn<^eBT.@*%?eC2sg&Y4q5J8na!IDNj1a7=OLh\%e>=Ms$BS!&"kXPs*=uX[(,KD^A8Q
%99pK0/LVp5WcOh)Bu$,Ug`f@T0bPER\OGGuO8R%n3'tqho][A#o6VSWT.%&NdjjE"<]DDk88=g.*"C-5@(b=Rid+dugIDh6()TYK
%*e[<>l.:o:b&lDok%=>LNL7FOJ??q`jgl0e$e0aaMXh3$R0J?dm:+L%/(_jsMP>&b9(^#8$]osqOj+Y@c\IE]fZ'@R?;e,2,B6T*
%AnAJE$&d%Sqq(n,S@qUePo(n;7[&YO<cFB%*_c$Xf:[O@J]$%q1L-X;>MNV?<]Rt*Wa`F'g"BhP(eKIimrQQC'pZ\+_-5@R0$8&7
%nURI7&[BfM%.[p-KXVfm\Ejc>Y>qBgi_^2_8bEY>jYJ]<"u=CT1PMe@'@KlS0hneSiRDAa_su+08"1$E`_F8iS==ToYh:S#W?!WO
%hKOA!RH7'RS)>80C""pnYsj_eG_*[<$A*=@q9:=DY4=8j\0a"KYa+Ui,NaWR+=iE2=]iTiBFi.6Ri.ki_uPpYg0*R:6.#1;X"\s#
%9+*9oVbiYa.>%)R>;I(!*!B75J]g91>jHqOfMQE(md00_N8l"?/b*F>re6`[0%-aO84(sN4I!J3Ho;BWp=WukiU2ihE;$!b=@ch#
%/317;"<QDn$s7H'@F<1VRO+(UIc309n.Tj<n@ku[H%1T*EeKsViefj*cHYg,<=95%Jl9qQK2\>Q#rYs-S*2XB3MNqpZq%5(6"qZc
%".N;#+If`XPGHnXj_!HK9-c[j=#r>f]%FV\*.O[KF_uh4RJ=/,e'YjG_He'4j[9PE-1Vi]=Bp2,57VREQ4m"-_:aE&)f0YYT/Z>\
%R6>Y7R]9bP<Iq/c3O$+CM'7#qMU6<W@d)AmQP#l5hSRpFOq51U9s]^14&C2sE0Z9A!m@c]<_O4<4/D$/F27n>cXi5XITuZ+ar=TQ
%en<b6(rghajsb&!:\4)raf28P_lM]sRXY7nJN%ql^Jlg;dO(87M;4u\4'&j?iRQ\^.rQV/Xc"TKKC^o.;,*r'fBFj/p:nMN@&h-P
%?qL#r5Og(k=Q4;K.;T'8kH9]CUjeCdqi6`+Vq5_+9?jfS8,h\3e]UuJkota,i&1N"GLlbsePD>Q1.<p6S/g`@3Q4r+GaEb$12\9$
%K/Z=piRI6g6Zc#+O4T.67`f9GOE&j9m*BhK@N%$VKb<9/$,S2hQlU.QW6UK.KO$qrV`6P(S5o%ocfqjA:9JV9iKC+AgPVZ.P9^JU
%UAbpsC\NKn+gf1+RKc\SF_\ZOD5^4$)&A*8Ub[m.clNfEGZ4dFY.9Br?(6)f9R#nQf,/)'1c'o+O6^oKe:WM=_iqGq<[DDfhA5V%
%9#1\R2&Y^o<FR<mqOi3uFSF1?5\N11ISF.nDp**Yi$SA-9i]51F!^1k/G&MWon&`Z<udspj@^(X\A=8lZ<*^Ld.3i)DHO=\V$R`W
%Bh/7K;3kSJ%8J'>b(i0O"M2HhG@.D5i9DQW:(`5,8EQSP#^4ZIJ=Q6O%f\FlgF1n>8"`Ks%]YtP_S\7r>u`gg<ksq=qJtl+jtDtk
%0pS0(^+CiadaYV9\r(q.-ud?jG.IB+4IP/f"QOQ)[R6nhT;+qO1&dLPW<]K-.dG*^jdnr/pt?Y^4GV>enCEb5lrJ4L;"@8?1aF"V
%nOO_hA-&hel7<e.63*`7lU-ESJtbY8jKfjo5`#VL$brbscFLP,?Ds=R'G73;"YiY6N3C=re!`%dH!cl]-Pc+kcQt?WYtDK&Sf[l?
%a+M^[qBe#.7f5<W^lL9h=hF2Q<;]5%*Z1a2qJ(!bfY7\B'C-k]ansXdjGoA1OLVC9Dc_&DE2j<-&n1uV3>*h?mjTGrRhIP20:'*q
%-PJ2!##\\:HW_X88OT*)Op3S]N&[SXk=W.SbgS3Pn.=>7j?EJ?]P(mDOa;$TbCL/Odg.<G.kGtf)X,2X@($%HY]*X_U;t@)/_^X`
%N-CPJTZg[hN[hPu.CNY=6-kmKP!MFPEe'BB'jqcg_?:Jsl:!Y?-KCKhp+q#s:d22[S/$UbDd:Qp+>miJ4If6gp4ru&:C#B+4\'$8
%8YK#'ROPrlkAJK?)Cq(h32K1oH#Hr:8=Dpd#5XY>)agVl&Nh/!f7OM&bfj^#jt9E"T!G(=f,gFZ$MSC>4$;'*IbY:>OdE7>oZ]%_
%CH)03.1=1^hXEG;/K!8#E1GFjC*3tjQ!)'eN49^Q?b\BHQ\g\9j?k7AKDI3)h+!6"_Bc`k2*JC<7'ZofaFZ]S]#^m\rbKG]G9&eM
%,a7FRE8e\W#bM(I8$0b=9_ZfRiuApmjt3uW<5S=N(JJcYU>UVN=%BkLMNdZL7Y\5J6cU9]Fin2m=(7(t=B0J:T6+?nQ&]5/&cO^+
%5'%eJc><iZ2Rq]4$+n$/CQp:<4Y'gC/Q,m;.8Dp8+RMb9&K_)TjF7hC(puA0!<Y_T;+hb8_3qDsr?on][)X*&rB6BQaP#Y9Y&jA:
%Jg$Z&HOX:!7Degs&AgEIml6#.b4G;lhPeJNWYMIM'CnkQ@MR)lp>q*r`P^_VnV@40s$?!"OaE%O!C.5W3.3FXV-4#@&^]hq,o;XI
%&NSpI<k'5==QQL!R,D1AR_a1f).aT:3NMMIGFSgH&(eLuA^F,T@COJ^,ub]NAdVOlTm*c#5e,*ei-ZH2lbpeg+]@0%2MSUJ(.B?Y
%oH=0KN.OuV`#oDXdkpA;!T*5-3P2pG9]*-d!+%]m*E,\6)+.,pm`YKHrLTlb@DHEGVb^NGNKg7Pm\m(s"-)0^l3>@X%]*.HaA5PO
%IHp].0X6TtN(pRfJ.Df$-UTS0U]?/b&MRcK2#Vst%D"YmdPR)H)>?Qgclr@]P:"NSCac\<bH_-%YNP]^BhA1hZ)'Amj;>As!d5U\
%\[,T%,N]+HX0B:2C2)B-q9V^g2<\CbD:!<;MUa,I0#eGlB4YOE/Gbjtl]?he0H\Oe%(Sth[hmPs73%@Plm\8rJ#VHoh-rEA8UbT'
%pDSGh!PGn83CgA`[sZs$OTPM[p%VfiN<-BB@aI^Xm<U^-P8auB[D5bC!mbRpEdZf#+nBD'MbB\?QBRhpDlK8nS,G!sRQ.Aj[AW4B
%M3sA\LlBYIM^REU)*rUI\+,bdpW4r*B(H@2#Mj[3UPbD)#e8@1j2YV4^69::AJS'*EZ1Ad;_cSk*d;)_$/[ePrE\R36bf8G^Eh3d
%qsqu+/Qd^]AY'ZR3ZuNJ;;9#,DM,Be)&89o`,Vr]o:8<*E2,+3&%^^"[6r/3,XaMRIub:S]FfDO]tK#jX;%NB[?U&>n&HR2@Au$b
%W`sP0$$fR3kg$2Bq`\9GLtPm8$bPe6hJN[V1<V=K>j1qC&mNB`&2Z_h,BFuKi)!=_%0edl^Td23gCVQPALd8Qm:NS:Zs5N&0"8+u
%L&fh0>^j\.1ILPr2Ns7O:kf>[E#cYY^I)_hWF$qB^[V2"hdSoYb:PM-J!`]G%pT3]<E*`-&TRP"mNnufO_e.=p1p`8R)6O.]+i#\
%i@])kY[>^$F58qPEAGDiCfCnAi_khY4NB-MTG_nu.A=^1l19@k[Dt2L*TZ8>A;e\cUp%?[*Wd;V3;YfW*SV\r6F;FN1gE8B9S28!
%RkBM`qAkWV*^>8dD]a"0>%NO8bg(Y:Zg2[I_ne&aeruV^XFHg3%>$5(!d7OZ8p?YFO2G\FBe-g5r6U3l("\R*"T,XM\\[cl5Q@/E
%:UW!0M:e*!UHK"/fE&jW?`J*]mNPs..W(,boZk._Tll#$;1(C=JRnKB3pNEg[7,@ThsHo0KkER[r%Y1Yn/91j4rgd(H@F<]Tm4AG
%_'#i9jVpY:'Q`[?K^Ek/o8H^D(fdSWd"G.?a5(1PXG`S`W:)Vq<bi\&W=iJ*n^5bPrbk:t/(4OKdMobdq.@KT1'd[JNTE2Fs!q>D
%UkU&hk%O:<i?.(IiHI8]_;s"cc5Q3C&g48aC<#gNiM/FcSc/2lr?3:7CF01ZjK;C.T$t<]c]3$A8FIs\0"p+Z,I4YmfEHI&W`Z5_
%S?_t<i58X&SfPRu@S@>E%C['q4W@-H]^6A%<g%#M\uMP,4f?U)MWQ'FfG-NYUJ108f:#'UL,7@'[uS+5k<iZaB=kq@.ofc>5Pr?f
%ei-^Vl",_XU:*TC<kV[U&;Ee,,Nq"(&5FW[<b>bX=:LPTAKY7IS-e<[j8-OWG?$MF,e4u,7?B+U;:/O&O-R[,gr2Ms*!'\N<R8p+
%l@JmhlVjc["9&Y02L^IY"U'\'$Ye,B?P--7NY38X",6JA9\3d%=-0KJAnJ!JZ3L*INot?e"Kn>V4?!P;kL.Ze*;M<i$G>C9+B1(k
%.o&8e/16k0+n1DL_44/Ij8Bf"1JG*_4!'78b5)2VYjkB[+m?>?f\hT-JlAH@$Nn<d_UOK?bkNn%1/XhJP2a;`ejUhQ#U(*0=.a?"
%'.H?mDT]2l.m(kW<1$j%"75WGKr)LH%,\6IQEUWLpkgV_nSO.:?$[0]j%2gQ,Rc!mI)-pGEs+jT_B?3^mUnEa_Ga>-mW&!:Jf_!,
%hss^e/LQ\A7["4ghL0sqK?bg1%XmttRO!r:4V=EQA1J9-R;MbJ8"C%qAjje3Kr7]h#p)aF9*U(=-N*1gQd-\i3,;J'*mH9un&oJO
%MQ$lfEG5p'5qK[lI04ePWT".&5FgOHc$f<[(J>PkXLW\aC_,-jmi..:36TCYQWt*skg26.Nf4m"48#`\AB)aa<EBm\==!B!R[[./
%f:<4)=ho5>LJ8c&]B-a-OX2e)E;X\>>Vu3.?bM8S#^#f,^+(5mq[TD#*CB[cL"jlmLE5)ed,qITH&K[KTQ@t-EecG1?hNWl-5S6$
%cH@$VUm@iKS.`':/iO=)-1s;`k4moha_:.:j*E"JT=B(-:l6lgfj@TeKAaBEXcLnq$C-ONnD#`qcPqV:@VW*Wg[S4`&Y=9_27[,/
%3Nlc9SVP(i6+@.GB/8or(p70d1Z2Ibe`&s24]t\(H=B4i<;F8'8\tP-O@3u)8'2n]1m3PjqZ=GVG('(uU8SnRNQBf,!r98MF:Rqb
%4i4&+Z[3&'qZc[j"XcIjptb;TB^N.8ILXnS6e,pJ\deK@h_u*hB2JU:24PWO=lQJ*S<gCjT/Ys[JoicMc=l@V<#ds,[NN:553N&/
%Ve\2Fl3%Mdbe"AK,pp8GDuO_?=>]d"=1s5B[ike0L:I26+q0H`d[;QK`g+$T-$gbU='46$TGM.O:?X(/k_ZL,iNS]o9doFfCDZW-
%O'u`4o(G&g/GBSZf?OU@5?p5cc$f<[f2DJ]WL94dQQbJfI>>Z-JFg-G<_^aM,R+h#69X/_k6;-',NNb_'+28Ai@#^@Y#sI"jJs#M
%Z&VZ\dc>@i/p@imV>Skgd.,SmT@)^ehp'u/'<#iIC.Q^XpV!:^=MX$_3qQ>2&>]14XRLtcZVFAKESMTVo?0o[AT[OGaaoG@PKQ*d
%Qar^tnsk:_WHme1ELt0;c6"Z%N93;cmC+ehbt/DqmlT5lfM4#1217(/1RH,lkiJgE8gtWB"C[4Ye_/^Zq7c"/)hkjc*.1D#<-Guf
%i,[_*p^+qBNZZPaN93>$Wu$>g+7%ua=A.>c.p/VLH1p1r%&p<pYr564)LJHj8S"o^T-!/n5_KS!#k,qe#=a^=oOD_Gb-*dPXg\c+
%A]\.@iV;ZcO_F9[_g2nC<_gZB/0P4A^>E<[,:X=@XO)'F/5gJfZ`\g%bZ[h\IF*in[M4,6g"qT,UZD+UD_B,C[Ku7P*&Q5n#KE^i
%I*-ukhF*Q'*VV'Mi81^q$FT)WX=/cRJ"Sj]2@l8#BTs`)+"R%_8Cs""q:#9^U/TJ!$D!<7^S8>pdFoZ-#/Dh'gcD[+C+.)#Nh7qp
%M&&=&mFM@L>m*q1,A#akP\)JL7!WhYjnY@]d;!7AL:1JCnN0t%8)gGfICG*NBQ@R%F0e@@b#?iOV*R'tW(FMSHXJMWF:[fTq!$L(
%\+nWp]oWXhASthhR3DQX7igm<LgX3Xgc$Uqjuk!!-h^Gl)u)%(5G^?';Y-X%"ZhD5`I`[nJaIWhLHGqk+O)tY#hP)LS3NN,)9mSQ
%q.7SO9TR[JdBUq&Z[ue_Tc@N>?#BFmB^`dRZE;JHH&k+p-MR:D77&a;SWDnKBT1RI7#+XHE]/Y-lV*P3G7Ec4C5m\Tn\a%:B^MRu
%@?GJ*e.ES>7I"D6g(^O&j0Y8\nj]RhJLiJk((TQ)4>R_OS3JQ4b2\"8Rp2P,cn6+k46q*)Nof\5=mm;k?bRV$r,?gh2##[1]a0:a
%If,[bqr>HjQi"P4rr#(\_]Sm6J&qZWTDnE=^]*m*If%mGT,7!Ps7E3Rs7W)bp8@rd^OH(75Q8Qms8Jqro@o<jrT,\^rT?EDo5F[+
%qU:Kis6[;1s79Utp=kYCs,Xqo?Qcjl>k!M5r6p/.meQk`M0%DL~>
%AI9_PrivateDataEnd
