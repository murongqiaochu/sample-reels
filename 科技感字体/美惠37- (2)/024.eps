%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: plata_12.eps
%%Creator: Adobe Illustrator(R) 19.1
%%For: user
%%CreationDate: 5/12/2016
%%BoundingBox: 0 0 1201 1200
%%HiResBoundingBox: 0 0 1200.0020 1200
%%CropBox: 0 0 1200.0020 1200
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.1.0 x29 R agm 4.7731 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=100 RasterRes=1 GradRes=1 Text=1 Stroke=0 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c067 79.157747, 2015/03/30-23:40:42        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
            xmlns:photoshop="http://ns.adobe.com/photoshop/1.0/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">abstract vector background with high tech circuit board Vector Illustration</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:creator>
            <rdf:Seq>
               <rdf:li>Iryna</rdf:li>
            </rdf:Seq>
         </dc:creator>
         <dc:description>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">abstract vector background with high tech circuit board Vector Illustration</rdf:li>
            </rdf:Alt>
         </dc:description>
         <dc:subject>
            <rdf:Bag>
               <rdf:li>circuit</rdf:li>
               <rdf:li>vector</rdf:li>
               <rdf:li>backgrounds</rdf:li>
               <rdf:li>tech</rdf:li>
               <rdf:li>processor</rdf:li>
               <rdf:li>abstract</rdf:li>
               <rdf:li>abstraction</rdf:li>
               <rdf:li>chip</rdf:li>
               <rdf:li>card</rdf:li>
               <rdf:li>design</rdf:li>
               <rdf:li>electrical equipment</rdf:li>
               <rdf:li>integrated</rdf:li>
               <rdf:li>technical</rdf:li>
               <rdf:li>computer part</rdf:li>
               <rdf:li>hardware</rdf:li>
               <rdf:li>engineering</rdf:li>
               <rdf:li>line</rdf:li>
               <rdf:li>cyberspace</rdf:li>
               <rdf:li>computer equipment</rdf:li>
               <rdf:li>graphic</rdf:li>
               <rdf:li>electronics industry</rdf:li>
               <rdf:li>digital</rdf:li>
               <rdf:li>technology</rdf:li>
               <rdf:li>computer</rdf:li>
               <rdf:li>circuit board</rdf:li>
               <rdf:li>illustration</rdf:li>
               <rdf:li>creativity</rdf:li>
               <rdf:li>connection</rdf:li>
               <rdf:li>computing</rdf:li>
               <rdf:li>backdrop</rdf:li>
               <rdf:li>science</rdf:li>
               <rdf:li>cover</rdf:li>
               <rdf:li>internal</rdf:li>
               <rdf:li>connect</rdf:li>
               <rdf:li>art</rdf:li>
               <rdf:li>industry</rdf:li>
               <rdf:li>conceptual</rdf:li>
               <rdf:li>construction</rdf:li>
               <rdf:li>textured</rdf:li>
               <rdf:li>computer chip</rdf:li>
               <rdf:li>mother board</rdf:li>
               <rdf:li>motherboard</rdf:li>
               <rdf:li>black</rdf:li>
               <rdf:li>blue</rdf:li>
               <rdf:li>sun</rdf:li>
               <rdf:li>moon</rdf:li>
               <rdf:li>planet</rdf:li>
               <rdf:li>nature</rdf:li>
               <rdf:li>trees</rdf:li>
               <rdf:li>landscape</rdf:li>
            </rdf:Bag>
         </dc:subject>
         <xmp:MetadataDate>2016-05-12T13:18:49+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2016-05-12T13:18:49+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2016-05-12T13:18:49+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A8qYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;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&#xA;7FXYq7FXYq7FXYq7FXYq/wD/2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:2679a242-e400-ed4c-9cee-dda050d415bf</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:2679a242-e400-ed4c-9cee-dda050d415bf</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:0550ab38-6b5e-40b1-b6ad-a1a25c624b32</stRef:instanceID>
            <stRef:documentID>xmp.did:95136AEAE0BDE511B2BBC0EB12123494</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F07763D45588E411BF89F345A28D8C9F</stEvt:instanceID>
                  <stEvt:when>2014-12-20T17:10:37+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:29845C695A88E411BF89F345A28D8C9F</stEvt:instanceID>
                  <stEvt:when>2014-12-20T17:19:01+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:2E845C695A88E411BF89F345A28D8C9F</stEvt:instanceID>
                  <stEvt:when>2014-12-20T17:33:07+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4365C60ACE89E4119A65C8F5B8A1FEA0</stEvt:instanceID>
                  <stEvt:when>2014-12-22T13:34:24+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0B5A99264D6BE51194FFADFDE0B012D7</stEvt:instanceID>
                  <stEvt:when>2015-10-05T13:38+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:95136AEAE0BDE511B2BBC0EB12123494</stEvt:instanceID>
                  <stEvt:when>2016-01-18T14:42:47+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:20BA851AF2BDE5119314DC75DE111CE2</stEvt:instanceID>
                  <stEvt:when>2016-01-18T16:45:23+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Bridge CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/metadata</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:79FF448EF8BDE5119314DC75DE111CE2</stEvt:instanceID>
                  <stEvt:when>2016-01-18T17:31:43+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Bridge CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/metadata</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:2679a242-e400-ed4c-9cee-dda050d415bf</stEvt:instanceID>
                  <stEvt:when>2016-05-12T13:18:49+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>1200.000000</stDim:w>
            <stDim:h>1200.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=0 B=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
         <photoshop:Headline>abstract vector background with high tech circuit board</photoshop:Headline>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1200 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1200 li
1200 1200 li
1200 0 li
cp
clp
1200 1200 mo
0 1200 li
0 0 li
1200 0 li
1200 1200 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
0 0 0 rgb
f
729.587 1050.86 mo
730.936 1052.21 730.936 1054.4 729.587 1055.75 cv
728.235 1057.1 726.049 1057.1 724.698 1055.75 cv
723.347 1054.4 723.347 1052.21 724.698 1050.86 cv
726.049 1049.51 728.235 1049.51 729.587 1050.86 cv
cp
724.737 912.021 mo
723.386 910.672 723.386 908.482 724.737 907.131 cv
726.089 905.781 728.276 905.781 729.628 907.131 cv
730.978 908.482 730.978 910.672 729.628 912.021 cv
728.276 913.373 726.089 913.373 724.737 912.021 cv
cp
732.159 912.592 mo
734.161 909.435 734.801 905.67 732.159 903.025 cv
729.519 900.385 725.235 900.385 722.593 903.025 cv
719.954 905.67 720.936 909.246 722.593 912.592 cv
723.245 913.912 724.425 915.787 725.667 916.791 cv
725.667 1046.06 li
724.411 1047.06 723.214 1048.96 722.554 1050.29 cv
720.899 1053.64 719.913 1057.21 722.554 1059.86 cv
725.196 1062.5 729.478 1062.5 732.118 1059.86 cv
734.763 1057.21 734.122 1053.45 732.118 1050.29 cv
731.274 1048.96 730.224 1047.34 729.124 1046.34 cv
729.124 916.58 li
730.237 915.58 731.304 913.943 732.159 912.592 cv
cp
0 .862745 1 rgb
f
729.935 849.56 mo
731.286 848.209 733.474 848.209 734.823 849.56 cv
736.175 850.908 736.175 853.098 734.823 854.449 cv
733.474 855.797 731.286 855.797 729.935 854.449 cv
728.583 853.098 728.583 850.908 729.935 849.56 cv
cp
730.853 1128.11 mo
730.853 1106.08 li
730.853 1105.07 730.411 1104.11 729.64 1103.45 cv
714.851 1090.83 li
714.851 878.148 li
732.212 860.867 li
732.515 860.566 732.738 860.221 732.906 859.854 cv
734.503 859.434 736.143 856.938 737.356 855.019 cv
739.358 851.863 739.997 848.098 737.356 845.453 cv
734.717 842.813 730.433 842.813 727.79 845.453 cv
725.149 848.098 726.135 851.672 727.79 855.019 cv
727.859 855.158 727.935 855.305 728.015 855.453 cv
727.773 855.598 727.541 855.762 727.333 855.969 cv
708.954 874.264 li
708.304 874.912 707.935 875.793 707.935 876.715 cv
707.935 1092.42 li
707.935 1093.43 708.38 1094.4 709.149 1095.05 cv
723.938 1107.68 li
723.938 1128.11 li
723.938 1130.02 725.485 1131.56 727.395 1131.56 cv
729.306 1131.56 730.853 1130.02 730.853 1128.11 cv
cp
f
709.581 854.449 mo
708.229 853.098 708.229 850.908 709.581 849.56 cv
710.931 848.209 713.118 848.209 714.47 849.56 cv
715.819 850.908 715.819 853.098 714.47 854.449 cv
713.118 855.797 710.931 855.797 709.581 854.449 cv
cp
715.438 1131.56 mo
717.345 1131.56 718.895 1130.02 718.895 1128.11 cv
718.895 1112.56 li
718.895 1111.66 718.54 1110.79 717.903 1110.14 cv
703.19 1095.16 li
703.19 874.473 li
714.622 862.289 li
715.754 861.084 715.851 859.277 714.947 857.965 cv
715.697 857.055 716.401 855.965 717.001 855.019 cv
719.003 851.863 719.642 848.098 717.001 845.453 cv
716.546 844.996 716.038 844.625 715.502 844.326 cv
725.661 832.916 li
723.077 830.615 li
711.608 843.502 li
710.086 843.639 708.602 844.287 707.436 845.453 cv
704.794 848.098 705.78 851.672 707.436 855.019 cv
707.86 855.877 708.509 856.971 709.251 857.908 cv
697.213 870.742 li
696.611 871.383 696.275 872.227 696.275 873.106 cv
696.275 1096.57 li
696.275 1097.48 696.631 1098.35 697.266 1098.99 cv
711.979 1113.98 li
711.979 1128.11 li
711.979 1130.02 713.526 1131.56 715.438 1131.56 cv
cp
f
687.951 853.584 mo
686.602 852.234 686.602 850.047 687.951 848.695 cv
689.301 847.344 691.49 847.344 692.84 848.695 cv
694.189 850.047 694.189 852.234 692.84 853.584 cv
691.49 854.935 689.301 854.935 687.951 853.584 cv
cp
698.869 1124.66 mo
698.869 1117.31 li
698.869 1116.31 698.432 1115.35 697.67 1114.7 cv
687.633 1106.04 li
687.633 873.01 li
690.145 871.646 li
691.041 871.164 691.678 870.305 691.883 869.309 cv
693.855 859.76 li
694.056 858.795 693.832 857.85 693.318 857.102 cv
694.069 856.191 694.773 855.104 695.373 854.156 cv
697.047 851.514 697.761 848.453 696.409 845.975 cv
698.414 834.215 li
695.004 833.635 li
693.37 843.213 li
690.881 842.09 687.853 842.543 685.807 844.59 cv
683.166 847.232 684.15 850.809 685.807 854.156 cv
686.234 855.023 686.892 856.129 687.644 857.072 cv
687.379 857.447 687.185 857.879 687.086 858.359 cv
685.436 866.334 li
682.525 867.912 li
681.412 868.516 680.717 869.684 680.717 870.951 cv
680.717 1107.63 li
680.717 1108.64 681.154 1109.59 681.916 1110.25 cv
691.953 1118.9 li
691.953 1124.66 li
691.953 1126.57 693.502 1128.12 695.412 1128.12 cv
697.322 1128.12 698.869 1126.57 698.869 1124.66 cv
cp
f
669.984 863.754 mo
668.635 862.404 668.635 860.215 669.984 858.865 cv
671.334 857.516 673.523 857.516 674.875 858.865 cv
676.225 860.215 676.225 862.404 674.875 863.754 cv
673.523 865.106 671.334 865.106 669.984 863.754 cv
cp
676.141 1124.66 mo
676.141 868.607 li
676.141 867.977 675.958 867.393 675.662 866.883 cv
676.297 866.06 676.891 865.141 677.408 864.326 cv
679.406 861.168 680.049 857.402 677.408 854.76 cv
674.766 852.119 670.48 852.119 667.842 854.76 cv
665.199 857.402 666.184 860.979 667.842 864.326 cv
668.25 865.154 668.865 866.201 669.575 867.115 cv
669.357 867.568 669.225 868.07 669.225 868.607 cv
669.225 1124.66 li
669.225 1126.57 670.771 1128.12 672.682 1128.12 cv
674.59 1128.12 676.141 1126.57 676.141 1124.66 cv
cp
f
653.375 854.449 mo
652.025 853.098 652.025 850.908 653.375 849.56 cv
654.727 848.209 656.914 848.209 658.264 849.56 cv
659.615 850.908 659.615 853.098 658.264 854.449 cv
656.914 855.797 654.727 855.797 653.375 854.449 cv
cp
659.531 1129.56 mo
659.531 862.154 li
659.531 860.82 658.766 859.674 657.658 859.098 cv
658.81 858.109 659.917 856.412 660.799 855.019 cv
662.33 852.606 663.058 849.836 662.137 847.484 cv
666.453 842.019 li
666.453 818.652 li
662.996 818.652 li
662.996 840.816 li
659.915 844.717 li
657.274 842.848 653.598 843.088 651.23 845.453 cv
648.592 848.098 649.576 851.672 651.23 855.019 cv
651.88 856.334 653.053 858.197 654.289 859.207 cv
653.289 859.813 652.615 860.902 652.615 862.154 cv
652.615 1129.56 li
652.615 1131.47 654.164 1133.02 656.074 1133.02 cv
657.982 1133.02 659.531 1131.47 659.531 1129.56 cv
cp
f
636.9 866.172 mo
636.738 864.271 638.15 862.596 640.051 862.434 cv
641.955 862.271 643.627 863.684 643.789 865.59 cv
643.953 867.494 642.541 869.164 640.637 869.326 cv
638.734 869.486 637.061 868.078 636.9 866.172 cv
cp
645.508 1133.02 mo
647.416 1133.02 648.965 1131.47 648.965 1129.56 cv
648.965 872.065 li
648.965 870.672 648.135 869.477 646.946 868.93 cv
646.904 867.43 646.343 865.551 645.859 864.021 cv
644.852 860.822 642.761 858.154 639.656 857.863 cv
639.656 835.08 li
636.197 835.08 li
636.197 858.49 li
636.217 858.49 li
633.745 859.668 632.134 862.275 632.379 865.162 cv
632.695 868.889 636.064 870.44 639.693 871.332 cv
640.367 871.498 641.213 871.654 642.083 871.742 cv
642.073 871.85 642.051 871.953 642.051 872.065 cv
642.051 1129.56 li
642.051 1131.47 643.596 1133.02 645.508 1133.02 cv
cp
f
616.385 854.102 mo
615.035 852.75 615.035 850.563 616.385 849.211 cv
617.734 847.859 619.924 847.859 621.275 849.211 cv
622.623 850.563 622.623 852.75 621.275 854.102 cv
619.924 855.451 617.734 855.451 616.385 854.102 cv
cp
637.926 1128.11 mo
637.926 889.557 li
637.926 888.607 637.535 887.699 636.848 887.045 cv
622.367 873.344 li
622.367 859.922 li
622.367 859.113 622.077 858.377 621.61 857.789 cv
622.414 856.844 623.17 855.68 623.807 854.672 cv
625.807 851.514 626.449 847.75 623.807 845.106 cv
621.164 842.463 616.883 842.463 614.242 845.106 cv
611.6 847.75 612.586 851.326 614.242 854.672 cv
614.698 855.596 615.412 856.789 616.225 857.769 cv
615.749 858.361 615.453 859.104 615.453 859.922 cv
615.453 874.834 li
615.453 875.785 615.844 876.693 616.533 877.346 cv
631.012 891.047 li
631.012 1128.11 li
631.012 1130.02 632.561 1131.56 634.469 1131.56 cv
636.379 1131.56 637.926 1130.02 637.926 1128.11 cv
cp
f
594.326 851.412 mo
594.164 849.512 595.576 847.838 597.477 847.674 cv
598.193 847.613 598.876 847.775 599.459 848.104 cv
599.459 848.334 li
599.791 848.334 li
600.576 848.902 601.126 849.785 601.215 850.828 cv
601.29 851.703 601.021 852.521 600.536 853.176 cv
600.475 853.252 600.413 853.326 600.359 853.404 cv
599.791 854.049 598.988 854.486 598.064 854.566 cv
596.16 854.727 594.488 853.316 594.326 851.412 cv
cp
626.689 1131.56 mo
628.6 1131.56 630.146 1130.02 630.146 1128.11 cv
630.146 896.742 li
630.146 895.756 629.725 894.816 628.988 894.158 cv
612.859 879.781 li
612.859 862.154 li
612.859 861.297 612.541 860.473 611.963 859.834 cv
605.787 853.006 li
605.307 852.475 604.699 852.129 604.052 851.969 cv
603.836 851.041 603.55 850.1 603.285 849.262 cv
603.177 848.918 603.052 848.58 602.918 848.25 cv
602.918 835.08 li
599.459 835.08 li
599.459 843.873 li
598.457 843.283 597.297 842.981 595.975 843.094 cv
592.254 843.41 589.49 846.682 589.807 850.404 cv
590.123 854.127 593.49 855.682 597.119 856.572 cv
597.978 856.785 599.115 856.981 600.227 857.037 cv
600.349 857.25 600.488 857.457 600.66 857.646 cv
605.943 863.488 li
605.943 881.33 li
605.943 882.316 606.363 883.256 607.102 883.914 cv
623.23 898.293 li
623.23 1128.11 li
623.23 1130.02 624.779 1131.56 626.689 1131.56 cv
cp
f
729.444 833.924 mo
724.161 833.924 719.876 829.644 719.876 824.359 cv
719.876 819.078 724.161 814.793 729.444 814.793 cv
734.726 814.793 739.01 819.078 739.01 824.359 cv
739.01 829.644 734.726 833.924 729.444 833.924 cv
cp
1 1 1 rgb
f
664.725 819.574 mo
659.441 819.574 655.158 815.293 655.158 810.006 cv
655.158 804.727 659.441 800.441 664.725 800.441 cv
670.008 800.441 674.291 804.727 674.291 810.006 cv
674.291 815.293 670.008 819.574 664.725 819.574 cv
cp
f
695.412 835.08 mo
690.129 835.08 685.846 830.797 685.846 825.514 cv
685.846 820.229 690.129 815.947 695.412 815.947 cv
700.693 815.947 704.978 820.229 704.978 825.514 cv
704.978 830.797 700.693 835.08 695.412 835.08 cv
cp
f
634.469 837.783 mo
629.186 837.783 624.902 833.502 624.902 828.219 cv
624.902 822.938 629.186 818.652 634.469 818.652 cv
639.752 818.652 644.035 822.938 644.035 828.219 cv
644.035 833.502 639.752 837.783 634.469 837.783 cv
cp
f
600.576 837.783 mo
595.293 837.783 591.01 833.502 591.01 828.219 cv
591.01 822.938 595.293 818.652 600.576 818.652 cv
605.859 818.652 610.141 822.938 610.141 828.219 cv
610.141 833.502 605.859 837.783 600.576 837.783 cv
cp
f
1066.88 746.68 mo
1065.52 748.018 1063.33 747.996 1061.99 746.631 cv
1060.65 745.268 1060.68 743.076 1062.04 741.742 cv
1063.41 740.406 1065.6 740.43 1066.93 741.793 cv
1068.27 743.154 1068.25 745.346 1066.88 746.68 cv
cp
1071.64 742.709 mo
1070.64 741.479 1068.82 740.31 1067.53 739.656 cv
1064.19 737.965 1060.63 736.941 1057.96 739.555 cv
1055.29 742.168 1055.25 746.453 1057.86 749.121 cv
1060.48 751.789 1064.25 751.188 1067.43 749.223 cv
1068.81 748.365 1070.49 747.291 1071.5 746.166 cv
1081.07 746.166 li
1088.99 737.229 li
1086.41 734.935 li
1079.51 742.709 li
1071.64 742.709 li
cp
0 .862745 1 rgb
f
1010.42 735.279 mo
1009.06 733.928 1009.06 731.74 1010.42 730.391 cv
1011.76 729.039 1013.95 729.039 1015.3 730.391 cv
1016.65 731.74 1016.65 733.928 1015.3 735.279 cv
1013.95 736.631 1011.76 736.631 1010.42 735.279 cv
cp
1015.58 738.805 mo
1016.34 737.854 1017.01 736.731 1017.45 735.85 cv
1019.1 732.504 1020.09 728.928 1017.45 726.285 cv
1014.8 723.643 1010.52 723.643 1007.88 726.285 cv
1005.24 728.928 1005.88 732.693 1007.88 735.85 cv
1009.04 737.685 1010.59 740.055 1012.12 740.625 cv
1012.12 759.832 li
1040.08 788.815 li
1087.7 788.815 li
1087.7 785.356 li
1041.55 785.356 li
1015.58 758.438 li
1015.58 738.805 li
cp
f
956.328 810.793 mo
954.965 812.131 952.776 812.107 951.439 810.742 cv
950.103 809.379 950.126 807.19 951.49 805.854 cv
952.853 804.519 955.043 804.539 956.379 805.904 cv
957.717 807.268 957.693 809.455 956.328 810.793 cv
cp
961.204 806.967 mo
960.23 805.684 958.315 804.447 956.975 803.766 cv
953.641 802.078 950.076 801.051 947.407 803.668 cv
944.738 806.281 944.693 810.565 947.307 813.234 cv
949.922 815.902 953.698 815.297 956.876 813.332 cv
958.199 812.514 959.802 811.496 960.818 810.424 cv
962.293 810.424 li
1013.13 861.715 li
1087.7 861.715 li
1087.7 858.256 li
1014.57 858.256 li
963.735 806.967 li
961.204 806.967 li
cp
f
912.58 975.17 mo
914.447 975.57 915.64 977.406 915.241 979.273 cv
914.844 981.143 913.01 982.332 911.141 981.935 cv
909.273 981.539 908.08 979.703 908.478 977.834 cv
908.875 975.969 910.713 974.775 912.58 975.17 cv
cp
894.379 963.516 mo
906.178 975.06 li
906.034 976.258 906.03 977.586 906.043 978.736 cv
906.084 982.473 907.596 985.981 911.252 986.76 cv
914.905 987.537 918.499 985.203 919.275 981.551 cv
920.053 977.894 917.281 975.434 914.066 973.525 cv
912.381 972.523 909.387 971.221 907.813 971.822 cv
896.799 961.043 li
894.379 963.516 li
cp
f
974.361 854.896 mo
974.361 852.984 975.906 851.438 977.818 851.438 cv
979.728 851.438 981.275 852.984 981.275 854.896 cv
981.275 856.805 979.728 858.354 977.818 858.354 cv
975.906 858.354 974.361 856.805 974.361 854.896 cv
cp
983.933 856.99 mo
983.788 855.838 983.491 854.66 983.193 853.781 cv
981.999 850.244 980.168 847.018 976.43 847.018 cv
972.695 847.018 969.667 850.047 969.667 853.781 cv
969.667 857.519 972.785 859.732 976.43 860.549 cv
978.641 861.045 981.55 861.635 982.975 860.813 cv
983.406 861.211 li
1039.53 917.037 li
1043.76 917.037 li
1051.19 925.203 li
1051.47 1003.63 li
1033.03 1022.07 li
1033.03 1109.09 li
1058.57 1134.36 li
1061.01 1131.9 li
1036.49 1107.65 li
1036.49 1023.51 li
1054.94 1005.06 li
1054.64 923.857 li
1045.29 913.58 li
1040.95 913.58 li
985.801 858.715 li
983.933 856.99 li
cp
f
924.074 850.955 mo
924.074 849.047 925.624 847.498 927.532 847.498 cv
929.443 847.498 930.99 849.047 930.99 850.955 cv
930.99 852.865 929.443 854.412 927.532 854.412 cv
925.624 854.412 924.074 852.865 924.074 850.955 cv
cp
1012.29 1120.87 mo
1012.57 1010.27 li
1030.61 992.984 li
1030.61 948.315 li
1002.06 919.344 li
978.996 919.344 li
947.456 888.363 li
947.456 869.994 li
933.741 854.469 li
933.772 852.953 933.332 851.094 932.909 849.844 cv
931.713 846.305 929.883 843.082 926.146 843.082 cv
922.41 843.082 919.381 846.109 919.381 849.844 cv
919.381 853.582 922.501 855.795 926.146 856.611 cv
927.874 856.998 930.023 857.441 931.567 857.231 cv
943.998 871.301 li
943.998 889.815 li
977.582 922.801 li
1000.62 922.801 li
1027.15 949.731 li
1027.15 991.508 li
1009.12 1008.79 li
1008.83 1122.38 li
1023.52 1135.86 li
1025.86 1133.32 li
1012.29 1120.87 li
cp
f
904.482 735.986 mo
904.482 734.078 906.029 732.529 907.94 732.529 cv
909.85 732.529 911.398 734.078 911.398 735.986 cv
911.398 737.896 909.85 739.443 907.94 739.443 cv
906.029 739.443 904.482 737.896 904.482 735.986 cv
cp
914.032 858.56 mo
918.365 861.715 li
927.102 861.715 li
938.271 873.91 li
938.271 892.109 li
976.424 930.006 li
997.697 930.006 li
1021.61 954.057 li
1021.61 988.609 li
1002.49 1006.48 li
1002.49 1124.65 li
1013.96 1135.83 li
1016.38 1133.35 li
1005.95 1123.2 li
1005.95 1007.98 li
1025.07 990.113 li
1025.07 952.631 li
999.135 926.547 li
977.848 926.547 li
941.729 890.672 li
941.729 872.566 li
928.624 858.256 li
919.492 858.256 li
917.49 856.801 li
917.49 742.16 li
914.145 739.516 li
914.182 737.996 913.741 736.129 913.316 734.873 cv
912.121 731.336 910.29 728.111 906.553 728.111 cv
902.818 728.111 899.787 731.141 899.787 734.873 cv
899.787 738.611 902.905 740.824 906.553 741.641 cv
908.301 742.033 910.486 742.484 912.034 742.254 cv
914.032 743.834 li
914.032 858.56 li
cp
f
828.99 627.26 mo
828.99 625.352 830.539 623.801 832.447 623.801 cv
834.359 623.801 835.906 625.352 835.906 627.26 cv
835.906 628.076 835.611 628.816 835.139 629.406 cv
834.576 629.965 li
833.988 630.43 833.256 630.717 832.447 630.717 cv
830.539 630.717 828.99 629.17 828.99 627.26 cv
cp
838.564 629.365 mo
838.42 628.211 838.125 627.027 837.824 626.146 cv
836.629 622.609 834.799 619.385 831.061 619.385 cv
827.324 619.385 824.297 622.412 824.297 626.146 cv
824.297 629.885 827.416 632.094 831.061 632.916 cv
833.232 633.402 836.078 633.986 837.533 633.231 cv
895.015 690.981 li
895.015 742.527 li
907.404 755.783 li
907.404 860.701 li
914.468 867.764 li
922.249 867.764 li
931.607 877.125 li
931.607 894.703 li
972.675 935.479 li
994.581 935.479 li
1015.17 955.797 li
1015.17 985.49 li
996.687 1004.51 li
996.687 1127.54 li
1005.33 1135.84 li
1007.72 1133.34 li
1000.14 1126.07 li
1000.14 1005.91 li
1018.63 986.896 li
1018.63 954.352 li
995.999 932.021 li
974.101 932.021 li
935.065 893.266 li
935.065 875.693 li
923.68 864.307 li
915.9 864.307 li
910.861 859.269 li
910.861 754.418 li
898.473 741.162 li
898.473 689.553 li
838.564 629.365 li
cp
f
838.066 656.467 mo
838.066 654.557 839.613 653.01 841.523 653.01 cv
843.436 653.01 844.982 654.557 844.982 656.467 cv
844.982 658.379 843.436 659.926 841.523 659.926 cv
839.613 659.926 838.066 658.379 838.066 656.467 cv
cp
993.848 1127.79 mo
993.848 1001.57 li
1012.29 981.982 li
1012.29 958.672 li
991.099 937.785 li
970.757 937.785 li
929.303 897.293 li
929.303 886.924 li
904.09 862.143 li
904.09 755.578 li
892.42 742.9 li
892.42 703.67 li
847.687 658.941 li
847.568 657.676 847.23 656.33 846.902 655.356 cv
845.705 651.816 843.875 648.59 840.139 648.59 cv
836.402 648.59 833.375 651.617 833.375 655.356 cv
833.375 659.092 836.492 661.303 840.139 662.119 cv
842.203 662.586 844.885 663.139 846.393 662.535 cv
888.961 705.102 li
888.961 744.252 li
900.631 756.928 li
900.631 863.592 li
925.846 888.373 li
925.846 898.75 li
969.35 941.242 li
989.681 941.242 li
1008.83 960.117 li
1008.83 980.611 li
990.39 1000.2 li
990.39 1129.29 li
999.01 1137.3 li
1001.36 1134.77 li
993.848 1127.79 li
cp
f
889.335 762.305 mo
889.335 760.393 890.881 758.846 892.793 758.846 cv
894.702 758.846 896.25 760.393 896.25 762.305 cv
896.25 764.215 894.702 765.762 892.793 765.762 cv
890.881 765.762 889.335 764.215 889.335 762.305 cv
cp
899.047 875.688 mo
899.047 765.473 li
898.988 765.473 li
898.957 764.025 898.561 762.35 898.168 761.193 cv
896.973 757.654 895.141 754.426 891.404 754.426 cv
887.67 754.426 884.641 757.457 884.641 761.193 cv
884.641 764.928 887.76 767.139 891.404 767.957 cv
892.705 768.25 894.246 768.572 895.59 768.627 cv
895.59 877.133 li
985.203 965.596 li
985.203 1133.13 li
988.66 1133.13 li
988.66 964.15 li
899.047 875.688 li
cp
f
882.152 782.955 mo
882.152 781.045 883.701 779.498 885.61 779.498 cv
887.521 779.498 889.068 781.045 889.068 782.955 cv
889.068 784.867 887.521 786.414 885.61 786.414 cv
883.701 786.414 882.152 784.867 882.152 782.955 cv
cp
981.396 1136.03 mo
981.396 966.746 li
893.859 879.15 li
893.859 789.965 li
891.758 787.164 li
891.985 785.56 891.478 783.293 890.988 781.846 cv
889.791 778.305 887.961 775.078 884.225 775.078 cv
880.488 775.078 877.459 778.107 877.459 781.846 cv
877.459 785.58 880.578 787.791 884.225 788.607 cv
885.728 788.945 887.562 789.334 889.031 789.289 cv
890.402 791.117 li
890.402 880.582 li
977.937 968.178 li
977.937 1136.03 li
981.396 1136.03 li
cp
f
874.973 798.859 mo
874.973 796.949 876.52 795.402 878.43 795.402 cv
880.34 795.402 881.888 796.949 881.888 798.859 cv
881.888 800.771 880.34 802.316 878.43 802.316 cv
876.52 802.316 874.973 800.771 874.973 798.859 cv
cp
883.199 883.758 mo
971.949 971.93 li
971.949 1134.59 li
975.407 1134.59 li
975.407 970.49 li
886.657 882.318 li
886.657 805.633 li
884.631 802.162 li
884.623 800.685 884.211 798.94 883.807 797.748 cv
882.61 794.207 880.78 790.981 877.044 790.981 cv
873.308 790.981 870.279 794.012 870.279 797.748 cv
870.279 801.484 873.396 803.695 877.044 804.512 cv
878.734 804.893 880.83 805.322 882.366 805.143 cv
883.199 806.57 li
883.199 883.758 li
cp
f
870.158 818.168 mo
870.158 816.26 871.705 814.709 873.617 814.709 cv
875.525 814.709 877.074 816.26 877.074 818.168 cv
877.074 820.08 875.525 821.627 873.617 821.627 cv
871.705 821.627 870.158 820.08 870.158 818.168 cv
cp
969.355 1136.03 mo
969.355 971.644 li
882.048 884.625 li
882.048 826.994 li
879.724 822.607 li
880.042 820.996 879.508 818.574 878.992 817.057 cv
877.797 813.519 875.965 810.293 872.228 810.293 cv
868.492 810.293 865.463 813.322 865.463 817.057 cv
865.463 820.795 868.582 823.004 872.228 823.824 cv
873.66 824.144 875.384 824.504 876.814 824.5 cv
878.59 827.852 li
878.59 886.06 li
965.898 973.082 li
965.898 1136.03 li
969.355 1136.03 li
cp
f
863.926 835.109 mo
863.926 833.197 865.473 831.65 867.383 831.65 cv
869.295 831.65 870.84 833.197 870.84 835.109 cv
870.84 837.019 869.295 838.566 867.383 838.566 cv
865.473 838.566 863.926 837.019 863.926 835.109 cv
cp
963.406 1134.59 mo
963.406 974.82 li
875.42 886.07 li
875.42 843.369 li
873.373 839.959 li
873.899 838.383 873.321 835.656 872.759 833.998 cv
871.562 830.459 869.732 827.231 865.996 827.231 cv
862.26 827.231 859.232 830.26 859.232 833.998 cv
859.232 837.732 862.35 839.945 865.996 840.762 cv
867.311 841.059 868.869 841.383 870.225 841.434 cv
871.961 844.326 li
871.961 887.496 li
959.948 976.246 li
959.948 1134.59 li
963.406 1134.59 li
cp
f
857.242 855.854 mo
857.242 853.943 858.791 852.396 860.699 852.396 cv
862.611 852.396 864.156 853.943 864.156 855.854 cv
864.156 857.766 862.611 859.315 860.699 859.315 cv
858.791 859.315 857.242 857.766 857.242 855.854 cv
cp
868.791 863.422 mo
866.68 860.732 li
867.225 859.162 866.641 856.412 866.076 854.744 cv
864.879 851.205 863.049 847.977 859.312 847.977 cv
855.576 847.977 852.547 851.006 852.547 854.744 cv
852.547 858.479 855.666 860.691 859.312 861.508 cv
860.586 861.795 862.092 862.111 863.416 862.176 cv
865.334 864.617 li
865.334 891.816 li
952.642 979.99 li
952.642 1134.59 li
956.1 1134.59 li
956.1 978.568 li
868.791 890.396 li
868.791 863.422 li
cp
f
838.066 735.986 mo
838.066 734.078 839.613 732.529 841.523 732.529 cv
843.436 732.529 844.982 734.078 844.982 735.986 cv
844.982 737.896 843.436 739.443 841.523 739.443 cv
839.613 739.443 838.066 737.896 838.066 735.986 cv
cp
847.674 738.344 mo
847.545 737.113 847.221 735.818 846.902 734.873 cv
845.705 731.336 843.875 728.111 840.139 728.111 cv
836.402 728.111 833.375 731.141 833.375 734.873 cv
833.375 738.611 836.492 740.824 840.139 741.641 cv
842.014 742.063 844.395 742.553 845.949 742.191 cv
846.893 743.766 li
846.893 862.443 li
859.283 874.545 li
859.283 895.271 li
946.881 984.309 li
946.881 1134.59 li
950.338 1134.59 li
950.338 982.894 li
862.74 893.857 li
862.74 873.09 li
850.352 860.988 li
850.352 742.807 li
847.674 738.344 li
cp
f
925.598 1086.36 mo
924.248 1085.01 924.248 1082.82 925.598 1081.47 cv
926.947 1080.12 929.137 1080.12 930.486 1081.47 cv
931.836 1082.82 931.836 1085.01 930.486 1086.36 cv
929.137 1087.71 926.947 1087.71 925.598 1086.36 cv
cp
933.02 1080.9 mo
932.052 1079.38 930.812 1077.48 929.543 1076.55 cv
929.302 1067.41 li
925.846 1067.5 li
926.098 1077.08 li
925.018 1078.13 924.029 1079.73 923.453 1080.9 cv
921.797 1084.25 920.811 1087.82 923.453 1090.47 cv
926.094 1093.11 930.377 1093.11 933.02 1090.47 cv
935.66 1087.82 935.019 1084.06 933.02 1080.9 cv
cp
f
1080.4 986.648 mo
1081.74 987.998 1081.74 990.188 1080.4 991.539 cv
1079.04 992.891 1076.86 992.891 1075.51 991.539 cv
1074.15 990.188 1074.15 987.998 1075.51 986.648 cv
1076.86 985.299 1079.04 985.299 1080.4 986.648 cv
cp
1072.97 992.107 mo
1073.82 993.443 1074.87 995.059 1075.97 996.063 cv
1075.97 1017.17 li
1086.49 1027.48 li
1088.91 1025.01 li
1079.43 1015.72 li
1079.43 996.338 li
1080.68 995.342 1081.88 993.443 1082.54 992.107 cv
1084.19 988.76 1085.18 985.188 1082.54 982.543 cv
1079.9 979.898 1075.61 979.902 1072.97 982.543 cv
1070.33 985.188 1070.97 988.951 1072.97 992.107 cv
cp
f
949.674 791.752 mo
949.674 789.84 951.22 788.295 953.131 788.295 cv
955.042 788.295 956.589 789.84 956.589 791.752 cv
956.589 793.664 955.042 795.209 953.131 795.209 cv
951.22 795.209 949.674 793.664 949.674 791.752 cv
cp
958.507 790.641 mo
957.311 787.102 955.48 783.873 951.744 783.873 cv
948.008 783.873 944.979 786.902 944.979 790.641 cv
944.979 794.375 948.098 796.588 951.744 797.404 cv
953.54 797.807 955.805 798.281 957.357 798.006 cv
1015.31 856.527 li
1087.7 856.527 li
1087.7 853.07 li
1016.75 853.07 li
959.334 795.088 li
959.331 793.606 958.915 791.842 958.507 790.641 cv
cp
f
1028.67 801.43 mo
1027.3 802.768 1025.11 802.744 1023.78 801.379 cv
1022.44 800.016 1022.46 797.826 1023.83 796.49 cv
1025.19 795.152 1027.38 795.176 1028.72 796.539 cv
1030.05 797.904 1030.03 800.092 1028.67 801.43 cv
cp
1029.31 794.402 mo
1025.98 792.711 1022.41 791.688 1019.74 794.301 cv
1017.07 796.914 1017.03 801.199 1019.64 803.871 cv
1022.26 806.537 1026.03 805.934 1029.21 803.969 cv
1030.71 803.039 1032.56 801.857 1033.52 800.629 cv
1087.7 800.629 li
1087.7 797.172 li
1033.18 797.172 li
1032.14 796.049 1030.5 795.006 1029.31 794.402 cv
cp
f
1066.93 814.981 mo
1068.27 816.346 1068.25 818.531 1066.88 819.869 cv
1065.52 821.205 1063.33 821.184 1061.99 819.818 cv
1060.65 818.455 1060.68 816.266 1062.04 814.93 cv
1063.41 813.596 1065.6 813.617 1066.93 814.981 cv
cp
1057.86 822.31 mo
1060.48 824.979 1064.25 824.373 1067.43 822.408 cv
1068.81 821.553 1070.49 820.481 1071.5 819.356 cv
1087.7 819.356 li
1087.7 815.898 li
1071.65 815.898 li
1070.64 814.666 1068.82 813.496 1067.53 812.842 cv
1064.19 811.154 1060.63 810.127 1057.96 812.744 cv
1055.29 815.357 1055.25 819.641 1057.86 822.31 cv
cp
f
1066.93 1047.51 mo
1068.27 1048.88 1068.25 1051.07 1066.88 1052.4 cv
1065.52 1053.74 1063.33 1053.72 1061.99 1052.35 cv
1060.65 1050.99 1060.68 1048.8 1062.04 1047.46 cv
1063.41 1046.13 1065.6 1046.15 1066.93 1047.51 cv
cp
1057.86 1054.84 mo
1060.48 1057.51 1064.25 1056.91 1067.43 1054.94 cv
1068.81 1054.09 1070.49 1053.01 1071.5 1051.89 cv
1087.7 1051.89 li
1087.7 1048.43 li
1071.65 1048.43 li
1070.64 1047.2 1068.82 1046.03 1067.53 1045.38 cv
1064.19 1043.69 1060.63 1042.66 1057.96 1045.28 cv
1055.29 1047.89 1055.25 1052.17 1057.86 1054.84 cv
cp
f
1067.24 1078.35 mo
1068.58 1079.71 1068.55 1081.9 1067.19 1083.24 cv
1065.82 1084.57 1063.63 1084.55 1062.3 1083.19 cv
1060.96 1081.82 1060.99 1079.63 1062.35 1078.29 cv
1063.71 1076.96 1065.9 1076.98 1067.24 1078.35 cv
cp
1058.17 1085.68 mo
1060.78 1088.34 1064.56 1087.74 1067.73 1085.78 cv
1069.12 1084.92 1070.8 1083.85 1071.8 1082.72 cv
1087.7 1082.72 li
1087.7 1079.26 li
1071.96 1079.26 li
1070.95 1078.03 1069.12 1076.86 1067.83 1076.21 cv
1064.5 1074.52 1060.94 1073.49 1058.27 1076.11 cv
1055.6 1078.72 1055.55 1083.01 1058.17 1085.68 cv
cp
f
1051.23 1063.65 mo
1052.56 1065.01 1052.54 1067.2 1051.18 1068.54 cv
1049.81 1069.88 1047.63 1069.85 1046.29 1068.49 cv
1044.95 1067.13 1044.97 1064.94 1046.34 1063.6 cv
1047.7 1062.26 1049.89 1062.29 1051.23 1063.65 cv
cp
1042.16 1070.98 mo
1044.77 1073.65 1048.55 1073.04 1051.72 1071.08 cv
1053.11 1070.22 1054.79 1069.15 1055.79 1068.03 cv
1087.7 1068.03 li
1087.7 1064.57 li
1055.95 1064.57 li
1054.94 1063.34 1053.11 1062.17 1051.82 1061.51 cv
1048.49 1059.82 1044.93 1058.8 1042.26 1061.41 cv
1039.59 1064.03 1039.54 1068.31 1042.16 1070.98 cv
cp
f
1051.23 1092.76 mo
1052.56 1094.12 1052.54 1096.31 1051.18 1097.64 cv
1049.81 1098.98 1047.63 1098.96 1046.29 1097.59 cv
1044.95 1096.23 1044.97 1094.04 1046.34 1092.71 cv
1047.7 1091.37 1049.89 1091.39 1051.23 1092.76 cv
cp
1042.16 1100.08 mo
1044.77 1102.75 1048.55 1102.15 1051.72 1100.18 cv
1053.11 1099.33 1054.79 1098.25 1055.79 1097.13 cv
1087.7 1097.13 li
1087.7 1093.67 li
1055.95 1093.67 li
1054.94 1092.44 1053.11 1091.27 1051.82 1090.62 cv
1048.49 1088.93 1044.93 1087.9 1042.26 1090.52 cv
1039.59 1093.13 1039.54 1097.41 1042.16 1100.08 cv
cp
f
951.619 851.727 mo
951.619 853.637 950.071 855.184 948.16 855.184 cv
946.251 855.184 944.702 853.637 944.702 851.727 cv
944.702 849.815 946.251 848.268 948.16 848.268 cv
950.071 848.268 951.619 849.815 951.619 851.727 cv
cp
940.009 850.615 mo
940.009 854.35 943.129 856.56 946.774 857.379 cv
948.06 857.668 949.581 857.986 950.915 858.047 cv
950.915 885.465 li
981.402 917.037 li
1004.08 917.037 li
1033.61 946.57 li
1033.61 994.691 li
1014.59 1013.71 li
1014.59 1119.2 li
1030.7 1134.39 li
1033.07 1131.88 li
1018.05 1117.71 li
1018.05 1015.15 li
1037.07 996.123 li
1037.07 945.139 li
1005.51 913.58 li
982.869 913.58 li
954.373 884.068 li
954.373 854.799 li
954.355 854.799 li
954.307 853.373 953.921 851.746 953.538 850.615 cv
952.342 847.076 950.511 843.848 946.774 843.848 cv
943.038 843.848 940.009 846.877 940.009 850.615 cv
cp
f
971.26 728.518 mo
972.635 729.844 972.672 732.031 971.345 733.406 cv
970.02 734.779 967.832 734.818 966.456 733.49 cv
965.081 732.164 965.044 729.975 966.371 728.6 cv
967.698 727.231 969.887 727.19 971.26 728.518 cv
cp
964.217 728.066 mo
962.619 731.443 961.697 735.037 964.385 737.633 cv
967.072 740.227 971.355 740.152 973.951 737.467 cv
976.547 734.779 975.838 731.021 973.783 727.9 cv
972.735 726.307 971.376 724.307 970.018 723.477 cv
970.018 715.482 li
966.561 715.482 li
966.561 724.412 li
966.597 724.412 li
965.615 725.477 964.739 726.965 964.217 728.066 cv
cp
f
827.275 775.473 mo
829.184 775.473 830.732 777.023 830.732 778.932 cv
830.732 780.842 829.184 782.389 827.275 782.389 cv
825.365 782.389 823.816 780.842 823.816 778.932 cv
823.816 777.023 825.365 775.473 827.275 775.473 cv
cp
826.723 785.451 mo
830.924 785.451 834.328 782.047 834.328 777.846 cv
834.328 773.644 830.924 770.242 826.723 770.242 cv
822.523 770.242 819.119 773.644 819.119 777.846 cv
819.119 782.047 822.523 785.451 826.723 785.451 cv
cp
f
894.371 1119.56 mo
894.371 1121.47 892.822 1123.02 890.912 1123.02 cv
889.004 1123.02 887.454 1121.47 887.454 1119.56 cv
887.454 1117.65 889.004 1116.11 890.912 1116.11 cv
892.822 1116.11 894.371 1117.65 894.371 1119.56 cv
cp
882.757 1118.48 mo
882.757 1122.68 886.16 1126.08 890.361 1126.08 cv
894.562 1126.08 897.966 1122.68 897.966 1118.48 cv
897.966 1114.28 894.562 1110.87 890.361 1110.87 cv
886.16 1110.87 882.757 1114.28 882.757 1118.48 cv
cp
f
864.709 1118.57 mo
864.709 1120.48 863.16 1122.03 861.252 1122.03 cv
859.342 1122.03 857.793 1120.48 857.793 1118.57 cv
857.793 1116.66 859.342 1115.12 861.252 1115.12 cv
863.16 1115.12 864.709 1116.66 864.709 1118.57 cv
cp
853.094 1117.49 mo
853.094 1121.69 856.5 1125.09 860.699 1125.09 cv
864.9 1125.09 868.305 1121.69 868.305 1117.49 cv
868.305 1113.29 864.9 1109.88 860.699 1109.88 cv
856.5 1109.88 853.094 1113.29 853.094 1117.49 cv
cp
f
827.824 1119.66 mo
827.824 1117.75 829.375 1116.2 831.283 1116.2 cv
833.193 1116.2 834.744 1117.75 834.744 1119.66 cv
834.744 1121.57 833.193 1123.12 831.283 1123.12 cv
829.375 1123.12 827.824 1121.57 827.824 1119.66 cv
cp
838.336 1118.57 mo
838.336 1114.37 834.932 1110.97 830.732 1110.97 cv
826.531 1110.97 823.129 1114.37 823.129 1118.57 cv
823.129 1122.77 826.531 1126.18 830.732 1126.18 cv
834.932 1126.18 838.336 1122.77 838.336 1118.57 cv
cp
f
970.217 748.545 mo
972.127 748.545 973.675 750.09 973.675 752.002 cv
973.675 753.908 972.127 755.459 970.217 755.459 cv
968.308 755.459 966.76 753.908 966.76 752.002 cv
966.76 750.09 968.308 748.545 970.217 748.545 cv
cp
969.665 758.518 mo
973.867 758.518 977.271 755.115 977.271 750.914 cv
977.271 746.717 973.867 743.31 969.665 743.31 cv
965.466 743.31 962.062 746.717 962.062 750.914 cv
962.062 755.115 965.466 758.518 969.665 758.518 cv
cp
f
1078.43 874.721 mo
1078.43 876.629 1076.88 878.178 1074.97 878.178 cv
1073.06 878.178 1071.51 876.629 1071.51 874.721 cv
1071.51 872.81 1073.06 871.264 1074.97 871.264 cv
1076.88 871.264 1078.43 872.81 1078.43 874.721 cv
cp
1066.81 873.633 mo
1066.81 877.834 1070.22 881.238 1074.42 881.238 cv
1078.62 881.238 1082.02 877.834 1082.02 873.633 cv
1082.02 869.434 1078.62 866.029 1074.42 866.029 cv
1070.22 866.029 1066.81 869.434 1066.81 873.633 cv
cp
f
1040.5 874.721 mo
1040.5 876.629 1038.95 878.178 1037.04 878.178 cv
1035.13 878.178 1033.59 876.629 1033.59 874.721 cv
1033.59 872.81 1035.13 871.264 1037.04 871.264 cv
1038.95 871.264 1040.5 872.81 1040.5 874.721 cv
cp
1028.89 873.633 mo
1028.89 877.834 1032.29 881.238 1036.49 881.238 cv
1040.69 881.238 1044.1 877.834 1044.1 873.633 cv
1044.1 869.434 1040.69 866.029 1036.49 866.029 cv
1032.29 866.029 1028.89 869.434 1028.89 873.633 cv
cp
f
995.158 887.006 mo
997.068 887.006 998.619 888.553 998.619 890.463 cv
998.619 892.375 997.068 893.92 995.158 893.92 cv
993.25 893.92 991.701 892.375 991.701 890.463 cv
991.701 888.553 993.25 887.006 995.158 887.006 cv
cp
994.607 896.981 mo
998.81 896.981 1002.21 893.576 1002.21 889.375 cv
1002.21 885.178 998.81 881.771 994.607 881.771 cv
990.408 881.771 987.004 885.178 987.004 889.375 cv
987.004 893.576 990.408 896.981 994.607 896.981 cv
cp
f
998.248 973.158 mo
1000.16 973.158 1001.71 974.709 1001.71 976.615 cv
1001.71 978.527 1000.16 980.074 998.248 980.074 cv
996.338 980.074 994.79 978.527 994.79 976.615 cv
994.79 974.709 996.338 973.158 998.248 973.158 cv
cp
997.695 983.137 mo
1001.9 983.137 1005.3 979.732 1005.3 975.533 cv
1005.3 971.33 1001.9 967.928 997.695 967.928 cv
993.496 967.928 990.093 971.33 990.093 975.533 cv
990.093 979.732 993.496 983.137 997.695 983.137 cv
cp
f
920.17 1019.82 mo
920.17 1017.91 921.717 1016.36 923.627 1016.36 cv
925.536 1016.36 927.086 1017.91 927.086 1019.82 cv
927.086 1021.73 925.536 1023.28 923.627 1023.28 cv
921.717 1023.28 920.17 1021.73 920.17 1019.82 cv
cp
930.682 1018.74 mo
930.682 1014.54 927.275 1011.13 923.074 1011.13 cv
918.876 1011.13 915.471 1014.54 915.471 1018.74 cv
915.471 1022.94 918.876 1026.34 923.074 1026.34 cv
927.275 1026.34 930.682 1022.94 930.682 1018.74 cv
cp
f
848.285 910.195 mo
850.195 910.195 851.746 911.742 851.746 913.654 cv
851.746 915.563 850.195 917.111 848.285 917.111 cv
846.377 917.111 844.828 915.563 844.828 913.654 cv
844.828 911.742 846.377 910.195 848.285 910.195 cv
cp
847.734 920.172 mo
851.936 920.172 855.338 916.768 855.338 912.566 cv
855.338 908.367 851.936 904.963 847.734 904.963 cv
843.535 904.963 840.131 908.367 840.131 912.566 cv
840.131 916.768 843.535 920.172 847.734 920.172 cv
cp
f
848.285 931.953 mo
850.195 931.953 851.746 933.5 851.746 935.41 cv
851.746 937.322 850.195 938.869 848.285 938.869 cv
846.377 938.869 844.828 937.322 844.828 935.41 cv
844.828 933.5 846.377 931.953 848.285 931.953 cv
cp
847.734 941.928 mo
851.936 941.928 855.338 938.523 855.338 934.322 cv
855.338 930.125 851.936 926.723 847.734 926.723 cv
843.535 926.723 840.131 930.125 840.131 934.322 cv
840.131 938.523 843.535 941.928 847.734 941.928 cv
cp
f
826.477 1030.85 mo
826.477 1029.29 827.734 1028.04 829.287 1028.04 cv
830.838 1028.04 832.098 1029.29 832.098 1030.85 cv
832.098 1032.4 830.838 1033.66 829.287 1033.66 cv
827.734 1033.66 826.477 1032.4 826.477 1030.85 cv
cp
919.337 1133.13 mo
919.337 1114.06 li
831.77 1025.97 li
829.75 1023.95 826.469 1023.93 824.436 1025.95 cv
823.416 1026.97 822.904 1028.3 822.904 1029.63 cv
822.904 1030.95 823.408 1032.28 824.416 1033.29 cv
908.964 1118.34 li
908.964 1133.13 li
908.964 1136 911.285 1138.32 914.15 1138.32 cv
917.014 1138.32 919.337 1136 919.337 1133.13 cv
cp
f
827.336 863.945 mo
824.889 863.945 822.904 861.963 822.904 859.516 cv
822.904 857.07 824.889 855.086 827.336 855.086 cv
829.783 855.086 831.766 857.07 831.766 859.516 cv
831.766 861.963 829.783 863.945 827.336 863.945 cv
cp
852.629 959.453 mo
852.629 961.896 850.645 963.883 848.199 963.883 cv
845.752 963.883 843.768 961.896 843.768 959.453 cv
843.768 957.004 845.752 955.021 848.199 955.021 cv
850.645 955.021 852.629 957.004 852.629 959.453 cv
cp
827.443 849.898 mo
822.668 849.898 818.799 853.768 818.799 858.543 cv
818.799 947.113 li
818.799 949.359 819.674 951.518 821.236 953.131 cv
833.135 965.412 li
834.764 967.092 837.004 968.039 839.342 968.039 cv
849.09 968.039 li
853.863 968.039 857.734 964.168 857.734 959.394 cv
857.734 954.619 853.863 950.75 849.09 950.75 cv
843.004 950.75 li
836.088 943.613 li
836.088 858.543 li
836.088 853.768 832.219 849.898 827.443 849.898 cv
cp
f
1054.64 926.838 mo
1049.39 926.838 1045.14 922.578 1045.14 917.328 cv
1045.14 912.074 1049.39 907.818 1054.64 907.818 cv
1059.9 907.818 1064.15 912.074 1064.15 917.328 cv
1064.15 922.578 1059.9 926.838 1054.64 926.838 cv
1 1 1 rgb
f
890.361 968.32 mo
885.109 968.32 880.853 964.065 880.853 958.81 cv
880.853 953.56 885.109 949.303 890.361 949.303 cv
895.613 949.303 899.87 953.56 899.87 958.81 cv
899.87 964.065 895.613 968.32 890.361 968.32 cv
f
927.718 1068.15 mo
922.465 1068.15 918.209 1063.89 918.209 1058.64 cv
918.209 1053.39 922.465 1049.13 927.718 1049.13 cv
932.971 1049.13 937.227 1053.39 937.227 1058.64 cv
937.227 1063.89 932.971 1068.15 927.718 1068.15 cv
f
1093.74 934.525 mo
1088.45 934.525 1084.17 930.24 1084.17 924.959 cv
1084.17 919.676 1088.45 915.393 1093.74 915.393 cv
1099.02 915.393 1103.3 919.676 1103.3 924.959 cv
1103.3 930.24 1099.02 934.525 1093.74 934.525 cv
cp
f
136.475 1101.34 mo
134.563 1101.38 132.989 1099.86 132.955 1097.95 cv
132.922 1096.04 134.445 1094.46 136.353 1094.43 cv
138.26 1094.4 139.837 1095.91 139.871 1097.83 cv
139.904 1099.73 138.383 1101.31 136.475 1101.34 cv
cp
142.768 1108.96 mo
142.768 1135.64 li
146.226 1135.64 li
146.226 1107.86 li
142.546 1102.7 li
143.158 1101.2 142.545 1098.48 142.041 1096.4 cv
141.158 1092.77 138.894 1089.69 135.16 1089.76 cv
131.423 1089.82 128.447 1092.9 128.513 1096.64 cv
128.579 1100.37 131.836 1102.15 135.394 1103.28 cv
136.436 1103.62 137.899 1103.95 139.232 1104.02 cv
142.768 1108.96 li
cp
0 .862745 1 rgb
f
101.839 563.287 mo
99.9287 563.287 98.3809 561.736 98.3809 559.828 cv
98.3809 557.92 99.9287 556.369 101.839 556.369 cv
103.75 556.369 105.297 557.92 105.297 559.828 cv
105.297 561.736 103.75 563.287 101.839 563.287 cv
cp
160.057 1053.82 mo
160.057 1131.89 li
163.515 1131.89 li
163.515 1052.36 li
148.82 1038.09 li
148.82 1002.23 li
94.3584 948.201 li
94.3584 609.777 li
84.418 599.835 li
84.418 579.248 li
98.0869 566.133 li
99.6045 566.258 101.601 565.848 103.225 565.482 cv
106.871 564.664 109.991 562.453 109.991 558.717 cv
109.991 554.981 106.962 551.951 103.225 551.951 cv
99.4893 551.951 97.6582 555.176 96.4619 558.717 cv
96.0078 560.06 95.5449 562.1 95.6592 563.67 cv
80.961 577.771 li
80.961 601.268 li
90.9014 611.209 li
90.9014 949.643 li
145.362 1003.67 li
145.362 1039.55 li
160.057 1053.82 li
cp
f
284.863 592.371 mo
283.513 591.019 283.513 588.832 284.863 587.482 cv
286.215 586.131 288.402 586.131 289.752 587.482 cv
291.104 588.832 291.104 591.019 289.752 592.371 cv
288.402 593.725 286.215 593.725 284.863 592.371 cv
cp
237.426 765.258 mo
216.246 787.441 li
216.246 1037.68 li
190.312 1064.05 li
190.312 1130.44 li
193.77 1130.44 li
193.77 1065.46 li
219.704 1039.1 li
219.704 788.828 li
240.881 766.643 li
240.881 750.67 li
221.432 731.654 li
221.432 688.154 li
289.292 621.592 li
289.292 596.896 li
290.39 595.893 291.441 594.275 292.285 592.943 cv
294.287 589.787 294.929 586.019 292.285 583.377 cv
289.646 580.736 285.363 580.736 282.719 583.375 cv
280.079 586.019 281.064 589.596 282.719 592.943 cv
283.379 594.277 284.576 596.178 285.834 597.176 cv
285.834 620.141 li
217.975 686.703 li
217.975 733.107 li
237.426 752.125 li
237.426 765.258 li
cp
f
192.571 593.953 mo
191.221 592.604 191.221 590.414 192.571 589.065 cv
193.922 587.715 196.109 587.715 197.459 589.065 cv
198.811 590.414 198.811 592.604 197.459 593.953 cv
196.109 595.305 193.922 595.305 192.571 593.953 cv
cp
156.261 880.914 mo
157.612 882.264 157.612 884.451 156.261 885.803 cv
154.91 887.15 152.723 887.15 151.372 885.803 cv
150.02 884.451 150.02 882.264 151.372 880.914 cv
152.723 879.559 154.91 879.559 156.261 880.914 cv
cp
196.939 598.535 mo
196.93 598.535 li
198.054 597.539 199.133 595.887 199.994 594.523 cv
201.996 591.367 202.635 587.602 199.994 584.959 cv
197.352 582.315 193.071 582.315 190.427 584.959 cv
187.787 587.602 188.772 591.178 190.427 594.523 cv
191.077 595.838 192.247 597.701 193.482 598.708 cv
193.482 627.502 li
152.062 669.211 li
152.062 876.19 li
150.881 877.166 149.743 878.916 148.839 880.338 cv
146.839 883.496 146.198 887.264 148.839 889.904 cv
151.48 892.545 155.763 892.549 158.405 889.908 cv
161.046 887.264 160.062 883.688 158.405 880.338 cv
157.787 879.088 156.691 877.334 155.519 876.299 cv
155.519 670.635 li
196.939 628.926 li
196.939 598.535 li
cp
f
192.829 890.445 mo
193.225 892.313 192.033 894.148 190.164 894.545 cv
188.297 894.943 186.461 893.752 186.064 891.885 cv
185.667 890.018 186.857 888.18 188.725 887.781 cv
190.592 887.387 192.43 888.578 192.829 890.445 cv
cp
221.869 561.81 mo
220.52 560.459 220.518 558.269 221.869 556.92 cv
223.221 555.57 225.408 555.57 226.76 556.92 cv
228.109 558.269 228.109 560.459 226.76 561.81 cv
225.408 563.162 223.221 563.162 221.869 561.81 cv
cp
196.649 822.578 mo
196.649 881.578 li
193.441 884.41 li
191.854 883.859 188.908 885.144 187.239 886.137 cv
184.027 888.045 181.252 890.506 182.029 894.158 cv
182.809 897.813 186.401 900.146 190.054 899.371 cv
193.709 898.59 195.223 895.078 195.263 891.348 cv
195.275 890.158 195.275 888.773 195.114 887.545 cv
200.107 883.139 li
200.107 821.123 li
176.229 797.783 li
176.229 681.654 li
225.176 632.094 li
225.176 567.102 li
226.663 566.451 228.163 564.166 229.292 562.383 cv
231.292 559.225 231.934 555.457 229.292 552.816 cv
226.649 550.176 222.367 550.172 219.727 552.815 cv
217.084 555.457 218.068 559.033 219.727 562.383 cv
220.185 563.309 220.902 564.51 221.719 565.492 cv
221.719 630.676 li
172.771 680.236 li
172.771 799.238 li
196.649 822.578 li
cp
f
254.463 563.287 mo
252.554 563.287 251.006 561.736 251.006 559.828 cv
251.006 557.92 252.554 556.369 254.463 556.369 cv
256.375 556.369 257.921 557.92 257.921 559.828 cv
257.921 561.736 256.375 563.287 254.463 563.287 cv
cp
196.477 908.43 mo
196.875 910.297 195.68 912.135 193.812 912.529 cv
191.946 912.928 190.109 911.736 189.715 909.867 cv
189.316 908 190.509 906.164 192.375 905.766 cv
194.242 905.367 196.079 906.563 196.477 908.43 cv
cp
236.705 579.369 mo
250.04 566.033 li
251.593 566.394 253.975 565.904 255.85 565.482 cv
259.494 564.664 262.616 562.453 262.616 558.717 cv
262.616 554.981 259.586 551.951 255.85 551.951 cv
252.113 551.951 250.283 555.176 249.086 558.717 cv
248.702 559.852 248.316 561.484 248.27 562.912 cv
233.246 577.938 li
233.246 637.004 li
193.482 676.481 li
193.482 756.238 li
203.855 767.764 li
203.855 896.269 li
196.925 902.332 li
195.302 901.924 192.497 903.164 190.889 904.121 cv
187.675 906.025 184.902 908.49 185.68 912.144 cv
186.459 915.797 190.054 918.131 193.704 917.354 cv
197.359 916.574 198.871 913.063 198.912 909.328 cv
198.927 908.078 198.929 906.609 198.742 905.338 cv
207.312 897.842 li
207.312 766.435 li
196.939 754.912 li
196.939 677.918 li
236.705 638.441 li
236.705 579.369 li
cp
f
253.869 592.822 mo
251.965 592.971 250.3 591.549 250.149 589.644 cv
250.002 587.744 251.425 586.08 253.329 585.932 cv
255.232 585.781 256.895 587.203 257.047 589.106 cv
257.196 591.01 255.771 592.674 253.869 592.822 cv
cp
202.314 929.18 mo
202.711 931.047 201.52 932.885 199.652 933.283 cv
197.785 933.678 195.947 932.49 195.551 930.621 cv
195.154 928.752 196.344 926.914 198.213 926.518 cv
200.08 926.121 201.918 927.313 202.314 929.18 cv
cp
244.488 605.283 mo
249.921 595.941 li
251.487 596.08 253.681 595.441 255.422 594.902 cv
258.994 593.803 261.93 591.357 261.639 587.629 cv
261.346 583.906 258.092 581.123 254.366 581.416 cv
250.642 581.709 249.068 585.066 248.149 588.69 cv
247.833 589.947 247.544 591.801 247.679 593.299 cv
247.513 593.201 li
241.02 604.367 li
241.402 638.455 li
199.533 680.229 li
199.533 752.531 li
210.479 763.766 li
209.336 915.68 li
202.57 923.043 li
200.925 922.773 198.272 923.955 196.729 924.871 cv
193.514 926.779 190.741 929.244 191.518 932.894 cv
192.295 936.551 195.889 938.883 199.542 938.104 cv
203.196 937.328 204.709 933.816 204.75 930.082 cv
204.765 928.797 204.763 927.283 204.56 925.986 cv
212.785 917.037 li
213.946 762.371 li
202.991 751.127 li
202.991 681.664 li
244.875 639.873 li
244.488 605.283 li
cp
f
196.937 564.275 mo
195.027 564.31 193.454 562.787 193.418 560.879 cv
193.388 558.969 194.908 557.396 196.814 557.361 cv
198.725 557.328 200.301 558.848 200.334 560.758 cv
200.367 562.666 198.846 564.242 196.937 564.275 cv
cp
163.147 902.527 mo
163.545 904.394 162.354 906.232 160.485 906.627 cv
158.618 907.025 156.781 905.834 156.385 903.967 cv
155.988 902.098 157.179 900.262 159.048 899.863 cv
160.916 899.469 162.751 900.66 163.147 902.527 cv
cp
200.752 566.938 mo
209.33 574.533 li
209.33 623.463 li
157.175 675.33 li
157.175 873.207 li
165.676 883.002 li
165.676 894.467 li
163.68 896.463 li
162.075 895.984 159.2 897.244 157.56 898.219 cv
154.347 900.127 151.573 902.588 152.351 906.242 cv
153.13 909.896 156.721 912.229 160.375 911.451 cv
164.029 910.672 165.542 907.164 165.585 903.43 cv
165.598 902.231 165.597 900.834 165.434 899.6 cv
169.134 895.898 li
169.134 881.713 li
160.633 871.918 li
160.633 676.768 li
212.787 624.9 li
212.787 572.977 li
203.239 564.519 li
203.355 562.992 202.904 560.973 202.504 559.332 cv
201.623 555.703 199.357 552.621 195.623 552.685 cv
191.888 552.752 188.912 555.832 188.979 559.57 cv
189.045 563.305 192.301 565.078 195.859 566.215 cv
197.188 566.639 199.195 567.059 200.752 566.938 cv
cp
f
228.463 526.554 mo
230.371 526.521 231.947 528.041 231.98 529.951 cv
232.017 531.861 230.494 533.433 228.584 533.466 cv
226.676 533.502 225.102 531.98 225.066 530.07 cv
225.033 528.162 226.555 526.585 228.463 526.554 cv
cp
192.721 769.248 mo
194.072 770.6 194.072 772.787 192.721 774.139 cv
191.373 775.488 189.184 775.488 187.833 774.139 cv
186.482 772.787 186.482 770.6 187.833 769.248 cv
189.184 767.896 191.373 767.896 192.721 769.248 cv
cp
227.271 521.877 mo
223.537 521.945 220.561 525.025 220.625 528.759 cv
220.689 532.498 223.947 534.271 227.509 535.408 cv
228.515 535.728 229.917 536.052 231.214 536.14 cv
239.013 544.47 li
239.013 563.014 li
227.482 575.981 li
227.482 632.695 li
188.297 672.75 li
188.297 764.723 li
187.197 765.725 186.145 767.342 185.3 768.678 cv
183.3 771.836 182.656 775.6 185.3 778.244 cv
187.941 780.885 192.223 780.885 194.866 778.244 cv
197.509 775.6 196.521 772.023 194.866 768.678 cv
194.208 767.344 193.011 765.447 191.754 764.449 cv
191.754 674.16 li
230.941 634.107 li
230.941 577.293 li
242.469 564.328 li
242.469 543.107 li
234.675 534.775 li
235.251 533.255 234.651 530.583 234.152 528.523 cv
233.27 524.894 231.006 521.814 227.271 521.877 cv
cp
f
246.418 737.531 mo
247.768 738.883 247.768 741.07 246.418 742.422 cv
245.071 743.771 242.879 743.771 241.527 742.422 cv
240.18 741.07 240.18 738.883 241.527 737.531 cv
242.879 736.182 245.071 736.182 246.418 737.531 cv
cp
248.562 733.426 mo
245.921 730.785 241.639 730.785 238.996 733.426 cv
236.355 736.068 236.996 739.834 238.996 742.992 cv
240.031 744.627 241.376 746.68 242.737 747.512 cv
242.737 768.826 li
221.719 789.572 li
221.719 1041.83 li
197.246 1065.32 li
197.246 1130.44 li
200.704 1130.44 li
200.704 1066.79 li
225.176 1043.3 li
225.176 791.018 li
246.193 770.271 li
246.193 746.529 li
247.164 745.49 248.035 744.06 248.562 742.992 cv
250.219 739.644 251.205 736.068 248.562 733.426 cv
cp
f
278.895 734.195 mo
277.545 732.844 277.545 730.656 278.895 729.307 cv
280.246 727.959 282.436 727.959 283.785 729.307 cv
285.138 730.656 285.138 732.844 283.785 734.195 cv
282.436 735.551 280.246 735.551 278.895 734.195 cv
cp
285.93 734.769 mo
287.586 731.42 288.572 727.844 285.93 725.199 cv
283.287 722.559 279.006 722.563 276.363 725.203 cv
273.721 727.844 274.363 731.611 276.363 734.769 cv
277.208 736.104 278.26 737.721 279.359 738.723 cv
279.359 747.219 li
282.816 747.219 li
282.816 739 li
284.073 738.002 285.27 736.102 285.93 734.769 cv
cp
f
346.039 686.588 mo
344.686 685.24 344.68 683.051 346.025 681.697 cv
347.369 680.344 349.561 680.336 350.914 681.682 cv
352.27 683.029 352.275 685.215 350.932 686.57 cv
349.586 687.928 347.395 687.935 346.039 686.588 cv
cp
347.189 691.633 mo
347.189 698.744 li
350.646 698.744 li
350.646 690.756 li
351.643 689.707 352.54 688.231 353.076 687.137 cv
354.721 683.781 355.696 680.205 353.045 677.568 cv
350.396 674.934 346.109 674.951 343.48 677.602 cv
340.846 680.252 341.498 684.014 343.51 687.168 cv
344.529 688.768 345.85 690.775 347.189 691.633 cv
cp
f
349.675 615.824 mo
351.029 617.172 351.033 619.359 349.689 620.713 cv
348.342 622.07 346.154 622.078 344.801 620.731 cv
343.447 619.385 343.437 617.195 344.783 615.842 cv
346.131 614.488 348.318 614.482 349.675 615.824 cv
cp
344.179 747.047 mo
345.459 748.465 345.348 750.648 343.934 751.93 cv
342.517 753.213 340.33 753.102 339.051 751.682 cv
337.768 750.268 337.881 748.084 339.295 746.801 cv
340.711 745.518 342.898 745.629 344.179 747.047 cv
cp
351.804 611.711 mo
349.152 609.078 344.871 609.094 342.238 611.746 cv
339.605 614.396 340.26 618.158 342.268 621.31 cv
343.044 622.527 343.993 623.977 344.991 624.981 cv
344.848 625.361 344.76 625.768 344.76 626.197 cv
344.76 645.121 li
328.322 659.938 li
327.596 660.594 327.18 661.525 327.18 662.504 cv
327.18 707.455 li
327.18 708.35 327.527 709.211 328.149 709.856 cv
338.727 720.826 li
338.996 741.502 li
339.003 742.063 339.155 742.58 339.396 743.045 cv
338.504 743.996 337.7 745.197 337.184 746.121 cv
335.362 749.383 334.197 752.902 336.7 755.678 cv
339.205 758.451 343.482 758.662 346.256 756.158 cv
349.025 753.652 348.576 749.859 346.738 746.604 cv
346.23 745.705 345.639 744.682 344.998 743.783 cv
345.562 743.168 345.912 742.356 345.912 741.459 cv
345.912 741.441 345.912 741.428 345.912 741.41 cv
345.623 719.369 li
345.612 718.486 345.267 717.646 344.654 717.016 cv
334.096 706.06 li
334.096 664.045 li
350.531 649.229 li
351.26 648.572 351.675 647.637 351.675 646.658 cv
351.675 626.197 li
351.675 625.152 351.2 624.227 350.465 623.592 cv
351.02 622.805 351.498 621.967 351.834 621.281 cv
353.48 617.926 354.455 614.35 351.804 611.711 cv
cp
f
281.929 704.158 mo
283.208 705.578 283.098 707.762 281.682 709.041 cv
280.264 710.322 278.079 710.211 276.797 708.795 cv
275.518 707.377 275.629 705.191 277.045 703.908 cv
278.461 702.629 280.648 702.738 281.929 704.158 cv
cp
281.107 699.098 mo
281.366 690.797 li
277.91 690.69 li
277.629 699.678 li
276.55 700.674 275.54 702.141 274.934 703.231 cv
273.109 706.492 271.947 710.016 274.45 712.787 cv
276.955 715.559 281.234 715.771 284.004 713.266 cv
286.775 710.764 286.326 706.973 284.488 703.715 cv
283.57 702.086 282.378 700.045 281.107 699.098 cv
cp
f
379.325 702.506 mo
381.216 702.24 382.964 703.555 383.229 705.445 cv
383.495 707.336 382.179 709.086 380.286 709.35 cv
378.395 709.615 376.649 708.299 376.384 706.408 cv
376.116 704.518 377.433 702.768 379.325 702.506 cv
cp
376.743 700.014 mo
376.743 669.275 li
373.284 669.275 li
373.284 701.604 li
372.747 703.185 373.788 706.094 374.638 707.775 cv
376.313 711.115 378.575 714.053 382.276 713.537 cv
385.979 713.014 388.552 709.594 388.032 705.891 cv
387.513 702.195 384.118 700.441 380.395 700.135 cv
379.257 700.043 377.94 699.955 376.743 700.014 cv
cp
f
257.33 524.107 mo
259.238 524.085 260.801 525.617 260.822 527.527 cv
260.842 529.437 259.311 531 257.399 531.017 cv
255.488 531.035 253.926 529.505 253.906 527.595 cv
253.885 525.687 255.422 524.125 257.33 524.107 cv
cp
224.34 754.229 mo
226.246 754.176 227.838 755.68 227.889 757.592 cv
227.939 759.5 226.436 761.086 224.527 761.141 cv
222.617 761.191 221.029 759.685 220.977 757.777 cv
220.926 755.871 222.432 754.279 224.34 754.229 cv
cp
255.899 519.697 mo
252.162 519.738 249.168 522.796 249.204 526.531 cv
249.238 530.269 252.375 532.445 256.035 533.226 cv
257.026 533.439 258.158 533.666 259.237 533.785 cv
259.344 534.339 259.573 534.878 259.961 535.345 cv
267.576 544.466 li
267.576 605.803 li
247.738 626.701 li
247.129 627.342 246.787 628.193 246.787 629.082 cv
246.787 642.068 li
208.596 680.824 li
207.959 681.471 207.602 682.342 207.602 683.25 cv
207.602 744.051 li
207.602 744.93 207.936 745.777 208.537 746.42 cv
215.575 753.908 li
216.239 754.617 217.134 754.979 218.037 754.994 cv
218.121 756.352 218.488 757.912 218.821 759.223 cv
219.737 762.846 222.029 765.902 225.767 765.805 cv
229.5 765.701 232.446 762.594 232.346 758.859 cv
232.242 755.121 228.969 753.377 225.399 752.277 cv
224.353 751.955 222.884 751.639 221.544 751.58 cv
221.554 750.717 221.25 749.85 220.616 749.174 cv
214.517 742.682 li
214.517 684.67 li
252.709 645.914 li
253.348 645.268 253.704 644.394 253.704 643.486 cv
253.704 630.459 li
273.542 609.56 li
274.152 608.92 274.492 608.068 274.492 607.18 cv
274.492 543.212 li
274.492 542.402 274.205 541.619 273.689 540.996 cv
265.27 530.912 li
264.8 530.349 264.187 529.976 263.529 529.796 cv
263.384 528.585 263.054 527.322 262.729 526.398 cv
261.498 522.871 259.635 519.666 255.899 519.697 cv
cp
f
305.734 758.498 mo
303.838 758.713 302.123 757.356 301.904 755.457 cv
301.686 753.56 303.047 751.844 304.943 751.625 cv
306.84 751.408 308.555 752.768 308.773 754.664 cv
308.994 756.563 307.635 758.277 305.734 758.498 cv
cp
307.915 761.053 mo
308.044 761.275 308.192 761.49 308.375 761.685 cv
317.277 771.193 li
318.58 772.588 320.768 772.66 322.164 771.356 cv
322.892 770.674 323.259 769.752 323.259 768.83 cv
323.259 767.982 322.95 767.135 322.325 766.471 cv
313.426 756.961 li
312.899 756.4 312.23 756.063 311.529 755.934 cv
311.258 754.981 310.892 754.053 310.555 753.342 cv
308.959 749.963 306.771 746.969 303.057 747.394 cv
299.348 747.822 296.689 751.18 297.116 754.891 cv
297.543 758.604 300.893 760.441 304.612 760.838 cv
305.639 760.945 306.812 761.053 307.915 761.053 cv
cp
f
361.143 725.824 mo
359.793 724.475 359.793 722.285 361.143 720.934 cv
362.494 719.584 364.684 719.584 366.033 720.934 cv
367.384 722.285 367.384 724.475 366.033 725.824 cv
364.684 727.176 362.494 727.176 361.143 725.824 cv
cp
362.336 730.906 mo
362.336 738.287 li
365.793 738.287 li
365.793 729.947 li
366.769 728.906 367.645 727.467 368.179 726.394 cv
369.833 723.049 370.815 719.473 368.179 716.828 cv
365.533 714.19 361.252 714.19 358.612 716.828 cv
355.969 719.473 356.609 723.238 358.612 726.394 cv
359.642 728.023 360.979 730.068 362.336 730.906 cv
cp
f
162.763 1026.4 mo
161.412 1025.05 161.412 1022.87 162.763 1021.52 cv
164.112 1020.16 166.3 1020.16 167.651 1021.52 cv
169 1022.87 169 1025.05 167.651 1026.4 cv
166.3 1027.76 164.112 1027.76 162.763 1026.4 cv
cp
101.884 593.795 mo
100.533 592.443 100.533 590.256 101.884 588.906 cv
103.231 587.555 105.421 587.555 106.772 588.906 cv
108.121 590.256 108.121 592.443 106.772 593.795 cv
105.421 595.144 103.231 595.144 101.884 593.795 cv
cp
160.229 1030.51 mo
162.871 1033.15 167.151 1033.15 169.794 1030.51 cv
172.436 1027.87 171.45 1024.29 169.794 1020.94 cv
169.186 1019.71 168.121 1018 166.972 1016.96 cv
166.972 1004.41 li
106.03 941.734 li
106.03 598.56 li
107.229 597.593 108.388 595.815 109.305 594.365 cv
111.304 591.209 111.946 587.443 109.305 584.801 cv
106.663 582.156 102.38 582.156 99.7393 584.799 cv
97.0967 587.443 98.083 591.016 99.7393 594.365 cv
100.384 595.674 101.544 597.523 102.772 598.535 cv
102.571 598.535 li
102.571 943.139 li
163.515 1005.81 li
163.515 1016.74 li
162.312 1017.71 161.147 1019.49 160.229 1020.94 cv
158.227 1024.1 157.587 1027.87 160.229 1030.51 cv
cp
f
136.316 589.824 mo
137.667 591.172 137.667 593.363 136.316 594.711 cv
134.964 596.06 132.776 596.06 131.426 594.711 cv
130.075 593.363 130.075 591.172 131.426 589.824 cv
132.776 588.475 134.964 588.475 136.316 589.824 cv
cp
138.848 585.715 mo
136.208 583.074 131.925 583.074 129.283 585.715 cv
126.642 588.357 127.627 591.935 129.283 595.285 cv
129.866 596.465 130.87 598.089 131.963 599.14 cv
131.963 619.717 li
113.377 638.303 li
113.377 938.402 li
185.125 1009.72 li
185.125 1130.44 li
188.583 1130.44 li
188.583 1008.28 li
116.835 936.963 li
116.835 639.734 li
135.421 621.15 li
135.421 599.593 li
136.675 598.658 137.893 596.793 138.848 595.285 cv
140.85 592.127 141.491 588.357 138.848 585.715 cv
cp
f
134.232 526.331 mo
136.144 526.331 137.691 527.878 137.691 529.789 cv
137.691 531.699 136.144 533.246 134.232 533.246 cv
132.325 533.246 130.776 531.699 130.776 529.789 cv
130.776 527.878 132.325 526.331 134.232 526.331 cv
cp
135.619 521.912 mo
131.885 521.912 130.054 525.138 128.856 528.677 cv
128.235 530.511 127.596 533.646 128.454 535.089 cv
120.509 543.226 li
120.509 566.455 li
113.191 572.457 li
97.5 572.457 li
88.3086 582.293 li
88.3086 599.252 li
96.9522 607.896 li
96.9522 947.324 li
152.062 1002.8 li
152.062 1036.07 li
165.676 1049.9 li
165.676 1130.44 li
169.134 1130.44 li
169.134 1048.49 li
155.519 1034.66 li
155.519 1001.37 li
100.41 945.896 li
100.41 606.465 li
91.7666 597.818 li
91.7666 583.658 li
99 575.916 li
114.429 575.916 li
123.967 568.088 li
123.967 544.636 li
132.336 536.062 li
132.316 536.042 li
133.425 535.917 134.597 535.671 135.619 535.443 cv
139.267 534.625 142.384 532.416 142.384 528.677 cv
142.384 524.941 139.355 521.912 135.619 521.912 cv
cp
f
135.659 556.676 mo
137.571 556.676 139.118 558.225 139.118 560.133 cv
139.118 562.045 137.571 563.592 135.659 563.592 cv
133.75 563.592 132.202 562.045 132.202 560.133 cv
132.202 558.225 133.75 556.676 135.659 556.676 cv
cp
137.046 552.258 mo
133.31 552.258 131.479 555.484 130.284 559.023 cv
129.675 560.82 129.042 563.877 129.827 565.357 cv
127.269 571.037 li
117.688 580.842 li
118.121 609.787 li
108.191 619.717 li
108.191 940.115 li
178.211 1011.86 li
178.211 1131.89 li
181.668 1131.89 li
181.668 1010.46 li
111.649 938.709 li
111.649 621.15 li
121.601 611.199 li
121.167 582.229 li
130.173 573.016 li
133.127 566.451 li
134.405 566.367 135.834 566.06 137.046 565.789 cv
140.693 564.969 143.812 562.758 143.812 559.023 cv
143.812 555.285 140.783 552.258 137.046 552.258 cv
cp
f
151.302 1064.02 mo
151.335 1065.93 149.812 1067.5 147.904 1067.53 cv
145.993 1067.57 144.419 1066.05 144.386 1064.14 cv
144.352 1062.23 145.875 1060.66 147.783 1060.62 cv
149.691 1060.59 151.268 1062.11 151.302 1064.02 cv
cp
152.134 1070.15 mo
154.437 1073.5 li
154.437 1135.64 li
157.895 1135.64 li
157.895 1072.43 li
154.225 1067.09 li
154.191 1065.67 153.81 1063.99 153.471 1062.59 cv
152.589 1058.96 150.325 1055.88 146.592 1055.95 cv
142.853 1056.01 139.878 1059.09 139.943 1062.83 cv
140.009 1066.56 143.268 1068.34 146.825 1069.47 cv
148.275 1069.94 150.537 1070.4 152.134 1070.15 cv
cp
f
146.546 1082.15 mo
146.581 1084.06 145.059 1085.64 143.149 1085.67 cv
141.239 1085.7 139.666 1084.18 139.633 1082.27 cv
139.598 1080.36 141.121 1078.79 143.029 1078.76 cv
144.936 1078.72 146.513 1080.24 146.546 1082.15 cv
cp
147.172 1088.31 mo
149.684 1092.08 li
149.684 1135.64 li
153.142 1135.64 li
153.142 1091.03 li
149.481 1085.54 li
149.505 1084.07 149.081 1082.23 148.717 1080.73 cv
147.835 1077.1 145.571 1074.02 141.836 1074.08 cv
138.1 1074.14 135.123 1077.23 135.188 1080.96 cv
135.255 1084.7 138.514 1086.47 142.071 1087.61 cv
143.46 1088.05 145.59 1088.49 147.172 1088.31 cv
cp
f
197.27 534.623 mo
195.359 534.66 193.787 533.136 193.752 531.228 cv
193.719 529.316 195.241 527.744 197.149 527.71 cv
199.057 527.675 200.634 529.195 200.668 531.107 cv
200.701 533.015 199.18 534.591 197.27 534.623 cv
cp
169.954 920.818 mo
170.353 922.685 169.162 924.523 167.294 924.918 cv
165.427 925.316 163.589 924.125 163.191 922.262 cv
162.794 920.391 163.985 918.553 165.854 918.158 cv
167.722 917.76 169.559 918.951 169.954 920.818 cv
cp
201.738 537.203 mo
209.33 544.791 li
209.33 565.537 li
215.381 571.588 li
215.381 626.928 li
163.515 679.371 li
163.515 869.482 li
172.77 879.711 li
172.77 912.141 li
170.011 914.668 li
168.357 914.512 165.854 915.627 164.367 916.51 cv
161.154 918.418 158.38 920.879 159.159 924.533 cv
159.936 928.19 163.529 930.519 167.182 929.744 cv
170.837 928.967 172.35 925.455 172.392 921.721 cv
172.406 920.356 172.399 918.738 172.155 917.393 cv
176.229 913.664 li
176.229 878.377 li
166.972 868.15 li
166.972 680.791 li
218.838 628.348 li
218.838 570.158 li
212.787 564.106 li
212.787 543.359 li
203.592 534.166 li
203.555 532.753 203.176 531.078 202.836 529.681 cv
201.955 526.05 199.691 522.97 195.958 523.035 cv
192.221 523.099 189.246 526.181 189.309 529.917 cv
189.377 533.652 192.634 535.427 196.191 536.564 cv
197.715 537.05 200.136 537.541 201.738 537.203 cv
cp
f
130.143 1112.33 mo
132.051 1112.29 133.626 1113.81 133.662 1115.72 cv
133.693 1117.63 132.173 1119.21 130.265 1119.24 cv
128.353 1119.28 126.777 1117.75 126.746 1115.84 cv
126.712 1113.93 128.235 1112.36 130.143 1112.33 cv
cp
128.95 1107.65 mo
125.212 1107.72 122.237 1110.79 122.304 1114.53 cv
122.371 1118.27 125.626 1120.04 129.184 1121.18 cv
130.033 1121.45 131.16 1121.71 132.27 1121.85 cv
132.232 1121.87 li
134.987 1126.2 li
134.987 1131.89 li
138.446 1131.89 li
138.446 1125.2 li
135.932 1121.24 li
135.937 1121.24 135.946 1121.24 135.95 1121.23 cv
137.154 1119.98 136.417 1116.71 135.83 1114.3 cv
134.947 1110.66 132.684 1107.58 128.95 1107.65 cv
cp
f
186.455 872.025 mo
186.455 873.934 184.908 875.482 182.998 875.482 cv
181.088 875.482 179.542 873.934 179.542 872.025 cv
179.542 870.115 181.088 868.568 182.998 868.568 cv
184.908 868.568 186.455 870.115 186.455 872.025 cv
cp
191.154 870.938 mo
191.154 866.738 187.75 863.334 183.554 863.334 cv
179.35 863.334 175.946 866.738 175.946 870.938 cv
175.946 875.139 179.35 878.543 183.554 878.543 cv
187.75 878.543 191.154 875.139 191.154 870.938 cv
cp
f
394.186 740.172 mo
392.429 739.422 391.616 737.389 392.366 735.633 cv
393.116 733.879 395.149 733.065 396.907 733.813 cv
398.661 734.566 399.479 736.596 398.726 738.352 cv
397.974 740.107 395.94 740.922 394.186 740.172 cv
cp
393.489 743.203 mo
397.351 744.856 401.821 743.066 403.472 739.203 cv
405.124 735.34 403.333 730.873 399.472 729.221 cv
395.608 727.566 391.142 729.361 389.489 733.223 cv
387.835 737.082 389.626 741.553 393.489 743.203 cv
cp
f
280.105 648.684 mo
281.465 647.34 283.649 647.354 284.994 648.707 cv
286.336 650.068 286.322 652.26 284.965 653.6 cv
283.605 654.941 281.421 654.926 280.075 653.57 cv
278.732 652.213 278.744 650.023 280.105 648.684 cv
cp
271.85 652.705 mo
275.385 652.705 li
276.399 653.92 278.208 655.066 279.491 655.711 cv
282.83 657.387 286.396 658.393 289.059 655.768 cv
291.717 653.144 291.738 648.859 289.112 646.201 cv
286.488 643.545 282.719 644.162 279.55 646.143 cv
278.156 647.012 276.46 648.106 275.462 649.246 cv
270.426 649.246 li
242.737 676.768 li
242.737 697.25 li
255.576 709.352 li
255.576 765.004 li
227.527 793.039 li
227.527 1043.71 li
203.027 1067.48 li
203.027 1130.44 li
206.484 1130.44 li
206.484 1068.95 li
230.984 1045.17 li
230.984 794.469 li
259.035 766.435 li
259.035 707.859 li
246.193 695.758 li
246.193 678.205 li
271.85 652.705 li
cp
f
315.684 592.775 mo
313.779 592.66 312.322 591.023 312.437 589.117 cv
312.551 587.213 314.187 585.76 316.094 585.871 cv
317.998 585.986 319.451 587.623 319.34 589.527 cv
319.227 591.434 317.59 592.887 315.684 592.775 cv
cp
303.555 603.861 mo
311.985 595.428 li
313.467 595.588 315.376 595.303 316.939 595.047 cv
320.627 594.447 323.869 592.426 324.09 588.693 cv
324.314 584.967 321.471 581.764 317.738 581.541 cv
314.01 581.322 311.988 584.432 310.588 587.893 cv
310.027 589.273 309.413 591.422 309.502 593.023 cv
300.096 602.43 li
300.096 656.051 li
293.292 663.223 li
270.363 663.223 li
260.885 673.799 li
260.885 766.402 li
233.102 795.219 li
233.102 1047.15 li
209.33 1069.48 li
209.33 1130.44 li
212.787 1130.44 li
212.787 1070.98 li
236.559 1048.65 li
236.559 796.613 li
264.344 767.797 li
264.344 675.123 li
271.91 666.68 li
294.777 666.68 li
303.555 657.43 li
303.555 603.861 li
cp
f
389.079 693.17 mo
387.167 693.178 385.614 691.639 385.606 689.727 cv
385.597 687.818 387.142 686.268 389.05 686.26 cv
390.958 686.25 392.513 687.793 392.52 689.699 cv
392.53 691.611 390.989 693.164 389.079 693.17 cv
cp
383.083 772.693 mo
383.083 729.693 li
400.429 714.135 li
400.429 698.115 li
395.222 693.938 li
395.458 692.33 394.936 690.039 394.436 688.582 cv
393.224 685.047 391.38 681.832 387.647 681.844 cv
383.909 681.859 380.895 684.898 380.909 688.637 cv
380.925 692.371 384.046 694.566 387.7 695.373 cv
389.2 695.703 391.032 696.084 392.499 696.035 cv
392.425 696.127 li
396.972 699.773 li
396.972 712.592 li
379.622 728.15 li
379.622 771.309 li
360.3 791.594 li
260.314 791.594 li
239.172 810.707 li
239.172 1012.98 li
243.646 1019.69 li
246.521 1017.76 li
242.629 1011.93 li
242.629 812.244 li
261.645 795.051 li
361.779 795.051 li
383.083 772.693 li
cp
f
320.646 728.508 mo
320.709 727.967 320.904 727.477 321.181 727.049 cv
321.583 726.873 321.958 726.623 322.281 726.291 cv
322.446 726.121 322.588 725.941 322.71 725.75 cv
323.25 725.516 323.852 725.404 324.479 725.477 cv
326.377 725.699 327.737 727.414 327.518 729.309 cv
327.293 731.207 325.576 732.563 323.682 732.346 cv
321.785 732.123 320.429 730.406 320.646 728.508 cv
cp
317.423 624.289 mo
317.162 624.225 316.893 624.182 316.612 624.182 cv
316.488 624.182 316.372 624.207 316.252 624.219 cv
315.654 624.076 315.084 623.783 314.616 623.318 cv
313.263 621.971 313.254 619.781 314.6 618.428 cv
315.946 617.074 318.135 617.068 319.488 618.412 cv
320.844 619.76 320.85 621.945 319.506 623.301 cv
318.925 623.887 318.184 624.205 317.423 624.289 cv
cp
313.154 682.957 mo
307.635 698.856 li
307.509 699.219 307.443 699.602 307.443 699.99 cv
307.443 715.234 li
307.443 716.172 307.822 717.065 308.492 717.717 cv
317.392 726.361 li
317.656 726.619 317.959 726.81 318.275 726.967 cv
318.333 727.846 318.463 728.705 318.609 729.391 cv
319.392 733.045 320.836 736.459 324.547 736.893 cv
328.259 737.328 331.616 734.668 332.047 730.955 cv
332.48 727.25 329.643 724.693 326.113 723.453 cv
325.142 723.113 324.029 722.742 322.959 722.49 cv
322.785 722.094 322.539 721.723 322.209 721.4 cv
314.359 713.771 li
314.359 700.57 li
319.879 684.676 li
320.004 684.31 320.068 683.926 320.068 683.541 cv
320.068 627.641 li
320.068 627.303 320.005 626.984 319.915 626.676 cv
320.625 625.756 321.242 624.701 321.649 623.869 cv
323.295 620.512 324.27 616.935 321.619 614.299 cv
318.969 611.664 314.687 611.682 312.054 614.332 cv
309.422 616.982 310.075 620.744 312.084 623.898 cv
312.523 624.588 313.02 625.354 313.55 626.07 cv
313.305 626.543 313.154 627.072 313.154 627.641 cv
313.154 682.957 li
cp
f
252.943 1040.19 mo
254.295 1041.54 254.295 1043.73 252.943 1045.08 cv
251.594 1046.43 249.404 1046.43 248.055 1045.08 cv
246.704 1043.73 246.704 1041.54 248.055 1040.19 cv
249.404 1038.84 251.594 1038.84 252.943 1040.19 cv
cp
246.787 1037.53 mo
246.919 1037.53 li
246.415 1038.22 245.941 1038.96 245.521 1039.62 cv
243.52 1042.78 242.881 1046.54 245.521 1049.18 cv
248.162 1051.82 252.446 1051.83 255.088 1049.19 cv
257.729 1046.54 256.744 1042.97 255.088 1039.62 cv
254.748 1038.93 254.264 1038.09 253.704 1037.3 cv
253.704 1031.91 li
246.787 1031.91 li
246.787 1037.53 li
cp
f
134.772 629.943 mo
140.025 629.943 144.28 625.688 144.28 620.434 cv
144.28 615.184 140.025 610.926 134.772 610.926 cv
129.519 610.926 125.263 615.184 125.263 620.434 cv
125.263 625.688 129.519 629.943 134.772 629.943 cv
1 1 1 rgb
f
249.006 1033.21 mo
254.289 1033.21 258.572 1028.93 258.572 1023.64 cv
258.572 1018.36 254.289 1014.08 249.006 1014.08 cv
243.723 1014.08 239.441 1018.36 239.441 1023.64 cv
239.441 1028.93 243.723 1033.21 249.006 1033.21 cv
cp
f
281.09 763.775 mo
286.369 763.775 290.654 759.49 290.654 754.209 cv
290.654 748.924 286.369 744.643 281.09 744.643 cv
275.805 744.643 271.521 748.924 271.521 754.209 cv
271.521 759.49 275.805 763.775 281.09 763.775 cv
cp
f
245.084 704.932 mo
250.367 704.932 254.649 700.646 254.649 695.365 cv
254.649 690.082 250.367 685.801 245.084 685.801 cv
239.801 685.801 235.518 690.082 235.518 695.365 cv
235.518 700.646 239.801 704.932 245.084 704.932 cv
cp
f
259.848 627.641 mo
265.134 627.641 269.417 623.357 269.417 618.074 cv
269.417 612.793 265.134 608.508 259.848 608.508 cv
254.568 608.508 250.283 612.793 250.283 618.074 cv
250.283 623.357 254.568 627.641 259.848 627.641 cv
cp
f
279.35 692.615 mo
284.634 692.615 288.917 688.332 288.917 683.049 cv
288.917 677.768 284.634 673.482 279.35 673.482 cv
274.068 673.482 269.783 677.768 269.783 683.049 cv
269.783 688.332 274.068 692.615 279.35 692.615 cv
cp
f
321.925 784.301 mo
327.208 784.301 331.491 780.019 331.491 774.736 cv
331.491 769.455 327.208 765.17 321.925 765.17 cv
316.642 765.17 312.355 769.455 312.355 774.736 cv
312.355 780.019 316.642 784.301 321.925 784.301 cv
cp
f
364.064 755.344 mo
369.347 755.344 373.63 751.063 373.63 745.777 cv
373.63 740.496 369.347 736.211 364.064 736.211 cv
358.781 736.211 354.498 740.496 354.498 745.777 cv
354.498 751.063 358.781 755.344 364.064 755.344 cv
cp
f
312.355 698.506 mo
317.639 698.506 321.925 694.225 321.925 688.941 cv
321.925 683.66 317.639 679.375 312.355 679.375 cv
307.075 679.375 302.792 683.66 302.792 688.941 cv
302.792 694.225 307.075 698.506 312.355 698.506 cv
cp
f
342.787 659.174 mo
348.072 659.174 352.354 654.893 352.354 649.609 cv
352.354 644.328 348.072 640.041 342.787 640.041 cv
337.509 640.041 333.223 644.328 333.223 649.609 cv
333.223 654.893 337.509 659.174 342.787 659.174 cv
cp
f
375.017 671.004 mo
380.294 671.004 384.579 666.723 384.579 661.438 cv
384.579 656.156 380.294 651.871 375.017 651.871 cv
369.729 651.871 365.45 656.156 365.45 661.438 cv
365.45 666.723 369.729 671.004 375.017 671.004 cv
cp
f
348.217 712.553 mo
353.498 712.553 357.783 708.271 357.783 702.988 cv
357.783 697.707 353.498 693.422 348.217 693.422 cv
342.934 693.422 338.652 697.707 338.652 702.988 cv
338.652 708.271 342.934 712.553 348.217 712.553 cv
cp
f
400.318 978.25 mo
398.99 976.873 399.029 974.685 400.404 973.361 cv
401.777 972.031 403.969 972.07 405.291 973.445 cv
406.619 974.818 406.582 977.008 405.207 978.334 cv
403.832 979.66 401.645 979.621 400.318 978.25 cv
cp
366.221 1086.87 mo
366.221 1021.3 li
383.039 1005.47 li
398.656 1005.47 li
405.119 998.666 li
405.119 982.416 li
406.072 981.438 406.98 980.09 407.728 978.949 cv
409.783 975.828 410.494 972.07 407.898 969.383 cv
405.303 966.695 401.02 966.623 398.332 969.217 cv
395.645 971.813 396.566 975.404 398.166 978.783 cv
398.879 980.291 400.258 982.527 401.662 983.396 cv
401.662 997.283 li
397.174 1002.01 li
381.67 1002.01 li
362.762 1019.8 li
362.762 1088.3 li
404.711 1130.05 li
409.613 1130.05 li
366.221 1086.87 li
cp
0 .862745 1 rgb
f
384.812 1020.87 mo
385.145 1018.99 386.937 1017.73 388.818 1018.07 cv
390.697 1018.4 391.953 1020.19 391.623 1022.07 cv
391.291 1023.95 389.5 1025.21 387.617 1024.88 cv
385.736 1024.55 384.482 1022.75 384.812 1020.87 cv
cp
376.303 1086.87 mo
376.303 1035.56 li
384.398 1027.22 li
385.725 1027.39 387.281 1027.34 388.602 1027.28 cv
392.334 1027.11 395.789 1025.47 396.439 1021.79 cv
397.088 1018.11 394.631 1014.61 390.951 1013.96 cv
387.273 1013.31 384.908 1016.17 383.115 1019.44 cv
382.268 1020.99 381.209 1023.62 381.482 1025.26 cv
372.846 1034.16 li
372.846 1088.31 li
373.355 1088.81 li
414.826 1130.05 li
419.728 1130.05 li
376.303 1086.87 li
cp
f
386.615 1081.97 mo
385.25 1080.64 385.23 1078.45 386.566 1077.08 cv
387.902 1075.72 390.092 1075.7 391.457 1077.03 cv
392.82 1078.37 392.842 1080.56 391.504 1081.92 cv
390.17 1083.29 387.978 1083.31 386.615 1081.97 cv
cp
390.711 1092.63 mo
390.711 1086.78 li
391.937 1085.82 393.117 1083.96 394.045 1082.47 cv
396.01 1079.29 396.613 1075.51 393.945 1072.9 cv
391.277 1070.29 386.994 1070.33 384.381 1073 cv
381.768 1075.67 382.789 1079.23 384.478 1082.57 cv
385.084 1083.76 386.127 1085.4 387.254 1086.44 cv
387.254 1094.07 li
423.428 1130.05 li
428.33 1130.05 li
390.711 1092.63 li
cp
f
382.932 1052.04 mo
381.566 1050.71 381.543 1048.52 382.881 1047.15 cv
384.219 1045.79 386.406 1045.76 387.77 1047.1 cv
389.135 1048.44 389.156 1050.63 387.82 1051.99 cv
386.482 1053.35 384.295 1053.38 382.932 1052.04 cv
cp
405.982 1098.11 mo
405.982 1071.64 li
388.207 1055.66 li
388.996 1054.71 389.734 1053.54 390.359 1052.54 cv
392.326 1049.36 392.93 1045.58 390.262 1042.97 cv
387.592 1040.36 383.311 1040.4 380.693 1043.07 cv
378.08 1045.74 379.102 1049.3 380.795 1052.63 cv
381.646 1054.32 383.371 1056.9 384.969 1057.4 cv
402.523 1073.18 li
402.523 1099.54 li
432.773 1130.05 li
437.643 1130.05 li
405.982 1098.11 li
cp
f
415.437 1085.74 mo
414.074 1084.4 414.051 1082.21 415.389 1080.85 cv
416.723 1079.48 418.914 1079.46 420.277 1080.8 cv
421.643 1082.13 421.662 1084.32 420.326 1085.69 cv
418.99 1087.05 416.801 1087.07 415.437 1085.74 cv
cp
419.812 1103.87 mo
419.812 1090.47 li
419.627 1090.47 li
420.818 1089.49 421.963 1087.69 422.867 1086.23 cv
424.832 1083.06 425.436 1079.28 422.768 1076.67 cv
420.098 1074.05 415.814 1074.1 413.201 1076.77 cv
410.586 1079.44 411.609 1083 413.301 1086.33 cv
413.959 1087.63 415.137 1089.47 416.375 1090.47 cv
416.355 1090.47 li
416.355 1105.3 li
416.863 1105.81 li
441.186 1130.05 li
446.085 1130.05 li
419.812 1103.87 li
cp
f
415.645 1022.59 mo
415.977 1020.71 417.768 1019.45 419.65 1019.78 cv
421.531 1020.12 422.785 1021.91 422.453 1023.79 cv
422.121 1025.67 420.33 1026.93 418.447 1026.59 cv
416.566 1026.26 415.312 1024.47 415.645 1022.59 cv
cp
436.094 1111.08 mo
436.094 1071.78 li
428.967 1063.41 li
409.629 1063.41 li
404.83 1058.14 li
404.83 1039.4 li
416.076 1029.22 li
415.873 1029 li
417.043 1029.09 418.322 1029.05 419.434 1029 cv
423.164 1028.82 426.621 1027.19 427.27 1023.51 cv
427.918 1019.83 425.463 1016.32 421.783 1015.67 cv
418.103 1015.03 415.738 1017.88 413.947 1021.16 cv
412.953 1022.98 411.66 1026.27 412.576 1027.73 cv
401.371 1037.87 li
401.371 1059.48 li
408.1 1066.87 li
427.371 1066.87 li
432.637 1073.05 li
432.637 1112.5 li
450.043 1130.05 li
454.913 1130.05 li
436.094 1111.08 li
cp
f
422.084 1048.8 mo
420.172 1048.8 418.627 1047.25 418.627 1045.34 cv
418.627 1043.43 420.172 1041.88 422.084 1041.88 cv
423.994 1041.88 425.543 1043.43 425.543 1045.34 cv
425.543 1047.25 423.994 1048.8 422.084 1048.8 cv
cp
442.576 1107.63 mo
442.576 1061.15 li
428.418 1048.8 li
428.469 1047.32 428.076 1045.47 427.738 1043.96 cv
426.92 1040.31 424.707 1037.19 420.973 1037.19 cv
417.234 1037.19 414.207 1040.22 414.207 1043.96 cv
414.207 1047.69 417.432 1049.52 420.973 1050.72 cv
422.408 1051.21 424.646 1051.71 426.248 1051.49 cv
439.119 1062.73 li
439.119 1109.04 li
459.791 1130.05 li
464.642 1130.05 li
442.576 1107.63 li
cp
f
446.998 1054.78 mo
445.67 1053.41 445.709 1051.22 447.084 1049.89 cv
448.459 1048.56 450.648 1048.6 451.973 1049.97 cv
453.299 1051.35 453.26 1053.54 451.887 1054.86 cv
450.514 1056.19 448.324 1056.15 446.998 1054.78 cv
cp
451.508 1107.63 mo
451.508 1059.23 li
452.566 1058.24 453.586 1056.74 454.41 1055.48 cv
456.465 1052.36 457.174 1048.6 454.578 1045.91 cv
451.982 1043.23 447.701 1043.15 445.012 1045.75 cv
442.324 1048.34 443.246 1051.94 444.846 1055.31 cv
445.51 1056.72 446.75 1058.75 448.051 1059.73 cv
448.051 1109.04 li
448.545 1109.55 li
468.686 1130.05 li
473.533 1130.05 li
451.508 1107.63 li
cp
f
450.549 1025.78 mo
448.639 1025.78 447.092 1024.23 447.092 1022.32 cv
447.092 1020.41 448.639 1018.86 450.549 1018.86 cv
452.459 1018.86 454.008 1020.41 454.008 1022.32 cv
454.008 1024.23 452.459 1025.78 450.549 1025.78 cv
cp
466.494 1113.86 mo
466.494 1035.57 li
456.84 1026.19 li
457 1024.66 456.576 1022.6 456.201 1020.93 cv
455.385 1017.29 453.174 1014.17 449.439 1014.17 cv
445.701 1014.17 442.672 1017.2 442.672 1020.93 cv
442.672 1024.67 445.898 1026.5 449.439 1027.7 cv
450.746 1028.14 452.717 1028.59 454.27 1028.51 cv
463.037 1037.03 li
463.037 1115.3 li
477.85 1130.05 li
482.747 1130.05 li
466.494 1113.86 li
cp
f
478.158 1084.23 mo
476.795 1082.9 476.77 1080.71 478.107 1079.35 cv
479.443 1077.98 481.633 1077.96 482.996 1079.29 cv
484.361 1080.63 484.383 1082.82 483.047 1084.18 cv
481.711 1085.55 479.521 1085.57 478.158 1084.23 cv
cp
481.764 1119.44 mo
481.764 1089.37 li
483.16 1088.58 484.535 1086.43 485.586 1084.73 cv
487.551 1081.55 488.156 1077.78 485.488 1075.16 cv
482.818 1072.55 478.533 1072.59 475.92 1075.26 cv
473.305 1077.93 474.328 1081.5 476.02 1084.83 cv
476.656 1086.08 477.781 1087.85 478.977 1088.86 cv
478.307 1088.86 li
478.307 1120.86 li
487.373 1130.05 li
492.228 1130.05 li
481.764 1119.44 li
cp
f
gsave
993.134 289.924 mo
993.134 375.353 923.879 444.608 838.448 444.608 cv
753.019 444.608 683.765 375.353 683.765 289.924 cv
683.765 204.494 753.019 135.239 838.448 135.239 cv
923.879 135.239 993.134 204.494 993.134 289.924 cv
cp
clp
658.531 206.539 mo
657.18 207.891 654.992 207.891 653.643 206.539 cv
652.291 205.189 652.291 203.002 653.643 201.65 cv
654.992 200.299 657.18 200.299 658.531 201.65 cv
659.886 203.002 659.886 205.189 658.531 206.539 cv
cp
818.286 154.213 mo
799.269 134.762 li
752.863 134.762 li
686.301 202.62 li
663.336 202.62 li
662.338 201.363 660.437 200.166 659.104 199.506 cv
655.756 197.852 652.181 196.865 649.535 199.506 cv
646.896 202.15 646.896 206.434 649.537 209.072 cv
652.181 211.715 655.947 211.074 659.104 209.072 cv
660.436 208.228 662.053 207.177 663.057 206.078 cv
687.753 206.078 li
754.314 138.219 li
797.814 138.219 li
816.831 157.667 li
832.803 157.667 li
854.988 136.49 li
1105.26 136.49 li
1131.63 110.557 li
1196.6 110.557 li
1196.6 107.1 li
1130.21 107.1 li
1103.84 133.033 li
853.603 133.033 li
831.419 154.213 li
818.286 154.213 li
cp
f
660.114 114.245 mo
658.765 115.598 656.575 115.598 655.225 114.245 cv
653.875 112.896 653.875 110.709 655.225 109.357 cv
656.575 108.008 658.765 108.008 660.114 109.357 cv
661.465 110.709 661.465 112.896 660.114 114.245 cv
cp
947.074 68.1592 mo
948.425 66.8076 950.612 66.8076 951.963 68.1592 cv
953.311 69.5098 953.311 71.6973 951.963 73.0479 cv
950.612 74.3994 948.425 74.3994 947.074 73.0479 cv
945.719 71.6973 945.719 69.5098 947.074 68.1592 cv
cp
695.087 113.727 mo
736.796 72.3057 li
942.459 72.3057 li
943.494 73.4785 945.248 74.5732 946.499 75.1924 cv
949.849 76.8486 953.425 77.833 956.069 75.1924 cv
958.71 72.5498 958.706 68.2676 956.065 65.626 cv
953.425 62.9854 949.657 63.626 946.499 65.626 cv
945.076 66.5303 943.327 67.667 942.35 68.8486 cv
735.371 68.8486 li
693.662 110.27 li
664.869 110.27 li
663.861 109.034 661.999 107.864 660.685 107.214 cv
657.338 105.56 653.762 104.573 651.12 107.214 cv
648.476 109.857 648.476 114.139 651.12 116.781 cv
653.762 119.422 657.528 118.783 660.685 116.781 cv
662.047 115.919 663.699 114.841 664.696 113.717 cv
664.696 113.727 li
695.087 113.727 li
cp
f
953.941 105.512 mo
954.341 103.645 956.178 102.453 958.046 102.852 cv
959.912 103.247 961.103 105.084 960.706 106.951 cv
960.31 108.82 958.473 110.012 956.606 109.615 cv
954.738 109.217 953.547 107.379 953.941 105.512 cv
cp
627.971 143.547 mo
626.62 144.896 624.43 144.896 623.08 143.547 cv
621.731 142.195 621.731 140.008 623.08 138.656 cv
624.43 137.305 626.62 137.307 627.971 138.656 cv
629.323 140.008 629.323 142.195 627.971 143.547 cv
cp
865.398 89.5586 mo
746.396 89.5586 li
696.837 138.506 li
631.652 138.506 li
630.671 137.689 629.47 136.972 628.543 136.514 cv
625.193 134.855 621.617 133.87 618.975 136.514 cv
616.332 139.154 616.336 143.436 618.978 146.078 cv
621.617 148.721 625.386 148.078 628.543 146.078 cv
630.326 144.95 632.612 143.45 633.262 141.963 cv
698.254 141.963 li
747.814 93.0166 li
863.943 93.0166 li
887.283 116.895 li
949.299 116.895 li
953.705 111.901 li
954.934 112.062 956.318 112.062 957.509 112.049 cv
961.238 112.01 964.751 110.495 965.531 106.84 cv
966.308 103.188 963.974 99.5957 960.319 98.8164 cv
956.667 98.0386 954.206 100.814 952.297 104.026 cv
951.305 105.695 950.02 108.642 950.57 110.228 cv
947.739 113.437 li
888.738 113.437 li
865.398 89.5586 li
cp
f
625.989 174.707 mo
624.08 174.707 622.53 173.161 622.53 171.25 cv
622.53 169.34 624.08 167.792 625.989 167.792 cv
627.897 167.792 629.447 169.34 629.447 171.25 cv
629.447 173.161 627.897 174.707 625.989 174.707 cv
cp
971.926 109.161 mo
972.324 107.295 974.161 106.103 976.028 106.502 cv
977.896 106.896 979.088 108.732 978.69 110.6 cv
978.295 112.467 976.458 113.661 974.59 113.264 cv
972.724 112.865 971.527 111.029 971.926 109.161 cv
cp
704.603 153.492 mo
744.078 113.727 li
821.072 113.727 li
832.596 124.1 li
964.002 124.1 li
971.498 115.529 li
972.77 115.716 974.238 115.714 975.489 115.699 cv
979.224 115.658 982.735 114.146 983.515 110.49 cv
984.292 106.84 981.958 103.245 978.305 102.467 cv
974.65 101.689 972.186 104.462 970.281 107.676 cv
969.324 109.284 968.084 112.089 968.492 113.712 cv
962.431 120.643 li
833.925 120.643 li
822.399 110.27 li
742.642 110.27 li
703.164 150.033 li
644.099 150.033 li
629.073 165.057 li
627.645 165.102 626.012 165.489 624.878 165.872 cv
621.337 167.07 618.112 168.9 618.112 172.637 cv
618.112 176.372 621.141 179.402 624.878 179.402 cv
628.613 179.402 630.825 176.281 631.644 172.637 cv
632.064 170.761 632.555 168.38 632.193 166.827 cv
645.53 153.492 li
704.603 153.492 li
cp
f
655.266 173.834 mo
653.363 173.682 651.942 172.02 652.092 170.115 cv
652.24 168.211 653.904 166.789 655.806 166.937 cv
657.71 167.086 659.132 168.752 658.983 170.656 cv
658.834 172.559 657.17 173.982 655.266 173.834 cv
cp
992.679 115 mo
993.074 113.131 994.912 111.941 996.782 112.338 cv
998.65 112.734 999.838 114.572 999.443 116.439 cv
999.045 118.307 997.208 119.497 995.34 119.102 cv
993.473 118.705 992.281 116.867 992.679 115 cv
cp
706.034 161.661 mo
747.825 119.777 li
817.287 119.777 li
828.531 130.732 li
983.197 129.572 li
992.147 121.347 li
993.443 121.549 994.957 121.552 996.242 121.537 cv
999.977 121.495 1003.49 119.982 1004.26 116.328 cv
1005.04 112.676 1002.71 109.081 999.055 108.305 cv
995.405 107.528 992.939 110.301 991.032 113.516 cv
990.115 115.06 988.934 117.712 989.203 119.356 cv
981.841 126.122 li
829.926 127.266 li
818.691 116.32 li
746.389 116.32 li
704.616 158.189 li
670.527 157.807 li
659.362 164.299 li
659.459 164.466 li
657.961 164.331 656.107 164.619 654.85 164.937 cv
651.228 165.855 647.869 167.428 647.577 171.152 cv
647.284 174.879 650.066 178.133 653.79 178.426 cv
657.518 178.717 659.963 175.781 661.063 172.209 cv
661.602 170.468 662.24 168.274 662.103 166.707 cv
671.443 161.275 li
706.034 161.661 li
cp
f
626.919 117.12 mo
625.008 117.088 623.488 115.512 623.521 113.602 cv
623.557 111.695 625.129 110.174 627.04 110.205 cv
628.948 110.24 630.471 111.814 630.436 113.725 cv
630.403 115.633 628.826 117.154 626.919 117.12 cv
cp
966.023 75.834 mo
966.422 73.9658 968.259 72.7754 970.127 73.1719 cv
971.994 73.5684 973.186 75.4053 972.787 77.2725 cv
972.393 79.1416 970.555 80.3311 968.687 79.9346 cv
966.82 79.5371 965.629 77.7021 966.023 75.834 cv
cp
632.376 112.646 mo
631.238 109.088 629.465 105.831 625.73 105.766 cv
621.993 105.699 618.912 108.674 618.847 112.41 cv
618.782 116.145 621.863 118.41 625.493 119.291 cv
627.133 119.69 629.152 120.143 630.68 120.026 cv
639.138 129.574 li
691.061 129.574 li
742.928 77.4189 li
938.078 77.4189 li
947.874 85.9209 li
962.059 85.9209 li
965.76 82.2197 li
966.994 82.3838 968.391 82.3848 969.59 82.3711 cv
973.324 82.3281 976.833 80.8154 977.612 77.1611 cv
978.389 73.5068 976.057 69.917 972.403 69.1377 cv
968.749 68.3604 966.287 71.1338 964.38 74.3467 cv
963.405 75.9863 962.145 78.8623 962.623 80.4668 cv
960.628 82.4629 li
949.162 82.4629 li
939.368 73.9619 li
741.49 73.9619 li
689.623 126.117 li
640.693 126.117 li
633.098 117.539 li
633.219 115.981 632.799 113.976 632.376 112.646 cv
cp
f
596.231 141.853 mo
598.142 141.889 599.662 143.463 599.628 145.37 cv
599.595 147.281 598.021 148.803 596.111 148.768 cv
594.202 148.734 592.682 147.158 592.715 145.25 cv
592.746 143.342 594.322 141.82 596.231 141.853 cv
cp
835.409 104.619 mo
836.761 103.27 838.947 103.27 840.299 104.619 cv
841.649 105.97 841.649 108.16 840.299 109.508 cv
838.947 110.859 836.761 110.859 835.409 109.508 cv
834.058 108.16 834.058 105.97 835.409 104.619 cv
cp
594.684 150.939 mo
596.744 151.438 599.416 152.037 600.936 151.462 cv
609.268 159.256 li
630.488 159.256 li
643.453 147.728 li
700.268 147.728 li
740.321 108.541 li
830.609 108.541 li
831.607 109.798 833.504 110.994 834.839 111.652 cv
838.185 113.309 841.761 114.295 844.404 111.652 cv
847.045 109.01 847.045 104.728 844.404 102.087 cv
841.761 99.4434 837.996 100.086 834.839 102.087 cv
833.502 102.932 831.886 103.984 830.883 105.084 cv
738.91 105.084 li
698.855 144.27 li
642.142 144.27 li
629.175 155.799 li
610.631 155.799 li
602.301 148.001 li
602.213 146.703 601.889 145.302 601.568 144.295 cv
600.432 140.734 598.659 137.477 594.921 137.411 cv
591.186 137.348 588.106 140.324 588.037 144.059 cv
587.976 147.792 591.056 150.057 594.684 150.939 cv
cp
f
1119.35 179.682 mo
1120.7 178.331 1122.89 178.331 1124.24 179.682 cv
1125.59 181.033 1125.59 183.221 1124.24 184.57 cv
1122.89 185.922 1120.7 185.922 1119.35 184.57 cv
1118 183.221 1118 181.033 1119.35 179.682 cv
cp
980.513 184.531 mo
979.162 185.883 976.975 185.883 975.623 184.531 cv
974.272 183.18 974.272 180.992 975.623 179.641 cv
976.975 178.291 979.162 178.291 980.513 179.641 cv
981.864 180.992 981.864 183.18 980.513 184.531 cv
cp
981.083 177.109 mo
977.927 175.107 974.161 174.469 971.518 177.109 cv
968.877 179.75 968.877 184.033 971.518 186.676 cv
974.161 189.314 977.737 188.331 981.083 186.676 cv
982.404 186.024 984.278 184.845 985.283 183.602 cv
1114.55 183.602 li
1115.55 184.858 1117.45 186.055 1118.78 186.715 cv
1122.13 188.369 1125.71 189.355 1128.35 186.715 cv
1130.99 184.072 1130.99 179.791 1128.35 177.15 cv
1125.71 174.506 1121.94 175.146 1118.78 177.15 cv
1117.45 177.994 1115.83 179.046 1114.83 180.145 cv
985.071 180.145 li
984.072 179.031 982.435 177.965 981.083 177.109 cv
cp
f
803.692 158.314 mo
805.043 156.967 807.231 156.967 808.582 158.314 cv
809.932 159.666 809.932 161.857 808.582 163.205 cv
807.231 164.555 805.043 164.555 803.692 163.205 cv
802.342 161.857 802.342 159.666 803.692 158.314 cv
cp
809.152 165.35 mo
810.221 164.822 811.65 163.951 812.689 162.98 cv
836.432 162.98 li
857.179 141.963 li
1109.47 141.963 li
1132.95 117.49 li
1196.6 117.49 li
1196.6 114.033 li
1131.48 114.033 li
1107.99 138.506 li
855.733 138.506 li
834.986 159.523 li
813.673 159.523 li
812.84 158.162 810.787 156.818 809.152 155.783 cv
805.995 153.783 802.229 153.143 799.586 155.783 cv
796.945 158.426 796.945 162.707 799.586 165.35 cv
802.229 167.992 805.805 167.006 809.152 165.35 cv
cp
f
800.355 200.572 mo
799.005 201.924 796.816 201.924 795.467 200.572 cv
794.119 199.223 794.119 197.033 795.467 195.682 cv
796.816 194.331 799.005 194.331 800.355 195.682 cv
801.711 197.033 801.711 199.223 800.355 200.572 cv
cp
805.16 199.603 mo
813.379 199.603 li
813.379 196.146 li
804.883 196.146 li
803.881 195.047 802.264 193.994 800.93 193.15 cv
797.772 191.15 794.005 190.508 791.364 193.15 cv
788.723 195.792 788.719 200.074 791.36 202.717 cv
794.005 205.359 797.58 204.372 800.93 202.717 cv
802.262 202.058 804.162 200.86 805.16 199.603 cv
cp
f
752.73 267.718 mo
751.376 269.062 749.189 269.058 747.842 267.701 cv
746.496 266.347 746.504 264.156 747.858 262.812 cv
749.212 261.466 751.4 261.472 752.748 262.826 cv
754.096 264.183 754.088 266.373 752.73 267.718 cv
cp
753.328 260.296 mo
750.174 258.285 746.412 257.633 743.762 260.267 cv
741.111 262.896 741.094 267.183 743.728 269.832 cv
746.366 272.483 749.941 271.508 753.298 269.863 cv
754.392 269.327 755.867 268.429 756.917 267.433 cv
764.904 267.433 li
764.904 263.976 li
757.793 263.976 li
756.936 262.636 754.928 261.316 753.328 260.296 cv
cp
f
682.002 261.57 mo
683.356 260.225 685.545 260.234 686.892 261.587 cv
688.239 262.941 688.231 265.129 686.874 266.476 cv
685.52 267.82 683.333 267.816 681.985 266.462 cv
680.643 265.105 680.648 262.918 682.002 261.57 cv
cp
812.961 256.082 mo
814.244 254.667 816.428 254.554 817.843 255.837 cv
819.262 257.117 819.373 259.303 818.09 260.72 cv
816.81 262.134 814.626 262.246 813.207 260.966 cv
811.789 259.685 811.678 257.498 812.961 256.082 cv
cp
687.442 268.621 mo
688.128 268.285 688.965 267.808 689.752 267.251 cv
690.387 267.987 691.313 268.462 692.358 268.462 cv
712.818 268.462 li
713.798 268.462 714.732 268.046 715.389 267.318 cv
730.206 250.883 li
772.221 250.883 li
783.176 261.441 li
783.807 262.053 784.647 262.399 785.529 262.41 cv
807.571 262.699 li
807.589 262.699 807.603 262.699 807.619 262.699 cv
808.516 262.699 809.328 262.35 809.943 261.785 cv
810.842 262.425 811.865 263.017 812.765 263.525 cv
816.02 265.363 819.812 265.812 822.318 263.043 cv
824.823 260.271 824.611 255.992 821.839 253.487 cv
819.062 250.984 815.544 252.149 812.282 253.97 cv
811.357 254.487 810.156 255.291 809.205 256.183 cv
808.74 255.942 808.223 255.79 807.662 255.783 cv
786.987 255.513 li
776.016 244.937 li
775.371 244.314 774.51 243.966 773.616 243.966 cv
728.665 243.966 li
727.686 243.966 726.754 244.383 726.098 245.109 cv
711.281 261.546 li
692.358 261.546 li
691.928 261.546 691.521 261.634 691.141 261.778 cv
690.137 260.78 688.687 259.831 687.472 259.054 cv
684.318 257.046 680.557 256.392 677.906 259.025 cv
675.255 261.658 675.238 265.939 677.871 268.591 cv
680.51 271.242 684.086 270.267 687.442 268.621 cv
cp
f
770.069 193.831 mo
771.353 192.416 773.537 192.305 774.956 193.584 cv
776.371 194.865 776.482 197.051 775.202 198.469 cv
773.923 199.885 771.738 199.994 770.319 198.715 cv
768.899 197.435 768.79 195.247 770.069 193.831 cv
cp
769.875 201.275 mo
773.133 203.113 776.925 203.562 779.427 200.791 cv
781.932 198.021 781.72 193.742 778.947 191.236 cv
776.176 188.734 772.653 189.896 769.391 191.721 cv
768.301 192.327 766.834 193.336 765.838 194.416 cv
756.85 194.697 li
756.958 198.152 li
765.258 197.895 li
766.205 199.164 768.246 200.356 769.875 201.275 cv
cp
f
772.569 293.17 mo
774.46 293.437 775.776 295.183 775.51 297.074 cv
775.246 298.966 773.496 300.283 771.606 300.017 cv
769.715 299.751 768.401 298.004 768.666 296.113 cv
768.929 294.22 770.678 292.903 772.569 293.17 cv
cp
766.296 297.183 mo
766.603 300.906 768.355 304.299 772.052 304.82 cv
775.754 305.339 779.174 302.766 779.697 299.064 cv
780.214 295.363 777.275 293.101 773.936 291.424 cv
772.254 290.576 769.346 289.534 767.764 290.072 cv
735.436 290.072 li
735.436 293.531 li
766.174 293.531 li
766.115 294.728 766.203 296.043 766.296 297.183 cv
cp
f
620.912 234.579 mo
621.656 232.82 623.685 231.997 625.443 232.742 cv
627.203 233.486 628.023 235.514 627.279 237.275 cv
626.536 239.035 624.506 239.857 622.748 239.111 cv
620.989 238.365 620.168 236.336 620.912 234.579 cv
cp
969.05 321.373 mo
970.906 320.925 972.77 322.072 973.219 323.925 cv
973.665 325.781 972.523 327.65 970.666 328.095 cv
968.81 328.543 966.942 327.402 966.497 325.543 cv
966.051 323.689 967.191 321.82 969.05 321.373 cv
cp
620.978 240.445 mo
621.895 241.263 623.295 242.296 624.623 242.889 cv
629.26 249.433 li
698.338 318.808 li
698.842 319.316 li
737.4 319.462 li
753.895 337.904 li
962.275 337.904 li
967.547 331.829 li
967.478 331.768 li
969.018 331.589 970.965 330.674 972.527 329.906 cv
975.883 328.258 978.396 325.379 977.52 321.746 cv
977.291 320.792 976.865 319.937 976.303 319.208 cv
976.322 319.122 976.352 319.042 976.364 318.955 cv
977.876 308.582 li
978.149 306.689 976.843 304.933 974.952 304.66 cv
973.053 304.384 971.308 305.691 971.031 307.582 cv
969.703 316.687 li
969.59 316.708 969.477 316.725 969.363 316.751 cv
965.729 317.629 964.703 321.193 964.368 324.914 cv
964.244 326.292 964.263 328.333 964.711 329.825 cv
960.698 334.447 li
755.441 334.447 li
738.95 316.008 li
700.284 315.863 li
631.999 247.316 li
628.303 242.101 li
629.102 240.763 629.527 238.595 629.844 236.853 cv
630.509 233.172 629.691 229.443 626.25 227.988 cv
622.81 226.531 618.841 228.137 617.381 231.578 cv
615.93 235.021 618.184 237.965 620.978 240.445 cv
cp
f
593.756 170.693 mo
595.667 170.713 597.196 172.275 597.178 174.187 cv
597.16 176.098 595.598 177.629 593.687 177.609 cv
591.777 177.588 590.246 176.025 590.269 174.117 cv
590.285 172.209 591.849 170.672 593.756 170.693 cv
cp
823.938 137.764 mo
825.847 137.816 827.352 139.404 827.302 141.314 cv
827.246 143.223 825.66 144.727 823.753 144.676 cv
821.841 144.625 820.336 143.033 820.39 141.127 cv
820.44 139.219 822.031 137.713 823.938 137.764 cv
cp
592.56 179.516 mo
593.483 179.841 594.746 180.171 595.958 180.315 cv
596.138 180.974 596.51 181.586 597.072 182.057 cv
607.157 190.477 li
607.779 190.992 608.563 191.279 609.374 191.279 cv
673.341 191.279 li
674.228 191.279 675.08 190.939 675.722 190.328 cv
696.62 170.49 li
709.647 170.49 li
710.555 170.49 711.428 170.135 712.075 169.495 cv
750.83 131.303 li
808.842 131.303 li
815.335 137.402 li
816.01 138.037 816.877 138.341 817.74 138.331 cv
817.799 139.67 818.115 141.14 818.438 142.187 cv
819.537 145.756 821.281 149.029 825.02 149.133 cv
828.754 149.232 831.861 146.287 831.965 142.553 cv
832.062 138.816 829.007 136.523 825.384 135.607 cv
824.072 135.275 822.513 134.907 821.154 134.823 cv
821.139 133.921 820.777 133.026 820.068 132.361 cv
812.58 125.324 li
811.938 124.723 811.09 124.389 810.212 124.389 cv
749.411 124.389 li
748.503 124.389 747.632 124.745 746.984 125.383 cv
708.228 163.574 li
695.242 163.574 li
694.354 163.574 693.503 163.916 692.861 164.525 cv
671.963 184.363 li
610.627 184.363 li
601.506 176.747 li
601.04 176.36 600.501 176.131 599.945 176.023 cv
599.827 174.944 599.6 173.813 599.388 172.822 cv
598.605 169.161 596.431 166.025 592.692 165.99 cv
588.958 165.955 585.899 168.949 585.857 172.687 cv
585.827 176.422 589.032 178.285 592.56 179.516 cv
cp
f
624.491 294.726 mo
625.676 293.226 627.848 292.972 629.347 294.158 cv
630.85 295.341 631.103 297.517 629.916 299.016 cv
628.73 300.509 626.558 300.766 625.06 299.582 cv
623.562 298.396 623.305 296.222 624.491 294.726 cv
cp
843.892 363.55 mo
845.175 362.134 847.359 362.024 848.777 363.304 cv
850.192 364.583 850.304 366.771 849.023 368.187 cv
847.745 369.605 845.56 369.712 844.142 368.433 cv
842.72 367.154 842.612 364.964 843.892 363.55 cv
cp
630.735 301.076 mo
631.886 300.331 633.459 299.074 634.36 297.812 cv
655.06 297.812 li
687.172 330.25 li
729.907 330.25 li
746.764 349.141 li
803.783 349.141 li
819.343 367.726 li
839.172 367.726 li
840.154 368.954 842.117 370.1 843.696 370.992 cv
846.953 372.83 850.746 373.281 853.249 370.509 cv
855.755 367.738 855.542 363.462 852.768 360.954 cv
849.996 358.451 846.475 359.617 843.213 361.439 cv
842.078 362.073 840.529 363.138 839.535 364.271 cv
820.958 364.271 li
805.397 345.683 li
748.314 345.683 li
731.457 326.791 li
688.614 326.791 li
656.501 294.355 li
634.185 294.355 li
633.086 293.271 631.173 292.32 629.623 291.576 cv
626.25 289.955 622.438 289.755 620.121 292.687 cv
617.805 295.617 618.298 299.87 621.228 302.189 cv
624.162 304.504 627.599 303.109 630.735 301.076 cv
cp
f
594.411 204.291 mo
595.903 203.102 598.074 203.346 599.268 204.838 cv
600.462 206.331 600.217 208.51 598.721 209.697 cv
597.228 210.887 595.052 210.643 593.865 209.15 cv
592.672 207.658 592.915 205.48 594.411 204.291 cv
cp
599.051 211.891 mo
600.441 211.389 602.443 210.423 603.58 209.295 cv
628.825 209.295 li
638.186 218.697 li
638.186 247.858 li
702.232 311.521 li
702.738 312.024 li
739.021 312.024 li
754.364 327.962 li
835.946 327.962 li
839.901 324.373 li
837.573 321.812 li
834.609 324.505 li
755.838 324.505 li
740.493 308.566 li
704.164 308.566 li
641.645 246.42 li
641.645 217.268 li
630.261 205.838 li
603.736 205.838 li
602.866 204.622 601.362 203.382 600.121 202.385 cv
597.203 200.042 593.536 198.984 590.616 201.316 cv
587.694 203.646 587.212 207.898 589.542 210.822 cv
591.875 213.738 595.537 213.161 599.051 211.891 cv
cp
f
820.825 225.56 mo
818.928 225.342 817.569 223.627 817.786 221.73 cv
818.005 219.834 819.722 218.473 821.618 218.691 cv
823.516 218.91 824.874 220.625 824.658 222.521 cv
824.437 224.422 822.723 225.781 820.825 225.56 cv
cp
826.998 221.398 mo
826.603 217.68 824.764 214.33 821.052 213.902 cv
817.34 213.477 813.983 216.135 813.555 219.844 cv
813.13 223.559 816.124 225.745 819.502 227.342 cv
820.213 227.678 821.141 228.044 822.094 228.316 cv
822.224 229.018 822.561 229.687 823.121 230.213 cv
832.631 239.111 li
833.295 239.736 834.143 240.045 834.991 240.045 cv
835.912 240.045 836.834 239.678 837.517 238.951 cv
838.82 237.555 838.748 235.367 837.353 234.064 cv
827.846 225.161 li
827.65 224.979 827.436 224.831 827.214 224.702 cv
827.214 223.599 827.105 222.426 826.998 221.398 cv
cp
f
791.984 282.82 mo
790.635 284.17 788.446 284.17 787.095 282.82 cv
785.744 281.47 785.744 279.281 787.095 277.929 cv
788.446 276.58 790.635 276.58 791.984 277.929 cv
793.336 279.281 793.336 281.47 791.984 282.82 cv
cp
792.556 275.399 mo
789.398 273.396 785.633 272.755 782.989 275.399 cv
780.35 278.039 780.35 282.32 782.989 284.966 cv
785.633 287.603 789.209 286.62 792.556 284.966 cv
793.627 284.433 795.066 283.555 796.107 282.58 cv
804.448 282.58 li
804.448 279.123 li
797.067 279.123 li
796.228 277.766 794.184 276.428 792.556 275.399 cv
cp
f
622.52 443.75 mo
624.43 443.75 625.978 445.296 625.978 447.207 cv
625.978 449.118 624.43 450.666 622.52 450.666 cv
620.611 450.666 619.063 449.118 619.063 447.207 cv
619.063 445.296 620.611 443.75 622.52 443.75 cv
cp
623.906 455.085 mo
627.644 455.085 630.672 452.055 630.672 448.32 cv
630.672 444.582 627.554 442.373 623.906 441.555 cv
621.482 441.009 618.199 440.33 616.975 441.555 cv
615.748 442.777 616.469 446.33 617.145 448.32 cv
618.34 451.858 620.172 455.085 623.906 455.085 cv
cp
f
597.268 117.455 mo
595.356 117.42 593.837 115.844 593.871 113.937 cv
593.904 112.027 595.478 110.506 597.39 110.539 cv
599.297 110.574 600.82 112.146 600.784 114.057 cv
600.752 115.967 599.176 117.488 597.268 117.455 cv
cp
984.318 82.6416 mo
984.714 80.7725 986.551 79.5801 988.423 79.9795 cv
990.286 80.376 991.478 82.2139 991.078 84.0801 cv
990.684 85.9482 988.847 87.1396 986.979 86.7412 cv
985.111 86.3447 983.921 84.5088 984.318 82.6416 cv
cp
602.725 112.978 mo
601.589 109.42 599.813 106.164 596.078 106.096 cv
592.342 106.032 589.261 109.008 589.196 112.744 cv
589.131 116.478 592.211 118.742 595.842 119.622 cv
597.238 119.963 598.914 120.342 600.326 120.378 cv
609.52 129.574 li
630.267 129.574 li
636.318 135.625 li
694.509 135.625 li
746.952 83.7588 li
934.311 83.7588 li
944.537 93.0156 li
979.825 93.0156 li
983.553 88.9424 li
984.898 89.1855 986.516 89.1934 987.881 89.1787 cv
991.615 89.1367 995.128 87.623 995.904 83.9688 cv
996.681 80.3154 994.351 76.7227 990.694 75.9463 cv
987.04 75.167 984.578 77.9414 982.67 81.1543 cv
981.787 82.6416 980.673 85.1455 980.828 86.7979 cv
978.302 89.5566 li
945.872 89.5566 li
935.644 80.3018 li
745.532 80.3018 li
693.088 132.167 li
637.749 132.167 li
631.698 126.117 li
610.952 126.117 li
603.363 118.525 li
603.702 116.923 603.211 114.502 602.725 112.978 cv
cp
f
934.728 99.7852 mo
934.728 97.875 936.275 96.3281 938.186 96.3281 cv
940.094 96.3281 941.644 97.875 941.644 99.7852 cv
941.644 101.695 940.094 103.242 938.186 103.242 cv
936.275 103.242 934.728 101.695 934.728 99.7852 cv
cp
944.703 100.34 mo
944.703 96.1367 941.299 92.7324 937.099 92.7324 cv
932.898 92.7324 929.495 96.1367 929.495 100.34 cv
929.495 104.536 932.898 107.941 937.099 107.941 cv
941.299 107.941 944.703 104.536 944.703 100.34 cv
cp
f
1000.82 503.166 mo
998.978 503.655 997.086 502.549 996.603 500.701 cv
996.117 498.855 997.222 496.964 999.068 496.478 cv
1000.92 495.994 1002.81 497.1 1003.29 498.945 cv
1003.78 500.795 1002.67 502.684 1000.82 503.166 cv
cp
998.828 493.379 mo
994.763 494.447 992.336 498.603 993.402 502.662 cv
994.469 506.726 998.622 509.155 1002.69 508.089 cv
1006.75 507.024 1009.18 502.868 1008.11 498.803 cv
1007.04 494.743 1002.89 492.314 998.828 493.379 cv
cp
f
970.737 503.166 mo
968.891 503.655 966.999 502.549 966.518 500.701 cv
966.03 498.855 967.135 496.964 968.981 496.478 cv
970.828 495.994 972.72 497.1 973.206 498.945 cv
973.688 500.795 972.584 502.684 970.737 503.166 cv
cp
968.742 493.379 mo
964.676 494.447 962.249 498.603 963.315 502.662 cv
964.383 506.726 968.536 509.155 972.601 508.089 cv
976.659 507.024 979.092 502.868 978.023 498.803 cv
976.957 494.743 972.801 492.314 968.742 493.379 cv
cp
f
943.882 502.743 mo
942.035 503.228 940.144 502.123 939.658 500.276 cv
939.175 498.43 940.279 496.537 942.126 496.055 cv
943.974 495.568 945.864 496.674 946.348 498.522 cv
946.835 500.369 945.729 502.258 943.882 502.743 cv
cp
941.883 492.955 mo
937.822 494.022 935.394 498.178 936.457 502.239 cv
937.524 506.301 941.681 508.73 945.747 507.662 cv
949.806 506.597 952.236 502.441 951.17 498.376 cv
950.103 494.316 945.945 491.888 941.883 492.955 cv
cp
f
897.189 502.68 mo
896.254 501.013 896.846 498.906 898.511 497.972 cv
900.174 497.035 902.284 497.625 903.217 499.293 cv
904.152 500.957 903.562 503.066 901.896 504 cv
900.232 504.934 898.125 504.343 897.189 502.68 cv
cp
902.912 506.938 mo
906.576 504.879 907.877 500.246 905.819 496.587 cv
903.764 492.924 899.131 491.623 895.464 493.68 cv
891.807 495.734 890.503 500.371 892.561 504.034 cv
894.616 507.693 899.253 508.993 902.912 506.938 cv
cp
f
1143.92 155.678 mo
1143.92 153.766 1145.47 152.217 1147.38 152.217 cv
1149.29 152.217 1150.84 153.766 1150.84 155.678 cv
1150.84 157.586 1149.29 159.135 1147.38 159.135 cv
1145.47 159.135 1143.92 157.586 1143.92 155.678 cv
cp
1153.9 156.228 mo
1153.9 152.027 1150.5 148.622 1146.3 148.622 cv
1142.1 148.622 1138.69 152.027 1138.69 156.228 cv
1138.69 160.428 1142.1 163.831 1146.3 163.831 cv
1150.5 163.831 1153.9 160.428 1153.9 156.228 cv
cp
f
1004.06 322.543 mo
1004.06 324.451 1002.52 326 1000.61 326 cv
998.693 326 997.146 324.451 997.146 322.543 cv
997.146 320.633 998.693 319.082 1000.61 319.082 cv
1002.52 319.082 1004.06 320.633 1004.06 322.543 cv
cp
991.915 323.093 mo
991.915 327.293 995.32 330.699 999.517 330.699 cv
1003.72 330.699 1007.12 327.293 1007.12 323.093 cv
1007.12 318.892 1003.72 315.488 999.517 315.488 cv
995.32 315.488 991.915 318.892 991.915 323.093 cv
cp
f
1057.29 341.343 mo
1057.29 343.254 1055.75 344.8 1053.83 344.8 cv
1051.92 344.8 1050.38 343.254 1050.38 341.343 cv
1050.38 339.433 1051.92 337.883 1053.83 337.883 cv
1055.75 337.883 1057.29 339.433 1057.29 341.343 cv
cp
1045.15 341.896 mo
1045.15 346.093 1048.55 349.5 1052.75 349.5 cv
1056.95 349.5 1060.35 346.093 1060.35 341.896 cv
1060.35 337.695 1056.95 334.289 1052.75 334.289 cv
1048.55 334.289 1045.15 337.695 1045.15 341.896 cv
cp
f
939.627 363.287 mo
939.627 361.375 941.175 359.829 943.086 359.829 cv
944.997 359.829 946.544 361.375 946.544 363.287 cv
946.544 365.195 944.997 366.746 943.086 366.746 cv
941.175 366.746 939.627 365.195 939.627 363.287 cv
cp
949.603 363.839 mo
949.603 359.636 946.199 356.233 941.998 356.233 cv
937.801 356.233 934.397 359.636 934.397 363.839 cv
934.397 368.037 937.801 371.441 941.998 371.441 cv
946.199 371.441 949.603 368.037 949.603 363.839 cv
cp
f
699.709 510.462 mo
698.299 511.75 696.113 511.652 694.823 510.243 cv
693.533 508.835 693.632 506.647 695.043 505.358 cv
696.452 504.068 698.64 504.166 699.929 505.576 cv
701.219 506.987 701.117 509.176 699.709 510.462 cv
cp
693.385 502.726 mo
690.285 505.56 690.068 510.369 692.902 513.471 cv
695.735 516.568 700.546 516.785 703.647 513.949 cv
706.746 511.118 706.962 506.306 704.13 503.21 cv
701.293 500.109 696.484 499.893 693.385 502.726 cv
cp
f
736.631 510.035 mo
735.22 511.324 733.034 511.226 731.745 509.816 cv
730.453 508.409 730.552 506.221 731.964 504.931 cv
733.371 503.643 735.561 503.743 736.85 505.151 cv
738.14 506.56 738.037 508.748 736.631 510.035 cv
cp
730.306 502.301 mo
727.206 505.134 726.991 509.943 729.823 513.045 cv
732.656 516.146 737.468 516.359 740.568 513.526 cv
743.668 510.693 743.883 505.883 741.051 502.784 cv
738.214 499.684 733.405 499.468 730.306 502.301 cv
cp
f
674.47 456.498 mo
676.106 455.516 678.23 456.045 679.214 457.684 cv
680.195 459.32 679.666 461.443 678.024 462.426 cv
676.388 463.41 674.263 462.879 673.28 461.243 cv
672.297 459.601 672.831 457.478 674.47 456.498 cv
cp
668.694 462.725 mo
670.855 466.326 675.521 467.496 679.125 465.337 cv
682.728 463.176 683.895 458.508 681.735 454.902 cv
679.578 451.303 674.907 450.133 671.302 452.293 cv
671.023 452.46 670.766 452.646 670.518 452.841 cv
661.098 445.281 li
659.608 444.087 657.43 444.32 656.238 445.813 cv
655.043 447.303 655.278 449.478 656.768 450.671 cv
666.276 458.303 li
666.684 458.629 667.143 458.837 667.617 458.954 cv
667.64 460.241 667.983 461.541 668.694 462.725 cv
cp
f
961.674 398.293 mo
963.585 398.293 965.132 399.841 965.132 401.754 cv
965.132 403.662 963.585 405.212 961.674 405.212 cv
959.764 405.212 958.217 403.662 958.217 401.754 cv
958.217 399.841 959.764 398.293 961.674 398.293 cv
cp
595.941 301.82 mo
594.031 301.812 592.49 300.259 592.498 298.35 cv
592.506 296.441 594.059 294.899 595.968 294.906 cv
597.877 294.916 599.416 296.466 599.41 298.379 cv
599.404 300.289 597.851 301.83 595.941 301.82 cv
cp
960.587 409.909 mo
964.787 409.909 968.192 406.505 968.192 402.304 cv
968.192 398.103 964.787 394.701 960.587 394.701 cv
957.676 394.701 955.148 396.339 953.871 398.746 cv
925.027 370.117 li
917.399 370.117 li
901.343 374.714 li
894.385 376.804 li
807.119 376.804 li
785.94 351.851 li
746.541 351.851 li
729.686 334.447 li
685.996 334.447 li
660.928 310.183 li
609.561 310.183 li
602.244 302.129 li
602.373 300.612 601.971 298.62 601.613 296.998 cv
600.807 293.347 598.611 290.222 594.876 290.208 cv
591.139 290.195 588.098 293.208 588.082 296.945 cv
588.072 300.683 591.287 302.527 594.823 303.737 cv
596.164 304.199 598.209 304.668 599.781 304.558 cv
608.031 313.638 li
659.53 313.638 li
684.599 337.904 li
728.22 337.904 li
745.076 355.308 li
784.34 355.308 li
805.52 380.261 li
894.637 380.261 li
917.645 373.574 li
923.602 373.574 li
953.01 402.759 li
953.246 406.748 956.543 409.909 960.587 409.909 cv
cp
f
933.305 403.443 mo
931.438 403.868 929.587 402.699 929.162 400.837 cv
928.741 398.976 929.91 397.123 931.77 396.699 cv
933.634 396.277 935.484 397.443 935.91 399.304 cv
936.332 401.17 935.164 403.022 933.305 403.443 cv
cp
931.633 393.593 mo
927.536 394.525 924.97 398.597 925.898 402.693 cv
926.83 406.789 930.902 409.353 935.002 408.424 cv
939.094 407.495 941.661 403.418 940.732 399.326 cv
939.801 395.228 935.728 392.664 931.633 393.593 cv
cp
f
1050.18 430.553 mo
1048.28 430.553 1046.73 429.004 1046.73 427.093 cv
1046.73 425.185 1048.28 423.634 1050.18 423.634 cv
1052.1 423.634 1053.64 425.185 1053.64 427.093 cv
1053.64 429.004 1052.1 430.553 1050.18 430.553 cv
cp
1056.71 427.649 mo
1056.71 423.445 1053.3 420.041 1049.1 420.041 cv
1044.9 420.041 1041.5 423.445 1041.5 427.649 cv
1041.5 431.847 1044.9 435.25 1049.1 435.25 cv
1053.3 435.25 1056.71 431.847 1056.71 427.649 cv
cp
f
1166.62 152.217 mo
1168.53 152.217 1170.08 153.766 1170.08 155.678 cv
1170.08 157.586 1168.53 159.135 1166.62 159.135 cv
1164.71 159.135 1163.17 157.586 1163.17 155.678 cv
1163.17 153.766 1164.71 152.217 1166.62 152.217 cv
cp
1165.54 163.831 mo
1169.74 163.831 1173.14 160.428 1173.14 156.228 cv
1173.14 152.027 1169.74 148.622 1165.54 148.622 cv
1161.34 148.622 1157.93 152.027 1157.93 156.228 cv
1157.93 160.428 1161.34 163.831 1165.54 163.831 cv
cp
f
954.317 166.051 mo
956.073 165.299 958.105 166.113 958.857 167.87 cv
959.607 169.625 958.793 171.656 957.037 172.408 cv
955.282 173.16 953.25 172.344 952.5 170.59 cv
951.747 168.831 952.561 166.801 954.317 166.051 cv
cp
957.89 177.154 mo
961.748 175.504 963.542 171.035 961.888 167.172 cv
960.236 163.311 955.77 161.518 951.905 163.172 cv
948.043 164.824 946.253 169.291 947.905 173.156 cv
949.555 177.016 954.026 178.809 957.89 177.154 cv
cp
f
804.512 315.513 mo
802.756 316.266 800.728 315.449 799.974 313.695 cv
799.225 311.937 800.039 309.904 801.794 309.154 cv
803.55 308.404 805.582 309.216 806.332 310.975 cv
807.082 312.728 806.268 314.761 804.512 315.513 cv
cp
799.384 306.277 mo
795.521 307.929 793.728 312.396 795.382 316.259 cv
797.033 320.121 801.501 321.912 805.363 320.259 cv
809.227 318.608 811.016 314.138 809.364 310.277 cv
807.713 306.414 803.243 304.623 799.384 306.277 cv
cp
f
846.105 391.495 mo
845.353 389.737 846.168 387.704 847.924 386.955 cv
849.68 386.204 851.712 387.016 852.465 388.775 cv
853.215 390.527 852.401 392.56 850.645 393.312 cv
848.89 394.064 846.855 393.248 846.105 391.495 cv
cp
855.494 388.076 mo
853.842 384.214 849.375 382.424 845.512 384.076 cv
841.649 385.728 839.859 390.195 841.511 394.058 cv
843.162 397.92 847.634 399.712 851.496 398.058 cv
852.266 397.729 852.947 397.285 853.541 396.759 cv
862.939 396.759 li
863.895 396.759 864.668 395.984 864.668 395.029 cv
864.668 394.076 863.895 393.3 862.939 393.3 cv
855.77 393.3 li
856.281 391.641 856.232 389.799 855.494 388.076 cv
cp
f
719.73 196.861 mo
721.087 198.207 721.102 200.393 719.761 201.752 cv
718.42 203.109 716.228 203.122 714.868 201.781 cv
713.514 200.437 713.5 198.252 714.844 196.893 cv
716.185 195.531 718.373 195.52 719.73 196.861 cv
cp
744.366 162.98 mo
761.918 162.98 li
774.02 175.822 li
832.596 175.822 li
860.629 147.771 li
1111.33 147.771 li
1135.11 123.271 li
1196.6 123.271 li
1196.6 119.814 li
1133.64 119.814 li
1109.87 144.314 li
859.199 144.314 li
831.164 172.363 li
775.513 172.363 li
763.411 159.523 li
742.928 159.523 li
715.407 187.213 li
715.407 192.248 li
714.267 193.247 713.173 194.943 712.304 196.336 cv
710.323 199.506 709.706 203.275 712.362 205.898 cv
715.02 208.525 719.305 208.504 721.928 205.846 cv
724.553 203.184 723.547 199.617 721.871 196.277 cv
721.228 194.994 720.08 193.187 718.866 192.172 cv
718.866 188.637 li
744.366 162.98 li
cp
f
655.687 236.127 mo
653.783 236.238 652.146 234.785 652.032 232.881 cv
651.92 230.975 653.374 229.338 655.278 229.225 cv
657.184 229.109 658.821 230.566 658.936 232.471 cv
659.048 234.377 657.595 236.014 655.687 236.127 cv
cp
723.59 220.342 mo
732.841 211.564 li
732.841 188.697 li
741.284 181.131 li
833.957 181.131 li
862.774 153.346 li
1114.81 153.346 li
1137.14 129.574 li
1196.6 129.574 li
1196.6 126.117 li
1135.64 126.117 li
1113.31 149.889 li
861.379 149.889 li
832.562 177.672 li
739.96 177.672 li
729.384 187.15 li
729.384 210.078 li
722.212 216.883 li
668.591 216.883 li
659.184 226.289 li
657.582 226.2 655.434 226.814 654.054 227.375 cv
650.593 228.775 647.483 230.797 647.702 234.525 cv
647.924 238.258 651.127 241.102 654.853 240.877 cv
658.586 240.656 660.607 237.414 661.208 233.727 cv
661.463 232.162 661.748 230.254 661.589 228.773 cv
670.021 220.342 li
723.59 220.342 li
cp
f
755.86 309.308 mo
753.953 309.299 752.41 307.746 752.42 305.837 cv
752.428 303.928 753.979 302.384 755.887 302.396 cv
757.799 302.402 759.338 303.955 759.331 305.866 cv
759.325 307.777 757.771 309.318 755.86 309.308 cv
cp
861.211 278.566 mo
861.211 178.432 li
878.404 159.416 li
1078.09 159.416 li
1083.92 163.309 li
1085.85 160.434 li
1079.14 155.959 li
876.868 155.959 li
857.754 177.102 li
857.754 277.087 li
837.469 296.41 li
794.311 296.41 li
778.752 313.759 li
765.934 313.759 li
762.287 309.212 li
762.195 309.287 li
762.244 307.82 761.863 305.988 761.533 304.487 cv
760.728 300.833 758.532 297.712 754.798 297.697 cv
751.06 297.683 748.02 300.697 748.004 304.435 cv
747.992 308.168 751.208 310.011 754.743 311.225 cv
756.199 311.725 758.49 312.245 760.098 312.008 cv
764.275 317.216 li
780.295 317.216 li
795.854 299.87 li
838.853 299.87 li
861.211 278.566 li
cp
f
918.052 179.334 mo
916.7 177.982 916.7 175.795 918.052 174.445 cv
919.4 173.094 921.59 173.094 922.941 174.445 cv
924.29 175.795 924.29 177.982 922.941 179.334 cv
921.59 180.685 919.4 180.685 918.052 179.334 cv
cp
1196.6 178.416 mo
1174.57 178.416 li
1173.56 178.416 1172.6 178.857 1171.94 179.629 cv
1159.32 194.417 li
946.641 194.417 li
929.359 177.057 li
929.059 176.755 928.712 176.53 928.346 176.363 cv
927.926 174.767 925.43 173.127 923.511 171.911 cv
920.354 169.91 916.59 169.271 913.944 171.911 cv
911.304 174.553 911.304 178.836 913.944 181.478 cv
916.59 184.119 920.164 183.135 923.511 181.478 cv
923.649 181.41 923.796 181.334 923.945 181.254 cv
924.089 181.494 924.253 181.727 924.46 181.935 cv
942.755 200.314 li
943.403 200.965 944.284 201.334 945.206 201.334 cv
1160.91 201.334 li
1161.93 201.334 1162.89 200.889 1163.54 200.119 cv
1176.17 185.33 li
1196.6 185.33 li
1198.51 185.33 1200.06 183.783 1200.06 181.872 cv
1200.06 179.963 1198.51 178.416 1196.6 178.416 cv
cp
f
922.941 199.687 mo
921.59 201.039 919.4 201.039 918.052 199.687 cv
916.7 198.338 916.7 196.15 918.052 194.799 cv
919.4 193.449 921.59 193.449 922.941 194.799 cv
924.29 196.15 924.29 198.338 922.941 199.687 cv
cp
1200.06 193.83 mo
1200.06 191.924 1198.51 190.372 1196.6 190.372 cv
1181.05 190.372 li
1180.15 190.372 1179.28 190.728 1178.63 191.365 cv
1163.65 206.078 li
942.964 206.078 li
930.78 194.646 li
929.576 193.516 927.769 193.419 926.457 194.321 cv
925.547 193.571 924.458 192.867 923.511 192.268 cv
920.354 190.266 916.59 189.627 913.944 192.268 cv
913.488 192.724 913.117 193.23 912.818 193.768 cv
901.407 183.607 li
899.107 186.191 li
911.993 197.661 li
912.131 199.183 912.779 200.667 913.944 201.831 cv
916.59 204.475 920.164 203.488 923.511 201.831 cv
924.369 201.408 925.463 200.761 926.399 200.018 cv
939.233 212.057 li
939.875 212.658 940.719 212.994 941.597 212.994 cv
1165.06 212.994 li
1165.97 212.994 1166.84 212.639 1167.48 212.004 cv
1182.47 197.289 li
1196.6 197.289 li
1198.51 197.289 1200.06 195.742 1200.06 193.83 cv
cp
f
922.076 221.318 mo
920.726 222.667 918.537 222.667 917.186 221.318 cv
915.836 219.969 915.836 217.779 917.186 216.43 cv
918.537 215.08 920.726 215.08 922.076 216.43 cv
923.427 217.779 923.427 219.969 922.076 221.318 cv
cp
1193.16 210.4 mo
1185.81 210.4 li
1184.8 210.4 1183.85 210.838 1183.19 211.6 cv
1174.54 221.637 li
941.502 221.637 li
940.138 219.125 li
939.655 218.228 938.796 217.592 937.801 217.387 cv
928.252 215.414 li
927.287 215.214 926.342 215.437 925.594 215.95 cv
924.684 215.199 923.595 214.494 922.647 213.896 cv
920.006 212.223 916.945 211.509 914.467 212.86 cv
902.707 210.855 li
902.126 214.266 li
911.705 215.898 li
910.581 218.389 911.035 221.416 913.081 223.463 cv
915.725 226.103 919.301 225.119 922.647 223.463 cv
923.515 223.035 924.621 222.378 925.563 221.626 cv
925.939 221.89 926.371 222.085 926.851 222.184 cv
934.826 223.834 li
936.403 226.744 li
937.008 227.857 938.176 228.553 939.442 228.553 cv
1176.12 228.553 li
1177.13 228.553 1178.08 228.115 1178.74 227.353 cv
1187.39 217.316 li
1193.16 217.316 li
1195.07 217.316 1196.61 215.768 1196.61 213.857 cv
1196.61 211.947 1195.07 210.4 1193.16 210.4 cv
cp
f
932.247 239.285 mo
930.896 240.635 928.708 240.635 927.357 239.285 cv
926.007 237.935 926.007 235.745 927.357 234.395 cv
928.708 233.045 930.896 233.045 932.247 234.395 cv
933.597 235.745 933.597 237.935 932.247 239.285 cv
cp
1193.16 233.129 mo
937.099 233.129 li
936.468 233.129 935.885 233.31 935.375 233.606 cv
934.553 232.973 933.633 232.378 932.817 231.861 cv
929.66 229.863 925.895 229.221 923.251 231.861 cv
920.61 234.504 920.61 238.789 923.251 241.428 cv
925.895 244.07 929.471 243.087 932.817 241.428 cv
933.646 241.02 934.693 240.403 935.607 239.694 cv
936.061 239.911 936.562 240.045 937.099 240.045 cv
1193.16 240.045 li
1195.07 240.045 1196.61 238.497 1196.61 236.588 cv
1196.61 234.68 1195.07 233.129 1193.16 233.129 cv
cp
f
922.941 255.895 mo
921.59 257.245 919.4 257.245 918.052 255.895 cv
916.7 254.542 916.7 252.355 918.052 251.005 cv
919.4 249.654 921.59 249.654 922.941 251.005 cv
924.29 252.355 924.29 254.542 922.941 255.895 cv
cp
1198.05 249.738 mo
930.645 249.738 li
929.312 249.738 928.166 250.504 927.59 251.612 cv
926.602 250.46 924.904 249.354 923.511 248.47 cv
921.097 246.939 918.328 246.212 915.976 247.133 cv
910.511 242.816 li
887.144 242.816 li
887.144 246.274 li
909.309 246.274 li
913.209 249.354 li
911.34 251.995 911.58 255.67 913.944 258.039 cv
916.59 260.678 920.164 259.693 923.511 258.039 cv
924.825 257.388 926.689 256.216 927.698 254.98 cv
928.305 255.979 929.395 256.654 930.645 256.654 cv
1198.05 256.654 li
1199.96 256.654 1201.51 255.105 1201.51 253.195 cv
1201.51 251.287 1199.96 249.738 1198.05 249.738 cv
cp
f
934.664 272.37 mo
932.763 272.531 931.088 271.12 930.926 269.218 cv
930.764 267.314 932.176 265.642 934.081 265.48 cv
935.985 265.316 937.656 266.728 937.818 268.633 cv
937.978 270.535 936.569 272.208 934.664 272.37 cv
cp
1201.51 263.761 mo
1201.51 261.853 1199.96 260.304 1198.05 260.304 cv
940.557 260.304 li
939.164 260.304 937.969 261.134 937.422 262.324 cv
935.922 262.364 934.043 262.926 932.513 263.41 cv
929.314 264.417 926.646 266.508 926.354 269.613 cv
903.571 269.613 li
903.571 273.072 li
926.982 273.072 li
926.982 273.053 li
928.159 275.524 930.768 277.136 933.654 276.891 cv
937.38 276.574 938.932 273.205 939.823 269.576 cv
939.99 268.901 940.145 268.055 940.233 267.187 cv
940.342 267.196 940.445 267.218 940.557 267.218 cv
1198.05 267.218 li
1199.96 267.218 1201.51 265.674 1201.51 263.761 cv
cp
f
922.593 292.884 mo
921.242 294.234 919.054 294.234 917.703 292.884 cv
916.352 291.535 916.352 289.345 917.703 287.995 cv
919.054 286.646 921.242 286.646 922.593 287.995 cv
923.943 289.345 923.943 291.535 922.593 292.884 cv
cp
1196.6 271.343 mo
958.048 271.343 li
957.1 271.343 956.19 271.734 955.536 272.421 cv
941.836 286.903 li
928.414 286.903 li
927.604 286.903 926.869 287.192 926.28 287.659 cv
925.336 286.854 924.171 286.1 923.164 285.462 cv
920.006 283.462 916.241 282.82 913.597 285.462 cv
910.956 288.105 910.956 292.386 913.597 295.028 cv
916.241 297.67 919.817 296.683 923.164 295.028 cv
924.087 294.571 925.281 293.858 926.262 293.045 cv
926.853 293.521 927.596 293.816 928.414 293.816 cv
943.326 293.816 li
944.277 293.816 945.186 293.425 945.838 292.737 cv
959.537 278.258 li
1196.6 278.258 li
1198.51 278.258 1200.06 276.708 1200.06 274.8 cv
1200.06 272.891 1198.51 271.343 1196.6 271.343 cv
cp
f
919.904 314.943 mo
918.003 315.105 916.328 313.693 916.167 311.793 cv
916.105 311.076 916.268 310.392 916.596 309.81 cv
916.825 309.81 li
916.825 309.478 li
917.395 308.693 918.277 308.143 919.319 308.054 cv
920.195 307.979 921.014 308.248 921.668 308.733 cv
921.744 308.793 921.817 308.856 921.896 308.91 cv
922.541 309.478 922.978 310.281 923.058 311.205 cv
923.218 313.109 921.809 314.781 919.904 314.943 cv
cp
1200.06 282.58 mo
1200.06 280.67 1198.51 279.123 1196.6 279.123 cv
965.233 279.123 li
964.248 279.123 963.309 279.545 962.65 280.281 cv
948.272 296.41 li
930.645 296.41 li
929.787 296.41 928.965 296.728 928.326 297.308 cv
921.498 303.483 li
920.967 303.962 920.62 304.57 920.461 305.217 cv
919.533 305.433 918.591 305.72 917.754 305.984 cv
917.409 306.092 917.072 306.217 916.742 306.351 cv
903.571 306.351 li
903.571 309.81 li
912.364 309.81 li
911.775 310.812 911.473 311.972 911.585 313.295 cv
911.901 317.016 915.174 319.779 918.895 319.462 cv
922.619 319.146 924.173 315.779 925.064 312.15 cv
925.276 311.29 925.473 310.153 925.529 309.042 cv
925.742 308.92 925.949 308.781 926.139 308.609 cv
931.979 303.326 li
949.822 303.326 li
950.809 303.326 951.747 302.906 952.406 302.168 cv
966.784 286.039 li
1196.6 286.039 li
1198.51 286.039 1200.06 284.491 1200.06 282.58 cv
cp
f
940.956 313.748 mo
942.811 313.303 944.678 314.443 945.125 316.3 cv
945.57 318.156 944.43 320.021 942.572 320.47 cv
940.716 320.92 938.848 319.777 938.402 317.918 cv
937.956 316.06 939.098 314.193 940.956 313.748 cv
cp
938.196 327.962 mo
940.045 324.033 li
941.457 323.714 943.09 322.941 944.433 322.279 cv
947.789 320.63 950.302 317.751 949.428 314.121 cv
948.553 310.488 944.902 308.254 941.269 309.125 cv
937.636 310.004 936.609 313.566 936.275 317.287 cv
936.134 318.85 936.172 321.272 936.818 322.771 cv
936.001 324.505 li
855.315 324.505 li
851.756 321.73 li
849.629 324.455 li
854.126 327.962 li
938.196 327.962 li
cp
f
644.198 372.146 mo
644.948 373.9 644.134 375.933 642.378 376.685 cv
640.623 377.435 638.593 376.62 637.841 374.866 cv
637.09 373.109 637.904 371.079 639.659 370.324 cv
640.957 369.771 642.402 370.074 643.373 370.978 cv
643.373 371.041 li
643.442 371.041 li
643.754 371.347 644.016 371.716 644.198 372.146 cv
cp
1036.38 376.804 mo
1000.95 413.971 li
761.666 413.114 li
717.146 367.583 li
643.515 367.583 li
641.61 366.674 639.342 366.551 637.248 367.447 cv
633.385 369.1 631.594 373.568 633.246 377.429 cv
634.897 381.291 639.367 383.082 643.229 381.429 cv
647.092 379.779 648.883 375.31 647.229 371.447 cv
647.17 371.308 647.098 371.175 647.031 371.041 cv
715.691 371.041 li
760.207 416.564 li
1002.42 417.435 li
1037.86 380.261 li
1104.26 380.261 li
1196.82 474.105 li
1199.28 471.676 li
1105.7 376.804 li
1036.38 376.804 li
cp
f
773.42 508.369 mo
774.808 509.678 774.878 511.862 773.572 513.255 cv
772.269 514.649 770.08 514.718 768.692 513.416 cv
767.298 512.109 767.224 509.921 768.53 508.527 cv
769.837 507.13 772.021 507.063 773.42 508.369 cv
cp
1037.81 508.293 mo
1020.97 492.428 li
1019.25 484.853 li
992.632 458.214 li
874.708 458.214 li
858.283 476.391 li
802.574 476.391 li
795.011 483.994 li
777.08 483.994 li
769.148 492.656 li
769.148 503.716 li
767.97 504.717 766.856 506.549 765.98 508.035 cv
764.08 511.259 763.563 515.042 766.287 517.597 cv
769.016 520.152 773.295 520.016 775.852 517.291 cv
778.403 514.564 777.307 511.021 775.543 507.73 cv
774.898 506.524 773.783 504.852 772.605 503.847 cv
772.605 494 li
778.603 487.451 li
796.45 487.451 li
804.013 479.847 li
859.819 479.847 li
876.243 461.671 li
991.2 461.671 li
1016.1 486.592 li
1017.84 494.226 li
1036.44 511.75 li
1066.62 511.75 li
1077.13 523.197 li
1079.67 520.862 li
1068.14 508.293 li
1037.81 508.293 li
cp
f
867.59 505.445 mo
865.692 505.666 863.979 504.306 863.76 502.412 cv
863.537 500.513 864.895 498.796 866.796 498.579 cv
868.693 498.355 870.406 499.714 870.628 501.614 cv
870.845 503.511 869.486 505.225 867.59 505.445 cv
cp
1035.63 515.116 mo
1014.65 495.891 li
1014.65 489.255 li
989.859 464.689 li
901.13 464.689 li
870.041 495.322 li
868.543 495.408 866.682 496.026 865.165 496.555 cv
861.634 497.789 858.793 500.343 859.226 504.055 cv
859.655 507.763 863.011 510.426 866.721 509.996 cv
870.433 509.564 871.882 506.149 872.665 502.496 cv
872.968 501.082 873.207 498.928 872.883 497.375 cv
902.549 468.147 li
988.439 468.147 li
1011.19 490.699 li
1011.19 497.414 li
1034.29 518.572 li
1063.7 518.572 li
1069.04 523.322 li
1071.34 520.737 li
1065.01 515.116 li
1035.63 515.116 li
cp
f
840.877 432.818 mo
839.121 433.57 837.092 432.751 836.338 431 cv
835.588 429.243 836.402 427.21 838.158 426.46 cv
839.914 425.71 841.947 426.524 842.695 428.28 cv
843.445 430.035 842.632 432.067 840.877 432.818 cv
cp
1066.08 425.975 mo
1057.62 413.543 li
1011.73 413.543 li
1006.37 419.373 li
847.412 419.373 li
843.311 424.504 li
841.207 422.92 838.341 422.471 835.746 423.582 cv
831.884 425.233 830.091 429.704 831.746 433.563 cv
833.397 437.426 837.864 439.214 841.728 437.564 cv
845.589 435.914 847.38 431.442 845.728 427.582 cv
845.678 427.462 845.615 427.35 845.559 427.233 cv
849.075 422.832 li
1007.88 422.832 li
1013.25 417 li
1055.79 417 li
1062.62 427.043 li
1062.62 487.842 li
1096.82 523.23 li
1099.31 520.826 li
1066.08 486.443 li
1066.08 425.975 li
cp
f
798.506 240.469 mo
798.724 242.363 797.368 244.08 795.47 244.304 cv
793.575 244.524 791.86 243.164 791.638 241.266 cv
791.564 240.639 791.676 240.037 791.91 239.497 cv
792.102 239.375 792.282 239.232 792.451 239.068 cv
792.783 238.744 793.034 238.369 793.209 237.968 cv
793.638 237.691 794.127 237.495 794.669 237.434 cv
796.566 237.215 798.283 238.572 798.506 240.469 cv
cp
689.462 236.292 mo
688.106 237.637 685.92 237.631 684.572 236.275 cv
683.228 234.922 683.234 232.732 684.589 231.387 cv
685.942 230.041 688.132 230.049 689.478 231.402 cv
689.944 231.87 690.236 232.441 690.379 233.039 cv
690.367 233.159 690.343 233.275 690.343 233.398 cv
690.343 233.68 690.385 233.948 690.449 234.21 cv
690.366 234.971 690.048 235.711 689.462 236.292 cv
cp
693.801 229.941 mo
693.232 229.941 692.703 230.092 692.23 230.336 cv
691.514 229.807 690.748 229.31 690.06 228.87 cv
686.905 226.861 683.144 226.209 680.493 228.84 cv
677.842 231.475 677.825 235.756 680.459 238.406 cv
683.097 241.057 686.673 240.081 690.029 238.437 cv
690.861 238.029 691.916 237.411 692.836 236.702 cv
693.145 236.792 693.463 236.855 693.801 236.855 cv
749.701 236.855 li
750.087 236.855 750.472 236.791 750.837 236.666 cv
766.73 231.146 li
779.933 231.146 li
787.561 238.995 li
787.883 239.326 788.254 239.572 788.65 239.745 cv
788.902 240.816 789.274 241.929 789.614 242.9 cv
790.853 246.429 793.41 249.267 797.116 248.833 cv
800.828 248.403 803.489 245.045 803.054 241.334 cv
802.619 237.622 799.206 236.178 795.551 235.396 cv
794.865 235.25 794.006 235.119 793.127 235.061 cv
792.971 234.745 792.779 234.443 792.521 234.178 cv
783.877 225.279 li
783.226 224.609 782.332 224.23 781.395 224.23 cv
766.15 224.23 li
765.762 224.23 765.38 224.295 765.016 224.422 cv
749.117 229.941 li
693.801 229.941 li
cp
f
651.914 323.539 mo
653.266 322.189 655.456 322.185 656.805 323.537 cv
658.156 324.884 658.156 327.076 656.809 328.425 cv
655.458 329.777 653.269 329.777 651.917 328.429 cv
651.42 327.933 651.109 327.324 650.977 326.685 cv
651.025 326.308 651.008 325.938 650.939 325.583 cv
651.025 324.837 651.341 324.112 651.914 323.539 cv
cp
647.016 329.65 mo
647.198 329.678 647.381 329.691 647.561 329.691 cv
648.065 329.691 648.547 329.57 648.986 329.367 cv
649.758 329.945 650.596 330.487 651.346 330.962 cv
654.506 332.962 658.271 333.6 660.911 330.958 cv
663.553 328.316 663.553 324.033 660.908 321.392 cv
658.263 318.751 654.691 319.738 651.343 321.396 cv
650.57 321.776 649.609 322.338 648.742 322.988 cv
648.536 322.913 648.321 322.853 648.097 322.818 cv
638.158 321.246 li
636.273 320.958 634.503 322.237 634.202 324.125 cv
633.905 326.009 635.191 327.781 637.078 328.079 cv
647.016 329.65 li
cp
f
789.898 502.431 mo
788.489 503.722 786.302 503.625 785.013 502.214 cv
783.726 500.805 783.823 498.618 785.235 497.33 cv
786.643 496.041 788.831 496.138 790.117 497.546 cv
791.408 498.96 791.306 501.147 789.898 502.431 cv
cp
807.619 496.228 mo
795.729 496.228 li
795.531 496.228 795.341 496.254 795.152 496.287 cv
794.91 495.901 794.637 495.528 794.318 495.18 cv
791.485 492.082 786.677 491.866 783.577 494.699 cv
780.474 497.534 780.262 502.342 783.095 505.443 cv
785.927 508.541 790.735 508.758 793.838 505.921 cv
794.709 505.126 795.343 504.17 795.754 503.146 cv
807.619 503.146 li
809.526 503.146 811.076 501.596 811.076 499.688 cv
811.076 497.777 809.526 496.228 807.619 496.228 cv
cp
f
835.166 488.67 mo
835.808 486.873 837.787 485.938 839.578 486.579 cv
841.38 487.218 842.322 489.195 841.676 490.996 cv
841.039 492.796 839.06 493.733 837.259 493.092 cv
835.464 492.445 834.524 490.472 835.166 488.67 cv
cp
844.081 495.813 mo
843.912 495.413 843.67 495.068 843.386 494.772 cv
843.822 493.458 844.042 491.809 844.212 490.43 cv
844.668 486.717 843.632 483.039 840.112 481.784 cv
836.595 480.53 832.725 482.364 831.469 485.88 cv
830.216 489.399 832.638 492.212 835.567 494.526 cv
836.135 494.975 836.877 495.491 837.668 495.945 cv
837.365 496.745 837.353 497.656 837.712 498.508 cv
840.738 505.656 li
841.299 506.976 842.578 507.766 843.926 507.766 cv
844.375 507.766 844.83 507.678 845.269 507.493 cv
847.028 506.748 847.853 504.721 847.105 502.962 cv
844.081 495.813 li
cp
f
990.876 473.439 mo
985.432 469.085 li
922.903 469.085 li
912.861 480.082 li
912.861 507.475 li
897.602 522.527 li
900.029 524.991 li
916.318 508.92 li
916.318 481.424 li
924.43 472.541 li
984.221 472.541 li
987.418 475.1 li
987.418 510.664 li
998.211 523.16 li
1000.83 520.899 li
990.876 509.379 li
990.876 473.439 li
cp
f
983.961 479.043 mo
978.936 475.133 li
925.446 475.133 li
918.982 482.939 li
918.982 510.513 li
908.823 520.814 li
911.284 523.244 li
922.44 511.934 li
922.44 484.185 li
927.073 478.592 li
977.751 478.592 li
980.503 480.734 li
980.503 514.068 li
990.696 524.939 li
993.219 522.576 li
983.961 512.701 li
983.961 479.043 li
cp
f
958.892 487.92 mo
953.451 481.185 li
931.473 481.185 li
924.963 489.445 li
924.963 512.261 li
916.795 520.837 li
919.301 523.222 li
928.42 513.646 li
928.42 490.646 li
933.152 484.643 li
951.802 484.643 li
955.434 489.143 li
955.434 508.076 li
973.264 525.011 li
975.644 522.505 li
958.892 506.592 li
958.892 487.92 li
cp
f
1106.35 164.842 mo
1107.7 163.49 1109.89 163.49 1111.24 164.842 cv
1112.59 166.191 1112.59 168.381 1111.24 169.73 cv
1109.89 171.081 1107.7 171.081 1106.35 169.73 cv
1105 168.381 1105 166.191 1106.35 164.842 cv
cp
1098.07 163.574 mo
1098.07 170.49 li
1103.46 170.49 li
1104.25 171.051 1105.09 171.535 1105.78 171.875 cv
1109.13 173.531 1112.7 174.516 1115.35 171.875 cv
1117.99 169.232 1117.99 164.949 1115.34 162.309 cv
1112.7 159.667 1108.94 160.307 1105.78 162.309 cv
1105.12 162.729 1104.38 163.202 1103.69 163.706 cv
1103.69 163.574 li
1098.07 163.574 li
cp
f
1021.75 356.116 mo
1021.75 354.205 1023.3 352.656 1025.21 352.656 cv
1027.12 352.656 1028.67 354.205 1028.67 356.116 cv
1028.67 358.024 1027.12 359.572 1025.21 359.572 cv
1023.3 359.572 1021.75 358.024 1021.75 356.116 cv
cp
1204.2 432.097 mo
1130.57 357.755 li
1128.95 356.116 1126.74 355.193 1124.43 355.193 cv
1034.96 355.193 li
1033.8 355.193 1032.69 355.425 1031.68 355.842 cv
1031.27 352.028 1028.04 349.06 1024.12 349.06 cv
1019.92 349.06 1016.52 352.464 1016.52 356.668 cv
1016.52 360.867 1019.92 364.271 1024.12 364.271 cv
1024.89 364.271 1025.63 364.153 1026.32 363.942 cv
1026.38 368.667 1030.22 372.483 1034.96 372.483 cv
1120.83 372.483 li
1191.91 444.259 li
1193.6 445.971 1195.83 446.824 1198.05 446.824 cv
1200.25 446.824 1202.45 445.989 1204.14 444.32 cv
1207.53 440.962 1207.56 435.489 1204.2 432.097 cv
cp
f
1024.51 316.562 mo
1022.17 316.562 1020.27 314.664 1020.27 312.322 cv
1020.27 309.978 1022.17 308.08 1024.51 308.08 cv
1026.85 308.08 1028.75 309.978 1028.75 312.322 cv
1028.75 314.664 1026.85 316.562 1024.51 316.562 cv
cp
1134.8 303.386 mo
1022.86 303.386 li
1018.08 303.386 1014.21 307.258 1014.21 312.029 cv
1014.21 316.803 1018.08 320.674 1022.86 320.674 cv
1131.14 320.674 li
1191.83 383.529 li
1193.53 385.285 1195.79 386.168 1198.05 386.168 cv
1200.21 386.168 1202.38 385.362 1204.06 383.742 cv
1207.49 380.425 1207.59 374.954 1204.27 371.521 cv
1141.03 306.025 li
1139.39 304.339 1137.15 303.386 1134.8 303.386 cv
cp
f
1052.75 397.646 mo
1050.41 397.646 1048.51 395.746 1048.51 393.404 cv
1048.51 391.06 1050.41 389.164 1052.75 389.164 cv
1055.09 389.164 1056.99 391.06 1056.99 393.404 cv
1056.99 395.746 1055.09 397.646 1052.75 397.646 cv
cp
1092.58 482.289 mo
1092.58 404.467 li
1092.58 402.337 1091.79 400.281 1090.37 398.699 cv
1080.3 387.462 li
1078.66 385.63 1076.32 384.583 1073.86 384.583 cv
1050.83 384.583 li
1046.06 384.583 1042.19 388.454 1042.19 393.228 cv
1042.19 398.001 1046.06 401.873 1050.83 401.873 cv
1070 401.873 li
1075.29 407.772 li
1075.29 485.722 li
1075.29 487.93 1076.13 490.053 1077.64 491.656 cv
1115.98 532.284 li
1117.69 534.087 1119.98 534.996 1122.27 534.996 cv
1124.4 534.996 1126.54 534.214 1128.2 532.638 cv
1131.68 529.362 1131.83 523.893 1128.56 520.417 cv
1092.58 482.289 li
cp
f
621.341 436.018 mo
621.341 441.271 617.085 445.527 611.832 445.527 cv
606.578 445.527 602.323 441.271 602.323 436.018 cv
602.323 430.766 606.578 426.509 611.832 426.509 cv
617.085 426.509 621.341 430.766 621.341 436.018 cv
1 1 1 rgb
f
1099.37 165.792 mo
1099.37 171.076 1095.09 175.359 1089.8 175.359 cv
1084.52 175.359 1080.24 171.076 1080.24 165.792 cv
1080.24 160.51 1084.52 156.228 1089.8 156.228 cv
1095.09 156.228 1099.37 160.51 1099.37 165.792 cv
cp
f
902.417 179.824 mo
902.417 185.107 898.136 189.393 892.851 189.393 cv
887.569 189.393 883.284 185.107 883.284 179.824 cv
883.284 174.542 887.569 170.26 892.851 170.26 cv
898.136 170.26 902.417 174.542 902.417 179.824 cv
cp
f
829.936 197.877 mo
829.936 203.156 825.65 207.441 820.369 207.441 cv
815.085 207.441 810.804 203.156 810.804 197.877 cv
810.804 192.592 815.085 188.309 820.369 188.309 cv
825.65 188.309 829.936 192.592 829.936 197.877 cv
cp
f
771.092 161.87 mo
771.092 167.154 766.808 171.437 761.526 171.437 cv
756.243 171.437 751.961 167.154 751.961 161.87 cv
751.961 156.588 756.243 152.305 761.526 152.305 cv
766.808 152.305 771.092 156.588 771.092 161.87 cv
cp
f
693.801 176.635 mo
693.801 181.92 689.519 186.203 684.235 186.203 cv
678.953 186.203 674.668 181.92 674.668 176.635 cv
674.668 171.355 678.953 167.07 684.235 167.07 cv
689.519 167.07 693.801 171.355 693.801 176.635 cv
cp
f
758.775 196.137 mo
758.775 201.42 754.493 205.703 749.209 205.703 cv
743.929 205.703 739.643 201.42 739.643 196.137 cv
739.643 190.855 743.929 186.57 749.209 186.57 cv
754.493 186.57 758.775 190.855 758.775 196.137 cv
cp
f
850.462 238.711 mo
850.462 243.995 846.181 248.278 840.896 248.278 cv
835.615 248.278 831.33 243.995 831.33 238.711 cv
831.33 233.428 835.615 229.143 840.896 229.143 cv
846.181 229.143 850.462 233.428 850.462 238.711 cv
cp
f
983.262 302.975 mo
983.262 308.258 978.98 312.543 973.696 312.543 cv
968.414 312.543 964.129 308.258 964.129 302.975 cv
964.129 297.691 968.414 293.41 973.696 293.41 cv
978.98 293.41 983.262 297.691 983.262 302.975 cv
cp
f
888.066 244.545 mo
888.066 249.829 883.784 254.112 878.498 254.112 cv
873.218 254.112 868.933 249.829 868.933 244.545 cv
868.933 239.262 873.218 234.978 878.498 234.978 cv
883.784 234.978 888.066 239.262 888.066 244.545 cv
cp
f
903.571 213.857 mo
903.571 219.141 899.287 223.424 894.006 223.424 cv
888.72 223.424 884.439 219.141 884.439 213.857 cv
884.439 208.576 888.72 204.291 894.006 204.291 cv
899.287 204.291 903.571 208.576 903.571 213.857 cv
cp
f
906.275 274.8 mo
906.275 280.083 901.994 284.367 896.71 284.367 cv
891.429 284.367 887.144 280.083 887.144 274.8 cv
887.144 269.517 891.429 265.234 896.71 265.234 cv
901.994 265.234 906.275 269.517 906.275 274.8 cv
cp
f
906.275 308.693 mo
906.275 313.976 901.994 318.259 896.71 318.259 cv
891.429 318.259 887.144 313.976 887.144 308.693 cv
887.144 303.41 891.429 299.129 896.71 299.129 cv
901.994 299.129 906.275 303.41 906.275 308.693 cv
cp
f
853.488 318.259 mo
853.488 323.543 849.207 327.826 843.923 327.826 cv
838.641 327.826 834.355 323.543 834.355 318.259 cv
834.355 312.976 838.641 308.693 843.923 308.693 cv
849.207 308.693 853.488 312.976 853.488 318.259 cv
cp
f
826.752 359.521 mo
826.752 364.799 822.467 369.087 817.185 369.087 cv
811.9 369.087 807.619 364.799 807.619 359.521 cv
807.619 354.234 811.9 349.954 817.185 349.954 cv
822.467 349.954 826.752 354.234 826.752 359.521 cv
cp
f
918.324 372.478 mo
918.324 377.761 914.037 382.045 908.759 382.045 cv
903.474 382.045 899.192 377.761 899.192 372.478 cv
899.192 367.197 903.474 362.912 908.759 362.912 cv
914.037 362.912 918.324 367.197 918.324 372.478 cv
cp
f
880.719 396.109 mo
880.719 401.391 876.436 405.674 871.151 405.674 cv
865.871 405.674 861.586 401.391 861.586 396.109 cv
861.586 390.826 865.871 386.543 871.151 386.543 cv
876.436 386.543 880.719 390.826 880.719 396.109 cv
cp
f
767.78 369.087 mo
767.78 374.367 763.499 378.652 758.215 378.652 cv
752.934 378.652 748.647 374.367 748.647 369.087 cv
748.647 363.8 752.934 359.521 758.215 359.521 cv
763.499 359.521 767.78 363.8 767.78 369.087 cv
cp
f
682.819 369.087 mo
682.819 374.367 678.537 378.652 673.254 378.652 cv
667.973 378.652 663.687 374.367 663.687 369.087 cv
663.687 363.8 667.973 359.521 673.254 359.521 cv
678.537 359.521 682.819 363.8 682.819 369.087 cv
cp
f
640.237 327.826 mo
640.237 333.109 635.953 337.392 630.672 337.392 cv
625.39 337.392 621.106 333.109 621.106 327.826 cv
621.106 322.545 625.39 318.259 630.672 318.259 cv
635.953 318.259 640.237 322.545 640.237 327.826 cv
cp
f
664.315 441.6 mo
664.315 447.266 659.835 451.858 654.311 451.858 cv
648.783 451.858 644.305 447.266 644.305 441.6 cv
644.305 435.934 648.783 431.339 654.311 431.339 cv
659.835 431.339 664.315 435.934 664.315 441.6 cv
cp
f
824.459 501.714 mo
824.459 507.38 819.978 511.972 814.453 511.972 cv
808.925 511.972 804.448 507.38 804.448 501.714 cv
804.448 496.049 808.925 491.455 814.453 491.455 cv
819.978 491.455 824.459 496.049 824.459 501.714 cv
cp
f
853.928 512.931 mo
853.928 518.597 849.45 523.191 843.923 523.191 cv
838.397 523.191 833.916 518.597 833.916 512.931 cv
833.916 507.266 838.397 502.671 843.923 502.671 cv
849.45 502.671 853.928 507.266 853.928 512.931 cv
cp
f
890.724 485.722 mo
890.724 491.388 886.246 495.983 880.719 495.983 cv
875.193 495.983 870.714 491.388 870.714 485.722 cv
870.714 480.056 875.193 475.462 880.719 475.462 cv
886.246 475.462 890.724 480.056 890.724 485.722 cv
cp
f
821.504 280.851 mo
821.504 286.134 817.223 290.418 811.938 290.418 cv
806.656 290.418 802.371 286.134 802.371 280.851 cv
802.371 275.568 806.656 271.285 811.938 271.285 cv
817.223 271.285 821.504 275.568 821.504 280.851 cv
cp
f
764.667 229.143 mo
764.667 234.426 760.386 238.711 755.102 238.711 cv
749.82 238.711 745.535 234.426 745.535 229.143 cv
745.535 223.861 749.82 219.578 755.102 219.578 cv
760.386 219.578 764.667 223.861 764.667 229.143 cv
cp
f
725.335 259.574 mo
725.335 264.859 721.054 269.141 715.77 269.141 cv
710.488 269.141 706.202 264.859 706.202 259.574 cv
706.202 254.295 710.488 250.009 715.77 250.009 cv
721.054 250.009 725.335 254.295 725.335 259.574 cv
cp
f
737.164 291.803 mo
737.164 297.082 732.883 301.367 727.598 301.367 cv
722.316 301.367 718.031 297.082 718.031 291.803 cv
718.031 286.517 722.316 282.237 727.598 282.237 cv
732.883 282.237 737.164 286.517 737.164 291.803 cv
cp
f
778.714 265.004 mo
778.714 270.285 774.433 274.57 769.148 274.57 cv
763.867 274.57 759.582 270.285 759.582 265.004 cv
759.582 259.72 763.867 255.439 769.148 255.439 cv
774.433 255.439 778.714 259.72 778.714 265.004 cv
cp
f
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.1.0
%%For: (user) ()
%%Title: (plata_12.eps)
%%CreationDate: 5/12/2016 1:18 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KB3-%odd[/0T!SG_c<ro/*!"_A+H.l\#&Kg7O9UeDZ@[:K5<Q^ZXjB5[UO\*4ek0Cop?l8!e>^#0GBM/_#ME^m;5lH+ZH^/8
%;enGlcd9$5r'sOsJ,JKGK,<(UTG)7>V);!=>rQMV&CE]!/GJEqUO1@*Q@hp[f;pjaSb5tM=/h>9.p]qDV::9n<bq]&b192H/*N2M
%[8.1\>#8n@l_SLA8S\Gc:T<s?%eP>RnBV5]:Nu+)3XWH(=;$Qeo,d=1eL:Mks"&RZ$neQNDS+E#2B-"hZ"[h%iLu<a<f)<V_:DOG
%r3HMjVXhQKWE8EVS>iG%r3<l(_BDrXq^mJCW0[T"l1C#`ro(WV?3lYmcjhSN#60@+2H"/0icu"Dni2E@%3-s2g$l<k3p6YZ+Cp<E
%M*#r%e6B=Y2kYeEi10/`)ZQH+(YKYNJ/XlFOg\YgR\?R+5NV]Yg+qUTY+O9>d5X2Mi+FqBF$91?-rkl-36k40HW9qs**YrWiePEX
%/SMn9<4fAU%`*NVMnN^KW'U;oJ3pA+VlLq4rtR,G9C7Y1$cL`"p$aB\;dMH,lX%8,q@t.3l!fhS<mWgD^8%O-R@<B<FPUt9>2$2h
%I@cjI$j."KVf:VpF?(QdWu)WX_'.mt/tUGk&EA5OH;SO\)a8)-mlQ+rGM:S>7&I,Lo(YF+FP9[mp#Wqt[=EV5)`6XHFlP<fV\$M,
%hE/TR[i:T;Z]<)Q_7sT5e/Q1,[H<2<2>R^Z#"/#d!Z(p.^2?8mC'+_?j$0aC2t-C3eq5&gg<Er>[rL:&j$-2)9(OT)]aN!=AfD5g
%P1i.t%Y%VV/J0e9Nn^BcMueD=gS@Kmf(,1/!RGqNia8B4rDiiHP5`7r+>fen(qSPu):Y*,ARKDBAAj+(WDRE.k_F,m@eD,H;M'=S
%L;\g4pO/bjJQQ*[/MmgBko9Yk#0K_OVWr8Mh;G5Nn9,&J*OSLNf\UAF#(HXXX&X^2O36kT=e^<r<Z;,k+]t`"rNk1k_K2m`V+>>K
%)>*,Bka!n!LDA29A`/2=pCai)d&;''/`j`:a+[%)YTtIU9!DeAm8E8U>#&Y`^!:3S\Cms;UC[/`S4W[=I_qZ_dHCf%`dWR1)4X\`
%karDs-23hdftq(5AqD,fBbn66gQa6Z\e,p1D4@:b90i*fl<,<?4Si&BCY#MVH8rJC3<7@(Q>==aY>.#I,iXj,[('Ok'`TW;-NUs/
%/kp^/P'88Y/FQ?6'fbl]DQ2KUInM!QnEeK%%?QRKUL(>I6k%qR\'X>5*F4t7!H#/ZGn^^%T7W)'Fm.Q5=RE,(r8Z2:*KY;I1msqg
%Inm,`hqmf:?\:4(J'M-=B\\j+^W-2YO]qU^?>I?;CTr_I3G]0r_c:B;Bt$b6D9A3q>,<5rW.g@[Z4!Zar"8tXrInq&O%[']4]kHB
%3J'O9(\'sZ9=:@)FW".30"W@^2+i"/"tPcE=(`GB5EUO1?mFB"$^i9=r078A^LeF=?O9R(2*DYBA.'n_np$,=M;?8c8q:-IosCsI
%m%.g(Xio.l4s%CP,lq'!BJnJ#B2'^rHgNWYA/jW<r*F?GZ+CSX4rl7LC\E!Pc:XY#cjkNs!:qHug"1[Va;O"mC\6ohj_j<qOG"Y)
%`m_f(d6-\p_2'(l>)1g?E$ks0Z.@Aj%bYV[@dTi;X!KJ\AAa);B%3:Blde1)iWmNaKSHeplZ[f4&#Its`GI?WO0,9J?0H*`6_i<A
%g*Q7D'&XB[SJFO^c!J"%lu:#haUog[TrIVkq-Y66aqCr%KN:C)fD#M3aTq".NJ/lAKBOjk\QM7-iQBE..q^G=\astND#)fNB!l],
%S@JbTqOID&#q0uUb:S+PKeKq)jVGSc_O%mR^79>XI(;Z/b_\!^B&!H+/f>9Xma$H^P7;sF[A1oCV>9<6l:NNCErUTlHC7cWT[U%(
%K:c/di([`=X3IPrf3,478lO!>e\"iGFZS&N,<HgUfs[@`OBX#f7'+V@#@0oqROV7c:!)$tk+u/Nr4E\bYMk3rk4O/>D(`B3L8HY:
%o9JPhae+oprK`hBq,L'#)\h\:AnYrd:h^*p?EM`6ri=Rc"H=[+2qV\V#U[SFf5,Q?V&SA0FdX"o$1`1!^%Q`N*#t5:aXApqHm-u=
%-T$o]p3WQ*l5pT$ZR/DuCe[PFF(X5If!RnZbd]kG:44<CrgNnIs%_Ci3+u>3h.!YqfBVF_E?oWn;:l>!C%U170!Mi'Qs%D6:m'4i
%7lS'AQo,235V66#19T0F^dccsXX#lb$@p'6Y\)U?\MBB,@*UY?8Q<d]'K*r@"RaKL_c",#]rVIp,^7CPV%kA&?Tt==;jRh#/<o2p
%[/%&*>Ak/=SX5k,]qBcci(hRo[?I-.DWc:=F;9]bT1,'l:iu?aPiZC&^h)*7RYg6D`e0`[RR\=-B![e?#Jkm'>Y!ZE4=34^i)t99
%<2oSSS?QfhXi%8?YtX&WoZ_8HW`]BCrf0W0X18(Fq(XUNZe95%@[4h68nnRdOG+O@GqjI]K\(mK@*L/R$fUahGn7A,+#_M6\63J5
%"SXM>_r"C;V(jD'TAqKT>PKm9&S93JYA6]\`]8J'T-1Ucn[`)c2A<:kc]WN+F/*sm+>Y[.B?gl!N66'9\Kts5qioR`P7Z:2-]m*j
%eTmI2XQE#V,s^T>dV:h0)@8$gEgNUl,H)Ud2>X[NP.RZD0%7]+0Yn4Wc1)b>11b<dYBF*W;E;NgdHm-%F/a3F,oA8Ne_sbX3me2+
%;?MEu@t,JZ0`<__74K8%Zp^F0*L.bE2Es6;$3^V]-0+bVA_.6Ffp6Q5c=5A8,K]!&\ZGOf+S%6O>b;"agRb!WShNn%S3G>d,Qk#(
%7;H@sp/`K!_*oR4+kfWuPm#N$5q8E&2.80S\\@dd6F,!T,Tscu\_O7[Y.:ct@AYlQ(0Yk_19;b#/B"ZfKgn-H?R`el<@V#Hn7.XA
%$(K5EAj1,llUbV-24GMH-1Co(8c6?coPc5/r[e"?^arkAFA)"S-3^lK(.tuL,:Fj_4B!l_b4mRI"?8hEVs7EL)V'-X)8&#0(#4DX
%ChqlO'4iL1[.8(V6qN!S]S%pRR4,BUT1q^VZd.mGqP/U5lJsO;;$:bmOc*,O9t;ZDOI6p81Zu:s#u&N&a[Jch<3r3TE\!Aeq)7?/
%,XH%)MmCDmq'WPo+r=h1I%;tu.(:uK-':TcGo_$sE`%uB1G9O:]]Z"73f@/(Nn^"\;SGl9-qTMg(U!e/[l!]D;j6DrD]gp7H'\&-
%4>0QdfA\(<Y;jN!*5k6H1!LHgWqqF;h:"L:KK9"U&YaR#?V)GjMb63403ED`5/)E^.PhICFq_FK/EBud/Qg*%Kj7j'[CMB7gMMHl
%bdH2:Xp''K$`URrCB&1N[P69MQ*IcZC(%$7YEiqgNR6o(m^HhG9+l'Ws*>tQ<u6Ap2S(mf\I1;fYQYCm>-Lk_Ao'&1-V30*U^n.#
%n0r4PAW?Y(4tUkQr@=fee4RJNVsrhgenDT7e=.]+0$IPiQ>30-S6$Z)5J.k,lY6U"DE^o,%AiI!:qK/=Bu\9678]L^R*@ln)EeB=
%/um>n$*.94$)Q+f=t&E.qR`"hVSbhOIDaE0\de\i;Xj,Zr#,K`"+Ed8k#odt4HQ%3I$lk@k]VC'miQLjVj!aBkX4BOPJj(%SUY,f
%s*S'Kbl!CiOb.=SDikZQbcK"NEjOV;G//7Vmu<K/s._]GVBErOm,h1Q,RF*LNJ]$]LOkG^(-kE@_l,Yn(_5+2:$2X=N(RZ=iF'qh
%%S;o+eJ*/I%5$V.f86>I[<l$e\k,m!>j97t.@%HlOV94YGUo$>4C1G2n8.87)//QgDfPfh\Gr,Eqqih:*h5)k?JPQ5mXH&I^Pi!H
%`Vo80'3a2khWcb&9[A%')dl%f88(RImX/Y(Z8L\4P/X!\im)afkBg\p-\7CY4[8CXJm>V_)R>KY`Wg`_MqEI^[9E1JnL2tg(RJE@
%YZAaFS-^n9mk?UL25t+G8m'2!ep;(36NU-ACS-5^RhVuLo,3mCZ`\!GHf$$DPSg/aKIdOI/0\V_#he\:HP>W"7@7ml_dn[dpFa<n
%M_Nh&nP_=ug-O*<!%TeV!8UYgBQ!aL2JYU&UE*;lRdF!_jLt72IQ!1K3shXL5n3gZ0]&V4SXMP4'&ZacDmeHfNr%C99ENA&;\%:;
%Wt^@<U8]ltglso_)F\*+bU(s.8_io<:^5+=^&;"?m%-U2UVSQ]@tFhG+BNoBW7YLEknuRXgt5gC'3g-NAib;bq-^4@5A!Wg/cm\a
%^rmqk1'ocRJX8g`jWDNX&U9_)^l&K)E8X/Q@4;,\#e\Bc#J(2Rga)AE4lbPqjS@"n!9m$6:NIOB\nt5XDdAcf)nG0jJAX2idsMt$
%85^R<;/B]"E1$<-'1m/1ojSTV'@CE!/)JuH',1;.a-:E5mQmg5nd]H/*+rBH/X5:3(b)eo*,e1jVAjh-$O&Qf$>"*sj.ZV(mAdsD
%K6(<t?WpE9RMM=jC[)TS?'Ztb58PE@\S\P@'3(N+]ZQiaP@3gNZR>NEA0o'Y8u^4F81OuVU\$e[LVIGl4_A#H2:'T15o7)**E3Z/
%jE]e]IDYO3kQCaRe%M<t^oX*ND>dT1_F(qX*h$t]&&qQ3AWSHa-u:jpNMfuPd.t"O8X+rVg._sC2;M#X9G1QEMPa?.,a'"P;m^9=
%D/kM'Z/o1*a)Df6N&gHCk!"gah1@UU&f_[,N1'?\kDeX@EK!=+A(FCe&]\"l1$0aAnaH"p\tqe4=1@!M4)^J.h,<W_Z^N/sSGS<%
%O)XlnTN(p8ff[a*Qq\s,?ZT95"GM$gUDGc08c4+Qp=$l18S+_fYJ(O#q(pDsC:3T=OD6V5]%(\D<'2uQ+i&9AeQO0P@]cQJ;@+OM
%F&V3]#r8tqln8\T,pLj<(E,mii>9IYL1)tB`H`6,Gt&n%e8+Y$19f'Yc$C#m8'Rod8V3!EFdkthp?)"O=O]r8_De`'8^e(Hgn\c5
%U]Nd$^%PU4#'t9\K7]$H-R3Surq!NcDShosC2`geCCqsh'#V4b$"&P9R?N<-,cJq3\lTLY(<KmhEKq(Q,,_3ms8S!$9AOT"ft:T<
%BPHl-L>ikWk:@hI!k4SR`$9Wb^9!lZ0/oO)(;AQgc8>uJDW/hl]X`_T\+&Ma;><(rEs^(ig[<>B_XoN6SY3@,S@WbJ0O)&.$[6LI
%c7Rh^4u=&CgqoVo4mnhg]A0qbkfelF\#/$aLFsGW$^Y`h>e6,2ZZ=GG,uK<(h4M;r+"^%An14o%9`N4'_?]^SnensJY:HlVO1D2>
%0o'ltVMO$p&RN5M5fRntd5<W=pcIU'B=1Y5C*U]jAuen6G(6VA$LN#J^M6?7e=td+kUtiWf]S!M'&k]#CfE[:RnGC1HZ`d56-`VE
%R"]Z:7B+k36BA\3-/7SZH[,ptIu*Q/k*cbUSp(f#TteXT#k$$^7*jY(iks\if1?Ph_>Xqn_CtEq[Z8M,6tT]*osCqqO@dmb[EhM-
%+=ULajpMFfImPCMpNG^h0.$XMn1>/q3sfX2"Z?'Z_XOeXG%r5L9H[)&s/jk!M=(J`QIE^+<6l7nnk@2Rb#c\S-mlQ3?Cg.D8-fo`
%C7e:;/cl!p0>_W,eS7!o7/#DDQPh]+jC3%8Y7>_Y(p"+omU'Y]h<8Y%PKL5%25.T8MWVf)>1c6XI3D*I*mD#hZq+#bn_!f"[*D!n
%/qVmmoH(/)[8@G:)bl7'&f;ipU[Ieb3*<MH_l2QK0c\Ej`Z^0g\XK6>8KRVrIB?Ud=1agl+OOg/k"7_l[Nsp;[<k`MNf;.4PiE/[
%["WOj%3oH8Q"(FHAmIFRcmr6IaOsWC$f*fB\oAc9aGZ)gcDo8J);-`/k:t@abU#^5_AYVIl`9$S\\RRk>As+6P%\\%SiO74k.EBF
%]`c5!.+9jd10dUhih'Y/$6eH7V*?;80A1:c3,@ZAedh??>a*Pla&7M\oB]c'CU5T>DO5Kf>>'?;r^GU!H"cV]A?7)]a_/=Y`nG:.
%OtjKqdo=]Is+fIK:6YS<\B)VG3M&7@/%KdOFuQWiB3lkA<<?(RnZAks4Pr^52`mLs-T+'/B926(SlQ@O_/$o5j.a(CW,J0@IX`EG
%$e=qbiubUN_VNXCP1,t[kbO>5E,e/L^IoJoN4#7_1b&&8jhnVC,I`NNdV_ZMh0(R.=ch=Da\9JJ_CRe!j:H?OY`?M=]@?&7-i&qB
%%+>'5oC<\pO4cERkJE6kWgg.;]a0#p3upq=bLC87&*NE0lQX;g1+AM&>/:Y4K(L1lX)"WfNCrt#,_F\T3doh#*5Et%U1R-8Zb])<
%U&OW'IpTVJ2iiGMW:f)`qt+;4=AYmC4:>'?G->tTg+,$Q(I:-jhlaa5a8MCb?ZW&IXa7ej>r4]^2JZ+H^V04"OIr-rVp]$?J4+cF
%'0pEQq@J9V.pSt$+l/gkBc?rNr:Bg;n+1IcG4u7mJp2_e?T":%2X#)#PY7X!*_IR+^&[E1"u7?n4f[(;[30:]V=sFD1<g.*H!`nZ
%+oE^)gR_o#.JSO*RQ>\IC!/:p&-(S!QK9%S#MjJ2gVuGp]']:b#M\fJmkZq^baa"Z$ifo5rq%4=J&:oTp/7NsBW9,rnDb[t#g?P)
%"]CXGP-IX*5&QI6lM*M(.+Noe2dk\Vc3P@bdqHjhUM7579@k^"dISqsdk%cRV,)k#5c<A6^bKXH@e'H4\=rF7rqOf*H._72SPX/P
%nT3,mWTW5=/[Y]\AtNh4s$8Q[2T4ilUeue&a2h\.9=`1%UdPbPo]+?&qH:.Z6iB5L#k^JRboddmDjG`mn6#7X/o8U]djGcYe;Aa8
%WDijGqKBs+UU:mp%e\F<29^!-AX&X/E-eXSnDJEQ@A@o?ZdeDZN3s7j1&`lXk71SBM>q_d\#KIhF-9h/29T(;fQ'Kh'%qAL-4i;?
%2Xgfaj"ji3/^V^=d!\X@,X>=Gr]>trJ)?K+/[5PYagRq$6)I&?OlW=9:'`cp$L9p?MZmoY)[)4HQ@#0?ZT\KNDk\MghC5.`LH6.E
%0KH!/'7=jX4osuA?I/"Jjj*[o1I0i=+NZ^QCAIRZESUVUo>tE;Wa16tZ>U-".[7+EcNJ8`g@7==/;B!F2bY`Y4ubZQr786^VWhTQ
%)k.Jb9:-Hi&s;8->]j5dY8P._c7%F`?AHj0ZO7O<0f\Xi\#U>*,H\>?_+ldr9TYM"i%f_EGrD`1:i\@sNdB&(<PZiT%?'cVkJc5W
%Lfd4mRT!B'-tLkE/I3gsMslnH26ja:Y-+\>Qjag-]iM.8C0^C'(I@>Zg$5sjIJ390WQ?kEX_M%HZ37,]XL4gkR)S?ec;d*1<3&Uq
%0LKEu.TItsr7PdA]+M36h,L9'D5Ie9SSlfWr\s$_QdCm7P,`\o[8JqSJU'dMZ=n(oQJmPpi2937mTHmGY,&#IHcgm4]eLa=24EX-
%B!7]8BK*i2;VLuH<iHh@;k7[:=,Sh8,IrJ%\p0_%.^edQ4Ub;l5kG![I5F*s5gdBPD:9PcKq<%70oE510A8]_^LMKN7ZD>j#\DV1
%a7RT[XX)A#WU[=E3K!3dE]=<kTG+\^#-$Y@YAS*e;XKdqWjQU9f)XtC,Q7`a;`AC*RF+"MPS3Zq=UNco(N_8s!i2Sc*<ncB4lqo<
%*VOj9(/RWO0#Y3=buPq<.R+uK7Ap-$bF`unc*L=80PL,oSS2\ZS$^[jLhKG!=S$1PDIFBk1FOR!%W+O@m:T8`_MQ*&-$jAi^aNri
%Ein&I,=Xok0;+%-=B;=qB](4omDn74djsCVV2E+8TJgD(@)6$S&YqJDG4R33W<5V<>fe#j[25Yl&-,BG[!2*^qK]S;%bhbgj\cPE
%,1]q7EK#>p:+ZX[m\I7t>'fTdZWlYDC6J5G"`6@KpiQk2Ne1lBdB09R=%]$:qp>Q_(d(IOoE`Aa^HZU:6L+)-niD:)[GZ/-5D'u<
%8#N:K[f>WQ;D)*-G@HdrH7YfErkS^M+O`EKT2i*j::D14)E57H?Kir\QHE:&gsmWm;jtQ#e`MBG;-U^#"M5C.Z(MjRkKjMGK6jq&
%fl,Ah7Jt/0W\iu_Bka[`rOR.^1/jkK[3MGee2omurY6%\i)=O%.m[_P6)U<eDKb'T926r<K4]dAh9Gt*Q*767XO3!F6`Si_<Yd\C
%N9@+PTMk1-'oDWq3@8L#'WCCRi`2[ueF?)t)'nrIBraRZ7a.Q6aU,e((_\G&D>+3<*6#jL2QGGM`'(9*YRe0N1&g5SbJ7pf#3pVR
%p\X&eT*j:934crG@-_eo_dd#Z2;1=UiHmA@iZ_'f6nZ`Jn'/2GeE^Mt>kD6krG=jnUOb>#<>uW<]+["Mq]NW%rCo@Te^bTXajlc%
%F=O+jD;\Y')Ih]YK#tM'-2's$9c,8!5;/L=]8cDo8l64RV`089FY1VOfIA$bMBVj'ESU)E3f:7Y[pDD5+`=rG-G8'HF]#nGf1YM3
%:@nBGc)u'$)B!4<L3dF(rNKRg2t(kj&8e5.3h^(^&grF)02c.BgS"&kYc0\>>.VR\d4U/a3.+tI0%qbWg,3_OPrbl(=sNhm>*Z@f
%neFaGEnHM_>&D[T\rDG6@U?&6Hol0R4[Nh^`oB0S:]'"IQEeftE0>`PeN0pB\d"IVCmijE:<nj2c'GY5D+s9(ZARrabjAo)\HF_n
%bZ[T/rCZ2+@-b0i&0(=]$um_*"PLP>UK``84!(IPT$!*5Y.rcm'i6^W=N<tu9$jPD1kth=6Y5DJ#Y&)]-FIZ]=)6hq"cM=LMlEtu
%4anH).+d2;H=SCaC/Sq-i7PXYWONEKC`6JTTVKY2f/7GId`lqM%(0!g7i^7R*;'2@Zi/cFo<c7Mfkj)=cG>>jdaqEjBI'd7F_tYF
%HBK/+2R_Sj0pm.,X]kPP28Y4iPoH90Bc.h3X0p$%)N?$_=KU(FYT9IsFU4)K$HTum<[_Ia%]4;Q9>K&9Kt"o9f<b^=moI%4$`+;Z
%U`'G_O#BP$/@n:UO)%^42d>=rTWM2to4VC@[Z\?`G$]96cV!TMFU&aB,udl#^3*MrCKt@LeKhAePa*M-*N^SQ@s'*8puoB<9il(>
%U`VO1[Ek=pTqhU1S_dMjPNK*ul2\E#JBtGHB2pckYA_kq/kQt'\@r^SZ!bUq`m>8T"P(s<1KmMnnOasV_rVjpls,jlM[?Q@/Sl/D
%0rEEMogNLMFM,>"mP*>o=">;PeO:YZ^1Qa5b?hYJ1qa`>3hi<EO%MfT(qi?I3KuJ".4DjpB>o[0.IJREB\@3eYELrqU3#/\;i=7$
%=ZiL`itr.,]]`)lNBth7H]@T=`57L%[%T8mOVhb9C,Ef>QYW%LocM>!eV[OVRm'HB:4ffOXpM7\-1uQJk[a_Oo5a,o1!3:mK3bBY
%J&;[eBS7F.[;d4Pd7>8L0%YSYCOei*S))97iJY>>);/>=kg]rs*Q?bCWdb2[K:mW67'=;,g_4YFBW#.9T[fAY2(IU_TqBRDfckbX
%0jKfSF"b-')!IeHI5iR8@&h%<$"f@4fcU7=clWc`%`r3#(PGoeZs0U(8CKNPWP@K;%oY<@b<`j]RNmAhNEm,*UD_`+$]O/9Il986
%mo?b-`g2BP;q^ODoNolrJ.ak1K1/\Bm>RG?b;:<[DE*D/2mE,4:-eGrgh5&q*+-W(O-TU_,TD828mp?4b?k.K;6&3C$lOgm/lK+"
%[Z+DI\8..f1ECGQAIg>^j&i%raF0hAO;qsT>h_QN<XgusW!OcJiZ`8oG-_[[n7T(U<K%?oiRB<S'JE72]cIt+Ora*ZVd!_NH;'E8
%8<4TWf?_@$Pcu$jR#<r@8!"[0gof4J_b\cqKJh7iOBqRKNFp*u],4DeS2GeV_+YBcCH)^U6g_"Of<mQafmPCS^N8%63LoEf6'0kU
%IMcs:%@98r,k\CE#qob+6lNZP:`@mUC8_ea`[ZaR*03rY-#SF5r%s-G]#-IBJB"ZFjB93MjTZr)kunD3#"&Tbh6U"g=S`c>4+D%0
%N^Hn9H:7Wi@K=k&#E*faNU?fd=:&PtBYE.KK7<5)1^Ri8ppL&+qB'dnID%,,*U;+M2`lra\;Q.TW\.&N,<Wj(q'"A7*"hROl'R]i
%P"n\mE7>%QYgc]QqWNnJe'Y<?f-24^Y&Y-l5@DF:>2rdULh<DYcuhDg?C3$PbD9.;f=;Qgg42Nphre9&pf$ILj%GIP.BpZei+Jk(
%78!u$&0Fnq;L`!WN>1L^!#Lt?.C=ntWLpPUOV(Ng%fXPQSme3E;(\=?it)HMs)tnZCuA[F?E+/UGm[(p5ktnri%fQ(Mc-sFW]%@o
%8hn=e;_W2N5QgLOFdk?e3Cm.!9q[`NQ+5^)9Tt)b!XZ]=h8,H0Yi+>,SurEp_0BQH+4*jq<o#m!(0'[sHAsG&*M"7RSu!#uDHC'&
%U><(!9WjeNa$Dm73,u1tcpG<%rYSj/G3hY3XSMCoERdlCJR[9F5.'$^dj8E9WUU\NfOcVUQ!0]+<t2<l:#-r0Cj=Ip3Z3/e=Z/Sc
%``*nes3Qu^^0Kl@8p<0tQ*+rc.(?hSfm.OL/+d0JJb=EjiMVscPGaI"9(,hgRLf/EZ<Q^eqW7QBj3GibS^jQ,\S<SL\aR1ZZ0g=N
%hg2p+CsRFA?Ms_7Dl_\E]7k*3c[2<heicanjM0k2<jhg/)dh'T[l.;lSZU0fisADc[8FTcQE=J:ZPP:O'Xp!&i$_ZTqQ-2_V]T1Q
%bZ1`lJ-k%ZiPE,&EMo<+rZu?.>[,J&S&J-7pS`GLo$"Yr/**i0-e[sr7jfubr`jeq2KZ>'Y(,lRHh6KCjuA]V2gSN4h>3J?c)\^J
%Xn>H#^62iOcmp[7<6enjg98@P31Bd@QP2;^gT%qo5L3YZF-l;b4glTm*p1Xln]05Co1(/j&1kDVqg.e?$%I9r,JRI9]ouan^>I6V
%Xkdd^,2SY94da7h^9gep0&(<1EgPAA`b+@aq/@YWHM-%8<pnAi68%IbIeN3k]uuCU\TEOTWig01(GC&K?$fIigXZ2YeuN.b<jK+<
%cQB9s=$H@6`M82Q&:rrFNL,tY9]Ks%qm)K$PTSFWT'gGXEU06h<aGGkkM4:gbIdVne[ce3=jFeK]Rubr*sM(hWE%NM\L/[_A:<q2
%db8GtXgn[Z`o0;T_,bGtoA7U_Wc)B=L&C?dkMA!RfDN4cq6':&h)N%@KuSPlGQ9-TEus5VA,52U3,]_F<R7sPbKcP!d!(bLVLQ.c
%Q[_oeHs!nbo!+2'3;CBm)MOWq1tpX=?&S]fnuT&Erj6sVrJK@m<k#j6BZ:9e(F]'l[dre<p8X7)IdpAGFRjNpU[nBV=$"TF`A$.t
%es=cMX6e#K$"'DQkY"\^YuP0DbeB:cT@.n8k^RJ1+._l^b]3XZ9)eb1Wup)md\H\BkNqRTs5:`j\!d2"p)nj6<;j)pj3.9&9TukJ
%*1ueVIWR%][nl[^G?O6[B"sH-IWCmXIWqB"SC\if'QWAtFkFTEhd#o[dYoOFNdfJbAbM%C?PW.TPukU[Ej(l7O9E.soUD-/mn,e]
%V.Yfig=eOShT[%Tm.LXGle>ZU-fe^KDr6[E*<?E4kHOs'p;b=.$fg"(o=S-!]O_]rCjt+ijFKcAYHDE*rn%/@MJoYD\FM>@I%F\g
%HF-J(NOi+CM`[?UQTEO=k"9FL>@Hdo<B?ml*e-#4msj0SQ,ImbkoKUd@Hh393Hs^-?>Zk[dtNTaJIaq$8_>#"=--7fJ@k(W!P*R#
%\VnYuNk8/;H^Je;)CPLHE:BUq/iNL\SaEi81On&^pfG;4*))PVhQ*`.Y^,BoZc*GV_q%ITQ$,52giHkpD*p+&XM$pjkoLP)%r*&;
%]`$5[H+*;R.qD&H!FFmZ_KOdZZd.;(4-Da@rPcBKRPk-+>O-;&Haco!ef+"GRH)KbpL0"^/)^K1mFC?7U[W6IrKK<)^O-1?^-'V#
%/&b.)3g]I$O'XfMhW?,B`9hd;?V$"`1VER)C_jH3T"[^?s"/_4?(PT`4t(X7m2fjLO$D1-n$TPtP&?Cg^hKMIc'R-rp1gR,/Ssk=
%98]\JGkeeED@>YD7<IkL=`8ZOl&V$!oCW!="MN<-049@Id6Ig&gWINRk8`Q,q4=/-HaQY;UMhf,i`AA9D/8`3/e(Oh]`WOVI$iGK
%p.dD6]jiShPo?Dk"%[j@?!`$%8#A',P7O//pN$eqI9!kV^$L4%dU"NU\)BQ:XS,8iAGAqR5<SVt:[anVXL+h@oSY9n^hM;q-.2>7
%dR?q)r!n3[p(+ZskUpN+JU"P&!ST\$KKjn2Etcs2-)LtbLoo0XBUX7]Igfoa@?6aVQ+U3/Y6e9#UVJ'e)TJ"r`+:N5Nu035,J7\.
%m,#KMiM-3^/T-I%JajSH:X><o0>%+Nd-C">ps5js\skPVdap(]Odg9R:#IW%puo+*j_H3s>b!-i>/S\\VMEQC'%&PUSK57JYZ0$L
%dkeO7YoVeHd9i;TLjX1,_*s="-HWM(%f@\7V"ch@=/69dRh=_$%;gL*;cN:Ek[e_JkQdPgfR>QdZl*mS'WeS0d![2A;6Ug_(i<G@
%im:7j(lf28Nl%oWn>Bp(=`HQqp&-]/S*7rQ8'BYB6ZRP+N+"7^3"rnI+/ku-F+"j;K+2_0h.):rG5XQKVbgQAqGAX&a,Aa1,"=U/
%JM;!\nMJP*m-Mn[&P@ibj8.t\ga7E=3I^_&;:p1/*.o>PDQ*ELcSRn6?5*e)p-,PomQ=7>>18)0F\c0@C\PZ:a^8nUgj=C1X+!4f
%g+Hb2Gf[HjYqbV5_.\$_[7++kaPB.#/ai/U;Y(]?bKnig4P3s=*%ARg5Gm8kHM;*pcX$5S5NZ=dqN4cTb+8g*_a]*)lf`-]%#s#q
%<aCb^ZU1h6qJ33V]".O:d-Uf*akc&Si2FA*D3n=bT4FKm@ngqpp$C@#5'Xa=+u6^MJ9oo?UV.8jfk551na9B"!rQ,AJGiZFH-U$V
%^]<gTkdK&iZ?Q((K*t$K$>b"bj8\,O,k,'[JGL@YQNWn<1^?B7>sm]*Z&X+N?`tXa`iGrj0>ol`I;gLVVY;aMADp!^'b,<O*"VVL
%V8r8gF8f1jGm#oST4QnrI<qE3oAE9.9P*VQNp[D1.b.NBl@7s/9':E5];93(d.+or'1\-u]PucYMT;.`\$(>KJPDP%UQpf/3I"2h
%3R6ZH%sG69kMd0N"u&d4*XjYYf['"k4U?SahJ?ZrUC;WUmI%@LT)&B.L@mSkDK1=?Zh[,tS"7c#D/0<d?i89oLX5^SXg`M%iQ`K/
%%Ud&SX>.Nlj5\\'gu[]\l`fBt;b7$tdXZ9TV*O`hDZq,GK6&PRP]cU;^1OR-Vg"jW6CQNW/+o?c8+eY"8NYVBk4[t[3/Ur8qW77\
%_KM]0ltJTOlQ4O,lMW*&4L\RCR=0.\F^QbMW4s*@m<s5@H1Umr*P1>&LQh2(f]M<`c+WD5*GEDm]!g)@&))G19D7_ArHD$HdtErg
%fP7lKhcf>m-dQL]%INu22fo%@g:<j1<<h?!ARAuM?<5NVhfeG+cJd7(N5+mt/c=S[qN7pmfN[*:h.khqq4dA'H.;uDFTN'"C8Csr
%lEF)E?+tB:\=-WkB3uT^-Z<$,Y$\=O<C%T#hhg,'=Zm>]Gd3Qafm`in:td&Jgt@.r9g_[9NL#N_%4Cb/<$K:t`c8:%`@8!'@q?t-
%`o&F,cZ@W3eY2KMg*\R([X[B7L.i-f:r[p)#F)c0@oM:,]rFqnFks\$)Pt7?LP'L,eH`e)BDM2MlUnlhpK&XI0&6\Trje?@]su,*
%Bru[D=dfEs*,Rc_C9Im"*X6)S?5u)Lf$]=7%!pDG>6Lh^3FBPo^20EjIIIQ/IrT,e8+u7HW5:/Sl2qpjgj]<niU<KN]%B2no!'+B
%Ce0#)+r=UbnDXTi;!uG3lR8p^\Z*2TD?np'pWlUN@bF$"F2#:m?I:rLX<mlULr'gdm/o)XH#IKiq:g]#h0S`mepd?WSU'i%i$*5e
%]M_#/H*HnZc!KY"[VEU^JpI2<^\b#*(bLh:C'(\eo4ZeI^#OnBNs_fZ*e)2&_j4kLhYl"&bGF;H13k&m5j$&)K.ET's6do&rM.OZ
%ZWa#&%m/MrO.C>lhr/jg::"<:hVIXD_l8Q5bSPJnDR"^e@FdV;YJks;F@Y*a['M4$#ZWLrFn`VBT<D<<^"EKlD`(J7IsCL.(ilm)
%p'OL"nYQ'Go6%1l4a(2!2tm-;C]n+3Y:/hIrq^*!]"QhqW.UJEourP(pp*ie5(81P^5'R;J<oVG5e$)cZ?c&sH,#PiSU:+DO$LY>
%8,LRZ0WBOA_F\\E:s;B`Pa7%E5/Fh<FFQ(,*7DX$Y8l_>iQ$l$I'%'P#-p50YP7JGc]>dtF4InsD4kf_5LXkcgDi[RF>c[:qos0)
%h`H=^BD0rd?YsXj>H1gYf!`,reR%io.&"+*m[))^r42jpanEcJqlk!3rU9,Da']:&rK(`"mQ\]cMj$hJ7F>I,8'?[!4l971jk3SQ
%*(D7R<G)+fj8+OA:S-^phfM[dZd]QPI;uHPbC$iKjL-ZN?eg.2mq2JF=./#A1691g]fY(&'fPYhAN:m"n(lf'57&sN]N4oo6CC3<
%ff#-<ds1sG*F'r1Q0l?].%<<+^&#l-GNT.pRi`_25(ohFK%/TD@#4gld)bs:>OTjuHck9mS<pp:qQR96[Jp%"Q"%;AIu^)3KgngB
%h1U1Q,@fY37(*U%0QmS[C/6I7YM\Da#F;qG0D9bg(LK7pr9@EnHZT#^K==+.++@bdqp4UpU3UereCiAB18$Pt,nPCR"0gaETB+=Z
%gY`TWkB2InG<90Gm5ufPH*u2:pU-JTDmn+^kgfu%HEiEq6gkDnoB0`(7af%;Mo!C%/Xp(#qsV:$28d/>bjRZ@&:iTq3ukd_^\cXi
%a5&-pm8d!/!W@u*idF#Cr/-M&D^Frd_eUIfn^=^U[l7't=PESBg"3PWGiR,R[Pjbcm\rl/XX!U>jb^:*>%dN'oB`TeS[$dQ]g7dS
%&"//Ud8I^pN8pU(l>E<JfIknfR!L?t4Cl2JA_a&o!h@/`K1n(B^,0:;f_nn.W%jURW7!<LpJsu7XiCt@,\#FDoo$-o`;j?%?L%YS
%+#bsDn\">q8F)bR?2i3Zo33kO5@ig)-5q1?;q'$IXVtJ08s<cHl-#,@PmmdPoHd^_\*fHX+YH/']U<^\pJ>rOY-4C7[R4<M=N0-T
%AM%,e[D)>0q$NrIWr-]19\Xrjg@o&ILO[Cp8cdd_gr%;V/T]PqG4Vd35:Y*3]'>!mNp.LOk2CLZY4DfZSNH5U[WhM@hZEWDiikuA
%oYu1TiC!,&^H7R71rLlr"8TX$V?=kQXt_ak::=6t+0E="IU0Rgh6T9&a&i"Dl9]gLe1aTVqoRE$Xg"lFkl%7sNFkH:jWD%bg\s-0
%0ItI1+8n`,U?G"HSh@]ZrdZ'6lR150l^PcBQ)tCk[3lFi9W,>\^;&=GGWVHK?DOb>Q<p`-bNWs2SW.%U@3)R9>ZRbOp7kCF,t[=`
%jWH0:HPu:RFeNIS'#,OGP[8kPf[Mh)HU58N&2t]oT-uk>4(b3,N,njCr?F#9Ns^TC$R#/<hJm*h)*?msdnZR&YQm",@XsTH\X,<[
%h1DuDGhe*L6SuA[mbL%NG\cQUBIZ&k6jELe&S/#E9#Z)Mp<,PDI@beJ]DPX=M_<Z<Xj&fefDM[NRs2bskPf@4V\Mf7\$n90]EO5C
%IC#XcX$=`LoKQZ5)Er(N%Vtc09I,t]DfqB'hp&o^B`dtbbI3-s=.'21nBjB_m56S6GB>M41k/pqG;iTMT<$8D+-3nI9mZ`4YZW@^
%U'tU5.&Neb&i-R6I#`i7.o3Y0]6R"<J<bN(\OVqI-CX5%qd7sLM!0/];EeDG8rjLg[5Io-kP`Hq%60hp2N%NSPLj0fHA-9EHC(#8
%nVE^5[DqL:7>IQX\4.PYi"J,#Z??;Is)oj?34nC-E\992=//Mo;9@RKNVa4Pg93Zl_[d8C`4bD(^C!RpaW/'<O/)+6YI;.]!VuR`
%/Bir4rTs`0<_Mah[*@2S-'1arQ$p#bS:=dl;Vk[Wn1'pt<d/PrLK29I\2L^X7d[oP+CY+`K8l-JBD,]G^jF[k&%E9BCe\j9K!#AC
%D3ReahpKDkZMj_f@G>^$\%fYlHjd5mmDG%Zhjh1QT=t\A;_3;;3I"uC]@#Cd43MejDgAnY2KmuZOMfos`dS#u^g>t3;"adJgM7nD
%Ml_&1XskVmrOR<;3R2gi4$R&:Sj*AhH3q6f9g([K36L9Za>[bt=&8EpWZUXXj;&4nmQ]p.qPZ-m2n@,6b$'8'Q94=e"#T&_kBhoZ
%='6'[k2>97;qZb)"PjAq6kt,LHi*/SgQ'3_D!I'p9Y@<#Ug"%%55GtB+]$hA.e3;XqKD,XpXMstq43/T\"t_^1<&GSb<+ljZp6YH
%l.:pNr>177qYRa7J5&iO[Nc?RO;fi1$kT34[gY'?<oa,'qRnP=ZBf>,FCff;`<Yg8=Tr+mmVJ5^]mug55&B'LhemqTmpDTX-Ojj<
%JMI,qf?Ebr\VmNd^Lr%L&*jY*OH\Cr]Zj2$:B`aiiZ:=al[MoXe-PA&\8Jr]P<+qkrOinVa`8RI5)aE#]DfZIl4?<\j"YnmYFnps
%e-Oqcs.(>qe](UkdnQ0u]eK1_^,atc>c$re.jH)S*gM0YHbEUlg8Y=EJLX'?ZR]DDl2+T+"8pp^@e5BGaV]?K^u+n6`TMd@^TO3W
%%51/B%SGC[/Y;q2T-\6Cd[*nO#42OEBNUtq\%?q<)/aj0XVk.+'UlcGl^-Qs:[nNMoHg7+J)VY-/c!YdRs^Rc-JpO51p5raeW9$G
%r.f#KCVK*A:f.DD?c,(t^P0qYs7fCYO8h?1&M>Y',EE-*L<DsB8!q)$'5L9gNo=0Mp_]-/)JS%$N7=<")en'Y4^=1d>%ug?&?>P?
%bCieZOR)cbK']l)pjPj"X-m[h_+KudYMlBrh/s:/V+o;,;QaH+%F_Ul+>I*5YO8<:gXObF%);u^5YEg_7p#T12:K2br+oeKh+Y^>
%f[*5pL.MjA[-P7`/]D^KEOl8Ikc#Qq'JMZ-Zt=XpmOEA1E=W'9!Z5+f*4k)Bb_)bG@PtTFa/@Tog41nl26bKBB+`We4/V&8#Wl9-
%_H[pKmXslnV`icLRqS^BfEh[B7b[F<-(KY3bEO,3!8TO/46'0u\f7+D:Xma6Yo_*ZNHk22jeeV-TQu></DPnc%:1;rKkZG+k_:NE
%bqsu[F+!`c`U*g=dV1)6]BP]1$j=O@J0nQA=;FRhKG)HrgV_]lBh_CXY3,S@,$_J-9Gp7D@5Cs@-=la2T;jEm@K>6K2UOUV/!2,C
%[Bp#@Pu9l9LYjtq;G(<@7@s)GW.8JB5bD`@olLicHE`+3'a+8GL[\<U_T)@mUsU.o-sDJo.T]<ML/YklRP)ksXs8T.i;.eEPZZbJ
%I6g,i",PM3>/[]H2OIo^0OQFGTX!ph:D%%].u8Fm9m7F3bOsmL/+*,7g".)q[qmueMZT*C;*0\ibG,dC=Kj]CkWE$E"<5;Vp[7D.
%[k,ltPiLVG[Z6jg3YB^D2Qt0;)Cull9QF>C[aU]*0i\N_#$@[@a-`r%cQsE#"P=4F@,4G%Q;:u0LQN!"C'aN<=Fp^/(0Pu$cjl]Y
%mK:NC!O[(!ALPVoAo8E!P!Fbq\HE!-5S2$ie#)@q:>*-R"BqZ/#AlLU+6)>6%a^;q\d3tNNPsnod;'jQR@ASS_VP8lLW,Xr!<D\=
%:`4&aa_B2%8mfb:>GuA6a9:a[:a>AlL<Y'Wd_$aEE.OL,]rs*3C>9A3&g/IU7)adO&R6=L<S%XUc_eDV-1Qa5*t]l^$1pbFW:>Vr
%@br+!F^]<Fg,uR.[`)XM!>&Y-#"*dYo;JGH#qbJR<n_M#i$(Nk,U8QHV\Uo(K`QTX"p+[ZRY:s1:nRtg9a9N[liWa:1iX;`#D-)m
%ds#2(6*^"c!Y"c,eR=K+R>r3me:h1]j!i!aOrO85E,lk#+F#XqY!k$P6-%t@1k!PJ@DZcQ]iLUPS.lGnKGS]n:fG*`B,!Ce`bGi\
%ZY(4NBnh@O(&$1S6OP'QW!99[YU@gW&>[JP$%c8H3`A;@jGgAs8l)f+W,FX#P*PM2.:jYG-sEn0(\WZ,H8J+pOUE&FFcsTU9FskF
%M)]2(=rk]$_VJ&6?h_?jZf37,^m+Fl_.^M)'#d$g#Qbs00u@`?"Ta-1O9r.N34lAV22*_)`A6tKRFXOY(6"qspS&!a:8O]t'&"K:
%%h*hF*FHm)e;XZ(BH?FA&B+V]OrQlkiM*"G?%'niF,,H/JubT=j%Cfa;m]pQ<iSKXTOFh3I3K-%>`C&>PemE?/Bq#q,kY&h.,'SE
%2$gTlAg9i&?(F7kb$QtI2$#B?a,$g@RLh?6mRV&b\IJYVN7)QD9R$a[BaDm-2+'Vg>0gdt.7BCti:ArkO$RXc#U"/?ieuA=P)9TQ
%B^[Z('`:g0FdFp!r4^fTcfJ;H:uXgf\Yp_"j0?S&+KGLR@((U.eT%?hTH;9!,iG0m90*n+/8NVd.0P3s7j+H0")LREA?lr3j1Yp*
%.YCZ==LZ>d0"W/]NT%59p=QI@"Z_kn@(pRKZ+s]CY/d>VZ;"P^K2q0<J0S*I1IB,9`fbu03sdQ+o@ZorKNXj'UgXh6K[NNp8T>O=
%<<]Ue%_8bMC-[inY6Y2NToSR,$1sptM'/]m5]S#F?WI"nF+eQp>"Ao;`--_6fE!2d*04o51rC>Qg$<W3b$s24R0jZ_pmIS+<!^d4
%WKF?<SM8H56n39uZ7C$&)#$SU*e6u@P;]^8!]5KQ+)#?9do7H8/[fMHG:c<9!5tbm.im6!!694EAjEX>&EJ*nT&]D\M6BT\EQ_r[
%le6@pMe+>&4kP5qH.:1daUO2(Z5Gs*cF0fnG]KO^_rhNPgXiPAJg)EN%!gV8fFujJa%8mub]6(Wct>Yd7-6L]BN[`S,h.pl/WJ79
%a>r.c`4YTG:'MqF#S^&W9PbF83227m;aOpS%bo&K=<dGSHrHYsC!D9%nIRt[faP1FA/l-$>-hM#]/DRaKmQ)&%Q+>S@tKaM3rfNI
%$]a_4,bhFkc5qcqdhG+aoIKWX5U1']RfF&]dm>%tE.jebeKHB^FBtN4j;fC7pIru]F%'G:*cRJnb&cj*64,$5k?qtV`Mj)5)C0YM
%Qd';tlEIUrZpFW-_I5u0\fsC5%aLu&JE2)^B2&q(ffmEK6Eq'fYsuWFFPA)<!gt'].gY`h>F6B7l[5L=h_s+Hn^o0;`kdgNqn\pc
%5T:<sP)a/MNWoe&$6pG)"@\c6DT8.q_BBn=:gcu4jMmteL$K$nGiW?Z\Hl+6@g<hU:dLbR/;L2iF9P-S0Q'D1#MRpFp(G@kDOBOj
%`=RX:\MQIaY:m,fmRb+/P:.QaPc1cfEg[G,bQ4e10c+CI&Z?f+8W%m3h-o4*(\o3kM;JoBJ-pGPD?/:LifF9tI=i]'_gDOpNV6,-
%],ElT3.PbB5S<(&4;tfq)YO>`ejq5N_MlEMF+&R:35RsQmh+/k1l*CWZ@^L>2NhSuFiAU+-&;\?1SA79;s7ts+9uJik4SDd<Vbtl
%a[on-\ju>4dF]pHqPm2C>r0Q4`^*.I3lie:aW"W$+=J3@,/csXGrf-G\5T?(^j9H<R=#8AhbTbs##7W0a:Z-]"H<ck'eEK(9iS?R
%@k8,@-u?$?0+D/#q5hB,V@).46OqPm,btHKj*RR_*"u)joSI$s)`Y!Q+a?^t\HHWJ)jS,qSqem'$k.2UGZ-0X>r6MsJM0:HJ\)"I
%Sa[KW'FIA`,jZus9O5ObO@IUVO4Fn0#'$300E>V(2Dl9IB]^5oJ4F"cLo@j$LLMqMM%\&[_/5he0nSB"p;+KfC.S%PdOB&W)@*X;
%(iDt)E4u`,>,[(iEs*_HR6:&c**@f,E3KhNPrHhG4!6<(4j`jNCo*V;YIGQc,5-P\8L]h%K-M.A:sc7^Y`'W^i.F38$+0bIYWClH
%JAinK?Pb"&6!\J76W$G`:j5a/qi8i8(gRG-@.G1ihrh_*q[O&m:[qd4F?Eg_;#FCkYI[*bgq0Y6fZ(aA24KP4ghnsa*?3gI:Zlf8
%TJ%=DW;nBMlJO#TQ8iG23`M1`#O3h5&a^:m@.4LToUTu>h(d%8!:uH+mFW7&2[pL&jur?"h24.NW&,E5OE)]lH>L7.Z/WJFU8Y?m
%-s]"O,TO_#X5ZD(::OEN/p&pi++1N[6O<V)_f8)PV_8Q(RNV`dlNmA;m\;OmoJ;bd7%f!6-Rj<l$m.L$HHs%.aLl<pLSp1LT8r0V
%:1&Q$V]UIEbb@,7D,m7g)@o-n:;@H#\KJl>^;W!ca'Lcc#Z-L,1oq+Z#VmuT0EDCtGSZDR2[<_'aNH^O6j&sE,NU4l'$(78jWRuo
%R:*lTg:#?s'ViQk,H(p-/hV&_$km[rE&\O9[<rI\+k0ma,mFOL65T5=YgKbnX'X6dC6YkU&L?-`<(i7f&dk:>pPKFN4EP..[-UJU
%GLeP>ZuG!<+bO,KdiXB@e"I$i!:dK;/;5cuL9Xj=pP-@eJ5@eVp>972OJ(s#,KQTBFEP;Z;*j3sARC&/"dB(KkR#58\8_f=DNI14
%&Dk8eoR(\PdFL_NX><i4d=L'W*tibJPFf48GOcU=ZS[Lt=rnNiVqo@0Z"3?lqI2FLX]SN3YlJcHnfnlBruRj"6k['-(@Nh\@f`?D
%bQT>9=OX#'.d^SFS]gFaEYQ_"$cY`F*u_C<faq[A.:Z`d5!%0_]@mN!-8$u+#=DLiYceXLRq/[3=Mb<"8-i=ncS=.(6#rbX_[,M]
%A66&RK;,n!0&kke,cqc47"?7%(F[94%$(3/j@!(7@N#jTZ#LXpD&F1PnV#!eIZmEt./`(\4U0mVTeb[3B"V\pHjPF$C/7KiUXW3Y
%ar@H$b:u80lAgh.73E^OYi>NUl7eQ#AtPFl04`^ResU]GNp:Xrgece(,-gGhEe2llT&;Y_jc/!t%QeM@?F*a#n<oXS5[BeZER-'f
%(B`(DLopf:(;,G=.6sBkL`F"8+e]4^^Z2*2KpO-`5r@M?1nNd<%[$o7/<=8,%b!ZKN<S0=YRJ1>e?s.:Z"/sP0epE/`pUmi/2LCE
%X%afSLkZm[Mb0:2(aAZIiF>g=[*G/?0i-I,;a^c8=@ar*_#U4""sO@T8f14Vf/T/9APgl4"<"e`<`/_qkJ4jD3f*ptKg\)cH>1rL
%$G,Xq00WQ1"<,'uP&_!KfC?NQCJtIVF,AT"o>`i%D9'seJgok)JN_nI0!c6?hHlqW"j5>+Y4F5gM/[4e,Bh&IQn>J]JD#WZjSGBm
%<K'4Dk>HlJ3KQD(9?j7%`@=Inh]\`q]bQ`t9j(bd<e<dp-la.#_fQ>'G9ES5G4'#l;ER6j*,X7\ri_1.&=J^?BQs\'A<_fe%fj'"
%M$n[T7jCDha,-`1aUHW[b1op>D;iE1?l'J+D<]X!`K$_Pc)A:&@YkhO'XQ*Y6''Gr6\1o0EPi*;(C#nYnp=bcfm"%K_)DqP4p^fq
%IO,R/Wl(qqh^!noqd:T:Pr(`T/I?6E0J86)#.0=3WB<"tE)9p>8n3+T!=*.FAr-e;g7kX/JM,f%N#ES..n11X>KUt*Q]0X[SJd3L
%ltDcXABW-r]RHa&!b2jkCP!J[b[TSLYT9_NJ:M\d!dSm7,UgX@$kZZoo/%bi#cNL_X0AQ<.-PH@E=I0J+]HmCD'i#nr':fWHR8t#
%855T%8V`KaI%DYf`^RTC%f$c:"^TH5naR0VT7AY2@iCFP6OjfpWA@LW!16Q`]0o@;2M%#-1JVeuR'q^OVcZc`M,S&:!24)o+NSWC
%-'F/rLI0N4X63`He3/(sK.to<Jafc&9#N$4UOgD$QW_&Lf,D4>j9"$ZO,hjmkM-K_f%&-2!0Cf+,$&NT-V"i;[YW3BHOD=1R%5pc
%6??hQ@g$5p#"d@2GJh?X3<]`I)@aXmDMXCGk]rrjN$.(^!Jo1tBJ[J<(3GQ(]7^#mKu@mbTaj*$hlhub;22e3*X_*dN?+4X/^f^<
%2u/j4?0>a*?)32\.-@6X+^k/A74AB``8W:0Oi5+%b[s."65`GZX:Jl;!Ki4l#"9nN1DB@g8<Sa<73H_J"Y/+>N><]lM!=BaBfL=9
%C3=N=+MtIN72Onql;5JE7:!a$6CFT81tIR!#n!ApTHIf&UgOQ`ZD2+[LuR#G%UHMu%5DMC<sOohFj:OF<YgZ./q4GYhn5*1[:cF4
%.F/#P)"F>RdcIl*.06:miaNK*S1&EKb'^HFTc3*b.)Y;J4tu7?bpu)EE2:SuM1f@7''G^=_l9;B?3MepW!jK:0o5::hU'US!T=PU
%emuqA-O1^aLk)3Xo/0hC#i9SO&Bs=g4UsV':kQ)EQ-j,1?C=iGarE!SA!)+s]a:kd*)-G_dmd0E]Pt(dKgAsno4CHQ9\E,9!k5?7
%D=euS.Z)+o&-XKt.^4s<$b%OQ<8C.u$tY/&.1;<u38n0n+D!2NW8,R0Zu@f+EW*S?$-L@c/M3mWT>^d-\"@5_XbJ8q.%OV%heEk!
%"";1*I"GfE&NEhC0J]Z'e)FiX;qD<;Jg#]s].O803?8=>Q8"7O$_Gd*!N+iA&g(O!N<X9n7i!q<M6SPRjj#!gq;)<WK\'!.Z>9S&
%I'#ebH2Cmj%rZZ+)Re.#[!U.$U?0c#21fpL\$U+t5WOh;l-0h7`iD5A)riGfPdD6mO-_jZ-3hkJ'^>:93P%Sg9=b<S[c[)Y0XOAI
%9NB"B&8hZn4pF(m$NO0[AP*Nd72lrE394cfLRqB53i`$\ehNicLs.;Q5"44^&hnopaO#s/%1b/"!F;7?KQ:`,VFs%V]6JS=VbROa
%5]bjVEd,0qn-DUJ4\IHQ1lKJ8giMn"b"]1g2$<.'oh[K7@!HBO9D9l2O1P4#Ga<<c%SoI+35YkBfc8'OLA8/Mq`fcnFA9JCK7cZt
%Zc"b3OG/:(81*t""^p7*U-h6ej-lEe=d25>RNfG6E7H]8LMd.+M:'*XJA5R-Z%I:0"N,37=Ee_q.'oMW>HefhpOW.aPbSF::#+q_
%0MEhUXbq8QnCaXV`b%R%k\35aLn]]?pXnI_YX^:]+^fWK@WJ*L"0V`%1]YbX-[uC7QXU;`U*^*9$hiOBp/#@(P36'^,T-osq8j*W
%U5QfX*#tLk?9P"!-k8Jm8ar[=DO@9l"r^%sFh*'`:8`#bq]EY9V)0D3lOFOIZP30,Tn1+Z&"QCWE0s77'0@]uN'$:\5^,`(\2$tc
%$Wj-G(Q7JEiCp*[*9rCqfDt?'@oFK0F;dRO1ls;6QWQbV-A*E8C)F.CHjmpYP^BH6SA"/c<]rM]-D4er2Ylu)Qg=t%@.2=[J/_]#
%ka>p+c,V>DNNP@:02@F20b&d(b;A9@*Tk.m$Gsm83+@JF78shAPg]9(08=^/BsqLSJQBY>&*1*JKYSlA0@Z6\RQ`$!:iK&Dcg6&?
%0oZ6`3\!CVqm[pnk7?VKTU2%`NA@:q-@eO)d_^]gm<(j@YJPda^j,<dgHl_A(c(U*37u9!,'l?hSl]pq.K4dn`4]YlLr]phoJ-<,
%YN8VH+T_HWM5Q-9"Mu"DO!+pqDN&Zh<-q.O'P3&"qtu2.5SWk,TH(\eTroAp,W!rW\Z6lPSUh\rSJp35>R?"09FKu%E!ul,J>\Hp
%9RN\>\ZD_A,_ujNkMmNR6"D@`K,AIgFlMX`ef*tXL3K\3\G<;PWL$&.C@qMPa+Q;hr##R09+E)2?dTM-U.-1g=>#N7(m"l(j%qkP
%S7WGP#K]ch=s)rK/SKYo@7mAWYF0A,!/d,BYV!TW;$m<r,gu:,?ei<h?lr99"a3>j9K>eV3-r-sK5*;,c"+cV^)JG-Mpcgg',?rO
%1DirHqC[Nm5dOq=!h^cCZ)dJs=%%X\Sd7^j)EHSO7qA;:DhqI%6T05lCk=tVlQ?ab3`]Lao+nVpJl!D-61O2'58X$!+Uern=B$T`
%of3CSCd6fUim-h&T\tHEp'pOGOWO#MfPSMqA7sAZj"Ri#GUUKF)IDIqqL"<idT^u(jO59/=Z)8H+*#,=X+Kg'>tXk\0g?IWHjI"k
%e5[?W2oBj_Qjco+-l&JLlO!u.,D^AOpbj%#N!L%.Ctn#T/Ar.0aqn,G<9aOP!728`Lu\[]T>BZj+RJ?IGr/qsHsGU.=mQJ`R54oU
%6?9nE/mh!)ZPIqMThL=S^+FNQOdh&>-).gZ<GB)hLn9PJ70p:p3f=G<g6430S$#^^bFh3p.<!:nF?@Au+f;AFIQs4T8sJAM+kU+Q
%3K+I!(i"OfBK")E+^kO43naY$d1=:<'9l>8j*3g2,+B-G("9)eNnA*4]G(#C42X%^9B;!#HO]M\8;2[:!+(7VWKaIPd-FJRaD]]S
%gn=uC4sj(XI&d@=@#O>:A2dY<K8a]Vj&@_T6._Gp@8aWH+k[/m*#J?A'6i:S4ohe,Tm1ot+][3(JH268H=D,)54L!3&Xq%.@&9P5
%?*)6.4S>kJjqU!)Taj-il>RfZ/lUpJ+IY5m@+[/",91S$hhh37ipADUq.Z?c?5IQHXD"k;L)(FE3,KQPb.]MeWXiokiF>!C6UQ)O
%W'=kA&McE1/'";r1YWVnoXp8I'I[RaqttWQV\DEG!pL`#K]5>o&2ChN+B(Cfe+lJdV`GH^\/(tN,s3.=GrXIfF!p2p^giNF6mec/
%q,jMF'+G(tC]I/--S&=X6`e5d22;je<KJtM"JnUG3!3uD9'!UY!/tNsn\qXBZ<.:IQ.OAHiWM"sHl53$*^3lG3[-`1^o.@X8PG`I
%8Y'8S,<>kE(_go9`TaY@KmSTUnjH\A;b^fp`kel+h'+G/2k$UUpOdmbh^]LsX%TX$:f_jPJMJ(L1>/KhN<[-jk#'Ku&SWIJB:q$8
%Aq@ttO/>Hr+%k&sOA(BTd_dNi)6'taK3H"9Pka=p&D@ic8j#?]:Ba(_MO.T=)VPhElAIJ(3E--EEt\.8:kR.q7RIs-)cgNN$)2.q
%ihCT.?K#Q"W(t\P6@2k:dgM(:TM9<][n;d4M)^@a"r1l^[3N7,G;8?5'pA^l%H^;-F#6AUnrL:OBN$#1#?/LF$AF%AdNc>XROt;P
%&XX1eI4H"];H&3p@_&di"K+1M[ab'h6]l*DG$%CmUPc3!W>l"X71l`p/b.38j<kXiE"(9Zk9IN+F3*Ra><lJ&+p#]-&`QrlO1?m-
%IZ?2)(0Q3afI43c#/tO5^M<L3p3I^9%Z\H>ko63>2oY4j6-'uXLUpooNY>$R#g2lKibWabj(m?-&jeQB"JrS;FFc`?%UH(E.VOD_
%<`K*VDa^h&$/^7/'TqHI+QhIPhhd5PU^G+3YtP2/U,G#^+c)Wr6`C"rl=!!_V1@NDoWD!oL"!%eNs._-`r7DV9K`JO2J$&bk?8b?
%Vr;9X\2,'#9pg.CQPful3MP56-JsG`@[0MfV%M$^P[.gb%Um9^85Tf*d;'X/#l9ok;NF0s&SIk0J7jbt35u)KWYjgO$:q[\SjbRB
%@70N+:#EA/i=qB@Q]=4\\nleo_hhV*F^>*3+UG?gY[N2S38=MJ'+DUBG]&nDK,<(8YjN';l'RV#d+'O`4G%\)((LUL:te1>\6oF'
%`$$@Ym8+;q\J4t:jA_@c*`[M3&DApB"4+k9@EJic6.cuH.Ii4&6c0O.J=JS/g.);qo.!QnbG_UhLP,ECAD/K]MUF,a@LT$kIcJ<Y
%H81=KBJ,_k#biR5.$#EJUE+*qjq?g?EZm$YRui4YJg(HQ#)cc_$&bD6\7iR498j.6m])0uC^"<O%],LO/r.N+Ce8Yj^Buep[?)C6
%Z<(\2:'"fe#N;YFf1m'LI%W%%m3P&9M(9#M8n!)fmi^50q7*F8N)^1;9BTe*(JhQ,<bTK%@%Ad(=am<"9OYr7*]'YdK["HF>s;\j
%,*:6Kj@U?_DO92mpVBG!M'<5085Bej:ZWIi@iU&:9U"Ja5!C<Y;Cp-.71G1A5#RP[*/]"i%c%3]5Qm*D+qYMrOo%I'ibb.-0asFC
%F+hE8_oEuO'Q$ZikqEd;T6Nh%QRjeNBa]Pn]!qj=G>0fj6dJ'.K$t:nrr(j0UU4`7[jW+&N1&8W:n+p4;giHqn,)p?L5,V>Lp17m
%,)3Hm`hCgWHH+*H&P1,=I3Y]2GKpKR;FUqd<,Vp(pdTrqL163(SsQcE&5(Ua72?E(fSF8&F:h4[K>Kt]U6i1n-5&_I#uM0O.N@Dh
%aDf31:=+1(g+['1&PH#6Bfu[O1nCu)if4WT$aHF>*uG]AB[C21%M^&Y9eeK0P/]NVE@BAX,NkKc]ZiV_n?">rPY`N<oTGi0m4eS\
%K;(?57BoHAgf\]lkbYT-E@>,%q6XC!jsB8F02<rp76k^qG3K`$VTMf1(qL6"k\W)r8rqh.P1$SRXYHEV"d0M)mFUP^1Q`U;\77VC
%SbI+\9bO'$$,('CJ71fD]Of'u*3?`I5a4hb+MLk-4]5X'/N\t@MlTP:M#%^j?8tC`dsVg#G:3/$gnRpnpctAWa&0X)?F`ubP:Jh)
%&;Cg21n1\RM@'d8S;D=,BE2'-E\S>\2oIF!VQj(qQm-mG+rq7?4@3mS5S.s`%?EecP:S?Y+Umnb"*fXN3atpG),Q+o0/9GP<?KlB
%fT7Em`d6&So7=mr0B-AeL+16pQO1+IgZ9qd*a0@_p(YSjV4JO@H4uC\VC+![OB=)SV6*'9IP9nn-5YcCcqA_F85g>8+<cQ>`"_<g
%P_PKKi>rH+JAf+M2hHoRSa(0=Bl1oR'd+^eBS!I_Jqb7_&Dp(9<Vj#b'rlSm9<YBm39m_sU).F[%m]BQMbDBt@GqLOkA`,?M*UMM
%6$*Xt@dP#)h$:UBo3(`bI0p@q7U',EObl>-K]RN5R41DRf9>=?U5#6cF8s1B'*Y+*X$A9!?lTUY,<Cui",;Is1bDb]Z!C\@+lo?_
%coWDX7R^W!QD_Td1l)4bBgIiuV-5)d)7AHnKeHX>iahSP1'T&"0l$'3pG4&04shr:;F(_]lNB0\j:a\eULP&W@1#ik;FFhng'fcu
%4?=>77pL*@.J%[7q$Uq!7jL>hK7sjkV][5c'\1g"YoHX*2k!Z3W+WWKY[)p4*,GW$8R@:K4"f@o3p`6b<NtrM4$Z:Q#H%'X004Fd
%"`Y0CI6c,OYp_3Jj[\>48p;2</4KXN,(-sbG4A.hDpeXn`qT,h\3,3pj16:M$8N35($7HJq1=RF07cJ%ooh&HU5!o$N[Yr-(1ik$
%&9Ytu.$E/#/=ZQ@6jbTMPr[raELIONf3k+2Xsek%[5lQ,*%rM3;=tQT(ufs&,0tE@$m06=#YIbZ$lLSVqa_eg?[%3<&43-*/Ik#/
%8['VWk+pPf26r%jX&*g+N,Rf_W_2SdSM*s!Y\+s8Pn5*^D0h'S2=j6j<>d:g).Dl:Kj%^g>o=+#MD7[tR8nj;Dn*BW@>%!-g]4Vn
%e=;bS5dtL<36^0O>?Y<#U?PJ;>SU6efh]&d+K'T)8t$\"p*kW`,803*:nG7Cr5^a/'e!\f$(X="Nic1'LjWrhdT\]<<\[sH\-9DJ
%PrONm&/Tdpl=0-R&]XAMGp]KX1mdutX8'7]9SCX30j=r-N\rgDTXMb]<JhZ'Ytdt+<^G-/+V9hG.?I2t&^+"6+]\XQBB?c\+k5>P
%m"L01b,@3\$ma<&64289T#PVh3/c0r0.[o$<X_!H^s%nXScGs'<I$KXn1c7RHE5)[q"t+K(m[,=b<ZqO'N'Ak;!%nE&0sZG8`^JX
%L+#h\-T7Ir'(]".#t8U&>NTTY,V-HQN91R8F9$?48jeG)1u'4fP>$qSH@FFq?4F_7]iF!K?mH2mHsC0Qkm&,%GVN!Tkip8D*efAT
%_3Q!&;Q"_KF:3`gD"56bj)B\7aqkhb/j>mPPaoq#`%`89'8eopfJ:DR517MOYhHK0#ki@&H)DpWTq0JIoC9hUW*TKRP=AA9j,8.3
%[n<"G*gR/Rb^<u&N+3b'+:u(]]^%JoPnYj<Y-J@EF'g:(M\*'_3S*PCdO(iP4:%98JpL1V-g>$+O]0snk9'tfCXsY!4UH#V_P`nF
%^%SGGJIY2aW,NBu!krltRg7_&h(^)Zm@l25hhKB\Glo(H'nLU)5qi@RM!"l_@!GJ*iK@kL!MQ+Dd_]VTqP1=lnXLkgb+uI:+kBXI
%7^8r4@?Gbm@ph\QmJt`LFd@qP%roR$r87lOk7PdBTL,!7k`sj>R],=:MA:u>"?o$t(1rZ/$f_gDU?H5uZAr_k91b7oJkRJj'M8qA
%)W!dN1I0V)A)uD]56OD&Xam-K'qia,KcW8,,\[iF12N_"/M2!bYV7Uk&B!-'IDUmlL,kb?UeCVC=h=p2cXAGENj87GZ%%'d?W:F)
%b6dj_GSnuHQNWi&D"U0U<mHf5ScG*<VCWjD+`^<@<!=c"#Y5$&I_r-4FJWZo3#tVCBHns2k,Sr"f0kn_E&\"HjqTe6KXtF$9HDF=
%S,mb=0.\oP/hh)YTb.bnJF<V8@)q;r$$_[=f1<dl@e,gU@i?pSouWY!4r^<IOHX$_WDTZe/8As(>S3#.a'8XHe7Al'5pn3PiF,AY
%5fRe<?+1O[EK"'56Su^_2R:Ogjgh<4AR5Q*nMML*:n^MIp_".=b:D%&,28$AXGMO4R%hLP'Q7eF;&#$(,]MAFV\)t6^f)#VB.XUU
%(KI-3LXf-KFbROIK'AXX'fCT_R18J.asofs^mLfD^M=E&/&mCa<TCkl:OlG"CJWG"'/)`<EN&XB*e+qJ7CcU/5!BEY7*$&KUq!Pd
%M]Ye`N0)_i3g]u+hP7#GQfHoeE'>XsWq-Q/d>_D&Co3jJ#91U(Jo"&E?OWP_Caf1f0!9mZe)s+.b)N-2+l.?&;1lTT&R>dD.6HLj
%:m`[Gh?l^I5N)d*ROAm+$:PEcF\e5L'LAHR,FHObMCsV"/0SS",tj&p%*Q-%PU0(nba/j(l$Aa]k<M3lAQ^0t,<o@Vh6)[F\FSW(
%Jl7FqM_E.C4aUFMc3eUp'I^]h(MUk&-/\-B!Q#qsLdCpj'`BXs1`2hjcs*"aPJ'V-=ud'@*0LS"p+q25"&g/`YSaAnMD%Cpg^-b]
%kmsJ^8`'-=WDP-Ej>'/*.:L4pFQ]Bq7R`Y"8jdlX'+LjiU(emg.WUs,iC(\L3cC6$V(PS&<7$`E%H9H8l^A0XOqIc<T'qii]#K+/
%WeO!HpuubuI`%/P)M#bmNUSFP[OB*-]mG.[S<FcEgt<:CSmlo6%/.Y_.&n6#P:*8^YILjBVXo"91&ah,%PdpJ1<X?.oL'<*:q5Rr
%[!kX1eV1mL@#OT4n<Fnn6_N%uS3a+G`o*sDhVcbL$pq`g7IE4N&pBg*.,$bj2gG^O-PK4-feY[5pI*0jYc[r-#;+B1D,JoTau%J'
%!g0*l=>''3bosP5b`Fo^FP$>?:[AXBqi'*$"Y9)p\Zi[I1M,][]K8Z,.bppqUk%NPeBVOf,""J_#N'eFr'DN2:C%oXI$/D=>XLo^
%I,>3&fY[ZX+q#0)`eimK2rS<Co]8OQWtA/j#@0sG-e#qq!$R`P*RL\hMmDCJV:3fO!\8YMJl`g.J">4'qcFQ?3%Q[.MTK]LSVk=)
%g*daHZNVag(fs6s[-7SDk#O1Pn+0BD:Pa+\]$$6cGS<YE9^,Z%EWY__;\Uj@\pO?4UU"!ca7id0-dUf>@F7Z4/Oh>B*KTmE`+'Tp
%*rH#"B^,')Y$pMdqmhbG;V]Z.<8R0K<HqVNJ=cPq"dq$P=+DtX?0kA>gD<XIjT]F0VW#tf_b;>+4o.'n$H'a5oYN9<h%JU&;J(eo
%iI[f\Ep;@@S-\SZ@7*uYJg/hijqC^(R$k'REWYC[UQJ%Wf3L#r_q1BF^Op6lr.u<(aRlFJJ_YGU5oG=:@5P\8(!TSDe$o&?[Y\c1
%6m+K=FcE%0CJO_$KFG&JV5?qD`>HL*l_aHu,so_p_Y&dq-<R"*asA02F8uRjB/M&W<_\$EO7bRDq$]Th4>6hQ._2GOI<XH<j'[hs
%OKXL"#$P\SqOAi9:m8ZfJZ$:*gV@T%&#I:-K:.7MZ[?JAdY0S,qaEbtc@oV4a'GSU=ENS=d*jbO'ZlbI&jut5F/WDZ-VdDW/Hgo5
%bNqAbTZQ*EM$?=O?]3/X+Oi,NRr"s0-&3C(FHQujbW+3_6Df[8\p,X`F%n,XT$XI,M+h-OFZD!MFJ#U!0HZ+X=0;YddM!#$CI2cE
%(_toECHW]][o7L"YD`.$Sgu=#@<OVAV:&?`5$A/X,9LT,IP_6WC%6SOC%B18Z?W#+;S30krGibm;g`eTVC'WFShAJ4$f?g#j-X)A
%AL'7\8]\9Ma:b=8=P`Y$%Im_A7%]?od^#gs!jNOsbHS[PKQ=q28.NW8nN,3^<O+:_c-Mn;3+4F\AVeDN_^mi,"(.L#in,YT9cfEc
%\IH&E)EpJsQm:[\5rGt3[`C@O,NqJ+/?"J6T=aa_?IJH?@`"BhQ4t(/V:.LbQDpQm1M&!BS;H)11!JQK@uYP"LLEA<:("&6iI)h_
%,d'T`X1R?`QS7XPM<\tXj4#s:ibfgNZ1VWf0j39@mqF1RTbM^gRi9JF)I'MY)qO>NCt_'VQJas/5UlW&0Il<*Pj[2a?qmpTIK[H+
%e?XCF\S-h/C9jo^eqtWQ^^*IM&aSo,MIs/q*o9r_KTi@7LOE_J<iN+^dAKZpCW!H(T)<X"Y`57X)hf$]E$$L%U&KgNZH].jBO%.R
%$Q&'t1K:2])_Toe,UnMVlL9<Q`3%Oh6Pt5O;lNbeh0!G/Ksg2b-@.eWe>f:u6\dX"e>f:?$U.C%e^8fOcV'V4l4?Enk[BkY,A]cu
%*'=h?<;;9<:rZ#D8,u#(c&&\<Q\c:8EYVn)\E8nZ%[dWR-9lX1\;BKZd&2$GlkI9oI;o*dXJn:0%+PlT*!L;J'=/FF!hdn^$<'e.
%$W5A=@4Ebq+Z+2[<<+k+;%5\J/$=E]\n3$od/nt?&TSZbd9n&<k[@/L[qJ',\LYs1["J!J22/[+(c8l9;qR"/06O82?Za#Ve6C"%
%%-3#2+c"GNZB0dW@K74<;ME/9@;,Cg9L_"g='4He7L)SiE"t9@+PnCSh1^\@R`?K\-E!D@LIaUM.;DRc"q();`I[jkUG63sjbGd.
%"=bY7(h:Aa`t2Z5<lM6>Q6<t:cKc_[@CM#$";J$&B/Bq`B/H]i,b>In3;eK,I^g.W%X1'b$-]G+3#[TJ/d@7?'p$ZXn#sW$TU(fE
%(tR;M,u@`i`^T!%i0a/)2\F)P_TQ$?.2eYmbVW"d@j"o-Zk^Fl*'B1:n<kf,?IF/`ZON)Dpp-,oY&*MN:p*``&K4?+k78ZmiXO@n
%pl&S,d[=#p4HVgWs-&"M#?.<Z?_X`NG/S%k2%cG*0Ee$D+ufi9UF\nRJMSAR$gGsaF=quAJ53qi"f(Smiu!NS^4pOC,T.&0Q#)`d
%8<LCdg3"s0aBsJJ.$KOA!'ZgV32V]020bHUEfTIj'<TISi?Z*Y.Rc]L;b^X4eGQD>Bq;AAHMC+QK-1+Kp_3-ONfrm\:.*SC,6p,5
%Q-n2/qr"Dd=nk#:[4AG@U3UikU+A&@Xj/U`P]<cIWR)G<n`B"FON"G,PN11Cd>oT%6Q/7Vp>GdK*cIQrNl"%S?mk5(%loV@YZgg9
%:hBf6'8MUY"V-='*EsF%[NV"%E\T1!d,f9r(E$*(`)oo-gs7tT*<tkipN(-[+G^Eq>$,rH&:pa(?FZgin$BoMX;N@BIc7UMdhMt@
%Rn&Ip[E6S#plQ+;:s#6od/%`^*ZH"'oNZr5rsnr_>c+8$kRB56Y0i$$<#.i_DNS=b=:Dg*e_SP\^A,EKN5[JYB2e?[LrD%`J9P/p
%/10?S/;B:Z0]oRC=<*>k_ibhnJ;S+&&W?HGh_E/r%)['u`:rj?#076oYn\=tQnZS9'cqu>W5M4kO5^$SgG0q5@??[?4bIB%@2?a'
%'gBk/B/0<`N_UnJ6PdQY&<5IIKuL8!N[:_..m/R>nLc\ZR#IWM\T&\^Z2UWb%Ib2u:GTRH-H#1oN_:fp7dnN:I=TFeI"4e+R)3A>
%'NY+h*_\6fO&`2;=-Qj0F;]^jTGBcg_^\lbDD$Z91%^2<%PE6jflk7m&k1&^:D?[E(QTF3j;JLLI<ufhBqjG.T6CJs5ag7b:4a$R
%/DoC,3dnS11Ps^FUaO_m)'T8C9p+.^bDXkQ"SOEBpYr]n,t`P`q4ahUDZn[sWd.^:#V3miQ:uCr=);o%c1/<.(L=M,@D))&W;'(K
%UkV&mQ)q3#A-Q!4BGeD4dg`W*MI1fhV3@pQ,=Ha(Z!)p;]VAH"G`8.KMq?T*3D>!uq"$ot3\!@&fgDFl$Y:YR\1eojlb5p(UM"Cj
%&`W'_23g1_c*[6ZD(_/<^lu2a?[cSrbr(3D,`&D@jKhi*L;ZY42DL"Cm;FY_N:5Qtk!eHrM=ihB9k23Y't#o]Kgoe^GsZs\app9@
%@Vj]%B(DX*1me=WZ\l@E!OY>;]5TJ%jrG13NolS!1:*?M>hC_s+WP;0f1@<H>N.`eQpsQj5NR_@@L8Do`oW#\MQ/<o4$ZbrIJL42
%<43m>#t32Jmj]lqU%(;V$O.5@,D[maI!i^r*W+!gfpM0NV?D=-$K";2)_R1^3\H-/X^GLZWEmE$Z<&`nS-jf,QO-2/dCf*PdBFla
%',`S#8HVT*a`/=.!QC+nMGb5b5#aYY*Y(%qd5q[-l*XS$C5[CnY$m7L+8ch;l&!_>d$)m$7karJ_Q(u\/fVR#M8"1>Pl2bd&o7DD
%3/T3eafdU!gl/\hic@"<1T;oaNGDb?ZQckcQY"8mWeqb576%9MYa]WB`9/$-C56]k&B%f7K4_S4l>!o!W0ntaAt4Khf=Ng(+.oNW
%*cJbDN]r9e"Of]r,e5fF5,Y51VGaRf-9eOM6E,>AIl0YYJPna4+&BPq<M1['VG`.9f+dZZQ$FY]qdLRBcCt[cU)%<`%YmtJb.J<C
%>[TBnLrLRO^Rnou9aBL<iT"OmJYM-iprtA-;5!QP0RConQtQ]c#=]hsb7'a55QheY0]J@T1*"#:`!E_*Y6<7Mg7j1pda44#6]-U+
%60c)i<%]jC/js1\h[*2^-Z!!DNC6Bf4V#IjGZ<YAP94?M"h$,,'D'nVr)<eLF4gSCbG-s1?[kt/<+'`ilE5Xhrk=.K,hBVKc.M(Y
%<9EAUEga5,MPM51#iZMj?-6U'FCDu5#FXmtYbCZ$Ha/lgE%\C,-U0c1(V]Na]*MFQcb;9SO#=mH6adjS;LusCbP^9\"M=U!1Nc7E
%iU<59ZV+Dg$[0UF7SOU[jcDiKT-,<;-'NEc>lM6H4UsA<D?W1`iJ_a"nY7j3iNn.B-Jg:m,rW.[en-VlfSBl.:1!'!*[01snd"HA
%ROge(bV!>rl60DFfM][dN]715#uECG/"5Nu$:EET:qAEkp]XYG-4Kn?#1_23FVRm<1k'U=Pa;*76ZeUr7Na^4R3/\)W5FsBl?MO<
%T`_%5/4!irX;8s7Y[rK\*,lJP#nepU!ANp?%9B-ldGWD2i\X`X2p0F&'NtViZT2JnoaRas+Ti"tLaqWgoCb(*QKub\hV<Y]6OgX4
%og8Qf.1I4"oI'_NqbA(:(nRPN*o-d64_k3MmbBkt_Eaqp^qm!M>7rCT,8d[p`U\a"3+j<?f/k1XM&s_6n:?;T1>7$RFS9>'n\*[A
%@mWQpKr%?%0##'9<_:(:.+SGI`fI0VS4%"Zgt8O2B-LBhr3QY]n\3rh`M;J\$lB$QY(62*]R-]ih%(U[VlcS)k5=>hR<ci.IfJI8
%ndJP1@RKn3i\Gg`b6s2TM`%l(jjWR#U$t6o>3@2.g_'`NQJ7O\SAOQPk7/n8(@kb559,pkmb?REqV25p%D6U<]CFb8T/`ujj%Lli
%H9K;g/`jEk]GKnBdLkkG/!S`CrCV"4\;%hJ1YBBS<8Z"17.91R\g-6Ja<p^r2/flfpELJn2!r$1h1<%qra\h->(`#4H^&%9q?FRU
%O5k^BL.0dU,*kR!O_6]t;nJ)Mj=e:/o]/(!o7dWPVR'feYAmQ:_n>HjU4UqdliDN(6p=e"s75U%IE2)2s$QiQ&gegY;$Mm@r7<m;
%R0%-'J5_SW#X#)Ef6fXqb^I,4SK1boqGU:FO)MM?Z$?+XO;S7][(>LMpFXjM\LgSfluNa4US7EXmge0_I-^ZjZAak6GeB's"WkRa
%N&l@\i10&'YN*,^-MI:7b"%A/ESk_deo?)TpSb^mG`U/Ii@b:Y2Y6q0h3n/#n,<6BEEkGfGQ'LZDfcK"6Kh#or-N+CTqh68La=QV
%Nn7X(aDG:%32(I#hrl%tbPgS-]UuhHi2)G)QZlNn%H%$[K,+PTTTC:7PPTPK?*l&&2,I;ba=aT9?LP[PJoC!8D[tZVmXE!q%ET5,
%QFf8)5bF?]X\/W)Is<!"I5&BR[m9Pq$TK'7ghl]DTu0*&15Peo??FYhoN$<P`D)Tk'(L\90F<&VP`ogah25eljkP&A,Q>&4G!MZ8
%Zo'**r`oli\bfttZ9EB)GO*8nmOl0Fod>N1O0GBojUi>Mak\cdmKW#5aB"8g;6]HlgTP*d=Xka'S=C8"h@c[7X?erj5+m/6eRbuQ
%*sPI>^>B:R:L;FG<:@QWkfQ8jIq$J?OZSJLRLju@S)&\a0O_X57;uOA;1uLaC,>AS![#_D>479=(n+mVZNm:me#!bnr*a^[q>5Uk
%F?b%>h8JDmUE^:TrkX_$7RF,,hPteroaS'$[WK*Q<I.f:\0QB=UQA\foJ7L?'tjI-!*MBjn$lh"Z.0$'g%@=k46FV^?(X86Y$RPW
%J%B`7hXR<&5;7OB2),X39iA4^^:qG>25HI@T?I[8O]SYG&@npiBB5X#P=P(KFpRfF2nYi/FM+52H(ZMYEkgpkEe?#@*meQ\s$n$s
%?f$4An+bc,+7tZF6&X<8H`/1Ve8h[.6&F[CCa1*ekkYYJ>6*qX\&3$Tj`VU+J:.?"Si`T@X'k9_V(_9ZDNU?3hsQ6Mk:Yt3i-i5j
%NVEGOJ85Sm5ud?d*eFCUQh<t6(]AoR?/gHoaf1+I<%Ks,kmoPrh/<8cG("&Wgs>AsQ;*>_A]sOW<:d`j[Qr#G(Nd%Q^>%kiHZ/q6
%)6YoCDgi_1"'pX)3b4*U/l8t"jQh%BXoc=tranLs3c"kD*No,Ik9q<o>EIsG$Ta`#hedPr]sg3e>,cO8&F4JG%WiSAS=*^_NgaC$
%@2H;+R-/Ln_s(^t6][XDFq:bQGB3o4].MD#fEG:8mTY\5^\@=)N<=2<MaO1*"omm'<q5_,Co,3eU^ei?\Q[0)PHTARNa^JV9Wa"4
%FqJ:$PF$!g+($$O,M#]?f_<^h+ujip(f4W,4MG7%b7"U&@DIsLoEMj9.!a`K:s:lMnJ&"p5c0;-ZQ3Ad*J,[cP][adXUVMOc,JW6
%Tru-O(:nT*6&54>-@;YGB%Hh-jjghI:LE,-%n&e=9_^u?#g13>/$/RnB^FhB'+%8Djr@`SY]C$bUl$BF\+?LIWoc./H-6@1:Y4\9
%N4.MMp;XTg`)16(/l*SAVaEJ>U%_?LIZ@Vro_g055^c[C%4RSr&(fqFl2d&Xl6J!I6'ja=5_milrkQYo+=3";n]_dp)jt_mBdb";
%+]N,ABs7d3M$+NE7B`)B.s)E^#eHJ!;i'&j<#P@\L49<_]i`kLEB2l:+mqmd=c!S`oYY\D6fi4RbP/PUOESa1^C`fCk7I[*;$7j`
%j;iI!.3/"rH)Q9YhXR>Z`]gJh[iO0famU3&E2)AuIfm_M@3J4>]T+Z>re5i0f0b*EC=8ZMDLB-j/VWm9]N`pt6ONOKr%.bEE=4,c
%)01B')U.*dak#%Th9^C_(_Qr<+_!V'L/nPtbiPf+qXcrlc'pq&\i0!MhV5gA8l\/TWnAs^.a:OW>4oV&pT=RS^]scImH;^M=OD"i
%mrCL9WhNYfYlfhBXpM3(n$Kj\[bbkPQH.kGh7e0H],0@Oqq%1HIqP/F:XYkbqk'!O'-I*TF-"`oLP-r\^A\QlLY@o%.U<NgCrI%,
%e1hRqDE-B&Zef`g-C_/6+.+Z."jWS"pJ3)/lGSF&b6;+BI`$@smp"WhHLLa=+T;&L2hWRM9n?7p$'Fom)*(_s2&c2$H];#+ap"Lb
%:diK.Zp`<1qf]V[<J\8Z4!5-PVRY:W_iS>0DRVmSF)Q.Yn@m`F`d<48lMJM&,!(7<qGQO9SW[8uhWo^^:ur7$/63$^+:9,!+fbbu
%-Anu#X63;j]H9;@:Feu-i>e=OV1)\+gWM0MCjGdWcXnf=S@s43pg8HUl.:F^?VI!]g,*VnTXIH"WHI!V&<NEd`U@%o(?K]e`8;D0
%070K@hl+a>A_l0d7,!;o@=@pdF?0$,6sIEUH5VE6>k5VjJh7L?d(>_?*UiF/p\_3I^t8F0rq\;Jp"-tWO4XF3GFP:qh`k-EXRT'I
%c"j"b5XC=WWf8HMSV"o!?$#B$=!'HgCgOUf(kp7tr^=InY5]*X69>m%:^4(F,`%JL_hk0I"`Z.Sfe)6VHEL)S<r(j"kWked'\OOa
%'">SWM0dTSi^eOPX\$?!6I.JA%:.A&-M3EJ-M;5nWe?J:o1KNQbVL`%-=m^dlnD4:8%BVL9C[Xf9M#^g.8D8,?Bu;Op(!p=PE-"J
%&-=M-^^;//l.A%ND2TDrPu4@8_Q&kts#be1^TS`\7eXp\9bt'G4><4D#m;d_&QY::$F?i"I!&j@+T\^WL/\L6EY*\j3\>Bq3YHP8
%j+'8*BO<MQ,^.<B=WN*j7*]!t9'"@eToB7g%e;NbZZQ"'*<p.IiTa+>&cqE^K&I5gs$8D16[d-]+<5>uA6RlpL=Sn=,^DM;rrBL]
%b*[J@\Q3<-+??I$XtXke*9Fo8<M=l*]f,2G%e(BLs6AF>Qj4[tlXB[iQX=)R,XY&lW/]QhHY^)@jdMSV'*U'g%tp:NoUZHESS"hr
%U@`Gu)PR;bDAD&O8(>:&2``5]0.?_MYX#-,7%ok\Xb0s,4FJh1%>!"(g]8k0G;XpP5!bp<>(-*-`77tZia2@H)<2@Jh"dC2gYH@f
%gJu:Egg5Yp%s9!%&9E`bUbfAV_C1)_");%\k+K@b?DW*0r)$c*-77E`W/-s?4).N!?cj@l0NmR0;1C]ha<+Mm#^0]&X5e6DM6C;7
%ndV0iF$93&j?VR]8D:p]q?$B,3#K-!1ilTIpjD.Q9TcRjF86i]q0fs0$Jc4ud*]B#DPI:E*W<P!,a1qOBk#5(js[*nTdm[a.Tmlk
%ch^,M*GT-$o(b#PLF,Kugu9iScsA9sXX#HgG5_a9f'[YNN4rk6ig8+?_-^TW6hPUglWmDqc*=pS3#5sOB<km_47=XG@rKYP[c=Ss
%*[jH+:K<l[Zbl>;pTrNb!]Z*"n)s,X2H/+(dO[I+r"*SbB+AkLNnk8XopL;qbAtYmi3NO)OJL59#s?D=#FXE%k@fd=c?@>419@W)
%3XSA1&5&\lV0qOq9/e5)/WZQnV">U>LpC!H9@jrk"m>)Qk8C&a4g.::-s@g3Vd0q+Y-p+%7a.%ULq[U7NJ;VaAXIm)8k*KO3cE3O
%74lbMLPN_DpXc+?U6g24+snV<6bEdGIQOClr>m?)+ME`Ej\hsUlr)G*s&YM(&t_F%\BOb:.LHQ*g3`O6.>:X43K?VbaPDkrj_1h=
%3hO43_['W'EC4YmrB\=*Y+$,+G03o'=#Cb^4f&51Ee/*smN,AT6/;G"!1](:HPB9Z3i+IM!*)RQY&>c3FR;HN,B"g1RCCqtY[4Iq
%mdo5eUHll&;P5"bcB*!OU!7_b?S4dV/Z/8e"L@F]enU"4T(f'SM\D]qY+WBRk7R#Fea9<j\Y3gD/*l[P4ig1"$L's^j-qHd]Y8f)
%/i9S9V9m/K-k'&9711.%V[@)^`_qTUYR2i-'+@9G=ft_<ndWXOJI\5KeFo,d%2$qQdcK33C9h*VViVIFrhn4Qg7qDb5c@OW+3GR(
%>oU)O/^!$)&!9"d0)e[`>cqAd]T:B,h+5Y,Ve_c?VrTpd=1r'HU1fBiP[]Zcl%q;4-;1;$bYd2:M#McaNqFKuR.dIbW#k6"oAq$n
%N/u-7qX#h1Fb9=5/`Q!fi?_1Vm0k&4AJ=eXak[>h]N0ElG4U$e53.H1;snGi9Uk,e<:a'@LV"uoo[_p7\lpiOG#*6_WY&WIEk6E-
%CSZt?/$t!Wds\?u0fs'fjRi7k=$_g]a=oC9:L0Wl^AWBBOAfGVEC7&Yj3l?7:Ck0a"Ec)j+MK\nL>I7RZYR=U(J$nqY*,t)oLMHh
%<4#)jJWsV86O\Gt0uI#?2U*utE`+,l^acEb"dQ511t@9'Nl@3C,;fF\a9]ba/8b?]bSsiFW`:`-5n@[cPE()_d-V+Je*dqgWB<7]
%BXM.)aWC>XCgJRXYQg3YPYe4N3'X0)]:`:!daUl'C/o5Q98N.b6eYUDVk?2N'!&,M;/@mh'r:OY'oEb@e`0I^lCjj3qTp&r05*FJ
%gNa;iYGNGUFjk5MDc%NAB]RJ(:p78L;jAo,Wbj*G@::B?)'R*qVP?DVHc\a.qGMA*fpYJ1IGpc'[I5mmWNihJh8'TGaAj`^cqq<T
%/.NHdM#1B%2,)BAkP9?(P#1/GdgQPP/m#4#c(S^HZ^e%T!P,ER*L3d*(6MMW2.n!f:&juB@^NsHmBL^T>GG`LFtI_I!.@/:S_>=d
%j)J,uJ3A9;di)8WBogVHVjE_Da-Aq3TTRgln]76nQ:m@$Na.)CQdi(6MF_&H&>R<'SHTqrK!3cI@qiOs183BaH0K#4VakJaK=l,W
%imNu/HL's*hd^c"Fco,1SQRD9MC3SW<gaW/*ET_N+em%Ucq6&ME[-dJCT*[Ka%98F@YJPl[c"BU<:<t*-`^nd$RCsU-&p48-2$)(
%<2F#[8_9D=)qHU)JSTia/_OEOo:Vmoo6(c>b)^Lr5P4Ur*??_(-fT*0gP0-o"]EWJLbt5sT(Y/,$PgQ)PIoP(K2GZaVJ;'3E*&ZA
%L5k,4_sfZuWFP=rcZ+LOpYUj_c]Qs2QYX/FQcC^2a35u7iR$\A>9nnuVdgJCB)hSSHA"JM>ZF`*#:bn0@?aDl+kN)WlGNu4Lc#No
%S6SCj*m\ffgh83(f,4Cn:EmK_E5E":1#HI%b*4-U!Z3E=TdY>aj@-%*_j8Rl-W0J!p*c=`@NBIDj.A113J:X6Z%s+Se-$34fd`j7
%7l;YYT3D[L>7P\>2;CO;;q&X\[SjPVTkg,,/u"'O=?W"aT3/;Bo%s.7W$+p8EuckJ8PdTbl=JB9/NCu6<WZEAjg'>RcG:B2$ahVr
%LEi<ZoV/%9%FeDUo\=U3H"7HX;+VQ;VM9S9U,^V:g%X*>94rn^&SsJf0FHeDF2G>*gci[NC%qc8T6&BRoX.01'c_?'=/9V@psZm'
%_BN3r7-:hCp`n\g=r%i_'<8OA`R_\W1gIRN>3%s-di9r]?ci;r>[g"KascpM^.JgNCm>2gM@,p>M)FSJl;L9*oF-^)?+PA:]QNkM
%Y+XCn^G^uAc0*AUZeP:2d&`,MF`hLRd,G(5d;Y@([i5hMjgg<04nJ\3]&rJ@*p_X"BRT58n+MaQh48fVm18VTom.I\;nj8;!DI98
%mBo2L3seZB8V8f%_&dl%-%s<feG:&SB$DqdL)O^7C*d<]r0T[Pikp"q#So&#jCfQ1/+tfD-PpP_il"^+4iSu?_<kK&HTumOi2r9A
%9ag>iCRF3HlAu=*IA*d`-8VJG8TA038N+[DPFrq^XicmHYhq%Tf4PmnG&p[L+fclkRYt_k%N,-sI'@/d,d1>b:562Wc_Nhns4$>@
%LXtd&4RY&*A6_Wpo1&7-X.G:Jd[TpFXp+AK:n5#D6ornKI3=(doaj>fRTc5J[V]hb6fj'q=W5`bh5PEM-YXF<DHb/eS/ca8`0I2#
%CRp/JFWl34\hgC1'_M`CEC9"OcJ^b(;>:&@85jCiG/cEG-%`I]qHT3r3KubAs,(t3W=.>5b$0ZDOe\SUQB3$'SFFT+@hZTqGBd=K
%Urne[kfJ%^<BG5MPCk4H@D43KM.R+AO:KPb=:a$<&'o@1BErB9imPBPJi^'?jF2@QBfB]4rg/1aS!-'U?G]6))Bu*dG&L-K:A%0/
%;8c,p"-c"+;>j4XH%fh'LZi::,`q"gOgK;=ibND5.$/f\&ZH447sWK38BH)/]ucM-&!*f5\<WR6%l=E*(qs)/P>R`CEib<TW^For
%?iT]r<5rWGB*ma"Z<X!GJIK\^DV_bjW?WLK!oG`Z=FEr&>fOXgD;h<m.4d'bfs-*>n^ZjT=uLIA=b"]2!S(&'4\#$<\!-S#44,Cs
%=rocTnj#@E'Xj-&!-bo4o^_-QO$7[[#</SuMm/?/icH:.ATR.L6qN\a?CGOPT*@d1LE4Vh@rtk-]/.Z<:aA%4NY$hn`NgP.8T!G6
%]0Yt7g+esF;-lm0MKi/0:9GRL-O5sET<<2_ZdoL.Kr_:uXt^q3$`0:EZLAY&coD&JED'HF*<aHL<gW>6Zr>Ep.f?aM`%TilN&nkR
%[.o%'_SEc7`?B`"g8M?;3SJF9d:'5h>7]0o6oO28nkN4a)c^`gSJ5oMN@mbGKd3S0@X&m3Q6AX^5n\E"H;1`cgl8UBVt!@c@\f(o
%),-\0Ee`nr/+F8.o_kiT,VSAa._r0G1RpV4EdoC-iBXO?XOAI:0J2$g?fAIS&NJ<)Wa(NhF]%`9k;<tgig?cV'apjr\*hBO89Ubg
%?X;$WH6[W(lUL7K)948q`Y'etqp9`EpCp[,(;u_`43XhRJ3RF&DdC+NjJ<QN'a!@:?O%<9:r,fd'B1@(,6.Q<qt'Om9";9J:j\k1
%<U^aa0GbYI@Uf:FId*Bfi@gm^(<VP!?]H8TiIVja_`g+;+c`]",bqW$jaHoO?(Aq/l1!B*c'Pkpl/B%Ea0:jGS6;umn[CO;c@MlF
%VbaOp9>o:e'DOKog-'QN00AT*'W,>EMs'Wl%G$XF:pU=FGXto$Te;pl+PEl6F-X/;nOebb_lAYeG.l_)4m7hEC:1qdC;^'0]Q->U
%W,6$d6EDPp!*$r@l`_[E?Os%ohC-7S3$EYV:q=>W/)a]FIrHXT6f)b%q0H2tFtf+aXOSV<33S*#b`Z/eO^UZ[#"W;mG1ef<bmRJ_
%X^1'dDt<PS@bM21_U7,uTY;4&LAUHnRl:Y")<M8a&-BUsL7]hD+H_jgW=)>M.Dqa_dtQe2moZ"6Hea4]."D$N*_.KJb4OXA]28V\
%%;Xp4Fmlc1,Cf+#3ngC)IN.f[/+U1*r!pA>nm';]jpLaU[eL"H2CGofQ%AX>r[a28-B/]BW3sMof2<H%'G@7FNT,'n^:#>W,L3\^
%:eaohG.mSh?f?G>V.c]Uf6aqgp2]QSAm?`nGc>W#c5kS=H39G=ATEXjGZD/CfqaIU2G1EenZfOd8@o)JbsWHu/l3NW3_AC'C=^%i
%"LX*'A`&rUB\1MqDVQOs?N]+a,%AUBhdMN7ZX(nfT")ZY#BHON_gB^qS<3KqSm%/5B@VeHV[G9d?buW0qPt8hgi,8IU#+#`rUO$H
%EY!R;?hB*8ME!9N!t6)2mL#4EOlj2H5oqZ\mtS]1n8]t,=hC*b1DXZ2A6p/`Nh&A*5e-qL]!ED9oY%GXpRjmVJR)3E_=hV^;;"8t
%>:AGZJtZMkaKD[6&:h?I_at:H04`"7PJWU3_Ac7812='Lk%`kZ_Q]3*#1?\CO]7*Xd3Z<jUA/!I[^_eNReV.$(p)=S5=UIR0rnU-
%?6TjDNYYUnO'7/HIJl_rg_#/.W]-&GKeq=Dgi+:eio=3GE#@7qG!eg^S[2?chBPAC7e%+7"9`n!`Xbk55g,u]m+kH9<B'.h?RJX;
%<'8\G8SYRnM)@^#b6nZ$f,q1IJPsRT"GVspK%sdTp0:qOZrIn531/rpA9RFL3Ym*'YOK]dQ$$hNmQ\L#Lj$E)D\@R-k/pkVJ\/FL
%EL7;+/B>-A_.I%N.RhTn[R\9BfA2Gs53O?<&`03@oZK1"?T'M;^RPr"IuaA._28'<]oS5h^JN?=fmhM[OaloEI<47?+&9?M_PsLg
%pq2j)-!U;&iG214U;ioE1-hp6\j.^E)o#\e(#nF1c^<)8P'QG.nu"ud49Wjj:aC$=jbCMDp'7KSrgE,M<tieHf'NsIW`kOZ#)Z!M
%W"PlB2TqqU;`kB&GrA=-6`JEu%AKM==$ac9Ec8e.k1ZL4SuG*<4^pUNfC;4Ak]$$WCIaS2D%C-2f8)XLpQ=7LH^"X\/TCoU%lNYJ
%/h#hadh2NN4K=?&UCQ"p!8b:kF3$/THa.kTVXR%3hsq:OP(&';NJ@oK.c-*0W`01[GBuWG2*R=AO[S)3+q*gcA3!I&$>.B0IAbfT
%8."bMl]o*(A'6)4BJeeaG-q%nY;i+NG5L0`L.pgE[m)fE8f^ocgR4p$n;8:\KjFkU.'g2Z#O(<O8YIR_XZ&SAf*Er8TZC'Q)$Snt
%TeM0u"r[`2T]?iffkITG]u=brP^W;*a2&W=)g/8H21]CsfmgRf7C&:_mh-<aF\j+_iIea;"MleS=qS'NQ>@-RG4grfhbfBIX3&m^
%1bQ1*[$kh27B$j,O5d=a2-0"8C?Vd=9R_6:J)@A,<5JQ):8F!Oo#hKT\tH733u;%]<d*?j`k^'2)7PX#-)^\e1qUj#b\PU7W_b*A
%Ven^>$&cal98[MGGbobI"[`f/lPA"KOPP@?>oTb%D7\Em&2Ob_[o=s,`"3&)iM!kJ3*3'H8eb8sF=Pi>j`^JG7bXVbImjAbN,q:_
%?5``G`KsI:@AJsO+"D9b;C&4s$GEl,3$Zd3Ffk@dZB.QO!_/nDln*uk$Uc>%I.?d=dZOldje*@enSl!-"!,LGed#_p*)I(&)[bkZ
%>T5(`)qiWJCG9*c>rL*=T9B[_E29"m;/LB><Zi=qN?Zks$!.B[D\4kg7^!=\UU2OtfIO.\fH/]iTn1cS^&t/^A+$:TERtQ49gcHB
%k'.e9&ptK%$Y(67HNU"<0L72?$08Lkf-hFV:U-\+lZ4n3Ld:BrD5uki!l`9e[`L]_AL(E%F>C)/MRELfpNq'os'!plm8t.Aj[!\!
%J0hg9/p"k43_[+:W]hkaAT*dSbRjKdVbVkZ1R1#ddaJnMWk#QR#jXkkJRRA3AT6n(e9"jjik2(0-]N,uUB65'`#;;G[*FRFe"Y;m
%MSkQsP?0/l=qfdY3"Xsi0,Q>RFRaUUirM=!4=$UmK]lD4+p&4<Rg'9IX/]bZSsWCaknL7<NhUsPW,+YBI&q![DIboNG3K&gXe(_h
%^sWk%^.+5(m@]K56$ZjZ>bU:Zi'4Ks)BJGAit^BU8/''Q0bskVgS?\B*+?r#nM0GK]SR';^&$-](#j;RENeKNM0qkLfpHDVNieT-
%4Ut3Qk>f>M/TR;dmjmY[[i5'C%O#6B.WY%?mp&?p&`oI5'Wm,4&nTnG8m5Ki"N$+mDlgk)<migeT9n*^iQnZAjU?:_%Y`ZJG4(#p
%T&2MTC4/Ol_:be->^7lA=SrS>R-6/2Qh39#.KiO//1B"*P`PFf6XTlY$Y>$Jd?H9$-JJj'EFQNb2-'dHJkVq2+Z605D>3,90h1j$
%#]2Q@R*LPoeFlcE'K^#1kX*meHgA$9L)tC!,N?1I1%&R/le96NfhH@Cou^I7N(/(%eW_=GLnG`)IdQT"SlAYL?aMU%S\L,P>U9dK
%%$*+o9BA?g[RemM[3?N5d$>f]RI>)H93]aKV!bDU.d<(tko:UO?1HU@`$7:VGmeK79?;N@(p=83[?#+b35;,*Xa^,W<qN%'Xq/[T
%'7rUoOF7\-eD;T&<#=Uc1/YZ!>@%gPE<rLRD+1BW-lRIA[LR0B&R8>eXghDR:3$u;\@`Kk=^_VcGhIT($KiQZi:a9J[<ahEFHECE
%35Z]RR[+dNi^@@Gci+Xe8Xd\"aY!'a,TOuVd?IHMR6A4Wmb#hie]LG`qW+e]%'Q#U?f,A#d#`qS%0O\L.:25ZVW8UUXcapP1.+.+
%h.SaCiku@5rBUg]*\.+fhie/qf8;&S[9I1;oH6d)"54n/@)N>q[`R(u"@\u^EjXD'p2nujf4])6I]Wm(noQUXXq-Y"$ETp"01ni,
%(Dh[=+j7.6]98o^3nN@S0p+.Y%'Z[p`HM%RgL_cgXiN=BN.+sHWuQc_W2Zj5&%sKIi-@JoME%9^R/k.$Gbu1.=*BXh9rEdk%_q^S
%ZC`k\+("XOS6,5WA\BQJ4C!c>YZrHaLZ,f-]R&Y#e`@H9J#"cjS>*IZ1PqnUiE3/,f&L^q>oUE9G'[TT^#[(hb%[V=n)]pTlZ>;p
%DkY-Q,".1Y`A,ZO2TB8.e^rD@n4%i>e-\Xgdm]c*H[gNaA(cM!o6X!/ltj`#E2P%S$]/Y#T>f/OiZ#['4[m^\mC[NdVJMAJElKPo
%fM6<rE19Ho4C+ZU]nI8/n]T]7$X9-_LbPBo'3gb1Up]"r01p!ne;n>lVQ+h%#a/LP;KZ`5>a%EC57B"?cP`bN:8;TQ85dt&+P+Sj
%6M6Q\)Y!s&DQol4A.\J`ECgMNU?)*R#NH+";aNMQFGfkia.E50Fbhm5.W<?e&ek7V,XfYk\K?!d<3[2t*)i>3/3+ca5Qlg3!f&La
%4BOO+^8!Gjo`VlJ3MoBPK;OGodH-\'S5<h@p=_B=p5.-2#s(]X&C$!S85mQn&&Kfngdp<7Le4O,?EYfY3'6IK,oPs'V>XWbI);3a
%p;i+,.)"**,,J=0E%>.O3TlN`gQdeaSKld8:dYtTo85kpVlSj8o=tUU)P_pFXL/ea4Eo)l3p/tge0u4amjNo@.JsP2o3Se`i]GQS
%lLJZ^#a&0^d74EW;HeHm^#2:D=IMLF]a=0;O5Pip.N<sqJo\5K<6n+5E)nDB=OK0rMb^6q>fY6fAfj&t<YYSqeA$S'[Y4fR1uAhm
%Bmg8%3qYgufgi&?X7]5A)c6&Jq2_]gZoH>$_ZlnII;ED5,fX.1^9SuH2D?:SjUK:^[fu&o%fc(,7U]+uVlr/L37&)9hflFTA1)>c
%GhnU71[X?d9V&)BmCA3q#-6FFihaJ\0jg:bHR79s[,e!A3;R3a>u1io09DJnh6FoD+BF4`g5pZOikc%cRE1K)Zu<4XQF"nr$_OY+
%KTD.-^7Rc^7)`<:7(t8;57haA%%$#H4Ot;FjktWA.eYpOW-da3gD.[o"/LSOVRASoT-c7OjKWJ[./"aF&/73:WolG@GScT2Vj+a@
%P,c'Eb#ZdIeB,DBk>Yo5pW:'pFUPM,)+$X$'.C@rBKtl]kP_*\J![nn)P23&\XN?cj\7=MdL4kn;RSRN_I76Ha$?f'^>$gK,DAC:
%&oh%53$PUr>5j)8I$4@XR\0jW;1q(AU:M.ITnnaX]iB!-]3Q1D272c2Z0*0*F-OJ`BHP^g:-51c\]/,dHi&H9!B.>2;iaeo/Al^C
%*RWS5Bl?FH[_kI&OLP?WZ<KRNL@BO9W)4Ib4aCi+E1jMc3]$N'KGU-jp?)!`P3I*;)ghdGWpOC9K?@R<UHqE>6>$%rNMN*h*j<Xn
%;MHg;dArc-8t[Esj#2c%)"U"$:Qhc8l(F'$.?W/XmcS^bM7!Fb3Yb(OFa7m[gZ7To.98?=NC%<i,7_jSG'a8sjZ7TThtD'48R##;
%Zq1ao$Z!F]DPq@HZF-B/:n%coALjH"fLM<a0aF9(^,^5OFRV`Pi:'X-]K9Y+e_Uu63Y+cS]+(1G-bTRK?B!.c`qa;K_sPXK$7VXR
%9b0/S@S?upHpgkKN4"H"pB(XG1.1Fh_68>L5"deUXLj6nC5#$J^"Q.GH-T"(&WOM[G_N_p+r&[bn?uZ:nks_-MI5sY:/rm-ac\fS
%Gm1HN-D,Y[[,Ze"'+Va3Sg.$53EK]!Lge:g'2sM7kM;+maF8I(ljk]inCiepm$eY.^L"^nBqWZhlpo=37kdH9U;4j/\Br,P/ZkLN
%,[Q%"=\:cqEAY-be?@19"@OOClC>CfLI?]NMW8K_oWlP.MCWP#/4D&3i"R^o6u6a/r-S`/Q:mY+2J_J3&A>C801Wn!Ep_Ri[U3Tl
%dTb+=Mt/`cGcS.4hV[o89G1J:Rb2n.:S6Y\6+a;<*@?qtr*QY_]\7d[(mkiU>M7O7,$FK":8ETAqt8)qHis*fDJ6Ce\b:2"0@._5
%Qaem5L>Me'F-D:D$G0D>%7gDp0BZRLeRXm^M(YV?)IP38n%5Z&Ip0*hQ?_]?QG;dMn0D@CQ%mV*0eYMN-^CrYpgO_g;TW\6KW,TE
%;Op@ScL`ONfY$VLiURr%f!r;FLs?dDUfEmXEmHD;UtT"V-+=ra6ir%nQUb&),]&S9,:,V18t4J8B4OT_qJ.$Mr<"AC@6/s!RoSa6
%dV-0E7>*D45Vsg@PAk1%&s1Ahe\32`<U3b-`%gDcPZ#.d&Y"iCgiAF>6V`I3F_bba#k;n(EX=#pQto6=MKUVCp5h$<4ZhNlG"[WC
%g5QcB]$AZp=r"%,aJ=n&=l:!saN4)pR^8uO>*Liig)a`jhS43oY/?$s-L)Yn5Xd,=(FS^")35:1s6h&:V"Yf]\Cb<[Wj]1&PNs)R
%ieBA'DO5."fPC-$,)2k2/N5-$_puU*2q5i+Hb";nUZEXX1n-8(*GsB8o-*9.>e?JG6Z;r%X"RJP?d0MeS1lr-BXo>`T2O1'g[khR
%/<>k+>b5OJ*V)'fC=5HudPF8hnHJ6@VXa%o9V:qL5rUXTZWnJEs7CUpT@6N<HYLgEhL#6SgB(nnRH;S8:6FF2Rc@UC7^u,e#m$V$
%;L(0[jDcX)PXM!0,7a$;Utf7#Q8M9FYN8XbmuCMGnei<1]<[%A%k-5aXO,0XL].`7EFo7IQB@SXUJ6),j;FlTC5_:CPjf2Z&64Cp
%Kh*9/c`D&n/_<ej7HU&ScB8,=h$>ZUPM6`dRL5LKfXb)pfn-b'Pqh`8@;,[h6$K.*]8@K`-aJ^[f=mG\WF?L_@7+l50o>eVXtNr5
%a<U='Ppfqu,e\T1pJLG_9-uY7eu)D'%\%e:6g&I4l&nnl,K5q1QRaN"*Ma?`8iWt!JX*[S,))b</!T$YrH`;pra$[e6aJ*1g<jA8
%4!0%q1KNJ_PT+r7m8)#BgeKU4i:u4@rULpGDP'2Eama"2I7AfD+"#^`o@\Eq+AnJhOm9lmK^e<g"=ib*+%c<K<c$GP>FCq*W$TRA
%9,QpR"dOCEBX]8*8XtR&FjU)Kd3J,[!\mLtfSR-QGpG>'HK+@W'67@PiIDsVmh;M(@Yr1N/Y&p=(k\]j_W6nKrlqQ\TV>.nkeSh>
%bM"Y6oD]-Ri%Q1Fpc(-eY=DX"_nNrd-jdI(#"98fjFjKP?+eRn[Ah)?7\lb/]6$gFq$Njr*"P,@>>ssih<@mnXVS3L5kq<Qij9DH
%4FG<UXbsKt"!u6Rb-G;,:CFsQ%JZ_USJ$4[B0tjN+uD3+);IBtr5:!rQ)m!Cnek[s,)Qh2-Im1SqB^$Dp(qB_jU6t#"KNS]W'q0`
%8b4jPIU[H$6\n,fn'aHYk#AaT%TLWHV[On*&_%Pi$Gg0:j[Mg?3Dh?;DeHIB04",'!Q>sikN)3OD(L&.m3_Jrg`)dnS@?,Bn^cTi
%>T\<KM^')o$>)!WV!`Q(>4Fs=@^f5:h(e@dZEZdQ4V+!Ldf3TVb,c[rKbHt=I?U4e^O)a+o%4tZ];ASsdRX\9WoYO_/r-$*RK6M*
%jp;9Y9`*9b@2@U/U*lpI3)r793:cT#=a=EZ?`FK*B;tnU\fmWPLIIJ[=b0/p6\p2C0D8'\AUiWrMSg@2<Fq6'1(c0Cg[=`DMU/`9
%1aJ(5+ZfP[a^Q-4Bmn,X0;DuFRlgZJk]m#c-j4V)S>MfEP.[pD:ksFk`#UZEDJ9"4$Q9cr\*Ka>3QKM$@/GfB@TF2[l.>Z>(fPEt
%+"6HCR7.b?Q%6XZ[ETXgXJ5mBTr3=rXp)jjH1$2HrK1\TSG6BuR+lqr)d4=FdCXg"Xe+ap>Ao"1Z%-C!]6)rs%[.$F%A)hg(M>gW
%]YH1#o(F-(@/g@J=?$'Bj!L'!^<Yr`<kD*eYc"k6HgSfrQF@m0r1g2/@!.]`%!oji4//C7$V8,f7(hCb0d9XAi]qDL)<EFD=\+jl
%nVHaP7%!K,\E96O_mJog4sSpWB9*lHo4$IEYM9C&BNm*O%ASfFWlD2^'@EIrg2tp-8)tQp<a&*.s5)kRqrT<Ze$o2N:28<<fV1-7
%28T8Bi%i$,)"U_[3(@$s=7/Vec[p7(Tn#O6/uSUaAst$U:2.?sEP[2oPP1cL1'4[pRcpkXYmPQV]/c#2aKrQ@)&ip'E2:Oag4iX/
%\j&ru:rZGKIrO8\f]oUY.,4aj.7PS)(OSV7]8%PT_lj`TR"=afn:os[NY'u6R`7HFpsfC\IfEFl;X%L7WA*(*I1-947$uH+pHuco
%gg]br+8;t*fL$@PL&sD<P^,rF'U'5Q`5GLZ5L47-2fcW0h_KNtn);,!-A+V1f'2eTqa0.Pdm]kfQ56()Yi\cEl>9"C<8-K)4'^U^
%-P.e&9iq:9=(%:sa2=hOJSE0AjH?7,]]?=/"-5*46XZ=@p"a7,,bEukWq<4u&nC<f!]MP6EIt;U<^bAm4"B2p;"8'1"#rsS9'Dg(
%L`koEo;+4=&]D11/*iF]=I/n"YYgPt<aPu+J@44\T-uq(SDrgs45[[LK5B!g"bUin\F>g=2q^IXEWd!@7MWNTb+AL/bh&$pPSY$G
%VRYbAd=KlpW<.C@#Q);FP*eieM!.:DQp,7+:"1ZLY!dFBa:J\>'B/9(^,nY]mM)K-2):PRqilG=1*H<9q(.AIDiS-S2IW.N8<:lX
%M]B,bF(g"oYY^Vl;Qk.]="7cuQKV9Z2bi#Z=ea&jibh@*5\RJ7od""eWc`WF\9R\!rg#T%<olCT,RVSK1.^9ipmgP41f.-Qs3Qq\
%LEf5QcA7^J3L2klP$&n1g%(iHHD?^a.cUns:u"A7DOC86KciHV6m.8Bmf;NOPu(f6]gjB5Nu.1L[^s`KjU6qSaaSJJ5pa"90mT(%
%T8J:F9S8OHLZ(m05R?6iN<)1_b?fER[C.;S77*odE#u\n^1-?X3*&\8e;C>N8eC8@2&))AW&Og(&cniUTI'<<'K!+gn5i20XG?HG
%C$2jNC3su`0Vt/kbE5.[4M52n[ZmE<6b&XXWs7aL-m32iOO3mSrdfbA'2<p@c&5HS[Vo%#(Th4&[H%<$JR,TN118B'>HYa^`sIF5
%/<$2ge4.nW[d5H[RO;()GDXq\Ler/E43%J3K(-D$P)%E#pADK'*-YDU(5a*#(7gmn[!1-1_@Kp7p:[YZ2\:^c:Jb88B6c(0AHZdH
%b!UEbqGYTGNl_"N"DQ5VAf'V\0UJc\d^6K8^+qM*T]sf7V/C!Q?'UD1qV1(6m<^NpY@EoS=H(NVouk77@L"2RhOl`[[W!?pLNs8T
%3WjbrDi^I\]sBq:?a?2jVuRF&%<DTUQR#c>=RMElL_=tr-'HpeGCl4_ORS4SV&n9B$G87elu:.HT:Iq:KQ%*kYZ>h6U<7Ms.l]*4
%p!n;F/nU\#qGcK3*VEKrI_u]f-dL"74C!b_Z'>r]38AhI^YA-4)=ZqM;5&dD5Ct2X'?Z%(B19_g,P)3.$Z;_jZEJq@4!_R:A$^5$
%B+[Xd\(^-oSfn82JaT<m#)=>#@Q:`_1W:_<3J\7QWq1#:A2J%Zn\Vafg<\7Brs?`i(*oNQ0mGicKXl-a((1mNL)&U@,SbAJ"DN:s
%Yh`bRiEie8.`kJRUEI1^AU7ph>Ok`OQOQ`QNt\4WW3\)nf5-TOI2dBpLb;M;L+2GsbkQ(:l%+4DCoKKUj?BS]gI&`*E%[d#2EUan
%Kru4+3aW2!62?ZR#lZ<K<$G=P+L7K^0X0]cqA?m>X_qf7;jZA)mdp6p2pr"J=W\Q<[f4[]nZ/Kbj&YXIr.-#lni)q"LVu2?"a<8Q
%G<^hHmEq\R&qZjDLR?Gd]uJZln6CIqUGfr:[i:1%`g6rbSCl#ug0qObje2e)6YG`Q+5VF5[sRH-%l.-b-g:n22eD*eDPUm+AB@F6
%;XCeXYK9009b)r9H?coFfK&'7.XAd0p=en"j**pS6b!e+EKO2nL!VI3BMdW<D;reRa5mWhN,/sHA4]JW3(JUd!pK<T*9#70ZqTOh
%`:l\7Y*&MOd*o`o:^]_@%dUPkX?`sF8">_Y,tU4F(9(?a]V)bn^N*5$QX@hb&^:gb3MeDhd1oNMXN+@H\[)i4hHIQ,eVhqbLD'rh
%p(_N<*9BUCe2\tB1QM:j+=k4ndmHCrnEpV?L$(LX([,s"hYR,%:&m,&Xa?m$Ze]2FVue(O_*gMh'Au5h,N6So@#$1!f24(K`Uks2
%-:!3/+gF(p*S@.0S7D[PrP\eA"kZ[eQf5&^>El<6F=huHP<Y,0Q#iI6OC(j#+P3&mL";-_T23WD7%"U>^aplf$D`k4k=U;/IZDch
%;5j-9g%7k9aU#IKqO'8b7i@B<;3a(?ak*aZ$p!R%\9&)ca[A?ojj+`3rYrg/p5)hH'5+cF*gpn)MJ@Qm,4_k6KP#6B3h?G=Np#o*
%E%]uKDLFQN(ALlRPda`n!uR*5p-E*]iW5gDe>',/KY(tdKR0>LER$\6W*-R%&39Ng+02'uAILXupPN\sN\UAgSj.Zh/qVb,)6c^j
%Usatt88.T[3+8(A0-[-c26+\?L#Kt-VIG"&$r_-mg)_emMeH4c/%\cdY4V\7"?Fd>i$^sUN'nafQTERQQiV3&VT#Dml.V58@t]&s
%,kMY,D*_1HUFD_`++!g:Hft%_1id2s"]i`WnnDDV[)/Z<X=<a:.%-hu0DQZA_Q%Z]8U(!uI4FUuM9S!._k\n[qUSrV7=L&e9YVhI
%?1##L#jO`:.N,Dm&Pd>'`2SD*`]0r3iIR[DE[92./g2r95fnVfB0?OY&g'qJQ:rCq^H.eIg23'%^rqC@\m0#<9k'K^.CML)G>8)h
%rd''=VqVckg@"1bK'r#$79>U(f'*s9^k\74l^Y\^:a!DBTY5?b`1EnSFq?;=3k+Br`sjaK9IG.GYASjaMmM*a_;i-<qK4ZaT#,u/
%M%M5Z7?;9DgCY;r,%3-D-XA<h:`cR/A>%A:6dfVA'[)@(b7`Pa'<AOQRMb*Q*Oo-l)<9=\G^kd`OoP/W0'7p"aGf[2V(\3,]fV]k
%Uds],VbC,[cAHZR*V3;lUgu4qW2iptDN[oPdS.D&eABqY/A0ib@;+.[A!5K==)fR$\<.<+S#4>rf80$HH0hI6!p[DuNI;+gVB-m2
%Q!D2GGj+Q+/mV;NNuU0WX;5.nLt=XB<%G==gTJ2h@bT[u,1elS4@OD4AR\NkI4-tE:(Y(Rm!;B.NFH0dBM)k::c/rgjfj.jK;Ib1
%orpt3T,39Q"f*M>In^@si=m\1#YZ)#<Z&3?OSGnP<WsDV3ZO@4[A/DH>0Ht3rPjeaFq.1A(s7d'oHc]o0rdTTqra&,Mlj54<+W>W
%d+9Z[:ol&(1I;C)C<Xf$GJJeURN>&<'1EdSNuCWh^F4K4N4BPk=AVnN$%mi<;7?sjoR.ERVkB8tM\d)YN?Y>,N^d+$]"taN\o]KM
%[=hkiP%E]O&+diL24R]'lL#iDOj3l5CFQ6r_?YOgO9/H38`r.?2oZUu_O=PY(\DQds1moAKHR>8H6RJ.j`@A6@ff6!7#"9KF=?`%
%!GrnDkD[N8RSJ_AXk`W]>I>qR$Xl77LpBKhZ`U'\ZMc:+"k3g!^m9<ZD(p"M1L%q\$WV"1NT3R(>NqOAIb")VTrUDf1;UH.:`hlc
%4jrag3\S[9r"1#?:"X'$BVPd322;7&e<aMc$.f+G[71afbE;>!U+Jb<1%'*$Wgl+dX&cP@>Z/)ls*008]Mj*WYpY,m3?-CC&kcL;
%5opRt<D`cNQO$,og)k)4P`_OdLH:5a=>7^rLRO6k:j`'7Z/\5V9$#%^733c#rL=8#%<lGsQZej93)6Ra0PYTnEk<e@[4ZJ7midB;
%*?$PaaXh^4)U'U?)i8CZl?QKf2;1-VUL'3,\kb6qhMtKMcWVatfdNBc;CL0BqmDIQR.D"icQT->B!HHI])p:qejN0,H\V2$/aJHL
%g^p\c;7kcH"XPg^e&R5NW(R[mm07moLFmSj%"_)6=chpr,,Ab/dMHT+E7"_"\-di'/*\pASl#\ZJV+,cYr4kj_);-HNX<:=2k-Qj
%r/j=0<C@e!6%LW5A,6ToLss\+Hplh@W,(]q6HXdQ5r*?cD)hQZ!U(eIkd-._n-[oY^!';%`U\%MLNH]?R*qBf&g)FS<%-0Wq]USh
%FZ8q.9=4I&/Tt.AcF^\(a/LhJATsbRJ\kJT`11cAa"**I?pSdJ05Jl+g6GM)$L.HcH!6_e_X-YR+'D/O;Xg#Ma/,oA9;4@*>KX,N
%8q,#:Ep4sIQSfdVlORRZpi`.QSkA8aOH*Fpp5gO('sS3]IL_2dlZ6ii!%M]1U#M0C7=D#\&*3:_Yeh^#:Rk<f1).iA;1AAHN`[F6
%WprnbjPHW14d,h"^YLKH?ZI'_jhiGe*[65#Ns%6r7>`$0g8h`<g-!l()9]J)(i-S&NsL[?7I=Er^O;ci8m'G.Q4_(cY79pCB_N.j
%a%:_!&fdi78<SBhD?\-Wd)qH?#H/)%re"a&6$j6>?$ZQVlr&,1$<,>gPiC6AWoH;>!-7"2!T!lt2+]AI2'?J1b$hPnTdq6lI$%`d
%*77#7N$,RS*l!o(JcpG![*_O44fP_kF]?=9NjodlL3BQW&Y5g-Z:"^.g(=CbdUim?'"3WFW0)3nk1'rsrT6NILTg9$T'iTHQSs(D
%&b#ic:&#Z@=P%jP^kWG.W\d^C0]<;:3,"I`KgQkSrlj$][LCVcj5B0Z4&.!&?6e(&&VgbGRYn4/*kWZc!`9jJ\-U:t6]DkR]1,P#
%hIhE!*i\Yh5ns$W=&83\rkj'Tg2s??e382]!sG"QCk[]HIZ);3`G&]XZYIZhE,tm;j4hcW#P`cFJ(n7e&q?"nM5['up#VckLK8CH
%^S_7H3^WAdQ`Kj`-64,B1QqU'SN*Qbf&1r5(kc(N+tQgEms%Ls3@bli=YGeiIp1BD4GOVW7$-!ngt6tgs8)ZiG@%TT,lRPJs(QA*
%2$]T"G3fT6G(AnD$l!<TP,Mr"-l$KN2LBV!65sUl4]@[$V(IMupN$T3l)ZJ7<8Kimro9PkhX6-Lk:Yt3i-i5jNVEEYF5an64aPba
%s7X5*h-I]dMCj*8k:f)[[%Kst\jTTQTYI_r^0l1",071-S;g^0=V,dN@A9jL*`st84e'DQInDg]f#`3\"^@V5_P<gJ/Ot<I48r=%
%E>I4m6<UEaYGacAM?lm4UZ(W]&po9l=/_.V/RT%ZB=Su'Z8Gis4WZ\X:WHcPRF:g?@9:($lFbp^/WX2QdCf?oZP2f@rO[!SL,Fml
%ZM"fgdS[&iU("B%e@aJjGXM'%[39(*URRRrqeeAJV78=R3ft7d;3#&`XpfUKH*[ZW*a3G!p<gHs\%</hIJpd]E^+3qT/\QR=U3LA
%:D;!k8UP>'c8iQM'UH=a#Std?g#Z7==CB<.\(`=k)sfaWh`om_hIGDZ6'd;_k\T%&\(QE.Y5[6Y3U'[+TQR]k*3VYESS2&,q.B@Y
%Vs4EkTf7[2#M?XUq9,mdEFaKCk(#WIJK#)Uq*Usar/0Y(DJ4IbJk#(o]?MD0GP//R8f`%rV!GO(QrRL5<mWR/J2k)5"eg%Fr!3[P
%[CZZFEBtJ8'!n3S@t`h_?(O*M3/<9dh>EtfM6<(+mWLt`@rHItn%RWE`HuP'mb9#-Y/uU3n#k:9AT^;0V/DM)#9n^kcI(@<2`+LN
%l.:Mb-^^&tp[&Oj;:2NC\HChpoI5hu"OoX]f/7;/NS?&3o%Y1T%D6U<]CFb8^\^4X=2h@+.hpnt/gIkQo_u)5TBuQf+m*uCFe!"J
%>"3aYhG2`tq_H(onnI!*\DG6O,W_+>>M[Bka9g.hh7&gnGjjnSI?Sf,cm]ST5*$%+*DllcU=9I5F&7N'\\/f8Pg)`U>g]LX^>,l[
%28;73&1nJM/hqf%WhM'9H*7BT*dXTfFna^(+5T*VG@0KDLq/Ce6N@2Vo9[@hNYN"bW9EZb&/8Z#g(u0*i1S`R6rb-8J',FY*dIe0
%;[;sZ`PimMqhHHSLaIW/m=s340'I!+ICn0jpYPo2To#(h!Z-*`LQXJ3nQp_M>5"'dX`>PSd8hYW/uPC':hY)+J3**fLsGX]q:H"%
%HChVje,@19@$d6\j),NUH0U!Ak0:NoSTsVj?[\Eq1&h+D?iKApJ,:=ks0&al-dPD!K^LW63_8>tIfYW$66am7P#d])g5"=C4G4IG
%Um#7ZP`L&m<VaHU**Sbd+&H`J3p,Pa-*$b':A^f*9jq]"C'n(sUSRuqYFd!R&/if%pcE0bEU5h@QPKpp;\3iU9HSpIkRtbX&5Gc.
%>s<E/]);RTbY.(n)qinKPQE5^]7m=QO!;)eSBie;^q,,tPWs$^9G\4["sm<VrJ&gB&i!)q@*cn-G$Vq:O@44HF#'RO#hs!QjR<_k
%Tfji2WTmn:E-nH1H0NMm0SVG`[uo:Vml8(udQ%r/V+1.-o6;Vc`nN6D>as&g1tVQ&nq!2NGLS&*DN*prb5P'FBqOY970L1a7[/;X
%5k4Or]qGu=d3Ig&D5_a1102NUd8M%s\DAD5qg3iBX<i>23W,obBb0XR*cBS(Bu>N:26i[<G4gWNqj#[$kL^:s9dU>_PX4sZE$adc
%_#r6-A+VA"53:I![&`WbbO#d<n^[pe;d$OQfl`VYqTF<$hf6CM=e<6uUOhau7R,aV4C5uBCAl^X3*f[<m^No"24RF*W@PMdi<'-+
%6<g.,L(&pWOrW)R\=K.!V2Tg.BYq?M"fi7K,*rf`(KbCj$a?4E`oUW;WC=if<"d-"U%'aMB3BfT[9)@siMu'_!2WV]F/"o<?a;?b
%hY27Fb%fU"pN(#j<YUofLk&B1f*YQ('B.7(;.6-7;;ZcYIa7.M'u/PaOiQua<G\fHD1Rn$]rkC--ad9>%:+D-Yf%+\(:;,?0F4T(
%H41PbOAE*u[.5,qWLtBZNNfjNhR>gu*r6mqA@iViNV2CDag(=0g'dnf+3Ga=c,"Q*EpW^-QK(899"$DYlVOr3;oZZGZ\SA\GrMU3
%$=X#Lq+a+rY*I=29B$hJ#p(8T'q$'`*+sKVO%Wc=P4gq0KI=-a[*LbR@T>8cgk4(Qs*IQ%%BtuF+E8Ec"jNY%6cTXODiO]"[l$$a
%?a)Yfa"MCS(?Tqd*%/;il1mO!<?b8rf^E1aB5Xns>d<DL.m2O2hf3i&U$(r@LdsP_'>[p.l!bqZ>iDA7_$W#`3O2Te:LVlH;E1>)
%/m+ZD(J+V!C)3N!Z;(.&r$N6A>s7T(4rpEMl7o<W>0%WM%1A/2gZW\&4[T.u6;NL4T!=CG;]/f%gM?Ci4W6C$@:T#RVlnnrY,gsR
%%Yk]AQ-M8;MA<Qg]_m`&/!!uH;B[ZfiiTK;U>7n;;hU)`+kkU=Lqn.(Y-[DUqXF#nOc7?+)@=5(-*j1O^SL'U$`g;<5SbA'hsPQB
%b(P(Nk/1T-BW[<h!P&QOl?f`53bGI;qt5GDs'[`,_mB;.+CTnZTg7-cXE$g=8$OPNrN5*&SK.0D^0]b<Jk1Lu=WAAH69><?PSFsW
%_?)6+cV'MN`nEB@aE#=MG^]0<pcRQ?<E21^H7-5#%V>SNg;Up=_,+=A(7X7s4Rr,d'!B=LBk(Hb]cL10cPFLB5M_^4Z!<nTe1k$-
%].Tl_7-OV\Fje],C!P4[+M#fU/ic-+(9L([/MSUR/oupdO*Lh@lIW![CXOElH8W>LZ+RK!=uHFt(<P#iZ*G8o?&BTdr?G%t+\jWB
%XiK$co0BRt'&S^Q"6V3a\AHZQZ3^H[%<$Z\d2a>Qo3B#G:P6aiD+12V[Yc`QMq8F"@Foe]Sf[X2LY_B4;gd4Z+*Q:lrTS;DHe@`B
%2oYggTfT9qhWrBi@"L)EV[\PO3ISKT3?/*f=s-."0*b^G"iAb.A#*S=@^X97iUSru.RCG#?d=n[*oTn.1ob_P<-a>c"R0:bi]\e*
%E15#D7FL08JPpKN9dSZ'@$+0ucf83sQJ*"#Nq:iGAl]?EqT+PXiipHE1H^=-]<V#o=uo)%:8VP_aJs9ZX<qFKh-D9+3`5(A<ukhR
%p@isI_O:Mql5=ZToaA1s4%g/Aqlifm1,[],[7Iu+NJF^N9T>r%iQIkfIJ8!?AY(iVVnMD9O8HubnCt\Q^:-;o7aLt__tNf6&\cMS
%Esq;\a96pnTPAF9]juugcXY7_Pb6/*EXO&;+qr3TFTH3Eko/XJE/P.4Yf`/aI]RX\8lHPhI@o&"Z=b!H*3Ukf3Bc[#l=7dFOYeiT
%W\B^uT\noMIi)'H<8/8K@ij&6IqJ&CE,fD9NPsS31ZqW*+j+k)*n##aMN/`_8LrdTPQ&K_%%+L:Q!ZQ+f%c"KpDi#QC>;s*F*,0F
%TpN%_m]VJPrT;dYEWA87MB89[:X5kNDp>UukK*bs&&+bC\'gK;l.K#.I=/BKS1ugaqc%t$=l>mKX<VfBgQJ@*[06^r:6^*]r\Ii,
%W-.Nj!)D:n7[Kl`f(N]'L_G5#/T1]6k$tX)<(;aC.q'\3.U@F^+fAL2KWXGiS1Us!S;.Z\]I7il;K[4+@rR4&K(_(cB6N?MF/6m&
%&FM(R>1<etcA<O7]imKj:QLr?'G^8hCKLfXegG7JDM.a:O]rjf5@.d@;A<c><E2B,hq.U[n9@L?]GO90TCui2]Qrn=T(opIn%fJ.
%%h?K)hr9h1o$M7Im,36["9*qnnB&69jFho$=2%Cf1mMY$<i1_\^t3tKNuOTe6SijNV-)l^E<pu3`cWF>$\?H#Y%fo#9siXo`26SP
%`C8%lf&Rqn'u="@Tq1Kt4dPT7_p5/%^4gT>O,DPZH]N8aTZXeKO+"?k,j1F-l)SiupNV^])(YLn>6oTl?T9$MD59HsR9@G.VdMJ[
%]cPnJCZ+SZ;>0>P_Z&1836[q[[l`QE;q!FE0P5\F:c5=.NfXKgh6WI4:n=fbDDHY?bj2Om_0>\iY0T$ckEA""+$?Gs:=]Y_m'H0O
%g!0?R%Xn&@4ulafS["6)gUE#;7Y5VHP$Y`2?S=)paKUi-1c@K\>-U#$*9n_nncc0`J.+m6;$LlkiA#5q%]'hCGCQI-;n\PRk^-F!
%V\.>``p\;hLG,'JUj7ue_SGoIVV1-SjL]fA:iXFS1(V7je]e?&W]T,r/siPX$@J^r!6-G9S;nnHOZm%'6V0=m'R>'fm,*=>VaUP9
%GT`bD65jE+Zu+7jG</;A]60ac[Sl]SX7rP?fW9#,n+Q8u]9>:n"#)Vkas"1FQ54_[<<MN0.kA*kEaBi:!TVc^N.>.a&sOW>:AJ7)
%ABoo:4Pi\[_3`9&kXN^5*eT4[qJD7BpCVilIe+mM3?=ajP>A@*8!iC'H:Qj5W=KKjB*[P)0D!<Kq</lJS)SQ##:]K%IBoN8UjHCA
%LDaDCDL5(A#,,K*W$mbIpbCrIh4mELcbWlLJXuUZ-6'YNGiU2PAHC'b#0366h)lOuIIch%DE2O\q,=TuipuE$aq9!:mYA"0fWiPe
%$6'':nsoE?LLWB!&=C1N3#2e/@o:YIBf.5A=]IoNqoCq"B[np%<$oJ)cg[)dnW!dM#\K;kWiFeLIJ?_lF\&mCqr-:">pmU<&G(8@
%F9F>UK;/B[n8njh++gbY6-SM2k<i5@57=*D0^DXkp*jhT2AO=,E&>OPm;UGAL,[Y`\%35mQ>'&8<pt_.&;Cq15qjKc[p2U!a!r[6
%MVPS#23OZ5F&Cb3GAE1Ih-@\g5)q<hVYpqg8D(g0%!J!Ld_j^)Y$L)tR+,gh8$233%Du]&4CEQP(9Fosb-DIp)21WHL#WM@@>M=2
%dllJ(FOMM!AcYB7%#,fhY[K?T6"ToQE8(rmA8m=0(@Z4f$1L-eLiu1Wmapu'd?)_$IG#k%5N"Tj+%S%lm`mmYk(-"nbdVjFjui0X
%Sf'3-jHq;-bs1]7*iM(p'V8sGceJ4b>0&Ki.]O^YHGf:niuS!c#^.51m6_Lu%sSf]N;@<Te)JI/KsZ+\=UI[NI7WG@hGK\\?HAKL
%#eT;)SC;Htd,[BE6[8Ou1,4O[#J1'MO9Ji1]u&=FZDspDi>oZona^&nok0m=,4o3H)eI3u5)b(/jC+5.=-`?#%'*<M,BKRkrgMTt
%Q<d"/JPhQSA%V+kP([0I5E<G2h@-38O1NVnLTpE[T_OI=5=W6ao:Yl;T0L9IT**Q'+mc*tpO=4uTCMN.0`,?FrbYQSLRNu0E%S4o
%ZbW)X7mTH))^.2#:Oaa5$_G@ElL4dE"KfQ83(B#=AL`T!d6mRuIQ^O@lZ#T?$!@[O3kj4@&*NIF!JhWQK6PXJ6Qr5C8gt/nZDn&$
%B5ZV)gcLFoeHX6NdAGYYDh^J=RALJW`K<hO?BNWCa,FEniSumB[3)_/MNgD?cnN.i0!LQp"`TfGHXG`m(Duu:K/Ao*^SoT<%g*LV
%aR+Cf]RRe@$9[g#^>,?)C<ltakT@<$&%&&9p<b['kF(&q6im,h[a5tqk_X]ZbYsB*YVK8ZT91XL'(\pX%`4lJmshGf"D.Dkc<MP-
%N=@&OdS[mQIRD`9qHdFCk=4G"bEI2.mY9kFYA4r=,5/t?mb=^c:UrBpqmdBOY.Yc6dA:pEFq=PbY5Q-7p]'W1L`,aO?73tZrVoQR
%37-)6Zn8R8i)@3nAk*uB\Hg[(X?Ur(H+:a-<#SC"lqiF(:'sh>DXZIK,-h>OZg+/he#Tl.HpF]SED7BloJa;lnOuI<K2c?)flg=Y
%`C</Gdcq:+du^b`gjiMgenZ^+-956J,H7j]C<d+Y[;9-I&WSR(rK*O9]>(>B)Fn6ZH*Zir^KdhRq&tO92t-l$)b]W,1V3[Q.*7Ri
%'0.>!+WW&HaoqD:LHHkdr^1D)WtOcCoMC6VSaZ<UC(>dUqLFUT/g*=eYN&.oST]t6iFuku<u?')$eK;QI\6B8ql+H*+(.uO0Y)Rl
%9kg`e:qWQ'<YlrR`U&Xq0@ltG7EI$#5@Vug4:^IaJOPFJrXrQ%?<iDil*PMRIh:;^&lt9&eH2$*LX'[FBOm+ah1k)%'Qf@A/k`>q
%YKQA2LTK:bM@&+`?*?Csibs+^NQc"Ip%6(r+<gG^Kmf8r"-/4FRYt\RVTR7$jdU&</MC34M[o"YDE`pogV(ro/RJI!U6M=@g>-e`
%/9r4>Wh_tM%ENT4V1LENY9i-qZa;0,Ge%]VL2MmN'*D.jM'<tSc>pI9"R*.2o1!?3F\nq9.])mO(&_mUEk.&0X/6u(%XF=]<tu9q
%2btFM8L.adm`-F+hB&9/!OCp[G6s)M,#MMNCM;/1U):r-E^MII"J,%Oit/>!1*tI$.&R[cA<4-`RChpcL[?3I`?ufX-mcM#Q>:9c
%37hYOh^hT].YZ'R3:i1F$fl\+$F+cC,+@,%$E2$S\[6Xq[LHY%NY\o)Gm!I+H`7KXo;WMnp.,Yk\8Q%unZq%Aos+cu/_j2<<Ok/U
%-[a?@&!:WqDAl(#OG0.ELoH@A@r+.09MqKX@r`]FZoOH.(Wtjp:L?*LO(!C,%*HtP)];@U0B?rKki]VY6tRCpqWQ&I(Jocc031i6
%0<^6r.ZE_#X.'UAG(!/"+4X'*[IN?aSham"QN(+gS#+;NdQ6j%Ls61_^k[oX1h/jrHe3&f&E9;-=HI49HVYa7^Olm=3`RCf]6cWL
%#(-^.%o?c97K#-p?,WZAAKt0#f.4H.d/I7g]!WO@di9?EV"28s3R.Oi[#&5Id'XjoSZF?/JP?JlMV>(r_6pM/I"-S=p?g;XK#FXW
%^N`rk@2-e*ak_'<c6Y>a$9`Mq"/dCsAa.%A6E(SWY92U1?8!ldqF;,c88sPrMFP&?:'rJ'<)Jj[=u(HN@h<\cMCDJZ.>,Q]o&QWt
%Mkt;l:c(H7hO8"j5J4O[-Yl/I>?("+0X4)\NEeTcc.:=G%E-1S6e;gVO(;-3Of<h)kf[*&qNbE\n@VdHe)DM5?6el;/Oc9m)*V\<
%g!%+Ha7:lW[?KIHD?L.oVm01+ZE!A;R,k(i_dRbnX_?;pH*us5Du_B4a8GEeXBJG*=/L89%c.c_cTF;D635fp=^jJ8<[M<.l)q+E
%*kPusO5h&XPQcH(9rmM)#rW[dWmotfTJcp:21.6#M&MeF1QaH&1ZQUpZb>QBH0rHuA@4a$Vg,aQR@"`o=Ip[MX3,[Z%2$MrjDOM2
%[AW%WlU,Q'2W_'M?@E`H6Y(#BCugr'TieB7&sDVCA*[r];oh6iXIUrcLLqWXoPII6FA0F$pgS'"q!B^6#NMf(880]%VieKW`hbD_
%8i8`+g-(Cr,jj'bgDi[DVq_DL*[.oKN1XQem:"J%"nU*sLLh<BQ*B_BPFJo1@H\6<bb!SaO])hU?Vo8;,^,dk?&[eH'6;RlB*EX>
%ZsRZe;)@uHnPQnRGC)tk:6-:,]-sFVn&H$e:]uLeD96Xg31;#$pSaoW\_h1C*MX7IQNsjR:,.OPZ9XKmE8(1'@1[FbA+F6<<V4Xa
%7teRtcj(AQ@I>YsIu:*@'oHX\FX7<HB-)6B[A]^aU#;;iUdOs"D(,,3i_!C\Y>s;nB>9YKrGoRM&det!BHBT7=7`l\h2XbZJo6e@
%^qpdU4>QpqT,guia79!b,p0TUBNeG+]-9ij%"B^n3p&h24)C-.$?%'HCW'CS]X^t=*LB_EI.,tBR[)'5JWRq_iU[e$Fp2ouCUDG$
%HuIATm`,f*O$*^=G5dM::G//4M,m;\fbd_9eG<;.KVbt?5u-+i5V=a`o!n2OJARhlMT("d^0>+&hp^uQE>#ET1\D9a/!`]5cS*V5
%0p&tpL5a=**;X@D6[k0kYk]Q[;)AJ@kIf8R[:u%A((ISJ@7N.!?R+;HKrBg%KS+=_H^YJClLo<1<LpI07b"o5W2a\[c177$g"rH%
%RT`QEcR$LOqASKP!hQ"_aNSJV>?DnM9Rn]*L%#6"P3Z0t7CpEh0cuh]bIpl:,6(gf)9A_2qJhBK21KcZL;nYF#q_4NZ.ZF.YM&jB
%]mO(jS*/gM$7`M%&$k"RHss!r7un/!cQ!I!coaE)\:T%FZ<8N<$2qs7F][J1(0VJN)Tbs\G$<i<%F6pp(_!a7.LB]S"6!h'7SP9l
%$OSf]M6=C[s2\DSX^*ha)8Q`HX/*Jc2=Y>P`F]jJlY7_sD)IVP/ZVK/MNWi:gW?f_<G?TGBOkc>dD8o9Uf$euqWB%\%!:U*S[/G#
%"'BYI?+Z),&VsR0n5!`F@Dd8ldjGl@[N$r*KsFjm<W#-PL9tZ9nn0r&?l,)EDo7Rs,0B8]'tn`FnhRYJgX%^QP4j^G[VK$'H$.fd
%7qA(HWD[ogDlRmAW$qi6QrpDlq"%p$L=T2DYnT4Vg5'Zdm)N4li/7]!%85PN,B7bE?;qO3g'8I\p9RR0$VD(o@UbcHK38V_PVWbs
%'om@S-BTg7;W*.n\)Zt:59**"hhq["5in]4?bsU5_QVM&KlW>Wo?d.4N8,]dMm[FMZ!m`;bU%?APe98Vbd'g$(&=,^!usj`s7e90
%f<q+_L@3BtO0D1e9bH\<`hSBTdPrnB9#3nn+#N1S$$QN/O1%DRfK9Rhf)\rE?03h;1_X;7ia+>G,=s1M2Nj7&VBZC'NToI!0L19/
%XgoNs.R$*KXE+Y&lei$.n$T'uLuXP0Ebb9A!f13,A%2RQT]F]B7d@IsPgmV?m7&dT'V69si;6G!q)h9j9^>Ut8!=nQfOU[R;1/l'
%DMP+U%U<$A+r!CVYM^2D>,6r!A&s,?:TDG!X<mnOaWo<pjGN]755B_+FnW'T_os1l1(UitbH=WX%n=p!9Gj+0IO)8dPL;%rnC)C6
%Y`\$iLa1&NQ7:/m>BY0$4cH?p`0s="Ek=WP55[d>>Q'4s%cqR$Z/h!YM?<6'3S?Ir"Ul>BXr07Q<PphDASa>"MFd*fFK3SZ<oBk8
%jFUjTSk9se88F^HF/#,)UWNqLlL5:_I?\$0mo8Y/R+_p==:=<=&LHU)lm4?2liKUD_&tC58k(;O)+Mm`20WTkPd&70fs$]b.KCgs
%mdK"fn$,[c7`UJ*qVC9da`-!?Kh-#hbU8gX!3)>t::%N(+WcXXdrKC$XK88N1#`7&GW'>qlUkuG4_d@SEh!Ni%tAX3VsPK`I@jH=
%@d(sMbNEj@=AjJL$_'l"qc)mc^0gG&?j0Qf`T_q'[aF.-0lqV@PRs'8*[jQZ_EWj3b;h"#&n7514WI><`l?b<qcm1`L7,.6X8?"b
%^g-7mNSQ`'U=Mm!NcW-;+rhA('GH`83s%4<R<pFP7g2P0-d'LGp1K7FeM*)CF>$3\P#I0b>W0g2ftVch$.i-VkZZ'_$X2h3)<1Oi
%g\GEd4kpFHOgcAAX*Q2$_i)Yap+saA3WkAu/'r.)KeEHTa93qYKN\_]ZkdIqHb8??2=j%L<e"'$MK4`=bZ<IXPF[`]K2suc\#B;H
%mGqglUnFl]&94gon+6#YaA`^pht5MA:>*,E4tOj@/W<$ZqrRsc?_C?[*U`@GM4K&pChpI+?Me;(pnRUCc,]Ot3T$?ILnjk7W/`gJ
%U@R#Q1/o^IgS3??%2KM@F:M?2WjKh`Yhf+:2i*1:,,V2>J^5Go%o_OJ+8EL,^J^Msgn@H<#TH4diGhS$Q)V!3T6'0mlOZctY9a_m
%Bs=MKZn#,+PN>\1":dNZmUsUa.I]h'Ur[B/Y*Tp-Q`=i`i0h8HruIfPXeUb1]VcuV1j7:rG^)WE_#]#;:OY8XWRa.)Lp,3TPSMFd
%DKpTXI26Zf(Hmr4=*2V1[0e"*cnbZcCt9b3h^DuOZbM6`"HWe9p$a(31%p4&?8pVj]7_tNHC$%iZ-0KoiK9SArD;W0S6%[XM%3IL
%1YM;sJTbnG5X@fV27,HH]dknHNkp"S4r#s1lYmj2n^qbYC0>tG_QmhVHlOcQ5hd,gGiO%hN5h"O1*Dt__4@^7ciW7JWn)Pi3J1Ds
%Ya8n6p7,mAb<s_?8pj91DWl!0H>Re[Q\R-=BZb[OrAIbfE]DGq!a*,)*-829(+o]HPp[d0X;>]`K(9a*I>dQ?Rd6ki,EEUagUq9"
%h&1>FSpL(1)B+m7q.-MtCt.Jo7l?I*N6idWP'9sQofa_H1g#A'cpYBHjBg@bbPpAMLSad1S@X`6jH,tiQsn6N*Eh>K+=j]V^3\9p
%Q>\44KQ1iG9LfW^i+3>PJ#?ZuVmb]uUYT82qZ61K(%(7\cq?Dd_W>\'H7;mW=#^JJ'NL7X\SLRsJm3_fSF1XU&\I9L3&qu<bQT#k
%W&eb3B!$(UEi0RT>54G/%MLOmgSRK]+IW"S)*n")-B'%/St;n"&4$XaGYS)D3kQ5U]=<fOH[9=p0NX5-l5S$LH2k^Q=eC>5OJm$5
%$fjA9qOlGDZ8VXBCA"h:XF3b1,'%Ae@TM;>c1F://9@,>'5"_+q*mRg#)JoVfAlSP-S$L_N\hd58)e8I*`7VbY@J0S8t;nYC'M'O
%&mDO),C4`)q_3N?[5$O6=K:gBrn@cs534BJU(%dIm`RuYX\HQrQ42hlnTlKfW`I:=L]n\+H1.lm7C'tW%[PQkq(I0fbsnWQYF2+.
%-u.?A<en/'>X!m9P[EAo0M,WUiY"TDjc](T*U`Sl3qjq[\CmSq],UcjGrd.0F[,)EAp`B]r^;%ak+S/]D*@Q@-rV%q7W=LrAfd=:
%G3fd3-=fYad;*$Oh\daU".FWep3^B0lZF$7HjT-iSYe;d$<F[tTq90ORO#e):A>?=SKT.R'!(uA0C[P`\c5"C3&#qVr^PXMQP;MT
%f'o8:!qkJZd:Ej%TR!?'i:DWqY"GnkEg)PNn:#Z74>E!W&,+p[<.mEW_&X@u0'Pc]$(_LV\)ud*QVtIWFBS>,4>%2%He4%_Y8eWd
%&"QL0h:%7)\9*P>:V;C:_6M]b`26=SkO8]JjmG*"G)n\S#I,CiX#G-RpsctKdpk*h')#8RL';;5,dcZ2MNc(@D0a,Y@!?d_]-0*g
%)uO_*X?Ck!mUo4,2WV!DO-=9"8JWeH>!/.5JC):Qi5[A#[(cU(@I>AU$C2i]0acY#j4U_)Qq'XmNd7KU^^Q:K#o^&6'ICt;d#R1H
%C13u\Z]ReTio9WQ]bX4qjT6"7\iM-*4q/@.i]-7%Ceq=7H_`aZc[^MFJ#=U),$@ap'c+KP]O'p<D1Thg`bY*F_/i&!I"0OneoA6S
%E'm\%d9Hm(I5EGGrL#0VJ?@2dLr4XXF=?]dc\Utl;"k$4?csB-$h!tTKZ2'9E]7PrGFR3"O"Jd+`Zo@DRdnbVVs#,gCaI88<NU-o
%>5Q$&qANA-noYNCePuiMY8T/U/rO$@QW)Koa3/Fkfg*:VU>iR'c?I$P_Z;pr;CR5qa(28S"HAj`m'mQZPN_l!)6=BL1t%ajrh6V!
%\?n7>=(HOBRotu0G-r/O\l;?Y"9keAG#fJ8XGQ@MY?*)c!^\Yf-i3@jife/oWV<C^)q`#i6B@rQ5]c;hV6[O/GTP`6Z=8tJ@1PAX
%cs5"C8G3,5.2ZZ&ebtMZ0F&:`eV^.Q2b.<L\`A=_ON;1_qLWmcjG)##>6<E^XSH(sp^F'1'5G.6XkIc01'@3nX3=E]:mYdl&CKr@
%ll&$>6aWN(hb1>3p?SEY:Z7&'>FA.AY@X%_U,Ia$"+V;XWg9?'"*YCZ=-^PVGnR4-DA(nc+dA&qH6.aq=JX"Lp(5%DVP<_Q8ri-N
%6Z(^pC(o^Hj3ijZ)!H,3\.",>k\Eo,55Z+#iOS&*\a7)aJrrQ',T54hZ%l]d'pULX@l3G@"F=nP:XoE@/r^3;$.9XUUeXKJ&u]]G
%Jq7`q1)`;d$,(]hM?EN@J^!e3Ks\Qg8.-&.9_J(6k8a$F2M-*h7JH";kO\YW9f[q^UnOiefT`,6CSksJ-eX`H3n833g64qeM@1(r
%_5a^Z*)f30Lf#aQ;1(S&d6@CK3=K$9aQoMn$`J@@,&N*3"uJ(sm\jf%O4]E>BbmX2e9P<:n'EeU]9*5L4\Udqa3^YqGNape.FS3b
%i`E]70>ImX4I.3&0.Mm69#XQ-R=G-t])me'?;7>V*nN6j1B7!0HT57=\K5BRId^rim@J.gFsTWCZW5&b"cgM(5XohHnX%$)7JRX)
%kWOSFDht=,<,-1B5e/%s/%P$7b;3HSX[YF*OUgGs$,tE8;>&F3&ZfQbm'VPFo:Dg0R[.Md.$,JL5crsG56pLHKCG="@sP:.'VjVB
%^^dItNaJ_3RA^9?8mQf#c3!@LAhHo_f'M5!^.C7Z[t?&U_Y2u6^A0:SlPcp&dTQ;WbAH"-)uqFdaoI13`2/7(838@UVoN]8X)o($
%B/*r)V8YU+jG.;g[FA(3Bl51;"'MIj9SjdggtpSK?VE4*+KA`e]nWP..&i*_F;,DVR205+EO*3:$_!(#H_o>o%LZpfFU.T>o9^>i
%:E6Wk,easeBfVKcCJ\8G>O#TJG#=6pQr4]Uj;HQ?90SS`2jm#Vf&F0Q7Sr?j4s+R]FBdn'BhGq^9*8UlVS(CkNR!6]JpM,J*>F'b
%U]X!kb?/aQ$o#'-MNlJ4d'`kk%<&^Cdl\iq@A(^5W0ZXWJ0^,UjLB^nD%>V](*\*!UrNA"OWJH0>0;B0p[uWR`2r64qW92Wa_Z1J
%S5_9*9<`N*apGFbSNoro_aNqd'R-#3K:9H`QgptQ?_o_eVi$K?8ak,fNH/]sA`F*RpX0X[>rG6-CukDUFX[c8nUI]7LWW?33cN#(
%C6$n6kQDsI=[jZ3$H32IjKc4p]pMoC_%\('E12D+)fLd4L]etBE=]$`AXQ!h!RL;aN@g`(%+Q7VRBru8XFdpj]NTr9Mju]Z.Y"/+
%6-*oA:GfOR;ad2[H3n;=Q!+?jFm0qbb9EJ!$$94S)1b,Fn-m]%QMkcsT>qXtjVdVLWB1G]d?%aX6]P(XF!#*%>W^`Eo_U>GpVaGq
%r@3C3F[cSn6Z4'%ATRY1G=LR2e+1\\m?>D\EFWX4?D)pHfn)6(W)4?7BjQ46S+@Cp3/eWS-%(d0O@0M@+:AEe%VIAR^me7l0/0Jf
%Y2Hge-"l>!di>R:)80^ejr0<*Oj$.3fY)?2:f4qF\`.rb5Wo5MpsjQ4Q]X%:\]'DS]V5f?$e4c_iXki)'ef'&R9$ifJCP!dkjS24
%IQb@1Qf4@W'l[7O(/)S'L\>s4M&puX?&.WbO)nYM1-F?9e-4C<oCP#'gUcnML$tJ8@2O.4/c_&+q!$>O0c`GRa4=l'8:s^Idr?;)
%Bd6^S.*p9ieM=gqbVmC9N*QO[jecVWXg:fY'o?cbfhn6Xe\B=I3mJp+feETj^mnrX_!;gCQe.7;<JE_5$#L9H[AJtaI)iM!8V!EZ
%X2'YINeuJ?0'p$gekd_VW`'l#4LC2nGA;F8V;B?LkXHW,Y@rtZ%17/_2Hh&uV3aKO\!;oDcF4Ft+/]Dm5+*.jWN*KS-@6NlUtZ/W
%mGZnO3ERdU)2\&m82*u"8;B-L$;(Hg,(S%*7U<=.SD>G;*?F?%-LEesa$J'@s5UnIUO7S@Mnt"J-i5pN<o[fcJFUA"bG=d<?1Qk(
%8AsVWSJOWRPAsK^e5q!$Qq0Y'JW%Y4Ef^ZDqq22dbBa)[jeudW48#Y1)[EF,qK\f$(S0$\.8FNo##qi!ki5U/m02.I#D)77(5+uK
%g^`l9"RY>7MIIq,Y:<agj`f5E%.Y.YCrh:/P)7SQT_8f;Yok*cNrc&Vl$QY+ol[b)msc@eqBTg\dp<-Q&f:1<L%^n(5;-],H5C>i
%.-)N%M5Y3D#[?o:)0Va^-IDOGB`Z]&UOh[,KmM)h`2mMOG>HaF`bNNhIo\p,Pq/oB&I4%1j0ZSE.Q"JhhjG4MF)XI7o^nOFA:-hr
%5FDCXo:jc'F@ppNOfu*%R4]0LH@MWOSs`b,Tb@3h]qf5+@AOAG&JoJE8DqCs["\XMZ`rE]A`]CY-ub)c$?Jh(mlTd58/*/SHlkJZ
%JpL_*`u)r_s"SAoD=WK3T/CIW]K)O!Uudt0Z(7")erFtk`VH:@G[P.7EbX?;X@jM4`<5fnb)7sNa>8h'jMTNH00n-ZZ1d&/3!.H$
%q_h*T1HH:iMZ[OD0P$..k$$(gZF[$;jt$$R)7,stR)YFqj>88/Ga[%CK&WVb=I-Qo$DgNCY\>BH?sO'._X++<JBH^N3TE;!s-of#
%,=OeWco+6lc;^I46Zm*$HQTirYbOLC&7&C(6DYEQh[tRBKkeqb/eJML,P2ZDCVR?d$l'<ipE/uqJicW<QC'=%W:HW&"]&m"?!n:1
%2A_(l&H.gKkC_%?TF[eY^'dr>8i=`8RTBds'"MsKos,^q&FQSt*!WEBK^*C)j_F(I3mm'u1([8@oc0<-%Ln_Fk(WMG7NjjMONp@!
%d57eb'?/3.70]E!,3P!8d=m$@eWD`]a1h@W$^B`DoS5RsU"I,S\/qJ&$@cg6&R_&m*?ZRC\^jpq9,KPAk"n&I;:U5:IJe)6:(UFK
%l-/ff=`$%;130Dq<KgKe@#mK6"*%:+KE)3"T!b6Mf@(%+#@pTm)WU'72Uk7tlB2&d@[<b1=o+jNC[M5Vg>K622X4-`?!A>s!LcCl
%"YlP_:S@DX'"]@[fApaPGVen9>9LGor5=d9FFk,/>3JH0Fg-PZ#GM!TZVQd]j-9,EdGHO5oLPK!X!q9&CaZZnI$['@auCXNF$OiU
%%m)dH^K..B(#tF(Y_(%9_r9go*1u+hk`:/g@`70&=II4Ep(rg@5V(l0c"b*"kFk0u?4o2]gJNsH)*<]Eq]Ic/TJ^II:DB'-5FFJ<
%3>>G_nFn1TS%W?oZP$t,;AZ[TRQ68m)[Obd9-j=p=r@DOlE1OU\Gen6r-+u55Wan.\C(m\/65k#/N?r1GOs:DOX$!IPX?r>j`7Xo
%Ca(WP$J;aoZEVVC0!(GbHdL6e&O7Eq"(3^,i<7*QgnEU"#i3Ae&L7UeniT(M"@e$5KiK`EHmFI>coQJTe5p9*)nAI@l1VOF&%k)Q
%,[cj#Al'"*3D&ZZ<uoYr"_D2`mFgGF]?YCfoV3G"Xjq.=4LYi4LquKchqaf$HNBNc;l%8r:QXTBqFHJ]O4L$3>33-.'si(A$pk"j
%q>Bp4f?^*IQ6@9'Q#`=#c]2U81J+r&H_X26Pi4mbohG>)`.rm[*sU*jAUHd7iF]\8"+&VP4OpTH5sa1US/NnIO3l*GeIfRD5)7QE
%jO\W-fa#*3F2IXp+6.6/OPD`m<?=3uFLWp=dCi9rjOEXHV#Ha\b^&!#G8NF4s5>HT6n`]0!$j\hU[>dbOZUAiL\iX:b[L%IPjM/n
%.C#.V."l(j7nQeT5oP+VCXg+lS;;S#CQa\gRe\t8[\@o&V7\M8Y5RY;_%nB:PCf9]bi7r9(0X$i$5,)[==6Ol=7**5&#[>qFgEjC
%0EPh.U#]+>5+fYH;@#OI\IQ6dJ9I@.,epPd*rDn9;=Ju%5&qYHaR(@+kAqY2IaO6,7U<hJ/g!3>:K6_U!q&?Yc]O)Q\\$,ap+:lM
%4SIJ_@0@+#]Y[O++P@j_0s+@fr%Q/[`VH\2%oXVQl%o4/V<%k4UDOS5`GQu"`EOV,Z\%E@fL:EC9rGRaNI1n&"?rt3XVNWTFVp;q
%Vq?G?ffM1SjE_2dgF"c['3TE3Y&2!c7?[C[1Kk.\q4*?q#;[$gn8RVlEs<"u!aCI[Gd)7ph$)FuTh7)=/"HE87tBWM$#9\d47TM0
%RCB?N[7'qDcR%^*lSZL7&c9b1UN$-2Td+u#=M4r%Be:oA>;gif(pT67eq`(Bla$W6T);;S6cR:mCJ>$p7&.W5K25i;@c?-.G2Hf5
%.Itkp[FH2^E3>F$.gDa.!=]!DrZ.GMc9%dAf1EFMHKa]T]iCQKiR)Ht/Z:[Ac@>mp!diHp#j36["pqSKDr]QYpHB)Z%KXY_.oe;.
%PN1TjQ'+mkjLX``fVOD^@&f+<^nRb6Y4LH*_F6&KZ>u7?!BfJdq2Ai0LQlfLKq;"qiRQRDI1lJ/fuLGR)96/B-hZ'),3csT)FDg;
%S)eP,knU=_I-k^/?r$3r6J_<qqrN5(M/(HZOc#9d#4>U8Jsp%U^E`A&0dB:7,b##%84#m&0XWm162Q-tpGuQ!d`es)!9jf&h;?T.
%;B57'l)68BRg<St5g"`'kq&X);g.4jmis[]K&T-p5,fNOTdnp<67_:8D0;)[bZ23!hbg`jfX2s;.dq#k15]okj0_;:^fNAb.)_J$
%C=XYk.\=J!M$/%uf!/IsOTQN18@Ts((G+5S)V?:sUTbqs6Nm+li%BF=F%5kST$_):p;%E*o&]NOYrK.,0q*!,3(9VN\dX-efg"%_
%9k@GJD^0F.k]V[C[che@In!0;-.+.ealHF8LsjcF,+.$[3V(k5oS?ao9nh`<LDUq+:(CTbbk\D<QIn/:j$Pe30@AQ4HAVSr;]K-G
%Op2:I2@(k.b&1Y7%Dd5E=W9p].ZpC->jY=4mHh_!5OsoVchOejq-QUDXb63\r]=cFLa+4o=tiS\7Z,c_=gF0r]sHlfj^KCcmY(.)
%P'%?iVhF4W_m66fipXi`mAi+`M`r`s.Fr&-J5m3We%'?U5Y!C7$jg,bTZY&7VC2oa:aP&AIQ)ljkA>5p2Q5/jE3`)&=i^-if:L]m
%Z1DHLP_e#kYue_TDUWt+iG?/_c'6]A19:u-@<FuNd*r^*gIq$d5%>V=;sjQm"J!#l]>aojThFga+g,t/0l_ped!Xnp9^ghU:HR0s
%[#`g6b,'T8^iHsnhK'&&L;T$P\Y&3&PXC<-e0..YESHqTLgfFbnAbtC>(#0i<"E&(;X>S/r"$^6jW$:fM.kDqS>_?M.*+D/MP2`d
%,.<5=<?;V1f<tBEUWoS")#RX(W2^b.p;!s%e=Jg<)FpFPMGe\<b$_&;=b%2F#qTduDK2a'&u-tRZ]g.0-\S?C!LGnS9mbHQ`W>SU
%dAP'n%c-tN&?APRL358<Uk+lEMHYq<B<?=OYHg2N>3knFN_:VnCc0o$6f;m6N\GXCCK9`Ka6Mb0XQZTZpVT;%$]2/t98hCp:J9UQ
%Pjns]fod`Y:aU<#F5#=u2!!Bfm5RLG9W:i%rHLVb]4^T\&AkoR41q5'XLc)8AH&YTg``"Sn%ToMobt;o*[Xr(XcQ%[oP`7E`FD2p
%ScCEkG/['S#k;X/.c1pA$IP7l7B$;)ILDs'L_)*)CR#?B`oQ]PhY^-7VVKO7o6Tdao[;nY-8HP2hV6)dFbsK:F\FDLBXdZi6V;0h
%(;sVHU+jR+[pC1WE7nh_CnR:AddE;.%b]_hj+BA#4LZXJSPR:2bXqo$QWc[,8c2WNp0ni9OYc]O/_YPT1O7&a[Q4"J=8AS\9O-=>
%3o[!\W6/fF;q[VQ4%b[1^Z-'A^T1pf8Yo)=C$H?(b@V`g?WN8YW+<4KPG;/O:]PA='<Qrof8[(/5n1JFLFdE9=Z%6>8Ap)'A">gt
%@5[N>]bY:,k^q+2c+De[GjF_Fi53,;-"*#4o._Kob?/IbjEJf%RW<)S?+.+-6_Wb#6rDGt_cVfg)[R>B/=SFck4Rt`0Mo:Ai!`]=
%T+^G=G(p186O-/f%Yl9QfPqKl8`;*8#%*d5?VY"#eM2&0f!)YOh\N0b.Au+uoHG-).FP:H[\?\sQ6:hgT]&!D:"^JM:L5jZ'tJLN
%re[[MEmcJZ'U5RK3SZcN/^N(X<_t;+)Zr:f3^hP6'GKKfEMbgs6*2/-0=d/dg`m77U`UacQD31+&W/TI1PrWF19<ooGCkMuObZsi
%5r@+f(kG'8V*l=o!FA'Qo*eEkjC#!eJi(?)IMJ46b$*YWd#M,*Y#Wh+Z]:sopus&%kMl$8Oteu62u6_^kLJ\=MMT$h/3a#@XgQ8I
%ObBh=P3?\^Er-6cGLK_fT=1D/i>dtuIK>:_KWlV?N7P.I\>R;s>d4k4IasoR*FlR-h1BNCYj*.hMQDcCV7D%+VW6V'fh`EQH(V`"
%F'pbpa*[\=.,R"T;IO6u(5r%LkLbqck[[F[';c:cYG`&:[t0,lHo\<V&ir?U'qGPW:GJBK1p4/_",X9_EiMJY$?pNQl<SI>;16+r
%HFA3*X_:Z@G"R)fXbe:$mdFF$!J3K<:.R>"CE'0K1PUU0<@^EC*);Ak=@/G18j=U;[Aa0RG=VB6g&78/jnA]ip2-q?`+i?A%HftB
%QNhjt9r4"PP"4=V#RaTCoM#hE6S#[Xj`IQun#^U*P15rLQMn*,X"(THb2p6o@E5m+*It6?_!A+)S:T,L:57rjip`oKBd0TNk'-;8
%Qq9'o+[YTC$?Nj3qTsLfJ*ZHVFWRTB1R.,2O<JY<iV=ROJtr>_X:$<AKQ\2LSq5hO6+dA&SbX+sBUB)fMjh_g&oVZd(VWld;gc+g
%bXs79GA#seK3Q*b\G*/oT*:HsGY1CY,%gKA"'!q*aHqPHL7'4j9kIL-a5W+!\4H2A4!,uhn/<T)_"G5_k(,\>C:&j2=YOmXB9a.i
%cpuQn#G_*q\@6@)RM6$"jK_pCV9[1*BJ#krF\imapNUd3_[;RfliZkU+"Qu6X;-IkFdfAO-/0e-"]$\ZPua2[H;1ru.b"L1mJr(1
%ZIW97NXUl(2`C$,X0en_;rYg.QNf:%S0N@9)U3up/n\*O2#mIc,$p\ULMpJT-HH)%U%j/M\kMdkD[hm?GlTL>!RukrAY<%8.tqEp
%,]q6U^VO=/lZ?(1<RE^IYXt2Jk+ka_L]JW5YIrX+R@O[C@Ost5&2VJOYga/^:)Ro#.Yd!(Lc/!A[V++LEMo0)J$`NQPkq`,T-anj
%iR7O3U4Bh=Mp[tAbQ@&+7"Oe.^?4TH\O(IU9baDJd*=X!$KKR]a2^:[P_AAc2GM7O9JXXK9<e<:"gUo:E`pbg2(&\4k88e1kK&!g
%pB:]fAb*4p;Zr5&I6=A48cSWN73FdX1lo'o_KZ0!#'5[;a20q#RNc]o6KIeo7F79dbap!E%6ZRiJhRUpH&VV'@2L+3AEWmKE;.#i
%Nq^8:gffk.K/%no].I(QcJVueoYFN7pO1n#OeDek)qHe?(b:"F5%;CKL+!R-%Pd0V_;qT%1;Q^H.<DVYdgBPP,j*%7pWe"U7"H]]
%8l#eC?g-A9R#-RQLD^OJ*,Dq*U;=3EU(RX$PX2=Fo@JcCmW/IOY^Z?Lj7M=`HV4-iUIaMOXS/HEi.JD0JDj<o0)QjddOk1-*#r@"
%CWXW=G86<t\KH>b\A1ndNhaT@'1rt+*VCI;G"CsMKu\Fk1#ptnZp`pCkuTNAn^s'7,;$t5N"o.Yhs[-71cmslQF-W9$!ZSQ,IC\@
%@;ap&%n6*!_*kR0QO4C,fMD+D%BO?skp:a#A##*p2WAA\0USEqr9)ESI!+VUiE,[:$.][?X\#>H6-g!0f+A4%[-bpq!VR,DaII1)
%YXZ$uOH.]-H][+\\slrmV@b&o-GeaMUDX0s.br(cq#hsq0u$cmi:gZ0#JY$M76)'u!PiV:(UZLoeq!2#kWRI@BrHCq-W,ZZ_BW*F
%J)YfHe:[=0@[b`Z2o$3L&:]_ZER^pgI_s7+Gu.W$Ma!,2KO95mmYBJX&p#'149b-/Z]!dT6[dfd@!YaR0aP^Bo1t;reCcl:m!X[B
%<0$kLBV$d-X2k`Kja;EKd//ICE\Hs'!n:QP[?@9XG-4>:Io_\M4l6bo#b\I16`kB'I/e`'BR1>d23mZgSl*0GJPaV=P(@=T"uA!B
%#8+#:(p6lsL:Qa9=MRY)^fu@WhPWlg``2PEjEbojAek*lmuI_*jJ*<=aa%_%I\KOmSV5J)Bed@+3U\qEahop.H!\@L/=7g-`3\b\
%n:A.83.)W6Fo[\^pEC9IFo,Kj5VKC`]9V]ufp=,U6`6PHfA\Jf,QKObrqcq*'RmuATI`Ked(e=7FUhAEjMYA:"=J'S6udaRd:F'&
%6g'@%hp=`<,[58m@J9:iY9=A<CuK\ZFi;7IlLUoB"sW_X$+=d"A3J:4j!e\b,p4<O=!KMH1a^3h,2\WfOmQ#%n0gG6'tIbQS8U%p
%\mi1Tm3UVu[hDHqHf]hKp!q@\kj$JDnu_)9.8r7-ogc1=hbQ'ZmiB?;5&Fk9Y&UP>N')Nd'@Ng)fr?)h*o]`D$_3;of#rVVkL8h[
%iBZ)B8'M)!jk7Z@alplJi6OT:4OT82=lgQ>U<&$4C_'2B3%2oAOg0^T,[M5KSLhip>2:sbK<PP1(iL2!TW%TrZa!B*")Pq6o8RSZ
%#3:u<)n6qoSVuLaqti(8%!`TX7gAO65<rcE'NmI:eHRW1Ua"fSaD:?7?8=PNjThpN/eN/@Kh]L.\haPkg]q%d#^ta<ERl"`%5&64
%(XK2n6t($4r8]QJPn4Yt3qYrngC32GLY^1)FK;UeLZjX6X#r?rJ4#XJMe>oDeC1783ca=3e\N`c23Bc!R%C=%).if13/$9mCJ+.8
%!?.;bjV4USIkgkX_&p=?**U/sdb9J;^5?L?h3-rM*#8>N?grDdGD@)q9>#Em2@VCFhb&$VPn%Yo01n7<=jU0jiY0foQ/p`34YZ2P
%_X]ZchbC(dJJ'$NT*m)s_rPd%$tYG86JH3Xk>;thLk].G3[I0CC1Ir2T9qj,K/GY#.BHRG*<ILu%?1r*G^o2JVa(;S./F!klK\3t
%EY[EG;(^fk)oFHA=)d'SmN8"aQ5U>BYUbk:EA5UVX-?Jkf5bC2P<ba:XrT&uLH1mpDEW,f"G[f#D:rIV=W6aFZFcJXPh]Ul$l/NM
%;I`&XC#(@qMubL8aZgo:q*&nEGNS)3+Zu]qpQKNl_DC8FF+L;H/X2n70bP2J`sPkdpk3B+l4]^KVFNY.%tiBWHMGOmO8:6]V%:rI
%'9d%iCk`+^BF9>9Eh-:FX;`_EXM@a5<)oYF(ldUEFQrC73S:BHOXT/`HLL=#"U'\MFH.)t4J#U<J168<#R)2Q+R;?,Rs8o[d^]T>
%#8h?p=0%M.?_U&!P/`Jncda'Sj9=8b'K1U`NN5_Ro@[PI&ib='ZROErBumMW4?jh7'$4R^1WHq$P0sD2aEEl'X[:R"H$9Od/XN+<
%PEjif1jT1slP<5s8EV\AJhHD=9^Ns7FtkV#IPrUJKQFje7%>30bBeB4(4/c+UKm`t:K,_P6RFV%W;qACgfmY`':9J)Jq1[p`&s]5
%>QMNf<f$H+8"(/B[\.nBO-Y4'3ZWbt2D7/r6o6SD?6hAV:R;oLq-b?2.r4WLhZ[@2a5JS[bbAFb&;<A\,S$@P0"A9'i(*IL$R3Am
%bZoe9EIPW0q;Fkr39.#R;o'Aod:sSZRW:s?b`Wj766AS$6s8Pp;!LZW1H$.,+^Yp6H4(>6_I"+!SB/F;PWd`u?fo&6+3i/fY).WZ
%=>]RDgC,Y=nO-e<<KMU%9O04\ka^&m$dGn`aC$%-AXJ9^V-WahL^(b/oCmR8ijd5H/0$u97u\Gd7+B#9#COu+0,M_3eV>]-L&b#<
%"<Jt#I$G`T%C`-8CD`kS0kZRb*+e]YM:lo>&b%&4m*++MPTiKrZi5M1-Bn2,/YO8^7o!LG;'`]B]&"J8oD3Je"kV6OH3Wg<m@AY0
%8rIp$EVEP?(kKV+:HFLG`D0'0&Ma!sF+ZYUEU2S>!r><^onaRsa0Cie,"4="7#l.Oq+1Ddb+g&d#XiK`>Qd/[Lg7?hen/ut9K6UI
%46)-\20.'QH<rthE\#Ip&AK4>IEa24q`HWgRX>>*c+P<#H?`X1LBNFGR^9&A0M?r63/c/C,)c!dM8DEY,aF?;"LN+$FrtB`mW@Rh
%"`b.u$3<_l@]ag\+$k=?_6!eL1!`5D>okD+Z@_;&<u'[M"!OINE-S&M(SY_YI$lcAVHPa?T.p"@Lt>P3HMc"F(5-N6Ab`gg.?66;
%$1ZaQ8V^1P&7d%(+Yq`D!JD.M$Q"B9PF7o>,_)=BELC9M'S/TZ7n5N`X1cGJ;^R&f*O]l"A0ehL?<@sE3/LHcKU(9[,W&$WE7JT(
%N4;a*`qAXb?SrJC&&,uK`,iK56L`,HgF,=kMFag"&(:_6W.;If.Of4)ZTKnIZuY)@LM23@l\)cWNj.?c#Jj^slgu`FK=5MB]%T*$
%gNrD@gJ@\PJo_c;RrR<ko-$FCl%$]u:A2h]fPGFu-r0aejOu@k!OJ&HC.:'c:AO'h`K)jK@;ont)9T+:#E7_]"fGFc:#XYPa+$+<
%[Dq1mU,iD]V5,GnO]Y9(rG45j]PB;'o"+'gb13E+N(aEYl@%maj)uLn9WSZ#J8YmZo':hKUO%srZ'dfjOAb-HQ=D"-#;WBR[_u#f
%#Oc&`.*XBK$Hh60Atn7tEp>=@/DD5n'-X+6O`%"?QOO'3`Jq9nB.&RUi\2\r%r03T2ro[?lg@9,+c_G#RRX+PpCB562ONVTh007:
%!pET:5ueS[N-8MNp'6eP"^?6kk,S+JKJTrf@1uomi`:c6p0MrN169[\Y")Q3<fuhkJ!pcVB6G%s]]A%I4n<-die24YT)Het0PC(]
%CRb!EK>BoE"kQa"[LHK1pY#^JhbM._4s%t7VV[3cYeB`>SdesoXq&/>rM*$OWfaN./S`'(WWDFt/AD`V)l8KSrB^nHSPgCfh,gYq
%jlTa35<NDZX%D>Z4UP';*.FZ%Z7TmnI%dU/X2NPZpRXTs>.@I%?6oGE)OTqXbKVVm9^^1S]]GI5Yh^n=_:+=L'fis%>OB%4MI]fQ
%l,1A$R[O.ZM%eV/?Kc4e<o32fHcJA<9$l-hpgCGBgpcuq3<0\[q%.5]lrkT)lpH"gEDDUFR*'tj5p^k@K5g6S*Z#Nq7,dm@M5RBN
%`%;;UCJu7,MHC-<0G58C<s;B,''b,sVI.:&[$W:9a[)HG'Y6EB07JZB/d\=;oQB&SWWOqC`_g;9_sqY:`KN.lLOs%\O%Z"@J5!Xr
%R??)K%r9`>pDG?4qme'!LEn0H[)mW)eAd_'$6s^t3@IP,8Oq7'k;%WY&S+do3>uXVUgm,B874LLCVY#&*)XVEOY-$MrFAtTNsW;7
%_qQC,@_tG7^,]es+N_RV5D4HQScVZS_c1\>h7fDr6UPWigAFBf!]0S17#cs?luV>E?R5%3.1[al]TBZ.NZ1(GME(u^j=r+@U%Z3B
%44Ufk?5.A,on[&+%Ht0&b)a:)@2-3d-*0NqR3_Z6aqJ7+?mh(`"EfD8#nVW,E/#THG[DB>!YOW.mjd>ciN)\VM&3Rn]+W(%F@@$=
%J:EF$_Ho3j,PbTP_?h:EJ[J#I.`[.pFrh#s0C_CaZj%$jOr*.Lh1cHRr@g;u78YHFRX%%2qZhp.9K<E-Yf$ru&8gAOeP@2N8HGIk
%W*<7r'bKAJ\NB5WPL`E/#%*hhPbM&2DaE2a!BFg,&?CDal<`1,e.'ZQ?;n(`+sT)(`UZRs+l:0u*f+KbJP]&@rM&*L$C[?Ip\hU/
%+hBj7geG$]Okb#Pr@0RZj1m3Dp`2@icgh6c<;*W'Ll;""%K/1bLktg-78pF]l<95c,qtr&dZGRb(0JmHr/gg*LG)H+o&7tPR=qk@
%=U]*UI#tK!d$l.J8ddR-K'aSeL?TfaAY:Cm`1k58EP+ri"T/C#MajIFF#GTc6*e(251&T2#F3_uM__BpTVf4knIX@d%q5nurZ#4J
%'d;G8`a^AKq]@lrBjHBhpsQ<5`@;K1-Rp*S,$#i#Plq+G;-ISGP[[l4e?bp5,j%s\$9S;%KLdm4!-U'J&@DXRCnOGOl8)'&"#3Y_
%b;(OA'8Fu28Wg8+I[612fU;V%6%$L1%eh3SD3;ljMJO4=qlNu?2?g1YKDe'?C`X2hFN3ha*K'M9=<^sA^L-g@jUH4AJC&Um?P@7$
%i[II:7#*EMm:G"o5ZQ&s$;g<X%K_dng?/46#o$(Boho9f7RopuP7N[]j<."oW.iQs3H1?6$h&[)U/&FESEh,7O\)ECAKmr5i*E75
%n33k"k=30&k$4R#Ut<VOc7FX:PUd2o4.;Z589$20UWF/QQVP9=oCcZ8Ir0'[VG_L++u8YN)BbJ6filfj+J9^1q,%aILe(aaC=\81
%!j@qo5[AH;14W=cc.$#a33(scmGs>iX*1i-=03*ZTg!;Qn#W8pRXt*?]LW*)2Kstp'/`neG;uc5m?%"-&3eDN?2aECj(FN76)=4&
%b>E"T<j7oqVL"j_LHE$*O[u3g)e>E!@g'>mK#8ZY]JGQ6HI[rh?WPVALK'Xb34C"Fh!tXkCVp)R?MRu6=*,U6_U'<uC'qiG\g[\B
%6RLO^JRWI0W?U!;R[L!<]#$J6K4g^`n=>aJj+2e9j(Pk0K?uoC+s<\gq@-\44S:m8XB%sm#(9FZ\2pfm1og^AON*#\0?8\Xji3RZ
%ME%=b-AXk"H_[:i2E3&)>CMiLZ;Y^4;!A4Ho&e#aHCD-^DLgYf@/TSL0Q>THbT):>]*KD!nMf9'6h$alA%X5*nY+.E8^ZRF<l:OY
%[Y*r<pIe7V"q$H:QGS7*]ZlT)!k-A>MI]ralBDtqDRC*GM)kS.ETV0I"ier!./@=!-X;B`.+\Gsp#;_B9f5]MPCkJ[Ni-:5m;dP`
%KSENbm#rrWPO8b>#Ims'T,#]jqWYE4++Isd_*HF&c-f/""3A&YGI<A?I;.\;/!')8a2CQEo_]+TS1OF&Za686`qW]"8/PIfpVLkc
%/Qi.b^%Kb%Xb41optcK?6RD38UO>V1?C!8]4?46e,D"RLar&TF;u,gc]$"mT%RR[!'WRCNFiu*=EWNbi9p;A8.ln4!O<jopd4PBT
%[]UlBgj.migo+Do=JlCM:/BH&IGUnBa$b8Io3$G4/;/V-=4`-<ZBto-"f-Aa>jk"JWEo+17^Ffd/o"L)^u!$\!na<Mh1\u)iHK(k
%QjGE;eTIMPk``o:KFXtL'ZjN4*X6YQalH8)\iD2,eGT`3"c%ciRVno07aZU<\qoD1&C^gs9t&e)SaodS@r`fW((5*uf^d/"7uB8[
%8gPu?_-KM[Rg4iKFu$<tEk3pqcY-b@d@[al5;[m2Ml_s6dHJIEQEl#Y&BPLgi=-j^LOVhjV[;n"cc6Y.+t@diAFIY%6-ZKKg,u\#
%ZX-86&OPmch[NUqTO\@I#XT)N(Q,75:dB,f*u5(A]0fF^C*:_$/?[+_0r3FpTt_[dZYRIt-QdrWd*@feM:!uG>_@l5.!FVIp$1/N
%nss/QdOgPY]r*]l&s`sFFA'/6DUJ>ZF(mMa5cgchRmQb'SFk:qJRZg)oL<u\blCc=0F(U_FbR(/_Ja_*8G>lj;+A46D5B31R^%sU
%K"ZiHGP30$=?EajQjJ"nNb9Ia;&%$Sr#o=0&VrO^mB<B$a*WamG4-I:b-^$^,n5`*AZH0B\U^H%O;+7p)JJHQ0"\N9HPI<GROSTK
%_'#eT1^YA0CBH;Dn;VDAjY.k!W;/G#,m0<m'B)hK&WbD0.>]NG@e`F,Q0:JYeFl<>Of-0?B8:'49CY<39PmomAQBO&_V'NC$F3Y7
%qIQ_@I`F\cPB_Rabm/3Zp1T/gmM-p+0mYAa_*Sd+Y@:Q.ETDMaIIb#i:1U#u,)Ne=nH6\RaSpl&DC4;oMk&\NgZS<XZhf8AMNN97
%,E((g1P<D-8Z1UI[mO.[o_rTn)@?RJ6$gR*k=P+uc4gq/6)Qm/O*<;j,_@j'fq<$$p9'k.=(`NrWds8HCWV0Wp@cs][>c\]#u7BN
%m'+HIpYc>>IA;^5NH\d#):08)Bn)@gJ1C87B<2^W9@fnhMbT\TRI2cL7.K5^H4&gH1B[0*0+@VR'T;cP1\LXX3*p1!GY/==/f$ST
%-]"Rem0_X4i+Z98..qf1PTubLDXN<38_G2'e*WX&X_n#el/GS`dC/$DF2%"ad3.],[VG35ipPQjD'<HL!2RD=>!hXh9O1OgWEkDE
%5tkA4<jH0U)+ud0ba&%$\?mokX&Mie7+YuO3L"<^SDef1+Gh[XI_^?ARZ.Ir*-/*,TJ%iUf!!U>"p"3dXO2@,$aS'YHU4EjKNjA;
%3FkoS*8Gg"OGu%R8Ugcg$Btb)YDMGrk]4bG6'8m)-+I-Z)RLhrQXOXk`]KmOG-rA8'+FZZn@0MCcj(qu&(ZrPE&L3%YX(eQed^[7
%'r#\fEIE4.%sWMHL*,;ceS4U'VnBXSek.\cMtjuh,UZaciAd;WaTg"T`36lrlR);'OSl^VQgX\HX$nB!kIQMRXt\44Y%\8I/`,>i
%Mr^sMK;'f5^&<=\bAn&LqY$#,=i(B>,ju%Tol;PuSFCNdHP&Z=W1'(WRUIQ^U;,.p0Gi1VL0]i2mRTRY__NYgFfB+Lj3*GLoULQJ
%6cTa7IF<)>dWPUFV"V:WAPSg&?s?@YX'tU*%&aGTn5W&5(Cq_E+3U6X2o-&X6tW','Y4]0.8VD4"Zho.lC=P9S8tE[@3%<AiKd0n
%M.r`k'??$D4"*H_lcGk4^Qn'>,lEM8(?tQQS=+h\M:a=^PB:]J0ph)I![<XIM0/7F0n0mX59VmN%j>?CEqgB*jljR6"Y&D<$lLdZ
%1r;J!U7<7\?R>^tmD[/HUc4iZDlVi^D2eWLSPr48EsD1"j:@@E&,_8f]Ll<[R'_bG:/@9CIk.@rT-D\,9XXmur0#Be+BL58Hf]Z)
%3(1o'/T;??LcHD89K[#6_+biR!R3FY.;PD]?#A;+K/LkirSZf=;(JHR'5GreV49sInq\^U+@m!eY/f/jJ?,VF(X/.Dgu8&,\L0SF
%XDYbbkQ[QA*Vh+(Id-<:`UE!TW\@M;TdFdL@^>SPc_!](AImMTM6p[5N]0,Y3\T`nS)YkNOf"nup1CV=a@h<D+BG@UOnN*?@mRH7
%qn&6(&oX>+Cf%M"]s%I.`AO,'fW6+Q?(,G#9LZ;mMSQg[Z_<o))[:a%DWL;$*F]#g7(8L/T5qXr`%N6]?8+De=]EkWqr9pi*>7!9
%a]kJ&bC##Kn^'F"S@eZfLD2d["(op(#'EFL`g_dc4.F98<e(mK`]H)aSJ[Mrbl5&YGCPsn]]p,DO[Af-n4[g\Ql&CQBBq9#X,@Il
%Y\WML!ujD+e:>b$++2&^cP+[okAM7-O&%FerHl,2JK`;Lm#issa/=]!J:1u^11nD$RC%Hi)7D7pGT?`1iRVFH$!Pl%]>&i]UHO\S
%1@4Pr9;/fBL8'>BDWEli.dR%=AC$,=FObr$1QCU7aF[HN[o[X2'BlN-K;'[\^&@m!ol+i6+ZU,FMO`cA%J*Cg4,Ro$M4PeD]3Cd>
%CJlLuD[hukmI;;TZl%1a9/fIA<:W*6QS)`NhdR<#$$(FG.C!tlVO7]=_6N:Q/O1<Wk)0-27d^?VS`"Mjk>IGWjYLXX1S,Lm_eVJ6
%.Z=&'krqb-'HQ$;L/6j",(0Rulg^W001+3:bg21Y>WQC@=r/?8N)</fNR.Ul=b9beP4nA*1q[q96tcfV](fQ!!sr-(dGq`L%lLHg
%4C*ou;(K/Y@$Oi8+e[`=M%d,-o\l=t$%l*'2Ht4^%k&r_8&h#%-Q2^R&nBL@R^Kmph-_WiO)O</KrGiVg9*+;ML3ElpMkt^VEO#f
%2s@'Abl0*eLhh9B@F.u5k\A4k<g1":kC$pmYp%MVpYLA-hoqe-ZL5`i5N!f6s$#GoTpYP%_uon=qa]aBEh^9uGif2kW%m"2%J,S\
%PuG)\ZE&'@W=lu[H>s!%"b9L>*_-X?D2K`%,7EuUb7dZ8(DYYHjRk\B`j::Jen$)LM>59TKn;W<oEYZtofur\Z[t)-)!%7e-W$FR
%\NZ0"mUQeZ#h8G(e5,keP/nESe<\AIIK-r8E.GmAELN!I]825>iQimNe;D<LPi.7]7j9t?6''A!^:*&=-Ml_G%'g%5F-441Ae5+2
%9)]?omrjpa`HY;kQM]stPb>bjnqMUp$3C0/'`rj.]IF,i:Qon09ORJD]L!`<4&#ZnRNrLoV9>"J+`?(^PE;L@F'rOoL?fu8A=nno
%]XXCIpY[.FL#sQoDpnR47IQu7`lli<;nsFLc_P4VeVPPZ60t6QQtD6qLA\>D-,0W*llnocA6D$&d7Qk+[I3Y?Za9\=)[TdZjqNI_
%gM\+rQbp=p+XmDdLh'7$%SK(J+[_X%-"R[9Hn%"ACic>0^U.j)Fr0r]*iQIJ(<W\UCj"BA8!40E3P*]UW1JB5H\baMQ,tA8-k_><
%"JO8;Om1q-.mNA(4U]4AI5:\4P1jF?og*;AQXn1EHh>SmC-t8*#WLc:WkpQ5ljU$!-;j1",EChE\&'f220j\<?6:4(Olcg>#P;B>
%RE5@Q[lao\3h-c(Zt^\]_@N+NHHhWiK*_9*kN)Jj!r=M;OP%T$8m>25QHORpS3>*4"]Qo<>XIc?,iA$djg0\L.m1V+C&.T[3?N4m
%.4;d],dH!!LAZU>`'-81C:/F'l)FXGe+doRE!QuUo%c;9#cAp+-@V,AhZIPa[%o:PRFcYsl_u!N,mqZ^]3\=3GhBRAgRCrp4sd]O
%k\AHS5$Ke)g#Ds)3Y],ZcRK\e)tMk?J(i"#V)Q,<^kX94A&PL^nJH7UQlO20cn;Y=F@cG&BD=_`d&OE1a<1h2jj+L96'+DLB>\+D
%f$%6=Gfb,*h9g:'M122o.O>!$81QPm_YtgL)Y%%<6+OIm^'M]K@\odBM;e]Aj=<CdS=(k/]/mH)'L9GrS)=(-,6l,<B!fE/?k#po
%&'p>`NX/s2egW#T%u,L/irD!me7Jp[V+NH#6l6:[,FACL\s_d6'?,iO9Q,s_,p$_TLG,B#OK&`MrqW"('gMoDgCE97EBP4[r_9)h
%Q5mo(]:.@r6)iERNE4jl+b8.4%V7kY\dYm.F$!b\0<u/].L6G8C.=B'I#P;$aBQa<)-KAnCpBfuBhXeH-1i=A"RSo3#-f[sJ-OTQ
%%8!Q@p>%8'7\lZtfRT_e"JTF<a)Z#;VP&@1TJ>MTTBOGI6$N_m[[GN1+V>>&+B4.=eRb1mmYgnc1\:d@+)AZQNuEcJFT2./rU8pQ
%1jie'<lg*p>Uh@sqF.c8?G;s\\)ijl-XG#5BgMZbAmBbi?KF^.mt?808KL^rC3)T<f"9b33;Y8_;:9`;rP;_Sba1;8ZmRUi)1D_n
%*o>AenI"KY:?4R!)0+5T6\[nooZtec!C09)+=$A9@dRih8qZklk)JGS!MEclVJJGdBipmSHYY*8-[<UG,kFQ5"gQ&h227>S!H/1?
%Goj'paso6iONPIbhg`ZWRfQ7\ius``XkNkff#YCHjE!A[6D68p(e!Ft%,KnHeI;84F!PicqrnY<gR7%h2FW"1PS%K@&D+cuaU@:!
%04]6s`tc.9ZKYh+6s!NKPMQ'3+>eg`rKk5SZ51tML=<Z1J32Jf5aul6$H>?>`Gs5V\=e==TVp4oY]/,[2H#G9A*8T1*s>>$rM.!L
%C:K^gRnb4aD+%%r6rTnD8_`UT8M\Kp&`7/>>\9+*CY,rknDe@/H2%to\n0)s&Z*gH0hb3.=i"!g)V["38pJCE:qW3_r*'"=i07+>
%+tgN.^OsD9n?_,iKCZ(O/*r7(h4on!56LUZ0"-Qj/;d^QMR*C1P(3B<,IR=\7R-<PmGcGGB&"Vu9hnuAJ+WH`g#kWGrfb>kXJL\0
%6OPGh9gYM/-5Bl"UF])IOs\H;eKfs/0_5op]dK98"98lRDnl%'`#!>WA.jNdM[i='QZP/>aVVRcf?g&o+tmuOP0\fOF#do,mS+%[
%)c?OLh'WCs`1PjU(05cZ[(>:]K`kI33B/+LYEid8qqSi$?d,,T+]+Hm"]+r"dQG+_0ZoRB4HmVIrXDgHIjnXNET\Yo658Jo/$oAG
%2'P<rn4Rc5-U#+r9SN',JZDctV1R//bi".o%9GCU7LTCT#$jEA^rZ6]>s&hLO#ej0VR&aXDQCLoi6ZX<aEt03I@<fUF?GeIBo7W@
%2eU@D:iictGejUt#YHX(bu)n*2:7j"B)!-3pMa.lIqnTp]"0rlo0KYu@2SPhHW('T!qeV1VN>nXr;e-lT:S&7UiZT#-lVDVYL6CK
%g.W[WElNll]E)cki4:@T,tO\=6i4"3,1-.l!gN0K#O(b5mr@aU^c9XVAdd8#57Hi?YIo-B"Bf&md%gbZ:CAe!]$^:7_KV'E*7@kr
%jp.<2=D(/-@hL?J:oU:rKD7Ye*XZ@c7nCs9*R$`Eas2dG*F\n;raj/uF"Z&H]nXYBd+YN]@!eX/&<&;\d(PQ$"r)_9JSk`YWo?pk
%PW$`6HjD8phnk%t#T$S0A4*GG0K]3*-M#ql(8pqhb35"c?th/dr.uoK:a"J./L46qnLB(E^s3<ChR.fL@h+1U-OW.V$puA\()k&+
%'P8'qZf!n]Y(ZinqZUI[W`77Ml2;35hX9VORV*$BWCF,79U$_5LH^'l6u97)fg6+r?]padi6_WqK(M@(FFdt+;5t<C,qU.AU[<*)
%Gp,nD_s>)B7[LuP,6,Ml])m\f+a`ei2d,4g?nta%b#9,`1+?!*A!9LS9.lUZ(Dp0iW5dA#VMM1/n2oI@XC3g4APncie+rk<7IAM&
%c-_^PCN_ZTJ#Pg3,F5qfeGK]\cINt"8LDikRYA+/lB.9_[Xm"i3DGFkp"Et_=7P$;NshSsaY]$8Rj+.Z6BhX#q'h8nGZ@^TQ'n.7
%qT!\YclV=R_C63O;.:6i?`s=m6YAWe6.O,KpkBW\aYenQd8sUbfD9g1<%k<ggP[?PJcp'`7t>E3_)*+`0fhaWhIfEXUNc<r6(R"c
%g+Z)F6O`/YD/0Bieg8k=CFWs@eO(5Hcuiag64X,*.T]GeTfW3G'Y*[JNPIB"ZPO<&Y3]/L>dfk)`m$E$pdp3RPL0co*IqTn\<#WJ
%oE03B!t[e17+HU@Vj+BVAjN2r"V*M_h@kb7FCgQlWK:%eSmRIJZ<G=LK\9^SgOUmr^Te6\Ij]WW)JR[os+K-cWOq=YTj0m;rMRmn
%/1V.h-Tq/3iZjFinGYtB/EQXrBnt66<QRF?C41N%ESEG+YAi0IBpNc%bYG5/$/I!^jnQ)kgRttZpm_@>B1jJ@/;T6Z_MkjW\0=1J
%TP,+"G_8mBIqV:t;X^I(S)(7jk,0J"`K,/o!)gnk!;;5gb]s)\=#(!bLhhnSU9gdDqE8kq=8.8%nj@%SI\Tt8MO)_R"i3__M\H[#
%oY8D,h""<l_Q^I'Qb'uDct)qT"%&\>b7i-$j=I22Kt]s)iJEFr1astrQ]rI5;Kqkk"!QtE<HMTj`b,K,]0N+bT#"7!GDGu288g'A
%/SsfPdE^E-mtG(OI$Ql_;m6Ms,i\;a62(bX,S;8b`hNdNf1;cdO<YG"?MF85OR,?/E/!g+DK2YiD?=Ap2^)pg(+R-fOrcJ7*sp;.
%HODIH4Do1AmU!k.d)67f"3-@!FFRtF],,NQh<RiR<bTK*P-&O!]F0IqBo+L,(C5%PT+&@K(i^hV;f)QjVcgcV_>a9nqtBKD.D[!I
%7eG.<#?DOQfCO3>?+9",Yi.m:;*'Qu0)lV/UP&A0<?k6Ho&Y$aJ<D^MPi8BXi[)`6'kTW<^H7r=KVgXk#l]</V;OY2_g4>VZ5&$0
%2jk+9O8D>OBr_!%:=j]Zmr?,Wpt=I6+"XqT*R>.G5MRErKo4MnU0t^ErrmQ)1^-Fg`IQ#6JI;g4-R'Bmbhk_7p*4UT)/Bf=qFUh&
%3u0);(EK-en["/X";/)[MjS@1?aDfSH'f,%=02sX+,8")K.oWh6kE7H%mKVhr@W^SBc,6!M^foI.`j`-L.Iu'JTo1YB8^Kqk.B;_
%pP5K@#uUooU<!]I`Tn8Y8Nu'[BafK,Lo$5.o\T7k7'\g+)S`^&`s>GqLtn]_3'\IclObaHK0Y;=j\UCMiqs,8l`NmKXdAi%0Pj<&
%9LB"$%h1VQYuWS<):9.nVEhQf,@'ZNBqH)_QQR':$GJ/YG"7,PZ7#qgW(`4Feq\sgiM]5G#5f/;Ftc0_;S:b`qu'0>nr`-caje`e
%BZ\=>BGt0L0EG0"289\>a#%@T5"CFs0jG2Ip)Z4M2cSli"r+=?.FPhI#Lu"m?^J2'P#!MIOJY^Aah`^/oXe+$GeK?rIIH<$+RX`l
%0GVVj1;Fo9&>9,L7PD;P)DifU]o$?MAgre/-U^".:pY\V7s"jDW#6T7CsH5\Fb[C^HM/fZ7%?C(6i(MO.mX$O;?X?5n6AQ]'nq&b
%%DBm,mM?JeU$*Eq32Zc)Q1h#Z\nP+lOa`kU)Y<WA4k_JQ*DWcT;]%_[(+[?FpkrX>#O/BcHdK,PP#Jn[Lb)h:rq&pSEf\p>dg0M[
%_/*[f^+4ejqg2`!a31",$J<ZK"(b-r0`lp&%kV\Dh\U4o0D36!N7mPSe/oja+,L]=jBCSKOfe+:rRR,V]-DrN.p!3Z8J#@gSkq?"
%c4abS0VK?g:1#$7;S)Z_@_"OI,i_-u@GufOP)$'Ek4db'>>Cq8X`uiP:&MIsWf?Vnc539-E/,!;%>2.7IOATM5f"/hL?YUmb%:Zk
%^oE4,/:i.5Qh#OfbGbCQ_(LpakV<nk4K.`qXS8,u7l!F`eh"D=r@sb8#O<E*#I"SZ9e9qt!@md3X2eeO,CHl\n`WRT5qaLQ!U)^S
%#Z?IpK`:pNDqtp26fGU>8h:_>*!YC6s!IT"QY\;IWb+:Pi@r'OT<fPATAP-j:M0iuR4UHXYb"K="t"(&&5V%+/fn9<0SJQi19#Xd
%1k^#WUMgZdkCI5WP="?'5WY1%]otAK-:92KOm$<68l7m4EeMaP1*b_W!!.u*lN%HQ^47P"rQWDt!"'p6;iChf$AW\Q.G]*ninZ*P
%q$WNGq9BQLJ6crGm+gX57m#gfU.=o'-5pSN^u*%n-(8:!I<%l]g8s:3C`i#5>X`UJ6!X&Vk#8aam(T?3o^%1M]r,ZBE(n6/%5cHR
%hPD>\Lc/H9(d&!7_LW<fcI4<BF%,n3(Y;K/cT!brXt3"gq'^6d#'(c"9:>38\6!djbDc8;)N!iW6\'"3D?l13nebo+dXQb:JG\Io
%Y+'6?.`L/eSmt)RAoEOoVT>r0"BPO0DZbD^I'q4+.oeS3Mh6G%W6+e:GNgD:]7R_&@e(rd9=s35OENd[6m?okBm1/6'ueu0(F19P
%aE-Da]#fk\kqF#I4AS$qId::^.2.uYLiLi=9UP1D=%.Fk0TM`S^0.OrJnZXJ#C\mP41l*oLNN[:R(hpJ927';SP"BTU,Lnm#@jI'
%44Qcjd]-R+X0k\/oiR-1=(mI=,?VEL/H[Kbij^U9SRtN$ZA^55pVK0p\,p@!C-;)\Ai7]VK9O`3@m4HT%Yf&o^(`Xl5WB8a[IAi@
%7L:/Tl_Z&6_*lZP'_5YC(TjLg"-*p'6bidDCKU!>/;RAA?1e4rnl=$o\i2F)<(Zd\O=m*!Cc0otGL#[U(RaKRLg\?-[Eu(4P#E-j
%HbDU%830Y[JSq,0>uk\2Qi&NL[R`_)m)/40_FVet*%hCUM:3CG#n["g$>Z=&'-qQPN,fh5bSXBGQO^IKk#6#QkSI3c2tbBDYL[.4
%.CLd>VfD=[QS]6^\bKTZ&!7eV6A#sg^K$*+hnOQDVA85+f6UUhEPVkoZ<E*^c4@Veo]_TrRAMQ?7"Ml999bfUB.Vr2\mQ/dY0oq;
%+fpHbH]rd\?tadthL&IYN7/&O\PF21`!?SM/-W%\C'fN6?so]*Mfm1\d!ZmfM'4UiXFP0,b%%Z,-rmg"&;u-R24In1L7Fh8".C(2
%$IZcfTaMW,eJQj;X$%+]n?*6cpf*Zh7)R2:ApF_HLki8l\g2V*B`.rW)[JoNd,rs80C!C&,8O\$MH:s-Ym=@SLF-@OT]Ug2-J*0=
%Po9tZB^`?-OTn?JkWt=@$4<>D*%cj^T29]QrId<*9Z,YW.i,%UFu@QIYiaW26d^b>[(f<tn>s'TL(u_haZbC_Gr7k/XumeUIXdf5
%]BtP4%!8@g7C%@MPWK59Ur+D"0p7c"f65X7'I\SQ0$MkU;p2o-S_8P`adT8Y/:M%Kb:tlP:ST2!4(CUu-B<.*bt4;c9fCbg0Ej]u
%=P74$ZJqe+fUX:?fa`giLs5VMY&AHunj!R6]N/1?HjGUBIS#+:Tpna^LFr@4+(uqToBY>[o0E+mg2[K+DPdB`e&"Lp=+qs#+r>2H
%["dOlWHfSZanpW)L85N])FTZa610NWeB'F.IY*P1=#X.p1:)U4-+loqJ87TZ9=,2`Br@qak$*5Y?eZ./-cK6XojM)_qZcumpg)X9
%"W>56JohR+@\h&2_G?(6Ncm7%k8.Rg)(Ki]kQ)\U*7l8&NG.\<DG^BAXjSN)ph:-/\1/B:4]i@dhucc@?cq[Gl[<JqqOpDHK\d6@
%>KS!CK1R@N#U_3*H4LeEcSYn(,d*/*_8L/(NgB><_KSY0Z`amllELQ.j#HD6k7hB'9_N<=;eYkS7i_+&V;+faqM+f]4A[kD.87Q1
%).<t"WV]StXCr\8hUqkC,%HAaVrSQZ#>3TVTJVSj(GCr.":C,F.3Lh$+>2cEo7f$#,6ee+:O17t3h>&a`cS-R6lh#l7Zno0nb^%]
%Y6KIIT-4g5$H36R352"=]R#Y[<>\`'N.8W3F<m*;5X6:kY2n%3`lk$,Y\6H.eeK,pip%f_C]kB$dIH)Q_t[#jPsh%!KYs^T^p^]a
%B#s!OWTIRt0ilr),2lb@/Ip')*1V>'<Wo>pKnT+D55)praQn/Zr:)ZT`i0emUbIGAQ)4hGkBW.$$`D(K&i44$bocP--c>D.?Y%n-
%n$aK@KfU0M1;;^<=2A,=AOHjMqqd((86;4_a#F33T6[4R=I1/Kj7VAMT"U_]jLj."ZXKp!gWS5IqP02Wc*k:ZqNEl5Ue2\pA9ap^
%il&Y6HRpDP1<ECoM+3S6;F681kNnGSUI)QoEhEYe;s[iGD(#&3T`IcOS?RD93LD=0#mZKTZ8gc@`sM+P;T.oG+1N^"T<L]KWNjpG
%9E^gf?A@n_dBbc@d_gdP*!`CCh!IrA?:om3[/BZBn\F(On]/#Q(]6u%*4@%_8kKhs<I8,$SQ6+:+gslk`D[$sQfEg^GJIPfJI3]K
%3(\cj,9B/Z&@Hiq##lIS^I!rjf3$=,%ualE)*@kOq&@dE`m"Y<%b'!lJO0S^.)I`CQqS6(fI=f8$!X"f`*Q3GqXNX'>F'lc:h&le
%Q7GQI?;e.V]/c@W'\`nI<F"Gh`QRE0ce5s:BCAS=,%,5np\Td_jVuuOQ=GS(J2[]3/db^JR!up7$g7M&GI5Y%jMG04?=.Z<IHOJg
%:pA0=G%5iH20:uBqm/omg$qjR5sb^^Ci%2Hl.*@T1d?lkeZ])a^h'mJ%-Y!'`SmTjNhpf3Ilq+@kG\>:916>oe#'Uc"67mbdutTn
%$-1Q_N:)C"khKdQF44MuJ@l2$0&u4>b/);sD;n<,:0]Yu5'e:4e7"1O+aol,ifZal%>XD>\_K[lMQM#[1KSSW7=)t$qijo!2ZH\n
%(&(H`D15$84+hW%O.#`@,_7IDr0e\Aa+kc/q)Q55X;hN@+O9e(V]B:Rn^>Y?D;p,;MVWS=g=S)Gg^mAk(!*0(\:3g&#PR_?VMjsC
%B_U$4$4Q-$ogDk+B6gO25Pt@57V\Hjai'HtI"U<P(o30nKViVUW?@EE9@!JbLD-.pm',daH9AQ7EZ$5r26FCEYsA_LlXjbG,\-Pp
%NEmknc?+;_e)EVd4]OQj`_mCAE,(8sR@HPX^k8]M<^Jg;$k;`p_?mb]_^Q6=j:+S!>cPQI+s@7a)oG_R`7QJ+C`Y[<SlUVL(U?i/
%5>g\jSaS6Io1faQj\cu'_SlZC$U"+"N5g".?W:Lo.INIo&aDB@-CR_r2-UeY5qGL9Bu"E9\G+4r?BpB;8;?^G;aL.J09[F-ChY;h
%T6S4am1^4_Gr_YAke<`!Y:%-JV7,9*3PDQa0O2XH=o/$eADN<]:g$b2&(I/Q)=D^9*&UQM5uJVU.SXG&IpcFE>FGa(:2t#P-2&MF
%mTt*F0*e7$=Dr['/0c`2Md4n@qZbB$Xs.M.hE&A7p&BlrdD*VLs63=/poE]hG=nP1K)"+['Ga'5Jfo`,&]tC3K?`ROVJf`O*(@A?
%b-3cG`!RZ'pFL/I;=2Q<h*qq.(q8KY\*02`o`g(nBD^h4>M#UVpYOc5l!Ip,r"oAXiqg`4!NOa0igMr+B$bKkKn5^ZG2RAcfWGg<
%Y$HHar9:HL0Eu-=F@msa+rBCa?a3KI2>u'3U=D*p\i52bXd/LoXc'Nu[r-!4$q:8)U6=X>p3R$+15&m-eKJqYgri+O3"2qq/gEI>
%KO,ka1*?LC&90:&b_b<p'\2d1Kp!tNf2c(m5oU%,<Gb!GFgWmLX_0-M]rN''%PPQaq%VPK!o=&/CP4CrNZ3qOODt%^TM,RkZmgtD
%d771o:Y0[/_*=`D'W"MPC?:om2#kHE$mJ(r335_"KNDgP[KfmSU9qDD3_flX<*#I2EC&JXe5Dc07?Vgk92]b]:<+7Dgu4+:]MQ>d
%Hjh(OCG0B'Bng%kXI;h%.gL`2E,9Ca"nY]K=D02'K<+[O\G'm@s"!pR[&;,'rdLMJn4uE&7asUJch@<Q-3e2+XZ%CS<\P7e04R/t
%m+GR=9dFK8RhJJSVr*BCRYW9!3WjDEQQ%k*gcFTGhRi&5:qJ/$aM3[\aS1^X[2Z6&b_b@fR8$6nQ/UYp5k(6WMg]Ef+YAfui@8\2
%ZeCc,V?.JWn1$$;SHIE0W-';S6d`L<gt"7tp>/k(#2&>a87ou&mg"_N+R"Y+K2'je#iOrMER/6o1h=Xf!ohga#j1/%EYZ'VW;!-I
%J3^HH*4Oq#N`=;>Y;`,@,p1[Qq;Bi7..4d`YNc$_?ic*9S56DbAce]&KUIY+[ts"G=X%uS0/-c:\']L5[NHm;cf-kHS<BcXQ(SZ/
%$*KgK8N\`6h?gm^Zsa'gK<lMt\G,uK7eACP1>iZT]&-9t]1LU<B82K4YSE$_OcO*@pgmWj5-+uTqPM'k=kj4lhNtNb,!pT(Uh_K@
%&X&2iNHfYioA[%*LKW2TBB,L9RIu/Aq>6"XN^4#>H.Q-%CdVR(YB])X?5gYG(g]3E"L!YaZ"J%q[()Yc'Yu=[>A_?qk^`/S<NVCM
%F;!@kK3KFlX:Lk];$_3!8T=A$5j;ASF3"AK;6deK71OK#q"^Te_WI3fG^F>URRV!1[..mJkf%Zd?(T#t_[.6hZe@ZNaua_:!o5mL
%V1%RpcXE1D/WX>],[LIjd&[I\LGZTfp.XO%%-tIW]33hl7CA1b+QjD%mqimaE.J/82%5$uLEY$XCU%!SpGV`&d.!F)rdLN<;p.5r
%.C$!3jUs!B,E3.Y8ZYQ/:[::X#ts0!(:Trb$odhNJ?@h*j]fFq(p4(g#IhuIEUWjc'D,k,3,65M<@?u10<6UFGcA["`NTK`DNX1R
%-GP'Nj@,F6p>Cnn>/`'AWdX7HB/ENX'3N5=+j8qIDa6EPcN_Z"=4a1R\'FiF+NH5"3rBI^_1t,+XDe5b3g2-=V9P6c&HR+aH>.M%
%\DK\'o.n7ni8Sq$om3/b8lAJ^NNM3C;`a;M]`Fh`e\M"=lGbCC]t^g\L'A$]Z^J6"]q[9EO[K4AogR7BLC$D3,>@3["hg/R.OEpD
%+JgaW?<SJXesDPl%6B>aPm,(7^8G,uKO.:H=6nFi>L0%RpWiUlI@4_tc/J*rg:Z9@='6djY`)K;Y(pjXTU/(=XLgG6/D[TGX0`%I
%+4Q>IoY2+Wo6@<[S(aoko=:u=;;-A8IB`j9Vc^O=@G&q?3%d3`6(ZoEE3M'Xa;TgAr"rmsRh$\P]0F;DK=2!OW*?tN(]E+Rh8Wl=
%i-]M0>SQqh?Om:=H`t(6mGAF2:GS7T6ApX&6id7P8`D]f#Rpk.WjL.9K@FnDFY@VugIANEVp9QlEO!)nokk0:f"h+>f"!3s]tYVE
%bPL6U'f+\*qh[6+=qH'F-u\[sJd@f;^"<rHf)`RLA>&R\ocOokEna7A+BSFQLQ>=)$K4rgEB2,K[FH5C93SZ:hgB<a@[?`EgXn<?
%&jd2.b8g?H#7+d`,`gDX:Z@@AD<t[(iqQ<*qd-b?m!96"SC6t7g]k=CQ^CU&.Kl0/CD7"<"0'IE]bBC3*=Z6a7P@eVDk1/].*8M7
%5&3+jHUk^CBlH>";dI<hYc5m2b_1@q;Bl$b&;_L.m\MMR[D"3NSP0O1.C5:nm*#+(1a!m4gq*=>lGG1@]sAa`b2Y4b+C%7j%hpbS
%:^Q?i,UrC.0uO?7fXB=\\9B[cV!JUM4K/&(-uM=Jmn9_jJ\p`+]@AC6R=ojd[k1qKXb$)[X`I@pH[k(F!1Pq]GWY7K.I!U0kTq^)
%*8_G?EXo^?3l<,/mhcUKp(\S)o>0GqSY]KE#.`TW;JqJG\qm'JX14JVF5Q6lLgS,;i-]Kd@i"gqh`*`_^CfLRQu9W^&?3-0jT)9K
%,4DH"VGXQ`BnFO""%-4hK69<_f8]F-AoS44lps3QQg@`m#]cW_\CDPF9<<&Li-]Kd/P:BUX9X=+ijaEf0`r%)M"%ST7Nh2IR_^'6
%hh0Q0%FqWk6=[qnRJ-r+[?KPG/8daN/`,=1,-'G#397lm*OXE:&Dg\%S.Dd*7;6\2ocPCV_*m?U^4G`#$D5uHX6!a,aZ'k'-qJZ(
%d@@(JEG3GG94BE2#8*Vl`F82_2T3"D!%3X;0h__N2"8gHqefCq+kh"4II"`"M-8V\Do4fe]dTEsbYe$0L;N9*MccrH3s;%,XM9s2
%D*gG;G%EJU#;PkA\`gB0"\$*Xkt2o.s$mR_XZ4>iNkJU@0C`_dH1BPP_^t,eZPium!W;e,s8:JuqN&u&s823`?iT[-J+_Fninr8c
%r3-+f^O6"Es8;[GJ,J=9r:Ri%e)10#5Q'V=s6[T$q(I6mX2"Ug5Q.cMs8(4%rS?B2j.H>@ci<&)e$$ObbFegn+92<nJ,]*Os7Pj\
%2\<VY?his%r`B-n?iT)gr\$8'C7>~>
%AI9_PrivateDataEnd
