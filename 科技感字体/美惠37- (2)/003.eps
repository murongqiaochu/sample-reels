%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: plata_51.eps
%%Creator: Adobe Illustrator(R) 19.1
%%For: user
%%CreationDate: 4/12/2016
%%BoundingBox: 0 0 1200 1200
%%HiResBoundingBox: 0 0 1200 1200
%%CropBox: 0 0 1200 1200
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.1.0 x29 R agm 4.7731 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c067 79.157747, 2015/03/30-23:40:42        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
            xmlns:photoshop="http://ns.adobe.com/photoshop/1.0/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">plata_51</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:creator>
            <rdf:Seq>
               <rdf:li>Iryna</rdf:li>
            </rdf:Seq>
         </dc:creator>
         <dc:description>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Abstract vector background with high tech circuit board</rdf:li>
            </rdf:Alt>
         </dc:description>
         <dc:subject>
            <rdf:Bag>
               <rdf:li>circuit</rdf:li>
               <rdf:li>vector</rdf:li>
               <rdf:li>backgrounds</rdf:li>
               <rdf:li>pattern</rdf:li>
               <rdf:li>tech</rdf:li>
               <rdf:li>processor</rdf:li>
               <rdf:li>abstract</rdf:li>
               <rdf:li>abstraction</rdf:li>
               <rdf:li>chip</rdf:li>
               <rdf:li>card</rdf:li>
               <rdf:li>high</rdf:li>
               <rdf:li>design</rdf:li>
               <rdf:li>electrical equipment</rdf:li>
               <rdf:li>integrated</rdf:li>
               <rdf:li>technical</rdf:li>
               <rdf:li>computer part</rdf:li>
               <rdf:li>hardware</rdf:li>
               <rdf:li>engineering</rdf:li>
               <rdf:li>line</rdf:li>
               <rdf:li>cyberspace</rdf:li>
               <rdf:li>computer equipment</rdf:li>
               <rdf:li>graphic</rdf:li>
               <rdf:li>electronics industry</rdf:li>
               <rdf:li>digital</rdf:li>
               <rdf:li>technology</rdf:li>
               <rdf:li>computer</rdf:li>
               <rdf:li>circuit board</rdf:li>
               <rdf:li>illustration</rdf:li>
               <rdf:li>creativity</rdf:li>
               <rdf:li>connection</rdf:li>
               <rdf:li>computing</rdf:li>
               <rdf:li>backdrop</rdf:li>
               <rdf:li>science</rdf:li>
               <rdf:li>cover</rdf:li>
               <rdf:li>internal</rdf:li>
               <rdf:li>connect</rdf:li>
               <rdf:li>art</rdf:li>
               <rdf:li>industry</rdf:li>
               <rdf:li>conceptual</rdf:li>
               <rdf:li>construction</rdf:li>
               <rdf:li>textured</rdf:li>
               <rdf:li>computer chip</rdf:li>
               <rdf:li>mother board</rdf:li>
            </rdf:Bag>
         </dc:subject>
         <xmp:MetadataDate>2016-04-12T14:17:10+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2016-04-12T14:17:10+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2016-04-12T14:17:10+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A8qYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FU88lWtlc+ZrFNQjEmnoxkvQ4JQQopZ2enRRTfMjSxByDi+nq67tXJOGnkYGp8o&#xA;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&#xA;KcMc41Dw42N4/wAUuhNj4lAa/ZraLBZanqV3qGnyodSNnFbmGQ3VwrVIdkKgcjufDoMqzQqhImUf&#xA;qqupcrRZeMmeOEITB4OIyscMa6XfL+1Jx+W/nQ6qdK/R3+niAXRh9aD+5LmMNy9Tj9oUpWuUfkcv&#xA;Fw16qvmHO/l3SeF4vH6OLhvhlzq65XySC6sb2zZFu7eS3aRecayoyFlqRyAYDaoOY0oGPMU7PHmh&#xA;O+EiVd26hkWx2KuxV2KuxV2KuxV2KuxV2KuxVfLLLK5kldpHNKuxJJoKDc4SSeaIxERQFBda2091&#xA;cR28C8ppWCopIUEn3YgD6cYxJNBjkyCETKXIJvp+laja3cUpnthEsiNMqX1lVlRw9KPIyHdajkCK&#xA;5fDHIHmP9NH9bg59RjnEipXRr93k6iukb+W7Nr+TV9aiaDSbZZSPq5aW9bT5oqTzmCMxx2sKQOfU&#xA;qpZ+RXelN82EzLIKiO7nw9TXQU89hji05vLKvq+nxQfTHiNmcjIbb0Kva7XXn5Zavf3FjNdtG6hk&#xA;twkSQ26mJTyG0QUAt+8FaVFBhloJSIJ93Qfd8UYvaDFjjMRsczuZS3+Pd6fmgbby5rktvZyyMkRv&#xA;ooZ4IbeC19NI7hJXhWr/ABfYt2rX8crjgmQD31yA63X3ORk12GMpAWeAyBJlOyYmIly85BoaFqX1&#xA;S4uvVf0baJZ5T6FnXg9sbsUH/GJfvx8GVE93lHuv7k/nMfEI0LkaHqn/ADuD/dOn0LUoXkR5X5RJ&#xA;M70gs+lukTv+FwmJwyH29I9K/WsNZjkAQBvw/wAU/wCIyA/3JXSeXtUjleNpX5Rict+4s+ltOlvJ&#xA;/wAlJBTE4ZA/PpHoaRHW4yAaG/D/ABT/AIomQ+wJhF5E8xtB9YWQ8BObevo2dfUWYwH6OYy0aTJV&#xA;+dfw99OLLtjTiXCRvw8XOfLh4vub0zy7eNO92IPrGq37QzNcycY2dL1TLGoWOQRIAbcljwJ+L2xx&#xA;4Dd1cj+n7OiNRroCIhfDjhYoWaMDR5jiP1bb1skGpeYLG8062tit8zQ8aiSw08oCF4/CVjR/+COY&#xA;08wlED1f6WP6naYNFPHklL0b92TJ+sj5Jx5I1p7q5uoYPXgjtook9RTp0czkchRvriMiotPgjioF&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:68d01289-d7ba-a844-a3b3-b6927dea7572</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:68d01289-d7ba-a844-a3b3-b6927dea7572</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:4d23fd2c-d84c-4704-bd7a-9852d1c870f9</stRef:instanceID>
            <stRef:documentID>xmp.did:105A99264D6BE51194FFADFDE0B012D7</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F07763D45588E411BF89F345A28D8C9F</stEvt:instanceID>
                  <stEvt:when>2014-12-20T17:10:37+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:24845C695A88E411BF89F345A28D8C9F</stEvt:instanceID>
                  <stEvt:when>2014-12-20T17:11:02+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:28845C695A88E411BF89F345A28D8C9F</stEvt:instanceID>
                  <stEvt:when>2014-12-20T17:18:19+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:2CD1A38B5D88E411BF89F345A28D8C9F</stEvt:instanceID>
                  <stEvt:when>2014-12-20T19:26:10+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:466839A36D88E411BF89F345A28D8C9F</stEvt:instanceID>
                  <stEvt:when>2014-12-20T19:40:27+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4165C60ACE89E4119A65C8F5B8A1FEA0</stEvt:instanceID>
                  <stEvt:when>2014-12-22T13:31:16+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:105A99264D6BE51194FFADFDE0B012D7</stEvt:instanceID>
                  <stEvt:when>2015-10-05T13:48:13+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:68d01289-d7ba-a844-a3b3-b6927dea7572</stEvt:instanceID>
                  <stEvt:when>2016-04-12T14:17:10+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>1200.000000</stDim:w>
            <stDim:h>1200.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
         <photoshop:Headline>Circuit board on black background</photoshop:Headline>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1200 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1200 li
1200 1200 li
1200 0 li
cp
clp
1200 1200 mo
0 1200 li
0 0 li
1200 0 li
1200 1200 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
0 0 0 rgb
f
229.77 225.211 mo
228.759 225.211 227.936 224.389 227.936 223.376 cv
227.936 222.362 228.759 221.539 229.77 221.539 cv
230.78 221.539 231.604 222.362 231.604 223.376 cv
231.604 224.389 230.78 225.211 229.77 225.211 cv
cp
324.912 221.539 mo
325.923 221.539 326.749 222.362 326.749 223.376 cv
326.749 224.389 325.923 225.211 324.912 225.211 cv
323.902 225.211 323.075 224.389 323.075 223.376 cv
323.075 222.362 323.902 221.539 324.912 221.539 cv
cp
324.912 227.831 mo
327.368 227.831 329.371 225.834 329.371 223.376 cv
329.371 220.918 327.368 218.914 324.912 218.914 cv
322.766 218.914 320.965 220.445 320.549 222.47 cv
234.133 222.47 li
233.717 220.445 231.919 218.914 229.77 218.914 cv
227.311 218.914 225.311 220.918 225.311 223.376 cv
225.311 225.834 227.311 227.831 229.77 227.831 cv
231.819 227.831 233.534 226.431 234.049 224.544 cv
320.632 224.544 li
321.149 226.431 322.863 227.831 324.912 227.831 cv
cp
.376471 .788235 .901961 rgb
f
363.034 281.823 mo
363.034 282.836 362.21 283.66 361.199 283.66 cv
360.189 283.66 359.364 282.836 359.364 281.823 cv
359.364 280.811 360.189 279.988 361.199 279.988 cv
362.21 279.988 363.034 280.811 363.034 281.823 cv
cp
356.747 281.823 mo
356.747 284.281 358.745 286.28 361.199 286.28 cv
363.657 286.28 365.656 284.281 365.656 281.823 cv
365.656 279.726 364.189 277.971 362.236 277.502 cv
362.236 272.255 li
364.694 272.255 li
364.694 250.94 li
357.704 250.94 li
357.704 272.255 li
360.166 272.255 li
360.166 277.502 li
358.21 277.971 356.747 279.726 356.747 281.823 cv
cp
f
374.948 281.823 mo
374.948 282.836 374.122 283.66 373.111 283.66 cv
372.101 283.66 371.274 282.836 371.274 281.823 cv
371.274 280.811 372.101 279.988 373.111 279.988 cv
374.122 279.988 374.948 280.811 374.948 281.823 cv
cp
368.653 281.823 mo
368.653 284.281 370.653 286.28 373.111 286.28 cv
375.567 286.28 377.57 284.281 377.57 281.823 cv
377.57 279.726 376.103 277.971 374.145 277.502 cv
374.145 272.255 li
376.604 272.255 li
376.604 250.94 li
369.618 250.94 li
369.618 272.255 li
372.078 272.255 li
372.078 277.502 li
370.118 277.971 368.653 279.726 368.653 281.823 cv
cp
f
420.319 299.645 mo
421.33 299.645 422.152 300.469 422.152 301.484 cv
422.152 302.498 421.33 303.319 420.319 303.319 cv
419.309 303.319 418.482 302.498 418.482 301.484 cv
418.482 300.469 419.309 299.645 420.319 299.645 cv
cp
420.319 305.936 mo
420.61 305.936 420.895 305.906 421.168 305.853 cv
437.799 322.481 li
788.944 322.481 li
788.944 322.481 793.739 317.689 794.274 317.149 cv
795.11 317.149 830.191 317.149 830.191 317.149 cv
830.191 315.082 li
793.414 315.082 li
793.414 315.082 788.625 319.877 788.086 320.413 cv
787.236 320.413 439.51 320.413 438.655 320.413 cv
438.148 319.902 426.248 308.003 423.144 304.897 cv
424.131 304.082 424.773 302.863 424.773 301.484 cv
424.773 299.026 422.775 297.025 420.319 297.025 cv
417.861 297.025 415.861 299.026 415.861 301.484 cv
415.861 303.938 417.861 305.936 420.319 305.936 cv
cp
f
681.054 293.882 mo
682.064 293.882 682.885 294.706 682.885 295.717 cv
682.885 296.728 682.064 297.548 681.054 297.548 cv
680.043 297.548 679.219 296.728 679.219 295.717 cv
679.219 294.706 680.043 293.882 681.054 293.882 cv
cp
681.054 300.173 mo
683.508 300.173 685.508 298.171 685.508 295.717 cv
685.508 293.259 683.508 291.26 681.054 291.26 cv
679.762 291.26 678.605 291.819 677.794 292.7 cv
671.784 286.69 li
671.784 286.69 610.333 286.69 609.49 286.69 cv
608.932 286.132 599.385 276.581 598.826 276.022 cv
598.826 275.547 598.826 273.578 598.826 272.255 cv
601.111 272.255 li
601.111 250.94 li
594.123 250.94 li
594.123 272.255 li
596.759 272.255 li
596.759 276.881 li
608.633 288.757 li
608.633 288.757 670.082 288.757 670.926 288.757 cv
671.4 289.231 675.625 293.455 676.757 294.59 cv
676.664 294.949 676.598 295.329 676.598 295.717 cv
676.598 298.171 678.596 300.173 681.054 300.173 cv
cp
f
685.244 282.085 mo
685.244 281.075 686.068 280.252 687.079 280.252 cv
688.09 280.252 688.916 281.075 688.916 282.085 cv
688.916 283.096 688.09 283.92 687.079 283.92 cv
686.068 283.92 685.244 283.096 685.244 282.085 cv
cp
691.537 282.085 mo
691.537 279.629 689.537 277.633 687.079 277.633 cv
684.754 277.633 682.858 279.43 682.661 281.71 cv
675.393 281.71 617.534 281.71 616.742 281.71 cv
616.213 281.178 610.886 275.853 610.356 275.323 cv
610.356 274.841 610.356 273.207 610.356 272.255 cv
612.818 272.255 li
612.818 250.94 li
605.831 250.94 li
605.831 272.255 li
608.285 272.255 li
608.285 276.18 li
615.882 283.776 li
682.965 283.776 li
683.628 285.397 685.222 286.542 687.079 286.542 cv
689.537 286.542 691.537 284.543 691.537 282.085 cv
cp
f
710.67 267.67 mo
711.682 267.67 712.507 268.494 712.507 269.509 cv
712.507 270.517 711.682 271.338 710.67 271.338 cv
709.657 271.338 708.837 270.517 708.837 269.509 cv
708.837 268.494 709.657 267.67 710.67 267.67 cv
cp
710.67 273.96 mo
713.128 273.96 715.128 271.965 715.128 269.509 cv
715.128 267.047 713.128 265.046 710.67 265.046 cv
708.525 265.046 706.727 266.576 706.31 268.603 cv
702.028 268.603 687.857 268.603 687.161 268.603 cv
686.611 268.056 681.044 262.486 681.044 262.486 cv
636.935 262.486 li
636.935 250.94 li
629.944 250.94 li
629.944 272.255 li
636.935 272.255 li
636.935 264.557 li
643.999 264.557 679.432 264.557 680.188 264.557 cv
680.736 265.105 686.304 270.669 686.304 270.669 cv
706.39 270.669 li
706.906 272.561 708.62 273.96 710.67 273.96 cv
cp
f
740.811 258.231 mo
739.801 258.231 738.975 257.41 738.975 256.4 cv
738.975 255.389 739.801 254.565 740.811 254.565 cv
741.826 254.565 742.648 255.389 742.648 256.4 cv
742.648 257.41 741.826 258.231 740.811 258.231 cv
cp
740.811 251.945 mo
738.355 251.945 736.357 253.945 736.357 256.4 cv
736.357 258.854 738.355 260.856 740.811 260.856 cv
743.269 260.856 745.269 258.854 745.269 256.4 cv
745.269 253.945 743.269 251.945 740.811 251.945 cv
cp
f
620.769 218.66 mo
619.759 218.66 618.935 217.831 618.935 216.823 cv
618.935 215.81 619.759 214.988 620.769 214.988 cv
621.78 214.988 622.601 215.81 622.601 216.823 cv
622.601 217.831 621.78 218.66 620.769 218.66 cv
cp
420.58 206.339 mo
419.569 206.339 418.748 205.515 418.748 204.508 cv
418.748 203.494 419.569 202.671 420.58 202.671 cv
421.594 202.671 422.415 203.494 422.415 204.508 cv
422.415 205.515 421.594 206.339 420.58 206.339 cv
cp
620.769 212.368 mo
618.718 212.368 617.001 213.768 616.484 215.654 cv
611.922 215.654 433.477 215.654 432.716 215.654 cv
432.254 215.191 426.31 209.249 424.173 207.116 cv
424.709 206.381 425.036 205.48 425.036 204.508 cv
425.036 202.05 423.038 200.048 420.58 200.048 cv
418.125 200.048 416.125 202.05 416.125 204.508 cv
416.125 206.958 418.125 208.96 420.58 208.96 cv
421.309 208.96 421.985 208.769 422.589 208.455 cv
431.859 217.721 li
616.404 217.721 li
616.822 219.753 618.623 221.277 620.769 221.277 cv
623.224 221.277 625.226 219.277 625.226 216.823 cv
625.226 214.365 623.224 212.368 620.769 212.368 cv
cp
f
385.02 229.574 mo
386.034 229.574 386.854 230.402 386.854 231.411 cv
386.854 232.425 386.034 233.248 385.02 233.248 cv
384.009 233.248 383.188 232.425 383.188 231.411 cv
383.188 230.402 384.009 229.574 385.02 229.574 cv
cp
385.02 235.866 mo
387.477 235.866 389.476 233.869 389.476 231.411 cv
389.476 228.955 387.477 226.956 385.02 226.956 cv
382.906 226.956 381.133 228.446 380.685 230.425 cv
365.895 230.425 li
365.895 230.425 355.55 240.774 354.975 241.346 cv
354.705 241.346 354.175 241.346 353.654 241.346 cv
353.654 239.231 li
334.436 239.231 li
334.436 245.348 li
353.654 245.348 li
353.654 243.413 li
355.831 243.413 li
355.831 243.413 366.18 233.065 366.75 232.496 cv
367.464 232.496 378.159 232.496 380.715 232.496 cv
381.202 234.428 382.941 235.866 385.02 235.866 cv
cp
f
408.438 216.213 mo
409.448 216.213 410.269 217.033 410.269 218.042 cv
410.269 219.057 409.448 219.879 408.438 219.879 cv
407.427 219.879 406.601 219.057 406.601 218.042 cv
406.601 217.033 407.427 216.213 408.438 216.213 cv
cp
408.438 222.504 mo
410.895 222.504 412.89 220.5 412.89 218.042 cv
412.89 215.588 410.895 213.588 408.438 213.588 cv
406.289 213.588 404.49 215.115 404.072 217.144 cv
367.47 217.144 li
367.47 217.144 355.725 228.887 355.151 229.464 cv
354.84 229.464 354.209 229.464 353.654 229.464 cv
353.654 227.525 li
334.436 227.525 li
334.436 233.639 li
353.654 233.639 li
353.654 231.533 li
356.004 231.533 li
356.004 231.533 367.749 219.788 368.327 219.21 cv
369.094 219.21 399.225 219.21 404.156 219.21 cv
404.672 221.104 406.386 222.504 408.438 222.504 cv
cp
f
632.826 129.538 mo
633.837 129.538 634.663 130.366 634.663 131.374 cv
634.663 132.388 633.837 133.209 632.826 133.209 cv
631.811 133.209 630.989 132.388 630.989 131.374 cv
630.989 130.366 631.811 129.538 632.826 129.538 cv
cp
432.372 126.396 mo
431.361 126.396 430.54 125.572 430.54 124.564 cv
430.54 123.55 431.361 122.728 432.372 122.728 cv
433.386 122.728 434.21 123.55 434.21 124.564 cv
434.21 125.572 433.386 126.396 432.372 126.396 cv
cp
397.253 126.396 mo
396.242 126.396 395.418 125.572 395.418 124.564 cv
395.418 123.55 396.242 122.728 397.253 122.728 cv
398.267 122.728 399.088 123.55 399.088 124.564 cv
399.088 125.572 398.267 126.396 397.253 126.396 cv
cp
433.276 120.2 mo
433.276 104.161 li
435.263 104.161 li
435.263 82.8442 li
429.146 82.8442 li
429.146 104.161 li
431.21 104.161 li
431.21 120.277 li
429.397 120.774 428.052 122.376 427.946 124.313 cv
401.685 124.313 li
401.55 121.974 399.624 120.104 397.253 120.104 cv
394.795 120.104 392.796 122.1 392.796 124.564 cv
392.796 127.02 394.795 129.019 397.253 129.019 cv
399.06 129.019 400.611 127.93 401.312 126.38 cv
428.316 126.38 li
429.015 127.93 430.567 129.019 432.372 129.019 cv
434.207 129.019 435.787 127.902 436.467 126.316 cv
441.467 126.316 625.792 126.316 626.565 126.316 cv
626.905 126.657 628.269 128.02 629.135 128.884 cv
628.652 129.596 628.371 130.45 628.371 131.374 cv
628.371 133.832 630.368 135.834 632.826 135.834 cv
635.284 135.834 637.28 133.832 637.28 131.374 cv
637.28 128.919 635.284 126.919 632.826 126.919 cv
632.039 126.919 631.315 127.141 630.676 127.501 cv
627.422 124.25 li
436.802 124.25 li
436.657 122.248 435.202 120.598 433.276 120.2 cv
cp
f
618.935 138.176 mo
618.935 137.163 619.759 136.344 620.769 136.344 cv
621.78 136.344 622.601 137.163 622.601 138.176 cv
622.601 139.188 621.78 140.012 620.769 140.012 cv
619.759 140.012 618.935 139.188 618.935 138.176 cv
cp
420.055 140.012 mo
419.044 140.012 418.22 139.188 418.22 138.176 cv
418.22 137.163 419.044 136.344 420.055 136.344 cv
421.065 136.344 421.89 137.163 421.89 138.176 cv
421.89 139.188 421.065 140.012 420.055 140.012 cv
cp
625.226 138.176 mo
625.226 135.717 623.224 133.723 620.769 133.723 cv
618.671 133.723 616.915 135.183 616.446 137.144 cv
424.378 137.144 li
423.911 135.183 422.156 133.723 420.055 133.723 cv
417.601 133.723 415.599 135.717 415.599 138.176 cv
415.599 140.635 417.601 142.631 420.055 142.631 cv
422.156 142.631 423.911 141.167 424.378 139.21 cv
616.446 139.21 li
616.856 140.924 618.247 142.246 619.996 142.554 cv
619.996 163.933 li
640.428 163.933 li
640.428 165.344 li
659.296 165.344 li
659.296 159.054 li
640.428 159.054 li
640.428 161.866 li
635.662 161.866 623.565 161.866 622.065 161.866 cv
622.065 160.185 622.065 145.955 622.065 142.413 cv
623.885 141.86 625.226 140.179 625.226 138.176 cv
cp
f
386.509 177.247 mo
386.509 178.257 385.685 179.079 384.674 179.079 cv
383.66 179.079 382.839 178.257 382.839 177.247 cv
382.839 176.236 383.66 175.411 384.674 175.411 cv
385.685 175.411 386.509 176.236 386.509 177.247 cv
cp
323.341 164.4 mo
323.341 163.386 324.162 162.571 325.176 162.571 cv
326.187 162.571 327.007 163.386 327.007 164.4 cv
327.007 165.415 326.187 166.236 325.176 166.236 cv
324.162 166.236 323.341 165.415 323.341 164.4 cv
cp
289.267 166.236 mo
288.256 166.236 287.432 165.415 287.432 164.4 cv
287.432 163.386 288.256 162.571 289.267 162.571 cv
290.278 162.571 291.098 163.386 291.098 164.4 cv
291.098 165.415 290.278 166.236 289.267 166.236 cv
cp
602.948 169.381 mo
603.958 169.381 604.779 170.203 604.779 171.216 cv
604.779 172.23 603.958 173.052 602.948 173.052 cv
601.934 173.052 601.111 172.23 601.111 171.216 cv
601.111 170.203 601.934 169.381 602.948 169.381 cv
cp
602.948 175.671 mo
605.402 175.671 607.4 173.675 607.4 171.216 cv
607.4 168.758 605.402 166.758 602.948 166.758 cv
600.649 166.758 598.772 168.515 598.537 170.748 cv
586.273 170.748 328.301 170.748 326.384 170.748 cv
326.384 170.126 326.384 169.298 326.384 168.669 cv
328.253 168.139 329.629 166.439 329.629 164.4 cv
329.629 161.945 327.63 159.947 325.176 159.947 cv
322.996 159.947 321.187 161.519 320.8 163.586 cv
293.636 163.586 li
293.256 161.519 291.446 159.947 289.267 159.947 cv
286.809 159.947 284.81 161.945 284.81 164.4 cv
284.81 166.859 286.809 168.855 289.267 168.855 cv
291.284 168.855 292.973 167.501 293.518 165.652 cv
320.921 165.652 li
321.385 167.231 322.684 168.451 324.314 168.765 cv
324.314 172.817 li
384.385 172.817 li
382.06 172.969 380.218 174.888 380.218 177.247 cv
380.218 179.702 382.216 181.701 384.674 181.701 cv
387.128 181.701 389.126 179.702 389.126 177.247 cv
389.126 174.888 387.282 172.969 384.963 172.817 cv
598.799 172.817 li
599.445 174.483 601.056 175.671 602.948 175.671 cv
cp
f
684.985 151.559 mo
684.985 150.544 685.807 149.723 686.82 149.723 cv
687.831 149.723 688.652 150.544 688.652 151.559 cv
688.652 152.569 687.831 153.394 686.82 153.394 cv
685.807 153.394 684.985 152.569 684.985 151.559 cv
cp
691.273 151.559 mo
691.273 149.101 689.275 147.105 686.82 147.105 cv
684.362 147.105 682.364 149.101 682.364 151.559 cv
682.364 154.017 684.362 156.012 686.82 156.012 cv
689.275 156.012 691.273 154.017 691.273 151.559 cv
cp
f
728.493 137.009 mo
729.508 137.009 730.328 137.836 730.328 138.844 cv
730.328 139.858 729.508 140.68 728.493 140.68 cv
727.486 140.68 726.658 139.858 726.658 138.844 cv
726.658 137.836 727.486 137.009 728.493 137.009 cv
cp
782.486 137.009 mo
783.496 137.009 784.321 137.836 784.321 138.844 cv
784.321 139.858 783.496 140.68 782.486 140.68 cv
781.476 140.68 780.651 139.858 780.651 138.844 cv
780.651 137.836 781.476 137.009 782.486 137.009 cv
cp
728.493 143.301 mo
730.59 143.301 732.346 141.839 732.818 139.877 cv
778.164 139.877 li
778.634 141.839 780.385 143.301 782.486 143.301 cv
784.944 143.301 786.942 141.302 786.942 138.844 cv
786.942 136.39 784.944 134.391 782.486 134.391 cv
780.385 134.391 778.634 135.853 778.164 137.811 cv
732.818 137.811 li
732.344 135.853 730.59 134.391 728.493 134.391 cv
726.035 134.391 724.039 136.39 724.039 138.844 cv
724.039 141.302 726.035 143.301 728.493 143.301 cv
cp
f
795.331 123.512 mo
796.345 123.512 797.166 124.34 797.166 125.347 cv
797.166 126.361 796.345 127.183 795.331 127.183 cv
794.32 127.183 793.494 126.361 793.494 125.347 cv
793.494 124.34 794.32 123.512 795.331 123.512 cv
cp
795.331 129.804 mo
797.789 129.804 799.787 127.806 799.787 125.347 cv
799.787 122.889 797.789 120.893 795.331 120.893 cv
792.873 120.893 790.874 122.889 790.874 125.347 cv
790.874 127.806 792.873 129.804 795.331 129.804 cv
cp
f
818.659 123.512 mo
819.668 123.512 820.492 124.34 820.492 125.347 cv
820.492 126.361 819.668 127.183 818.659 127.183 cv
817.644 127.183 816.822 126.361 816.822 125.347 cv
816.822 124.34 817.644 123.512 818.659 123.512 cv
cp
818.659 129.804 mo
821.111 129.804 823.113 127.806 823.113 125.347 cv
823.113 122.889 821.111 120.893 818.659 120.893 cv
816.199 120.893 814.201 122.889 814.201 125.347 cv
814.201 127.806 816.199 129.804 818.659 129.804 cv
cp
f
771.218 257.708 mo
770.203 257.708 769.383 256.884 769.383 255.876 cv
769.383 254.861 770.203 254.04 771.218 254.04 cv
772.228 254.04 773.049 254.861 773.049 255.876 cv
773.049 256.884 772.228 257.708 771.218 257.708 cv
cp
775.67 255.876 mo
775.67 253.417 773.676 251.423 771.218 251.423 cv
768.76 251.423 766.76 253.417 766.76 255.876 cv
766.76 258.333 768.76 260.332 771.218 260.332 cv
773.676 260.332 775.67 258.333 775.67 255.876 cv
cp
f
806.863 259.021 mo
805.851 259.021 805.026 258.201 805.026 257.186 cv
805.026 256.172 805.851 255.351 806.863 255.351 cv
807.873 255.351 808.7 256.172 808.7 257.186 cv
808.7 258.201 807.873 259.021 806.863 259.021 cv
cp
806.863 252.732 mo
804.405 252.732 802.404 254.732 802.404 257.186 cv
802.404 259.644 804.405 261.639 806.863 261.639 cv
809.321 261.639 811.317 259.644 811.317 257.186 cv
811.317 254.732 809.321 252.732 806.863 252.732 cv
cp
f
794.807 294.14 mo
795.817 294.14 796.642 294.962 796.642 295.975 cv
796.642 296.989 795.817 297.812 794.807 297.812 cv
793.792 297.812 792.972 296.989 792.972 295.975 cv
792.972 294.962 793.792 294.14 794.807 294.14 cv
cp
790.351 295.975 mo
790.351 298.433 792.349 300.432 794.807 300.432 cv
797.265 300.432 799.261 298.433 799.261 295.975 cv
799.261 293.517 797.265 291.522 794.807 291.522 cv
792.349 291.522 790.351 293.517 790.351 295.975 cv
cp
f
818.92 329.175 mo
817.909 329.175 817.086 328.355 817.086 327.34 cv
817.086 326.33 817.909 325.509 818.92 325.509 cv
819.934 325.509 820.754 326.33 820.754 327.34 cv
820.754 328.355 819.934 329.175 818.92 329.175 cv
cp
408.787 310.391 mo
407.776 310.391 406.954 309.568 406.954 308.558 cv
406.954 307.547 407.776 306.727 408.787 306.727 cv
409.797 306.727 410.622 307.547 410.622 308.558 cv
410.622 309.568 409.797 310.391 408.787 310.391 cv
cp
818.92 322.888 mo
816.838 322.888 815.094 324.332 814.611 326.265 cv
800.402 326.265 428.477 326.265 427.649 326.265 cv
427.144 325.76 415.547 314.161 412.457 311.075 cv
412.951 310.358 413.243 309.492 413.243 308.558 cv
413.243 306.1 411.245 304.102 408.787 304.102 cv
406.329 304.102 404.329 306.1 404.329 308.558 cv
404.329 311.014 406.329 313.014 408.787 313.014 cv
409.558 313.014 410.276 312.797 410.911 312.452 cv
426.791 328.328 li
814.585 328.328 li
815.037 330.311 816.804 331.799 818.92 331.799 cv
821.378 331.799 823.372 329.802 823.372 327.34 cv
823.372 324.886 821.378 322.888 818.92 322.888 cv
cp
f
830.453 329.175 mo
829.441 329.175 828.618 328.355 828.618 327.34 cv
828.618 326.33 829.441 325.509 830.453 325.509 cv
831.46 325.509 832.288 326.33 832.288 327.34 cv
832.288 328.355 831.46 329.175 830.453 329.175 cv
cp
830.453 322.888 mo
827.995 322.888 825.993 324.886 825.993 327.34 cv
825.993 329.802 827.995 331.799 830.453 331.799 cv
832.908 331.799 834.91 329.802 834.91 327.34 cv
834.91 324.886 832.908 322.888 830.453 322.888 cv
cp
f
840.411 204.508 mo
840.411 203.494 841.235 202.671 842.25 202.671 cv
843.261 202.671 844.081 203.494 844.081 204.508 cv
844.081 205.515 843.261 206.339 842.25 206.339 cv
841.235 206.339 840.411 205.515 840.411 204.508 cv
cp
846.702 204.508 mo
846.702 202.05 844.704 200.048 842.25 200.048 cv
839.788 200.048 837.791 202.05 837.791 204.508 cv
837.791 206.958 839.788 208.96 842.25 208.96 cv
844.704 208.96 846.702 206.958 846.702 204.508 cv
cp
f
985.616 317.079 mo
984.602 317.079 983.785 316.255 983.785 315.244 cv
983.785 314.233 984.602 313.407 985.616 313.407 cv
986.631 313.407 987.451 314.233 987.451 315.244 cv
987.451 316.255 986.631 317.079 985.616 317.079 cv
cp
985.616 310.784 mo
983.335 310.784 981.472 312.517 981.21 314.729 cv
974.082 314.729 li
974.082 307.38 li
960.193 307.38 li
960.193 322.582 li
974.082 322.582 li
974.082 316.8 li
981.459 316.8 li
982.095 318.49 983.709 319.697 985.616 319.697 cv
988.074 319.697 990.071 317.702 990.071 315.244 cv
990.071 312.786 988.074 310.784 985.616 310.784 cv
cp
f
985.616 271.473 mo
984.602 271.473 983.785 270.65 983.785 269.636 cv
983.785 268.622 984.602 267.801 985.616 267.801 cv
986.631 267.801 987.451 268.622 987.451 269.636 cv
987.451 270.65 986.631 271.473 985.616 271.473 cv
cp
985.616 265.183 mo
983.582 265.183 981.882 266.563 981.351 268.424 cv
974.082 268.424 li
974.082 261.248 li
960.193 261.248 li
960.193 276.452 li
974.082 276.452 li
974.082 270.497 li
981.248 270.497 li
981.646 272.544 983.455 274.094 985.616 274.094 cv
988.074 274.094 990.071 272.092 990.071 269.636 cv
990.071 267.178 988.074 265.183 985.616 265.183 cv
cp
f
985.616 226.128 mo
984.602 226.128 983.785 225.308 983.785 224.294 cv
983.785 223.279 984.602 222.458 985.616 222.458 cv
986.631 222.458 987.451 223.279 987.451 224.294 cv
987.451 225.308 986.631 226.128 985.616 226.128 cv
cp
985.616 219.833 mo
983.425 219.833 981.604 221.431 981.24 223.517 cv
974.082 223.517 li
974.082 216.429 li
960.193 216.429 li
960.193 231.629 li
974.082 231.629 li
974.082 225.587 li
981.377 225.587 li
981.939 227.409 983.614 228.744 985.616 228.744 cv
988.074 228.744 990.071 226.748 990.071 224.294 cv
990.071 221.831 988.074 219.833 985.616 219.833 cv
cp
f
985.616 179.734 mo
984.602 179.734 983.785 178.912 983.785 177.898 cv
983.785 176.89 984.602 176.066 985.616 176.066 cv
986.631 176.066 987.451 176.89 987.451 177.898 cv
987.451 178.912 986.631 179.734 985.616 179.734 cv
cp
985.616 173.443 mo
983.274 173.443 981.373 175.266 981.194 177.567 cv
974.082 177.567 li
974.082 170.825 li
960.193 170.825 li
960.193 186.023 li
974.082 186.023 li
974.082 179.634 li
981.514 179.634 li
982.189 181.229 983.774 182.355 985.616 182.355 cv
988.074 182.355 990.071 180.356 990.071 177.898 cv
990.071 175.443 988.074 173.443 985.616 173.443 cv
cp
f
714.556 122.334 mo
695.684 122.334 li
695.684 124.51 li
686.828 124.51 li
686.828 124.51 674.637 137.58 674.048 138.206 cv
673.33 138.206 662.537 138.206 659.296 138.206 cv
659.296 135.699 li
640.428 135.699 li
640.428 141.996 li
659.296 141.996 li
659.296 140.273 li
674.95 140.273 li
674.95 140.273 687.144 127.202 687.728 126.58 cv
688.357 126.58 693.42 126.58 695.684 126.58 cv
695.684 128.626 li
714.556 128.626 li
714.556 122.334 li
cp
f
714.556 135.699 mo
695.684 135.699 li
695.684 137.68 li
684.667 137.68 li
684.667 137.68 673.451 149.643 672.87 150.262 cv
672.186 150.262 662.803 150.262 659.296 150.262 cv
659.296 148.282 li
640.428 148.282 li
640.428 154.575 li
659.296 154.575 li
659.296 152.328 li
673.771 152.328 li
673.771 152.328 684.982 140.369 685.563 139.749 cv
686.231 139.749 693.11 139.749 695.684 139.749 cv
695.684 141.996 li
714.556 141.996 li
714.556 135.699 li
cp
f
714.556 148.542 mo
695.684 148.542 li
695.684 154.835 li
714.556 154.835 li
714.556 148.542 li
cp
f
681.314 164.426 mo
680.302 164.426 679.477 163.605 679.477 162.597 cv
679.477 161.583 680.302 160.758 681.314 160.758 cv
682.324 160.758 683.15 161.583 683.15 162.597 cv
683.15 163.605 682.324 164.426 681.314 164.426 cv
cp
714.556 165.344 mo
714.556 159.054 li
695.684 159.054 li
695.684 161.512 li
685.624 161.512 li
685.138 159.581 683.397 158.137 681.314 158.137 cv
678.857 158.137 676.859 160.132 676.859 162.597 cv
676.859 165.049 678.857 167.049 681.314 167.049 cv
683.432 167.049 685.198 165.562 685.652 163.586 cv
695.684 163.586 li
695.684 165.344 li
714.556 165.344 li
cp
f
695.684 202.031 mo
669.877 202.031 li
669.877 202.031 662.925 208.983 662.366 209.538 cv
661.534 209.538 632.577 209.538 632.577 209.538 cv
632.577 209.538 632.577 241.325 632.577 243.266 cv
630.856 243.266 620.695 243.266 620.695 243.266 cv
620.695 250.94 li
618.06 250.94 li
618.06 272.255 li
625.051 272.255 li
625.051 250.94 li
622.762 250.94 li
622.762 249.288 622.762 246.419 622.762 245.333 cv
624.489 245.333 634.644 245.333 634.644 245.333 cv
634.644 245.333 634.644 213.557 634.644 211.612 cv
636.57 211.612 663.221 211.612 663.221 211.612 cv
663.221 211.612 670.175 204.654 670.733 204.1 cv
671.457 204.1 690.685 204.1 695.684 204.1 cv
695.684 206.47 li
714.556 206.47 li
714.556 200.181 li
695.684 200.181 li
695.684 202.031 li
cp
f
307.089 185.895 mo
306.078 185.895 305.257 185.07 305.257 184.059 cv
305.257 183.048 306.078 182.223 307.089 182.223 cv
308.099 182.223 308.924 183.048 308.924 184.059 cv
308.924 185.07 308.099 185.895 307.089 185.895 cv
cp
869.459 220.096 mo
869.459 213.808 li
850.581 213.808 li
850.581 216.467 li
840.837 216.467 755.858 216.467 755.033 216.467 cv
754.445 215.848 735.051 195.606 735.051 195.606 cv
735.051 195.606 622.438 195.606 621.586 195.606 cv
621.055 195.073 616.742 190.76 616.742 190.76 cv
616.742 190.76 441.142 190.76 440.316 190.76 cv
439.759 190.201 432.889 183.331 432.889 183.331 cv
311.469 183.331 li
311.124 181.222 309.296 179.602 307.089 179.602 cv
304.631 179.602 302.636 181.601 302.636 184.059 cv
302.636 186.517 304.631 188.514 307.089 188.514 cv
309.076 188.514 310.744 187.197 311.317 185.4 cv
322.771 185.4 431.227 185.4 432.032 185.4 cv
432.592 185.958 439.461 192.827 439.461 192.827 cv
439.461 192.827 615.058 192.827 615.882 192.827 cv
616.416 193.358 620.735 197.675 620.735 197.675 cv
620.735 197.675 733.291 197.675 734.165 197.675 cv
734.76 198.292 754.152 218.538 754.152 218.538 cv
850.581 218.538 li
850.581 220.096 li
869.459 220.096 li
cp
f
869.459 201.753 mo
850.581 201.753 li
850.581 208.043 li
869.459 208.043 li
869.459 201.753 li
cp
f
764.664 193.365 mo
763.654 193.365 762.829 192.544 762.829 191.53 cv
762.829 190.516 763.654 189.693 764.664 189.693 cv
765.671 189.693 766.499 190.516 766.499 191.53 cv
766.499 192.544 765.671 193.365 764.664 193.365 cv
cp
869.459 188.384 mo
850.581 188.384 li
850.581 190.846 li
769.053 190.846 li
768.718 188.716 766.887 187.076 764.664 187.076 cv
762.442 187.076 760.607 188.716 760.276 190.846 cv
714.556 190.846 li
714.556 186.813 li
695.684 186.813 li
695.684 193.102 li
714.556 193.102 li
714.556 192.916 li
760.447 192.916 li
761.038 194.687 762.69 195.982 764.664 195.982 cv
766.636 195.982 768.289 194.687 768.874 192.916 cv
850.581 192.916 li
850.581 194.676 li
869.459 194.676 li
869.459 188.384 li
cp
f
869.459 175.016 mo
850.581 175.016 li
850.581 177.693 li
723.129 177.693 li
723.129 177.693 717.256 183.571 716.708 184.117 cv
715.865 184.117 669.614 184.117 669.614 184.117 cv
669.614 184.117 663.096 190.637 662.541 191.196 cv
662.103 191.196 660.501 191.196 659.296 191.196 cv
659.296 188.384 li
640.428 188.384 li
640.428 194.676 li
659.296 194.676 li
659.296 193.262 li
663.396 193.262 li
663.396 193.262 669.915 186.742 670.474 186.189 cv
671.314 186.189 717.563 186.189 717.563 186.189 cv
717.563 186.189 723.436 180.314 723.983 179.765 cv
724.801 179.765 840.252 179.765 850.581 179.765 cv
850.581 181.306 li
869.459 181.306 li
869.459 175.016 li
cp
f
869.459 161.91 mo
850.581 161.91 li
850.581 168.201 li
869.459 168.201 li
869.459 161.91 li
cp
f
869.459 149.068 mo
850.581 149.068 li
850.581 155.358 li
869.459 155.358 li
869.459 149.068 li
cp
f
869.459 135.699 mo
850.581 135.699 li
850.581 141.996 li
869.459 141.996 li
869.459 135.699 li
cp
f
869.459 122.067 mo
850.581 122.067 li
850.581 128.363 li
869.459 128.363 li
869.459 122.067 li
cp
f
640.428 202.903 mo
626.463 202.903 li
626.463 202.903 626.463 233.119 626.463 235.053 cv
624.743 235.053 614.756 235.053 614.756 235.053 cv
614.756 235.053 614.756 241.686 614.756 243.266 cv
612.799 243.266 424.219 243.266 424.219 243.266 cv
424.219 250.94 li
417.261 250.94 li
417.261 272.255 li
424.219 272.255 li
424.219 290.206 li
450.558 316.54 li
775.838 316.54 li
783.869 308.504 li
783.869 285.625 li
785.894 285.625 li
785.894 264.655 li
780.129 264.655 li
780.129 285.625 li
781.802 285.625 li
781.802 289.885 781.802 306.928 781.802 307.65 cv
781.271 308.184 775.519 313.938 774.982 314.473 cv
774.132 314.473 452.264 314.473 451.413 314.473 cv
450.831 313.886 426.871 289.931 426.288 289.346 cv
426.288 288.525 426.288 247.29 426.288 245.333 cv
428.246 245.333 616.822 245.333 616.822 245.333 cv
616.822 245.333 616.822 238.702 616.822 237.123 cv
618.543 237.123 628.529 237.123 628.529 237.123 cv
628.529 237.123 628.529 206.907 628.529 204.969 cv
629.637 204.969 635.738 204.969 640.428 204.969 cv
640.428 206.47 li
659.296 206.47 li
659.296 200.181 li
640.428 200.181 li
640.428 202.903 li
cp
f
721.153 217.086 mo
721.153 216.072 721.977 215.248 722.988 215.248 cv
723.999 215.248 724.823 216.072 724.823 217.086 cv
724.823 218.101 723.999 218.914 722.988 218.914 cv
721.977 218.914 721.153 218.101 721.153 217.086 cv
cp
640.428 227.439 mo
640.428 233.727 li
659.296 233.727 li
659.296 231.88 li
681.566 231.88 li
681.566 231.88 688.524 224.922 689.079 224.364 cv
689.852 224.364 717.741 224.364 722.134 224.364 cv
722.134 229.134 722.134 236.929 722.134 237.496 cv
721.619 238.002 717.741 241.883 717.232 242.393 cv
716.796 242.393 715.466 242.393 714.556 242.393 cv
714.556 240.022 li
695.684 240.022 li
695.684 246.308 li
714.556 246.308 li
714.556 244.459 li
718.086 244.459 li
724.2 238.35 li
724.2 221.351 li
726.063 220.821 727.444 219.121 727.444 217.086 cv
727.444 214.625 725.442 212.626 722.988 212.626 cv
720.902 212.626 719.162 214.074 718.684 216.008 cv
714.556 216.008 li
714.556 213.808 li
695.684 213.808 li
695.684 220.096 li
714.556 220.096 li
714.556 218.074 li
718.657 218.074 li
719.041 219.782 720.405 221.114 722.134 221.452 cv
722.134 221.688 722.134 221.97 722.134 222.299 cv
688.227 222.299 li
688.227 222.299 681.271 229.255 680.712 229.81 cv
680.011 229.81 664.146 229.81 659.296 229.81 cv
659.296 227.439 li
640.428 227.439 li
cp
f
640.428 247.096 mo
659.296 247.096 li
659.296 244.985 li
680.867 244.985 li
680.867 244.985 693.131 232.72 693.711 232.143 cv
694.111 232.143 695.042 232.143 695.684 232.143 cv
695.684 233.464 li
714.556 233.464 li
714.556 227.175 li
695.684 227.175 li
695.684 230.076 li
692.857 230.076 li
692.857 230.076 680.588 242.337 680.011 242.917 cv
679.306 242.917 663.798 242.917 659.296 242.917 cv
659.296 240.805 li
640.428 240.805 li
640.428 247.096 li
cp
f
725.607 285.625 mo
725.607 264.655 li
719.843 264.655 li
719.843 285.625 li
725.607 285.625 li
cp
f
731.904 285.625 mo
737.672 285.625 li
737.672 264.655 li
731.904 264.655 li
731.904 285.625 li
cp
f
743.435 285.625 mo
749.2 285.625 li
749.2 264.655 li
743.435 264.655 li
743.435 285.625 li
cp
f
756.014 264.655 mo
756.014 285.625 li
761.781 285.625 li
761.781 264.655 li
756.014 264.655 li
cp
f
767.023 285.625 mo
772.791 285.625 li
772.791 264.655 li
767.023 264.655 li
767.023 285.625 li
cp
f
797.428 264.655 mo
791.661 264.655 li
791.661 285.625 li
797.428 285.625 li
797.428 264.655 li
cp
f
803.453 264.655 mo
803.453 285.625 li
809.221 285.625 li
809.221 264.655 li
803.453 264.655 li
cp
f
482.626 272.52 mo
482.626 251.552 li
476.859 251.552 li
476.859 272.52 li
482.626 272.52 li
cp
f
488.918 272.52 mo
494.685 272.52 li
494.685 251.552 li
488.918 251.552 li
488.918 272.52 li
cp
f
500.452 272.52 mo
506.219 272.52 li
506.219 251.552 li
500.452 251.552 li
500.452 272.52 li
cp
f
513.027 251.552 mo
513.027 272.52 li
518.794 272.52 li
518.794 251.552 li
513.027 251.552 li
cp
f
524.037 272.52 mo
529.808 272.52 li
529.808 251.552 li
524.037 251.552 li
524.037 272.52 li
cp
f
536.643 272.52 mo
542.409 272.52 li
542.409 251.552 li
536.643 251.552 li
536.643 272.52 li
cp
f
554.442 251.552 mo
548.676 251.552 li
548.676 272.52 li
554.442 272.52 li
554.442 251.552 li
cp
f
560.474 251.552 mo
560.474 272.52 li
566.239 272.52 li
566.239 251.552 li
560.474 251.552 li
cp
f
436.247 272.52 mo
436.247 251.552 li
430.48 251.552 li
430.48 272.52 li
436.247 272.52 li
cp
f
442.542 272.52 mo
448.305 272.52 li
448.305 251.552 li
442.542 251.552 li
442.542 272.52 li
cp
f
454.072 272.52 mo
459.839 272.52 li
459.839 251.552 li
454.072 251.552 li
454.072 272.52 li
cp
f
466.651 251.552 mo
466.651 272.52 li
472.415 272.52 li
472.415 251.552 li
466.651 251.552 li
cp
f
893.621 319.435 mo
893.621 332.54 li
903.32 332.54 li
903.32 319.435 li
893.621 319.435 li
cp
f
913.016 319.435 mo
913.016 332.54 li
922.715 332.54 li
922.715 319.435 li
913.016 319.435 li
cp
f
922.715 273.828 mo
913.016 273.828 li
913.016 286.937 li
922.715 286.937 li
922.715 273.828 li
cp
f
931.624 294.013 mo
932.637 294.013 933.463 294.837 933.463 295.848 cv
933.463 296.858 932.637 297.681 931.624 297.681 cv
930.615 297.681 929.789 296.858 929.789 295.848 cv
929.789 294.837 930.615 294.013 931.624 294.013 cv
cp
903.579 308.949 mo
913.277 308.949 li
913.277 303.345 li
927.422 303.345 li
930.594 300.173 li
930.929 300.251 931.27 300.302 931.624 300.302 cv
934.082 300.302 936.08 298.298 936.08 295.848 cv
936.08 293.39 934.082 291.39 931.624 291.39 cv
929.168 291.39 927.167 293.39 927.167 295.848 cv
927.167 297.17 927.76 298.352 928.68 299.167 cv
927.971 299.873 926.89 300.954 926.565 301.279 cv
925.902 301.279 916.56 301.279 913.277 301.279 cv
913.277 295.848 li
903.579 295.848 li
903.579 308.949 li
cp
f
908.297 317.079 mo
907.287 317.079 906.46 316.255 906.46 315.244 cv
906.46 314.233 907.287 313.407 908.297 313.407 cv
909.311 313.407 910.136 314.233 910.136 315.244 cv
910.136 316.255 909.311 317.079 908.297 317.079 cv
cp
937.653 314.91 mo
912.72 314.91 li
912.545 312.611 910.642 310.784 908.297 310.784 cv
905.896 310.784 903.941 312.703 903.858 315.082 cv
895.514 315.082 843.141 315.082 842.337 315.082 cv
841.752 314.465 819.897 291.637 819.341 291.059 cv
819.341 290.584 819.341 287.663 819.341 285.625 cv
821.017 285.625 li
821.017 264.655 li
815.251 264.655 li
815.251 285.625 li
817.272 285.625 li
817.272 291.895 li
841.46 317.149 li
904.289 317.149 li
905.004 318.652 906.527 319.697 908.297 319.697 cv
910.142 319.697 911.727 318.574 912.4 316.977 cv
937.653 316.977 li
937.653 322.582 li
951.543 322.582 li
951.543 307.38 li
937.653 307.38 li
937.653 314.91 li
cp
f
908.556 271.473 mo
907.549 271.473 906.725 270.65 906.725 269.636 cv
906.725 268.622 907.549 267.801 908.556 267.801 cv
909.57 267.801 910.394 268.622 910.394 269.636 cv
910.394 270.65 909.57 271.473 908.556 271.473 cv
cp
937.653 268.249 mo
912.769 268.249 li
912.185 266.473 910.531 265.183 908.556 265.183 cv
906.46 265.183 904.705 266.642 904.236 268.603 cv
896.949 268.603 li
896.949 273.828 li
893.621 273.828 li
893.621 282.454 li
883.449 282.454 li
883.449 282.454 872.272 293.627 871.696 294.199 cv
870.872 294.199 839.047 294.199 838.223 294.199 cv
837.69 293.673 832.452 288.434 831.924 287.902 cv
831.924 287.541 831.924 286.513 831.924 285.625 cv
833.598 285.625 li
833.598 264.655 li
827.83 264.655 li
827.83 285.625 li
829.853 285.625 li
829.853 288.763 li
837.364 296.268 li
872.556 296.268 li
872.556 296.268 883.732 285.091 884.302 284.519 cv
884.898 284.519 890.749 284.519 893.621 284.519 cv
893.621 286.937 li
903.32 286.937 li
903.32 273.828 li
899.019 273.828 li
899.019 272.8 899.019 271.448 899.019 270.669 cv
900.087 270.669 902.735 270.669 904.236 270.669 cv
904.705 272.627 906.46 274.094 908.556 274.094 cv
910.782 274.094 912.617 272.447 912.947 270.316 cv
937.653 270.316 li
937.653 276.452 li
951.543 276.452 li
951.543 261.248 li
937.653 261.248 li
937.653 268.249 li
cp
f
908.556 225.34 mo
907.549 225.34 906.725 224.518 906.725 223.503 cv
906.725 222.493 907.549 221.672 908.556 221.672 cv
909.57 221.672 910.394 222.493 910.394 223.503 cv
910.394 224.518 909.57 225.34 908.556 225.34 cv
cp
937.653 224.043 mo
912.959 224.043 li
912.981 223.864 913.016 223.689 913.016 223.503 cv
913.016 221.045 911.018 219.051 908.556 219.051 cv
906.105 219.051 904.103 221.045 904.103 223.503 cv
904.103 223.568 904.122 223.632 904.126 223.697 cv
896.603 223.697 li
896.603 229.012 li
893.621 229.012 li
893.621 241.07 li
896.349 241.07 li
889.18 248.239 li
889.18 248.239 889.18 268.475 889.18 269.298 cv
888.667 269.81 884.617 273.856 884.104 274.366 cv
883.363 274.366 852.822 274.366 845.912 274.366 cv
845.912 264.655 li
840.146 264.655 li
840.146 285.625 li
845.912 285.625 li
845.912 276.433 li
884.959 276.433 li
891.247 270.152 li
891.247 270.152 891.247 249.92 891.247 249.096 cv
891.731 248.612 897.606 242.732 899.274 241.07 cv
902.796 241.07 li
902.796 229.012 li
898.674 229.012 li
898.674 228.106 898.674 226.626 898.674 225.764 cv
899.939 225.764 903.527 225.764 904.737 225.764 cv
905.517 227.073 906.93 227.963 908.556 227.963 cv
910.037 227.963 911.344 227.227 912.157 226.109 cv
937.653 226.109 li
937.653 231.629 li
951.543 231.629 li
951.543 216.429 li
937.653 216.429 li
937.653 224.043 li
cp
f
908.556 180.52 mo
907.549 180.52 906.725 179.695 906.725 178.681 cv
906.725 177.673 907.549 176.851 908.556 176.851 cv
909.57 176.851 910.394 177.673 910.394 178.681 cv
910.394 179.695 909.57 180.52 908.556 180.52 cv
cp
937.653 177.744 mo
912.909 177.744 li
912.475 175.735 910.69 174.23 908.556 174.23 cv
906.618 174.23 904.98 175.484 904.373 177.213 cv
897.128 177.213 li
897.128 183.142 li
893.621 183.142 li
893.621 190.323 li
889.525 190.323 li
889.525 190.323 889.525 236.827 889.525 237.667 cv
888.948 238.248 872.799 254.398 872.221 254.971 cv
871.803 254.971 870.458 254.971 869.459 254.971 cv
869.459 252.859 li
850.581 252.859 li
850.581 259.15 li
869.459 259.15 li
869.459 257.038 li
873.078 257.038 li
891.597 238.521 li
891.597 238.521 891.597 194.366 891.597 192.39 cv
892.155 192.39 892.928 192.39 893.621 192.39 cv
893.621 195.2 li
902.796 195.2 li
902.796 183.142 li
899.198 183.142 li
899.198 181.948 899.198 180.179 899.198 179.285 cv
900.283 179.285 902.848 179.285 904.164 179.285 cv
904.46 181.456 906.307 183.142 908.556 183.142 cv
910.626 183.142 912.351 181.723 912.852 179.811 cv
937.653 179.811 li
937.653 186.023 li
951.543 186.023 li
951.543 170.825 li
937.653 170.825 li
937.653 177.744 li
cp
f
908.556 133.867 mo
907.549 133.867 906.725 133.043 906.725 132.031 cv
906.725 131.02 907.549 130.196 908.556 130.196 cv
909.57 130.196 910.394 131.02 910.394 132.031 cv
910.394 133.043 909.57 133.867 908.556 133.867 cv
cp
937.653 131.085 mo
912.907 131.085 li
912.473 129.082 910.69 127.574 908.556 127.574 cv
906.558 127.574 904.878 128.912 904.315 130.735 cv
895.031 130.735 li
895.031 137.009 li
893.621 137.009 li
893.621 144.19 li
884.195 144.19 li
884.195 144.19 884.195 229.568 884.195 230.417 cv
883.636 230.98 872.088 242.527 871.525 243.088 cv
871.172 243.088 870.253 243.088 869.459 243.088 cv
869.459 241.07 li
850.581 241.07 li
850.581 247.36 li
869.459 247.36 li
869.459 245.158 li
872.381 245.158 li
886.267 231.273 li
886.267 231.273 886.267 148.279 886.267 146.257 cv
887.435 146.257 891.388 146.257 893.621 146.257 cv
893.621 149.068 li
902.796 149.068 li
902.796 137.009 li
897.102 137.009 li
897.102 135.841 897.102 133.793 897.102 132.805 cv
898.332 132.805 902.325 132.805 904.183 132.805 cv
904.548 134.891 906.367 136.489 908.556 136.489 cv
910.63 136.489 912.354 135.067 912.852 133.151 cv
937.653 133.151 li
937.653 139.627 li
951.543 139.627 li
951.543 124.429 li
937.653 124.429 li
937.653 131.085 li
cp
f
908.035 87.2114 mo
907.02 87.2114 906.2 86.3896 906.2 85.3755 cv
906.2 84.3647 907.02 83.5405 908.035 83.5405 cv
909.046 83.5405 909.87 84.3647 909.87 85.3755 cv
909.87 86.3896 909.046 87.2114 908.035 87.2114 cv
cp
937.653 85.1255 mo
912.465 85.1255 li
912.332 82.7891 910.405 80.9219 908.035 80.9219 cv
905.575 80.9219 903.579 82.9214 903.579 85.3755 cv
903.579 85.4722 903.605 85.5586 903.609 85.6519 cv
895.553 85.6519 li
895.553 90.356 li
893.621 90.356 li
893.621 101.826 li
878.079 117.363 li
878.079 117.363 878.079 223.273 878.079 224.126 cv
877.563 224.639 873.264 228.944 872.747 229.46 cv
872.309 229.46 870.663 229.46 869.459 229.46 cv
869.459 227.175 li
850.581 227.175 li
850.581 233.464 li
869.459 233.464 li
869.459 231.527 li
873.603 231.527 li
880.149 224.981 li
880.149 224.981 880.149 119.071 880.149 118.217 cv
880.674 117.693 893.304 105.066 895.954 102.415 cv
902.796 102.415 li
902.796 90.356 li
897.622 90.356 li
897.622 89.4453 897.622 88.3794 897.622 87.7212 cv
898.951 87.7212 903.033 87.7212 904.263 87.7212 cv
905.049 88.9829 906.439 89.8325 908.035 89.8325 cv
909.844 89.8325 911.397 88.7451 912.093 87.1992 cv
937.653 87.1992 li
937.653 94.5474 li
951.543 94.5474 li
951.543 79.3491 li
937.653 79.3491 li
937.653 85.1255 li
cp
f
932.148 110.278 mo
933.162 110.278 933.983 111.099 933.983 112.11 cv
933.983 113.124 933.162 113.946 932.148 113.946 cv
931.134 113.946 930.313 113.124 930.313 112.11 cv
930.313 111.099 931.134 110.278 932.148 110.278 cv
cp
903.055 113.683 mo
903.055 125.739 li
912.229 125.739 li
912.229 120.922 li
926.198 120.922 li
930.784 116.33 li
931.217 116.471 931.669 116.567 932.148 116.567 cv
934.606 116.567 936.602 114.572 936.602 112.11 cv
936.602 109.655 934.606 107.652 932.148 107.652 cv
929.689 107.652 927.691 109.655 927.691 112.11 cv
927.691 113.323 928.182 114.42 928.972 115.226 cv
927.893 116.301 925.737 118.461 925.344 118.852 cv
924.641 118.852 914.794 118.852 912.229 118.852 cv
912.229 113.683 li
903.055 113.683 li
cp
f
932.148 163.22 mo
933.162 163.22 933.983 164.048 933.983 165.055 cv
933.983 166.066 933.162 166.891 932.148 166.891 cv
931.134 166.891 930.313 166.066 930.313 165.055 cv
930.313 164.048 931.134 163.22 932.148 163.22 cv
cp
903.055 159.555 mo
903.055 171.608 li
912.229 171.608 li
912.229 165.825 li
927.768 165.825 li
928.136 167.917 929.956 169.509 932.148 169.509 cv
934.606 169.509 936.602 167.513 936.602 165.055 cv
936.602 162.597 934.606 160.602 932.148 160.602 cv
930.145 160.602 928.467 161.94 927.906 163.759 cv
912.229 163.759 li
912.229 159.555 li
903.055 159.555 li
cp
f
932.148 202.536 mo
933.162 202.536 933.983 203.36 933.983 204.371 cv
933.983 205.382 933.162 206.208 932.148 206.208 cv
931.134 206.208 930.313 205.382 930.313 204.371 cv
930.313 203.36 931.134 202.536 932.148 202.536 cv
cp
903.055 205.417 mo
903.055 217.478 li
912.229 217.478 li
912.229 212.484 li
926.377 212.484 li
930.389 208.466 li
930.929 208.698 931.525 208.827 932.148 208.827 cv
934.606 208.827 936.602 206.829 936.602 204.371 cv
936.602 201.913 934.606 199.915 932.148 199.915 cv
929.689 199.915 927.691 201.913 927.691 204.371 cv
927.691 205.45 928.093 206.426 928.734 207.199 cv
927.813 208.121 925.906 210.024 925.519 210.415 cv
924.815 210.415 914.813 210.415 912.229 210.415 cv
912.229 205.417 li
903.055 205.417 li
cp
f
932.148 248.669 mo
933.162 248.669 933.983 249.491 933.983 250.503 cv
933.983 251.512 933.162 252.335 932.148 252.335 cv
931.134 252.335 930.313 251.512 930.313 250.503 cv
930.313 249.491 931.134 248.669 932.148 248.669 cv
cp
903.055 251.024 mo
903.055 263.085 li
912.229 263.085 li
912.229 258.265 li
926.377 258.265 li
930.165 254.47 li
930.762 254.774 931.434 254.96 932.148 254.96 cv
934.606 254.96 936.602 252.958 936.602 250.503 cv
936.602 248.045 934.606 246.047 932.148 246.047 cv
929.689 246.047 927.691 248.045 927.691 250.503 cv
927.691 251.489 928.029 252.395 928.573 253.136 cv
927.612 254.098 925.887 255.826 925.519 256.195 cv
924.839 256.195 915.31 256.195 912.229 256.195 cv
912.229 251.024 li
903.055 251.024 li
cp
f
912.491 137.009 mo
912.491 149.068 li
921.666 149.068 li
921.666 137.009 li
912.491 137.009 li
cp
f
912.491 183.142 mo
912.491 195.2 li
921.666 195.2 li
921.666 183.142 li
912.491 183.142 li
cp
f
912.491 229.012 mo
912.491 241.07 li
921.666 241.07 li
921.666 229.012 li
912.491 229.012 li
cp
f
830.974 123.512 mo
831.984 123.512 832.81 124.34 832.81 125.347 cv
832.81 126.361 831.984 127.183 830.974 127.183 cv
829.964 127.183 829.143 126.361 829.143 125.347 cv
829.143 124.34 829.964 123.512 830.974 123.512 cv
cp
809.57 116.741 mo
809.57 95.4268 li
803.457 95.4268 li
803.457 116.741 li
805.744 116.741 li
805.744 133.421 li
811.85 139.531 li
825.317 139.531 li
831.707 134.314 li
831.707 129.731 li
833.819 129.377 835.433 127.555 835.433 125.347 cv
835.433 122.889 833.432 120.893 830.974 120.893 cv
828.519 120.893 826.518 122.889 826.518 125.347 cv
826.518 127.336 827.836 129.002 829.637 129.577 cv
829.637 130.713 829.637 132.764 829.637 133.335 cv
829.01 133.844 825.06 137.07 824.58 137.464 cv
823.907 137.464 813.482 137.464 812.708 137.464 cv
812.199 136.954 808.316 133.071 807.81 132.564 cv
807.81 131.874 807.81 120.316 807.81 116.741 cv
809.57 116.741 li
cp
f
726.227 116.741 mo
726.227 95.4268 li
720.108 95.4268 li
720.108 104.918 li
691.499 104.918 li
691.499 104.918 672.759 123.659 672.172 124.25 cv
671.495 124.25 662.268 124.25 659.296 124.25 cv
659.296 122.334 li
640.428 122.334 li
640.428 128.626 li
659.296 128.626 li
659.296 126.316 li
673.028 126.316 li
673.028 126.316 691.771 107.573 692.359 106.986 cv
693.087 106.986 714.78 106.986 720.108 106.986 cv
720.108 116.741 li
726.227 116.741 li
cp
f
334.436 122.334 mo
334.436 124.313 li
234.936 124.313 li
234.936 124.313 229.98 129.971 229.431 130.604 cv
228.783 130.604 221.996 130.604 218.537 130.604 cv
218.537 132.67 li
230.37 132.67 li
230.37 132.67 235.32 127.013 235.871 126.38 cv
236.748 126.38 324.333 126.38 334.436 126.38 cv
334.436 128.447 li
353.654 128.447 li
353.654 122.334 li
334.436 122.334 li
cp
f
378.907 135.571 mo
379.917 135.571 380.742 136.393 380.742 137.407 cv
380.742 138.414 379.917 139.242 378.907 139.242 cv
377.893 139.242 377.072 138.414 377.072 137.407 cv
377.072 136.393 377.893 135.571 378.907 135.571 cv
cp
334.436 134.349 mo
334.436 140.461 li
353.654 140.461 li
353.654 138.44 li
374.58 138.44 li
375.053 140.398 376.806 141.86 378.907 141.86 cv
381.361 141.86 383.363 139.865 383.363 137.407 cv
383.363 134.949 381.361 132.946 378.907 132.946 cv
376.806 132.946 375.053 134.416 374.58 136.374 cv
353.654 136.374 li
353.654 134.349 li
334.436 134.349 li
cp
f
420.319 149.197 mo
421.33 149.197 422.152 150.025 422.152 151.033 cv
422.152 152.046 421.33 152.871 420.319 152.871 cv
419.309 152.871 418.482 152.046 418.482 151.033 cv
418.482 150.025 419.309 149.197 420.319 149.197 cv
cp
812.366 169.905 mo
813.381 169.905 814.201 170.728 814.201 171.743 cv
814.201 172.75 813.381 173.572 812.366 173.572 cv
811.355 173.572 810.535 172.75 810.535 171.743 cv
810.535 170.728 811.355 169.905 812.366 169.905 cv
cp
686.82 179.342 mo
685.807 179.342 684.985 178.517 684.985 177.507 cv
684.985 176.495 685.807 175.671 686.82 175.671 cv
687.831 175.671 688.652 176.495 688.652 177.507 cv
688.652 178.517 687.831 179.342 686.82 179.342 cv
cp
353.654 147.146 mo
334.436 147.146 li
334.436 153.266 li
353.654 153.266 li
353.654 151.85 li
415.94 151.85 li
416.33 153.917 418.141 155.492 420.319 155.492 cv
422.434 155.492 424.2 154.003 424.652 152.027 cv
428.763 152.027 606.855 152.027 608.639 152.027 cv
608.639 153.901 608.639 173.341 608.639 173.341 cv
640.428 173.341 li
640.428 180.779 li
659.296 180.779 li
659.296 173.341 li
685.274 173.341 li
683.58 173.974 682.364 175.593 682.364 177.507 cv
682.364 179.965 684.362 181.96 686.82 181.96 cv
689.275 181.96 691.273 179.965 691.273 177.507 cv
691.273 175.593 690.058 173.974 688.359 173.341 cv
695.684 173.341 li
695.684 180.779 li
714.556 180.779 li
714.556 173.164 li
808.168 173.164 li
808.765 174.926 810.409 176.197 812.366 176.197 cv
814.828 176.197 816.822 174.198 816.822 171.743 cv
816.822 169.285 814.828 167.282 812.366 167.282 cv
810.126 167.282 808.288 168.944 807.977 171.098 cv
714.556 171.098 li
714.556 169.249 li
695.684 169.249 li
695.684 171.274 li
659.296 171.274 li
659.296 169.249 li
640.428 169.249 li
640.428 171.274 li
635.261 171.274 612.423 171.274 610.709 171.274 cv
610.709 169.4 610.709 149.958 610.709 149.958 cv
424.625 149.958 li
424.141 148.022 422.403 146.577 420.319 146.577 cv
418.3 146.577 416.609 147.938 416.064 149.784 cv
353.654 149.784 li
353.654 147.146 li
cp
f
433.162 156.012 mo
434.173 156.012 434.997 156.834 434.997 157.848 cv
434.997 158.862 434.173 159.683 433.162 159.683 cv
432.151 159.683 431.327 158.862 431.327 157.848 cv
431.327 156.834 432.151 156.012 433.162 156.012 cv
cp
334.436 161.128 mo
334.436 167.24 li
353.654 167.24 li
353.654 165.306 li
355.656 165.306 li
355.656 165.306 360.618 160.341 361.161 159.802 cv
361.967 159.802 423.102 159.802 429.177 159.802 cv
429.902 161.279 431.407 162.302 433.162 162.302 cv
435.62 162.302 437.618 160.306 437.618 157.848 cv
437.618 155.39 435.62 153.394 433.162 153.394 cv
430.746 153.394 428.782 155.332 428.721 157.732 cv
360.305 157.732 li
360.305 157.732 355.341 162.694 354.802 163.239 cv
354.538 163.239 354.085 163.239 353.654 163.239 cv
353.654 161.128 li
334.436 161.128 li
cp
f
353.654 179.997 mo
353.654 173.887 li
334.436 173.887 li
334.436 179.997 li
353.654 179.997 li
cp
f
432.372 195.591 mo
433.386 195.591 434.21 196.414 434.21 197.428 cv
434.21 198.439 433.386 199.261 432.372 199.261 cv
431.361 199.261 430.54 198.439 430.54 197.428 cv
430.54 196.414 431.361 195.591 432.372 195.591 cv
cp
334.436 188.384 mo
334.436 194.495 li
353.654 194.495 li
353.654 192.04 li
364.254 192.04 425.146 192.04 425.919 192.04 cv
426.27 192.396 427.813 193.937 428.744 194.866 cv
428.227 195.591 427.921 196.473 427.921 197.428 cv
427.921 199.882 429.921 201.883 432.372 201.883 cv
434.83 201.883 436.832 199.882 436.832 197.428 cv
436.832 194.97 434.83 192.971 432.372 192.971 cv
431.623 192.971 430.928 193.172 430.305 193.506 cv
426.776 189.971 li
353.654 189.971 li
353.654 188.384 li
334.436 188.384 li
cp
f
367.637 201.096 mo
368.647 201.096 369.474 201.917 369.474 202.931 cv
369.474 203.942 368.647 204.762 367.637 204.762 cv
366.626 204.762 365.8 203.942 365.8 202.931 cv
365.8 201.917 366.626 201.096 367.637 201.096 cv
cp
334.436 207.08 mo
353.654 207.08 li
353.654 204.616 li
363.517 204.616 li
364.185 206.24 365.779 207.388 367.637 207.388 cv
370.093 207.388 372.091 205.385 372.091 202.931 cv
372.091 200.469 370.093 198.475 367.637 198.475 cv
365.31 198.475 363.414 200.275 363.217 202.549 cv
353.654 202.549 li
353.654 200.963 li
334.436 200.963 li
334.436 207.08 li
cp
f
390.699 201.355 mo
391.71 201.355 392.534 202.183 392.534 203.191 cv
392.534 204.204 391.71 205.03 390.699 205.03 cv
389.689 205.03 388.868 204.204 388.868 203.191 cv
388.868 202.183 389.689 201.355 390.699 201.355 cv
cp
334.436 220.01 mo
353.654 220.01 li
353.654 218.249 li
355.136 218.249 li
355.136 218.249 361.222 212.163 361.773 211.612 cv
362.598 211.612 384.837 211.612 384.837 211.612 cv
389.107 207.344 li
389.605 207.53 390.137 207.646 390.699 207.646 cv
393.157 207.646 395.158 205.649 395.158 203.191 cv
395.158 200.739 393.157 198.737 390.699 198.737 cv
388.241 198.737 386.247 200.739 386.247 203.191 cv
386.247 204.327 386.685 205.355 387.387 206.142 cv
386.498 207.03 384.391 209.135 383.98 209.538 cv
383.154 209.538 360.918 209.538 360.918 209.538 cv
360.918 209.538 354.826 215.63 354.273 216.183 cv
354.118 216.183 353.897 216.183 353.654 216.183 cv
353.654 213.895 li
334.436 213.895 li
334.436 220.01 li
cp
f
395.957 272.255 mo
395.957 280.547 395.957 318.903 395.957 320.673 cv
394.124 320.673 339.362 320.673 329.893 320.673 cv
329.893 314.194 li
306.827 314.194 li
306.827 327.299 li
329.893 327.299 li
329.893 322.744 li
398.026 322.744 li
398.026 272.255 li
400.484 272.255 li
400.484 250.94 li
393.499 250.94 li
393.499 272.255 li
395.957 272.255 li
cp
f
405.907 82.8442 mo
405.907 104.161 li
407.49 104.161 li
407.49 104.682 407.49 105.236 407.49 105.525 cv
406.931 106.081 397.188 115.829 396.63 116.388 cv
395.832 116.388 384.507 116.388 384.507 116.388 cv
384.507 116.388 371.225 129.667 370.648 130.244 cv
369.797 130.244 240.612 130.244 240.612 130.244 cv
240.612 130.244 233.583 137.269 233.025 137.831 cv
232.414 137.831 223.128 137.831 218.537 137.831 cv
218.537 139.896 li
233.884 139.896 li
233.884 139.896 240.91 132.869 241.469 132.314 cv
242.318 132.314 371.502 132.314 371.502 132.314 cv
371.502 132.314 384.782 119.032 385.364 118.451 cv
386.16 118.451 397.484 118.451 397.484 118.451 cv
409.558 106.379 li
409.558 104.161 li
412.024 104.161 li
412.024 82.8442 li
405.907 82.8442 li
cp
f
402.074 333.951 mo
400.06 333.951 298.86 333.784 296.856 333.782 cv
296.856 332.021 296.856 304.73 296.856 299.506 cv
298.435 299.094 299.669 297.844 300.053 296.249 cv
300.983 296.249 303.518 296.249 306.827 296.249 cv
306.827 301.611 li
329.893 301.611 li
329.893 296.249 li
333.382 296.249 335.886 296.249 336.372 296.249 cv
336.372 297.998 336.372 309.114 336.372 309.114 cv
392.261 309.114 li
392.261 244.813 li
396.877 244.813 401.238 244.813 402.074 244.813 cv
402.074 246.807 402.074 331.949 402.074 333.951 cv
cp
293.898 295.215 mo
293.898 294.201 294.719 293.376 295.733 293.376 cv
296.74 293.376 297.568 294.201 297.568 295.215 cv
297.568 296.226 296.74 297.048 295.733 297.048 cv
294.719 297.048 293.898 296.226 293.898 295.215 cv
cp
296.856 257.038 mo
298.803 257.038 345.781 257.038 347.727 257.038 cv
347.727 259.002 347.727 296.881 347.727 296.881 cv
380.203 296.881 li
380.203 296.881 380.203 246.795 380.203 244.813 cv
381.05 244.813 385.508 244.813 390.19 244.813 cv
390.19 251.512 390.19 305.167 390.19 307.047 cv
388.238 307.047 340.388 307.047 338.439 307.047 cv
338.439 305.294 338.439 294.178 338.439 294.178 cv
329.893 294.178 li
329.893 288.51 li
306.827 288.51 li
306.827 294.178 li
300.053 294.178 li
299.669 292.586 298.435 291.332 296.856 290.918 cv
296.856 284.874 296.856 258.765 296.856 257.038 cv
cp
378.134 242.738 mo
378.134 242.738 378.134 292.826 378.134 294.815 cv
376.272 294.815 351.66 294.815 349.798 294.815 cv
349.798 292.85 349.798 254.971 349.798 254.971 cv
294.787 254.971 li
294.787 290.867 li
293.118 291.226 291.805 292.525 291.406 294.178 cv
218.537 294.178 li
218.537 296.249 li
291.406 296.249 li
291.809 297.901 293.118 299.199 294.787 299.561 cv
294.787 335.845 li
404.141 336.025 li
404.141 242.738 li
378.134 242.738 li
cp
f
344.381 268.603 mo
329.893 268.603 li
329.893 262.647 li
306.827 262.647 li
306.827 275.752 li
329.893 275.752 li
329.893 270.669 li
332.801 270.669 340.859 270.669 342.314 270.669 cv
342.314 272.609 342.314 303.697 342.314 303.697 cv
386.498 303.697 li
386.498 272.255 li
388.956 272.255 li
388.956 250.94 li
381.961 250.94 li
381.961 272.255 li
384.427 272.255 li
384.427 279.228 384.427 300.018 384.427 301.628 cv
382.505 301.628 346.299 301.628 344.381 301.628 cv
344.381 299.687 344.381 268.603 344.381 268.603 cv
cp
f
602.948 228.355 mo
603.958 228.355 604.779 229.177 604.779 230.19 cv
604.779 231.2 603.958 232.028 602.948 232.028 cv
601.934 232.028 601.111 231.2 601.111 230.19 cv
601.111 229.177 601.934 228.355 602.948 228.355 cv
cp
419.808 231.006 mo
420.606 231.006 594.664 231.006 598.571 231.006 cv
598.959 233.073 600.768 234.646 602.948 234.646 cv
605.402 234.646 607.4 232.644 607.4 230.19 cv
607.4 227.733 605.402 225.733 602.948 225.733 cv
600.927 225.733 599.236 227.092 598.693 228.94 cv
418.904 228.94 li
407.925 240.839 li
407.925 250.94 li
405.381 250.94 li
405.381 272.255 li
412.366 272.255 li
412.366 250.94 li
409.991 250.94 li
409.991 248.068 409.991 242.21 409.991 241.648 cv
410.5 241.099 419.246 231.616 419.808 231.006 cv
cp
f
656.675 293.618 mo
657.689 293.618 658.514 294.442 658.514 295.455 cv
658.514 296.465 657.689 297.293 656.675 297.293 cv
655.664 297.293 654.844 296.465 654.844 295.455 cv
654.844 294.442 655.664 293.618 656.675 293.618 cv
cp
603.13 296.881 mo
652.477 296.881 li
653.073 298.636 654.722 299.911 656.675 299.911 cv
659.133 299.911 661.131 297.913 661.131 295.455 cv
661.131 292.999 659.133 290.996 656.675 290.996 cv
654.438 290.996 652.599 292.662 652.285 294.815 cv
645.167 294.815 604.752 294.815 603.985 294.815 cv
603.411 294.237 587.69 278.518 587.117 277.944 cv
587.117 277.39 587.117 274.009 587.117 272.255 cv
589.929 272.255 li
589.929 250.94 li
571.598 250.94 li
571.598 272.255 li
585.051 272.255 li
585.051 278.803 li
603.13 296.881 li
cp
f
669.178 215.481 mo
668.528 215.481 661.739 215.481 659.296 215.481 cv
659.296 213.546 li
640.428 213.546 li
640.428 219.833 li
659.296 219.833 li
659.296 217.55 li
670.034 217.55 li
670.034 217.55 674.91 212.674 675.45 212.138 cv
676.282 212.138 731.764 212.138 733.749 212.138 cv
733.749 214.013 733.749 236.436 733.749 237.233 cv
733.174 237.811 716.146 254.836 715.568 255.412 cv
715.352 255.412 714.965 255.412 714.556 255.412 cv
714.556 252.859 li
695.684 252.859 li
695.684 259.15 li
714.556 259.15 li
714.556 257.482 li
716.427 257.482 li
735.814 238.088 li
735.814 210.066 li
674.596 210.066 li
674.596 210.066 669.721 214.944 669.178 215.481 cv
cp
f
312.856 205.553 mo
311.845 205.553 311.021 204.732 311.021 203.718 cv
311.021 202.703 311.845 201.883 312.856 201.883 cv
313.866 201.883 314.691 202.703 314.691 203.718 cv
314.691 204.732 313.866 205.553 312.856 205.553 cv
cp
312.856 199.261 mo
310.398 199.261 308.399 201.26 308.399 203.718 cv
308.399 204.654 308.692 205.515 309.186 206.232 cv
308.206 207.213 306.58 208.839 306.223 209.192 cv
305.459 209.192 232.744 209.192 218.537 209.192 cv
218.537 211.259 li
307.081 211.259 li
310.732 207.61 li
311.367 207.958 312.082 208.172 312.856 208.172 cv
315.314 208.172 317.31 206.176 317.31 203.718 cv
317.31 201.26 315.314 199.261 312.856 199.261 cv
cp
f
372.878 146.059 mo
371.867 146.059 371.045 145.23 371.045 144.216 cv
371.045 143.206 371.867 142.384 372.878 142.384 cv
373.888 142.384 374.713 143.206 374.713 144.216 cv
374.713 145.23 373.888 146.059 372.878 146.059 cv
cp
372.878 139.763 mo
370.923 139.763 369.276 141.039 368.676 142.792 cv
331.559 142.792 li
331.559 142.792 325.471 148.882 324.922 149.431 cv
324.139 149.431 233.371 149.431 218.537 149.431 cv
218.537 151.501 li
325.778 151.501 li
325.778 151.501 331.866 145.413 332.417 144.858 cv
333.185 144.858 363.465 144.858 368.486 144.858 cv
368.801 147.014 370.64 148.673 372.878 148.673 cv
375.336 148.673 377.334 146.678 377.334 144.216 cv
377.334 141.765 375.336 139.763 372.878 139.763 cv
cp
f
234.366 526.868 mo
233.355 526.868 232.531 526.042 232.531 525.031 cv
232.531 524.017 233.355 523.2 234.366 523.2 cv
235.375 523.2 236.201 524.017 236.201 525.031 cv
236.201 526.042 235.375 526.868 234.366 526.868 cv
cp
329.511 523.2 mo
330.521 523.2 331.342 524.017 331.342 525.031 cv
331.342 526.042 330.521 526.868 329.511 526.868 cv
328.497 526.868 327.676 526.042 327.676 525.031 cv
327.676 524.017 328.497 523.2 329.511 523.2 cv
cp
329.511 529.487 mo
331.969 529.487 333.963 527.489 333.963 525.031 cv
333.963 522.577 331.969 520.574 329.511 520.574 cv
327.365 520.574 325.564 522.106 325.146 524.13 cv
238.731 524.13 li
238.31 522.106 236.513 520.574 234.366 520.574 cv
231.908 520.574 229.91 522.577 229.91 525.031 cv
229.91 527.489 231.908 529.487 234.366 529.487 cv
236.414 529.487 238.131 528.089 238.648 526.201 cv
325.229 526.201 li
325.746 528.089 327.46 529.487 329.511 529.487 cv
cp
f
367.631 583.477 mo
367.631 584.49 366.809 585.315 365.798 585.315 cv
364.788 585.315 363.961 584.49 363.961 583.477 cv
363.961 582.47 364.788 581.648 365.798 581.648 cv
366.809 581.648 367.631 582.47 367.631 583.477 cv
cp
361.344 583.477 mo
361.344 585.941 363.34 587.938 365.798 587.938 cv
368.254 587.938 370.252 585.941 370.252 583.477 cv
370.252 581.379 368.79 579.63 366.831 579.156 cv
366.831 573.914 li
369.292 573.914 li
369.292 552.597 li
362.305 552.597 li
362.305 573.914 li
364.765 573.914 li
364.765 579.156 li
362.807 579.63 361.344 581.379 361.344 583.477 cv
cp
f
379.542 583.477 mo
379.542 584.49 378.721 585.315 377.71 585.315 cv
376.7 585.315 375.872 584.49 375.872 583.477 cv
375.872 582.47 376.7 581.648 377.71 581.648 cv
378.721 581.648 379.542 582.47 379.542 583.477 cv
cp
373.254 583.477 mo
373.254 585.941 375.252 587.938 377.71 587.938 cv
380.165 587.938 382.163 585.941 382.163 583.477 cv
382.163 581.379 380.7 579.63 378.744 579.156 cv
378.744 573.914 li
381.206 573.914 li
381.206 552.597 li
374.211 552.597 li
374.211 573.914 li
376.673 573.914 li
376.673 579.156 li
374.72 579.63 373.254 581.379 373.254 583.477 cv
cp
f
685.652 595.537 mo
686.663 595.537 687.485 596.365 687.485 597.373 cv
687.485 598.388 686.663 599.209 685.652 599.209 cv
684.639 599.209 683.815 598.388 683.815 597.373 cv
683.815 596.365 684.639 595.537 685.652 595.537 cv
cp
685.652 601.83 mo
688.108 601.83 690.107 599.832 690.107 597.373 cv
690.107 594.916 688.108 592.917 685.652 592.917 cv
684.359 592.917 683.208 593.476 682.391 594.357 cv
676.381 588.349 li
676.381 588.349 614.932 588.349 614.087 588.349 cv
613.53 587.788 603.981 578.237 603.425 577.683 cv
603.425 577.204 603.425 575.232 603.425 573.914 cv
605.71 573.914 li
605.71 552.597 li
598.72 552.597 li
598.72 573.914 li
601.356 573.914 li
601.356 578.535 li
613.232 590.415 li
613.232 590.415 674.679 590.415 675.526 590.415 cv
676.001 590.891 680.222 595.113 681.355 596.245 cv
681.263 596.609 681.19 596.982 681.19 597.373 cv
681.19 599.832 683.19 601.83 685.652 601.83 cv
cp
f
689.845 583.744 mo
689.845 582.731 690.669 581.905 691.68 581.905 cv
692.69 581.905 693.515 582.731 693.515 583.744 cv
693.515 584.756 692.69 585.577 691.68 585.577 cv
690.669 585.577 689.845 584.756 689.845 583.744 cv
cp
696.136 583.744 mo
696.136 581.286 694.138 579.285 691.68 579.285 cv
689.351 579.285 687.455 581.09 687.262 583.362 cv
679.992 583.362 622.134 583.362 621.338 583.362 cv
620.808 582.834 615.485 577.512 614.955 576.983 cv
614.955 576.501 614.955 574.864 614.955 573.914 cv
617.415 573.914 li
617.415 552.597 li
610.429 552.597 li
610.429 573.914 li
612.887 573.914 li
612.887 577.834 li
620.484 585.433 li
687.558 585.433 li
688.227 587.051 689.818 588.202 691.68 588.202 cv
694.138 588.202 696.136 586.198 696.136 583.744 cv
cp
f
715.269 569.325 mo
716.279 569.325 717.103 570.149 717.103 571.162 cv
717.103 572.174 716.279 572.997 715.269 572.997 cv
714.254 572.997 713.434 572.174 713.434 571.162 cv
713.434 570.149 714.254 569.325 715.269 569.325 cv
cp
715.269 575.62 mo
717.723 575.62 719.721 573.62 719.721 571.162 cv
719.721 568.703 717.723 566.707 715.269 566.707 cv
713.122 566.707 711.325 568.234 710.907 570.259 cv
706.625 570.259 692.455 570.259 691.756 570.259 cv
691.207 569.712 685.64 564.146 685.64 564.146 cv
641.527 564.146 li
641.527 552.597 li
634.539 552.597 li
634.539 573.914 li
641.527 573.914 li
641.527 566.217 li
648.594 566.217 684.028 566.217 684.784 566.217 cv
685.331 566.758 690.901 572.33 690.901 572.33 cv
710.983 572.33 li
711.504 574.216 713.213 575.62 715.269 575.62 cv
cp
f
745.41 559.892 mo
744.4 559.892 743.575 559.071 743.575 558.06 cv
743.575 557.048 744.4 556.222 745.41 556.222 cv
746.421 556.222 747.245 557.048 747.245 558.06 cv
747.245 559.071 746.421 559.892 745.41 559.892 cv
cp
745.41 553.602 mo
742.952 553.602 740.954 555.599 740.954 558.06 cv
740.954 560.515 742.952 562.513 745.41 562.513 cv
747.865 562.513 749.863 560.515 749.863 558.06 cv
749.863 555.599 747.865 553.602 745.41 553.602 cv
cp
f
625.368 520.314 mo
624.353 520.314 623.531 519.49 623.531 518.481 cv
623.531 517.467 624.353 516.643 625.368 516.643 cv
626.377 516.643 627.201 517.467 627.201 518.481 cv
627.201 519.49 626.377 520.314 625.368 520.314 cv
cp
425.176 507.996 mo
424.166 507.996 423.345 507.175 423.345 506.161 cv
423.345 505.15 424.166 504.324 425.176 504.324 cv
426.187 504.324 427.013 505.15 427.013 506.161 cv
427.013 507.175 426.187 507.996 425.176 507.996 cv
cp
625.368 514.021 mo
623.315 514.021 621.602 515.427 621.089 517.315 cv
616.522 517.315 438.07 517.315 437.314 517.315 cv
436.847 516.848 430.909 510.91 428.77 508.771 cv
429.308 508.038 429.635 507.141 429.635 506.161 cv
429.635 503.703 427.634 501.704 425.176 501.704 cv
422.722 501.704 420.724 503.703 420.724 506.161 cv
420.724 508.617 422.722 510.617 425.176 510.617 cv
425.906 510.617 426.582 510.423 427.186 510.112 cv
436.456 519.381 li
621.005 519.381 li
621.421 521.408 623.218 522.938 625.368 522.938 cv
627.824 522.938 629.822 520.937 629.822 518.481 cv
629.822 516.021 627.824 514.021 625.368 514.021 cv
cp
f
389.619 531.235 mo
390.633 531.235 391.456 532.055 391.456 533.07 cv
391.456 534.08 390.633 534.905 389.619 534.905 cv
388.608 534.905 387.782 534.08 387.782 533.07 cv
387.782 532.055 388.608 531.235 389.619 531.235 cv
cp
389.619 537.524 mo
392.077 537.524 394.077 535.528 394.077 533.07 cv
394.077 530.612 392.077 528.617 389.619 528.617 cv
387.504 528.617 385.734 530.099 385.282 532.082 cv
370.492 532.082 li
370.492 532.082 360.147 542.431 359.573 543.004 cv
359.304 543.004 358.773 543.004 358.257 543.004 cv
358.257 540.888 li
339.035 540.888 li
339.035 547.005 li
358.257 547.005 li
358.257 545.071 li
360.428 545.071 li
360.428 545.071 370.775 534.722 371.351 534.148 cv
372.061 534.148 382.755 534.148 385.313 534.148 cv
385.799 536.081 387.535 537.524 389.619 537.524 cv
cp
f
413.034 517.87 mo
414.045 517.87 414.866 518.69 414.866 519.701 cv
414.866 520.715 414.045 521.538 413.034 521.538 cv
412.024 521.538 411.199 520.715 411.199 519.701 cv
411.199 518.69 412.024 517.87 413.034 517.87 cv
cp
413.034 524.161 mo
415.489 524.161 417.489 522.159 417.489 519.701 cv
417.489 517.243 415.489 515.248 413.034 515.248 cv
410.888 515.248 409.087 516.775 408.669 518.804 cv
372.068 518.804 li
372.068 518.804 360.324 530.542 359.748 531.119 cv
359.435 531.119 358.81 531.119 358.257 531.119 cv
358.257 529.181 li
339.035 529.181 li
339.035 535.296 li
358.257 535.296 li
358.257 533.185 li
360.603 533.185 li
360.603 533.185 372.348 521.448 372.925 520.871 cv
373.691 520.871 403.821 520.871 408.751 520.871 cv
409.268 522.757 410.983 524.161 413.034 524.161 cv
cp
f
391.104 478.902 mo
391.104 479.913 390.282 480.737 389.269 480.737 cv
388.257 480.737 387.436 479.913 387.436 478.902 cv
387.436 477.892 388.257 477.067 389.269 477.067 cv
390.282 477.067 391.104 477.892 391.104 478.902 cv
cp
327.938 466.061 mo
327.938 465.047 328.759 464.224 329.77 464.224 cv
330.784 464.224 331.606 465.047 331.606 466.061 cv
331.606 467.074 330.784 467.896 329.77 467.896 cv
328.759 467.896 327.938 467.074 327.938 466.061 cv
cp
293.864 467.896 mo
292.85 467.896 292.029 467.074 292.029 466.061 cv
292.029 465.047 292.85 464.224 293.864 464.224 cv
294.874 464.224 295.699 465.047 295.699 466.061 cv
295.699 467.074 294.874 467.896 293.864 467.896 cv
cp
607.541 471.042 mo
608.556 471.042 609.378 471.862 609.378 472.875 cv
609.378 473.883 608.556 474.708 607.541 474.708 cv
606.53 474.708 605.71 473.883 605.71 472.875 cv
605.71 471.862 606.53 471.042 607.541 471.042 cv
cp
607.541 477.329 mo
609.999 477.329 611.999 475.327 611.999 472.875 cv
611.999 470.415 609.999 468.417 607.541 468.417 cv
605.246 468.417 603.369 470.174 603.134 472.407 cv
590.87 472.407 332.896 472.407 330.981 472.407 cv
330.981 471.784 330.981 470.958 330.981 470.324 cv
332.847 469.795 334.229 468.094 334.229 466.061 cv
334.229 463.603 332.227 461.604 329.77 461.604 cv
327.596 461.604 325.784 463.178 325.396 465.24 cv
298.237 465.24 li
297.853 463.178 296.041 461.604 293.864 461.604 cv
291.406 461.604 289.408 463.603 289.408 466.061 cv
289.408 468.519 291.406 470.514 293.864 470.514 cv
295.885 470.514 297.576 469.161 298.117 467.311 cv
325.518 467.311 li
325.985 468.892 327.285 470.107 328.915 470.424 cv
328.915 474.474 li
388.98 474.474 li
386.661 474.628 384.814 476.543 384.814 478.902 cv
384.814 481.36 386.813 483.358 389.269 483.358 cv
391.727 483.358 393.727 481.36 393.727 478.902 cv
393.727 476.543 391.881 474.628 389.56 474.474 cv
603.4 474.474 li
604.044 476.144 605.652 477.329 607.541 477.329 cv
cp
f
775.81 559.365 mo
774.801 559.365 773.979 558.542 773.979 557.536 cv
773.979 556.521 774.801 555.697 775.81 555.697 cv
776.825 555.697 777.647 556.521 777.647 557.536 cv
777.647 558.542 776.825 559.365 775.81 559.365 cv
cp
780.271 557.536 mo
780.271 555.07 778.272 553.076 775.81 553.076 cv
773.356 553.076 771.358 555.07 771.358 557.536 cv
771.358 559.986 773.356 561.988 775.81 561.988 cv
778.272 561.988 780.271 559.986 780.271 557.536 cv
cp
f
811.458 560.682 mo
810.451 560.682 809.627 559.857 809.627 558.845 cv
809.627 557.832 810.451 557.012 811.458 557.012 cv
812.473 557.012 813.297 557.832 813.297 558.845 cv
813.297 559.857 812.473 560.682 811.458 560.682 cv
cp
811.458 554.387 mo
809 554.387 807.006 556.387 807.006 558.845 cv
807.006 561.303 809 563.299 811.458 563.299 cv
813.916 563.299 815.914 561.303 815.914 558.845 cv
815.914 556.387 813.916 554.387 811.458 554.387 cv
cp
f
799.405 595.801 mo
800.416 595.801 801.238 596.621 801.238 597.636 cv
801.238 598.65 800.416 599.471 799.405 599.471 cv
798.391 599.471 797.568 598.65 797.568 597.636 cv
797.568 596.621 798.391 595.801 799.405 595.801 cv
cp
794.947 597.636 mo
794.947 600.094 796.947 602.09 799.405 602.09 cv
801.861 602.09 803.859 600.094 803.859 597.636 cv
803.859 595.178 801.861 593.18 799.405 593.18 cv
796.947 593.18 794.947 595.178 794.947 597.636 cv
cp
f
845.008 506.161 mo
845.008 505.15 845.832 504.324 846.847 504.324 cv
847.853 504.324 848.678 505.15 848.678 506.161 cv
848.678 507.175 847.853 507.996 846.847 507.996 cv
845.832 507.996 845.008 507.175 845.008 506.161 cv
cp
851.301 506.161 mo
851.301 503.703 849.301 501.704 846.847 501.704 cv
844.385 501.704 842.387 503.703 842.387 506.161 cv
842.387 508.617 844.385 510.617 846.847 510.617 cv
849.301 510.617 851.301 508.617 851.301 506.161 cv
cp
f
990.216 618.738 mo
989.203 618.738 988.379 617.911 988.379 616.898 cv
988.379 615.889 989.203 615.066 990.216 615.066 cv
991.227 615.066 992.049 615.889 992.049 616.898 cv
992.049 617.911 991.227 618.738 990.216 618.738 cv
cp
990.216 612.44 mo
987.934 612.44 986.064 614.175 985.81 616.388 cv
978.684 616.388 li
978.684 609.037 li
964.79 609.037 li
964.79 624.236 li
978.684 624.236 li
978.684 618.455 li
986.058 618.455 li
986.688 620.144 988.307 621.357 990.216 621.357 cv
992.674 621.357 994.67 619.361 994.67 616.898 cv
994.67 614.445 992.674 612.44 990.216 612.44 cv
cp
f
990.216 573.123 mo
989.203 573.123 988.379 572.303 988.379 571.296 cv
988.379 570.282 989.203 569.461 990.216 569.461 cv
991.227 569.461 992.049 570.282 992.049 571.296 cv
992.049 572.303 991.227 573.123 990.216 573.123 cv
cp
990.216 566.842 mo
988.181 566.842 986.478 568.215 985.947 570.084 cv
978.684 570.084 li
978.684 562.908 li
964.79 562.908 li
964.79 578.108 li
978.684 578.108 li
978.684 572.153 li
985.845 572.153 li
986.247 574.197 988.052 575.749 990.216 575.749 cv
992.674 575.749 994.67 573.747 994.67 571.296 cv
994.67 568.838 992.674 566.842 990.216 566.842 cv
cp
f
990.216 527.781 mo
989.203 527.781 988.379 526.961 988.379 525.95 cv
988.379 524.935 989.203 524.117 990.216 524.117 cv
991.227 524.117 992.049 524.935 992.049 525.95 cv
992.049 526.961 991.227 527.781 990.216 527.781 cv
cp
990.216 521.492 mo
988.021 521.492 986.207 523.089 985.839 525.175 cv
978.684 525.175 li
978.684 518.084 li
964.79 518.084 li
964.79 533.288 li
978.684 533.288 li
978.684 527.242 li
985.974 527.242 li
986.536 529.065 988.211 530.403 990.216 530.403 cv
992.674 530.403 994.67 528.404 994.67 525.95 cv
994.67 523.496 992.674 521.492 990.216 521.492 cv
cp
f
990.216 481.393 mo
989.203 481.393 988.379 480.568 988.379 479.558 cv
988.379 478.545 989.203 477.724 990.216 477.724 cv
991.227 477.724 992.049 478.545 992.049 479.558 cv
992.049 480.568 991.227 481.393 990.216 481.393 cv
cp
990.216 475.103 mo
987.873 475.103 985.97 476.919 985.793 479.223 cv
978.684 479.223 li
978.684 472.478 li
964.79 472.478 li
964.79 487.682 li
978.684 487.682 li
978.684 481.29 li
986.11 481.29 li
986.785 482.887 988.375 484.012 990.216 484.012 cv
992.674 484.012 994.67 482.016 994.67 479.558 cv
994.67 477.098 992.674 475.103 990.216 475.103 cv
cp
f
700.279 503.688 mo
674.476 503.688 li
674.476 503.688 667.521 510.64 666.963 511.198 cv
666.131 511.198 637.174 511.198 637.174 511.198 cv
637.174 511.198 637.174 542.979 637.174 544.925 cv
635.449 544.925 625.29 544.925 625.29 544.925 cv
625.29 552.597 li
622.659 552.597 li
622.659 573.914 li
629.648 573.914 li
629.648 552.597 li
627.357 552.597 li
627.357 550.944 627.357 548.076 627.357 546.99 cv
629.084 546.99 639.244 546.99 639.244 546.99 cv
639.244 546.99 639.244 515.216 639.244 513.271 cv
641.169 513.271 667.821 513.271 667.821 513.271 cv
667.821 513.271 674.773 506.31 675.332 505.754 cv
676.051 505.754 695.281 505.754 700.279 505.754 cv
700.279 508.128 li
719.151 508.128 li
719.151 501.837 li
700.279 501.837 li
700.279 503.688 li
cp
f
311.689 487.553 mo
310.675 487.553 309.852 486.728 309.852 485.714 cv
309.852 484.703 310.675 483.883 311.689 483.883 cv
312.7 483.883 313.524 484.703 313.524 485.714 cv
313.524 486.728 312.7 487.553 311.689 487.553 cv
cp
874.052 521.756 mo
874.052 515.465 li
855.182 515.465 li
855.182 518.126 li
845.435 518.126 760.455 518.126 759.631 518.126 cv
759.038 517.507 739.647 497.263 739.647 497.263 cv
739.647 497.263 627.038 497.263 626.188 497.263 cv
625.655 496.731 621.338 492.412 621.338 492.412 cv
621.338 492.412 445.741 492.412 444.913 492.412 cv
444.358 491.857 437.487 484.99 437.487 484.99 cv
316.068 484.99 li
315.718 482.882 313.896 481.261 311.689 481.261 cv
309.231 481.261 307.229 483.26 307.229 485.714 cv
307.229 488.172 309.231 490.172 311.689 490.172 cv
313.674 490.172 315.34 488.855 315.914 487.057 cv
327.368 487.057 435.825 487.057 436.631 487.057 cv
437.189 487.617 444.058 494.486 444.058 494.486 cv
444.058 494.486 619.656 494.486 620.484 494.486 cv
621.013 495.014 625.328 499.333 625.328 499.333 cv
625.328 499.333 737.889 499.333 738.766 499.333 cv
739.358 499.953 758.749 520.192 758.749 520.192 cv
855.182 520.192 li
855.182 521.756 li
874.052 521.756 li
cp
f
874.052 503.41 mo
855.182 503.41 li
855.182 509.701 li
874.052 509.701 li
874.052 503.41 li
cp
f
769.264 495.018 mo
768.249 495.018 767.427 494.201 767.427 493.186 cv
767.427 492.176 768.249 491.353 769.264 491.353 cv
770.271 491.353 771.099 492.176 771.099 493.186 cv
771.099 494.201 770.271 495.018 769.264 495.018 cv
cp
874.052 490.041 mo
855.182 490.041 li
855.182 492.503 li
773.649 492.503 li
773.315 490.372 771.487 488.734 769.264 488.734 cv
767.039 488.734 765.208 490.372 764.873 492.503 cv
719.151 492.503 li
719.151 488.464 li
700.279 488.464 li
700.279 494.761 li
719.151 494.761 li
719.151 494.571 li
765.048 494.571 li
765.637 496.348 767.293 497.643 769.264 497.643 cv
771.229 497.643 772.886 496.348 773.475 494.571 cv
855.182 494.571 li
855.182 496.332 li
874.052 496.332 li
874.052 490.041 li
cp
f
874.052 476.676 mo
855.182 476.676 li
855.182 479.35 li
727.729 479.35 li
727.729 479.35 721.856 485.224 721.306 485.774 cv
720.464 485.774 674.215 485.774 674.215 485.774 cv
674.215 485.774 667.692 492.298 667.138 492.849 cv
666.704 492.849 665.096 492.849 663.894 492.849 cv
663.894 490.041 li
645.023 490.041 li
645.023 496.332 li
663.894 496.332 li
663.894 494.919 li
667.992 494.919 li
667.992 494.919 674.518 488.4 675.07 487.841 cv
675.913 487.841 722.16 487.841 722.16 487.841 cv
722.16 487.841 728.037 481.974 728.582 481.421 cv
729.397 481.421 844.852 481.421 855.182 481.421 cv
855.182 482.965 li
874.052 482.965 li
874.052 476.676 li
cp
f
874.052 463.569 mo
855.182 463.569 li
855.182 469.86 li
874.052 469.86 li
874.052 463.569 li
cp
f
874.052 450.724 mo
855.182 450.724 li
855.182 457.017 li
874.052 457.017 li
874.052 450.724 li
cp
f
874.052 437.355 mo
855.182 437.355 li
855.182 443.648 li
874.052 443.648 li
874.052 437.355 li
cp
f
874.052 423.728 mo
855.182 423.728 li
855.182 430.023 li
874.052 430.023 li
874.052 423.728 li
cp
f
725.752 518.743 mo
725.752 517.733 726.574 516.906 727.585 516.906 cv
728.6 516.906 729.42 517.733 729.42 518.743 cv
729.42 519.756 728.6 520.574 727.585 520.574 cv
726.574 520.574 725.752 519.756 725.752 518.743 cv
cp
645.023 529.094 mo
645.023 535.383 li
663.894 535.383 li
663.894 533.537 li
686.167 533.537 li
686.167 533.537 693.123 526.581 693.678 526.023 cv
694.451 526.023 722.339 526.023 726.727 526.023 cv
726.727 530.792 726.727 538.59 726.727 539.152 cv
726.218 539.655 722.339 543.54 721.829 544.045 cv
721.394 544.045 720.063 544.045 719.151 544.045 cv
719.151 541.677 li
700.279 541.677 li
700.279 547.966 li
719.151 547.966 li
719.151 546.118 li
722.685 546.118 li
728.793 540.007 li
728.793 523.01 li
730.662 522.481 732.041 520.78 732.041 518.743 cv
732.041 516.287 730.047 514.287 727.585 514.287 cv
725.503 514.287 723.767 515.729 723.281 517.664 cv
719.151 517.664 li
719.151 515.465 li
700.279 515.465 li
700.279 521.756 li
719.151 521.756 li
719.151 519.735 li
723.252 519.735 li
723.642 521.44 725.006 522.773 726.727 523.108 cv
726.727 523.34 726.727 523.629 726.727 523.956 cv
692.821 523.956 li
692.821 523.956 685.863 530.914 685.305 531.466 cv
684.609 531.466 668.741 531.466 663.894 531.466 cv
663.894 529.094 li
645.023 529.094 li
cp
f
645.023 548.756 mo
663.894 548.756 li
663.894 546.644 li
685.467 546.644 li
685.467 546.644 697.731 534.377 698.31 533.803 cv
698.706 533.803 699.639 533.803 700.279 533.803 cv
700.279 535.121 li
719.151 535.121 li
719.151 528.833 li
700.279 528.833 li
700.279 531.732 li
697.45 531.732 li
697.45 531.732 685.188 543.994 684.609 544.571 cv
683.903 544.571 668.396 544.571 663.894 544.571 cv
663.894 542.463 li
645.023 542.463 li
645.023 548.756 li
cp
f
730.207 587.283 mo
730.207 566.315 li
724.439 566.315 li
724.439 587.283 li
730.207 587.283 li
cp
f
736.498 587.283 mo
742.265 587.283 li
742.265 566.315 li
736.498 566.315 li
736.498 587.283 li
cp
f
748.028 587.283 mo
753.799 587.283 li
753.799 566.315 li
748.028 566.315 li
748.028 587.283 li
cp
f
760.61 566.315 mo
760.61 587.283 li
766.378 587.283 li
766.378 566.315 li
760.61 566.315 li
cp
f
771.617 587.283 mo
777.384 587.283 li
777.384 566.315 li
771.617 566.315 li
771.617 587.283 li
cp
f
802.024 566.315 mo
796.258 566.315 li
796.258 587.283 li
802.024 587.283 li
802.024 566.315 li
cp
f
808.054 566.315 mo
808.054 587.283 li
813.821 587.283 li
813.821 566.315 li
808.054 566.315 li
cp
f
487.223 574.174 mo
487.223 553.207 li
481.456 553.207 li
481.456 574.174 li
487.223 574.174 li
cp
f
493.517 574.174 mo
499.281 574.174 li
499.281 553.207 li
493.517 553.207 li
493.517 574.174 li
cp
f
505.045 574.174 mo
510.811 574.174 li
510.811 553.207 li
505.045 553.207 li
505.045 574.174 li
cp
f
517.628 553.207 mo
517.628 574.174 li
523.391 574.174 li
523.391 553.207 li
517.628 553.207 li
cp
f
528.636 574.174 mo
534.402 574.174 li
534.402 553.207 li
528.636 553.207 li
528.636 574.174 li
cp
f
541.239 574.174 mo
547.004 574.174 li
547.004 553.207 li
541.239 553.207 li
541.239 574.174 li
cp
f
559.042 553.207 mo
553.274 553.207 li
553.274 574.174 li
559.042 574.174 li
559.042 553.207 li
cp
f
565.067 553.207 mo
565.067 574.174 li
570.834 574.174 li
570.834 553.207 li
565.067 553.207 li
cp
f
440.844 574.174 mo
440.844 553.207 li
435.077 553.207 li
435.077 574.174 li
440.844 574.174 li
cp
f
447.137 574.174 mo
452.902 574.174 li
452.902 553.207 li
447.137 553.207 li
447.137 574.174 li
cp
f
458.665 574.174 mo
464.436 574.174 li
464.436 553.207 li
458.665 553.207 li
458.665 574.174 li
cp
f
471.248 553.207 mo
471.248 574.174 li
477.011 574.174 li
477.011 553.207 li
471.248 553.207 li
cp
f
898.218 621.094 mo
898.218 634.198 li
907.913 634.198 li
907.913 621.094 li
898.218 621.094 li
cp
f
917.612 621.094 mo
917.612 634.198 li
927.311 634.198 li
927.311 621.094 li
917.612 621.094 li
cp
f
927.311 575.487 mo
917.612 575.487 li
917.612 588.594 li
927.311 588.594 li
927.311 575.487 li
cp
f
936.221 595.672 mo
937.231 595.672 938.056 596.492 938.056 597.502 cv
938.056 598.516 937.231 599.338 936.221 599.338 cv
935.21 599.338 934.386 598.516 934.386 597.502 cv
934.386 596.492 935.21 595.672 936.221 595.672 cv
cp
908.178 610.609 mo
917.875 610.609 li
917.875 605 li
932.019 605 li
935.195 601.83 li
935.525 601.906 935.863 601.961 936.221 601.961 cv
938.679 601.961 940.677 599.959 940.677 597.502 cv
940.677 595.045 938.679 593.05 936.221 593.05 cv
933.767 593.05 931.768 595.045 931.768 597.502 cv
931.768 598.824 932.353 600.006 933.278 600.824 cv
932.569 601.527 931.487 602.608 931.164 602.934 cv
930.499 602.934 921.153 602.934 917.875 602.934 cv
917.875 597.502 li
908.178 597.502 li
908.178 610.609 li
cp
f
912.894 618.738 mo
911.884 618.738 911.06 617.911 911.06 616.898 cv
911.06 615.889 911.884 615.066 912.894 615.066 cv
913.904 615.066 914.729 615.889 914.729 616.898 cv
914.729 617.911 913.904 618.738 912.894 618.738 cv
cp
942.25 616.563 mo
917.316 616.563 li
917.144 614.264 915.238 612.44 912.894 612.44 cv
910.493 612.44 908.544 614.357 908.453 616.741 cv
900.11 616.741 847.739 616.741 846.938 616.741 cv
846.349 616.126 824.493 593.297 823.941 592.719 cv
823.941 592.236 823.941 589.317 823.941 587.283 cv
825.613 587.283 li
825.613 566.315 li
819.847 566.315 li
819.847 587.283 li
821.871 587.283 li
821.871 593.551 li
846.055 618.809 li
908.886 618.809 li
909.602 620.31 911.124 621.357 912.894 621.357 cv
914.736 621.357 916.321 620.232 916.999 618.635 cv
942.25 618.635 li
942.25 624.236 li
956.144 624.236 li
956.144 609.037 li
942.25 609.037 li
942.25 616.563 li
cp
f
913.154 573.123 mo
912.144 573.123 911.321 572.303 911.321 571.296 cv
911.321 570.282 912.144 569.461 913.154 569.461 cv
914.169 569.461 914.993 570.282 914.993 571.296 cv
914.993 572.303 914.169 573.123 913.154 573.123 cv
cp
942.25 569.91 mo
917.369 569.91 li
916.784 568.132 915.128 566.842 913.154 566.842 cv
911.056 566.842 909.304 568.303 908.837 570.259 cv
901.546 570.259 li
901.546 575.487 li
898.218 575.487 li
898.218 584.107 li
888.044 584.107 li
888.044 584.107 876.871 595.283 876.294 595.857 cv
875.471 595.857 843.641 595.857 842.819 595.857 cv
842.288 595.33 837.049 590.087 836.521 589.563 cv
836.521 589.195 836.521 588.172 836.521 587.283 cv
838.196 587.283 li
838.196 566.315 li
832.426 566.315 li
832.426 587.283 li
834.45 587.283 li
834.45 590.415 li
841.963 597.928 li
877.152 597.928 li
877.152 597.928 888.325 586.751 888.9 586.18 cv
889.495 586.18 895.346 586.18 898.218 586.18 cv
898.218 588.594 li
907.913 588.594 li
907.913 575.487 li
903.617 575.487 li
903.617 574.457 903.617 573.102 903.617 572.33 cv
904.686 572.33 907.33 572.33 908.837 572.33 cv
909.304 574.286 911.056 575.749 913.154 575.749 cv
915.379 575.749 917.214 574.107 917.54 571.977 cv
942.25 571.977 li
942.25 578.108 li
956.144 578.108 li
956.144 562.908 li
942.25 562.908 li
942.25 569.91 li
cp
f
913.154 526.998 mo
912.144 526.998 911.321 526.178 911.321 525.164 cv
911.321 524.153 912.144 523.329 913.154 523.329 cv
914.169 523.329 914.993 524.153 914.993 525.164 cv
914.993 526.178 914.169 526.998 913.154 526.998 cv
cp
942.25 525.703 mo
917.56 525.703 li
917.578 525.523 917.612 525.35 917.612 525.164 cv
917.612 522.706 915.616 520.708 913.154 520.708 cv
910.698 520.708 908.7 522.706 908.7 525.164 cv
908.7 525.229 908.719 525.285 908.719 525.356 cv
901.2 525.356 li
901.2 530.669 li
898.218 530.669 li
898.218 542.727 li
900.948 542.727 li
893.775 549.9 li
893.775 549.9 893.775 570.13 893.775 570.954 cv
893.264 571.467 889.214 575.517 888.701 576.026 cv
887.961 576.026 857.418 576.026 850.513 576.026 cv
850.513 566.315 li
844.75 566.315 li
844.75 587.283 li
850.513 587.283 li
850.513 578.093 li
889.56 578.093 li
895.842 571.809 li
895.842 571.809 895.842 551.577 895.842 550.751 cv
896.33 550.27 902.205 544.391 903.871 542.727 cv
907.391 542.727 li
907.391 530.669 li
903.271 530.669 li
903.271 529.765 903.271 528.287 903.271 527.422 cv
904.54 527.422 908.126 527.422 909.334 527.422 cv
910.117 528.731 911.526 529.616 913.154 529.616 cv
914.642 529.616 915.943 528.887 916.754 527.77 cv
942.25 527.77 li
942.25 533.288 li
956.144 533.288 li
956.144 518.084 li
942.25 518.084 li
942.25 525.703 li
cp
f
913.154 482.177 mo
912.144 482.177 911.321 481.354 911.321 480.34 cv
911.321 479.332 912.144 478.503 913.154 478.503 cv
914.169 478.503 914.993 479.332 914.993 480.34 cv
914.993 481.354 914.169 482.177 913.154 482.177 cv
cp
942.25 479.396 mo
917.51 479.396 li
917.073 477.394 915.287 475.886 913.154 475.886 cv
911.215 475.886 909.579 477.137 908.974 478.874 cv
901.728 478.874 li
901.728 484.8 li
898.218 484.8 li
898.218 491.975 li
894.127 491.975 li
894.127 491.975 894.127 538.487 894.127 539.321 cv
893.551 539.9 877.394 556.054 876.817 556.632 cv
876.402 556.632 875.055 556.632 874.052 556.632 cv
874.052 554.519 li
855.182 554.519 li
855.182 560.809 li
874.052 560.809 li
874.052 558.698 li
877.681 558.698 li
896.195 540.182 li
896.195 540.182 896.195 496.019 896.195 494.042 cv
896.754 494.042 897.526 494.042 898.218 494.042 cv
898.218 496.86 li
907.391 496.86 li
907.391 484.8 li
903.795 484.8 li
903.795 483.603 903.795 481.835 903.795 480.942 cv
904.878 480.942 907.446 480.942 908.761 480.942 cv
909.057 483.111 910.905 484.8 913.154 484.8 cv
915.223 484.8 916.947 483.379 917.449 481.47 cv
942.25 481.47 li
942.25 487.682 li
956.144 487.682 li
956.144 472.478 li
942.25 472.478 li
942.25 479.396 li
cp
f
913.154 435.524 mo
912.144 435.524 911.321 434.701 911.321 433.689 cv
911.321 432.68 912.144 431.852 913.154 431.852 cv
914.169 431.852 914.993 432.68 914.993 433.689 cv
914.993 434.701 914.169 435.524 913.154 435.524 cv
cp
942.25 432.743 mo
917.506 432.743 li
917.069 430.739 915.287 429.232 913.154 429.232 cv
911.154 429.232 909.477 430.572 908.918 432.392 cv
899.628 432.392 li
899.628 438.668 li
898.218 438.668 li
898.218 445.846 li
888.797 445.846 li
888.797 445.846 888.797 531.227 888.797 532.074 cv
888.23 532.641 876.688 544.182 876.119 544.748 cv
875.766 544.748 874.852 544.748 874.052 544.748 cv
874.052 542.727 li
855.182 542.727 li
855.182 549.013 li
874.052 549.013 li
874.052 546.819 li
876.979 546.819 li
890.863 532.929 li
890.863 532.929 890.863 449.934 890.863 447.917 cv
892.037 447.917 895.984 447.917 898.218 447.917 cv
898.218 450.724 li
907.391 450.724 li
907.391 438.668 li
901.698 438.668 li
901.698 437.496 901.698 435.448 901.698 434.456 cv
902.927 434.456 906.922 434.456 908.779 434.456 cv
909.146 436.55 910.964 438.149 913.154 438.149 cv
915.223 438.149 916.951 436.725 917.451 434.81 cv
942.25 434.81 li
942.25 441.287 li
956.144 441.287 li
956.144 426.089 li
942.25 426.089 li
942.25 432.743 li
cp
f
912.632 388.871 mo
911.617 388.871 910.797 388.046 910.797 387.032 cv
910.797 386.022 911.617 385.199 912.632 385.199 cv
913.646 385.199 914.467 386.022 914.467 387.032 cv
914.467 388.046 913.646 388.871 912.632 388.871 cv
cp
942.25 386.785 mo
917.06 386.785 li
916.933 384.449 915.003 382.578 912.632 382.578 cv
910.174 382.578 908.178 384.578 908.178 387.032 cv
908.178 387.127 908.198 387.214 908.206 387.311 cv
900.152 387.311 li
900.152 392.017 li
898.218 392.017 li
898.218 403.482 li
882.68 419.021 li
882.68 419.021 882.68 524.932 882.68 525.783 cv
882.165 526.3 877.858 530.6 877.342 531.117 cv
876.905 531.117 875.264 531.117 874.052 531.117 cv
874.052 528.833 li
855.182 528.833 li
855.182 535.121 li
874.052 535.121 li
874.052 533.185 li
878.201 533.185 li
884.748 526.64 li
884.748 526.64 884.748 420.727 884.748 419.875 cv
885.271 419.351 897.899 406.723 900.553 404.067 cv
907.391 404.067 li
907.391 392.017 li
902.223 392.017 li
902.223 391.101 902.223 390.039 902.223 389.378 cv
903.55 389.378 907.629 389.378 908.859 389.378 cv
909.645 390.641 911.04 391.492 912.632 391.492 cv
914.44 391.492 915.994 390.402 916.689 388.855 cv
942.25 388.855 li
942.25 396.207 li
956.144 396.207 li
956.144 381.007 li
942.25 381.007 li
942.25 386.785 li
cp
f
936.749 411.933 mo
937.762 411.933 938.58 412.76 938.58 413.767 cv
938.58 414.781 937.762 415.602 936.749 415.602 cv
935.734 415.602 934.912 414.781 934.912 413.767 cv
934.912 412.76 935.734 411.933 936.749 411.933 cv
cp
907.655 415.339 mo
907.655 427.397 li
916.83 427.397 li
916.83 422.577 li
930.798 422.577 li
935.385 417.989 li
935.814 418.131 936.269 418.227 936.749 418.227 cv
939.207 418.227 941.201 416.225 941.201 413.767 cv
941.201 411.314 939.207 409.312 936.749 409.312 cv
934.289 409.312 932.289 411.314 932.289 413.767 cv
932.289 414.982 932.78 416.08 933.567 416.878 cv
932.492 417.96 930.332 420.117 929.94 420.512 cv
929.238 420.512 919.391 420.512 916.83 420.512 cv
916.83 415.339 li
907.655 415.339 li
cp
f
936.749 464.879 mo
937.762 464.879 938.58 465.7 938.58 466.714 cv
938.58 467.725 937.762 468.549 936.749 468.549 cv
935.734 468.549 934.912 467.725 934.912 466.714 cv
934.912 465.7 935.734 464.879 936.749 464.879 cv
cp
907.655 461.211 mo
907.655 473.268 li
916.83 473.268 li
916.83 467.486 li
932.368 467.486 li
932.736 469.577 934.557 471.169 936.749 471.169 cv
939.207 471.169 941.201 469.172 941.201 466.714 cv
941.201 464.256 939.207 462.256 936.749 462.256 cv
934.743 462.256 933.063 463.595 932.505 465.417 cv
916.83 465.417 li
916.83 461.211 li
907.655 461.211 li
cp
f
936.749 504.193 mo
937.762 504.193 938.58 505.021 938.58 506.031 cv
938.58 507.038 937.762 507.866 936.749 507.866 cv
935.734 507.866 934.912 507.038 934.912 506.031 cv
934.912 505.021 935.734 504.193 936.749 504.193 cv
cp
907.655 507.076 mo
907.655 519.136 li
916.83 519.136 li
916.83 514.137 li
930.975 514.137 li
934.99 510.127 li
935.529 510.357 936.122 510.484 936.749 510.484 cv
939.207 510.484 941.201 508.486 941.201 506.031 cv
941.201 503.573 939.207 501.575 936.749 501.575 cv
934.289 501.575 932.289 503.573 932.289 506.031 cv
932.289 507.11 932.691 508.085 933.33 508.854 cv
932.41 509.779 930.507 511.679 930.115 512.07 cv
929.414 512.07 919.413 512.07 916.83 512.07 cv
916.83 507.076 li
907.655 507.076 li
cp
f
936.749 550.329 mo
937.762 550.329 938.58 551.149 938.58 552.156 cv
938.58 553.171 937.762 553.993 936.749 553.993 cv
935.734 553.993 934.912 553.171 934.912 552.156 cv
934.912 551.149 935.734 550.329 936.749 550.329 cv
cp
907.655 552.685 mo
907.655 564.743 li
916.83 564.743 li
916.83 559.92 li
930.975 559.92 li
934.764 556.127 li
935.362 556.432 936.03 556.617 936.749 556.617 cv
939.207 556.617 941.201 554.612 941.201 552.156 cv
941.201 549.698 939.207 547.704 936.749 547.704 cv
934.289 547.704 932.289 549.698 932.289 552.156 cv
932.289 553.146 932.623 554.052 933.174 554.795 cv
932.209 555.758 930.488 557.484 930.115 557.853 cv
929.438 557.853 919.911 557.853 916.83 557.853 cv
916.83 552.685 li
907.655 552.685 li
cp
f
917.085 438.668 mo
917.085 450.724 li
926.26 450.724 li
926.26 438.668 li
917.085 438.668 li
cp
f
917.085 484.8 mo
917.085 496.86 li
926.26 496.86 li
926.26 484.8 li
917.085 484.8 li
cp
f
917.085 530.669 mo
917.085 542.727 li
926.26 542.727 li
926.26 530.669 li
917.085 530.669 li
cp
f
358.257 481.656 mo
358.257 475.543 li
339.035 475.543 li
339.035 481.656 li
358.257 481.656 li
cp
f
436.971 497.248 mo
437.981 497.248 438.81 498.072 438.81 499.083 cv
438.81 500.093 437.981 500.92 436.971 500.92 cv
435.96 500.92 435.138 500.093 435.138 499.083 cv
435.138 498.072 435.96 497.248 436.971 497.248 cv
cp
339.035 490.041 mo
339.035 496.154 li
358.257 496.154 li
358.257 493.696 li
368.851 493.696 429.743 493.696 430.518 493.696 cv
430.867 494.053 432.41 495.591 433.341 496.519 cv
432.824 497.248 432.516 498.129 432.516 499.083 cv
432.516 501.541 434.515 503.541 436.971 503.541 cv
439.429 503.541 441.429 501.541 441.429 499.083 cv
441.429 496.629 439.429 494.626 436.971 494.626 cv
436.224 494.626 435.523 494.832 434.904 495.162 cv
431.371 491.629 li
358.257 491.629 li
358.257 490.041 li
339.035 490.041 li
cp
f
372.236 502.753 mo
373.243 502.753 374.067 503.577 374.067 504.588 cv
374.067 505.602 373.243 506.423 372.236 506.423 cv
371.221 506.423 370.401 505.602 370.401 504.588 cv
370.401 503.577 371.221 502.753 372.236 502.753 cv
cp
339.035 508.74 mo
358.257 508.74 li
358.257 506.274 li
368.112 506.274 li
368.782 507.899 370.374 509.048 372.236 509.048 cv
374.69 509.048 376.688 507.046 376.688 504.588 cv
376.688 502.13 374.69 500.129 372.236 500.129 cv
369.907 500.129 368.011 501.93 367.817 504.208 cv
358.257 504.208 li
358.257 502.624 li
339.035 502.624 li
339.035 508.74 li
cp
f
395.298 503.015 mo
396.31 503.015 397.135 503.835 397.135 504.85 cv
397.135 505.86 396.31 506.685 395.298 506.685 cv
394.288 506.685 393.463 505.86 393.463 504.85 cv
393.463 503.835 394.288 503.015 395.298 503.015 cv
cp
339.035 521.665 mo
358.257 521.665 li
358.257 519.906 li
359.729 519.906 li
359.729 519.906 365.817 513.823 366.374 513.271 cv
367.194 513.271 389.435 513.271 389.435 513.271 cv
393.708 508.997 li
394.204 509.189 394.738 509.304 395.298 509.304 cv
397.758 509.304 399.753 507.308 399.753 504.85 cv
399.753 502.392 397.758 500.397 395.298 500.397 cv
392.84 500.397 390.84 502.392 390.84 504.85 cv
390.84 505.986 391.281 507.014 391.979 507.796 cv
391.095 508.685 388.99 510.793 388.58 511.198 cv
387.755 511.198 365.511 511.198 365.511 511.198 cv
365.511 511.198 359.425 517.288 358.874 517.839 cv
358.715 517.839 358.495 517.839 358.257 517.839 cv
358.257 515.548 li
339.035 515.548 li
339.035 521.665 li
cp
f
348.979 570.259 mo
334.492 570.259 li
334.492 564.306 li
311.423 564.306 li
311.423 577.409 li
334.492 577.409 li
334.492 572.33 li
337.394 572.33 345.452 572.33 346.911 572.33 cv
346.911 574.267 346.911 605.354 346.911 605.354 cv
391.091 605.354 li
391.091 573.914 li
393.553 573.914 li
393.553 552.597 li
386.56 552.597 li
386.56 573.914 li
389.02 573.914 li
389.02 580.885 389.02 601.672 389.02 603.287 cv
387.102 603.287 350.9 603.287 348.979 603.287 cv
348.979 601.346 348.979 570.259 348.979 570.259 cv
cp
f
607.541 530.011 mo
608.556 530.011 609.378 530.836 609.378 531.844 cv
609.378 532.859 608.556 533.681 607.541 533.681 cv
606.53 533.681 605.71 532.859 605.71 531.844 cv
605.71 530.836 606.53 530.011 607.541 530.011 cv
cp
424.409 532.667 mo
425.203 532.667 599.259 532.667 603.168 532.667 cv
603.552 534.734 605.366 536.303 607.541 536.303 cv
609.999 536.303 611.999 534.303 611.999 531.844 cv
611.999 529.386 609.999 527.394 607.541 527.394 cv
605.523 527.394 603.833 528.75 603.286 530.593 cv
423.503 530.593 li
412.525 542.499 li
412.525 552.597 li
409.976 552.597 li
409.976 573.914 li
416.966 573.914 li
416.966 552.597 li
414.592 552.597 li
414.592 549.729 414.592 543.867 414.592 543.305 cv
415.094 542.755 423.843 533.275 424.409 532.667 cv
cp
f
661.273 595.273 mo
662.284 595.273 663.11 596.101 663.11 597.111 cv
663.11 598.125 662.284 598.944 661.273 598.944 cv
660.261 598.944 659.44 598.125 659.44 597.111 cv
659.44 596.101 660.261 595.273 661.273 595.273 cv
cp
607.726 598.539 mo
657.074 598.539 li
657.674 600.295 659.319 601.565 661.273 601.565 cv
663.731 601.565 665.732 599.567 665.732 597.111 cv
665.732 594.653 663.731 592.65 661.273 592.65 cv
659.038 592.65 657.199 594.316 656.884 596.473 cv
649.767 596.473 609.353 596.473 608.582 596.473 cv
608.008 595.896 592.289 580.179 591.714 579.602 cv
591.714 579.051 591.714 575.662 591.714 573.914 cv
594.525 573.914 li
594.525 552.597 li
576.194 552.597 li
576.194 573.914 li
589.647 573.914 li
589.647 580.458 li
607.726 598.539 li
cp
f
673.774 517.14 mo
673.129 517.14 666.336 517.14 663.894 517.14 cv
663.894 515.203 li
645.023 515.203 li
645.023 521.492 li
663.894 521.492 li
663.894 519.206 li
674.633 519.206 li
674.633 519.206 679.512 514.329 680.051 513.793 cv
680.877 513.793 736.365 513.793 738.348 513.793 cv
738.348 515.67 738.348 538.096 738.348 538.892 cv
737.774 539.465 720.747 556.493 720.169 557.072 cv
719.947 557.072 719.558 557.072 719.151 557.072 cv
719.151 554.519 li
700.279 554.519 li
700.279 560.809 li
719.151 560.809 li
719.151 559.139 li
721.022 559.139 li
740.415 539.745 li
740.415 511.725 li
679.192 511.725 li
679.192 511.725 674.318 516.601 673.774 517.14 cv
cp
f
317.455 507.213 mo
316.44 507.213 315.618 506.389 315.618 505.374 cv
315.618 504.364 316.44 503.541 317.455 503.541 cv
318.465 503.541 319.288 504.364 319.288 505.374 cv
319.288 506.389 318.465 507.213 317.455 507.213 cv
cp
317.455 500.92 mo
314.997 500.92 312.996 502.918 312.996 505.374 cv
312.996 506.307 313.289 507.175 313.779 507.889 cv
312.803 508.869 311.177 510.492 310.821 510.853 cv
310.058 510.853 237.341 510.853 223.136 510.853 cv
223.136 512.917 li
311.678 512.917 li
315.329 509.267 li
315.965 509.616 316.682 509.831 317.455 509.831 cv
319.911 509.831 321.909 507.836 321.909 505.374 cv
321.909 502.918 319.911 500.92 317.455 500.92 cv
cp
f
622.281 1000.43 mo
621.268 1000.43 620.446 999.607 620.446 998.595 cv
620.446 997.586 621.268 996.766 622.281 996.766 cv
623.288 996.766 624.112 997.586 624.112 998.595 cv
624.112 999.607 623.288 1000.43 622.281 1000.43 cv
cp
574.838 988.115 mo
573.824 988.115 573.003 987.287 573.003 986.278 cv
573.003 985.264 573.824 984.441 574.838 984.441 cv
575.849 984.441 576.672 985.264 576.672 986.278 cv
576.672 987.287 575.849 988.115 574.838 988.115 cv
cp
622.281 994.141 mo
620.227 994.141 618.513 995.546 617.996 997.433 cv
613.43 997.433 587.732 997.433 586.977 997.433 cv
586.509 996.963 580.571 991.027 578.433 988.891 cv
578.966 988.153 579.297 987.253 579.297 986.278 cv
579.297 983.82 577.295 981.824 574.838 981.824 cv
572.38 981.824 570.382 983.82 570.382 986.278 cv
570.382 988.731 572.38 990.732 574.838 990.732 cv
575.563 990.732 576.24 990.539 576.848 990.231 cv
586.118 999.499 li
617.916 999.499 li
618.334 1001.53 620.131 1003.06 622.281 1003.06 cv
624.732 1003.06 626.734 1001.05 626.734 998.595 cv
626.734 996.137 624.732 994.141 622.281 994.141 cv
cp
f
620.446 919.948 mo
620.446 918.941 621.268 918.118 622.281 918.118 cv
623.288 918.118 624.112 918.941 624.112 919.948 cv
624.112 920.962 623.288 921.79 622.281 921.79 cv
621.268 921.79 620.446 920.962 620.446 919.948 cv
cp
574.315 921.79 mo
573.302 921.79 572.477 920.962 572.477 919.948 cv
572.477 918.941 573.302 918.118 574.315 918.118 cv
575.324 918.118 576.149 918.941 576.149 919.948 cv
576.149 920.962 575.324 921.79 574.315 921.79 cv
cp
626.734 919.948 mo
626.734 917.497 624.732 915.495 622.281 915.495 cv
620.183 915.495 618.428 916.958 617.954 918.914 cv
578.636 918.914 li
578.166 916.958 576.411 915.495 574.315 915.495 cv
571.857 915.495 569.857 917.497 569.857 919.948 cv
569.857 922.406 571.857 924.408 574.315 924.408 cv
576.411 924.408 578.166 922.938 578.636 920.981 cv
617.954 920.981 li
618.366 922.702 619.759 924.017 621.507 924.332 cv
621.507 945.71 li
641.936 945.71 li
641.936 947.123 li
660.809 947.123 li
660.809 940.831 li
641.936 940.831 li
641.936 943.637 li
637.174 943.637 625.076 943.637 623.577 943.637 cv
623.577 941.956 623.577 927.732 623.577 924.191 cv
625.396 923.633 626.734 921.95 626.734 919.948 cv
cp
f
540.766 959.021 mo
540.766 960.028 539.943 960.856 538.929 960.856 cv
537.919 960.856 537.094 960.028 537.094 959.021 cv
537.094 958.007 537.919 957.187 538.929 957.187 cv
539.943 957.187 540.766 958.007 540.766 959.021 cv
cp
477.6 946.179 mo
477.6 945.164 478.421 944.342 479.431 944.342 cv
480.442 944.342 481.268 945.164 481.268 946.179 cv
481.268 947.188 480.442 948.014 479.431 948.014 cv
478.421 948.014 477.6 947.188 477.6 946.179 cv
cp
443.522 948.014 mo
442.512 948.014 441.691 947.188 441.691 946.179 cv
441.691 945.164 442.512 944.342 443.522 944.342 cv
444.535 944.342 445.359 945.164 445.359 946.179 cv
445.359 947.188 444.535 948.014 443.522 948.014 cv
cp
604.456 951.159 mo
605.467 951.159 606.291 951.979 606.291 952.988 cv
606.291 954.003 605.467 954.823 604.456 954.823 cv
603.443 954.823 602.623 954.003 602.623 952.988 cv
602.623 951.979 603.443 951.159 604.456 951.159 cv
cp
604.456 957.449 mo
606.914 957.449 608.912 955.446 608.912 952.988 cv
608.912 950.536 606.914 948.534 604.456 948.534 cv
602.161 948.534 600.283 950.285 600.049 952.525 cv
587.784 952.525 482.558 952.525 480.643 952.525 cv
480.643 951.898 480.643 951.076 480.643 950.44 cv
482.507 949.915 483.89 948.213 483.89 946.179 cv
483.89 943.721 481.889 941.717 479.431 941.717 cv
477.254 941.717 475.442 943.297 475.059 945.364 cv
447.897 945.364 li
447.511 943.297 445.703 941.717 443.522 941.717 cv
441.068 941.717 439.07 943.721 439.07 946.179 cv
439.07 948.631 441.068 950.633 443.522 950.633 cv
445.542 950.633 447.234 949.273 447.779 947.431 cv
475.176 947.431 li
475.645 949.009 476.943 950.223 478.573 950.542 cv
478.573 954.592 li
538.641 954.592 li
536.321 954.748 534.473 956.658 534.473 959.021 cv
534.473 961.472 536.475 963.475 538.929 963.475 cv
541.385 963.475 543.388 961.472 543.388 959.021 cv
543.388 956.658 541.539 954.748 539.218 954.592 cv
600.311 954.592 li
600.957 956.262 602.565 957.449 604.456 957.449 cv
cp
f
686.494 933.33 mo
686.494 932.321 687.322 931.493 688.329 931.493 cv
689.34 931.493 690.164 932.321 690.164 933.33 cv
690.164 934.343 689.34 935.171 688.329 935.171 cv
687.322 935.171 686.494 934.343 686.494 933.33 cv
cp
692.781 933.33 mo
692.781 930.878 690.787 928.876 688.329 928.876 cv
685.875 928.876 683.875 930.878 683.875 933.33 cv
683.875 935.788 685.875 937.79 688.329 937.79 cv
690.787 937.79 692.781 935.788 692.781 933.33 cv
cp
f
730.005 918.785 mo
731.016 918.785 731.836 919.607 731.836 920.622 cv
731.836 921.637 731.016 922.457 730.005 922.457 cv
728.993 922.457 728.168 921.637 728.168 920.622 cv
728.168 919.607 728.993 918.785 730.005 918.785 cv
cp
783.998 918.785 mo
785.009 918.785 785.831 919.607 785.831 920.622 cv
785.831 921.637 785.009 922.457 783.998 922.457 cv
782.987 922.457 782.163 921.637 782.163 920.622 cv
782.163 919.607 782.987 918.785 783.998 918.785 cv
cp
730.005 925.077 mo
732.102 925.077 733.857 923.614 734.326 921.655 cv
779.677 921.655 li
780.142 923.614 781.897 925.077 783.998 925.077 cv
786.452 925.077 788.452 923.08 788.452 920.622 cv
788.452 918.164 786.452 916.162 783.998 916.162 cv
781.897 916.162 780.142 917.63 779.677 919.589 cv
734.326 919.589 li
733.853 917.63 732.102 916.162 730.005 916.162 cv
727.547 916.162 725.547 918.164 725.547 920.622 cv
725.547 923.08 727.547 925.077 730.005 925.077 cv
cp
f
987.129 1098.85 mo
986.114 1098.85 985.298 1098.03 985.298 1097.01 cv
985.298 1096.01 986.114 1095.19 987.129 1095.19 cv
988.143 1095.19 988.96 1096.01 988.96 1097.01 cv
988.96 1098.03 988.143 1098.85 987.129 1098.85 cv
cp
987.129 1092.56 mo
984.848 1092.56 982.98 1094.29 982.722 1096.51 cv
975.595 1096.51 li
975.595 1089.15 li
961.703 1089.15 li
961.703 1104.36 li
975.595 1104.36 li
975.595 1098.57 li
982.969 1098.57 li
983.605 1100.26 985.222 1101.47 987.129 1101.47 cv
989.587 1101.47 991.583 1099.47 991.583 1097.01 cv
991.583 1094.56 989.587 1092.56 987.129 1092.56 cv
cp
f
987.129 1053.24 mo
986.114 1053.24 985.298 1052.42 985.298 1051.41 cv
985.298 1050.4 986.114 1049.58 987.129 1049.58 cv
988.143 1049.58 988.96 1050.4 988.96 1051.41 cv
988.96 1052.42 988.143 1053.24 987.129 1053.24 cv
cp
987.129 1046.95 mo
985.094 1046.95 983.391 1048.33 982.86 1050.2 cv
975.595 1050.2 li
975.595 1043.03 li
961.703 1043.03 li
961.703 1058.22 li
975.595 1058.22 li
975.595 1052.27 li
982.762 1052.27 li
983.158 1054.31 984.967 1055.87 987.129 1055.87 cv
989.587 1055.87 991.583 1053.87 991.583 1051.41 cv
991.583 1048.95 989.587 1046.95 987.129 1046.95 cv
cp
f
987.129 1007.9 mo
986.114 1007.9 985.298 1007.08 985.298 1006.06 cv
985.298 1005.06 986.114 1004.23 987.129 1004.23 cv
988.143 1004.23 988.96 1005.06 988.96 1006.06 cv
988.96 1007.08 988.143 1007.9 987.129 1007.9 cv
cp
987.129 1001.61 mo
984.933 1001.61 983.117 1003.2 982.748 1005.29 cv
975.595 1005.29 li
975.595 998.204 li
961.703 998.204 li
961.703 1013.41 li
975.595 1013.41 li
975.595 1007.36 li
982.885 1007.36 li
983.447 1009.18 985.127 1010.52 987.129 1010.52 cv
989.587 1010.52 991.583 1008.52 991.583 1006.06 cv
991.583 1003.61 989.587 1001.61 987.129 1001.61 cv
cp
f
987.129 961.504 mo
986.114 961.504 985.298 960.684 985.298 959.675 cv
985.298 958.661 986.114 957.84 987.129 957.84 cv
988.143 957.84 988.96 958.661 988.96 959.675 cv
988.96 960.684 988.143 961.504 987.129 961.504 cv
cp
987.129 955.223 mo
984.788 955.223 982.883 957.038 982.71 959.341 cv
975.595 959.341 li
975.595 952.598 li
961.703 952.598 li
961.703 967.802 li
975.595 967.802 li
975.595 961.407 li
983.023 961.407 li
983.702 963.007 985.282 964.13 987.129 964.13 cv
989.587 964.13 991.583 962.133 991.583 959.675 cv
991.583 957.217 989.587 955.223 987.129 955.223 cv
cp
f
716.064 904.109 mo
697.192 904.109 li
697.192 906.284 li
688.339 906.284 li
688.339 906.284 676.147 919.359 675.564 919.981 cv
674.842 919.981 664.045 919.981 660.809 919.981 cv
660.809 917.479 li
641.936 917.479 li
641.936 923.766 li
660.809 923.766 li
660.809 922.047 li
676.459 922.047 li
676.459 922.047 688.652 908.979 689.237 908.351 cv
689.869 908.351 694.93 908.351 697.192 908.351 cv
697.192 910.396 li
716.064 910.396 li
716.064 904.109 li
cp
f
716.064 917.479 mo
697.192 917.479 li
697.192 919.454 li
686.179 919.454 li
686.179 919.454 674.968 931.417 674.383 932.04 cv
673.695 932.04 664.313 932.04 660.809 932.04 cv
660.809 930.058 li
641.936 930.058 li
641.936 936.345 li
660.809 936.345 li
660.809 934.107 li
675.277 934.107 li
675.277 934.107 686.494 922.144 687.075 921.521 cv
687.744 921.521 694.618 921.521 697.192 921.521 cv
697.192 923.766 li
716.064 923.766 li
716.064 917.479 li
cp
f
716.064 930.319 mo
697.192 930.319 li
697.192 936.608 li
716.064 936.608 li
716.064 930.319 li
cp
f
682.824 946.203 mo
681.813 946.203 680.989 945.383 680.989 944.368 cv
680.989 943.361 681.813 942.533 682.824 942.533 cv
683.837 942.533 684.661 943.361 684.661 944.368 cv
684.661 945.383 683.837 946.203 682.824 946.203 cv
cp
716.064 947.123 mo
716.064 940.831 li
697.192 940.831 li
697.192 943.29 li
687.136 943.29 li
686.646 941.359 684.908 939.908 682.824 939.908 cv
680.37 939.908 678.368 941.91 678.368 944.368 cv
678.368 946.826 680.37 948.823 682.824 948.823 cv
684.94 948.823 686.707 947.34 687.161 945.356 cv
697.192 945.356 li
697.192 947.123 li
716.064 947.123 li
cp
f
461.346 967.667 mo
460.335 967.667 459.513 966.844 459.513 965.837 cv
459.513 964.823 460.335 964.002 461.346 964.002 cv
462.358 964.002 463.183 964.823 463.183 965.837 cv
463.183 966.844 462.358 967.667 461.346 967.667 cv
cp
870.969 1001.87 mo
870.969 995.584 li
852.094 995.584 li
852.094 998.241 li
842.349 998.241 757.366 998.241 756.542 998.241 cv
755.955 997.624 736.559 977.383 736.559 977.383 cv
736.559 977.383 623.949 977.383 623.099 977.383 cv
622.566 976.851 618.251 972.531 618.251 972.531 cv
618.251 972.531 595.402 972.531 594.574 972.531 cv
594.019 971.973 587.149 965.104 587.149 965.104 cv
465.73 965.104 li
465.38 962.999 463.555 961.377 461.346 961.377 cv
458.888 961.377 456.891 963.379 456.891 965.837 cv
456.891 968.288 458.888 970.29 461.346 970.29 cv
463.332 970.29 465.002 968.976 465.572 967.171 cv
477.028 967.171 585.487 967.171 586.293 967.171 cv
586.852 967.737 593.718 974.598 593.718 974.598 cv
593.718 974.598 616.567 974.598 617.396 974.598 cv
617.926 975.138 622.243 979.449 622.243 979.449 cv
622.243 979.449 734.802 979.449 735.678 979.449 cv
736.269 980.065 755.664 1000.31 755.664 1000.31 cv
852.094 1000.31 li
852.094 1001.87 li
870.969 1001.87 li
cp
f
870.969 983.526 mo
852.094 983.526 li
852.094 989.815 li
870.969 989.815 li
870.969 983.526 li
cp
f
766.173 975.138 mo
765.166 975.138 764.338 974.315 764.338 973.301 cv
764.338 972.288 765.166 971.472 766.173 971.472 cv
767.184 971.472 768.008 972.288 768.008 973.301 cv
768.008 974.315 767.184 975.138 766.173 975.138 cv
cp
870.969 970.157 mo
852.094 970.157 li
852.094 972.62 li
770.563 972.62 li
770.23 970.491 768.396 968.846 766.173 968.846 cv
763.95 968.846 762.119 970.491 761.785 972.62 cv
716.064 972.62 li
716.064 968.584 li
697.192 968.584 li
697.192 974.879 li
716.064 974.879 li
716.064 974.688 li
761.959 974.688 li
762.552 976.465 764.203 977.763 766.173 977.763 cv
768.146 977.763 769.799 976.465 770.386 974.688 cv
852.094 974.688 li
852.094 976.446 li
870.969 976.446 li
870.969 970.157 li
cp
f
870.969 956.794 mo
852.094 956.794 li
852.094 959.47 li
724.641 959.47 li
724.641 959.47 718.768 965.344 718.221 965.894 cv
717.377 965.894 671.125 965.894 671.125 965.894 cv
671.125 965.894 664.603 972.415 664.049 972.968 cv
663.616 972.968 662.009 972.968 660.809 972.968 cv
660.809 970.157 li
641.936 970.157 li
641.936 976.446 li
660.809 976.446 li
660.809 975.041 li
664.909 975.041 li
664.909 975.041 671.427 968.514 671.981 967.961 cv
672.823 967.961 719.075 967.961 719.075 967.961 cv
719.075 967.961 724.948 962.088 725.496 961.537 cv
726.31 961.537 841.764 961.537 852.094 961.537 cv
852.094 963.083 li
870.969 963.083 li
870.969 956.794 li
cp
f
870.969 943.688 mo
852.094 943.688 li
852.094 949.977 li
870.969 949.977 li
870.969 943.688 li
cp
f
870.969 930.846 mo
852.094 930.846 li
852.094 937.135 li
870.969 937.135 li
870.969 930.846 li
cp
f
870.969 917.479 mo
852.094 917.479 li
852.094 923.766 li
870.969 923.766 li
870.969 917.479 li
cp
f
722.665 998.857 mo
722.665 997.851 723.486 997.023 724.5 997.023 cv
725.511 997.023 726.335 997.851 726.335 998.857 cv
726.335 999.871 725.511 1000.69 724.5 1000.69 cv
723.486 1000.69 722.665 999.871 722.665 998.857 cv
cp
641.936 1009.22 mo
641.936 1015.5 li
660.809 1015.5 li
660.809 1013.65 li
683.078 1013.65 li
683.078 1013.65 690.035 1006.7 690.594 1006.14 cv
691.364 1006.14 719.254 1006.14 723.642 1006.14 cv
723.642 1010.91 723.642 1018.7 723.642 1019.27 cv
723.131 1019.77 719.25 1023.66 718.741 1024.16 cv
718.308 1024.16 716.975 1024.16 716.064 1024.16 cv
716.064 1021.8 li
697.192 1021.8 li
697.192 1028.09 li
716.064 1028.09 li
716.064 1026.24 li
719.598 1026.24 li
725.708 1020.13 li
725.708 1003.13 li
727.574 1002.59 728.955 1000.9 728.955 998.857 cv
728.955 996.399 726.954 994.402 724.5 994.402 cv
722.414 994.402 720.675 995.849 720.192 997.786 cv
716.064 997.786 li
716.064 995.584 li
697.192 995.584 li
697.192 1001.87 li
716.064 1001.87 li
716.064 999.852 li
720.165 999.852 li
720.553 1001.55 721.917 1002.89 723.642 1003.23 cv
723.642 1003.46 723.642 1003.75 723.642 1004.08 cv
689.734 1004.08 li
689.734 1004.08 682.78 1011.03 682.222 1011.58 cv
681.522 1011.58 665.656 1011.58 660.809 1011.58 cv
660.809 1009.22 li
641.936 1009.22 li
cp
f
641.936 1028.87 mo
660.809 1028.87 li
660.809 1026.76 li
682.38 1026.76 li
682.38 1026.76 694.644 1014.49 695.221 1013.91 cv
695.619 1013.91 696.554 1013.91 697.192 1013.91 cv
697.192 1015.24 li
716.064 1015.24 li
716.064 1008.95 li
697.192 1008.95 li
697.192 1011.85 li
694.366 1011.85 li
694.366 1011.85 682.101 1024.11 681.522 1024.69 cv
680.82 1024.69 665.31 1024.69 660.809 1024.69 cv
660.809 1022.58 li
641.936 1022.58 li
641.936 1028.87 li
cp
f
727.118 1067.4 mo
727.118 1046.43 li
721.352 1046.43 li
721.352 1067.4 li
727.118 1067.4 li
cp
f
733.413 1067.4 mo
739.178 1067.4 li
739.178 1046.43 li
733.413 1046.43 li
733.413 1067.4 li
cp
f
744.943 1067.4 mo
750.712 1067.4 li
750.712 1046.43 li
744.943 1046.43 li
744.943 1067.4 li
cp
f
757.524 1046.43 mo
757.524 1067.4 li
763.287 1067.4 li
763.287 1046.43 li
757.524 1046.43 li
cp
f
768.536 1067.4 mo
774.301 1067.4 li
774.301 1046.43 li
768.536 1046.43 li
768.536 1067.4 li
cp
f
798.936 1046.43 mo
793.169 1046.43 li
793.169 1067.4 li
798.936 1067.4 li
798.936 1046.43 li
cp
f
804.965 1046.43 mo
804.965 1067.4 li
810.732 1067.4 li
810.732 1046.43 li
804.965 1046.43 li
cp
f
924.227 1055.61 mo
914.524 1055.61 li
914.524 1068.71 li
924.227 1068.71 li
924.227 1055.61 li
cp
f
933.134 1075.79 mo
934.148 1075.79 934.971 1076.61 934.971 1077.62 cv
934.971 1078.63 934.148 1079.46 933.134 1079.46 cv
932.123 1079.46 931.301 1078.63 931.301 1077.62 cv
931.301 1076.61 932.123 1075.79 933.134 1075.79 cv
cp
905.091 1090.73 mo
914.788 1090.73 li
914.788 1085.12 li
928.934 1085.12 li
932.106 1081.95 li
932.436 1082.02 932.778 1082.08 933.134 1082.08 cv
935.592 1082.08 937.592 1080.08 937.592 1077.62 cv
937.592 1075.16 935.592 1073.17 933.134 1073.17 cv
930.676 1073.17 928.676 1075.16 928.676 1077.62 cv
928.676 1078.95 929.27 1080.12 930.191 1080.94 cv
929.481 1081.64 928.4 1082.73 928.075 1083.05 cv
927.408 1083.05 918.068 1083.05 914.788 1083.05 cv
914.788 1077.62 li
905.091 1077.62 li
905.091 1090.73 li
cp
f
909.808 1098.85 mo
908.797 1098.85 907.973 1098.03 907.973 1097.01 cv
907.973 1096.01 908.797 1095.19 909.808 1095.19 cv
910.82 1095.19 911.644 1096.01 911.644 1097.01 cv
911.644 1098.03 910.82 1098.85 909.808 1098.85 cv
cp
939.165 1096.68 mo
914.229 1096.68 li
914.053 1094.38 912.149 1092.56 909.808 1092.56 cv
907.404 1092.56 905.455 1094.48 905.366 1096.86 cv
897.023 1096.86 844.65 1096.86 843.85 1096.86 cv
843.262 1096.25 821.406 1073.42 820.853 1072.84 cv
820.853 1072.36 820.853 1069.44 820.853 1067.4 cv
822.524 1067.4 li
822.524 1046.43 li
816.76 1046.43 li
816.76 1067.4 li
818.784 1067.4 li
818.784 1073.67 li
842.968 1098.93 li
905.799 1098.93 li
906.516 1100.43 908.035 1101.47 909.808 1101.47 cv
911.65 1101.47 913.236 1100.34 913.912 1098.75 cv
939.165 1098.75 li
939.165 1104.36 li
953.055 1104.36 li
953.055 1089.15 li
939.165 1089.15 li
939.165 1096.68 li
cp
f
910.067 1053.24 mo
909.06 1053.24 908.232 1052.42 908.232 1051.41 cv
908.232 1050.4 909.06 1049.58 910.067 1049.58 cv
911.082 1049.58 911.906 1050.4 911.906 1051.41 cv
911.906 1052.42 911.082 1053.24 910.067 1053.24 cv
cp
939.165 1050.03 mo
914.281 1050.03 li
913.695 1048.25 912.041 1046.95 910.067 1046.95 cv
907.969 1046.95 906.217 1048.42 905.748 1050.38 cv
898.461 1050.38 li
898.461 1055.61 li
895.13 1055.61 li
895.13 1064.22 li
884.957 1064.22 li
884.957 1064.22 873.782 1075.4 873.205 1075.98 cv
872.385 1075.98 840.558 1075.98 839.729 1075.98 cv
839.203 1075.44 833.964 1070.21 833.432 1069.68 cv
833.432 1069.31 833.432 1068.29 833.432 1067.4 cv
835.107 1067.4 li
835.107 1046.43 li
829.342 1046.43 li
829.342 1067.4 li
831.363 1067.4 li
831.363 1070.53 li
838.876 1078.04 li
874.065 1078.04 li
874.065 1078.04 885.24 1066.87 885.818 1066.3 cv
886.41 1066.3 892.258 1066.3 895.13 1066.3 cv
895.13 1068.71 li
904.828 1068.71 li
904.828 1055.61 li
900.53 1055.61 li
900.53 1054.57 900.53 1053.22 900.53 1052.45 cv
901.6 1052.45 904.243 1052.45 905.748 1052.45 cv
906.217 1054.41 907.969 1055.87 910.067 1055.87 cv
912.29 1055.87 914.127 1054.23 914.457 1052.09 cv
939.165 1052.09 li
939.165 1058.22 li
953.055 1058.22 li
953.055 1043.03 li
939.165 1043.03 li
939.165 1050.03 li
cp
f
910.067 1007.12 mo
909.06 1007.12 908.232 1006.29 908.232 1005.28 cv
908.232 1004.27 909.06 1003.45 910.067 1003.45 cv
911.082 1003.45 911.906 1004.27 911.906 1005.28 cv
911.906 1006.29 911.082 1007.12 910.067 1007.12 cv
cp
939.165 1005.82 mo
914.471 1005.82 li
914.493 1005.64 914.524 1005.47 914.524 1005.28 cv
914.524 1002.82 912.529 1000.83 910.067 1000.83 cv
907.613 1000.83 905.617 1002.82 905.617 1005.28 cv
905.617 1005.35 905.63 1005.4 905.634 1005.47 cv
898.113 1005.47 li
898.113 1010.79 li
895.13 1010.79 li
895.13 1022.84 li
897.861 1022.84 li
890.692 1030.01 li
890.692 1030.01 890.692 1050.25 890.692 1051.07 cv
890.18 1051.58 886.13 1055.63 885.614 1056.14 cv
884.874 1056.14 854.331 1056.14 847.424 1056.14 cv
847.424 1046.43 li
841.661 1046.43 li
841.661 1067.4 li
847.424 1067.4 li
847.424 1058.21 li
886.472 1058.21 li
892.755 1051.93 li
892.755 1051.93 892.755 1031.69 892.755 1030.87 cv
893.243 1030.39 899.115 1024.51 900.782 1022.84 cv
904.305 1022.84 li
904.305 1010.79 li
900.185 1010.79 li
900.185 1009.88 900.185 1008.4 900.185 1007.54 cv
901.451 1007.54 905.039 1007.54 906.25 1007.54 cv
907.024 1008.84 908.441 1009.74 910.067 1009.74 cv
911.553 1009.74 912.856 1009 913.669 1007.89 cv
939.165 1007.89 li
939.165 1013.41 li
953.055 1013.41 li
953.055 998.204 li
939.165 998.204 li
939.165 1005.82 li
cp
f
910.067 962.295 mo
909.06 962.295 908.232 961.472 908.232 960.458 cv
908.232 959.443 909.06 958.623 910.067 958.623 cv
911.082 958.623 911.906 959.443 911.906 960.458 cv
911.906 961.472 911.082 962.295 910.067 962.295 cv
cp
939.165 959.516 mo
914.42 959.516 li
913.982 957.514 912.203 956.005 910.067 956.005 cv
908.13 956.005 906.492 957.255 905.887 958.989 cv
898.64 958.989 li
898.64 964.918 li
895.13 964.918 li
895.13 972.095 li
891.038 972.095 li
891.038 972.095 891.038 1018.6 891.038 1019.44 cv
890.464 1020.02 874.31 1036.17 873.733 1036.75 cv
873.311 1036.75 871.97 1036.75 870.969 1036.75 cv
870.969 1034.64 li
852.094 1034.64 li
852.094 1040.93 li
870.969 1040.93 li
870.969 1038.82 li
874.588 1038.82 li
893.104 1020.3 li
893.104 1020.3 893.104 976.137 893.104 974.161 cv
893.667 974.161 894.436 974.161 895.13 974.161 cv
895.13 976.973 li
904.305 976.973 li
904.305 964.918 li
900.707 964.918 li
900.707 963.72 900.707 961.954 900.707 961.054 cv
901.791 961.054 904.357 961.054 905.674 961.054 cv
905.973 963.231 907.814 964.918 910.067 964.918 cv
912.138 964.918 913.861 963.493 914.36 961.588 cv
939.165 961.588 li
939.165 967.802 li
953.055 967.802 li
953.055 952.598 li
939.165 952.598 li
939.165 959.516 li
cp
f
910.067 915.642 mo
909.06 915.642 908.232 914.819 908.232 913.807 cv
908.232 912.792 909.06 911.97 910.067 911.97 cv
911.082 911.97 911.906 912.792 911.906 913.807 cv
911.906 914.819 911.082 915.642 910.067 915.642 cv
cp
939.165 912.862 mo
914.42 912.862 li
913.982 910.852 912.203 909.352 910.067 909.352 cv
908.069 909.352 906.387 910.685 905.828 912.509 cv
896.543 912.509 li
896.543 918.785 li
895.13 918.785 li
895.13 925.97 li
885.708 925.97 li
885.708 925.97 885.708 1011.35 885.708 1012.19 cv
885.144 1012.76 873.6 1024.3 873.032 1024.86 cv
872.681 1024.86 871.765 1024.86 870.969 1024.86 cv
870.969 1022.84 li
852.094 1022.84 li
852.094 1029.13 li
870.969 1029.13 li
870.969 1026.93 li
873.893 1026.93 li
887.774 1013.05 li
887.774 1013.05 887.774 930.05 887.774 928.028 cv
888.948 928.028 892.896 928.028 895.13 928.028 cv
895.13 930.846 li
904.305 930.846 li
904.305 918.785 li
898.611 918.785 li
898.611 917.611 898.611 915.563 898.611 914.576 cv
899.841 914.576 903.835 914.576 905.695 914.576 cv
906.06 916.669 907.876 918.267 910.067 918.267 cv
912.142 918.267 913.863 916.842 914.364 914.922 cv
939.165 914.922 li
939.165 921.405 li
953.055 921.405 li
953.055 906.206 li
939.165 906.206 li
939.165 912.862 li
cp
f
909.543 868.99 mo
908.533 868.99 907.708 868.162 907.708 867.153 cv
907.708 866.14 908.533 865.316 909.543 865.316 cv
910.558 865.316 911.38 866.14 911.38 867.153 cv
911.38 868.162 910.558 868.99 909.543 868.99 cv
cp
939.165 866.904 mo
913.973 866.904 li
913.844 864.568 911.916 862.693 909.543 862.693 cv
907.085 862.693 905.091 864.695 905.091 867.153 cv
905.091 867.25 905.113 867.334 905.119 867.423 cv
897.065 867.423 li
897.065 872.134 li
895.13 872.134 li
895.13 883.596 li
879.591 899.135 li
879.591 899.135 879.591 1005.05 879.591 1005.9 cv
879.074 1006.42 874.772 1010.72 874.257 1011.23 cv
873.818 1011.23 872.176 1011.23 870.969 1011.23 cv
870.969 1008.95 li
852.094 1008.95 li
852.094 1015.24 li
870.969 1015.24 li
870.969 1013.31 li
875.116 1013.31 li
881.662 1006.76 li
881.662 1006.76 881.662 900.842 881.662 899.995 cv
882.184 899.469 894.814 886.839 897.466 884.187 cv
904.305 884.187 li
904.305 872.134 li
899.134 872.134 li
899.134 871.217 899.134 870.157 899.134 869.496 cv
900.464 869.496 904.544 869.496 905.774 869.496 cv
906.56 870.753 907.949 871.608 909.543 871.608 cv
911.355 871.608 912.905 870.523 913.604 868.97 cv
939.165 868.97 li
939.165 876.324 li
953.055 876.324 li
953.055 861.124 li
939.165 861.124 li
939.165 866.904 li
cp
f
933.66 944.997 mo
934.671 944.997 935.491 945.819 935.491 946.834 cv
935.491 947.841 934.671 948.661 933.66 948.661 cv
932.649 948.661 931.829 947.841 931.829 946.834 cv
931.829 945.819 932.649 944.997 933.66 944.997 cv
cp
904.564 941.325 mo
904.564 953.386 li
913.741 953.386 li
913.741 947.604 li
929.279 947.604 li
929.648 949.69 931.464 951.287 933.66 951.287 cv
936.118 951.287 938.114 949.292 938.114 946.834 cv
938.114 944.376 936.118 942.374 933.66 942.374 cv
931.658 942.374 929.975 943.715 929.418 945.537 cv
913.741 945.537 li
913.741 941.325 li
904.564 941.325 li
cp
f
933.66 984.315 mo
934.671 984.315 935.491 985.137 935.491 986.144 cv
935.491 987.158 934.671 987.986 933.66 987.986 cv
932.649 987.986 931.829 987.158 931.829 986.144 cv
931.829 985.137 932.649 984.315 933.66 984.315 cv
cp
904.564 987.196 mo
904.564 999.248 li
913.741 999.248 li
913.741 994.257 li
927.888 994.257 li
931.901 990.239 li
932.44 990.477 933.033 990.604 933.66 990.604 cv
936.118 990.604 938.114 988.609 938.114 986.144 cv
938.114 983.693 936.118 981.69 933.66 981.69 cv
931.202 981.69 929.204 983.693 929.204 986.144 cv
929.204 987.223 929.604 988.202 930.243 988.974 cv
929.321 989.892 927.414 991.804 927.027 992.19 cv
926.328 992.19 916.324 992.19 913.741 992.19 cv
913.741 987.196 li
904.564 987.196 li
cp
f
933.66 1030.44 mo
934.671 1030.44 935.491 1031.26 935.491 1032.28 cv
935.491 1033.29 934.671 1034.11 933.66 1034.11 cv
932.649 1034.11 931.829 1033.29 931.829 1032.28 cv
931.829 1031.26 932.649 1030.44 933.66 1030.44 cv
cp
904.564 1032.8 mo
904.564 1044.86 li
913.741 1044.86 li
913.741 1040.04 li
927.888 1040.04 li
931.677 1036.24 li
932.277 1036.54 932.945 1036.73 933.66 1036.73 cv
936.118 1036.73 938.114 1034.73 938.114 1032.28 cv
938.114 1029.82 936.118 1027.82 933.66 1027.82 cv
931.202 1027.82 929.204 1029.82 929.204 1032.28 cv
929.204 1033.26 929.536 1034.17 930.085 1034.91 cv
929.124 1035.88 927.399 1037.6 927.027 1037.97 cv
926.351 1037.97 916.822 1037.97 913.741 1037.97 cv
913.741 1032.8 li
904.564 1032.8 li
cp
f
914 918.785 mo
914 930.846 li
923.173 930.846 li
923.173 918.785 li
914 918.785 li
cp
f
914 964.918 mo
914 976.973 li
923.173 976.973 li
923.173 964.918 li
914 964.918 li
cp
f
914 1010.79 mo
914 1022.84 li
923.173 1022.84 li
923.173 1010.79 li
914 1010.79 li
cp
f
574.576 930.975 mo
575.587 930.975 576.411 931.795 576.411 932.81 cv
576.411 933.818 575.587 934.646 574.576 934.646 cv
573.565 934.646 572.743 933.818 572.743 932.81 cv
572.743 931.795 573.565 930.975 574.576 930.975 cv
cp
813.878 951.678 mo
814.889 951.678 815.709 952.506 815.709 953.515 cv
815.709 954.527 814.889 955.35 813.878 955.35 cv
812.867 955.35 812.043 954.527 812.043 953.515 cv
812.043 952.506 812.867 951.678 813.878 951.678 cv
cp
688.329 961.119 mo
687.322 961.119 686.494 960.29 686.494 959.284 cv
686.494 958.269 687.322 957.449 688.329 957.449 cv
689.34 957.449 690.164 958.269 690.164 959.284 cv
690.164 960.29 689.34 961.119 688.329 961.119 cv
cp
507.915 928.927 mo
488.693 928.927 li
488.693 935.038 li
507.915 935.038 li
507.915 933.625 li
570.201 933.625 li
570.587 935.691 572.397 937.269 574.576 937.269 cv
576.694 937.269 578.459 935.782 578.911 933.805 cv
583.021 933.805 608.367 933.805 610.147 933.805 cv
610.147 935.673 610.147 955.12 610.147 955.12 cv
641.936 955.12 li
641.936 962.559 li
660.809 962.559 li
660.809 955.12 li
686.788 955.12 li
685.092 955.747 683.875 957.373 683.875 959.284 cv
683.875 961.742 685.875 963.738 688.329 963.738 cv
690.787 963.738 692.781 961.742 692.781 959.284 cv
692.781 957.373 691.569 955.747 689.871 955.12 cv
697.192 955.12 li
697.192 962.559 li
716.064 962.559 li
716.064 954.94 li
809.676 954.94 li
810.272 956.696 811.922 957.97 813.878 957.97 cv
816.336 957.97 818.33 955.973 818.33 953.515 cv
818.33 951.055 816.336 949.06 813.878 949.06 cv
811.637 949.06 809.798 950.723 809.484 952.873 cv
716.064 952.873 li
716.064 951.024 li
697.192 951.024 li
697.192 953.046 li
660.809 953.046 li
660.809 951.024 li
641.936 951.024 li
641.936 953.046 li
636.769 953.046 613.931 953.046 612.218 953.046 cv
612.218 951.179 612.218 931.732 612.218 931.732 cv
578.885 931.732 li
578.402 929.793 576.658 928.356 574.576 928.356 cv
572.557 928.356 570.866 929.71 570.321 931.558 cv
507.915 931.558 li
507.915 928.927 li
cp
f
670.689 997.26 mo
670.04 997.26 663.251 997.26 660.809 997.26 cv
660.809 995.322 li
641.936 995.322 li
641.936 1001.61 li
660.809 1001.61 li
660.809 999.326 li
671.545 999.326 li
671.545 999.326 676.423 994.448 676.962 993.909 cv
677.79 993.909 733.28 993.909 735.263 993.909 cv
735.263 995.789 735.263 1018.21 735.263 1019.01 cv
734.685 1019.58 717.658 1036.61 717.081 1037.19 cv
716.864 1037.19 716.473 1037.19 716.064 1037.19 cv
716.064 1034.64 li
697.192 1034.64 li
697.192 1040.93 li
716.064 1040.93 li
716.064 1039.25 li
717.939 1039.25 li
737.326 1019.86 li
737.326 991.842 li
676.105 991.842 li
676.105 991.842 671.227 996.72 670.689 997.26 cv
cp
f
536.273 705.754 mo
535.263 705.754 534.442 704.932 534.442 703.921 cv
534.442 702.909 535.263 702.084 536.273 702.084 cv
537.284 702.084 538.108 702.909 538.108 703.921 cv
538.108 704.932 537.284 705.754 536.273 705.754 cv
cp
536.273 699.463 mo
533.815 699.463 531.817 701.465 531.817 703.921 cv
531.817 706.375 533.815 708.38 536.273 708.38 cv
538.731 708.38 540.729 706.375 540.729 703.921 cv
540.729 702.679 540.217 701.562 539.4 700.751 cv
549.854 689.289 li
550.868 689.289 li
550.868 688.174 li
550.929 688.104 li
550.868 688.047 li
550.868 667.97 li
544.751 667.97 li
544.751 689.289 li
547.056 689.289 li
537.576 699.682 li
537.162 699.554 536.729 699.463 536.273 699.463 cv
cp
f
359.68 756.077 mo
359.68 755.07 360.5 754.244 361.511 754.244 cv
362.521 754.244 363.346 755.07 363.346 756.077 cv
363.346 757.092 362.521 757.912 361.511 757.912 cv
360.5 757.912 359.68 757.092 359.68 756.077 cv
cp
365.965 756.077 mo
365.965 753.625 363.965 751.623 361.511 751.623 cv
359.053 751.623 357.059 753.625 357.059 756.077 cv
357.059 758.539 359.053 760.537 361.511 760.537 cv
363.965 760.537 365.965 758.539 365.965 756.077 cv
cp
f
351.027 781.765 mo
351.027 782.775 350.201 783.604 349.19 783.604 cv
348.18 783.604 347.359 782.775 347.359 781.765 cv
347.359 780.754 348.18 779.928 349.19 779.928 cv
350.201 779.928 351.027 780.754 351.027 781.765 cv
cp
344.738 781.765 mo
344.738 784.223 346.736 786.223 349.19 786.223 cv
351.648 786.223 353.648 784.223 353.648 781.765 cv
353.648 779.309 351.648 777.307 349.19 777.307 cv
346.736 777.307 344.738 779.309 344.738 781.765 cv
cp
f
325.602 810.334 mo
324.591 810.334 323.767 809.514 323.767 808.499 cv
323.767 807.488 324.591 806.666 325.602 806.666 cv
326.612 806.666 327.436 807.488 327.436 808.499 cv
327.436 809.514 326.612 810.334 325.602 810.334 cv
cp
488.044 806.666 mo
489.058 806.666 489.881 807.488 489.881 808.499 cv
489.881 809.514 489.058 810.334 488.044 810.334 cv
487.033 810.334 486.213 809.514 486.213 808.499 cv
486.213 807.488 487.033 806.666 488.044 806.666 cv
cp
488.044 812.957 mo
490.502 812.957 492.502 810.957 492.502 808.499 cv
492.502 806.041 490.502 804.045 488.044 804.045 cv
485.897 804.045 484.101 805.572 483.681 807.601 cv
329.967 807.601 li
329.545 805.572 327.752 804.045 325.602 804.045 cv
323.147 804.045 321.149 806.041 321.149 808.499 cv
321.149 810.957 323.147 812.957 325.602 812.957 cv
327.653 812.957 329.371 811.558 329.883 809.667 cv
483.764 809.667 li
484.281 811.558 485.998 812.957 488.044 812.957 cv
cp
f
670.477 803.786 mo
669.463 803.786 668.642 802.954 668.642 801.947 cv
668.642 800.934 669.463 800.11 670.477 800.11 cv
671.487 800.11 672.309 800.934 672.309 801.947 cv
672.309 802.954 671.487 803.786 670.477 803.786 cv
cp
583.715 791.466 mo
582.702 791.466 581.88 790.638 581.88 789.631 cv
581.88 788.616 582.702 787.796 583.715 787.796 cv
584.727 787.796 585.548 788.616 585.548 789.631 cv
585.548 790.638 584.727 791.466 583.715 791.466 cv
cp
670.477 797.491 mo
668.426 797.491 666.708 798.892 666.195 800.785 cv
661.629 800.785 596.609 800.785 595.848 800.785 cv
595.388 800.315 589.446 794.38 587.307 792.239 cv
587.843 791.504 588.169 790.606 588.169 789.631 cv
588.169 787.173 586.171 785.173 583.715 785.173 cv
581.257 785.173 579.257 787.173 579.257 789.631 cv
579.257 792.089 581.257 794.083 583.715 794.083 cv
584.44 794.083 585.119 793.892 585.723 793.584 cv
594.992 802.852 li
666.111 802.852 li
666.529 804.881 668.33 806.404 670.477 806.404 cv
672.932 806.404 674.93 804.405 674.93 801.947 cv
674.93 799.491 672.932 797.491 670.477 797.491 cv
cp
f
571.569 801.336 mo
572.582 801.336 573.406 802.158 573.406 803.171 cv
573.406 804.184 572.582 805.008 571.569 805.008 cv
570.56 805.008 569.732 804.184 569.732 803.171 cv
569.732 802.158 570.56 801.336 571.569 801.336 cv
cp
571.569 807.627 mo
574.027 807.627 576.027 805.625 576.027 803.171 cv
576.027 800.713 574.027 798.715 571.569 798.715 cv
569.421 798.715 567.624 800.242 567.206 802.267 cv
530.602 802.267 li
530.602 802.267 518.858 814.012 518.285 814.591 cv
517.974 814.591 517.343 814.591 516.792 814.591 cv
516.792 812.651 li
497.568 812.651 li
497.568 818.769 li
516.792 818.769 li
516.792 816.657 li
519.14 816.657 li
519.14 816.657 530.887 804.915 531.46 804.341 cv
532.227 804.341 562.358 804.341 567.289 804.341 cv
567.807 806.227 569.521 807.627 571.569 807.627 cv
cp
f
682.533 714.667 mo
683.544 714.667 684.368 715.495 684.368 716.502 cv
684.368 717.511 683.544 718.333 682.533 718.333 cv
681.521 718.333 680.696 717.511 680.696 716.502 cv
680.696 715.495 681.521 714.667 682.533 714.667 cv
cp
595.509 711.523 mo
594.499 711.523 593.676 710.7 593.676 709.687 cv
593.676 708.672 594.499 707.852 595.509 707.852 cv
596.523 707.852 597.348 708.672 597.348 709.687 cv
597.348 710.7 596.523 711.523 595.509 711.523 cv
cp
560.387 711.523 mo
559.378 711.523 558.554 710.7 558.554 709.687 cv
558.554 708.672 559.378 707.852 560.387 707.852 cv
561.4 707.852 562.222 708.672 562.222 709.687 cv
562.222 710.7 561.4 711.523 560.387 711.523 cv
cp
596.409 705.323 mo
596.409 689.289 li
598.396 689.289 li
598.396 667.97 li
592.28 667.97 li
592.28 689.289 li
594.343 689.289 li
594.343 705.406 li
592.534 705.9 591.19 707.498 591.079 709.438 cv
564.816 709.438 li
564.688 707.099 562.757 705.233 560.387 705.233 cv
557.933 705.233 555.93 707.229 555.93 709.687 cv
555.93 712.144 557.933 714.143 560.387 714.143 cv
562.195 714.143 563.745 713.056 564.444 711.506 cv
591.452 711.506 li
592.15 713.056 593.701 714.143 595.509 714.143 cv
597.341 714.143 598.921 713.027 599.601 711.44 cv
604.601 711.44 675.503 711.44 676.272 711.44 cv
676.612 711.779 677.977 713.148 678.843 714.01 cv
678.36 714.72 678.079 715.579 678.079 716.502 cv
678.079 718.958 680.077 720.958 682.533 720.958 cv
684.991 720.958 686.988 718.958 686.988 716.502 cv
686.988 714.044 684.991 712.05 682.533 712.05 cv
681.749 712.05 681.021 712.268 680.383 712.627 cv
677.129 709.373 li
599.934 709.373 li
599.789 707.371 598.336 705.72 596.409 705.323 cv
cp
f
668.642 723.301 mo
668.642 722.292 669.463 721.471 670.477 721.471 cv
671.487 721.471 672.309 722.292 672.309 723.301 cv
672.309 724.313 671.487 725.136 670.477 725.136 cv
669.463 725.136 668.642 724.313 668.642 723.301 cv
cp
583.188 725.136 mo
582.178 725.136 581.357 724.313 581.357 723.301 cv
581.357 722.292 582.178 721.471 583.188 721.471 cv
584.199 721.471 585.023 722.292 585.023 723.301 cv
585.023 724.313 584.199 725.136 583.188 725.136 cv
cp
674.93 723.301 mo
674.93 720.845 672.932 718.846 670.477 718.846 cv
668.376 718.846 666.623 720.309 666.153 722.269 cv
587.516 722.269 li
587.043 720.309 585.29 718.846 583.188 718.846 cv
580.734 718.846 578.736 720.845 578.736 723.301 cv
578.736 725.761 580.734 727.759 583.188 727.759 cv
585.29 727.759 587.043 726.294 587.516 724.332 cv
666.153 724.332 li
666.563 726.049 667.954 727.371 669.704 727.683 cv
669.704 749.059 li
690.136 749.059 li
690.136 750.474 li
709.008 750.474 li
709.008 744.183 li
690.136 744.183 li
690.136 746.991 li
685.369 746.991 673.273 746.991 671.772 746.991 cv
671.772 745.307 671.772 731.079 671.772 727.542 cv
673.592 726.983 674.93 725.309 674.93 723.301 cv
cp
f
549.643 762.372 mo
549.643 763.379 548.818 764.207 547.808 764.207 cv
546.797 764.207 545.971 763.379 545.971 762.372 cv
545.971 761.358 546.797 760.537 547.808 760.537 cv
548.818 760.537 549.643 761.358 549.643 762.372 cv
cp
486.473 749.523 mo
486.473 748.51 487.297 747.694 488.308 747.694 cv
489.32 747.694 490.145 748.51 490.145 749.523 cv
490.145 750.538 489.32 751.362 488.308 751.362 cv
487.297 751.362 486.473 750.538 486.473 749.523 cv
cp
385.1 751.362 mo
384.085 751.362 383.269 750.538 383.269 749.523 cv
383.269 748.51 384.085 747.694 385.1 747.694 cv
386.11 747.694 386.935 748.51 386.935 749.523 cv
386.935 750.538 386.11 751.362 385.1 751.362 cv
cp
613.335 754.508 mo
614.342 754.508 615.166 755.329 615.166 756.343 cv
615.166 757.354 614.342 758.175 613.335 758.175 cv
612.32 758.175 611.5 757.354 611.5 756.343 cv
611.5 755.329 612.32 754.508 613.335 754.508 cv
cp
613.335 760.8 mo
615.789 760.8 617.787 758.798 617.787 756.343 cv
617.787 753.881 615.789 751.887 613.335 751.887 cv
611.032 751.887 609.163 753.638 608.924 755.876 cv
596.66 755.876 491.431 755.876 489.518 755.876 cv
489.518 755.249 489.518 754.425 489.518 753.792 cv
491.387 753.266 492.762 751.563 492.762 749.523 cv
492.762 747.073 490.768 745.071 488.308 745.071 cv
486.133 745.071 484.321 746.643 483.933 748.709 cv
389.474 748.709 li
389.088 746.643 387.28 745.071 385.1 745.071 cv
382.645 745.071 380.647 747.073 380.647 749.523 cv
380.647 751.989 382.645 753.983 385.1 753.983 cv
387.119 753.983 388.811 752.624 389.354 750.781 cv
484.053 750.781 li
484.522 752.357 485.817 753.577 487.447 753.894 cv
487.447 757.944 li
547.519 757.944 li
545.197 758.099 543.352 760.011 543.352 762.372 cv
543.352 764.826 545.352 766.827 547.808 766.827 cv
550.262 766.827 552.26 764.826 552.26 762.372 cv
552.26 760.011 550.414 758.099 548.097 757.944 cv
609.188 757.944 li
609.832 759.61 611.44 760.8 613.335 760.8 cv
cp
f
734.693 736.685 mo
734.693 735.67 735.518 734.846 736.528 734.846 cv
737.539 734.846 738.363 735.67 738.363 736.685 cv
738.363 737.695 737.539 738.518 736.528 738.518 cv
735.518 738.518 734.693 737.695 734.693 736.685 cv
cp
740.98 736.685 mo
740.98 734.229 738.982 732.227 736.528 732.227 cv
734.07 732.227 732.074 734.229 732.074 736.685 cv
732.074 739.141 734.07 741.143 736.528 741.143 cv
738.982 741.143 740.98 739.141 740.98 736.685 cv
cp
f
778.204 722.138 mo
779.215 722.138 780.035 722.96 780.035 723.975 cv
780.035 724.981 779.215 725.81 778.204 725.81 cv
777.193 725.81 776.365 724.981 776.365 723.975 cv
776.365 722.96 777.193 722.138 778.204 722.138 cv
cp
878.322 722.138 mo
879.333 722.138 880.157 722.96 880.157 723.975 cv
880.157 724.981 879.333 725.81 878.322 725.81 cv
877.31 725.81 876.487 724.981 876.487 723.975 cv
876.487 722.96 877.31 722.138 878.322 722.138 cv
cp
778.204 728.428 mo
780.302 728.428 782.057 726.965 782.526 725.008 cv
873.999 725.008 li
874.47 726.965 876.218 728.428 878.322 728.428 cv
880.78 728.428 882.774 726.429 882.774 723.975 cv
882.774 721.517 880.78 719.517 878.322 719.517 cv
876.218 719.517 874.47 720.983 873.999 722.934 cv
782.526 722.934 li
782.053 720.983 780.302 719.517 778.204 719.517 cv
775.742 719.517 773.746 721.517 773.746 723.975 cv
773.746 726.429 775.742 728.428 778.204 728.428 cv
cp
f
891.163 708.638 mo
892.174 708.638 892.998 709.462 892.998 710.473 cv
892.998 711.483 892.174 712.31 891.163 712.31 cv
890.152 712.31 889.332 711.483 889.332 710.473 cv
889.332 709.462 890.152 708.638 891.163 708.638 cv
cp
891.163 714.931 mo
893.621 714.931 895.618 712.931 895.618 710.473 cv
895.618 708.015 893.621 706.017 891.163 706.017 cv
888.709 706.017 886.711 708.015 886.711 710.473 cv
886.711 712.931 888.709 714.931 891.163 714.931 cv
cp
f
914.493 708.638 mo
915.5 708.638 916.324 709.462 916.324 710.473 cv
916.324 711.483 915.5 712.31 914.493 712.31 cv
913.483 712.31 912.658 711.483 912.658 710.473 cv
912.658 709.462 913.483 708.638 914.493 708.638 cv
cp
914.493 714.931 mo
916.947 714.931 918.946 712.931 918.946 710.473 cv
918.946 708.015 916.947 706.017 914.493 706.017 cv
912.035 706.017 910.035 708.015 910.035 710.473 cv
910.035 712.931 912.035 714.931 914.493 714.931 cv
cp
f
936.243 789.631 mo
936.243 788.616 937.068 787.796 938.082 787.796 cv
939.093 787.796 939.913 788.616 939.913 789.631 cv
939.913 790.638 939.093 791.466 938.082 791.466 cv
937.068 791.466 936.243 790.638 936.243 789.631 cv
cp
942.535 789.631 mo
942.535 787.173 940.536 785.173 938.082 785.173 cv
935.624 785.173 933.626 787.173 933.626 789.631 cv
933.626 792.089 935.624 794.083 938.082 794.083 cv
940.536 794.083 942.535 792.089 942.535 789.631 cv
cp
f
764.26 707.46 mo
745.392 707.46 li
745.392 709.637 li
736.534 709.637 li
736.534 709.637 724.345 722.706 723.76 723.333 cv
723.037 723.333 712.242 723.333 709.008 723.333 cv
709.008 720.821 li
690.136 720.821 li
690.136 727.118 li
709.008 727.118 li
709.008 725.399 li
724.658 725.399 li
724.658 725.399 736.852 712.329 737.436 711.704 cv
738.065 711.704 743.125 711.704 745.392 711.704 cv
745.392 713.751 li
764.26 713.751 li
764.26 707.46 li
cp
f
764.26 720.821 mo
745.392 720.821 li
745.392 722.805 li
734.374 722.805 li
734.374 722.805 723.163 734.768 722.578 735.388 cv
721.894 735.388 712.511 735.388 709.008 735.388 cv
709.008 733.408 li
690.136 733.408 li
690.136 739.699 li
709.008 739.699 li
709.008 737.452 li
723.478 737.452 li
723.478 737.452 734.689 725.494 735.271 724.871 cv
735.939 724.871 742.817 724.871 745.392 724.871 cv
745.392 727.118 li
764.26 727.118 li
764.26 720.821 li
cp
f
764.26 733.668 mo
745.392 733.668 li
745.392 739.958 li
764.26 739.958 li
764.26 733.668 li
cp
f
731.021 749.554 mo
730.009 749.554 729.185 748.731 729.185 747.719 cv
729.185 746.707 730.009 745.884 731.021 745.884 cv
732.034 745.884 732.858 746.707 732.858 747.719 cv
732.858 748.731 732.034 749.554 731.021 749.554 cv
cp
764.26 750.474 mo
764.26 744.183 li
745.392 744.183 li
745.392 746.643 li
735.332 746.643 li
734.846 744.703 733.107 743.263 731.021 743.263 cv
728.565 743.263 726.567 745.261 726.567 747.719 cv
726.567 750.175 728.565 752.176 731.021 752.176 cv
733.14 752.176 734.906 750.69 735.36 748.709 cv
745.392 748.709 li
745.392 750.474 li
764.26 750.474 li
cp
f
745.392 787.155 mo
719.584 787.155 li
719.584 787.155 712.628 794.11 712.073 794.669 cv
711.241 794.669 682.284 794.669 682.284 794.669 cv
682.284 794.669 682.284 826.45 682.284 828.396 cv
680.563 828.396 670.403 828.396 670.403 828.396 cv
670.403 836.071 li
667.769 836.071 li
667.769 857.384 li
674.759 857.384 li
674.759 836.071 li
672.47 836.071 li
672.47 834.415 672.47 831.547 672.47 830.462 cv
674.196 830.462 684.355 830.462 684.355 830.462 cv
684.355 830.462 684.355 798.681 684.355 796.739 cv
686.277 796.739 712.928 796.739 712.928 796.739 cv
712.928 796.739 719.883 789.781 720.441 789.225 cv
721.167 789.225 740.392 789.225 745.392 789.225 cv
745.392 791.597 li
764.26 791.597 li
764.26 785.304 li
745.392 785.304 li
745.392 787.155 li
cp
f
470.222 771.021 mo
469.212 771.021 468.387 770.196 468.387 769.183 cv
468.387 768.174 469.212 767.352 470.222 767.352 cv
471.233 767.352 472.057 768.174 472.057 769.183 cv
472.057 770.196 471.233 771.021 470.222 771.021 cv
cp
965.291 805.227 mo
965.291 798.935 li
946.419 798.935 li
946.419 801.595 li
936.669 801.595 805.565 801.595 804.741 801.595 cv
804.152 800.975 784.756 780.733 784.756 780.733 cv
784.756 780.733 672.144 780.733 671.298 780.733 cv
670.766 780.201 666.45 775.882 666.45 775.882 cv
666.45 775.882 604.277 775.882 603.449 775.882 cv
602.894 775.323 596.025 768.458 596.025 768.458 cv
474.606 768.458 li
474.257 766.35 472.434 764.727 470.222 764.727 cv
467.768 764.727 465.766 766.726 465.766 769.183 cv
465.766 771.644 467.768 773.644 470.222 773.644 cv
472.209 773.644 473.877 772.326 474.449 770.529 cv
485.905 770.529 594.362 770.529 595.167 770.529 cv
595.726 771.082 602.599 777.952 602.599 777.952 cv
602.599 777.952 664.765 777.952 665.592 777.952 cv
666.127 778.482 670.442 782.8 670.442 782.8 cv
670.442 782.8 783.001 782.8 783.873 782.8 cv
784.467 783.417 803.859 803.661 803.859 803.661 cv
946.419 803.661 li
946.419 805.227 li
965.291 805.227 li
cp
f
965.291 786.877 mo
946.419 786.877 li
946.419 793.172 li
965.291 793.172 li
965.291 786.877 li
cp
f
860.501 778.488 mo
859.486 778.488 858.662 777.668 858.662 776.653 cv
858.662 775.646 859.486 774.82 860.501 774.82 cv
861.508 774.82 862.334 775.646 862.334 776.653 cv
862.334 777.668 861.508 778.488 860.501 778.488 cv
cp
965.291 773.508 mo
946.419 773.508 li
946.419 775.974 li
864.889 775.974 li
864.555 773.842 862.723 772.198 860.501 772.198 cv
858.274 772.198 856.445 773.842 856.112 775.974 cv
764.26 775.974 li
764.26 771.935 li
745.392 771.935 li
745.392 778.229 li
764.26 778.229 li
764.26 778.044 li
856.283 778.044 li
856.876 779.817 858.529 781.109 860.501 781.109 cv
862.469 781.109 864.125 779.817 864.71 778.044 cv
946.419 778.044 li
946.419 779.805 li
965.291 779.805 li
965.291 773.508 li
cp
f
965.291 760.139 mo
946.419 760.139 li
946.419 762.822 li
772.836 762.822 li
772.836 762.822 766.963 768.694 766.416 769.243 cv
765.576 769.243 719.322 769.243 719.322 769.243 cv
719.322 769.243 712.803 775.765 712.244 776.319 cv
711.811 776.319 710.208 776.319 709.008 776.319 cv
709.008 773.508 li
690.136 773.508 li
690.136 779.805 li
709.008 779.805 li
709.008 778.394 li
713.102 778.394 li
713.102 778.394 719.622 771.868 720.181 771.313 cv
721.022 771.313 767.271 771.313 767.271 771.313 cv
767.271 771.313 773.146 765.442 773.691 764.892 cv
774.508 764.892 936.088 764.892 946.419 764.892 cv
946.419 766.435 li
965.291 766.435 li
965.291 760.139 li
cp
f
965.291 747.037 mo
946.419 747.037 li
946.419 753.327 li
965.291 753.327 li
965.291 747.037 li
cp
f
965.291 734.19 mo
946.419 734.19 li
946.419 740.483 li
965.291 740.483 li
965.291 734.19 li
cp
f
965.291 720.821 mo
946.419 720.821 li
946.419 727.118 li
965.291 727.118 li
965.291 720.821 li
cp
f
965.291 707.198 mo
946.419 707.198 li
946.419 713.487 li
965.291 713.487 li
965.291 707.198 li
cp
f
770.86 802.21 mo
770.86 801.195 771.685 800.375 772.699 800.375 cv
773.71 800.375 774.53 801.195 774.53 802.21 cv
774.53 803.224 773.71 804.045 772.699 804.045 cv
771.685 804.045 770.86 803.224 770.86 802.21 cv
cp
690.136 812.568 mo
690.136 818.854 li
709.008 818.854 li
709.008 817.007 li
731.274 817.007 li
731.274 817.007 738.232 810.049 738.787 809.492 cv
739.56 809.492 767.449 809.492 771.837 809.492 cv
771.837 814.261 771.837 822.053 771.837 822.618 cv
771.326 823.126 767.445 827.009 766.94 827.519 cv
766.503 827.519 765.174 827.519 764.26 827.519 cv
764.26 825.148 li
745.392 825.148 li
745.392 831.433 li
764.26 831.433 li
764.26 829.586 li
767.793 829.586 li
773.907 823.479 li
773.907 806.477 li
775.773 805.948 777.152 804.244 777.152 802.21 cv
777.152 799.752 775.153 797.755 772.699 797.755 cv
770.614 797.755 768.874 799.199 768.392 801.135 cv
764.26 801.135 li
764.26 798.935 li
745.392 798.935 li
745.392 805.227 li
764.26 805.227 li
764.26 803.205 li
768.361 803.205 li
768.748 804.905 770.112 806.24 771.837 806.579 cv
771.837 806.81 771.837 807.096 771.837 807.422 cv
737.934 807.422 li
737.934 807.422 730.977 814.378 730.419 814.937 cv
729.719 814.937 713.853 814.937 709.008 814.937 cv
709.008 812.568 li
690.136 812.568 li
cp
f
926.81 708.638 mo
927.822 708.638 928.645 709.462 928.645 710.473 cv
928.645 711.483 927.822 712.31 926.81 712.31 cv
925.798 712.31 924.974 711.483 924.974 710.473 cv
924.974 709.462 925.798 708.638 926.81 708.638 cv
cp
905.406 701.868 mo
905.406 680.551 li
899.295 680.551 li
899.295 701.868 li
901.576 701.868 li
901.576 718.548 li
907.682 724.658 li
921.151 724.658 li
927.54 719.438 li
927.54 714.856 li
929.652 714.5 931.267 712.678 931.267 710.473 cv
931.267 708.015 929.269 706.017 926.81 706.017 cv
924.354 706.017 922.353 708.015 922.353 710.473 cv
922.353 712.46 923.67 714.128 925.473 714.701 cv
925.473 715.841 925.473 717.889 925.473 718.462 cv
924.846 718.968 920.894 722.196 920.412 722.588 cv
919.744 722.588 909.315 722.588 908.544 722.588 cv
908.035 722.081 904.15 718.196 903.644 717.691 cv
903.644 717.003 903.644 705.446 903.644 701.868 cv
905.406 701.868 li
cp
f
775.933 701.868 mo
775.933 680.551 li
769.816 680.551 li
769.816 690.041 li
741.209 690.041 li
741.209 690.041 722.466 708.79 721.879 709.373 cv
721.204 709.373 711.975 709.373 709.008 709.373 cv
709.008 707.46 li
690.136 707.46 li
690.136 713.751 li
709.008 713.751 li
709.008 711.44 li
722.735 711.44 li
722.735 711.44 741.478 692.698 742.067 692.115 cv
742.795 692.115 764.488 692.115 769.816 692.115 cv
769.816 701.868 li
775.933 701.868 li
cp
f
497.568 707.46 mo
497.568 709.438 li
330.769 709.438 li
330.769 709.438 325.814 715.099 325.266 715.731 cv
324.618 715.731 317.832 715.731 314.375 715.731 cv
314.375 717.8 li
326.202 717.8 li
326.202 717.8 331.156 712.137 331.707 711.506 cv
332.581 711.506 487.461 711.506 497.568 711.506 cv
497.568 713.576 li
516.792 713.576 li
516.792 707.46 li
497.568 707.46 li
cp
f
542.041 720.694 mo
543.055 720.694 543.876 721.523 543.876 722.531 cv
543.876 723.544 543.055 724.366 542.041 724.366 cv
541.03 724.366 540.206 723.544 540.206 722.531 cv
540.206 721.523 541.03 720.694 542.041 720.694 cv
cp
497.568 719.475 mo
497.568 725.589 li
516.792 725.589 li
516.792 723.565 li
537.717 723.565 li
538.185 725.521 539.94 726.983 542.041 726.983 cv
544.495 726.983 546.497 724.989 546.497 722.531 cv
546.497 720.075 544.495 718.075 542.041 718.075 cv
539.94 718.075 538.188 719.539 537.717 721.498 cv
516.792 721.498 li
516.792 719.475 li
497.568 719.475 li
cp
f
583.451 734.327 mo
584.461 734.327 585.288 735.148 585.288 736.158 cv
585.288 737.169 584.461 737.993 583.451 737.993 cv
582.44 737.993 581.616 737.169 581.616 736.158 cv
581.616 735.148 582.44 734.327 583.451 734.327 cv
cp
908.198 755.03 mo
909.213 755.03 910.035 755.854 910.035 756.867 cv
910.035 757.878 909.213 758.702 908.198 758.702 cv
907.188 758.702 906.367 757.878 906.367 756.867 cv
906.367 755.854 907.188 755.03 908.198 755.03 cv
cp
736.528 764.47 mo
735.518 764.47 734.693 763.646 734.693 762.637 cv
734.693 761.622 735.518 760.8 736.528 760.8 cv
737.539 760.8 738.363 761.622 738.363 762.637 cv
738.363 763.646 737.539 764.47 736.528 764.47 cv
cp
516.792 732.273 mo
497.568 732.273 li
497.568 738.389 li
516.792 738.389 li
516.792 736.977 li
579.078 736.977 li
579.462 739.042 581.277 740.615 583.451 740.615 cv
585.57 740.615 587.334 739.133 587.787 737.154 cv
591.898 737.154 617.244 737.154 619.025 737.154 cv
619.025 739.026 619.025 758.471 619.025 758.471 cv
690.136 758.471 li
690.136 765.909 li
709.008 765.909 li
709.008 758.471 li
734.985 758.471 li
733.287 759.1 732.074 760.72 732.074 762.637 cv
732.074 765.091 734.07 767.083 736.528 767.083 cv
738.982 767.083 740.98 765.091 740.98 762.637 cv
740.98 760.72 739.765 759.1 738.066 758.471 cv
745.392 758.471 li
745.392 765.909 li
764.26 765.909 li
764.26 758.292 li
904.002 758.292 li
904.601 760.049 906.246 761.324 908.198 761.324 cv
910.66 761.324 912.658 759.321 912.658 756.867 cv
912.658 754.409 910.66 752.409 908.198 752.409 cv
905.965 752.409 904.126 754.075 903.81 756.226 cv
764.26 756.226 li
764.26 754.375 li
745.392 754.375 li
745.392 756.4 li
709.008 756.4 li
709.008 754.375 li
690.136 754.375 li
690.136 756.4 li
684.969 756.4 622.806 756.4 621.093 756.4 cv
621.093 754.531 621.093 735.083 621.093 735.083 cv
587.763 735.083 li
587.276 733.146 585.535 731.708 583.451 731.708 cv
581.434 731.708 579.743 733.063 579.199 734.91 cv
516.792 734.91 li
516.792 732.273 li
cp
f
596.296 741.143 mo
597.31 741.143 598.131 741.96 598.131 742.974 cv
598.131 743.984 597.31 744.808 596.296 744.808 cv
595.285 744.808 594.461 743.984 594.461 742.974 cv
594.461 741.96 595.285 741.143 596.296 741.143 cv
cp
497.568 746.253 mo
497.568 752.367 li
516.792 752.367 li
516.792 750.428 li
518.79 750.428 li
518.79 750.428 523.756 745.468 524.295 744.929 cv
525.101 744.929 586.237 744.929 592.31 744.929 cv
593.036 746.404 594.542 747.431 596.296 747.431 cv
598.754 747.431 600.752 745.429 600.752 742.974 cv
600.752 740.519 598.754 738.518 596.296 738.518 cv
593.879 738.518 591.915 740.455 591.854 742.86 cv
523.436 742.86 li
523.436 742.86 518.473 747.823 517.935 748.361 cv
517.673 748.361 517.217 748.361 516.792 748.361 cv
516.792 746.253 li
497.568 746.253 li
cp
f
516.792 765.127 mo
516.792 759.01 li
497.568 759.01 li
497.568 765.127 li
516.792 765.127 li
cp
f
595.509 780.722 mo
596.523 780.722 597.348 781.543 597.348 782.552 cv
597.348 783.563 596.523 784.39 595.509 784.39 cv
594.499 784.39 593.676 783.563 593.676 782.552 cv
593.676 781.543 594.499 780.722 595.509 780.722 cv
cp
497.568 773.508 mo
497.568 779.624 li
516.792 779.624 li
516.792 777.166 li
527.388 777.166 588.279 777.166 589.051 777.166 cv
589.404 777.519 590.948 779.062 591.875 779.99 cv
591.358 780.722 591.053 781.598 591.053 782.552 cv
591.053 785.009 593.051 787.012 595.509 787.012 cv
597.967 787.012 599.966 785.009 599.966 782.552 cv
599.966 780.093 597.967 778.097 595.509 778.097 cv
594.761 778.097 594.061 778.302 593.438 778.629 cv
589.909 775.1 li
516.792 775.1 li
516.792 773.508 li
497.568 773.508 li
cp
f
530.769 786.223 mo
531.779 786.223 532.605 787.044 532.605 788.058 cv
532.605 789.072 531.779 789.89 530.769 789.89 cv
529.758 789.89 528.938 789.072 528.938 788.058 cv
528.938 787.044 529.758 786.223 530.769 786.223 cv
cp
497.568 792.203 mo
516.792 792.203 li
516.792 789.745 li
526.65 789.745 li
527.319 791.367 528.911 792.515 530.769 792.515 cv
533.225 792.515 535.225 790.517 535.225 788.058 cv
535.225 785.6 533.225 783.604 530.769 783.604 cv
528.443 783.604 526.548 785.4 526.351 787.677 cv
516.792 787.677 li
516.792 786.09 li
497.568 786.09 li
497.568 792.203 li
cp
f
553.833 786.485 mo
554.844 786.485 555.668 787.306 555.668 788.316 cv
555.668 789.329 554.844 790.153 553.833 790.153 cv
552.822 790.153 552.002 789.329 552.002 788.316 cv
552.002 787.306 552.822 786.485 553.833 786.485 cv
cp
497.568 805.135 mo
516.792 805.135 li
516.792 803.376 li
518.268 803.376 li
518.268 803.376 524.355 797.286 524.906 796.739 cv
525.731 796.739 547.973 796.739 547.973 796.739 cv
552.241 792.467 li
552.739 792.655 553.271 792.774 553.833 792.774 cv
556.291 792.774 558.289 790.778 558.289 788.316 cv
558.289 785.862 556.291 783.864 553.833 783.864 cv
551.379 783.864 549.379 785.862 549.379 788.316 cv
549.379 789.452 549.817 790.481 550.519 791.267 cv
549.629 792.159 547.522 794.262 547.112 794.669 cv
546.292 794.669 524.05 794.669 524.05 794.669 cv
524.05 794.669 517.962 800.753 517.411 801.308 cv
517.253 801.308 517.029 801.308 516.792 801.308 cv
516.792 799.019 li
497.568 799.019 li
497.568 805.135 li
cp
f
339.393 761.807 mo
339.393 742.248 li
314.375 742.248 li
314.375 744.319 li
320.948 744.319 335.84 744.319 337.326 744.319 cv
337.326 745.835 337.326 757.514 337.326 761.807 cv
331.895 761.807 li
331.895 775.606 li
344.825 775.606 li
344.825 761.807 li
339.393 761.807 li
cp
f
354.085 775.606 mo
367.018 775.606 li
367.018 761.807 li
354.085 761.807 li
354.085 775.606 li
cp
f
569.041 667.97 mo
569.041 689.289 li
570.621 689.289 li
570.621 689.812 570.621 690.364 570.621 690.649 cv
570.063 691.211 560.322 700.952 559.764 701.511 cv
558.966 701.511 547.643 701.511 547.643 701.511 cv
547.643 701.511 534.36 714.788 533.783 715.37 cv
532.931 715.37 336.444 715.37 336.444 715.37 cv
336.444 715.37 329.418 722.394 328.861 722.953 cv
328.249 722.953 318.963 722.953 314.375 722.953 cv
314.375 725.023 li
329.72 725.023 li
329.72 725.023 336.745 717.995 337.303 717.44 cv
338.154 717.44 534.636 717.44 534.636 717.44 cv
534.636 717.44 547.918 704.158 548.493 703.577 cv
549.293 703.577 560.62 703.577 560.62 703.577 cv
572.691 691.504 li
572.691 689.289 li
575.157 689.289 li
575.157 667.97 li
569.041 667.97 li
cp
f
718.885 800.61 mo
718.235 800.61 711.446 800.61 709.008 800.61 cv
709.008 798.673 li
690.136 798.673 li
690.136 804.964 li
709.008 804.964 li
709.008 802.677 li
719.744 802.677 li
719.744 802.677 724.618 797.803 725.157 797.262 cv
725.989 797.262 781.472 797.262 783.459 797.262 cv
783.459 799.142 783.459 821.559 783.459 822.358 cv
782.881 822.934 765.853 839.962 765.276 840.539 cv
765.06 840.539 764.672 840.539 764.26 840.539 cv
764.26 837.989 li
745.392 837.989 li
745.392 844.279 li
764.26 844.279 li
764.26 842.607 li
766.135 842.607 li
785.525 823.215 li
785.525 795.194 li
724.303 795.194 li
724.303 795.194 719.429 800.071 718.885 800.61 cv
cp
f
475.993 790.676 mo
474.975 790.676 474.154 789.856 474.154 788.841 cv
474.154 787.834 474.975 787.012 475.993 787.012 cv
477 787.012 477.824 787.834 477.824 788.841 cv
477.824 789.856 477 790.676 475.993 790.676 cv
cp
475.993 784.39 mo
473.531 784.39 471.533 786.387 471.533 788.841 cv
471.533 789.779 471.824 790.642 472.317 791.356 cv
471.339 792.336 469.713 793.962 469.36 794.315 cv
468.592 794.315 328.577 794.315 314.375 794.315 cv
314.375 796.386 li
470.215 796.386 li
473.868 792.736 li
474.5 793.084 475.214 793.297 475.993 793.297 cv
478.447 793.297 480.446 791.303 480.446 788.841 cv
480.446 786.387 478.447 784.39 475.993 784.39 cv
cp
f
319.313 800.944 mo
314.375 800.944 li
314.375 816.323 li
319.313 816.323 li
319.313 800.944 li
cp
f
319.14 774.56 mo
314.375 774.56 li
314.375 789.239 li
319.14 789.239 li
319.14 774.56 li
cp
f
325.778 783.951 mo
324.768 783.951 323.943 783.127 323.943 782.114 cv
323.943 781.104 324.768 780.281 325.778 780.281 cv
326.791 780.281 327.611 781.104 327.611 782.114 cv
327.611 783.127 326.791 783.951 325.778 783.951 cv
cp
326.984 777.846 mo
326.984 755.177 li
319.14 755.177 li
319.14 747.823 li
314.375 747.823 li
314.375 762.505 li
319.14 762.505 li
319.14 757.243 li
321.067 757.243 323.896 757.243 324.918 757.243 cv
324.918 758.894 324.918 774.015 324.918 777.743 cv
322.87 778.148 321.32 779.951 321.32 782.114 cv
321.32 784.572 323.32 786.572 325.778 786.572 cv
328.234 786.572 330.233 784.572 330.233 782.114 cv
330.233 780.08 328.857 778.374 326.984 777.846 cv
cp
f
362.474 725.415 mo
361.46 725.415 360.637 724.59 360.637 723.583 cv
360.637 722.569 361.46 721.741 362.474 721.741 cv
363.484 721.741 364.309 722.569 364.309 723.583 cv
364.309 724.59 363.484 725.415 362.474 725.415 cv
cp
362.474 719.123 mo
360.299 719.123 358.485 720.694 358.099 722.761 cv
343.607 722.761 li
343.607 722.761 337.607 728.766 337.06 729.316 cv
336.401 729.316 320.811 729.316 314.375 729.316 cv
314.375 731.387 li
337.915 731.387 li
337.915 731.387 343.914 725.382 344.464 724.827 cv
345.19 724.827 355.983 724.827 358.217 724.827 cv
358.764 726.676 360.451 728.036 362.474 728.036 cv
364.932 728.036 366.928 726.034 366.928 723.583 cv
366.928 721.125 364.932 719.123 362.474 719.123 cv
cp
f
536.014 731.182 mo
534.999 731.182 534.177 730.361 534.177 729.347 cv
534.177 728.332 534.999 727.51 536.014 727.51 cv
537.023 727.51 537.847 728.332 537.847 729.347 cv
537.847 730.361 537.023 731.182 536.014 731.182 cv
cp
536.014 724.891 mo
534.055 724.891 532.41 726.163 531.813 727.914 cv
494.694 727.914 li
494.694 727.914 488.606 734.008 488.055 734.558 cv
487.276 734.558 329.207 734.558 314.375 734.558 cv
314.375 736.626 li
488.914 736.626 li
488.914 736.626 495 730.54 495.551 729.989 cv
496.318 729.989 526.602 729.989 531.62 729.989 cv
531.935 732.137 533.773 733.799 536.014 733.799 cv
538.47 733.799 540.468 731.805 540.468 729.347 cv
540.468 726.889 538.47 724.891 536.014 724.891 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.1.0
%%For: (user) ()
%%Title: (plata_51.eps)
%%CreationDate: 4/12/2016 2:17 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Bj4fPdOoo2n*B9=i62bJ=n;V=_#kr.:*;eE1GSS)*'D2-G@uDMIf$)oBh>]p^gcd#m@jLHpZY%_CR%jsWDll\8e3!(>Q&0A
%f"B)5r`mbdR5NGKN"#[*q!DE!*k\Qp7,8g)'O-iO,AQrG40;-)m1rmu<i<R$.JtYS1N1DPn4Pe50rii0Iq8-CEodYBamH[;410CA
%e*8d4]o8:8#ddClj7cjS$4,SIK_q[Z%=eq`?4WJ*[&Mo7(O9=52@]\qo_BW@W-*HXEj+&/IU0sf\Qr!m5)e3,nH0>,c^=4:-292n
%N6]WFH;E%YdA>dIhJrflXCV%YLihl3%k9@!Itmlnpm2jH+TC8eM>t=C2Z+BjD.W'm,O3t>04Grf.,Ys\a+^-;q11P*!?t1d8F40f
%W6qc7HP$^QB,Fc1ZR5Ynrf=QCMua[#%4ga03t9BSL1)D7rN'MF^\oj%g9Rq(kNMYDoZ):?AQ5g%*BBY#:@GF\D\tAY*V+u<IQcu/
%Dq96]Eunb`(lL>TC/fuZR_V\39V]cJV>n[N8*/#be,t8<eb_<?l^:#go![F(Q%)4NGc%QQY8oK]>0#,li5B[mVAZr_,AY3sQN:.c
%N+Z;`OSJqT*7maa.k)\\,SH=8EKp/_*;;M%Mct2X$DHLsd$'XhU/S+-61q?R+T=a(ZN9s<0`F;i?JrQLMjc@&VKH'e_aNA&^,a-3
%\!to7X+:B#`II#9fUFQ*lE(HiX8WA&"sj%^aU8-IDd2]sXbh^\qq#'B>B%/\n&(2>3j!jX[s?j,m9`MsC?mFn5dNLK7f9if=e^Dc
%s)5>NCG4T74\RGpjdL]b\!t-&oi@Oo(?Nt@gom'6j\CPZ:]sG!hr0nWYbap#_5R)O'hoP"G#[]<'e2")s-a#UV_hBo6d\p>k"7M;
%GP2.<!@14NAWAh5$4I:@]3ari$>Xdid@\fD,eLa=007nAJ,]R64)C660OhG9*W?)'XBpMcH<BF]c;M'O<,2su7p*=NqkM]P_M2'c
%ZI[fFL`Tkk]uoFZ=c*,:K_N['93>&cB!n[/8c2L[!(qs\dSMKZTuScHjn<8fP0%qEh94#>X&W6N8,TN)ikNl:pgm&UH;UTNf+e,k
%f.%.:<XAP"Ho&aLWNSeA"@(10/TJgI=)0K?a!cd[b8gLY#+7-pc;Fu/iNL7(X'Y*M'QoH&_p#)[lI"RoDD+VY2%M4e\5@[=r(6RF
%KQ#C6IsWcCmnWS1^,r;o@FPg7j[M?2<uPq2@t.g#Jo8dPp1q?4:[hD[NQ,kun?Ui0W12h1LRP#c$EG^b7G$+.>[L2mr-3Ja!jl2C
%c))lRn'!ijlbf4?>HiqImp`DN##;`#l\;#i1/!*Tl:q%n%=/UGLX#p;\-`C\SPFI79]`Q\YBHWeQ*<#>G%%dX5N70=^Q<=-EQL%r
%#KrM_LHr4lOY$-O\_`[L/u..>AT(8QB"9(B5mu\(X&I9g+"0E(\<5l"`Cq1Nr_1/JT@;'%Y7rPcRN)^Gh:#WBI9A`kDe>hH9u.2Q
%RM7P0Z:(+YIksm`Uq=^S9>Ol-oP-EfVG/H3qOKG3At,(Lk2$\Wh:O<:pd>s6[LRXAYXr_EVb?,*?BAd'';[(qS96Vhc$j0+dOY?h
%MCDkV@VR]7\2Ua:<piF=S`j].6oBr:*@O-$k&>Y&bZlO\p?QEdNjrIhAM^L6k&kOT=\2(Q2^o3ek3IAC,(kJ*qFsYlg(B#g;@JF8
%3[lL>D"TlTk_8NU;lnd7peS!Hc"We-[H9GkR,l/Rpj=5,X@ll&MWs[j[=X@&RiCjm(nG:t(9ZF,ZEnN3VMU"0ETN^E/,.A/jj#r!
%YiY1h>IEn9R@=4i0#bc!6"_f=jCmMq/UY*_0=UH4(;AS@QUBrVR4ho"'g"52bH4ogi6A*.@f$&6I.Vbb5J/OK>CZS$)g&FMmtd6l
%SD6,,-W>6lh-RK+rEc6t]W%D@?@5XuS^mVt<iR%GRU;<Vh/9@Mb`Cq)]'\Voi`8dKeuKJ6lY1T7UXcCY<9reGa4+n.f(jSMl<Q1b
%ApCKI&T9HcbNigKj(Z47>poI.EkL:m=D**5e&2H%\VV3X.6)$3Q%$F%.C>Q"?FcInk_;<i(k5#$#.OVK\!k^H(t>0OMSU"I5.^^<
%H+=P.<m'YP1/WFme,LpV:f-l^j$`0^T[9T2S$';VO^_'\]/OOEWS!SYIi+^P<,DIo"WRK5\;dcNW\o."F:k\+^TSN1Ec!3r]4!%G
%T"3Sg8?I]GIS%(]aQ>C-!n0:fZf^l7DO4ke1dDDoi$s_&>tn/&ddUYBiPD**%k3h-X)UFq":re"o.Y'`&j2PFj.Y8-oe%1\0?o7B
%9Wa9F[TS';Q%&#M`d4aW\I012j+#VTe$c^A-IR71q)6=qI1p`U,4*F>[!'kn[.t]&^U4f7;a-+<4sS`8kNS4lRt?u@%r8&*Y:0us
%k&sN.X]@UBM5#KtfVi$0gR*bC)eM"I[I-f#>3i*NOgs>fI*FY_gM.2H%F1fR4>4b:;XcAUDWR?gVgXDI%T=oV;s8t[QPrM<B47LR
%VK:`m^%.W0CLf6(][#X_iRQXe*/L/@q40j@Ao3.Gn1!!M]GQ-a_Ub0%I?dFh:A\:glP'LO:?]u2MLlO`B1>f6UeqN+[d_LcJqC=K
%LNI-";]hgf*[k9ZS'@m\(tIk*J2FkA6_@&0^KcYeKA5uVr5kc09-JrDZr\e*I(*Q+Ckbp?g[q--8Yb!OD7(hD]'XgS'&d=WDp%I8
%>]L`o+I?Q<D)OMIH,s?j?ae)crFmVX]U;q!1QAX[(S#+10`A"4L%ro]NY>3R?)JsF>JH`*E(d*8-)At)dlokA>f!#RUa7H8m%8=a
%ofV>EUiUjV/^9-CqW%jh?>E$l'IT6`af43.N[Ygn746&R-R+cIB!0;,C(6g-9>QlG3[q5#X_&K;.[>IXJ'C0$Jgj`F;J`2VLRc&f
%o!cQWboA(R:Q!87rK$NQEAhQ0L\Al]PY+o>S.nUF<eOd0NAoCVlK.lTdqY]+i`'`'A!'*bWbE)eM,G#Y$<+0K(1!`A!bJp!H5>US
%XcZ3fYPqfZR"N=nQ+8l2&hHeP9SJ+b7[dp@I'GYf1/7;laul1^8YpO,IBLoh8X)'Rn7M/<arEWoQprgSg<qe;B2L.:ZRFin>+A%W
%?h'K"240N4.!&fSUpAmTs"$b\eM_3Dc/L:s[.ub(Go"Bs#Fn4SAbf$5Wa;2aR6(:IR>8*sWV"oOc]396MipQHAo6-!Q+JlZGbugQ
%f!r\PS)d\sG4N:FB*fA!0me`tAnN7celGJM"`osD0XlC4UjOYiIrQ$B(>#`H_3S6GoJ;h:ErO(sfFq8d\'$P5ctg,<CYhC]V<EMb
%?<cX$KjL5T]sc_tA7;XcQammjTJ!V*6EC'k[G&K"Rk%ucU"'o^m2rI\pl<_c?[U(,(6r*]0)0@/1M:G)E&!>i5E5T[1eQ.!MeTPc
%7YB0'^\2;>hliArS^,,i9\7@q.1Ys+;*7BlSr]/-'N^4%Ki3"j-Yg$.k51ORj=RcO2*.oua$75)3"a]$b.V8a,QOq4Ufcrk0f.)!
%Cb>5+/Fq6e4`&rMr>/%>7Oa?(-`&QHU_*@BAjVp0OCZQEbK-&'r7B$*s)#R/nGdCA&"12q7`FFNOP=;nR5WOX/DUujdr*sef<]r+
%"+P`VL$bL[N.4/8`LQ>+Uf;*XXp/dWFYs'kP?X#iWsc)r?@U`5T4(/bLq0!H/W_0rGEkY5XsPQ(Bm:J=$n/rE4[C_D"V9Ye`=b9m
%e'5e?YtFLn:=)l+e9[I@W0^!HcID-(4!d!6X(5toJ#:f<3Qt_&QS"B,\.N`(Z(7<#5`;+\o=b/c&(rNNqnEFI(]1rlHY0P_4$h&3
%nLhpms*(aJ]@d.s,tj0phl5B1-"@=,J1Y7UV;\i7o:<2SO_Hc<(ONlS4l8h"4D'&g[otjXn#(G[A*VT0l58bob'_p"dZ`\U=&cB4
%rj\B(HL9^t#6i[.QpNV5GCpu2nZYS&/[UsS?oHJILS6@JB)e[Rk5ERcpk<FY10K"9[JA<*[]-[l5NR1F7>,Ih+e'<IM[7uE7EA@E
%*/cN(1ks*f&&q@KQqUWX)],%nC2SQ='lCb?<P)p]r*F0hUY\HfWc#1)jlY3Dm7$qh&h/$&6o1T!r$u?OL6\<sD?s/0<;q*DdI3'A
%=YZVgj,t&cdhHTY#F9>RRcrFhU2W(aEq,YkYtsudA@ERZ^d./>_IjtiA9&&gH3UkYCkI.[.gGYoP;BSd"nUk#U9k3;9Qe].Sd,qB
%q_;q[FV/k$"C;jpQUThD&U7F]?5A*Ys5ck,@29H"O\lsQ^FTF>;s](dYOUXcl,^^cJ@#S)h6J2ZdWq;G#h%KSR^eVU47s*[]\TBS
%ML`V%V%@6#fgM83!RmWV+q5'@A.qm]P&QP"@^9dlht$]aFIsPCJb?9Slg:$SA,!2CMrPL%ZtWke(R^Yf@rYaa@[c;q0tdX[qK;=o
%T('t*NJe3=o9Fmk(?<!I^9ktq1at0(m@GA*QE.,Pk2PWr7?XCpT(9O!B2=XECiQ"oC.s5I^WrG1TucLYXck_On`St$.h*"<?<a6m
%dlfjk?@0**cb!$bB1"&HVGt[D2Wsgja+'fon=P[-Ho_AY2DXn#=SBU!Rl_/*[#G;L9B]rOmc9HZ32mY=FOIDb8$/6Fpm*Hi.;%.)
%2[)!Om(j!sKB\ao@h;D^*n51gGt9*lLh$ACiY^MrN\Nmbc-43_JiSWsUu>_oa-^%+GLkpS,*&pa@nbXu/E.M)36$oq1!i;RPuF6U
%>52b%i1HQab*?;DrjGg"F,X7LG@SZAne5H21(V3Tb$TNABgT?H%XYTiAR(0JiAG,UUKTh2e`fKd8MQPY!EQPafRrG]HRc1CiCPb8
%A5f9u3\,ELSPJg`+#PQ_>do:Te#X?$M2$a#`'pDo7A?JEU7jE%h-;9F8u(_hH%nd@&<k?pA7SV$,1LD)1$;b>DNLB4>)bA>'G[)O
%-\$QuVo]*lDNd!BmgAt4ofHgb3bYAC$jt9cp6/HnpU#:KIq-oj8VUtuGKFV4-r&b#ce!`O<:%iMJZgo39_i\31b;?#@5#;^T8pP>
%5>*`a`J-^::?pYGQHe-,_H[>N;k2.$_&0U8^Hl\+?LrAUBAq$.QS4\#aqijhA7j$%Rp1,Y$ZBqAbtZKQ94;0Z]X`=Wk2u/XfNe;p
%.C)FeTKecpX+`XEE9A#)gqoUd\8r%%DTR"`bFM;FcA]8SCZZTrFQo0[I[BJueZ)qtb%VX(Kg.L,r`mU8bgSc,oCe24$3t4+=(5q"
%S!hSQdCSb/r%.)`7AA*sJrE-MN!UcNQqT3F%d'd9n9Y&7?EROMA-CCsQRfK#YOtkW_J\gD4\_/EQCF*iVL7!Bl;_pu5%\XMm@`C^
%j=KRo#/7sELtCG$C=CK*H!F!Ti$G%GJr)29n)^BqPB#<!>O'h;%P-X?-;C6,Uq$9]1=\hl\pW4Zm5fsBR2c'3MFUBuBVEtPpZ0d_
%GCs6rMRsQMJ%GU(H+=Qa(!:(WKa7Li;1AP06mncFjrkn4QQk6^</5t"$kTbN'@W1h$>i]?GHK7g[BZ]':=sqDejr;tdd8ZjrgaKA
%APeNtj%NWt.9=pmZ-cc,Vo,-#C_!8.eo>K7s(o05dB+88T.J4"KgG>A1l-&B'(J3/-sG7k$_-@PB+l:XI5',>dG+o=Du!`;Pcm)s
%j#Q5c+.Yj)qgUU_.2K_"2"GcH61IRb_mo=n#p/Htk$d&uKEMh2"AOpk4H(eSi5(p'&*6QgGM.dM4^]sB/*+@6GYPqG2uW&P^"1pk
%f>bgA(5q2e/$s"t*7OD]=<+5kLW/74oa5s/f>Us?_MbgAp=I;eN$'bp)k9s(kO6fPZSNYPCFa!p,3CS7c[<DU51^[/k44qIH-S*j
%A+H3/[b57T0i=\SjAP%rQjFdNAdnLM;1C%UAo?kZ1n#XA3"%NXl5-Q=n9+Jo'2:9a-0T7%S*T4jFK:8oZB"')2o^7&+e/9I)/Ji*
%>@K1<R6(#_-2tV,dmVjAqZkn!S`(h-F*G(\(5COJcCGj*,f-ScAEmh\ZN8DG+bJI.c.(&^1X19X1MKYVJP'q@F4OsNbT#('Zjre2
%I5m9K413?:iuc`._S,MCRaI[_kbOJ8Z#;o:+/]Q4-;%'9S*]d:Q%PK(,P*0k=[-D,k$?2;/AuAQ@V3p#1<WJcE!X!6GgHAf;f6d)
%e%DJ1Kebl:To[rrBiAqmhYI`'9E[N^=-L%f(SQmeUI.Q.EqT:G_td*iF`G@jml=kQ2mqS0O!$U,m@)&ZG-e1i6R'`Ckk&_m\IVXf
%7Eq:>o?g"/aaa-R?Z4]k>9JCLYP7"jHh<I-1alFBSOJroVr,23]I>e_(JuQdf;V(UDu)15IP$fMp"G+%0P&S+<ic3&rnFV]NqiFl
%E[E:U"AC)1o/Em3VL?P%\/$^Gd36u5s5,Nos4IANqY#^([p5hTL`+%@0HXX\>CSKo?T9L$5(bt^6*5P=d<Q+/6?Dk)enEY[<QN8J
%iIBis:ADR7AOI$d5?ZSI4=A4c+.d>=i"]jp^^:/@_tP1l\)7eGp+=n85:k:V6MeTB_T[cTP)2t0IJANrH3Jfs!:16[T$3\JkH@@P
%qA]?WJ5ZScY!N6TPW4OTQfeoALp;8ITC&!2;6LcBk4[,WS%p_Vac:!NfMKUF*"U^1S^9&1g!lkE#=+s:lVQLV3Y/drn8I[?j:B$(
%CVMX)o9N-"\!6gd^[&fnD)@S0=-D?:i@4C=r81$>^Xl7Ib2a*1H/1!.pY1O$$$]+!c#D9m,6+@TJl8<b%t?I^>'2+`s1#?Q5f_Ct
%)dR8[q@2q1MWGoOd=]mq0n</]s%FuW!3gTk`6[IF3@Lu[\c3D4^SmH<bL(skCX%\@Vb7Pih:(9)SaOLW[KI;a+)^_q<GT1fJ'NFC
%S^j2(Yh.,)6D5rPl!`(g97;tt]6NkrWF30fC>Nc56FhECEY[DtVMeUj(]>k<ikOr<CFut"Vs244L;Bff1F(0.:42PLY8#Q;:TkP<
%luWLnnlb4$H`b:%W5$)I7+]%^Zj(LZ"\"V];Z@R)k4%Mc>6!p^bh#h^T)UMKni[)D]N_R>k!tE#(3l]P%\e"B)OAjc5tnCgY7T"c
%F/`IkVFKc.M'pX'c$\>ll<Db%-2aj@)QOefJPur*9aOUgC\"UYFo7c;H=0g=U@[5JVfm'$*0qL!r6a#]&>U76kaA#%Sdl\@QF<c+
%7jI;aX'f32"cWiglc._\ap:QgR:E(Wl6fr"U+4=F0dCSWf&_'L1SZ-K?o%E0R8US@d4\ipRJg0uhi?f>E,OB!9V^=EAS!;\6BtTb
%UMCK@XASCl%:\FF/Y2sN(H8j0Y#YejB=H^^BjPkmR9[MYarHYX]r4m,GKc=f3EDe4$T$m>n#TOW<&9cn4_&'KF:XaKb7-@mqC(df
%9Wd'LQ[9=+MC=L(IHddZGg!4<06>NTWP2nS_b@\tN]NSGXjO?<K<JHu@?DTP#&'>bGb5o\eZ)GNna*fhm>gA_b]K)UIUgc`:8HtF
%`kK)ciEJ-jO-+&[[ON5SBqa>[^"bd#?!o#UI_QP=UX&=*js^)4QeAOmHKDJ:^"3'<2"O0CrsjuS05A@c&=m-^7<?tC_KN\N\sH"h
%C#h#S&]dG6%:\=L]md-oJro[>R^NH7WptB#`]q5:\'E.hK;dV0GK5,[e7oN<H.bnGGIlnnCTn/9DE#N8V8W#Fk/r_"NdB;1A,g+4
%dI0q\KY/7lF4G%Klh+F;b&i!$es0FpQ:rrIA9iX7X5*,<^KutJs#B9d)t</!qAuD=DY@f_BMQ+-Z6;AmK"1CReN`q-?TS=Kp3ZE5
%-IaL0a6c*<>('^UQ3JX4Qt]LboFOue\G=mZW]8pu;it>Q&#9!EEXt4+e>ec!-urTC0\SK_V4l>9ZWg+fjhDnrfOEAU`?S/Z$C;<F
%9OG6g.Fn8XlEi:Yh]:jLJ']>^?i(ji%H]JQC7-]T?TVY\HE@WK!95#JK"eaFmS`&N<n8J,Fq0Cb8J7BPI(=:JD]e]!cYJ#:-hVE#
%=-4o3kEXtX(##cVk='ODZfWZ.n%6tT\WJ`j7#bBV]%=#6C0EX%@N]HoQ4C&aM+XgINN+5A..cM:X-``Ik+W"7T9FSD\+lRJq'KIG
%ROp\tR9GdY8tJQc6hL1K<3>g49V[#A:8h>H"3^BIlBP(h>iTh,kA[TiFd@q6;(SBm'VsA$,fF;nm%2]5LC*'QN%9(I<JU%K.?7tm
%)LlcY,Wq]\E-%]=hVbKG\[0N(pAX#&H4*C'e6RZ<b5N$-7sET[@]2;4UA^T05?_^QGd.L+k$l[O*@qTl!#f$"Pj6&QeEKFS3j=_4
%rkY>bX'5B/`p)cCE\pbWHG%[ckGF5O,oA!g&WF85+ZF,?i1t\L3nnMC[k^O'4_?t!Lo)Sb;Doi?6/fIjF@V>/T5>FJ-;a!4j`XUI
%k^pZ:\=k=ll8@T4-.!V[-UiJXa]?%%\uA*l3bb?%eUG(Y4Rcc80lMh<_h@5c,I57f2\eFC2_2Jk`!S8)81KX;pKA`;ZK5[sq,Z)]
%',rLSN)uj<D.ni?l$`7ZRlQ>N5hEe&Y%GC!*M2WbIp((pDN3m.+OKP`c>1QB[78aLZ5V8^f1?iW&gg8Jna#J//nH>5^!!?qK=3e@
%obqE>@#WLYbI9,C=4oAdZs)YU=V2:(IA!k,)s,@FGGtEf*g>[^h$B<g1@+QV_i>Cilu,_)&P[DVXGj0ZgT+tfJei&-eP2h'@W>P2
%ao+).gJnrXH8Bt"g=7.A$@1/J7h'1Eh76[kZ&l%G2ASY=CQ0<#.*=p(JR`<0?sLfA+F^['6)e#i<gdbEr0+X$ef7o).,8UG=\F_n
%8p=AfY&CNmT9.8CO>0juWgU2#R:6C`Us9fc_sa'>>j6o,%eefT;E+?@+P)\^,]4eb=Dh5<?ni#,gn5jk;7C_r*#6U6Bbm5\+RHKm
%W?g)Sf+oo]KpoU#I^rleWmj+8UQ6o<YNOj;?H39d<?B'rSWLI\E2T.AF_]j-P`oj*ABAmH'/!L[Ih2<pK>ko=\NsqfMD)9e9;!gM
%++Q&)Z,Pq$ZD)MP_;B1hZs.7r/&/5a<h`EeftCFPThqpn:RFgc\:am`QeNt#6Pd=p!EuaG[W8<K(Cr0*/&5+X-uV!uXsj_khlHGB
%'ZsVIfOYol4dt%+]',S?pngBC:?sr6QHGj^;$.?eVK*]#W:e/V0bAJ.mW>WO^n`EqQ^XC:pGcM=($8.`$6+f/,XlG'Oq`Uq91I1$
%o4BX[Xl#fM7%nee]JUZ?)_BV.T;ahbNuG,QYaYp%N[f'M6auFY1<o$WN3UOk94@`&m+C_815#g>l"T!>X_o>rZ=7d[SqDXNb;)'B
%d<3-VV4o#W0[,"al0>X0UVhubUNA`q?c`SLhRXUReetd[9m9:YMkQk:Da"u(*p:k]3X3'#q_P8@8"K6BQ)&`d]`Sj8HI40CECJ*9
%RoR#r0\?NZn*sI*N#(J8i[`^p)>YgcQ\Z"(\h`eYMV@(h*/po\kg+YoVboNt"7aMlP_uB]:%=+;cb&jrT+kn<PPM8,,%0*W0CG@M
%?Iq%9NC/7cO#lBGqkfN'QDEo#][keH)F.k6r$Fj8Yn^MZ?>"T'ATu;Q*k:[Z[HN\(ej$_K:H;AA6lBs/1X[Yn^gtF5rnYd?QVfPk
%JSaQ"E\i?]^.dG'I?3]9VVK-4`O-_b7r=N'1[hqD)#i8)h^&R.C@sB"OH*#8R>Iq$r.UR_LgH<]btP5g^<<_]?d1jTMEhjMch(C3
%W"NZV'Zht?l=KMA0ANL[0rihT@X"u5=,3Hb]?MO&opV8H=k3gV!;u:ZlWcBIf$3iV=*VD+4%@Y-W;t)+:9Ar.@@A%MK,[iE/Or.L
%_i.8DiWmlM)dFI`2^?X3_4-?)?#'M\7JFV*g:c>MMMiNuC5puU\>1^61&XROEnCKm<UNgbFE+tJbX?>Q88"XO()tT-kh>._(0bG'
%[97<!j,RNR[kGU3W5A74+O.[(?2.l0hR&`Rb%7L$Ll*=aihZ++qR0Yt-H1ZL"gHhY0id)7=$+PoiaN?11pO*2h&'S?.*^3+>#Pms
%[Jb(N-<o!S!W2$[eNp2F^oGiQ:P/j$O3E<Q!H2ee<Yg+,`(ku]klC)3E\BJblo34Yj]Xe_aI?9\BIf3fgR&3%ZqZ%p*26ga:?A6J
%-_s6)S@mPLlg7CY7]'g,<gM2dm=SakB$p;ELj<*9262RA_\d<5:mIS>WDu%([*_3g%80SRlo$AeXTnS>oARrl4%B'Nb!)N?g((%r
%=G?`fFft9o7CL5BTKIpK]o/$PTZq/nISBJGIsjsQRW<eSg&_H-L5+l7^!'M<k?:Wc[CVp@(uif2[?UR0S:eY,:3-L%(>E@%.LpnD
%S).tihRN3:elUH6F`MUq445QRY1uWNlrIQ^Y+=1orlXV_4M=a^m&B'aZE,cMb)"=]OqoFqZktSk.BKUUV:.IUpIaOS;<L0m52$:U
%T$[QB0Z7[oJK6McFJJmD$0a&jLGO*do<m59boIRCG6>;[mVJ/O!Bb=mmlgT]Z?c$5d73rLl7;bjhHGB/o:g68IaPh"C?Nn-d\B.2
%SF,2-hS7k>m]CE@J+;lbo6e7DjjBR":;>fWCg1h0#H$P:1Q65A8+C'=\A,HA/c0d.F1'i[lFs]u5W)abV)t6Xe>lpTioRf#ets*$
%(2?X;<JoJrUPkhW9%Au!TjQT#YjR!ed4>4kRWgrtXl^P(;E)(3fXkC6k2#@l'V5+Kq&f9"-W!P-gj!s"P1k=K4SOooIK#Bk.V+U\
%f?2:=J)/hkgA/=fhT[rZMQ79a4%h6,k>2W\f?SRWPiDMj'0fj]Wde,8cX6AQQi8?gd3INj(+X"]kLSee7jim"1qHodG4D[<Im*^4
%go^#$afbk4mcP)3mPREX5*W*rW$_GIZr5S[\F5^jQd4j8B't6KE$bO-p%um4iR.On6I^M_m.f,EbDf,jI"d(#<jp=IQ_J6DGZ+5s
%[JSk5CYrGuoCW@7+0BZd^@ZKC_hUI=J`X"n=-kgEj)#cch9%T*NuBNEheYFF)df2fI/ce4gs1$l]B78d\uA5$MQaV3cu]2]a?Qqh
%l?]T%U^Vll^3R;s[Mn8nrdI6(n?MUnX0B3]mppc&F>7,iEVHe`n!RNrI9YAeY's]dcL-*,]$HfUJ>Ho8j*Na:T=kp,>naj8=oN0h
%>E],7>V-iUf6_Fn:Wf.;GODP[l<lIjrpYoG:_BYG34lfgcp(R&m;0q[2G^bgMt2SPmI,Xqp!MIs$3">64F=NMC)*@J4I(RpSo/FF
%J%Y_LUT%E*o_.in>Rcq?^J[f$WgdBK4[$SYO[GL_-XT!4mKV_?\`8,/IT1>X`?-VLo-^_kDO8P-mcV9ip[>ut#9Vgcp'UWoiq[$M
%kLRt_lPEAlhYDD<.Q[3c=8fLSC9AQ>SI`9ES`5]odmEGWpLN<sn_dlSE;nLC5(*([pCF8U?"%^IZgg)c=*jdjVmou[/UAf4CG>uh
%"FBJ%]9VR"je%.$B3nEkg,SBRboOL_onSqSkZl[PnR-b.gkeTC_@5-K@+'ku:Xo[df([GP7:YN(Q;)D(q0d=^#VtsqFX>oP^C?3)
%Z?,j"`e,GQkP8\u:]5t%n?.(;HBC:;AWkhbY-^.%mjt$EcK:)1UJKJ3rGS1"--74uq?LH9Zh1K8>e'D9Y-qD(fc;ZJ0Fp@U8D+u#
%=&Df'@!4CK!d"+%$Q#/a?%8X?rZLBRZ;(VE@K0p;3'mK1Ms[q&ZZ+EuKNHRe!`Y@FH;e)MAb.H(k"?f"7^\S?Z>qT^qWBPX[OoCC
%iOg$DTAKRmnpZ!sVs&T8<h@#"NbL@-CVX$5HtU(TqK[!rn!J2mepMbU9!oG,HuD6ps6*H%q0MYBPrlSTE$&c+?;UjZgT.Hcf$;/j
%s)[Vdr:1GIp@VkN>:EiMe[\pIJ+V0Ap9lT-9&)W0n1rSY:rDV&8+t6Z`R>?rn%T[bSBI,OqZiC(ZJ<@Q_9qFln>!_+8_QnB$WrB@
%d!B8>k-(*)[@PPYjq:VcT+2p/H+1TC_Gn!YSFs@XT)Lk"/'l#7.*tUMrrO)U*=`ei^9;A>G0`I(=73VEZX<a&48f)X+FaiAhmYLN
%(:$ctq_@;ed_i`nWIL?ullS7a="9.i%?SS1Vm?:u$lP\9:HiY[h^^O3s)n./nZ)>/bBU_MfS9E*o>YRPRM11aqY2n#^HOa^XLuM,
%o--t;?o>T1=ap0ml(S`=q#gV"%emq4o(0?q5tFgfmm+GH#Op?+U*q2n[q.FsJQRdCU1tUc5oQj#lAJ_FeY6l?BG7h7W'DT+)Smkb
%`+CUa%g=;Z&RSKHIQlCWWmQI,Q8W=C!'S0CkND4'=1u:A./!R"r9&-]pEnG*oPH,HaN\q1'1A19HLs+mnh$b$(TU,ff')Y;m9g?]
%KW`>+o-3TUBW<W`q,uKQM&m8joKS&VOSE56_i5MR9q#K6*lMD?8bm/]T-tX82Ij\c)VOn-Vo8DZnhT!-oE/)LWkS\Ke/<7e0Wq\M
%aF5E9@9gu>e=AM=3.)u%<&Bc_@C&rfr:sKi<hq*XrU<M))a.`RTbZC=,Xm"BN)<MCc:n-Ek5cB!Wp>E[)_>s_m_2P3W7O6>k*VsD
%dFTIsq05d3O+`XM75?DTNTN(K^?k7+Ih>>pLu@sRQ_[@N3-TKB]",0?-oqDoi8!>X8!n)/l?Q7\q>TO:qTbYP=^9O:k\ND</V(8+
%@*]Oj[SH8(^F7UGSSi:GY'rPKCE'T7gtr$TGDFos.jsEGTXU6ZGc7U\Mm_[0_C"'q?2gQ7]nAU^gtOl=ZkO9.qZiaNY@%=RF-cBp
%;=:)[gtOmfei?+X[_C9GPLZarCU*liW1Rt1IG\`Jrqb^Dnn2o@O5&ESeY=L;Dq/$$Y,.ON]-p.0[pNm6M[ZOcrD<6J[*HAgHd'+^
%Q3I&ekQ$D2S^t>*gP,u]E8\(1err#t?ZOdQ1n_XMG<c$bc:\MjKaap[dWnFC\]!X''%AdL:,pf2&,FtFp0`Ju[e!CW_ts[?dVSdL
%.Sgh_mOCqGmMlc.[ptKbjd4um]_;\H=?apCg\Uh-s6d_T*gt0jWu%WtU8tf)6IPnXH^ubVrp\+BkKrb7cBCVWCVKG%l_UB3hYYnI
%p+T3pN9Z^fo/T4*54cG-C*(%/f=d*gj;U?Ag-$9jC:%&iEV1H+H1l+h_]KWgCUNo2IJ59$=#QSX8\1`Q50W.6WGGo%%dR=LnG1%!
%ZZ>P_ce<\p-^=&cdGkN/lcQa]3+.0G\lZE>Eb?CrI!Q]h^t1+kS4,#k^O!3fNlq@3UF+,Eq@2?Q=4Yh^q?J><`d5$i2fP^%,s5lp
%^U(KL-*+!>45[b9^:1H)m,R`F*e]M<aOf_U-_CLU;L4UX\%f=h/UqTLPtgXqI#r^Lp@&o)o(\!(+1COuejI?ilC[G_V09<HU:V4a
%#-*]]k<SEaFk'<JP0BK!:?V2]Zi9+J3Rt?B4Q#po%Ud+4%h$".pg-&^1@Ol,L:R/pHRCNXT>0L)NRqt2LEktp[[%T`g@jf4kO,C;
%4-,_0*Dg#hhuKl[S$6-<m-L5phml-]mB+X>Dp>DJG:O3U038X!YSr6\8DKW9*X[&&>V!PR4T6rZD-1]DCd/S%eP&_79/hh^0DCQo
%7#K[Q1m;bsVn@HsZ^0N+#&gbh?Dr!^*eb]e5(c_;rNe1C1.=$Md=$3D(@ubhgZFF2lT,b`2hO21;%"q)h!a?2Il+38/>'Y*>:ikp
%iG'oq96\4CIr5r.0COb:BruO@=]PY67'u@BWOj4"Ii-;1HFa&$?dBd\5kM9P[KohWl?rImpptnMmD3FKrl(G1TD<CuC'hLOdK_hc
%]Dhjl,M^6qk[OGUaer=jZ6B2FR9Y-MKU4=<JFZLmZk&Ad\L?`]g=t$K\%T+HYZNe[pREmT=&t853G0dg#HI8=&GC[VhnHS-q>C3/
%ibkOb3U\#=aQD>BhS7,P*3JSc]Qs#+X.R-^WuZ)nL]ur*PN)#ndUTXL%]BZslHR4Dbn#gUhETdU^%_#+nJo+k?OuS.(1/XF09OAO
%[/cU2(D!Z61;^XBkP#K?8(?h>Z?jmR??tn.oCWU6X*pH:[WQu4f2G\9@$iV8GeMN83e_kR.(bf?mElqap[a;;8OG)?'\@d)j8=;<
%p?:<OYk;%<42m76+-0k`;9iHuC,Wf75(C,GeF@&KD.R3qTZBUpD>B(KDX23o2JV!IX\U:B8_;0,\iX8+1jY3)@C[IPfaQ!N]e6B<
%D_?`hoA'64U@>U1r-UapjPEDic=\i1IicBrDuF3YUEjD]TncDtfe)T`N#7=$9[q[cpN5T]bKXM0jD"d"%ck*GGDbR=hckfgh>8hG
%\$ME:520q6&gSA7PeFb2V&d91Iq%R6f!f")D<0I,/=15.>h\JEKmhIt><2_!okj4]r;L7(;q-.Rd&#]^cD)Vg"hoE/[4_1pA#CVA
%7TiU\cS)m*d&cEB9N7THp$>OR&mj\.O)f\o5ka8QnbcZ/(MTR#A:%\?gF;3t?L/B7/e24EIqnE6_C&Eqd7&):Ir$,Im?VrSM`oW2
%d*)1ODQTO!(L'2;F%W.M&_1]%bE$AM5aM*se+,!T^Ef)h(\K_HQ"U)SQakoMr3YukNKt#WF1[>Rrc]J059=\_T-*_DnRp^ZIPH1G
%?/&P4qr<Q:mdQhnn*WrW+Lc7<]`"8)E%<-iJFtTN"HVhD/u*@Bj6hpIhBO]JqSefY]%uB2g!9<Ro)/g^5pAPmbW#6e\\gc*mOg&'
%=.dQag+\jYkrB9iL-']Z4?r+]5A6QGfMpYnIf99*_9SV'>Fg,uHH#JV-TaY46Wci3Q>q!0_bT1g\ZMc,m,+JTi+)O_QsMlK5Q%Gt
%Q@!aWI.?Ph"Em<!M9'Pqpet8Ah:PlaXe)0fq?=:GLLRXd%3:<)MY7Y42Ndr_BfU,o)^f#E^%d`E1\3MLj3Op;2P7DGnOXU&8+9UQ
%$0t-W]DBWrp>4KJ\SJD+Tuo&Z<(!L\WS_m#UQLJah47Gb]Ab`BlF$!LM#M^bo+0aF^c6_sca@fV94OuQhL?Q)UTjqkQ#X).B#TM4
%p#tA*<)Y[urGl_o9`Pp;2gR0KO.&)HHG8t\7-hIi?2<,mMd%jh5NBV]/N!)^+\aURDUiIu0fD$mT"b'nMKKI]6XTG-J*T:D)KJ3p
%_jq,6E?A3$_>;m]Ak2C6@hiog/fXV4^&<ApcY&E\QL_BL1Lp"g\*kV7:]-<TQQt;7\;-P:7dcpLl4mCpITBq\lDh%VSQKg/RYTX_
%]A?WYFRF6o[Y'4!K,2PSQNngWV`2m?%j-CIs23;4dKlo3%I!9J/.FR>F,cluEO*9`pLja,nCuZ>jds/:q=seM<5"J9<AdaNC-UD*
%XR@]]"+?9biV3_8F89J-m<88q(7:A"h+s_FPc-X*X/AVZQ9V)KoCbcChYO+VFlQ@]VtDDY-qphYjaXemc35l44krS8gKAj1G$H`Y
%2nBsUqSNMVIB^qrIeL*6js=a*kERHp3r?JGXF7oc#ZAF0hN_H"&_JiscMLIO:_C/X(S@obe/gD;%RrI-Rc,D,j+f]X>8JFKL]+"5
%c!p%%B1tI>?G[YCTb@fmPg).t_pp=URu>>36o?6bgQhcodp0,C]o/b^2]uY84uK+JF&f>ga7$ba#QF>3bJNB(l<SMJmVZmUZbI5^
%^YZW(p72FQ6T]._r,@!uj6M&r8H!`_L:-la!_WLA'eI8cmG("`4\;U5nqX@8nqXirf<9"Prd4J7..%op!ndP6+.`+p(q)N==*Ro]
%E4rlQX8O\/n(H%-gYaDArjfAG;isDGFHoa&Z$MQoXXeg[rJ)n!\,<j,3fF%jq-*7uX0#)Qe_Bi5Xm(Z*HF6p:>.;Y8p[e&8oB=/K
%:EQ#Z2SHb`s+qq<^Rb%A^45NWiX(W8j?0P%=-"=>$pNSR]hT\>jS[-R$&nl\V-NWYU9!okK&ekk6)u1k[um>1%!M$I54mgS#GC)5
%p%>LddS=gQn,4KeIGr`-NtO/(3(\c`Z)>@/^m`e3\iF9lD4:],WPA"b2NN`VCJQFLWuk^3F2@,odX,(`DJ7TN4)%sg`rdS]^MU3[
%ns/"el^,-MHLVSo_Fh3"h-F,5U<ae?PL^7dEM%(IGd+Lp[VFRS5$Yf,h6Zfp7/?<.qn:<?Up;H:Hl5S)B=YM!g9,\DDZ7oOEm8Oj
%^0;b9I5$WY%W$\T4-)Y,msj%tq\WT!SJ-@0M*UI_l:(->fR<,bHsM4#'KkS*n@gg*A;,o`j/4kTcIT1j(;JEahIGQB#a+upCJ\L\
%%JsGiEiZcPgoVAf#0[(bHM?OXcI2$+J7GqcBskpk+;$p6P`D]9O6UVT*GrDl9dZn>KZ:sR.Rgr/@*5C/_CstAgI=%<T3:&(J,cdB
%CHfM>^[lm<X+cbs9C^Q'F$hl?-@Yf.@s@D'J[bX;r>BPfm7>tD"A\6A<sAkbdJd@))SY]#^UJ[\CT:<+DKraurFR@/fse6oF6TX8
%?$Z,V8A0N*^)t)Hrd6rC3'g=Yg@c.hqUoetUWZ7?>PWcpIT(I[/BjrSfqUVdh+Wt%H,`>_`VmEbb@cT)F^<kuPI[8E.<__@8`*ng
%#Pmk<ED)N8b^7<#N6^@'=T1I0e$&L\m<Y!9a:e-;jQ!3sYNjqM[aOHAHXZI;`80QU"s7^@pC]DSOCdnU$p<A:!$?^,CO!V!#A!$h
%VK`isP`H+/J,M'2>![o"b/q/LQHjsVf+O@oR*1mqP?7sZ8#>$j^KUi,7Hm`!/U/sEU%iu"f*iUEMU2.GqaDV+^ddD=nOlGf*t]-H
%.&DFl#]h/IN5uGZ.fLuUf7cifGQ!m)q>@^O4ml6YgXsdq[a=b#47oc6XQd6\mF%W8mlA+=D[lpO@G0!]6Vk?sA6Vee1bCMiAm'R@
%YRM,4@Dh!2(K_*RXUlns*rrhO3=3XD=u$ij;M.f.).XR91B>?J1T]"AU/.nmn$uc!+OInOP_bdg2uu=J'+e]j:kX:pnCt]/gW>nm
%`R,<mG1JT8rjcU05WX!h,o/>jpHggl)J%V]9fGqr77ac)!7_)Y'A^S4`I5jCN$8*3RMM9BZa_,3i7\[#K9p^s_p9I'L?.6CSo>\1
%++(u5/XrF[6qn3q@Q+3*4#uf3+>L/h,#BHY1/P"GY9l(Q1kgIifaueDW!uc%:+/TIp1WM%_W4'm:=dFoYW+'jCRHlaGb#JA:Ml9M
%6pWnMpo]l)V]f*A#$'\?29!BCX.gj6GfcBnL^%#>'dFl!m(h!A=E>=r6ptIh0q=K0RFeDWA(`ib_aHd%)p`J.:6%WO<X-R'A(21t
%6`c//Gl1kr*)\Z&MkfKG:B_lJQ>Ma\0\"4]06Y?YJMG1kaNIah(UPl3L7uR/*$NYRHEM04$G$5J!@Po1=YG3(:`ikZJSMMScj'TV
%iBq8TY]e`lQ*m8'!P*qRo7hhcQg9NS"(-DK1EL[9k8OJFrN'osk#aH+!>Mm'N<MbWkjop4)9M%,c;dOJNrkr`d%c?B*INe_$C\bR
%6d[VV"GX]JXMbB9W$9t6KY3f_]&'1l;7%1Y#)JrWkVsQSQl%Lj#(b#LNM24L+#?bf[m)2s`9/P*o`C3egE,\jNQ*1))[_H+dC6HZ
%BlXKKk.=dJo:898(dTfK81]BqLM0WrVXJ(j_bLWNn)-6u'Ng>L&V=r_e/jTian3G$kQkrTR\4&>g'e1^R%[\mU"`8ipCe38Ffq=%
%6_hFC(3g4X?r1;M)G:rkJsDR'2F^APTrFnt-4?7r=H8RfV]e5n)O6J_W@;i:eT.Y>mF)4r(GW<@DF_dM!t2_XL/<G<\@?:`fI)K$
%7MmlpTch;$-HH10khu%#"VM/Ib=)_XCf!hLXu0l#3.XYR$FV+b#,c,9%DdS#WHQb:H8&e+d#l"n#T4H!=O)V<0K9D_"O(MB6Q^gT
%(J!;_&O;Oj2%Eel8JIWS=kJ$VbQ]1n#T/,N>ba;l=ru37pelere?Qom$^3"?U#`a(U:po+Bn7Mo+EP=!"3#:gab3EAl3n%D(hCZ6
%aFR+[76ashEgjF%WR2"I^5_1^BkDA+KRU=C4k6JGL0;E7YnF9iI?u&u+Xa&*?:"?<FD'O"*-Iq+!m_-33<^_oALNp12RH7W91[K]
%aK\=Z)[/:?On*0t_=I=WM!UM377>L4!l`G.hA$q4_$btL$=_XY)_GOU,RG&AYcJ[-U*/+R0W,m[N?PqZ1`A;K;:@W9Z8uHHH8'UR
%fCf@oe$mCVoK_6BTHkB^'2_(s#ZBh)8]VX<8d2u[W!uoHf[Ai^&@@T*U93`]&:TP+eh]>Oq&oKflO&Ff%*qEY@,pesK%(ZIC%4II
%q10bb0UV2Mc9fj1:5G6(!^Z?AcPjG99LFmkO;64X-qoRBj$Ks&!I8Uf'S6/J!>L'ao.0n[(0/RE@,6AkPs`?umjC>bM\.ic"uTGs
%HAQ)Z>NFQNeach(IIDnsClaWC]ke5sU4[u9:Ults>4F;&Lr+IO#j![)6pf)Yjc2d-3uC'[1^#rGWmQGo+MEQJn$nA_LaP@d#e[b\
%7[:t$HJ]qd1W6*mA/HIKUfA67$7:lq!%AdqBIo)b-Z8/E$'?6kD5IWL"PV3C0]FAR?laKPb><in+U?@jhZ-#o6X91>$64[TA2lRk
%AKsl>^4b]Sk]"T)j^9]C_OjlY(rSL'UT/a"RUT`^gJQZI7'B:Oj;'@K%eYZJTdgRf!HOlcHm(]q/7aJWEesLB-Fks7F[>4<(KW16
%#B%4DOQW%[(%BUn+:/&l#VD+2TGumHJqhX3YcNCo!OYUAb5hdicHi.5#QiToo/)!:Pa$gd3<HJ5L+,ZY+]2>p*E[5>"?Ofs'*t)Q
%VM-LWUSS+9B!-nYN<lqN7M?+0*3-f^`hT35HkA7,E08*/-)2&OO!kB!/438@'[0/d"[oW!4dVBofRCP2KW\hTJX$M#WtKrm(m>u!
%iIER86C\Z%&8H6U6"+9%.A@k)e6mNP1hA8jEY<5P&2aeH/E*_0Jf+IW'%@VigVc?ra$NQ9MeRaE@2[0Z,t+Bjeu=7i#=WNdfb*i%
%#H@:,0GJOCJj.()nP(^q`$iU'%tbihVAND>JN)X._T:X`ZlVnp$mXrG#WWc'D[bU6+CD9?2Ou=2TIM.0hh,A3@5]9>Rg,lPFH6i=
%VYac9(r/:%Z27r*3<P?ljurSWHdi_P+/#k3qa,]kUddJRmpR4<F54)b=L9*0Tqqn7-^GK>%q,mh-^LV`)YHA2?0DG[*>fF:Et\+9
%X-pU?l=2X>>m;$scM'd"#5Zq>,6q?VCQNWP%10QceAVIAV_M?fBP>?#*uEEj%[^lHAjT=K,`5;^546/[Mr`+c]1=Uu;/h=WUhC'i
%+TZN&9L)k>'FIQW9cj`mEZhEkm>$O!8VlFZN.YfD+E/$FGL+BFLtBhs\:L*=An-YS;7"Um(RH<V0Y&0*.Blmhfs4nMUG-omO[QhT
%0EclZU'?WE4$fGT2%OGC]aUrA,5<<PQR1XZWgF_M0e%j].N'/69bUGF%("*qKDc^]FXR"dgf]9B2$kH[Te@a_O5!9-!oi%/;&:Ms
%$YjE11H[$YZq3U&Nu?]u\fb)aN`]@mEX^rUU!^B$N1As<LtPW0')5GrAr@u/KlG9<GK`"f^PPfE<",4PTP])gJ$N"G%CC81!FJ?!
%_([l9MrOLdlI]K'qkPc""FcA&`]*c1;+oPBW9$B6\GoGEKCiAC805G.P6YWKZ8GoPpAWHS"qXcBI0hC[VX5lf6(G`0'9FFY3:_;O
%$9DM']GSQY#suPY&'=WhrK'CpD`,Wq;!"?O,SCd>#cgpWT_)LJ(J=a=atoPUN=r6^f3Yu+\fg//VbJ.]?u.srmD1TAOQ3pLk[+u4
%<U*r\3+6WWI0JXZN9^L$YfICY7iX'dYQ@MJ`jDXtTfCCn9R:.R%1)/\psMeL6mGCl-&0;K<@,k)L,p0IL8@e3;o1LF[0%S7\Dogk
%?li0="=aVJ/RU"#\PFOt8;M&u4D"j@.g:MILTm.c=tgV<,:O]IP,%,J>_a-&0Y$7bEX^rJWR85$N*OTE0XIK(GTU@q%?,"ifjX5'
%a!_Fu1]oH,KXNpsf[qkl9QJUtJsm\S]E,C0f./!_<t&[XG+p,OLg_RM0o4#+7cO\.E\SNNr/TKT!4130WK`CI2j\j0#.%$=W#15K
%"NWra#O3i/E'KLO-4Gk_[`LCA63#kBA)o22h;F!kH=McF[7"\q(Bj2%"F,Hej1p_KcG8;09fq+NK"A8,<Z/8D0Hrg:VufP1WF$Y#
%9=/[HaGJLs=<_PdGWWosW%Sf46Dfic%G='.CC"_,W%DL)=LIOHQ0>bg;-:SM#M+l4K#/AS(,97>P&qg,$J)d+:s]T)a+2Jk#`0_C
%8>AhoBH+#sa.j@q7Vs4]XW.$T6G(ciD$D/Q0G7c?;F+[lh#.Y@Q\47;-7;.^`OA[rY_1)KF^'Zk(N5GT-ph>=`5?;>RcP(s2iV!M
%g_i-9$O[JVYXSqP^3!`dVspZ8#*)Un,\^tK=/o-J3^ld70Z<=V*>Db?CgZUk]8#>Om>TdG/k6q@15(BEhr4-U_ZVn$FUj#e#IFO_
%;IHL18Cn_Hpammf.gXBf5pq\hU'5#Cnq3%_>B5"bI>:-?=J=&;.BC0OZO/$t&9p0gJ<!8H".]KGV\;k@^_T$1&k0kc$Uu@U5/^9<
%p/sShZVEJ6cUOZ`j=h+GJU'-X`@-N'$P[-p&/0kn^qD]bK).\36O@rLD=BjP!fq\(a'p":&F3>TJdDgc\`5CMHe9%q"_%as'gOq>
%EeG/Nb+WN>nLc+4_ns>$!B0:"HA8/KnT(n^(S`B6Q5@UW`is;1!AS<;+E3'Q0;jQZ@R3oG,Xg&b&n?2QU7eD"2FUA.\lo<Xc"#74
%-AK&O2>qL^qm^?Q>.F;SbQ<OY?sj,4KIFE:0]Z_?N-dSq8WNrd$5SL\##'Jab/4p':hUYJLm!@LZOB,ApGj6%,:FBL2=YpNO%,7m
%Na@5AR#Imo[K?t\dS\:(=q[cl7QI+g/rM%_Uke.&7#-k[qA<uU21d:h6d_S@nm^OpKGZG_Q5Cdt?lUA_:40$,?RSH?$jPPs]L8S/
%U2Nm]6B@fMGT%cnACA"7",-akB9Tn0Ar$s],'cR1,>D%;6tM,l-JB+/CJa9Ti.S8N`ic_nA7HV6ThmHskMl,pWR60s%Gld$gTk"!
%!&b&*#KQE;L8(O5LK4KHTHUJ%r"N#4OX*4'=pbE83=S]I"u))o)##e&-P0)cJBjj,d1Wg&d:AU'QImcQRM.##APVG:+Qu@'6pV[r
%p)csg&'Bf_PGTpl&pho!_WQpkr",b2D;4;a0XPAlC/Ptt2/3[38N`$NBONRP3D!7a%+2O,JU%$M(IXs9V:_1G>0Xj6kDPa[-Ug_V
%8#T#':ro`jlGl1!$o8a=7.^f)S[RTN',X&0%'b:>6G4)#3Q-U+'B+3nLI0eU[k*9f+h6m5ITY-K4<LL62R=*0MeUF-_5stp`4Q]g
%I>@qMj>JUp,)m?<VkkP;V$9rC1bmPY+[1T0jqCC3!9uc&1MqlpUi[$3e\`Q\*Y->9F)$:e?E<>n*%A*3/RHX5X"UBI+]bKF<SK>b
%`PE+ddP5;GN-d/X7H$@t)ICK]&*i[MN5\a"oA3))CuT+>lGTGHN#E$KDPseN.M2I)PT_efbQ.)gZkKf'`9PjFC7?EE3>c4JA.1)N
%H'ijU`V1cCb>I%6"dQ)4+kU$A/3W.g.S+mN'Pq.\:"0QRTOpNc7/Y@#L]p`h:)lb+&'<3A/K-Np.s.K_=<&"ECfUX-+q3)2P"iap
%/Y3R?;,IlVoe><oECb8(4<>_E#L?>\G(u-s(oT#20='FO;Wh/\J\%L`_nhO=IYMn_$M-W&[Dj43d5W7<)l2,Rd'<`\P?;qb'C,Xn
%<WkfW4NpT_M]:.L&Ts57LZa%9\^P!n[rO$W^9K9`J6ZbZ8:#D8lCsspbUu@n2!ULG;([XT$A@#A-q]n4L,EKJ+'V)9&XS>Og^_2b
%&K1_kSq8+*ZIDH!X@+$[^p+/!N6)4Z_:&j<IU[P6%)hu$JVV!*NQ#m$!tX1&'E`U<6X!qaj)[dH_W=Le\;pkEKi,`>%lA+5S4cCB
%qBVQATIG:f9o_N@?A?VrBkiN^@;_o*<FNFkqI$8'>R0Ro'=mtd]]ePt.i?=b1cYbS?8sEZ@FX:kZYC@2XF7)kj$HW_k&ut]2(X$?
%e&9]s^:5>:B+ZP:Thu@!-p$f!C']eD3rsn.@S4?klI"\n/?$WekQtaf]&"9uDaA`t]aohVkpbN1GX%@4d3;(O*%ipnK*'>C(5pHn
%gPuJT1e_V98L*F84*KW$,`&de+WdWm5>4>H@c2f8qD?!)(s/e7nH$9l";Yu*35BrXN]<bG.cS$:N6:NH]Pdr<f+H^bFF9R\R*`og
%W$:XKKcs06?-pN,AjO[!6b7+;SkL8+VMg4*TttsTaKoTKNR<nS/[5AuYOTE!,<WrT#!1ilN&T<%49?-4Tp[=m@#WfNS8h)D!Co;X
%h876Y\Ad_'C*eI=iXnIbmDm2]FUW](CcjQ,%>97!1GHd75gE(igc#Qldp]2fD^5hjiTI]QLj]\<Z)lPsklqd3a0AlrNX0PPd)VnF
%^51kTGYa#UYlos\SWoJ%7reYCYdS6Bd)6#V6!tu]+.#UYhD,f-4pG5RS4,Ml-CoV&('YT^Z8kkr0mdl(S4(1)-/D:Wdh&]aUT/n/
%I?E]cfl5j[ZJoAC$fZ9(33USR!RFe-Np%DeO0uiNAshSZ#M1k$C5JQ)@`edKC77JOj2k]oNu3Ph'!DV`W=A0YQ[lTkdO<tQ5sJLL
%"*I+R'](/C<Q'a=cmD[i(Q8lE127`eeS8'k:Qa+2$umfoK$Om%*$rY[>sY,qZU?D#B!EpJ'u3pF+FHXn<4XNKRY<@f65.9Kbt/=5
%ObB`d0MRN\8<@<mX-]NcI>jV(@Ye79%<s&AG,Q3eRZ/RB/'#288eXrXOXXDP$Yk$f9iX4/eG#0V1rT'u7Kk<$Qu"[a<-,o\V[@/[
%@U_^;b"faYGXfL!7O*c<3/S^e)=E-VDtk/HdqU+^jAlJ%%e>3rnUqZ09hn&\D.jW/EQ&\c9Fc>&P4_GG,'JRt#-*9D%7P/jhbhr6
%/el/NE+*;[)^.Dq.T$H#)qn\EW6t0i)<kYX;B3ab/7FN0W$5!Eg9e?8$<m"`(aGrO\DE*&M&E&uQu-q-9Td6k"1%!0]eNIuV_2N_
%<C+W09Q$5)Xu9-O#OYu<0[pXmE:M"Y@!J:$89i+T2aZmq#BH<%(K?Mb9hn'g2`-DIfKq[;aLNGVGh&&QL4h&9W2OO*/u[H"jG*FM
%+X92=*eR7F49-tNP\7`"hE9Ie1$W8=_kCWK4Y[XhKZ*[m[(6?H/:9X!SC74VKpDl,flk.qLK.WK*NG8&O#%,]>XB1<.ce[gMQEHU
%OQ?ag2Vpu4&6Sj]oMIRt%hg^=2TT6=GeDlMU2O$6<C+la/^@78G(!fH@4/:^O_@=ZjHJo5F[rJ^oSE"F=L`YB>)@i+*6_Ea0o5LR
%7TF)8EiMcf-%X;^hF#$0d7$&%n7[\l1),'O(/\3gYjq36KD<N$1_^2T)*&,di4_@@#RSnf@%mI;$pYTH$_XA\+K$AhY=;Lo'fjOY
%&AOquq!bMJ^pkE@o[+@,i+E3?YD5EF5n&`WY/r-lf^Q,*^o2XdH[OQH#cn.h%<8Z"B\YjI:9cOtmjL&FpJut8ZLD7s35FI-5.L5.
%8&6]c>=!gk#H8So0e8<L.nB,U8Upt%3S_6e_i(U&$.66OL"KU-jkp[,8J"f+Y>g(QEJg"?@#.fH:Y;l7JXO79#`=]<$q4dlr]':,
%iZ:<OG`*:"M/YVUjbkN;Y>dj\.8DS7:)((S).?986bHT^Woe#9MME?e8'".Bc<4:Afa'-?rPrT%(H,"BB&1cVh)^S=iT0(\R.GX3
%C]o!W1/+?lM&VbX`Q9ije]Z=LJW*jX`\>/$5kqNd5QWacb'd%l#'f#_'O+OW"?==]6_eZq))XGD]N-U-!Ck0Oa%[8,cZ:jV)WH1=
%dC=U`>g1/@\"g;8HF`$[3hG@%?#fgqTm3<TG@@bajj#+mgNG:LLef(gcQSN[$GM4NJeV,s:eZm8Z<mB.UB+\q`.El:L\E8M?EHWb
%9AM^19_/hE)J5<$&&o+AU'P:2TS%'M%/%^]VYc9(hJ*1?L-qIONB6(I0IMWiBacrJN=mFi^k9)t2c7q^'A7&>)Ii@p1i=E\(UGj?
%mjJo[!!SEY4+_bDgEsmR"$D9+>Q+s=nG9@KUl6Z;#9ae%+o)Pb42OaI&bA]#nPBPU>%<@P%AhmT$_"S\0!73*C(/LT1/Ki'&^r9>
%n]KAeq\ARYS"_.SR\YR#&k'[B4F-J6_Pe9+=?gI1YL6;HRM\_BR'VVr8Vk+R`R;iM"l`]@VktV<Ws2Si'X=$X5t4A5*I&Ncg'UJM
%ke#iO#".p^'<V:JH&FcIL:F(5l^@7:'I;:7$_s3(+GO225=&%3Z<h7N`2G7@m3lulj`0h4=^A4_Uraf!a9lZ?'Y,B9'=N[nN9Ne?
%fc.("5ACm,#]NpW_9`;YLdR[WNI#%YS!-4c`_%p1&8=DVYoR*WA(9Lq]-='p?Dg7mitO5e_%<YW/<A/RHlKGsqf8eBahg\O)@\BM
%"W]k(Lph03A-%MX;]*BW4E35&0]]cFNT'sgEJg5O^>-fgh`@(U.:9suR#cIhC#^-#c*,ft4Q;)#<QWDgZRTbcNjuIu@#.*n5Z%L_
%4S=SEF3uPJl!?Sk?YUthLL9,'ii"5bT/f0jU?kXB!lHigNt)=#CKj(>EM/D2U[s(N"cA-NP@G0)=/3inM>%fC3G=XcingT92higA
%kb[SLM1R(Fp7ne-F)nu^:l#--Jq+qg_Zs4\WWP2q/9,2?#LfN..L?Y>oMFB-JXJ@Y\-#)WkA=.Nn!OU':dnKi[dS8oTU]:'eVn+4
%AL/H@VRK+i^erlen>m$CVaYVsFt:ZZX)Yll+rnr@B1IC'8J610h@Sd^1$CBMPCWFQC"*qsaiMHQ?b)[t8<+Jq#qLfj%Oma)-H@5]
%T,L]=<9,kT6i;hui8#*aOsBBGU*U]rW%f!D:n35oXro&&2ED8cM_^$TiRBR%7qa8>7m[r!`Ja*k>nD3(l)pI%`uluL)NELLW@90K
%\/hF>nAM&:RfdC9O'[Pn7g$uo8%q-M6k/\+BiN3_,,]%'Y*Vp!)_\C&R"6!jN."0I*.qA,%#l4)aXK-&q;iA*qis_Y*gNWR)S1"[
%'W<H/b7S+fmgP2U+k>*%JS3Lg$,P@/$2MBKMufn=7>sOF.l8_[VeF$X%!+I%3ZON]F;e*6,&8H$Gp+n]S2_BmHttIPo1T!",;fl3
%2*mrRjf1r"dYPWJ`^"OSOctrp(3PW5DBj(e.]/[gBaqDjK`Y%1d2B,u-YQK9\I0Aj[p5G^^6tmgUbD3@FN'V@5@"]H9+;H]&F0OT
%apWTeS@ku%CXq&2GiMaXc%7,t`9R]6#]\nH`5<1c@4@mH"&W1$CmT\r`C`j3XL^%(V@XpT%]c[LM8O>+^-s4d"dV+RCI3Eu4N'Tq
%Th)RK&u@[i<q?,b)!43%1EQm3,>!Y<5WjMa:s/r\I0\H#o8f8/bR;*,_n/3$(&TmR@uR0+R,Wirp*!at77lO$b^+it1))8Un<c#%
%SEe\!mUtP%J!IQ(BQ+rR4$o^\&>_i^cG@a6'+epo6QH^^k\3d%";[1Jo6M]Nhg4:X,VSAV"dUF3+^V?A<<G*=`PrJ(f8;-@OU,bZ
%(0QN0.hJOCAqn._*LNW/+mDPV!>eDa"&Q;!^et4j`Hh01G`G(<:KXD!!i&$ihhdjA1m+;9)"d$8%&LSO6WM2O?.PlH4Wr4$U_K&T
%>?t'^,Eai:+#8I&T;4(,-?@TPR=lD;h7#a]0N)dCZ\@FDISt%uWl:)UICP$L+l4]'i\bf+@rdJ:V5+I2<>%pF/LqZr,9s*0?EZ\<
%!u3i@`Xoo:b:R&j6N&Cqee+Z!UGVTupTH"Y5mn9ucj9kT77J"D9ei"H0g)CNM<fL^6q=#>DV,SY<]#Ai+IY!8\:6rrM:.OrJ>"!]
%b6A>\%'sS-o%(+-3e;EC$mc'Y("DeFaf&XjE<rpHBY+@uM[*kAR:kT&h[U+4BYhXi/9lUp.C_+Tj:R%)Y`:(RegcF6h&!<o3&u(g
%K1)bL-n2[;TTVf>:.)[#NN*1tEf,i"I]jJk4RM5i[M'%Oa=XDg+V4,D/LXnuK?[5_1\J^M1+p$C/1!P+)h;g#9'@*+0/m,/!.g7T
%k&RdK3u1[06PBR#-*pG.O[7baTYV9mi[GY0%oeK5UfJ4/Z=jH,3/o/uEtA['R\MM-+k<QJl#%O,s,f'0`u8eV9ZjG'[4($#-;'iS
%+kA,tHK+-K-\qN4gb@,*#pj,J'oYSDOjalF=/2dHR[dhsLgMa?5"9q<WCji'C!20YGdrWk(J:or"<EVS[Nom5"_(E%UEDsrNRsM:
%1Y`En(BqsH6T;\pN+Ip#!hO<<B253CSu*1a[M>V,A].CgEE`N`?%h1p]o:>ep]>Og3dKUm%#VkXEF072+1d1aJ-PSQ3pd>RH38hJ
%g:Y7m6-:Ko/C#u,$r76'-nTBT-6V-b&h5/R*Z&0Z*0O_T2]>[`GFlV1DFk<pmjs4ii2"K-JLJq9O=Ch)Q]OH;GBE<q"!6LqBh2OB
%hJHD)TM\e;&`FSGJIW+"%]pjs!CoJuJT``BTs+t$OH)^`%2:/])n=NV)RWPS'3XmS3cNAA3[JC[)^I<MZ:Jp"d7n9G`uU9i(,$NW
%naRM#EL92cBT;6T'hEA,R4PXP)i_.399(e"M<bQ[Z36A$9Xth,60T8HC'*RT["PGEI%.-u,f]7HZ&2&GFLf1"-u(BX)$Wes^5bWr
%G;2ggNHqQ*_Aa8^8-im--@#bpE,5WE@Sdk/($gVEXXed0KL6O3_\Hf7)2d)W6]l^tP,%)p6,;fGTo-pd.8p/MJs_]oSC^4j&h+sb
%;+GdIKD1>=N58A>Ir3+`P`c>ij/-5d(4!.kf3<5R3CYG`U$p)Qafsn=mh1Vs!!Sb<PE@Z^]cL4XKIZP[X!MXrW.H^%>f0-pdh&RH
%TlC/P\X8@bIeC:M4-3oi@.-s*GTmm7#-kA*k"n#W(e+leF0K;69<+4Gc,I$r3;9].,&p;8if-siV[TIXoMJlHPpd\16mI[Y[P.lG
%`O/ff8Q)7,f*`L81[(UT:*ic/]b5BmG_S9qjk2.=D4>;DA'm\F9IilU4W9$^J7>`&no1jT&s,bc[o(3u]]9[Y)Pg$I['7Qk7sQmn
%J='cbohAa&dn!rJlXQ'7e+H-n.uAQn?M:3l@14;J]Zd3-PYo.1KRB8:4A8`gb4Q_P<6CI=K3i64'BfkQ67&<l;Uh?QI.<qaSu^mJ
%]E;pDak8ife^DV51,tXF]S@ASN)1e_dNJ0j@)tJp4G>@rX(+toL8#rf^G;'dN;@dj7AOb^&>`FT&G1YebDNg]6V5ES;jD:A,%`#d
%L?Ahn[Uf(HL#U'AdXN/r(7-O[(%DHBi5L&6n_"<[E?=A>aI-HtFE8Wq*F-`]5uBthGTS$r:!tm@]O-9Rf^SGpSTb21KFCnM`jfGM
%\b.g`&u[5lTTE4XmD'`(BkX1:K_rY(__m$r6_KrgqcI(kZChq>`hOpe5-;XD#P4@>Uf%Wo`%_Ne/dR+4a6JX-qA/O;d))I`@X-EH
%QOdrg&?cVm\K&`n&@g_'8O:(+k0m?*(o?:LPQdF?.&*T2r"`-gUa7\0qos[bO'=Rb[5k&;r]Z/@mQol.W((nNCBYa%bN?1YK%WR?
%!9eGS"oj,[E?u>uk$ioD3[,Mq5/+9k#&9+TlPm8W&%%alQ6O9--CEE0'a^rCObDY&EiMYe3J$0-=;j%Kfdb5O87\O6)`i4uJDR)Y
%6%$;]EdcV^#!TK5+YFNKV1WA6Nf4kt1rG61XB#YT[fL6KAALN9f&u*N`9YsPC7lmiF"tb;?D2Kp)5]rlfgp3uN$c.SWt<YbpAHC5
%Im$\>i]Nm7]ST5qR]$qN"=s[BJRaQiQ^jKI)CL&($C%M):JXkX1R_Z-q0[R@93dU8+Zbs'@A(M0'ZB`caR7R=ic?3AhEo(%jK6fX
%HLI_QA[P)i)FZjp[r7ED`h4*D9./:F/J-#G#=3(Y,_7-.N5s.n93>%3TuP4'@bhV`o$f)lRsDh8-D&]9!dQt8elbP(QYHd2*H<Ek
%MofXo$%Y-8`nCcG#L%G`J@miHS3i@a5UmgJAARF?)N\DMS"lA()H/_5EWPU2fnhnM+o9cLo9JNkTGPL"5trN8<X#MS.9`0q+_F5<
%>7Alp!bMqdTGUCH5/-t,>3+E4G\Gojmg:Po`"YJ2qshW>!u'DKcF$V5VWh$L_5AZ2>`59s4oXQq%)N__hc1'EWSuOE#Y;Ic*![-9
%a,brI0-2`EW!=O6)S@&J,fEM7DS\_q74:X#9]e=jdASXk,UL9g9mIY@BINK%"O\\bq\J=hSECU$Q1h>%Q=:Q?>fJ^3kbAt9OTU^i
%[3f47Z!e]2O>B)Hj-&_[Q`1%S=$`Qo3*NK(&LIMk9$UCXiJ`=fF#:u!lC?n%>l[[?,c*1aP>^Vd6ad<<UI"j,U,Ht<kcKVND)%K\
%ND9TQ@?U+NOF<b"NCECT>o"(4D:%5d7X,W7$n5n\'$p?*]Z"Qi2EZ;<LQW=(7t^[8F$:&[V[3f*\E3Lu.qK2eBISMd(h1CE*.qM$
%%Nc)Id\ik2$MEnq"fW.=Od2nB#La]>]Gu.=l"D@`foK!(I3]of@;\(mRA5^4QfP-2d3s(O)26Hd\L9f4*UJ9$*7VmX;oMpuO4f>!
%]GqAk(1qR-cu>L#C5L<,I&RTm1NG<BUUVAT,%ECb)ALnP%%<hsb-ZERck%;[Yqm:bdl"MrYriKC+^teE+_jm@(:c3JDF*u%;k1&1
%XAF"#-B@3I+UeShK&F,P,Mr+AW8g42HZ[J36^YmF2O!$-cdN(J<C2`PiVD1m]G)CEq*[S8<o?V!:B/Pc5bsi[OFq7(nF/,a<7h>7
%<)]5:*B);Zk#p>)K6AC.G]:aM`_dEA>TAK,dRMgq)+'q*!lY6d4tgR,;=m\<r%WI+D#u.#dpr2s^^K]N0;1^1&*W55?MMO6/3:Wr
%N(13%i>qtLJ\1G]F-(s;Fj1lX-lRm#Go@P?_];_&Es>J[ECXh6LR'5mcB=4oi=UF_(01]9"]oMk9,*_*hhehI"b]J$kgm.n:p:fU
%MSC!]O4N7R"qLGYBt&"hXGg=mdrUW]Y8;,U#9[MeSCs-2fWiAY>i^:jR51Ht-&U9Aj3bh!%B5.bi`hB\oT3B7i&)Fk[rM=s*KkE@
%6gG86n["])6j5)YhU"V@L,jeD6$1_C..5j<e$aL"d\8h_5/,'40`k%.!sL]<:9T%3M4kDBMs"<IFSG8V#27YGTqPOg2+4(r9D92l
%IB:X+&'naOD9uP/Sa7C2;c!;,5ki93Z?o[bOEL&+PQ`cYL!chJpZc>)bNF'^-mja+1GT\'?,8JZ$YOR*F[45HFe^+:HMF".&dj%3
%+m55:'j'pWR"uqqV,00d`H$PdLDF6CPK=O-We]T!Kk%BE@[ONGa/J1K9?&T>Zt>,fKU36#SC/f;`19Wh#P$#W/4tmIlA65@4u"(m
%'SBU,>a4#'P<BfQFO=!OEl<mLS<Sc<phDVsNs@IMGU*=I=^lMGW$7ZL[nRUe*%5PhXKju/h+=hE`pmosT.ueab)X^?;%hn)GU.n]
%`L)B>pI"E7?qt4E=_5U7l%lfo4hO]>*[6M>S/6p)4+JJpVSl;O;ZNH]nYH,[B?Fm%Y=A?)VW'CN,\e8B>"#;(5HVrQ^^t5VL$HWV
%XA"]r%$CnnfaieSV*OZ1r@n56&D"St8W#Fo)&UZW)E\5sGuPImU'Pok/$Y4%\XeRIe/Z';3u[4(jtL(D+Y;!6\F[inUf.fdTF%Yr
%?D45M)BGaf+6!hB_=.eO'2:#9]L%Tud[J$dFJ(rm%RdMA`Pic&PZR'W\k1?lMt.41l,j?QfA!S9a3_<V]`q57JXitDIPa+$?g,P9
%`;'ecp^p@u7&.C0R_i_pa^9QW([+<pYE5H:#[V).)j-mm7X>2C;5"ZE-!qX82T7QT6Re:_Y`KiIE+'.n;^dX$)coQje-G96E,5@]
%U8">Y?CrDq&kpm=iq6/M]J-OiF7FenjU9,J)9O?`$DZ""$M"+k-14dVif+)`/&_1_`:MEP;-r38?!/?4)Y++nUha<95_h+ZPL^F;
%UB;KF^3Rci"tIP2_K9?B;5$H>Bh`"m3`$u:oifX+QT>/j9VI8UPW(s.(l]#IW>>dt',>8H';=K4iS_dlPW*KIY+-06-hC=c-A=q"
%UuS#P60XFb5'_lsb/uF<[:9Zqj^@X_G@:1_b%joY7Y1`M\a#G$?Cd!%^k[#d7QG$S@5L#A+`?V%GCA-%0pGc'X-_U2UV+HP\l**L
%P$<%Pkc,7IPDo^&>LP?0(4mG?.=K4/0nn%H\t[''Y%YFRZ9j:dd^Z2mU25cS)<h`TAVI-D54(stF;#B=1dM8.lf&qt7"(grp-"J0
%@)'4#**T.ngL\(&FP7-T,uMlh.1TsEl4&^UME0T_nq$SHG):rS+<PTY6-b.l%K[OmNE\pi1E;/-l"OAXZ;\`XIL562/)'@qT7oXW
%?q&k=jesb/ash(mQU2n%;MF%q(kN>qh8dL]HM;e^8gCE0%H8Jf@3HhYm=Z=O^cOQ$'%j*pZpLk7'6alT$F4S@'XNRJ(n@B,K9>m>
%F>uQ19tbCOrs?G"`!ag6O$ek\(e+-dpF8^p,5YE7MN8C:NmT8A%Wu5fpEZW?PddE(.h45PBLkl3L&Wmr"ZeI[io?q6:Rk\LjF#/_
%kOS_=84CUhB9I:8jfD;@>LV(=`5b]LWdU>+iaS#(;--H<nK>jhj3XJChOP!Jl*"j/,Z**46?0>pP')GF9n:O2kaRk4>(#Ofad\P=
%B">au7X.4'^=l'n2)-1-6K7nZhI2(O5]RZoY.QWd:qX#J3[,AoK$a6+os/KV4J3kd8NNFnP'$qMa;:`a%2D4<A'!=k-Vk'n]0M=L
%KBr#I!C#gCq7AI/Xmgp5=$\95PIA"k\S[AC'%\*.o'\:q9$-><TV4qi?V5oe\uST0i5qI!L*Ma<,Z.XW,\L$u%CB[PQEX$%VS7K%
%#*iKCKqU?bkf3j$k\lBbZf!G97cR<]7#HHK3!t(ZKoQJ26q[iN>rfn>f,9A69?d7ud3oZ?V%X\Ym&I7?q^&tun&XKhJ]I6,.Y(g6
%<EOW!QP#,Dm]mba-""kiA]@q=U*+W_mJ<=mK355a<K5Jg'E^^m?E4Y,L*l=4`VMh^YU;`9%a71#/aeHI/8PU%RIkKH@?kko:sau'
%=H337'uM!n@N(=Q+<X<@>9AYo:o"L^U";/*8taCsco0Aj'U+R:8I\)XBYC(S;;<^fP7,,,9acT1U2C@P9">4gYomYaZqQ3`Fp5eR
%_?>PN@EW:[60)SgB9oJ/1e9=tKQJmMb^nlCP^Yq=KL=igO1H&oJd[RL"6K%MVJRV%VPIViU;t*5l9qCP+(>.;\mI<!9rL)-A$Q?i
%'LVCV"7]hHZ7_;>j-"&#@XeQ.?-3RGnTLGT*Q""j+BY$3F5"c"?AIC#^nJQ1*^VnU/AV<^jjLc.$IBt>O?uht[$dqQo?gr4Y/9t)
%eM/K/;hD24A;XG<3FlO/6?-9E'79p.5qr^9PWXZB+>lq-hl7"E>=*A\Uf2Kdp"\VpfP,oF&sq6b^%\@Q8&t*1U),ef<]^2Ld-:ri
%,uJh35??a<6%7.Pl(l_*;G(2ra/lP8n<=k`7"4,GjHMr%FA%#/>XSEY3^_r.l^F?Ti6Kgm]*XOb2T.`[<KQc$d9Uf^N^9aQNTp]t
%Eght2I]li@(uGqG;J@Dq^6''NE$[%Hcf="^%`cjKf+&o6%?2Xo)WK6h8&=*a<D$;C@8c0C?;sXB<"-lD2@\84'QiEP3DGN"XPP30
%rei0qaf_SeGUZ9N0c-On:4UNCV`lE6PXIm$"[BPFN(+g],\JM41<Ue1nX1'L?/^c1$kt!bb_C]%q)BXl"sX!]L^TFQ;Q=ffGk(F5
%`C1l%9TdK5a";[Y7Kc_i/Wr69B]*(a#n@-t)e#UT%Xb<S^'*A`?t+J'1s2-b9jol9H9a['L@#dDahc>'5qPGDSkl(U#jWJ--V?W.
%4tq:6$MnkB')N^I(K`rLpG+jVidb&G<5mjC]c&\)Vj9AsTLY0=$!@Pp9,$>^gm&$"JK\?c]Es=#c9h%p*O[@kll]0rF%&2n6^Zmj
%!>U95mg>Zhh[728/Kp[5$KX/g=>CAYN%lS8O,O+?Jp;FU&InBO:,eSl@fIHI)&RDi@@BZ[8X7P!>UZ.-''+<oo_5+XXhdIX"I)X6
%YQkqq(hNQ7DP1LR$O1T6UJZE)T!Y[JB8YlWH+ah_/d/2If'eJ9K=G7<W+qtPVq;jGpY(<$%nBR4O*DtDGeHH*>2]2G'.II>OP;E`
%g&#H1YZ`=qqaojc;h]1/S8L`)dY5IKRTq2BnAX/7,k#tKbRYRp8t^EGdkM*EUgm6Fi+e,/=f>)$bB:guG_V(Cs)88BI*[fFY':fj
%cgm/4'):_lVsB/>_rNP.%6/l)h\7EODot0,$:U#lE<D6">:'2?%9hcEZ;T\VaqurL(L'N=![C!<gn5drgQqSZ&h"ge%r&_^nW_],
%L^2)e$7gl_&V)-tMqZ"T)2_6=O/OSmrtBS<8s84"PCAc4GD-nZM1^=`C<F6EEg_nfikGH@4TYloPM*]-4^T?7":,-M`"DI]dF\41
%MqqDe3qi_^`^(]ld2scW`guL`,#<5.k_'mi50&iaBLsYQk/j-f4Hbp[^Wg#5mu3QU%4]S`A;Om;j2j\-aJV59%oR:04J3J=X<#e/
%LYMNrdZGD9B6p2<;1r].QD&AlTa$)\WR!Ena1EZf+-4%,:n<f)Ju/5$2<Pb)iXAiNBcC[sa,B21?Z_L,72&2-WF/)`+K8H+I)%0`
%Rdntc^MDiplaO]PBPM!gocA3i@QK3O@F5Qb`(1nt/t9G/]W6oM5"<?s-Zuns\#:rVa-N5X_:p^=EW3Nqb8fR7[8Ke"Z>/6/RW7cS
%8dK333h&?4XI^9%<Y2DpO\4Q@/S<7[lX8:VWnqUH+`Vc1^$D+L-i9ZSj5$eR#)+tDeDPnTNms[*PQcI`h@K7k->Qu%0g<BnWCo>4
%6uu8\mM(4<.Mm3>TCVTW8K#GLiMdMk9:s4!45H38d`*4O$\1!0]IudU4r-p,dCdeI)$d'n[Ji^:ag'O1Hm"f4V1mhIV:aB32cc4q
%`uup-jrG-a>I'7MVkD!2$/r[5[j0a/D:W"9bLUd)3mlHtoP^3&WK=H!o"L?7=,!.]B]=2'1?kf";n(eU7JAu46p#Wt"+Qu<7NN7!
%o!5%LX$Rk,oP@-)?n462%BTCCeK%jkI@Lj1X=e;-JQ@1]$\k+@iWMid6HA\O[+U8Ef)AYi,Hf0tR8Ko,/+0DBFCi[if+,EO_c)qR
%EF[SOc71F3f-#MU`lLGDCg:/P_pZL2\^p8Ai+%>iB>AE3.Si\K63nIlN511"6"'Dc^C,IH#CIue(+=#sdnf>!IFjhBrT2>eh?Ee:
%'3nm::MN2d&l-W>\03Q:.o4>aM[N-\OieN!:\0^bp:+UnajmfdiX\*AB2dXl_Wk-pNTZm)$]8l8r%qe`\uK]I,8CU?&F^+uZ*@\q
%BTA]*.E1;0M$iIEi="uYGFWrL4P((mOMKChpGOd/,4c?#EUe2b"6f1m[16%'_"'RMY$?nRp&&:I78)qS5<V:0'5O18=%L5'>?6?k
%Ac(!'ST2=I`!Ebq*^MR:9[DgU]U#AMBHA[ZVq4$7JIbC7MG>fPY"'C+-tY3(=n'9E(D"U)J>mm4EuSm7[kKT/*A.]+B8`dn$M]Io
%`]<dArUD*H?(r7j>D/")SqfY0ns^1r@E,q('+kRKKeXbEB\CZ[>h#TCo!\1a'CWhu6TU*I&&oBZ-IE_ZS.@MHc%j'CnOX1"PZTc.
%*J_mp)*%l>&XOT0ib]_A_af0KY%L%?(hK0tV9)FEY1f6u_s\CbRsLkJqf/'(<;Mj.H3GC9)WNXFj?RSrAEShJY`;87Yer[;#ZqYN
%_g<Ip5u+W/j,p?tK9mbl5,I+egbP[/.*Ym+a\b)Da\?c+ZsKHJN^mI^FR:`^4`eWj.ZgKbfl7+Be:!\g[E^'6H4\1L4'r3<FqFWl
%Tih.g7R#*<&^Lse/OD+1.m%F"].AqL"jQe@^D6%ojRkKYFHX`bo=WC+"%jd]nt889OH02G6l]("D_*;g%[afRO9R5%d[#IDkh?<0
%\IhD!gmfBRV$57MK?hLFBsSCiXo8-E6SLY#CRoCRo\Nccc)bP]$e>X5!q34'^!l-;$4(.nZ(JqLm=hN1CU[7Po&KnT1FigX$$1s`
%NOL,,AXDF8ZUPWg't7>A,cu9[+dLF/G,5cSObq0Mr`+\Z2I!acm:+G[[A=9>[ce[.CQFH=Im(N&kHSfBaH#$-*E7c(bnaYVOnMAn
%C+BQ)=++^,of?7]D\S^o1;j@EH@sKJ$urTkDsdMhkX?*gSe!BI(Hu4%]QO&ULbuJQIOctj[R*)7,Bt@Od.R+]TOp:n>4I1.Bq@Fl
%W#_dZi^Ct?Q@`V:_EXI9>86&;I(Y!&La3!gRMaD]2M**YFQ,ROVd^F3?[r\88Epq9FZ@7k@PZT)ME]RHOpH0s!E_tF=nkt_a`EDG
%TAfXiX@$^<J1INBfr)^Bm=FCL(4LitT:-Id$3hAG'X(Ga)fuLOfAk5'S8N<;0$0j7`;GuZAeC2e,j[H(ko1"VI14leI]5:Xf\/)W
%N%C/EMN'&1Z3"a:60H^N[+U2C`r:ChQ/1<I3nFoRVr_rg=3hT6#SF.LR;E;)FNk=&8*=cEMUe.cNP(P`-UnJAo-ACZJFgOa`P=O^
%7\Mhhb/#>]9")6S$_!Ph+G?h$&W\tgPliVE/.0DXRGn9^]g?q$CWT^k&J>XS(h%`@b":LD!e8Z[B,Q>#=sd)`FC@dEUbJYT]s_0,
%bE+t%#MEUQ,t?Q)ZsRU^Zs*[[M;gD8Dh\&WGWcP*k?3Odq._olAQfKlP:%R]hlbkIoo0.JLqb,D4bnt!1.I5(ZYUDHP:'lEdRkmH
%Vjl,/%<%5c=iQ)kc7mn6ls-K\Yi5`;Nd%+gS?G+IICUlMr56$G>-$*[[OM"ab4XJ@e9c>e/n1etZ)ee*T:sn;4@jnVK(6fg+<u2M
%(;Ft>X$PA3b"f2).!\"_q.miV(L3R\%YtTVgI31;QFk3%/fnC83Sl;Km6ZrAD*.,]3oMm*5T'JJ4#Okuk0E1b(VDS;rman$;]34-
%_*UeWjH:9>&oa`d=aHt0`hLHSHtbc_W1/5%X0(;WboB$uK*TiSfg/CNlfVVe6>@+&\ci:P1YrKNK,K0,rTHcUJC"TVOqi)+`JYpn
%;B=op&DbBhG0ZCtc[lsS:/n+fcB_pi.+`!bVhd^u2fVS3%(%U@H_A8daQZL*=gMApacek3'CXJpfq*j7.%#j8hu$"a[TiO+^`=R(
%Mj?H[Zr56fKO9eX?'MJ*<QU"+$fT*Y)`*a=mRk.+O`4QeNi&HoKt3!YM9_r(abYso?fab,(5-=![_XuB$.@38FCo>"EO-O$m1"K%
%O=MA[<]!0?d/jRqZ=C*8%!U@4lk\u`miM@&(lkmpo7Z_Zd*>;h]S+5`+#A4LAs,YsL`1Njrn0TUlne.=`:9$J)\EAF)+Lb6rV\OS
%2J?H`eR1IB\kuS\=mTJMpFphI$ool_4m^F^7mZL`/Xe%U</S#%\5"=*lKE$JC`1h8YL#c9e`7<M0J\e>%/kJpmH)D[1*OY81F5G!
%*8Vqdqi'M;J754@0$3HG*&9iSk=NZ9N9#<m\QYbi)%<i7$'IXIHDgO;fYa6Aaou<a_>#)0l@Pp*k^k/.ngc(6dKPZFerI<7[FrQD
%.Pjud#<IXkH["A]_GUB+2H[r$0*GdkmeKo$1JN*4l^W'/bA_KsA]2n`E,M&g-J3T[$uCoR;g8fZl#'2*%s07UKYW\7Q4:1Y1n;P*
%RXma>S^WQgBf;:l&VjVk39$-J#JtE>!MeRh#!**2]VW/`I>KF=]>j*;_n=0"O"Wi6&,KtLW8+od]nVB7dfiI%?t@[4;'c^%'ks!;
%D$YHC7YJ9EbM\FbY9S544BIPpVn7D9\3Nrqd.)W1DD^Ce]aq_]*K]c]HQ0R$fA8*hdBj9<q>CPE%5a+UL+MEpk'3YDA2q/LKtoYc
%_2[g:r7]J.,-D?a-lhFiiVa8D*D=3\JIDig2XFh%GWEuq2&gEa^FV2aSTTNbS4OHeKEf$%)l]CoDj=cD[4MQEYmI9KJ!SF/T^0W*
%,Nrt<TXE*F-+"kadXn@$cFYLV#0cp@c,d"0P'gK\oh!nQS(U9$@]>Je&3"&6H[a#?Ju,d,!dn5-^#PnsPo#%+qDj/`RNOmoUX8OE
%87#o:>g\'[^:'f5?VAa_D8-5;NZQ\XhN.;&B%"b;:,D))4$9P]iunV8KraV'nNUDk\&1EECLYJ31(fgm35i/i?Vtc1Q@uc]T.AVI
%&hAGn.@_ZF5#&sq\6gH;FjrJaJ%M+)8<eajA8<7*[j.[i<nZ<7e""#jV0oC.j)jZA4A:2sZL\4Fh+$XG*'[=5&C]YOlL.[AOKaom
%oP@!s4[khdkFD`CBL5f]^l(,W]Ih9/7Y'3=:aZ\J14"@8Be\*TBT];#d5#E<`k@r,XF[%N@/&%F;K/gWgB)MU!"L,pe=GP0D]TFh
%Wh$kq'Y&P^AB+2;I^a",#Y]$b\V")Z/l(H5=`+X:W[EC!>LKQ3%u%1ZQC6JGM;PHFe@lW5,Ge=p$`*G"SIZRsAi&;tCYq7F,oo:k
%/58(+KA.4GUmPT7BL;T'XS8"Dj:$ndcnCN(-G'F_Q/Ll\%S`+7AYL<[Mi.oMTQLGZcSf?'"5[3r?(f*?Rjp`))8tc%H52=2D#$/S
%@rAVt]7H'2i0^.o5n>c+&94r3a"b8V\fGc/F>nB#K"+Oadt]AIOOPe&4CEu'B"YPGC&J^GR_"t-`ju/%rlfO6-r]L8/Mlhkoi<\K
%mh@^^juIJ\lPcDI1(Dc7Mg+#0@e4LP`5e*LU-\D0M'NeONG^2aPth"7,\RgCN?I+PhKX@"`*E5Bgk@dUf-7[!Z0b3#;kFrNGX:Gu
%,XqWJd&Y:0asl<WK(!&R"fZ^=Di=70k#/T02k[OuJ@K\<Ta(q)V,,j4okE-c;X],/0,mf_<"h%\H02MFhMLH1j?$%YOm`ut1E@8[
%?F$>+,EK\4H5ohWP-t72SeYo!eiEQV)AK.EdgP0Z?\rrQd!"g7Xr":iE(bhfget8LDbDaj1\d.J`!jA:$`*G"*R>PMAg?/9)j=+0
%%nf?uiFetm'n.45:AmF`_Wt(ek:O<AYn>]rI>h3@+"3A=c#+M+nW;$u4po'GqYtt^;;fWmRp.dF*%W7r9X]l??d)FLc[64M9/VF-
%3-E/.8'H\9]nf:qIXtl"_fCl=o;GK=TMb)1eK#>YjRJP02NDcII\FatROn0M5X+*g3'n=t#WPde&?.Np[U?urM`GEh(D)j,jJ/h\
%d]b,jgP!K@BnskTO9Ke0._'cu/j<(c=`sW/q?B1283ZSu?C!#\:[Baoa!Q+Ip!D<SOHmV%pf-#,/(0FbMC9?9q\A+n<H7]-CSP3+
%@p[lg9GH:+g/5fmdX$Pk#7PUY)/np@l^&>U&fXShQJ"FcCSf^)0loOTiSqJr4JK0t>QA-iX-W&TG8El<O*#fD7r3TD4?5^SmBdR\
%DbXkT(YTdl[%M39V;4pQJo6n*0#Y#%iCY$]:5%M*hD4Om5pSC$+E)M]@1*NTG+#^9aS1b>UphE"b_>l#pA$M(5+h"IdSmcgPiFnM
%G!eHOd"ICAKmBI+c++DM.%q'&eUOR*N+82aGsRJcgH*3P7_rQ]79!M7XZ,Hg^5t5ln^cF/O55HYT$qQC%_BB2I7EP<o"tk:'in+S
%8AhJKG5XZR^XS^C1RSj4.5WoCLULaV9SfHO+dt-W4eF=)Gu&sV".A73!\)N`S_67X$+&8XJhD^#/Sd(cBUs$1<+3AAkUPH6croUF
%`l]G6U])/D9kp5T#H?p^I4<f\R*R3VOOPd;gO]R,\qWJYTQ1XgG'iQ*DXP:+Vn"U.#Nc1FI%d$.[mYL4"T`JeOumm6%(0Gc*5;=J
%F,G\8ol\l<Ir'O)P8"4^Vf*<3SUA9,T6Gq%&D_PWktWt?4JJ=>1"mVL3W^`9\f'DK."8$KMPi@o@Bl<Z(IgTk_005ng!;dEn)7%h
%8;BW1m$KG[(W)&R]%$!.gIEu8F_81="_h1O$.:O?F?Ei"Rn\-CW@Ud.CVlYb=bV;?$HH5$^^>b!E6OXm#YBeIoDMI@MhT4p5u[&t
%^`!KpUj.p7r&3c!,=A*cRsXgXU'P;gM&K@]1HfQ.$/0BpL#p`=?1KQ*;qTN2.f#R,%W_%",8CLqrGR>\>+GAi7Q\iPiCDj%s)^mq
%P-7HJ><i-W.sq=2'oP&Z,3Bl^65#WnG#>h*^*uN7DYG)%'oH/$-:HH?+%fdT1cn`,MeqcB+ES'R[fSj&i/I62S+:G?)R.Gama-52
%(%=P=gLp4je@S;7/qD>V!r]skBsM"&]L4dlm1+s8-:A<"H$RMXfU=JW@CZTK,.ZTRFM%55((g(K<OYH8B;Km[jDa7iMKE#,_`F5F
%j^C*uGT]Dggo]O1d62%s',=%8%VCdg78G_8d7s,eWP^#,_c?$3WVgP4HO@_2b\#9X&C,]t_O2k^Y<&3iLdJ'L.<o,=WILXPUqWFT
%msShp[V8if==U8AKeep33I`K0Tl=V)iMLaNolHSE%_IZu&^HG!'93KS&M!FWlT%6UEX)eJ7rMT3Dl9dmG#'#CR`8F2n)dWfBV%>j
%5s7%N#Kkd04a=Z_F\GO+=t)Z6c,Pu==D9RXb0J@cW%&jEEA4P0,>Sfir12XU1spU'r"V!DYf16DLuVtn]Kt^bHTf)9q9iFp>["(P
%9TgL52T)LR9tA&uUb1g&=JQW#r<9%:R?g3O3)fT^f@J!^87@.b(7LYW.fWE-[ckKNLg\DbW]V]l>!\/o6!/)0kf87gCj"]YR%+@I
%,%^ss<cXX?nX$Eke(KC$(dQH_57h_X)=pjX)XpYn4\N%?Yl<k<:ktN:j<B5]h=?j05ZIl;*L>_T1"=G-NjA_BHOar=)1MsT$fL"^
%K;AD(nk2I_2?d`Z;T5ghhZqaL7ik.7LQI1slY^u-P\*SNajKP`'[roY.\6fmD^c(j[YMDZkN>b4[."h\/s+].hZee>;m?QLi_K*:
%d<Zg]qt0LcS->Z*;qtT(rAN_?(c)-C233rHo)@:Y`Jc/ljbuSa$R4H=c-A1UWI+h8n*a/3n]UQ)p3AKkYIn(18f\bHI3Wh:\T7SQ
%ETOXeK-D5HfqAb10r_pYX2GJ%amHe`I&*cG'@3E`<OgPBXdfd!iri4p(OE&llq]!#fQSJVnK6LJf_+[.0;VUTO<U6k_Mh=WQ:isZ
%GjDApPep6'=0aSD&4u-_8j&'"YLkL5i]O$Y#i>HboULU,<I3<&aJq=n.7076^YB)$+/jrfja0=)&0>$b$GFR.>)J>i/V'K^=qu:t
%*O80i$oE^XrhJ638RK['>1`FdH8"A9eXZ^M8qufU"'m1fMg**ZIA4e(KE4(F-Pbd$+ri@B4Ig2',O9+]RLh6Oj-W]jGjigo@l.RK
%?\@NMI/I+`I^m4)mQeclfUs=8m*`=[<FG&9\%&)Cp0E6PLFA*Xi#s+!psE'2UsS6>G+n\)<#hNUjL75]JL^T:/8sN!G']g&C_74!
%64&g1RcCPI\AppKMm/rb1b0T&^Vso9D*eWUY:]`,X@$E9N(,NcKE]gqB&f;ioc=\n8U[Mg%jp;OJ5>Q-27G9cI^f<=lL'rslkY`W
%OY.8c!C\)jB+"5BHiXsf6MCZM[f']/iKhC!W9g\7(c\,I(3_#`-%?b)?Xa]nrSMi^#+H0oXd0a(ii?X'lF^[tqY*7u9+SV'm9L"X
%\+!;33m\l:Vsl;[RK'qX4u3C<Bn<YF8`TWD\Cl[b;]cKrn[(CPlZ555/;XX(<c>&">'qqWV+?;9>(s0:Z299M?dEhfqJW4@njMAI
%lu[)JPu_-$>9ZL`#[t!7#Tfp.-\WW:@[b.2&@\'9[asc#p#<d5Foeol%[_*?F<KIn+ki;8Hbu5p8?1[2YBq_<\'=70jd0p=g3;Ge
%*B;M"D2*\@%F6msJT_RnH^[qQ<7aGSDF5$&3a5gMcU7]?&!(:iSO-m/(*"[R3VtU<,SUX@r/kIOQ7V.cqhS.F/9skpiJfuNk;iGh
%#HahJH4Y0A;gKmUd35l#1(Y1U"2@g$dG]nr/`V0j"g^^f&TNB/hOsH@6elLt>C0iq?>C!D?ClHfFK.ca\^nOqQ=FH6-,g9P/bRaa
%OZdcY`G#IQhSo($9D6R?'L?libsCD(KbKoGRo`hqgA1G/Z_)1koe8]Oe^OK=mIKFD?C5(n2=o%baF\\@]Vn*;_u(#H43`;sJs3PY
%@^eYX#rsT`LAu3W7j;_03$At.SqfONKDuiF;>]2Y[ai!D,lqR$V4b%$V4$e04B1e?gRo/5<V!DDTFosZ,s9Z*%)ZD;>W^\d67K>k
%4$sH%?$A*Z*2.?#Y<Fr(OO3A):FM6//IX6MNm[k\L4A)Uob]Bdb*>)4#J9kO"@[4+C\?[F(^G(_.7/nt$Zi%!gXT)/J;2l59FC,]
%\8.h)a%cB6Q\$CM<rCO,6&;eh0\6\%C;<FJa:ikb8@O+bM*V`b5UHKVGuk[bFRiA(4.>:j&3-PlBOj_DM4:Rq#\.c<\HHE_3j/+#
%4+Mck66lrL!2m0VeWZZ<kiJA%@]/,)o0s:j'bs;9$QZE]8;m69p3sd<8hHXU,LcTn@p1L?:n[4FMbH$9Ld'1=E6Z<IZH.'=*2t_&
%GE@<Pd54hFAUK[<+t\o-)K\/KLmq,K2tcEU*U,mA4DX6EKCNHK)>tD48>NcS3)28^L@lq^<pIbY\S%eUp%*jmU'(\^IMgH8BeFY4
%Z>#R,V_Q32U.m%ahJf1qC[T[_U"D.UaFp4ri>?7ApV;W_\[8$lo5&,pn96b-ge=PhbthZUcs$dr&]N0@i-8[K(<P&TNCE+<.-h..
%YgsJJ^<CE2G5JKJhtDHmmEt()lIWMd$s`]>$q(16Qs#`h'KkXM7U,P3dTgAsQm`FDXpK;6IhZ&WD8*c.SL!bsoib8('-3g*>MRXm
%JMuY*6T8=5K!HMIW1_6hSr,l@=r;rc]oMklgfq1o?oI1a'c0F,%6>Rb`6Do,[J+C8^e]?u-4hVD1GTXCfLY;3575OX.@C!;kd7k%
%MKj\i:FGeg".V>h(NGp5:tBs%)/:$j`se*."UdK*.?4-td]e!JS5ntjR[PV&R.Ot^qF"?Z2-)=5DP0i1%O'&h?(^4dY4/<QI]Z.m
%(/7^AIA#(O9>u1CC;#YAbn8LM[\P%KGqeCgJs`prM<r6j*7[g"^J$4]#a%]6ZJb_1rYur,I:eDOi:iA,ZUb!%1C-WsQse0_lpW>Z
%osIstp*,m1:Q^[$TEt"lj"*.-<Qq4ZGq)<(-^ST5[4VUpGJ#Qf"A-9n`rh4/d>[hn>&WUto;[<,)VWsl-9[_SG1Qss,_JOa5ELco
%g9od^+M'M(CUr_J,9e_$<Z?-Ehip#<n^cDA,uR6JPCcbQ37IY*BsDcFprY:o`]r*ZGF468ZB?$>'7JV:k1V4o/SJS4Z\fFWostIl
%TY"L26QG7r@a<Ff$:38V8(rfB^7AU[KqkSlkAcX2s$DVK`$7G#<T!sb,\6ZGqaCD)>_75d8J@hFB/AH%_tVsqPN-J)90m!6:1Mo@
%GM;9F`;=q-99-ab=kgJ&9R_4=iW@5+&pdZ1.M[^@ad/9>*OuXBGedH9RPDdp[J+[CR,"KdknTn5Ya%5Mk)_^/&+QO\g[;UrH\8Y4
%F)+G]-V/PPk]j)r.Aae!]_Z\OlS##7W/RX_qe#0seT$IW1HXL91K=`o[2%Ie.\ddfQK-PLkhsk8pG]?.h`>d7QMZ"93elBLI!B*s
%b'T<!MeDF*/VqabHX4Pn;B6Em$o\bW#,Tg"UK8LU(5uj!EGt5m3a$&sEdU8p1eg2i+*2##E$(:\n_*8RET[?Y0dS2'$/rNk+:ad_
%4kaE]S."fKYGcN(DtD[>0BssO(i&L@GlH^*iZ35;&>"d4:>gZFY!<=V+$?De`R.2]%X&1i!Dk,[q%aIpdeKW.n3=AA@N2O.kt"41
%G;9?t8_g7eV)7pG<:!"?OcT,f]>ML_9Lo+n14*u4AGMl_d,k!U'<V'dD<@GcZ?Gj0Y0LRR`c7YN:E2\3LdT#Edk/Q:9Q7mu%BSNJ
%<#FWaMP7i.HG='2D8YtOn7'(5Z_9>qe=^pX.0_PC)PE+30L[_)"Sr[_M)._^e+Wkp8jJ/<Z!Hm\q&ilMqaobWRsALoB1`FjU.Ck)
%?o(_'Q$.T8ks?At)Y!iHi>A:knd(^//!/6uE'@J3Rk8l#lI5[G,a]AJ[)>L)VY#1?%JMS2$t>=>Ek8;9_BW0[qMDp<gk'*-MLt&f
%;Z*;s[GH]L#*LNrg2\I.b.(<e=nAF(qlVcA,`Z8YFS=I-&JAqB?),:#V"1IJr<,&rKV+u>YU;H3RAPABY*]oY+\L\<L*KY`15cad
%p:dmA-o2XQqjI1?+6Xp,n8OM^.*PjHUaOl5`hE/7NHC0D?ctI:dcLS"T^-hQK\+atWb;5Aa*.#[#GPh&"!@rj0_*f`&*%AlIbi3^
%f?kr;YY@)@,A(A;&^ulq6_DL5TBbnR4"6Q`Cg"^\MPj@0)oL*RWOQE2&%(1K@jL7?Ne5]<+n!%W%s&:@(:8AL-_p+lL3E!_jVA5M
%.K&_p7uE3dU6ddQnj9U$_3q9Y],&.@F-LF1n<_8'[RROXPPRPqJXF=+P/L(J$b&aj"a2*Qi)'WO2gsNfg9#.VT/+cN4mr"$qsGpi
%n_aSrFL_*SYaXBHDbg.4W6VIIYN`cNUcPhK_DAn%Jo5M&f/L'8+UneGCOt.SA8)K"qQeFC@QXqiDLjYG0"a,ICE++Wi"'/30V"Vs
%(IgBajT>2Kdlb8r?BFA!GoKL6"nf!)MYaPjo=0Zek,P'k0UC-'DedVM=BD;N/a-WpFs?@-/O3U6b0d\(N;8W"$7:h$,iSl>]g:f`
%:3"[?\+W![6(W:AK)n1_-o^cj7VH7+L-\Tp"u*s<[B_Lh"[t,1Yn`&@\s]!!EU]R;)5>VB&:]%1S22aQctD,MKt)u*H@sKJSDp7\
%Dsc(0,(G<_T#IS?e<cY"9mZ1B4eE>ue)r.-V[?%skNcE1\8#eLXk+/7>:lAG(-HG"WT!tn]g:f`L:Goq\+W!;Pn<tY/mAJu#ob)?
%ikoqg'4Q+$'Eo<CBU(hF28'R(lHE8+,!3n4KfNhdNA&2)$9Df'nQWT(B56A<=p@[sRPWl#TmH.pPY]?uZMD8L/GM]?KbDkNS<]--
%QY(nG6aV*J#q3AKl*0[S[bhR@IF)AI%mU"#iL)WXb0@O%'sJA"J\E]Ob=USh.>T*$SAHF%OOb?bl(dS?9>htu*3<tPhLYH+34.T^
%8d\m1hu'Ai=*g8X:of_,pFmmQ8S;LkK&A5u^^>"DAs[`,_[?F\5s<6-J]gWVp3.L8aqu$&M[;dM3:a<gllK:;QNr>N+G@RBC`+G$
%qXBu[k((+*>FFdQWaP!pWnDL28Z2taBU?XF>`KBJasb[s'bo7N^&J^ZE.;H+LoAkO[fo(M\J1'EVqI'.YWuB-d.qobg2+Z2>HK:F
%X_bX/kKLpX"$^Q2nNQoAIIH<FVat,d^sfTRLbM6F6KDC"/WTU1&&g3`c>h&LdK3"B!U%o@@C$.3L-?Vk_@P1C0#9L$Z4+OEI64K-
%pkoW86\;Wr-s:4r**<MipHK7F\@7ii;XZk5cpWO=DJu6lX`(h.g[L%%3Z*^O,hcJTH00jOhFBgPKO_-7Jf0[gY=3(jXqr!M(*jhf
%?1`:-T&"83"P4AL75'HG3Wl'bTpo>gnoh]nnuY^[1qiH`,s9Xc&ZiZ7N/k/@`8@:t<CtjX-17(IB9)1;3&gbPf@h0dgjh@O4q%,0
%JVqM"T*Xh#`D^`B1n7;1\l)jhanp>2@p/UXS0>2![VMD[Ecb4SA7o*(o5,\g\fr/36#kff-UA?2/`N/KRqE9fR/,A$lq>1DK04iI
%5uOo5nUMg$1ul9_%s'Gna_g`r)\"CnA'mkn(E>:#k<oSm">>j%fEQ47SOP$Y7#8Ggiikt.cAZM/I%*EGCSm<.(_Y$F60cb*2)#MY
%@m>nd@9`FCGaRlC:`lo@n!q-TUW.,Fr?XL98,)cm1s_pg0a!m#a"-^P1!hrb@=-i(qdb&N#hIYOIBn9oab%0MM^k'1$F+ZqVLG]\
%#odfUIMDg^1PYO?].5YSV+L9d*,<Nc(3F74Y%.e51,F?:;3'7Xik[CZNnb5d+F+o#\ce+]Nf?C"Z'O3(APsX?G2h8XY]<g@@r5,F
%gNJUY.IQI07\7u)EqHIta\m*P=T0L^U8?_>o)Yc!BZ=8'T2th_SpPU(L?/u:k37JJo>rWSqNq^i/@:0Df[&1O0:8B3:I24I6COID
%DienL%ku$1.>K.o^7-ZkO(le^,>qL_&BnLk+kSn!jJ6n)_W2<7q+ZYD<9\;@(lC4t:99-?q9+2sO<ib1ipK"AL_N:I&i='-S3'$%
%?Q\!C"CqR854:f#i2[A"]Y2[niiHFJRq*39b0bg[%q$N>[]_rT??W#O@@=jR^QGu)6!rdKM*O`(CD`LYp4BpaH>YJ\Ys(gjGt1/2
%DV`So>,GhRJ3kUZ&>sUA1%"/#dXbLLr>O:>a9GK=:!huD9f7-JlOEfNF!s!CTqfMYDXh3H'6k5ZL`)JQiQKMt[ir$_F4]U?j8(I]
%#c/E$V"X%<`u$Za`EgU")`<,QjrPEWWm'e/"C>&F0H65m9t1j+CfMn.N-g,mFURhO(ZGgUP>US=gsrIfL*"25Brs`#l/9A'lUPXj
%@PDokJT4i6!tXc"33-k;oS1.ERm3?Igk:u=;au)3*e2ti%#:9dADEaj3[`=H0@RuR2^s>F=UAVTN:]c>AL:WD8e(9FeSe?\Phfu0
%TE1k"J`]=RR/,t?-@U`R\BhsSWf=1@LSt%f&B$>JJ^?bb;+s6+8:b%C0,4]aPkSbC48LjJDrur)K#PY%Lq#]JD8>sl+`4UFhGieB
%9M:sH%tQqQo6N,=/I0FG3n:%RN5ThNl-t=SfjguD&1:$@G<g)$9!a<(>%]Y`kshr2Jg'F9:2g+hqf\H-5"U5>fZdt:)Z\V7AlurQ
%po^S7[Pc8FQZl?q6ng)*(.?^#KVp?EOG.KVa?pqi%e=I`*IkM#/fHEs]s[Ir'H<D.Vd2EV1M*</@`OBSbSh=NV9iH9Rb9%s;OC$h
%,+P8LG.j:R7)@]$VMYb'cKp6WOj9eti"Ut1_3[d@H3`GJk6'"]dYo@;]tJ`L/M6729oe)GII9S2P!Ml5nu"&i][ZLPXWhUZct\<4
%.Lrf[>ZrrqIp4K0Y805`jIh;:V"Fq_%iF;<1Z$j_0LcV747b/5A.(A0q:Gfmkl/"*5B)*>c)rn</Q7s6(_.`<N(H@#89gguAV5A7
%8Ft-unL.H)dS8d*dL(\g-_&QHj1huu#),1eAtcV]/8@2?.Kr6b0=+QmN;tMhKP1liGg[d)7,_a0=g6n2S:"PJG6Yh4Ep+#$Wi*'D
%g'L'cZ\>d>J@C7s.1FjBA_qBLSDk?s%%J"Qmp*)h0[+NYQj(O`Z!&`:fHL$Imn/_[YL0XkM@29,rO-6dK,.[5LUb2$])@k>-c-Rc
%%k%UVEA$[Q]rEbSEj8cl\Zmmb:V\l`G0kp,f_5P`K7Y:+^kP]CV0-kXd97Qq4`-Y!c%7/Sc'5(RW`A?1VrG?(&$:7X(BkImdqbVK
%Q282=[7Hb-Dg**dQ#JCTf0G=8-Lt@0nCX'O/l3PZ/+m[#&N=TOUgCS9Op@K\V&;YUH[Ab>i..(iUmBjKlF.Hmc)r;h.RQ9BXuonM
%2R=q<S,"e<Zp<=_62f(r`VBsuef0qsnpIcK1h'((C[K"Fkub[8']C.r21^ND15jS$)=*tfY>7&3L(p:s2=rdj=]OGmp9V;BmA-q>
%iqP62aRft+n,@kYfn+:H^OE$gXQQ"4nY!7[]$lO"b<N5@g9K5p0I*Dk4\a@tM5<-8qF2R;MmX<gO;&Z8<SScba!n#('8jO6$4li^
%JlCIkh"S9#j&Z36B#q]HeL56dK!IhLV>^]XC^^<;8=iFeZ+Qh]Y'BegWRh_d[/7+g'L]2$el8.^m>[e!!CbdW`d<(43c\Ygdld:3
%>.1p-'T,tAXh2+^D&/kHdgY+bL,M].]o:`<QVds.NkY=6p/1\-&=.5jcYo*E9UXn9fbc<YhJAl1rbu:,VqUoD\$EW219QJ01Rp#V
%2N!LA#YV/gg5IUsa3*I$Cscn_;UI79UM&Ik_;hagANOAe0>ht](l^A=6Au:@nl.r(f-TDf'c\8@qG`K@@4MN%BFJm4Zo<Ss#7PUY
%)=Qtkqln&Q6FSMOI&$-+k*5>*"8P4Ec^mkg1:qei?$JrM;*3u&_KIp;j^is+TTh!SfD=67MR176T4?)KP1Z%#g]$]>AueJPNrAUa
%q6_k3=\2['[#Wig3(G2uosUA+KLii3E>u=kUAi_LL[FH]pK-iHC_'hYhR)[G1)c3hq0IJ,(*l[%'Q+@N4YPg#Sa't'Nn.VX"m9Qh
%iWNt6"<A"$i^P`\g\]T2MlRJO=-$no*(;78BRoseO$f=lV"9m4f`B<:UjX8iPJ1(T*K`dh)^G!;+lH/fjQZ4#%huJAAr;H8\_D\Z
%NLl)*P[T3)'JT7GGd*]TT-kX6cn]:2i#%B6[d?M+/XfB9mq'l:":9X17,7"Z\,LjsZ98.VLq[HA:)Y>h#@s[&3b4Ri&rJIQHojY7
%r0hT5W"8!')7!.ZN5Q8T8GclEq1'W+2WMKa0k='l]:egHU'5#NpLC?\oKio-==`S(36&*&(<a*pWpg(UpQ6LdVcF=h2/,d_8%G#n
%2U4Ts08ed:7G1#FrO0q%3V0\#:tYNHiW9%GE>+aD5p(k._YusR$5t7@\_V[kJh@[2>MXb(Rmk[:K^a"0Js6RnCIUP5X/#]1c=6rW
%-DTZ?cp6s*8bZ\t<`-.*7_d3HHZqg\Vg*uGffmb)Hf&`.KCIUIV:<u"HuWeB_TmE$6C"YZ7;/?H(Jtk1Qu_i,NjNCqb[4tqDb6rm
%dG5FP]N,?b1rcPMqe6=5AdcDl/b4B,$JQ,F9R:-V?XPB]5L[VGShJi"19ArX-`iNU#@J,(na`)U"?ceW>Qb)iV*&85T;h^eB1COW
%RV[9i*\B?b2+p.cptNf:/\D^-^g<JE%EG.Nc\-_EXaN\2C?-uXRPB;ZS91L_-qL7'rZ'%2X'+Utqg]jU,lBe;DNq[dmIT?0AJ'C:
%]qt7=J/'&f?<#NM*iEZFW+Zk'NW=5DN(srg&K8cobMaj`JX?M40!ho_3^O4.3;@9\*luCf*U)8;nQZ_N/Hq'Ei'SKJ&Z9n*S*<sQ
%/`R(GEO8(]P3pr%[@lf[6%=fAh:q]gdptCMhiqaVE^NqHN.u+G=:W5?_]NWfheogEW#b]&S;]KrA&uPW;FdI):AY\*a0>RPH6P0O
%dRFK<NIoui2aD_@NsuL#ZeP$:QNDn,R4!WiZY.LsfAirsW-gW_:'oCVH0i+6nTqB=#Ra[FiDcNr,A8-lPsSXm!LTV8,a"N*pF;M]
%$$dri+teu,/(C1eUn&*5lIO\a6q^$)LuW[2Z/k9$6.`9r?n5bW?Rk$&L4j3YM&ERd#?t.^i+n#Pe9b:?2]-lb8'r8MFQnI/"NPId
%T+0?!bhi"\a9]fARg@'J\0@bBP8#S13ZZX`p4`4=oh.LubHh>bjQ2hKT9Kj#_9T+SU<<F&Mqb5&]Mg_b\l-_&"m&H/3],=Rk&JnA
%1#8Qc#4cP"=*LtnX:6$>4/AFhP+4tK?gB5#LJ_5,kl#9;#g[UQKR(BV%pUZk1Tjr^V;DW9VHRBCgc^Fr,+'49I@/I#CthD4DC4OM
%X!;f:\3#\%9W$XG8eWK#$6@G?ias^t>5L.-1F#)JG+2!SY5Nju\!W_4@]sM7H(k-k]>?Sd1'5D\[\e[PZgU*JRAdL))77hkc?,\R
%5ISG4d+[iO"47[2bS<%b4N%=.cs`)E_*KRUG;&-2nB"I+&=0jnkHI6_g[.Q-,E-'/^ON-62UfBO0dl:@,*XA5nmd+r(aie'CYhV/
%^^[8X\_b<G54([4QlakQ]nu5)4dmD5F3VQH*hZsm!r&#>S*1,5=bJ]QM`V[gK4(?p_Hq#X?L?rK#1kYr_=c^V#GcE/Nh:GF%_@\>
%$:d/c';cD6Bh2>V/=Z$Ff*Vag/*'.(?#cfrB,VE6$K4`ln[(`j_mR(GCkoJ,I\n8rXmL(C\[B"7fD=FKE?+p0q2pO;rA_jYi2Im&
%RXZ*1pf+Ib>:.B<ROi3jb5t)u_lI@cc8/Wc)_6^U$K=!bLkp1U2B"R#]1Kf2QnTtKK0Mk.$&saO7/0(RKdkQ[2ckUQKU[3Pr5A=!
%;tiJn7LD4#W>>K#RAuAU_0BFnAW'>YL"Y^23%2/qB$T3G`I:d9.hmI(jteUdd1>lf1i9^MmKZoI3tet"ENKi;+gB>eYD_3J>/%*M
%LZ+g6kCbo0F$IQiSmcV7phjV$ZTh6-mj*7LM=(Nk4Rt?R+H+6ZFL*b+ZfG/?i0U[Wh2\nu24SIT%JGW(&3t\tE:&DuY'TKk6.`i5
%rOMRg1R/u889h!cZ;9V9`$[(U403^DB6aB2G.MZ)>SGE;(f(n]BH?,g7sA074lG&-+K"/nZLACB:VuA>h!Ei%)Fj#5(IueuMkGem
%o@Gh^e3qrRN><mo,-L[^7%]&t-TG9nfi-M8*]9$3!0:TOl/tn>=WipG>?_suP,#(q!*k8APA_DhV:-A1b4TQ)deb4?O:5Njh-RXJ
%)Z_Ia=p]!oNu-ni)lBid;e,>FSWmRYBo,6R6O-m31'5,B[KCH3Sra?HkD8&QTS#f,<;R*]M)9]9/>GO$9FPufF'=\/`T$%h,Vs#)
%ou-:pC@&uiT7P>\BJW2kcG2r-i9KQo9sTTA$Z3l/]:d/j8(=LTaOrL)^F`8Yh`),N`UHX9PQaJda&Y_[,)RE>2S;9$G]WnQIe>s;
%E$"N=5%1S%l(nGI"pgYu51:\5od"\0L3u2P<Z?(Eb[>`q6r:"'$@%65g2M"ZN4>(X\rqe@UfJ:2-&7.dHE.U3Hkm-.'`V=7<`lEW
%n:.*7iO`?unD*EtD/CHf?)2fTK<"-sn4_FL2OFpD>\IgpU5,$*/iop:&IHd*D.,d3KTaWg6D5l>T.YE8<(&sl[0j0'iansS@c1ei
%B;$VkBYOQA&U`LKNo.SmV0[94Uo.S"6bG-X>H!XV;I9]SKPP_?g2JE(W=B_SfBTlI`J'%W&b$'EeR8o/S5T2rJQa!n(2!UA9Vo<Z
%WEpP!cRlGf2@c^dR653r*)m&rJ4Fj">__WZ:UfWQ%A*!i$S%<,^a$KlL\mEcXBg[4SiNte!pUHCT0L3#,B5,0cb.gD:aMXd^E*RC
%$-H2[an,l>:O<I_WtQVSN9XA37"Rq-;rq<MW:'9tp.KN3(1-_i,#mh8!KZ_N?%LII.C\U-aI^+F(K;Z8J4Fjb%O\<f/ak9YeofE:
%rV/p[ZF`e3b](_ck*6`A^6'4h-j8?M.!1i\nj)IB*>2\>Eim3==jPp:<[^p9+7taJ+/t'FOR!Y,i\7LXXkkOtF:j,OHY&!C$-uQr
%kTNN1Je=MN+S['\NF&qo[gr12\=(kUG.e<J1VpI5m7!de3b?`M;XR2.CeI5c9-V:bk;mK)fP_lb4X6%X60&G=\_?4@gIcEhCrT'K
%rJM9)i"a%l^esDcXEEsHUYtR>#Xr!kW)d<4co^G<MtTJu#Aeuh_81L<5V2S>rE3n0?=BoqLpLk=3)ET@Ob%[&XCAIp=B4t%Li1WE
%p1o?K,pc"M!p,aNN`Nf7:cq&b'[pYbHEpf3Cqb+aBq4lJ'Q7ETpF,qO(m.7LoOL5^5Ju>LUij;]f4l=SgQ4MjV&9+3DScHHV#fbs
%%9^"<D_6AmE5S9a:"`1IoW"H:]5ScFWD>#_OOL"pG9e20.s)L4PAZ'Nlt.mm-J][P7NFrH;%VTpF<QAuZS(-C\8Jb-e]ou?ij[0l
%eg?*kJE8<q<%S=)nlnqF9I>I17)S/G:P(SoO/.LtR(RbWBBDCt:DZXXHU.oR]>KCqOKYk`>D+\(pJlE6?$.A,R^kIAdm_-6ptP[9
%MD]:Vm)"bH:\&5NjGY&HPJ]!f=5#6M._Psu2:Q'iL&7XLrJrn<:'*M_(=fc+]\:3X"f*kV1Jg#KJ7bM-^3&R!HO3W#LJl1.H`$'s
%0n0/@A2$f%+N%3,%$:7`-+1Yrg?9P!-N&J6emIW[$4q3pF[54,*s9"V_TZ'hB"p#6EIkLRT^r1Oghau7HiKfS?o$#pHp]>:KZBlf
%$?\fHA[[moV6D%O^MX8ILsK7FqR%0a>>LO'B47;"X)R-Pj"$/B<,]$C42*h&M9,NsBe1K<q=K6HCsh-+@?@'4)S],DXniGV2Xc0V
%c@U"'_mo`+Jg3/(UlBRodtu>rob-ti"FZ]-(lcg4'36D2S\pU.GGtjSe<%c7TYE&;2,q2-=Xhr\MVN_SOXM`Ug$/14XFdHU6=R'l
%[#]<kON0*61Q;D&f=N-EVb#EcfSrG6QJT6o!Z-`P?9?;b),@_g#sgU'-7<]Di'iK(J[cu]_KS(YkgqpA59#JWi94qs)mW#*Mt7HY
%(Va/mVaV[U\cJQf#VHprf;Zidk]4K%Iqu)R-u.lu;&#3_Ilh9XN!0b0?0:#5Obl(JXu%i%F3g%I%(Qi1?@JZ`8">KEF<0VDRDMZ-
%1>#6fGQ^_mrdh)AdF:ca/9FeRp1TRJiZQdLf/Plp(bFC$QA2#i+E<2L3]q%Ah"7c^D't?'E$$nMhC&XkbB,;p!bo>6k6"J!d>YR.
%r_9l^WWUgiY1kQ#bG;l1]AC\J[,=,Pp2mN+K_`cJp6s3u>ptZmY`R\!A^RqZb3`H*GT^?Ef%u^E#U<s7@&>nL;XZr?R@\(6:*L,6
%^ETP%n8HH(InTWA..:GG\U?W4.Inc+^A^A%p2$E4K/U[/3B;!hr4#r`:8*JFKUabI@W^bi<m^2t0Mnp;ihc2(WSg\gd?.1&NMhK^
%KY]T&@R.WCc*bucH-h:NY3&kGaYkooktcrs#9Y75r!0+A5CWQ):P@FWs1cS"gK&2++&%12*C9Al)b"((`3i[RnMA!VX$^A4gg"+e
%iBT^P2^M!8M^J5jgUDXEXY8/oId"AUfh#`h5_979Gc$EHPNskj%=3:gY`c?BZ;CN?!/#9PHdmak9,5#8Na[M7.63bDOF#.bUVIZI
%dnqKd,?HncDL<4QpLkI(KCER;o$9Xh_m&N5<50#FdcsjL.fPinYMT'M!tobLT_@@DKp;#+g)j;$3Ge63[]'-nR0CiY=J=^e%'o3I
%O,d8K*sJQ#%rm0-hOsH@6elLt>C6CEp1\\`+fD9r@8eqT/,bHIAJqnV-WAg-pn/-5GE5Va7,C^WMDtu]#ZKL6H]%"&(q\ok$)a_F
%VQ"rW6PB%!d)M/)BiVJ]BZHhlRr8NEJ/m_W#\t]W>7'QfY$K'`F-9,NQC)N2$=gVOqeOpm[/KWYn24>_DU<BkiY7jagQ;l4QJ9T$
%K>P@-hi,iEd(7I2]h!CF3%akLi5X8CgNfPbM8D&HfH]eO<YuMdRgA5R,[6Kh=1"h@->b`UU?3%%Dp6V\qB"rZ9+4htJ]^N6&j:U0
%T./e<g/<8?*!EGJ?gZ4TQ;i$*e=8=C3!-qV@QX%nmH,P.C9MJ7B)?13?fLll64N#!DbCiu"\6WNL&jEKXhW,WNYegq7>RHII^#.o
%nJ%NDpB+Fqe#>a,f[M)5RMZgBq`/O%N`i():p:_V0UDr[f9`VK<>2]",cqc#n?Lc/^1\laM^FaA6c"YiM3`I?c3Km!U)@n:rL5-G
%LA0^:<K)Qg8V\q\5s#KIcd\EKihMR@[9;f\hGZ@jOiWK-'R-[ORd":f=@JCa^"NVUI[<1]CSeOU4)ZY+%hp0kE]qFfrF?24B?JTL
%a&o`16GW8AfS7+Cen7l%WBeSVf%_lkDoYV[n&%-WbcXd#qa(_t<S5HC,H`$ZLB1uN*]j#tmH1jblJ)ma?Oo*EL@_oDC/^"O\8E+=
%5g91/kr&/$P!fo-,c[p)@i2Q`MR@F_B<skn`Z2+\=A6%ikrr#`$2B&*?LAIiECtk;D]j91T5?mI$qR<md0]Fd)>'rZZd0"Ge9dZG
%qV,o`Qi;O<?f?\VFKp*ji5?$!G[s,M[-HX!Gh#G+Bo'A^_QL&IUMN62<>Q1CH5":-mCY$#5>W2"2fjD7^OK^e6lqRI001[NJnWIr
%7E6SV5B`*Fi0i><\et%DD27E9"HSjY?TQZ`Wf*Y1<3[T!OAm0<5$gdLNHf7+?W;"`&J/1^g\LfDIa6c3O7")XnBJMsjjutcBVZ]Z
%2P$-#k9;O?T4aN9Hk`)pPS!SDi#6eZj#eRMmcWQA]dGfOHPbn=BdaP]dDrp<O&%-O/JO(NYB<jtcP2MtF)r_UG'Ic4]O)TEYWMNN
%(7bQ-=:i>Q-Wf>I].(0m3BBLo+^Ct"gr+XZ.6>#`[bX$_j'.1Tl:26]2CLDo++j]b\omgc32qW5X#dUO;DF,1\^*+,kVkm2[<!.\
%/UP3^UKZ.NKpF=SlM2R4"?_UAEB&\-.hZMF#iCDNhjmN1>I?;5Ge8&Y]hgWAU?1lRdR@U146MG+e_DO0OKL\n$+-*NVkE2"R(mIn
%9iW,H<RX-<;=cK!lYk`V&$$`u_oUlh/_bp1`HP"eJQtq=SllF:ZTG%gN84l=[CPV#i>2EhC;H=:f$s#ip^+Y3%$<EsrA[.''+6[m
%f9/L`1s;BHf91;50I_+%/X6reY'=Fn8/-p-C,)&S>d4tG>-B0cQE:"#9#9l&lln'Def/]p@#1;sG\cc3]#LtZi!?iZ88\MD'NRWX
%QPd4Nj\an_$<:?uS^C)e9A>.9O3rb7,ea!g,><\?JG[V"cX_bG(*._q9Vk#HWLni5)r3'\UDU`9<"g,Z3F"fTEpFcM#mK.Q!\&f]
%i"$pG=eu3Z'=k!nY,..EVP#&0U!SaW$(V7G7`WZb>"T[b#8J.2!jsasE?/_qRQD%K;9<E)8>,$e32KpHfP;SP:df9C5ia'cP^=-7
%Ri&M"h3mg@'Q6it)g%%!fAi6DXk#c:SouZZpL+JP1<]-^SR-(Y)];:^Bba29/LYXRDXEdJ/!a^AWcd=@5\K)V4N]CQa!r[&<Z?-E
%?\k2R\@;2#PH<b'Dnf('jK#J5>T6uJ9^?Dt/7(4a4KuhbRe[5::jI)B[M1eW3BcY%4SU&BFIL0XQ6:IkM*8&8MC^=S2OtC4^<kAJ
%8?9cRUXDH@UZiSjjcE1CG&qbmmDW[?g$H1=dWck+%W?dW^&<8)#EOM'i=T<&`[Dd*`aUNC/#GkK6R^a=bH?I5=Zpe4qSUE9BVX?&
%M]j[6<Z?-E?\k2R\@;18K,/H7)4>1VZuGNg;a&\as$Vu)3kc"b1qlhJO(3GOO86=7LNtLiL_k!If$b8LriIIaackpZNad'[,+&uj
%MkWlC-Ats'1g*/TO9TKfZcK%QP3(F@jc51pYWu*ed*msFJ8-1bT/PIt>k>fcgUO]8o@mYE9+eu#jET?/F:n\5dI7n7g97`5&+erX
%O$g?8l@\*VONmPE:qT?pD9t"&?B<"dBq?KjnUB$&cEg)PqU"KefGC9q(=^5fWAJ..WlrS+Z:m&'2eJ+A$`);W*KM#bAfL/TrVJ,r
%m_ZW^15%$FB:#sBT./23luqVFZYZ=k_NOi.A3]@dh+i+JX5nBTB5M/D'jdVRFYT@Aa>2"PZ'[[#S%XCt"J`*nBpQ@O8qf)=UVa&m
%.NN&jAl3HkSe*fBeg`N8i6#Z"2'1LIRf0)qAZoXV]'sFrfn/20MSh7f?8jq/iMmutIko3)jc(1B/<*mEJ='h'-PR230n(Ot#KQ.M
%a?7bPZH[K&1+*9kR8\8s(XEK;*XdjSTtu2696P>$eN-j2=Ho:2-_ppoC4jgp$ZWKfpX[>(j/E^\3QEl=O$Z!B`N`#!pG:KqHHu@6
%oel\;[cLP4WD,%u6LHY[$ar!n\([]>K\!Ta;bX_DW7k1_8[[7rf-.;3Wk2sQKl'MlK:^/Xpjin]Y=H.,eO;oU(I>JD<a>@-S$3D;
%aVAZLS.LOgCfMmdFJr(@i@AXLd0BH!-Q&uh:61jMiFE4lX*O"Pi2BnMnR"7]9mQ?..=:Z"G)0$M!`^t--C2&$'Diq#gMm[D7>Q62
%kn&qL$`)"dR\&3_\?[6n?,q*mi=A#5_@"4Ap`THnBT3(o*A)sr1qho?&Tpk@D>CK*1.hrFbh2Ba)t!kc1TN8f/b3p)r!*&^g-hS,
%DK`)Tp)]jj%#jgBAjefIo@b/YYon[j_/R,SO^8a*ANPs[+F,Op%B60\8\[S/&APmS@N9fc9B#ZB(FpP$8q`HI?qMmX3$6FV`UhuV
%q69RSFJlY&aVHs6&t9C->%ok/:S1/$Oo@hrG'HoAeus:O,fGQ5*4WRMPW*,<4]6!G^6&FR>ImQ]3%lP^."`t[U2(CKn_9^lg%hVW
%c"<<nlNk8%X_U)-+ECGMQQl@Rda\j7nR9ZnA]p%5pU0^R_-;,'H#_;bT4i?AN:eUFMdm#s1*]^K;tgJb>F@:kG8cgB=/>d/'Sdk;
%$AQ%t;n)Gu39"jrT0.9j?4[@VgF=h;ef/]p@#1;sG\cd*L[MDlr_:'8h*KY:JS!HqT)^,T55G`>10uZjq%MUF67#aNp';^uOg'$J
%L^f4tG#)!e_1S.&d_;]b$g;d-T,9/@gFca'@aG1Il1Fe5i%CSY(t#n.*!kAVkU'l7WH[YW:6DokI6kB/h^gRU:m`Ea?&?)9%X#0c
%8)KX,]eS<C'SHR3Di;+j>&R7"'5bs'G;P5D%!Q)ip7jWNpR-KI^[oWhph`0T<'RMO^FY(PpYGeUi@RIZZj8W46Mnq^EL3c3[df65
%9l#Tnbm`'eNu>t40V)a/BkC[^G$m_]qJCkAM2-]b?/N#86Y"1t=uF9ZV,9mpl2OFg-r6Z^D^ZbO]WI+'LSkW>\%AQt"^=;/?:"FB
%JehRTWjq=70D.C&p<h[Zp_j;LJh#nO>Tg.-k^:/W2k0?ghG=P.[kV]RhpRQ3&S=4]`LBH_[=r3HaHslpbstAJl$6`dGMFHkT^F'l
%MJJA+0Hhuj3VEX,Ynn,S&uG(+KsI3SR8W9Mr+A\6bbIa:8i9XrU@G'_Kg/IleW)^>[hXCi.\YhLq?(M()P8V+-3,$UkrB\*R9bPC
%fH&$)6.<4fCZah?d<sutDh[WAPk6Xdri@&t%,]U[i]S=7cZ))RVZoeni=Oka#8<:2_Hbhq^m?A@/Uh]1/H@G28u7<_[3VOAh99:h
%agWN0O('>63.k>haH#UNr#>i-oZW'bq,>dO__3K]n869jb;"t1XVBoi8#&*s^Gu1\\/Qu<(;T5580_g(TJ+L=DLVSD#%`Qa!bDMn
%euYKds%$]0i<HC8RQaW7Y\3=8g..UDR6<&e-Je"<XbbB`cr:jWoT=X^/6>KkqKD7VI[PmQ:*/6sd+:WSAone)P=nC-8L)\>d%ppC
%K&gbV4^d6rJ#PD0oMF>Ef#bBJAX7A&EEQf]TN)I[T.C,ikJ+Lt@EjNnk>=?*6:l>W<=u[h@`T#T1?s_@&.]4?E##oWpDG.Uq;WrB
%EgW8'U2LEAB&VXC@'QA=$k'l:<CNh=&G*@sYH7p)#XTN$esUA0lCA3qNQ_R4?odUlTAo)7?V>O^AVM'^/Xfq`kk)(m:ALnAKjPs`
%R_/J3G6=/$&,nQpksk,f4614^PA3p%]1$#?VGammd-J.kAb$0s"Y&-jJp\L-[s:YcR@HTT)T(=PQcm]S-+&g%i<*p9o9m<68!GQf
%oIUeN,0\tskSkIZ:@X&j)?TbXhmU*=*?@Fc=G*6#[,r6#Ufp:dkr"FcG%s=E3V+FhLt!nr5$gdLNHf5Ube]/ND&01/&LTK+H?<k;
%>pr$@Vc6\Rj8TS\[6t1O&a*b/5:$6c1EB&m?>J3;8%R_9^htP3PIdWdh.\f@"l:NQ&#`fe_fN'?._g?&_[V>7_%=_LBp"*+$O8o<
%(BXR>/='@/&7UkHUA'P6)gilWK_IG9bpnA6?@*F1^5$J>S;%-VlOh\*O[a:k:FS7O&/-"baFd+AIQM4fZq+$8B.=rS,2nq*h!j%'
%(BK+*Tm3Ee][5@(Wt4J&pYG1^r=(Lo`f3;ddWcA4A/t+-"8MWXUmP3"=jPQa'-l8/4")jXoPQ%U#;,V6'HU2$>?ZpcX!RL.[L0R>
%KfpU+GrFR![ao<MM22_tiEOlf#S5Q]lkYe@EEi.#))asmU!9=%Ip!Nt95cTMJSddr$#9tnCi68nqHKe0RU&Z6])mGV`@ai/N,V`\
%R".>,/Uk3+GH@KPcSr.A[&YR'BjWr2O5WuP>7)F-qUEPW+;Ba.k\Ph1SV46CiniP]\)p)8^VY`WccN>FGMP8mU<iJQTplVl6]he-
%JCf%IWVo_/G*];=c6N(:A?g8n\uf),>M:MVOOVrp-gf4q_Ia24RMr4*s65F,3'<?K'#X+i9HG';L&mMd7Gnf"([efK^_nXISoFUO
%`1B\hSZ,rU4WjV:$FaML1'srrTj[[JkVXG#W$b'P\"%GMs$:D.%:QHuRET%9K>_a=<bhEs72Z,rPl@4UYup^@j:4:kWhlXtPc\m%
%2CK(.2Z39U7HK5H$c7U7G%4.CM>5g-%Uj.hm<UR8>Jp]nH@s(5pt@T`\@u+L8\G5r\(>Dg!L+9dnlBRoJ[j>5CAd]XN?&e6hTu)U
%=Kmk2Qj'^n2qH3fq-$_4Kt/Ml9X<`$(J>Oh,">E`/5)#imp1iP^S.Jp?B,3T=JYWV^CFGl$7H%s\9oC61?J1o27n$%!6I%MM[Bf%
%D?V"03%n+(Y:QUk_5fP_5OZcG)ouA(ZZp0"C.B9o/s+X'F?X)gS'?1nYP#p+L,PNo5F1U"?pM<=9Su7\9+6K2=<i^q"U/K$n,=iu
%iLSBl94*c*rmooO[3/A-*ile9>&Vd`J4#j8j1WQ1Hd3I?>Z<T8JI@18eCEA1p^e\m6#NK8"*qXdPH/FaW9Al_OPWXTPUAE.f=*;S
%9]l]O3pFg9A*App@k_Gbo?A0\=%#$+ejj/Y"sus$K#g"4aBPO_])]STMM)4jbUDK;9]OKG#P-:-%i>I?,EBZN`^s[D*oht<Q`D:q
%QpHKOiZVH;.$=[\MOOs%/<4O1',Z11e-;-gdZVDiF,H;qG3k0,qTM]HlZh*[N!nE:&18Org[CbKZ92,?:#%`X;U!N(:6An8"o>O(
%1[$,(:3M4!s3rNMD4,T#6EDkt?q7L*m$D7Y@u5m^;%HUbVGkMShiSc-2/:k?+Z!/RYHkj\lWksf;'rYQ:d5NrA,grtAHTJ,9r<01
%?o:S"'c0F,SMVC,MAqPb[<1W\WV70f&_(S3D)e+_2+BDjZsaZ=8hS$cMM;BW%2!URgf!HSLcjH@1`I!XhHKc#C?N=&s7G;7nNV2a
%BSdcXXn6s(Ll)L>FK't++$6<gjn9I0)$`/mar'd]`8AG\D-mZg(A<LB(lO3d<Z0p,p$t)"l_;kgl:hVXnl"2UTZqMr/\b;s>C=4$
%EH3S`/7/F-HV>0.9hkFpM%Y0C<cA)CW7m@S/3SY1dF!.:@T3Nt1T;Kl>X?0Q5/S$[d'lGH^7IMA"n?'sOinfE1GaQ9Bfk*LA=b!\
%@@?kj'>=n/c"[):H`S'`!ss[+,d9DTol!KV)?k,u=aSW+$'J$pg+5[kLb"s/3iR=rDbK=uGjHOV&P4m'HQ>4("#A27Hj=]Gm/.sY
%Z-THBA^oMunFI+d)($cXLHc6]ob\/>q(-BA>EE3GIc5hG5O8Xnb]'C'i$Tq5)Al*Gj;nc=[Q"LmeBMLigLJMJXb]o\?`QqtY+RXk
%YFb.neTTYe:%W:2iQXY=$K=[2a(HPJOObq(4Q%NG3u)HuGQ6:J>+T/@*iiKA!0fM8+Raio.Af<?oMt:kl)/I5J;M#bGf.m7,AYN!
%cp1+qEgCK&M!D,LZgAH+<]6-RXjkb->n1J$HBNktH7[Jkd7PdVcPEfu"5[5Xm@i`R68gX,@-%4&cV>k,UoJk/^)B=GBLO["Kbb%e
%Xl?Xs)/HpG^+FKu2*fcF\@6@V\3O59d.r28DDpOW^"s>,aobH'&Gi`];*0d\%VssH7T$G=(gKMjI4<7=b\[q>86(#`d23HS)C+oE
%A+Te7_.^h"pYObFcR?&Dk`.ZOIhl3H90C*'9fC5"-q6*h<?$ssE_ae"W<H)44V_rM/a=g!1J_<hLC5qlk`gAuic!u^c@XKS+n!%W
%:CA0GWjZKgn?Vjml"9@N'dkc](>geX_Q?2sZd_:T4nk>GO[lD3?qLdc21Ac4-AV*[Du6`"KM.$%eJZ0+ih=#H4SY$0hEk5-%@7]4
%K5(4:*qi%&#^pYg+!F$8mP4?j*3ggGUA[VK,S.)Z3'kt#68>mPQP"5V>R.WB8$"WjE#+CE9Q>"<I2E\mk!unuc7Rh^>NVs'!m:d2
%OW2MgcNlFuEN+UqWTm[t\np;Z#5><6D*i5*Jr<gP#)o0aV:X%i''/Rl%h/#gT2rEMP&bE6A:DLTY*I@RphqP!h?4iOiXjuf<nU@;
%+T1JO]I5]X_;%&\0T4NA$EKR@SFk$ukQ>uO%mB+%USDHJnOE.bOIqP)(S`)sX?%8:$`'=9FS&UiM\l:L&nL],(UY.TjSH'^&;(&S
%oRJOVnWoj0bllkiGX04+bQ`9P0cgbmLKHR,8P<L@PZCY4[*D8'iMNtq_S)r+1WS6p1"$<YeDKst<C#:*/kDuKUsC9-4EuZ$XcrJl
%ST$EHBJYPec0Vi)<"L&X"3sCE;:0p'Q9M7-cKI$CBBdL;%^S0?l+iL<L\?9\HPpF<(X($?%Wic('uS#4B`\3Q0gKO,^onIt>'[BZ
%/?IK@J+a3;\<"N$H55uOD`F\LYmrHD.Ut<l0EM8aIrl!JPla:N0E_&eJp5sM8FK7GNLrQ[e-4lML_e-77GYC1MI8U658K\>OLrSt
%hL9r/16n1j?_?cQTfm\'P*9?5N);4K2LBG\jOk5KcNU'fMoE&+C3R[i,='gWf:n7"+"D4BXa.eZLa$Xnjh94E_k;`IC,)&+[*BG,
%JM@cgb/D8<dq%L/`kWD-<d?Kf+!"blhZhrFW8A)CJujV$",<L,1;;Y!I)8DTkug)%lg"J0&c)i9C)?SR6d4T9NSh]_is_PYl(,ZA
%5oiC(XHqr8a+F#1g+F)jX>n'sH-tC80BU0F7Y33f3NFBD?lc6.0IMp8ag3FN;ZOHe7:c*_[EHHJ]++$R3_!ljS4%.aE'@_:Ml+.r
%qL9@3YYKr3Q"t+B:_oECJH:4ElU`U8%[tUmYSFcO^('@YQ[sorYJ]2F@dlS19,Cnrrlsfl<:U8&2itVK0r/N6IE+<63:-bV4t,+6
%)6Elk\XPT2C=`l;)pu!*$rkk.,0d!Z91?CBVG_dm&ALcs79@7=Pn,)Xq'%_XWZo?!?lc*Q8cZn\Ab'YpMco$j,-S1+1;YTM41gL9
%-p!)t#b4:uSo?lf#b+P6DtRI-1_/Pk,j>F-[&\gFD04Euj9U$]iOmoWR:\t4@%MH\b@]=NhT#+BKbrRRh^*ZCH]7EZgl1_tH"4o/
%9CDQM%dAJqCGn[Jl&UC];&fb[f^/97$felZ8AS?H>U]in!f*%9=ja]s0B$pKU,cfVi/r)^9c?A3-RlGL?$@h1,o")XM!Po:&68eC
%B727"bJ9Bp2BYH@!*Z;,GdJnJ)Xu>+(p`>m;rA`cK\eiu+nAp.@GmrbPub6'"iVWMU3NNI!ZW#>$"<<QNGA$oUMT)8#AZ]MC+sA(
%fb;U;R^^-9I4]Z^\8FOU@pX&,TBVL)4DMQHr]gu^GjD+r\b$iR>$i.pdXo9pF;RS"dci0rci(>D`m>DSBY@Hgh5n-g72J&^=um^U
%Ge2Scb,]ldo'63YMgMq7Dd#4qBSWj^?+2aWa'@kcL"JDGR;blNX'JY=#^2a*2:I7D9no")Fri4D0K\++qLXpcAZi6-"%A*[I,82k
%#9#V-0L1\_02?4$<#m"f(+3?+_@(?BbPY;RmG.$OGo)>s>g4$8d-TJ;ei,/?:gVg2PukE.@0EL_bnEl@&%]L6<%YfF.f'5V$#9Dh
%-/=[DB8'g$&J]eg\D4HOVbcBaZKcuVEKOsM"j=iDIE[o[\DP>.eVjqAqDLG-FRh\G(-J'VE20rKU,XUEp+Q>EBY@rocRZrqjqgWe
%mm*s5HX&fb=T;rW!-B"f<S:Kh=YI5X?\cUn\'CFc1[hM4I50g!Wi__8\@hjrFrpDfMFK<QUfH&l:`Dqd6til+Xbs_+*pM6!NlDYm
%;gM$OC`bYP(J*j$3Zg&oc"=VrpL0?<OF5-1:lmR/[&ik_dMUT55eE=[IS95?Y?_5CFM9<jSL*KioIT/ZYR4?T0-(2YZI_/!>-#0\
%D`oj]-&U@\+FZ#5qo;B63n#<I$FKK&i,>qq/BGAHd:sh+@-i$?MA(EQdj5Yk/!en!;L/u'0l3TAk$PL3J)R-3%)(4kYj67<T6fm3
%[S4G<`kP0`?H,n'6pSIBK\Sh;_(o&[LoGshJ<nQ"ODi<qh<#_;MntCRn%S.!4uYpL"pBDo[$fm58:suYf/aB!G7^8=GoDAR)`sO^
%CPc;Qb/msW49Ac0I!L&*UF@dsGV3Dj9X_J1'[T2AK:Z14+TL\?(\VLMeN=$9o7$8=@o/QdV,"paJUY5I+7g=Y;9u0eZr^_La,\nK
%%&6%1-.'jgCsXs]a0,*!UYdIZ6Gmt+q`s1LfN);od24_!_tlm$8)Vu.gT5`bc:-,f3\&G>-<rL$C/&k'cA!3"ZYs/m.+1Bne854S
%(i9;>JS9_3!XY]-em`@GUP>^4;Q%n3E$EP2nCGl]>G@HfZFhtXM[gYIeP'(gNr3H4iL,FRruUhYk/)QVq-2*rXu2h*S$5<Ak>d,s
%_/IiO?U-sG:lEDWC82V#U3L`UZ0J-1cTnug\@RlZEE_l$4;f>\\,1`TpM9S(lI,l)gs:0De3638?;A7!'<.U;D<CeLkN^hp/F[WQ
%FXZQ\Y8uJV=K])J58!MS=LqubG";-\&5ob4HhOn(UJ$7h3j89nI:_q*8upVYY(Pg<NM/&pk2_A)#@Vb2%g,Ol#=N'cg"4\2oGX<Y
%@(3^)CMZgC0ItT,84mZ?`1OnA+ftp'"0Y6'Ut#[?cPPSQ/)FJ,3/=^+db4$76+VBho``,5[9=p(o>oBc9doGGbha&k==BN"&\5BE
%q2c^:g)FCU;di+n@F!(_n9qinR-CF!-SXJb4aHX*idU@*\VjVmbXpcVlaN[@k&+t-F`/X[7WrbnBFHtfn4_#]5DI3;%l]1Z!mJ9n
%aUL<Q+H%9F"jDpggq4]*g4R6ce$ji0rNWhAGqlS@farE8\(fRU\T%CsZo*(=`sD)g.5D*3E6pj)"9r&m.urE=I0r/))-HnjIt7'9
%Za0WD4Qng9@6a'<Z;e[s%1-g(YeG\"?7R";XUpfrSjm!34O]Cr<[ajd,$MG#6=lW<&t\@!q$och3ECF2J*_kTmM+,UUp#FD,JErY
%\=Wt#@*c:=0p>V%_[j*lFW.??792:H&.IX6Rm"#aN9#VJm=`:]L6a+$nDP(?,X^3;0<Ei0nA=,>>3=.dG8pHQ@/F`IKA\Zo5tP@:
%%1u]#K8;0ZEG74IWe'\[[4&X;ZOcKkkCRo9DRFl75@_]^^4"3ij(`4V0D!lZ3rF`#i0/'`^.d[a0+`\O#!@;AG1"4a-d<gE7HC23
%a\m_!1J'*q@>!OGg/T3$Nk>>`C`>QOX<R\j+!)Jf>"WXTjNR!ErSm$&hhU+Rg$4!"2<_UWMVYV?U7S#q"13]Q-sY<dK[!9H//cbS
%>)Xd![DY;g4Q#P+Groh0\.&7fb\cH*ls]]omfa;ZAjP+a%:=;F4'aT^^[+5*1/B%aN*W01\X<X=HK;OUd[32bUkk2NWM2p?L7teN
%Nso%\HIbp(?98]hVoWQJ=l=!!$#&fc&DX+D@0l"'o)BfO?2JdtV5eIA6I[8AIOFKJ^,TYClrV+XnL=Wgg\\9(drP'UVmLe,A"BJ[
%"S:%+DFi3J"5hTc]Y!YFpNLH1`[f&s0[o8kY:<a[Oc#MLa#:)b];6JNXk_8s>%)MPd^c$<160*"M1etRfb.6L9_s9ZNKHk[RuPa=
%hb>,9_sEV'`NX+3[]-'H5:RY*qT+u+BLE1fCfUt'_/:bLA^]P_DSr#JDu+o)m[nI2bl:B*RKrT$+gK)MkLkGC!jsE-dQ!&k[X>kX
%aQm!;f:%j-ra0G8h:&4&EWg0[,3/j?eXEh6E3HYn&GNp5H`_m"]En=`Dmbn[//7.M5:b;gX%/TTN4%4Afj610q=&U?[2$<abs&ik
%?Ef;'+Wp3UXU$oIj%S4]PK07tjTsFm&Kr7cg=E^k<\CjcXboPBgUA%ohuabb:U7*'\AMKd$X-`][Y0djo6_hd^K-;\`VX6o3[3Ve
%(*U9]m]c3Ep<$d)O4[E<rTOgY"2@l1b8WBe_n%:bITB-@kfS[o[+EZYbl6R>i)4Z_2@LIR::%/*)gS:RA..tE^-0FB6f2V*1YCiu
%.)OnDEf?Uu`X.GKS=(qu<(&6\oPHT<l<0F)=5,)@nru_rMOX!ZRHs,p>n($1K;gC[o8klMdJDrr);79cP932KbaY"Jdejk0=0Tt6
%D0(?s:W]2.lSMg&_(Z)-##&?k]OUcJi6eFR3ds8#)*a8S6$i9/`fHW#LmVUHj-2P=:A`0YiWQBbPj+)@grsh[Obio/Z4<qO^4!4,
%Be?kkFVYUDC#ss0F,%W\R^Zln=[M(/A^^`im#dOgB-`JC"T+/5I$p#6"QK&V!nPXt:CCV73:abU=:d9>q<%C`ZY6W;Rn.GLq[<hS
%g1_.WEtp<(m;k.(bLo2g/hEE=md92IUor0Ur5_s9%AD<1>D\r.#AMfd`k<oUFP-6dI_B2sod[#ueBGd7;tK1me!F"<.e(,T7^^Qe
%q$Js&h#<+<ggT=m\G\7"&DAl5_p-L=`NlssN8tCd-_Rk.P8h=,`K)gl"?g)d@]b[;>5!-6.&)ALr>J,QihLR#I-b0$UVM;[A(0[8
%l!f?R>^Lk:MhQXOI\nmaV]*rK/U$U;a;chPi\3MXO5U^Z7che2qHWPE;cf+!QsFJD]D"HhjKg7\4m0,,<$o"'*Y57pB7o'qrc_pO
%2Np%`M8u>.R*&rA*78er8_]=j/!$Nrfkhtj)fJUj]5;_\?UrD90Q5^jiqsDp9.(3b>6r&M]%JqnOppNbFiCO'NWfhhQdbZu1WD#.
%#NnH$>rlQ#'_2!4E_0Q\_]H$l1X1+u*ml1t0!pPk,7iT#k2?c',mNQdb0W'/Le:#a]qF-Q-*W'_(Y^KZ1K[Cq*)aBp:$0b<S7!tT
%0YaAiR&E#)'Q3*'RM2e!$mD&1rhef\01'V9RaPOsDD@@BQs2>L;Yunh+!#^IbjA6t*Q'XsZ,83Ae]\$0g2:9h=tQ<JP9O)S-5RNp
%mZ1g<24+d_B4&,F,AUqFHp;G\o)\0g*%@5<c-T6GHSR`qf6H%S>M3Fcma/C%GjF<F!/q.:>6JLlVtARqq+A)VW_V",f-0`g>sPQ\
%J#j,&aF7fKZ!\c@C?^2jE'E6?_"s<5FOfL<efp`=%p3+L6H1erD&-iMV1%>oJoiTp<o2=&!]ebYpGT]AP_hJWio0VT,,]X@C.iOl
%_%EOdN6IFj.9Y+D;41CdGW]V0SBZ=mq;8q!8:>IDo,Eg?4[$#&39_8sQkug7.qNZ+UmbL*^Gb!8#'TSg_ToCOI2kF/AGjkG+3Zr)
%F\cf#X`t%c&ZJH=?SUq;aF+!IiO<>2Wqo&11s!F0ql&?@CW4s*2p6`PMWFq(R%VBO+Jki]Or')+=;tlEiTtJ"rb!,+%qWB?l[E'c
%*T%LIV'0P8b`_&iMAmmUf/anP4FR$lI6F&1+f>bZAT[PZL4D(8opG_^Y^T@ZO/).;'-Y?k4V8hZ0JnQ#BRUH:rOcWn&n#/`ForsF
%gi1uLrt^@)#8Xq\oe\NZN-Z)tW:fT3'7$\%UNS'WZ*G3bo#n`e%+N&+@)Xln+G:e2T.q+3E6V8@VZ@/e7l2<8:9H2"+dDlrAEW%f
%<PMki?XfXoa/Ls1$:"VIAu%Qso/A>/esWS>H'^@G*Yrq:(nHl$riFRKL_ibNk@Dq>l)RIFHoE,:iiP+,4MjPS4ag!^5F9*49Es'$
%"G?3F7(&39Cls\nJ]TH#QF`WhT9:T?hhNXXR4;a`p66b>2!(F]J,>=L=pr>I@buGJl<B8)%Zc6/6P;"2g^C0C!AWl1aSX/f<tn&?
%04p]OHW)*!hHm7)okJ)`m4/$;G?:KAKu3+dDl]U]L?DuJSk+'$V!q''cd.m3_E:H)/*ZEtJHH3-g/X@a;`4c?6Q4?Q\SL^@\=Q7`
%bP!\,N,$cFX.3p.J"j.`e_^_Y1ErW`S:89*%VTTS&b5s4n\=rbmIV*.2iMhUc#!Mi5Wh5Q"2eZ+EH`./o)Wh/>jEiCiV:Q4TI,Qj
%kNH]0X49-.Me`5V@ouRjD]]i*P.Q2]2E+_.%C2')\!4%ncb9ctSJJ4O;"8oXlVEG2?(b*8=,--\(,aO49kKY(?gdB#k;J2D?]d%J
%)KXj]CI-eS3VX(a5>SfQ<csT72>g.urA'VZ,7IlKY+&il7ec"52,>+tG6Wk%AD'!Z`D"H@CtqGtS.(IckU7[UPG?W(ZQUf[<%2cK
%g6=Ies1P+Ue].C6eg'"XnXup@*l7Y@)`+T(dB%L6n"d)6/q4XI.!SM+*DVp>%ZkPbbgenY*BETHdZF[H(?hGa<k\B(O(.t2cOOV+
%oE]`kShefOTYp?3r3h4S0K(mAD`/<rfSJQ_%5+\h><9dPYB_6_*#A(7;D=@*=f9Z4Zd=]TcNVKM5kOIlgoW)EHM8)U8.^*-PH\iE
%>OT(]HluZcd?8XgoH_YIOqr_O-TH.N+58L9*#&eHAu=jEiXIqPos*-tMWT>abK+@?$hKLPp+JiU_-R]`D<bQUe?.V\G"VhFO>;2A
%jenIV>Nm1`Rk%`YjUmC%f4T/J%5cS?#H4'pTpJ\5BljJ9]pudiIdB#,4Q)r"H-tVQZCuiA.9;1-]e,ZpTkK\r]o3@7B[*QD#8MZ6
%4`T5%7N^i/p?'%4oU;NQ:qaO=b"&LTZtSSM2c]8W-:B<u3h@sWN@)<Iol$k@eSE%\rp@ak0YcG-\n\,.b=*!dW;22N6fRCpCUEn=
%M(3QZ5:^.`="-%FAKcul<7,Do._bTP(A'<RD+>QGa^pn+#RF5!`e>O2F!lAfoK;IEFA^m:."#gA)`T'^P!'A"gs_L5:leS\6WGdu
%JWG:bd;9_T<o-5P)1%ll-FfJe(mlU3j_'1J2SQsJ-dMndU&?l6=D6@KkMiHU7U_3Zf/"1pZUOQmS7X7t#$Zc:/^":7E1kpm*Xn[!
%T3tBP"Y!GD+S9nKW.$5h_n@uo1[;q'gX_]NH"#i;]^O)"-TF7uONZ_cAC<npYG7cf:&-0JgY'"ZGCC*V/)Y;W[V2&qYU2fh-/VPh
%:YGU!O[BhJ0HDkYdcjPb8"n[]9Ys)#Br"XaQ:"ClW)uZ%8kU4QE'r+4.9ZOomP1DMg?\'5iSbSIrIJ!oXK6'rcR]ck?F%.[6!1\b
%(g!fOf*R<U3DF'A$YLkU<Qg'Jc#qM36WUIVK2ST\^K@lo[j[$gV7gP5'-ssm*D\'BAeXT,IF?pg2=<>N#sF/iaJ:,Ma-\Aq1X,ka
%o4^reTX4h?+ha.A>-PeVKP$^4)8VGo\B-SjK4.?RFR:$'7O^-q:)%Lh\dCc\j'*l6e(;07i&*Z;ar%GBXF5NTUeW:T#K&OT;=*N7
%E58.28460>-9CN;f"&EVBW!i'Fd71ElgY_&<o]qE@*#0f:?/'pNY'=.0`.Tj,HJ0^\fg6sJ>]LM<SE6d,LnhqZ_D3;hGFi0RJOXR
%$RF7,S<"K7Ag?/9qtEAaht(VNIiGc9(2P'ml1/KN?Ut[PF1?oS9tNi>nf1FgXSscH"4"JQ\$=[InUW[ZV)8@W"$$_6&W1N_LtSND
%D]mW)N&Zl'#),$ajD7T9H3a""E*/p5=V.p("q`"ROOPfQo]So7bB@^PRL-u'`]_MM>rqB("9grQ5.lo\et_o0H^J'U@`&N!EEWFL
%$fS/Ah+A5#!6\p6'\`ad,SDN^Vu/I:(aZB+Z1C*4R`?:NBA9(7Mm1+=3M%FC@mNlu@]8:hmk,RpZsH8gFGk`l)MP[d>&Vd`J0Aeg
%j/p"EST"C[<5gi]qH7g`bONdFhti#bYi^;73U9]SeU,ke]R.?\A'@#mcpQ%M%N&9:IM.TNC:#MD1A/"fS'g>b2*C&eTuMEUORONI
%CM4H>VAsqdC*.8[J5UJa/.j=)CKI#WSJg(a3eqi+Ehr7OUD69Dq,QV*M&iu?$\.$$H/'r$'0ajs)U2te`jPT/LW+X##3LC537>t/
%-0rkl+)t9V0WlHE,HiM@4h&YT^bO#WnOYO\L$;5EbcjEl5^-%-lHV1%E(hE,3bDP$'V[GmSe!7OB4KfQ*OCp+e/I<!J=[q#c-e`$
%T;e>(XjX<BNVU-\X?\EJ6I[fVCBKhJio;*TB+hmJT!COh]glBT^/h-3,jF[-+4GABHR!\>^9]t6Ts'0I@Q.LE(%;X8[q/m#KuS&\
%odf[MKSZPSR5F55:%j]HJAG3H%BET_Z@T_Q0-N,n9>TaVka5E/YhX0Qd_R)WqdpW3L!^gZ"-Okue+F_@'^aY2dO2e0ML-3d7L<%5
%Up9:q'+f'WK>&,DL_fA!;t$-S"GFgaJMMl;*/@2S;TrB)Ou4B!d[:ekMadEC.3/s0"J:iJl+lZVaLiCi$jQQ7dQ5U(Oi:a$$`(0;
%onPoa9"S>a#.QU$[.J-RNRd_q/<]3_%9rBo$_lig`p&5R_E?p_ke:3:E_@C*,uMRRgp)3f9((7LNpb1kdC5O&>JbD0fIWQq+.h1P
%;>Rc3ENmmIp@][_q[odV3tQo-;<4PrN%t0"8p+U&$?U,DfoMI83Rc5Ag#9'JG-_Z]Hi*ub<C5sEOo.mAK$9]s.MAs^Z$8oo+q$(X
%2A@/fYEL2+jIj,=DA72@KBV+`a-'h6OQ&i=7Qi6Rd@$8j$E8u"&0;"3jr3I<1(T[[)(B47c/NQ/[,'1(g;Y9&G'`\d-ru,,-QOi*
%"J*-9*TR,M=\&a^8</ri]`]nO,%rd7/&GoXX/K#2?V-EF=YNaQ9Q>Y`@8&^'D[MCL]X?:U#!+nk$eki/5Fh+"9AAL6mC4P12Ymet
%pP%hlS.IT=-Zh\rK!ccg5GV1Ir$cMXpmm7n0YC2>Zq7XQ$0SXKXP&-5Q<G*g2fuB9RNG>em,)0JP!BbW*B29$YS+@0..oB;'pgKd
%V:OtrgTku<?5#jq"=d3f+teu.)g"8OLmuY6CMta;Y6D&qn`aV7^oQY=ka$oGJBoqO%Q^!rCS7k"O7cs\@F\J@1]iFcWpg,1#n=5h
%]IYm8Yn4\YX`b.`OXW%1GZIJ8H(ealIMf;E8XP+G!W$3:"[U,U@g'[#5q!LNI@#PmHoeF<k^pA`Z@5pf4W4SCVKF@40%D`OS3/V5
%gR=ObVK:TCi$6`63m5<Hg&6,Z%<)4"cR02Q-hZ'jJAoZ&Km^]*!%E[n4umHtEPq&5r'Kb*jr#]Po@PF;RR%cW0k8<tGDj4E3NQY.
%oJ!(jF1c!ao]q#*mpH+hs6-a1`s.>Ro2"K0c=+8*3Ur!TJo02$9?n1tV3P0r"'n:SYe4"/Y@S'(/5Kt-f%)gDO(p'=[Nq%am$FLj
%ZD,a]AkE^\[0jV@MYMo.R4e]7\CA2G<LgVFShS#2QLHqZpD%40l=P#H9%hDjiZi<+51up3I3\Dpr3bmIKIsR&o7lFs`-e'c:nJl&
%QGn<Ln8P7f_[ENs!c_&nH]U!*#!1W;8`&gg&GVPjbOVO5R9l$eO>4'hAO91iD*?kQ%^.-H3^A9<VGU;4gq3/55`C(pHajKG@d*9h
%apOr0#+\O+dUjHT)Z+L#G:DqF*T8CUiFtfj25Ra`9aJJsA>_juK!?:_ZOCl2:It4M9BfRf8IcT_G)?o1B3Hsbbu0pdYe&MQMGuVJ
%IN&e6"eu5ggj;t2Co$&CCMQEG71-=0mCoUQE1)$hM[7_F[4<6eWSePtY6C*pq\4%$Uc3su[KT]OVtmc9]oMmBGed0QRPDao\+aT]
%@+lso*KYZ/2IJa"c#u%-E](K(Iuqq#;85:R<)<\e4n!hC(^2WJ*9DD*p%#SUT&$-aMDt`)L8g*\3tQi[%i>I_1T%\Vp+BicpS605
%2hW@^`:\+@AK2)K9[7c0;=0?"Dh_/-mbAui:Q'6GiWMhk#i0<KMn#fVFLfuZE5\?<%laqh1PWF6p-+Ftgt_;e+"Z6[`VI]57Y_)j
%_(sg;%;[s'7h#9.$EJ:'%5F>"Llg<p_@LXt_t,`7Qot^PgH9.*P'`[8A)!BMQ.sW<)d]D,Re10uAD6s?T;U`IQZ4Hd*U/*X,Ya]f
%@1pj:oC=TeVUn0RN0Yo\m2,!",dP'-V+rE9+dSY*DjnX+@b%fPn#CqB@j.?L<Qhq4Cb@Re!I6.%s(Y^tN$"gMR=fImd'qUZ1I^16
%/-`/G^d=[RN,LtC#%)(fI7EpA756CtG4W-R@7Z*'SDs*)7ek0UmqAIu[05tKli6^%0"mG/aHbU@d/P7J[B+tlPQ"aG/i:?D!D&,7
%!kB3`6Ie4#k&q98)\Vf3jl[U.m4cCqmkVZ$0Ku"%-]RgjA9B6cD<o&b#@@;,61BZ*C9^Sdbd:Xg(5A742J\3qRhlC+/LE#`p;ttA
%Ec&OoF4W/]gV^#+A0nNB'DAkW@D)cHrOc8UY`%[uq9M,2X)J`iaD+8F%*`=\=7]s,K-3[s2?oR`O*]/'/L'OufNT>nd1tUT-G<.p
%Xc`>)Ig`9Hkm(.[?Z5^cS8p^&lE.<k5N3W%Tg^j>e?JE4*P6!\eQIqXJiE)0g5"60d3Y0oM:f0Qh0#R!1:bOqZo/UV-AhNP3NW(_
%i-ojV^E]d<l%siNJP*L5`:c]mkc?ZJCTV%8ON![5,[sgE!<H'f8eaPsOYYjj2q%e_eo_JAs/,+g2_*un/=(\*0f,UO`ggUbQ^gA_
%4VacZgKuVd''qk'/V+ocMUNW]D03fiJ^^f\b8L+>Fo=F2_`#\I&Ea@I[X%,l.7X6.q%dTLgf+[kZR"e/36NWYG3T?7lE_a44Kk==
%B.Jd#]DF!/Ok8?%2R&+_DS5XDUZ%93-jD*Wn2Q"G`M6GS9[!OK&37&:@rtUf/f-JFJs\+,Zj?;_+OA9F?j.?`n4]>qT,("&"&3%d
%`d<2Rf"H3EQTs8--mK^2GhQ(R#aJmE.o/]28l)b['^!,WjdRs*R!^_nBh.qM`fBl\Zf%^.,EtZ5$P45pZgY9Oa30F/@8hM`Uc=C\
%LnK$4Vh4gho@4@bar#CGLc3IJ*s-l<:5djrJX@#(d72=P,cE`^dR,,.lTM$Yq3Me8d>qsO(N9b%ZQ]A&FZsAc3Ds+Zdgq9)n#1?E
%]\!1OP7KgpL&]T0H_bFQo3c6uL*I;A82mi_Y#,NIQ-OY86!i`:Y<hm&=Z:&eE>`gK#,+al>Uhj*RLqRNBpQ-K=PBRQMMLZ.#(";.
%\*T'#6)5bS96Fs'XBMC4I4;>niiT\60A_Ph_&:sgZ7'*MdQuW0*_N7%'m1f<p&\2BImF;GOnJ\]\hdB>CsaA6/PUS56E,0Gm:=dk
%+aeMEP)4(A475(dK(H'75lt!EU^p=7Fl9Hk,R@=hf1-q>e(C\&8:\SAh%:\2PQo@JRK[]3X)I)&>JO_h&<q9V"-Smt58=@63.tX)
%SjKKe+\mP6[X(sc7RYTAmdT.dV@Ynk[Be;`$R9OK&/g#Ua@9ZAB>t;%T-Lh*cFpn(KVE)PJtY'bY*[WG*`BgGgqm#RV[eZe\!@:l
%44RET7#9<4%VUb^pu/]/gL>g'\:MWD`i2,B*/?i@-B!j3<o:EF:rY9`[l+Edd3]=8_sf<L)\:OrrNnl/&6B>qC5%++,]/[bgssM&
%17ch$.Z8/YS2aN9W$GN@_5];Ual9G\3Rla/;ZX2_rpAh0Y^HOUO;EPkg('+i_H$1p[mWiIM.mpfg$oakrpp<a/r4S_^gMeQ!_jE.
%;8r=eX>D$-2VUWljXGb'#l._NS([$5*@52XmkAHB3.F<5$^MLC39P'K9QBRD_m\9+lp,s7k'gac$b#ij.F+%*S$Y+.`V",]pG_MS
%m2`Na^l@22N!!>CBs!QK,kCXGD%5s^HLJ.?*sT7</nGk(^?k_N%#2FK::#@S>k[0Z\$8Z9fj%`V/!qg.Ml/kR#Kf0=1I8r?&'/(N
%KY%r7/e!rO$u_6KZUL85ldCYbZ3,,MM6,!U]ko4"Fl9["[p"?3!*^Z-cK@`,aU!g44I46SpW8G,F!c_&\T&_6?&-U_Ms1l-aERue
%U("lrR;G+tp'OFFksL]D$2rI+oDMhr3"aEVGqq3eK`[MW!4(O32"bqUQ_R57jRcVd[L&4@ER[5pLY(9WSDr26/Co0`giHA0[%8HK
%;Wq&":^#Oh*:CcC1#8b<lX;OTeA*pRLU)>CBLB57&"WWMel10]O0Ee9G0_i*MPh@YYo-JqMYMO%X)b8SaM"L@^+3Vh=I>;];rjp;
%Mm>`l\5meFTlXe?X40Lk8o2f^/Nj*]7L+;X1,:!X4Cii:Y;&&p?\oS96[Rsr\ea!(7>:1E8d%T;i8[5*-V$)HN%Xb"EbVksVg5\$
%6J4&br:":621k(iZm8sndb_X$eiWEQgK6kUAme_"N2lGJ(\AKsZ=.%\o=YlT>(A6M89VsdFN((F]=lqbMRTc(Zq`Gtn%HD=9Aq)<
%=7uCkmq5c%b\PtL1lC(M12b(5-qu'0D*".KPshq*&mDg[\'@#MB=3`gVfTeAaE#b/X?=&rAkGZT$o@YrDF0C<"G@DSB(-71D!]?P
%)aW'Lq3ZpZNc<tE:QfL#!&lT%Kdm*#''YO=I1^#D,$[J%>O)9U5XU?N(ghB_a:=1tOK]e_=@^=6mp(*+E6StbEP'"spKm?8jpR4i
%'e,31N>GXIcBQ(,IYj;_"mYBd)LMfs>E3G_0(@WT\[5F8BMT'pLUZC!-""Dhf:h-qRBO6qbXdaZ6A2.%0Ii9o(+jW/Bg_eIj)FBQ
%5m1-7%JN3F'REd1]':e2e*7J":,O8KTQ+VPlDZ@=eT`MklQ'(Ii\6!(*6&fF]LM>$%p]f*$Fa^%0#9S[SRmrAoQjZd4U_^?Zpt%(
%k&A:t2IZ(8#_&S\R<Mi";L2o;B;&&i+Ao<d,BrdEXc6eLB>J_Q9pCJjAG$jX%E)>5rcm!'r+"K`^HB_Hn#fUr2@?)^2g@#$TS=2:
%=PXbRC@f"dg"4I!NpF77S'E=\7\&=1Z0X0h,Mm7j_&DhIX$b["?\2Q!DT/Y8W0*u/V@/#T>IjQrFV#;fp\Fsa7\u@+o%+r&h4VFl
%#W/Wu7Ko"P=:LRkBIh5>^;:8sd-qet]oIlp#,F*N@`+hV?i@\$9e'8"Aj3URL_r0qPa9Ckm53SL`FU^ZHE1JQN,r-6'Da`;W#]g>
%[41Z)qO3kD_#b_)TGPNnOR#E'QGckq#$Xks<bo-DC-AiQA\m5Y'_g233#TUa^+R,rI#^%(?/t<O#S1L&h1p,>KM0N)J_m`c)L3W&
%<[(nAP0Qs4]<j8nnljKDb?NR+AfnUo\'EiHAp,#b*jf:+p$<hP)lH[saLrQ*okUH4rd+O24IqnM4*o%?Qc<'4E/Afh-8&0FbMOY[
%<^MHI2K<l*DU@ZcLqi<dlijL1:#()FD4RJR0cebud4gGOguh62j`T^<6"4c08%-gDR7A.gQ&M,G"cnIaDW2<)BI)CKJ]G_MC4XtU
%kUAUZf"bTG]@"U2p%N?alk/aZBB21V9-b@/b&>]W.k#54VH&!39du$OR.HacD]U8j'I)^&:P00HH=XnKr&"P?aIB'YEBs!(8Bh_0
%M,6!,jSR,P2!E@RIT,M>8#9G^4,&OKeUA/:4*.-t[itZ-)jgf8)jBu!f%id;cOYtAN_IfTBPb03YAKq:*VMn&0g!h%<:7o7+I)`W
%CjgAhKA\RUbJa&Yr&te\mI<]QoL.17VGrF?N%TbOW9;n8r4+)Tar5*%<dAb2SSNH=3,!GZDF;7B*u2Dp6rpEe[EaH5*k_5Hj5:$(
%6NFI-79B;Eih7h09@Vt:*fJEZ[0qo,H*'(40YO"LEbE4(;mj;p9B=PFWL@J:=r6&mHF%i=L2@o#&Ql1a5nV#<0!j#Zfbfd[I<\,C
%gbbT0q@s^l,iRKgiaD;sf.cN-kc$Oo1'6b&i!VUS2/.o[>,/3J?!;F2Xge:]=ITd@bs)qCS.5QkJS>)(HUbO&,T0(G6g-gnU613^
%m#e2e(l3p<&a4YnEn1TG*H#k28UMKrbdMXsfn$W(hTUsQ&)_L2JIbKr&0$<.r@+MH2YN0:ECS^31i_oN>J2pRR(YuX=r-J.?]+/_
%W&JF/?l,0cGjDQX%W>@m%L/@YPjqoQp_t-?PVetEPLZ87[jS'XU.MT!(L4i!b%)gh8it;KF`H)i\";I$Nf&`(%U_)aqAa5%igiWD
%_^HP]@Lo/#(i.MNqrhnC%:U*j]!8fI,\aKJYZ^XqW3Fjr$Iblug=8f,j1D,]?M^1"E0g&U#"HMY$ipd$S?L\BfbgO@)PX]8kAh!m
%c<j<n0/[I#Hl+n]G&&G-)6):[UtM1o0?a#`UpRVfk.KUa96q<iBuE"8adB$R&UTK'm-],R-(">ZF:-92V+tlYiSUNfl:TJo*H5G3
%>5WFkqj`a,hm#0KP1M!G5))-5gdFS[!4siYJk"DjnJ:6p)Yp>+47W#)]t/Y`lUAJn>qVVW0b#5o&c]$*L*CPZ\lWE8?O,#7\"Sjk
%ck21J<Ees@@^iR+Z9Jf.%E\BmD4mCOMQ63n.BTuCPn%6MYO<$S&&D4RB9$G9(.q[VIoe[>C+,9T[)1e"UE&u^`eTM[>#St6cH#_a
%^#gK@@E-@`"l3a1'4#(9`K?J-e'(<XpNemJ10Z0h"f#IQf>199V4Cq^r2.&"PX?F(I*+VhmEsb=aYRGZ*uKgsG^7X:a6/DH7p4@?
%kI7\qgk4*YJTes,3Dd?2Ztd@KU%<bI1pn2>@%?j<?q4ID1eS_9G,DNLTEaU\1_!mRI@[G"LRnYcg^WSYn91<kFKOQ/DPW8pPE`*p
%DN+q/<c:?$A[%IpVA60E_AM8j\2CP'14%(n&g*Nj7:OWIPi!S#_mM-X,2mZ:m0bZedD2O)*Po1EVDY41Y9P-OU`4A&\2:#Z.)UQl
%e5T<A?t@)"b]$Ka'!'PrCS"+5STsV*II)"L(l*"ZE_*,&C61X=1q5TSbFh1hQ<JWlh$?B(j3:)U@7CRh'Xf7FakG)P=jDgEciq3%
%`=\%df:GcE<XYJhqK8Oe;aWddA6lQY](D`E__+=8Y:-OVNY;?V<E9lB;4"L?Tn3#s<i1asJoD"M3M8t@f+1m!:khPU%\uq7%K-PW
%+];Eke,.B%S0H:ROkV),?DfnF/@5Upk_C5T+iCnOeFad3;rpmY@Z&>'JBb`&C(RDj2MX=s?d\WM_pdb,]huMEpCtUf#VA'Nm9e51
%Y<tYH%5p&L9UMe/r\US?le3O*e7kJ7o.,,@qdGJ_`t:6p.GY=G<'4$;TQqPD1C:t`FU>[0W^G\l]<AS0Uhrr-RaPVcS!5WBcJ8kW
%fA,7B)?Cl;#7>5g^/dHca*&Ho6&A.HUcHid`Z.^N(PG2$oOtG6LE.Wmo9nP+k8g.#.g=M;._0)F&&Ia*g,;B\WL3<5akX`BV'=FC
%_X22-\:2i+3IAROG#LN`^n2$L*Z^gJIe't=mZERc`$)rO#1MjS#f#2X?K<*K0h;bpU6lb\=09-pAt\KHDQhXtTA:ru_I]X2BT75V
%IL=0qYeeu+@GKIu=+@Fe`m+sQ%7@sZ*M%(P9+g(/pFuN>Af#HZE)XSa;#q-!K8(i\Y<5.p9s_[,!S3,?]^YD-gZ3od'Vc]e-Isth
%r>@foa7tYtI<fnneU-)bO7mkmB7j"3`8IcLCAH%.c_o.tdm0=H+Nuk^:.)ph8/acK9H8'X+@1t4`P#oIWHd+=1)>Q2S>W_HcB-SG
%Zo9\XokqG:2a>["80O"AW+p@4$M^oG($4P'$u=W=bb*dqQ?Wkm/\]>FFKCbLKd10gej<'DdZosP+[PYriP-L*6S*<A2>Iae3gbml
%(PmlO\iT*;euRr52m,_>N^oMj[q\-^08VR+l.jm9qiZ=m&*:EQOmj+QM1`!t/MaGQThMos<BC^\kbn>*iL>m%pGO(P?p(kdGn.Jl
%N>$CML';(q.R1r9Pmq_Zp+rgFK3O_LT^/0?fc>*"L>!NEV%1IX#`<LLN<@``X=[1*3PEICDff"G/XKM'J)"cJ_@`6e4>41jRG!6>
%Yt>[!gItT4^fs=thUi9-nDj2,D0-clD,CjN9VH6Z+7_sAMC]%=/;3[=ll^gh7>SnkqCF2Lpa.]A:8cb!`@XtT5I@%IVBoPHIT`I_
%WppeGX?@j&o3oJc-rdH,C?m-f#Rub3$_&cGS+qTtHufVg'YFBiVr:3'koF_h?K[V#2?\tTKUqMSO:a`O?622_C!k7Z@`]/27RKC^
%LH3NtDHldBjbA?VCMC21`<$\Hg1F*TfJ?8r1RQ6q6(maB`FHWjp>bI_%s)XeaZ8_d8u*Ft\W)V*&NM##TO#>b[,2D%+eg_enRHEq
%NjW/*#:f+2_0=7T5La:[4HjQl+K)1t1'+k'cm9u.U<tdFX/=ZAa4bb]+ig>lE!u(-rZTQg!cG8bL&E"UTtk'R/+F@fT%4S_08-H.
%6CED5r)F%"5i2Pa=U[(h/%kn]g4LI*gl15]d/bF'hR9_\L9MjISSKXA&hROV0Hsi?`buT9mXVk`L,Z3"OX(M-*;UGRP;HDF>%`-=
%J]^ur;nT`R_DKb+hW&O<+q*:*a%aAd'McVYH.d"]5nTFFOFJLd`.TWCKOG+k#.*K8O1e"\6qZ+>NTOtNcNe9hRI#s#l>bI8TN.!`
%8[`!el[BRtEpH'@N:7uNGGUqOf4gFKIma.u'R@9ri:WLINc#,t*rnh?c?0b3^8u=!)h$*@*-XKL>O'68Q[;NOoaP]'"gENGb<(Du
%;i]ish/OCk"0X7u)Q3BXB?Y@a?h?V#>Xrbj?2#.7,=<O%mIFNKoHEng\LV8gQ#@dAS?7%\]>\FLP_Lk@(**Pi9OnMuTT=*'L]us]
%]*u5.Q19C&g1SjsaC[F4o/+a[RLITLY;VR_C%aj!(V2f(AL`>.6ofCR>n:m'@=Ju_q$bm9ojqAUDc\TZXma,53dGq1gml+scB0'*
%:T)]OY#A+7`Y>CZcn5?k$)iijUV!Epj'3hF/Rf#+m665JFJ."6X`Joen7;Ab,Hb41F_"L/clYk?Z%WM)29JUN^k`Tn_;0C1R`I,G
%PBNu2,eoF@F16R"iWU3Z,]I6C-\3hYaE$%SFl`36`B!0%ndWtF;1@C1P@gm.O-OV5PFTIZY)rn0d&p<LUSB>XdGhZqJT8c>j0qrc
%TYYXTkC9-c04E)SP8.Gc@'A*0o@>B<BqhBuJbj:>(u<&eiFl":(T24P<5$Z#0S(bWfj_#)h`@;Tk)em71UiCZD%lF!G.QG.i(qm^
%9UIJEYi%emnF/$oQ5ka9Vjb!GL8;=s6'CoPW<p3iV(p5H2+![t\3sYAVqJj<0"^Z)?b9m#iZY$LjN<S6f)Qf<'`6hsH;4l+a7%k9
%FeuEUM(FEq#<id1E8KD25)q[4;ATmsTT!QTj;BJhGbFB3l?7-Y@s0/j5JDmb0d4-5QY%GgBq=9V)G(f)m$MdjXOO+4f-s]]e@I'`
%G#E__GuAjNK,WskLYCqabp1_ScQG)Z0&eGBGEal%L!r:q1FY8:H'Q\cclu1Jh"-W`kdpo@D=bI\/Qe.XZ47/0K@SB"-`=R5]+9UX
%;^.uf(47[%%3.0!!Qg+i"l_do$J(jc&;-3"=5.gXb+Z&d*_qVW@h/t,EtA0/H5lFAA!9Q`=5E10=V1K/3(NN5YUHj*6a;&`7;Et.
%d;FCV!6SNaE,LsPi>0(8QIaa1;pgfnC[^AHZ9\+J<PE[;@)4/X5,S\NJ]N'bDE\tReM`#OB(L=/G!Z]-VsODr[kgD%Hjo$Z2EnJb
%lc8B+Y]#/R`[":0VqgL#(UR*`kso/\%aBqE+,^UR:4g[+--YL=d0P4.YL]Z]je`<MA^V3:X\!m*;I&\-CKGF4N]Dd:1:=2:e$[SC
%@,\J48Cq>QDW.IV_aAtWV_C^].6hXUFd_NhBS*f?X>nmAP2Q%HjgBP)c\O:lDDSua*XYk+_n[9.,TMjWn9_:6`V3dfjJ;9A%L$C;
%Ze[UpDk5lp>P3U6+cl(6@j$Arj6$a=USg%4W-`7lBXDdg[68'VZ@n#+.1\F[21i^kila;bA0X)1,]/\-g3f'lSVE]tKG.ng88?,l
%ql%[nA<e)#XZP9#A+fp-H^f5&][$6p8Ethpa8((>$_F]f;4Zc#5-P=,["W7PM;I>b!`(Wi+Cccm2-Q_.R1B8g?8/L:f19Z@BN(po
%dEEF;k7c=KGB)p].-ka6WVnQBMnEGog5==gnmZATgI>E[i>QsRZ>0#C[.lY2)=Dj].A"l/7)#R)JA3tN0RqFD::c<tFJE:*:iM&)
%?1tl>i@Qrk[B^];QF;Fc.9o(OI6ZXWO=C!=Mar1X(F'rS\77OHd0fGDKT*-&BZ9[$'"(!UUi;<+MdF6lMpjG1!?6FAXl$9&Yr=Q\
%[Qa`TDKCf+O5*cXdW+=U7FG=?)_NbUZG#+:e2G(U/D.Z9;HtEL2ed2<MX0)Cl`WKtrg'Y^:/X5q7R6*2c,Tk$+J8jVjDS\Z4`Xu"
%\3gj/^"u"M.8$$6HnVuu?9JsgaQbY:)JJ,62r=G4Jab[&Ffk3PJU+YIDNp95Nb1T$(ibQo"]UGAE21#H'"b[PQP3+*?>lL76Ht1A
%IhnPcT'tYOH+cdr"&iIn``mq22F4dX\b<JU5Vqh[&--1o?XC6h36>b$TnoR.V`U[84muIUFg=>2ZX2D$:qRrY27sP6!u-W@I<?Gs
%FQ]K6?e!GFFt?h6)u<A^ZUm=u251r*+D@$Sk-"J,YbkULoec;?QqBj5:V&7u9\>0LC!t'Hou%LJ>9-JM^+`^74kD/@5@1]Ue-&on
%<jFX?a0"Z$E_%Va;smA\36!b5r#:WX%j`*`b@s)Y/4424mSi!aZ"08l1+?$F`_"[ODBm&6gnr<UFs?b8_hL:d[m))?S6R]d`Q6;8
%MLt!sEladqi^p90>Zd7q^"41d.EaB`f!U,.[7tXt]\]I3]G/r/nCH3=nT*u8%i/T4o+d-n=Q=Y_e+in%7cr;-F0dE<HICP^&9Z0>
%`Wb>E]LV&W"qd&Ii=/s'"=BUu,a^Y!\>(`mqqbYF8bZetFCIE\bkO?&C<eUn!G@'LOSpIL-o-g`go1lFn(^Ed,`8r%*_'5e=E:B;
%o+9T7;3s)k?pd`7dW=0_Jk0sf*eUsj?>n7`4"M&S8!"Rg\"T1)N*5<IWs2+l(@W542gC<I`(9k^bidJ,96lsCTB%RtX,rf"1VCsm
%:@TSnLL?5>I!U`A4<L`G8UQng(>54i[-R=+S3m_-L>"/W..=iS%qqBZ&p^lV>P#G1hM&GQro;<Q+rJ3FA9b?u*6&p5hc8so("j^O
%FYM0J2EeFpjqi5I>.S1aAELoi'q>_1hc++emKM4&-:J:rK^9XnXH5n[lA@;jE@n_]eSA<4d(iiXgfd!'Y!eZT<MtqdB10d%`DlNJ
%LS_h,]O8YK[LV.m)t;'RQL0ZJ8^(9PTn/CO#W]4ek_5oib)hZ_;CHdUo$,.i[/V,;:I?*Lh"C,k(W<X3q]O1GeSDNLd)>Tp]_2"@
%c<T/Vdgj0+DMO8R('Y#'r<>Ul%rb+<#fKHLp1$AHD.J).f]kn7^IAeKkL9^Ur$3,%/"BfZfgS+n=b:aJ#JuA>F#"at,OPf`;2Pqo
%+\qgq4;9k$W'&psCG@E$&?fd(ihoAOEsQU,;]8??OfpJiD1oZo'f="Se[)"tb`L@ioTW]*',8TomtBp@EhajMP2`R6F/BsCX<9rH
%Af,H>P=.Yo=l#WK_9d_LNjj9AI7WJ5SF/^s8'+$DK3&Y/R8dc>g('b1:FcAp"3b8M'cTqd&!I&h992IoeE:"s@=>XLX4)I/._Tc"
%ceuMOjO6COO>UK=j!M;V7M19dJ,'Io.n4nUFEkq1f46U^6Lbr@aAXlSY#;U]&rO15eqr#3@;f>9Q0j(gB<D62>iO'F;i6DF4pP9]
%b3<dnn$2:heRsc+>M.0-W3W4qn4p_,#cULe$Y;+uFh5F*f?::Cj@r7rRf/r71V(Oapi$M^j%3hta@^Y-lgc>B"M>2+-;dn`'!@Z7
%ApVDh:mU2i3iS$4$2;pp5^BW*]$TZ_&j@=^<WneC0ilHKP\.mhY,PL4(_(.Go!Ar+QFaVb?>BmWUbFcR(_f[7J3iDkI8_uqaJAU)
%[5.HjNFJ<4^h!s`q1+JLj6]47Jh>"qlhu)trjB:J#Z:<h:.s8d*eQ^BP]TYD$XoA'F-(Ej2@l7G1$[$VWR_7AJLIFsd6^KhjW%*h
%m1#$k]LrCeIAgcCoLFcIX0m]0a,)<6cK2#C\PRdn)r:ZI_-qFsk2Fhur_QEc\KTAi"BdqRd3EQtPg8`$roMt_+J.K!d#u*dVQjLF
%RX/`u\K1hn-I`s]S%bPeeDkE:C/Qj\pE<2E8WbYj7@,3*^7[;PW*=8+-?BWUFqSc@gnfZX%JhZQS`-I&]%hYDoUY7'c%cKqK7P6u
%2/2@%TYq1[L&DQH[^66AFk<,ta,mkg0PM`0nP1;Nnf\Bs^j#C9`=?.2+rn+T8>*jB/hQm+Mb42M6!,SqMAi+++R/Y3`]+:b9&+.&
%rjYhhRMk+76t,=?r&.8hGP-9l0_p=O.\4Fq%J(=R?@:Ad$=**nIAJpHn>6iL]Ss*QclI"UBB7dd%T[MF;r"B/T/.f74caODnFmad
%$VX[p:::6SZnFC>(Tp2d_FH1%rEioIk'h8ka=o5oiu1('g&S^1[;-l#+P6+7/$V1+[2o:oDm.Jj*0HV>"$V!3=,;_\!7:D:E&sm[
%gkYh'Y.\="MT,0JPjFEN9sie=7H[_5`e4k/,XHL/c*:NM(Bs;XaKp"h)j.<A_g;8<>.l&_VN#[b*3Gt>,jkgH3+f>Pqon5>a@Frt
%IjA<)5.J'Lr,f]rCt0eR_l%g%15U4Q5eLd^M%C3AO[&lAYXGMK9Nk@lH)"9('fqXe"tJWD\=b*R@FF#<I;&I]+)RbZ5:HBLdHA*`
%n0BALVo,D&@!jK$:G<+Le0Or`Iu%JKQntf"31GJYNk8D@a%G]-;o1[T$3%(D=qoNV@\[)kk<N*.5A\Au[!UO!pFgm\>DdgZf9tto
%_ED1K3MSa%,Bo$,,!h>4obbif!`%L/7Qt>uGIE%KLNZaY+H[`;9h'<^oC@[g(MI_^I!":3.j@/2e@iAu15%1cF$s+g>$E',da?Xm
%WoJH#B5I1(pnJWV;f`<6iXAu'7^$t7^n)3d8Ypca-?cTMDP$f^V7X0*(%j;efS5<3UZg(Xok2Y647TRH$=D;W-d\Yp%7W#XY;Xa+
%'2f.:ZJ;i:TB@t#9B=VMD9_C`H5GH7HD>^O%e^1AO1?-j]<@4YE[on+@"FH`;8]q<;7.9Qr=$k'WlQp"C=/qCksK++lQ!m9*t$Lo
%(p&ZP&:'gdT)Pn[H(B2ddjWMIa6_o8^E7.e[Zt!&M5^6?lh3Yb^GM92>V$0VJ?rnEC5^EFB[^9!)ui`6fq8KdiJpe@F<Ehc0n]bi
%DOl'O@H,Ai(]t_d_98N&;L8BQi;mld93LDNi._Wj&B?ahNf^8AF2Qp0Y@nU#*p;9V[nij0BOqSg:'p!Vl_1NEQ$p2<RYs5?6M]rg
%g66JQW^@R\.mAbj)Ml.^_dJB@*!NSpCst#T-*h8!p?&3Yeq_k[hH;8DCNV7<:jJRpDG=Q2f$,a;E@A!]'MjMsd@c:Zjq=Y7c<5_R
%.Pu=HZ5<an.)U9t&qOj=FI8#6?,Lu==j+QMJG-Ykm"s(*78[j=?ACd!0?M4QMc'#DbR"LLGci@eg,W3h^?C^iRH4sYN@QoFMNH[C
%02O!@i&"EqG0"Oa6i-e<ZsU\qRYh:q/],9,r7K(LoT[mG`.%+XECmnoLtaINBgYuJC>@qhh;lplipoCL4n5H-?t?="dW4dI6/e^\
%"Q>)e_l/Lk7,B>e#:#e90XrCef%HN,kUEk)Q?]>E`+P-DJM&L1=5%AsY"Qr%]_+/>ON0TanIIk_O8lWeT7?j`^HI&EYMXg/q<&.`
%oWQ%/q7$D&qlg&!s*jkDO+6rrhgYNbhnK'cQbWIkn%\l#\,UsVl._h[s6X`Ss6K-gIJ_e!rTerbi(*_N5Q16#s7/DSpkSkR9NN/D~>
%AI9_PrivateDataEnd
