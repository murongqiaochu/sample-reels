%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: plata_53.eps
%%Creator: Adobe Illustrator(R) 19.1
%%For: user
%%CreationDate: 4/12/2016
%%BoundingBox: 0 0 1200 1200
%%HiResBoundingBox: 0 0 1200 1200
%%CropBox: 0 0 1200 1200
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.1.0 x29 R agm 4.7731 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c067 79.157747, 2015/03/30-23:40:42        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">plata_53</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:creator>
            <rdf:Seq>
               <rdf:li>Iryna</rdf:li>
            </rdf:Seq>
         </dc:creator>
         <dc:description>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Abstract vector background with high tech circuit board</rdf:li>
            </rdf:Alt>
         </dc:description>
         <dc:subject>
            <rdf:Bag>
               <rdf:li>circuit</rdf:li>
               <rdf:li>vector</rdf:li>
               <rdf:li>backgrounds</rdf:li>
               <rdf:li>pattern</rdf:li>
               <rdf:li>tech</rdf:li>
               <rdf:li>processor</rdf:li>
               <rdf:li>abstract</rdf:li>
               <rdf:li>abstraction</rdf:li>
               <rdf:li>chip</rdf:li>
               <rdf:li>card</rdf:li>
               <rdf:li>high</rdf:li>
               <rdf:li>design</rdf:li>
               <rdf:li>electrical equipment</rdf:li>
               <rdf:li>integrated</rdf:li>
               <rdf:li>technical</rdf:li>
               <rdf:li>computer part</rdf:li>
               <rdf:li>hardware</rdf:li>
               <rdf:li>engineering</rdf:li>
               <rdf:li>line</rdf:li>
               <rdf:li>cyberspace</rdf:li>
               <rdf:li>computer equipment</rdf:li>
               <rdf:li>graphic</rdf:li>
               <rdf:li>electronics industry</rdf:li>
               <rdf:li>digital</rdf:li>
               <rdf:li>technology</rdf:li>
               <rdf:li>computer</rdf:li>
               <rdf:li>circuit board</rdf:li>
               <rdf:li>illustration</rdf:li>
               <rdf:li>creativity</rdf:li>
               <rdf:li>connection</rdf:li>
               <rdf:li>computing</rdf:li>
               <rdf:li>backdrop</rdf:li>
               <rdf:li>science</rdf:li>
               <rdf:li>cover</rdf:li>
               <rdf:li>internal</rdf:li>
               <rdf:li>connect</rdf:li>
               <rdf:li>art</rdf:li>
               <rdf:li>industry</rdf:li>
               <rdf:li>conceptual</rdf:li>
               <rdf:li>construction</rdf:li>
               <rdf:li>textured</rdf:li>
               <rdf:li>computer chip</rdf:li>
               <rdf:li>mother board</rdf:li>
            </rdf:Bag>
         </dc:subject>
         <xmp:MetadataDate>2016-04-12T14:18:01+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2016-04-12T14:18:01+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2016-04-12T14:18:01+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A8qYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqyryrocN5pN5f&#xA;T2Uc8Fq/72eRL5gihQTva/BQdTXcfLMzT4hKJJF1/W/Q6XtHVnHljCMiDIbAHHv/AKfdNf0BCtlr&#xA;MsflqO7GnGIJcQPemNgficglwfhQgnw75d4IqXovh/rOH+cJnjBzmPHex8O/Lp1KUWNs9/ZT3tl5&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:d78cbec2-a290-914e-92f9-437473511ebb</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:d78cbec2-a290-914e-92f9-437473511ebb</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:74f7c862-6ed4-4201-a3c0-d1d48805d5ff</stRef:instanceID>
            <stRef:documentID>xmp.did:125A99264D6BE51194FFADFDE0B012D7</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F07763D45588E411BF89F345A28D8C9F</stEvt:instanceID>
                  <stEvt:when>2014-12-20T17:10:37+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:24845C695A88E411BF89F345A28D8C9F</stEvt:instanceID>
                  <stEvt:when>2014-12-20T17:11:02+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:28845C695A88E411BF89F345A28D8C9F</stEvt:instanceID>
                  <stEvt:when>2014-12-20T17:18:19+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4465C60ACE89E4119A65C8F5B8A1FEA0</stEvt:instanceID>
                  <stEvt:when>2014-12-22T13:47:05+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4865C60ACE89E4119A65C8F5B8A1FEA0</stEvt:instanceID>
                  <stEvt:when>2014-12-22T14:12:45+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:125A99264D6BE51194FFADFDE0B012D7</stEvt:instanceID>
                  <stEvt:when>2015-10-05T13:50:47+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:d78cbec2-a290-914e-92f9-437473511ebb</stEvt:instanceID>
                  <stEvt:when>2016-04-12T14:18:01+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>1200.000000</stDim:w>
            <stDim:h>1200.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1200 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1200 li
1200 1200 li
1200 0 li
cp
clp
1200 1200 mo
0 1200 li
0 0 li
1200 0 li
1200 1200 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
0 0 0 rgb
f
60.2188 68.8706 mo
57.5342 68.8706 55.0376 69.6792 52.9478 71.0576 cv
52.9478 78.2368 li
54.3521 75.6426 57.0669 73.853 60.2188 73.853 cv
64.7998 73.853 68.5273 77.5806 68.5273 82.1616 cv
68.5273 86.7373 64.7998 90.4692 60.2188 90.4692 cv
57.0669 90.4692 54.3521 88.6772 52.9478 86.0864 cv
52.9478 93.2651 li
55.0376 94.6436 57.5342 95.4517 60.2188 95.4517 cv
67.5459 95.4517 73.5098 89.4883 73.5098 82.1616 cv
73.5098 74.8301 67.5459 68.8706 60.2188 68.8706 cv
cp
.376471 .788235 .901961 rgb
f
714.418 220.24 mo
712.811 220.24 711.508 218.934 711.508 217.333 cv
711.508 215.73 712.811 214.424 714.418 214.424 cv
716.019 214.424 717.325 215.73 717.325 217.333 cv
717.325 218.934 716.019 220.24 714.418 220.24 cv
cp
447.81 188.677 mo
446.206 188.677 444.903 187.377 444.903 185.77 cv
444.903 184.169 446.206 182.866 447.81 182.866 cv
449.414 182.866 450.714 184.169 450.714 185.77 cv
450.714 187.377 449.414 188.677 447.81 188.677 cv
cp
214.425 268.826 mo
214.425 270.427 213.125 271.729 211.518 271.729 cv
209.916 271.729 208.611 270.427 208.611 268.826 cv
208.611 267.225 209.916 265.923 211.518 265.923 cv
213.125 265.923 214.425 267.225 214.425 268.826 cv
cp
789.996 214.424 mo
791.598 214.424 792.896 215.73 792.896 217.333 cv
792.896 218.934 791.598 220.24 789.996 220.24 cv
788.396 220.24 787.092 218.934 787.092 217.333 cv
787.092 215.73 788.396 214.424 789.996 214.424 cv
cp
789.996 224.389 mo
793.891 224.389 797.057 221.221 797.057 217.333 cv
797.057 213.439 793.891 210.275 789.996 210.275 cv
786.544 210.275 783.67 212.767 783.07 216.042 cv
721.344 216.042 li
720.738 212.767 717.87 210.275 714.418 210.275 cv
710.526 210.275 707.354 213.439 707.354 217.333 cv
707.354 218.705 707.761 219.971 708.444 221.054 cv
705.134 224.37 693.881 235.617 693.113 236.389 cv
691.768 236.389 560.918 236.389 560.918 236.389 cv
560.918 236.389 551.064 246.242 550.182 247.116 cv
548.873 247.116 488.287 247.116 486.971 247.116 cv
486.11 246.257 477.936 238.087 477.936 238.087 cv
477.936 238.087 468.23 238.087 467.035 238.087 cv
466.409 237.457 462.373 233.419 460.273 231.314 cv
460.273 203.564 li
450.278 203.564 li
450.278 192.364 li
452.956 191.352 454.873 188.794 454.873 185.77 cv
454.873 181.875 451.704 178.712 447.81 178.712 cv
444.358 178.712 441.493 181.204 440.881 184.478 cv
420.955 184.478 li
420.955 178.092 li
411.52 178.092 li
411.52 163.164 li
353.145 163.164 li
353.145 163.164 353.145 200.565 353.145 203.579 cv
349.978 203.579 234.972 203.579 233.656 203.579 cv
232.775 202.71 222.993 192.928 222.993 192.928 cv
107.437 192.928 li
97.8276 202.538 li
97.8276 210.479 li
93.165 210.479 li
93.165 233.186 li
97.0596 233.186 li
97.0596 248.408 li
90.395 248.408 li
90.395 271.109 li
102.577 271.109 li
102.577 258.628 li
117.84 258.628 207.382 258.628 210.296 258.628 cv
210.296 259.584 210.296 260.865 210.296 261.892 cv
206.988 262.476 204.46 265.355 204.46 268.826 cv
204.46 272.721 207.629 275.884 211.518 275.884 cv
215.412 275.884 218.576 272.721 218.576 268.826 cv
218.576 265.654 216.454 262.989 213.57 262.11 cv
213.57 255.354 li
102.577 255.354 li
102.577 248.408 li
100.339 248.408 li
100.339 233.186 li
105.347 233.186 li
105.347 210.479 li
101.102 210.479 li
101.102 208.217 101.102 204.673 101.102 203.889 cv
101.91 203.087 107.986 197.006 108.794 196.202 cv
110.126 196.202 220.303 196.202 221.636 196.202 cv
222.509 197.077 232.296 206.859 232.296 206.859 cv
356.425 206.859 li
356.425 206.859 356.425 169.459 356.425 166.439 cv
359.42 166.439 405.25 166.439 408.245 166.439 cv
408.245 168.33 408.245 174.68 408.245 178.092 cv
402.129 178.092 li
402.129 200.24 li
420.955 200.24 li
420.955 187.757 li
441.074 187.757 li
441.857 190.427 444.165 192.425 447.003 192.744 cv
447.003 203.564 li
436.184 203.564 li
436.184 233.74 li
458.055 233.74 li
465.682 241.36 li
465.682 241.36 475.384 241.36 476.582 241.36 cv
477.442 242.226 485.614 250.401 485.614 250.401 cv
551.545 250.401 li
551.545 250.401 561.405 240.537 562.275 239.663 cv
563.618 239.663 694.471 239.663 694.471 239.663 cv
710.776 223.352 li
711.845 223.993 713.085 224.389 714.418 224.389 cv
717.614 224.389 720.29 222.245 721.16 219.315 cv
783.258 219.315 li
784.125 222.245 786.797 224.389 789.996 224.389 cv
cp
f
704.862 319.486 mo
706.47 319.486 707.772 320.793 707.772 322.395 cv
707.772 324.002 706.47 325.303 704.862 325.303 cv
703.261 325.303 701.955 324.002 701.955 322.395 cv
701.955 320.793 703.261 319.486 704.862 319.486 cv
cp
867.653 342.743 mo
867.653 344.348 866.347 345.656 864.75 345.656 cv
863.143 345.656 861.842 344.348 861.842 342.743 cv
861.842 341.136 863.143 339.834 864.75 339.834 cv
866.347 339.834 867.653 341.136 867.653 342.743 cv
cp
589.419 303.299 mo
587.811 303.299 586.512 301.986 586.512 300.39 cv
586.512 298.783 587.811 297.481 589.419 297.481 cv
591.02 297.481 592.327 298.783 592.327 300.39 cv
592.327 301.986 591.02 303.299 589.419 303.299 cv
cp
589.419 293.323 mo
585.524 293.323 582.358 296.496 582.358 300.39 cv
582.358 304.284 585.524 307.447 589.419 307.447 cv
592.516 307.447 595.125 305.434 596.074 302.647 cv
606.138 302.647 673.743 302.647 674.977 302.647 cv
675.904 303.572 700.246 327.916 700.246 327.916 cv
700.369 327.793 li
701.594 328.811 703.15 329.457 704.862 329.457 cv
708.119 329.457 710.828 327.236 711.652 324.241 cv
726.956 324.241 843.706 324.241 844.968 324.241 cv
845.684 324.957 855.284 334.567 859.178 338.462 cv
858.252 339.65 857.688 341.125 857.688 342.743 cv
857.688 346.637 860.854 349.81 864.75 349.81 cv
868.642 349.81 871.807 346.637 871.807 342.743 cv
871.807 338.853 868.642 335.685 864.75 335.685 cv
863.666 335.685 862.654 335.95 861.737 336.386 cv
846.324 320.966 li
711.779 320.966 li
711.113 317.758 708.267 315.337 704.862 315.337 cv
701.459 315.337 698.605 317.768 697.949 320.986 cv
676.331 299.373 li
596.374 299.373 li
595.877 295.961 592.964 293.323 589.419 293.323 cv
cp
f
493.49 290.008 mo
493.49 288.4 494.796 287.099 496.392 287.099 cv
497.999 287.099 499.305 288.4 499.305 290.008 cv
499.305 291.609 497.999 292.911 496.392 292.911 cv
494.796 292.911 493.49 291.609 493.49 290.008 cv
cp
798.715 340.255 mo
800.321 340.255 801.623 341.563 801.623 343.16 cv
801.623 344.766 800.321 346.067 798.715 346.067 cv
797.113 346.067 795.808 344.766 795.808 343.16 cv
795.808 341.563 797.113 340.255 798.715 340.255 cv
cp
503.458 290.008 mo
503.458 286.113 500.292 282.951 496.392 282.951 cv
492.503 282.951 489.333 286.113 489.333 290.008 cv
489.333 293.18 491.456 295.845 494.342 296.728 cv
494.342 313.304 li
494.342 313.304 659.375 313.304 660.724 313.304 cv
661.653 314.24 692.697 345.284 692.697 345.284 cv
792.019 345.284 li
792.931 348.136 795.566 350.222 798.715 350.222 cv
802.615 350.222 805.778 347.054 805.778 343.16 cv
805.778 339.265 802.615 336.102 798.715 336.102 cv
795.22 336.102 792.328 338.665 791.775 342.005 cv
778.379 342.005 695.289 342.005 694.055 342.005 cv
693.119 341.074 662.08 310.03 662.08 310.03 cv
662.08 310.03 500.836 310.03 497.623 310.03 cv
497.623 307.915 497.623 299.973 497.623 296.942 cv
500.933 296.358 503.458 293.479 503.458 290.008 cv
cp
f
643.815 227.714 mo
643.815 226.107 645.127 224.806 646.726 224.806 cv
648.326 224.806 649.633 226.107 649.633 227.714 cv
649.633 229.322 648.326 230.624 646.726 230.624 cv
645.127 230.624 643.815 229.322 643.815 227.714 cv
cp
651.778 232.625 mo
672.341 232.625 li
672.341 223.22 li
652.125 223.22 li
650.821 221.664 648.901 220.657 646.726 220.657 cv
642.834 220.657 639.668 223.82 639.668 227.714 cv
639.668 231.609 642.834 234.777 646.726 234.777 cv
648.709 234.777 650.496 233.947 651.778 232.625 cv
cp
f
246.399 165.421 mo
246.399 163.82 247.709 162.513 249.307 162.513 cv
250.911 162.513 252.214 163.82 252.214 165.421 cv
252.214 167.028 250.911 168.33 249.307 168.33 cv
247.709 168.33 246.399 167.028 246.399 165.421 cv
cp
256.367 165.421 mo
256.367 161.533 253.201 158.365 249.307 158.365 cv
245.418 158.365 242.246 161.533 242.246 165.421 cv
242.246 169.316 245.418 172.483 249.307 172.483 cv
253.201 172.483 256.367 169.316 256.367 165.421 cv
cp
f
79.875 294.99 mo
81.4761 294.99 82.7773 296.292 82.7773 297.899 cv
82.7773 299.5 81.4761 300.807 79.875 300.807 cv
78.2739 300.807 76.9727 299.5 76.9727 297.899 cv
76.9727 296.292 78.2739 294.99 79.875 294.99 cv
cp
86.9375 297.899 mo
86.9375 294.003 83.7695 290.831 79.875 290.831 cv
75.9805 290.831 72.8174 294.003 72.8174 297.899 cv
72.8174 300.191 73.937 302.22 75.6343 303.502 cv
73.7832 303.502 li
73.7832 326.208 li
85.9668 326.208 li
85.9668 303.502 li
84.1157 303.502 li
85.8237 302.22 86.9375 300.191 86.9375 297.899 cv
cp
f
98.9771 294.99 mo
100.582 294.99 101.89 296.292 101.89 297.899 cv
101.89 299.5 100.582 300.807 98.9771 300.807 cv
97.374 300.807 96.0742 299.5 96.0742 297.899 cv
96.0742 296.292 97.374 294.99 98.9771 294.99 cv
cp
106.04 297.899 mo
106.04 294.003 102.872 290.831 98.9771 290.831 cv
95.0869 290.831 91.9199 294.003 91.9199 297.899 cv
91.9199 300.191 93.0327 302.22 94.7407 303.502 cv
92.6118 303.502 li
92.6118 326.208 li
104.793 326.208 li
104.793 303.502 li
103.222 303.502 li
104.919 302.22 106.04 300.191 106.04 297.899 cv
cp
f
117.25 294.99 mo
118.856 294.99 120.157 296.292 120.157 297.899 cv
120.157 299.5 118.856 300.807 117.25 300.807 cv
115.647 300.807 114.346 299.5 114.346 297.899 cv
114.346 296.292 115.647 294.99 117.25 294.99 cv
cp
124.312 297.899 mo
124.312 294.003 121.145 290.831 117.25 290.831 cv
113.36 290.831 110.188 294.003 110.188 297.899 cv
110.188 300.191 111.31 302.22 113.009 303.502 cv
111.712 303.502 li
111.712 326.208 li
123.9 326.208 li
123.9 303.502 li
121.496 303.502 li
123.193 302.22 124.312 300.191 124.312 297.899 cv
cp
f
255.949 289.591 mo
255.949 287.995 257.258 286.683 258.859 286.683 cv
260.46 286.683 261.772 287.995 261.772 289.591 cv
261.772 291.197 260.46 292.499 258.859 292.499 cv
257.258 292.499 255.949 291.197 255.949 289.591 cv
cp
265.92 289.591 mo
265.92 285.697 262.754 282.534 258.859 282.534 cv
254.968 282.534 251.799 285.697 251.799 289.591 cv
251.799 293.486 254.968 296.647 258.859 296.647 cv
262.754 296.647 265.92 293.486 265.92 289.591 cv
cp
f
391.747 324.052 mo
390.145 324.052 388.839 322.751 388.839 321.155 cv
388.839 319.547 390.145 318.246 391.747 318.246 cv
393.348 318.246 394.654 319.547 394.654 321.155 cv
394.654 322.751 393.348 324.052 391.747 324.052 cv
cp
353.955 324.052 mo
352.353 324.052 351.05 322.751 351.05 321.155 cv
351.05 319.547 352.353 318.246 353.955 318.246 cv
355.556 318.246 356.862 319.547 356.862 321.155 cv
356.862 322.751 355.556 324.052 353.955 324.052 cv
cp
191.997 270.901 mo
190.396 270.901 189.09 269.6 189.09 267.993 cv
189.09 266.396 190.396 265.094 191.997 265.094 cv
193.604 265.094 194.904 266.396 194.904 267.993 cv
194.904 269.6 193.604 270.901 191.997 270.901 cv
cp
145.488 270.901 mo
143.887 270.901 142.585 269.6 142.585 267.993 cv
142.585 266.396 143.887 265.094 145.488 265.094 cv
147.095 265.094 148.401 266.396 148.401 267.993 cv
148.401 269.6 147.095 270.901 145.488 270.901 cv
cp
398.804 321.155 mo
398.804 317.26 395.635 314.092 391.747 314.092 cv
388.105 314.092 385.138 316.873 384.761 320.411 cv
360.94 320.411 li
360.627 317.423 358.466 314.993 355.591 314.3 cv
355.591 308.504 li
340.67 308.504 li
340.67 305.159 li
328.487 305.159 li
328.487 326.757 li
340.67 326.757 li
340.67 311.789 li
343.586 311.789 350.31 311.789 352.317 311.789 cv
352.317 312.547 352.317 313.481 352.317 314.3 cv
349.217 315.048 346.897 317.824 346.897 321.155 cv
346.897 324.275 348.946 326.9 351.764 327.826 cv
351.764 328.445 351.764 329.172 351.764 329.828 cv
348.6 329.828 217.567 329.828 214.401 329.828 cv
214.401 328.811 214.401 327.373 214.401 326.208 cv
217.75 326.208 li
217.75 303.502 li
214.263 303.502 li
214.263 287.18 li
198.27 271.185 li
198.757 270.22 199.061 269.151 199.061 267.993 cv
199.061 264.109 195.892 260.935 191.997 260.935 cv
188.455 260.935 185.541 263.57 185.045 266.975 cv
152.448 266.975 li
151.95 263.57 149.031 260.935 145.488 260.935 cv
141.593 260.935 138.431 264.109 138.431 267.993 cv
138.431 271.887 141.593 275.055 145.488 275.055 cv
148.585 275.055 151.197 273.037 152.144 270.26 cv
185.346 270.26 li
186.294 273.037 188.903 275.055 191.997 275.055 cv
193.55 275.055 194.974 274.542 196.132 273.686 cv
199.281 276.839 210.211 287.771 210.982 288.538 cv
210.982 289.499 210.982 299.088 210.982 303.502 cv
205.564 303.502 li
205.564 326.208 li
211.121 326.208 li
211.121 333.103 li
355.044 333.103 li
355.044 328.099 li
357.56 327.708 359.624 326 360.525 323.686 cv
385.177 323.686 li
386.206 326.33 388.752 328.211 391.747 328.211 cv
395.635 328.211 398.804 325.049 398.804 321.155 cv
cp
f
297.894 418.742 mo
296.293 418.742 294.987 417.435 294.987 415.835 cv
294.987 414.232 296.293 412.926 297.894 412.926 cv
299.495 412.926 300.802 414.232 300.802 415.835 cv
300.802 417.435 299.495 418.742 297.894 418.742 cv
cp
297.894 408.777 mo
294.006 408.777 290.839 411.94 290.839 415.835 cv
290.839 419.729 294.006 422.891 297.894 422.891 cv
301.782 422.891 304.952 419.729 304.952 415.835 cv
304.952 413.872 304.142 412.092 302.848 410.816 cv
319.407 392.65 li
321.02 392.65 li
321.02 390.88 li
321.117 390.778 li
321.02 390.688 li
321.02 358.875 li
311.329 358.875 li
311.329 392.65 li
314.974 392.65 li
299.953 409.117 li
299.303 408.914 298.617 408.777 297.894 408.777 cv
cp
f
67.835 393.199 mo
67.835 391.592 69.1367 390.29 70.7441 390.29 cv
72.3447 390.29 73.6465 391.592 73.6465 393.199 cv
73.6465 394.805 72.3447 396.112 70.7441 396.112 cv
69.1367 396.112 67.835 394.805 67.835 393.199 cv
cp
183.69 390.29 mo
185.298 390.29 186.604 391.592 186.604 393.199 cv
186.604 394.805 185.298 396.112 183.69 396.112 cv
182.089 396.112 180.789 394.805 180.789 393.199 cv
180.789 391.592 182.089 390.29 183.69 390.29 cv
cp
77.5874 394.836 mo
176.847 394.836 li
177.59 397.942 180.368 400.266 183.69 400.266 cv
187.591 400.266 190.754 397.094 190.754 393.199 cv
190.754 389.309 187.591 386.142 183.69 386.142 cv
180.368 386.142 177.59 388.461 176.847 391.562 cv
77.5874 391.562 li
76.8447 388.461 74.0679 386.142 70.7441 386.142 cv
66.8496 386.142 63.6816 389.309 63.6816 393.199 cv
63.6816 397.094 66.8496 400.266 70.7441 400.266 cv
74.0679 400.266 76.8447 397.942 77.5874 394.836 cv
cp
f
124.729 498.47 mo
124.729 496.867 126.03 495.566 127.632 495.566 cv
129.233 495.566 130.534 496.867 130.534 498.47 cv
130.534 500.076 129.233 501.383 127.632 501.383 cv
126.03 501.383 124.729 500.076 124.729 498.47 cv
cp
134.694 498.47 mo
134.694 494.58 131.521 491.413 127.632 491.413 cv
123.737 491.413 120.574 494.58 120.574 498.47 cv
120.574 502.369 123.737 505.532 127.632 505.532 cv
131.521 505.532 134.694 502.369 134.694 498.47 cv
cp
f
111.022 539.17 mo
111.022 540.771 109.72 542.079 108.119 542.079 cv
106.512 542.079 105.21 540.771 105.21 539.17 cv
105.21 537.568 106.512 536.26 108.119 536.26 cv
109.72 536.26 111.022 537.568 111.022 539.17 cv
cp
101.057 539.17 mo
101.057 543.063 104.224 546.231 108.119 546.231 cv
112.002 546.231 115.175 543.063 115.175 539.17 cv
115.175 535.275 112.002 532.112 108.119 532.112 cv
104.224 532.112 101.057 535.275 101.057 539.17 cv
cp
f
448.228 574.059 mo
446.621 574.059 445.321 572.747 445.321 571.15 cv
445.321 569.542 446.621 568.241 448.228 568.241 cv
449.83 568.241 451.132 569.542 451.132 571.15 cv
451.132 572.747 449.83 574.059 448.228 574.059 cv
cp
373.063 554.534 mo
371.461 554.534 370.152 553.232 370.152 551.63 cv
370.152 550.03 371.461 548.728 373.063 548.728 cv
374.664 548.728 375.964 550.03 375.964 551.63 cv
375.964 553.232 374.664 554.534 373.063 554.534 cv
cp
448.228 564.087 mo
444.977 564.087 442.26 566.309 441.442 569.299 cv
434.209 569.299 393.489 569.299 392.285 569.299 cv
391.548 568.567 382.143 559.15 378.757 555.765 cv
379.605 554.595 380.117 553.182 380.117 551.63 cv
380.117 547.736 376.951 544.569 373.063 544.569 cv
369.168 544.569 365.999 547.736 365.999 551.63 cv
365.999 555.521 369.168 558.688 373.063 558.688 cv
374.21 558.688 375.284 558.387 376.244 557.888 cv
390.928 572.573 li
441.31 572.573 li
441.975 575.786 444.821 578.207 448.228 578.207 cv
452.117 578.207 455.286 575.04 455.286 571.15 cv
455.286 567.255 452.117 564.087 448.228 564.087 cv
cp
f
353.816 570.179 mo
355.42 570.179 356.727 571.485 356.727 573.081 cv
356.727 574.689 355.42 575.991 353.816 575.991 cv
352.215 575.991 350.909 574.689 350.909 573.081 cv
350.909 571.485 352.215 570.179 353.816 570.179 cv
cp
353.816 580.144 mo
357.714 580.144 360.879 576.977 360.879 573.081 cv
360.879 569.187 357.714 566.024 353.816 566.024 cv
350.415 566.024 347.565 568.445 346.903 571.652 cv
288.913 571.652 li
288.913 571.652 270.308 590.262 269.393 591.171 cv
268.899 591.171 267.906 591.171 267.027 591.171 cv
267.027 588.106 li
236.573 588.106 li
236.573 597.791 li
267.027 597.791 li
267.027 594.452 li
270.75 594.452 li
270.75 594.452 289.359 575.848 290.268 574.933 cv
291.483 574.933 339.226 574.933 347.035 574.933 cv
347.854 577.92 350.575 580.144 353.816 580.144 cv
cp
f
467.33 432.861 mo
468.925 432.861 470.238 434.168 470.238 435.765 cv
470.238 437.372 468.925 438.673 467.33 438.673 cv
465.723 438.673 464.423 437.372 464.423 435.765 cv
464.423 434.168 465.723 432.861 467.33 432.861 cv
cp
391.747 427.874 mo
390.145 427.874 388.839 426.572 388.839 424.97 cv
388.839 423.369 390.145 422.068 391.747 422.068 cv
393.348 422.068 394.654 423.369 394.654 424.97 cv
394.654 426.572 393.348 427.874 391.747 427.874 cv
cp
336.099 427.874 mo
334.503 427.874 333.197 426.572 333.197 424.97 cv
333.197 423.369 334.503 422.068 336.099 422.068 cv
337.706 422.068 339.012 423.369 339.012 424.97 cv
339.012 426.572 337.706 427.874 336.099 427.874 cv
cp
393.176 418.061 mo
393.176 392.65 li
396.321 392.65 li
396.321 358.875 li
386.63 358.875 li
386.63 392.65 li
389.902 392.65 li
389.902 418.184 li
387.033 418.971 384.896 421.508 384.731 424.58 cv
343.12 424.58 li
342.912 420.868 339.861 417.909 336.099 417.909 cv
332.21 417.909 329.044 421.076 329.044 424.97 cv
329.044 428.865 332.21 432.028 336.099 432.028 cv
338.966 432.028 341.426 430.31 342.53 427.854 cv
385.321 427.854 li
386.428 430.31 388.885 432.028 391.747 432.028 cv
394.651 432.028 397.152 430.263 398.235 427.751 cv
406.151 427.751 456.185 427.751 457.404 427.751 cv
457.949 428.286 460.11 430.451 461.477 431.819 cv
460.715 432.946 460.273 434.305 460.273 435.765 cv
460.273 439.659 463.435 442.822 467.33 442.822 cv
471.219 442.822 474.388 439.659 474.388 435.765 cv
474.388 431.875 471.219 428.713 467.33 428.713 cv
466.084 428.713 464.935 429.053 463.923 429.623 cv
458.768 424.477 li
398.759 424.477 li
398.533 421.305 396.225 418.686 393.176 418.061 cv
cp
f
57.8652 226.058 mo
57.8652 224.451 59.1719 223.149 60.7729 223.149 cv
62.3755 223.149 63.6816 224.451 63.6816 226.058 cv
63.6816 227.659 62.3755 228.96 60.7729 228.96 cv
59.1719 228.96 57.8652 227.659 57.8652 226.058 cv
cp
67.835 226.058 mo
67.835 222.164 64.6631 218.989 60.7729 218.989 cv
56.8784 218.989 53.7168 222.164 53.7168 226.058 cv
53.7168 229.952 56.8784 233.114 60.7729 233.114 cv
64.6631 233.114 67.835 229.952 67.835 226.058 cv
cp
f
445.321 446.544 mo
445.321 444.936 446.621 443.634 448.228 443.634 cv
449.83 443.634 451.132 444.936 451.132 446.544 cv
451.132 448.14 449.83 449.446 448.228 449.446 cv
446.621 449.446 445.321 448.14 445.321 446.544 cv
cp
372.229 449.446 mo
370.625 449.446 369.325 448.14 369.325 446.544 cv
369.325 444.936 370.625 443.634 372.229 443.634 cv
373.833 443.634 375.136 444.936 375.136 446.544 cv
375.136 448.14 373.833 449.446 372.229 449.446 cv
cp
455.286 446.544 mo
455.286 442.649 452.117 439.486 448.228 439.486 cv
444.896 439.486 442.122 441.805 441.375 444.906 cv
379.076 444.906 li
378.335 441.805 375.558 439.486 372.229 439.486 cv
368.338 439.486 365.165 442.649 365.165 446.544 cv
365.165 450.438 368.338 453.601 372.229 453.601 cv
375.558 453.601 378.335 451.282 379.076 448.181 cv
441.375 448.181 li
442.025 450.896 444.225 452.99 447.003 453.479 cv
447.003 487.349 li
479.369 487.349 li
479.369 489.587 li
509.27 489.587 li
509.27 479.623 li
479.369 479.623 li
479.369 484.077 li
471.824 484.077 452.655 484.077 450.278 484.077 cv
450.278 481.411 450.278 458.868 450.278 453.259 cv
453.164 452.381 455.286 449.715 455.286 446.544 cv
cp
f
319.07 508.44 mo
319.07 510.046 317.77 511.348 316.169 511.348 cv
314.567 511.348 313.255 510.046 313.255 508.44 cv
313.255 506.843 314.567 505.532 316.169 505.532 cv
317.77 505.532 319.07 506.843 319.07 508.44 cv
cp
218.994 488.093 mo
218.994 486.486 220.294 485.184 221.901 485.184 cv
223.502 485.184 224.809 486.486 224.809 488.093 cv
224.809 489.698 223.502 491 221.901 491 cv
220.294 491 218.994 489.698 218.994 488.093 cv
cp
165.007 491 mo
163.406 491 162.104 489.698 162.104 488.093 cv
162.104 486.486 163.406 485.184 165.007 485.184 cv
166.613 485.184 167.914 486.486 167.914 488.093 cv
167.914 489.698 166.613 491 165.007 491 cv
cp
419.986 495.983 mo
421.587 495.983 422.893 497.285 422.893 498.892 cv
422.893 500.493 421.587 501.794 419.986 501.794 cv
418.382 501.794 417.076 500.493 417.076 498.892 cv
417.076 497.285 418.382 495.983 419.986 495.983 cv
cp
419.986 505.949 mo
423.88 505.949 427.047 502.786 427.047 498.892 cv
427.047 494.993 423.88 491.825 419.986 491.825 cv
416.35 491.825 413.374 494.61 413.004 498.15 cv
393.57 498.15 226.852 498.15 223.815 498.15 cv
223.815 497.162 223.815 495.852 223.815 494.854 cv
226.776 494.01 228.961 491.316 228.961 488.093 cv
228.961 484.203 225.795 481.036 221.901 481.036 cv
218.446 481.036 215.581 483.527 214.97 486.8 cv
171.935 486.8 li
171.333 483.527 168.459 481.036 165.007 481.036 cv
161.117 481.036 157.945 484.203 157.945 488.093 cv
157.945 491.988 161.117 495.149 165.007 495.149 cv
168.203 495.149 170.885 493.003 171.743 490.075 cv
215.159 490.075 li
215.9 492.578 217.949 494.509 220.541 495.007 cv
220.541 501.429 li
315.711 501.429 li
312.034 501.668 309.108 504.707 309.108 508.44 cv
309.108 512.334 312.28 515.502 316.169 515.502 cv
320.064 515.502 323.229 512.334 323.229 508.44 cv
323.229 504.707 320.304 501.668 316.626 501.429 cv
413.416 501.429 li
414.442 504.068 416.991 505.949 419.986 505.949 cv
cp
f
549.969 467.744 mo
549.969 466.138 551.272 464.837 552.873 464.837 cv
554.474 464.837 555.786 466.138 555.786 467.744 cv
555.786 469.346 554.474 470.653 552.873 470.653 cv
551.272 470.653 549.969 469.346 549.969 467.744 cv
cp
559.936 467.744 mo
559.936 463.85 556.768 460.683 552.873 460.683 cv
548.979 460.683 545.815 463.85 545.815 467.744 cv
545.815 471.639 548.979 474.802 552.873 474.802 cv
556.768 474.802 559.936 471.639 559.936 467.744 cv
cp
f
618.904 444.698 mo
620.506 444.698 621.811 445.999 621.811 447.602 cv
621.811 449.207 620.506 450.509 618.904 450.509 cv
617.301 450.509 615.994 449.207 615.994 447.602 cv
615.994 445.999 617.301 444.698 618.904 444.698 cv
cp
704.453 444.698 mo
706.055 444.698 707.354 445.999 707.354 447.602 cv
707.354 449.207 706.055 450.509 704.453 450.509 cv
702.849 450.509 701.543 449.207 701.543 447.602 cv
701.543 445.999 702.849 444.698 704.453 444.698 cv
cp
618.904 454.663 mo
622.227 454.663 625.011 452.344 625.758 449.239 cv
697.598 449.239 li
698.347 452.344 701.122 454.663 704.453 454.663 cv
708.348 454.663 711.508 451.5 711.508 447.602 cv
711.508 443.707 708.348 440.544 704.453 440.544 cv
701.122 440.544 698.347 442.863 697.598 445.964 cv
625.758 445.964 li
625.011 442.863 622.227 440.544 618.904 440.544 cv
615.01 440.544 611.847 443.707 611.847 447.602 cv
611.847 451.5 615.01 454.663 618.904 454.663 cv
cp
f
724.798 423.308 mo
726.399 423.308 727.709 424.609 727.709 426.216 cv
727.709 427.817 726.399 429.125 724.798 429.125 cv
723.197 429.125 721.892 427.817 721.892 426.216 cv
721.892 424.609 723.197 423.308 724.798 423.308 cv
cp
724.798 433.279 mo
728.689 433.279 731.856 430.111 731.856 426.216 cv
731.856 422.322 728.689 419.159 724.798 419.159 cv
720.904 419.159 717.744 422.322 717.744 426.216 cv
717.744 430.111 720.904 433.279 724.798 433.279 cv
cp
f
479.369 399.849 mo
479.369 409.814 li
509.27 409.814 li
509.27 406.885 li
536.109 406.885 li
536.109 406.885 574.63 368.367 575.566 367.433 cv
576.86 367.433 617.923 367.433 619.112 367.433 cv
619.9 368.123 626.206 373.716 627.13 374.524 cv
627.13 375.322 627.13 377.549 627.13 378.806 cv
623.892 378.806 li
623.892 412.586 li
633.583 412.586 li
633.583 378.806 li
630.404 378.806 li
630.404 373.05 li
620.358 364.158 li
574.208 364.158 li
574.208 364.158 535.688 402.671 534.758 403.606 cv
533.674 403.606 515.255 403.606 509.27 403.606 cv
509.27 399.849 li
479.369 399.849 li
cp
f
596.817 421.437 mo
566.916 421.437 li
566.916 424.896 li
552.888 424.896 li
552.888 424.896 533.572 445.598 532.643 446.584 cv
531.498 446.584 514.401 446.584 509.27 446.584 cv
509.27 442.619 li
479.369 442.619 li
479.369 452.584 li
509.27 452.584 li
509.27 449.863 li
534.066 449.863 li
534.066 449.863 553.388 429.155 554.317 428.164 cv
555.308 428.164 563.331 428.164 566.916 428.164 cv
566.916 431.402 li
596.817 431.402 li
596.817 421.437 li
cp
f
596.817 442.619 mo
566.916 442.619 li
566.916 445.761 li
549.463 445.761 li
549.463 445.761 531.704 464.71 530.776 465.69 cv
529.693 465.69 514.828 465.69 509.27 465.69 cv
509.27 462.549 li
479.369 462.549 li
479.369 472.52 li
509.27 472.52 li
509.27 468.965 li
532.194 468.965 li
532.194 468.965 549.96 450.017 550.887 449.035 cv
551.949 449.035 562.844 449.035 566.916 449.035 cv
566.916 452.584 li
596.817 452.584 li
596.817 442.619 li
cp
f
596.817 462.965 mo
566.916 462.965 li
566.916 472.936 li
596.817 472.936 li
596.817 462.965 li
cp
f
544.154 488.133 mo
542.553 488.133 541.247 486.832 541.247 485.225 cv
541.247 483.628 542.553 482.322 544.154 482.322 cv
545.755 482.322 547.061 483.628 547.061 485.225 cv
547.061 486.832 545.755 488.133 544.154 488.133 cv
cp
596.817 489.587 mo
596.817 479.623 li
566.916 479.623 li
566.916 483.517 li
550.983 483.517 li
550.216 480.456 547.453 478.167 544.154 478.167 cv
540.26 478.167 537.097 481.335 537.097 485.225 cv
537.097 489.119 540.26 492.287 544.154 492.287 cv
547.504 492.287 550.306 489.934 551.028 486.8 cv
566.916 486.8 li
566.916 489.587 li
596.817 489.587 li
cp
f
729.096 378.806 mo
719.405 378.806 li
719.405 412.586 li
729.096 412.586 li
729.096 378.806 li
cp
f
615.309 412.586 mo
615.309 378.806 li
605.613 378.806 li
605.613 393.849 li
560.298 393.849 li
560.298 393.849 530.599 423.543 529.669 424.477 cv
528.594 424.477 513.974 424.477 509.27 424.477 cv
509.27 421.437 li
479.369 421.437 li
479.369 431.402 li
509.27 431.402 li
509.27 427.751 li
531.026 427.751 li
531.026 427.751 560.72 398.049 561.655 397.124 cv
562.808 397.124 597.178 397.124 605.613 397.124 cv
605.613 412.586 li
615.309 412.586 li
cp
f
473.29 375.739 mo
545.084 375.739 li
545.084 375.739 562.019 357.232 562.94 356.226 cv
564.333 356.226 625.421 356.226 626.738 356.226 cv
627.63 357.111 644.817 374.307 645.715 375.19 cv
645.715 375.826 645.715 377.53 645.715 378.806 cv
642.714 378.806 li
642.714 412.586 li
652.407 412.586 li
652.407 378.806 li
648.985 378.806 li
648.985 373.838 li
628.096 352.941 li
561.501 352.941 li
561.501 352.941 544.56 371.453 543.639 372.465 cv
542.36 372.465 484.323 372.465 473.29 372.465 cv
473.29 358.875 li
463.593 358.875 li
463.593 392.65 li
473.29 392.65 li
473.29 375.739 li
cp
f
368.358 358.875 mo
368.358 392.65 li
378.05 392.65 li
378.05 358.875 li
368.358 358.875 li
cp
f
80.709 385.934 mo
79.1074 385.934 77.7998 384.632 77.7998 383.03 cv
77.7998 381.424 79.1074 380.123 80.709 380.123 cv
82.3096 380.123 83.6113 381.424 83.6113 383.03 cv
83.6113 384.632 82.3096 385.934 80.709 385.934 cv
cp
267.027 399.849 mo
236.573 399.849 li
236.573 403.814 li
235.456 403.814 233.952 403.814 232.88 403.814 cv
232.88 401.008 232.88 381.801 232.88 381.801 cv
87.6382 381.801 li
87.0591 378.496 84.1816 375.968 80.709 375.968 cv
76.8145 375.968 73.6465 379.135 73.6465 383.03 cv
73.6465 386.915 76.8145 390.087 80.709 390.087 cv
83.8809 390.087 86.5352 387.972 87.4243 385.083 cv
101.57 385.083 226.59 385.083 229.602 385.083 cv
229.602 387.891 229.602 407.089 229.602 407.089 cv
236.573 407.089 li
236.573 409.534 li
267.027 409.534 li
267.027 399.849 li
cp
f
236.573 421.437 mo
236.573 424.58 li
78.9238 424.58 li
78.9238 424.58 71.0791 433.548 70.2051 434.544 cv
69.1772 434.544 58.4238 434.544 52.9478 434.544 cv
52.9478 437.824 li
71.689 437.824 li
71.689 437.824 79.5396 428.85 80.4141 427.854 cv
81.7969 427.854 220.565 427.854 236.573 427.854 cv
236.573 431.128 li
267.027 431.128 li
267.027 421.437 li
236.573 421.437 li
cp
f
307.032 442.414 mo
308.632 442.414 309.939 443.716 309.939 445.323 cv
309.939 446.919 308.632 448.231 307.032 448.231 cv
305.424 448.231 304.124 446.919 304.124 445.323 cv
304.124 443.716 305.424 442.414 307.032 442.414 cv
cp
236.573 440.473 mo
236.573 450.164 li
267.027 450.164 li
267.027 446.96 li
300.182 446.96 li
300.925 450.062 303.708 452.381 307.032 452.381 cv
310.92 452.381 314.089 449.217 314.089 445.323 cv
314.089 441.428 310.92 438.261 307.032 438.261 cv
303.708 438.261 300.931 440.585 300.182 443.675 cv
267.027 443.675 li
267.027 440.473 li
236.573 440.473 li
cp
f
392.993 474.802 mo
394.6 474.802 395.899 476.109 395.899 477.71 cv
395.899 479.313 394.6 480.619 392.993 480.619 cv
391.391 480.619 390.088 479.313 390.088 477.71 cv
390.088 476.109 391.391 474.802 392.993 474.802 cv
cp
236.573 482.906 mo
236.573 492.586 li
267.027 492.586 li
267.027 489.526 li
270.196 489.526 li
270.196 489.526 278.061 481.666 278.915 480.802 cv
280.191 480.802 377.057 480.802 386.679 480.802 cv
387.831 483.141 390.218 484.772 392.993 484.772 cv
396.887 484.772 400.053 481.604 400.053 477.71 cv
400.053 473.815 396.887 470.653 392.993 470.653 cv
389.165 470.653 386.052 473.724 385.956 477.527 cv
277.558 477.527 li
277.558 477.527 269.697 485.387 268.839 486.242 cv
268.421 486.242 267.705 486.242 267.027 486.242 cv
267.027 482.906 li
236.573 482.906 li
cp
f
267.027 512.802 mo
267.027 503.111 li
236.573 503.111 li
236.573 512.802 li
267.027 512.802 li
cp
f
391.747 537.513 mo
393.348 537.513 394.654 538.815 394.654 540.42 cv
394.654 542.027 393.348 543.323 391.747 543.323 cv
390.145 543.323 388.839 542.027 388.839 540.42 cv
388.839 538.815 390.145 537.513 391.747 537.513 cv
cp
236.573 526.088 mo
236.573 535.773 li
267.027 535.773 li
267.027 531.878 li
283.815 531.878 380.292 531.878 381.517 531.878 cv
382.077 532.448 384.52 534.888 385.992 536.358 cv
385.177 537.513 384.688 538.904 384.688 540.42 cv
384.688 544.31 387.858 547.477 391.747 547.477 cv
395.635 547.477 398.804 544.31 398.804 540.42 cv
398.804 536.525 395.635 533.358 391.747 533.358 cv
390.558 533.358 389.453 533.679 388.466 534.202 cv
382.874 528.604 li
267.027 528.604 li
267.027 526.088 li
236.573 526.088 li
cp
f
289.175 546.231 mo
290.776 546.231 292.08 547.538 292.08 549.135 cv
292.08 550.741 290.776 552.044 289.175 552.044 cv
287.574 552.044 286.268 550.741 286.268 549.135 cv
286.268 547.538 287.574 546.231 289.175 546.231 cv
cp
236.573 555.713 mo
267.027 555.713 li
267.027 551.815 li
282.647 551.815 li
283.706 554.382 286.229 556.203 289.175 556.203 cv
293.067 556.203 296.233 553.028 296.233 549.135 cv
296.233 545.246 293.067 542.079 289.175 542.079 cv
285.488 542.079 282.485 544.93 282.175 548.535 cv
267.027 548.535 li
267.027 546.024 li
236.573 546.024 li
236.573 555.713 li
cp
f
325.722 546.644 mo
327.316 546.644 328.625 547.95 328.625 549.551 cv
328.625 551.158 327.316 552.46 325.722 552.46 cv
324.114 552.46 322.814 551.158 322.814 549.551 cv
322.814 547.95 324.114 546.644 325.722 546.644 cv
cp
236.573 576.194 mo
267.027 576.194 li
267.027 573.407 li
269.369 573.407 li
269.369 573.407 279.006 563.762 279.884 562.893 cv
281.193 562.893 316.427 562.893 316.427 562.893 cv
323.193 556.121 li
323.982 556.425 324.827 556.608 325.722 556.608 cv
329.61 556.608 332.779 553.446 332.779 549.551 cv
332.779 545.663 329.61 542.495 325.722 542.495 cv
321.827 542.495 318.66 545.663 318.66 549.551 cv
318.66 551.351 319.355 552.979 320.466 554.219 cv
319.058 555.632 315.72 558.968 315.073 559.614 cv
313.767 559.614 278.53 559.614 278.53 559.614 cv
278.53 559.614 268.885 569.258 268.008 570.133 cv
267.762 570.133 267.407 570.133 267.027 570.133 cv
267.027 566.507 li
236.573 566.507 li
236.573 576.194 li
cp
f
92.5859 507.545 mo
92.5859 476.561 li
52.9478 476.561 li
52.9478 479.836 li
63.3657 479.836 86.958 479.836 89.3115 479.836 cv
89.3115 482.234 89.3115 500.753 89.3115 507.545 cv
80.709 507.545 li
80.709 529.408 li
101.194 529.408 li
101.194 507.545 li
92.5859 507.545 li
cp
f
115.871 529.408 mo
136.352 529.408 li
136.352 507.545 li
115.871 507.545 li
115.871 529.408 li
cp
f
486.014 169.987 mo
484.413 169.987 483.107 168.686 483.107 167.09 cv
483.107 165.483 484.413 164.177 486.014 164.177 cv
487.615 164.177 488.921 165.483 488.921 167.09 cv
488.921 168.686 487.615 169.987 486.014 169.987 cv
cp
506.777 181.138 mo
506.777 150.403 li
491.278 150.403 li
491.278 162.422 li
489.975 160.962 488.115 160.028 486.014 160.028 cv
482.12 160.028 478.956 163.194 478.956 167.09 cv
478.956 170.979 482.12 174.142 486.014 174.142 cv
488.115 174.142 489.975 173.201 491.278 171.746 cv
491.278 181.138 li
506.777 181.138 li
cp
f
525.332 154.836 mo
525.332 175.326 li
541.114 175.326 li
541.114 154.836 li
525.332 154.836 li
cp
f
589.831 59.6992 mo
591.433 59.6992 592.745 61.0098 592.745 62.606 cv
592.745 64.2134 591.433 65.5146 589.831 65.5146 cv
588.23 65.5146 586.924 64.2134 586.924 62.606 cv
586.924 61.0098 588.23 59.6992 589.831 59.6992 cv
cp
589.831 69.6685 mo
593.732 69.6685 596.892 66.5005 596.892 62.606 cv
596.892 58.7178 593.732 55.5498 589.831 55.5498 cv
587.758 55.5498 585.907 56.4697 584.61 57.8989 cv
565.471 57.8989 li
565.471 67.3149 li
584.61 67.3149 li
585.907 68.749 587.758 69.6685 589.831 69.6685 cv
cp
f
586.792 161.202 mo
565.471 161.202 li
565.471 170.617 li
586.792 170.617 li
586.792 161.202 li
cp
f
473.97 217.749 mo
473.97 216.143 475.276 214.841 476.876 214.841 cv
478.481 214.841 479.787 216.143 479.787 217.749 cv
479.787 219.351 478.481 220.657 476.876 220.657 cv
475.276 220.657 473.97 219.351 473.97 217.749 cv
cp
586.792 232.078 mo
586.792 222.662 li
565.471 222.662 li
565.471 227.736 li
541.882 227.736 li
541.882 227.736 533.813 235.81 532.952 236.664 cv
531.67 236.664 498.359 236.664 497.072 236.664 cv
496.34 235.927 486.177 225.763 482.444 222.036 cv
483.365 220.845 483.935 219.366 483.935 217.749 cv
483.935 213.855 480.771 210.688 476.876 210.688 cv
472.988 210.688 469.822 213.855 469.822 217.749 cv
469.822 221.644 472.988 224.806 476.876 224.806 cv
477.961 224.806 478.969 224.542 479.887 224.105 cv
495.72 239.936 li
534.31 239.936 li
534.31 239.936 542.379 231.874 543.239 231.008 cv
544.29 231.008 559.925 231.008 565.471 231.008 cv
565.471 232.078 li
586.792 232.078 li
cp
f
651.571 243.425 mo
651.571 252.842 li
672.341 252.842 li
672.341 243.425 li
651.571 243.425 li
cp
f
365.584 236.786 mo
371.699 236.786 li
371.699 252.007 li
368.629 252.007 li
368.629 274.155 li
383.855 274.155 li
383.855 252.007 li
374.974 252.007 li
374.974 236.786 li
384.409 236.786 li
384.409 214.638 li
365.584 214.638 li
365.584 236.786 li
cp
f
263.705 150.962 mo
263.705 180.857 li
282.256 180.857 li
282.256 150.962 li
263.705 150.962 li
cp
f
240.172 213.595 mo
241.776 213.595 243.082 214.896 243.082 216.499 cv
243.082 218.105 241.776 219.407 240.172 219.407 cv
238.568 219.407 237.265 218.105 237.265 216.499 cv
237.265 214.896 238.568 213.595 240.172 213.595 cv
cp
205.288 210.479 mo
205.288 233.186 li
217.471 233.186 li
217.471 218.767 li
233.518 218.767 li
234.294 221.034 236.173 222.783 238.532 223.352 cv
238.532 239.826 li
229.934 239.826 li
229.934 261.698 li
251.522 261.698 li
251.522 239.826 li
241.81 239.826 li
241.81 223.352 li
244.913 222.608 247.23 219.83 247.23 216.499 cv
247.23 212.605 244.064 209.442 240.172 209.442 cv
236.63 209.442 233.717 212.081 233.217 215.486 cv
217.471 215.486 li
217.471 210.479 li
205.288 210.479 li
cp
f
198.643 233.186 mo
198.643 210.479 li
186.465 210.479 li
186.465 233.186 li
198.643 233.186 li
cp
f
174.072 234.777 mo
175.673 234.777 176.979 236.079 176.979 237.679 cv
176.979 239.282 175.673 240.588 174.072 240.588 cv
172.471 240.588 171.17 239.282 171.17 237.679 cv
171.17 236.079 172.471 234.777 174.072 234.777 cv
cp
174.072 244.742 mo
177.966 244.742 181.133 241.574 181.133 237.679 cv
181.133 235.961 180.494 234.411 179.465 233.186 cv
180.169 233.186 li
180.169 210.479 li
167.986 210.479 li
167.986 233.186 li
168.685 233.186 li
167.655 234.411 167.014 235.961 167.014 237.679 cv
167.014 241.574 170.183 244.742 174.072 244.742 cv
cp
f
161.824 233.186 mo
161.824 210.479 li
149.641 210.479 li
149.641 233.186 li
161.824 233.186 li
cp
f
143.551 233.186 mo
143.551 210.479 li
131.368 210.479 li
131.368 233.186 li
143.551 233.186 li
cp
f
117.601 234.777 mo
119.202 234.777 120.503 236.079 120.503 237.679 cv
120.503 239.282 119.202 240.588 117.601 240.588 cv
115.994 240.588 114.692 239.282 114.692 237.679 cv
114.692 236.079 115.994 234.777 117.601 234.777 cv
cp
117.601 244.742 mo
121.49 244.742 124.657 241.574 124.657 237.679 cv
124.657 235.961 124.017 234.411 122.996 233.186 cv
123.687 233.186 li
123.687 210.479 li
111.505 210.479 li
111.505 233.186 li
112.201 233.186 li
111.18 234.411 110.533 235.961 110.533 237.679 cv
110.533 241.574 113.706 244.742 117.601 244.742 cv
cp
f
80.0181 240.588 mo
78.4106 240.588 77.1094 239.282 77.1094 237.679 cv
77.1094 236.079 78.4106 234.777 80.0181 234.777 cv
81.6133 234.777 82.9248 236.079 82.9248 237.679 cv
82.9248 239.282 81.6133 240.588 80.0181 240.588 cv
cp
86.1035 233.186 mo
86.1035 210.479 li
73.9219 210.479 li
73.9219 233.186 li
74.6172 233.186 li
73.5952 234.411 72.9502 235.961 72.9502 237.679 cv
72.9502 241.574 76.1235 244.742 80.0181 244.742 cv
83.9063 244.742 87.0742 241.574 87.0742 237.679 cv
87.0742 235.961 86.4346 234.411 85.4116 233.186 cv
86.1035 233.186 li
cp
f
138.268 303.502 mo
138.268 285.665 li
76.0107 285.665 li
61.0742 300.603 li
61.0742 300.603 61.0742 326.625 61.0742 329.544 cv
59.5625 329.544 55.7451 329.544 52.9478 329.544 cv
52.9478 332.828 li
64.3467 332.828 li
64.3467 332.828 64.3467 303.267 64.3467 301.965 cv
65.2119 301.102 76.5039 289.805 77.374 288.94 cv
78.6592 288.94 131.928 288.94 134.989 288.94 cv
134.989 291.025 134.989 299.618 134.989 303.502 cv
131.094 303.502 li
131.094 326.208 li
143.276 326.208 li
143.276 303.502 li
138.268 303.502 li
cp
f
155.876 333.193 mo
154.269 333.193 152.962 331.892 152.962 330.286 cv
152.962 328.679 154.269 327.377 155.876 327.377 cv
157.472 327.377 158.778 328.679 158.778 330.286 cv
158.778 331.892 157.472 333.193 155.876 333.193 cv
cp
162.382 303.502 mo
150.201 303.502 li
150.201 326.131 li
149.337 327.302 148.813 328.73 148.813 330.286 cv
148.813 334.18 151.975 337.348 155.876 337.348 cv
159.764 337.348 162.932 334.18 162.932 330.286 cv
162.932 328.76 162.434 327.357 161.611 326.208 cv
162.382 326.208 li
162.382 303.502 li
cp
f
251.522 277.205 mo
229.934 277.205 li
229.934 299.068 li
251.522 299.068 li
251.522 277.205 li
cp
f
328.487 212.142 mo
328.487 233.734 li
340.67 233.734 li
340.67 212.142 li
328.487 212.142 li
cp
f
240.591 323.228 mo
238.984 323.228 237.684 321.922 237.684 320.321 cv
237.684 318.718 238.984 317.412 240.591 317.412 cv
242.186 317.412 243.492 318.718 243.492 320.321 cv
243.492 321.922 242.186 323.228 240.591 323.228 cv
cp
285.022 326.757 mo
285.022 305.159 li
272.839 305.159 li
272.839 310.173 li
268.56 310.173 li
268.56 310.173 260.012 318.718 259.154 319.583 cv
258.257 319.583 251.329 319.583 247.576 319.583 cv
247.194 316.04 244.227 313.264 240.591 313.264 cv
236.696 313.264 233.527 316.431 233.527 320.321 cv
233.527 324.215 236.696 327.377 240.591 327.377 cv
243.579 327.377 246.132 325.496 247.158 322.858 cv
260.505 322.858 li
260.505 322.858 269.056 314.31 269.923 313.447 cv
270.458 313.447 271.731 313.447 272.839 313.447 cv
272.839 326.757 li
285.022 326.757 li
cp
f
193.243 126.497 mo
191.642 126.497 190.342 125.184 190.342 123.588 cv
190.342 121.982 191.642 120.68 193.243 120.68 cv
194.85 120.68 196.157 121.982 196.157 123.588 cv
196.157 125.184 194.85 126.497 193.243 126.497 cv
cp
193.243 116.521 mo
189.921 116.521 187.14 118.844 186.396 121.946 cv
52.9478 121.946 li
52.9478 125.225 li
186.396 125.225 li
187.14 128.326 189.921 130.645 193.243 130.645 cv
197.138 130.645 200.307 127.473 200.307 123.588 cv
200.307 119.693 197.138 116.521 193.243 116.521 cv
cp
f
476.603 147.841 mo
475.002 147.841 473.695 146.539 473.695 144.932 cv
473.695 143.331 475.002 142.034 476.603 142.034 cv
478.204 142.034 479.507 143.331 479.507 144.932 cv
479.507 146.539 478.204 147.841 476.603 147.841 cv
cp
249.307 146.966 mo
247.709 146.966 246.399 145.665 246.399 144.058 cv
246.399 142.45 247.709 141.149 249.307 141.149 cv
250.911 141.149 252.214 142.45 252.214 144.058 cv
252.214 145.665 250.911 146.966 249.307 146.966 cv
cp
107.285 146.966 mo
105.683 146.966 104.376 145.665 104.376 144.058 cv
104.376 142.45 105.683 141.149 107.285 141.149 cv
108.887 141.149 110.188 142.45 110.188 144.058 cv
110.188 145.665 108.887 146.966 107.285 146.966 cv
cp
651.571 162.311 mo
651.571 165.372 li
650.68 165.372 649.723 165.372 649.215 165.372 cv
648.326 164.325 639.042 153.331 639.042 153.331 cv
639.042 153.331 555.167 153.331 553.831 153.331 cv
552.96 152.466 543.727 143.228 543.727 143.228 cv
483.426 143.228 li
482.797 140.691 480.792 138.699 478.241 138.087 cv
478.241 132.857 li
295.011 132.857 li
295.011 132.857 286.314 141.55 285.452 142.42 cv
284.335 142.42 262.29 142.42 256.157 142.42 cv
255.41 139.318 252.635 136.999 249.307 136.999 cv
245.984 136.999 243.203 139.318 242.463 142.42 cv
114.134 142.42 li
113.39 139.318 110.609 136.999 107.285 136.999 cv
103.959 136.999 101.179 139.318 100.435 142.42 cv
52.9478 142.42 li
52.9478 145.694 li
100.435 145.694 li
101.179 148.796 103.959 151.115 107.285 151.115 cv
110.609 151.115 113.39 148.796 114.134 145.694 cv
242.463 145.694 li
243.203 148.796 245.984 151.115 249.307 151.115 cv
252.635 151.115 255.41 148.796 256.157 145.694 cv
286.807 145.694 li
286.807 145.694 295.505 136.999 296.372 136.136 cv
297.701 136.136 471.757 136.136 474.966 136.136 cv
474.966 136.803 474.966 137.53 474.966 138.087 cv
471.86 138.831 469.542 141.612 469.542 144.932 cv
469.542 148.826 472.708 151.994 476.603 151.994 cv
479.958 151.994 482.755 149.645 483.477 146.509 cv
491.278 146.509 541.144 146.509 542.364 146.509 cv
543.239 147.377 552.473 156.61 552.473 156.61 cv
552.473 156.61 636.026 156.61 637.522 156.61 cv
638.407 157.663 647.7 168.655 647.7 168.655 cv
651.571 168.655 li
651.571 171.722 li
672.341 171.722 li
672.341 162.311 li
651.571 162.311 li
cp
f
586.792 212.695 mo
586.792 203.284 li
565.471 203.284 li
565.471 206.219 li
564.927 206.219 564.403 206.219 564.075 206.219 cv
563.199 205.333 553.138 195.277 553.138 195.277 cv
553.138 195.277 480.377 195.277 478.972 195.277 cv
478.027 194.259 440.493 154.028 440.493 154.028 cv
324.704 154.028 li
324.704 154.028 324.704 175.651 324.704 176.933 cv
323.913 177.716 318.633 182.998 317.848 183.786 cv
316.523 183.786 252.548 183.786 251.236 183.786 cv
250.321 182.872 231.718 164.273 231.718 164.273 cv
88.1826 164.273 li
88.1826 155.944 li
72.9502 155.944 li
72.9502 175.595 li
88.1826 175.595 li
88.1826 167.548 li
106.202 167.548 229.109 167.548 230.361 167.548 cv
231.27 168.462 249.873 187.065 249.873 187.065 cv
319.196 187.065 li
327.978 178.284 li
327.978 178.284 327.978 160.109 327.978 157.308 cv
331.145 157.308 437.68 157.308 439.07 157.308 cv
440.018 158.318 477.548 198.551 477.548 198.551 cv
477.548 198.551 550.448 198.551 551.781 198.551 cv
552.654 199.43 562.721 209.493 562.721 209.493 cv
565.471 209.493 li
565.471 212.695 li
586.792 212.695 li
cp
f
586.792 181.691 mo
565.471 181.691 li
565.471 185.032 li
554.815 185.032 486.044 185.032 484.78 185.032 cv
483.832 184.051 447.404 146 447.404 146 cv
316.885 146 li
316.885 146 316.885 161.553 316.885 164.273 cv
316.198 164.273 315.284 164.273 314.369 164.273 cv
314.369 155.11 li
298.586 155.11 li
298.586 175.595 li
314.369 175.595 li
314.369 167.548 li
320.159 167.548 li
320.159 167.548 320.159 151.989 320.159 149.274 cv
323.338 149.274 444.635 149.274 446.007 149.274 cv
446.946 150.26 483.375 188.311 483.375 188.311 cv
565.471 188.311 li
565.471 191.102 li
586.792 191.102 li
586.792 181.691 li
cp
f
325.58 90.4692 mo
321.002 90.4692 317.276 86.7373 317.276 82.1616 cv
317.276 77.5806 321.002 73.853 325.58 73.853 cv
330.161 73.853 333.886 77.5806 333.886 82.1616 cv
333.886 86.7373 330.161 90.4692 325.58 90.4692 cv
cp
338.871 82.1616 mo
338.871 74.8301 332.905 68.8706 325.58 68.8706 cv
318.251 68.8706 312.29 74.8301 312.29 82.1616 cv
312.29 88.8813 317.318 94.4453 323.804 95.3193 cv
323.804 126.573 li
323.804 126.573 543.513 126.573 544.861 126.573 cv
545.653 127.366 561.246 142.959 565.471 147.18 cv
565.471 150.677 li
586.792 150.677 li
586.792 141.272 li
565.471 141.272 li
565.471 142.553 li
546.219 123.298 li
546.219 123.298 330.308 123.298 327.079 123.298 cv
327.079 120.806 327.079 101.288 327.079 95.3604 cv
333.703 94.6123 338.871 88.9844 338.871 82.1616 cv
cp
f
362.953 90.4692 mo
358.378 90.4692 354.653 86.7373 354.653 82.1616 cv
354.653 77.5806 358.378 73.853 362.953 73.853 cv
367.54 73.853 371.263 77.5806 371.263 82.1616 cv
371.263 86.7373 367.54 90.4692 362.953 90.4692 cv
cp
376.244 82.1616 mo
376.244 74.8301 370.282 68.8706 362.953 68.8706 cv
355.628 68.8706 349.668 74.8301 349.668 82.1616 cv
349.668 88.9844 354.83 94.6123 361.455 95.3604 cv
361.455 113.389 li
361.455 113.389 550.541 113.389 551.883 113.389 cv
552.783 114.283 565.42 126.924 565.42 126.924 cv
565.471 126.872 li
565.471 129.364 li
586.792 129.364 li
586.792 119.958 li
565.471 119.958 li
565.471 122.343 li
553.244 110.115 li
553.244 110.115 367.946 110.115 364.732 110.115 cv
364.732 108.04 364.732 99.3916 364.732 95.3193 cv
371.221 94.4453 376.244 88.8813 376.244 82.1616 cv
cp
f
485.223 82.1616 mo
485.223 86.7373 481.494 90.4692 476.91 90.4692 cv
472.332 90.4692 468.612 86.7373 468.612 82.1616 cv
468.612 77.5806 472.332 73.853 476.91 73.853 cv
481.494 73.853 485.223 77.5806 485.223 82.1616 cv
cp
471.713 45.9766 mo
456.141 61.5498 li
456.141 105.183 li
565.471 105.183 li
565.471 107.77 li
586.792 107.77 li
586.792 98.3594 li
565.471 98.3594 li
565.471 101.909 li
554.348 101.909 462.404 101.909 459.415 101.909 cv
459.415 98.9404 459.415 64.1621 459.415 62.9009 cv
460.141 62.1851 470.903 51.4121 475.276 47.0435 cv
475.276 68.9819 li
468.724 69.7964 463.622 75.3882 463.622 82.1616 cv
463.622 89.4883 469.587 95.4517 476.91 95.4517 cv
484.242 95.4517 490.198 89.4883 490.198 82.1616 cv
490.198 75.3882 485.108 69.7964 478.556 68.9819 cv
478.556 45.9766 li
471.713 45.9766 li
cp
f
522.699 82.1616 mo
522.699 86.7373 518.97 90.4692 514.389 90.4692 cv
509.809 90.4692 506.088 86.7373 506.088 82.1616 cv
506.088 77.5806 509.809 73.853 514.389 73.853 cv
518.97 73.853 522.699 77.5806 522.699 82.1616 cv
cp
512.752 45.9766 mo
512.752 68.9819 li
506.2 69.7964 501.104 75.3882 501.104 82.1616 cv
501.104 89.4883 507.069 95.4517 514.389 95.4517 cv
521.72 95.4517 527.68 89.4883 527.68 82.1616 cv
527.68 75.3882 522.587 69.7964 516.032 68.9819 cv
516.032 45.9766 li
512.752 45.9766 li
cp
f
136.906 90.4692 mo
132.325 90.4692 128.598 86.7373 128.598 82.1616 cv
128.598 77.5806 132.325 73.853 136.906 73.853 cv
141.482 73.853 145.208 77.5806 145.208 82.1616 cv
145.208 86.7373 141.482 90.4692 136.906 90.4692 cv
cp
136.906 68.8706 mo
129.579 68.8706 123.616 74.8301 123.616 82.1616 cv
123.616 89.0957 128.964 94.8062 135.752 95.3901 cv
135.752 97.4741 135.752 100.475 135.752 101.909 cv
132.751 101.909 84.7251 101.909 81.7197 101.909 cv
81.7197 98.8887 81.7197 60.5928 81.7197 60.5928 cv
52.9478 60.5928 li
52.9478 63.8672 li
60.4839 63.8672 76.2197 63.8672 78.4468 63.8672 cv
78.4468 66.8877 78.4468 105.183 78.4468 105.183 cv
139.031 105.183 li
139.031 95.2573 li
145.351 94.2422 150.19 88.7598 150.19 82.1616 cv
150.19 74.8301 144.231 68.8706 136.906 68.8706 cv
cp
f
211.379 90.4692 mo
206.799 90.4692 203.079 86.7373 203.079 82.1616 cv
203.079 77.5806 206.799 73.853 211.379 73.853 cv
215.96 73.853 219.688 77.5806 219.688 82.1616 cv
219.688 86.7373 215.96 90.4692 211.379 90.4692 cv
cp
107.112 82.1616 mo
107.112 86.7373 103.389 90.4692 98.8086 90.4692 cv
94.228 90.4692 90.5005 86.7373 90.5005 82.1616 cv
90.5005 77.5806 94.228 73.853 98.8086 73.853 cv
103.389 73.853 107.112 77.5806 107.112 82.1616 cv
cp
211.379 68.8706 mo
204.466 68.8706 198.775 74.1782 198.155 80.936 cv
192.298 80.936 178.261 80.936 175.989 80.936 cv
175.989 77.9868 175.989 48.9604 175.989 48.9604 cv
100.446 48.9604 li
100.446 45.9766 li
97.1714 45.9766 li
97.1714 48.9604 li
52.9478 48.9604 li
52.9478 52.2397 li
61.2456 52.2397 78.3804 52.2397 97.1714 52.2397 cv
97.1714 68.9819 li
90.6133 69.7964 85.5181 75.3882 85.5181 82.1616 cv
85.5181 89.4883 91.4771 95.4517 98.8086 95.4517 cv
106.135 95.4517 112.095 89.4883 112.095 82.1616 cv
112.095 75.3882 106.999 69.7964 100.446 68.9819 cv
100.446 52.2397 li
133.799 52.2397 170.972 52.2397 172.714 52.2397 cv
172.714 55.189 172.714 84.2153 172.714 84.2153 cv
198.27 84.2153 li
199.26 90.5703 204.755 95.4517 211.379 95.4517 cv
218.708 95.4517 224.67 89.4883 224.67 82.1616 cv
224.67 74.8301 218.708 68.8706 211.379 68.8706 cv
cp
f
295.267 82.1616 mo
295.267 86.7373 291.538 90.4692 286.957 90.4692 cv
282.376 90.4692 278.657 86.7373 278.657 82.1616 cv
278.657 77.5806 282.376 73.853 286.957 73.853 cv
291.538 73.853 295.267 77.5806 295.267 82.1616 cv
cp
191.191 45.9766 mo
191.191 63.0332 li
191.191 63.0332 282.502 63.0332 285.663 63.0332 cv
285.663 64.3354 285.663 66.9189 285.663 68.9375 cv
278.945 69.5928 273.673 75.2661 273.673 82.1616 cv
273.673 89.4883 279.632 95.4517 286.957 95.4517 cv
294.289 95.4517 300.248 89.4883 300.248 82.1616 cv
300.248 75.5098 295.332 69.9995 288.943 69.0332 cv
288.943 59.7593 li
288.943 59.7593 197.631 59.7593 194.472 59.7593 cv
194.472 57.9956 194.472 50.9033 194.472 45.9766 cv
191.191 45.9766 li
cp
f
439.335 90.4692 mo
434.754 90.4692 431.028 86.7373 431.028 82.1616 cv
431.028 77.5806 434.754 73.853 439.335 73.853 cv
443.913 73.853 447.638 77.5806 447.638 82.1616 cv
447.638 86.7373 443.913 90.4692 439.335 90.4692 cv
cp
241.283 82.1616 mo
241.283 77.5806 245.009 73.853 249.589 73.853 cv
254.164 73.853 257.89 77.5806 257.89 82.1616 cv
257.89 86.7373 254.164 90.4692 249.589 90.4692 cv
245.009 90.4692 241.283 86.7373 241.283 82.1616 cv
cp
440.972 68.9819 mo
440.972 45.9766 li
437.695 45.9766 li
437.695 68.9819 li
431.14 69.7964 426.044 75.3882 426.044 82.1616 cv
426.044 88.9331 431.14 94.5264 437.695 95.3389 cv
437.695 97.8203 437.695 101.415 437.695 102.935 cv
434.694 102.935 386.835 102.935 383.834 102.935 cv
383.834 99.9048 383.834 61.2144 383.834 61.2144 cv
303.522 61.2144 li
303.522 61.2144 303.522 108.396 303.522 111.457 cv
302.598 111.457 281.193 111.457 251.155 111.457 cv
251.155 95.3496 li
257.746 94.5669 262.874 88.9585 262.874 82.1616 cv
262.874 74.8301 256.909 68.8706 249.589 68.8706 cv
242.258 68.8706 236.293 74.8301 236.293 82.1616 cv
236.293 88.9136 241.352 94.4863 247.88 95.3301 cv
247.88 111.457 li
181.499 111.457 76.5596 111.457 52.9478 111.457 cv
52.9478 114.736 li
306.796 114.736 li
306.796 114.736 306.796 67.5537 306.796 64.4888 cv
309.87 64.4888 377.49 64.4888 380.557 64.4888 cv
380.557 67.5181 380.557 106.214 380.557 106.214 cv
440.972 106.214 li
440.972 95.3389 li
447.521 94.5264 452.623 88.9331 452.623 82.1616 cv
452.623 75.3882 447.521 69.7964 440.972 68.9819 cv
cp
f
343.785 76.7622 mo
343.785 85.8979 li
346.897 85.8979 li
346.897 76.7622 li
343.785 76.7622 li
cp
f
409.118 82.1616 mo
409.118 86.7373 405.393 90.4692 400.818 90.4692 cv
396.237 90.4692 392.508 86.7373 392.508 82.1616 cv
392.508 77.5806 396.237 73.853 400.818 73.853 cv
405.393 73.853 409.118 77.5806 409.118 82.1616 cv
cp
399.174 45.9766 mo
399.174 68.9819 li
392.622 69.7964 387.521 75.3882 387.521 82.1616 cv
387.521 89.4883 393.489 95.4517 400.818 95.4517 cv
408.137 95.4517 414.108 89.4883 414.108 82.1616 cv
414.108 75.3882 409.006 69.7964 402.455 68.9819 cv
402.455 45.9766 li
399.174 45.9766 li
cp
f
562.426 79.8784 mo
564.03 79.8784 565.336 81.1802 565.336 82.7817 cv
565.336 84.3823 564.03 85.6904 562.426 85.6904 cv
560.822 85.6904 559.518 84.3823 559.518 82.7817 cv
559.518 81.1802 560.822 79.8784 562.426 79.8784 cv
cp
562.426 89.8477 mo
565.67 89.8477 568.391 87.6221 569.209 84.6265 cv
574.747 84.6265 589.904 84.6265 590.99 84.6265 cv
591.941 85.6387 630.236 126.364 630.236 126.364 cv
651.571 126.364 li
651.571 129.364 li
672.341 129.364 li
672.341 119.958 li
651.571 119.958 li
651.571 123.089 li
646.367 123.089 632.727 123.089 631.656 123.089 cv
630.708 122.082 592.408 81.3535 592.408 81.3535 cv
569.342 81.3535 li
568.677 78.145 565.83 75.7236 562.426 75.7236 cv
558.531 75.7236 555.365 78.8872 555.365 82.7817 cv
555.365 86.6758 558.531 89.8477 562.426 89.8477 cv
cp
f
647.141 79.8784 mo
648.748 79.8784 650.051 81.1802 650.051 82.7817 cv
650.051 84.3823 648.748 85.6904 647.141 85.6904 cv
645.54 85.6904 644.239 84.3823 644.239 82.7817 cv
644.239 81.1802 645.54 79.8784 647.141 79.8784 cv
cp
914.784 85.0688 mo
916.392 85.0688 917.698 86.3706 917.698 87.9775 cv
917.698 89.5742 916.392 90.8804 914.784 90.8804 cv
913.188 90.8804 911.883 89.5742 911.883 87.9775 cv
911.883 86.3706 913.188 85.0688 914.784 85.0688 cv
cp
647.141 89.8477 mo
650.162 89.8477 652.729 87.9263 653.731 85.2524 cv
654.035 85.2524 654.412 85.2524 654.849 85.2524 cv
654.849 98.3594 li
651.571 98.3594 li
651.571 107.776 li
672.341 107.776 li
672.341 98.3594 li
658.123 98.3594 li
658.123 85.2524 li
686.221 85.2524 814.904 85.2524 816.104 85.2524 cv
816.982 86.1372 827.523 96.6724 827.523 96.6724 cv
827.523 96.6724 867.943 96.6724 869.255 96.6724 cv
870.049 97.459 875.127 102.539 875.127 102.539 cv
875.127 102.539 887.382 90.2964 888.264 89.4053 cv
889.367 89.4053 904.082 89.4053 907.874 89.4053 cv
908.536 92.6143 911.384 95.0352 914.784 95.0352 cv
918.679 95.0352 921.848 91.8672 921.848 87.9775 cv
921.848 84.083 918.679 80.9111 914.784 80.9111 cv
911.537 80.9111 908.822 83.1377 908.004 86.1265 cv
886.905 86.1265 li
886.905 86.1265 877.034 96.0015 875.127 97.9121 cv
873.732 96.5078 870.611 93.3921 870.611 93.3921 cv
870.611 93.3921 830.196 93.3921 828.88 93.3921 cv
828.002 92.5132 817.464 81.978 817.464 81.978 cv
654.123 81.978 li
653.711 78.4653 650.756 75.7236 647.141 75.7236 cv
643.246 75.7236 640.08 78.8872 640.08 82.7817 cv
640.08 86.6758 643.246 89.8477 647.141 89.8477 cv
cp
f
751.376 119.744 mo
752.98 119.744 754.283 121.046 754.283 122.653 cv
754.283 124.249 752.98 125.556 751.376 125.556 cv
749.772 125.556 748.473 124.249 748.473 122.653 cv
748.473 121.046 749.772 119.744 751.376 119.744 cv
cp
694.485 104.588 mo
694.485 144.455 li
731.443 144.455 li
731.443 124.91 li
744.719 124.91 li
745.677 127.695 748.279 129.709 751.376 129.709 cv
755.271 129.709 758.438 126.541 758.438 122.653 cv
758.438 118.758 755.271 115.591 751.376 115.591 cv
747.831 115.591 744.918 118.229 744.415 121.636 cv
731.443 121.636 li
731.443 104.588 li
694.485 104.588 li
cp
f
628.451 179.129 mo
626.85 179.129 625.55 177.823 625.55 176.221 cv
625.55 174.619 626.85 173.313 628.451 173.313 cv
630.059 173.313 631.364 174.619 631.364 176.221 cv
631.364 177.823 630.059 179.129 628.451 179.129 cv
cp
710.262 155.456 mo
710.262 153.849 711.57 152.548 713.166 152.548 cv
714.773 152.548 716.079 153.849 716.079 155.456 cv
716.079 157.064 714.773 158.365 713.166 158.365 cv
711.57 158.365 710.262 157.064 710.262 155.456 cv
cp
672.341 191.936 mo
672.341 188.24 li
714.81 188.24 li
714.81 162.3 li
717.915 161.564 720.229 158.782 720.229 155.456 cv
720.229 151.566 717.06 148.399 713.166 148.399 cv
709.277 148.399 706.108 151.566 706.108 155.456 cv
706.108 158.782 708.432 161.564 711.529 162.3 cv
711.529 167.383 711.529 182.571 711.529 184.966 cv
709.951 184.966 690.669 184.966 672.341 184.966 cv
672.341 182.52 li
651.571 182.52 li
651.571 184.966 li
644.174 184.966 639.027 184.966 638.681 184.966 cv
638.136 184.417 635.698 181.976 634.115 180.395 cv
634.978 179.221 635.515 177.786 635.515 176.221 cv
635.515 172.327 632.346 169.164 628.451 169.164 cv
624.563 169.164 621.394 172.327 621.394 176.221 cv
621.394 180.116 624.563 183.277 628.451 183.277 cv
629.585 183.277 630.648 182.993 631.593 182.51 cv
637.329 188.24 li
651.571 188.24 li
651.571 191.936 li
672.341 191.936 li
cp
f
694.903 152.548 mo
696.505 152.548 697.808 153.849 697.808 155.456 cv
697.808 157.064 696.505 158.365 694.903 158.365 cv
693.296 158.365 691.996 157.064 691.996 155.456 cv
691.996 153.849 693.296 152.548 694.903 152.548 cv
cp
651.571 141.819 mo
651.571 151.237 li
672.341 151.237 li
672.341 147.749 li
676.397 147.749 683.569 147.749 684.46 147.749 cv
684.99 148.283 687.232 150.525 688.752 152.045 cv
688.192 153.063 687.837 154.217 687.837 155.456 cv
687.837 159.351 691.003 162.513 694.903 162.513 cv
698.789 162.513 701.955 159.351 701.955 155.456 cv
701.955 151.566 698.789 148.399 694.903 148.399 cv
693.438 148.399 692.078 148.847 690.949 149.604 cv
685.818 144.474 li
672.341 144.474 li
672.341 141.819 li
651.571 141.819 li
cp
f
409.627 351.203 mo
409.627 358.875 li
406.566 358.875 li
406.566 392.65 li
416.254 392.65 li
416.254 358.875 li
412.907 358.875 li
412.907 356.47 412.907 353.276 412.907 352.565 cv
413.816 351.645 440.623 324.846 441.532 323.929 cv
442.874 323.929 654.905 323.929 656.232 323.929 cv
657.156 324.846 703.06 369.958 704.005 370.894 cv
704.005 371.804 704.005 376.609 704.005 378.806 cv
700.856 378.806 li
700.856 412.586 li
710.542 412.586 li
710.542 378.806 li
707.285 378.806 li
707.285 369.516 li
657.575 320.657 li
440.174 320.657 li
409.627 351.203 li
cp
f
449.525 334.729 mo
450.868 334.729 643.563 334.729 644.904 334.729 cv
645.828 335.655 683.199 373.024 684.126 373.95 cv
684.126 374.687 684.126 377.224 684.126 378.806 cv
681.472 378.806 li
681.472 412.586 li
691.166 412.586 li
691.166 378.806 li
687.403 378.806 li
687.403 372.597 li
646.256 331.455 li
448.171 331.455 li
428.578 351.045 li
428.578 358.875 li
424.835 358.875 li
424.835 392.65 li
434.525 392.65 li
434.525 358.875 li
431.852 358.875 li
431.852 356.419 431.852 353.125 431.852 352.402 cv
432.737 351.517 448.64 335.614 449.525 334.729 cv
cp
f
459.286 346.047 mo
460.628 346.047 636.194 346.047 637.537 346.047 cv
638.446 346.957 664.108 372.618 665.018 373.533 cv
665.018 374.266 665.018 376.98 665.018 378.806 cv
662.376 378.806 li
662.376 412.586 li
672.06 412.586 li
672.06 378.806 li
668.302 378.806 li
668.302 372.17 li
638.894 342.773 li
457.928 342.773 li
447.831 352.87 li
447.831 358.875 li
444.487 358.875 li
444.487 392.65 li
454.181 392.65 li
454.181 358.875 li
451.112 358.875 li
451.112 357.034 451.112 354.848 451.112 354.223 cv
451.924 353.409 458.473 346.855 459.286 346.047 cv
cp
f
349.81 358.875 mo
349.81 392.65 li
352.317 392.65 li
352.317 393.473 352.317 394.353 352.317 394.805 cv
351.438 395.69 335.996 411.126 335.117 412.014 cv
333.847 412.014 315.903 412.014 315.903 412.014 cv
315.903 412.014 294.866 433.054 293.952 433.975 cv
292.603 433.975 87.918 433.975 87.918 433.975 cv
87.918 433.975 76.7842 445.105 75.8989 445.994 cv
74.9326 445.994 60.2188 445.994 52.9478 445.994 cv
52.9478 449.269 li
77.2612 449.269 li
77.2612 449.269 88.3906 438.134 89.2759 437.25 cv
90.624 437.25 295.303 437.25 295.303 437.25 cv
295.303 437.25 316.346 416.211 317.261 415.29 cv
318.528 415.29 336.465 415.29 336.465 415.29 cv
355.598 396.168 li
355.598 392.65 li
359.501 392.65 li
359.501 358.875 li
349.81 358.875 li
cp
f
156.287 407.944 mo
154.681 407.944 153.379 406.642 153.379 405.035 cv
153.379 403.439 154.681 402.127 156.287 402.127 cv
157.889 402.127 159.191 403.439 159.191 405.035 cv
159.191 406.642 157.889 407.944 156.287 407.944 cv
cp
156.287 397.979 mo
152.956 397.979 150.182 400.296 149.438 403.397 cv
52.9478 403.397 li
52.9478 406.672 li
149.438 406.672 li
150.182 409.773 152.956 412.097 156.287 412.097 cv
160.181 412.097 163.344 408.929 163.344 405.035 cv
163.344 401.146 160.181 397.979 156.287 397.979 cv
cp
f
202.387 553.294 mo
200.779 553.294 199.479 551.992 199.479 550.385 cv
199.479 548.779 200.779 547.477 202.387 547.477 cv
203.982 547.477 205.288 548.779 205.288 550.385 cv
205.288 551.992 203.982 553.294 202.387 553.294 cv
cp
202.387 543.323 mo
198.492 543.323 195.32 546.49 195.32 550.385 cv
195.32 551.87 195.783 553.232 196.566 554.371 cv
195.013 555.917 192.442 558.49 191.871 559.059 cv
190.661 559.059 75.4521 559.059 52.9478 559.059 cv
52.9478 562.333 li
193.234 562.333 li
199.021 556.553 li
200.021 557.102 201.161 557.442 202.387 557.442 cv
206.269 557.442 209.438 554.281 209.438 550.385 cv
209.438 546.49 206.269 543.323 202.387 543.323 cv
cp
f
60.4985 527.755 mo
52.9478 527.755 li
52.9478 551.011 li
60.4985 551.011 li
60.4985 527.755 li
cp
f
71.0176 542.632 mo
69.4121 542.632 68.1099 541.33 68.1099 539.729 cv
68.1099 538.127 69.4121 536.821 71.0176 536.821 cv
72.6143 536.821 73.9219 538.127 73.9219 539.729 cv
73.9219 541.33 72.6143 542.632 71.0176 542.632 cv
cp
72.9307 532.962 mo
72.9307 497.047 li
60.4985 497.047 li
60.4985 485.398 li
52.9478 485.398 li
52.9478 508.653 li
60.4985 508.653 li
60.4985 500.319 li
63.5537 500.319 68.0337 500.319 69.6553 500.319 cv
69.6553 502.938 69.6553 526.885 69.6553 532.799 cv
66.4111 533.445 63.9556 536.301 63.9556 539.729 cv
63.9556 543.624 67.123 546.786 71.0176 546.786 cv
74.9077 546.786 78.0757 543.624 78.0757 539.729 cv
78.0757 536.5 75.8882 533.8 72.9307 532.962 cv
cp
f
129.158 449.889 mo
127.551 449.889 126.249 448.577 126.249 446.981 cv
126.249 445.385 127.551 444.072 129.158 444.072 cv
130.759 444.072 132.065 445.385 132.065 446.981 cv
132.065 448.577 130.759 449.889 129.158 449.889 cv
cp
129.158 439.924 mo
125.704 439.924 122.837 442.414 122.227 445.689 cv
99.2656 445.689 li
99.2656 445.689 89.7583 455.198 88.8887 456.072 cv
87.8477 456.072 63.1479 456.072 52.9478 456.072 cv
52.9478 459.346 li
90.2412 459.346 li
90.2412 459.346 99.7549 449.838 100.623 448.963 cv
101.773 448.963 118.872 448.963 122.415 448.963 cv
123.284 451.887 125.958 454.043 129.158 454.043 cv
133.046 454.043 136.22 450.876 136.22 446.981 cv
136.22 443.085 133.046 439.924 129.158 439.924 cv
cp
f
297.484 459.03 mo
295.878 459.03 294.575 457.718 294.575 456.113 cv
294.575 454.51 295.878 453.208 297.484 453.208 cv
299.086 453.208 300.386 454.51 300.386 456.113 cv
300.386 457.718 299.086 459.03 297.484 459.03 cv
cp
297.484 449.055 mo
294.382 449.055 291.772 451.073 290.828 453.855 cv
232.02 453.855 li
232.02 453.855 222.373 463.504 221.498 464.374 cv
220.264 464.374 76.4487 464.374 52.9478 464.374 cv
52.9478 467.653 li
222.858 467.653 li
222.858 467.653 232.507 458.009 233.373 457.135 cv
234.589 457.135 282.569 457.135 290.523 457.135 cv
291.021 460.545 293.934 463.169 297.484 463.169 cv
301.374 463.169 304.54 460.007 304.54 456.113 cv
304.54 452.227 301.374 449.055 297.484 449.055 cv
cp
f
211.933 188.26 mo
210.326 188.26 209.025 186.958 209.025 185.357 cv
209.025 183.756 210.326 182.45 211.933 182.45 cv
213.534 182.45 214.844 183.756 214.844 185.357 cv
214.844 186.958 213.534 188.26 211.933 188.26 cv
cp
211.933 178.295 mo
208.34 178.295 205.402 181.004 204.959 184.478 cv
108.215 184.478 li
108.215 184.478 91.1475 203.386 90.2217 204.408 cv
89.1177 204.408 63.8291 204.408 52.9478 204.408 cv
52.9478 207.693 li
91.6758 207.693 li
91.6758 207.693 108.749 188.779 109.668 187.757 cv
110.996 187.757 192.719 187.757 205.324 187.757 cv
206.311 190.468 208.887 192.419 211.933 192.419 cv
215.828 192.419 218.994 189.252 218.994 185.357 cv
218.994 181.463 215.828 178.295 211.933 178.295 cv
cp
f
335.686 189.094 mo
334.082 189.094 332.779 187.794 332.779 186.186 cv
332.779 184.59 334.082 183.277 335.686 183.277 cv
337.29 183.277 338.59 184.59 338.59 186.186 cv
338.59 187.794 337.29 189.094 335.686 189.094 cv
cp
335.686 179.129 mo
331.792 179.129 328.625 182.296 328.625 186.186 cv
328.625 187.488 329.001 188.683 329.615 189.73 cv
327.933 191.413 325.065 194.281 324.487 194.86 cv
323.157 194.86 243.697 194.86 242.37 194.86 cv
241.455 193.945 219.529 172.021 219.529 172.021 cv
99.6831 172.021 li
99.6831 172.021 88.1108 183.594 87.2271 184.478 cv
86.1846 184.478 62.6045 184.478 52.9478 184.478 cv
52.9478 187.757 li
88.585 187.757 li
88.585 187.757 100.157 176.186 101.04 175.296 cv
102.373 175.296 216.842 175.296 218.175 175.296 cv
219.099 176.216 241.018 198.139 241.018 198.139 cv
325.842 198.139 li
331.873 192.109 li
332.972 192.817 334.281 193.249 335.686 193.249 cv
339.583 193.249 342.744 190.081 342.744 186.186 cv
342.744 182.296 339.583 179.129 335.686 179.129 cv
cp
f
279.21 251.387 mo
277.603 251.387 276.303 250.085 276.303 248.48 cv
276.303 246.872 277.603 245.571 279.21 245.571 cv
280.811 245.571 282.112 246.872 282.112 248.48 cv
282.112 250.085 280.811 251.387 279.21 251.387 cv
cp
279.21 269.66 mo
277.603 269.66 276.303 268.358 276.303 266.753 cv
276.303 265.146 277.603 263.844 279.21 263.844 cv
280.811 263.844 282.112 265.146 282.112 266.753 cv
282.112 268.358 280.811 269.66 279.21 269.66 cv
cp
283.024 260.824 mo
281.919 260.116 280.613 259.69 279.21 259.69 cv
275.316 259.69 272.149 262.858 272.149 266.753 cv
272.149 270.647 275.316 273.809 279.21 273.809 cv
283.099 273.809 286.268 270.647 286.268 266.753 cv
286.268 265.451 285.892 264.25 285.278 263.203 cv
288.179 260.295 li
288.179 260.295 288.179 249.465 288.179 248.256 cv
289.043 247.39 297.25 239.185 297.25 239.185 cv
297.25 233.734 li
303.847 233.734 li
303.847 212.142 li
291.67 212.142 li
291.67 233.734 li
293.976 233.734 li
293.976 235.377 293.976 237.243 293.976 237.833 cv
293.29 238.513 287.965 243.842 285.81 245.992 cv
284.956 243.741 282.984 242.032 280.567 241.554 cv
280.567 233.734 li
285.022 233.734 li
285.022 212.142 li
272.839 212.142 li
272.839 233.734 li
277.293 233.734 li
277.293 241.717 li
274.335 242.561 272.149 245.256 272.149 248.48 cv
272.149 252.368 275.316 255.542 279.21 255.542 cv
281.555 255.542 283.616 254.377 284.905 252.607 cv
284.905 255.425 284.905 258.353 284.905 258.943 cv
284.537 259.309 283.74 260.112 283.024 260.824 cv
cp
f
297.064 260.518 mo
295.46 260.518 294.156 259.216 294.156 257.611 cv
294.156 256.015 295.46 254.702 297.064 254.702 cv
298.667 254.702 299.971 256.015 299.971 257.611 cv
299.971 259.216 298.667 260.518 297.064 260.518 cv
cp
301.428 252.109 mo
300.224 251.154 298.725 250.553 297.064 250.553 cv
293.175 250.553 290.003 253.725 290.003 257.611 cv
290.003 261.505 293.175 264.677 297.064 264.677 cv
300.958 264.677 304.124 261.505 304.124 257.611 cv
304.124 256.574 303.883 255.586 303.474 254.691 cv
319.326 238.84 li
319.326 233.734 li
322.675 233.734 li
322.675 212.142 li
310.492 212.142 li
310.492 233.734 li
316.051 233.734 li
316.051 235.127 316.051 236.876 316.051 237.487 cv
315.302 238.235 305.009 248.529 301.428 252.109 cv
cp
f
211.518 250.97 mo
209.916 250.97 208.611 249.668 208.611 248.063 cv
208.611 246.46 209.916 245.158 211.518 245.158 cv
213.125 245.158 214.425 246.46 214.425 248.063 cv
214.425 249.668 213.125 250.97 211.518 250.97 cv
cp
391.328 275.472 mo
392.935 275.472 394.238 276.777 394.238 278.374 cv
394.238 279.981 392.935 281.288 391.328 281.288 cv
389.733 281.288 388.427 279.981 388.427 278.374 cv
388.427 276.777 389.733 275.472 391.328 275.472 cv
cp
259.154 270.26 mo
260.033 271.134 270.359 281.467 270.359 281.467 cv
299.544 281.467 li
299.544 281.467 307.479 273.539 308.332 272.68 cv
309.631 272.68 351.977 272.68 353.278 272.68 cv
354.138 273.539 362.309 281.711 362.309 281.711 cv
385.153 281.711 li
386.347 283.917 388.649 285.443 391.328 285.443 cv
395.226 285.443 398.392 282.275 398.392 278.374 cv
398.392 274.49 395.226 271.318 391.328 271.318 cv
387.44 271.318 384.273 274.49 384.273 278.374 cv
384.273 278.4 384.276 278.415 384.276 278.435 cv
378.883 278.435 364.699 278.435 363.67 278.435 cv
362.806 277.577 354.635 269.401 354.635 269.401 cv
306.977 269.401 li
306.977 269.401 299.044 277.338 298.183 278.197 cv
296.925 278.197 272.977 278.197 271.722 278.197 cv
270.844 277.317 260.505 266.975 260.505 266.975 cv
260.505 266.975 226.262 266.975 223.261 266.975 cv
223.261 264.19 223.261 245.663 223.261 245.663 cv
218.127 245.663 li
217.14 242.957 214.569 241.005 211.518 241.005 cv
207.629 241.005 204.46 244.169 204.46 248.063 cv
204.46 251.958 207.629 255.119 211.518 255.119 cv
215.111 255.119 218.045 252.415 218.488 248.941 cv
218.988 248.941 219.512 248.941 219.983 248.941 cv
219.983 251.733 219.983 270.26 219.983 270.26 cv
219.983 270.26 257.842 270.26 259.154 270.26 cv
cp
f
74.063 248.408 mo
74.063 267.495 li
72.7363 267.484 70.7788 267.469 70.0977 267.464 cv
69.4209 266.772 58.4551 255.623 52.9478 250.025 cv
52.9478 254.702 li
68.7148 270.728 li
74.063 270.773 li
74.063 271.109 li
86.2402 271.109 li
86.2402 248.408 li
74.063 248.408 li
cp
f
175.923 303.502 mo
175.923 278.472 li
175.923 278.472 61.5464 278.472 60.2085 278.472 cv
59.6504 277.917 55.7544 274.022 52.9478 271.216 cv
52.9478 275.843 li
58.8467 281.751 li
58.8467 281.751 169.461 281.751 172.645 281.751 cv
172.645 284.049 172.645 298.022 172.645 303.502 cv
168.75 303.502 li
168.75 326.208 li
180.925 326.208 li
180.925 303.502 li
175.923 303.502 li
cp
f
391.328 210.275 mo
389.733 210.275 388.427 208.974 388.427 207.368 cv
388.427 205.761 389.733 204.46 391.328 204.46 cv
392.935 204.46 394.238 205.761 394.238 207.368 cv
394.238 208.974 392.935 210.275 391.328 210.275 cv
cp
751.792 235.606 mo
753.398 235.606 754.695 236.907 754.695 238.513 cv
754.695 240.116 753.398 241.422 751.792 241.422 cv
750.19 241.422 748.888 240.116 748.888 238.513 cv
748.888 236.907 750.19 235.606 751.792 235.606 cv
cp
475.369 262.369 mo
690.316 262.369 li
690.316 262.369 711.688 241.001 712.603 240.08 cv
713.765 240.08 739.413 240.08 744.924 240.08 cv
745.64 243.217 748.435 245.571 751.792 245.571 cv
755.685 245.571 758.855 242.398 758.855 238.513 cv
758.855 234.625 755.685 231.451 751.792 231.451 cv
748.486 231.451 745.736 233.74 744.963 236.805 cv
711.249 236.805 li
711.249 236.805 689.874 258.169 688.96 259.09 cv
688.346 259.09 644.107 259.09 596.176 259.09 cv
596.176 245.936 li
586.792 245.936 li
586.792 243.151 li
565.471 243.151 li
565.471 252.563 li
586.792 252.563 li
586.792 249.217 li
588.682 249.217 591.484 249.217 592.901 249.217 cv
592.901 251.041 592.901 256.31 592.901 259.09 cv
537.045 259.09 477.442 259.09 476.727 259.09 cv
475.857 258.221 466.415 248.774 466.415 248.774 cv
466.415 248.774 433.066 248.774 430.068 248.774 cv
430.068 245.755 430.068 206.904 430.068 206.904 cv
398.347 206.904 li
398.103 203.229 395.066 200.306 391.328 200.306 cv
387.984 200.306 385.177 202.659 384.466 205.791 cv
382.061 205.791 377.089 205.791 375.254 205.791 cv
375.254 204.632 375.254 202.318 375.254 200.24 cv
384.409 200.24 li
384.409 178.092 li
365.584 178.092 li
365.584 200.24 li
371.973 200.24 li
371.973 209.076 li
384.505 209.076 li
385.279 212.142 388.036 214.424 391.328 214.424 cv
394.223 214.424 396.71 212.675 397.795 210.184 cv
403.538 210.184 424.256 210.184 426.794 210.184 cv
426.794 213.204 426.794 252.058 426.794 252.058 cv
426.794 252.058 463.752 252.058 465.058 252.058 cv
465.928 252.933 475.369 262.369 475.369 262.369 cv
cp
f
391.328 251.387 mo
389.733 251.387 388.427 250.085 388.427 248.48 cv
388.427 246.872 389.733 245.571 391.328 245.571 cv
392.935 245.571 394.238 246.872 394.238 248.48 cv
394.238 250.085 392.935 251.387 391.328 251.387 cv
cp
398.073 246.497 mo
397.206 243.568 394.533 241.422 391.328 241.422 cv
387.44 241.422 384.273 244.59 384.273 248.48 cv
384.273 252.368 387.44 255.542 391.328 255.542 cv
394.783 255.542 397.654 253.045 398.265 249.771 cv
409.073 249.771 li
409.073 252.007 li
399.638 252.007 li
399.638 274.155 li
414.864 274.155 li
414.864 252.007 li
412.353 252.007 li
412.353 236.786 li
420.955 236.786 li
420.955 214.638 li
402.129 214.638 li
402.129 236.786 li
409.073 236.786 li
409.073 246.497 li
398.073 246.497 li
cp
f
373.063 303.705 mo
371.461 303.705 370.152 302.403 370.152 300.807 cv
370.152 299.199 371.461 297.899 373.063 297.899 cv
374.664 297.899 375.964 299.199 375.964 300.807 cv
375.964 302.403 374.664 303.705 373.063 303.705 cv
cp
410.854 297.899 mo
412.45 297.899 413.756 299.199 413.756 300.807 cv
413.756 302.403 412.45 303.705 410.854 303.705 cv
409.247 303.705 407.944 302.403 407.944 300.807 cv
407.944 299.199 409.247 297.899 410.854 297.899 cv
cp
398.804 302.927 mo
404.152 302.927 li
405.061 305.78 407.701 307.864 410.854 307.864 cv
414.096 307.864 416.816 305.642 417.629 302.647 cv
432.151 302.647 li
436.286 298.52 li
460.273 298.52 li
460.273 264.463 li
435.904 264.463 li
435.904 294.268 li
433.956 296.211 431.317 298.854 430.799 299.373 cv
429.813 299.373 421.277 299.373 417.762 299.373 cv
417.102 296.16 414.249 293.74 410.854 293.74 cv
407.354 293.74 404.462 296.307 403.908 299.648 cv
398.804 299.648 li
398.804 289.388 li
384.135 289.388 li
384.135 299.648 li
380.003 299.648 li
379.446 296.307 376.56 293.74 373.063 293.74 cv
369.761 293.74 367.001 296.027 366.234 299.099 cv
316.325 299.099 li
316.325 305.159 li
310.492 305.159 li
310.492 309.339 li
303.847 309.339 li
303.847 305.159 li
291.667 305.159 li
291.667 326.757 li
303.847 326.757 li
303.847 312.612 li
310.492 312.612 li
310.492 326.757 li
322.675 326.757 li
322.675 305.159 li
319.606 305.159 li
319.606 304.254 319.606 303.202 319.606 302.373 cv
322.471 302.373 361.316 302.373 366.188 302.373 cv
366.911 305.516 369.707 307.864 373.063 307.864 cv
376.207 307.864 378.853 305.78 379.759 302.927 cv
384.135 302.927 li
384.135 310.976 li
398.804 310.976 li
398.804 302.927 li
cp
f
117.25 354.375 mo
115.647 354.375 114.346 353.073 114.346 351.466 cv
114.346 349.861 115.647 348.559 117.25 348.559 cv
118.856 348.559 120.157 349.861 120.157 351.466 cv
120.157 353.073 118.856 354.375 117.25 354.375 cv
cp
248.5 341.319 mo
248.5 341.319 248.5 348.995 248.5 351.284 cv
245.539 351.284 139.585 351.284 124.291 351.284 cv
124.19 347.481 121.078 344.404 117.25 344.404 cv
113.36 344.404 110.188 347.571 110.188 351.466 cv
110.188 355.362 113.36 358.524 117.25 358.524 cv
120.031 358.524 122.415 356.897 123.564 354.559 cv
251.78 354.559 li
251.78 354.559 251.78 346.881 251.78 344.592 cv
254.872 344.592 331.163 344.592 334.254 344.592 cv
334.254 346.565 334.254 354.573 334.254 358.875 cv
331.539 358.875 li
331.539 392.65 li
341.227 392.65 li
341.227 358.875 li
337.531 358.875 li
337.531 341.319 li
248.5 341.319 li
cp
f
193.662 344.404 mo
192.054 344.404 190.754 343.103 190.754 341.501 cv
190.754 339.896 192.054 338.594 193.662 338.594 cv
195.263 338.594 196.572 339.896 196.572 341.501 cv
196.572 343.103 195.263 344.404 193.662 344.404 cv
cp
195.091 334.587 mo
195.091 326.208 li
198.643 326.208 li
198.643 303.502 li
186.465 303.502 li
186.465 326.208 li
191.811 326.208 li
191.811 334.719 li
189.273 335.411 187.284 337.465 186.748 340.067 cv
52.9478 340.067 li
52.9478 343.353 li
186.881 343.353 li
187.7 346.342 190.414 348.559 193.662 348.559 cv
197.556 348.559 200.719 345.391 200.719 341.501 cv
200.719 338.094 198.299 335.248 195.091 334.587 cv
cp
f
99.3936 364.752 mo
97.793 364.752 96.4849 363.45 96.4849 361.85 cv
96.4849 360.242 97.793 358.94 99.3936 358.94 cv
100.995 358.94 102.301 360.242 102.301 361.85 cv
102.301 363.45 100.995 364.752 99.3936 364.752 cv
cp
257.011 351.487 mo
257.011 351.487 257.011 357.863 257.011 360.003 cv
253.971 360.003 120.051 360.003 106.176 360.003 cv
105.357 357.008 102.643 354.792 99.3936 354.792 cv
95.5044 354.792 92.332 357.955 92.332 361.85 cv
92.332 365.744 95.5044 368.905 99.3936 368.905 cv
102.795 368.905 105.642 366.486 106.309 363.283 cv
260.286 363.283 li
260.286 363.283 260.286 356.908 260.286 354.762 cv
263.169 354.762 293.175 354.762 296.049 354.762 cv
296.049 355.799 296.049 357.446 296.049 358.875 cv
293.055 358.875 li
293.055 392.65 li
302.74 392.65 li
302.74 358.875 li
299.33 358.875 li
299.33 351.487 li
257.011 351.487 li
cp
f
274.509 358.875 mo
274.509 372.252 li
52.9478 372.252 li
52.9478 375.525 li
274.509 375.525 li
274.509 392.65 li
284.197 392.65 li
284.197 358.875 li
274.509 358.875 li
cp
f
1032.02 1138.88 mo
1029.19 1138.88 1026.9 1136.58 1026.9 1133.76 cv
1026.9 1130.94 1029.19 1128.64 1032.02 1128.64 cv
1034.84 1128.64 1037.13 1130.94 1037.13 1133.76 cv
1037.13 1136.58 1034.84 1138.88 1032.02 1138.88 cv
cp
1032.02 1144.73 mo
1038.06 1144.73 1042.98 1139.8 1042.98 1133.76 cv
1042.98 1127.71 1038.06 1122.8 1032.02 1122.8 cv
1025.97 1122.8 1021.05 1127.71 1021.05 1133.76 cv
1021.05 1139.8 1025.97 1144.73 1032.02 1144.73 cv
cp
f
868.267 1033.67 mo
868.267 1035.08 867.119 1036.23 865.711 1036.23 cv
864.302 1036.23 863.146 1035.08 863.146 1033.67 cv
863.146 1032.26 864.302 1031.11 865.711 1031.11 cv
867.119 1031.11 868.267 1032.26 868.267 1033.67 cv
cp
766.654 1053.04 mo
766.654 1054.45 765.511 1055.6 764.096 1055.6 cv
762.682 1055.6 761.536 1054.45 761.536 1053.04 cv
761.536 1051.63 762.682 1050.48 764.096 1050.48 cv
765.511 1050.48 766.654 1051.63 766.654 1053.04 cv
cp
1003.87 1015.76 mo
1003.87 1014.35 1005.02 1013.2 1006.43 1013.2 cv
1007.84 1013.2 1008.99 1014.35 1008.99 1015.76 cv
1008.99 1017.17 1007.84 1018.32 1006.43 1018.32 cv
1005.02 1018.32 1003.87 1017.17 1003.87 1015.76 cv
cp
1000.22 1015.76 mo
1000.22 1017.19 1000.72 1018.48 1001.53 1019.53 cv
998.102 1022.96 989.652 1031.42 989.021 1032.04 cv
987.911 1032.04 885.151 1032.04 871.682 1032.04 cv
870.961 1029.41 868.572 1027.46 865.711 1027.46 cv
864.198 1027.46 862.829 1028.02 861.751 1028.92 cv
861.642 1028.81 li
861.642 1028.81 840.217 1050.24 839.401 1051.05 cv
838.315 1051.05 778.81 1051.05 769.952 1051.05 cv
769.117 1048.6 766.821 1046.83 764.096 1046.83 cv
760.673 1046.83 757.882 1049.62 757.882 1053.04 cv
757.882 1056.47 760.673 1059.26 764.096 1059.26 cv
767.216 1059.26 769.78 1056.93 770.217 1053.93 cv
840.596 1053.93 li
859.62 1034.91 li
860.2 1037.74 862.707 1039.88 865.711 1039.88 cv
868.704 1039.88 871.207 1037.75 871.793 1034.93 cv
990.216 1034.93 li
1003.78 1021.36 li
1004.59 1021.74 1005.48 1021.97 1006.43 1021.97 cv
1009.86 1021.97 1012.64 1019.18 1012.64 1015.76 cv
1012.64 1012.34 1009.86 1009.54 1006.43 1009.54 cv
1003 1009.54 1000.22 1012.34 1000.22 1015.76 cv
cp
f
682.221 1059.62 mo
683.636 1059.62 684.779 1060.76 684.779 1062.18 cv
684.779 1063.59 683.636 1064.74 682.221 1064.74 cv
680.811 1064.74 679.661 1063.59 679.661 1062.18 cv
679.661 1060.76 680.811 1059.62 682.221 1059.62 cv
cp
945.753 1015.4 mo
945.753 1013.98 946.902 1012.84 948.311 1012.84 cv
949.726 1012.84 950.871 1013.98 950.871 1015.4 cv
950.871 1016.8 949.726 1017.95 948.311 1017.95 cv
946.902 1017.95 945.753 1016.8 945.753 1015.4 cv
cp
942.417 1013.53 mo
854.998 1013.53 li
854.998 1013.53 827.674 1040.85 826.855 1041.67 cv
825.669 1041.67 680.411 1041.67 680.411 1041.67 cv
680.411 1056.26 li
677.871 1057.04 676.009 1059.39 676.009 1062.18 cv
676.009 1065.61 678.796 1068.39 682.221 1068.39 cv
685.648 1068.39 688.435 1065.61 688.435 1062.18 cv
688.435 1059.12 686.213 1056.59 683.299 1056.08 cv
683.299 1053.41 683.299 1046.42 683.299 1044.56 cv
686.128 1044.56 828.05 1044.56 828.05 1044.56 cv
828.05 1044.56 855.374 1017.23 856.193 1016.41 cv
857.276 1016.41 930.416 1016.41 942.203 1016.41 cv
942.69 1019.35 945.236 1021.61 948.311 1021.61 cv
951.745 1021.61 954.531 1018.83 954.531 1015.4 cv
954.531 1011.97 951.745 1009.18 948.311 1009.18 cv
945.541 1009.18 943.221 1011.02 942.417 1013.53 cv
cp
f
817.094 1117.01 mo
817.094 1118.42 815.949 1119.57 814.535 1119.57 cv
813.128 1119.57 811.978 1118.42 811.978 1117.01 cv
811.978 1115.6 813.128 1114.45 814.535 1114.45 cv
815.949 1114.45 817.094 1115.6 817.094 1117.01 cv
cp
837.08 1112.68 mo
818.983 1112.68 li
817.854 1111.52 816.281 1110.79 814.535 1110.79 cv
811.109 1110.79 808.322 1113.58 808.322 1117.01 cv
808.322 1120.44 811.109 1123.22 814.535 1123.22 cv
816.453 1123.22 818.141 1122.33 819.287 1120.96 cv
837.08 1120.96 li
837.08 1112.68 li
cp
f
488.299 724.078 mo
488.299 722.664 489.443 721.519 490.858 721.519 cv
492.262 721.519 493.414 722.664 493.414 724.078 cv
493.414 725.493 492.262 726.639 490.858 726.639 cv
489.443 726.639 488.299 725.493 488.299 724.078 cv
cp
489.416 730.102 mo
489.416 737.423 li
485.981 737.423 li
485.981 767.148 li
495.727 767.148 li
495.727 737.423 li
492.299 737.423 li
492.299 730.102 li
495.027 729.454 497.072 727.006 497.072 724.078 cv
497.072 720.65 494.286 717.867 490.858 717.867 cv
487.425 717.867 484.644 720.65 484.644 724.078 cv
484.644 727.006 486.688 729.454 489.416 730.102 cv
cp
f
504.908 724.078 mo
504.908 722.664 506.055 721.519 507.47 721.519 cv
508.879 721.519 510.029 722.664 510.029 724.078 cv
510.029 725.493 508.879 726.639 507.47 726.639 cv
506.055 726.639 504.908 725.493 504.908 724.078 cv
cp
506.02 730.102 mo
506.02 737.423 li
502.595 737.423 li
502.595 767.148 li
512.339 767.148 li
512.339 737.423 li
508.911 737.423 li
508.911 730.102 li
511.639 729.454 513.681 727.006 513.681 724.078 cv
513.681 720.65 510.892 717.867 507.47 717.867 cv
504.041 717.867 501.252 720.65 501.252 724.078 cv
501.252 727.006 503.295 729.454 506.02 730.102 cv
cp
f
575.855 696.67 mo
575.855 698.078 574.711 699.225 573.297 699.225 cv
571.888 699.225 570.741 698.078 570.741 696.67 cv
570.741 695.254 571.888 694.106 573.297 694.106 cv
574.711 694.106 575.855 695.254 575.855 696.67 cv
cp
880.582 677.694 mo
931.867 677.694 li
931.867 674.816 li
931.867 674.816 882.948 674.816 881.779 674.816 cv
881.029 674.057 874.344 667.384 874.344 667.384 cv
597.679 667.384 li
574.486 690.574 li
574.102 690.497 573.705 690.453 573.297 690.453 cv
569.87 690.453 567.085 693.24 567.085 696.67 cv
567.085 700.093 569.87 702.88 573.297 702.88 cv
576.724 702.88 579.514 700.093 579.514 696.67 cv
579.514 694.74 578.614 693.039 577.236 691.902 cv
581.567 687.571 598.166 670.973 598.873 670.271 cv
600.062 670.271 871.968 670.271 873.152 670.271 cv
873.904 671.019 880.582 677.694 880.582 677.694 cv
cp
f
721.333 704.71 mo
721.333 703.296 722.477 702.149 723.887 702.149 cv
725.302 702.149 726.447 703.296 726.447 704.71 cv
726.447 706.116 725.302 707.271 723.887 707.271 cv
722.477 707.271 721.333 706.116 721.333 704.71 cv
cp
717.675 704.71 mo
717.675 705.252 717.771 705.775 717.9 706.277 cv
716.321 707.861 710.43 713.751 709.768 714.412 cv
708.587 714.412 622.899 714.412 622.899 714.412 cv
606.341 730.975 li
606.341 737.423 li
602.664 737.423 li
602.664 767.148 li
612.409 767.148 li
612.409 737.423 li
609.223 737.423 li
609.223 735.579 609.223 732.832 609.223 732.17 cv
610.001 731.391 623.315 718.073 624.089 717.293 cv
625.271 717.293 710.96 717.293 710.96 717.293 cv
719.347 708.918 li
720.482 710.144 722.093 710.923 723.887 710.923 cv
727.314 710.923 730.103 708.135 730.103 704.71 cv
730.103 701.283 727.314 698.49 723.887 698.49 cv
720.464 698.49 717.675 701.283 717.675 704.71 cv
cp
f
732.297 721.157 mo
733.706 721.157 734.855 722.303 734.855 723.712 cv
734.855 725.127 733.706 726.271 732.297 726.271 cv
730.886 726.271 729.735 725.127 729.735 723.712 cv
729.735 722.303 730.886 721.157 732.297 721.157 cv
cp
732.297 717.5 mo
729.701 717.5 727.481 719.099 726.555 721.357 cv
633.013 721.357 li
622.42 731.956 li
622.42 737.423 li
618.987 737.423 li
618.987 767.148 li
628.735 767.148 li
628.735 737.423 li
625.302 737.423 li
625.302 736.095 625.302 733.813 625.302 733.146 cv
626.044 732.407 633.469 724.983 634.202 724.24 cv
635.313 724.24 715.998 724.24 726.133 724.24 cv
726.411 727.418 729.055 729.923 732.297 729.923 cv
735.726 729.923 738.512 727.14 738.512 723.712 cv
738.512 720.294 735.726 717.5 732.297 717.5 cv
cp
f
762.634 741.259 mo
762.634 739.849 763.783 738.704 765.192 738.704 cv
766.602 738.704 767.751 739.849 767.751 741.259 cv
767.751 742.668 766.602 743.817 765.192 743.817 cv
763.783 743.817 762.634 742.668 762.634 741.259 cv
cp
759.219 739.634 mo
731.214 739.634 li
731.214 739.634 723.444 747.398 722.685 748.159 cv
721.627 748.159 672.213 748.159 662.358 748.159 cv
662.358 737.423 li
652.618 737.423 li
652.618 767.148 li
662.358 767.148 li
662.358 751.042 li
723.874 751.042 li
723.874 751.042 731.643 743.28 732.403 742.516 cv
733.378 742.516 753.142 742.516 759.109 742.516 cv
759.693 745.339 762.199 747.465 765.192 747.465 cv
768.621 747.465 771.406 744.691 771.406 741.259 cv
771.406 737.835 768.621 735.043 765.192 735.043 cv
762.328 735.043 759.942 736.994 759.219 739.634 cv
cp
f
809.785 759.529 mo
809.785 760.944 808.641 762.094 807.227 762.094 cv
805.823 762.094 804.668 760.944 804.668 759.529 cv
804.668 758.125 805.823 756.979 807.227 756.979 cv
808.641 756.979 809.785 758.125 809.785 759.529 cv
cp
813.441 759.529 mo
813.441 756.111 810.654 753.318 807.227 753.318 cv
803.799 753.318 801.015 756.111 801.015 759.529 cv
801.015 762.958 803.799 765.75 807.227 765.75 cv
810.654 765.75 813.441 762.958 813.441 759.529 cv
cp
f
521.517 794.382 mo
521.517 792.969 522.667 791.822 524.076 791.822 cv
525.491 791.822 526.635 792.969 526.635 794.382 cv
526.635 795.787 525.491 796.938 524.076 796.938 cv
522.667 796.938 521.517 795.787 521.517 794.382 cv
cp
518.071 792.874 mo
514.503 792.874 499.594 792.874 498.601 792.874 cv
497.798 792.073 483.372 777.644 483.372 777.644 cv
480.336 777.644 li
480.336 774.951 li
453.531 774.951 li
453.531 783.481 li
480.336 783.481 li
480.336 780.527 li
481.062 780.527 481.796 780.527 482.177 780.527 cv
482.972 781.328 497.406 795.757 497.406 795.757 cv
518.031 795.757 li
518.656 798.521 521.128 800.593 524.076 800.593 cv
527.498 800.593 530.291 797.81 530.291 794.382 cv
530.291 790.953 527.498 788.171 524.076 788.171 cv
521.173 788.171 518.746 790.175 518.071 792.874 cv
cp
f
787.491 923.47 mo
787.491 922.055 788.637 920.907 790.05 920.907 cv
791.457 920.907 792.602 922.055 792.602 923.47 cv
792.602 924.876 791.457 926.031 790.05 926.031 cv
788.637 926.031 787.491 924.876 787.491 923.47 cv
cp
862.783 923.47 mo
862.783 922.055 863.933 920.907 865.34 920.907 cv
866.755 920.907 867.898 922.055 867.898 923.47 cv
867.898 924.876 866.755 926.031 865.34 926.031 cv
863.933 926.031 862.783 924.876 862.783 923.47 cv
cp
783.836 923.47 mo
783.836 926.896 786.62 929.682 790.05 929.682 cv
792.973 929.682 795.422 927.642 796.079 924.91 cv
859.316 924.91 li
859.971 927.642 862.413 929.682 865.34 929.682 cv
868.769 929.682 871.56 926.896 871.56 923.47 cv
871.56 920.042 868.769 917.249 865.34 917.249 cv
862.413 917.249 859.971 919.29 859.316 922.025 cv
796.079 922.025 li
795.422 919.29 792.973 917.249 790.05 917.249 cv
786.62 917.249 783.836 920.042 783.836 923.47 cv
cp
f
880.693 942.29 mo
880.693 940.876 881.843 939.731 883.252 939.731 cv
884.661 939.731 885.814 940.876 885.814 942.29 cv
885.814 943.697 884.661 944.849 883.252 944.849 cv
881.843 944.849 880.693 943.697 880.693 942.29 cv
cp
877.043 942.29 mo
877.043 945.715 879.825 948.502 883.252 948.502 cv
886.677 948.502 889.464 945.715 889.464 942.29 cv
889.464 938.863 886.677 936.07 883.252 936.07 cv
879.825 936.07 877.043 938.863 877.043 942.29 cv
cp
f
913.228 942.29 mo
913.228 940.876 914.373 939.731 915.788 939.731 cv
917.191 939.731 918.341 940.876 918.341 942.29 cv
918.341 943.697 917.191 944.849 915.788 944.849 cv
914.373 944.849 913.228 943.697 913.228 942.29 cv
cp
909.57 942.29 mo
909.57 945.715 912.354 948.502 915.788 948.502 cv
919.205 948.502 921.994 945.715 921.994 942.29 cv
921.994 938.863 919.205 936.07 915.788 936.07 cv
912.354 936.07 909.57 938.863 909.57 942.29 cv
cp
f
852.182 760.264 mo
852.182 761.679 851.038 762.824 849.623 762.824 cv
848.215 762.824 847.067 761.679 847.067 760.264 cv
847.067 758.85 848.215 757.704 849.623 757.704 cv
851.038 757.704 852.182 758.85 852.182 760.264 cv
cp
849.623 754.052 mo
846.198 754.052 843.411 756.84 843.411 760.264 cv
843.411 763.691 846.198 766.476 849.623 766.476 cv
853.051 766.476 855.844 763.691 855.844 760.264 cv
855.844 756.84 853.051 754.052 849.623 754.052 cv
cp
f
901.891 758.44 mo
901.891 759.852 900.746 760.993 899.337 760.993 cv
897.928 760.993 896.778 759.852 896.778 758.44 cv
896.778 757.027 897.928 755.878 899.337 755.878 cv
900.746 755.878 901.891 757.027 901.891 758.44 cv
cp
899.337 752.227 mo
895.909 752.227 893.12 755.011 893.12 758.44 cv
893.12 761.86 895.909 764.649 899.337 764.649 cv
902.766 764.649 905.549 761.86 905.549 758.44 cv
905.549 755.011 902.766 752.227 899.337 752.227 cv
cp
f
879.966 704.344 mo
879.966 702.929 881.109 701.783 882.524 701.783 cv
883.934 701.783 885.08 702.929 885.08 704.344 cv
885.08 705.758 883.934 706.904 882.524 706.904 cv
881.109 706.904 879.966 705.758 879.966 704.344 cv
cp
882.524 710.556 mo
885.951 710.556 888.735 707.769 888.735 704.344 cv
888.735 700.916 885.951 698.132 882.524 698.132 cv
879.096 698.132 876.313 700.916 876.313 704.344 cv
876.313 707.769 879.096 710.556 882.524 710.556 cv
cp
f
918.709 660.604 mo
918.709 662.014 917.565 663.16 916.15 663.16 cv
914.741 663.16 913.594 662.014 913.594 660.604 cv
913.594 659.191 914.741 658.041 916.15 658.041 cv
917.565 658.041 918.709 659.191 918.709 660.604 cv
cp
559.774 686.796 mo
559.774 688.206 558.627 689.352 557.214 689.352 cv
555.803 689.352 554.658 688.206 554.658 686.796 cv
554.658 685.387 555.803 684.233 557.214 684.233 cv
558.627 684.233 559.774 685.387 559.774 686.796 cv
cp
922.361 660.604 mo
922.361 657.178 919.578 654.389 916.15 654.389 cv
913.199 654.389 910.736 656.461 910.101 659.223 cv
582.327 659.223 li
560.177 681.368 li
559.289 680.886 558.296 680.58 557.214 680.58 cv
553.787 680.58 551.003 683.369 551.003 686.796 cv
551.003 690.225 553.787 693.013 557.214 693.013 cv
560.643 693.013 563.435 690.225 563.435 686.796 cv
563.435 685.494 563.021 684.286 562.338 683.288 cv
566.647 678.979 582.815 662.81 583.519 662.102 cv
584.672 662.102 890.327 662.102 910.144 662.102 cv
910.814 664.802 913.249 666.815 916.15 666.815 cv
919.578 666.815 922.361 664.024 922.361 660.604 cv
cp
f
934.792 660.604 mo
934.792 662.014 933.641 663.16 932.232 663.16 cv
930.823 663.16 929.674 662.014 929.674 660.604 cv
929.674 659.191 930.823 658.041 932.232 658.041 cv
933.641 658.041 934.792 659.191 934.792 660.604 cv
cp
938.449 660.604 mo
938.449 657.178 935.66 654.389 932.232 654.389 cv
928.805 654.389 926.012 657.178 926.012 660.604 cv
926.012 664.024 928.805 666.815 932.232 666.815 cv
935.66 666.815 938.449 664.024 938.449 660.604 cv
cp
f
948.68 834.47 mo
947.269 834.47 946.123 833.315 946.123 831.9 cv
946.123 830.495 947.269 829.35 948.68 829.35 cv
950.092 829.35 951.239 830.495 951.239 831.9 cv
951.239 833.315 950.092 834.47 948.68 834.47 cv
cp
948.68 838.116 mo
952.11 838.116 954.894 835.333 954.894 831.9 cv
954.894 828.482 952.11 825.69 948.68 825.69 cv
945.25 825.69 942.469 828.482 942.469 831.9 cv
942.469 835.333 945.25 838.116 948.68 838.116 cv
cp
f
1146.06 804.313 mo
1146.06 802.902 1147.21 801.748 1148.62 801.748 cv
1150.02 801.748 1151.18 802.902 1151.18 804.313 cv
1151.18 805.722 1150.02 806.867 1148.62 806.867 cv
1147.21 806.867 1146.06 805.722 1146.06 804.313 cv
cp
1146.06 741.075 mo
1146.06 739.665 1147.21 738.516 1148.62 738.516 cv
1150.02 738.516 1151.18 739.665 1151.18 741.075 cv
1151.18 742.489 1150.02 743.635 1148.62 743.635 cv
1147.21 743.635 1146.06 742.489 1146.06 741.075 cv
cp
1146.06 677.475 mo
1146.06 676.065 1147.21 674.915 1148.62 674.915 cv
1150.02 674.915 1151.18 676.065 1151.18 677.475 cv
1151.18 678.881 1150.02 680.034 1148.62 680.034 cv
1147.21 680.034 1146.06 678.881 1146.06 677.475 cv
cp
1123.66 958.188 mo
1125.07 958.188 1126.22 959.337 1126.22 960.748 cv
1126.22 962.16 1125.07 963.308 1123.66 963.308 cv
1122.25 963.308 1121.1 962.16 1121.1 960.748 cv
1121.1 959.337 1122.25 958.188 1123.66 958.188 cv
cp
1004 1060.65 mo
1004 1063.48 1001.7 1065.78 998.875 1065.78 cv
996.058 1065.78 993.755 1063.48 993.755 1060.65 cv
993.755 1057.83 996.058 1055.54 998.875 1055.54 cv
1001.7 1055.54 1004 1057.83 1004 1060.65 cv
cp
1146.06 869 mo
1146.06 867.594 1147.21 866.449 1148.62 866.449 cv
1150.02 866.449 1151.18 867.594 1151.18 869 cv
1151.18 870.413 1150.02 871.563 1148.62 871.563 cv
1147.21 871.563 1146.06 870.413 1146.06 869 cv
cp
1125.76 857.678 mo
1125.76 815.275 li
1132.53 815.275 li
1132.53 805.391 li
1142.51 805.391 li
1143.02 808.3 1145.56 810.519 1148.62 810.519 cv
1152.04 810.519 1154.83 807.735 1154.83 804.313 cv
1154.83 800.885 1152.04 798.097 1148.62 798.097 cv
1145.82 798.097 1143.48 799.963 1142.71 802.499 cv
1132.53 802.499 li
1132.53 794.078 li
1125.76 794.078 li
1125.76 752.773 li
1132.53 752.773 li
1132.53 742.766 li
1142.66 742.766 li
1143.4 745.365 1145.78 747.286 1148.62 747.286 cv
1152.04 747.286 1154.83 744.502 1154.83 741.075 cv
1154.83 737.646 1152.04 734.858 1148.62 734.858 cv
1145.6 734.858 1143.08 737.025 1142.52 739.876 cv
1132.53 739.876 li
1132.53 731.569 li
1125.76 731.569 li
1125.76 688.44 li
1132.53 688.44 li
1132.53 678.191 li
1142.47 678.191 li
1142.83 681.279 1145.44 683.691 1148.62 683.691 cv
1152.04 683.691 1154.83 680.902 1154.83 677.475 cv
1154.83 674.048 1152.04 671.265 1148.62 671.265 cv
1145.96 671.265 1143.7 672.947 1142.81 675.301 cv
1132.53 675.301 li
1132.53 667.24 li
1113.16 667.24 li
1113.16 688.44 li
1122.24 688.44 li
1122.24 731.569 li
1113.16 731.569 li
1113.16 752.773 li
1122.24 752.773 li
1122.24 794.078 li
1113.16 794.078 li
1113.16 815.275 li
1122.24 815.275 li
1122.24 857.678 li
1113.16 857.678 li
1113.16 878.875 li
1122.24 878.875 li
1122.24 922.37 li
1113.97 922.37 li
1113.97 943.573 li
1122.22 943.573 li
1122.22 954.725 li
1119.49 955.376 1117.45 957.819 1117.45 960.748 cv
1117.45 962.216 1117.98 963.549 1118.83 964.613 cv
1106.72 976.722 li
1106.72 976.722 1106.72 1038.55 1106.72 1041.31 cv
1104.22 1041.31 1084.37 1041.31 1083.3 1041.31 cv
1082.53 1040.54 1074.28 1032.29 1074.28 1032.29 cv
1014.86 1032.29 li
1003.94 1050.94 li
1002.43 1050.15 1000.71 1049.69 998.875 1049.69 cv
992.833 1049.69 987.911 1054.61 987.911 1060.65 cv
987.911 1066.7 992.833 1071.62 998.875 1071.62 cv
1004.93 1071.62 1009.85 1066.7 1009.85 1060.65 cv
1009.85 1057.48 1008.48 1054.62 1006.31 1052.61 cv
1009 1048.02 1015.9 1036.24 1016.51 1035.17 cv
1018.11 1035.17 1071.94 1035.17 1073.09 1035.17 cv
1073.86 1035.94 1082.1 1044.19 1082.1 1044.19 cv
1109.61 1044.19 li
1109.61 1044.19 1109.61 979.09 1109.61 977.919 cv
1110.27 977.257 1118.44 969.08 1121.12 966.407 cv
1121.89 966.762 1122.75 966.963 1123.66 966.963 cv
1127.09 966.963 1129.87 964.177 1129.87 960.748 cv
1129.87 958.063 1128.15 955.8 1125.76 954.937 cv
1125.76 943.573 li
1133.35 943.573 li
1133.35 922.37 li
1125.76 922.37 li
1125.76 878.875 li
1132.53 878.875 li
1132.53 869.474 li
1142.45 869.474 li
1142.69 872.682 1145.35 875.22 1148.62 875.22 cv
1152.04 875.22 1154.83 872.435 1154.83 869 cv
1154.83 865.58 1152.04 862.792 1148.62 862.792 cv
1146.05 862.792 1143.84 864.358 1142.89 866.592 cv
1132.53 866.592 li
1132.53 857.678 li
1125.76 857.678 li
cp
f
794.438 984.018 mo
794.438 954.295 li
802.967 954.295 li
802.967 984.018 li
800.17 984.018 li
800.17 989.082 li
791.321 996.912 li
750.707 996.912 li
750.707 996.912 716.809 963.016 715.985 962.192 cv
715.03 962.192 698.819 962.192 693.551 962.192 cv
693.551 965.501 li
667.238 965.501 li
667.238 956.727 li
693.551 956.727 li
693.551 959.308 li
717.18 959.308 li
717.18 959.308 751.073 993.204 751.902 994.03 cv
753.042 994.03 789.185 994.03 790.23 994.03 cv
790.924 993.424 796.477 988.505 797.287 987.789 cv
797.287 987.091 797.287 985.127 797.287 984.018 cv
794.438 984.018 li
cp
f
744.289 835.356 mo
708.301 835.356 li
708.301 835.356 698.607 825.654 697.829 824.875 cv
696.666 824.875 656.293 824.875 656.293 824.875 cv
656.293 824.875 656.293 780.563 656.293 777.85 cv
653.885 777.85 639.721 777.85 639.721 777.85 cv
639.721 767.148 li
636.046 767.148 li
636.046 737.423 li
645.792 737.423 li
645.792 767.148 li
642.602 767.148 li
642.602 769.452 642.602 773.457 642.602 774.97 cv
645.006 774.97 659.178 774.97 659.178 774.97 cv
659.178 774.97 659.178 819.281 659.178 821.993 cv
661.858 821.993 699.023 821.993 699.023 821.993 cv
699.023 821.993 708.721 831.695 709.5 832.469 cv
710.506 832.469 737.322 832.469 744.289 832.469 cv
744.289 829.161 li
770.612 829.161 li
770.612 837.938 li
744.289 837.938 li
744.289 835.356 li
cp
f
412.84 860.415 mo
412.84 859.003 413.984 857.856 415.398 857.856 cv
416.806 857.856 417.957 859.003 417.957 860.415 cv
417.957 861.83 416.806 862.976 415.398 862.976 cv
413.984 862.976 412.84 861.83 412.84 860.415 cv
cp
409.184 860.415 mo
409.184 863.844 411.971 866.632 415.398 866.632 cv
418.477 866.632 421.02 864.367 421.507 861.432 cv
590.831 861.432 li
590.831 861.432 600.407 851.85 601.185 851.072 cv
602.341 851.072 634.202 851.072 634.202 851.072 cv
634.202 851.072 640.221 845.059 640.966 844.31 cv
642.149 844.31 799.189 844.31 799.189 844.31 cv
799.189 844.31 826.232 816.087 827.06 815.217 cv
828.209 815.217 946.715 815.217 960.307 815.217 cv
960.307 818.927 li
986.622 818.927 li
986.622 810.162 li
960.307 810.162 li
960.307 812.336 li
825.833 812.336 li
825.833 812.336 798.786 840.563 797.963 841.424 cv
796.736 841.424 639.772 841.424 639.772 841.424 cv
639.772 841.424 633.749 847.447 633.013 848.19 cv
631.858 848.19 599.997 848.19 599.997 848.19 cv
599.997 848.19 590.415 857.767 589.636 858.546 cv
588.513 858.546 437.264 858.546 421.288 858.546 cv
420.492 856.036 418.169 854.199 415.398 854.199 cv
411.971 854.199 409.184 856.988 409.184 860.415 cv
cp
f
986.622 835.74 mo
960.307 835.74 li
960.307 826.97 li
986.622 826.97 li
986.622 835.74 li
cp
f
843.046 850.002 mo
843.046 851.411 841.894 852.553 840.49 852.553 cv
839.081 852.553 837.932 851.411 837.932 850.002 cv
837.932 848.588 839.081 847.438 840.49 847.438 cv
841.894 847.438 843.046 848.588 843.046 850.002 cv
cp
960.307 848.068 mo
846.365 848.068 li
845.547 845.591 843.237 843.787 840.49 843.787 cv
837.743 843.787 835.433 845.591 834.609 848.068 cv
770.612 848.068 li
770.612 847.806 li
744.289 847.806 li
744.289 856.581 li
770.612 856.581 li
770.612 850.951 li
834.373 850.951 li
834.835 853.922 837.388 856.209 840.49 856.209 cv
843.592 856.209 846.146 853.922 846.606 850.951 cv
960.307 850.951 li
960.307 854.387 li
986.622 854.387 li
986.622 845.613 li
960.307 845.613 li
960.307 848.068 li
cp
f
667.238 854.387 mo
667.238 845.613 li
693.551 845.613 li
693.551 847.581 li
699.265 847.581 li
699.265 847.581 708.358 856.675 709.137 857.448 cv
710.31 857.448 774.805 857.448 774.805 857.448 cv
774.805 857.448 782.993 865.638 783.765 866.403 cv
784.896 866.403 945.901 866.403 960.307 866.403 cv
960.307 864.255 li
986.622 864.255 li
986.622 873.026 li
960.307 873.026 li
960.307 869.286 li
782.569 869.286 li
782.569 869.286 774.379 861.1 773.613 860.334 cv
772.443 860.334 707.938 860.334 707.938 860.334 cv
707.938 860.334 698.849 851.238 698.072 850.463 cv
697.466 850.463 695.225 850.463 693.551 850.463 cv
693.551 854.387 li
667.238 854.387 li
cp
f
960.307 882.531 mo
986.622 882.531 li
986.622 891.299 li
960.307 891.299 li
960.307 882.531 li
cp
f
986.622 909.212 mo
960.307 909.212 li
960.307 900.44 li
986.622 900.44 li
986.622 909.212 li
cp
f
986.622 927.854 mo
960.307 927.854 li
960.307 919.08 li
986.622 919.08 li
986.622 927.854 li
cp
f
986.622 946.857 mo
960.307 946.857 li
960.307 938.084 li
986.622 938.084 li
986.622 946.857 li
cp
f
667.238 834.139 mo
647.763 834.139 li
647.763 834.139 647.763 792.001 647.763 789.307 cv
645.362 789.307 631.438 789.307 631.438 789.307 cv
631.438 789.307 631.438 780.054 631.438 777.85 cv
628.709 777.85 578.738 777.85 578.738 777.85 cv
578.738 767.148 li
569.038 767.148 li
569.038 737.423 li
578.738 737.423 li
578.738 712.394 li
615.471 675.668 li
856.071 675.668 li
867.273 686.874 li
867.273 718.781 li
870.092 718.781 li
870.092 748.021 li
862.056 748.021 li
862.056 718.781 li
864.392 718.781 li
864.392 712.838 864.392 689.069 864.392 688.063 cv
863.646 687.319 855.62 679.296 854.876 678.549 cv
853.689 678.549 617.848 678.549 616.66 678.549 cv
615.845 679.364 582.438 712.774 581.625 713.589 cv
581.625 714.733 581.625 772.234 581.625 774.97 cv
584.356 774.97 634.319 774.97 634.319 774.97 cv
634.319 774.97 634.319 784.215 634.319 786.416 cv
636.714 786.416 650.646 786.416 650.646 786.416 cv
650.646 786.416 650.646 828.553 650.646 831.251 cv
652.191 831.251 660.695 831.251 667.238 831.251 cv
667.238 829.161 li
693.551 829.161 li
693.551 837.938 li
667.238 837.938 li
667.238 834.139 li
cp
f
667.238 781.283 mo
667.238 772.508 li
693.551 772.508 li
693.551 775.451 li
723.633 775.451 li
723.633 775.451 740.739 792.557 741.547 793.361 cv
742.097 793.361 743.399 793.361 744.289 793.361 cv
744.289 791.519 li
770.612 791.519 li
770.612 800.289 li
744.289 800.289 li
744.289 796.244 li
740.35 796.244 li
740.35 796.244 723.243 779.148 722.443 778.34 cv
721.457 778.34 699.828 778.34 693.551 778.34 cv
693.551 781.283 li
667.238 781.283 li
cp
f
777.981 748.021 mo
777.981 718.781 li
786.023 718.781 li
786.023 748.021 li
777.981 748.021 li
cp
f
794.803 718.781 mo
802.84 718.781 li
802.84 748.021 li
794.803 748.021 li
794.803 718.781 li
cp
f
810.883 718.781 mo
818.924 718.781 li
818.924 748.021 li
810.883 748.021 li
810.883 718.781 li
cp
f
828.424 748.021 mo
828.424 718.781 li
836.466 718.781 li
836.466 748.021 li
828.424 748.021 li
cp
f
843.779 718.781 mo
851.819 718.781 li
851.819 748.021 li
843.779 748.021 li
843.779 718.781 li
cp
f
886.175 748.021 mo
878.137 748.021 li
878.137 718.781 li
886.175 718.781 li
886.175 748.021 li
cp
f
894.585 718.781 mo
902.628 718.781 li
902.628 748.021 li
894.585 748.021 li
894.585 718.781 li
cp
f
1060.89 735.226 mo
1047.37 735.226 li
1047.37 716.945 li
1060.89 716.945 li
1060.89 735.226 li
cp
f
1070.76 704.521 mo
1070.76 703.117 1071.91 701.963 1073.32 701.963 cv
1074.73 701.963 1075.88 703.117 1075.88 704.521 cv
1075.88 705.938 1074.73 707.082 1073.32 707.082 cv
1071.91 707.082 1070.76 705.938 1070.76 704.521 cv
cp
1034.21 704.521 mo
1047.73 704.521 li
1047.73 696.949 li
1052.31 696.949 1065.34 696.949 1066.27 696.949 cv
1066.72 697.407 1068.23 698.91 1069.21 699.896 cv
1067.93 701.035 1067.11 702.679 1067.11 704.521 cv
1067.11 707.95 1069.89 710.737 1073.32 710.737 cv
1076.75 710.737 1079.53 707.95 1079.53 704.521 cv
1079.53 701.104 1076.75 698.312 1073.32 698.312 cv
1072.83 698.312 1072.35 698.384 1071.89 698.49 cv
1067.46 694.068 li
1047.73 694.068 li
1047.73 686.247 li
1034.21 686.247 li
1034.21 704.521 li
cp
f
1043.35 677.475 mo
1043.35 678.881 1042.2 680.034 1040.79 680.034 cv
1039.38 680.034 1038.23 678.881 1038.23 677.475 cv
1038.23 676.065 1039.38 674.915 1040.79 674.915 cv
1042.2 674.915 1043.35 676.065 1043.35 677.475 cv
cp
1043.71 741.075 mo
1043.71 742.489 1042.57 743.635 1041.15 743.635 cv
1039.75 743.635 1038.6 742.489 1038.6 741.075 cv
1038.6 739.665 1039.75 738.516 1041.15 738.516 cv
1042.57 738.516 1043.71 739.665 1043.71 741.075 cv
cp
1042.98 998.032 mo
1042.98 999.442 1041.84 1000.59 1040.42 1000.59 cv
1039.01 1000.59 1037.86 999.442 1037.86 998.032 cv
1037.86 996.619 1039.01 995.472 1040.42 995.472 cv
1041.84 995.472 1042.98 996.619 1042.98 998.032 cv
cp
1081.73 1006.44 mo
1101.1 1006.44 li
1101.1 985.235 li
1093.42 985.235 li
1093.42 752.773 li
1101.1 752.773 li
1101.1 731.569 li
1093.42 731.569 li
1093.42 688.44 li
1101.1 688.44 li
1101.1 667.24 li
1081.73 667.24 li
1081.73 675.06 li
1046.51 675.06 li
1045.57 672.829 1043.36 671.265 1040.79 671.265 cv
1038.32 671.265 1036.2 672.723 1035.2 674.816 cv
947.583 674.816 li
913.853 710.041 li
913.853 718.781 li
911.03 718.781 li
911.03 748.021 li
919.077 748.021 li
919.077 718.781 li
916.741 718.781 li
916.741 715.937 916.741 711.867 916.741 711.199 cv
917.51 710.394 947.988 678.559 948.813 677.694 cv
949.928 677.694 1022.96 677.694 1034.6 677.694 cv
1034.72 681.019 1037.44 683.691 1040.79 683.691 cv
1044.06 683.691 1046.71 681.146 1046.95 677.945 cv
1081.73 677.945 li
1081.73 688.44 li
1089.91 688.44 li
1089.91 731.569 li
1081.73 731.569 li
1081.73 740.122 li
1047.27 740.122 li
1046.81 737.155 1044.26 734.858 1041.15 734.858 cv
1038.22 734.858 1035.78 736.904 1035.13 739.634 cv
1033.03 739.634 1029.34 739.634 1027.85 739.634 cv
1027.85 738.551 1027.85 736.667 1027.85 735.226 cv
1033.84 735.226 li
1033.84 716.945 li
1020.32 716.945 li
1020.32 720.319 li
1016.31 720.319 1008.16 720.319 1007.33 720.319 cv
1006.53 719.523 990.942 703.938 990.942 703.938 cv
941.871 703.938 li
931.4 714.403 li
931.4 718.781 li
928.577 718.781 li
928.577 748.021 li
936.619 748.021 li
936.619 718.781 li
934.282 718.781 li
934.282 717.535 934.282 716.113 934.282 715.604 cv
935.021 714.86 942.327 707.558 943.066 706.823 cv
944.216 706.823 988.6 706.823 989.75 706.823 cv
990.553 707.619 1006.14 723.211 1006.14 723.211 cv
1020.32 723.211 li
1020.32 735.226 li
1024.97 735.226 li
1024.97 742.516 li
1035.13 742.516 li
1035.78 745.246 1038.22 747.286 1041.15 747.286 cv
1043.9 747.286 1046.21 745.487 1047.03 743.009 cv
1081.73 743.009 li
1081.73 752.773 li
1089.91 752.773 li
1089.91 985.235 li
1081.73 985.235 li
1081.73 995.493 li
1046.08 995.493 li
1045.11 993.334 1042.95 991.816 1040.42 991.816 cv
1038.2 991.816 1036.26 993.003 1035.16 994.768 cv
1033.45 994.768 1027.76 994.768 1025.91 994.768 cv
1025.91 993.834 1025.91 992.358 1025.91 991.087 cv
1033.12 991.087 li
1033.12 974.269 li
1023.58 974.269 li
1019.88 970.578 1002.27 952.961 1001.54 952.234 cv
1001.54 951.046 1001.54 803.35 1001.54 803.35 cv
992.409 794.221 li
986.622 794.221 li
986.622 791.519 li
960.307 791.519 li
960.307 800.289 li
986.622 800.289 li
986.622 797.107 li
988.309 797.107 990.598 797.107 991.214 797.107 cv
991.935 797.824 997.935 803.824 998.653 804.541 cv
998.653 805.731 998.653 953.43 998.653 953.43 cv
1020.32 975.096 li
1020.32 991.087 li
1023.02 991.087 li
1023.02 997.648 li
1034.25 997.648 li
1034.24 997.776 1034.21 997.898 1034.21 998.032 cv
1034.21 1001.46 1037 1004.25 1040.42 1004.25 cv
1043.73 1004.25 1046.42 1001.64 1046.6 998.38 cv
1081.73 998.38 li
1081.73 1006.44 li
cp
f
1088.3 1024.71 mo
1088.3 1023.3 1089.46 1022.15 1090.86 1022.15 cv
1092.27 1022.15 1093.42 1023.3 1093.42 1024.71 cv
1093.42 1026.13 1092.27 1027.27 1090.86 1027.27 cv
1089.46 1027.27 1088.3 1026.13 1088.3 1024.71 cv
cp
1046.28 1023.25 mo
1046.28 1015.92 li
1051.44 1015.92 1064.63 1015.92 1065.53 1015.92 cv
1066.31 1016.69 1075.28 1025.67 1075.28 1025.67 cv
1084.75 1025.67 li
1085.21 1028.64 1087.76 1030.93 1090.86 1030.93 cv
1094.29 1030.93 1097.08 1028.14 1097.08 1024.71 cv
1097.08 1021.29 1094.29 1018.5 1090.86 1018.5 cv
1088.12 1018.5 1085.8 1020.3 1084.99 1022.79 cv
1082.33 1022.79 1077.26 1022.79 1076.47 1022.79 cv
1075.7 1022.01 1066.73 1013.04 1066.73 1013.04 cv
1046.28 1013.04 li
1046.28 1006.44 li
1033.48 1006.44 li
1033.48 1023.25 li
1046.28 1023.25 li
cp
f
1071.49 960.748 mo
1071.49 959.337 1072.64 958.188 1074.05 958.188 cv
1075.46 958.188 1076.61 959.337 1076.61 960.748 cv
1076.61 962.16 1075.46 963.308 1074.05 963.308 cv
1072.64 963.308 1071.49 962.16 1071.49 960.748 cv
cp
1071.49 886.917 mo
1071.49 885.503 1072.64 884.357 1074.05 884.357 cv
1075.46 884.357 1076.61 885.503 1076.61 886.917 cv
1076.61 888.323 1075.46 889.477 1074.05 889.477 cv
1072.64 889.477 1071.49 888.323 1071.49 886.917 cv
cp
1071.49 832.088 mo
1071.49 830.684 1072.64 829.529 1074.05 829.529 cv
1075.46 829.529 1076.61 830.684 1076.61 832.088 cv
1076.61 833.498 1075.46 834.648 1074.05 834.648 cv
1072.64 834.648 1071.49 833.498 1071.49 832.088 cv
cp
1071.49 767.765 mo
1071.49 766.35 1072.64 765.204 1074.05 765.204 cv
1075.46 765.204 1076.61 766.35 1076.61 767.765 cv
1076.61 769.169 1075.46 770.315 1074.05 770.315 cv
1072.64 770.315 1071.49 769.169 1071.49 767.765 cv
cp
1037.88 767.031 mo
1037.88 813.813 li
1033.48 813.813 li
1033.48 830.63 li
1037.88 830.63 li
1037.88 877.779 li
1033.48 877.779 li
1033.48 894.592 li
1037.88 894.592 li
1037.88 941.74 li
1033.48 941.74 li
1033.48 958.558 li
1046.28 958.558 li
1046.28 951.35 li
1049.85 951.35 1063.58 951.35 1064.56 951.35 cv
1065.11 951.896 1068.12 954.904 1069.62 956.404 cv
1068.52 957.527 1067.84 959.059 1067.84 960.748 cv
1067.84 964.177 1070.62 966.963 1074.05 966.963 cv
1077.48 966.963 1080.26 964.177 1080.26 960.748 cv
1080.26 957.321 1077.48 954.534 1074.05 954.534 cv
1073.39 954.534 1072.75 954.669 1072.16 954.868 cv
1065.75 948.468 li
1046.28 948.468 li
1046.28 941.74 li
1041.4 941.74 li
1041.4 894.592 li
1046.28 894.592 li
1046.28 888.722 li
1068.14 888.722 li
1068.92 891.264 1071.26 893.133 1074.05 893.133 cv
1077.48 893.133 1080.26 890.341 1080.26 886.917 cv
1080.26 883.49 1077.48 880.705 1074.05 880.705 cv
1070.99 880.705 1068.45 882.925 1067.94 885.839 cv
1046.28 885.839 li
1046.28 877.779 li
1041.4 877.779 li
1041.4 830.63 li
1046.28 830.63 li
1046.28 823.666 li
1049.88 823.666 1063.83 823.666 1064.8 823.666 cv
1065.35 824.208 1068.01 826.862 1069.29 828.142 cv
1068.4 829.22 1067.84 830.586 1067.84 832.088 cv
1067.84 835.512 1070.62 838.3 1074.05 838.3 cv
1077.48 838.3 1080.26 835.512 1080.26 832.088 cv
1080.26 828.661 1077.48 825.872 1074.05 825.872 cv
1073.18 825.872 1072.36 826.057 1071.6 826.379 cv
1066 820.776 li
1046.28 820.776 li
1046.28 813.813 li
1041.4 813.813 li
1041.4 767.031 li
1046.28 767.031 li
1046.28 759.821 li
1050.57 759.821 1063.86 759.821 1064.8 759.821 cv
1065.32 760.335 1067.73 762.743 1069.07 764.085 cv
1068.3 765.119 1067.84 766.377 1067.84 767.765 cv
1067.84 771.188 1070.62 773.975 1074.05 773.975 cv
1077.48 773.975 1080.26 771.188 1080.26 767.765 cv
1080.26 764.336 1077.48 761.543 1074.05 761.543 cv
1073.05 761.543 1072.12 761.803 1071.28 762.224 cv
1066 756.94 li
1046.28 756.94 li
1046.28 750.214 li
1033.48 750.214 li
1033.48 767.031 li
1037.88 767.031 li
cp
f
1046.63 991.087 mo
1046.63 974.269 li
1059.43 974.269 li
1059.43 991.087 li
1046.63 991.087 li
cp
f
1059.43 909.212 mo
1059.43 926.031 li
1046.63 926.031 li
1046.63 909.212 li
1059.43 909.212 li
cp
f
1059.43 844.877 mo
1059.43 861.696 li
1046.63 861.696 li
1046.63 844.877 li
1059.43 844.877 li
cp
f
943.806 954.295 mo
954.773 954.295 li
954.773 984.018 li
943.806 984.018 li
943.806 954.295 li
cp
f
919.438 984.018 mo
910.914 984.018 li
910.914 954.295 li
919.438 954.295 li
919.438 984.018 li
cp
f
932.963 939.731 mo
934.376 939.731 935.522 940.876 935.522 942.29 cv
935.522 943.697 934.376 944.849 932.963 944.849 cv
931.552 944.849 930.406 943.697 930.406 942.29 cv
930.406 940.876 931.552 939.731 932.963 939.731 cv
cp
897.774 931.032 mo
897.774 954.295 li
894.587 954.295 li
894.587 984.018 li
903.117 984.018 li
903.117 954.295 li
900.656 954.295 li
900.656 949.305 900.656 933.188 900.656 932.232 cv
901.364 931.515 906.778 926.11 907.485 925.396 cv
908.569 925.396 923.109 925.396 924.045 925.396 cv
924.715 925.943 930.225 930.441 931.096 931.159 cv
931.096 931.954 931.096 934.81 931.096 936.394 cv
928.585 937.188 926.746 939.519 926.746 942.29 cv
926.746 945.715 929.538 948.502 932.963 948.502 cv
936.392 948.502 939.178 945.715 939.178 942.29 cv
939.178 939.213 936.924 936.669 933.978 936.179 cv
933.978 929.787 li
925.07 922.513 li
906.29 922.513 li
897.774 931.032 li
cp
f
887.035 984.018 mo
878.506 984.018 li
878.506 954.295 li
887.035 954.295 li
887.035 984.018 li
cp
f
786.882 954.295 mo
786.882 984.018 li
778.352 984.018 li
778.352 970.78 li
738.458 970.78 li
738.458 970.78 712.323 944.643 711.506 943.821 cv
710.564 943.821 697.691 943.821 693.551 943.821 cv
693.551 946.497 li
667.238 946.497 li
667.238 937.724 li
693.551 937.724 li
693.551 940.94 li
712.695 940.94 li
712.695 940.94 738.838 967.085 739.659 967.898 cv
740.673 967.898 770.925 967.898 778.352 967.898 cv
778.352 954.295 li
786.882 954.295 li
cp
f
661.883 986.719 mo
725.073 986.719 li
725.073 986.719 739.979 1003.02 740.789 1003.9 cv
742.022 1003.9 795.788 1003.9 796.943 1003.9 cv
797.73 1003.11 812.855 987.986 813.643 987.201 cv
813.643 986.64 813.643 985.14 813.643 984.018 cv
811.009 984.018 li
811.009 954.295 li
819.537 954.295 li
819.537 984.018 li
816.529 984.018 li
816.529 988.393 li
798.139 1006.79 li
739.518 1006.79 li
739.518 1006.79 724.618 990.491 723.802 989.602 cv
722.677 989.602 671.595 989.602 661.883 989.602 cv
661.883 1001.57 li
653.352 1001.57 li
653.352 971.837 li
661.883 971.837 li
661.883 986.719 li
cp
f
935.522 988.349 mo
935.522 989.755 934.376 990.909 932.963 990.909 cv
931.552 990.909 930.406 989.755 930.406 988.349 cv
930.406 986.937 931.552 985.789 932.963 985.789 cv
934.376 985.789 935.522 986.937 935.522 988.349 cv
cp
939.178 988.349 mo
939.178 987.106 938.807 985.965 938.179 984.998 cv
938.449 984.998 li
938.449 954.295 li
927.479 954.295 li
927.479 984.998 li
927.751 984.998 li
927.123 985.965 926.746 987.106 926.746 988.349 cv
926.746 991.773 929.538 994.56 932.963 994.56 cv
936.392 994.56 939.178 991.773 939.178 988.349 cv
cp
f
570.741 906.468 mo
570.741 905.059 571.888 903.913 573.297 903.913 cv
574.711 903.913 575.855 905.059 575.855 906.468 cv
575.855 907.878 574.711 909.032 573.297 909.032 cv
571.888 909.032 570.741 907.878 570.741 906.468 cv
cp
729.372 869.555 mo
729.372 868.14 730.525 866.995 731.929 866.995 cv
733.344 866.995 734.488 868.14 734.488 869.555 cv
734.488 870.968 733.344 872.113 731.929 872.113 cv
730.525 872.113 729.372 870.968 729.372 869.555 cv
cp
904.455 877.592 mo
904.455 876.185 905.602 875.041 907.012 875.041 cv
908.426 875.041 909.57 876.185 909.57 877.592 cv
909.57 879.005 908.426 880.15 907.012 880.15 cv
905.602 880.15 904.455 879.005 904.455 877.592 cv
cp
480.336 903.367 mo
453.531 903.367 li
453.531 911.892 li
480.336 911.892 li
480.336 908.214 li
567.369 908.214 li
568.123 910.787 570.486 912.684 573.297 912.684 cv
576.205 912.684 578.632 910.671 579.307 907.967 cv
625.79 907.967 li
625.79 907.967 625.79 880.858 625.79 878.244 cv
628.184 878.244 660.033 878.244 667.238 878.244 cv
667.238 881.068 li
693.551 881.068 li
693.551 878.244 li
744.289 878.244 li
744.289 881.068 li
770.612 881.068 li
770.612 878.486 li
900.889 878.486 li
901.329 881.494 903.894 883.812 907.012 883.812 cv
910.438 883.812 913.228 881.019 913.228 877.592 cv
913.228 874.168 910.438 871.38 907.012 871.38 cv
904.285 871.38 901.986 873.161 901.157 875.609 cv
770.612 875.609 li
770.612 864.988 li
744.289 864.988 li
744.289 875.362 li
734.086 875.362 li
736.448 874.481 738.146 872.221 738.146 869.555 cv
738.146 866.126 735.357 863.342 731.929 863.342 cv
728.501 863.342 725.718 866.126 725.718 869.555 cv
725.718 872.221 727.413 874.481 729.78 875.362 cv
693.551 875.362 li
693.551 864.988 li
667.238 864.988 li
667.238 875.362 li
622.907 875.362 li
622.907 875.362 622.907 902.477 622.907 905.086 cv
620.425 905.086 585.077 905.086 579.342 905.086 cv
578.711 902.33 576.25 900.253 573.297 900.253 cv
570.258 900.253 567.739 902.446 567.199 905.336 cv
480.336 905.336 li
480.336 903.367 li
cp
f
447.2 678.938 mo
415.028 678.938 li
415.028 660.663 li
447.2 660.663 li
447.2 667.017 li
542.208 667.017 li
542.208 737.423 li
545.641 737.423 li
545.641 767.148 li
535.896 767.148 li
535.896 737.423 li
539.327 737.423 li
539.327 725.854 539.327 672.369 539.327 669.904 cv
536.772 669.904 460.4 669.904 447.2 669.904 cv
447.2 678.938 li
cp
f
818.8 1094.89 mo
837.08 1094.89 li
837.08 1103.18 li
818.8 1103.18 li
818.8 1094.89 li
cp
f
695.381 1125.78 mo
695.381 1124.37 696.53 1123.22 697.938 1123.22 cv
699.352 1123.22 700.496 1124.37 700.496 1125.78 cv
700.496 1127.19 699.352 1128.34 697.938 1128.34 cv
696.53 1128.34 695.381 1127.19 695.381 1125.78 cv
cp
853.643 1134.91 mo
853.643 1133.5 854.792 1132.36 856.206 1132.36 cv
857.615 1132.36 858.771 1133.5 858.771 1134.91 cv
858.771 1136.33 857.615 1137.48 856.206 1137.48 cv
854.792 1137.48 853.643 1136.33 853.643 1134.91 cv
cp
691.726 1125.78 mo
691.726 1129.21 694.513 1131.99 697.938 1131.99 cv
700.547 1131.99 702.779 1130.37 703.701 1128.08 cv
713.362 1128.08 771.242 1128.08 772.315 1128.08 cv
773.079 1128.85 780.858 1136.63 780.858 1136.63 cv
818.8 1136.63 li
818.8 1138.51 li
837.08 1138.51 li
837.08 1136.63 li
850.268 1136.63 li
851.014 1139.22 853.377 1141.13 856.206 1141.13 cv
859.035 1141.13 861.401 1139.22 862.147 1136.63 cv
872.696 1136.63 963.691 1136.63 964.807 1136.63 cv
965.606 1137.44 982.076 1153.9 982.076 1153.9 cv
1157.21 1153.9 li
1157.21 1151.02 li
1132.18 1151.02 984.359 1151.02 983.269 1151.02 cv
982.46 1150.21 966.001 1133.75 966.001 1133.75 cv
862.302 1133.75 li
861.751 1130.88 859.23 1128.71 856.206 1128.71 cv
853.181 1128.71 850.662 1130.88 850.116 1133.75 cv
848.008 1133.75 843.211 1133.75 837.08 1133.75 cv
837.08 1130.22 li
818.8 1130.22 li
818.8 1133.75 li
801.109 1133.75 782.667 1133.75 782.054 1133.75 cv
781.293 1132.98 773.511 1125.21 773.511 1125.21 cv
704.093 1125.21 li
703.799 1122.06 701.166 1119.57 697.938 1119.57 cv
694.513 1119.57 691.726 1122.35 691.726 1125.78 cv
cp
f
595.231 961.302 mo
595.231 959.887 596.381 958.738 597.79 958.738 cv
599.199 958.738 600.346 959.887 600.346 961.302 cv
600.346 962.707 599.199 963.861 597.79 963.861 cv
596.381 963.861 595.231 962.707 595.231 961.302 cv
cp
591.572 961.302 mo
591.572 964.192 593.57 966.607 596.253 967.297 cv
596.253 1019.74 li
620.401 1043.88 li
620.401 1043.88 660.355 1043.88 663.05 1043.88 cv
663.05 1046.55 663.05 1080.94 663.05 1080.94 cv
663.05 1080.94 873.47 1080.94 874.656 1080.94 cv
875.435 1081.71 884.672 1090.94 884.672 1090.94 cv
884.672 1090.94 945.541 1090.94 946.715 1090.94 cv
947.527 1091.76 972.388 1116.62 972.388 1116.62 cv
1157.21 1116.62 li
1157.21 1113.74 li
1123.3 1113.74 974.635 1113.74 973.583 1113.74 cv
972.768 1112.92 947.904 1088.06 947.904 1088.06 cv
947.904 1088.06 887.035 1088.06 885.861 1088.06 cv
885.088 1087.28 875.855 1078.06 875.855 1078.06 cv
875.855 1078.06 668.777 1078.06 665.935 1078.06 cv
665.935 1075.39 665.935 1041 665.935 1041 cv
665.935 1041 622.756 1041 621.596 1041 cv
620.796 1040.2 599.938 1019.34 599.14 1018.54 cv
599.14 1017.48 599.14 974.804 599.14 967.352 cv
601.919 966.735 604.002 964.256 604.002 961.302 cv
604.002 957.871 601.212 955.08 597.79 955.08 cv
594.361 955.08 591.572 957.871 591.572 961.302 cv
cp
f
633.935 1032.32 mo
635.116 1032.32 821.734 1032.32 822.908 1032.32 cv
823.722 1031.51 864.118 991.805 864.95 990.983 cv
864.95 990.184 864.95 985.957 864.95 984.018 cv
862.18 984.018 li
862.18 954.295 li
870.704 954.295 li
870.704 984.018 li
867.835 984.018 li
867.835 992.197 li
824.085 1035.2 li
632.735 1035.2 li
605.848 1008.32 li
605.848 1001.57 li
603.154 1001.57 li
603.154 971.837 li
611.684 971.837 li
611.684 1001.57 li
608.735 1001.57 li
608.735 1003.68 608.735 1006.49 608.735 1007.12 cv
609.535 1007.92 633.125 1031.51 633.935 1032.32 cv
cp
f
640.966 1022.81 mo
642.149 1022.81 811.751 1022.81 812.938 1022.81 cv
813.746 1022 846.644 989.108 847.454 988.296 cv
847.454 987.641 847.454 985.413 847.454 984.018 cv
845.12 984.018 li
845.12 954.295 li
853.65 954.295 li
853.65 984.018 li
850.339 984.018 li
850.339 989.484 li
814.127 1025.7 li
639.772 1025.7 li
622.528 1008.45 li
622.528 1001.57 li
619.238 1001.57 li
619.238 971.837 li
627.768 971.837 li
627.768 1001.57 li
625.41 1001.57 li
625.41 1003.72 625.41 1006.62 625.41 1007.26 cv
626.19 1008.04 640.186 1022.03 640.966 1022.81 cv
cp
f
649.556 1012.85 mo
650.743 1012.85 805.266 1012.85 806.447 1012.85 cv
807.253 1012.06 829.839 989.458 830.641 988.664 cv
830.641 988.017 830.641 985.628 830.641 984.018 cv
828.308 984.018 li
828.308 954.295 li
836.838 954.295 li
836.838 984.018 li
833.523 984.018 li
833.523 989.856 li
807.643 1015.74 li
648.361 1015.74 li
639.475 1006.85 li
639.475 1001.57 li
636.539 1001.57 li
636.539 971.837 li
645.068 971.837 li
645.068 1001.57 li
642.361 1001.57 li
642.361 1003.18 642.361 1005.11 642.361 1005.66 cv
643.077 1006.38 648.841 1012.14 649.556 1012.85 cv
cp
f
447.2 739.634 mo
451.25 739.634 462.487 739.634 464.516 739.634 cv
464.516 736.932 464.516 693.577 464.516 693.577 cv
526.129 693.577 li
526.129 737.423 li
529.556 737.423 li
529.556 767.148 li
519.811 767.148 li
519.811 737.423 li
523.244 737.423 li
523.244 727.698 523.244 698.715 523.244 696.459 cv
520.569 696.459 470.077 696.459 467.398 696.459 cv
467.398 699.166 467.398 742.516 467.398 742.516 cv
447.2 742.516 li
447.2 750.821 li
415.028 750.821 li
415.028 732.545 li
447.2 732.545 li
447.2 739.634 li
cp
f
617.524 796.082 mo
617.524 797.496 616.378 798.646 614.969 798.646 cv
613.554 798.646 612.409 797.496 612.409 796.082 cv
612.409 794.677 613.554 793.531 614.969 793.531 cv
616.378 793.531 617.524 794.677 617.524 796.082 cv
cp
621.181 796.082 mo
621.181 792.663 618.394 789.872 614.969 789.872 cv
611.93 789.872 609.405 792.063 608.87 794.945 cv
603.413 794.945 573.7 794.945 572.59 794.945 cv
571.802 794.096 559.604 780.871 558.9 780.106 cv
558.9 779.319 558.9 771.148 558.9 767.148 cv
562.214 767.148 li
562.214 737.423 li
552.466 737.423 li
552.466 767.148 li
556.015 767.148 li
556.015 781.234 li
571.329 797.828 li
609.035 797.828 li
609.793 800.405 612.149 802.294 614.969 802.294 cv
618.394 802.294 621.181 799.51 621.181 796.082 cv
cp
f
687.338 705.073 mo
687.338 703.658 688.485 702.514 689.894 702.514 cv
691.31 702.514 692.459 703.658 692.459 705.073 cv
692.459 706.483 691.31 707.629 689.894 707.629 cv
688.485 707.629 687.338 706.483 687.338 705.073 cv
cp
590.012 728.294 mo
590.012 737.423 li
587.072 737.423 li
587.072 767.148 li
596.815 767.148 li
596.815 737.423 li
592.894 737.423 li
592.894 734.981 592.894 730.263 592.894 729.485 cv
593.694 728.688 615.614 706.769 616.42 705.964 cv
617.487 705.964 673.853 705.964 683.779 705.964 cv
684.213 708.967 686.776 711.29 689.894 711.29 cv
693.323 711.29 696.112 708.496 696.112 705.073 cv
696.112 701.641 693.323 698.857 689.894 698.857 cv
687.17 698.857 684.875 700.634 684.041 703.082 cv
615.225 703.082 li
590.012 728.294 li
cp
f
934.792 1052.31 mo
934.792 1053.72 933.641 1054.87 932.232 1054.87 cv
930.823 1054.87 929.674 1053.72 929.674 1052.31 cv
929.674 1050.9 930.823 1049.75 932.232 1049.75 cv
933.641 1049.75 934.792 1050.9 934.792 1052.31 cv
cp
1107.18 1083.17 mo
1157.21 1033.15 li
1157.21 1029.07 li
1143.82 1042.46 1106.67 1079.61 1105.98 1080.29 cv
1104.81 1080.29 996.995 1080.29 995.818 1080.29 cv
995 1079.47 966.82 1051.3 966.82 1051.3 cv
938.341 1051.3 li
937.853 1048.35 935.31 1046.09 932.232 1046.09 cv
928.805 1046.09 926.012 1048.89 926.012 1052.31 cv
926.012 1055.74 928.805 1058.53 932.232 1058.53 cv
935.008 1058.53 937.329 1056.69 938.127 1054.18 cv
944.735 1054.18 964.672 1054.18 965.625 1054.18 cv
966.449 1054.99 994.624 1083.17 994.624 1083.17 cv
1107.18 1083.17 li
cp
f
1123.76 1027.27 mo
1122.35 1027.27 1121.2 1026.13 1121.2 1024.71 cv
1121.2 1023.3 1122.35 1022.15 1123.76 1022.15 cv
1125.17 1022.15 1126.32 1023.3 1126.32 1024.71 cv
1126.32 1026.13 1125.17 1027.27 1123.76 1027.27 cv
cp
1070.76 1060.65 mo
1070.76 1063.48 1068.47 1065.78 1065.64 1065.78 cv
1062.83 1065.78 1060.52 1063.48 1060.52 1060.65 cv
1060.52 1057.83 1062.83 1055.54 1065.64 1055.54 cv
1068.47 1055.54 1070.76 1057.83 1070.76 1060.65 cv
cp
1125.33 1044.56 mo
1125.33 1030.7 li
1127.99 1030 1129.98 1027.59 1129.98 1024.71 cv
1129.98 1021.83 1127.99 1019.42 1125.33 1018.72 cv
1125.33 1006.44 li
1132.53 1006.44 li
1132.53 985.235 li
1113.16 985.235 li
1113.16 1006.44 li
1122.44 1006.44 li
1122.44 1018.65 li
1119.65 1019.25 1117.54 1021.74 1117.54 1024.71 cv
1117.54 1027.68 1119.65 1030.17 1122.44 1030.78 cv
1122.44 1034.35 1122.44 1042.51 1122.44 1043.37 cv
1121.65 1044.15 1106.4 1059.4 1105.63 1060.19 cv
1104.64 1060.19 1083.2 1060.19 1076.59 1060.19 cv
1076.34 1054.36 1071.53 1049.69 1065.64 1049.69 cv
1059.6 1049.69 1054.68 1054.61 1054.68 1060.65 cv
1054.68 1066.7 1059.6 1071.62 1065.64 1071.62 cv
1070.86 1071.62 1075.23 1067.96 1076.33 1063.07 cv
1106.81 1063.07 li
1125.33 1044.56 li
cp
f
1093.42 1097.64 mo
1093.42 1099.04 1092.27 1100.19 1090.86 1100.19 cv
1089.46 1100.19 1088.3 1099.04 1088.3 1097.64 cv
1088.3 1096.22 1089.46 1095.07 1090.86 1095.07 cv
1092.27 1095.07 1093.42 1096.22 1093.42 1097.64 cv
cp
976.095 1097.27 mo
976.095 1098.68 974.947 1099.83 973.533 1099.83 cv
972.124 1099.83 970.975 1098.68 970.975 1097.27 cv
970.975 1095.86 972.124 1094.71 973.533 1094.71 cv
974.947 1094.71 976.095 1095.86 976.095 1097.27 cv
cp
818.19 1070.23 mo
818.19 1071.63 817.044 1072.77 815.632 1072.77 cv
814.226 1072.77 813.076 1071.63 813.076 1070.23 cv
813.076 1068.81 814.226 1067.66 815.632 1067.66 cv
817.044 1067.66 818.19 1068.81 818.19 1070.23 cv
cp
1115.12 1098.89 mo
1157.21 1054.95 li
1157.21 1050.78 li
1152.53 1055.67 1114.67 1095.18 1113.88 1096.01 cv
1112.94 1096.01 1101.03 1096.01 1096.84 1096.01 cv
1096.12 1093.37 1093.73 1091.42 1090.86 1091.42 cv
1088.05 1091.42 1085.69 1093.31 1084.93 1095.88 cv
979.583 1095.88 li
978.953 1093.13 976.486 1091.05 973.533 1091.05 cv
972.852 1091.05 972.202 1091.2 971.597 1091.4 cv
949.038 1068.84 li
821.683 1068.84 li
821.049 1066.08 818.586 1064.01 815.632 1064.01 cv
812.207 1064.01 809.42 1066.8 809.42 1070.23 cv
809.42 1073.65 812.207 1076.43 815.632 1076.43 cv
818.54 1076.43 820.965 1074.42 821.639 1071.73 cv
835.335 1071.73 946.732 1071.73 947.843 1071.73 cv
948.526 1072.41 964.132 1088.02 969.071 1092.96 cv
967.994 1094.08 967.32 1095.59 967.32 1097.27 cv
967.32 1100.69 970.11 1103.48 973.533 1103.48 cv
976.438 1103.48 978.867 1101.47 979.543 1098.77 cv
1084.77 1098.77 li
1085.31 1101.66 1087.83 1103.85 1090.86 1103.85 cv
1093.86 1103.85 1096.36 1101.72 1096.95 1098.89 cv
1115.12 1098.89 li
cp
f
279.08 705.051 mo
279.08 703.642 280.226 702.496 281.641 702.496 cv
283.05 702.496 284.2 703.642 284.2 705.051 cv
284.2 706.466 283.05 707.609 281.641 707.609 cv
280.226 707.609 279.08 706.466 279.08 705.051 cv
cp
396.999 705.408 mo
396.999 703.994 398.144 702.85 399.558 702.85 cv
400.967 702.85 402.117 703.994 402.117 705.408 cv
402.117 706.823 400.967 707.969 399.558 707.969 cv
398.144 707.969 396.999 706.823 396.999 705.408 cv
cp
401.124 711.396 mo
403.325 710.815 405.052 709.069 405.589 706.85 cv
415.028 706.85 li
415.028 714.757 li
447.2 714.757 li
447.2 706.85 li
459.115 706.85 li
459.115 706.85 459.115 691.348 459.115 688.908 cv
461.838 688.908 528.563 688.908 531.287 688.908 cv
531.287 691.527 531.287 766.35 531.287 775.697 cv
524.752 775.697 518.537 775.697 517.358 775.697 cv
517.358 772.929 517.358 703.082 517.358 703.082 cv
472.071 703.082 li
472.071 703.082 472.071 755.905 472.071 758.635 cv
469.351 758.635 403.841 758.635 401.124 758.635 cv
401.124 756.236 401.124 719.826 401.124 711.396 cv
cp
534.167 686.027 mo
456.23 686.027 li
456.23 686.027 456.23 701.523 456.23 703.964 cv
455.557 703.964 452.059 703.964 447.2 703.964 cv
447.2 696.482 li
415.028 696.482 li
415.028 703.964 li
410.414 703.964 406.882 703.964 405.589 703.964 cv
405.052 701.739 403.325 699.994 401.124 699.42 cv
401.124 692.135 401.124 654.078 401.124 651.628 cv
403.915 651.617 545.045 651.387 547.855 651.387 cv
547.855 654.179 547.855 772.91 547.855 775.697 cv
546.688 775.697 540.611 775.697 534.167 775.697 cv
534.167 686.027 li
cp
275.423 705.051 mo
275.423 708.477 278.208 711.261 281.641 711.261 cv
284.409 711.261 286.732 709.427 287.532 706.921 cv
306.759 706.921 li
306.759 706.85 li
393.529 706.85 li
394.08 709.154 395.915 710.966 398.239 711.468 cv
398.239 761.525 li
474.953 761.525 li
474.953 761.525 474.953 708.702 474.953 705.964 cv
477.555 705.964 511.872 705.964 514.468 705.964 cv
514.468 708.738 514.468 778.58 514.468 778.58 cv
550.738 778.58 li
550.738 648.495 li
398.239 648.746 li
398.239 699.34 li
395.915 699.842 394.08 701.659 393.529 703.964 cv
291.911 703.964 li
291.911 704.029 li
290.152 704.029 288.732 704.029 287.749 704.029 cv
287.259 701.095 284.719 698.839 281.641 698.839 cv
278.208 698.839 275.423 701.627 275.423 705.051 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.1.0
%%For: (user) ()
%%Title: (plata_53.eps)
%%CreationDate: 4/12/2016 2:18 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Bj4e'dOtHHmd'0<i!^kB^oVe]P$fsj,UO'Fo0A8J!!c<iYkLnB35>Eo.VVJ^4M]t@SbB:9qK+s_[T5sGPtG%&WO/n6h<[!K
%e]-]oo<7hGO]aOn_oU4))#sTe_SV5rER_Oq9YOZteY>V.W80!pS^(!:enfQ]1HW?DNQa]Q&q29@5";q`o?YX(X]3#hDfYaC=eT#W
%$I*b-eBN5@K0]<m5(;7;YCHWP9t5\]?O,d?l?8j=5b%%%hV70m@ajg2Mk?'*bA*s0/p45>`n)LfRbRQ>l'&&G&jHB$oo'4W=bIkQ
%q<4R&X*$k%)-mUKln2k2`,b"EKh.!5nt71jraX%LLjthD!oj6]ReZo*Z,+3ED_#=1*)Y&0;',&-6ikWT3%k,FaUcUH$4p@97Ucn"
%7eKfae;\.G4N#7OR8rd,pcmcT0EtM'2QWt^m5-@=)hsb'oWsP]s7X@3C!4A>S>/<Kd@]`m(K%.E[H2Aig>.tXIpgonFN>PaHaTgN
%[ScEYcZt1t@Or"XQ)FoK21\)r7&.pBV>lf,:.sutW!`[[XS$N\eh_lWj`Rb5/H(H&n4[!,@4Q)_2W%A1JMS6+fQB"&#Jd4/nLQ13
%/jIFEAm?DeWhbLtO?cLn`t:?6;*8Yr0<:(T.tgY*6Vg>=?FsCg6L%dC5l;.Tc3EXM@JjKc<oCXFN>cfs:$ZWYJ;Ln#4ZL9XG8lg<
%AfV,MKE'^26#XOYW&66iYPK@5)j'9k,VK:j]l([leHQZcpV1$mhh&20=q?);CH$UBrPh:thu?m(<LW)J#+F)&1?-o^bTd!ArkI,a
%[C(,"pFr^WL2-hlh/3'%eXA'Z=HlHGnYfK'PhI#O5nPYKs+"HK^m6=("f(L@<&A$">>_q(<2`J4r>Q*JT@-^3%Z31!0Ma0d_t+u>
%%j40L/T]VuQ!mMYhmHXKe5ruINW+fQ+PH#Q]$X+.kj9F=G1%k*@Do1R)Z0[a=KMpoo;(0ESu6=+Z.^%&Nj)Enqe*6`N=DpV-*=T(
%&3[Ra]&fuAZ4d+S#To>C=0S,]NCl^#P5(r@!0dhAV4kCtJf_O?QWdJ@Eb;r>lWe!rS'@Cr53-of'E=&@_Cnind>ck>_hR)^YZ=o"
%^I$;4igU7W9mnn#-MVSLC5G#a[o.o_3C6<m=Q\\j'$,I*HCd_G:O^j?S$d"/Y,HF&#\Hi>>`2@+Fh1F"Xa*gA`XV7/jA2eJ,^cLr
%qX(\P^3b>To\KCZ"\/Hd>H50lJ#1P93;+0=#3a(N8[$j-oE9*`>A354:9I3kLq5T!H(mmAB<]PL<HNBVf(IQM`/c;7p-?fDd:?EZ
%IqR?k?QTc8YJD-O^[ou2)E4MdY?QJ0a=R<jY;P7Y<Tlm0*'+>3i<g:C[G.PW1?GQOXjW4J<5QeZmDE\<I`29Nr^+'Pa$nH2(7$^k
%-U>%YR4Ru#WRd90Y+k4C<HgjA7]A"t5mu\(.hg1QT-uuS\<5mm`Cq1Nr^t#H?^&aOY7rPc)BT?trNfb2F]CIYDeGnM8\kcM)Ab2(
%Z:(+IIlgFBUq=^K9>Ol-oL_/F-;>k2HgPnDA/jXop>-Bgh:aH<pfJAJ1f(\_YXr_FVaKQ"<fgpt';`agS96npNF)Rfgb&JeMCDkV
%ChbbA\@8ee?Ksq4G4`*GU7+Q.p6?^9F#^jNB<E7tHF5RV7pIaEZ5M2)o;4G'XsBdkgQVnXo?BE_Q9deUrAH!lXb]:Y.0`3W*LE"]
%1jeV1ZmS!/'J&o+rY$f+A(#!a[4t8o-Mamc5$uA9l]>26@_2K7<fjS,HNVjid7%YWm`J6H4*+J@P$"(e=3d5GErQPLm\3tg>JBgB
%=maG(\LDL[;G>:`FQQIhNon(2gm=N-EcYT*m`Wk'3HT_?g%+6&Yqm]?go<46hHW)g-JtHMNrFiL-Wd-:o?Y0uK5MV+*O/M*P</m4
%A.!7Je#h]+5H8gW2jKTEMiWe"o3-(^8i=Rgo3SEJku:<8mEs]`[b[H?ga[$fH=`%]4Uhp9[!H;BC-CDFR!A#K]X[/nh&BtD'[QG>
%ib^/XGn!JV4O$s)X!E1$NV6QhlccP9Rb48a2`=#b"XgFNgoH^o43^6m>ABrG]"q1^`h/Bb_;2k0bsle&#5'A(@PGd+O%um,;(>'`
%j\e-r9GF,bo`'dX'U6Ml.$=?J..g*[VQ6k.UmR@0mL>XT.Q/X/*sSW,'c[0E_8^uEDIXYDX,V!O?%d"TpGLu!Xpmg62b^'q1NQb%
%W>4sA0.D)Rg"^.7@'W:7g3fL(m;bmh#"[\j>c3^dlS48t)BS6%4P8]S+iX#"4Xu8Oi5(gt*_),hJd6@E4I"RMmSuF8VV+e;Wg.ST
%2TtQndSKep=K?ToGJSZHr3&/2dam!]7!e;Who7[L#>t@R_Od8iCFB'KS'CKuXf[t_nsQ-@)9Rt"9;d0m'YI+c=>Q4i9mBJj[stj8
%Ct?&L;=pIp)g1b!)maL%_p#!ff%hrYWkC5P&f2OWY;l\o>H))3_3sq\BB?X.$6H(hXZU:*>?@3T0Z>4nJSrPFWNe:((?T@J1+3(>
%/$Bi'7Q0ANl[0H\?EMMkJ_4+mh^P@8g*ZS/T7WWMMt,sZCorQG=/hGPUsJ_%:/R,4K^KPO-qH(:VDL_-)RV89$dY%b-o`;k88"AJ
%ol5lVJXri>UCl$OU)H0!OCkt0i0/0NQV4T)E-M9c58b8e.:fZHp56hVmoIYac&g(oS,<p`BiNioXZ#uiVc>74,CGI4T[]FQ-)Y&N
%E[eHNVSglNL&?)i<NF?ZT4[*/gR4m&dhphZ_+@Z<PHUubLu5T(3:T\q9hJm#p"Oa![rgV067TZ,l*DVZ($qnn>*;4hr[G<_02`i\
%\tCG)d[\shNGi3?eOEM1EH2qeS2*:hR"?JeFBhMI,;ND?kGhL\<:NPp'O9msj5R)dCntL=>jg-h2sbT5Qstci`E!=oaOuJ%Inab7
%c=+$V\<nhtr[e!dAYUSpBXcJdWC01sENta;7HcYYGZ2kD?EPs8c$C9[:;t42(+DYPOsVoM-oEod0EiEYd:FdX:mN'$B2NDCl_tTg
%b3s)]$m]F8cbrD>@"&`"+rmsHdPPh"Mtor/8W(i[BAk+..]#5kF+'o]U81A82hab!B)(W.1l>_qQC]NiMc-.=72a(lr%-"jMSBk.
%_3CHYR0fo;Q2NW:B2R*U[V8r_k%@O<c.AB*ZRFs#i%.JMb@fg7p&$A``9Fc%/=].#V:R&BG0K5SPVa"2D6s61gngFY1Gu/=`Z6D]
%36-'NPNSc'9/n#MktC@s4Tk4Y>;=D=bZ+SYh#:HJnu8/XbsBin>ee\i>G`^qcV.rmq2L69a/W81Q=X[2fC#Bb]X_?Ad04U)2V2_c
%]f$UOD79tqgg$=#F"P6pSSPXD<r6NF[CNP#;o[NrX3J'+5?b,X*MKgSq3],X.^p*tnDEYG:=TR,HlCgh)Yru=PbJQJdqCq)qPV_<
%ork<;<%Io.Rt]UaY*!^&*9Ip0Gb"%]+"KE*Y3'X1V<F^u<,[f@pG$O,>H3ZTFAZn6IX!Yg,,uBC](o;s!*IooZ.<VtAt%K-RcgN8
%kG@u;Cu(uek=KBB.?6,1V(pGp&Ga@Y65e+2ABYM+aI"UXYE=D9DSY0!IlH;@bjW)>0g6-//fA"CbqqIWpOr48)u$]3XPa&n?_:_7
%q^3KG+-T2L@s]gWQ.i%7JNIcj:&b+PB"ca]JEqO6)`>I0=:so<geFU\8.jmo:*X/uA!F/R4H)<*Pi0A!UDK#DLJdqX#p,VYk$cbA
%-$V,akU<p@h5bkO9r!$4C3@1Y&tY7d1:?@2<GUY(jt6Mc(<L:GLq)Kt:<d4?q+\WWhZ'.#m$@8AhZS`+rSO;31Z/3QULcK9QXmi1
%45^(/n,M7,V>:,Z`9mSfZ%Y9TQEcS#n=&hA:>#9]U`8st4l?(,n$jP_;nqL"WErj%dQG9!nS01hN:\B,54(c&EH1Y%Wn!PfhTf<,
%H?n%p!iom++e""prXU?#fVFJo1`Kh12UZ8oJM5#Ts.n$(^%MX)Kk[A==a[N_q8=qpWO:VJja#U+KPV\Q)]M`I#h]n\aANlqo.\iC
%L<8Qg`_K^)9N_*0QgH29Ck-@;D8=k*]khTa;/OmYmRB:<Cc'nC`lNSqH2MIu.<eZX1SYld.qPB.PoZ?3#ZC.kqG4NUl]-9o0qlPG
%P%,!NjK%>H(3.S;le.N8E&`_qnXN4V:\4?lV\PK55\],lB-7%^HjaJ2#'^)^JUM_i#5'A(1UKXUo4B2@1_7/kFO2>*#@kIE0kj7&
%*dF(X?KQg*H/N6TGaSeCk(/m!j[t58((keR;&G2*bQBL3m"*`*nDgG2aML&i1_1_bYotLCH(+"(d`a#+\<BQInIGDsh5$TtJA^hR
%#h,>\,#*Z>8P_7,L51&[M2=2`3);FehDOE(4F]*=-O6PWIB6G\8#>Ll4fnJ=35Gr=dMKrL-Dnme*9W`W-?sN(YCJ!L?+cp[4>gp7
%49O&KARN*e\B_E6c*K'_92'F(B.$cW9(UAsG^="oUaWXK4=f%:;e-<+?Y>uJP@3[ZZ_r$rZ8,&<,gKKh2*TD[_aB=5<iOGV:QL@a
%?HnCd:=R89d#KS)<V!NAq*X03TBHCT?Uf5tSUj?OR9=qhHg[TPS;1_1`kq*UH538<3M["BCW/*#2!k-CXe\"l--M:+R8q^1_+Ybo
%E/`pe3[W8lKO_@oFW=m,;Fo-o)#q**L,Y0'9T`+,ol5pu#3$J6GaQN+-J$Y:[Q-R5A'EsMP;Y2f36"(@0dUfJo[(1G<+i8orn/jt
%B,Br5\Qc)IDH>4+@i!tXg+eK_=BI'!6?&Xr2]kU0;so@'DRE[i'dHCsbujD@>"a!\3`13.bb[m]e`bNo@=%m7MCW"X>YH$g'PWcV
%9:`$.Ndg\r7QHIoelR<`otii=d(k5m:Gan(1c.ubP\.1ia[AL1Pl3_jd*Mr*]Qo6jCl1`9]$3(oHum.6P)FLiSn=7^@cQJ/mn`g;
%^>R=CdK]ZQ^s?_uIGV#U<gq=,i65as8`b+k]#XXdPFd^h<-u)I?LpEr)Xi0a%Xb*^B1`Y]V.!rPO*d^3@IaqUkp?1BeF!6LMTO.&
%'N0$NpGT?og9qZ,3f'?dFNtT?Y`7<F@cR*L]i."6?Z*/s\TC_-pZBIO>NXetgmad[F)u8;I,8*8qeGQDc%7l5K?(lAg7M$#2.?pk
%\J/;nh7:'X2g=HImbHTgS%Ea"VE8#M>Ujoo`1:*iB>C36a2I&NFRP^Db%82LB#0u6F0jfNV7ao4l!lklmms6nE9;El-H<`eqRdHc
%RkDfYP9-)=qOAqSQm]rl6\:9e"J]a?Y)3Iff?\6/o(>IA5g<?/>j_Mo:DG>FFFVih7&ab.EQM\4GJ,A17Ao3Vg87^J"`Gl';26pr
%mECB2c!7>.mC](1[<)a^!r=:3#h/`Y?MZSu-XF3XIVnAG>Y8SU,YF,UX$<dc?.?("Vp/:];M^jRrXU?#e>.og1`Q(YHlD1Ns,1l:
%Qf@(%Vq8X2Q(t]QR4LPr@/i1.n"5d,KXATI,_Y_dU`52+n?8&W@TIYgRaOs)9hPGbepFAS2H@jRRnri0l0)Tfh;spZfaq$c7Cb*I
%V)=TK22r[s]u+kOprV1N5`07r[s%ML<jNCoM*_*^gt\A<7/oN)kY<cCs.bOI\P4oiM>hcYd>??X;f*5n>gWA.n&8)tRe%KE.8Ts,
%b_+aObFqM4!+)RcYNmp#<uN,LV2n4;?r&ZkUWt23G]:Z9HDKJ-<1*k"k4j0L[B&,aHBd[qK;i#tBC3WQqH^\S?QX(6mSTrE1+k@i
%*%+j^:&<k:L55Ta3#Oj&(WVA6^_=I8hU*".YDq#G2GR`bH2cISU`)D27i+qHGl6,n9Vk/$?k/g^H<#?i1D7sn1MO1c@J8:54]?1'
%9mL3BH3qZhaD3IE3o%prnit%k;TS7\d[t517pL!OB%FmR>'oa]kCsXE;lh;/DVW'&F)A55`,&RHZ^MhC[dT;PI?'9:=i`2"R_hah
%puE(&0?Q*eFq4NQ2b9i+ai)DoXh04Z2Nr2p$8tIp.fl&!S]P]`ds[&1DIYKm1WW8]T'fS3dsRfd>kjht=Z#dUodm44-u0nWU3<6a
%*b5+XdRL`N3_qQC;\>S-1+DoKLuEPl_iKZ&A(Du\?DDm1Q"jiqKIlG%N6JA]g"ouX`[tfblmoF0YoXAu(C0E^T=.CPc:+1g'IHZ=
%B.igr2`#=1Xj0#c!L\h\LYup[QLm<30l1sqaBPfJRsR-p=*^>YZ2?aT/:US+me@(96>k[;c?:-Aob\<M/ja3SRuJYc67HYM-,(C*
%<ZCt'J,ehWMgc&PDb%2Vr9kfBA-*4_<LW)JB"Qmb>\+C;NRDCfc5a8Cd)Oghb_TVM9!qjq;CiZjk\7A+>D)tCQ*5r?]XF'Hap%k[
%al`L*ejd"W3>g;`,s"(t>4hh(KDs'noCo^Y'Yib`h%S!<hLYLtWmUaN63"en\bI''T`f,t.u;Jd&/1M=-e3OD(9'Vijq.P?53@Ou
%q+sE=)#boK\q0#I)>M+UD%jS!X:n]%J:I@.j7jDf@G8HW](h%l\m@pW\5&FeO@(enaf,fcn6[j-Y9/;n$/Le*aF*u%A1IV6+-1E!
%5g:$W+Is-81$8$H@L"VgDst$-;D%0W,Ji0_3H5]L"uY*($j.I6R"jWEH_D)kL*N2!q"Ya4FLl;r*(/m4(E`X/*Lcobhu>_e&*pmI
%pQSlSrqtYr@Ym"39BBq\DK4hgoGmf',Q.;d;iid1_pPp\'ug(+7&UC(-,aE"lU?s9UVqa^U*!0[e^'^B,k_1WA^uQrW^/O(h^nNe
%i7[0a?0J&;ZaCW8WQ'E7Q<jRD\if':dAn6$<pSQ@MTjsWbGaN9iTs$T@c;.n;584+8#b=t\CHmq_YD$N^:@uQ-i))fn#Gto"!@6J
%rBMcqKe>NF]!&)/;KN^.^+p;E2O]W[btBHdCR20!>LR[k9B)[qVbm<c*H@jn[W%OMXK*1s8i8EQN:,='s6`KfrK$Sc!R"5mO<^CZ
%?DlPZ:Or<=XWk@5.A8VTCFCU"oTK'cQo?D%+4U-o[qE.HEp)H.$'=U)d,^a$[6-NcgpFjQ>s"'=[2W4CpBE@[K"XK5--W33OdI&\
%h]s7-CU`nXl`"f"qh4IFRVJpA4TnM3pba3WJZd[D2K.U<]\*J#U)70X&)5XXgZ,NfR)+h1`e5Jj-pl8P`:7Bj&?rN96p'[2[o<Cg
%l>L?0pg5uB5t+76;TTn/SQ%i.[4&&J/A>W4%GA>J^1h1Y,R-r>?7Sr*2(j6Pb:%G]D"Uu:I.kl\gPBQC>1K]*j[c?*XL31F@Z&]/
%Sa1a+<3+"P_"Qal[n;oXs8;5jRU+0RDEj?NFdnfZ;PtJAX8e$eE\5<='PCjOeF&ne9C5?+Ek>tcbdm-BF(Di\7T(>I]pl!ER^H$P
%!`BWL&T04Lh#MB(g$<6&gJ-4bXDF8<Q!.$He#CoF21=so.kWC$`PV\X;B,(G"/0H5MCY8]f<sG^4I_bIEn5.\HJ+=Cr8-.oG:Iuq
%7dr/'m(cY5@kldg2?#"H:37;>M7u2h8"HUW8!H#nrp"*=/(JP%]NV@ZIgsW7@DZB%;<UIY(_WRlc*1lARSqf+K;`jf"HZ)*Eu]aI
%o[k954uhnO>9F2c5G;e<N2@Mc[r2-8?EJKZWZ=U3?EH$KldKIHDpHODK"9>ZrDA8Ki,#kG%O`X#0/cmT"Er:a?4$K^;iL^3C.%(<
%aBYZM"'Mg-)c<K]D)\ZKlF(AP=X2,]b?a<)$b]^qmeq?,)qfaKLX>c4rDKCpbs6>BSWjTJJeZ.o(T@<nK)/X_BXC!u4d]&YW#p6`
%l>$!;6Wk=l6t)reXg8[;<T<.ZZ_HH0"&;:*\Nbpc01oO6N+0+uWhILVW5*B45a@'rU\9.#;3q62MIVQE%i(.BZ;S2cQm;I5'i1gk
%+&TY(iVh%EkPTrj$2Nj.ctb>55u:3r=oH>@/(^dQ:]_Kkp^?`5-$5IdT@K)?g!pI,4A:pJ1iJ`'f=fa,n)C)<f1f.m:qDZT=Zrqk
%+0<h<"Ze<:WLbu&;0puRqTB>MnMmOM)jS<19i9B^JJA8iX#>*>'hX^[m7L=q,"A!.f?J4(pNZZQU&/n/YO:TRY=lUOQ`3GQ%t:D0
%TRi7R;T',p5):]=?Cbf;Y=f1%CLpo,^.#`@.?A7,cLi1&FhQ(@&LE;r-oO.bClT0<1JmdAl@b@SE\^*!44U@KGM*\N1.$u(]b;$m
%SWIfsYO#]tXLZ$NbfoM&aW5[89Ae<+JnE1)&qu*bfPP)r3Eag[cJ"?AGrB!q_4\@*2b!VeJj"X=eh*`PYU6b>;3MJ@,eLh+B]lt\
%3eq^d^82eY<N-b;FJHB\iE6K,a__/jmTIV*=tDY4?8g.()]-am;I>J%O:e39$Dit]8[2V^D]@M@,OnhCL8t?>\nnntefD>p0G&+N
%$F4uqpd5?E#>.RM+&T>s.Q;8rdCDj&W'mJKD@6,dfLX6@!R`YF3n]<?Z-$q&/p`M_mPV8$$l5"`UXQbNLoG3id87R-%E66ib73K3
%Y%R(Si`UYu4iq<m8*?O\?kug!?PZGo+!,i5b5>\-kU.M"C,[fGarIgDf)i5r<?!kg),V"n9=b&fqM$V6-(E_kW-sT43NmVl-2_/(
%dE]qE0'h-BF#:7m(Dg3d&rM+1Olbo*p2t#@r%K1UjEmF'Q?4nJoHM25'+O>I:p:O+Fge@[X/aXNALi?JBaWBb_s(WM=cUW&%:r`Y
%'V&>OI4JKd>H%sTeKot[Brfdu?*:GoX>`$Q6T8ci*C;0s6dUBoB#A"Ua[@8#\-PC"C)p?CC^p<+\7F/1=h,s9D73P>NE]#a=Y"B-
%YUH-*bXIUJ=H=r"o3[o5)a'qi#[tX>)adlpKL#8*hrmtIpRNGXPR/UQ,M-:?:f1UT$H1_o+t?HfHJ',Nar+q0SBE&ANARU[f8MX(
%/9QW7]%)8?AQ:53g0CD6.MArJi:c$G#8U;\`&XBM]:j2UP&7Y.i1Q<tC3F:4$SW6sRdL.Iq/ZGQaBuJHBo@j%ZStOM//01V0TD46
%kb>AWG&+oYDW.s$DUlnEDGXB.:q=ua;3mnP[ouFl9I%'#!NVJh.Cqk^]SQYmZ#7$kW)s980A\+m<(n]Y2DK(t$PM@!G4cQl>40IC
%)"]t[fmUHqL,Jb76KNC^-;0ZITK?!S&)am:D0DlNep9%^F^Ag,DAp<d.D_@>gIl`N?agd492,a4Lp\KsC#+pdKm?=Gc(g1d2d<9;
%UA[KR<r8UO(_H!dfBJj,3GB!CXU_S)#d4^gEaD2Dm,g'_kd#lHb*u%4r!)N?c7Lf)"_$Y0gd8,T,/'.KE4DKlJt8qT39nmc]nN;W
%/p]4qIi7P:["P3lMYY/35PSU-#c-=gl7:F,Yj>).7+'2/U.K8e(RH3)cau4BG?"MkWZ=OqMb',/HK2[@&OkDhQR]KhAkJ&?gjSC)
%!pfUUX!1"@Ec(=]m>)0uQ)mVH"n#W`paejNEI[[PeT:BG&WG2C*P/t0AID,L;rtH4`T$(Z>-1:%Ze<Y%>s8k)ll>*pB<g'2K0\Hn
%@+!GHWR\S^UkpC3qd<WDm1Bf#Z7:<eU9)uSXu:/Q^#H>O;Psojqn$V8B5Hn+?@f#E.CGoZ\B5]R'4kRWibAEfk0L*,Ohj:@FD@e;
%_-UKCn)D(%FZNIdi/cmO%b.8^9!aqp*?kplgC`<h#leZ51+eTJ9XBk<.TQD#RN[JnQE#p<[3<9-YQ8+Q5fJUG"8L2aRn0ItAZ?Hd
%/nJcDn_GkRW.ct+<QeiqY(Kf2TY^Mb4B_?GR&F0=#?(X#mnE=>2lPHPoGZ>+]dGm.dUK0Ub2mfSFdlg.(rG<;<\H$p6HR-(9JPPI
%dH(D3O/\VRbrrntMkAj>!l[Th^^Af1fa<UpT!k]m]=#/I/W(/=7UpJe"oVG9=&O-[]\CXuDHBBl:8oNtSu^7ubL7K?c>IC'fNuQ<
%_++/iK[EVM*Ap-OJ).X(`N1%9)pRqR]313c+Lg@+nUUJE>jjSiKb"?kh>%X_hQg3EbXUT$%21S'X+/S8@E'_?d]7+M%IB)QE<7Ik
%e1H4LF,]B,<<lo3l1h/B"-lC=_J,W$2HhVh5!*='6IKrUp2[,OSR2!SkD`BI((92?XR'UNO`fE7#2Zd_J&<8#?m/;,dpXW"L@q(L
%g%Xh*D%T77B44i,dOjkb?R072c1Qm<\C57n'#B;7hIaMPHQT(bm4d"D$hXr[8]@pk."etnkA/"k\"E(*l>J-KKHb18:b/aWrRl!o
%Dr2>`*[-()'["ZQ7f%`q__(`th)kE)*VF*gnY']A.%iIP4Ep+&[aI/pEf.!LmG,_nDsk9;gdgKHo_3Eq'2Wo*-L4TMn@R?FB!_0]
%V.[<P\p:6<X$bU':3gmA::aoL!c*#QU8mogmPa.jXhnUE,q#!iNA+7bFOkuL32rdoLf$cQA`_)%k'<q1/H(I[s#9>?NR4.4m8Eue
%S>I1V!Fnen$D<KBmN(D.`pW2:20NPP-Th5&JXZmg[R/(9(7aQCO$548^46!(U\&!VV>]UsFaL1&=2.qRCtsA?\@8d=Gc+`fFrksJ
%?gN(Lf!jN(4ZdVSY8=r951jWEb'mdN3X?Kpa*D&0Sc"QHjbiSICZAXmak#THX0^?%AZ\6U>8tP.mC:Zhme5b#2oVmn-T]q[5(-JW
%B=!XP#O3d>5!jsP^9Fj0J(j5NIsg'q5-;!KlHNcc[sui>>(5TskS<[6_tVnMC6.7>2>IX?jnV_f&,l"7J+r*sQe^h#p>+q9H+EUO
%>FX5uY?U=`Cje=YZHt*QmStm4)X=NCG8QSB`Rjk`G&=;R@Js[4Wk3?6Ikh[#o)2G"C_hM<D*EII?4_]XGBU]+IVZf-O+-6c/,T(L
%=+_S*F!n"!)PRfc8sLGs'E2*=0(5+^2iBb!cIp3LDS^e/]`!0<qsr=`j0s`5W;#B+]9a&22Tk.02?$T]hRt=DM5j9[XlQsl&&5;L
%^V-^bf+srB?>V?Fl/ddMO+&8T93W>gYAC/WgN`I8/(Z16XtN"&fN@b2?_1;HJ$!d#kM#$GF8:.<<$]Z_Q^r?IF8k4@Ir?9kp$0h+
%#mT'FGe1Dr&oH7uUUoCB@rYpmB7KNhqq[Oa`I&-jrQj>QBDtZtg[aL=b3*p5r4uI/qlI%&/3WTr4MYD$m(N/M1pF$PD-nrAX&;4?
%<JlP,ot`qCXgIo&E,YPN)lrMuLMoS7MEj&=q>G_sriuC&YUTV+I)#PNPi#Wsr@Y$O+0BsQi"*iuZY-m#<rVpV;b?3Oe'3lpO4W9&
%1f]HbhVkm^<s,;-?`GH#eP._6T,qLAa<Ad@\",aYmKV_?\`8,/I["oOq&dfUMmZVNG>"dQ&%B7D[r403jNjFZ:9VgrgsO%16137.
%;$:q=f8gI#UWTLj&)X#R<%eR:9h=TZCJ?CZA_Slt62T<Y?_$I`W(V\ZBkdCrK8oV7P`RY"Z[6::^Y<oq]I[m,gK/<aon3"bBp8\.
%g@enWT<'S^2oBS4]pWE%GCA7H@W7GD<3rk-['s/Yf?A*lV7R6;ZY*5@TkE5-F)0gCHTu`NZJ->bc+_S9>p#.,L\<mL:/RqfbZ8f`
%?.D"HUVc#cf$_j/GPl1Lgt7";O4rt9,<C.^TirXd7!2">06d-<,amClrEd8gq^S)ms5B<?((d5ZSG]J'arPrc4t,c&]F55?eTn!q
%;lP6l9fcf)p9nbne+]<@f.B2b[/K"V_:-+f5W-oKkV0bq]b!J8D`1JGfZ(o,qrV:5qob8`YEeN^li)/H/oN_Qqtai5^XKjJWHP9_
%WQs&?8(Q+@r>1p+NG/8f*Tm"a&dm=.o$`qt?H0BZIK?!O_ljHe-[X[U8j.ChrFLG[qK/tb#[BK@iT3fFR[77I:A7D8h;HN_W+L,(
%f_qOjUp[h_Hu0T>H0ZP[i-XF#q>09L\-ABM[?=A8O$5c\K!'Lt3-SVC4lPMZP[8kiI-gXK=&6-4=!(3V:^tn;EIkHu;ub8(:@[MH
%R92eI4N_$l*e-g6$-.b:g![Pa@K[Ba,D)oVT(i1%MZ=O&:96SEo-^cDmPT2i:<QG,,N$.h.K8;bo!>6c9u#gc<jio.e`rV213X7e
%SE=1lHEgZ+gi\tI=5rB58OJ_,4kNrjY.ZZt3*r6M7.l2qeL/Yn]CRo[kf(BCH2d2Jc@0m(iNBT\nCru6[o;)!^Rg"PRno%-I/UUd
%ZFKL2@F(U8j@>pm@JJ/ce;uca-2l:S.9^ZZf;J8OWaQ.;D*]Y\\Q\LYebl[pp8PHX75e"1@sLK5Wig1ioi`"AeR4)&)I'6;cdWaM
%<!8\36uAYf+?)P6-Q7W-$D+M*fKlEkD%JR1%FOD.-#E4X>3VZ!V]j0GA;AT')u(p<nm(pd.#b8A*SIsXGb[=YKXt,_ZcTc*,P^WF
%nP).`I3SdCoF6QM#l@7.-Ut&8P!/B#psT0f;QB"Fh$Br+3M=]Q$/UZZ+rX1*.DA3PqO^[6L5JJ.ftbHn`KumWI`[l1N9maGJleC,
%EK<64>[ua1@K"n=AYC$mNDKF2<SasPV"$S#S/qP[rRt=g4>qKe1:]sbm5$?,<#@\A2e:'IW$WQ72'PFgE`8XF,e@^%Rl01pTqPd_
%&\u+[`1ILfL;]UNUN[A@)ACe<S#Q[-jfoVh98E/+(]q[Wn%HnNJ3*^=bCqXo20-_RQ`n3_I+@Ld5B<[j?8W'oVKiX$ln.Rp6+=@^
%*j\spD\b5=BAM#a>8tT0^#e'o+'um$gZh.<@k^QLhi6XW:nZ3S&4R,1b0/"S1IH+p?>Y%M_'WF`4OW'V2a.ra3W&[39C`^Y/1m(_
%!7_4sQ\N8e\oQcj?TnGRn7oDXU>0bKjDF=\]3jH$0!6cQJ#sHo_M)%WEuZiIpIs)@s7u;"mVlh9Lb'KZFk%.R")]SlB1ZEt"laHb
%h]CtY0/&CX0AB::%jR0W?[U\U]mB\_D.qV2[gUf7S\qBXD8N$V%86M`XE#nu2nKhaq\<X^`3'8AoDQ.*UK@8L2k?/?lHs5uWHWj[
%#\2YumXMt(>8l`U5rIG%dXmA##tOn\m]_fQnc!@&qSQOl\>V&cK'E0NKPl)/h=ls\9l/Xc2OgLrHW'a@8YJCBC:!#HGY_;si*$&"
%Fm6H8iJmg&3uDplO*@am5OPUQT06JHj-Au2KWB,&d[r+)D]*[9+,?U-1^$XUr;`T$73VP+7TiARq&GHe$$"Sgi93T=*=qNY,^fdG
%eF5MF[0%s[Q4)TrSq[!RO8]<-mCSZmm5YFMFPkkXqU4QE84hQq/,oMpJ+7]-&%$L'D_4t4`De+,(70\N.'[][O02!t0>I#Dl]VR-
%h+$kF[1LoA=9LN`*j0o$r,V>hp7%g/i9"PJ[1!314tbpQ]KUUBa=gQQ+106N*uY'#n,16T^,g1H:V&bM@=>`,Z.Z\aEc6C%g"tCb
%/72bj0T=[dgXc\R@/(gLkfLGs;42@Wf@JDtq?I`h0\.cIRXo7sC[COd3\H"ZiK2dnm]*)aopS\9<qaf/o67%'E=JiFf#FbOpVFh]
%\sF[kQoj!%r.)%tg:"HHh@"$;BFpafp8eN'mt-!RSbDu]e"`$8hggT<C;,s``bB)[XC[uAD7k:eAO/2sXkhmEkT0WCS\?\(KGrEW
%7cDOV%F'1'WcWB5Vuu'o[6jIoPh_Y+k\3/=3OP+#fM2PmDk>(*jlIQFc^j:\enN?3K%'K-"hLp[<8/h^h+uVmZ]AIc%$F9r%:F:9
%C`74.c`X3>EGV4l073N]EFj9.rUl4e[:YtUpBus$),15G>]'FU<qC)K2R_TtI2o@p7GkghQZcp*p@;"U3dq%X`Kf?7XrfjFAM%>N
%]QU^oHhJiNmc2U\ne:JD/R_iZ:nYIV%t4^elgK=(2_JF,?Z)uq-u`'NIg[&W4NBE<Y2Yp$+2&IYS?:t[W3HWrI('Moph:rp[18+*
%@sANAc3)"dr2\;!qmq7V?*/>Y/)TrR]4XUnC]<<MNre7rQ0(@ckAKBFn!9#L979j*N+QBK>_@2/n,&Z`fC*aX`@[U@iTahB2]&sW
%X'mZ*FM.<i^%s=jJ5Lgr"NQ7"4^rhc\d!1RHidp'Qa_[TNN9Jd>-2F%lS-bRpU5N701YjD*3W[$3,`)7bnohL,R2/FG1u2uT<![b
%B"6@bRsA>q[knQ%jC4lkYAVtW`WZXmodB4]qVfJsNE0^&1+18mfK`:uGgh$qZ4n$VY>ies%MnlIRQ&)ZNse%3GF^h?Qd"i#n/sEd
%Q(QU/otr^G)DnU5#%WR62kH="I"ob,5KFk;DZ(OhO9_>IlI1C2ep:buj?<6$m-VIBH1tR3NF'9Spm]h)kPTf)ph8E-Dfl:Ss4`0Q
%Ya?8G$B$R0(W.%r$=.?gbCRlh\@qGk?9QM<j=_U&Fo:o5FpEu%l4ZlaR"Irs,&3k=IGS4T\8[0h^:AU)p8O<6b=10;dmjpE$>0kj
%SH+Gg?Zs3_ka!Z63S:0Th;.\i-]:gGqSBK93HofGk[$SdT'n2@72aU<Z;D;c3WA3.&Q82Z6")/8'l:pmI>eXOnggW@$8[S5L=`ul
%e!qL$?\Zl#m5hJ^D2^#tlTto+WMS.bb,I/N^e[%?p\]>Qo2uI1M7.1/j3\DVdJ!7nm`TJ1j8HG?SpkZ#VrC_1IgIT_fe6=Lp&8`G
%:Ni4T!d\'F>T[<^J.riDm0DQ8HjV`jFYgQ%]!1hsW1//,dB'QUT>#VWa]Icd8n,gCg9q8Zs7#k_CLa'$S):DS2J(FqLJYb/YF@cI
%(ZEP@rqo?1+Y8(\D\dB$`dN`<p'D1c!,`(F^YW,jP(3.>F%t;+eshlR_QJ0h=BNlihiC;#r?<cqVeb/<6LNO8\'T0eqk`#`J1@Q>
%/OAiQ4\!DZc+huIO+FIJRC'NQ48N(31:h*Pn;[%V]dG<Wppk>5UX4T1A:KC1pcMr+m3dfb_?'=*rGV6"f@E:G(7slJNPa\(4VqFQ
%H2XCt5<:bQ/@6DD1[h*^/URAYUF2nFNo2R-GL8lfc9HTYPCrnLf\0TT/e+ug90M"H+S-Bt[;-:J[KkDEB6!h9mUGAW/*[hT^V>`Q
%asS)1R),gF7osb0gpWM$:5@7O+2=nMA,Rn/]K1GW?)sHl/4mTs$?)F7.W59SFqAW*XF08Cn&sS)hU_a\k.8S?GDh0Y+9GaXaZcE#
%:9pS,Xb2#pn7n-nmk\mY=a76Zidl75/:aY'<MM_#N@6?mPP]U]bI=!C*ijO''fK+\CHm;FdeH_sWa$5R?gWPpUe,+SI!L6,e8cr"
%XUF)a>2K5$mJ?e>#;`$]?F50]l)E8RWoh".=n4N.*$43:H>fq%"ibEBpZp?>XCL"-BO]4:Hp:^=7p?.Pl^JaTg,Z)G*t07_f['o@
%k$!')]_Q%0Q?&mahLF?5IG_fS?!i'!encXHbU.W7q?%.MQ(8$@UW+Y=!3`oJ>b&Vq^3K2^bjkY`C69iSqP4#a6fCnG'l?%GD/b3E
%+_Rr>'r`hjTMDi*[I#&#NjeNUPrIOsbJhF%m\fK2SYo_p<%!T<\,0k=?<m.rgg2"1f+s,Z\'i-15H(7IXlS>$3J02q>W936IbF$*
%qk*U@qkcg+%@Aa/e+M>Mc?k96hlJk2R]Z;G5B27#)Juh2!,&t.M$;r91TV<5(@r?'=qA:6X7"HR=Y77OXJYi2jUt%Yo>G#9[X<Zg
%9$@0C@kT]U0G9mRc?]>t)4L#$XlY/J:)D5"J>'GZqQSLQqJ\\!lK-Wiq.TBSI6D8\,P^]BZ@1+%:%Dl?><b?"PkK1r2?`L7`J_T9
%pZlR&lZ%$8gsP_,^.;fKq[H'">&UNL"]41#hVP0goZQ[uC$pEKdX>*^dpu(-`VN4Zgd5So@G.L9^s`h(Q+:u/H1PYlGI5n(5Nqa.
%a_7F3rA;FPI!MW3SUXOC/,Ph0DRB<*@XhI51o\P&bl*_,Y#V<'YaW7d;3O/k@%u,155D,6?`Y"5]c:m-^&^%NnS5eba;r'RHFgJ3
%]s5*tc'CPVQ_<\?HD_L+(dr%,8bC:+D0Mt0kA5;llhO2N3b<lk#I:7=pV"fl2iHS,B0V`c\RUWT]`!)]\@_<Sq]:-#eTFELq?p?a
%03.AGB0W$$bb'B@Na^X)Ha3>8XS&+uVOBt!H=%,CN%@-rFhV%(i3hITGRar*F&:MmIVr)R<(PPcZe.^Gg@X5C<RtR#^0N0=R#Bm.
%^H#WB^V"c!E#qF+QKc*[H'+j:U9IJdfDCB)_C0,P8"VCQq2=CeAI:7'%=Cgn^E$]]q/ig,D10U@qQprM&\oUpO*Ad\qqm"C(\VQV
%YIrX=S?9G.n)m.P3o+ZH/`fPjhfg]V$BK0;4\.D5&SQH:\`V5`)BKbVb^ZaDI$!"WeuE-VAa/$%mXg+ur<@)uK>QZ^Ku/bZnsdFI
%HN,[gJ%>Kmj]0pD%sQ4[.ht+2nD8IDiVNLC3;R9$aDE85jBqkfNGkl2h!'iK#+fN4*:^Ge;QcFG$G(A3MS5D3f\6,sG2$s%T:5SZ
%QX;>'$_5_Tem`Be3fY[D&Z_D:F2CQ*/Nh`;[e*Fpm(GpJ43r7V^%>'$5CTn]n#^K2>r=+.LZ.@l2Dk+2Ah;[pGH1C$5K7uTr1s6H
%D`h9Ad$!kSgNd7[b>>qacG83+4UeePR.gQ,p2>(*cbf<8R7"Pte&gZ"`FjS`:gD-.^Q3Qd:cITd5NE^=&u=/Gs$_@88Y#1c/&t@]
%Y!3X:-S[`_dn/ebkb)#C<a2s[f9\J\s,s+Sg:4;.]%M,1Vlkor2\u-,f,8tVKjRj8(daNOmF1fub6#B_K/`E$c/+\Y;ju^>+B-!)
%K`C@n):JpJoR'ER7C7==mscoel&<0;.5luNi-AEOm^N(=?s/^XK@5>Vis^g[<N49JTkF/K%m=Y!iD48XXqa0mPkJB+nZGdd#E^]'
%Z:L-`a.hS>U3LXU."BiuWLq!OkYYQhJQ^m>m*NWgZ_lbd[S),(^?>8<5!TebKOmM)Qp'teO_82V1C,b:?B>VD_o(bF5O7$`V(pTH
%)F+IV0^JP.Q#SD6eq^GV1MaMi$b16r$aQ'-4T`lLSZM3^-=C`BF"F!FB+</p!O/n]CM-W>o&""lOd#IU:d`S8fCEeR[u[*KBcsXc
%VIt5IOi"c4Do3ZS8r+\q9ia-j5a`H(Xbed_hB2efIE!\^2$2)q0H/YJbB$Be2"%'a!Cgp8<:jV_Af]Lq=oAuK<^S%N%5e>@]*>])
%#d[8;fF6->.a3+BJSgbl74'(ZJO(lOUcdn8/E_QcO:P1i<\4\=%Y/U;Fs$Jc67As55D1(u4bCm/r&4YEIb(rAbW'9K*BS3rN1('t
%nXVAOWf82"(:r(>lnD;`cGI(&A7^0"U_b2l2f+.T-lg^TU%"aU2H7`D,,-4GR/E4t%W-oki)TZO"*6EbCCL..=tn7'S,mFms)Qs5
%V#,[n6.Rt[0G*e<_aau7LOT@>A0&^q7?8?>L^<Q[\679-5-X?9R)C'>?XR7`fJ%SEcR6ee@L.655_5!RHD-0XH44p^!((-H7R!Q&
%6@He?j(0eIUs4$J:BW*6QK&'YccWo<3K$461CtfdCBZQ+)Y/D#&-iY1;\1fP*QgEJ:]_-Ng<c_:"YbRV#Fbek&laPC1=Q=J2IPr-
%kT(H2ZAoM0lGF>+Tpu8nc)+9F1s?Lq`K@I)Va)4qR\U?K@(lWu+;g,s+AUadTG[fJcOL'bZeY4Y6qpVfDT2_E5TKr*$^?S0E5[Gb
%#[NYs#+G#dIKorXZ3^f87c-&?N!#UdQj/?89*`uX/9/=qR<:j>(Y#,.*^Bo8L.N,1"@L(h>nHfC7Tb;^":4W.PR'ZO1[CL'3th3O
%aukI/RdIuLN\_<%<=$2kb]!i6edkIp52/B&%le=W%LS5gJ7,gtT$8D9aKdCF0olMMr^*Ti//XSt[_t^&YE3"Y0Zb<hB-9#CoMK#D
%S:HZ+eBA41k-fp064is57ps\!1Pie'gs@!k_3ApJ=YhV=fSr6Q=>!;m,dB/1@5)UiU+Ru_<Zk5g?8eg2Kj(El?odB]C9.uu!<lmr
%1,OXf1f4`0#qTh?!Wo&)/MRA49_*`+.*O`mG<MnU6,Nq?\EAIJ\d8KR#F%VRAuH68#Hag<HWE\!$PEm>bT`aU&W%\/eqDT#,djEU
%_YW]44t!6O?8"Z3CVmZG_3MiV8Hf,2@1XW9Eb7k^T^P7q;[RZ02r!^AOeF0BB+q.pD%hiF;(XjVBRJPX!^f7#NM%YlNM\WIKd?ni
%$o/e(1W5'6Jj[&>KVYLX%?41Z6Ek7@WeSn-".Y#kMD`I45Z5i-"PVWB636pGCKa%Z9%3o*@iM5>1h:2]gU!(#iWOFa+HVjrs5>fD
%6<][?g&a4/"i>FkbUh@XBT]&:(nt^6E5WE*1TDH,FBBDIL-!\fQ><u:#eJ8(m2/3h8/W>]Y^qgH&6N1D?s!_+l;7<mKS^s:Tii+f
%g(Fg95H1--ULjM'K+#j.U9Fn?4rTX`BRnEa6>(mP=Ld##!b.%\Ysc@b6=Uk@,9S)BTnY%]YCg45^uAd_!^TM.i'f2W!LbWi+,Vj,
%+Ba>off8j@KfNrSAFRO9j+G;e=:E$B*Xi4mZ"WQU8Dm3f-U>S)X<LcA*Q)u.3sNn[LS8C3KAM2GVJ6Ohpa0*/QE];?Q/K,r2Q]QT
%ci?r#B;cX+P%en!UG)k"T-VmkKa!"8-)do\+k?[je]9[h%_:A2<i0GeOD,$tcP2[P>g>[DMh!+l$11mE1FurgJgj'E$#O%m-*nme
%YpHX$S!M747cu/k6=.R&V([2sUX'Id(0f-FncPP;6gC?^"eQ<+"gLaQV1YWaLR90V_#Wgc&0+0aP(Lsu,pDg]!aI&-6pY0R,=[\Z
%\lo<Xc-t/V'8,(t^(C;ifnl&YH33bZIXsG6.tm,,=L->aj9q>?B^LFuK`)Gu"*NRR3p!.oPZTh$lGFldE5bi,@"*e`iHVIZ<#3ZD
%BUg]Qq22-\Z7>^$=er=k>=TBm2bZZ"U5fNh.hKkEL4SFl1P6R&=p[&=UBYbuTc_+NPn8A%$JaSg>3R`g6;EP,h#,`:gceG,0epJG
%kQWqdV$u@:!&$)]c%KWe&/]j_1)Zl6PC]uLC2-?r[4A6\dmoIb/94c$#[?@8BkePq[;&OG:/TJ&o^aQM"E.GA^r8it)5'_*X4W0g
%RNb/HiN@m3JO2YrK9?WKK&m\o-O/7;!eo"Y(j'2b"+DP`m[BZ*`k2B]S?>pZpat\Gf>K,>$\g9k]o*HSNQ<X&jKMsb9)r!a(@>=J
%PJN>7;&g8U"qn"CkY>doSJ-*eq1l2)Ka-gZS(n[]\U@_g*GU>jj6WT7!dOo]>_%8O$q9&=onR=MD$;oen1i-c(JSDo$H]1Lk7E:d
%D>>$BE'aQ=Zlg`S_1EA'JZQY=4sZQf>k+YC:;)H1=<@=A-:;2B"s:2_!bOS[8:DL;\;6ofN+`L*F=%""(Rtfu-ZIpIkTk\q/?GPt
%RGb27:XD-;J6>-8BB(b)/-[`.Glb(-0J9/l3._?k7Eff%"2b`5@t;9"Ki??V$k2X3!Y"@6!5AXo#&^E\Mh0Fg$lVQ'N'XOGN<0ms
%Y4.Ai7U:Oe?#'jFXVd^'QEl1U5u?b`aFPdLOT8f,`fhDOIp:ElB^C;X&XsM!aNPbV!^=&LL*$U&dIIuOK*ni"(^q`T0iSp?7mTEE
%H6McicqH`?(c(Zt$kJm_D@?rHOEbH5D;ml"K"V3E6l$Q^.O<IJJqrIr'\N,<0S=E\%/Qc;(f2F#$K4o($m"gsKo5DsRT-5DO[@Nm
%.;T?0KgT+a`$g#"otfn=BQ=mXli^]RnlA><</d4k"&'HIW0$*eLaa`L.mr@Z8RdX4!FA2j"L(4>/e)qSU%KZ<jr:Z4UrnlbU5`(d
%j!K(Y83feGM%Or<$r'f&pl(SpfXtT?#bVX<LQR5"*J!IKVhOn)IA`O2$L.778ct$pV3d#n7_`4A"&N/<ReI[l;,n\i*>D[TZlFZ`
%#TYjaaMt.\%M+rER[ODd_EdFX.:3D/V\n/IOp+SERqZUUiO*E"2,@)u9FPl%D"WJm_:_0&1S@?IbR=YQ\.uU'`V#%]U]Eq:Tcs^h
%CIl0A%&%NkbGRWILFNQ2$!)]%W%f^''u+<."t\+/%T13,6&fUZ]cnglaWdJ]>2WW5WE,r,7On$W3P1l@HGjBf#<EsX=-#Z*Z$DoY
%9+4oRA>jag#RmI[Umi-tO2CcJ0U/<ZU-M)83o>K7'n[,_1tVEI[BhU_CZ3PHc>D#:(k`N]Aq3HG>)WYnAb^^><VmtjcQQQJ6i!iN
%@5_4/=Po&WqUHDt@J.VOq,,LfPN5[Z7.!=A5:fj,kE9K>qre=G9JW7i[.sOVq"UXn@amb[!LXQ=Ehird^D.[rU7`r/.'UD$\OB0E
%#4hq--QjKN":g@nLS7J!iB>U#0n`lH7PV\h_Wmm>>Y%3=ne2S%/f4cE&X@lr/Q"8@fmJ<7TU.Ed1PGY7\oSlcU'?W6.TP!OQ>&,h
%(sIlZ#^hi=e,URf"bQ.ESXSN54L(6ol]dLd+Hn=d/dQO<n3'7$6b6H]MUlc^P(OpZ9#hEg.MOD%efbG20N*a)R1Qi$.GdAY1l)1a
%+qcA`0b%i<:7$U$Cf!qr;c=6/+q01>`1XT:L@`nO'=GhV=m-FM4C(diVPjrC4%-2s\0F@>'>okPX:TN]H=2=bjEjP(QiJ^B9M*Z;
%<ZHGE+I_Jjgt;c;%a6G"3$AL)aMm_cG5qp!U?aOip:Mt\03L;m7*0`W'4qnFHlQm)E]%N?&&>R(Uqg+,_(4YJ`Xl.,S!5'LLZ('%
%+0f\<ijLXq*OVYTQfhc"-kI3(W1HCSFeRdYTSqrj(_io;5LBiOP"i5:,f'iiJ$p(;W+h'1"@GPHP<jqcZONG7DPAX,7,Q#Oe)`D"
%MV8'>6R3%QK+mHYW7D&h'KgRH,r$*GYRT0:jauP1\:JCHf49M%ALn'6#Fb>n_Q]&Q]-6AVZ%A9`5;bG*aa32UNFLfWg]9kS7,("!
%@J.VOI]FEd$8OMKEeF9FrJS;'Fr5m\]tmP/;p2C$\;<nrBR8n#_cX-4`=Om62ms0UK#7mncq[DI&F0aZK&3d7/?$\4?pChr6I_-t
%IB&fL,,R9>m19T?NH;COd(p!lGWc'g+u17m,,.MP/3mjl%r!t*"1U1<cP7:R;A`XOrg9M"&6U0*(k_%fQm&]rgXlW@q&krW7s8\`
%p+SmF!Ep5jQH"e%ZS9$^HQE4aJmL,4e)+U_cZK+2#-4;[BSl!pe_%]59W\)17ldfZ(_j1]^f'iZV(0:]\!Q?H")^qh#scsM?jI3p
%Y#^dk0bcd,lVddPUpHA*LV/j!C`Q6,+`(OC.%6t\WKn(a2akeRW3_4QHdb[43%Ca,2_kJB/@JH0^letOhb6W\^',7ueq,@UDN5Th
%N#"c;6OHeF#>6oK;ga+8Bm0tM+_k]LRq>Q'1oA771`YIbN<&Y'-@0+is8"tcgZPflk[%.]*n$TQi)kbKM8NV+2mE':iO3M5dNKkr
%\/`n<3@\T/;c<aoC?9IPqBAD(96kRD:m#2m)^PrNQGnMVis1tl-?co@A6OCZVnlL!E19Lj(5\joO#U6ig<E#5:`L\+`ULrH^hIM9
%ojA3n&N'#kOQ#bM`dKon9PQO<7ji3f6D?am@q_6ljZ4AlT3J/uLaPKmn3\_e%>m5>[sF]3RFpaV@o?rK+Of@;#8X.m(8Vd-L9N:?
%BIn6[0dTP6Q!EB8JRbY69b]sEhb2DG&0E9Zb/PlFRY-&QLY5tCk9Y4G!&]KXm::5OaG-qqi.2Er[:KUHCaZS4!cc.D6Y%gfiGhm0
%`#p=.;rec@l_SM7MZ*kcG8N?uPW34H`XmU")lO*Y2AE\fI_":r\h^@VkRE9@c\:,)/p8i"pTUH>J`S2(6UK9P4<_n+@;q]FCRQ)m
%=C5_UQ3(!DJL#uJ'Z)!G',%$G</o?1'aooO+Kn/n"7.cS9bDN'%pat'@"tD7H!i_f+dkKE#W<QoKb/4]Llf6%TEZ>t?(k%n\\O2K
%QqWR$!87H7p8/8%46X#&MQu\nVC`L;7#M->BN9__38esjC_sQ]4;ml#nJ%W*bS#g:_0iSGTLOn@VOL<C"#(3-%ag;'Tt,&+^+8VG
%3HSqS":?&"5'Ojl$qF/t#3%l]L,%IK`/,asJMc,SeQ"upA=FY?QFP?k9L-W+'*W4bS`^RM&[:7He!F8_L?$1\@%@Or06]V^gjrm1
%//1(J%!BAZ!gaE"LEPQ],=oT(35n$9;_99XqP)4Q`H/brSLB;`AnK[#d?Yi])7O5ePG,L_ld>fV#!(\e9B'09MHr]3pgUji6Xmm+
%06(LD8=E<_e-d%@D@$Ui#,3$/W%bAk+`:2W'9BXf-;i[nj=(A>ikb1nGiZYj7qoQEj>"^l;ND1h6c!EN5_k2)0bGb,$0?b]JAu1l
%7S4*J[ht<LSO>d!E->nRaMY>Z@6fq5ctOX6D/`RHFp%8TkchfgOV8QscoF;i*$ih6.Jfeh6!$,Zhm1fmZltqfLjQ'7U"7FBM"Q?h
%EU,B1eXDU&LQ+X3XPOegH36;.l10EYl;7%hI'h"8ji5@WmG6_4H"&[?f>prQ7^3U.>d8":;I9YGmn,K-%gd._XCJCH#)RrApJ/ac
%I4'q]FZ_Ztg6QQH(O-XB6:nB_EL+V^;mGmYX(f_tV=0&(+;>#,XcL9,*D[?.L9RD*]GsOGi,a^BKpI9O##='7clerB\C#/<UHgs/
%.68$j[Qt]OL4`MLU8rsA+u&#_"[EdJ3-nV1[t,kAXrsn/d&5B#UfDA2nqASH5U;+P-Vjj&DDZ$:>g@`NRBZ0;.83.<m)9NN8%h+O
%JpM:Q`eS_LaE#H5=!jSp#`teFM?10$[hrj@T_JVg*S_3paUg?^1l)_\/>YmgSRdC%9PcIVLq^e5[[Sfb81gg?BnTQf;:RWp9li#(
%Wos^P03B=C8TBe)#Z*'dVPn5H`7i+*fks5Pn](2GlNET6l:AB8kK"l$R[-FQ<n:s>3(6M\0Z^6W!k^<#P$Y!p<S%pC)(t-Um4oC-
%9>`W#q*j<\oJVKWd]H@[g>htV4qQf!5QjGW]eNKP7[-QN-sb20HaJs+JeI`k<&IL7dqfH^.m&@-1tE6^h;[Gt@#gDeA(<8h[7@!l
%iJO)`Ng[;V)t8B4j!VD=n$KWIKLo*@&?hCnEVhRQ`Pit/_]1`.&qL-IC/*FrkeWA0O,$mQ.O"sod)8?jYDFq=9EYsfk?s+$11?0h
%e1<_jMH5q@2+EZZ"-$3;)^uIsY(_+/:K-;8Wg/40P'foM$4=sEaHDPc`o->G#!`B11=0_b3Z!<J9il1jHb&,q2>4L6'#U2))Db)K
%M\4r/AoT&OQh2tfa>%eRHq.Q]/[8t:I5oAb2rfU]UU7Mrio[@QJ7WBi<fDp*!]Y]R*m2Dg20?HiO(nXHF5L$sLpua?)B/tefci%9
%.9[;@_WRRZ79<J+_urG[Ge1]/qDC.C;?V_=X&U?T_2T,>-::3-`8oE-_urG[Wcac!ih<!r+Z"hT`DXo5`;?41Lq03r,`^m&.%4sS
%2C/5l#JVfp?guPh*l`En&;fSDE==<Z1`Q_IqVk-q;\qjDU/2#V1[pVRLG6FWaq[C>G`'EFZ'(Io)C%'^FM/$UHK,4pJsm-*mIAO@
%k83m6`GUCt)1`MO^+PH7X&$Rc1d"!5oO4/^RhCR$Gk`GmXYGWE!9q(I@S.l(Gm;Dd;P[8fWZ$/DX+okJWq#WK%1YSVTOf,^iW13T
%p:8S>#Jg`bMPe%!`#XO]M'6[P22L"nBXBR!G^>1[e<NX^5/h"WTp$m\2q$rpM'f,D?EH[so/&JH_Z7#PZ?SQ-3_cp*0hDqi:HR-n
%oW]/57ZL4G3/M*@X5e1t%+.0k;"Db"aUV`:lAf?`PFug*UbomFYe[m\9/@SU#-SCf]81,T6QNgEO1m$H@A.=-Vn5XLi$PrRSkZdG
%L<:]h/P`d\K&D1+\SFp"6*af7CDJ=C;W?'1-Kh+)"U5+1=$bmL`spN%'cWUs+MZ\4!Q0QX"t)H!K4rN'DiL?RD%MWhl/A0mee\rC
%I_[>=`OBhQgQ2^A1cYcF^/-5LG;=OVl]'#s@!^H+hW&*o+X*jEDBLGX\R<q`R2rkGBZ^_\TVf%B#4h$c'Kdk_ZZ.54_4)\s667au
%%c%dT6(]rh6Ml#1%.A9%JgU>gkW<O")N*jG>7*+MM@^aPB3S3')=Vr^W%9k!A-6s?c!3q[OPe"%$CX@`?Y:e60gq*(SDUDDVt=4V
%7-B26`;;kfA[1\Rc6KZIGeu+"9EMjK'Sc%*i+*ZJgCo\dh?ssj03-J#6-WA&D1KkSP2Uq`CZ2fBf5nmDr49Prj("$ITamYOEC22]
%5,/^7ips[5OVAV](`deV_(13n5R%I1g=6I\"9d3UFJ\f2UgkG#&TBJ`#MqkQ0enDm@jeg\\6!,9EL[U\YcNlj0C`72Pc*DE(R,TE
%kr((DA=3L0MbFBr_AfS2,Q'!Ei^"+p%6`LFG>3\Y;?XEG_dI^Y8jiA*C2ghg`!YMd%>N"_221O'22Kjo.)M`mi=0_<0Yo5u+oKif
%5#)l8`FU!?ClFAs%i29,i2D7j&6PZj%<7AVeb/HqZYd[j9h!^K*t<XR;!@0EC_RQmE=C.3UC2=b=@nSWas+NNm*W<Wh(lg6'U#38
%Fq3JcYn0`diiP*Ubm^AE`N`cdg&1!'k(p]6FL\"Wn95n-g-0D3U195s,0Y<:Z*@c:4T3FDiDDZe.3J\S6fiS[TuP&VH%CRpdL`T]
%UT/HoRc\%/fs89]VoAo=nA's#r-=TB1=U;KH,p_USm6ILZ'!E^L4^I=>ksTE0]r[I11DIQOg;Le(K_qhWZ4L+.K$6GBdb,9)HH0'
%j>7\Og^`'cFD]udYIZ^T`JI%m^5<k`0o1tC^dn"FV=Q`E,DYbLYUS_.7WI\t\:^]8JXSFbdMo5DL+&pPH\8,t<'^a(\*JiF'"^f`
%^Z(P*p'=q-_e:pIiD&';-p$6Lm_%L=@Mc.J%l?M*m6LPX6/58T,Aushb;KnnoGXR)T7K(3$-8d09+&P92+eg`'Q:uJ1p0WV*"%FF
%?]G3DSENer&W)Yr41#'/$p?>3>)oR,0W&:kYJ(^)cka++EVl-K1hr7Ml-n<^%68E+)?nMXSW>_Y&G3pg4H>\"d;pTW"+nJAO8]aA
%L+doeN#7GR"U`5YU2Q0ZK$"3HjUdV3L16$l0Z0mK11L$k9efT_nQ(PXNjF<SV[Y4Q9d@;ONN2,TC5RiKDMN,VgUL$fMcbbnRBD?s
%`b6RUKEoH7WVbX&O'/1&C=0cfE0O;:$fZn$'#g/61'Bp@2"9-BU6O@<GPfA@GK7R)^O\KIJC=mRFj+YH/.k#!D]'OkX`?PS:2rQ-
%Za.AU9Xgr_6O&B6"4[WM)C*03S:Y]&0Sp"q?.&nmLCj>RfGF]hU2UC_2rP'^1_A>J(chALcF1$)@u0CZ`*Gf4&8aT=04[&Nguq8R
%>[57@"u12[^6EIP%$\X2Xg%T@(s3>YJ6/EGaGI?%n/:Uc<mZUjR7>I[`&9Jj9NegiLhc#uYCfo/`MX>j>Yf0?1W7U#[+2uWFQ;\N
%fQS+&Q,:14VX-AHob&fd*ZZ,pp6mZMU`#,8SP3,Y?&3],FNuACOm/G?LSQM+k/j_F\nN*m-+4((Y+d'\i/)SMWC:Hb22'l(<4,D7
%ZRY0KC'`5S0f]HCH5UITai)8'GQS*f`TiGVZ:O(g"AY[2l;TS]*L&j/f8'f,>sOK!<\qrX+qgE>gepo``Ru9h%>$mq("3do_dO@U
%?3%Ykj/TJG4@Il,YSiXI'MV7ZL8kOJ5#]`@L!mC]m@QHUY%>,R_&tYV(i"s/"Xdr>3$5>*6M)jIppse++ESEFJW-+RGeG"q%FjGQ
%)[$$3mn4rf,2Po>"OqUYY(f6D4Ud;hY,TCqZ!(9hW/W''0]$\Ve25+DASBj_7P<h4OBZEHCO*?C)hg7GLH4]f/"XM/3d<^&p&d%!
%:!.p_&O)128nW31]eF2P8DV4bPu(U/g$pZK9GGG;&2\)X3=Tu9Ti'K,7P/4]OP:r%FW>J@><-(bRlmX,q.NHArCJ9`&QpM9nWl[*
%8je>t0d@5$2C4B>6*M2R;d=I.U_k:+`"+^rRn]:@-ROO'%[6;D)IoR:.7Rmd<&)pH8SN]@B"t%Gm*R^Uj.:g^d/0t.mR:3e^fbYZ
%@q#Q[K*_umQPYR($kt.FkiOSG(L!;j_M-Z6e0kpq2r-.oZGoO8K00X%%4P?urB*^3=\kcZ73gk'3j(/YJlVVV$7UnCOu/kS3P9,t
%FqH(6U.#Z(&\_B5*9!4)!"T5q22VbC?AB7'If)4;c)s_*8R)QqR]I7-Vf?3_]'JBt'LOXQ(U(-_)M_iFaOlJ?d>u2W.ZBmUB-_F8
%=]HCcd]8_Ze)_8Wi9ORV(X9KZX46W-@P?On&u?uc)FWS+0J,"0&pBCB'J[u]SuU@5_6@7W>e@mPKfPMq`t9@1r/-tarb+,&qbie*
%_?f73^_%t!jt)WiJl*AFJiuhBj,1^8&Jp-8MS)3PgBf:Rm\uj"T(CFIq`Jtg<(#jtG^eXVN3Bab1e2('9^4YX;m^S%%u""BA83@k
%;";>2DB_2G=r/n=MUNsbj*e@iRm]*'%VTD`EH0GU)HCJ2BPOucaMfWo86LV_!kQt/b.6N#4=@!L<\$PtjtUm2'*GneiMSY=PY`D0
%Q'LYPP%p^l*fLgSo[2c"BLl'3OCj3AOqg_e2OmdJ=lIV(jYRX.g&SV"'IosdVC[\9\OEY)p'G%Tn]@,Y;)D,Y4;(@m?9WWU$GqcD
%3Z3jXA#MLXY0#YJ?%<f>FM/$uDb[lf:SrXpBT%4'8BjLda.Z]o[]Gd(E]_-C'=fq7M@3!@agE">T`M([>E4:;k>=93%Cq&tLRd"t
%`&^<34p2<W;^p9Wdh,:+0QT5gi#,0"Lug$ScY]`cbbL76-`@?h`WW4UVTpGo0o!gpmANBd#]rA]($WjAZ:/eS4=hLNp(9u_*6>JO
%YS<"*^`"d3e0\*GrYhu3;F2I*"^WuB$nk/["n)T;[8n"f5Lg&WCE1cN^ed/$LBeV53R"kli8J3PD[]LVJKW2EqF9haj/"ua4G%rX
%dMIFQK2Ud__TjoBnfhSN-r=oOM@u8k^s\'al#G`!1Z%!*/+]ngX#1;m6pP5n2b(XD'_`J!Bc<NU:8/LnEdWGt%94?C/<R.$i]TU1
%(N0N:)=11ki__*8!LGEk`%7O(_/T<\=iIuqVFMe$M,;R<&Gr*2(hODbBZDGHV%I#[6fYUPqGjeQ//^-=-$bGF>ds4FK]seNa&>SS
%lR%cNE*!T`I2LDXQI7[DC5FNS>^>7UA4n=kN.D.=aA?l(:.U2%q-!Uu`0FA^i\%YaPZCHfRkM'cZW9YRPSW\)`B31eTJ%KsN1>J4
%oeJ@ATH^;e)!"cj#+l^/30T@!`Yb*u>`P8;FkDg'OU!-E&=\^hon3XoaPkNa$qG>$+<gRsKYXsX"atCSNg%p'Y?.L!JVot0@t<IB
%9W/h:C/gf;XX?tK4(TJ/3s;RC>et/e:tt"eiT9S($UlX(2%=Q=Y#3<!VA?Y1e]M!&bu4c`'/?m\DIraa`(MVV%,r.0:S=('#Ft@D
%aN#VS^F:pZEO?s`Z8cVkgYTT9/^h=OEXLfpK;!OM%!NUI\bI]bX-Xj<@1C]i204Z1!5Cm;*8IG>95G>1%DF&F?TF#4IXou-ihhHd
%qr-?j]QNGLQH623OKs,85\-;7jhTR_aZ;79#0CWE>D;'3R8%UM.!#*u"s/lQe]%lDWgfp0.4,b:6#Lrn!>FO@'ZB'\_,-Q,'"<9@
%>(f%$k6FAo\j@Uj-4GUV][c-)`]PWG+k@A:"`FGu:,6kR9jeG`eeJfHMj2G[FfH9g+XT+gl`e/;:*pQcG@d!C6VEg+f^`=&H?e&[
%`4Jk,L;>''OAC.bd1Wp)&ST3)LEZc(68;[TW-sf/:48.ZgLR*'Xou)<J\T7!Z:N4hK86J"b4CL^KLkR)+n20g6U'AD:e\t[?3HD?
%0QT*t#-?Mq.Z;5cE?mrHN!g'VHS>ad]6HHR-C^HJNC8[+Q$oSpf0-5cd6kcSj5IsLHA7.h2!#n9QoC&h5%&'Z=cAdfi'BqB1P^1:
%,P84a(+@V".9&OT6C`gfk?AQD_pAsu8%BL,%X3.PF$5iq$.65(K&938`3W'ZJso#NXU8%0;m\@l"3cY*i'X8d_*d6a>\o3nE2$n>
%92uLXf[qlW[[WD;RH%ePHbmV,_ZoMml%3$,@rcSui\I4T\:L*=@UkMW+ZdQ^'9AgmgqfHBMhIh=KtBP`EJdWNVA/lIZd-M-gC1sb
%H`$<&3GOCu:lLn^$Km,n)ae3,)NejB.Yu9I3:Euj0o4A\;:Rp+:9cOp0:s]i=55.="!D`K,M3LV<Xb_:-'K>-h?i9V@gHk6#(;V%
%Lsl\[0cI5o+S;Aa"cJ;,nd7%FV'00C7TJ1UHYS.`!D^%EkTD'+<D9WC,.%Wi>[WGbbq(h7!X4Jeh^1^T&i>L#.La:K'B4NCL4)3]
%G'LZONWoT==$FDn_<2)OHJa=L./+lRbSV%O_quA!V2gRl5tBe*&iptLWJd<2D2ob"j7<pT%I_j,3?hW;2!W3dB+2W^`PU]FJOmjO
%hqE*)'O'QG?A<G%ET>!D0`cef!_e!&gZ9X(p'B0f];9!,7ZUWH&B>1-Y'=TuV*g;0+%Q^,;28QI9pAiuoA,8"d(oFf8'au@p^!!X
%djdi725fJg$t:D'TcGa&9!jIC"g1DELl%>u8m-[>D/Ah&ol;56!\5TO7tg7A6j$-L_/n+lWQ@_[\fj$;Gl3udg_1:?5dG*]9H"7[
%.4YDCk8;T?8gM4tm<k9'&c^ggCCu-Ylkp.>ZkX#]@Ko13DV0`U2BH)qV>@t]5ME"nV(okT"Vd2N-Oa-tc:t#-k_F$(Whpri\J!TS
%4c]JoLOP,;nJ[GQ&PJ.%ga.g9Ac9P4=1f2J'ZRoJM0M$JD1"^pp4Qk8O.4ellQl,h8gk`XEUhN],o'<+Nj$MBY9D`f0pEYdbcU%6
%4.2)iE"l(M>Q$WE6SR<Rp)H*,(8u-)O67qe#JtWaUVNYfl%6^7L-(sDHRF1M)$,[nI-;kqS0XoA<[*CJAJ1qsCFI8Y.lk-7Q5$hi
%ah`tQ`8LKXn,SZ*LSKe.J$>'#M"f9]8SWR\N)_tK`,N"2%a/5bLOn+49;7_$!_e?imu6GZ*H@Lra2rqY*3*+=QP(HSg5oA9<&#>q
%][78p(sd@=Lb%=-Tq-RjL*?dU,=ZkX;!)ns0grFdC1T@701\*8>Y-QTnGiSr%C^!s@^1../NWOL5dk#[3!)P:a/bNb!ET]bP91;J
%jjIS5(j-i403-%M@W$RJYRY*?NHp(_h."m\BXDU4+Yb6P)ST=_F?s7RF5l7;`9YregceG,0epJG[^1?Db8&IEpNR^V-WEG.4;2)X
%29O/G9jp$(.9m/)_%uRS\9OR>$$3tV(T$tf%#s8ARng&U%<].BTm0j9*gX+NWH;%L'J`T7d7=uW:scHalC,/o.BObq+Cch!MY5]?
%FRDteY>+ljiM\lU-l3Z:El0.nB+l`mGSl6q*\JaIGNI@`dh9h5.UJ7*>(V!6><WH>&`1&"g#5)cYR:\+;@Kf4[\";]j]fB0!okH$
%QRbfF.^1=i,`_A'p+RGTKK@X,/(qn*J=_,mb`V/V'oLBMLMeFnaHJ:!.S(K(nX3inG\%p;>S.9BnVe_?_8E@k1*\aGP6^)071uF%
%QoO/bPHl0;L,V;`5^*GGd]:__?Xi"=arW5V9iAcJ=-Q7)"H&]F^'kk_nMI%cO:<@:R"s=ea#Z1P(S3%7'V5iU!/=-.oCUrHAei=^
%s.)uN,13/PEMLsZ]lji>.?MnO68mHsD[cNS+alNoAI#jcL#FEnY7#V,82q\Gl$<EmB?0s93%^n%IO9K)DP%Z:mm1n/<o9\1IYL>>
%;[LAeH2*Q,6]]s@+D(Bb#q?Wu`MWe`Z6LE#NBpL=<S*=ln(_BBjs*'h"2cWAlV"HQT]+>tD.&khN+:^OE@7?\0EF2Hj)'GX.#Y_6
%,%jIUl>+m5hMZRQD/4MA)Wsk`hmUNm_0Cf+PJ[90>eO-k0`^)7nWV/-'_EST!5\:+oPSO(Mmp2snH?ITB*<Fs79OWc6(rN;_52NA
%%)ONNPWt@[b>DV/RB7X"XABJZQB0-2Q"]&?LZ3V]il]Ja[*L$E,=_>3Ano>0[-0),O`Xl]^+UR/a1Dd%*gpFB)ZgJ;nJd(;'YY])
%H$Ta*TM,ZYATg==$K#V5M'=2kL?Js^.,2^3agM_!W6H+/NS5iETY@Daj&'*o+2gef+U./X/FYBMO,r*/K)*V1=tr0d2p5YQ-@$<T
%'GA/6YE0dukWGI,V<io1;IOcg%#6p/IP%Ca5V$1-jiX&.mjK9dGUYDfkeMl7E.fsLY&,l>`n^p*-no?SNbX2XYb1fXS1`aXCU[@E
%8Dp9)nf_aK_f-<.a2rNr.Aq&kH@omE3KgNGX"ia\oBA82FhA6W/hq1kB+XHe)DVJs/r6JlK0TVn-ikWL>d:$FIG>Ys`K_6/cGo4-
%VT%k\+Za_>)Q4$Q-:-)nI7@B=34g$\Ep_rT4GEKOR-aD'd",TIK!c%'DiubY"nDO`H&PLmGXa$e"*q]/8&pc[XA9\uM4E@k>Te%m
%n9P2%Ck/,VZ^bPlLTF3F9d./M"fg-f>)J(9Aqt1aYR\S&Pmm25'gqL&;]srIAR.J>746Os7N5ZU1dc0]V40!PZc37/&>6Fkr,t[b
%KGPY+NJ?FlRmbZH'Y+`2K_OGQEPbaC45u9)@)kdi9F(Qk]I.<=S/*t")E)]=:a'Ci(Jfd',`"Hs%-bHoPXU<M54'bSk;sP2&,7kg
%nb+`=P\ieJ9g-t#$Uq('J3/"A,Y)cGOn,DOWuNn(jaf/agC6,7!trb#VU.o39Cm6c<nq-"/;fgZ8R@f"^4Sal0R^k/qOi(\-'Xpa
%Z.p%K8e[hGX97PBK=\SV6<X(?C/^EtC9I#^gnGe:*R@T1gr".gN#YBB8(X*\BM59T/dg8T*J)`Ed=M^gj>=g@eYm5U,,a*2i0US%
%qL1-4XXZDbU%mWEC%QQ6#W/DT*(kG9@ccT,#tuG0R.@ca5kcppe4-+.\@dE,&0Gdi.,%&\`Z%9=&[^!u9j110F/Sp`Pe.\_,0D"4
%MNN&84J57WMVK<ED64hM/<k1.i:AF/:!q.SXtBBS)2&BM.;n*ce;<X3U>=bN6l-?q$dk<B'NF3d79RGdK;^-;+BG[8Z.nf;"!_I=
%bMA"JAI=U+-RQMZLl#PSX'P&tTdWj:0K0R!B,P10@R!fR/I_8BCP!#XE)=\JEN%qDVRLHG*/HYj"/goE?#@L<+W#o"M/L`ih?Lf4
%g7"OAMZo4RO0.$Tpl:puV_7OSC(0*"ThsRZR$qVrJD2$0=$!<kg.pNVO3qL1];DNmAsF\"(.b1l1p5&`6"`>8b<9^XiYaDm^tdVQ
%[%Ot*+Zpj&Vj]&![k<KG9h"Isf9Yk,BuiTD<@#cKW/L,Rj0snNS0j'BbOPtuo)h`!fSP4T8/#\G]]igX5!a2"V*MPqM:G(haUZ5_
%kq'GR8;EtAb>j!\emb'AW@lV;MX;mI@T%^GZ62U*D*6Y!+Pp$(`OEN82[CW5[PoT\2_dW3U7Ur99OkXV-:A1Rj>=g@ASBja9hqrJ
%aR@BjMlU+HfR:UUUWKe1D%Wq7VML'#-;_>ZAr,4cpgOs"oYC3P!f-?Di%\tdcG0c@f/G"gLf$;"8T3!lkbC+F/dpYbGY>bG!2rGG
%N@;I_O4d_>b;TUc@3cW[5Pl4mVi%1Ra=uNi@E8i1poY6@I)<L-G]SI&0Es3sAVL5F]&F8<,DX8uB$=fY`_]e`2O+_N"n;f,B3:ZD
%K35f*"]]!CB_n0b>=9`u!b2B%a3jbnPlC_`#@2u>OU$9QWoCV,J"`>:Q6:rESq2D#9VY"4X$"iH-F\i,8?+@5dB4;M',:(9k%LHh
%'pKgKO&I03(o.nnA&-.Sh?dm?\^2`k@*JLr:b6Z#9'Qc0_deUJhu"RV10IWc)B0iIe\n?3,s=sF;M2n9AegX]P'leY2FH-l-kJ%L
%\S0B(=r?>o'#I0>IHH@_^:KCp0htIk7M=6#:pinmdS1hA;/:b[#3!Db`5=GbBgi3"l&./cOU$2e@\J$j[7Jo!D9qkmLquiQQbmPu
%i[eGq^n>ERed'BA=>@H0iIe4O7(.8/`s3>[A=,g-MCCrD_,.DM56>ER%sEjB)U&0uplm]eVEt#-d8m[!50=dT6l:X:.&2mVC,\9N
%jI:uUdhXes'^tYQ)[ElC&E:7`?o/4:eZg[1T7B#NPUaqrG98q4C%p,qj/!$t7)NjP=D(?t6g,6E8kp76F@#Qm.?ol06>3rM#e/8O
%-:!;pqK4pQcH,f:))\HRL8\G/5[@3kJK#j=]euqeV9<.RPDl2T58K%J0%1H'Hb<kKMbFN:=ZDYj8tcr[0[N_7>A#!hC>f`aStTgR
%iUn3\c4SH+?E]%G>@5+qbR.hG(DQrqV]fBM7TBOJ3Q8u<^KP-Wq!bdf%tluQo%#fla7_nr@lu:bFO:@N-;Y[O[9roc:cu.olI!&K
%.o)O@G#hlIA!"u'cm]9)",m@liR'VG:7s;biIZ%o9aR"%i[1%q0LkP!I)ppMl02[8Yo:J_&T>1kk]$qs5e\X9-TYX?I(I!<_'0+=
%\HVi[#cc2a?sJVF)7RMBDM[;"TS*#n%a>DONl:m%b`DJtoC_6<P3g>S+Q"CA%u9KplABL^S5)!,do1@G>V=.os+.0fbS1X1O/p\s
%(`(/,M]."%""ZBel<kU1]D9,J,,5qkDAO\ElVl6q;;&uFPh%h2d=W&G&,n+\U$"U.<$GIR@^B2\.@U7e6^b7?pYbdT?J5KabC=[(
%"'n(s[\`9en1!9-Pi&ZCedK8?\M\GI:2l`Z[I/1>ob.[!cI1nPl&>OEckDk9'6PHKpKd#r8]m,Z\,t4FKSY$"b_Ho]+q7>kEg@7<
%%U$i*\93f6m:7]-;9?>7gUU^\)9*q'E$aJ^G;8mt(i^,Mqdg`'l,4UsJ,4kdm=%+BdX`o"mL0H=_q]C<Jg+q:HPYI@A8p5c7Z0o2
%D`CH<_BWZO!2$#`X<MhZWI(Kf6);LgOY[r]RON%7J<i5B=Yt5VG@^jA/D*,&#`pc1nhGfu/g04jj7ppSpit2`(Z+D&VA4f#6L4Q0
%UqEE0_Z=r],.qmpCVC;@/eBEu^M$hD-th7eQ9?`FnFtD5erpa2H5T<r_tgp=,cRtW!6BDDp;7IVWQb#S3op#<AlR62pO?AUcQD-Z
%P0YQ?D6G5t2cH12GKeS"d_IE$h$A"=rQT0a=isCtU)`'FO42tiL!0+",aabAr>D.=^)uH3(Q^sb;6F)c00"A2pVTD6(DI2^Ik8Ff
%UE81tT$_^a<Y_9u/#[h`<<?h`)6ii9eX#/8"KK75k^JpQa1$6e&X;/tqA5S+>/"u,^?]Z/nO-ep.d`ZS\YI[G,<@,u5K\CSa+H%W
%GMfU,AsX<"620I>0hAq(QqH`XgrVQhp1.:tpJtYKZ/BPt8cumRo7J5$`7^Fd98\.fh83aFmPJ6!k44W_-lrn?\0C[sH.J$)>juW(
%jFRf81i#7,qKj2l4-Kt8UU+5oOUV&aIQTqqK?WMeCHEJ-!qecQ^mbmaFHq=u#I+kjNpS_/nDaTCkFp7`kmU*p/-X?Bo`?cK;]-dX
%M9-`'#]Y!^HdZiokfXe7)=[Sa02uGLD;4"kG+$Ce[C_;N;!\7QV0(RbVb/*MNs%%+W!^.2pS,&Vo]%a&p8-](e>-.\BnBll!m\fB
%Yirr.?ZR;XJjtY8R;:f+!G1VZ$KQf6qBn*9e[s=t<K"?J`n2$MS!h];kP8F![3t"N>oGd\16j.BqHr"$(m8Pe;AX.&f55lmAW0E3
%]?Q6f)YRaa7`Js)>.]lhp(en[jFR)VM?#gAYPJ;YGH&h6i<d%N%sKj8+R*=/0bdI>FgB`?JA%#F]N+$r#`8*l>BiJt<\Vpl,hIL1
%[Hn'R8=L7)NMK6Yd4YY`#Gap$nYaE4[TS]fdaoZq+g!ZMBO6M<5.l#=-@XdqIqkDH$0p]e`iJ:VpQ)8%hcHe[gHnfnZCboL$*)d#
%9=3bM+&Js(:$V%"gRGIiXil[6aa"\_=b@:/_E2h_Xb:fW"eDt7.Ga^+/@,GUq]^+]bHf0MMKS/MK%aEubVM!>1F`IA^9d2[",#Bu
%m;CXR*B@2]V;VJI%hjqrfP)sCQJ)/Vl8$Ptl8%+41F:3YAXrG(9Or]rg_65O,K7V'P#f[sA"<5&(.9SD^+<N?F>OW$%8:chNVEE9
%(rYp8h+meF^P^-g`l7u1mn[>?B11O<Vb45C14A5]a7HTQ]"n`:>to9eG8N1I2K"!(N]=HGo%!8`hNh(JhTp&lW=tC4"n[Q.0X]O-
%CcoqUqnB5/[t0d5NO7'Ioe5-&02V-c3)3Y8@#j\/Ll=oWrq04>r6e`CI![i#mE:=fO!]>o]-osU9G6uPV5W)BpHHa6:'XAgEG"V:
%<=id7C<ufYSHqS:keQs^i(I4^o*%7V-/]O!2BE:*")]BS.g!Re:0h0Me#F(;qYA#!faiH&,?DdHgHC.`D[0SpK'X7R$'/Sl&@-,l
%@ikj.!piN)m"=QVEfi4(ojcj7dfNOh[j;W&JiIp)0oS@gSk+j!r)D$i2s*tk@)O$_&s>B#W.QO42:&RYR8OpcS`pTT62gWF/9j;q
%_400s>qaY0@?<TE<)eGSaE/uY"fMBFTs6&>X>hbh0R3bf-FlEp.M17r]<h/:H<C;lAf#BU.c>@PajXR([]4r;VdkmL2oVKP&F4En
%YTfkL,h46!p*%_E`i>6ukKjT!`GpO04%&9hA%[bd%/eikau1NIGM`I^0/CRl7?MtfL9Ub>hh+8DqF"`sL6IpZA%qgeA*1RfnJbg%
%34'AtN&&7#70U'JR:nE0Uh(?K]..]UnN7oZm=8j5n++,`kkaLUid:D,$iuE^r;OHC+hr?pBDE&"^Y]466i/^$So\_=;d''T:'og=
%EaQ4.#];YMNO3.a]EC/i4a'W[1:FNqh]L6o1PNu\3BWPCE/k+@p.r6Gc0TD%?lh!kkTF.cU28`l0g=JlR\CY0Z1[Ml_9n%>aoQpY
%I`"k2E1'"H@Bq7bl=B7pV`h-)c)!1hWSjH8Fr!32c]c5KF'Bau>9'N%<>7?\nPBp>5(09]SE8*^'F(=C1$hq&M\QW9@],)pAj4F5
%o?5.[C^g00kdU@/D8h55N!muu^gLk%-/b'$)R\LB<POoY4jX9h@<b3iPTSPOYN<+:H1UtkR9h^/ZhL-3FF>5N<BJ)D-d#(NB9$F4
%r>eio-)?/7B[!@g#NZRr[-5PRLr4]2!iG'ScqQ.!1Eil$d+Q-p(7f^=mDHm]$.t"mR*0[J_sWi^'jh?gOpN?4/r>DidZ$Bjg)EKk
%iD%CH,^LO=n9Y1!FPN-Grc87<R^$eX1bEP^gM7fg-u#t3fP_?RN4BncZ#(7ZqZke.)3CR(3+^=9=3qsG9'j_MD%=A939cnas*-fH
%<a?FE)qD2$MTj*#bk.S_P"gM59oAB$8uLZV2T&rTofC%K?H-EP"d-(pG<HP)OOfn71bcm;2r=E.0X]=M_W-)(IT&\YfPTt?W8jaS
%q<AHsJfFYJ?6MrX(!r:9*cn@.nUeF9'q%`J\h,n*b?lK?fdg?4-44r`$X!f"?fT@=`7LWPDI<(4'sH"FOE\]s:3A7@>4SBoI[fqg
%`QIR-&.qQ&ZfmD74mnX/mUgec$a^eif[2?.W_N+Vo>Wq-pD+J/LH!$i&&eV<C-;9)>2C-@FBa&LKLRa:5bMVk/01u\,sM6[YfSXP
%fZ'`l+"q=&6(3j2g-9PP]'gS"brlliKXaU)m1pHJ.<q<9Z\UtcjKHsWTfO%Z[Ort.1SFBNp#j]3OP_Q=)'e7R5d`K0d6!r`G?G8>
%e'jeD"5toT[C%m&In=,Q"=]B,0C&!@NJ`h(nOC7MCei[.BhI)B+]g+<#GYZ:6\prrnp8(;KUH>>Xc\YuIkI@.<[-F#=sG+R$K`$/
%EAElV2<7H)6u<Ag+B("]ZNU79=PJLr0n:_J&-T?^Jq>kFB=pRh9]qS/d$H&Q9!iO">0pCd'[ekL,HKO0-s]uYR:)1NYC]>?U!'$"
%m]S=lDX7gO=Kla<^>#:gK:s5%G8"s8q-DQlfNH;:C\hO^@_8)r9%=am=')tid^e\Tao[,^_59p*2SBjF\&DY"Qt(DfNg<Whnc&u@
%;L%ug9@1h4A8`guKu+Zaj,h(RVh/Qo,*2-2.0DpBC`7fTK>GsSW(q9I_h+o:!<3(j#L<)(0r0lT>]l"s[G2\AUeGCY7$/l955dBd
%CJb'L6CXlj%WI@F*k!P5GFj/\F&,.#Xh4$n(<"[uGEnJM<1;`]>)J4"^\-'9Cg#sW!6=3&N</$5E&,W"X@87fN2#0B&`t+_8ok+F
%f]f@Xb^rM"GqRMJP%k0nk)$J/_cpJtS2"V.5pYd7'`'[g':Yg3KNh$]b?S35GV^co$XZ`e/,"H\RO8Z.8f_odRdhrdQZBRGc)\(%
%[+7X?Gq#nm5L8'8#EM"$k&9E5$P8cEDS-#0K_,9K*N.<"JNS^*Bo)o&R##p:2J,AeLsAalN*,Jd.!V,-gFhYJS:TsBQa+g/X$l41
%"VQiKrj<>M#hgBUCmh/U&aT15F(H':?h=882Kfc4?;R">OU"dX0s-tGP;+c`Ndu!#@`8p+_DE8pFObT9jDs^JWnS+ff$,01j;S1J
%Rm8^E/Xa.740hfYos^=_Q7?rgbi+p.n/gV2OuHpKJctlV;Eh@6'Dtn8+E`;WdUD!W#/O8b>@:S4r"6$Ta=_]dWc!Cq'Pa`*mQ(@l
%Z"LHrh'"hti.SFhidtVM$bJ>u!Q,2+*riXh)N07Zo\6*2N3I`Nip`?d-rP*&E$8%l7M1L'HH&fCdE?>;D1O%CI6]c[YA&E8HB:'\
%L6&*6J)L)eMsOdqe[t0k3Di27[(\!M:DJf:*/asb+epu4#E9DdP/4O)]<4gtfC_0@r:eYm?jC:if#"S1>H"-<k"bPq7?O1t%VUMY
%)6Zf.oP%r%=b/3toG#A0<Vsnm"Yt-6lstqOh>@Ui+1uoadr,!b!C/YF&3VM):]#XDi!t5"6kODrepL\pbCf']qD*4(8+FIO4cU=c
%WS7U@&X<MD&tVs'2p_Y0m[F_8Y)CAY-kMupbnt#r.p6&d5fo"6g8G0S4]P!;?^A:g^8@OYJO>+i_i5`A'7+#`g'$"6Jb7ihH'%-H
%H3@eGWQ#d#KR:VYNl[IMWp0QrnW/WnY^YCIqGmJict8Gl-]fF.h&AFiO^defhubJt"YslkYtRCmijuOigs!=/rufEC'<ZuMR$rhN
%!fd0";@`uA+!(U[D--22WYL5S0N2^5oWJk[Ofa4mX`IaH8[la-@,;gk#*\S3k-f3Kl8lRViDTP6i/cf-fc&G&p^A4P`n6dGM12.)
%)UmOQ:ZcBR"uoKHZ8CemoWN,P'*Z9E4ga.%XG/\s"2a8&,Gp/DV=AuWS7;i&bk]]SSbkU'7%9OLj@6eZVd"r.-;M10iEIDrdDJ5?
%m8QJ$aTSlrG>:Jk"MtdHO]e4W5;l8`h%E)Q`f9s/0nF"T$-l"oUhKO-pE"F#isddk'Ws:(_ubm?!S4926Tip0/;5?;cm=F^<mWs?
%Z-.c.;H+dmT*4>D.pbES0(NS?lX^\3kh6Y6IlttWJ;ij`\;(:LVeYP1@I3L4#HoRg3VeuF'M7MrDKSKOfA;*Z%Ra,ul`'^hmX4K<
%r;7-p%Y-'$Y)eKR']+AP,sh^u]C42^"in0m;$DVQQKSO55q+^0'.8a)K#e.N/De$K`'0OZAaY7j1J!j7bS"2j\.^S;DbO/AngO8o
%0qAu?=V>*nNY")":K/a#N9=gh6)P8CP>VJ0aqC4]E]MP4\'@,f0^>fa9BJ9QR:\0]*dR6%+eYhpH[UKB-.$4ESIZghn`FNN'RPUI
%LsbeB7hC%8^"m[f1FA2K_*mZlZ%1!,BB!#&"BUBcN_7Bu)?=4nOh3?!_bt<!=TWpl(Ke5jc:lpcAdge64NkMOE"ZMiMG4Z+iS?g#
%^`lNg-Ud$TNUUBuq8uYs#`&WB9d9/m"h]gkK*jfj]%g,qn+N]pW=GK?O+jBm^+"tkeHC?r.4Pq/0u.H>3-Ro')i[A'5HV&oO)@NC
%E)*V*V`?,^0V`d1SgQV6J3MYS!1+aSF)jp7F1O``agf_H"e?]5;M:i6FGM;((L]l*AX_029$ToN6IG34o@CU171%ftC*7%]"su,3
%@EIO\B_`5I]qt5(R3*mjWDGk[m"dPA&&g?&"rR,jKXT*tEpOj"(<)=0kR:=F8<!X>_iDW5,=^_PVSMs>R6_/%A9f+:R6Zj,gQkSW
%!WB>@jQ'`_esmZ,iLE/@T=-S(;%2-CaSZdI'%%koi;E3rb%F4FQr>E&2%)jr6dAm@TBtgH@PH^!]^!jZqK<C-$.=$C#9C^ps!/f:
%"`ufsSS;a,?A;SupYm4c@)ZIipU6Pugr,XmA.*o'.X6jXP1qc$N-$?R&9%)K7<U'UefP)%H7]PB!:UQ1c!D;8Z\bY!%>jhZ]dUmm
%07$GgXRRmi"@2tA._d_L7*"f4+/`$;EC0Xn&!>dYlg)*L-kqC'2?H><=a%Dl*Z*W(5T>UY(V&Ro(L/0TeH1\j$P+An'YdEWFXMu0
%b3]J,jueN;WB2QhnX,aQ64f\T':]^r7JU37$?JMkKm/ZrB,1R;e0^N`!49&IAs5PT2#FD!&'O0%^<-ZK@9H&)nsWQ!1oS80ipJPL
%HUHXeA;3S#j.?gE;i;\^U'Ee3-Uu&sQr"GEmT_6V$EPsMVb8IXSQ@V#EC"k&kMV130K2UEh32%6$-OD<IEM]s1WOc"pFWg4s25gr
%cYcec+ajE!;PTappZ?AAo0hg#!U+PG$:)=J@X\<.D1L3YGt*p3c_'Cl,_Os?<87Ku$tDY<=U5X.VH/5R;%Q0SEO7gJ>u%[.AajkV
%$19F=nXYc&-P0,9?gIIn8=FuVe_T]^Y=5^!nq7=DcMR;T,p3g's#4PsA]pHnOV;*AN.Ie=4'="cda6Td%[eG"A-pP@-m[%PoY/\$
%<o`DX>g\!:E3A`UT?a^9o>B`(a!Q,RWlGs,#UI>6O?EkcDE:^RDb<lhCg>AV\T(&jA*81(QeOiJn8mWD29KOR"C^gU[F8s'+>Wco
%c?`ER2_?Q(p*2b$Zp=ua1nr3U&r9SSi,"V#M,qB6ma3$dZqK0M/5:('\(bVo!sDnr%8PFeZrdU*EfU'5%[dg<)j2>Rahu2h#bhBh
%H-sKR#Lrkk2fB'/N2hi'`iH8Z!#CBN7"TJs+L;[9=_%DlqeEfR+.-5;G:Nf:*#G^P;j&8t&I8rjHdJG$WTBqX!cG46Bn?9K3pkV?
%Z(X\3"Q>eVDVl_$'7hE3%`1nbfuE*o^ZOV?@'b)<61?cronW-KIQ`*fooQjIZE%SC^cAfW$kaQBjGEu_\V1oAP/&550hS7aCHrI0
%JeO(l+/7ntR.\S4M+5`FdI%S;f"EHUb_:+'?UMR8l?aFm^\d:<5ZKh[BLm'nGdW1D'kI:=Z4B@\_[0ddN&?cm5dq.4S?.k%cA7G_
%"PH"521a]FIY%?"+U!$(j-)J8[s'<J1:pIf&=DL\op5^9[om#=^g.+VjBj.-B*?)i^'0-1njG0X,!.WlVQLn=fhHXA8Q-K4M>>dM
%8%pP<_*Et+ALSJ92'3uB5*4]"Kj,gf3>cQ,?6p_XF(0-bQ>4a=4B"NLfO)p'39)%!$oNs&Msu:aIn6#Y<YlV:g<WB/!"pt^pY+l^
%dZB7Fo'^KM^]`g[d(L?D&pbQZLu9mT8PC8_)KYZV]7S`"jB4rFjs(50kZElF#_MdDDI4$5)S$n/"O"F]('i:([ToX;B39]/DP)d4
%UVJ6[Y1GqR'qHk/@&#r1Xs_lOO\-nN>U$I1",msW-,h'XgIf1:)IYSR_Qqbt(jd%H<c*.qLtO)$?b%_[72,foR@,b,S3V1>,rdjE
%O;+1-e>IY?Zmpu&GG_=J%_At]]PZ!#>d>to=hUVol^Sjf6=H7;I"_PfdheaU12tel$H$ZUk0,U4bX<.S!n#^7S;dkIg$k?rjV`-V
%Mk!OeA)38YoiJs>8q"23?XUa'@Jpe.5Q?1qq._Lr_)Qi9j[tl4S5N$AFm&r4-2X(WU=N"+Da4WSMpd%-RSAe9\0^g]h5b"46UJSg
%MK*krDbY+fK#i]Q0G`OMC?$e)=JYFD)k\\#"-bV=I>CiW^*1I+?e;9-F!AC_m9V,+p,H^%8KR=M$O<G52P'&`a;>.!k,AnL-ZN*6
%1Hh0AKkAM<VS@9C8Ms7\dUECg3iom\:F2@I":MMuh))2lRnMf]hY\[)O35X/E\Fm0We(P/-h*u6.?H8L2bsSTiJk&cW%[XP)"[/;
%UjO5Yi'%eGBO76d-b?kjM[`_BL7cl#_MWk6n,SZ5REd;[?u%h,XjF3loTi&SGnR1Wp<1ld2f$cKe3Mr8,lR'O,XsA`"gig?RmB@S
%Urfd/&'#b;<P8_kf4Ha-@QN/Tnlnil$Le+[.J+gA+Yba_!KlLTa\3=u.scEg7"WJe1W6/hS//<78$i]QSD3U4r0kq[F*.YBI[heA
%.s>uI&O`(Oi+4X_.B:^Q`n;>%pqs@_Na7Pd/Di9h;cFr%!!,R,VPn>/CEFYL)#WC<bUI>/10'SY*=3o?j*9GsY-G7=c[hT-1^P[6
%nYDRl>!;gh+UEb0dKO&c\(;]?.$ie]jH#teQCV_N=3`&%#d?_hO4\7]0P4F;_ncKQ2uo=P7$'HHCY9MSG<a;b[%Ch<pS597m>^@V
%n@I9:0qhu&9fb,S'1!PD[Z/m@[n"tKmXI8qFja%g:D5]me$$2_?3kB;#M#fH77B$d%lIn%KeT`CF+]k<kRU_+!mTUE%R>NU@<$ip
%#,a<aHZ(<UqIsRo^\Ed-H$?GJ,#G-'*jD6T^j&X:rk4d=,n]8mZudf"U4&tZ8qOJk9I!^!6s(TSjLZ*n>QX^_]=W"afuPdsn)Kmb
%n$EXr$,VN9BrFf#$,28VZ4V^R5/rRrbqFa8E7fps83GQs%EjTTiZtm,FNtk/'C88>a8D/8JM^mjV:"rif=[,??!?,H8/M3&\U;+0
%`$l*q3p9[L2hj,ii`=3m]5'$Bfn:lmDnq/\`AZ%S0fS&ZA.K="2rPGcqo7Ca,+Gfa_#gnB7R5aU2(tU&Dm8oiId];eMA8OV9S0a9
%fVGHmZ\PMR;FgLLYgW0<`MSDkM@)ae$nrSX7:kLdqe-'ST-=dg7$TMHb/EcUl#n'$]HHbk'(eO9,gCC!5"$GVaPg>U/Tc7`<lt_:
%5CA!f<A#]RrRSTYUPHtp#)S@7W-Do(5t<fF2T,&,8YWauIR&t;4>_S?f#V<a(:<iW"Wjc;0Q0M#f5A?l+^1gqDh4T]%ZG"\,rA4K
%E&C71UkLAf+q)^?Kar/4j%fc2%0RP&7+tru<^&%)#_!+d$9>2o*2tU'#m7@3!:t@81\#1:'-.`Vf9)M3rVcKpj:NU')Z@B4gF<mn
%h:h=2/+0U^)E40`$L)LT$L@DFE=6c*&M6fijYq.3_f6nCfhu^84c^0`B`^l6K$O(d\Eq1MDkEnC?8M(!YS85^G/dF,imZ)l[m-Pl
%$lm<LTf>a`#;V=Cn]h&Ia+dC6LlZE]:Ee&HN6V`ehi<mBd^H`4"=W<i)YU"2"i3usCu#^E7(KG2VcQJ(8?*DH[Vs&oB*`AH!iIb1
%M:#PO:dK):3DV44'+_6i$@.TsQaQWAk3)2HKdE-IAeU=\P.t#hY\\CHII[L*'#&5CZT!53"YYn2SI5QI9ubIom3gBn`DJVWN=k^`
%CZdEY`lST\,YPq'd'C8c6?^^PH1]I#G>e@)XSEXqKeP'3E-&EdXGXjsUGb:Bc`;:_#:eSl1B"LeSIg5XMK2UJ8O;E#4;Vu=8\Kt4
%R2#Wg,-IOro;(4Ln[HmE/`k'W_<Jr^[]tVG'l/ZSq;$4`>DNMB_Alj(qDB?l?d.D'.pR;:*?chXPI9nlU*oLLml#H\`E+.QCH7^=
%7"/r6)#_(4En/VqMmS.J#muOnch3U`\il.O>"=$h"a]d7>]q<e^%KtF0)=%Z1&L0XE5NXnimp$8H?a$1cI*1I\jAG^'"ohXVi!Pf
%4/^Zqd#TV.[aLLoA083q,?(*t\iLIp%2<g0NOSmNSIITMaBX/.:qZ7US?tNtR:X\mU6dMXOrTgSZ''?gQtRN+U=:&8mh#D]"MeK^
%p2a#u"J396K*V;3%,&X<2]eHRIV":/_9EWB!ShTDLQ$^"<2SA\$nF,jNA`;O1ITXF]\2SppljGB!iAc3h1HL'K^`2*=*7:'M)MmA
%(#r8;E=1ruPc,[1,&SHA;QlUE'tRmeG*[a(>NigBDjQ)Hc$dk+2@o\`d$?HfMc\A>)8>cJ5,1;3^)q!JCc^#&\OZ.X>UP<G6n>@A
%>H>&N-mTm*:g`N<c?BDn2n'8*e:D!\/I8Y<\hE%UdWuRd#,\oo``mq6[6\_9EKrW/DN#dS$]#%qjie^JO"gm\ZhTJGPu5cSm2B3n
%61`>+<$gmdVr.<'HL;l/:5d.jkWgbI$Q)/.OhG)P.<96T`TM2D[>q"#3S4_gHS`V;nAp@-mD8lj0jn`)JZ:AKrFmkA<i]CoKC9B?
%NG!AXO9Y(`VZift\pGkU\qA_4/Hr2;a!fFhq[%b1*")'!7)'JU&2E"p[iMOR:Zk5erV^8qpjg5RB=CQWk]u-AG;>XXD:;0?%ZBo^
%I@G,_0X'fN4ME)GUgfR^1`KCt9i,LkS7OROWC76ZbF[_l+9O$pKjZ+@/oNQLB1&9A0b^gee*mTQlpP].o*utZERRep1hXEEq'ddE
%o5rO15tb0I*D;aNLduF_IBtbO+&P!s\C3;:2Q<B:K_pJ:S"HF-/c?E<9/3ncI#IBtA6=`3C;c?#TpGY-l7,$%q'hq5PlOu^qE]Kq
%a4c;mR6opYJqI,JfN$]`#kQ83#"9L5TI!,&/,ABg';02jQu6Nc8)VgHbPr[:Bt&*+E$!TT6QZC6FUg4s.F_U&)N[0^0#mD^]uNJ8
%V]nflD`rJ0''%OMHEcNFZ++_?U7aQdK16ts`>:e:@Qj)J^!)lN/otne_)A9*F;6K)W/[%)+&LT2NEQ_gmPcN6F[YNd$]]*0SnJKM
%\f#n<540GpW([\krnTd-,H?q;>2;s=hIfe6O:-u[pjfs@>+s,=YUdWtV(__JAQH^=]e#[kC/3ssJ6Y8K1X;jA_Ii\Zl.Yo<;!AUI
%mG.%+)*P*.Ke>/?Xq8.;iM2$e4Pnt_=hQ'O/P+#Ul@4@k+5)<CO<QMG:mda3bN"qm"U,?f>sSPgCX/B^1;7W'AA]RDFP(frAiUth
%,6)H3TZM?j+I'k_mf<?MceB/Of2\1oV%q/X8Dq368K7H@Qq]6LZ+*A)P=Rb':IH5%Y^)=Rpm_3F(5&8fTB>a'.Z,q_qE;_7Og,(Y
%[=?G0+1I'Ak]$r9Z\4hZ_mBfa5J\P[G]]u%r"`%VJX!ueT4-nC'=0[ff4)81=b6ARNlYrG,"6YJJ;@n="Nhp6R&Mb,/)V$ZP8sH3
%lo]IO-DPY@b]f.'2]WeiGX:g;Mg*!+V[ds)hr[t0T43CF`5MrHaW<:prc8+:RbQ]nfbR?0]7LZA[Q1!&OC$tV>LS2Fb'S-fD;FW4
%$GfL#1k:10J#<4/dW,V"7nW,0d\Ml2c9>C=9g'7?M(n0@c@0+GY"hNV,cEr[<#fquJeMDSFm-l%[2C<g"n1]BSDk10H4u8BVRYj0
%>CRae"QLErT9DZW@,Er;F7:/=7^!cpDUIq/Ou:]c;'7PFc0,6qG<:ic0tS7.QQN,hYM.H\Z.-iKr+3Y!B[MK/`P$oG%=TDNEEOXX
%X!9(t``gPW>]*K$Hl6@/--nrOD6e]sP#4X<b62h)TC.A]>-@$'KR/ntSdX=C4UtjeMIG(fKFa_1`XJu]6YsGpo7VQDZ@YJL;XX7R
%K,N*'GGJ%FZ_6o:UpTsF*kneY#]14r^8L(`6V_FNT`QOH;S2=ShDZXE'%&?s6.l&W6=bYH#aS)"P!_GL.7+7s/N@g5M7A)%O\!uk
%-fS_[*]fe6!V)I7`tFe59C^NJ&TQsk&r)-f5<*Alp#hC/r*8u=d"d1sr!sI8HIfh2RH\fUh%rr7@#'A=><,h._6S3i6S6Q0"ukSR
%i+:F9QkLH`<q>efEdME$5]DcZ&A@@,$L1T<^-qJ_\G^X%ZFB`tmauM>Kc1Z:1b<L>0&QA$Ok\_8<1m"U3dElebo@D$7$qqum=*q'
%jMu-qoIS0p*CP9,"XP;A#rm)1hO*5Va_#aaQeoLHQ`BML.>J)i:m'o>8HDkfY[bsj\@oe</J7ArK&&OY;A9sT&X&S?:4srUHdt]m
%R4B[R#pR%nE&K79c,RNmn_jb*+kqhGiAaM?)+KRG1LiMITJ3-ak$>Mg6[W%>/5%OEgEshQi$!3sHS7Zi/8qk?s1&]L#X=U2kF#JQ
%AJM*BN4\oh#l[81COtOrS&fWRJn"M\SDs$f\p2h+n9,ROgj;,]a:P"IR4RT3aQlE1.n$B+Q'Wo0k<ZBud(uuc!e"5,r*^Cf')XRS
%9,Au*`?UBG+Yr['qQ\+<)Q'@h3<RX-<bbVH4O'#!p;[6D-OOceB!M_Wq'"Y0\6d\UY8A@/+jL=G;f#`9pcBI^%o6n^6)73]_Gg:t
%r@,prghESpYrco.l:XDg(TseuJTN:QS]qgfd>,3V52FZFD+AnePT#TGbIEC1.,F4k70o9k'&^*7%7,j?,<Dd6.$e'5$UHXp8_taZ
%>\(XNe2Ri@kAR-0KA#\f@mht.c:d4=2J9`1Nn<=TU]@qB**<s^o/PH\F3L^'.sf(_]5fWK$aW*A%rWGj=f3Q]6@p`rbm9PBR5@D[
%KHOHE49kFhiH![=jULDj?u+a0RV?:d!^#cD1@u7V628_X6UgX#dgF"@+HG6.!eJ4%\*KBTfY-#<O,1t4q=_r'lBZoO,]5SSS76EF
%<B5ps;VK[&l]tC8TPTmf<sEY>EF;I14IFXa&:]%:X_U4UKV%#`G?gY)3Z<iE"&iHHj/p'lb@KK^>fhdrn&mAkh6Y!(MCTp:Sof.K
%q]u<kSW=i3b@[`C`_RJa*[%n04?m6T4W%g;)9=rV$Md/Z%%;1N*AI^l5u;^N)^(5E&qT7-3B"C%R?eA_0At?iJ7p"7+5f]*)tL^;
%\i:88OrF=,UW7OVf0o/1C;s".+jp`?Uf*]/QT\2:)?+8]]LKf>_AtB2n8ZGJjrF1'rE(2OD*:e$Hi?C.2$!l9,/quDrE-l87!I\\
%(MWC[h`nV'P5HgM/\jGul*,d\fN_c'`ES4&fDb,qWa-3NPb=q"Z`5iE<:?]DRLhPKeb!#V.St3E$#p:9?mP%)'5=cdn%F-O,1PU.
%AZ0oJ^pIMYBbP#t0Ct2ab_98_b!\<UQJ9P:XNrU[OID6Ea_V,phZ6`$,J#J7gR$@uqhu\LR?<\rUY'gjnb.YscrAIf_D8Y2a5t=i
%.ngX;*U6@Sb(RS!:S/*l/Rn:@(D3-"?5HuZE9AiemLMsVK!]m\VNuk3S_Wta^KA=A"tg=M(<(KRIkAVbP8@#rHCjR*18$H_)o5]g
%DX)X2+!lZrij^cajup$1oYsmNF&$#@rcij]a*F=KJ))]U:-u1'>mbutRDRU_V]-AL].n8"h$f#U6lu:aW_f$Ad;PLMrm_K'ZmL##
%)>O:P1XrN*Sc;eYSSj=*T:ck76p!QDQkY2_`0_Wb\pd_7A<%!VVfGCfq>S)\A1*MSP(q,N-trS1%ft(sf)#<!2_5(5AX`h`"fD;E
%_VEC0.nt4EUb;;`2-I/Q%$d-?e='dP/u:uYhYR(je92[[R1tjY5,[4-iAud3T'3min00"OJ3<Sf2TK^>;&hY2:eq@d*9%fZSGH+p
%$1jNM'f"mJY7U8o*HodTMI6[Zc6<a<J"T>pH7/@F4lKAdJdAfiN2IgO+g"hm@U<1B_c<+G((AlM_"^S?J;VOt\PM>qbD:e5)U$E)
%)?gK(HR7!*6J_"W,S`UkV\<Goc847;YS/8Q.lX*8G"XYcOq_f__"7Ym,_``O^F(iP<$^tugh,.&-aZuf4[GOucrqT;i-s?4NE[=s
%j;<5a^i2`;%!I!c3ZN"n:7/l\5+G[7E^^NH2WU(=X2#AG*6]lu$C#PrY>"!!r)&g\2Gie]bc:CGlKCW:^(7.LJ-G:'b=D1+LRdQ#
%CLE46MKPSRq^!RP360r@UC`B\SqedmQn+:)>o-_=#E(3,6[ii7(Hajd=9foiY3Q>cp)(fm8]I/;BsYjOU17aSI$c45@(5_2\M%HV
%#AUCAfEb5VO;OS$c$b:QrbV`MjdPgr.`U5OVq*CPEM<^9)/1us^<@6D;2'+M8[KVA'O+7g47.WsofD_TF/n^+;@nu1[!JW0JTQfA
%F>ct675s*"CR_b]f%h%ulTe-CqM4hdBPmrVAlGGLpakD9H@s"=WHU\p5X`HT?\f@dl:j)RR,YCjDuG*q"bZio1,G97EaAT(N=flE
%N@kC,#qh]XImg-?pg@$s>@Bi_[U"k#e@?:Kgs,IV1`W;>e1=NPIiBeF'fK,]\@?O9eCKq3-fiV:S+"3#6G9TFQO$5P.M]0k<#O#4
%c<T=1m)[QSLu+k2mE@ufAQ_GQh;H,&@)gWrW#R>oIBeepUREVJ$1%'3%965i!.T'in33PbXJuV-C+^68p:=Y0MIiMoViLA#7V>VH
%?lnlmn1\jr<isUD7%6V5]2n'gAg'u!>P:tm;D`:Qk5snt8/)rn0;EK,E<TKhNd[=Y%fKM,NEY(?nAZ4@=MuM]od1Rd$uss[\,JQs
%'dLIIDGs5tJPgu]m"D>S$#f(lJNoc\LEtdT[G*"IPJ&?d$VRgsJ[[NA*hUsRTZJlU+:unFFt+a,"$N&)S/k2bS9M=HI2T*^:9Ke^
%K98ONiK2r>1X?V/;NlPm:c&c(R!,CmTL`esS9P\$6&\3s3:DUKZ"eN9S.HG`BY'580*StCO('=rT_8s'`0[>O;"-6PYXf^#I=`P.
%Wh%LtZ'^K4^9o*9)]?SViWRD==7Ere:THhg%=CH:dm__+cM!fcJoe\1cDuWDH0`u;i`uOc3bIu\P+>kQ9]gr%n/@MG34J2NkS*o<
%`MLh]nT/;r_)*Mg0'h2a;P4[<;BAZu6nqX&1^_<&nKikc%%NT^]jW5IZ2II1NQ+g[IBX1u.N%.XkQ*ILSWs8N!^9Jkiurb`6HoFP
%fE2,7H`jU[U=4I1rj7<W;G7[6.W[fEGl[5R!3H<"!<u;_qpL(lUpYjS19W*[3]79@Bn0<8KbjZL`WST@BseUp4lX`mFt)&q4G4Y.
%-5R5nTNE]n;SHCs\=ussm!F)1DUPno^C:mVVbZM"".FSi?RLu1&gYhZ:%)H:-ckj/k2?/Q"?/7dG,"IU*9RpQN&r1iqZ=m>:[g7U
%PXt*r>E!AV%WUaiei>0=2QFskeV,u6ACW%eS!VR/'5tS_$+A7W[D<Nb3Sin9Y!7b0j349Tmp[7;MT?c1&H7%VLa]bjQ@:@ugEG1o
%m`/N!!aj';Z385e"n[P'UhK[Q0CtDJRjokVGgkK-n0G4F7Q:o2LM(d\i!++hX,r,[Q64m%oL(OS;H@58A+FS&.UX0J)ca-nD.-gB
%)B<_$L8f:"6HmUT*To`\lgqb0Alt,VZ:3ra@_:HZ^8ViYYi>t-%`%hVTU=mNfr#EsreK9b2HpgT\^3GN.^FiJ5m%[%(1s*H"DMak
%F3`jlN"`c:B26?Y[iq#PNW[_$ln:re0qlYEm[7n25G=>(-,ALC&?7d7]fSMnPNu3]pt$@J*J;$GG+:hcDT_--B&@$g_Y5IJJDU`j
%o46m($":#\IQ`>So=%#7EEbb!OgFTc<"JjB*EV1n;_LGO/[WtdH0r7p?h&T`>B*$O.!#_>0Q^P.WhACc5PB4@_uV#`jkr]kTeGS,
%nFLH9K$]i<aPQX)q9DAr]qt@bpF,eIC4@\ac*s4@j1%fh$;FOMO3oCMoV*'gUbPhZCJsIdI[gJ4F+Qom;8'1%P8^L>3m6=/I(4"S
%R,R=PAdFLAo!ZUiW)75e7`6QB"P2#U%Nf*@$QUW_aL?=!<8cNdk0ntp-@DQ7ZWSDkAk@Bg@&'urYU!A!7N$^LP5FYb]P\,N,R=Jc
%Dn6Sc3LV6h&-u-Nq]ugN'.DmbFtHdgi#&5eO:9+]io]2J;HTBKW^*>uFA1-?@dWecDu3FkS\OCUB(M!]rl3e$V]!(d#'qF,\FrQ<
%jDl!BQs5\<\F`*^r7Bg0[QR@WgJA$R>7OkRk]eXpPm\IqH/,O`r19!7(0mUQ"n<(;QKAs#n$bFqY0)Sa?IK/ka0!%m226Dr#8%nE
%mPdG)e)[Ek*t!g.5*DNEFSM=oTIjjCfoh>PoSJ#I$4HEZ\-S`B$BXQU\GX)"0mW2ZdIHn!q0eqh^\'6.liTAkVq(t%Wj,!%o'h*J
%Sb`dB1p;=$X!%WsBOQdTUQPf+nEji$b`cm`PAi91Vb(tE0ko,^.tj2.Z..Y<8t3gu&<Y_Do19&Q(s?ST_$_DfL"/p(e%"DeR<fUf
%QoplpIoeZJhcRprCY:E\r:+]S+U8so<i1;F(@8&_DWZLVDR^<n0H%dY;9f_CpsYYs,g0KL'!R2!KX=oKUO=:<3q:Wu]05G<fM!IX
%]3OJG.[P71=H$a%JXT^Ef%W<Q>htk*k4*nQg.?JjLOPPu9,<IF8Ve$Nl4nD!0Z?I>hY[2Gfu8B=*V0SV:U8S1AgoS[%"[d^Ro2pc
%1d@JZ+Q$7b,#L%Z*S3-X$C!Se6)Wg5`48H.W_LYERV*cW=Ub:LHr63Y:8!e22L(K7KohF`F)O'bK&6rl<OXjCrLk4#X6p!W:)U9j
%IiI9]YGT9`6q%0OHPdgu#sI+jRW5R$o-A]KpWEht^Q#gJ2hf((WY2VXcfgl?hiEu`qsgpD-59T#':&5H/JJ7<diqYuH&/tU'@l?7
%=&rHA=YSE&L_E>E9f*cUih@C\rV`tI/;5`Jl'^=uj9M%kq^q$@;=JW!6)2`Ded+i^)e6@mn;%s(m>/?_(QLjI2SmC=lrXVGa\X\0
%1&U:iV^;`#<f=g_1c+Th!MV#UonZHlU4s'B\&BaORIqpA"RPgR@-lkbo,gd;140/;m2C0bl5smS5=FS?7?!rjFr2#R`]j<O54V)W
%GFl&F%&>4YU1<eGrq'6)oXpU;:k-)99.%o0pMq4TZooCH\#&5;#D<,u`k8#^<Hn=Wd`-JJV`4`okcTMPX(S9T3>(KLJqEKupUCW7
%(8MJ>9'B\+;mbAPeL6l?YjPDu>oHMIJpP*%&eka:OecB%m^WOAAC3Fga=9rgQVJ`3*`L5B@=`kXMHRJ+GD$=`eL0u!)ZKBFpk5LI
%o>,+45hs?6=\O;EN8g/5q[GL=oo,o(0]@FFQi>jS\9n?2@l=o%QV)((M9qU6SGs(K2GOg_N_eOD-;pE1;Lcc(40of90?EMg%Ro3-
%Ek:He`)OHT.n`10hQt;#L'bug1qEF1l'0aN;,B782IciO:%]A=$,On>bIC^!p9,LFF>?Q)bV$oNMKqiIO+^n2mc3,9HZ#R5&S7at
%I%.QMFkNr=qQU.r+Kp&+AGGD3W]5R*hE\Du+\oW=emH0'bGXs3J*e[C2QobMYfH+lcitq`%8&GqPiAE\h-mTTUd&9+#q:[X<.$Eu
%\-];1-5m>`ihRN3rI(uc_K669"KW1[[1*BoehAlTrsQ/50[U<t(+5X3!o<)tH"fQB?'6Zm+D<&+C+kqfZ(*KhOQt8M;8>&?F)p0_
%2_BP%po0mO^Kc]Ue_*Y4BrM^Gb6%GIJ'>gd6+e*JVj"DO`XYe<W,_t7i;kb,IVQ+nVuhSYdnLsRb%QA<bhupI1^[[I-i1NL\;VRC
%\3_!F!i_34?G/:rY6'F4ls>_f\m1R6d$K$L:)#)4F_a:M#*D+W3OQYhq<$+k^![H;Wf.*P?uf@7r?JmEB[1o'!M)%9qgDAbG*X3V
%mU`3]!9Yo(0EX_[*CeM?*J@ir$L,2/']E&7gm1AI>#@b]F"TMh?XeMg>3_Jmf-r3nX]3Y\h38[<=M+C5EZ#8rWa52^0OaM?Jr1ls
%^)7_7c6Fb&rB?&iSjE>N5)C^06#ckj\,ZI$B.f^0)7p7e@uERi%%qRh68H>2IaCp*7"kg>]n!$BHLb,1cMRNk+s,li<g`KqdRTtQ
%cFl!Ih$rh(]tSmS]6TG+5T-ip)\+'jpD)CRi:5i)nck[^&RLcJp#%\KUVM8%&"c\RKsX^kh>LN[f$-1n@M?Bd2gBYpH*LF!)C==o
%XPl8l_Ou(XAk&m9qQXaW(qE`aKOYkF`/kaj<gmDQ/qddPhYR*4.Q$SOq``UF>dJl\Pd`<hmc4q3m4;W\M@oG`$C(ELS\5X;>Atgd
%e:_dUD'!V*A49o%ht_(NG?^n?_;U5>)VGFU52=+D-*r]2CPNnp0ES2bObi!uJJI3h:,0i?_qYJofgL9?W2&20Z('r@?bq52_]9,d
%Z\rpqr<'MHEc$8nbLL%5cpYVbP^2'BdOW[UcV'5bN-%`Mh%U$mB#77*bPZ!"=tBcS6HrWH'ZpLcPq`2W3EQF7UC"h*8)Y!B,2ou?
%ooH%I_=,F$.;+ro.:h9rkY4[Gq^L0WO(2PbK[oNf6tSo?RjHl#8T^+b7Y%"`Nr3!Y&?g/31'2.D:Q_JMeu>UW9uKI*hR]+J(eVWM
%/YDHT6/*!^9QG?,#)gmPIBUD87-,Z2G!7hVc_u<RpX\']*'Lk4q*4o*5QC3PrSRY@s3n<!A&'q#Ma=&jNoI$gZ2<!&TD6.:Y6t$\
%!Fk?t-fk^3",fN"31*%*,[/,-=RhYa[UFd]nW:)8Pk%]h=70PNRo6><9,eS+#)h.#g;>oJBYJ$Q4.LqmdoC7@F8%e^'-A@bf=-=k
%'^<+e/E"rG_)KQ#]8/Vk<;=n]#u\Wc);W/5(uB4ta<8GOW,5?n)D#@(CCfIpFN<.E8YEM13t/Wr7pYX^BkObsl+!-uLYco2c*j:B
%he""k(\T+VG"I5!*J\nQN(59_lrb$o#GWMoN7,e9$ti-/RN-<@p^hDBQRaFu@Vp<.r:4p)S@RnX_Cp!SlUA#5mg8$(c!6>k:;>W.
%3VEQQ+=p\#_b&7nUSe@JNP(ocF.k>PL78i+YIgE^KGbm4:SV\]oDa?aAgp+Dl+Wh+YQPH-FFAPAF"[pVT^T-FketP9HgHX+8#+qd
%lo,\=/lQ^pWF/f46rA1FOtQuQ\X:8n0c1'[Qq=]l'ICL1-f,%t1G_iSL3LXOQeDVGjtNn]iQmMZXL1i_[5W/J>)M29J>Gdl,d\o9
%$.acfO(+&gR8P'Fi5=%/fPE`WQE5o!?gu2^-TIDm6SoWD1j*g@![G_8QYA30:(sFD^\4KP]X7Ugc28^b=^DhD%72,=O"L2giGU>2
%A<XA2Krb<o?6fWfB(.)8Aqqg["R(P7n8=nqgW&@@3c('Vd*Ch/@MkHK:paQakcoGX"AH"lD[M`%3%g;He1iCqUT==H"NPu(Dao>[
%7:i5cRI@c9ZHGU`gogBG.q-*&>I,L,G"**_E/hfA?J7>(CEOU2O8`%e:Z?U6/"dB7ia^jKCZ-bOS$%!QK7bL:)OuMfB.<Lj&8[<0
%f$.*^$hO)rB%eAD!RO6hI%<ZgbJJ@[$hK1V2N.!p$;Eqr-JO-h]-UQd7#j2^;Vs%543!mc6_gT%-q(fDh*qRKeP_Hh"aABknb[nR
%bM\(ZFSfr[4j8%f93Sb(a8D_eqHPTZ_PUL;Ob-`tr3`2hS9g=-S(ma:\RRji1G@H"7AW3lnu_'c=+Qj2<c^is_qr*J'^BmD'`05?
%7To#CmFpnFh[_*R"m-E.bhuN66CNF?hje+,1$!<f)!$h0M<p=_U,h"fll'R\/2W6^`7^8M7BeMO(ps3N)']3;"3Y@e*J\>bUAYNu
%NDM6,KXLU+4g?)%B].!5V!)ph'Tn8Em/k0O*sl)<96'^T&@XV[9S*t_cVnn#k&.`FVpi-]#'U)mKIkbel+"JZCZA1Xl\([(ca&H3
%L4jqN>fR=qJ0gtC-H@aJj!&,PDYTsd,?PXS_W1FfO'd/66FuiL";ZQ:fed2X]cB(3UYU_J[LBH$RHf$B$k.L??500C")"7`\Rn\e
%S524%U$%(DFMWiG[-,a=*bQTn'<"GIibcK,p5.bkbj>%$nr.:hmrmlC=A#<2]BL_XT78cdpB<`4b2W\uf4K6XrNKM?2Jlo>g24#:
%/P<0&><*j)0c_*^iRp:6@uJE?RAQ;(*FnKbcmU@a$Bae*\%P>!+"qDq!taGJB2KB0rQXe0j8.=l"L_^Lp]Nc4V41)1)?Ik2Aa);M
%A,B-t^.-M)0FJht&?2%749A#?;e5O`XlBr(F,/@#dn>]1o!%2IfU`seAFIhN@t,QW^hf5;hTaW17')/L/7GZ4V@Y1]$PV"oKO\Tf
%n-CJ!cpjlA`?@%/;<-#+Y\&PuppIoXAp^.B7%>*sm998&IOndk<Ocg8dI-fDWF%VN/)PP)YIE>g\Z9_MkqGj,qg%g%Itlo+d>2o+
%pBBund<:VF>LFId`a`>GAJcFt=3eAP9$r&60,'J"aZq?BpT6mF"jX`HO6@F1/e*f7d\.6JhY2g$G9Hu>,FKH*[mJ:;];">VI!A,2
%EFdo[[Q]>R[9Q2uI=[cRlpW!m'lY7D`-jtc>qWtaco!rcZ"9-1QI#RS)PMfX!aTC[L)5B5S*BGqdQq:d6oI?nl+OlI8D_.4n67kR
%186'&,'WkeX_!A'8Epq32@uiuksgilGlJ7oZs7"qZI,&&Iol7r.mCp+"(jX!5E+c[oOpQU5/-[XP(KU$[o/_]3g,>[G:N15WOQ^-
%j0`3KIXGaQ"(spa`YA1(hhSaH[d$8=3d2=`q#m_UE\lhR1Fi"'n@a^[m0@`qd,"N\':Q8:+DU/ZdZ)RZ`knoQHP)H/U$TCc52?Pc
%<fg*;-Y5U93po2Tln-:U`"]4LE&S6:L_E>E'm)>F?;r`rAN/J\KZmcPDbb^AHPQ5<7PV9``2&V=am@"Ap==@]@l1W(=UYZ%81*WN
%9uZq(e9Z30C'15=FsFr=p%R_3#9aWci>km91Xb-Xk6k)XHUTUZ;8qK!lCk7/g(F5&Mbua`LCQZ!M/I\lJG"]&j41H!OqOJ('qCdj
%JR[=W5bDIr#f\*cLSNu=$?U*eA%[pJI)CZ-&5IR;#ODX$@2LNm*"YW+"lUc\.IFL`9gPdB-2C1=O\9IW@a((e[_i`;B;GXfVi7/*
%Y*B/&Ymh&L'Go+oXe;#7d>\D+J*P;k]NlUV5d5>G6G$NmiJ7K:,8*3a4VV1]$?YKV[o_e"@1!%`iFGT;WKZkr6`]Jq+EWW&\2"d[
%h3grd$Io!./'5*;$@/7_'),9@5ur*;Ioj#39ZD8umg4(@FP+W6Q]LJEa)(Je'IgO0CR0iN8B3ehO1A/.R!GH(>-C:X2DJhHUL86i
%`4bj<@?"a2XHoo7K2bKsRTL`^.$2Gbf0ELiQC[g-n/=b+@C#-G=YeHib5+SO:F6(u>[,9GeUk/hE$9,3P[*ak7c%SMGpHQZED48M
%5Z"o)7*jqPfSZX:ra*u7VX!;*jX4#f^C!c]m63_.MhKgt/q$-G]epM@g\,kXR(!D1!IOO[G4([9V]Mb*;ApAki!Y7_]3F`QF`VU=
%EirRmnd/dDn!a8HP+qpK(rjRJS(eto`j*.]L2j*L#)ACr]*'9H1QMq*R$R[7KV6jX5fdp[/]`S7/63"dU(u\S_Cl)Ic'KW.<MiPX
%$uaW6d#YZGT!oK"aZ@DSc=p.kj"s2"&tSFsGnS:i8*O&j,:*A\N5C8#T&M4q.0rE3[Yd^+7R=9DJSlY?H7G_cQWbEhDmO^d0_u@/
%erDqrrUZDSa;?YTJUG88S!PfqpbMJ/rR3*s.9^';$:?<SAg,$/8XRrEp/C2eHJ^W_RH`o=Q,R6\,NhQr(Zj'E1R?\d&QK,tX<5dr
%0=:G66Dk!KX:Vr)^+;XWESk.,0>np+qdblJKnt$aAG`5S4s;!B?^Aa%\W%8>GjjKpO\rrD*e!u9V[Sj7r$k5MESPP:]B:AsD`T&E
%\`3H>.G137"k(J,UX4i2`daKAB'EYjSB[4`M59H3g9[8e-`.bd!uTW(BS.r<O"3omF+]TW+DjoKA1IIHV,^k5;Jj[41U`kbKtA&;
%KXWrtV$S?R$6%/^C!hdHhEJ&'&qel\*s%#6M2N*(:<m'?ma4_hK)&3V;NNBdp.pi^"MsM^(&um/0ffdKLh)C?XA9,l^pJ=jo]6At
%%Fl0p:<L8b*dih0b"E&e.&d9.fcf)K'K^O5[r'J`_d742Mu+;]4.ulVfB1=L?N!,$Cs:7EKl0uG"nZB$?>1&QAH^o$Yi8et<XeC"
%PoHfIQ7tBCg@2o/c(u3[&^EYE(!o[:i(kN/.D,O:;0'%\qA7RfAK)^mC3@J>Q5313`C:[3bDK<C&GRrGjBYA6-*V45mt/FOIpl8G
%ZoNbNZ/"R^TP\`5a%`g\Nfeq<Hq?`[7!'C]4T8in'd3p[ZobU&jQJ\D?Uj(]@!6?YHgBtGPB=icid"S[j6(VTX'6hCc)n70Ak-1s
%Nl.1.qZ0Q0I%"-6(>Olm:rE\$p%#SCeq7Lt+q9jeU6QW^"_k?g$YB45SG.KTVVH.lB0t]k'G@O;KbH`u:1l3eVQs2@F9K^.hiM8s
%T-t(Rr%KU;,0Lf+fLc)gU>Ra.4gL*\6a!We`b!!QfTc*\eL*L!DqKHGgm3g::ID(Y)*9jp$\XCVn.oQA@:L5rq(b,"pkUP^2ts@_
%j5OVM:K)M4JE((N=3hQRa?[LAoJ2%5ciVW%^2KUj;$24S<XBkp/I^VT<$upA#7/7AbQ8e[:D+68fdABMGj!d]Ks(;bGIqM.?Q\-G
%=7k7o>-'7VLiuTa+i>g*N5!+I$L.sJR*`X!n-$`?#^<-sGN*Xp!CkEQ8SAb,Cd7]'Jr#VG?=o(0h=FWZPl\/4d5H<&A\fBi7&imi
%/qE\aUhW5rni2\CPC?RImY2aQ4tIb_+_p'\do`tk6>R;LEr3*UXA7b'dLq_*&/8Q?:iD1M332_XeE[Zq)srQ(fnkgaf%[+Gd$ULI
%Y#Bgf>]m(:9e-S6<MWNF8V)n@2pu0Nq$*U3%KQUh\3RgnI4GJZ=f_hWbf(/Ghs`rS&DZR;NX]ng$]#8AIIM-#f#>toCM+Vk;$hVU
%/6e.CL9>^@cmo8=\A@V`SQ!U"!P]@kj(1fXmEF+][5u/sUNNnFFoh;,"(k=>bKYW3P)P9n\=_mPfoK^#?+t]DCkd>C=\QQ1p#tB3
%lU_8H7NVLh3tsjE"U'T+9<\i@jFbkKi=LdAH4Dqaa=u(Y&XST,%m_j(,-/(cH^n.&O?6.\p-lga`K^)I>PF&.FcHiN>pP8Q]<O6D
%ZSq'=/s71Ylka1hPB)Fca&8?kfcESah'1)?VNp9dB^97rl%9@jn*AFk%^]<I!mt/+Wa(+4OY-9MRnq9N3.E&/UVkhW!IPg0;BB^Y
%l?5$`M@t^[nqVe4;'"%a+q&.>[[g=X7(BOtAPk(K+2V@\W9XMq626h0rX3>+#%89%n')g9-dVb>ei:O,>jh&(jcCMb._-7Z8<,rE
%a<K-\h2lbbp)K/[GN?e<2VtknQQ6?G0E$9=s+<Zk7Sq)k1&lha8T_&9p6fhYT/-AIbQdKS2"<sg\/aP2-*dZBbn=iA5`mq=ZIC>P
%6/!(XZNhZA[A,K#mbM%0F:\S]Dg9/-\=N2][66MnY[-^BdV?VdqXkPg8.:)XrWu$Er6RLo3?thL=Y;cIdU)eGZo>eHT5G32_HH5k
%eZ\8#&V9ZAS-h-,X(0HkW-YI5bZ-r)Hg?SLKFT1293++dr"Q<HN"='OV)YMu8eXaq9f1Rjij'B(^"%N4>l4.l%`,n1\skji6Q:*8
%QOCZ!E7`2135V@S?9d9bZWsj+A!&+"%V)/BI"gm'MF.k@W"Ysk/^t9Y]I9,;#\ib@I@;49;l#SZGRdu;aUK.4l@LA:&YmJ6$i!;]
%SQ[2H`u7%(TEku0GCkVQ,<IFY;X]8mlOdRIPe2M'+Bc6K$/jeGP'Rl9#)]qW``mq8j4Hg9pJs`Rmtr;[@Z9Q2&1W%ni'@l4!:>n9
%*0'*>KMi?ib'XdsE=1r$-JHZU9#MIjWi8-2&KrJ1S>^VK`BEkfd<4Cb0@J$<A#0lD2t-r#AfYlupTQZ.R&fcp9?;MmGhsaXJQhrC
%PZF1P%Vn))%EL11(0HY%O\3X;#ZI07;QHIsGp,mCn^^q#6U5/lJqfNf]:ttL_5ctQ=V@Sk?=ZLqKK'`'=f`>0GQS\IOH*hFcm:@b
%Fc(6l<isss^N7U'c@XK(.IOma:U^h$!FXga;\:4^=kKmMaHtZ$[)F>aOMRcFYl]3.a7fYMg*P+,*S70JQ@bTi)cm6>D)\/Z)Q-co
%OA$H!k_e+I-o<JGq8D$$Kn?0?;cl>BN]/#-H==W<i7(2E5=,Ok>Mq$H?OGcNO*j'3?Bp,S;$$TGK/2+L'rn-(ibnp1g/kdWUq#1H
%LJmSoI]Ond.$+TEDiGl"&XSU1.k($/n=-GUa)8cAR]L\/deV/"ESu"lEJ9FAPU?aLTT0UOD0K==2]11LOO=cf@j'5ZXPb;X(:8_Z
%gV2*hpc5N,D>k=7XCL%>@"ICXkFseppm"Kbd=hGslI.<lb#AO'qmAaSHY(0+L9sE+q]*Z6(%"HtMKqRa'6pl%&>@Rm+b'9>d-+sg
%3/5JDF])C03c,K]7]NEH^rn_"Ph,.3IiId5EnQ;2p=<Fe$X@;;k$(o3Jr!>h)_\^Ta]C!<*r*%^:ZIODE#WlP90l@.Wo=Z6:Eq9h
%>;pK]+V(Kc_1X!/MBRG8pZ=oLfnC.5g=)r?DnJFiqIM>?O_F*+@,"-=A0Z_8oK6H(]S#im9aa9B5\kFu91T:Ud$W<+/uF*KX(rt"
%Qj'g;;qu_Lp"jd/B?A>)"?=.C_U`CraDW\JP0%]]DYD/':`-W`EX8IN&SQR>'K<e<I"Ik.ft8^k]9&anHhoQZ`^RTcWoss[_!-E%
%n\BjK3TU<2*)e4$7Y`JsT!a1:k#:t`nP5)ch;"5_)FF&8(&K)PG!\D/OG#]V'Kb)5,D@G>[0l3$S$Jajmlf38+b.0l;g4:hcU"sU
%TSP\`n]^6qqfrLB%13Y1W8PTc=U1J.m^e@/6U)>'70[oa#dQIDmu'/VFS$6;btE'0LUYPm9T=JU5L&E`#6B(W=frNoGIXlFY'JpF
%4>hHL:GDQuE.]N3$U;(N(\k?_,_'2J4Q'O%YjkmHE'&^RPqLShl`Qokm"_r^#8`#Y`-a\k%b9nm^L3DaZgH?ND\cTM&n1+[mW%Sa
%h1>+J=#!@n;A<_*?>#C,%ZD+g\bRFn:`YuDiA+)]Y(HsX%,FgrQS7h7/r+#PGnKTJ^AR@Y5Kqd%p,Dbgh?\F9e8j2sRJ-Sk[kSnn
%M(Kf=9#bP^&VC3K$LJUk\pbH?@T8"6Ma4igokUOQ@e74AWE4tKDD$K.RS/#thM`/YW@1ucb=#^W%P33&,kgd0SmdQ%]jF">-^Z@5
%p+*ib'1omT7M:<N_>t0op@p]5T\`sO-%cl`nm/&%N&I77oG(F9M*E?%K>IoT!"DUo">9okgh>LWRidBA4LHG<@@lCf7lp%L=9)i"
%IK[T2I_?/R__7bi>*$kkrX_H,gL^!Z]R5<Nb<@NtQ:H2u]HQ>L]I^Z/nc<'_F:*;Jf=a(qI"LNFrZ^D*$j)gig:h3a&!OG5o9e%c
%,E/,qm6":fhYLk%ZtdYC95hJ,a@8'q`/eEZm*0s!D_T#o>Q]g+')$?`9L0166QpW:dH!cA/_"g"P_@*/J1ec<S2TIe`+dSEb(u&5
%#:s8G=LeP8_>1W!3l9hojLn05ho720XS$f=:Rfo:U(pn)1Rq,EA@Olo,G\:!-OBn.%7hPglQtcUHQcO\&R-s`TAbQ<H6l=iBHpp=
%N'maT?6jm/Djpb/iT^HYM=XsZ$E"MCK?1[#)"+5q/,ZflaQG<R+HZrX-1FZ#eJ%e!Wg`f=C7C&!:!D^=f.M(IZhah13?L'^UfP#W
%+I;EP-^+q%,lrZtjlUB:jC,=>j_RYM3$7lsUYD`e35Eo56LQY7Fc]d\!YBIdgNT&F]5p''K7Kl?'>-jQ37Z</e)c\_A^Y$2q%]Vc
%s)KIC`ZlZ%pO_;L3-JWE"N,HK[nUJ3-)$S7!Cf'./BIUnj`I!3D[..80AHZ1k'5/DF?lZqlP[DIJi&J4Xa!FP0HI'&<_A<dq-_"g
%]bX&X<Bk<Y;MDPeZ4eL@#8B_*8WdV,?T0DQg%.28YmZP8:%>(c]^/e2FIP_t"2*uU.HD@Q[bAA:5,632f?V%I=\S]3Cf]6GS-OhI
%n9OP,Jg=7P>1;7!`7E[cQHUlNO@X5Z@SYOQ829M,#_V`eI4VceA@I5,2[_2Cf98hj1/DJn-."aSf8bIWcHEVA_Crg8*.@8d*f8RZ
%VD*kYA0t?QR@\&!c&KcBP)>'lCQ@)XCo4MbU.E5J]Q58pYW8G/[*;j1<#Y[qOJR:!P)e4g7N81;oHcpY4gm;DSKE&]G4=Bj**Ld,
%26K-dCJ<_+L7lX84s?L>LgY(B/U=ps:5W:13C!_e/HE^6+qa`MB3Pk-$/,$Ec(+RW+W't,GomjUVr5MI-^FF'4?6]_"06FNEKcc!
%b<D3T@Ho/(=AQ[`kU,QHcb)Z2@kG7GlZA8VR+<:VZuQM<cFigsN^uj9GW,K6_"a80^?1Bm;Z[C)bHo$XFj4I5=:?BLYiWieE&VZO
%Q&)LlkHukn^t*Y'7C+oro"F(%6P<2MF\!>Z^_^n<AW])dGtA1JNenI0Su0GZf&q1m@h8%@5,Ue2a\Jj&jD")83[S#eHPn$bHi>oM
%ToOEO>[^gCLM1R1YX#A9RaB7/)?k3.9R24AR\5=lh=MM?eUlYE\neMg/?R-jfp`QKhXT+5iPB_hS+Y*e*4\V<r4AW`19q!A\tVQ7
%hGPEA.=p\pdAn?d>h^gDLO$.4D8K=7.4gUbcTG)?,i94T>[aC;3"P$/OE&H%)MEl"n*Sc?cKu;[eoAFX'H5RNqTB$6Kp93+(:(2$
%>,ce)Y@k)t+m+>Mq>1]dD4BUq"]LV&CIMY>D=mH')Z[chMFZ/,kd%AiCRH'.^a?kJ6$A*#ImPi>K(ggi09#bi3IaoHKn$qPQ\XJn
%3cJu3j)/p!,!;E"[re;o8g8_<4AnocT)i;[o?AmP:sYQcRC[NonGQPC[lmLhj]H\Qk*Z]$_(HIOrR=YdHAWJMk%/4Q9al2c&j]1k
%!TOi'n,fcVM1D;gZ:rF$$oV[6U(uO'A@MsPne0Jd2gFarjo1'N'HK$%D_^>SlL/`C-4.X='Ef_<Pu"?LoYsnl1;^OSX+_fHM:0i$
%k[?7jNnQm\Z"bgsJ`uHF1@hZd8Vpl)JV"D@9P&qWg8DB!K;jDn6U:l@j,0=3\?IpQHG'L$-lFgB68FrKqHBa5kcNfuMT%LAU",)M
%cfbp9p?M*hP!5X$8XJ5h)cn>(k.((&acq=R\aj%e`o7iN[/dp'([:#W-.!0#8O7"9FtJMseD[SG1,L/k!]_J)J@YJ:pM(S72c(St
%6,/CnK.l@On>3JE4\iAT=h!X%f.=NDa:ZXM1XHPA%L<^N[*\M,04q(%'!KPcBDQb=G2lr!XjdCu$8][3b?RAAEl98h-;'B!D0RR]
%YB+1Z"BCR,<?j@K>R#'H@4.gcY!<`DQ)jluXqcQ^8-sGq;Lq"/JDs\;,>'7EUJ;$kD&f9L4XgZK:1GV>E^&O6KWWa%Q?T2u4`)X`
%)ij>NJTC3n1i,nMY=7=nXm7(==AglAnb@(.A5Xk(M)1I_6jjDq2qpKh^G^iuP7q9,%9mWL"ZklQ47YOC:]&aAM)-MtU1<dRhb/N^
%I^.Ao2PDcs<GLdg^t6+_!JsrDXq,2R\Rq_H=<8.8nq_E&"`q'p*jGD1TD)>7VV6r=P7/Y!-(?$_O!FSk1'5VQ`hF]IQ+"dX[Y]k&
%gJSTIP-$:p!m3DM\/TFu84-3$4GS'WE9P?*c?];m@!4-?^%O@fLbd9gfak.'mkUXc]$BoBg0q7hP\3r@kdDqgT^9U,e:"`=)GCi\
%M%lgdfAL#GPJApMT[,Us78GZi.2%7YoOB_8j@GVh8@ZToS.p06\U7a^n(2SV88AoVp7^&iiYa>>qd>]Y!SnsF'.pP>^4<RC^ao=0
%+X7Ih;@#Q6G"<J\7t/[S]pL65MH-F\&6W'lP1m!Yh*.Y]MI,FF[=8*f'Ga[c790^:clDn$9YF39>G3X<but9po@h5[l)l;n(g$@)
%/]6QZB*k.\qlU*J$eVM;'?I3H$0EAI7R4++d]b7>OK+Mn+b#Gb?P\T,KXeMJjoWh@8rWE2K$'JC1Z];(@PX+uWa9g:H"FH`Uf:jX
%_*)[KA63D9U41=egr[bNJ`;Du5$A!GAr'";qfKe0;eRC.YZ]N+oq1ptlB`GV!el9P9ojmZEnX3#S[t)3;t$(;pl*'ZEYomh89dVi
%D,(Dpeg9$h<tq`XjPe"r]J71?&B1igNVTr/>RakUP"8=ZrnG)G#4gB;8_oX!FP,j@5K5cCpQ#]+$GM^m-.tqU6t+,9(FUWHKU15q
%0&q^9B1l0XK,2J_B`E*<-b9fZ]c/'U3hXft8GK@q6%IGc_Ns<U$M8[67h77GFefYAd?Lk9GVi')]2go=[DLbE=KCXu<$\O[,-=Ek
%IKC*EdBu;O6L(a[Gm*7's'7hUM-RY^fN^(7"HOnn\"_qEf^KF]"MVT`b.mZ:4>!XIU:?/NU*-,DG"%rM'$u2U3[&pS+7?HR+:&>o
%gT@Z%6'^aM7`CQ2FO-n+SYh'Q'R0H/Ch%TX?5)o+25UoB5tt[5H<Uc5;/XiS^>%j!#gtYD;u*kt5j!Ce!QF#B(s<$LJ6OJi,H;CG
%OLuGao`91rp4VA=]jY,D#Y4K#Ul:+C@pTF;6(Uom+c:-:hes`-lbu2=WTg:P_j<g7d9/9Q$8U56[0<SZF]X$M;'-=jAp'V_<IgRQ
%3A7'BA)A;&SIUN&,,aNTpbMD4#=4T'C,$8JS]_O4OTPR^ZNNu-'e-YhmA<qt77s<D6H:<NU!!!0s-fsd)$,tS[34ac<*,)V0/Go,
%JpBp"#UE;Z2g*^1EL.?7s":Z2K&fN_jD.otU+VR,i#*8PM2H^NEs#S=)t8ZF_Jcuui&d1*osMY4kZE=`.g=I&2&\>@0>uAqcHsBQ
%&hkT`bG*gj`C8\n^(*)+"U`GkBnV]Wc+ABhM]rM>DgIKtGPc"eb&dPsI5=![cje?5b.C(AhA$2%4l8A=/;jCHl7hCu*ik&I"\p(-
%YCZaon*<G+Pu%sq6d+:.52Gtn#B^b8]KV9LE,JFc$S'mBVS).)5G5<q4im:'Dd543h=lBCTODctA`$-[7AkfO<$_Cn\=(A8Uq]l"
%V:,0C@A:>5VhA^TV*[/KY<m[S<%C)3hZ?$8>2d(uY7M4X1,(@EKMlesd-h-<d4+#lIH_nQ_&/`@p(6)]HuU]('%LTiKP0qRLGoj3
%Q*l5MXK@9*k,/VR[1skC&R;q<qnGXs,5ZB@`rt:,20VlP^K5Y"L#_]5?D8Y)""Zc<"2c*rLBgtFKP=K4__C'<"btui8K%l$_^o!u
%e+^`#j:t%"UnZu7D?d;Hh,pMC.B/`?aQ!-fTHOon^hsYukPfS8&(O\m+A@Aqn>RS)">LN61Rs[akmQX%qXL1R(eV;@PBiBM7UX)_
%(f#'_KF!N$LC<9<_0\:?a:ad?"k1$d7VM&j?U#?_IPY>je/XkSpi$]T/IE[.`q'04^H#U"?Dqu/YVDl:/CIJ+Z@(YE(ce7lAj0gJ
%niVLbFYWu(o7SkP'2IK7E^6)>U9Vp\]6i\^=.#A7"YO`6[2(?cc;@"W[X<j`bKOKH+r`,e9B?B2O0b6O0RK#ShE(WM/@0nUbu5E%
%cQ96noO?HX?Qf.<K#9-dSF3Gk0nY25i?.%/CHR8tK%2)OKKR/Q[sJDV"KNnuG5i62MA_(`<l,%6BQ%k[KW2A)=Mqpn4$-4I'7euH
%LEC:s_8[atpKI3jSdcP]l&fgHZPKc.EtNe&XB4YTT]"SA2u0-05-`cE9gLd;OGf$W%3JD,;lDjPOmiIa8>mR^q?\b9Q`?-[AQU,L
%q9(!U2nMOrp&[_HBmHuH)/Om1&gNfbZLWKJdP#*Q#h63J0$)[:b.V1i^;71)`jNF:1nNjj7a2JYq7[cK!]O]QLffP[`tq-A'i+*J
%(5('%9`9:*MbT5cKQWl)j2#QD_ZtEl6QtM(4M&I1Hui4MBFK9>X%0`d?a1DZ]#V\hlin*9KQ$o!(L@060`B$=[fea#W`s@B1='k3
%EQel&@@h&%`m'ON#r@e8H0p%!T]38HM>gc<DGQ/oX5k:++MZOPb.C`NGG^%[bL*T>=83#FreiI.)sgh3';hrs4WbKA3Uus!bcAL)
%Y3Er*dr[+r-CZZY5u2Q&\R>nS3kIYl/O.BhfbTYU@6;e:<0fAj!q4;s;;E]UTM3<"!EBFcf),!KJI's\SX2\$^P,-`+GA.1[Kpm*
%7`3Ri@Bs$<Y#-J&0P.a@>i<(pS[F)9c.kQ:cU&U"I@BN49'E_<RJmgZ?HV6&qD6-d)@&;p^COj+rVJ>b*.F;!b;9<4UckM;^lsf4
%-KSJrYGa*2"<LnYb/jf);3/#+2*MYNh!MK%=`c"XKLj*FETa"nK$KZU1A^[LcT(j.rTNo>p981S]m>?n:[mc)L#sGbdI1sAMt&7F
%V<t''p#Q4'"5<.Tjh=MJD.9cTd>^SPSt<*M&o"#J0>l.:\C302akU,Rgu]:45"*hd"bT+@S?G-npiIm&JXe3<_05F$R?d7%>n?^W
%Kb:jqqj_])PCTb(Ieu"sDOVAK[$JDI&73]4oCQKFAD7/T($LuG[nh6->GPZ"Y!-.SNp_/?'I9>5[MR-U-T%)tBuYBe<@K7qUdl-E
%27UpN$?sBo"m(2Pe,:kli8U@?2i\bC7?1eqTAB"k+b]8FeBOPVcFCAJn>?R.-e&Of7Xj.1Pf9r;gpkehV7g\*lh<V=G:*:p2bO2l
%&$tg0+t#J2ene@=$P!FK:B^caoAM>E#<</ERlVoah[l?7`3cfa':^#,]dK/`eR&k'89+4R:-Sksp@rgU"5S+WE-U26Q=j)Z5I"Kj
%;]%[nI=Z=K7rjNqn/t1RdU9<Qa$CZ%gDDu;_BAd>RmWtY[L?`aFWO-uPFE\H[[4,@0cSEk<\9bg$Baf5T@#Xn+ND?t!<ig+%t"X;
%7[`nufCMP'qU("?[Df,;_6(0&;P[\5;BYH;4qNP_US&E+$"o?C9$uiu8:9m:N6,5rq@\"Hn;PlLQo"S@,!,Al+i,8a!AuZ:oF,kD
%MA/`N:DBBt.O&m;Zfp.%UL'aa=YP19o%lJ-W2m_Y_XhI`7Si^S!om.'>^hZ_#L-gg`"Qd4id17o"Y?em95nVQc(TgBEIT5XMNE$T
%*hG/84/8LKhG)XGLgn)n"7DIuA73ku4be"4b0LO_#Ca&1ieAi%0ta&4Cb=G4-_4_7O^nXcA=_F(`V4XP'=#/(cRqrEK;*NG\!oQS
%Mh6hQN\tu\i1CtjH]I];h43#SZ+T7&'HY0E4Mg7`<bI>8&MV4p/=_H5ciTRUpTU=#h80s,^.sH)k'U<><G:ok`@^@2mZ[$<9Z"?t
%o=Xg+nPAZOMP$3qM)X&Vnt3U)cGAT]9[Gu_iMQIJYX_kJ@MN.FJ`*3siKOqRmL-6W_8.5.Bh*NFYkDm*I2I[Y"cZHZ)\6dAK'qM"
%7UD4kT<DV_'0MRN4m'=K+WoXnbQ.8Zj9#g3b)F4Q+jViKeLd#B+lj:F-freAb67\Jmrn4Y)"IVAlfbRN>;%K`RTVSgCk!rV\dt0g
%DR>)L@V=c3WF"jL].=L7]TCmtMcJic0WE=FFAU6N2Zn:I6R/LrKP;nsKAN</7UC:qNSd:Sdec7E)#`$Um6HSQBAljIJk=dTQ=dC2
%.^<6%*,+FIZcZ'b6!K50!T5l;<aNl$@JVZeN8'uBhMRH-pMl=4rUghRJp$q*+5c(eT&Fg,L6,1bpgPU.#j6`K=2)O1n&og;_t_Ut
%E>87pK9[;A%l.mNXe/:E`eP[>jgD3m8#0I<q./DjV--A9p<D6h[.9&VjdX_q9@;-/V]1.RW*]_$A#1Ou::RY-oj7pGiKs(=[Z11j
%+5g^'8g,9a30mNHn.lXJ+IB^H'I3g*!HXheBMLX1gH`!s_4_np@*r-HU[RmF`U7_aI^,8UrA7=&j)u2l>et)ul$T-32@f$/m[(m&
%5Bnr^j^JJ"ST1OKa.(`)bfQS>+&\h@>'[upK#*dE73Z=J\WX>nM9XSb#O1+sH<=Df#EIMdUMqAd#r&sHc:d4f+7*uCid:FmlTW50
%)4*/B)34<0(%MY8/+t^VZ8p0Z^c&)_]2i`CWk`(E*W.o<Ko=1VfAD/V!^8o?<N]=*iFOZ&X%Xk$,/+q)Wdqr-^=`nDbY<GT<(M=*
%-CC<&n8i3I?MU[RXclA7`_6u$M(Ou#Hs*P9MQCde3g[u0RT%?bBkG3!Qkr?2^)_95m5)p'<O0f$@NMhZnAs5[!,n`F=t^tii+;&`
%hpYUFqsK#80g`W.E1IdW&@bj=`*+]'Go7gHVNLe&.9J`*<s9qJ?UnM6%sBnY;de@=@WIkSN_N:SDkn)lcD87bIa=@.r$=7qh\UN2
%dkQ&h7'NrEB!Z;AR7/_hTESse<FB:I#mu&8"'Nc6*7EB(!=<Q_&1s?!$$gI&INK(bdU.a((X%6)<RKd5Xf\&E1)s1GqBuCYPM:b`
%@gb?C6\Y]h*+OP^MB.$]%Omip8V+(YIN+;m.:%]RGtYHC,VIJ;BbHb#o<mNCU^@N(n&'`PEg;_&'J+PF(U=fjUD1roVSLeikF9iJ
%Y,AN0\7YP\KbqqLkg+D"N:I!UeC3ll^\pO\%j[H.iL)[j7Eu-?!]Q]]^X\3TjR2rQJg.D?(s<`[T4"#Ur@$@!KMBpI4+h5,f/Sh\
%nXp3eL7gl3+;18COml`L#r-XKAH;hXr4QJ7Mi^?7)(FM^?.g8Eh+BKtq`cc9:Q;uZatuF,aa/G)[?]4?lP$;#gbqqcq#S0HduOb;
%b8Tdf$9<b4QR,12S,mt*)SUQf\P"Uqq2E'IUe`@\#r7@pQ9Y<(\qc"DMH"5SR6i#IDG)Q/^SUehlA"k<"KHAJjMJ[!op$cH*$=t-
%bk&KAoP@CgZF$#,NC+^mOC.E>^s<FU&rt.44l$Hc7$7"?+A%KV=CfahV]BcSfK'NRJ(IA!XIe0K'V#"6.8->419pF/dl1et(CFG=
%qFtSqgXHW#m=L8[QP#rRMN$HK>T,?JRq:G;%eD[?quM_sMET1,\X?#RB3m0&NG$U8-JQBFMY,G]CeKlVB4<Y[<euVQ=u*IJCC??7
%ck;iP2c&6ZdLs\p':V](=kWe`Icf&+_'j@??+B=KD6tAmSPZ&l+f'd(oS%MonPs2pQH`H,.F-k+Eg2V5]Ju%H*%2F&Pl:_.(lZE1
%(g3:Di%sPe_"N/#GR8UilHGeh'^j;t;l'X3Ud>_u_CcD2GMVYOXQUNj&H(L,C+8*Z"d=_V=jSIQ)d6(6V*f4S\35p>o,h/cS3,$`
%`rB4]8nHl75]M^[G"85Ci<aoaj";GMiHp$#+OTUC&hs<oh:%p9na_T3Pg-t6Y*WC@)a"NG)T:hX@ar0<5Tm59KItAahcHnjW[b8,
%j&0XT2Lk/Z`K0P\-P7g6CO844ZCB<sd'6`d]qW#E+Np0<`OqKN8g^DFT@'dUnoc=ZM[*R&BA5YFMhL?<p'HFflEHPkN)dR%22=Q]
%UL3^q?fAoUEW<g'K3:IuGf9eF,S["7LET=2bd0<,q!+1BC'r(1E9Kr-M0Z;7P9oFbCp&2:n)cP%mq&@ZUGC:6^5G+B0M'i?Iod?P
%-In9?F:7+tR]sr0Y1k\M@D=Ao/!H2kn9Y3/\q<E&7Ss&BM?(4Fm;Ej7+k`MNg8!=&H2lGW^prk)/h;,Gh!W=uS5^/*DZNupL+C3U
%O6_iJ]5^Y"URp[dS=b(S_D`,<9\LnMf&JOo`jqJb&sC'B[(=;#MX/6)+K9QO5C-8LEnQ;2p=@t'>@1upa-E'7;SSYr51&a%Kh(oT
%N)CkY)+EZs=(IT=W293FG+V[E4"D"A`c_h%%NXb/8ir0)lk\didFWN<<m?6PGd8a#1-p73jW6eaRrK9S!rtLQ/_G8V0LjFN3Ii9<
%&X=DX^3:349GB4h>L4f\'QL8hqHBV#iNqrl2%i.NN(s]:917u".M=#(oGMN%`n?tM*P%MC:iJ<f\]gLco2&rkOgH&KjqpG._A(@X
%4Ws,hQj"^QCS*6V!juVeYb1so^D+B\6QWFq2YL=#H:bLX_GB,]ek$gF"a<%6ak4G.AO(Sc&K68kn`]gQLW7_a^oD`ZX@)uG2Wm-Z
%6$G?$pki,45%,h<i5KhRBB2/lYj!,V:`[.oeC-X*n!^2CpDZ-WW&oXG#EJ5.*afW"K^_o&ijN.9@@!)m3.qS^PpREO_nj//o@X@4
%RC6$TqmF`3*!/E;&7q+hUFH<',2<$WmjMX$Y6I`mJVnjb/nT@VnIdn1K%uNKB&nKr$sa/&bIJ^<?IZfW#C\7B8;4Kr32+4Y/3DI:
%\8uL.M3.t8X_(*bgO,"V$HQ\7:bSpg?gHiXJktfC/(Z`C=;BsD'$KWc7B<Zn6DQVF@Q^%d9U8h<P[R*pE0RNEAmT57Q&r(a6,A;1
%1GYed?I4O)pCrDXgLsk.bW^]i\'E^\LT,PWU\XForO\f[Y0mcF;^CqmMR\cm9,EdZ>_f4'#M"E.#W@#s>XH#V"3"1EScp;JL*m*u
%8A,\rDkhk\0Y7qVhYV'jJa#,M3Lo-[S/QiXe@?P,_a\pJ66HV9\kZpo32*NX$rO7Qk=ph,aQqr+'5a&A=2j!m6.(#In64?H7`"F\
%LjSH+hM/1kX3:l>DND1.c/*WN0'N%]Jk#q5!T/fg%k&d2q$Ifs?hP#g_CYk%Y)>S2c_tm8SB)018n8U.rZ5C?#D;'/;-;;0Kg$X_
%4'G8.K^*D\8D"/5=i(0G5VEtFDao9^,bpL:I2Mj"VblTC1uf*p,'c'A223t]r1!3M!q2WU"ahsi5/8X9T4mm-%s$fP)".j\OXPT]
%_GWcm>PRGbL>]Vu%dJ"lV^jL'=u_5"@O,B8VAnR3^c!-E"FW/?rVnR2Lth#W=C^\hJ\iIGDYjJUAfP*+gLcI$U?'d;o9P<'TiSCB
%-QTQ#^PjHYWAf/8lH"I,70q,kPqW+OhP]9/%V74sS%o/K14RX\a)3jA)c%WJ@fuVEYA[M<8PtT+Oq1;5_WH":8+F`q+G$3p"rr2&
%1,Br@@[B=!Q_/mXg_^Y/gg'I-O6PB1K23Cr1!Gfur3UQ-%fH2=ha<gKbTcc18Go>jotFICClO]pXME1>YTMPZ2qNT/8\r-`8RpXb
%UP5G'C81JM@g)W(kHsTc7q83O@@WO;mTTH]-MCq3:4(mP=ql>DnKN#FA3NjL4pf(;\#(`$aeoZsKQN79D\_*P-gGjNIXncngIr2#
%.%'oDFLiZ,-<mJtf8ZtG6s1KG\c'\=@o7'L8;',I"ZJ;8!TR11[1B^X5>7,(-RSCNfZ\t#%LtS3_bBD%)cU]E=]@:2B81ZbhaCO4
%)D8$&7lN',"9-$M-`o+2nKM=#qb-*&SIuUrPX(aMGpte/^Y+PQJHC,Ir3a>j*i4e5Ag[PSneU'_g<:roSI(/ArO-,8;<$8Gr[eA,
%^mB&HJC^MM8tXd1a>pApCLTLtX_Apo$0.,WDI66nEl%<f/T<NGJjj4s2G*:rr>9I%1c1(^LI1'Kh]J(S"Yk=_YGAbaNq0fVQR,ue
%GkIIJXh'9T!G,9!p&SLkE3fh7;2\u$rq8jOD=33W+^I;SLmrbk-&a\'gZ=:A*$\\$^t$qPMBQ'_BrT@M114!aJaq;KCN*`*,_p;m
%VcQ4g)Oq1],_2cps,G)9#'^qR"U^^Zjb`s%9G2=(#/"01l&@L5gYmqoQt,%2cBjC&ShKtTKS@>^SR>[S`8S;D&?Q*tNQiXj*&$f`
%p;;8BkXe/(LWtEt8-l`[(ktm?@=%8qq0ZWg6bL.lU\'?33"5'9nNIf%BK$8cE8]8aF&Ck!_-^X8n0Z0D/T@s?j,,#@CLa#0A]hN'
%$X,j#Ip4fqLKno92"?&4A[UP&5oTFF@pbla(_86,qmAj\O!t,He2O2ADXuhZqI;&a=s0J2JNaHUo.8E4JuC10PKd%V*GE21^)4-7
%!sCPC#R2E0?8,&Oa+L_R9EA#p_F*Y'N7^l5`mUI<*qfRo<XRJk),e.a&/0^!/,].HltsLgf+b-P[`P3b+2s]VjbY2!_>'saL_FG>
%MF7uPTFkmWZpe>ug'R`1[cHi!K$gnRm'Wn)@tL"rc9.VMM!2f\Jr"K[$O)L5)%E:k$[-c.I:B_]N5a#6!5S(n3?.cS1LQ`8@8s4O
%!;cuCprb'I($1ub+P;"_nl%D"i`^30D:B,aW1"@h%c:T`M?I311f'V;#i:>6nGk\qGM*U/*h*==e1ijd)_^\]S5,<e*N*uM/?fuj
%n8'YaTfp8Nj_s&$#k7qD&^dA!TA\2H.P=g\Ms,aMRlB+@DPQ)CQlPO]DS);nkIc&.JR<THM<#ZcB^>OqN;%O.mmn9Rj;)`U%NVeT
%:<`+WB);*a_8D)j09-cF)1dd7]]\BsZQV><q%cL8!UJe:W_bGCZU-E)_%]2dfjtX>Wfmuq^TtQLU*ZfPb3$'ST?u=J[I])l)8h45
%TXq%/B(/o23"[/HWX55pZ^!/IbS?r73WB>/R>.s.o!Ej8<tP\WFZ]RM)"H%I]2br\bC>)3"X;@R<^#7H41E&qMs7\E3[Y>qBMVQG
%:/5IWm3JRtKTU/)q:>*t,RfD2A$f(6HG\g_0MC%f^L\HU+9lKHT&6j3[COuWj6RcSWnh!NMGg"C:bc9IKk,AdcFpX^15cdqGrT+Y
%mUu-MWW]u1N`T:Z7;oe5I9YV-_1NTj\7(F'q!",$L!SN5_!P@TA*aqrflH(tEUP".AKkHCL@Pp^7=ZK$S+d54Fl.ccgLsotlCO+Q
%Cc<V0ZF%i#q1,p?ZF&:pC=%atBbK.l9P%h?=j`\PPA_\METutgir\2m?MB]i9@7L2,ncs:%'9]F3CA1RB%,.G72JZOHnJ#S5,,&B
%#$$V%LcqMkKJW2P5GAD<g;[,<+YZda`M:d^U2F:!2Kt7Ri!$:TAfR+si)\',3:]E?DsC%0$(@^*bNBN/,sfS[1?5W;n,EDW%cGN2
%V+uYUe3EK(c5DJ@WAB/;)(p0K.sRFqU$g`]p.1UtaLAa5?&Bd]'Deu'LNB1Z_/V]L81[0+ILrsJ-ILT1KKPIV%Q>@`lime!9XPoe
%F<G;C\c.mQRI+tQ+1`&F(Wl\af@@7NYoD*(_>dq%L1E$cP$5!UAY+0u^d,128_tq%-5Yi2`X^TI+oa_ekEMdjbZsYsEi`;7RZb6]
%+/eBmIl0QB>nsB^^=,RPLubU]G+`fc68A",O;'aS#pu645*cJ$-9D0eHGRh1nJshaI1K`R&,G)D1/QX$P!8W-H]!edM"K@:WF`X@
%hkRRVmjuX_(N0\p8/`>5N]QIqdrpO3D3KOucq2A'6i<]I\]Yh7os:[(3cT4KO_kD8ql,\5(h?&X7<IP?+H?cRI-0:FL4]Q-G;l0Y
%-4d8:l1;S7<Vl3g22KS=nb%WH(;7?WfflfO/`q.EO9AYX2PFGV@+-O_?@W7F7HN0t`k7*'*felTLYkB0'!]qLi#m8E@e!8WP]K)o
%6P;rtB=/n!+/KV8C6HJXWsTuLp4YuJ7(1hG9ik&Cd_8]jh+B%GmEj]m]D]&eF?n!ZHGhMW$4Oa>H&huLne3KE1lg[*_<(HH.<rE]
%3floV`nfIHa?^ToCBi%<#&.>;1R?-KJBW7NL[Zjh(Kn)q2,s7q1[M2*Z%;D=$7l'!iW-'V1+sPjGq)B<)M;TUW42HIhe!S3%[`Eq
%(<Y,=\-[;#)_9L4WuR<ST]d;GIP"@/%E,GQ#HIj?*8p]DU?1nu22Fm`7b8T>3OJ2q-i7H?Kn*Co/kpGCng<bGgFgTh\)r'Vdfd!*
%Z^?TebT!?5Jm#,1L/,-tWt7q0D&-<T=I+G+7bhYsSb4G44ksJ3-9cP#m834h)%Rh#glt1V?XTGZR=n;c,?hL);.+8sV6[pn[7aQg
%#6WlFVEko/UH/Gm@X[mu'9F2W<GkR,rom.>&/SjiJgO]uHG[JMNnu?K\&2@G"lCV.:N-F/Df;"STpWmG2(]S+=L#I:42XtjFrNoi
%`g1PLY2,Jm?l1YgiI#$9-!9<-;;R4^c@j:eJM?'-ITmJ_?euAM+!m2@Q`)R^D+<p@MZb2/kkIct,Q!a/Hi7hMqN>sM2m!.n'lj6F
%/j8?H(C)UnETXl<%p;p[WA*\=9Vs_pd<*U1p\6H4VgB+<BMnR8l`)GW[lZ^gQ=mQPn/rbKdE&ZZV$q]*,3M:^0d8^f7)0K"fT@L#
%pHfQYGJ,3j0WKa["Sd(Y+Fh*Eg;K?geNB]'5!BRC_XA*-".e\,ms8E!Q0!S2b2^<[,kZ4,JQl&^!P/URh&\EIJiJf/oF'dN@S,as
%gUd@b#rpBNn70:eo(d0>LbOUj@01F?>.4A>9IeJi*eKMW;ESV8jj?`$ij82`6&`Xdf/E3.W'F3AHY!m2\2NWG2'-/Y7'Cje"*")k
%[G+fPM(-a"$ag;L?&VCd><WsM[:J*@m+^;4j?[?qk8%?h'8WlrS;\#pj&Ou>&m,cO[pUI9;N3Dc#%!9)Vtn>%@kc\@"qg'<np[n/
%nqVbiZAOI?A()t6IX,T+]&V+:-Q"YNh;bKreq9k*9&3Y"8VMg+DFP)rN4)ca@VWPXNl';J"9#5\*8W$JS@MsI<g(lfKEbbBeYJ1K
%1j1\@]foR&SVD6RQ:?pJ>\c:Q4!O37*,O7;oK&KI#MXo+kFBF/A_bdN,F=mSi0``tgP026ctL'0%F!>("/dk5]T:\;3[XR1$;Wl&
%+e/5*l=ml9#4>JPI'?\qStBs`R=rWK!_47kE5,I;cOpTN!u^d&H/9iW7&cjD1Y`L[9<8I;BXheQfW!4`r71";I1H^((6UN0-t"^e
%?R<kbFJ(8Q5-sl!7cAuB3(rH#9jo),CfIgg^qqbG[>G;MJ<%1`'R69?N%Fo:L!#4=8Q'-)#9*ILO>ZH1)o)N8F8G@mA(Rrc*;I-4
%79n<]%8&/oj7?YVh,XqW<c\NAnhf?u\[Q7.V?%Y8/is,H=>Ubeb!?nJ6sl(Ll:`6DEaGG5]+T>mL&dfqEL!LLCfs4AN,ob#;]\;^
%I2!(U"=JU2?&r)CGf0Hk)g55CR$?(V0J:Ls4-P,'AZ=a(AApU:.2_[gjMnLY:e#buXu7t53E/2:H^[Op;8ed!#)hdnj(N7nF?1NG
%&4B:4KUE!#W#-=\=(@aND;1!oYYAFMM+*+G%/\]jGQo.,!J]nE8^?<BA4/!_5+H_;N7)9pcd[''#(5S,@j!Zu>96htKCO!M3"WQf
%"/k)oin;u!f`a%;$l'B/)W.r\KP52@%WX4SH/7In?/s0Z_m%l>.Q(K/EgR?@cgMiimQ1c$$&A/J-A8ii39\)h=1,0q:l#"`,Rp-:
%d'0PjM:"kr8(5sJA4MsrF'HGrfTn5Lq_%2qc/?f[ru&hsa$</D0qm"Vj4s<EJ35B<DNdf;DKg&"M+c\CK63KUN^X6>Ybs;$0K[1(
%[aJj"LcB59d:#eg4e-*VnNGUXEI.BS@SXi-:#0o;O,l(UKu112,4@`Rg)5qnU&a_jYh5%Bk#oh9e/,%3_RdaI!d8\O5oW2gAp&L%
%5:,"/*8Bggk+)7B2f(SiO0*3aVUiA-Z49Z0MMMPMR$u\=+4T&(m`P6\8<.4I"\a_#m1=KJ#S*fI+RX#$4HG4VSHJ7Z\6W-p1%$H)
%6ANP^$5#^U-^[Xbc-[!6gnVJY_BtYIj!0F[=dHK`pSCj@km5sW7*uHMY;>\2gLPP@ip?gO=^BO:FG37`,BsG^fEa\0*\rrH?dQ#*
%9k^1;BtYgI$*&olm<@]!O1)!h!J/)i0k9]R6FTT$HLWDRXt._5(I(Qc1geHTU0Wt'%`Zr%1*CZi^VE-q?N3Zo559r6%\X]ofjq;Z
%B^I4jbo@<=PpIQ-7M)k/RCE`l3aU\LYLsd'@0UJ<$';t![:oh[`#K1_m1;[nM=bKEj;s)+3Bc%;55Ym*G;n&`7KHMC0X$;":(FlE
%%/hqp?iXmH$Z8hPpbc8s<2,_3L>UI^\'+Z"itc7Zae/DLotSb/K]%rh="TCE`'Mai=KC&gSVs7t5tRCnOsVE37jEg'>18A-qj:'K
%W'9e*JKc;2.Y/)POLKXa2?sD:nC^4@I=WN>68mH$6Fd4ep>QKTOO:3O_X;HCR6Ck/S0(ePoM?<O&"eRK[<ON\O+fH5#1TJZHM13J
%V!3gUi`+p.i2.B,)0(&ka@#NVD.UW`Y@=EgkP9<CB;@mlRl`-!hau@>eG#'jfc&Fc;>N?cqWFN_T,D)E0aF=@@Q6Y@1K(/1rjj+:
%l"hmA?k?DCUBlg<>il65\kEA)Q,h^N0&up=i?"/ZFu^8%%%88\BN4](K?QuB#`',\f&0e7%a7t-a@!S6_mqIVPo8uQ8pu##kiAO*
%dk3+4=gmB1#1MY)aI"/g&j8#4;Hh=hmD,M<N:0/:PBk.Bb:!))1Q,Eqk_e=Q@l?>h?'&."("]"3m'V4aTN5FDG?<k2p?sm&WXi5O
%?uO\1@D+g!<bH_H^9`7C]J;=j,R2<q%oqD$cLd_iD5]bML0=q;CUgt9gU\?NprI^08kJpJMWbcPHO\u@@t:\TRmu`3EP=e/XT+=0
%Dgm'0gL!0o\GZ!h_l)Dj+ohN(YQ),Fr9s=GI'18_5J;GirU\deYQ&osqtT-npQtomSmK-[rV#:5a6UM+J"=<d]mg"OmHsT=rL`!H
%$Nq"5#<mS4q2`;jpu28M/M*O~>
%AI9_PrivateDataEnd
