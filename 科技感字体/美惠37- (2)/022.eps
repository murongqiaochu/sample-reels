%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: plata_10.eps
%%Creator: Adobe Illustrator(R) 19.1
%%For: user
%%CreationDate: 5/12/2016
%%BoundingBox: 0 0 1200 1200
%%HiResBoundingBox: 0 0 1200 1200
%%CropBox: 0 0 1200 1200
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.1.0 x29 R agm 4.7731 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=100 RasterRes=1 GradRes=1 Text=1 Stroke=0 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c067 79.157747, 2015/03/30-23:40:42        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
            xmlns:photoshop="http://ns.adobe.com/photoshop/1.0/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">abstract vector background with high tech circuit board Vector Illustration</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:creator>
            <rdf:Seq>
               <rdf:li>Iryna</rdf:li>
            </rdf:Seq>
         </dc:creator>
         <dc:description>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">abstract vector background with high tech circuit board Vector Illustration</rdf:li>
            </rdf:Alt>
         </dc:description>
         <dc:subject>
            <rdf:Bag>
               <rdf:li>circuit</rdf:li>
               <rdf:li>vector</rdf:li>
               <rdf:li>backgrounds</rdf:li>
               <rdf:li>tech</rdf:li>
               <rdf:li>processor</rdf:li>
               <rdf:li>abstract</rdf:li>
               <rdf:li>abstraction</rdf:li>
               <rdf:li>chip</rdf:li>
               <rdf:li>card</rdf:li>
               <rdf:li>design</rdf:li>
               <rdf:li>electrical equipment</rdf:li>
               <rdf:li>integrated</rdf:li>
               <rdf:li>technical</rdf:li>
               <rdf:li>computer part</rdf:li>
               <rdf:li>hardware</rdf:li>
               <rdf:li>engineering</rdf:li>
               <rdf:li>line</rdf:li>
               <rdf:li>cyberspace</rdf:li>
               <rdf:li>computer equipment</rdf:li>
               <rdf:li>graphic</rdf:li>
               <rdf:li>electronics industry</rdf:li>
               <rdf:li>digital</rdf:li>
               <rdf:li>technology</rdf:li>
               <rdf:li>computer</rdf:li>
               <rdf:li>circuit board</rdf:li>
               <rdf:li>illustration</rdf:li>
               <rdf:li>creativity</rdf:li>
               <rdf:li>connection</rdf:li>
               <rdf:li>computing</rdf:li>
               <rdf:li>backdrop</rdf:li>
               <rdf:li>science</rdf:li>
               <rdf:li>cover</rdf:li>
               <rdf:li>internal</rdf:li>
               <rdf:li>connect</rdf:li>
               <rdf:li>art</rdf:li>
               <rdf:li>industry</rdf:li>
               <rdf:li>conceptual</rdf:li>
               <rdf:li>construction</rdf:li>
               <rdf:li>textured</rdf:li>
               <rdf:li>computer chip</rdf:li>
               <rdf:li>mother board</rdf:li>
               <rdf:li>motherboard</rdf:li>
               <rdf:li>black</rdf:li>
               <rdf:li>blue</rdf:li>
            </rdf:Bag>
         </dc:subject>
         <xmp:MetadataDate>2016-05-12T13:17:37+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2016-05-12T13:17:37+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2016-05-12T13:17:37+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A8qYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUTp+nX2o3s&#xA;VlYwtcXcxIihQVZiASafQMnCBmaiLLVnzwxQM5nhiOZX6ro+qaReNZ6lbSWl0oDGKUUPFuhHiMOT&#xA;FKBqQosdNqseeHHjkJR7wg8rb3Yq7FXYq7FXYq7FXYq7FXYqjF0m+fS21RI+dnHJ6MzoQxjYgFfU&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:982ba474-dbd5-1d4e-b2ff-c25c0c265e96</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:982ba474-dbd5-1d4e-b2ff-c25c0c265e96</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:b3f4ba29-d1c0-473d-a0bf-49954dc24276</stRef:instanceID>
            <stRef:documentID>xmp.did:BC3AAF57E0BDE511B2BBC0EB12123494</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F07763D45588E411BF89F345A28D8C9F</stEvt:instanceID>
                  <stEvt:when>2014-12-20T17:10:37+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:29845C695A88E411BF89F345A28D8C9F</stEvt:instanceID>
                  <stEvt:when>2014-12-20T17:19:01+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:2E845C695A88E411BF89F345A28D8C9F</stEvt:instanceID>
                  <stEvt:when>2014-12-20T17:33:07+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4365C60ACE89E4119A65C8F5B8A1FEA0</stEvt:instanceID>
                  <stEvt:when>2014-12-22T13:34:24+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0B5A99264D6BE51194FFADFDE0B012D7</stEvt:instanceID>
                  <stEvt:when>2015-10-05T13:38+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:BC3AAF57E0BDE511B2BBC0EB12123494</stEvt:instanceID>
                  <stEvt:when>2016-01-18T14:40:03+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F97BC81AF2BDE5119314DC75DE111CE2</stEvt:instanceID>
                  <stEvt:when>2016-01-18T16:45:23+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Bridge CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/metadata</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:5F653C0AF8BDE5119314DC75DE111CE2</stEvt:instanceID>
                  <stEvt:when>2016-01-18T17:27:52+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Bridge CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/metadata</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:982ba474-dbd5-1d4e-b2ff-c25c0c265e96</stEvt:instanceID>
                  <stEvt:when>2016-05-12T13:17:37+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>1200.000000</stDim:w>
            <stDim:h>1200.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=0 B=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
         <photoshop:Headline>abstract vector background with high tech circuit board</photoshop:Headline>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1200 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1200 li
1200 1200 li
1200 0 li
cp
clp
1200 1200 mo
0 1200 li
0 0 li
1200 0 li
1200 1200 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
0 0 0 rgb
f
532.035 451.133 mo
533.399 449.795 535.589 449.816 536.925 451.182 cv
538.262 452.545 538.237 454.736 536.876 456.07 cv
535.511 457.406 533.321 457.383 531.984 456.02 cv
530.647 454.658 530.671 452.467 532.035 451.133 cv
cp
527.271 455.103 mo
528.276 456.334 530.101 457.502 531.39 458.156 cv
534.724 459.848 538.288 460.871 540.956 458.258 cv
543.627 455.645 543.671 451.359 541.058 448.691 cv
538.44 446.023 534.667 446.625 531.489 448.59 cv
530.106 449.447 528.423 450.522 527.417 451.647 cv
517.85 451.647 li
509.925 460.584 li
512.511 462.877 li
519.402 455.103 li
527.271 455.103 li
cp
0 .862745 1 rgb
f
588.502 462.533 mo
589.854 463.885 589.854 466.072 588.502 467.422 cv
587.152 468.773 584.965 468.773 583.614 467.422 cv
582.263 466.072 582.263 463.885 583.614 462.533 cv
584.965 461.182 587.152 461.182 588.502 462.533 cv
cp
583.336 459.008 mo
582.573 459.959 581.904 461.082 581.47 461.963 cv
579.813 465.309 578.829 468.885 581.47 471.527 cv
584.112 474.17 588.394 474.17 591.036 471.527 cv
593.677 468.885 593.035 465.119 591.036 461.963 cv
589.874 460.127 588.323 457.758 586.793 457.188 cv
586.793 437.98 li
558.836 408.998 li
511.218 408.998 li
511.218 412.457 li
557.367 412.457 li
583.336 439.375 li
583.336 459.008 li
cp
f
642.589 387.02 mo
643.952 385.682 646.141 385.705 647.477 387.07 cv
648.814 388.434 648.791 390.623 647.427 391.959 cv
646.063 393.293 643.874 393.273 642.538 391.908 cv
641.2 390.545 641.224 388.357 642.589 387.02 cv
cp
637.713 390.846 mo
638.686 392.129 640.602 393.365 641.942 394.047 cv
645.276 395.734 648.841 396.762 651.51 394.145 cv
654.179 391.531 654.224 387.248 651.61 384.578 cv
648.995 381.91 645.219 382.516 642.041 384.48 cv
640.718 385.299 639.115 386.316 638.099 387.389 cv
636.624 387.389 li
585.788 336.098 li
511.218 336.098 li
511.218 339.557 li
584.347 339.557 li
635.182 390.846 li
637.713 390.846 li
cp
f
686.337 222.643 mo
684.47 222.242 683.277 220.406 683.676 218.539 cv
684.073 216.67 685.907 215.48 687.776 215.877 cv
689.644 216.273 690.837 218.109 690.438 219.979 cv
690.042 221.844 688.204 223.037 686.337 222.643 cv
cp
704.538 234.297 mo
692.739 222.752 li
692.883 221.555 692.887 220.227 692.874 219.076 cv
692.833 215.34 691.321 211.832 687.665 211.053 cv
684.012 210.275 680.418 212.609 679.642 216.262 cv
678.864 219.918 681.636 222.379 684.851 224.287 cv
686.536 225.289 689.53 226.592 691.103 225.99 cv
702.118 236.77 li
704.538 234.297 li
cp
f
624.556 342.916 mo
624.556 344.828 623.011 346.375 621.099 346.375 cv
619.19 346.375 617.642 344.828 617.642 342.916 cv
617.642 341.008 619.19 339.459 621.099 339.459 cv
623.011 339.459 624.556 341.008 624.556 342.916 cv
cp
614.984 340.822 mo
615.129 341.975 615.426 343.152 615.724 344.031 cv
616.918 347.568 618.749 350.795 622.487 350.795 cv
626.222 350.795 629.25 347.766 629.25 344.031 cv
629.25 340.293 626.132 338.08 622.487 337.264 cv
620.276 336.768 617.367 336.178 615.942 337 cv
615.511 336.602 li
559.392 280.775 li
555.161 280.775 li
547.727 272.609 li
547.442 194.18 li
565.883 175.738 li
565.883 88.7246 li
540.342 63.4492 li
537.91 65.9082 li
562.425 90.166 li
562.425 174.307 li
543.979 192.75 li
544.274 273.955 li
553.632 284.232 li
557.965 284.232 li
613.116 339.098 li
614.984 340.822 li
cp
f
674.843 346.857 mo
674.843 348.766 673.293 350.315 671.385 350.315 cv
669.474 350.315 667.927 348.766 667.927 346.857 cv
667.927 344.947 669.474 343.4 671.385 343.4 cv
673.293 343.4 674.843 344.947 674.843 346.857 cv
cp
586.627 76.9473 mo
586.343 187.541 li
568.311 204.828 li
568.311 249.498 li
596.854 278.469 li
619.921 278.469 li
651.461 309.449 li
651.461 327.818 li
665.176 343.344 li
665.144 344.859 665.585 346.719 666.008 347.969 cv
667.204 351.508 669.034 354.73 672.771 354.73 cv
676.507 354.73 679.536 351.703 679.536 347.969 cv
679.536 344.23 676.416 342.018 672.771 341.201 cv
671.043 340.815 668.894 340.371 667.35 340.582 cv
654.919 326.512 li
654.919 307.998 li
621.335 275.012 li
598.302 275.012 li
571.769 248.082 li
571.769 206.305 li
589.797 189.02 li
590.089 75.4297 li
575.397 61.9492 li
573.059 64.4961 li
586.627 76.9473 li
cp
f
694.435 461.826 mo
694.435 463.734 692.888 465.283 690.977 465.283 cv
689.067 465.283 687.519 463.734 687.519 461.826 cv
687.519 459.916 689.067 458.369 690.977 458.369 cv
692.888 458.369 694.435 459.916 694.435 461.826 cv
cp
684.885 339.252 mo
680.552 336.098 li
671.815 336.098 li
660.646 323.902 li
660.646 305.703 li
622.493 267.807 li
601.22 267.807 li
577.307 243.756 li
577.307 209.203 li
596.425 191.336 li
596.425 73.1582 li
584.952 61.9844 li
582.54 64.4629 li
592.968 74.6152 li
592.968 189.832 li
573.849 207.699 li
573.849 245.182 li
599.782 271.266 li
621.069 271.266 li
657.188 307.141 li
657.188 325.246 li
670.293 339.557 li
679.425 339.557 li
681.427 341.012 li
681.427 455.652 li
684.771 458.297 li
684.735 459.816 685.176 461.684 685.601 462.94 cv
686.796 466.477 688.627 469.701 692.364 469.701 cv
696.099 469.701 699.13 466.672 699.13 462.94 cv
699.13 459.201 696.012 456.988 692.364 456.172 cv
690.616 455.779 688.431 455.328 686.883 455.559 cv
684.885 453.978 li
684.885 339.252 li
cp
f
769.927 570.553 mo
769.927 572.461 768.379 574.012 766.47 574.012 cv
764.559 574.012 763.012 572.461 763.012 570.553 cv
763.012 569.736 763.306 568.996 763.778 568.406 cv
764.341 567.848 li
764.929 567.383 765.662 567.096 766.47 567.096 cv
768.379 567.096 769.927 568.643 769.927 570.553 cv
cp
760.352 568.447 mo
760.497 569.602 760.793 570.785 761.093 571.666 cv
762.289 575.203 764.119 578.428 767.856 578.428 cv
771.593 578.428 774.62 575.4 774.62 571.666 cv
774.62 567.928 771.501 565.719 767.856 564.896 cv
765.685 564.41 762.84 563.826 761.385 564.582 cv
703.902 506.832 li
703.902 455.285 li
691.513 442.029 li
691.513 337.111 li
684.449 330.049 li
676.668 330.049 li
667.31 320.688 li
667.31 303.109 li
626.242 262.334 li
604.336 262.334 li
583.745 242.016 li
583.745 212.322 li
602.229 193.305 li
602.229 70.2676 li
593.589 61.9766 li
591.194 64.4746 li
598.772 71.7422 li
598.772 191.9 li
580.288 210.916 li
580.288 243.461 li
602.918 265.791 li
624.816 265.791 li
663.852 304.547 li
663.852 322.119 li
675.237 333.506 li
683.017 333.506 li
688.056 338.543 li
688.056 443.395 li
700.444 456.65 li
700.444 508.26 li
760.352 568.447 li
cp
f
760.851 541.346 mo
760.851 543.256 759.304 544.803 757.394 544.803 cv
755.481 544.803 753.935 543.256 753.935 541.346 cv
753.935 539.434 755.481 537.887 757.394 537.887 cv
759.304 537.887 760.851 539.434 760.851 541.346 cv
cp
605.069 70.0273 mo
605.069 196.238 li
586.627 215.83 li
586.627 239.141 li
607.818 260.027 li
628.16 260.027 li
669.614 300.52 li
669.614 310.889 li
694.827 335.67 li
694.827 442.234 li
706.497 454.912 li
706.497 494.143 li
751.229 538.871 li
751.349 540.137 751.686 541.482 752.016 542.457 cv
753.212 545.996 755.043 549.223 758.778 549.223 cv
762.515 549.223 765.543 546.195 765.543 542.457 cv
765.543 538.721 762.425 536.51 758.778 535.693 cv
756.714 535.227 754.032 534.674 752.524 535.277 cv
709.956 492.711 li
709.956 453.56 li
698.286 440.885 li
698.286 334.221 li
673.071 309.44 li
673.071 299.063 li
629.567 256.57 li
609.236 256.57 li
590.085 237.695 li
590.085 217.201 li
608.527 197.611 li
608.527 68.5195 li
599.907 60.5156 li
597.554 63.0469 li
605.069 70.0273 li
cp
f
709.582 435.508 mo
709.582 437.42 708.036 438.967 706.124 438.967 cv
704.215 438.967 702.667 437.42 702.667 435.508 cv
702.667 433.598 704.215 432.051 706.124 432.051 cv
708.036 432.051 709.582 433.598 709.582 435.508 cv
cp
699.87 322.125 mo
699.87 432.34 li
699.929 432.34 li
699.96 433.787 700.356 435.463 700.749 436.619 cv
701.944 440.158 703.776 443.387 707.513 443.387 cv
711.247 443.387 714.276 440.355 714.276 436.619 cv
714.276 432.885 711.157 430.674 707.513 429.855 cv
706.212 429.563 704.671 429.24 703.327 429.185 cv
703.327 320.68 li
613.714 232.217 li
613.714 64.6797 li
610.257 64.6797 li
610.257 233.662 li
699.87 322.125 li
cp
f
716.765 414.857 mo
716.765 416.768 715.216 418.315 713.307 418.315 cv
711.396 418.315 709.849 416.768 709.849 414.857 cv
709.849 412.945 711.396 411.398 713.307 411.398 cv
715.216 411.398 716.765 412.945 716.765 414.857 cv
cp
617.521 61.7852 mo
617.521 231.066 li
705.058 318.662 li
705.058 407.848 li
707.159 410.648 li
706.932 412.252 707.438 414.52 707.929 415.967 cv
709.126 419.508 710.956 422.734 714.692 422.734 cv
718.429 422.734 721.458 419.705 721.458 415.967 cv
721.458 412.232 718.339 410.022 714.692 409.205 cv
713.188 408.867 711.354 408.478 709.886 408.523 cv
708.515 406.695 li
708.515 317.23 li
620.979 229.635 li
620.979 61.7852 li
617.521 61.7852 li
cp
f
723.944 398.953 mo
723.944 400.863 722.397 402.41 720.487 402.41 cv
718.577 402.41 717.029 400.863 717.029 398.953 cv
717.029 397.041 718.577 395.496 720.487 395.496 cv
722.397 395.496 723.944 397.041 723.944 398.953 cv
cp
715.718 314.055 mo
626.968 225.883 li
626.968 63.2246 li
623.51 63.2246 li
623.51 227.322 li
712.26 315.494 li
712.26 392.18 li
714.286 395.65 li
714.294 397.127 714.706 398.873 715.11 400.065 cv
716.307 403.605 718.137 406.832 721.873 406.832 cv
725.609 406.832 728.638 403.801 728.638 400.065 cv
728.638 396.328 725.521 394.117 721.873 393.301 cv
720.183 392.92 718.087 392.49 716.551 392.67 cv
715.718 391.242 li
715.718 314.055 li
cp
f
728.759 379.645 mo
728.759 381.553 727.212 383.103 725.3 383.103 cv
723.392 383.103 721.843 381.553 721.843 379.645 cv
721.843 377.732 723.392 376.185 725.3 376.185 cv
727.212 376.185 728.759 377.732 728.759 379.645 cv
cp
629.561 61.7852 mo
629.561 226.168 li
716.869 313.188 li
716.869 370.818 li
719.193 375.205 li
718.875 376.816 719.409 379.238 719.925 380.756 cv
721.12 384.293 722.952 387.52 726.688 387.52 cv
730.425 387.52 733.454 384.49 733.454 380.756 cv
733.454 377.018 730.336 374.809 726.688 373.988 cv
725.257 373.668 723.533 373.309 722.102 373.313 cv
720.327 369.961 li
720.327 311.752 li
633.019 224.73 li
633.019 61.7852 li
629.561 61.7852 li
cp
f
734.991 362.703 mo
734.991 364.615 733.445 366.162 731.534 366.162 cv
729.622 366.162 728.077 364.615 728.077 362.703 cv
728.077 360.793 729.622 359.246 731.534 359.246 cv
733.445 359.246 734.991 360.793 734.991 362.703 cv
cp
635.511 63.2246 mo
635.511 222.992 li
723.497 311.742 li
723.497 354.443 li
725.544 357.853 li
725.018 359.43 725.596 362.156 726.158 363.815 cv
727.354 367.353 729.185 370.582 732.922 370.582 cv
736.657 370.582 739.685 367.553 739.685 363.815 cv
739.685 360.08 736.567 357.867 732.922 357.051 cv
731.607 356.754 730.048 356.43 728.692 356.379 cv
726.956 353.486 li
726.956 310.316 li
638.969 221.566 li
638.969 63.2246 li
635.511 63.2246 li
cp
f
741.676 341.959 mo
741.676 343.869 740.127 345.416 738.218 345.416 cv
736.307 345.416 734.761 343.869 734.761 341.959 cv
734.761 340.047 736.307 338.498 738.218 338.498 cv
740.127 338.498 741.676 340.047 741.676 341.959 cv
cp
730.126 334.391 mo
732.237 337.08 li
731.693 338.65 732.276 341.4 732.841 343.068 cv
734.038 346.607 735.868 349.836 739.604 349.836 cv
743.341 349.836 746.37 346.807 746.37 343.068 cv
746.37 339.334 743.251 337.121 739.604 336.305 cv
738.331 336.018 736.826 335.701 735.502 335.637 cv
733.584 333.195 li
733.584 305.996 li
646.275 217.822 li
646.275 63.2246 li
642.817 63.2246 li
642.817 219.244 li
730.126 307.416 li
730.126 334.391 li
cp
f
760.851 461.826 mo
760.851 463.734 759.304 465.283 757.394 465.283 cv
755.481 465.283 753.935 463.734 753.935 461.826 cv
753.935 459.916 755.481 458.369 757.394 458.369 cv
759.304 458.369 760.851 459.916 760.851 461.826 cv
cp
751.244 459.469 mo
751.372 460.699 751.696 461.994 752.016 462.94 cv
753.212 466.477 755.043 469.701 758.778 469.701 cv
762.515 469.701 765.543 466.672 765.543 462.94 cv
765.543 459.201 762.425 456.988 758.778 456.172 cv
756.903 455.75 754.522 455.26 752.969 455.621 cv
752.024 454.047 li
752.024 335.369 li
739.635 323.268 li
739.635 302.541 li
652.036 213.504 li
652.036 63.2246 li
648.579 63.2246 li
648.579 214.918 li
736.177 303.955 li
736.177 324.723 li
748.566 336.824 li
748.566 455.006 li
751.244 459.469 li
cp
f
857.182 97.291 mo
857.147 99.2031 855.57 100.721 853.664 100.688 cv
851.756 100.654 850.232 99.0801 850.266 97.1699 cv
850.3 95.2617 851.874 93.7383 853.785 93.7754 cv
855.693 93.8066 857.215 95.3828 857.182 97.291 cv
cp
856.543 91.0996 mo
855.21 91.1719 853.746 91.502 852.704 91.834 cv
849.146 92.9707 845.89 94.7441 845.823 98.4785 cv
845.758 102.217 848.733 105.297 852.471 105.361 cv
856.204 105.426 858.469 102.35 859.352 98.7168 cv
859.855 96.6348 860.469 93.9219 859.856 92.4141 cv
863.536 87.2617 li
863.536 59.4785 li
860.078 59.4785 li
860.078 86.1563 li
856.543 91.0996 li
cp
f
822.607 635.289 mo
822.607 637.197 821.06 638.748 819.149 638.748 cv
817.239 638.748 815.691 637.197 815.691 635.289 cv
815.691 633.381 817.239 631.83 819.149 631.83 cv
821.06 631.83 822.607 633.381 822.607 635.289 cv
cp
862.673 155.563 mo
862.673 191.447 li
808.212 245.475 li
808.212 583.908 li
798.271 593.85 li
798.271 617.346 li
812.97 631.447 li
812.855 633.018 813.318 635.057 813.772 636.4 cv
814.969 639.941 816.8 643.166 820.535 643.166 cv
824.272 643.166 827.302 640.137 827.302 636.4 cv
827.302 632.664 824.182 630.453 820.535 629.635 cv
818.911 629.269 816.915 628.859 815.397 628.984 cv
801.728 615.869 li
801.728 595.281 li
811.669 585.34 li
811.669 246.916 li
866.131 192.889 li
866.131 157.025 li
880.825 142.762 li
880.825 63.2246 li
877.367 63.2246 li
877.367 141.299 li
862.673 155.563 li
cp
f
1007.06 602.746 mo
1008.41 604.098 1008.41 606.285 1007.06 607.635 cv
1005.71 608.986 1003.53 608.986 1002.17 607.635 cv
1000.82 606.285 1000.82 604.098 1002.17 602.746 cv
1003.53 601.393 1005.71 601.393 1007.06 602.746 cv
cp
954.736 442.992 mo
935.285 462.01 li
935.285 508.414 li
1003.14 574.977 li
1003.14 597.941 li
1001.89 598.94 1000.69 600.84 1000.03 602.174 cv
998.375 605.521 997.39 609.098 1000.03 611.742 cv
1002.67 614.381 1006.96 614.381 1009.6 611.74 cv
1012.24 609.098 1011.6 605.33 1009.6 602.174 cv
1008.75 600.842 1007.7 599.225 1006.6 598.221 cv
1006.6 573.525 li
938.742 506.963 li
938.742 463.463 li
958.191 444.447 li
958.191 428.475 li
937.015 406.289 li
937.015 156.02 li
911.081 129.652 li
911.081 64.6797 li
907.623 64.6797 li
907.623 131.068 li
933.557 157.434 li
933.557 407.676 li
954.736 429.859 li
954.736 442.992 li
cp
f
914.769 601.164 mo
916.121 602.514 916.121 604.703 914.769 606.053 cv
913.42 607.402 911.232 607.402 909.882 606.053 cv
908.531 604.703 908.531 602.514 909.882 601.164 cv
911.232 599.813 913.42 599.813 914.769 601.164 cv
cp
868.683 314.203 mo
867.331 312.853 867.331 310.666 868.683 309.315 cv
870.033 307.967 872.221 307.967 873.571 309.315 cv
874.923 310.666 874.923 312.853 873.571 314.203 cv
872.221 315.559 870.033 315.559 868.683 314.203 cv
cp
914.25 566.191 mo
872.829 524.482 li
872.829 318.818 li
874.002 317.783 875.098 316.029 875.716 314.779 cv
877.373 311.43 878.356 307.853 875.716 305.209 cv
873.073 302.568 868.791 302.572 866.149 305.213 cv
863.509 307.853 864.149 311.621 866.149 314.779 cv
867.054 316.201 868.191 317.951 869.373 318.928 cv
869.373 525.906 li
910.793 567.615 li
910.793 596.408 li
909.558 597.416 908.388 599.279 907.737 600.594 cv
906.083 603.94 905.098 607.516 907.737 610.158 cv
910.382 612.803 914.662 612.803 917.305 610.158 cv
919.945 607.516 919.307 603.75 917.305 600.594 cv
916.443 599.231 915.364 597.578 914.24 596.582 cv
914.25 596.582 li
914.25 566.191 li
cp
f
906.035 307.336 mo
904.168 306.938 902.977 305.1 903.375 303.232 cv
903.771 301.365 905.607 300.174 907.475 300.572 cv
909.344 300.969 910.535 302.805 910.14 304.672 cv
909.74 306.539 907.902 307.73 906.035 307.336 cv
cp
944.07 633.307 mo
945.42 634.658 945.42 636.848 944.07 638.197 cv
942.719 639.547 940.531 639.547 939.18 638.197 cv
937.828 636.848 937.831 634.658 939.18 633.307 cv
940.531 631.955 942.719 631.955 944.07 633.307 cv
cp
890.082 395.879 mo
890.082 514.881 li
939.029 564.441 li
939.029 629.625 li
938.213 630.607 937.495 631.809 937.037 632.734 cv
935.379 636.084 934.394 639.66 937.037 642.303 cv
939.678 644.945 943.96 644.941 946.602 642.301 cv
949.244 639.66 948.602 635.893 946.602 632.734 cv
945.474 630.951 943.974 628.666 942.486 628.016 cv
942.486 563.023 li
893.54 513.463 li
893.54 397.334 li
917.418 373.994 li
917.418 311.978 li
912.425 307.572 li
912.586 306.344 912.586 304.959 912.573 303.77 cv
912.533 300.039 911.019 296.527 907.364 295.746 cv
903.712 294.971 900.119 297.305 899.34 300.959 cv
898.563 304.611 901.338 307.072 904.55 308.98 cv
906.219 309.973 909.165 311.258 910.752 310.707 cv
913.96 313.539 li
913.96 372.539 li
890.082 395.879 li
cp
f
975.231 635.289 mo
975.231 637.197 973.685 638.748 971.773 638.748 cv
969.864 638.748 968.316 637.197 968.316 635.289 cv
968.316 633.381 969.864 631.83 971.773 631.83 cv
973.685 631.83 975.231 633.381 975.231 635.289 cv
cp
909.685 289.352 mo
907.819 288.953 906.627 287.117 907.025 285.25 cv
907.42 283.381 909.257 282.19 911.123 282.588 cv
912.99 282.982 914.185 284.82 913.787 286.688 cv
913.39 288.555 911.553 289.75 909.685 289.352 cv
cp
954.016 556.676 mo
914.25 517.199 li
914.25 440.205 li
924.623 428.682 li
924.623 297.275 li
916.053 289.779 li
916.239 288.508 916.237 287.039 916.223 285.789 cv
916.182 282.055 914.67 278.543 911.015 277.764 cv
907.364 276.986 903.769 279.32 902.99 282.973 cv
902.213 286.627 904.985 289.092 908.199 290.996 cv
909.808 291.953 912.612 293.193 914.235 292.785 cv
921.166 298.848 li
921.166 427.353 li
910.793 438.879 li
910.793 518.637 li
950.557 558.113 li
950.557 617.18 li
965.581 632.205 li
965.627 633.633 966.013 635.266 966.396 636.4 cv
967.594 639.941 969.424 643.166 973.16 643.166 cv
976.896 643.166 979.927 640.137 979.927 636.4 cv
979.927 632.664 976.805 630.453 973.16 629.635 cv
971.285 629.213 968.903 628.723 967.351 629.084 cv
954.016 615.748 li
954.016 556.676 li
cp
f
974.357 606.012 mo
974.206 607.914 972.543 609.336 970.64 609.185 cv
968.735 609.037 967.313 607.373 967.46 605.473 cv
967.61 603.568 969.275 602.146 971.18 602.295 cv
973.082 602.443 974.507 604.107 974.357 606.012 cv
cp
915.523 268.6 mo
913.654 268.203 912.465 266.365 912.861 264.496 cv
913.258 262.627 915.096 261.44 916.963 261.834 cv
918.831 262.232 920.021 264.07 919.625 265.938 cv
919.228 267.805 917.391 268.996 915.523 268.6 cv
cp
962.185 555.244 mo
920.302 513.453 li
920.302 443.99 li
931.257 432.746 li
930.096 278.08 li
921.87 269.131 li
922.073 267.834 922.075 266.32 922.06 265.035 cv
922.019 261.301 920.507 257.789 916.852 257.014 cv
913.199 256.234 909.605 258.566 908.828 262.223 cv
908.052 265.873 910.824 268.338 914.04 270.246 cv
915.583 271.162 918.235 272.344 919.881 272.074 cv
926.646 279.438 li
927.79 431.352 li
916.844 442.586 li
916.844 514.889 li
958.713 556.662 li
958.331 590.75 li
964.823 601.916 li
964.989 601.818 li
964.854 603.316 965.144 605.17 965.46 606.428 cv
966.379 610.051 967.952 613.408 971.677 613.701 cv
975.402 613.994 978.656 611.211 978.949 607.488 cv
979.24 603.76 976.305 601.315 972.732 600.215 cv
970.991 599.676 968.798 599.037 967.231 599.176 cv
961.799 589.834 li
962.185 555.244 li
cp
f
917.644 634.359 mo
917.611 636.269 916.035 637.789 914.125 637.756 cv
912.219 637.721 910.698 636.148 910.728 634.238 cv
910.765 632.33 912.338 630.807 914.248 630.842 cv
916.156 630.875 917.678 632.451 917.644 634.359 cv
cp
876.358 295.254 mo
874.489 294.855 873.299 293.02 873.695 291.15 cv
874.092 289.283 875.929 288.092 877.796 288.49 cv
879.665 288.885 880.855 290.723 880.458 292.59 cv
880.061 294.457 878.227 295.648 876.358 295.254 cv
cp
913.17 628.902 mo
909.611 630.039 906.355 631.813 906.29 635.547 cv
906.223 639.285 909.198 642.365 912.934 642.432 cv
916.668 642.496 918.934 639.414 919.814 635.785 cv
920.215 634.144 920.666 632.125 920.55 630.598 cv
930.098 622.141 li
930.098 570.217 li
877.943 518.35 li
877.943 323.199 li
886.444 313.404 li
886.444 299.219 li
882.744 295.518 li
882.907 294.283 882.908 292.887 882.896 291.688 cv
882.852 287.953 881.34 284.445 877.685 283.666 cv
874.031 282.889 870.44 285.221 869.661 288.875 cv
868.884 292.529 871.657 294.99 874.87 296.898 cv
876.511 297.873 879.386 299.133 880.99 298.654 cv
882.986 300.65 li
882.986 312.115 li
874.485 321.91 li
874.485 519.787 li
926.641 571.654 li
926.641 620.584 li
918.063 628.18 li
916.506 628.059 914.499 628.479 913.17 628.902 cv
cp
f
942.377 665.047 mo
942.412 663.137 943.986 661.615 945.894 661.65 cv
947.805 661.684 949.327 663.256 949.291 665.166 cv
949.258 667.076 947.682 668.596 945.773 668.563 cv
943.865 668.531 942.344 666.955 942.377 665.047 cv
cp
905.144 425.869 mo
903.793 424.518 903.793 422.33 905.144 420.978 cv
906.494 419.629 908.684 419.629 910.031 420.978 cv
911.383 422.33 911.383 424.518 910.031 425.869 cv
908.684 427.221 906.494 427.221 905.144 425.869 cv
cp
951.463 666.594 mo
951.962 664.533 952.561 661.861 951.985 660.342 cv
959.779 652.01 li
959.779 630.789 li
948.252 617.824 li
948.252 561.01 li
909.064 520.957 li
909.064 430.668 li
910.321 429.67 911.519 427.773 912.177 426.44 cv
913.832 423.094 914.819 419.518 912.177 416.873 cv
909.533 414.232 905.252 414.232 902.61 416.873 cv
899.967 419.518 900.61 423.281 902.61 426.44 cv
903.456 427.775 904.508 429.393 905.607 430.395 cv
905.607 522.367 li
944.793 562.422 li
944.793 619.137 li
956.323 632.104 li
956.323 650.646 li
948.524 658.977 li
947.227 659.065 945.825 659.389 944.819 659.709 cv
941.258 660.846 938 662.619 937.935 666.357 cv
937.871 670.092 940.848 673.172 944.582 673.24 cv
948.316 673.303 950.581 670.223 951.463 666.594 cv
cp
f
958.838 457.586 mo
957.49 456.234 957.49 454.047 958.838 452.695 cv
960.189 451.346 962.382 451.346 963.728 452.695 cv
965.078 454.047 965.078 456.234 963.728 457.586 cv
962.382 458.935 960.189 458.935 958.838 457.586 cv
cp
965.873 452.125 mo
965.346 451.057 964.475 449.627 963.504 448.588 cv
963.504 424.846 li
942.486 404.1 li
942.486 151.813 li
918.015 128.326 li
918.015 64.6797 li
914.557 64.6797 li
914.557 129.801 li
939.029 153.287 li
939.029 405.545 li
960.048 426.291 li
960.048 447.605 li
958.686 448.438 957.342 450.49 956.307 452.125 cv
954.307 455.283 953.666 459.049 956.307 461.691 cv
958.949 464.332 963.231 464.332 965.873 461.691 cv
968.516 459.049 967.529 455.473 965.873 452.125 cv
cp
f
1001.1 460.922 mo
1002.45 462.273 1002.45 464.461 1001.1 465.81 cv
999.746 467.158 997.557 467.158 996.206 465.81 cv
994.855 464.461 994.855 462.273 996.206 460.922 cv
997.557 459.566 999.746 459.566 1001.1 460.922 cv
cp
1000.13 456.117 mo
1000.13 447.898 li
996.67 447.898 li
996.67 456.395 li
995.57 457.397 994.519 459.014 993.674 460.348 cv
991.674 463.506 991.031 467.273 993.674 469.914 cv
996.316 472.555 1000.6 472.559 1003.24 469.918 cv
1005.88 467.273 1004.9 463.697 1003.24 460.348 cv
1002.58 459.016 1001.38 457.115 1000.13 456.117 cv
cp
f
1068.24 508.547 mo
1069.59 509.902 1069.58 512.088 1068.22 513.435 cv
1066.87 514.781 1064.68 514.773 1063.34 513.42 cv
1061.99 512.066 1062 509.877 1063.35 508.529 cv
1064.71 507.182 1066.9 507.19 1068.24 508.547 cv
cp
1060.82 507.949 mo
1058.81 511.103 1058.16 514.865 1060.79 517.516 cv
1063.42 520.166 1067.71 520.184 1070.36 517.549 cv
1073.01 514.912 1072.03 511.336 1070.39 507.98 cv
1069.85 506.887 1068.95 505.41 1067.96 504.361 cv
1067.96 496.373 li
1064.5 496.373 li
1064.5 503.484 li
1063.16 504.342 1061.84 506.35 1060.82 507.949 cv
cp
f
1062.09 579.275 mo
1060.75 577.922 1060.76 575.732 1062.11 574.387 cv
1063.46 573.039 1065.65 573.047 1067 574.404 cv
1068.34 575.758 1068.34 577.945 1066.99 579.293 cv
1065.63 580.635 1063.44 580.629 1062.09 579.275 cv
cp
1056.61 448.316 mo
1055.19 447.033 1055.08 444.85 1056.36 443.435 cv
1057.64 442.016 1059.83 441.904 1061.24 443.188 cv
1062.66 444.469 1062.77 446.652 1061.49 448.07 cv
1060.21 449.488 1058.02 449.6 1056.61 448.316 cv
cp
1069.14 573.836 mo
1068.81 573.15 1068.33 572.313 1067.78 571.525 cv
1068.51 570.891 1068.99 569.965 1068.99 568.92 cv
1068.99 548.459 li
1068.99 547.481 1068.57 546.545 1067.84 545.889 cv
1051.41 531.072 li
1051.41 489.057 li
1061.96 478.102 li
1062.58 477.471 1062.92 476.631 1062.93 475.748 cv
1063.22 453.707 li
1063.22 453.69 1063.22 453.676 1063.22 453.658 cv
1063.22 452.762 1062.87 451.949 1062.31 451.334 cv
1062.95 450.435 1063.54 449.412 1064.05 448.514 cv
1065.89 445.258 1066.34 441.465 1063.57 438.959 cv
1060.79 436.455 1056.52 436.666 1054.01 439.44 cv
1051.51 442.215 1052.67 445.734 1054.49 448.996 cv
1055.01 449.92 1055.81 451.121 1056.71 452.072 cv
1056.47 452.537 1056.31 453.055 1056.31 453.615 cv
1056.04 474.291 li
1045.46 485.262 li
1044.84 485.906 1044.49 486.768 1044.49 487.662 cv
1044.49 532.613 li
1044.49 533.592 1044.91 534.523 1045.63 535.18 cv
1062.07 549.996 li
1062.07 568.92 li
1062.07 569.35 1062.16 569.756 1062.3 570.137 cv
1061.3 571.141 1060.35 572.59 1059.58 573.807 cv
1057.57 576.959 1056.92 580.721 1059.55 583.371 cv
1062.18 586.023 1066.46 586.039 1069.11 583.406 cv
1071.77 580.768 1070.79 577.191 1069.14 573.836 cv
cp
f
994.355 491.209 mo
992.939 489.926 992.828 487.74 994.107 486.322 cv
995.39 484.906 997.574 484.795 998.992 486.076 cv
1000.41 487.355 1000.52 489.539 999.239 490.959 cv
997.959 492.379 995.771 492.488 994.355 491.209 cv
cp
1001.8 491.402 mo
1003.64 488.145 1004.09 484.353 1001.31 481.852 cv
998.545 479.346 994.266 479.559 991.761 482.33 cv
989.258 485.102 990.42 488.625 992.244 491.887 cv
992.851 492.977 993.86 494.443 994.939 495.44 cv
995.221 504.428 li
998.677 504.32 li
998.418 496.02 li
999.688 495.072 1000.88 493.031 1001.8 491.402 cv
cp
f
1093.69 488.709 mo
1093.96 486.818 1095.71 485.502 1097.6 485.768 cv
1099.49 486.031 1100.81 487.781 1100.54 489.672 cv
1100.28 491.563 1098.53 492.877 1096.64 492.611 cv
1094.74 492.35 1093.43 490.6 1093.69 488.709 cv
cp
1097.71 494.982 mo
1101.43 494.676 1104.82 492.922 1105.34 489.227 cv
1105.86 485.523 1103.29 482.103 1099.59 481.58 cv
1095.89 481.065 1093.63 484.002 1091.95 487.342 cv
1091.1 489.023 1090.06 491.932 1090.6 493.514 cv
1090.6 525.842 li
1094.05 525.842 li
1094.05 495.103 li
1095.25 495.162 1096.57 495.074 1097.71 494.982 cv
cp
f
971.217 667.521 mo
971.236 665.611 972.799 664.082 974.71 664.1 cv
976.621 664.117 978.152 665.68 978.133 667.59 cv
978.111 669.5 976.549 671.031 974.641 671.01 cv
972.732 670.992 971.195 669.43 971.217 667.521 cv
cp
938.287 437.34 mo
938.34 435.432 939.928 433.926 941.838 433.977 cv
943.746 434.031 945.25 435.617 945.199 437.525 cv
945.148 439.438 943.557 440.941 941.65 440.889 cv
939.742 440.838 938.236 439.246 938.287 437.34 cv
cp
980.04 668.719 mo
980.364 667.795 980.694 666.531 980.84 665.32 cv
981.498 665.141 982.11 664.768 982.581 664.205 cv
991 654.121 li
991.516 653.498 991.803 652.715 991.803 651.904 cv
991.803 587.938 li
991.803 587.049 991.463 586.197 990.852 585.557 cv
971.015 564.658 li
971.015 551.631 li
971.015 550.723 970.658 549.85 970.019 549.203 cv
931.827 510.447 li
931.827 452.435 li
937.927 445.943 li
938.56 445.268 938.864 444.4 938.854 443.537 cv
940.194 443.478 941.663 443.162 942.71 442.84 cv
946.279 441.74 949.553 439.996 949.656 436.258 cv
949.757 432.523 946.81 429.416 943.077 429.313 cv
939.34 429.215 937.048 432.272 936.132 435.895 cv
935.799 437.205 935.432 438.766 935.348 440.123 cv
934.444 440.139 933.55 440.5 932.886 441.209 cv
925.848 448.697 li
925.246 449.34 924.912 450.188 924.912 451.066 cv
924.912 511.867 li
924.912 512.775 925.269 513.646 925.906 514.293 cv
964.098 553.049 li
964.098 566.035 li
964.098 566.924 964.439 567.775 965.049 568.416 cv
984.887 589.315 li
984.887 650.65 li
977.271 659.771 li
976.884 660.238 976.654 660.777 976.548 661.332 cv
975.469 661.451 974.337 661.678 973.346 661.891 cv
969.685 662.672 966.549 664.848 966.515 668.586 cv
966.478 672.32 969.473 675.379 973.21 675.42 cv
976.945 675.451 978.809 672.246 980.04 668.719 cv
cp
f
1026.08 440.453 mo
1025.87 442.35 1024.15 443.709 1022.25 443.492 cv
1020.36 443.273 1019 441.557 1019.21 439.66 cv
1019.43 437.762 1021.15 436.404 1023.04 436.619 cv
1024.95 436.84 1026.3 438.555 1026.08 440.453 cv
cp
1021.92 434.279 mo
1018.2 434.676 1014.85 436.514 1014.43 440.227 cv
1014 443.938 1016.66 447.295 1020.37 447.723 cv
1024.08 448.148 1026.27 445.154 1027.87 441.775 cv
1028.2 441.065 1028.57 440.137 1028.84 439.184 cv
1029.54 439.055 1030.21 438.717 1030.74 438.156 cv
1039.64 428.647 li
1040.26 427.982 1040.57 427.135 1040.57 426.287 cv
1040.57 425.365 1040.2 424.443 1039.47 423.762 cv
1038.08 422.457 1035.89 422.529 1034.59 423.924 cv
1025.69 433.432 li
1025.5 433.627 1025.35 433.842 1025.23 434.065 cv
1024.12 434.065 1022.95 434.172 1021.92 434.279 cv
cp
f
1083.34 469.293 mo
1084.69 470.643 1084.69 472.832 1083.34 474.184 cv
1081.99 475.533 1079.8 475.533 1078.45 474.184 cv
1077.1 472.832 1077.1 470.643 1078.45 469.293 cv
1079.8 467.941 1081.99 467.941 1083.34 469.293 cv
cp
1075.92 468.723 mo
1073.92 471.879 1073.28 475.645 1075.92 478.289 cv
1078.56 480.928 1082.84 480.928 1085.49 478.289 cv
1088.13 475.645 1087.14 472.068 1085.49 468.723 cv
1084.96 467.65 1084.08 466.211 1083.1 465.17 cv
1083.1 456.83 li
1079.65 456.83 li
1079.65 464.211 li
1078.29 465.049 1076.95 467.094 1075.92 468.723 cv
cp
f
673.319 111.449 mo
674.669 112.801 674.669 114.988 673.319 116.34 cv
671.97 117.691 669.78 117.691 668.431 116.34 cv
667.081 114.988 667.081 112.801 668.431 111.449 cv
669.78 110.1 671.97 110.1 673.319 111.449 cv
cp
665.897 116.912 mo
666.865 118.438 668.104 120.336 669.374 121.258 cv
669.615 130.406 li
673.071 130.314 li
672.819 120.734 li
673.899 119.682 674.888 118.078 675.464 116.912 cv
677.12 113.564 678.106 109.988 675.464 107.344 cv
672.823 104.703 668.54 104.703 665.897 107.344 cv
663.257 109.988 663.898 113.756 665.897 116.912 cv
cp
f
884.962 168.713 mo
886.31 170.063 886.31 172.25 884.962 173.602 cv
883.61 174.953 881.423 174.953 880.073 173.602 cv
878.723 172.25 878.723 170.063 880.073 168.713 cv
881.423 167.361 883.61 167.361 884.962 168.713 cv
cp
824.083 601.322 mo
825.432 602.674 825.432 604.861 824.083 606.211 cv
822.731 607.563 820.542 607.563 819.194 606.211 cv
817.844 604.861 817.844 602.674 819.194 601.322 cv
820.542 599.973 822.731 599.973 824.083 601.322 cv
cp
877.54 174.174 mo
878.458 175.623 879.623 177.41 880.825 178.375 cv
880.825 189.307 li
819.882 251.979 li
819.882 596.582 li
820.083 596.582 li
818.854 597.594 817.694 599.443 817.05 600.752 cv
815.394 604.102 814.407 607.674 817.05 610.318 cv
819.69 612.961 823.974 612.961 826.615 610.316 cv
829.257 607.674 828.614 603.908 826.615 600.752 cv
825.698 599.303 824.54 597.523 823.341 596.557 cv
823.341 253.383 li
884.282 190.711 li
884.282 178.154 li
885.432 177.113 886.496 175.402 887.104 174.174 cv
888.761 170.826 889.746 167.25 887.104 164.605 cv
884.462 161.965 880.182 161.965 877.54 164.605 cv
874.897 167.25 875.537 171.014 877.54 174.174 cv
cp
f
518.521 211.164 mo
517.173 209.814 517.173 207.625 518.521 206.273 cv
519.872 204.922 522.06 204.922 523.41 206.273 cv
524.762 207.625 524.762 209.814 523.41 211.164 cv
522.06 212.514 519.872 212.514 518.521 211.164 cv
cp
525.944 205.705 mo
525.099 204.369 524.047 202.754 522.948 201.75 cv
522.948 180.639 li
512.427 170.328 li
510.009 172.801 li
519.491 182.09 li
519.491 201.475 li
518.234 202.471 517.037 204.369 516.377 205.705 cv
514.723 209.053 513.737 212.625 516.377 215.27 cv
519.021 217.914 523.304 217.91 525.944 215.27 cv
528.585 212.625 527.944 208.861 525.944 205.705 cv
cp
f
848.736 605.293 mo
847.386 603.945 847.386 601.754 848.736 600.406 cv
850.087 599.057 852.274 599.057 853.627 600.406 cv
854.977 601.754 854.977 603.945 853.627 605.293 cv
852.274 606.643 850.087 606.643 848.736 605.293 cv
cp
856.158 599.832 mo
855.203 598.324 853.985 596.459 852.731 595.523 cv
852.731 573.967 li
834.146 555.383 li
834.146 258.154 li
905.894 186.838 li
905.894 64.6797 li
902.435 64.6797 li
902.435 185.4 li
830.688 256.715 li
830.688 556.815 li
849.273 575.4 li
849.273 595.977 li
848.181 597.027 847.177 598.652 846.594 599.832 cv
844.938 603.182 843.952 606.76 846.594 609.402 cv
849.235 612.043 853.519 612.043 856.158 609.402 cv
858.802 606.76 858.16 602.99 856.158 599.832 cv
cp
f
848.087 665.328 mo
848.087 663.418 849.636 661.871 851.543 661.871 cv
853.454 661.871 855.002 663.418 855.002 665.328 cv
855.002 667.238 853.454 668.785 851.543 668.785 cv
849.636 668.785 848.087 667.238 848.087 665.328 cv
cp
859.694 666.44 mo
859.694 662.701 856.577 660.492 852.93 659.674 cv
851.907 659.445 850.735 659.199 849.627 659.074 cv
849.646 659.055 li
841.277 650.481 li
841.277 627.029 li
831.739 619.201 li
816.31 619.201 li
809.077 611.459 li
809.077 597.299 li
817.721 588.652 li
817.721 249.221 li
872.829 193.748 li
872.829 160.459 li
886.444 146.629 li
886.444 64.6797 li
882.986 64.6797 li
882.986 145.213 li
869.373 159.045 li
869.373 192.32 li
814.263 247.793 li
814.263 587.221 li
805.619 595.865 li
805.619 612.824 li
814.81 622.66 li
830.502 622.66 li
837.819 628.662 li
837.819 651.891 li
845.765 660.027 li
844.906 661.471 845.546 664.606 846.167 666.44 cv
847.364 669.979 849.195 673.205 852.93 673.205 cv
856.666 673.205 859.694 670.176 859.694 666.44 cv
cp
f
849.513 634.984 mo
849.513 633.072 851.06 631.525 852.97 631.525 cv
854.882 631.525 856.429 633.072 856.429 634.984 cv
856.429 636.893 854.882 638.441 852.97 638.441 cv
851.06 638.441 849.513 636.893 849.513 634.984 cv
cp
861.123 636.094 mo
861.123 632.359 858.004 630.148 854.356 629.328 cv
853.144 629.057 851.716 628.75 850.438 628.666 cv
847.483 622.102 li
838.477 612.889 li
838.911 583.918 li
828.96 573.967 li
828.96 256.408 li
898.978 184.66 li
898.978 63.2246 li
895.521 63.2246 li
895.521 183.254 li
825.502 255.002 li
825.502 575.4 li
835.432 585.33 li
834.999 614.275 li
844.579 624.08 li
847.138 629.76 li
846.352 631.24 846.985 634.297 847.595 636.094 cv
848.79 639.633 850.62 642.859 854.356 642.859 cv
858.094 642.859 861.123 639.832 861.123 636.094 cv
cp
f
649.243 406.06 mo
649.243 407.973 647.697 409.518 645.786 409.518 cv
643.875 409.518 642.328 407.973 642.328 406.06 cv
642.328 404.148 643.875 402.603 645.786 402.603 cv
647.697 402.603 649.243 404.148 649.243 406.06 cv
cp
640.41 407.172 mo
641.605 410.711 643.436 413.94 647.173 413.94 cv
650.909 413.94 653.938 410.91 653.938 407.172 cv
653.938 403.438 650.819 401.225 647.173 400.408 cv
645.377 400.006 643.112 399.531 641.56 399.807 cv
583.604 341.285 li
511.218 341.285 li
511.218 344.742 li
582.162 344.742 li
639.583 402.725 li
639.586 404.207 640.002 405.971 640.41 407.172 cv
cp
f
865.094 134.496 mo
863.185 134.461 861.662 132.889 861.696 130.979 cv
861.729 129.07 863.304 127.547 865.215 127.584 cv
867.123 127.615 868.646 129.191 868.612 131.098 cv
868.578 133.01 867.002 134.529 865.094 134.496 cv
cp
864.136 125.643 mo
860.578 126.777 857.319 128.553 857.254 132.287 cv
857.188 136.025 860.164 139.104 863.902 139.172 cv
867.636 139.232 869.899 136.158 870.781 132.523 cv
871.12 131.123 871.502 129.443 871.535 128.027 cv
875.206 122.688 li
875.206 59.4785 li
871.748 59.4785 li
871.748 121.613 li
869.444 124.965 li
867.848 124.717 865.586 125.18 864.136 125.643 cv
cp
f
860.34 116.361 mo
858.432 116.33 856.908 114.756 856.943 112.844 cv
856.977 110.936 858.55 109.414 860.46 109.447 cv
862.369 109.48 863.892 111.055 863.856 112.965 cv
863.823 114.873 862.246 116.393 860.34 116.361 cv
cp
859.382 107.508 mo
855.824 108.645 852.565 110.416 852.499 114.154 cv
852.434 117.889 855.41 120.973 859.146 121.037 cv
862.882 121.1 865.146 118.02 866.027 114.391 cv
866.392 112.887 866.815 111.051 866.792 109.578 cv
870.452 104.088 li
870.452 59.4785 li
866.994 59.4785 li
866.994 103.041 li
864.482 106.809 li
862.9 106.629 860.771 107.066 859.382 107.508 cv
cp
f
917.978 664.01 mo
917.944 665.922 916.367 667.441 914.46 667.406 cv
912.552 667.373 911.029 665.801 911.063 663.889 cv
911.098 661.981 912.67 660.457 914.581 660.494 cv
916.49 660.525 918.012 662.102 917.978 664.01 cv
cp
883.165 276.959 mo
881.296 276.565 880.104 274.727 880.502 272.855 cv
880.899 270.992 882.737 269.801 884.604 270.199 cv
886.473 270.594 887.664 272.432 887.265 274.299 cv
886.869 276.166 885.032 277.357 883.165 276.959 cv
cp
913.502 658.553 mo
909.944 659.69 906.688 661.465 906.619 665.199 cv
906.557 668.935 909.531 672.018 913.269 672.082 cv
917.002 672.146 919.266 669.066 920.146 665.435 cv
920.486 664.039 920.865 662.363 920.902 660.951 cv
930.098 651.758 li
930.098 631.012 li
936.148 624.959 li
936.148 566.769 li
884.282 514.326 li
884.282 326.967 li
893.54 316.74 li
893.54 281.453 li
889.466 277.725 li
889.71 276.379 889.717 274.762 889.702 273.397 cv
889.66 269.662 888.147 266.15 884.492 265.373 cv
880.84 264.598 877.246 266.928 876.47 270.584 cv
875.69 274.238 878.465 276.699 881.678 278.607 cv
883.165 279.49 885.668 280.605 887.321 280.449 cv
890.081 282.977 li
890.081 315.406 li
880.825 325.635 li
880.825 515.746 li
932.691 568.19 li
932.691 623.529 li
926.641 629.58 li
926.641 650.326 li
919.049 657.914 li
917.446 657.576 915.025 658.066 913.502 658.553 cv
cp
f
570.252 396.383 mo
571.616 395.045 573.807 395.068 575.142 396.434 cv
576.479 397.797 576.456 399.986 575.091 401.322 cv
573.727 402.66 571.537 402.637 570.201 401.273 cv
568.864 399.908 568.888 397.721 570.252 396.383 cv
cp
569.608 403.41 mo
572.94 405.102 576.504 406.125 579.174 403.512 cv
581.845 400.898 581.89 396.613 579.274 393.941 cv
576.661 391.275 572.885 391.879 569.706 393.844 cv
568.208 394.773 566.355 395.955 565.396 397.184 cv
511.218 397.184 li
511.218 400.641 li
565.737 400.641 li
566.774 401.764 568.418 402.807 569.608 403.41 cv
cp
f
531.984 382.832 mo
530.647 381.467 530.671 379.281 532.035 377.943 cv
533.399 376.607 535.589 376.629 536.925 377.994 cv
538.262 379.357 538.237 381.547 536.876 382.883 cv
535.511 384.217 533.321 384.195 531.984 382.832 cv
cp
541.058 375.502 mo
538.44 372.834 534.667 373.44 531.489 375.404 cv
530.106 376.26 528.423 377.332 527.417 378.457 cv
511.218 378.457 li
511.218 381.914 li
527.269 381.914 li
528.273 383.147 530.1 384.316 531.39 384.971 cv
534.724 386.658 538.288 387.685 540.956 385.068 cv
543.627 382.455 543.671 378.172 541.058 375.502 cv
cp
f
531.984 150.299 mo
530.647 148.934 530.671 146.746 532.035 145.41 cv
533.399 144.072 535.589 144.096 536.925 145.459 cv
538.262 146.824 538.237 149.012 536.876 150.35 cv
535.511 151.684 533.321 151.662 531.984 150.299 cv
cp
541.058 142.969 mo
538.44 140.301 534.667 140.906 531.489 142.871 cv
530.106 143.727 528.423 144.799 527.417 145.924 cv
511.218 145.924 li
511.218 149.381 li
527.269 149.381 li
528.274 150.611 530.1 151.781 531.39 152.438 cv
534.724 154.125 538.288 155.15 540.956 152.535 cv
543.627 149.922 543.671 145.639 541.058 142.969 cv
cp
f
531.677 119.465 mo
530.34 118.102 530.363 115.914 531.727 114.576 cv
533.093 113.24 535.281 113.264 536.616 114.627 cv
537.954 115.99 537.931 118.18 536.566 119.518 cv
535.202 120.854 533.013 120.83 531.677 119.465 cv
cp
540.751 112.137 mo
538.134 109.469 534.359 110.072 531.183 112.037 cv
529.8 112.895 528.118 113.967 527.112 115.09 cv
511.218 115.09 li
511.218 118.549 li
526.961 118.549 li
527.967 119.779 529.793 120.949 531.083 121.604 cv
534.416 123.295 537.979 124.32 540.649 121.703 cv
543.319 119.092 543.364 114.807 540.751 112.137 cv
cp
f
547.686 134.162 mo
546.352 132.799 546.376 130.609 547.74 129.271 cv
549.104 127.936 551.292 127.959 552.63 129.322 cv
553.966 130.688 553.942 132.875 552.579 134.213 cv
551.213 135.549 549.025 135.525 547.686 134.162 cv
cp
556.761 126.83 mo
554.146 124.162 550.37 124.768 547.192 126.732 cv
545.81 127.59 544.13 128.66 543.124 129.785 cv
511.218 129.785 li
511.218 133.242 li
542.972 133.242 li
543.976 134.475 545.804 135.645 547.095 136.299 cv
550.426 137.99 553.99 139.014 556.661 136.4 cv
559.33 133.787 559.376 129.502 556.761 126.83 cv
cp
f
547.686 105.057 mo
546.352 103.697 546.376 101.506 547.74 100.172 cv
549.104 98.8359 551.292 98.8555 552.63 100.219 cv
553.966 101.584 553.942 103.773 552.579 105.107 cv
551.213 106.445 549.025 106.422 547.686 105.057 cv
cp
556.761 97.7285 mo
554.146 95.0625 550.37 95.6641 547.192 97.6289 cv
545.81 98.4863 544.13 99.5586 543.124 100.682 cv
511.218 100.682 li
511.218 104.139 li
542.972 104.139 li
543.977 105.371 545.804 106.541 547.095 107.195 cv
550.426 108.887 553.99 109.91 556.661 107.297 cv
559.33 104.684 559.376 100.398 556.761 97.7285 cv
cp
f
647.298 346.086 mo
647.298 344.176 648.846 342.629 650.757 342.629 cv
652.666 342.629 654.215 344.176 654.215 346.086 cv
654.215 347.998 652.666 349.545 650.757 349.545 cv
648.846 349.545 647.298 347.998 647.298 346.086 cv
cp
658.908 347.197 mo
658.908 343.463 655.788 341.252 652.143 340.434 cv
650.857 340.145 649.336 339.826 648.002 339.766 cv
648.002 312.348 li
617.515 280.775 li
594.836 280.775 li
565.306 251.242 li
565.306 203.121 li
584.323 184.098 li
584.323 78.6152 li
568.222 63.4199 li
565.848 65.9355 li
580.866 80.1074 li
580.866 182.664 li
561.848 201.689 li
561.848 252.674 li
593.405 284.232 li
616.048 284.232 li
644.544 313.744 li
644.544 343.014 li
644.561 343.014 li
644.61 344.44 644.996 346.066 645.379 347.197 cv
646.575 350.736 648.406 353.965 652.143 353.965 cv
655.879 353.965 658.908 350.935 658.908 347.197 cv
cp
f
844.057 79.2734 mo
844.088 77.3652 845.664 75.8418 847.575 75.8809 cv
849.483 75.9102 851.004 77.4883 850.973 79.3945 cv
850.936 81.3066 849.361 82.8262 847.453 82.791 cv
845.546 82.7578 844.022 81.1836 844.057 79.2734 cv
cp
853.141 80.8203 mo
853.727 78.4043 854.465 75.1328 853.261 73.8867 cv
853.257 73.8809 853.248 73.8789 853.242 73.875 cv
855.757 69.9219 li
855.757 63.2246 li
852.298 63.2246 li
852.298 68.916 li
849.543 73.2461 li
849.581 73.2715 li
848.471 73.4023 847.344 73.666 846.494 73.9375 cv
842.936 75.0762 839.682 76.8496 839.614 80.584 cv
839.548 84.3223 842.522 87.4004 846.261 87.4648 cv
849.994 87.5332 852.258 84.4531 853.141 80.8203 cv
cp
f
627.657 469.295 mo
626.282 467.969 626.245 465.781 627.572 464.406 cv
628.897 463.033 631.085 462.994 632.461 464.322 cv
633.836 465.648 633.873 467.838 632.546 469.213 cv
631.219 470.582 629.03 470.623 627.657 469.295 cv
cp
634.7 469.746 mo
636.298 466.369 637.22 462.775 634.532 460.18 cv
631.845 457.586 627.561 457.66 624.966 460.346 cv
622.37 463.033 623.079 466.791 625.134 469.912 cv
626.182 471.506 627.541 473.506 628.899 474.336 cv
628.899 482.33 li
632.356 482.33 li
632.356 473.4 li
632.32 473.4 li
633.302 472.336 634.178 470.848 634.7 469.746 cv
cp
f
771.643 422.34 mo
769.733 422.34 768.185 420.789 768.185 418.881 cv
768.185 416.971 769.733 415.424 771.643 415.424 cv
773.552 415.424 775.101 416.971 775.101 418.881 cv
775.101 420.789 773.552 422.34 771.643 422.34 cv
cp
772.194 412.361 mo
767.994 412.361 764.589 415.766 764.589 419.967 cv
764.589 424.168 767.994 427.57 772.194 427.57 cv
776.394 427.57 779.798 424.168 779.798 419.967 cv
779.798 415.766 776.394 412.361 772.194 412.361 cv
cp
f
900.309 326.549 mo
898.398 326.549 896.852 325.002 896.852 323.092 cv
896.852 321.184 898.398 319.635 900.309 319.635 cv
902.219 319.635 903.766 321.184 903.766 323.092 cv
903.766 325.002 902.219 326.549 900.309 326.549 cv
cp
900.864 316.574 mo
896.66 316.574 893.257 319.978 893.257 324.18 cv
893.257 328.379 896.66 331.783 900.864 331.783 cv
905.06 331.783 908.465 328.379 908.465 324.18 cv
908.465 319.978 905.06 316.574 900.864 316.574 cv
cp
f
704.546 78.25 mo
704.546 76.3379 706.095 74.793 708.005 74.793 cv
709.913 74.793 711.463 76.3379 711.463 78.25 cv
711.463 80.1602 709.913 81.707 708.005 81.707 cv
706.095 81.707 704.546 80.1602 704.546 78.25 cv
cp
716.16 79.334 mo
716.16 75.1367 712.757 71.7344 708.556 71.7344 cv
704.354 71.7344 700.951 75.1367 700.951 79.334 cv
700.951 83.5332 704.354 86.9395 708.556 86.9395 cv
712.757 86.9395 716.16 83.5332 716.16 79.334 cv
cp
f
734.208 79.2402 mo
734.208 77.3281 735.757 75.7832 737.666 75.7832 cv
739.575 75.7832 741.124 77.3281 741.124 79.2402 cv
741.124 81.1504 739.575 82.6973 737.666 82.6973 cv
735.757 82.6973 734.208 81.1504 734.208 79.2402 cv
cp
745.823 80.3262 mo
745.823 76.125 742.417 72.7227 738.218 72.7227 cv
734.018 72.7227 730.612 76.125 730.612 80.3262 cv
730.612 84.5234 734.018 87.9277 738.218 87.9277 cv
742.417 87.9277 745.823 84.5234 745.823 80.3262 cv
cp
f
771.093 78.1523 mo
771.093 80.0645 769.542 81.6094 767.634 81.6094 cv
765.724 81.6094 764.173 80.0645 764.173 78.1523 cv
764.173 76.2441 765.724 74.6953 767.634 74.6953 cv
769.542 74.6953 771.093 76.2441 771.093 78.1523 cv
cp
760.581 79.2402 mo
760.581 83.4395 763.985 86.8438 768.185 86.8438 cv
772.386 86.8438 775.789 83.4395 775.789 79.2402 cv
775.789 75.0391 772.386 71.6348 768.185 71.6348 cv
763.985 71.6348 760.581 75.0391 760.581 79.2402 cv
cp
f
795.99 78.1523 mo
795.99 76.2441 797.539 74.6953 799.45 74.6953 cv
801.358 74.6953 802.907 76.2441 802.907 78.1523 cv
802.907 80.0645 801.358 81.6094 799.45 81.6094 cv
797.539 81.6094 795.99 80.0645 795.99 78.1523 cv
cp
807.604 79.2402 mo
807.604 75.0391 804.2 71.6348 800 71.6348 cv
795.8 71.6348 792.396 75.0391 792.396 79.2402 cv
792.396 83.4395 795.8 86.8438 800 86.8438 cv
804.2 86.8438 807.604 83.4395 807.604 79.2402 cv
cp
f
628.7 449.268 mo
626.79 449.268 625.242 447.723 625.242 445.81 cv
625.242 443.904 626.79 442.353 628.7 442.353 cv
630.609 442.353 632.157 443.904 632.157 445.81 cv
632.157 447.723 630.609 449.268 628.7 449.268 cv
cp
629.252 439.295 mo
625.05 439.295 621.646 442.697 621.646 446.898 cv
621.646 451.096 625.05 454.502 629.252 454.502 cv
633.451 454.502 636.854 451.096 636.854 446.898 cv
636.854 442.697 633.451 439.295 629.252 439.295 cv
cp
f
520.489 323.092 mo
520.489 321.184 522.038 319.635 523.949 319.635 cv
525.857 319.635 527.407 321.184 527.407 323.092 cv
527.407 325.002 525.857 326.549 523.949 326.549 cv
522.038 326.549 520.489 325.002 520.489 323.092 cv
cp
532.104 324.18 mo
532.104 319.978 528.7 316.574 524.501 316.574 cv
520.301 316.574 516.896 319.978 516.896 324.18 cv
516.896 328.379 520.301 331.783 524.501 331.783 cv
528.7 331.783 532.104 328.379 532.104 324.18 cv
cp
f
558.414 323.092 mo
558.414 321.184 559.964 319.635 561.873 319.635 cv
563.782 319.635 565.331 321.184 565.331 323.092 cv
565.331 325.002 563.782 326.549 561.873 326.549 cv
559.964 326.549 558.414 325.002 558.414 323.092 cv
cp
570.03 324.18 mo
570.03 319.978 566.624 316.574 562.425 316.574 cv
558.225 316.574 554.819 319.978 554.819 324.18 cv
554.819 328.379 558.225 331.783 562.425 331.783 cv
566.624 331.783 570.03 328.379 570.03 324.18 cv
cp
f
603.759 310.807 mo
601.849 310.807 600.298 309.26 600.298 307.35 cv
600.298 305.438 601.849 303.893 603.759 303.893 cv
605.667 303.893 607.216 305.438 607.216 307.35 cv
607.216 309.26 605.667 310.807 603.759 310.807 cv
cp
604.31 300.832 mo
600.107 300.832 596.704 304.236 596.704 308.438 cv
596.704 312.635 600.107 316.041 604.31 316.041 cv
608.509 316.041 611.913 312.635 611.913 308.438 cv
611.913 304.236 608.509 300.832 604.31 300.832 cv
cp
f
600.669 224.654 mo
598.761 224.654 597.211 223.104 597.211 221.197 cv
597.211 219.285 598.761 217.738 600.669 217.738 cv
602.579 217.738 604.127 219.285 604.127 221.197 cv
604.127 223.104 602.579 224.654 600.669 224.654 cv
cp
601.222 214.676 mo
597.021 214.676 593.616 218.08 593.616 222.279 cv
593.616 226.482 597.021 229.885 601.222 229.885 cv
605.421 229.885 608.824 226.482 608.824 222.279 cv
608.824 218.08 605.421 214.676 601.222 214.676 cv
cp
f
678.747 177.99 mo
678.747 179.902 677.2 181.449 675.29 181.449 cv
673.381 181.449 671.831 179.902 671.831 177.99 cv
671.831 176.08 673.381 174.533 675.29 174.533 cv
677.2 174.533 678.747 176.08 678.747 177.99 cv
cp
668.235 179.076 mo
668.235 183.275 671.642 186.68 675.843 186.68 cv
680.041 186.68 683.446 183.275 683.446 179.076 cv
683.446 174.877 680.041 171.475 675.843 171.475 cv
671.642 171.475 668.235 174.877 668.235 179.076 cv
cp
f
750.632 287.617 mo
748.722 287.617 747.172 286.07 747.172 284.158 cv
747.172 282.25 748.722 280.701 750.632 280.701 cv
752.541 280.701 754.089 282.25 754.089 284.158 cv
754.089 286.07 752.541 287.617 750.632 287.617 cv
cp
751.183 277.641 mo
746.982 277.641 743.579 281.045 743.579 285.246 cv
743.579 289.445 746.982 292.85 751.183 292.85 cv
755.382 292.85 758.787 289.445 758.787 285.246 cv
758.787 281.045 755.382 277.641 751.183 277.641 cv
cp
f
750.632 265.859 mo
748.722 265.859 747.172 264.313 747.172 262.402 cv
747.172 260.49 748.722 258.943 750.632 258.943 cv
752.541 258.943 754.089 260.49 754.089 262.402 cv
754.089 264.313 752.541 265.859 750.632 265.859 cv
cp
751.183 255.885 mo
746.982 255.885 743.579 259.289 743.579 263.49 cv
743.579 267.688 746.982 271.09 751.183 271.09 cv
755.382 271.09 758.787 267.688 758.787 263.49 cv
758.787 259.289 755.382 255.885 751.183 255.885 cv
cp
f
1116.04 456.766 mo
1116.79 458.522 1115.97 460.551 1114.22 461.305 cv
1112.46 462.053 1110.43 461.238 1109.68 459.484 cv
1108.93 457.728 1109.74 455.695 1111.5 454.945 cv
1113.25 454.195 1115.29 455.01 1116.04 456.766 cv
cp
1106.8 461.895 mo
1108.45 465.756 1112.92 467.551 1116.78 465.897 cv
1120.64 464.244 1122.44 459.777 1120.78 455.914 cv
1119.13 452.051 1114.66 450.262 1110.8 451.914 cv
1106.94 453.565 1105.15 458.035 1106.8 461.895 cv
cp
f
997.386 541.547 mo
998.731 540.191 1000.92 540.176 1002.28 541.518 cv
1003.63 542.857 1003.65 545.049 1002.3 546.41 cv
1000.96 547.764 998.775 547.777 997.416 546.434 cv
996.055 545.094 996.043 542.904 997.386 541.547 cv
cp
963.504 516.912 mo
963.504 499.359 li
976.346 487.258 li
976.346 428.682 li
948.295 400.648 li
948.295 149.943 li
923.795 126.172 li
923.795 64.6797 li
920.338 64.6797 li
920.338 127.635 li
944.838 151.406 li
944.838 402.078 li
972.887 430.113 li
972.887 485.766 li
960.048 497.867 li
960.048 518.35 li
987.736 545.871 li
992.772 545.871 li
993.77 547.012 995.467 548.106 996.86 548.975 cv
1000.03 550.955 1003.8 551.572 1006.42 548.916 cv
1009.05 546.258 1009.03 541.973 1006.37 539.35 cv
1003.71 536.725 1000.14 537.731 996.802 539.406 cv
995.519 540.051 993.71 541.197 992.695 542.412 cv
989.16 542.412 li
963.504 516.912 li
cp
f
1036.65 605.59 mo
1036.76 607.494 1035.31 609.131 1033.4 609.246 cv
1031.5 609.357 1029.86 607.904 1029.75 606 cv
1029.63 604.094 1031.09 602.457 1032.99 602.342 cv
1034.9 602.231 1036.54 603.684 1036.65 605.59 cv
cp
1020.87 537.688 mo
1012.09 528.438 li
989.221 528.438 li
981.654 519.994 li
981.654 427.32 li
953.869 398.504 li
953.869 146.471 li
930.098 124.139 li
930.098 64.6797 li
926.641 64.6797 li
926.641 125.637 li
950.412 147.965 li
950.412 399.898 li
978.195 428.715 li
978.195 521.318 li
987.674 531.894 li
1010.6 531.894 li
1017.41 539.066 li
1017.41 592.688 li
1026.81 602.094 li
1026.72 603.695 1027.34 605.844 1027.9 607.225 cv
1029.3 610.685 1031.32 613.795 1035.05 613.576 cv
1038.78 613.354 1041.63 610.15 1041.4 606.424 cv
1041.18 602.691 1037.94 600.67 1034.25 600.07 cv
1032.69 599.815 1030.78 599.529 1029.3 599.69 cv
1020.87 591.256 li
1020.87 537.688 li
cp
f
1109.83 505.418 mo
1109.82 507.324 1108.27 508.867 1106.36 508.857 cv
1104.45 508.85 1102.91 507.299 1102.92 505.391 cv
1102.93 503.478 1104.48 501.94 1106.39 501.947 cv
1108.3 501.953 1109.84 503.506 1109.83 505.418 cv
cp
1079.09 400.066 mo
978.956 400.066 li
959.939 382.873 li
959.939 183.186 li
963.832 177.354 li
960.957 175.432 li
956.482 182.137 li
956.482 384.41 li
977.625 403.523 li
1077.61 403.523 li
1096.93 423.809 li
1096.93 466.967 li
1114.28 482.525 li
1114.28 495.344 li
1109.74 498.99 li
1109.81 499.082 li
1108.34 499.033 1106.51 499.414 1105.01 499.744 cv
1101.36 500.551 1098.24 502.746 1098.22 506.48 cv
1098.21 510.219 1101.22 513.258 1104.96 513.273 cv
1108.69 513.285 1110.54 510.07 1111.75 506.535 cv
1112.25 505.078 1112.77 502.787 1112.53 501.18 cv
1117.74 497.002 li
1117.74 480.982 li
1100.39 465.424 li
1100.39 422.424 li
1079.09 400.066 li
cp
f
1040.99 462.772 mo
1042.89 462.555 1044.6 463.91 1044.83 465.809 cv
1045.05 467.703 1043.69 469.418 1041.79 469.641 cv
1041.16 469.713 1040.56 469.602 1040.02 469.367 cv
1039.9 469.176 1039.76 468.996 1039.59 468.826 cv
1039.27 468.494 1038.89 468.244 1038.49 468.068 cv
1038.21 467.641 1038.02 467.15 1037.96 466.609 cv
1037.74 464.711 1039.1 462.994 1040.99 462.772 cv
cp
1036.82 571.816 mo
1038.16 573.172 1038.15 575.357 1036.8 576.705 cv
1035.45 578.049 1033.26 578.043 1031.91 576.69 cv
1030.56 575.336 1030.57 573.146 1031.93 571.799 cv
1032.39 571.334 1032.96 571.041 1033.56 570.898 cv
1033.68 570.91 1033.8 570.935 1033.92 570.935 cv
1034.2 570.935 1034.47 570.893 1034.73 570.828 cv
1035.49 570.912 1036.24 571.231 1036.82 571.816 cv
cp
1030.46 567.477 mo
1030.46 568.045 1030.62 568.574 1030.86 569.047 cv
1030.33 569.764 1029.83 570.529 1029.39 571.219 cv
1027.39 574.373 1026.73 578.135 1029.36 580.785 cv
1032 583.435 1036.28 583.453 1038.93 580.818 cv
1041.58 578.182 1040.61 574.606 1038.96 571.248 cv
1038.55 570.416 1037.94 569.361 1037.23 568.441 cv
1037.32 568.133 1037.38 567.815 1037.38 567.477 cv
1037.38 511.576 li
1037.38 511.191 1037.31 510.807 1037.19 510.441 cv
1031.67 494.547 li
1031.67 481.346 li
1039.52 473.717 li
1039.85 473.395 1040.1 473.023 1040.27 472.627 cv
1041.34 472.375 1042.45 472.004 1043.42 471.664 cv
1046.95 470.424 1049.79 467.867 1049.36 464.162 cv
1048.93 460.449 1045.57 457.789 1041.86 458.225 cv
1038.15 458.658 1036.7 462.072 1035.92 465.727 cv
1035.77 466.412 1035.64 467.272 1035.59 468.15 cv
1035.27 468.307 1034.97 468.498 1034.7 468.756 cv
1025.8 477.4 li
1025.13 478.053 1024.75 478.945 1024.75 479.883 cv
1024.75 495.127 li
1024.75 495.516 1024.82 495.898 1024.95 496.262 cv
1030.46 512.16 li
1030.46 567.477 li
cp
f
965.365 154.926 mo
964.015 153.574 964.015 151.385 965.365 150.035 cv
966.715 148.688 968.904 148.688 970.254 150.035 cv
971.605 151.385 971.605 153.574 970.254 154.926 cv
968.904 156.279 966.715 156.279 965.365 154.926 cv
cp
964.098 163.211 mo
971.015 163.211 li
971.015 157.814 li
971.574 157.025 972.059 156.186 972.398 155.498 cv
974.055 152.148 975.04 148.574 972.398 145.93 cv
969.757 143.289 965.473 143.293 962.832 145.934 cv
960.191 148.574 960.831 152.342 962.832 155.498 cv
963.252 156.162 963.726 156.896 964.229 157.592 cv
964.098 157.592 li
964.098 163.211 li
cp
f
772.44 166.967 mo
772.44 168.518 771.183 169.775 769.63 169.775 cv
768.08 169.775 766.82 168.518 766.82 166.967 cv
766.82 165.414 768.08 164.156 769.63 164.156 cv
771.183 164.156 772.44 165.414 772.44 166.967 cv
cp
679.58 64.6797 mo
679.58 83.75 li
767.147 171.838 li
769.167 173.867 772.449 173.879 774.482 171.859 cv
775.502 170.846 776.013 169.514 776.013 168.182 cv
776.013 166.859 775.509 165.533 774.502 164.525 cv
689.953 79.4727 li
689.953 64.6797 li
689.953 61.8125 687.632 59.4922 684.767 59.4922 cv
681.903 59.4922 679.58 61.8125 679.58 64.6797 cv
cp
f
771.582 333.867 mo
774.028 333.867 776.013 335.85 776.013 338.297 cv
776.013 340.742 774.028 342.727 771.582 342.727 cv
769.135 342.727 767.151 340.742 767.151 338.297 cv
767.151 335.85 769.135 333.867 771.582 333.867 cv
cp
746.288 238.359 mo
746.288 235.916 748.272 233.93 750.719 233.93 cv
753.165 233.93 755.149 235.916 755.149 238.359 cv
755.149 240.809 753.165 242.791 750.719 242.791 cv
748.272 242.791 746.288 240.809 746.288 238.359 cv
cp
771.474 347.914 mo
776.249 347.914 780.118 344.045 780.118 339.27 cv
780.118 250.699 li
780.118 248.453 779.243 246.295 777.682 244.682 cv
765.782 232.4 li
764.153 230.721 761.914 229.773 759.575 229.773 cv
749.827 229.773 li
745.055 229.773 741.183 233.645 741.183 238.418 cv
741.183 243.193 745.055 247.063 749.827 247.063 cv
755.913 247.063 li
762.829 254.199 li
762.829 339.27 li
762.829 344.045 766.699 347.914 771.474 347.914 cv
cp
f
544.272 270.975 mo
549.523 270.975 553.78 275.234 553.78 280.484 cv
553.78 285.738 549.523 289.994 544.272 289.994 cv
539.019 289.994 534.764 285.738 534.764 280.484 cv
534.764 275.234 539.019 270.975 544.272 270.975 cv
1 1 1 rgb
f
708.556 229.492 mo
713.808 229.492 718.063 233.748 718.063 239.002 cv
718.063 244.252 713.808 248.51 708.556 248.51 cv
703.304 248.51 699.047 244.252 699.047 239.002 cv
699.047 233.748 703.304 229.492 708.556 229.492 cv
f
671.199 129.664 mo
676.452 129.664 680.708 133.918 680.708 139.172 cv
680.708 144.424 676.452 148.682 671.199 148.682 cv
665.946 148.682 661.69 144.424 661.69 139.172 cv
661.69 133.918 665.946 129.664 671.199 129.664 cv
f
852.083 565.174 mo
857.336 565.174 861.591 569.43 861.591 574.684 cv
861.591 579.934 857.336 584.191 852.083 584.191 cv
846.829 584.191 842.573 579.934 842.573 574.684 cv
842.573 569.43 846.829 565.174 852.083 565.174 cv
f
505.181 263.287 mo
510.463 263.287 514.745 267.572 514.745 272.853 cv
514.745 278.137 510.463 282.42 505.181 282.42 cv
499.897 282.42 495.614 278.137 495.614 272.853 cv
495.614 267.572 499.897 263.287 505.181 263.287 cv
cp
f
966.316 161.908 mo
971.6 161.908 975.883 166.189 975.883 171.475 cv
975.883 176.756 971.6 181.041 966.316 181.041 cv
961.033 181.041 956.752 176.756 956.752 171.475 cv
956.752 166.189 961.033 161.908 966.316 161.908 cv
cp
f
998.4 431.342 mo
1003.68 431.342 1007.96 435.627 1007.96 440.908 cv
1007.96 446.193 1003.68 450.475 998.4 450.475 cv
993.115 450.475 988.832 446.193 988.832 440.908 cv
988.832 435.627 993.115 431.342 998.4 431.342 cv
cp
f
962.394 490.185 mo
967.678 490.185 971.96 494.471 971.96 499.752 cv
971.96 505.035 967.678 509.316 962.394 509.316 cv
957.111 509.316 952.828 505.035 952.828 499.752 cv
952.828 494.471 957.111 490.185 962.394 490.185 cv
cp
f
977.158 567.477 mo
982.444 567.477 986.727 571.76 986.727 577.043 cv
986.727 582.324 982.444 586.609 977.158 586.609 cv
971.879 586.609 967.594 582.324 967.594 577.043 cv
967.594 571.76 971.879 567.477 977.158 567.477 cv
cp
f
996.66 502.502 mo
1001.94 502.502 1006.23 506.785 1006.23 512.068 cv
1006.23 517.35 1001.94 521.635 996.66 521.635 cv
991.379 521.635 987.094 517.35 987.094 512.068 cv
987.094 506.785 991.379 502.502 996.66 502.502 cv
cp
f
1039.24 410.816 mo
1044.52 410.816 1048.8 415.098 1048.8 420.381 cv
1048.8 425.662 1044.52 429.947 1039.24 429.947 cv
1033.95 429.947 1029.67 425.662 1029.67 420.381 cv
1029.67 415.098 1033.95 410.816 1039.24 410.816 cv
cp
f
1081.38 439.773 mo
1086.66 439.773 1090.94 444.055 1090.94 449.34 cv
1090.94 454.621 1086.66 458.906 1081.38 458.906 cv
1076.09 458.906 1071.81 454.621 1071.81 449.34 cv
1071.81 444.055 1076.09 439.773 1081.38 439.773 cv
cp
f
1029.67 496.611 mo
1034.95 496.611 1039.24 500.893 1039.24 506.176 cv
1039.24 511.457 1034.95 515.742 1029.67 515.742 cv
1024.39 515.742 1020.1 511.457 1020.1 506.176 cv
1020.1 500.893 1024.39 496.611 1029.67 496.611 cv
cp
f
1060.1 535.943 mo
1065.38 535.943 1069.67 540.225 1069.67 545.508 cv
1069.67 550.789 1065.38 555.076 1060.1 555.076 cv
1054.82 555.076 1050.53 550.789 1050.53 545.508 cv
1050.53 540.225 1054.82 535.943 1060.1 535.943 cv
cp
f
1092.33 524.113 mo
1097.61 524.113 1101.89 528.394 1101.89 533.68 cv
1101.89 538.961 1097.61 543.246 1092.33 543.246 cv
1087.04 543.246 1082.76 538.961 1082.76 533.68 cv
1082.76 528.394 1087.04 524.113 1092.33 524.113 cv
cp
f
1065.53 482.565 mo
1070.81 482.565 1075.09 486.846 1075.09 492.129 cv
1075.09 497.41 1070.81 501.695 1065.53 501.695 cv
1060.24 501.695 1055.96 497.41 1055.96 492.129 cv
1055.96 486.846 1060.24 482.565 1065.53 482.565 cv
cp
f
234.984 988.176 mo
233.634 989.529 231.445 989.529 230.096 988.176 cv
228.748 986.826 228.748 984.637 230.096 983.287 cv
231.445 981.935 233.634 981.935 234.984 983.287 cv
236.34 984.637 236.34 986.826 234.984 988.176 cv
cp
239.789 987.207 mo
248.008 987.207 li
248.008 983.75 li
239.512 983.75 li
238.51 982.65 236.893 981.6 235.559 980.754 cv
232.401 978.754 228.634 978.111 225.993 980.754 cv
223.352 983.396 223.348 987.678 225.989 990.32 cv
228.634 992.963 232.209 991.977 235.559 990.32 cv
236.891 989.662 238.791 988.465 239.789 987.207 cv
cp
0 .862745 1 rgb
f
187.359 1055.32 mo
186.005 1056.67 183.818 1056.66 182.471 1055.3 cv
181.125 1053.95 181.133 1051.76 182.487 1050.42 cv
183.841 1049.07 186.029 1049.08 187.377 1050.43 cv
188.725 1051.79 188.717 1053.98 187.359 1055.32 cv
cp
187.957 1047.9 mo
184.803 1045.89 181.041 1045.24 178.391 1047.87 cv
175.74 1050.5 175.723 1054.79 178.357 1057.44 cv
180.995 1060.09 184.57 1059.11 187.927 1057.47 cv
189.02 1056.93 190.496 1056.03 191.546 1055.04 cv
199.533 1055.04 li
199.533 1051.58 li
192.422 1051.58 li
191.564 1050.24 189.557 1048.92 187.957 1047.9 cv
cp
f
116.631 1049.17 mo
117.985 1047.83 120.174 1047.84 121.521 1049.19 cv
122.868 1050.54 122.86 1052.73 121.503 1054.08 cv
120.148 1055.42 117.962 1055.42 116.614 1054.07 cv
115.271 1052.71 115.277 1050.52 116.631 1049.17 cv
cp
247.59 1043.69 mo
248.873 1042.27 251.057 1042.16 252.472 1043.44 cv
253.891 1044.72 254.002 1046.91 252.719 1048.32 cv
251.438 1049.74 249.255 1049.85 247.836 1048.57 cv
246.418 1047.29 246.307 1045.1 247.59 1043.69 cv
cp
122.071 1056.22 mo
122.757 1055.89 123.594 1055.41 124.381 1054.86 cv
125.016 1055.59 125.942 1056.07 126.987 1056.07 cv
147.447 1056.07 li
148.427 1056.07 149.361 1055.65 150.018 1054.92 cv
164.835 1038.49 li
206.85 1038.49 li
217.805 1049.04 li
218.436 1049.66 219.276 1050 220.158 1050.01 cv
242.2 1050.3 li
242.218 1050.3 242.231 1050.3 242.248 1050.3 cv
243.145 1050.3 243.957 1049.95 244.572 1049.39 cv
245.471 1050.03 246.494 1050.62 247.394 1051.13 cv
250.649 1052.97 254.441 1053.42 256.947 1050.65 cv
259.452 1047.87 259.24 1043.6 256.468 1041.09 cv
253.691 1038.59 250.173 1039.75 246.911 1041.57 cv
245.986 1042.09 244.785 1042.89 243.834 1043.79 cv
243.369 1043.55 242.852 1043.39 242.291 1043.39 cv
221.616 1043.12 li
210.645 1032.54 li
210 1031.92 209.139 1031.57 208.245 1031.57 cv
163.294 1031.57 li
162.315 1031.57 161.383 1031.99 160.727 1032.71 cv
145.91 1049.15 li
126.987 1049.15 li
126.557 1049.15 126.15 1049.24 125.769 1049.38 cv
124.766 1048.38 123.316 1047.44 122.101 1046.66 cv
118.947 1044.65 115.185 1044 112.535 1046.63 cv
109.884 1049.26 109.867 1053.54 112.5 1056.2 cv
115.139 1058.85 118.715 1057.87 122.071 1056.22 cv
cp
f
204.698 981.435 mo
205.981 980.019 208.166 979.908 209.585 981.188 cv
211 982.471 211.111 984.654 209.831 986.072 cv
208.552 987.488 206.367 987.6 204.948 986.32 cv
203.528 985.039 203.419 982.852 204.698 981.435 cv
cp
204.504 988.879 mo
207.762 990.717 211.554 991.166 214.056 988.394 cv
216.561 985.625 216.349 981.346 213.576 978.842 cv
210.805 976.338 207.282 977.5 204.02 979.324 cv
202.93 979.932 201.463 980.941 200.467 982.019 cv
191.479 982.301 li
191.587 985.758 li
199.887 985.499 li
200.834 986.769 202.875 987.961 204.504 988.879 cv
cp
f
207.198 1080.78 mo
209.089 1081.04 210.405 1082.79 210.139 1084.68 cv
209.875 1086.57 208.125 1087.89 206.235 1087.62 cv
204.344 1087.36 203.03 1085.61 203.295 1083.72 cv
203.558 1081.82 205.307 1080.51 207.198 1080.78 cv
cp
200.925 1084.79 mo
201.231 1088.51 202.984 1091.9 206.681 1092.42 cv
210.383 1092.94 213.803 1090.37 214.326 1086.67 cv
214.843 1082.97 211.904 1080.71 208.565 1079.03 cv
206.883 1078.18 203.975 1077.14 202.393 1077.68 cv
170.064 1077.68 li
170.064 1081.13 li
200.803 1081.13 li
200.744 1082.33 200.832 1083.65 200.925 1084.79 cv
cp
f
255.454 1013.16 mo
253.557 1012.95 252.198 1011.23 252.415 1009.33 cv
252.634 1007.44 254.351 1006.08 256.247 1006.29 cv
258.145 1006.51 259.503 1008.23 259.287 1010.13 cv
259.066 1012.03 257.352 1013.38 255.454 1013.16 cv
cp
261.627 1009 mo
261.231 1005.28 259.393 1001.93 255.681 1001.51 cv
251.969 1001.08 248.612 1003.74 248.184 1007.45 cv
247.759 1011.16 250.753 1013.35 254.131 1014.95 cv
254.842 1015.28 255.77 1015.65 256.723 1015.92 cv
256.853 1016.62 257.189 1017.29 257.75 1017.82 cv
267.26 1026.72 li
267.924 1027.34 268.771 1027.65 269.62 1027.65 cv
270.541 1027.65 271.463 1027.28 272.146 1026.55 cv
273.449 1025.16 273.377 1022.97 271.982 1021.67 cv
262.475 1012.77 li
262.279 1012.58 262.064 1012.44 261.843 1012.31 cv
261.843 1011.2 261.734 1010.03 261.627 1009 cv
cp
f
226.613 1070.42 mo
225.264 1071.78 223.075 1071.78 221.724 1070.42 cv
220.373 1069.07 220.373 1066.88 221.724 1065.53 cv
223.075 1064.18 225.264 1064.18 226.613 1065.53 cv
227.965 1066.88 227.965 1069.07 226.613 1070.42 cv
cp
227.185 1063 mo
224.027 1061 220.262 1060.36 217.618 1063 cv
214.979 1065.64 214.979 1069.92 217.618 1072.57 cv
220.262 1075.21 223.838 1074.22 227.185 1072.57 cv
228.256 1072.04 229.695 1071.16 230.736 1070.18 cv
239.077 1070.18 li
239.077 1066.73 li
231.696 1066.73 li
230.857 1065.37 228.813 1064.03 227.185 1063 cv
cp
f
233.135 1028.07 mo
233.352 1029.97 231.997 1031.68 230.099 1031.91 cv
228.204 1032.13 226.489 1030.77 226.267 1028.87 cv
226.193 1028.24 226.305 1027.64 226.539 1027.1 cv
226.73 1026.98 226.911 1026.84 227.08 1026.67 cv
227.412 1026.35 227.663 1025.97 227.838 1025.57 cv
228.267 1025.29 228.756 1025.1 229.298 1025.04 cv
231.195 1024.82 232.912 1026.18 233.135 1028.07 cv
cp
124.091 1023.9 mo
122.735 1025.24 120.549 1025.23 119.201 1023.88 cv
117.857 1022.53 117.863 1020.34 119.218 1018.99 cv
120.571 1017.64 122.761 1017.65 124.107 1019.01 cv
124.573 1019.47 124.865 1020.04 125.008 1020.64 cv
124.996 1020.76 124.972 1020.88 124.972 1021 cv
124.972 1021.28 125.014 1021.55 125.078 1021.81 cv
124.995 1022.57 124.677 1023.32 124.091 1023.9 cv
cp
128.43 1017.54 mo
127.861 1017.54 127.332 1017.7 126.859 1017.94 cv
126.143 1017.41 125.377 1016.91 124.688 1016.47 cv
121.534 1014.47 117.772 1013.81 115.122 1016.45 cv
112.471 1019.08 112.454 1023.36 115.088 1026.01 cv
117.726 1028.66 121.302 1027.69 124.658 1026.04 cv
125.49 1025.63 126.545 1025.02 127.465 1024.31 cv
127.773 1024.4 128.092 1024.46 128.43 1024.46 cv
184.33 1024.46 li
184.716 1024.46 185.101 1024.39 185.466 1024.27 cv
201.359 1018.75 li
214.561 1018.75 li
222.19 1026.6 li
222.512 1026.93 222.883 1027.18 223.279 1027.35 cv
223.531 1028.42 223.903 1029.53 224.243 1030.5 cv
225.482 1034.03 228.039 1036.87 231.745 1036.44 cv
235.457 1036.01 238.118 1032.65 237.683 1028.94 cv
237.248 1025.23 233.835 1023.78 230.18 1023 cv
229.494 1022.85 228.635 1022.72 227.756 1022.67 cv
227.6 1022.35 227.408 1022.05 227.15 1021.78 cv
218.506 1012.88 li
217.854 1012.21 216.961 1011.83 216.023 1011.83 cv
200.779 1011.83 li
200.391 1011.83 200.009 1011.9 199.645 1012.03 cv
183.746 1017.54 li
128.43 1017.54 li
cp
f
264.564 985.481 mo
264.564 990.76 260.279 995.045 254.998 995.045 cv
249.714 995.045 245.433 990.76 245.433 985.481 cv
245.433 980.195 249.714 975.912 254.998 975.912 cv
260.279 975.912 264.564 980.195 264.564 985.481 cv
cp
1 1 1 rgb
f
193.404 983.74 mo
193.404 989.025 189.122 993.309 183.838 993.309 cv
178.558 993.309 174.271 989.025 174.271 983.74 cv
174.271 978.459 178.558 974.174 183.838 974.174 cv
189.122 974.174 193.404 978.459 193.404 983.74 cv
cp
f
285.091 1026.32 mo
285.091 1031.6 280.81 1035.88 275.525 1035.88 cv
270.244 1035.88 265.959 1031.6 265.959 1026.32 cv
265.959 1021.03 270.244 1016.75 275.525 1016.75 cv
280.81 1016.75 285.091 1021.03 285.091 1026.32 cv
cp
f
256.133 1068.46 mo
256.133 1073.74 251.852 1078.02 246.567 1078.02 cv
241.285 1078.02 237 1073.74 237 1068.46 cv
237 1063.17 241.285 1058.89 246.567 1058.89 cv
251.852 1058.89 256.133 1063.17 256.133 1068.46 cv
cp
f
199.296 1016.75 mo
199.296 1022.03 195.015 1026.32 189.73 1026.32 cv
184.449 1026.32 180.164 1022.03 180.164 1016.75 cv
180.164 1011.47 184.449 1007.18 189.73 1007.18 cv
195.015 1007.18 199.296 1011.47 199.296 1016.75 cv
cp
f
159.964 1047.18 mo
159.964 1052.46 155.683 1056.75 150.398 1056.75 cv
145.117 1056.75 140.831 1052.46 140.831 1047.18 cv
140.831 1041.9 145.117 1037.61 150.398 1037.61 cv
155.683 1037.61 159.964 1041.9 159.964 1047.18 cv
cp
f
171.793 1079.41 mo
171.793 1084.69 167.512 1088.97 162.227 1088.97 cv
156.945 1088.97 152.66 1084.69 152.66 1079.41 cv
152.66 1074.12 156.945 1069.84 162.227 1069.84 cv
167.512 1069.84 171.793 1074.12 171.793 1079.41 cv
cp
f
213.343 1052.61 mo
213.343 1057.89 209.061 1062.17 203.777 1062.17 cv
198.496 1062.17 194.211 1057.89 194.211 1052.61 cv
194.211 1047.32 198.496 1043.04 203.777 1043.04 cv
209.061 1043.04 213.343 1047.32 213.343 1052.61 cv
cp
f
194.814 159.795 mo
196.162 161.145 196.162 163.334 194.814 164.684 cv
193.462 166.039 191.273 166.039 189.924 164.684 cv
188.574 163.334 188.572 161.145 189.924 159.795 cv
191.273 158.445 193.462 158.445 194.814 159.795 cv
cp
480.652 710.496 mo
482.564 710.477 484.124 712.008 484.145 713.918 cv
484.166 715.826 482.631 717.391 480.723 717.407 cv
478.811 717.426 477.252 715.896 477.23 713.986 cv
477.211 712.076 478.742 710.516 480.652 710.496 cv
cp
197.348 155.691 mo
194.703 153.049 190.424 153.049 187.779 155.689 cv
185.139 158.332 186.123 161.908 187.779 165.258 cv
188.42 166.551 189.565 168.385 190.783 169.404 cv
190.783 176.436 li
201.429 188.106 li
201.429 328.457 li
183.422 345.459 li
183.422 402.088 li
178.725 408.141 li
178.936 460.027 li
216.709 497.338 li
232.617 497.338 li
238.582 504.043 li
238.582 536.731 li
233.061 543.393 li
233.061 602.428 li
233.561 602.934 li
333.084 703.379 li
365.973 703.379 li
378.645 690.213 li
417.756 690.213 li
439.433 711.51 li
474.495 711.51 li
474.624 712.783 474.979 714.139 475.322 715.115 cv
476.554 718.641 478.42 721.85 482.152 721.816 cv
485.893 721.777 488.886 718.717 488.85 714.982 cv
488.811 711.244 485.674 709.07 482.018 708.285 cv
479.831 707.818 476.956 707.258 475.52 708.053 cv
440.848 708.053 li
419.17 686.756 li
377.172 686.756 li
364.502 699.922 li
334.527 699.922 li
236.521 601.008 li
236.521 544.639 li
242.039 537.975 li
242.039 502.728 li
234.17 493.879 li
218.128 493.879 li
182.389 458.576 li
182.186 409.32 li
186.881 403.272 li
186.881 346.947 li
204.885 329.947 li
204.885 186.764 li
194.24 175.096 li
194.24 169.307 li
195.38 168.314 196.475 166.635 197.348 165.258 cv
199.348 162.102 199.988 158.332 197.348 155.691 cv
cp
0 .862745 1 rgb
f
403.215 720.428 mo
405.127 720.422 406.679 721.961 406.686 723.871 cv
406.697 725.781 405.152 727.334 403.242 727.34 cv
401.333 727.35 399.783 725.807 399.77 723.898 cv
399.764 721.988 401.304 720.434 403.215 720.428 cv
cp
170.314 160.154 mo
169.035 158.736 169.149 156.553 170.57 155.273 cv
171.988 153.997 174.174 154.111 175.449 155.529 cv
176.73 156.953 176.613 159.133 175.197 160.412 cv
173.774 161.691 171.59 161.578 170.314 160.154 cv
cp
399.046 717.641 mo
387.486 705.664 li
331.703 705.664 li
230.218 603.695 li
230.218 541.768 li
235.576 535.664 li
235.576 507.156 li
229.824 499.066 li
214.715 499.066 li
176.77 461.594 li
175.927 407.603 li
180.818 401.565 li
180.818 345.09 li
198.306 329.1 li
198.306 189.355 li
175.131 164.125 li
176.009 163.184 176.798 162.008 177.307 161.098 cv
179.138 157.84 180.306 154.32 177.807 151.541 cv
175.308 148.766 171.029 148.543 168.253 151.041 cv
165.479 153.545 165.922 157.338 167.753 160.598 cv
168.832 162.512 170.279 164.994 171.796 165.606 cv
194.848 190.703 li
194.848 327.576 li
177.361 343.568 li
177.361 400.338 li
172.451 406.402 li
173.336 463.06 li
213.297 502.523 li
228.039 502.523 li
232.117 508.262 li
232.117 534.361 li
226.76 540.465 li
226.76 605.123 li
227.263 605.627 li
330.266 709.123 li
386.018 709.123 li
397.013 720.513 li
397.009 722.008 397.439 723.803 397.857 725.016 cv
399.068 728.551 400.912 731.768 404.648 731.758 cv
408.385 731.74 411.398 728.699 411.384 724.963 cv
411.37 721.227 408.245 719.033 404.595 718.227 cv
402.822 717.836 400.595 717.383 399.046 717.641 cv
cp
f
212.422 170.779 mo
213.703 172.201 213.584 174.381 212.166 175.662 cv
210.748 176.941 208.561 176.826 207.283 175.404 cv
206.006 173.988 206.119 171.803 207.539 170.523 cv
208.959 169.246 211.145 169.361 212.422 170.779 cv
cp
373.168 668.842 mo
371.259 668.816 369.73 667.248 369.756 665.342 cv
369.779 663.43 371.348 661.9 373.259 661.928 cv
375.168 661.953 376.697 663.521 376.67 665.428 cv
376.645 667.34 375.076 668.867 373.168 668.842 cv
cp
205.225 166.291 mo
202.445 168.795 202.891 172.586 204.725 175.848 cv
205.595 177.396 206.71 179.314 207.907 180.316 cv
207.482 333.635 li
190.236 349.627 li
190.236 404.586 li
185.586 411.211 li
185.586 456.992 li
219.153 490.422 li
236.037 490.422 li
245.082 501.412 li
245.082 537.074 li
239.807 543.99 li
239.807 600.285 li
323.461 684.004 li
357.766 684.004 li
369.535 671.656 li
371.03 671.762 372.954 671.387 374.524 671.057 cv
378.182 670.283 381.33 668.117 381.378 664.381 cv
381.429 660.644 378.439 657.576 374.703 657.527 cv
370.97 657.477 369.095 660.678 367.848 664.203 cv
367.362 665.584 366.858 667.715 366.999 669.305 cv
356.287 680.547 li
324.893 680.547 li
243.266 598.854 li
243.266 545.158 li
248.539 538.242 li
248.539 500.174 li
237.67 486.965 li
220.584 486.965 li
189.045 455.557 li
189.045 412.303 li
193.695 405.678 li
193.695 351.135 li
210.933 335.148 li
211.365 180.084 li
212.524 179.094 213.628 177.506 214.274 176.348 cv
216.105 173.088 217.277 169.57 214.779 166.791 cv
212.274 164.016 208.002 163.793 205.225 166.291 cv
cp
f
140.229 193.605 mo
142.074 194.092 143.18 195.982 142.695 197.83 cv
142.209 199.676 140.318 200.781 138.473 200.295 cv
136.624 199.813 135.52 197.92 136.009 196.074 cv
136.49 194.227 138.378 193.123 140.229 193.605 cv
cp
140.37 188.787 mo
136.307 187.721 132.149 190.15 131.084 194.211 cv
130.02 198.275 132.447 202.43 136.513 203.496 cv
140.57 204.563 144.727 202.135 145.795 198.07 cv
146.859 194.01 144.432 189.855 140.37 188.787 cv
cp
f
140.229 223.691 mo
142.074 224.178 143.18 226.07 142.695 227.916 cv
142.209 229.764 140.318 230.867 138.473 230.381 cv
136.624 229.898 135.52 228.008 136.009 226.16 cv
136.49 224.314 138.378 223.209 140.229 223.691 cv
cp
140.37 218.875 mo
136.307 217.807 132.149 220.238 131.084 224.297 cv
130.02 228.361 132.447 232.516 136.513 233.582 cv
140.57 234.648 144.727 232.223 145.795 228.156 cv
146.859 224.098 144.432 219.941 140.37 218.875 cv
cp
f
140.652 250.551 mo
142.499 251.033 143.605 252.924 143.119 254.771 cv
142.638 256.619 140.744 257.723 138.898 257.24 cv
137.052 256.754 135.945 254.863 136.432 253.016 cv
136.916 251.168 138.806 250.063 140.652 250.551 cv
cp
140.797 245.729 mo
136.732 244.662 132.576 247.092 131.513 251.15 cv
130.443 255.217 132.873 259.373 136.936 260.441 cv
140.995 261.504 145.152 259.076 146.219 255.016 cv
147.285 250.953 144.857 246.795 140.797 245.729 cv
cp
f
135.174 295.002 mo
136.107 293.336 138.218 292.746 139.881 293.682 cv
141.55 294.613 142.139 296.725 141.201 298.387 cv
140.268 300.053 138.16 300.645 136.494 299.709 cv
134.83 298.773 134.24 296.666 135.174 295.002 cv
cp
135.141 304.338 mo
138.804 306.395 143.439 305.092 145.494 301.434 cv
147.552 297.768 146.249 293.135 142.587 291.078 cv
138.929 289.022 134.295 290.322 132.236 293.986 cv
130.182 297.645 131.48 302.281 135.141 304.338 cv
cp
f
212.08 143.256 mo
213.988 143.256 215.539 144.801 215.539 146.713 cv
215.539 148.621 213.988 150.172 212.08 150.172 cv
210.17 150.172 208.62 148.621 208.62 146.713 cv
208.62 144.801 210.17 143.256 212.08 143.256 cv
cp
203.924 147.797 mo
203.924 151.998 207.326 155.4 211.524 155.4 cv
215.729 155.4 219.134 151.998 219.134 147.797 cv
219.134 143.6 215.729 140.191 211.524 140.191 cv
207.326 140.191 203.924 143.6 203.924 147.797 cv
cp
f
254.77 704.906 mo
256.1 706.277 256.065 708.465 254.695 709.795 cv
253.324 711.125 251.131 711.088 249.804 709.719 cv
248.479 708.35 248.51 706.162 249.878 704.828 cv
251.249 703.502 253.44 703.535 254.77 704.906 cv
cp
155.016 158.029 mo
153.738 156.611 153.854 154.426 155.271 153.148 cv
156.69 151.869 158.878 151.984 160.152 153.402 cv
161.433 154.824 161.315 157.006 159.898 158.285 cv
158.479 159.564 156.295 159.451 155.016 158.029 cv
cp
209.791 509.871 mo
222.545 509.871 li
224.334 512.557 li
224.334 531.9 li
219.58 536.977 li
219.58 609.191 li
238.598 628.42 li
238.598 677.197 li
250.268 689.184 li
250.268 700.447 li
249.206 701.44 248.185 702.957 247.357 704.221 cv
245.308 707.344 244.609 711.102 247.207 713.785 cv
249.808 716.467 254.093 716.535 256.774 713.934 cv
259.455 711.332 258.527 707.742 256.924 704.367 cv
256.26 702.971 255.023 700.951 253.727 699.971 cv
253.727 687.779 li
242.054 675.791 li
242.054 626.998 li
223.039 607.769 li
223.039 538.344 li
227.791 533.268 li
227.791 511.51 li
224.395 506.414 li
211.218 506.414 li
170.078 465.49 li
169.453 405.434 li
174.23 399.393 li
174.23 341.633 li
190.236 326.938 li
190.236 192.34 li
159.895 161.928 li
160.748 160.998 161.513 159.857 162.01 158.971 cv
163.837 155.713 165.01 152.191 162.51 149.415 cv
160.01 146.639 155.732 146.416 152.957 148.915 cv
150.18 151.417 150.624 155.209 152.457 158.471 cv
153.556 160.426 155.04 162.965 156.591 163.51 cv
186.779 193.768 li
186.779 325.418 li
170.773 340.115 li
170.773 398.191 li
165.982 404.248 li
166.638 466.941 li
209.791 509.871 li
cp
f
367.369 755.666 mo
366.97 753.799 368.164 751.961 370.031 751.565 cv
371.898 751.166 373.734 752.359 374.134 754.227 cv
374.529 756.096 373.337 757.93 371.47 758.328 cv
369.602 758.727 367.768 757.533 367.369 755.666 cv
cp
215.229 517.455 mo
217.139 517.449 218.69 518.988 218.699 520.896 cv
218.709 522.807 217.166 524.361 215.256 524.367 cv
213.345 524.375 211.793 522.834 211.785 520.924 cv
211.777 519.016 213.315 517.459 215.229 517.455 cv
cp
137.564 124.43 mo
116.578 105.332 li
114.252 107.889 li
134.107 125.961 li
134.107 156.094 li
151.293 174.037 li
156.729 174.037 li
181.837 199.809 li
181.837 323.268 li
166.627 337.531 li
166.627 395.051 li
161.23 400.451 li
161.23 448.529 li
146.061 436.395 li
119.162 436.395 li
119.162 439.853 li
144.85 439.853 li
157.773 450.191 li
157.773 570.648 li
221.308 636.346 li
221.308 723.232 li
264.674 767.041 li
361.94 767.041 li
368.804 761.701 li
370.247 761.387 371.873 760.617 372.957 759.975 cv
376.168 758.07 378.943 755.604 378.166 751.949 cv
377.388 748.297 373.795 745.963 370.141 746.742 cv
366.486 747.519 364.975 751.031 364.932 754.766 cv
364.913 756.451 364.929 758.521 365.385 759.982 cv
360.753 763.584 li
266.115 763.584 li
224.768 721.813 li
224.768 634.947 li
161.23 569.25 li
161.23 468.666 li
209.197 516.215 li
208.748 517.81 209.315 520.43 209.869 522.041 cv
211.08 525.578 212.924 528.795 216.66 528.785 cv
220.398 528.768 223.41 525.725 223.396 521.99 cv
223.384 518.252 220.26 516.057 216.607 515.25 cv
215.327 514.969 213.811 514.658 212.481 514.602 cv
164.689 467.223 li
164.689 401.885 li
170.084 396.48 li
170.084 339.029 li
185.295 324.768 li
185.295 198.404 li
158.189 170.58 li
152.77 170.58 li
137.564 154.707 li
137.564 124.43 li
cp
f
130.646 428.367 mo
129.252 429.674 127.064 429.6 125.759 428.205 cv
124.455 426.818 124.524 424.629 125.918 423.326 cv
127.312 422.02 129.495 422.09 130.806 423.478 cv
132.111 424.877 132.043 427.06 130.646 428.367 cv
cp
130.881 128.76 mo
118.312 117.225 li
115.977 119.771 li
127.424 130.277 li
127.424 160.459 li
144.947 179.063 li
152.582 180.799 li
177.502 205.697 li
177.502 320.654 li
159.326 337.078 li
159.326 392.885 li
151.723 400.447 li
151.723 418.295 li
145.174 424.293 li
135.326 424.293 li
134.321 423.115 132.649 422 131.443 421.355 cv
128.153 419.592 124.609 418.494 121.884 421.047 cv
119.158 423.603 119.021 427.883 121.576 430.611 cv
124.131 433.334 127.914 432.818 131.139 430.918 cv
132.624 430.041 134.457 428.928 135.458 427.75 cv
146.518 427.75 li
155.18 419.818 li
155.18 401.887 li
162.783 394.324 li
162.783 338.615 li
180.959 322.19 li
180.959 204.266 li
154.32 177.648 li
146.745 175.924 li
130.881 159.09 li
130.881 128.76 li
cp
f
137.561 326.27 mo
139.459 326.492 140.818 328.205 140.595 330.102 cv
140.377 332.004 138.66 333.361 136.763 333.139 cv
134.867 332.918 133.509 331.205 133.729 329.309 cv
133.949 327.412 135.662 326.053 137.561 326.27 cv
cp
124.058 131.889 mo
118.437 125.563 li
115.852 127.857 li
120.602 133.203 li
120.602 162.607 li
141.76 185.707 li
148.475 185.707 li
171.027 208.459 li
171.027 294.35 li
141.8 324.016 li
140.245 323.691 138.093 323.93 136.679 324.232 cv
133.024 325.016 129.609 326.465 129.179 330.178 cv
128.748 333.887 131.41 337.242 135.119 337.672 cv
138.83 338.105 141.385 335.264 142.619 331.732 cv
143.148 330.217 143.767 328.355 143.852 326.857 cv
174.484 295.768 li
174.484 207.039 li
149.918 182.25 li
143.283 182.25 li
124.058 161.264 li
124.058 131.889 li
cp
f
210.895 354.203 mo
212.649 354.951 213.465 356.984 212.715 358.74 cv
211.965 360.496 209.932 361.31 208.174 360.56 cv
206.422 359.807 205.604 357.777 206.355 356.022 cv
207.107 354.266 209.139 353.453 210.895 354.203 cv
cp
152.73 130.82 mo
118.348 97.5898 li
115.943 100.074 li
151.332 134.275 li
212.131 134.275 li
222.174 141.107 li
222.174 183.65 li
216.343 189.018 li
216.343 347.822 li
211.94 351.34 li
211.825 351.283 211.712 351.221 211.593 351.17 cv
207.732 349.518 203.26 351.309 201.609 355.17 cv
199.959 359.033 201.748 363.5 205.611 365.152 cv
209.47 366.807 213.94 365.014 215.593 361.152 cv
216.703 358.557 216.253 355.691 214.671 353.588 cv
219.802 349.486 li
219.802 190.531 li
225.631 185.167 li
225.631 139.279 li
213.199 130.82 li
152.73 130.82 li
cp
f
165.734 206.021 mo
170.09 211.467 li
170.09 273.994 li
159.093 284.037 li
131.699 284.037 li
116.646 299.297 li
114.183 296.869 li
130.253 280.58 li
157.749 280.58 li
166.634 272.469 li
166.634 212.678 li
164.074 209.48 li
128.51 209.48 li
116.014 198.688 li
118.274 196.07 li
129.795 206.021 li
165.734 206.021 li
cp
f
160.131 212.938 mo
164.041 217.963 li
164.041 271.451 li
156.234 277.916 li
128.66 277.916 li
118.359 288.074 li
115.93 285.613 li
127.24 274.457 li
154.988 274.457 li
160.582 269.824 li
160.582 219.146 li
158.439 216.395 li
125.105 216.395 li
114.234 206.201 li
116.598 203.68 li
126.473 212.938 li
160.131 212.938 li
cp
f
151.253 238.006 mo
157.988 243.447 li
157.988 265.426 li
149.729 271.935 li
126.912 271.935 li
118.336 280.103 li
115.951 277.598 li
125.529 268.478 li
148.529 268.478 li
154.531 263.746 li
154.531 245.096 li
150.031 241.465 li
131.098 241.465 li
114.162 223.635 li
116.668 221.254 li
132.582 238.006 li
151.253 238.006 li
cp
f
245.77 139.91 mo
248.113 139.91 250.01 141.807 250.01 144.15 cv
250.01 146.49 248.113 148.391 245.77 148.391 cv
243.429 148.391 241.527 146.49 241.527 144.15 cv
241.527 141.807 243.429 139.91 245.77 139.91 cv
cp
118.756 68.3398 mo
115.281 65.0645 109.812 65.2188 106.535 68.6953 cv
104.959 70.3633 104.179 72.4971 104.179 74.625 cv
104.179 76.9199 105.087 79.2129 106.891 80.9141 cv
147.518 119.254 li
149.12 120.766 151.244 121.611 153.451 121.611 cv
231.402 121.611 li
237.302 126.896 li
237.302 146.068 li
237.302 150.842 241.172 154.713 245.945 154.713 cv
250.72 154.713 254.59 150.842 254.59 146.068 cv
254.59 123.035 li
254.59 120.578 253.543 118.238 251.712 116.598 cv
240.475 106.529 li
238.893 105.109 236.837 104.322 234.707 104.322 cv
156.885 104.322 li
118.756 68.3398 li
cp
f
448.537 837.758 mo
448.935 835.889 450.77 834.697 452.641 835.096 cv
454.506 835.49 455.699 837.33 455.301 839.197 cv
454.904 841.065 453.066 842.258 451.199 841.859 cv
449.332 841.46 448.139 839.625 448.537 837.758 cv
cp
634.023 1083.83 mo
569.623 1020.73 li
476.273 1020.73 li
424.99 969.658 li
424.99 865.283 li
446.949 843.865 li
448.408 844.301 450.441 844.315 452.102 844.294 cv
455.836 844.25 459.348 842.74 460.123 839.087 cv
460.902 835.434 458.57 831.842 454.916 831.06 cv
451.262 830.283 448.799 833.059 446.891 836.271 cv
446.184 837.462 445.328 839.309 445.09 840.85 cv
421.531 863.828 li
421.531 971.096 li
474.846 1024.19 li
568.211 1024.19 li
632.613 1087.29 li
756.141 1087.29 li
762.117 1094.2 li
762.117 1119.85 li
765.576 1119.85 li
765.576 1092.91 li
757.723 1083.83 li
634.023 1083.83 li
cp
f
478.076 807.549 mo
478.473 805.682 480.31 804.488 482.178 804.889 cv
484.045 805.283 485.236 807.119 484.84 808.986 cv
484.441 810.852 482.605 812.047 480.738 811.65 cv
478.871 811.25 477.68 809.416 478.076 807.549 cv
cp
665.758 1064.06 mo
667.107 1062.72 669.297 1062.72 670.648 1064.06 cv
671.998 1065.42 671.998 1067.6 670.648 1068.96 cv
669.297 1070.3 667.107 1070.3 665.758 1068.96 cv
664.406 1067.6 664.406 1065.42 665.758 1064.06 cv
cp
457.189 983.418 mo
487.961 1013.81 li
575.281 1013.81 li
631.471 1067.99 li
660.955 1067.99 li
661.953 1069.24 663.852 1070.44 665.185 1071.1 cv
668.533 1072.76 672.109 1073.74 674.754 1071.1 cv
677.393 1068.46 677.393 1064.17 674.75 1061.53 cv
672.109 1058.89 668.342 1059.53 665.185 1061.53 cv
663.852 1062.38 662.234 1063.43 661.23 1064.53 cv
632.865 1064.53 li
576.676 1010.35 li
489.379 1010.35 li
460.646 981.971 li
460.646 880.852 li
469.65 872.212 li
469.935 820.613 li
476.795 813.75 li
478.223 814.1 480.098 814.102 481.641 814.085 cv
485.377 814.044 488.885 812.533 489.664 808.877 cv
490.441 805.225 488.109 801.633 484.453 800.852 cv
480.801 800.076 478.338 802.848 476.43 806.062 cv
475.654 807.369 474.693 809.469 474.574 811.082 cv
466.486 819.174 li
466.199 870.729 li
457.189 879.377 li
457.189 983.418 li
cp
f
1049.52 1049.09 mo
1048.17 1050.44 1045.98 1050.44 1044.63 1049.09 cv
1043.28 1047.74 1043.28 1045.55 1044.63 1044.2 cv
1045.98 1042.85 1048.17 1042.85 1049.52 1044.2 cv
1050.87 1045.55 1050.87 1047.74 1049.52 1049.09 cv
cp
495.332 761.783 mo
493.422 761.762 491.893 760.201 491.912 758.291 cv
491.928 756.383 493.492 754.848 495.4 754.867 cv
497.31 754.889 498.842 756.449 498.822 758.361 cv
498.803 760.271 497.242 761.803 495.332 761.783 cv
cp
1044.06 1041.67 mo
1042.68 1042.54 1041 1043.63 1040.01 1044.77 cv
1034.22 1044.77 li
1022.55 1034.13 li
879.371 1034.13 li
862.371 1052.13 li
806.047 1052.13 li
799.998 1056.83 li
750.742 1056.63 li
715.439 1020.88 li
715.439 1004.84 li
706.59 996.975 li
671.344 996.975 li
664.68 1002.49 li
608.31 1002.49 li
509.396 904.486 li
509.396 874.512 li
522.563 861.842 li
522.563 819.844 li
501.266 798.166 li
501.266 763.494 li
502.06 762.057 501.501 759.182 501.032 756.996 cv
500.248 753.34 498.074 750.201 494.336 750.164 cv
490.602 750.128 487.542 753.121 487.502 756.861 cv
487.469 760.594 490.678 762.459 494.203 763.691 cv
495.18 764.033 496.535 764.389 497.809 764.518 cv
497.809 799.58 li
519.105 821.258 li
519.105 860.369 li
505.939 873.041 li
505.939 905.93 li
606.385 1005.45 li
606.891 1005.95 li
665.926 1005.95 li
672.588 1000.43 li
705.275 1000.43 li
711.98 1006.4 li
711.98 1022.3 li
749.291 1060.08 li
801.178 1060.29 li
807.23 1055.59 li
863.859 1055.59 li
880.861 1037.58 li
1021.21 1037.58 li
1032.88 1048.23 li
1039.91 1048.23 li
1040.93 1049.45 1042.77 1050.59 1044.06 1051.23 cv
1047.41 1052.89 1050.99 1053.88 1053.63 1051.23 cv
1056.27 1048.59 1056.27 1044.31 1053.63 1041.67 cv
1050.99 1039.03 1047.22 1039.67 1044.06 1041.67 cv
cp
f
787.795 1042.1 mo
786.516 1043.52 784.33 1043.63 782.912 1042.35 cv
781.494 1041.07 781.385 1038.88 782.667 1037.47 cv
783.949 1036.05 786.135 1035.94 787.549 1037.22 cv
788.967 1038.5 789.078 1040.69 787.795 1042.1 cv
cp
542.607 900.029 mo
541.234 898.707 541.195 896.516 542.521 895.143 cv
543.848 893.766 546.037 893.727 547.412 895.057 cv
548.785 896.383 548.822 898.572 547.496 899.945 cv
546.168 901.32 543.98 901.354 542.607 900.029 cv
cp
781.986 1035.36 mo
780.852 1035.99 779.301 1037.06 778.307 1038.19 cv
771.385 1038.19 li
718.344 983.135 li
664.457 982.687 li
659.124 989.609 li
612.008 989.609 li
546.441 921.773 li
546.441 904.896 li
547.744 903.92 548.986 901.885 549.65 900.479 cv
551.248 897.102 552.17 893.51 549.48 890.914 cv
546.795 888.32 542.512 888.394 539.914 891.082 cv
537.322 893.769 538.031 897.525 540.084 900.648 cv
540.91 901.902 541.926 903.406 542.984 904.396 cv
542.984 923.169 li
610.542 993.068 li
660.826 993.068 li
666.148 986.16 li
716.861 986.578 li
769.916 1041.65 li
777.943 1041.65 li
778.926 1042.87 780.889 1044.02 782.471 1044.91 cv
785.725 1046.75 789.518 1047.2 792.023 1044.43 cv
794.527 1041.66 794.314 1037.38 791.543 1034.87 cv
788.768 1032.37 785.249 1033.54 781.986 1035.36 cv
cp
f
485.42 839.242 mo
483.512 839.229 481.969 837.68 481.978 835.771 cv
481.984 833.861 483.537 832.316 485.447 832.326 cv
487.357 832.334 488.896 833.887 488.891 835.799 cv
488.885 837.709 487.33 839.25 485.42 839.242 cv
cp
1048.91 1063.82 mo
1050.19 1062.4 1052.37 1062.28 1053.79 1063.56 cv
1055.21 1064.84 1055.32 1067.03 1054.04 1068.44 cv
1052.77 1069.86 1050.58 1069.98 1049.16 1068.7 cv
1047.74 1067.42 1047.63 1065.24 1048.91 1063.82 cv
cp
491.092 834.419 mo
490.285 830.768 488.092 827.643 484.355 827.631 cv
480.619 827.615 477.578 830.628 477.56 834.365 cv
477.551 838.102 480.768 839.945 484.303 841.156 cv
485.516 841.574 487.31 842.004 488.807 842 cv
500.195 852.996 li
500.195 908.748 li
603.691 1011.75 li
604.195 1012.25 li
668.853 1012.25 li
674.958 1006.9 li
701.057 1006.9 li
706.795 1010.97 li
706.795 1025.72 li
746.258 1065.68 li
802.917 1066.56 li
808.98 1061.65 li
865.75 1061.65 li
881.742 1044.17 li
1018.62 1044.17 li
1043.71 1067.22 li
1044.32 1068.73 1046.81 1070.18 1048.72 1071.26 cv
1051.98 1073.09 1055.77 1073.54 1058.28 1070.76 cv
1060.78 1067.98 1060.55 1063.71 1057.78 1061.21 cv
1055 1058.71 1051.48 1059.88 1048.22 1061.71 cv
1047.31 1062.21 1046.13 1063.01 1045.19 1063.88 cv
1019.96 1040.71 li
880.219 1040.71 li
864.228 1058.2 li
807.754 1058.2 li
801.715 1063.09 li
747.725 1062.24 li
710.252 1024.3 li
710.252 1009.19 li
702.162 1003.44 li
673.654 1003.44 li
667.551 1008.8 li
605.624 1008.8 li
503.654 907.31 li
503.654 851.527 li
491.678 839.967 li
491.935 838.418 491.482 836.191 491.092 834.419 cv
cp
f
1038.8 1031.47 mo
1037.52 1032.89 1035.33 1033.01 1033.91 1031.73 cv
1032.49 1030.45 1032.38 1028.27 1033.66 1026.85 cv
1034.94 1025.43 1037.12 1025.31 1038.54 1026.59 cv
1039.96 1027.87 1040.07 1030.05 1038.8 1031.47 cv
cp
543.891 862.344 mo
545.797 862.316 547.365 863.846 547.391 865.756 cv
547.418 867.666 545.889 869.234 543.977 869.258 cv
542.07 869.283 540.502 867.756 540.477 865.846 cv
540.451 863.937 541.979 862.369 543.891 862.344 cv
cp
1042.53 1024.23 mo
1039.75 1021.74 1036.23 1022.91 1032.97 1024.74 cv
1031.81 1025.38 1030.22 1026.49 1029.23 1027.65 cv
874.17 1028.08 li
858.184 1045.32 li
803.641 1045.32 li
797.016 1049.97 li
753.762 1049.97 li
722.353 1018.43 li
722.353 1001.34 li
709.144 990.475 li
671.076 990.475 li
664.16 995.748 li
610.465 995.748 li
528.771 914.121 li
528.771 882.727 li
540.014 872.014 li
541.604 872.154 543.734 871.65 545.115 871.166 cv
548.641 869.919 551.842 868.044 551.792 864.31 cv
551.742 860.574 548.674 857.585 544.938 857.635 cv
541.201 857.684 539.035 860.832 538.262 864.488 cv
537.932 866.059 537.557 867.982 537.662 869.477 cv
525.315 881.248 li
525.315 915.553 li
609.032 999.207 li
665.328 999.207 li
672.244 993.932 li
707.906 993.932 li
718.896 1002.98 li
718.896 1019.86 li
752.326 1053.43 li
798.107 1053.43 li
804.732 1048.78 li
859.691 1048.78 li
875.684 1031.53 li
1029 1031.11 li
1030 1032.3 1031.92 1033.42 1033.47 1034.29 cv
1036.73 1036.12 1040.52 1036.57 1043.03 1033.79 cv
1045.53 1031.01 1045.3 1026.74 1042.53 1024.23 cv
cp
f
652.684 1104.76 mo
652.287 1106.63 650.449 1107.82 648.582 1107.42 cv
646.715 1107.02 645.521 1105.19 645.922 1103.32 cv
646.318 1101.45 648.154 1100.26 650.023 1100.66 cv
651.891 1101.05 653.082 1102.89 652.684 1104.76 cv
cp
363.248 808.4 mo
361.338 808.365 359.818 806.789 359.852 804.881 cv
359.883 802.973 361.458 801.451 363.367 801.484 cv
365.277 801.518 366.799 803.092 366.764 805 cv
366.73 806.91 365.156 808.434 363.248 808.4 cv
cp
652.299 1096.63 mo
648.646 1095.85 646.18 1098.62 644.273 1101.83 cv
643.518 1103.11 642.594 1105.12 642.434 1106.72 cv
635.658 1113.08 li
577.01 1113.08 li
565.461 1100.87 li
565.461 1050.7 li
548.455 1033.7 li
456.4 1033.7 li
382.633 958.648 li
382.633 819.807 li
369.434 808.736 li
369.533 807.19 369.119 805.227 368.703 803.924 cv
367.568 800.367 365.795 797.107 362.057 797.041 cv
358.322 796.977 355.241 799.951 355.176 803.69 cv
355.111 807.424 358.191 809.687 361.82 810.568 cv
363.494 810.973 365.564 811.437 367.102 811.293 cv
379.174 821.419 li
379.174 960.062 li
454.953 1037.15 li
547.023 1037.15 li
562.002 1052.13 li
562.002 1102.24 li
575.521 1116.54 li
637.029 1116.54 li
644.531 1109.49 li
645.971 1109.87 647.9 1109.87 649.482 1109.86 cv
653.217 1109.82 656.728 1108.3 657.508 1104.65 cv
658.285 1100.99 655.953 1097.4 652.299 1096.63 cv
cp
f
634.941 1043.59 mo
636.85 1043.59 638.398 1045.14 638.398 1047.05 cv
638.398 1048.96 636.85 1050.51 634.941 1050.51 cv
633.031 1050.51 631.484 1048.96 631.484 1047.05 cv
631.484 1045.14 633.031 1043.59 634.941 1043.59 cv
cp
636.326 1054.92 mo
640.065 1054.92 643.092 1051.89 643.092 1048.16 cv
643.092 1044.42 639.975 1042.21 636.326 1041.39 cv
633.902 1040.85 630.619 1040.17 629.394 1041.39 cv
628.168 1042.62 628.889 1046.17 629.565 1048.16 cv
630.76 1051.7 632.592 1054.92 636.326 1054.92 cv
cp
f
1013.24 1103.01 mo
1011.4 1103.49 1009.51 1102.39 1009.02 1100.54 cv
1008.54 1098.7 1009.64 1096.8 1011.49 1096.32 cv
1013.34 1095.83 1015.23 1096.94 1015.71 1098.79 cv
1016.2 1100.63 1015.09 1102.52 1013.24 1103.01 cv
cp
1011.25 1093.22 mo
1007.18 1094.29 1004.76 1098.44 1005.82 1102.5 cv
1006.89 1106.57 1011.04 1108.99 1015.11 1107.93 cv
1019.17 1106.86 1021.6 1102.71 1020.53 1098.64 cv
1019.46 1094.58 1015.31 1092.15 1011.25 1093.22 cv
cp
f
983.158 1103.01 mo
981.31 1103.49 979.42 1102.39 978.938 1100.54 cv
978.451 1098.7 979.555 1096.8 981.402 1096.32 cv
983.248 1095.83 985.141 1096.94 985.627 1098.79 cv
986.109 1100.63 985.004 1102.52 983.158 1103.01 cv
cp
981.162 1093.22 mo
977.096 1094.29 974.67 1098.44 975.736 1102.5 cv
976.803 1106.57 980.957 1108.99 985.021 1107.93 cv
989.08 1106.86 991.512 1102.71 990.443 1098.64 cv
989.377 1094.58 985.221 1092.15 981.162 1093.22 cv
cp
f
956.303 1102.58 mo
954.455 1103.07 952.564 1101.96 952.078 1100.12 cv
951.596 1098.27 952.699 1096.38 954.547 1095.89 cv
956.394 1095.41 958.285 1096.51 958.768 1098.36 cv
959.256 1100.21 958.15 1102.1 956.303 1102.58 cv
cp
954.303 1092.79 mo
950.242 1093.86 947.814 1098.02 948.877 1102.08 cv
949.945 1106.14 954.102 1108.57 958.168 1107.5 cv
962.227 1106.44 964.656 1102.28 963.59 1098.22 cv
962.523 1094.16 958.365 1091.73 954.303 1092.79 cv
cp
f
909.609 1102.52 mo
908.674 1100.85 909.266 1098.75 910.932 1097.81 cv
912.594 1096.88 914.705 1097.46 915.637 1099.13 cv
916.572 1100.8 915.982 1102.91 914.316 1103.84 cv
912.652 1104.77 910.545 1104.18 909.609 1102.52 cv
cp
915.333 1106.78 mo
918.996 1104.72 920.297 1100.08 918.24 1096.43 cv
916.184 1092.76 911.551 1091.46 907.885 1093.52 cv
904.227 1095.57 902.924 1100.21 904.98 1103.87 cv
907.037 1107.53 911.674 1108.83 915.333 1106.78 cv
cp
f
712.129 1110.3 mo
710.719 1111.59 708.533 1111.49 707.244 1110.08 cv
705.953 1108.67 706.053 1106.49 707.463 1105.2 cv
708.873 1103.91 711.06 1104.01 712.35 1105.42 cv
713.639 1106.83 713.537 1109.02 712.129 1110.3 cv
cp
705.805 1102.57 mo
702.705 1105.4 702.488 1110.21 705.322 1113.31 cv
708.156 1116.41 712.967 1116.63 716.068 1113.79 cv
719.167 1110.96 719.383 1106.15 716.551 1103.05 cv
713.713 1099.95 708.904 1099.73 705.805 1102.57 cv
cp
f
749.051 1109.88 mo
747.641 1111.16 745.455 1111.07 744.166 1109.66 cv
742.874 1108.25 742.973 1106.06 744.385 1104.77 cv
745.792 1103.48 747.98 1103.58 749.269 1104.99 cv
750.56 1106.4 750.458 1108.59 749.051 1109.88 cv
cp
742.727 1102.14 mo
739.627 1104.97 739.412 1109.78 742.244 1112.88 cv
745.076 1115.98 749.889 1116.2 752.988 1113.37 cv
756.088 1110.53 756.303 1105.72 753.471 1102.62 cv
750.635 1099.52 745.826 1099.31 742.727 1102.14 cv
cp
f
686.891 1056.34 mo
688.527 1055.35 690.65 1055.88 691.635 1057.52 cv
692.615 1059.16 692.086 1061.28 690.445 1062.27 cv
688.809 1063.25 686.684 1062.72 685.701 1061.08 cv
684.717 1059.44 685.252 1057.32 686.891 1056.34 cv
cp
681.115 1062.56 mo
683.275 1066.17 687.941 1067.33 691.545 1065.18 cv
695.148 1063.02 696.316 1058.35 694.156 1054.74 cv
691.998 1051.14 687.328 1049.97 683.723 1052.13 cv
683.443 1052.3 683.185 1052.48 682.938 1052.68 cv
673.518 1045.12 li
672.029 1043.93 669.85 1044.16 668.658 1045.65 cv
667.463 1047.14 667.699 1049.32 669.188 1050.51 cv
678.697 1058.14 li
679.103 1058.47 679.563 1058.68 680.037 1058.79 cv
680.06 1060.08 680.404 1061.38 681.115 1062.56 cv
cp
f
1062.61 1030.39 mo
1060.7 1030.39 1059.15 1028.84 1059.15 1026.93 cv
1059.15 1025.03 1060.7 1023.47 1062.61 1023.47 cv
1064.52 1023.47 1066.06 1025.03 1066.06 1026.93 cv
1066.06 1028.84 1064.52 1030.39 1062.61 1030.39 cv
cp
1069.13 1027.49 mo
1069.13 1023.29 1065.72 1019.88 1061.52 1019.88 cv
1057.32 1019.88 1053.92 1023.29 1053.92 1027.49 cv
1053.92 1031.69 1057.32 1035.09 1061.52 1035.09 cv
1065.72 1035.09 1069.13 1031.69 1069.13 1027.49 cv
cp
f
504.49 989.135 mo
503.156 990.503 500.969 990.535 499.6 989.209 cv
498.23 987.883 498.193 985.69 499.523 984.318 cv
500.853 982.947 503.042 982.914 504.412 984.244 cv
505.782 985.572 505.816 987.764 504.49 989.135 cv
cp
1051.03 1079.12 mo
1052.31 1077.7 1054.49 1077.58 1055.92 1078.86 cv
1057.33 1080.13 1057.45 1082.32 1056.17 1083.74 cv
1054.89 1085.16 1052.71 1085.28 1051.29 1084 cv
1049.87 1082.72 1049.75 1080.54 1051.03 1079.12 cv
cp
742.377 1072.38 mo
805.07 1073.03 li
811.127 1068.24 li
869.203 1068.24 li
883.9 1052.23 li
1015.55 1052.23 li
1045.81 1082.42 li
1046.35 1083.97 1048.89 1085.46 1050.85 1086.56 cv
1054.11 1088.39 1057.9 1088.83 1060.4 1086.06 cv
1062.9 1083.28 1062.68 1079 1059.9 1076.5 cv
1057.13 1074 1053.61 1075.18 1050.35 1077 cv
1049.46 1077.5 1048.32 1078.27 1047.39 1079.12 cv
1016.98 1048.78 li
882.381 1048.78 li
867.685 1064.78 li
809.926 1064.78 li
803.885 1069.56 li
743.828 1068.93 li
702.904 1027.8 li
702.904 1014.62 li
697.809 1011.22 li
676.051 1011.22 li
670.975 1015.97 li
601.549 1015.97 li
582.32 996.959 li
533.527 996.959 li
521.539 985.287 li
509.348 985.287 li
508.367 983.99 506.348 982.753 504.95 982.09 cv
501.576 980.486 497.986 979.559 495.385 982.238 cv
492.783 984.921 492.852 989.205 495.533 991.807 cv
498.217 994.404 501.975 993.705 505.098 991.656 cv
506.361 990.828 507.879 989.807 508.871 988.746 cv
520.135 988.746 li
532.121 1000.42 li
580.898 1000.42 li
600.127 1019.43 li
672.342 1019.43 li
677.418 1014.68 li
696.762 1014.68 li
699.447 1016.47 li
699.447 1029.22 li
742.377 1072.38 li
cp
f
450.99 867.543 mo
451.389 865.676 453.223 864.484 455.092 864.881 cv
456.959 865.279 458.152 867.115 457.754 868.982 cv
457.357 870.85 455.52 872.043 453.652 871.644 cv
451.785 871.246 450.592 869.412 450.99 867.543 cv
cp
688.394 1027.23 mo
686.484 1027.22 684.943 1025.67 684.951 1023.76 cv
684.957 1021.85 686.512 1020.3 688.422 1020.31 cv
690.33 1020.32 691.869 1021.88 691.863 1023.79 cv
691.859 1025.7 690.303 1027.24 688.394 1027.23 cv
cp
1054.61 1101.45 mo
1038.74 1086.24 li
1038.74 1080.82 li
1010.91 1053.72 li
884.551 1053.72 li
870.289 1068.93 li
812.838 1068.93 li
807.434 1074.32 li
742.096 1074.32 li
694.717 1026.53 li
694.66 1025.2 694.35 1023.69 694.068 1022.41 cv
693.262 1018.75 691.066 1015.63 687.328 1015.62 cv
683.594 1015.6 680.551 1018.62 680.533 1022.35 cv
680.523 1026.09 683.74 1027.93 687.277 1029.14 cv
688.889 1029.7 691.508 1030.27 693.103 1029.82 cv
740.652 1077.78 li
640.068 1077.78 li
574.371 1014.25 li
487.506 1014.25 li
445.734 972.898 li
445.734 878.26 li
449.336 873.628 li
450.797 874.085 452.866 874.1 454.553 874.082 cv
458.287 874.039 461.799 872.527 462.576 868.873 cv
463.355 865.219 461.021 861.627 457.369 860.848 cv
453.715 860.07 451.249 862.846 449.344 866.057 cv
448.701 867.141 447.932 868.766 447.617 870.209 cv
442.277 877.072 li
442.277 974.34 li
486.086 1017.71 li
572.973 1017.71 li
638.67 1081.24 li
759.127 1081.24 li
769.465 1094.16 li
769.465 1119.85 li
772.924 1119.85 li
772.924 1092.95 li
760.789 1077.78 li
808.866 1077.78 li
814.268 1072.39 li
871.787 1072.39 li
886.051 1057.18 li
1009.51 1057.18 li
1035.28 1082.29 li
1035.28 1087.72 li
1053.22 1104.91 li
1083.36 1104.91 li
1101.43 1124.76 li
1103.99 1122.43 li
1084.89 1101.45 li
1054.61 1101.45 li
cp
f
785.84 1108.21 mo
787.228 1109.52 787.299 1111.7 785.992 1113.1 cv
784.689 1114.49 782.5 1114.56 781.113 1113.26 cv
779.719 1111.95 779.644 1109.76 780.951 1108.37 cv
782.258 1106.97 784.441 1106.9 785.84 1108.21 cv
cp
1050.23 1108.13 mo
1033.39 1092.27 li
1031.67 1084.69 li
1005.05 1058.05 li
887.129 1058.05 li
870.703 1076.23 li
814.994 1076.23 li
807.432 1083.83 li
789.5 1083.83 li
781.568 1092.5 li
781.568 1103.55 li
780.391 1104.56 779.277 1106.39 778.4 1107.88 cv
776.5 1111.1 775.984 1114.88 778.708 1117.44 cv
781.435 1119.99 785.715 1119.86 788.271 1117.13 cv
790.824 1114.4 789.727 1110.86 787.963 1107.57 cv
787.318 1106.36 786.203 1104.69 785.025 1103.69 cv
785.025 1093.84 li
791.023 1087.29 li
808.871 1087.29 li
816.434 1079.69 li
872.24 1079.69 li
888.664 1061.51 li
1003.62 1061.51 li
1028.52 1086.43 li
1030.26 1094.07 li
1048.86 1111.59 li
1079.04 1111.59 li
1089.55 1123.04 li
1092.09 1120.7 li
1080.56 1108.13 li
1050.23 1108.13 li
cp
f
880.01 1105.29 mo
878.113 1105.51 876.4 1104.15 876.18 1102.25 cv
875.958 1100.35 877.314 1098.64 879.217 1098.42 cv
881.113 1098.2 882.826 1099.55 883.049 1101.45 cv
883.266 1103.35 881.906 1105.06 880.01 1105.29 cv
cp
1048.05 1114.96 mo
1027.07 1095.73 li
1027.07 1089.1 li
1002.28 1064.53 li
913.551 1064.53 li
882.461 1095.16 li
880.963 1095.25 879.102 1095.87 877.586 1096.39 cv
874.055 1097.63 871.213 1100.18 871.646 1103.89 cv
872.076 1107.6 875.432 1110.27 879.141 1109.83 cv
882.853 1109.4 884.303 1105.99 885.086 1102.33 cv
885.389 1100.92 885.627 1098.77 885.303 1097.21 cv
914.969 1067.99 li
1000.86 1067.99 li
1023.61 1090.54 li
1023.61 1097.25 li
1046.71 1118.41 li
1076.12 1118.41 li
1081.46 1123.16 li
1083.76 1120.58 li
1077.43 1114.96 li
1048.05 1114.96 li
cp
f
853.297 1032.66 mo
851.542 1033.41 849.512 1032.59 848.758 1030.84 cv
848.008 1029.08 848.822 1027.05 850.578 1026.3 cv
852.334 1025.55 854.367 1026.36 855.115 1028.12 cv
855.865 1029.88 855.053 1031.91 853.297 1032.66 cv
cp
1078.5 1025.81 mo
1070.04 1013.38 li
1024.15 1013.38 li
1018.79 1019.21 li
859.833 1019.21 li
855.73 1024.34 li
853.627 1022.76 850.762 1022.31 848.167 1023.42 cv
844.305 1025.07 842.512 1029.54 844.167 1033.4 cv
845.818 1037.27 850.285 1039.05 854.148 1037.4 cv
858.01 1035.75 859.801 1031.28 858.148 1027.42 cv
858.098 1027.3 858.035 1027.19 857.978 1027.07 cv
861.496 1022.67 li
1020.3 1022.67 li
1025.67 1016.84 li
1068.21 1016.84 li
1075.04 1026.88 li
1075.04 1087.68 li
1109.24 1123.07 li
1111.73 1120.67 li
1078.5 1086.28 li
1078.5 1025.81 li
cp
f
802.318 1102.27 mo
800.91 1103.56 798.723 1103.46 797.434 1102.05 cv
796.146 1100.64 796.244 1098.46 797.656 1097.17 cv
799.063 1095.88 801.252 1095.98 802.537 1097.39 cv
803.828 1098.8 803.727 1100.99 802.318 1102.27 cv
cp
820.039 1096.07 mo
808.15 1096.07 li
807.951 1096.07 807.762 1096.09 807.572 1096.13 cv
807.33 1095.74 807.057 1095.37 806.738 1095.02 cv
803.906 1091.92 799.098 1091.71 795.998 1094.54 cv
792.894 1097.37 792.682 1102.18 795.516 1105.28 cv
798.348 1108.38 803.156 1108.6 806.258 1105.76 cv
807.129 1104.96 807.764 1104.01 808.174 1102.98 cv
820.039 1102.98 li
821.947 1102.98 823.496 1101.43 823.496 1099.53 cv
823.496 1097.62 821.947 1096.07 820.039 1096.07 cv
cp
f
847.586 1088.51 mo
848.228 1086.71 850.208 1085.78 851.999 1086.42 cv
853.801 1087.06 854.742 1089.04 854.096 1090.83 cv
853.459 1092.64 851.48 1093.57 849.68 1092.93 cv
847.885 1092.29 846.945 1090.31 847.586 1088.51 cv
cp
856.502 1095.65 mo
856.332 1095.25 856.09 1094.91 855.807 1094.61 cv
856.242 1093.3 856.463 1091.65 856.633 1090.27 cv
857.088 1086.56 856.053 1082.88 852.533 1081.62 cv
849.016 1080.37 845.144 1082.2 843.889 1085.72 cv
842.637 1089.24 845.059 1092.05 847.988 1094.37 cv
848.555 1094.81 849.297 1095.33 850.088 1095.78 cv
849.785 1096.58 849.773 1097.5 850.133 1098.35 cv
853.158 1105.5 li
853.719 1106.82 854.998 1107.61 856.346 1107.61 cv
856.795 1107.61 857.25 1107.52 857.689 1107.33 cv
859.449 1106.59 860.273 1104.56 859.525 1102.8 cv
856.502 1095.65 li
cp
f
1003.3 1073.28 mo
997.852 1068.92 li
935.324 1068.92 li
925.281 1079.92 li
925.281 1107.31 li
910.021 1122.37 li
912.449 1124.83 li
928.738 1108.76 li
928.738 1081.26 li
936.85 1072.38 li
996.641 1072.38 li
999.838 1074.94 li
999.838 1110.5 li
1010.63 1123 li
1013.25 1120.74 li
1003.3 1109.22 li
1003.3 1073.28 li
cp
f
996.381 1078.88 mo
991.355 1074.97 li
937.867 1074.97 li
931.402 1082.78 li
931.402 1110.35 li
921.244 1120.65 li
923.705 1123.08 li
934.861 1111.77 li
934.861 1084.03 li
939.494 1078.43 li
990.172 1078.43 li
992.924 1080.57 li
992.924 1113.91 li
1003.12 1124.78 li
1005.64 1122.42 li
996.381 1112.54 li
996.381 1078.88 li
cp
f
971.313 1087.76 mo
965.871 1081.03 li
943.893 1081.03 li
937.383 1089.29 li
937.383 1112.1 li
929.215 1120.68 li
931.721 1123.06 li
940.84 1113.48 li
940.84 1090.48 li
945.572 1084.48 li
964.223 1084.48 li
967.853 1088.98 li
967.853 1107.92 li
985.684 1124.85 li
988.064 1122.35 li
971.313 1106.43 li
971.313 1087.76 li
cp
f
1065.17 997.486 mo
1062.83 997.486 1060.93 995.585 1060.93 993.244 cv
1060.93 990.9 1062.83 989.003 1065.17 989.003 cv
1067.51 989.003 1069.41 990.9 1069.41 993.244 cv
1069.41 995.585 1067.51 997.486 1065.17 997.486 cv
cp
1105 1082.13 mo
1105 1004.31 li
1105 1002.18 1104.21 1000.12 1102.79 998.539 cv
1092.72 987.301 li
1091.08 985.471 1088.74 984.424 1086.28 984.424 cv
1063.25 984.424 li
1058.48 984.424 1054.61 988.293 1054.61 993.068 cv
1054.61 997.842 1058.48 1001.71 1063.25 1001.71 cv
1082.42 1001.71 li
1087.71 1007.61 li
1087.71 1085.56 li
1087.71 1087.77 1088.55 1089.89 1090.06 1091.5 cv
1128.4 1132.12 li
1130.11 1133.93 1132.4 1134.83 1134.69 1134.83 cv
1136.82 1134.83 1138.96 1134.05 1140.62 1132.48 cv
1144.1 1129.2 1144.25 1123.73 1140.98 1120.26 cv
1105 1082.13 li
cp
f
453.516 912.962 mo
453.516 918.217 449.26 922.471 444.006 922.471 cv
438.754 922.471 434.498 918.217 434.498 912.962 cv
434.498 907.712 438.754 903.453 444.006 903.453 cv
449.26 903.453 453.516 907.712 453.516 912.962 cv
1 1 1 rgb
f
468.428 958.867 mo
468.428 964.119 464.172 968.375 458.918 968.375 cv
453.667 968.375 449.41 964.119 449.41 958.867 cv
449.41 953.615 453.667 949.359 458.918 949.359 cv
464.172 949.359 468.428 953.615 468.428 958.867 cv
f
613.1 1096.49 mo
613.1 1101.74 608.844 1106 603.59 1106 cv
598.34 1106 594.082 1101.74 594.082 1096.49 cv
594.082 1091.24 598.34 1086.98 603.59 1086.98 cv
608.844 1086.98 613.1 1091.24 613.1 1096.49 cv
f
633.762 1035.86 mo
633.762 1041.11 629.506 1045.37 624.252 1045.37 cv
618.998 1045.37 614.744 1041.11 614.744 1035.86 cv
614.744 1030.6 618.998 1026.35 624.252 1026.35 cv
629.506 1026.35 633.762 1030.6 633.762 1035.86 cv
f
475.447 918.852 mo
475.447 913.602 479.703 909.342 484.957 909.342 cv
490.208 909.342 494.465 913.602 494.465 918.852 cv
494.465 924.102 490.208 928.359 484.957 928.359 cv
479.703 928.359 475.447 924.102 475.447 918.852 cv
f
517.535 880.691 mo
517.535 875.441 521.793 871.184 527.043 871.184 cv
532.297 871.184 536.553 875.441 536.553 880.691 cv
536.553 885.943 532.297 890.199 527.043 890.199 cv
521.793 890.199 517.535 885.943 517.535 880.691 cv
f
390.98 908.029 mo
390.98 913.283 386.725 917.537 381.473 917.537 cv
376.219 917.537 371.963 913.283 371.963 908.029 cv
371.963 902.777 376.219 898.519 381.473 898.519 cv
386.725 898.519 390.98 902.777 390.98 908.029 cv
f
747.855 1005.54 mo
747.855 1010.83 743.574 1015.11 738.289 1015.11 cv
733.01 1015.11 728.723 1010.83 728.723 1005.54 cv
728.723 1000.26 733.01 995.977 738.289 995.977 cv
743.574 995.977 747.855 1000.26 747.855 1005.54 cv
cp
f
530.398 987.018 mo
530.398 992.301 526.119 996.584 520.834 996.584 cv
515.553 996.584 511.268 992.301 511.268 987.018 cv
511.268 981.734 515.553 977.451 520.834 977.451 cv
526.119 977.451 530.398 981.734 530.398 987.018 cv
cp
f
520.834 943.434 mo
520.834 948.719 516.553 953 511.268 953 cv
505.986 953 501.701 948.719 501.701 943.434 cv
501.701 938.152 505.986 933.867 511.268 933.867 cv
516.553 933.867 520.834 938.152 520.834 943.434 cv
cp
f
676.736 1041.44 mo
676.736 1047.1 672.256 1051.7 666.73 1051.7 cv
661.203 1051.7 656.725 1047.1 656.725 1041.44 cv
656.725 1035.77 661.203 1031.18 666.73 1031.18 cv
672.256 1031.18 676.736 1035.77 676.736 1041.44 cv
cp
f
836.879 1101.55 mo
836.879 1107.22 832.398 1111.81 826.873 1111.81 cv
821.346 1111.81 816.869 1107.22 816.869 1101.55 cv
816.869 1095.89 821.346 1091.29 826.873 1091.29 cv
832.398 1091.29 836.879 1095.89 836.879 1101.55 cv
cp
f
866.348 1112.77 mo
866.348 1118.44 861.871 1123.03 856.344 1123.03 cv
850.818 1123.03 846.336 1118.44 846.336 1112.77 cv
846.336 1107.11 850.818 1102.51 856.344 1102.51 cv
861.871 1102.51 866.348 1107.11 866.348 1112.77 cv
cp
f
903.144 1085.56 mo
903.144 1091.23 898.667 1095.82 893.139 1095.82 cv
887.613 1095.82 883.135 1091.23 883.135 1085.56 cv
883.135 1079.9 887.613 1075.3 893.139 1075.3 cv
898.667 1075.3 903.144 1079.9 903.144 1085.56 cv
cp
f
560.768 981.885 mo
560.768 987.169 556.482 991.451 551.201 991.451 cv
545.917 991.451 541.635 987.169 541.635 981.885 cv
541.635 976.602 545.917 972.318 551.201 972.318 cv
556.482 972.318 560.768 976.602 560.768 981.885 cv
cp
f
523.527 812.771 mo
523.527 818.027 519.269 822.279 514.019 822.279 cv
508.766 822.279 504.51 818.027 504.51 812.771 cv
504.51 807.521 508.766 803.264 514.019 803.264 cv
519.269 803.264 523.527 807.521 523.527 812.771 cv
f
512.94 852.256 mo
512.94 857.51 508.684 861.766 503.43 861.766 cv
498.18 861.766 493.922 857.51 493.922 852.256 cv
493.922 847.003 498.18 842.748 503.43 842.748 cv
508.684 842.748 512.94 847.003 512.94 852.256 cv
f
644.517 595.215 mo
644.913 593.345 646.749 592.154 648.62 592.553 cv
650.485 592.947 651.677 594.787 651.28 596.654 cv
650.884 598.521 649.046 599.715 647.179 599.316 cv
645.311 598.918 644.118 597.082 644.517 595.215 cv
cp
830.003 841.291 mo
765.602 778.185 li
672.253 778.185 li
620.968 727.115 li
620.968 622.74 li
642.929 601.322 li
644.388 601.758 646.421 601.771 648.079 601.752 cv
651.815 601.709 655.325 600.197 656.102 596.545 cv
656.88 592.891 654.55 589.299 650.894 588.518 cv
647.241 587.74 644.776 590.516 642.87 593.729 cv
642.163 594.92 641.308 596.767 641.069 598.307 cv
617.511 621.285 li
617.511 728.553 li
670.823 781.644 li
764.19 781.644 li
828.593 844.748 li
952.12 844.748 li
958.097 851.66 li
958.097 877.309 li
961.556 877.309 li
961.556 850.371 li
953.7 841.291 li
830.003 841.291 li
cp
0 .862745 1 rgb
f
674.056 565.006 mo
674.452 563.138 676.288 561.945 678.157 562.345 cv
680.024 562.74 681.214 564.576 680.817 566.443 cv
680.421 568.31 678.585 569.504 676.718 569.107 cv
674.851 568.709 673.659 566.873 674.056 565.006 cv
cp
861.737 821.521 mo
863.087 820.174 865.274 820.174 866.626 821.521 cv
867.976 822.873 867.976 825.063 866.626 826.412 cv
865.274 827.762 863.087 827.762 861.737 826.412 cv
860.386 825.063 860.386 822.873 861.737 821.521 cv
cp
653.169 740.875 mo
683.94 771.271 li
771.261 771.271 li
827.448 825.443 li
856.935 825.443 li
857.933 826.7 859.831 827.896 861.163 828.554 cv
864.513 830.213 868.089 831.199 870.731 828.554 cv
873.372 825.912 873.372 821.631 870.728 818.99 cv
868.089 816.348 864.319 816.988 861.163 818.99 cv
859.831 819.834 858.214 820.887 857.21 821.986 cv
828.843 821.986 li
772.655 767.813 li
685.358 767.813 li
656.626 739.428 li
656.626 638.309 li
665.628 629.67 li
665.915 578.07 li
672.772 571.208 li
674.2 571.558 676.077 571.56 677.62 571.543 cv
681.354 571.502 684.864 569.99 685.642 566.334 cv
686.419 562.682 684.089 559.09 680.433 558.31 cv
676.78 557.533 674.315 560.304 672.409 563.519 cv
671.634 564.827 670.671 566.927 670.554 568.539 cv
662.464 576.631 li
662.177 628.188 li
653.169 636.834 li
653.169 740.875 li
cp
f
848.663 862.217 mo
848.265 864.082 846.429 865.275 844.561 864.877 cv
842.694 864.481 841.501 862.644 841.899 860.777 cv
842.298 858.91 844.134 857.717 846.001 858.115 cv
847.868 858.512 849.061 860.35 848.663 862.217 cv
cp
559.226 565.857 mo
557.317 565.822 555.798 564.246 555.829 562.338 cv
555.862 560.429 557.436 558.908 559.347 558.941 cv
561.257 558.975 562.776 560.549 562.743 562.459 cv
562.71 564.367 561.136 565.891 559.226 565.857 cv
cp
848.278 854.082 mo
844.624 853.303 842.159 856.076 840.251 859.291 cv
839.497 860.563 838.573 862.579 838.413 864.174 cv
831.638 870.539 li
772.989 870.539 li
761.438 858.322 li
761.438 808.158 li
744.435 791.152 li
652.379 791.152 li
578.61 716.106 li
578.61 577.263 li
565.413 566.193 li
565.513 564.648 565.099 562.685 564.683 561.381 cv
563.548 557.824 561.774 554.565 558.036 554.498 cv
554.302 554.434 551.22 557.408 551.155 561.146 cv
551.091 564.881 554.169 567.144 557.8 568.025 cv
559.472 568.43 561.544 568.894 563.081 568.751 cv
575.153 578.877 li
575.153 717.519 li
650.931 794.611 li
743.003 794.611 li
757.981 809.59 li
757.981 859.699 li
771.499 873.996 li
833.009 873.996 li
840.509 866.948 li
841.95 867.326 843.879 867.331 845.462 867.313 cv
849.196 867.273 852.708 865.759 853.487 862.106 cv
854.265 858.451 851.931 854.857 848.278 854.082 cv
cp
f
700.47 746.591 mo
699.136 747.961 696.946 747.992 695.579 746.666 cv
694.21 745.34 694.171 743.146 695.503 741.775 cv
696.833 740.404 699.021 740.371 700.392 741.701 cv
701.761 743.029 701.796 745.22 700.47 746.591 cv
cp
1067.01 836.572 mo
1068.29 835.154 1070.47 835.037 1071.89 836.318 cv
1073.31 837.591 1073.43 839.779 1072.15 841.199 cv
1070.87 842.617 1068.69 842.732 1067.27 841.455 cv
1065.85 840.175 1065.73 837.992 1067.01 836.572 cv
cp
938.354 829.834 mo
975.048 830.488 li
981.106 825.697 li
995.183 825.697 li
1009.88 809.691 li
1031.53 809.691 li
1061.79 839.88 li
1062.33 841.431 1064.87 842.916 1066.83 844.013 cv
1070.09 845.845 1073.88 846.291 1076.38 843.513 cv
1078.88 840.738 1078.66 836.461 1075.88 833.961 cv
1073.1 831.461 1069.58 832.633 1066.33 834.461 cv
1065.44 834.958 1064.3 835.723 1063.37 836.575 cv
1032.96 806.234 li
1008.36 806.234 li
993.663 822.24 li
979.905 822.24 li
973.862 827.018 li
939.806 826.393 li
898.884 785.254 li
898.884 772.076 li
893.788 768.679 li
872.028 768.679 li
866.952 773.432 li
797.526 773.432 li
778.3 754.416 li
729.507 754.416 li
717.519 742.744 li
705.327 742.744 li
704.347 741.447 702.325 740.211 700.929 739.547 cv
697.556 737.943 693.966 737.016 691.364 739.695 cv
688.763 742.379 688.829 746.662 691.513 749.263 cv
694.194 751.861 697.954 751.162 701.077 749.113 cv
702.341 748.286 703.856 747.265 704.851 746.203 cv
716.112 746.203 li
728.101 757.873 li
776.876 757.873 li
796.104 776.891 li
868.321 776.891 li
873.397 772.137 li
892.741 772.137 li
895.427 773.925 li
895.427 786.679 li
938.354 829.834 li
cp
f
646.968 625 mo
647.366 623.133 649.202 621.941 651.071 622.338 cv
652.938 622.736 654.13 624.572 653.733 626.44 cv
653.337 628.307 651.499 629.5 649.632 629.102 cv
647.763 628.703 646.569 626.869 646.968 625 cv
cp
884.374 784.685 mo
882.462 784.678 880.923 783.125 880.929 781.215 cv
880.936 779.304 882.489 777.762 884.401 777.771 cv
886.31 777.779 887.849 779.332 887.843 781.242 cv
887.839 783.154 886.282 784.693 884.374 784.685 cv
cp
1070.59 858.906 mo
1054.72 843.701 li
1054.72 838.281 li
1026.89 811.175 li
1010.53 811.175 li
996.267 826.387 li
982.815 826.387 li
977.413 831.781 li
938.073 831.781 li
890.696 783.989 li
890.64 782.659 890.329 781.144 890.048 779.863 cv
889.239 776.211 887.044 773.088 883.306 773.074 cv
879.573 773.06 876.53 776.072 876.513 779.81 cv
876.503 783.547 879.72 785.391 883.257 786.602 cv
884.868 787.154 887.487 787.723 889.083 787.273 cv
936.632 835.24 li
836.048 835.24 li
770.351 771.703 li
683.485 771.703 li
641.713 730.356 li
641.713 635.717 li
645.315 631.086 li
646.776 631.543 648.845 631.558 650.53 631.539 cv
654.267 631.496 657.778 629.984 658.556 626.33 cv
659.335 622.675 657.001 619.084 653.347 618.304 cv
649.694 617.527 647.227 620.303 645.323 623.513 cv
644.681 624.598 643.911 626.224 643.597 627.667 cv
638.257 634.529 li
638.257 731.797 li
682.065 775.162 li
768.952 775.162 li
834.648 838.697 li
955.106 838.697 li
965.444 851.621 li
965.444 877.309 li
968.903 877.309 li
968.903 850.41 li
956.767 835.24 li
978.845 835.24 li
984.247 829.844 li
997.767 829.844 li
1012.03 814.633 li
1025.49 814.633 li
1051.26 839.742 li
1051.26 845.178 li
1069.2 862.363 li
1099.34 862.363 li
1117.41 882.219 li
1119.97 879.893 li
1100.87 858.906 li
1070.59 858.906 li
cp
f
649.495 670.42 mo
649.495 675.674 645.237 679.928 639.985 679.928 cv
634.733 679.928 630.477 675.674 630.477 670.42 cv
630.477 665.17 634.733 660.91 639.985 660.91 cv
645.237 660.91 649.495 665.17 649.495 670.42 cv
1 1 1 rgb
f
664.405 716.324 mo
664.405 721.576 660.149 725.832 654.897 725.832 cv
649.646 725.832 645.388 721.576 645.388 716.324 cv
645.388 711.072 649.646 706.816 654.897 706.816 cv
660.149 706.816 664.405 711.072 664.405 716.324 cv
f
809.077 853.949 mo
809.077 859.201 804.823 863.457 799.567 863.457 cv
794.317 863.457 790.06 859.201 790.06 853.949 cv
790.06 848.697 794.317 844.44 799.567 844.44 cv
804.823 844.44 809.077 848.697 809.077 853.949 cv
f
829.739 793.315 mo
829.739 798.566 825.483 802.824 820.231 802.824 cv
814.977 802.824 810.722 798.566 810.722 793.315 cv
810.722 788.063 814.977 783.807 820.231 783.807 cv
825.483 783.807 829.739 788.063 829.739 793.315 cv
f
586.96 665.486 mo
586.96 670.74 582.704 674.994 577.45 674.994 cv
572.198 674.994 567.942 670.74 567.942 665.486 cv
567.942 660.234 572.198 655.977 577.45 655.977 cv
582.704 655.977 586.96 660.234 586.96 665.486 cv
f
726.378 744.475 mo
726.378 749.758 722.097 754.041 716.813 754.041 cv
711.53 754.041 707.247 749.758 707.247 744.475 cv
707.247 739.191 711.53 734.908 716.813 734.908 cv
722.097 734.908 726.378 739.191 726.378 744.475 cv
cp
f
872.714 798.896 mo
872.714 804.563 868.233 809.154 862.71 809.154 cv
857.183 809.154 852.704 804.563 852.704 798.896 cv
852.704 793.231 857.183 788.637 862.71 788.637 cv
868.233 788.637 872.714 793.231 872.714 798.896 cv
cp
f
340.143 290.316 mo
338.814 288.941 338.853 286.754 340.228 285.428 cv
341.602 284.1 343.793 284.139 345.115 285.512 cv
346.443 286.887 346.406 289.074 345.031 290.402 cv
343.656 291.727 341.469 291.688 340.143 290.316 cv
cp
306.045 398.936 mo
306.045 333.368 li
322.863 317.534 li
338.48 317.534 li
344.943 310.733 li
344.943 294.484 li
345.896 293.504 346.805 292.156 347.553 291.016 cv
349.607 287.897 350.318 284.139 347.723 281.449 cv
345.127 278.764 340.844 278.69 338.156 281.285 cv
335.469 283.879 336.391 287.473 337.99 290.852 cv
338.703 292.357 340.082 294.594 341.486 295.465 cv
341.486 309.352 li
336.998 314.076 li
321.494 314.076 li
302.586 331.871 li
302.586 400.373 li
344.535 442.123 li
349.438 442.123 li
306.045 398.936 li
cp
0 .862745 1 rgb
f
324.637 332.939 mo
324.969 331.058 326.762 329.803 328.643 330.135 cv
330.521 330.467 331.777 332.26 331.447 334.141 cv
331.115 336.022 329.324 337.275 327.441 336.943 cv
325.56 336.614 324.307 334.818 324.637 332.939 cv
cp
316.127 398.936 mo
316.127 347.625 li
324.223 339.284 li
325.549 339.457 327.105 339.408 328.426 339.347 cv
332.158 339.176 335.613 337.537 336.264 333.86 cv
336.912 330.18 334.455 326.673 330.775 326.024 cv
327.098 325.375 324.732 328.235 322.939 331.51 cv
322.092 333.061 321.033 335.683 321.307 337.324 cv
312.67 346.223 li
312.67 400.375 li
313.18 400.881 li
354.65 442.123 li
359.553 442.123 li
316.127 398.936 li
cp
f
326.439 394.041 mo
325.074 392.704 325.055 390.515 326.391 389.15 cv
327.727 387.785 329.916 387.763 331.281 389.1 cv
332.645 390.438 332.666 392.625 331.328 393.989 cv
329.994 395.353 327.803 395.377 326.439 394.041 cv
cp
330.535 404.7 mo
330.535 398.842 li
331.762 397.883 332.941 396.033 333.869 394.535 cv
335.834 391.359 336.438 387.582 333.77 384.969 cv
331.102 382.352 326.818 382.398 324.205 385.067 cv
321.592 387.738 322.613 391.303 324.303 394.635 cv
324.908 395.826 325.951 397.473 327.078 398.51 cv
327.078 406.137 li
363.252 442.123 li
368.154 442.123 li
330.535 404.7 li
cp
f
322.756 364.11 mo
321.391 362.773 321.367 360.584 322.705 359.22 cv
324.043 357.855 326.23 357.832 327.594 359.169 cv
328.959 360.506 328.98 362.693 327.645 364.059 cv
326.307 365.422 324.119 365.446 322.756 364.11 cv
cp
345.807 410.181 mo
345.807 383.707 li
328.031 367.728 li
328.82 366.779 329.559 365.612 330.184 364.605 cv
332.15 361.428 332.754 357.651 330.086 355.037 cv
327.416 352.423 323.135 352.469 320.518 355.137 cv
317.904 357.808 318.926 361.372 320.619 364.703 cv
321.471 366.385 323.195 368.967 324.793 369.467 cv
342.348 385.251 li
342.348 411.603 li
372.598 442.123 li
377.467 442.123 li
345.807 410.181 li
cp
f
355.262 397.807 mo
353.898 396.471 353.875 394.281 355.213 392.916 cv
356.547 391.553 358.738 391.529 360.102 392.864 cv
361.467 394.201 361.486 396.391 360.15 397.755 cv
358.814 399.118 356.625 399.142 355.262 397.807 cv
cp
359.637 415.938 mo
359.637 402.535 li
359.451 402.535 li
360.643 401.557 361.787 399.76 362.691 398.303 cv
364.656 395.124 365.26 391.348 362.592 388.733 cv
359.922 386.118 355.639 386.164 353.025 388.833 cv
350.41 391.504 351.434 395.068 353.125 398.399 cv
353.783 399.696 354.961 401.533 356.199 402.535 cv
356.18 402.535 li
356.18 417.373 li
356.688 417.881 li
381.01 442.123 li
385.909 442.123 li
359.637 415.938 li
cp
f
355.469 334.657 mo
355.801 332.776 357.592 331.521 359.475 331.851 cv
361.355 332.184 362.609 333.977 362.277 335.857 cv
361.945 337.74 360.154 338.995 358.271 338.662 cv
356.391 338.331 355.137 336.538 355.469 334.657 cv
cp
375.918 423.147 mo
375.918 383.842 li
368.791 375.478 li
349.453 375.478 li
344.654 370.207 li
344.654 351.469 li
355.9 341.292 li
355.697 341.068 li
356.867 341.158 358.146 341.117 359.258 341.066 cv
362.988 340.893 366.445 339.256 367.094 335.578 cv
367.742 331.898 365.287 328.39 361.607 327.741 cv
357.928 327.094 355.563 329.951 353.771 333.229 cv
352.777 335.047 351.484 338.342 352.4 339.795 cv
341.195 349.934 li
341.195 371.548 li
347.924 378.935 li
367.195 378.935 li
372.461 385.115 li
372.461 424.572 li
389.867 442.123 li
394.737 442.123 li
375.918 423.147 li
cp
f
361.908 360.867 mo
359.996 360.867 358.451 359.32 358.451 357.409 cv
358.451 355.5 359.996 353.951 361.908 353.951 cv
363.818 353.951 365.367 355.5 365.367 357.409 cv
365.367 359.32 363.818 360.867 361.908 360.867 cv
cp
382.4 419.692 mo
382.4 373.223 li
368.242 360.863 li
368.293 359.39 367.9 357.539 367.563 356.025 cv
366.744 352.377 364.531 349.258 360.797 349.258 cv
357.059 349.258 354.031 352.287 354.031 356.025 cv
354.031 359.76 357.256 361.59 360.797 362.788 cv
362.232 363.273 364.471 363.773 366.072 363.56 cv
378.943 374.796 li
378.943 421.11 li
399.615 442.123 li
404.466 442.123 li
382.4 419.692 li
cp
f
386.822 366.847 mo
385.494 365.473 385.533 363.284 386.908 361.958 cv
388.283 360.631 390.473 360.668 391.797 362.042 cv
393.123 363.419 393.084 365.606 391.711 366.932 cv
390.338 368.26 388.148 368.222 386.822 366.847 cv
cp
391.332 419.696 mo
391.332 371.299 li
392.391 370.309 393.41 368.803 394.234 367.548 cv
396.289 364.428 396.998 360.672 394.402 357.981 cv
391.807 355.296 387.525 355.222 384.836 357.816 cv
382.148 360.41 383.07 364.004 384.67 367.381 cv
385.334 368.784 386.574 370.818 387.875 371.797 cv
387.875 421.107 li
388.369 421.614 li
408.51 442.123 li
413.357 442.123 li
391.332 419.696 li
cp
f
390.373 337.845 mo
388.463 337.845 386.916 336.298 386.916 334.387 cv
386.916 332.477 388.463 330.93 390.373 330.93 cv
392.283 330.93 393.832 332.477 393.832 334.387 cv
393.832 336.298 392.283 337.845 390.373 337.845 cv
cp
406.318 425.93 mo
406.318 347.635 li
396.664 338.258 li
396.824 336.727 396.4 334.667 396.025 333.001 cv
395.209 329.355 392.998 326.236 389.264 326.236 cv
385.525 326.236 382.496 329.265 382.496 333.001 cv
382.496 336.737 385.723 338.567 389.264 339.765 cv
390.57 340.207 392.541 340.659 394.094 340.578 cv
402.861 349.096 li
402.861 427.364 li
417.674 442.123 li
422.571 442.123 li
406.318 425.93 li
cp
f
417.982 396.303 mo
416.619 394.967 416.594 392.777 417.932 391.413 cv
419.268 390.049 421.457 390.025 422.82 391.362 cv
424.185 392.699 424.207 394.887 422.871 396.252 cv
421.535 397.616 419.346 397.639 417.982 396.303 cv
cp
421.588 431.508 mo
421.588 401.435 li
422.984 400.644 424.359 398.494 425.41 396.799 cv
427.375 393.621 427.98 389.846 425.313 387.229 cv
422.643 384.615 418.357 384.66 415.744 387.33 cv
413.129 390 414.152 393.564 415.844 396.897 cv
416.48 398.152 417.605 399.912 418.801 400.932 cv
418.131 400.932 li
418.131 432.926 li
427.197 442.123 li
432.052 442.123 li
421.588 431.508 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.1.0
%%For: (user) ()
%%Title: (plata_10.eps)
%%CreationDate: 5/12/2016 1:17 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj2NJZL7ZRcSPSeDJroJY'g=e,7rM[fO2LAgK6uMaCqoGme2#f^\u.kO]@ZMJ9$\g8[RorV[j:!(7DF?ACTGIlcib2;Jhr,
%2ud(,)7_'B15m4Qa8#DDmbW@mh2aTuZmdoV]mA2lm^8PGW70F5esc!OEc0o-WKDO13i-1U\IVQ>f).>5?7V;eWD?sW4kcpeU9/%>
%?L$[c]YQl1Lc`B9:bN^eIl#kEg9)+Q+R4,a))O7t]DltYT+Xf7s3,oFO%uaHDS+E#2B/:OdBp.Faj:8iX!BpV@*:Qorb%7?bS?n:
%;QnZ:3HJmbqQi8U_[m3dh%h+RmcDha-NB.#r^Zs!"plFOT-Y0N5A`=V(]Lj`G0Z4qp@aB2_ib4qO`Oe(fhrj7Ta:^ej$dD^&#4HO
%<pE/%=Irs^h;"1k+8m:$@la^0BH("/Tlh9>OUo?7&Gg[mU4<&KhR$;CoUM[@WmRH^\S"d='"-80(>@Ssl@8$M''`:Xm.Y6lqb<j>
%V4I2p(<TdmCf[8K[8.%[Wg3@$2+78TWl8DGI2[6b+Ifb[Nab!b,dY/KeTXVM+qU?F-J<6)NPjm_?L!^<fHt%h=ueg/s(g\4qL>m#
%^s74kKqlOr55cQZSsp6mc%+b,=?MS(e(Q%Pghg+gX,U[@U^[`":JpK-G.!JGXDd2%q%"",&%)?Gj8W-FVHrD/UIL2uBcV''e4AK<
%^HB<]RuPQ[Z]5.Pi1K='oF9f8>4Y_lRf7qhUEOq8KaS!C?8\]L[=No/rNB;n>B$rNld:bhgWa&?]5c9spV5htQ0*(NHQ/6^br-S^
%-+A7!NW(Z)Rq&nN*O\UP)MA$[[)nZ7XnaIO,WsgY:4B%Rr6P0<B'E)R9B%0:5bOU+5GD>fV%#!CZAc:p.lBrd*<2*/\5W?YIOWZ.
%V*gtce:!s'9Hoc<D$uEAD$J"pUk/6g'iT7d]l%qr[J/f4FZX9%b-\k4>)iMIXB)A7Ri[gKe`0@#\l3GSXb:,ZG5'<pq]+d*M+XcF
%c8+V"H.4F<%1]G3s38?+V=#5cQ)IRE,[2bu9TKQO.'P6IDNnhT:>;Vr=gac(Dtc;*\\i$cQAe#epLGWL2uX+H1SW9Vg5XpCi%mKr
%C+qUj8PSG*_6YH$7a4=c:=Cca`b\\U,j?r>kY'YMr)k54hl.Z0,0#6Wp#BYdg8QHpl]=9hS8,SM*W5,CUJ)m"TZi<5[7C0[-2XLR
%5IF/94q#QGGC(P&hGl(Jl3H-C]bUPtMmUCTT2ZaT)fl7tC,\a&]NK0hjNS^8Q!+c<F56=/*R[(p*NSMQV55]MX(fY9#B-5tPj?22
%HC4W$>Gcn`J%>0.lluG@==qG7.CFY1n^C*Jm]Ur=5sI!L/e[<R3@#%MWF;LV/e,6<T2fZlG1>Fc<pnp)WOCkXr29DoB[`#`VIA8N
%cTOC`5oZa#NW(?VHE,Lu<'<D1?I5iPW_5-O6/6F!U=&cM'U/V;eS\X5A3o=\$u#PrfdQd>JARB;U!R=S=EBV.`or*/SR%ru\Fm6N
%(RBdBUI))*<]W">7^$";J/&tSAm=f$ai&)#I7uhAUE!RQ(XhWlh+._l%i=@;pM*Zf9:]as*I[Agk#lqLT`)B^Z`_<LdAu`%];7`d
%/F9;o*Z%S2k!?IK7c`*uFgrI/4BZXhCHX<2^g:(eerDf)=r*;HDO=;R>dS,7Z8Gu@nY="&KSHqtbBJDe&#J!iLthbo5?a&)]&7C0
%KgrB`[7fSkA\]U/3\H'qR_<l)H7C(n/4YrhKZ;:jm"9H5/'G^\f<bmn]WPSV_d[_N>FE$B'8XrXQ('$5B!0o7\T6!>Pri]HaHj$C
%C0!DTa-k-/U/.aAQ[rUY^>-r!S,%(\?Z,#Lc$[&@m)qCJbEpD*cBS*E9@aRAk-?-biVjgB3pY08;=3;C<,)=l]=Nk7%(h#(<kV2,
%44*4mMU<MGcK3;]2!`E,L"C=HGEJbk@]T<=WRpB699&V&Z(#RA3<QflZ:MpVA:)[g/?5[)7bs;g4XOK]2,?t.;>1]@QssCZA_a/G
%bA/ecOj-ti7jWYV?0o&ml'WX$/?qLkDJY'9OTC_J<:8:/mENCLbsp4(6?U1O`eIlEr&1"'::Kjopn_99KjTQsSPHA:;CY0Aj\e!o
%lt\eKl2MJ:+I(^=73qOj&Eo<)9p],&a<5ONh&A839P@,05>4h#-8b^c!KI,<h8\)_<ZBkcC_<hhlW_A[dLA:\DO=%kk9o9kZ^ZN&
%<@fp@3A,ULF13-Q-35m#L%C4]C],s6BO%?u"c&!;+FQ4/'CET*gKAL"-Q@gl.cbu9)WW7Km_inY;S1XGX%1tsGKNj\'sI/AHq^fC
%/f,Fn.EDI'o-[8Ar_0,3>&lZ17d\Y14#rSW:3K+=RHJRlX-dJobd)UcU1<&U/0?eQ/s@@-bX>eO*n:,.4PJG$2J_XG./H_olc>Qe
%a(4<g4R6mO.b.jk'94#llYn@S'^WGo^=c4P29UNfhf6ab'pi8Z5H`8fCpmP\W,e7k8PPis1)".20?.m]n@GJE=HeWc9R-Ms]S@Gf
%&"Df,gn_9#LAR;$iU8M6d^Un6TAhES)u)*N'4jm!Y8^Uq`[Q>lT-:[dp:=Vi2A*.iO0a'a;knRm+>YU,B?CSr>a4-?F%b*Np+`JQ
%B-F:s:E[1[Wq/1P=\Xsab(.^^8?;8cC1Oi%g,LT?)H#lEWpuuUZJ7kXFVu!Eq\a8WIicA`/n<Hj`G2;N/!V?,MWSKL23fYh?D?C6
%>THRnViuQJ.Q@!tg%X[[#kOZk/CM&e6qbITf23DpC=ArQ`_^(4\n%=YYj=+g1"l+Ldof@*G@Z!S4-fJ&1.4='L[-`=F48T::,8^2
%SF@o[Z=G*.`b8(OV#BtB@s"/2HDl#I67%8+d#^jHJ&N70M;1AnE?X"K2DUA#WEelAH^A!ipL0pV*Z&!t"u<8jW@T<s`e?lD@UCS%
%!ECULI/#G>nK^gV=>QSVS+S><Ngl#fa>/!jbq/j$F*os3C4DOuA7-0.'Y:,a7[$/BNXM[e[1SZZ4J"!gC1Vcm3!2oie$437V+.ka
%8HphSf*ZC\@CE"?QAI@/%U/ZTAYN^$Am3%fZV6TTMU,n/X@_UJ)u\1"/9UMq\L7foM9&+7hkXMA/BCMClC%3JPROGNPiSQL,-&c2
%7Ca#QZ[@sW;6h<#b=.i\UAQ[Obq'ZB_L.n)&l<IX/kRII3:T&p-KUt46"X:Ol=nR5a`J;^c5ei$(SuMCE`'+b1G)l3.rT.!0rHAI
%=oO*()!>$sGO`=>).'Y5R(hPodrQ)P\r(L1i'u6M/8QCC\L,PJ09-T<U]/CKnXEPT)103*)u&maT<'e(PA<B-f=[MVbHM.+\MfXe
%1V#CYEc&-WOI<Y&Zcof_LH:W61TC)oQ>/3cm7%t/1T<9rCB%tHVV_Y"NT#>5d^CF=(AtXCZ;YlH3+J_UB-VoG7N&XB`^VaBlD#6K
%aLN0$p]Tj[9K@K(gMpA+s-QRim8a1DC4!A:O/"GBH(6]pDFaB^Kk2'tXa!LH;2J&JNJg$6fpC:?MFu]6VA^@VgMrp1KBgli,o:2_
%BguMh!C^_H/4;Iu8i%fqDI=cT:(+I+Y"%[E<^IZ7(ZijUbK-)(rR]-<s/s`+oRBs+LYVPb$Q5QAnhV"f-I"BY=l8lK+#pjlaj86(
%U%,*Rim3A)5;A.I3j'kXr^HX:JneJ-OYUt$Us%qAZefG?aE?>+>pQ?I96iEj6*Lr22jI8`6a6%WU0*S-(hbb7!($l00"P!H_nd4c
%l'qd0Mc,u>E3L]/LFc'YI#L,I-S=A8f86>I[<kr8\li#1<9_Dp;^t_B,Hn*Aif-ctds)JpP@ls7a[!2!I^Aq/g&:AMhZ&V0nDL+i
%o'H@"G5jY9s./!GcL-0PS^?a&pI9W=@sliPDLa<K-)2bH]CVT?aOZ$b94iC^ZTI'tSaT@D3>mdGlH)W$'5]QFU`g[[BPaWf\;9NB
%<3%nV]Geamp%5=Y%@5-b^mP5@_%'t];R8uMK8c)^qc]'*C<.O?HgMJ%CU9bchgE:PhkY$k`SNOE.:pM4(*Q>f)RB_&/40&Gr8%jn
%G8;Npe1fSBj1VcQfdohj9Dk$>drlE_<ldml<_.F7:R`ka<1C:o]@)]h/'W7:ET+V)/:KL;OujPUR8JtCPqh-k[2k_r%l3'BqG4NU
%lX'4g_*//B[iBIVVHDqF`"#J#Z0%nt`R3=82U>?c]pZi&Dae6C9\Ptc[E.dX'Jp`r1,^K#^]X+AIj-@#ggtlQc:)X;NJNG9_FG7[
%5)T/DXD^<M9rQ>=0=/I;/F[[#B[-Z4ZbXca*336#ANBlG.a0)f(DVY_prb5X1;P$q/F`3dJX>mE(H3_fB4:p5#Kh=\l3Pg4HW#4N
%b"V_tM`qM.N)MK+GHluU"Ti;T-7/hM8M;ua"c#Z&2N^-7D=Y*oN@cu,NM#bYPHE]t.oe78_jW$p#o721jZ",Ib+pQ.Ro"t+-bY\2
%Jt.4B1,ZX_<e9LI<FGZ[F.H<<RT3]5(Rb84l4b8/Pq($CB-4+`Bs7(`<1TJkb+BN7@-XAjBD>;6-,Z'A\^@oX.glh'l%)#<rgIs&
%R!@lG4?;Xo?#W.mWalgce&M!kN8m.M#P^BYHS_4D8NW?0qQ]CTLN_]?1t+AN?;7,+;7=]BUuAg?T'9cOkKdlh;];*>2_JX,9K*&/
%=_t&lRSqh#aC<YZdAHl?`A(uDQ>]kF_jeV"VT>['qD^r`"6(/#E1"U!-J$Y:2P-P[0kPEa8NW>C*+Kc)R$'GK5K?.WQ83#Vh/r\`
%Ug5Ho9=7jGC6j6gl$)6<,f>ZHV=H:bjr$t7Cd(5bRc@9ng1j.8HVpQ.`=Ef!5;(`s<*!c+lFTHOIq3jtXZ%:;;N9g)\(WE@'G'Sh
%&>7if[?_-.^=He(W=4ojW@@G/"dti4p1K)61(ig($Op[0n?_+:UG/0fi]OR$4;T*cfPC(h19aO-c$C/qa3DVZ8VW9IFdlP#p?).S
%R+4gO_DcnNP/\=9q3eNSf+n'@m'Vn$2:@E3*#+oC5Igc\nNUC(j<dPlW:oBqH-HDe=^i4,/)_ul3`D42Pm*EZ:\W"`_CXAU19M6f
%6fdI*p](8daAVa^ZY\?u'9'SDF$oI8Z?'W?G_Om?7,l$h2_SrZk0"3JJ=/(b5NeK'2`L?jB&;=eS""\E_^PEr]t"P`s%W7MDI@dX
%Oj?j-@7o@d%%,;p\X>N<F6@0'g]/6KGAcQgh&LXa]ijc.-?Q-'SQdjfJ4#Y4M4%!q)(saWB!ZO3/nIn42r1+<BceqJi:+qt15u7T
%7E,T);t:g9WNRg,X,f9A.kua#-,tbrbn49sVEi.GK$cG2jQ&DabK%"gq0XJ9TOt6(Y',:GB+"$L\j'q4U=?4!\EGR*kLc\eO##]N
%/Sqct_OF.MqKm?oAjO^6AXJm.0Li%miBiSE2bUSRp\456<<#ePfA($tpj:k#]S+*Bj!(utcS@Y)YGi%b03onnF9Dh1N!mDE?e@Cf
%QSOtKIBCPD<JF21:9T(D.S!Xhl>Jk-@/h`614O4dC@kEt0*pJ)J@Cl=ekf>@Iq9$!CMh*=,4,fuV"C9o]pItI0PNO"Hs$'#TdJ*.
%R8:dOgB]moDO20CF!3(;G*Ha6:2;Has2JE!h>F>(Cda]X\`#.SD",B$r<[gn\BE*(SXF[$5h#/!^(u-&H'XX@<+e\JF;RG&S*61l
%j?Uh>WA]WG$-Eo&]Dj=^1Xi&(@.uO)&*Fb:d16>=`^O2ON03^ime-HrE$cNZMi,FEiF#G>%TucQq%tt\p:0;HCW02`g-)K,R6FP'
%<SHu?,pCm?h7Z_Z_RRf`3DQeDRjlD"0N'6'3G-*9dZrigH6k?N3Va"nVAlF?2bmicH1nMZ8Mtgs7s7SPH!KYbVNN-@?k&`toi:OO
%>[VaKXg`!p8T\P6Sgh,$VS"T[]gTbL.+9jb1>L(kl@2;%PsDLlQN,1G??*ksi2hc:>#2,AkE:e$.@(VESEK!F]JeGPiau=`2mpTE
%otQ;%-P&q"NJs\B2Yk9-a]Q+\<AL^1atslUG5k)$@E6Lg;d<kmmi9Xfgm-[)'YC!A5:9b_i$naAGBb@5!DdnP_9\[s`06XXjg3!+
%Bi"%"Q/OUZZuOLC)q6f@@)"p_g0<,$(ul^%G/E(`EL,(EMWgk$bA_I;#f"V&IdCi5AneR$CR"Rk;N0BV,0TjD,BqVYm-0JQ`_C(-
%bnk!X@ndGA(C,'c%bmgLk9S6;'IJq(Il]64(A4&2_fI<oBVE$->10b(a/IJGPd`u]2Y1ne0"oP./?^G?nsWVKP93*%>M(inUWl7S
%q%sa^>_%i@2&gm!$C@\o;XjAC[+`lVq=hX1[J73rIbUprkeFb-@2<$CU!c&`EpN+!k:HA5e0pkWmG)Tk6>O7!a.3(=;6&0HVkVO<
%e&,e(p5o:./"_grq;H]RY80MsoIoAG:qL+`^u1q%c?&94C%;3^%/sW$It%@m6i!k2mN/#FG_c(a7AKZkKDu+PSGP_H:a31<R7QKU
%OU:XG6+,RL77e^K[u::)BhnGqpE`)uks'IF%6Q#Zd3"rsS)b=HS\PR6r8IO5j'2/2C&=4^iXa4S]o`85SM9fPJ77H]WV8XHYNPQ0
%2hM!"gQQuPqt/R_<W5]WmXmrAjpE]%Zc#/L3^&8N+:Zl%pM@$4Mn7_8OP;j/C]_N4,s.],@%iTp3$-ESS^9&1[FD`_q_UR9gZH:+
%D'#p+ruZ&jrt#//f3WaPk0:U"g/@5!XOD49rC9?F.K/`3,=D.]>>MLuE;DTCfV(1sOi-[S8s@"]M'Qp4a+GK,j(8`frBFQn%6uS8
%5qT\#/GJGjYnTi:g5rp:%q>U<('!W!W<CT?m>.Afem?icd9lpS@=HTT(TEh78!fYNGE:nS2*+6WPhM[n.r>E(N$#4p\WbQcqYrSK
%>Lak:3Qj&*RcX/)b&U"bP.9c96m-_ZD;YM3=(eg:>G@O<W;DIWaag>Hr)XNMJ%mG!>%2]:Z>E#F6)I>GOl`CZ:'a';'UJd?/f)fW
%1'eqGQ@#0?ZT\ELmoi;)\Pn*F#9?EaR%7.T(OU:CFTU.oH9F3FPrg@C:&o]<JL'^6Wo]]p`_D@RcA29oWHJTjftK&^X3eR54=/'[
%qU.&N,5p*^peeXAY:C9[AbHGHB.;;4?(%D3/,1hB30C:FD`08dkIB1k]4*-Kl0c!\VcUo?Gqm4--H:^HfdJ"TrY"g5fFXk4-=S"g
%W*?9`EV0\T'E6UA\Qr&EP"[^1[I+hqla8.@J/7$WK,\QJKl,;_-'9$"R<l!j:8r6e/"K/?]k4=sMWo2D2f0c\UXH1)<@^Rjb0=*O
%SOlqb?L"$k_Fh4NbQ,'f0=Y#^<!N0)dqX&)>RT;s6Ef.fm?]liW*T?t1cR+_'lQXGg1f,1h'bc_+a_5/[;.d'OR,?%/%*"0bu20:
%isP68Mq[p.)#:g1Sq")uc(2;4a]<+m_d'7lMV>U9[GIs\q5UE!6Ba%in6;_I*mW5"eI"26:Gb>c_[BEQ4P.!sMm4sWm3FH,A^f+O
%PgJla]CSs\Ips#DY+)"'fLahb9K,S'5>%K!^-0mSB<N=uU@o[+mP+L<S(k#D];=P&XkN_.`-J,6IuB>d)`?j'GarYH$[*dHKlt.h
%3bJa"o$QUn,9jLdG054RG'i$\;+fClbdN;Oec=<:5OQFLdslQ$T:a]'a/.L=eEYRFl-T8b)7bq6d8mngbs.qG$c1TCYa!KrZl+Ro
%5GE1b:5id7nIsq+7a_*tCXj1@0tc,QL`0$&=e,SeJPB%sO5kNA/)euu44,-Im>B;J"`)XXPj<GGc1=o4%[lnd9(jC-4Y(Z3!,25-
%]j:!oc_D4qdWVNk0%E3$IBE/XL[[J^FY(U.05oqEJog+/mB']s(6dV0W/Y;]?UpdRBkWeNh.hsnV:<Vs+'i?,iNonO%S3,4X5de<
%Tq3AMY<?&cMb^bX8+`&,d1Nb+k$Qr&Pfl+W4+3?<nQ8JmK7bTu8>^T'IoONN3SJ:?6JTO3?C&m3ohtTJOh55JDH\ib^Y0[U-[L\0
%SS5W%-Pk6qiuC)<IT3L/._C\oO-JO49=76A,L%g*dU/>987lUYTQ_)L%XKKMe\;`k,(.PXFsX/I+R%Uu=3YX_mkH3W&;(a_>hq%3
%?'T?nHE>Lf`C$f^?rg<r-A(EYQVjU5X(r@8o6d1/[;r(OY7RlUeO.B0g^>8!<,(YbN(;ZR@+eA.A\V$F%(4nkCiRfL-B*kO*N%WP
%],LR>NJR+[Daal5pW5[AT^D0?>THX,RsPB)Yq]p?e]u7'QY_X9e9LWB>X`W]-4a%Ak2Ef3EB_t>ADE[b>+L:_8bKtd]:r;p'LB>E
%2*'imJ#<O@G0[.j@lfeE/)'NmP\RV"EuA_KF9`8=Ws4Nff:m''3!'%AD]WgU:7=1;8IV6J#V%Zj4sib"N-)"Q*$iJ'Nq]9C33IGj
%-.i\*`_0dXlg7oSp%*REe3<=X:JUK?)@rj1U%ZOR.mr\om<X9R?7-rE``f@*81#oo@at4*qBFc#NTWc*e`kZU'cDpR0d4H^j.a)!
%Vn$Q/Zu&h.UlK5Mm&Of"XrLFo7adTtNjR>OX*0hH1c82&`qh?1o@Cu-Uo&Gd/o]$^(gPRr0-E9D,cF_N:+Vd9OX1XLbaTDD/rdKf
%QF9]OMUlW]'pgRUg@nJ,*75TXCF+3&,?J]FXjb"7f[.Af_PQH@aMIhe\CK,V-\F;,"8T!P)f.H$"l,&"egmP=-0eH*)l%f;OYZN1
%"f![jP?Tq@WjSm,Ko"]JLoDnYHiJ@"UKhTtl`$G&;3Q%,6-%hNUuF-lcnr#'84Srk05K@GjI>Nd)/?!s+)ti7'@QVfc1ZVkbgXC?
%Cq#Dn3/8kFc!O4sW_n-UC`4*Jj+j#DBNI+iisJIAj]8M]it>cHNQR7+V6ipU]%'u!6=#Nr*E]Gnb-2ndiFN;!`erE`\PsuP=U.N'
%QP(u2'B-&J`[,JYik*`Yb!LBs]hf0%]S?qO+H%l"_,iKD\!sM#g;):>P'M.L]=+$4GNHJVG)o;`c=I75DbB5nk3CN'*NuL^l`):a
%c(qHe6gJh?)&hfk)9#)nNGcI.]0c?cUK78f3?1'uCtInl-Tl+(3irmcgDB>se`=4IPP+K)NTda&W5I`!i5_!$gUVojd#_4&j,26!
%-H7P^#`b3le?F!p+tk:SCq%b@l6<+ST_5-o1ig6[B)X43s&U`.+0/%%p]Jdp6^GFM?I8=dW9FHpQ$Uq(;PWG-D()*j/"2X<]6mXI
%bY%h_nc^V7Xn$$9LKejQ4+;'El",d.%!9/!![05.P<i\tZ]e^jHl91[,8G(Z$qDRtg6NY:jR2,mAlng>jgo=uc+V4@jE'daj4m+f
%>lRFapUPp#]6h<=kPh\<o$cl7fBLlD."d[$_;hOR/u(0C8V5g\qN"8YYd@uJH^6X=rU,%VDQc.oHA'73j)'.n^S9Fge38^efAG-H
%#pa!PZsB]IlH>G2'm7tZaC^lWM0nV4>Yo*,0>@B%l=F^Y,USU]Wo6\jAr:eR0`G;75PI\Y`Q*4'&7Y(VG-0>*:#BdMrf/d!9$mX*
%^#IVj"q0d4h\FNeRYfdoX@TVlB1"HE?;qk8CjDg5NOp3mhM\sLUdXobYf%7BH<3doilhXU2k6Y3>A4#5'/;Wk%[aU>NiuoPLYD]:
%Q46*DP$%GIXB.W(PcD,nL0TGT7]L42D7a2,='^/X37FHe>[ESIF4ciCET+Y%7E>[K*NX+]=fWkg1"(`4VioJF>O?$n=Q.S<qg9bK
%e4*AL4Jd@Bo&J8#EM9m01$Wk]i_<blU`.XU&#7>2O\8=#N(T_#G_(neDo?(r>/uB4e"[N#8<Y4bo!6q^VJNW!Le?X9q8X5;RE9`6
%AjLX:]p89%p*XtU!"73C'"6C%k;%3W,WCT&7U'&kV9^P]4fW;;MqFXGNU7'%NTs(md>:*..f3:,*Z+4.\eU7eV_uWD*PGTC2!/%/
%T&hb3DKN]D>q1ED?mq,CHX,k(P^Z$fcJR?O_o.hP*74eI(rA,Q_;Ys;dG5H</#/&#Xg]6\da*Pt-3Gi[^:(e,ri`ih^0Hro%LqXM
%T0%u(X"GSK:j)^>H\"\S4[8#5R8]in=?:&jTr\n`*?91C%P5"FQ%&8C-L#31O6a"[;cbssN#sfa>-4i/VMMCQTqKSP1q><`crL^Y
%2D0%u'"(#\9YSj-C@l/?HOe@mC?3GCbE8EZ;\q#GU-Uo<m,\..M]+V:$4n#?)ECp<o@u"-Mnt4[;?oG/>A'BP8Q<mra>h,Ro\Y]$
%lPoUhZ^5Hi8Y./iM]gnk(+_fW4Y9YQ\S=M.jYUIp0h2m)"#L;`>doQ@b#,=aB`b,9XX*jo+AImALa7Y8FpIK<Bu/P`,$u(\K?;>P
%5,+enXh&e@/u[LGoc!"<':lm?4i^#g\Qs&X(%(EN_X*^_Gb!h^L(bqm%i3Tin]/@TXC$6Mg=Q8ld^X%dRRf/L?QNAk[-=m#8Z_G=
%db#6`g*j?SqlUiC)OpS[%(">YX35&3:W]mMZsfSA,PRh!MT*&e31R68]3^J&fttSFp3,@0adoR'/,d**PMLSX(09<U]"_-h^\HTu
%\%B#]ep^de><ZoZHG4N;EUNfq[?U.8n_QC_oPQ=c]m9JLV=S5CkP+j,f@mpD^U7dh%.9REF5&B0`G``E7H;\Ib*W$Y[FN5sB<CdB
%H:ZMdXmFhXa/tqWf2&$PhH='*U4\HjUW;J*5(ETSBWdoK#Fa!mDV\Ul5<eHM^O9F44t\E&lHPkp@Jc^E[d_q]h:jD?GM]HOX5/7q
%dhGT:kJnf;]AnYornH%sIP2[YjPO9+X57aio@iL*f&sI&:;4G=>eJhGRX83uTkSbd[_C2;'Mgp-o@Ibn[J.illY#%51]O6'[j,8K
%(!GabpU/O!pYX(X[-5fTQd[T^qWm#4ic\o1f(r;6m7uVJl#oE0n\.ued59gk\V9TdfmQ#mETS7CX;:6XpD2=e/Ugu-gUR8qCEr+-
%Gl7:2mB`'u\TEkHWXG:D4(g=VBfmsBmHU7GbLJ8l/*jUT:[TmD(OkffFq3qg#6OL4/'lOXR`8QWqg#<j.,V3]4F4R/d'*KKW9X6j
%4"#3F?/@IUcBlddaE$frk:Q(kIm<M]fg]P`](*!mLMX\P1q0h/Xk3Ka]&<'dkO.'Dp?M$hRu<tu641^!:YtKZr^QM&_WomuVe,2h
%p1GH@ET8[Fo[nM0)oqNkHfr([@&k?PT?hjWMEp'"Fq"!6m?beIV:Bos[h_090o^r1^@3Q+KVgJaJ(o/A*t+.=<n1QXml"NDqi/S>
%Y;2R>_:g4CIW$c"I_<4)'q_![;?OUZ[(902p?E$XB!PkaDg1#sVkI/Wc]]Z&:7#A64k`E,aC1H_CV=u2gJ+FBM;s$V^6K(]`GZ.'
%PD:g*DjF#in#UlVDdJ3GGMg.alu&on'i,=>hq,Sl?9Y3"et!>,8$\g1]unC?,BMi2](<Y?]2ee&mV&Blc$Qs@;SRRi[;kcQUcj,'
%ebAegc#gh\i-YDk@<^nNMlkudjb<%r][t"%+G"D\s*EYGgX::3l*2%helE9m^D.6NGC.6K%;`2U'CfMDDr6G-3Znpdh*BMGc&\.%
%Vq0JM-UhP2pGJH)@.ijN<fq(V_;`=X1]0"Q?N$@o+)ZHC69\2j3^)=I@&%Yjo:;e5UZWuQc0@W2jm1LQabtP_=?ZRqc/8?&.P'c@
%&[/Yc7U's.>4W\GhZ!?5_G5P1V,uZ/%o!ft#FcG>l5FYDr>m,+H[b#ICpW0*Pi(gDr/]F@_/n7U<dWR[phrqeQPPY";9'<@7kZc6
%R_n%,aoVm=a'it9kJR+ool=!5h9uo6#r0c'AQVa!Qc%n5h:nCUX0$1Qh2g.(j/66](F)A.n1(&HD&-E,h-8T]bH`L65'so_ZPFX3
%D*;#$eudHRCQ5gJ_Vs2F4#Fs8Kk,_bk$mqI[<6E0s&@W83P/)C52TT=(3[ufkaX;tgjeJ6HCJOk&i\^^Ihk\!Rc26K6[NV9o[/$,
%qldtKkNlL5c/!E<^YQT?ro'bYn?'.+b0hll$^`8Xd!T`4Y+O%JW`uN"brJMJJ)#NMd^OpPM^H#0j1)QYpZVLd<:^Or$A+l8qPU^9
%k[:>Tn9&/N]5p=0]6r@=2g_r.KnHST2q5$>iTo4_Z].()q>-E<_9T`:o4.6fE6p[gdU0O>A/[c!C[L]`4ZP9g;'16hIBpK4nGO0"
%gW&jQV`!MR>^_h8;cu%cR$E:$p&)_&OT'S+QscaJ*G1nGEt:s>2_D##0BQ"gih#&kYPE-53iVQ;$o3p'f%QjA:\O%VDaeB7)Rn3Q
%aTBj^+,Hho(C/"-QCmeoIU4J'jiEmp3Z`tj_:&[e4=$4M^O@:Z2&bMoe"HTr/gZDsS98IEm1,+'fR/">Far9(?):S?T$VsN(%g>C
%q<,Jn`>cAa>2'25dZ=-0`M7f0Umm9VqG1o!q>T_h%%K^HNHOQ$]O/$Fec+%XGcU[a7,"L;'V]%,_:6A\\-SQTa20gW?h'6Cf=l`d
%2Y_)@+HK0/j5[6^*Nt]6LA-UUi+Y[JQ_;Nk&atO12&_P2=!eIfCUJr^V@=_ES^`>7)#_Y*\5a+>oXJg?N$ksGIk5u2*a/Njb4]77
%Bht3QMIdK7U)Wkm-WQc(RlVKFpt>&KP%]*lh[=HCV'W%3FqT6dh=t3maN("dQ;(k\`pE<RDYt<G"@NCEqnMm[KF\EFDdP?0f'Z%`
%j9M2W])DsC%FUiG4'Q'!ITYI<ocOdQAjj\_6#6QQh'%-BGeWn>p7'NjlBe9Rc1:])H_T7O)oM(2?0q"C[`H<IG'DlHom8g6eDf`@
%r"H=ApU977:R,7Y5A&\WH[C5pgc4WeIk8<YnU4\5C&KG0lo0g6CBn5#a"VCHCNZt5RK[jdQ<tN;UXc3E>Ksuk+9"1uM&b'TXj-Fr
%iPTeVd9=t'96:(,ZktsYI$U4+Cd:/PL$@GBlg4@R=7bj%bC]Xn35As>X*Gn$gX#rh*U:)_I/%a^pAu*7",^o?pZ$b`]O^M:fRWfO
%SX0bV95G(bKXq<I`3Jb%OM@<`*_]DR\"BX@G]WUaR8*.BYHrqPDH/aINH757hi9k&B>56iXF'\ULABm&f5%!"XM;LH\]^kUnbfBN
%O4Yr<<FP0Bm(LIV\%ha8FQ_S,@.Vk['H5<q\$_dE_X<m07/"Qr6DNd;0(M#59-8N;K7jc,Y1L>8:[B%I1oYgU][UW(q"4K%7""]S
%(#b3/rO(:+gA:1r$l;s7=8h1I>i<N$hH.SVC#P_n[QrYE^RO?`-bIs`Rp2S,B+H(PZsW"A'u9q:j8&)%Zeo[Qdu'3H@M8I+-\V)Q
%!pf#&(W]J,4)km&=bbi'Ac:D1F=[;5Tm:.Y;QgrtWonf%[(!cW](p\:)9(M0o(g,hXj'<GltP8bl[dF7igkjs!l)D>I/W`pg7C2%
%U&IY9[J/WtiUs7([rBIL+5VFPeM]AT)?+pMGgG#Vj_IXR]2<o_lBj^>B)gC[dkhABDQU>$B5a=%Qg^O8$nK>]Q*5-,2iNr>@p9n"
%\$c3Oh<D$\k2MlUXhJlOoVE,%]N@dT3-;mtWs/%E2Ab!!^HI(TojE6r+jotC*2(8CK@JHNf%/7HXY\mMYH8jqBro!p]l7ocCuM$Z
%g+`HEjK?ViThre9V;h+?K<L0\L?[jOk$r+oE,siLg"=sJ$MRXKEm3Yq::AV2jlL<[XTWH6hI?(eUY;\n*.D#d6q5/XpPj_I1IM>P
%EF7TIAKJ1_D*Hd#;<'"HAoR&NUqln`]l)fJ#I>Ueq<5eu9!M8)(Ln)Jqi0D,-Ur+9fkjS]9?g\%o+Ea=B\U-hmW.sm?DP$pg"sX>
%>(5A)5n=lMMpO:9kGpPXkKTbTG<aLG:N*@`?iMmJW3EU]qFCg;GOEmkK\Oj>Vjk^;5?@Y5)j]BRfYpoAI-21JPlL/_l_%UW92g>j
%hMaA-llI72`NfQuF#(L5?8-g]3-4%o&r#cUYn,@^p?f9<-ZADf\*MR?lgEO%q82G&H`)Sr_hB]3c/#:irUk6<daejE;)"%P(:QNq
%4FdU@cV6r2Y9&X+IW0Q#cGA)Zm<]q4-a[IN[G]>>nbLu<*1K'i'O^Olo^4_:7ek`\adn'j&[ONo<qe\F$P0l`?/OVR>"@mcf&#9J
%G*AnLka5.aH/5#C3/-\d@=G3E\,3Xnm8$MZeJO.cjgaa%D^QpUebcOWP-)2qfID>pp0\STII5enRV(Z&o@*/p[<h_cIoTh.*GD_k
%I@3=_\D-STe!94\@e6?d@a[+A#O^1+VtKJ1qe5^U&N3"`FLsoOjlMnt2c%*\:H)Ts]R;P#+R8BiIHqQ7eDL#bUt<=rAtp9eaO:X6
%6a^+358eGNH",8>T(cpaqm4g^D9#?[A9Eu@DVlq8*.2U@<.DO?&q)jRKuW0?jsWRUZN9I\2Tr5ljiKlrYe.RD@Vo\iV46R]D6%_n
%mA7#l$,'C/5?D/+:Vs:G2a9dfHNRIjIV[h*,[93MLI1TKpAm1ST4AQbMZ<L!\pR]4PAQ:Y*^B5^;,e1"(H)d3I^m_tjAGI.FU(NB
%UkW(AZeJ\'L!QZ$)f)AKcgEnN[gV04o>9]<Ka6MdhB$R$[T8;lD)il.Du[8Sr%:$9$X2pB%V:ZfB%*2u^un.n[!.fN=0_f%7p17D
%HWa^#lp#n&IImEtb(o&bCm(6V*JF2p'9.CO\+]OVYbqs0fR)I*k4^B!CWioqSSONQrTDQ)D6'q8Y&4ldrEc^I'sV'mIFr`HpM1;c
%U+]m6m>`078"T,AMU0"Y3lT(uXj,Dl4*TQn7=P$G?Jg1t%MR+Qhaj</Iq/Xr`LJ0HkM.@&mdOZTjKMAXTQ*l]=E1tEq<QMA>IRq?
%[;UQZ(/LCdr!9kC8WTIgj)XA^f#GfF4(Y2>^OaA^,CD#=f@HMehl;FmSt?ai5/%tuh%=rG\LkSpfLa(gfp^Zu]Rp=_4/Bjm@^Pt8
%N^Re/ob!C',5]43I,MG7hN>)8oNPbU>dqfoIr`93qRCZPB?JjfU;&/g[>d"(M]]XQDk,((]Cb)?7#!^2)K*MerN]uTN`8okD='/<
%bAMs0?HUTTfWY/Us5;uSS\p5r6F1VdGJQ,Cq_*PZ`gA!GauE[U\R:V=4hPth'?g)H^H.jB(a+[i)dQq9_a_JHSnu(ede[]pQ9Vb4
%inC`ipUKa&'8E)+eF`CN>)f^-A!:E]dIWFF[1+<;oQe.4YMEV_6X>Lo\=)h.oH63gQ^:HJgBk$/XQ&?JH"4NgCOI5mo/0.h<;H(H
%Z*AU^\*qk/T);E`Pp5!tgr<od;:ogTFGl'hh^br4Fl#cWh5>19RX:Ochn7:rl.g#lD$Km`"tbr*ch;S8SR+=Uhn)D8rAQAeO[`FV
%01gV2k4ueIbpA+ab.GoPh>7SeLL6?"C\RTMn`,Nh2"amueC6<L1Ae\ke_8TeDP.N#G&T/<JsX5j]\3e/Z@Z5(h"_eaJeFdk=?W+"
%4oYO(bc?NLgWQY?er<mN*Ru3W,VZpcRfEA/ZOf7dFE*GWZo.T*l0X6$VVYI4QLE?1lhu*WlGqfJCgOE#ISu4&7;&e8*4J[#%Dh&u
%j6P,L1'3rbb"47$%gq=YKAo8#7rlYoP_1C)G;D?(A,K_MC[I@BrLe@:\XJI?p5F8Ei$H#])L?%YOg=hhE3QiAB63pBd5MN`k[qC"
%gJK+rb5VZEd2O2`dSGj9h)VZ<]XMfC^CC)g)p^Ff5#m&a$hi?/l>-8in\pF:hi`?L_/?L+[S$9Pf2b)M+cFj"]jOs#hod;;5G"&W
%5%tc*C[SeuO^*4IesV$f>Of[RS#HA\H>AaeNKXA955L%)]`u>s#IcW5'i/-(\(/ISmoAiHpBR2K-9_.<[CT@=7%),r6qkSZ8]e?"
%ni?F3/Nd5.Ik,Op!j1PTL4<$6Y/4.Vh>+@@7RWRnQ1En><I1mY?<]/qT>(@#^-QD\>u0L1dcArFj5/A=cb2,FE85*hBrS@^kjW$E
%#B'%o"lr'H*\P.$dsj/TBH3Xf&inQ&j;4lB>#EJtkSs7JfsP15["fakP)+J@97Ks+p9&B0`]m/+00EV=[R8-fht;[`Z.!(;Oj7\Z
%SV"-CWhfksH,%r!Y9"H$<$.E-(I,Q70*I3f)"1cGfJ(o(G1&gk+!6S"rAMd;=t^\8?Tc6>lfeZ@K[mQ/f>!HNLd%r*hDN'a`I58l
%mI&P;fW8t>H%5OBAC&\Z&ad>ZDg"?n;o3-Zlh:blhjX#:1cNV7]Y"/`I_P)+[U1\l_`epWISI8dbH:Y0eTX2p/q""#f:@-ZP"#N'
%08l`^_d_e[p\dPFaWpALkK*O(2>\ap7X=J/HulrJri#V&qVekPDTP01rf[hl?SmN9HK/hDZ;fV^D7gfA!t=Mgn$fdg?E=AkS%Xl@
%9l1:7,3W>W,HC61h9Fut9fEfNI8bWK1%D?^OmY2rnhK4p$[^=1;<a.f/8pigITn?[T%r&SqE"B(!`T#'I"(D"8/E*RIe72_HhZ4-
%\,?6M0jt`4.GKsj:<ALY"p2`Is5n$Mht8tD[s\'oVQ;(&4BgBb\I]DJ/M%Mf*Hj?aO.XfrDsk%$KPrb5h$Hm7_3:b(4[Vn-s.s[Z
%<pjF^s7c<Gahp.I'ln?,S@@1n'tGH"S@Br-l3:U\*Aip?&&-q.X@XL+bPn)+ZXbAE%hI]idVc:.Ps3-Be9GMB%i!N.Po@a`k.ai*
%VqO,6Fh7BhZ^9_oa);Hs)s95/Fle4qL'OP>U6iPs\([iNKqTta_m=.9i>MDYb?]MV"k``WqbR^9Ars4mR-Gn]pobe%9In3S#D7%L
%TKC3ormr.!cC+:7SHeNc/SJ+/m5Ncgg)4UQ7'-Vmj+s/=8a;XNTh"l/%tB)mrL[1[TbW(Ak\%WLo.s`,6Hs#>HsB0?q/]'?%^`![
%:]F%955FrfHN3urK-%5*Kr#QiaO'KF+!9I\kEX+<;sVL0T&i&:qTP%:q0C.Bh;"1R\p;c/?-M\>!C8jR:bQbA:<p7]'Z9D?nainl
%&]DoJ6-,-1Dn;O2.oT6uanqCKcnHP$ZiJ^T_1KHJO@QYS6rpHXbB#gFqHC$DE*pZ2e(S=]SjR:(Leg*++I^OaBd&M)2d@F<3'lC/
%9h2&inr@3f_2aj@/7,TFpH2e*T&oNpSKP;9V]1:E.3lj23['LAgGr[1=;K4TB5Q&a@%/.bQZ[P5kN4\$X6C:PZ3(G+Vr8O;D7pSg
%\o-F[d'WAHBj^qeU-7uL8/'ET[CtH8Gp7:KUIfdWbe(UJLRoh_f%1:@ii`5l?R;%lVMi7Db1"Ft/D[[iST*r(S[ZL5m=e?C9Uk/W
%%RDM9_"=k9?Ap$'&hH3IbEFM%>TN6*+PUQ,Lam58&G-G,n;+4UhbZ/i`g]?&jVZd5<aqK*JF%g;LZ8aE8(",@L2MBdT&[F<LZ\jW
%PA3cJ(3-:.^-h+MJ*!7cGU*.,SEC*`G+quF!>6*P[fPlRDd*8Pl";ptKFA)FH:64a3C+W<oE>kR7"R\Oa2Zk!d<"of&U6<FR!`:q
%bYn(75_l'+okF5f03]ATH.-::oB@n]`3]Oc137+1$>FsYfhq2WK)*&ET7fIE+)*1$8Lr0al>$lCc+YDb?kQ9,XHoOJkC%<^)gFb\
%lA3^#(S46L[SOq\#YU8@#\6Gb+<M6V1A@/]bOgFFJAcFaY]M6*npIJ[R%BH]k&&ur!6.NQ%D528!<L?;J-asDnt6G5*Bn!q51(&I
%At`/Q\e:c?VV5h>5*sT_cH5f(qrl["cO'G5FIK('S)2a@Y%=#jcB3^AQ)&iYOqhiQP:/Ga0-pW.@XENnk7Pu6-3UduP,?&ef)[0\
%&WgrYW("Wq_TX8'iu,3b!mujO7+!'UYW8!OOHV&/cMQW^Y#9prk`Q2rnO"/Bcpe!Hd4.PU7m_pJINX&5BJ/p'JOH<t"%p>_,g?=p
%=?G6D;im^:lBtIR2JjhHKdkK&U.Ji.Pa5l!=<FZ`$nqo3$0bXqO]6Bql0<e#\>qoBi,_!F&Q0.##i%8Q[5N#k%2k0hT`qKNf_?BF
%#'L?Bda<Th'8/?GDju26_H;$$N-5dibe(%@aTtYuG+a_8W(0aX.3q'XSWQG;lT#Lq-V=i(Z75mGOKfC\[[3QVYVaemFI\(5+Q&h*
%+_?j]@.d0"V8ATJ9S]<P4OBZRSbNcD5f=n=i1?5N#X(ETE(AVFcZY!TXUr`n&Y0=1lgf(54oobYVVn&Qf*42B'<o>bO<Q=j\#uq2
%p7lq^r9##Z=st7rKFIA^p6E/5[is3PMuFn]g_!oo[8&uUdrgJ)(^)V!/;*F711:afK#ADk[3pb4BOa#ce=fTQ7ol:g(+^ZFJ7OU/
%aEh6>!"@:hgl^gI0O^\X-;EF1ZonG+GH?BQK4g;1j,pdHIImO1`1fP!-sY*'AL/Mm+Ss1.\bUiBm6do#pjiffYq/56/7"[oUJ6;k
%Zn,\-J4RO%a\GkDmg/m5_\!5llZ&sZUiYA-L6B>-l+C^t+_sEq;BrXG)L)CZ_PX"E59_>5cOuCqXUIHHZB>M3OK!0AZ*Es+OQX6g
%XX*k%C6S$t$OAi[_=6rMX$V&/I$Q>#E,n-8>_$32F&s?=*?PVE"iQ%pO6/.lkQp5\UT-]P!tg=l2&o6p/YM!8$F3<-E"]L=n`&Rs
%L9S?\2.\hkP-mk`#IFcn>!eR@'1%JuI>>lcRpoeJD%[2W=90'7MKBH4h%]BH])jH++?=)AdF=2PO+Y9iKjdX2,K-)PkELMDP6d7.
%`p[[[U'(^^ja5?1#sat7JJfZ>BH5L`,s\j@L8ds>6JWj-/ffpRUG>F<5Vojp!&As`F.fM>Yq;utN-ti9@GT1o*LUdg1M_NE$+o25
%_/Jm<ErZPh+B4XX?h(^Z3]rN2eP.)@6clnSl"'WeqgmQ6,m*Wh8!ZCZ@'^+^CPd]u9/d[,/%##5kDI(;m^+)&2\AKI8i7qLPDjM9
%:f(gLT9u/b"c4Z^@W`b\6f_%sK2`GX8t<oUD@q)TII4rWY?5Bte2)r99[=>/*38E<`-;a.K]F;I$;QZS&Ito!%j\u*"X"]B7lb//
%M_N::@Tm?A-jZ"u))OYCC<_Qf6u&W0Bcrh-H_s&,%")nGg(q!kof3b?kr)[JdO\[R4Ot(8fBHmn&hWX1pCXj4$d<d]DFoeuNmJ'B
%!4I`7!XV$CRsldF*m/mTMcO'mM\I6.%Y9]I+rYF!qk,P]:-`Y@9IO8#>!A?B')qCY/c)^pZQY!3W8f;J&g4afO;k-NojR97n4O0s
%agMbEj#"i4&J8oem>\gRLo>.rHCLZ=cm?Wo5$;_@Lik`B>_DFJZsfnT1km6EcI>/V]G_KS`I5FI6=trYH'V4K2OZ(,$b=jTm5(BN
%<qP<NLEao5L`eAU]PJ',!JG.+L,]ekh0De1l*+Q=qOiQbqnF7ZS#lsZ>D?nWL31oL$OIhGlQP^<o$@^6Z&D;+#*G)--l2m2+D=96
%:Q.gcQ4tj=Q9Nf_P+;0R*Psp.1a!Qh,d@aoUO$H7KUrb5+T5W!fHHY$0KXfT!nbE`IV>B2S1h<0.m]ZN`^b."#rE3W*DsDo-^HTb
%'+;dZ:I`euC0F'31"6eo[Gcon*!D;0H".E7:;"<J?&D$4g+]teBZ%X:Q$(fb">$efM.U%7^aTCYJa#2t:_/+=(JI/Y2)I_iBMcS]
%7V&MG/K(kU8=LGE/P/D33LaiCC/EOV7?8'agS?peDu`MIb#77dgaVV0RM,D[KDI:5'Or9<_9SaP_N6i/VWS4b,Oi[C8a^p:=*,@P
%.F(Zq"TQ8%;+s7pa@d_R'S_6:8,:1f!&5V\AoKFI%3e`pDKtMMl-MDY`c?XDf7#-\&4^ulo*n,i\mnJj:@R_),/1"sf1^ig$K[Yg
%X%nd8b?#kR+E:3pC:fM;)W3;;&F0M<Mo]c))!&e-"5-/;/Ini%@6kCIOZm`3pkE=4WA#'(%YQAQ6edeYPle5hmjW+V2'eH*Kk`H=
%c`dqU9q+K*:aA%3B1e\`"BRjcTf0(^qc,sun2i`j\$._RJsmb$"q5Xl@C)4cLl"h4O:*5BTlZR\g>^6@N8hB`&=I&44![&O6itOF
%`n$fk$A5Umme[V([b0gkN'eRZ$<"U-iCPR[D@#:@%/P_-5\aWnRm7QB7mn[ENC\si2H-5+#/sF@=^Tl:_'0q;(u&hbNf\(`>rYQ_
%]c:Uh!U>@!JeBmS`s*ZHJ^\/Jp2nSD/dOd?#o#4a6s-<^KZ`8,,q*&bC#i>e<.5-4":i!("<uO__V[sNk_hF8)DH%7JOLh:_m,BP
%60Ya*O>Rr#Kal$5=0+;s<a&B4HEO=dEAc>_Vum828-Fb-&BL.N!4&=#d7W(WU^BL]/<T04MpN.Dk-9LtZp^rL=Ydc:K7*!;_Ab@,
%1QbXQ\e5]c!bL*^Lee-U5aZ-fRqC`uH@`S;)O)"I.^,#KC5:n.iJ7;/elRmC>gS!,XnrSP]b[)uXu?><WMsp\4G+.!'"?4_N3a3*
%@1Id58+(7?lj%[p/(KFm;[>C;h=m37)WH>K<!h"aC[M:n*-!gb=q,V:MtgGR<)X-WD$&0n/W'WC(+:A+>20^hhZq*!]50YUWoYX/
%O[:Wm.%649<VM?Y:$<It;Cc_14Dtd'2Q_45G!P*ArBLU*8Ed!k)KDD`Mf6oVA5fFBi/1_)lOc8WlXd<hL!!;H!,rO`XS5(6fk;Hk
%*$UFH;P?f,lB)0j$&BJF&`'0?[$;]]L.agI?LF:JTg*OT$P;!(^?e/lK,u/m%rAX.L]VJ8]JeZ45ZVh^^lCZOp@n^Nb?^DBSu%*t
%&\<CX`#rA\Jo]R!fbjRJ@s9/@n/>#0Z;edOUU^e+`-MbIa^D@4#ZC$\E,:_cZ@3qaBjuG6:u3u_M].j`.*.mL@1>Jq3;@gF-DGXJ
%H_s)c>6B#;"-"+!52YM4&qoY)6=a9.UKG<1Wl\[VdkV0$I+`*$H@=CE;@'c2SE-B:2I!KnPF8jLVhGL3^5YK,LD*dcAm?YX#UK/N
%3+t'p/E2$W>t&6KjOo0/*AW*q$\JU;e\rZ-(gYV\oS//P86<+D6J'd3l'r((7Y&hS=ZqTnN6DI>j4!//%YhD:b=0(\%L("A(VYfH
%.?jh1UA/oIR(=&bD;5IqF4P2:S.1*iT.(s`K@3f1Sm6tr+d-OVMD,+]A09=@N<!"n,@7/(S$n4$fSV9o-lKH]UR".s1A0>'Z3V*[
%f31k%["%$/5,^I?#Vt%O>hf@Ql&2C^r<#V=+>0=aZ-l@>`34%k9aK9L!4$3G4\37kfCh57C;e8'Lu5@&"<6VU#?5H=Rq*O3e-Y$\
%7g.P]$5&p?$mnSR-!2E8-4jF$Qqh!U11+jqJ%-2gk#K'eTSPbjG#93=%Y:h.[!?-mpIuEj1ec:fL)\/,)?j`/j:Kt%XPGJ=I8,6P
%D993BN^-$5$pe=/PJ['6bm%`rZao<3?a26o&79rI\1]PT.A65&Tr<:Y,M8<d+m$FpD$&Q9_bU\3"[ZSOD*&pdj+aEEVo^*4kE9DW
%Jb44FW$P],iCoT%;E/"idNP156L'=V7Pi.j&VLYc-uBbQ!*+aeY$i;;d',rj>DQq(DJV0<P\jHD]7Gk?O]<1!`\P6#+6kji;j:dI
%+rpuskQ"_%mu0<XCLBeu7lW=hAliPEBg<s.KfJrPc:K3G*l=/^/t/*$6-=51C74F#VsQ%#24+l>5h)<8\X6A^P0F8Hl!oi:,GS,.
%;aIp+]!eD?Jj;*D+J.21)bF"A)%s2cDmQSK/K6u&:Dj;<b.Y1,+?B32l55tPLZ"@8Emb\3H9l"<KJj6cUgbL#JTc'JlO]8a2?69&
%4g"gL_a5o/H\SgR^6rMo,-_,K$Q+jcIn'Sqqn^>7!L&6R)'9iC1.+Y"clh&<.F=691lOjU74<Bu8.O/sjkul6Gb4iLJ.XT!4@#tX
%T!p#@Ma.ch3l$Ukq#YT!\@NhO+r1TTK8GI[Tf."oXXjOs:mZlHJ)rgt=Tf$f51Q3$7stgtC>r9\QYniUb[$"(>@68U6BgbQ+L-$)
%R7(a&O:o3:]=</Sll+WDl#7Q^8YY*'PWVhKL7^@DrX,10Gnl.u9c'0R9[QCc)oD=f6V+`cQi&>%bWs`Q?(qc@?:O>g7h^)g.+q@]
%\uit(VIZ]d"HoaS6lUMc:ekam)F>j=M&I)MF@md^IM;T7FAitod*Uo[/t]I8!?i&jmGK;C9Ecd+^H&*o%50nc00Trq?tAc;b]iD=
%0M<Mg"Q&53Jf)<$lH7Ykeqt`<c#Gue.PMu`239_/!_$E;#A5c[n-eFPRD(R.-Oq%eVA$;(J`Y"NKWI%)go5RmJ/mYA!%HMWeCLnj
%[F'2oTd`:&SWO/*%BPGF(Uf';)C/ieB%7$Ah$H35%LF"JI&TW5L5O_/f155B!\$G$qJ:j2%8#]$$r.`o!@@>Xh\>?s?=Q#7W/C$Q
%dqKI,mshu6X^R*V)Jp>GCK.<MWgNr]2$"og9:9(YMSS775ung8<n*eVO^+[Y86(2X8PiJ&c&QVOh!Fg-"PA*N=MRd.5Et)YDoSsn
%CuiOEP10JH2E@(]'N/a2[PCU0oT_J7`HnW,&eMX;eZ*MDP(mM]3,Xn@au$;QZtWI;n&q7^L6LPoNGD35\SLd\irq@nMSmF."I)V=
%LbC"h1W5T^,b#38FgYY:D?u^]CDcRb'rocV,j+.Z6lSFq5c+&IZ)UNk\l'P0lKdBXJ6'\3^RUnZ\AG3O1b^5ujl>k:3t$/oP#04=
%(:(l=6"T"qadgctRdp>r3a;`Dk>bIp6[dZ.=@MIn7"joUB_04dm[Ga]D3uN6$o`k.F_6WRWF`>0XQr+s"GWT_bClb2^6hrk+fL=b
%"GuKOno._.\[W'1G<CC2_%SYiX9ib]Ei@]uj<57/T=n/)fodn\p.ih%)f\fCcOA)?RtSN:MpVG8UWWiLKGb8ND9f@YRYC#V#%Pb`
%CERIl%;JFC+%DGr&S&hHD)s1u&mpEA#LAKdA0ndn)*ZrVpn<3Prdchs!TN#i1TRF4HU<s-^*cBA$8i8aAS8^c,XY(bM7l3RDX.]O
%p,-fim1@7(Q5h;#1"?)o.Q)b<+H/hm5p9@_><EYY/>a9&-VoM*YuFI:d]OI^*0]><OIB8(2)/(u't)G.X,U?aD;#g@b@t*dg+^K4
%NAca_2&a8TXiH/3c"`#g-Tc)ipHlTUk`-iN;3lG,!h5Dn9("-;c\;M#f,P8,G>FY+2F=mCEKA.m+CUlJ-h*KLnIQ21MHRiYr&"XE
%?d<VS&`\V9V.cgd3)`6NC%J2u4A)?eq]$J1eZC,h:46/IV.fCViKfr&.h,@TSm847W1O_FHk%MPL^.^A6V\NF'`%aPN.&qRBW1,V
%R)e_BD4ZBmENWs^ebRF_I5Ut]J4S%q*9C'DB8TN9gaWf+o/3a$d=A-X''28G]cUpG$0F>?KT.*,Y7Gu^?F_J?'!^H%Us6u$n0FDZ
%*_HM\:I'#p+]3,o0Ka0jX[>.IJhXaR.uRVGX,i#S_X\VU':1sD<DKdV7+&TW"S+/;rg+:hp_#"Ie2soH^1DTsUaP)r[m3OA:N?i-
%V":B@14%eQH4,rqN:1tRZl]aO9pu(BUn@8t-qX9_-In9.E"*L"[`V,`UE#Uc/j?3].10r@QU%:33+iR\%5%e_Q99).P.Q_g$BF4!
%Q5ufcD77."oSDu625js&ahJl$OOkj,]R2g-L\>^8go^&iTOi/XWQYL(f`jC`>]^D^Ri0gqJ78L3cM%jj_<m"e%h*Sp5D"?eo4geA
%E71F0,q6Mf8J7B<.i(:c.D:Ye)TF]og2JJhbr*qB.ORe,/P]R!VU[Gl[.P^S;_6qUL9\EUrXWs>#fa]M?r@oqfDoH#15M?O$t1o]
%4b5j7OiKlFkm/DngXO$T9fOb^&Po)(jT5[L/R8.*6sH;rL@C,\:rQ>CUFVC`QV9bPD$3DQKdnC1/'3U7d_Vjj,!KD\'!%@hE^9HV
%:#N%!G92bXZNKPTVktS,`fr/3J:(_1'RIWK!ReQhB5!37/8[ZC#RHh.F$5r!.\@^L5s7f>9S)+'Q2HC<%6P.A%1GAh*-OfA_QW-r
%J?qgm'56'm.0kiK;oBhGQ!oTGk<!2-4[\YdEVdWIVLUX_MRUorfRQ5lGbS>t[pq6Qkno!l=3Se4f"%]PSBT?FrPMb8A2(CPi=6M@
%giA.b:+6QNMK'Ke@ZY$oEdpG$EDFXfP1Rc7UgM3&_?ODo4Ll*TTQHE<Z;H-o,Z]cC&<>5L;CHS+i[75[ncCc_(C=MTX.g-I0<`kE
%gAhh&cF<=[D)QtQAP;NF<)%mV3N&aiR50jG%$9P.i<aLo[2qSC-jP^,&^`]u6ln#%TCJWb>qL(f\YMJ!5u5.cPjsoK^3[]T`L.ti
%8=rk6>!d!A9b,T=cjGn"D:\L1KGR<'UBr06T=<diA\]tbYRkiMpk_UN-8->E`2V[&A:mG*$@#?P1%od4W!iG19XUchVW8_o^eHGh
%;^eX%34gen]4W(V]EF.VGVgh]D+bq["TdIu!@O)tCd/[^#uoC=JKMY:)[S@kCaBe_4+];m6([#^V;WqfihY.O5Eo8),`3!ijdg=o
%OJ2hCMjUFV3[o^m'),ml-)]!m.2J\<V1I-lgbjfFR\+b++3g%W/U^Y'@bOIV(H9i_Lkcp=pA-%-(ft&&bV"ocdE[KT8sa,$f._jZ
%;^bNb=[`pe7'`qdBd%aU:+"N-,TiGd"`12?gdiW#PF>m@om@X63rfgS_^+#u>Yu11&$u]fSglI5)6Qrq#t&'b)+$(k^E1f"`aQA4
%:MiZI`=a4Lnm8)%;4_953[dtt2X,(WhL*3k$VDa$9t?AKp"26#]t:^l!XB]-()69]PX%E82K6-fgr+$KlgZqiNU>[uXUX]hJ:1>p
%MPENc?HsYq)X</N$AE=75<K6LKSesEEL]FECJY^&;T^1OQmB4KAd[mWRW3m!5k0@gJ4qdC.Fefe'WU8KKQtOHfqVt&k7Ih(03d:u
%Yl*J`Ucp3t#hWeGkp'S2MNJ&-&S1k+V%Ojm-ckgTZdi5\8+!NU0V!e?'9FS(eCWAL<"+=`<T!pmE$=50bY!9FI5")pKA?uJp$+?0
%Y]N0FGI@(K@bQ&RghBtdP3Ij%fF[2s.&1`WbUM)6&1_;+DlF(6Y2r3Ck`--A!_Rhl(*KNCUKSqAICNVbhDm@Kg866l![++Ro5UPJ
%cZ.*"kAfS01aO%\pjl$`6TBt@p0(OB&;F;YS4:W0:@P\Xfmsr@qu?l-FBDDHRc'd7'LuX0hVd.JA-tHSOG5Fk&/3Fel3g)41M9)W
%1Cd/f>2aJZ+1_jfA$c;_U;=Qu!kP<a@<dZlj0pA,T=e5uJTqO"Crm6/O4/J!mh+J%/!EB$mjn3g*aj2a-\3*[UJmsLOfB!Ick_lX
%)Y!iRSFkriH<4&,k*9L,G/35[/5`3;Jm9R&>Qad7#p&4K8reWaM&E>/)O<^I7dI$,R.cj7E<J(&s+N0(plQ@?V8DJ+\ogETHgsIg
%KU<KfB*<WiK)p\MGKE+cAEq;<`1hk#CrS9)V'(D_oOqOpK]Akt!4fLXWJYLCgp;V.=CLG:U?!T;3:2Y%I]hWCc_3YaKqr#7'pjWj
%eJtH4%]?ES!=`Q99;N:3N/OgB6o<jie:f;1!m`XL2/U]G$?G4q6gs=eV.W,8O>r_k8Wer16%t2ORt<U;N/:j/MmP.%h9[Lr5k.aZ
%^1to(dF0iW#W][hGe+Ru1kb<TqRW1Fc=Mo1h^.3bHNJ;O6kpQ]cj>u*a3V_hKpb9\FVB6MjR>.p0P&YL\qW6*E"+BW`fV%P((SL#
%Y\t@k#K#hm-RJ7,N<!6)Goah`X+por>$!I=CmEM0[<Oln0n+gNZ6i!,%PJ%5P!^TTmA-XbNJ<J)!7@Z/4\KLF]-c`MXfoHHpA8^g
%ca(@L=TsK5<"E7d\M[q(8(JiS&h'@+ELfcO:qRPGNL6\.)8hP"UY`":<cY#McGr`f@4BP[PF&;C)99oD.TdE8.!`I1Z+uPQ&3@nk
%gBiT_]kRpTQ;q!4NZ\fuPPKune0PKs(@M6r6:=:IW7IiIQ4W(I^a+"IRMaHqnkRU?Q2D00:gA"36/@_-@3@0U09>!DKWpST?^4pT
%MKpA[>a)=A'J39V:DI]`9+Khl*]:J>*S;!59%L@SR14Y%1B7X@#DEH9gWDF8@D8#BL)K7-l]i#-IlN,%mOL,,>nN`#1KtUMe3TZO
%!UG.9EOj7ZJc%p#$(i=;Kd_'edOYFX.?lL%.'5./0H`)GRfjkbBB`=$^1tnTD`W_(G8C$Q'$q3(^K.[+Y&iA)eADSgfMBEDF>2j8
%&H6U(pQJKdN\.(=p5pr01&-?3H;*'5b-OC#-tEV48gRbnb2EGQ0A-#_#@a@ZZ5@]-KL527e:ATF[60gWNmAis%b1YU:Yg)c072!W
%A>Vmk,*-_\[cCgP%:aauOUh&A%*pol51VUGb='i-m'Fb%BHp9H$S=mH<;=S,._CcB+XJ[>7g_;L<V)B-Z7(08a&%U6=Bt?YH.u83
%#o6/%M9PPO4W8lJ<A?=?CK'5V<a\M)VqAMQ._11^\;35%b?(AiQ`Y(V7,jo!$7's8MbO9#!L%XOe.hJ[_8$[\`-j561G/8$&Teio
%I(t_Tp:0LBV8<$uHXKAgJ3*\FJ1k;M.7:Oj//"&M=ghiinih-2#7L"Si2]2W+m4q;E?GEe]bX.hNhnM#F>q.s-\Wc&;VqUQ&.f*/
%E.FWK#:L<[@bU7*,0h4l.Yh8<aAbVoErL<6C+5S0Tg3RQ_F(2N>e,+[aMqHX^5-id"KKi"_qZCB]3)KWjpk6]KO8V3@I=[5Rke<u
%/:P*tKXit%5,e`d@;[,\>a[RqXj*l"\O0=($0'l%P<aqJ]R4W,COtql6d@DB4D=u*BL?Df/k"kJ+drGW]*:u?`-H$h9tl1Z$iL<B
%b]Z=/7f8bl`FtC?NCFm5B<JSrQuPN$=b2IR@KuM,M7A43Jq<0>VGZS(nAElodC9LV#uJ44(5J6`i&O`L9bZqm2dLr+1m>n3Ye!H8
%'RA^#7UZ(.FV$d42[=s%3`H:(5s;N83/S3giG-5UYT:Y7[5!kW>[,G<)bU:06#Rb^T7StiMP9@BVSRG(F\0IbLNp=;A?Si6+b*GU
%>N")e;19`&N;5r#m;(<S$7CSf3?cibq_=tB6+d^!<LKEi8Wt-7L,Oi$gd6IIJ7LBmp5JHm(i%#i2Y#iL@[J;k6Th1V!9/nDP[\#8
%>uk7MU.,G!GUcgle4R&D[Q@;H/Dq-H!#_Z)34MRVi#3W-$Ic8rFR6#D%qlV2i(sJ"I]j3ZiPsClOPLEjc`&)k$,kU'M]#ducq*^@
%&X.2:<W@l],"Z@b.`]#-(F'WTP!NUq.4sUP`I?C$NiN+"P4nGAc)<(MV_gK%%HUDB4"G_UnQ5lX%_#(ZPpN,M+:"j`>jt9fc%NAN
%.V<J9[s\72JQtL.8U-GgEnW0U<m30>=3b<"cZ%u$*$E:ca?a(mL%U^U[Wnj-XB\<h\;lh+Ys#=Xe9U4)TIP@>j<?8tbr:os8)>7h
%fUfZtYtSc55cVIg&4>RC6TI_G9VQ?3^re*dZ^DFT$;i-G"[EL,Hfr+t8gd&PJsApKEE-@7/D(=8)T(&*E="'6.PgL5Dn3foe!8NG
%b`p_PSNr&$VO:gtQ2:W[i+rUP>)"er*%B-h_dS0<+Yf$"jN$BP'LT-`aK380RH_^hJFMX_r1HBj(1N@tScK@X9>jMY*<mJS;am:0
%*?;9eHa_kCd#QWim]#sr5F5>j<+n/MU;h2TNtKJ4@KkjanS/A_U%V#_TGG9_"0$u$';QqB0"A/rpB&k)g$rofr9/Y;aHg$@NI^e0
%#`iT(L@Q&]+hFBn'*lJc7gPN8r6S4hgD*d@&0YF(j`&)4<g@g$T@c:3OFtZj5_LQfGpWcqL/GY0HPTgrKk)eQ;KnMIZmh#T**PXQ
%`_BD_LBnL:#XsZ_W]32[/?t:(Yp_WL&MhoCG/`M_g+999I'U_]#u+E/M1Iun6/2rM$2Alk\kP[``7TVhMrp6t*Ou#p"V$R6L;#68
%cWP0Ho$5XE/)6+dO)h`?%tmo]Pn]*b1%B=0g^JmW"b9[P.Wm(l,4dR5."f<6[=W31W`![^KqcouLOp@X8cBXKW*E8A2ZZp4YX:oY
%#R//S^Z32p!!W:B'lI*94U%c4jM2QN3!`1mbd+aoQ&GMm5Hu^*\<[rgS8h@.VCZL;K\PT]3c$?gdM==SW-ZVWe>t2[%OCHE=e7-F
%Co2Mi_LXV41mgP]-n$[J?If=Z^abC\aK^K:&)aJY1MH+iJ"Qt%/'?'G!th:IC83b=Blg;Ai?[/*:t(SG*N4<NLYZ+f;I<;bKAubi
%CngC:p&GoE?nC@E;^gL$X)Ifa:t=AMb43Df-!kd>O&b2A\>Feuil(3'.=3:!n<^Gmg]^!oEpc+>begEMHAjb/8gsB8mLHb,-pO3;
%G?nVP!Q<=/RDMX!j]$e)UmtKt.dA;N5i1^W-MU)-R+,dPLnF]ehb[>4&(F*[3$ZN[.Q55s"Gi]'1G,RZ1BD11F%MV\F6.;jOqQVr
%ArN/[,EVlC=$aR55@\->?_FDLW03R?,`6SD82A?S`):dLU1++"D]^,4/JWC",q0JXXsZOL.F^V@UE#FlL4VUtZE!ue\)n`56SZNN
%ODm#Z*G7.M[A4F`S;@m!R)F.M<8Dr%]*fPmODp+3N9k],lV+j*=@.jW%\V;T9%nfhNeI<t'MX_qQ8!>e.<-m#@2+[^o'79c;";%A
%c>ScMRSp)$aM@lA"F8+Hj-M<[Q(@t]e6@n/_dr6rcNuHD>e_B%eQYFQn6NGLZjP1r[`[Ra9*%\q(-Y7-/<qRNOE>L/0F8-jr-9R;
%)%YD=EE$V($XQ(qBO0SGpdl<(Y!sC0'miFVR.8NGQ83!XScP2*nH++C#ZYSoQN_qSlWs2V)K98ap4b57[<rG#Q+DN1kE2RFBP\>h
%WSs?[W/HGc83,IfWs4iG@*//"F<FY!:SN9/qN_hrHhE(L%I+kRf@Y&<;K9l)0.]k)$QX70/C$%meNnq[:<jQ)$u`(29J.[mO=tl$
%Tqec.R.U.U2%oe=Q&[@@gdm)V)c*^-<C$o)Vsl_3M#1uuXeL?4_[M>T*?sg:Oe7&B_.T%$"r($uK\n`+'gQ:cLdtqoC]liuHI[V2
%'>N#$<0h<*>s^6=UAV]d;$)U9Ph+;S^<I71/NJ:L_<si*Eeo5R!G`f;YI<qcee^b8UiL?.M$Ai=U@hM:<Y5Qo$/Qo5&5JRTJqgN.
%[CQMg17pd_0TLN4LMpj#G0iBV7=YsmP,hhe8VVB*e1*E,!%C&?Z;qRq\=>>BRH8QQL>s1^I.b_0Hk8`&Do]_JWdX]k%L2MMCRVq!
%&3=-!80H2V(Sfb%YM5Fc4I)5JQoW#!?@(;UO6h#/iETA#`(fNT!QM,,r!>X6=qBXKW;LL"G-O4'7S8(QdLRY*O?c[[<9;<$=6U3-
%h1]0"e9$uA'Ut&E>%uqWGb3FreIs9,"\C<u7KJX)a[Jo"1*K=RPD_$G"R7+b(>ji*-qO:()H,?g8h^G.YS!p7i@:hRLeZgS=GR2Q
%I*7R(@^9^gi`8[YW(enf9gB+d0;1^6]FF\2*bsqS4[Gq0$_E_c,"W9%L8$%$es9rK0dJqa]d"=*FSf[cNJq\)X.8u/P.1_TaBpCW
%h8C[="*M)2$s.U^S0TegJ^dU_]rr^tGZi<^5#&nd5@n,Qd_UL)6isZZXk;O_<DS7q8Mj8V'WnQBF'1hAnK`Z61OU],BGfXm@qe\Y
%Q.gJ-DM`/"H63iq02rEbW'2kW&JPAHMZ8E>r'lN-1lBJd0Qa[riuHteq,<Y#"(lmYKid5d/#]I1*:h]8=kt2eanD=W2jCgP=]Qb>
%h*DS[(I="=A=ErXn0Bkn6E/Bp9d3V<j5XhZV@%23C-5b4o^tu2c,me24pZlq:B]LqbJ_"?1JTLhht)in8?t-R=;,K2VfHpf7Zp"$
%M*d/1$?N"TEF3qD'N6=8i.D>rI$N3JK[>frM2KqW5b8<3p@hSdEB9!fZJo@gql44Khdd?Y<-KDJ;I\!$S?J-!@&W)=B?<U''LJ+0
%)#S/gEF)RlI#_Xp-M"R!a&Kj.*_a\L?qJNuj<\MnQ@-u85X+?b#mAh7C&"\\VK?t_7DFY<E[9-l<FoTj=c.@+*00/RGBlkkpdo'4
%9bbUt8l=[X%1&j!IgP70kp]pMn$7l"lYmh&\@7&Ni'DW9JM0:Oh2rfrSrW[*#@f>%l9(k)oAItWQa#Y[[a<3Wg@AUSE#<4\]akDp
%/6c31,>!%U/S[\A'TDLRaGD`]fgp=FbK;#FBtNp'HHK7(iV;mCGq[ee&X[O4(On!fNDiHG];ae54Hn,R_tZYN1.V+j!daI)Nd0rW
%Upoq`;BZMha&t.&+I6gFj!R:5W*_%[KujuV>AAK6ec%'/i_RN1N\!k0p>H2gVM6c/h\is%I:_#-KG^XA-j%]q/m3jd,s'.*Wgo_(
%(.`_]\@Vg[:6U%H5,^-,<0W5AaeAViRtSF$%M!K,m6H(#Q3;^ee_?G[]kp,JDJEPaR6b`g#)keBb]OMFI"]n+_,aeFcM-Fs28^[C
%gqhSWCmNm`Ho9jWP"i6UGYG7T;#&b2>1NdP:D#l7%(Cb>0_H-Q&$-gBo(:'O<8X]b&6BDVo?*((b)1%7R(m#C*fs$^nRplNK&LUl
%iPH)o*n8FoJR.pmcG;GeiFO`8Wt.q"&reqa40FEjb!g3l:.Z'43N2GCkV0[%i^I-#(;65i_dA_7_^%dja/20YW9\?l1iE5a'?f@)
%@d^Ch?RJCM]EmlDUH5([*lI&6L-MMpjEFplDlC?\RLrFa!Iq8EM$P/?h&'bI\'/,^;V_JQS-E3QgUOk+>iRp-b%!.88$9Cn^eN\/
%'@;Rfd6Kj3@@/gU"'$PP&*D(.r.aJh@!j?Y;qYZ/?sC@nb-4^ILEi.Y]Hkc>j.bsh*tT*FTpRH+9'GKsR$e2q@A6.@<<\>r]\pA0
%9VBV<^.Jsk:lM?QI,d!10pE02Eab%t**&n2%HZu7#Vq\&8mjk!&4e&,M-P=Z]S$fCE0sfi4*&#PbP1;EC?^nqLbBV_Z7#S?##9gO
%%$uhq7/;H<kg%UEC]RHuRjKr562@e-iVW1VAs<S8%ZQ@Q%F/*rii$'e0gbfJd[/Q6_AqQ0Jc+TI5g"J>O//@HUUn1N7WRLL]^TOQ
%T3T/Z<ZG>nUoJq(W*5;Q#('5X)C1/-?%tq:Vh6o0Y,/_Q'b;'%J!uhjJA9s^OpWWVD!";Q!+:2,577'j]"p_m*%Q/[Fba:a"WW##
%!I(RuKa#EB.$m05C,q.hprWcDOQ3)%@YT3Wh+e5MI>U^+YRR8nUaP'FQBe2/(_oi@`,_O=9mJJ'2e>lf$5L`ZlkENQP>&BS=Xe-+
%3%5"br&P2LCNYg#";h@Y,Ld/e]7HR'c4'j6,'Fb32A.$XT&!uD5>KHHQmj-8@@nkXRt1]^W'V!(Uh62%Lcna_^/Dq-*&IuBU2LU`
%'d9!u5R?nFAp,.6rdl(/DC[(2cqHW.!2uo&_aRrEYX9!1O09`o<G2spi>71NE^fM8LfZ7UaC(ld3n004,)K'2]Naqa$U?#F'l'qD
%OaA@m]0fY!RQRq<6o##!V)I)I_]+%6JYg^j:)##U/(\?Z']K-kJWV=6*TQKIW&IJt7orVA@.7l494e*DM%fl?6D3rg40HYa@h=+p
%)B6RIX1<0Hol]*qc5YeHG[1rmOH9cug)S]er,@gQ;4,"o_(>-l^JK>7*D98%$:J#:8>fm<YENH_?hkW`.8K"/`t5)iF'o31ASE'&
%arV3A9.I(d,ftV1FA(jsJ@X/aPJ*=i-=S^'Y_R8-_bagdb\h<+."*!\p0qFPjV5OIak">n)!p!$n_Qit_20C(ER>j_e3t88To]uP
%7jjdSWmFRB$p`$QX0Nb.JFQ0tr<'K'6</^8+u$MP^5-8%jSBHbO%nXg/f?/:j=gd*>CRY3*BV:`4bL97%HY-Snt$2Qc$>VfBX(tJ
%WKG9f;rK\uepq0Q3ui!iV2,/:/IKFL"m6%D9H41_]O&:@@Aou_i@Oa2Kgq$9LBGC+n!NE30b'dV\7mFp',SCr"qmDX:f3kCjMQma
%rCC;UAIHpCe<LT[VQ("tSu(@+8YcYlU3q=upQKtt'W>I`Hmcl'(pY*Q'TIZ[abJ^jahgDe!!a)?E<HptI`0'3*rsn)[q%uQ[,NN[
%-mFR3<+m,$F4T7S_B[JpaqBoC'\#QP<Lb2e#F3Jed*t`p8TkURQ'$b%59(3PLjo8R#L?Pdpi1Nc78^u_Md(h6*#VLg'Q3to7</#$
%8]!B8kR.-^SE4?4bL/8-Zk>n2Kf@#Kl&K"Ab;0bjK:sc#N7YH7_("nVH,K.T8%rsM)\fJP(aNIpE,>(50K\-n#jK/.k,]qpT_.U'
%XQ;Q]IX3C80TuLo,C36UJ1Y5-?a*<$D$8Wt8Nt*n*ChO:r3C15mP"MaDk7+bL?"@JV^$/o!`W@rj)=#2nXYpc5Q'T'kqGQaZ*2r@
%EQ)%ETg<:Nc";R0Y$SZB)lnJC(GZ-7OY<6Wl?gnU^mHeOq5ZmB*oi6bPCAD17_SoY9I>1<0W,Y8)oN=WLjgn*A["G:r&Xtf,fo=#
%FRXO7,HDfk?tVe2WNWo&LbTTpf-!i/d%H[snA$=9F!0D])&?Xc8qQ)T0TPtCe;4hgiT.'.B517=V+M1_6bJiHCK\)^gc02k2co!a
%ip22nn.U9]QgOW7'd))UTpu=]&d2p'\E"O*".@RQ0;\eTj`5=+'gRqf%?U&U!cj\IE2sK+O."[$p&+lTlm_]U[\qi!C)(c>jjKPq
%QOr-9la?M=%k!?UiWj"g,JuP,ALg#d4,iZ7E]*"d;_?rYoCA9$^EUtob?$@M0e]F9phg_3%J`*O>R^d3=`GFr`*c8'6dklNbZVU/
%kEf%R)Q)&r5SY6X*!FRJi[+M2,Va9Z1QM)-jN#p]ED9$F<XGlOLY?8mNurr3F5$OW"g`4XQ@$3+E2V]-?kOh96UY1XT(&d#$h_o\
%+F3mgl7`7]O&UXuPU3V8_<_cdrn8V14Qb\E_]I]]S!*.=W%BGCY'RU<k8%K"@e0$+ann\a)CgZ;l/.@5X$!"ABU@Oh*XhKi#'%_B
%-WLJB%$dnbgbpS#i>I&d/W(uW6ERFhm'pQr&qjVA=RmkoCJj\*Cl4:hoK!upU^To/)B"ph95HSVl6-Cb<QLRmr51fp<5s\FbqN^o
%iK\EL(`9.Hcl<u=n;!4KN\<$jBOX>oi<.;*DkmXiLW3eq8X;UkpQX48l#I'OqZ"4A]8e2NdOb(pHABh2N8>s`nS/C5aD+f'mg<nj
%E1Ht,:W4VO<j/olEA5'\:*X?cMe)@H)&_+$`o/7ZHc$;fg8D&I^/LP-+V!:ZkXC-HTkE>G&!,<DjLF-Q'BBd/D6JRb%!O^Z'dD5i
%]'MlHZ]lcu/r%_foCD>0*995-i'*W*s27MEDlhbPU/>L>Wb0\G*tPk0cp1%"Of-G+I(MC&k9[`)+2<+=mnT_Z`9fuD1a+oUDCig;
%%G>6q4/k:cO#9r]Y#V*Kn!eqG-h)ru3TJ_6Ke+4Pd8T3)XDdXL+.0=1'>:+(G<hrkUM]@?>lMaFl')efLIQH!+P&XZf=ZR*g0P^O
%?8Yi%19ks)*$NX`J^%:5_"Qt>],N^^\a82*R$mRtNM<E4>a8PbmD2*@\<lY6e)$)CbjdL\,O;>r&$RnscNm.\Lc#M!V<,J&aH/j:
%O'*KHrGD<(OGU%b7D9H,l*qJ5[.hVWN:50D(9/Yu0bbugP_ee4TjhFVm)>%+@3aj$HbB]Ye7(b]94,7+XJ_i]H90fmNn>ek6t*Ep
%3?PiuN#TDaB:U4=,1Z0s0"BE!+o-$'E4"cBK5h9@i`rp!IHjbkNDrD2AnI%:qEOHFr\l/:4=*#?5A0=,4idL@\%58T]a['F"lCD>
%=f\g=fUDX66:Kae2GF))Z*"]:j)OineAq/L)`6leT!"R=HbH=\olI=_LAbr_mnG#H90*f5'@hD)Y#[54BX(1O1e&I"'2rP>e*3_Z
%7I_K1I[\me-W4UK;(*kq.W6V."rd4FS=E"\8"%W$Zgld6+PrI#@YT*.+r#oLH)M64+!/?N(<TeM00J!ZPUf$##Wk>KGJ-nlHmo$1
%p+-7^ZhWCY%;h=Y[).'7a:D[%fD[&[_6ra85T1cLk?&>m+5_25hk)a$\Z8Asb%SL%qG6t/M6_V$s(@+-FN]!=cJpemS'n`?#]YDC
%&)Xm>MN]\!j+O`-qm0BZ,_.p_Z9_?Qm9/':9*6VLEp/Iq=(O]OmJX`?Jg`2\#:p0U5rY?5*M4B'ri'j!WO@Dn!A;nL0&7f#qraY4
%h6!`6!4rq;FD"a>?jkeT&L#%d@E9H^@90,L,1c&)0-or(Tn=AY6Y=2&&mAYjDH<>3"kY.MPJ^SS*2$%Jk4U3E83&"/o5sKe9-JBa
%2,@)W"]_`72=aQ%fe\j[ek9u59o;ZR*rGZt<b36s)>f,b0t7=+j`EGUq64D'*m,nLDR)9BU%_\_@1S<M7///_V$Xt\h@_c3QamAu
%%9"!*1KAK5Zc_lAMYR43]jH\0$lRP6G%D`P'=^\C[.bV0`ro:Tfq3r6o-b)MKb#+7?7FMo(e8$H/1?8;rZkN@/O"Ua\%9T5-8BXM
%LA0S4SiUe!(29F7m9AIFI9ApkHAAfcf!\(s&GhR6H':W&`:@kdUHErgGD)q;o?To=]V[ZHq2,W=MJUV9kldOF^qc]le>gRorG:e,
%m8&[piNZePN,Jkp?aSTtCbaF_LJEi2q'8:-&%S]%6C[3g_"XIpd$_qe%6?&&np%V='KBI)!OE^9af$lM3aVnf!If`&OTiG*p%ML4
%9)L14*9tg'9RdF5#.%Kr&:5M@Trq(D`!r80d8tSYADfJ\gK`tZQ:Q4]ge"3`,L6c@lGE3fo^4!I)l"W&=9ZOlRCXFG,%l?%5k2#(
%-SJG=6-pZ&7K+Fn_d\8#Wah74H"o8-$]d@Ad#AP"[)#ir@Gqk<AbThB:F9;Q^JpIc.F44N,mor?ZDn&`qr$&1qm.Y%[+cO-dr>>2
%:!>PgjR99HkW.gC:J86aich3rTi9%hgS*b)R?(g2BbD(FYB2,[6GM"6NNmGe;'4/]A&@h?Uk-BGID',XU*ApN['XJTG9dRODDbSD
%95B%Ii)CmJ-ZsL6F(RA*3=p61(ZL75DoR/JW+QpC)iAdGbT-'jMX.udLcZn76EOkfl4Z>(g:n5lfQl7DE+?ccrBMG[r:]s"#89i6
%LU@gK-g%+c'0W-%'Zro$QQP:&in#N4C6l*N]=eetM`a]-imDkP3T0Ao\N-7l:uVMRNU5TRfumK*_7F_lLeB+L%NDEiN/fBEU%Kg5
%?@n*Qb"2C5FS)Yf5fHlR",ThNG`qS/TuO08T_G:\(QsZZ_r;J-*)'d0CHb[!l,8^R,r9e_UrLFZ,q\9VUW4Wc,&NLKP>b>8.=;Ib
%SN/p-bF46J8$eIPf/kl=C9em4EVj*]5_%5'Yj/KdQaZnUPTCbkJNh-C-[JAqM^c'&HmOP!RV9qg6O4aP)TQ;B#b%O0-+j9a^'7s_
%E^=i'Rk"9iMIZj(bTc>:miA"W7TFh4chgRgTVo,nF,o*!jGIVrjp'al.ZR77'YC,DKKH)`#8UF/o#chIaZ:.YV>$AYA>(A_fI<9g
%9$iZ]D9H_8!mu@Df2Td^+L%I9#J.$99AS\]R'KX@Hu:qS&n=6!%re&&p4nRb.@j#>=iLs`oT%TQkS6oG)XA8X8e7/##V7.HWS5/E
%7[frabo)<K8VV9k6b?6bh%GY#csi=r5BmLr&&dh+:<k`Mk]B-]T"L5EoeUi6_Rc,u&?eaAJP1\73^]6U-Jam/%CTjg:prY2d$JoB
%W@b70bp``qH=Q6QQaucN$_u;a15NNi*c1%/DC=Vu2?!#PY%+?_cYnIgMo>8Bmu!9dbd&#B=+9BR@'GJYYSYid?+%AO:Go2dC@Sp<
%r__Bb6[s)YXB%K\*km>22Xlqf$oZ"U@IXn0Tc41tJWcor1Nmn9A;[+EXL=GUPUb1P/R0Un'j9(e9cT+"U>>nB\f>&+OmH-':"jW^
%?'2aY$1Pl0KGA+K+"&UL38Hu?'Bm)M%brG*]I)i1pFL$rM5f?aWF,4EIEEnP=ata>m+C@61c[oq#^<((oF5P(@9'W01o@pL[.7u"
%TAgt>FbOo#W'V3p,H#,.(^CJj_E%*,1)X\YPteR#rnLjEEq%Nf"h3Cl<Ec5e`E<:NIdMZ5C_GcVrG[`:*KaYufPdi#d'Sor>umQ2
%mjEF<f\O`B[>iBAY'Vr@@ZX%*?DlFX5D7a&IhoL9^Xm75TN0)Sp>WXb#PRm1ntBM=^!dM$AjgXBmJTJ?$_4!)[38Tf4ju+4K.!E*
%P%<T_AK2+aFNM(CC6#@XKO?:Ea4E<7l^g<lk"2d:?GAEIhTKOJHJ-hi(MEE:qj>NO]"L$Nm!(E)f`D./&M^]'3BAf)Zp@oqFA>a;
%+,Bb]b7bY[9!9+1CK(7p`eu[[K>0p_BL>&$Ch5)k*G#uhAsS0C-5&%?&_%3!&Y)Pa%1[f<U9k\S^</*RB:-5_1jDPl@U+@Hd3dTk
%qO@E$)m[*j3kKOGqZGh*\>Vs,s6eD)Z'VmA^\1;<jTEc]K=93'I@gD>LA9u4hYc>I`%:;P[D09BhJ_LY+MfX[lO\9s__HN&XJ-sa
%26B#2YWTbE`Vd+h>pOAic')!7>Ae7ZBt7b?a[7M%61Ht&'^B`(#!s@i8/7tb#uJd#i?W9Lk2gA3oHHkOkBgpuTJ8<X&+e4I%tklD
%'PujI!CFaf1kK@Dm.h4ZAlM%4=h0H7^!Jq>0d6i?qXk&F5;tnh;/P2J^]LLLQ7rB/%U#0qQn+W9!LS]<F=?=ADt49_'po?`1XfnA
%@".mob/Hd5Ifcs@$V%]oY`i6MeSaVJ`r^RjF[c8R=?mQJCZ`<'-tFCf("J&#4^jGmi*\O8&rudrBRW9V%"omjAn&e(AWb8'Et22d
%LS4Ar@3**E"(i\iqV'TZ^#D]-#0q,+6JH<(IIRFd0Utj!<<h\K!c(!A,!u*#pjHjtZOoPU,e/j,!K-Osa8h=VUdY3&$q&aNffQ)j
%I%kTYG/cMGB.4#g#u7_")%D2l?KMZ?VOjH=/;4un#S'E`:/^fjeA`pZ5!K0_'JA2]1Q;-nR;ej\I,`[MNjg,tQk&@n@p1Q:isf%O
%Ld0G,E?%GnWUHW[+(cIRF8k<kr5Os^bU98D*u=Wi*DZ"mUl1jj`N+-)dGJIp&>I<#4$/47VokCK&OHdL'IUma3h2YX9)NQL>A+U7
%gQ_sSTJ5AIE[t+O,\mo6*iB\-bt_gY</_<S(9mR8F1'O&T)Dt7qg26K;O'"L'^n1cOd:3DjtJ..31T_0ed8^=:n$*Z6VI`XQ9;4A
%/Tm#nec`jXPl0s=<=Q81&Led7\c@p22iLuM9nd#.isfJERZ2Q-6tHICJi)th)7+QTTk&p3G$Td.28\k">\eigO'P;FWU$&HfHuJ5
%0hIpDKVg8<Cr>K>-A\l2#')r`oPe;o9\_sQA6i[i58uAXkI@`'45l9CSdBZ'V8C$\6#g=eY<FCN&0hA^0[W7oO+n51ZmQ,/&7G=^
%PIr"olNHsVcCeWm%$9E\S3K(1)*81Nq9.5p`d:"*StU:Gf4uq0%0%FQl%%0Gl65jH&6">S5?JG_U_P?CK<n=bC3SG:o41[,e5"sZ
%1Hj)sJ)@Q4'"o9nOWfJMPS!O3$4^*3Alt8dosl%['1G71@#$<db_:,TjYOnE9.F.0O4-,/&^E^/Rg3-C93W^h9nI[>8G%b)@hTQ`
%!8`^hL&%].Ou!>(AKIN3Lf=FJ",ttq-csQ5re34TI0llHd+OIbo2L]=\,b0!Uk=af_QaC74<U%i?qW,g,WU5j4X4cnlK[s5<XU3_
%-ru[XbVb01Ad6M!P`]NF9b8e\2[e.<3ieE]AJrGb/Cd!gji$F-M[G5$&dj9Pr6j02g7A#92GIWM3ZLMN_X!/7Nh4q?rLhh!8_X8W
%af>GhFdQNu.9M*U*<NYqV:c"7O3(c08ba9p;M;l^'WW:r4.Wp&:J:*&>uHp5/E/Mt8^6bPl;1ZW1oNqY1Gpc#&e'#%lRrkuYc*EY
%IFp7`#C6LNJL(!-1'S:^Ypeg5W@/((#Gp4qUW'b`$Bu6F[Xj!O8jZh7KW7\&`$$o-D-is`i`RgK']-S9#nI[lC-iYX6DT?7*/8Y^
%4<(2`_Mf`;SHZVtNN<U\(eITUK#O/#>"J6&i?"Jj,1))K!tD5)Sq%G1iLVGMW]A9!_IRcrh!;Ogdt7.fX+,[3!I\L]b#!864.VuW
%GJea,-g2nGE]AZdE/0-*i?H'MH0Fu]a_eQ2)D%h?ME\h;;lVMPq9d^n6(Gebg,X!`fL74p-C#f@#f:#8iMMh'.``;]!c[rJS::g,
%;9Z&U-M6$I?^rU%,bhBUeR[0!f@!!BR<"EpIWm$rUu6\gel_d"TIct]JW!!:h5gsR#imsP%=u4e1^C-P`2X3gl?/7kP7n>i>ZdT8
%e_np5#'RSe69ME,W@-EE=1GJJj.od0F)u7JMs#q#9/H_^m;8p^G,U=tA%;pkrbr1X\oVa'6kX6fFH8%:S*_K95EqtWL`hG,9q``m
%[?lAOOs'^;kN^OBTXLL$.Sk3NX,QW_+]iSQ*?L)@:@T4$;:mBY0FiS**lO_2<I,aAE&B0_NdP*Tn>nPPG$icY*nj6n.A&bV117Z.
%Z^neH`$H>cHjB>en;.u4aI;U+#Dhfmf@KpKk"*XmEi_GO8]lf$Xj'uMKKe3L9CQV>.+^"A#e.\(B[)].[J\n51kBR-_Ud;&R-<]H
%*QjfEQmbb;H^@@o"sn`uQmg=nDAj-B;%ej7;R'C=,o*8q=S!e(?45A>2,=i2j5_DTo)s1Jhe^T%7.I\^,k@h1Irh?W"*bl7b`n?_
%_e@:/YT%iT?Sa"i1:OkQ;\E">T@Yu"#U,RMbnN@Be)ZrGGR)JrCSIK&G`J4+"Z9o5hIE;<X&19o9b]q(f=bncDpB&9iZ1q5?rTpd
%qfihK'n"LDR7S)WTaj`i.HRpR/?E[lT$SXMa=5(4N8Kk1lEN\n"'s3DKKBcZWR%OVk]<bSG\CB8_FlmRo`K'VXapHpjr[HS*%8b0
%:.f?rbJn;o-."oK3YF2e+=+H^Unc%tCY^K4<mAO%9+:.V7#=/AkO0_8@fstG4EnL2o^>Hf8St.J]V^%MKUKu'TnKA/KUrtF(,Vme
%0h,=?<DSihS6b$4cKrE,SfG&C%:'n>3n`KFH?tX,l4a\pGfSa;cu_8fN($)u*gQY89$904GL-VIYJqu/eqB&a6EhWIC$mY"'[STM
%H>tt_&q*u9,)SZQV]qpH/gfJMK**k]d"G,GAm>%nS4/qTY[Z4V%d,J_M_qQnjC=k/i"sq=@qKf=k!YlgR;uT]kllru\T,H3TSTn)
%_2dp`:r$3UGq(G%TVCEN=UOX\`EIp1k*(p#pn7Pj`S"5T[:2gcEcEj>CWiAU@"l<)q^Rs<N)4S]Ku1]5])!6*$578U]6X25n3&.E
%".gS$l@;u"ln3L#YZI'D*As_0#s[U?@?/W%")X`qNe(+9C]u;mrk;lJ:saJfrFru!U!1gmNt[Z)'GT'kF<C\C^so9=.0<Z0@4N!7
%r:Qqhs+uTLlVT=]H,=nLc677t+K61d5\l[EVPEEdP!C^_Qb5=KL.)[*'Z"@jV]XOTM*@gCI*E7#Z)5SE]u'@@]f@&9[j_CE\L[%b
%!p@>I5\r4ZJI(`aD)2;aqrDbb)0.R]Jt=dZY)H*^F+t[UkCd(19.0c)%(Y+g!nhXL*):a_B#p+!OC=V%87l8]p6m/G6%<l<G_,oD
%V<ekKfkFs4R1f^A@/K-b5ggkq>1NhM[A`1/'*P:h5RlQs#da6%n^!]%rZ[7*WBBD@]!CpLIm;=RdUon;6,>''dpIZ^"+L^(>SfpY
%2NElA6\u&@jS[Qpe>s`.aBu/N=-+<i8UsV\lOW1r!@":EQ==K<`W=e#TabfJ>X:9&98Nj3'Xk)q.4!<iZ+DP$T``l"/%F*PWRe19
%og%J!E"Yard7tT*/TU;XS[tk8J`Yq]*oZHOqfU(X&7J@>?2/g<o*B]CFoZ>lETeHJ$aF6>AF.V(`h'/q.!qUp#A+f!ObgA)fC=S^
%!=`7BTM2E\'33s/(eIkXX_`uW.p"_=7%3+H4pDK72.4PT(/QOcK<Hc\pkprk4rA,]-QnG>,&???_`83brN0uBlu*H*YQVDnp,\8\
%Nb2.Yd5Y`j\tN(""=AY@kU+6fSK^aG^WRs1XO9#JYN;Me`<f'5kJDsqH2!XDqU1%Sg;OT32Rp!C[f.Tij-$(q7sB-8Dh0t:_g&(m
%S8?4e%'\`_?IfI8Q.GfI"PIOA+NFK(#3aPf5%Y.!bW;%F`G4.pnG*&C;D7$0L.JQ;^`I4Eah5P,Mb3e\RM[%de87c'6D2EJ#H6SG
%C]t"cpo5J#8r:;g1G*gkWIQ6dR$DY7lBbKs4s49h><NQ&SG2,&"_WpT"BRLq%id1fRD%i1N#/L4JHY4fMY3pe%8olQmA>t$4M-QH
%IJK>H_;WYm"$`5Ab.\<_PR0h<9#A4ODWm]F_LM/T"Je+_Rel3Oo0W;-WWlk^dYZGC]cK"C;L%]Nb;,+]g&K-oHrQ5F-1hZ\,,=&3
%<Ms(/>`b,s=htrjd!Mk+qEN*.o%M#hh!\[(4!L(,X\r9SGbLkQ'iWQ<F[p3#HYQC=`Sur'[a<!MPXW5>A!+=!G:R]a+X0MT$6\1F
%8UO>]#c=:FH5:36H1"/=.Z3N/n\(0=n4*WmmonDN/<Ou1`ZuC_Rh'gmXYb%#5e>dhRECJB&jmTV3oso(Su/gn)jD":Cji&%mIN_!
%-Y@n/NjN@Gg801':A+GF$iIjG#2UEmE(bO*CBL>ZRQb,CJWrt`8Q&,:hQe(>A]V[VZ?o]E7`X'W<4#pGN=`6-9I!4u)"[Fr8r8#E
%@1D[5c=TC8j4>!RMFTO$=CY\e)7@7ZadGg6N0!kOHl\oMFK3&>gA60fVh&A(M'a3?bpdG9L&=f@%K%!1E&2/L39'@fe*_\Dfnn-l
%e,S)n4.VUGHYl#m'\&Zc3DBB==;]e!g-YMBDJ3!fPr9TOg=j;+<Z>;K4:NcuX,%/nP69K^(>?ioa\Eu%1sR$Cbo!YT4'LaDgPQ)C
%#G."D]`GBJ0%1rO+6!WO4GqmdmC`mu'jS`&B"YSH(R]SW*6;cOm.:Q?`W!tILq7=="`[4KW@LCoi.<YK]\`*j2fidM#K&-7I]iDL
%oVK?FKs>GY$kCl?DMQei2`*"o'c5,>e)%i(@dt)-L]STXL9>I6MU<KN:iqXq^qg;oU;%q>m.4T\*eD>)@$Lq!U5ROCq:^A5'Z.%"
%Er4hWHoeUD*Eqpf;:TS8/K4/V[D05c,"XqQ&e880m;5sf\"Z0L=pP'Q_6o"3E!9=65VO:R'1*_=oeSB`=&B@Q$i+%8rR0ACQ.2iY
%PL^*D_1T(#o4PDtZ`'KJr.Pk#C"Tt_63`Q1cOBs?q-Nh8Jlub<CeCpl(>U@+0`gtN:0]d,`fF"gh9U*W_O%MH!eM9mD-c8q`#K0N
%AHqq8W6tN?<-ji$CtUHO6mdQ$ABH(-np:V2#[`Rj]$Z;21hR`^YI*NuJqcS:(#GbRB89tEU7_h2lhK6<SS;o*KT$&lb,uNbJd8&S
%o2htM;:8,7IUO553<06tmPS/6TS57WD7(lHhT3Nd/YQHEk)BAn'k?(^oW+KmBV,H&^i*^Q(rKVeoR^'QCiQ[#c*mkl[mck=Y?^Hp
%d#YX6i_Tb6;MKk,+",^cWG4:iB0]4G7:Da>!r:7N<XL#ABC+'O(H%>g0,I_YQ=!)>8;!IG]eL'>a.d&/B<t$(e4Ua1kFa:(EQFPt
%mi[:s^cf\7OfE)fP/G8i(^5-VKs4FnA<unpm,6;l;BYKrTD&dqjh+bc6-KsJS+Xcd^2tQ2^#lM!H_R=&(B1$W%t[PuTPUBD"8uXi
%6WL\Qq;_50GRb7[h'#F$%M+A;N3\_S+kqO;i#K54W#49:ff&\.Fk/4?b#-;sbC3kN%att1@r[(i5p65RNO4+UaBt)8^C?/4L++[&
%'C68XU'aU/[39=%/25*1.Vb"0q8RjXc\eis7HN_%Iqdprg9mlo8X]5,hGGiq3RJ2&9id-=0C:i#7F.jEA"pr1]!pZk-95JIeUXbB
%9WbRK"o_NDO.mDs^N2c;EiZRtKV)!;%Js!5,8HrF_&KZXW/V7ebW2Hr(J[r66S"l,Na>>^ZjJm[HZ4J4+ngbL%bhLI,XlR2_DZ(S
%l\7n%[c1mD?J>76KEP82CWjBFIQu2hgQl!CH'*f&?9-I*C5YLGUlTE.9,LRg;;-W1/+nr!m_'>O2tZdsm3]SJDuOWi>*Sa7g0^KW
%0T(oro!mD&5>g<hW@3#=KcN*`8.R2`_LA=nL-,48f+4?>KX]qV['%n?W[maC>25aZf5=[TXa]SkWteLc95B#sZpOGM`n&1D?0E88
%'nl"f&&JZ^d+j,0ee7f@f+4R+6H8"7D*e&4h9[!GX11.sf6d8N3pS_S[l#a0HYr.'N)kTRKB)_HXW&1rX2%mh7t(k5.T0P:#&=Bb
%m5uK*.o&@E9&$"UY\pCpf.(Wt_>2Z1XKL:%hed4L@BXPH`=i5F1^AXh?is@2"(Ve)r%pYeEjgUC_GLjQKcTH:XhIWMZCtX7d`B*m
%s(j>GJo(aiTqhALB.;O3Z-$7sp<jt(mC(HuK\)Oh_>sY&_4ihIYpI!q^-5[BNM93B+#o!aG'9fY_YK3-/+fq&N_:!SgNs%^Zc)r5
%lZ[;DQMr:L62PF63pRTYX[]t1p,<4k17dW&c6%`TJ;U9<Z8E!CO-n-=66[$9]0XNB@k6Aq<bX=*`LTBTK%kVSEn=pc#2am^/WDKC
%gS+;s%?1^4`C2T>[.cN!lesr;pO8e-II,IFW1PJL/X+oS6o-oh-DbBCTdKhDo2Zj,0+ifM]f.'W9[NgJ+(hA!RADKGHg:mIG$A+s
%L,Y+j`Sh0tgEf/a+mR2D",5MNklLEl-#4)kUpH5C6,n@=BHn0!VYt_KH8@a5Q+!?1/K\83AtIdX=L3>Kp<nK*PlJY/Rm5\3k/(HZ
%q?oY*U@MG9$d;`QI\K2U'?C5">=IgP$A,^K5MERT,EQMF;Y'3faH;j]Ke:AaFftpO4bHgU/^%][h\s:s;Ui3slY!7)Z`oe)rh>sj
%6kBnrn/7$URse:S\V2s&GLVjDH>W02G0"r.Bg,k%[=#ICOJs,0bkBnDn1;PjR0.%!YUdk(.rL!JpMOYDE"t=$n_2i,0N94>O'-Bs
%KX)d@,Wc`t&\+\Cg9UD6DQ$0FC59+%_UtgqAX8%`YX<0KqcaN7>>>cX[blWAf!hqC@!h!i7bq*Jd=Bi7r^XsXBWk^h;;:"9F;ogC
%-pu_nJWN"2eZmJu^l<d+-cN=WA&cl:XKEYj+ZPD7T^BE#SJ>DKc"=VspK,Bbf\$NBI#c`B[il$KP!"!t3i;uUNZMs+<ZJ'Z#^>.^
%)pi*%Y2@K43(r#!mBmlOop_f&7_H2'pVq!3`Y[_FR)_28Xdfr#&h2gtUpC]AX-C4-=^%LkQ68f=HT-H+XX',B50)S6V=0&-3^NC6
%3=.GS2;\W`rm$Q@`sD6UUpX&lmW(r"/2?Fn7ac'Aa/6dR4Y'mfp@qKP1pf6e>%5.!o*fe2lb703h]KMt,3:c*%&bUT4e-=9Kd[H7
%L(cok8PfSWZHQ@=.#/5]8C+1D3[s\&L)r.EYUd"7.b>p`V1]s6M'eq:ZZTdRD4Q'b33\0&<A4kG"C2In.EfRZ:@3PEqHC>tj<#-X
%IJGR.>i)mb(YMXXZ=6J[dKD0Z,68T-d\kM9.rfcf"AfAO/JLL5NoV+hb7\_"Pb+KqUXl[O:q,]'CC16![>B@HcojGq;\ZZi#?%)>
%.T7R)B>m@,Fsp6?'[e1!3;BIXbK>m;+XLNMbRNrO"9O;.4Se#_[$;MXU<(*dX#A>]S@='CBha.:@t6`ODUT94X9lt@22%ri;5>pd
%6O4-U"rqkb'qm%+L6(oiJ5.bOM%JE2)4MSWSD+rZ<ogH9MJ$&p5+^cuON9bi(dG)U.P=%UJ<Pme9<ta+A(hUg,,R]:Wl3Ch+7\8$
%<8=Xo2('1W%o802LkISQ#U6L`?Ek`<hTJP7qMXt1UQEH7-=sb1AdqK,oBgf%r;1<>&Lg.F7nR]-dblaZgbjoZ)U.s_hGeO]OqM8W
%:Y(m?#7inlR[luDEAiU'EFE*t0i4CJomU01H1A"'0gRIm)EX0!@Vu%3VEG%3cDo*Om_NP0d\>S!bqDE:h+_P1Rg/oP`d1=t5n"eU
%[$5/"FGL%<4YDTL@MkV-`:6*VX8j?`O@8C'!sLbGP$ZogbK=DJkScPo'LEE@;#/ns$lMn0:t/5"E*nm-)VmK:_RZ>onQgnSnGTLJ
%V0EeKII5u>'V8f0"t[6GM.iUWL8aa(?@E_GpOQFoma@`o89k'Br]FU^T5fH<V!SCLQM*"26MEn(1G#=hEI!5Vgo-/r/Pa(K72os.
%1(t*A,s05=1e4.BNkpq&2%-B/.2.pU8>e/KTI+R`bY)hN5=kG"/AVbWdTm&Nf4[4<^Wq/^,pq_[c:K/dbchaCB>X:\-qg3[0JsH,
%`oiG4)\\m:7Lg*XDt%k-.T7B7Ar&qIG@mWOk3V>K@<%SV7QLHnNd7RlQ/\miY>aEK05#JlX0PXp"&\@AgTV<Si>XKOM]FJ9/$_L<
%MeT6NO[#(&EQf@`^RLFL>-`sDBAPS531QFb8=[74CCFl&K^$g.W@qVqph?7ehB<YfY+5D%U%@_kHS;bYH.W\mM/cA/qt$u8^U^/V
%GfKSY;'0lF>I.AQ4qm%j+(EAbMQ'lW&GA?r@!fBKb1YE(gjKlFZ>jJ,]mLkO25H)@"\p*eKV5iCE%t4!3_B%9Qe)82l,Z*J;5N]%
%Y=I3o4Po&.oN?;bf<(mA;EspWhrb$[rXm/tR`D=bX<U*_,:q4CS5,WWKP,?Rf*9B.hin/7E$?tshKYSO..[P"iP7M.-OnLbEl8^P
%5*"Cm=cd_*"'_/d)lt&c]F)JCP69iJU4::;Ij6;J><ra8A(</Z$Fo\^FdF<rGc$M>1;dm][,'+^$UO;PEsaK[d1U2Y"_P_^M]em!
%[;pM_qno=!$NS6#,J&,nrK+udI=+FJ9Q_c)%i@7UJDUe3?Was#)Qm#`cZ1'74G>\i+Cm,u^8isdAFfdua<In;ie-==!=+R9mZ!bI
%ZS%%)J-em:qG8IS8pQ6p%EG>M@b+oQIElB:S=3j(XGa33be#`@QkIo?S6R<aq-G$>S*Lkg^,+975TmJVq>#QQXKod/dCE*K*aK<#
%[he1'j8A\mO3?3O\P=,K[7)Khij!?gN&pof0P%+WkZFNG.7+mkIqekQ)hLU]mXCVp09@31$rbqYaGVSp3>QNHFQ<a<a5]R]A7$$&
%E*d?%'h$@/Mf@po1$^0m55\'7='%NYGt=Wp0UnI*k[d=(Fp&$qZ1C@/$<9EdI]>S!QAZA2ak.tp;'u?N-dEbp`\04l(S$Wu:7j1Y
%RR`u#Z.m/"9T7ED`3r8aCYR^D"PjSPT.j`-X[7<NOHMpRL_Zc%G/0V_K_`I;VkaP140[r\dl^)r.HIT0pkq[4MkR#-&"fH4J/H^^
%A![rZ#0BnY8%ml]RDp(9rntf9^DqF_HTiTi&hqUb;U5e^OAq#+dbb1ff>$a7H.c.",;AF3hGXoQ:(2qi@&$u(c<cafU7k2GpT$t<
%@Zem.*\W[YiE",@"0m3s=&kicp;EIP#9sIdT0Ie[h-%>k\TN_.C/F(:N_i]RbH.[a.jT=PH#%9:r=\8F]]!`igB"u>-=['GX4RLn
%P,qW^'>DcpnG[mNTI#l'!h@[EBaA^R+NEDZXNKDqkIF\\j3@DDhCWTZFN!TD9]]0f^V8aWbD:/!DjnCnl0`j>i-]L`E0)ZLeX7eQ
%hi:Gf/jhN.>S2rDm*b-dU&BA-GE+>cS0hRU#k?!QR*;$7_PkuEVb0X_7bi7>Z@$Y,?I$q`kg5%B;R1JKG5OW%(c[>D<A5pn//i5>
%'4O<5X2*_ZmhE[o:UATpoqp1?=[B4/:*op:^F>uahl\D,j04<XH<qS?I'p`#a`8u.7_:M]P"csB=ro1Na>9\(6thri$fU790j$5s
%l%s`Ih(&Q/7Et6)$6aHK;rS,%K]BSXjet2P4FF!:"Nsqu4W.,[XCYg>.=ZZ^DC7J>k*FOmpT.((KPg72U/?ctKW7&d"*enhf$AVm
%+3nMmKdV3TmQP`9HUNB5763,;#QO=9Ot[:_c8H7r[+c^YNsl"&5AXLXK>:8^WFE-D1K,5Cj:*M(qVQ_.h_`^CYW+pg"dS)l&\0`c
%;C0]9#?oj*7h(^'0VXf_Jn=h02VS[@h'N.O\e`/h=kDW[ZAjKn!_",j@Vl!1<EI-UY6V&"le(8:h].floRRKW)4Dgd0.&Cpp%7nl
%:PM0@g3C3BU)q.m.)+uM8%72QqcDDuN+!igB.-%;Z(XBXja_qB#DV0/7kY,Dq6oaA_3bYNBiVRImLA'&[6Naf]s&W8#pZNsHhNP:
%Nr@lMjm59.qLOKI.'[_V<(1G;[/JYnfa?>(2CPT24mP0#^%3Ph-g@`_$[QOU02f3Hdt:==m.V!5O<!db&RM>N/W'BIV1V*^)3Y1N
%80q]$6[U!%GCjdCDJ^_K_P;982sZXai$$&gLe1\l'k(m>(>C"i,/0j]&SSR^S#'P+9M!1CT]qd@!iT[<;Z?b8D"nj*X=d61V?Ljl
%kRC4kj&R"TkrFL='?f.DWns't"G-hE^)<)Z?e>"Xe]1P:9<\BkL![dpjMJgMo_h1iS1BBqZk,"D,e-83>qKP'd$HRE8C?.@=Jb#a
%'t6JOP:TjMOeHJB%_S9W4l0u<9C\<F_>*!?N%",%]t_Y-+X)pKrn0;Q^,7Uj4>sDe$9^t,/t8-6+R\?sD_L_c7g&R!4s+GrBqi"+
%/U>2J$"JI;iK:]@-]UG-&7pYGC&',%G'rgf-u$N]4CNS$WH2Nt"6mJ2.('[2cP&X%))e7us6rqfmb.`oj*<D(E/Fg%@u#@I@l=l2
%W5C@P/e(S48t+"PD*WTh58*@3U24-]NB]uXE&UO6G52fBhkiF^eFj&Q^[s1`ORO]uP_n8--4=O]KjIXgM,$+O:EKE%K`dR27Ma$t
%a9IMa6L/h<WA*^:'Xf06WHhc=o:Zih.P+5gCjTfdZ=R7rib,=kZ`)K1rmflDf.*4nhN0]K+eR>h%:*2ZIB,0QEeF3fZe\F`THbLt
%.h3#BQ!q?aO=tO4=75tSGed("05X#PCH"*8[u+Clpt=B9^>f)M7]?;4rqio!+%!It4uI55i)kA"*g^2oKgOqq?Gj#$J.E&KPmp(*
%1_YXf[#"[p("_iHhVK1_Su#n?YPSiMX+ds'.rL!JpF^PgE"t=$n_2iH"o<`JhPd!^0N^YeAtXkfgdMeBQtSk27(k^diT]!W614qG
%cN6u8Jd5pk\2/Y)[CnC>4F0E,f88'eMtAQ;6e4nScuiQ(bm(hhoWRs6aQZt&.8We*--rnTEg[,88I*7\&I[[5*GrSaB"UCMg;<'a
%'pVMUg>3\Y*ehV;_@G]=R</,DHZ9GI?b<#7h(!9Mi3fP6[4@s,aYXZepg]&aDe4Zh0(VJn1Uo,Q'hn5p*,UJ"-,@9[>WC*(g[%r\
%oB\H)]j;W`*bD>anuCj@TLil[>a2Z_gM7TdlaMb@Xa"RI?gZ)0ci<r.maVM0dEZ,B>aODl`4?7F!Mti(MF=%q&rU-qPF8jF9P3Lq
%*uiqq[GHd.Jgd#(\+^)K5FY65@04_>@3V!Wln!%0epB>4._$3PS+54h^Uc_io#rXhpQ7\^pLr#O;0&?q#PD=>hh,1/bVQl(/`^P7
%X,QgXEEspGmBoE.[nlRoYFgB9b%po+C*D=^-TJ08MOG!!D<]sF8Rs1k.3sO>'OG8>lU^f=n;WieF^p-^V&a"dWZID:"]l`5pCb=!
%66C%4%d6Q%c]giqN?@jHPL_:&6e6T#kk]-b74[6%pFhTO0`C0SaF6[L<=@5sTGUu,k`%,'h#[e9KhY<_JesiK<]L?-+cM?P_?k3u
%+]"65p[Q.Ag*47gS'_/_%?.=3dT6$Jg\H'jYr+u24P]3(lP24A:3?,C6#aDC&@8u9m9e-T\:Kb."n,kMXkVLA]s]Tk2njpok1:-K
%qCsN!.W.Q,CH!rI[n<-LG\uhTT&h-,$.b#U0A]V_3WElfj>!:lV5&n\Y[cUZeo:8"YX>A`&l7gLD6H-iNmego]^#*D]nt1Gb1iW_
%jpd;2DT0.4Y:]asmO?d%kS).4!)0RBZ6\oL0k'po7IPt'/?S%r#)^,P@39GcABJ6>3Q-X)h]CF:?&(dbrUj*\&aQ41"mtcMkc3_o
%Dme`8iIACN6&;0mm]oiL*?45u(S$M*./3,B$eQEi^r@)4h;NrR?O>PmMI`<7MVadT%u=$!(*Jt!qB]`.l(2+9$[]O6K4d>KOfLVu
%/cX!W423K@#YU1]N!:3g-bOlgE\*"9_Q*O#?]U$DIZ4*#;51@`TBA,p-M1m+Jr*+S0-QiO\+hLn6'#)cn>t_&EGNfl]Dlodef_LJ
%r>T6jfWfDYn45Ru)adUB[W%&bZ9rSB1q.=rjTpmj.^(h8_uAr:q"0fcfm[*7q+(-&(\W+L#1%%e,.H.92#K$$/6)L[!J[fmUQ='6
%aKm0V=hs*_p;+6WB_2_Pk=t<SVPM!0mRkL/(R^h[@t/i5llGFW3B_hJKFLq45-r0:gKqV1Z_"59fpjuQs4`/A3S#UZ&&*%+N98NJ
%=K;M;0o*O!=I%'Ia6oBCB<HNq9sj/e8?aumpb:ShYqOEKdMV\M_VWUSm8i;&m;HA$Wou!SCX?kOs(^`r^\8o5TE"N_qWGWm^ZXMS
%/P"5TRfM89#D+9WK8tEk`!i11NLiVkJ+`[?K=]M!$>Z-l<,q\an)jUM-W=D=br<Ga-Q"JkPH7)i]m%[i^(6`c8bYG8l+nS?JS61_
%I,QefVRd^-`%_)*ZZ%E@k.BqG:BWXTKTu!b=C]YjMN1e,*m^F65"Sas@5<*pb[[KJSGOs'9B!02%Y_F^g%geNl9h<r<04p&O?)d<
%.drG(D$OE0F::JH1j,e:ia7%8c<5I.:2F[hDN!C"/+M!2V(-W.Z()*f+S0E%Ju^o(F`YW,a45i*T+/mLJ_H`$L6VWO8K=qI+qn-;
%hOgo^K5N>F:t4R6[@/77noH`mkWYe#`Kjm@l.O!Fd]IiapGB6k6kHc+;X5N]lflJmNR3X*^kZdj*s/?t]D!FFp@0]uU,UXk;T?%N
%j:CCQjjo*H37N]90(@>`TuhVE[\q151/<7b\95[pdK#bP+S_NWVL^1@@O)>>F2_QU1,r<jA<QUt_Oj'N,k!tV;^qWn_TC"h2P5l4
%W)kFjkK):TKNc'4rRVshpg7Ys7TGg\KjU]\8=baVR0YN'jDG3U$Nfb8$sV92&KhQDCZS>[c8>le&gEa/NSsJq:K%@U/]`sJ`Hs?l
%lC\J7C'3!pBWa'0;c*):iaI0k;st'com8Y&J0f\5-bOiYmW[\,ie]6mDDVk`hh'+s3_Bh9HZ@L4SX;CT4C]GM,EhjEnbo.lQV-pH
%8X0>mkoPbhi?=G46jFUIj2_LkT.gHPr;SKPUP,%1MJqM>9r_)h1/"p.P%_q%aU`r/c9mK>s)8m\+7O^KmY>h7ie,$&::OM=JM?Od
%<2OCfqa6K4Ic<K8$^ECWH2_2E3^`iNn9(8XWQppZ1gjc$'`N[Fa3UuKJN&\R4Rk).3@E&0J`BAuM8W62-Y8Rc)W?\e5A)H'@_C*>
%@A**1Nk78aOK"@*bYD#15W^+S?c*Jnrkp"Dk=f9r17oWH8^bJ"DnX-Ld2uno(:4-=kN\#0Bdt<uj`3bR_BlG+Tg"VG2kq'/"2+T.
%*3D4q;,+EFoVrB]<@U%dAe\Y^HUV9sfRt"!K_qNN=.$Vb$*W7.T^5X;?$[E'n)@srppt\gVB0='#+UhZ!mVLk*b7hY73pb=JODHL
%acO[%$unQt&[dk2g'>V0:C?49@E]r5/<c6p"q6^,DH(ooqBaZZ/pl-'1geO'kCD#H,$>\XDKGUY4BH@:<,c5I,r)B5S5;uuAI_MB
%r0`&H`.Cdf+Vl7`!\e@'QZJbD+iH'oC'>jC.$&?Q?4c"cMQF2MHVob?pZCpNBDP1h:\?6(C8mp-"4'6-)]X5hm8YU`#P0PH9Z?fQ
%;&^/hZ.X/iJ%#DrgD?_-j%_g4cB]1cBA;Y9;kY/Oh0MIZT3?Z)%5gXRj@b]b';rlr,DuSV8aDWJe)g)JU:@/j:X9t.AR%C4'U]+P
%HDbF<c&U.:eWmn.O%8mq/hX.#j,rsALbU2:'/@3!]8!@n+FR.k,Mj/Q=[XJa?%UW?f^5A^_uDY"b3$BSh+,j;WZUY/I"u%kMTr5p
%_N%aR(c97QO#(rAP5"bH+mQBm7g93l7Q&0DLu(R$Sk_X9?>GSK_QW/^iRU\9/t(:pH#<DI:&RJk([>5O%g6Z%`lugMWK$3DcO2,;
%]?8ZGBh5`i,ad]QHlcuA:T+b)Aah;\qZV$%mMce6[a#/akJa@RT6)h>/2PJW;r=5lb,5JSs'6Ba\4OCVaR'YYMuf*:$0;I-.=^I1
%`BB)Jb^2:Vq?\cm/EMqQNXDQbauIL&;"cs"MIpQ@*(gr8!Al<$nO\GeXD7g&,ufY^&\&D"XRW0SpPFgHhkQh/+KeT>#2"!A?\ADh
%@_nTuY@_h3*FQl&4dgWf-V.t]2f!e#\Y47j_'3tVdSmo\$3junFsg0T]pYhjA2n?d"mL&cLuYSZeoao%#^=&51JB1tkl.eR<T.9Y
%VP.p`,jtD1qRWj_m#Nu!3Si;+IX#2/m\Mgu/<2dCY#EJ&V]#XA=6s,##K,nOP3/N4'!AoMA21*PXQMsJmcp]k-sjb)V6`fe5u0^9
%HmsnZW)TlMLfQ]p];LCUr4l#KAhEWc\PXFWL$&Yjp09F$-p/P08;tsYHk.1oq1O$iOELj6Ug*KoAotVQJ@j?GEFU,X7$ZVOraVlN
%,IEcN8.3^]1T[In=5qM_r`2L*)=LB5Yh8.n(7T=nEB(Dd*hT>EhjWtaa#So=ZuRQKSi"2=Gnd,OpqjE?>q;?5)nQn0#YG3*<"p7o
%2(]#Md08I23OO#bo4!bHSmN=hhDP5efEE!]?&pVSPlDL;6h`!,-G\Rt4uFRp0-#D`*4eY/Q=]EW9I20UqZq@f-*ED9P'5D/.In!i
%$*kRVfH)?PI.*@2`]BO4>$DZ)9t1L^!pgpP/X\?/h7IWpQ!YoCjFj9fH&'?^3Ns4<f+Nr7YZL^R:a51kC+qX=!bqb_5DEe_CKe*M
%,8/an]n"/&:QCfZ<:3-cWHUdC.tq\toQW.R-\_gK&3N0RBJO>3+Jq%@1M>:lNsAV>k>.nK<Q#)o;L*FPI'Kj3pG%3_.oE$o+`AoO
%).A.mEAKeW4qnW;J/'J-(qF&T`S=3hlT:NG?E4?pKcZ,fI_\N`N51g@mt9mf\uNH(c$a3af\p^>+>A]]M"=uDaWW^$6%Qp[b_>-)
%7NNZ%rPqUC#>jP?%7n"n0V#;?"!t8#i=pesE_=68rc)RUJZ<58<[k\$2,9W#;rK&*aZQP3l>`mZkI`M>bbU[`:(<ubnuW;;*`n#=
%%=^=CcfVlEks0ROR+c2]XP"%1?KQP*s.Cs'<Ya6lC/T8pPMT3)MrB;SFlk3&?pfQoJ%V?<CqRFf>[34J#c:.dmU#F*5M3%8Ge-N^
%82./`TU8=eNP8JK&Mr_2d`&[9>$_-K2Lb*_BnnpF0ESZ-C)C7`(%Qkc8$C*-a5%OlOM1-.4H6u&S"ALB/gR[Zktt`rht+`.%/jpY
%%2\ApRBLaU>?J2He9]p+Hhk"B;:lXBW(LH?IlIM/Cp&in+FjUNZe&huX6PbdK*\p#Bu=P:?<dE[DV&G4eDeX:$LN#]g.;ZI<7X)>
%acgg-Ak^h_M$DbYZaMLmHHF$*@MttB?C'"-hRR+g&%3Bp7TVdeeaQO5M4!FbimK75c1mON#EM[Bb@PE_,;a/\3K<8T)7mOTiJgM*
%@F@'kUaXLjc4O5u+`hh&fMeR[7d5-A]Q<5,5V"97WssU%;RB\>*A54#M8%45@PE4V[0A1)"i9]ii!YCm5R^-QrM(8,,:<N`VD%R?
%BO_*uolr.=`kf.".>BoWSNi$/Wfob<rkLZ:?2%DtIeb";iC#eDmYF6)P^qjD,Ku&_YW2,]qVoGN=V8:$Bs,l+9pTg6*2:h?2ZQcQ
%+DD*Mb<U4rQUD!d)9(e.7XNApU[&E\Tnn&u/4`DIG-<sUJ\^f@Ac99AI"60U,qld[o^Xl_$a>e(52F)uMWoQ;PBMZE(kSMF8O*Bb
%q-/1@*RebLRO0RMSI7Mj\At[h?D_YBHG_sO:i(^JnA_7p*il1_$b100G'5nqcQ=%%WVE6JOe4)HfO^X6QldANG@"[bds'Z:WcV/T
%oZ*;V35GmnPp;f!nMlc&Nd2J<$O55J0P/7!rC>-DC1M/heE?_jluR7-?pbuUR:&7tr!G*2D\('V"qT+,.'JXcS<ommHp[S_O8GrK
%fK%Zd:(*$nWue';N90(Xc_itgq"^dFf31(u26'0RK,8Td5TY4\(:Km%+?s!"\id?W!gAchh_)#VAd-W;.JnMD0T6Kgj.Ps:>pNf9
%pH]H(m<i;UDR;W9*ff?i\H8Q(&2>`T_C-3Shd0cn9>CiaCTHufBVBkKiO#(_8u7mm?1nVPOY>TC5htCjS172aXP4.uO>j[NA&3NS
%&]ihZbB+#$A'm!MaTn7!J=X*fe.7Tj@$7Mn1\DfnbFYBUH4drMf-8GZ,C'c#ak1pe`1[]D3$5BjdK"GTj/?<meKHT9mS`f_4I:S%
%YN4Y9gB+T='&FIr3e,rYBN*<0Rr7k#CVWGKOi&&jKO)cbSpXGS0SC#DS:\"\U_WpSLKb"Js,K("f8)G#ZHJk56Q8G`^)nc)P.2>q
%j^!3?KRYugE5A1Yf0jigL@tl^E:\;CAmK'*93Y6*f$9mQ&%-a7Xq`g@]f$Ea\uI]=[l#a0HYon0f->r&8O7>#fGtu9/`H$H3=4bp
%l=n[hbV)1(ncZPK*UAKj.e)T5MVB8gQd8F6Fe(9gBe@NH]Y-3GEs,a_q8:a?..+FMT)UJn`ld5TNpe?C"n`(oC56*%N_Mg<+rBST
%ZPh].4`(*3EFWQB8mG3*RicgIN]u.>K:k>MY5Qn%iT[J1o;?p[UW>A'GF-*nA-r?jD'74(rIeBWKh@f*7L1ui3<1^)WS1tdj%)sH
%O5GEO.o_bq)iW[R1Ct/A:$lN-R0DL<rjom]f8?$ATC*/H,2Y48-:isMY)`F/_Dhs$oagY#C+$>@0eBe&3;OHSl"T.F5<WNqfSeOh
%mHZsojNGeK,V4e:N8<>3(`qQa3e+`M1Q$S/G5'/'*(X.3Jsl</$,]pKHWQr\;<QZm6GSG^!7/TtjNFCkH2hTM69;0g%?%^enI:M2
%hc;!4f]7!hD\!8;D\ZPBh:``8^1k3+Kj%ut/.\;:^E4jTd_,8spr)ophIXub+8iKq4##6c=rD5T.?%S5pVU.pL;h@3p]_rn)4\?D
%OjtYHqqD4jj'+t8:Ua@oM6@B_,!sJVGt=jWjPN2[k%P-[U$mVXA[m?0FPcA,%#j5U:[V<"Bk1k&>=C_0^R^E=3/?#K<b/rD,qmSj
%\KQ;4U71ViXYiu4]8!@Zr]19A60UR+#c`]4nuYAZ7ZA$Odb,SJi+rt14m:(/oQSdW-<oD71s)ibp\IE^5Qj/d:Ym$*V1QJ##NPKG
%Z'1=r#"_ShWZ%+Y&W'm<>Jgo<DUO@cV#-<]1qft<lN4r`;=bGiin%#kKENcmHPat+@CZZ*fe^3MP&RK6D_8j9KN#6TBpq@&P;_#g
%\XVOZ-dDImc4\EsbV&Pjm?2rIE$FK2M-W<+J*LL:;,g*23U7?TA2pm'(bHDt(["720QAdL4C\/,[fTYVWQYIXS#+;H*J\Og2k!ZM
%r#[="?19,ni/NLP$Rc.QGes651*:FeUB+^3aF0@-J=LBt2q._CW$pm$$]e?#qOrk`>7;3(209b>G.;F?"O<8'K"Q:OZ\dnm5WM1f
%>i#lAC!#F'6=eN<.eJqo=VuWe;+#So6?1.-cjoXh1S+8"F@%#,lquqbC#<^1\=%#beBe59&tlp9MT)od&\Z4CU1$.HkX>4Q+P)5n
%fC"0"I]c4Cog#RsZ_6SK&g7KG2ICo'5oV.:ir`FGH!>ck&C7<#!s(`Ulr[*MkCr>\6Auj)&=/D`h)oM_0F9J)m0=!(.7nq[Gnd!d
%pn5hjOQ"&r2@D&gS[;,4[.F4q5d,"8hPYb+ZrZ&tJ%S&\)%r:e"0D)<mkO[4r'[4[H,rp7,LJZ2LK>qi&W[j%1l)]?R<^BlqkAk!
%6UjjW^B"ej)qGAm\k7JNY<j0lrjQEr+FRQRA!6Z8h`r2U+V]Ub%+U*"],W"_k_t0OM+N[0CXqJl!?Ga.o[=?\$I]r#.^s4ecC<,D
%ZDQ?868T4!]2Uk&Bs>;_i;o2sm>C3SRe2V=rk$AoPio"m:e:=T>Q8T%@\hAhoRS5/ZZpG![8J7D695X$k`W%6HF,<`$XQ%d_5^KK
%$nS&M[e^='&\dH,g"o(/1YtDC2J#m!4W63W'%=qj5V?uT(pBAZkbY\:[lYZQUPmh_`PX+PHsU=e_2['6hH>e9VL.K'Ak-9NP9"bB
%D0_dFqa9]'VbHS(K-;:RPqZ(jJr7+i:ig85A0tkAgDeuVOX5493YE4&:84M5.T4.;g..>,m\fJh,4t'9T`bl?B,7?cps]?=SeXu#
%ggMkW6LgU<6h/pTWIWId/5\.V^i@?T"V5a@TriX`1BiP9-kNm*^.'tVH:(fA?ORr7im$tpA)5/2?-a]e,0q*gMkW[Ka-1k#X+=ae
%5eD[Q)NqTSL6O.<6.%s.V+G0NW>UI/"_&/fZ#C^<VZ]T_U;GIO&ni,#/"eKI%ofk]E-Xn2>o'U4_q]\LHEG=LI:A:dmcXg=88MVr
%/UB3+:onHY:D=ZkiZOU2I97okMj,1MaUl-:XogiJU\ZNt"<()S;ae:)PUm'g",.V\a3MQO&?5Unmk(!9q6^*ee.r1FAuB<G.$DZI
%dm(M^>S8u_<aDVe$WDmmB,lm.b6r,M+,q%l1`V`jC[aYmr1#1U?opO0!+i$\Br?5rJE6E;iR[qtnkaVE4hL+oq695Y8%Umi1WY$@
%\J"IVN"\@X)+(UYkPMK])aB4TSff2>W>iJT0Iu'aTFJ>KS1T"0cBHN0P*<92]k(^r2c$KtiI91&dP]VnFcIP%E<G)LI"2.p3<0`N
%o)<]$RN5TKh"p#q,Mt#(]qAf3Ll#$sA-$sIJQ\hNN%\]\ksTU7!Kt=Hb#L_.>fbeI,8;>=bY@0H,;W;=dK2Z\(*NC1*c<N>KD4cu
%1h'g\1Tb6SlmTad7J=gU_Q$8\r+gZZmcMKP.G'%XEF-n/YW='&D_U.._h6C,"qVfEKQu_BTXSut-sMULcO=24c.AN+/Y6n2WJARa
%!/G`Gr![ch$n>PR)j;4?6d3fr[gkuO&1'bue\h,lBu^sJ_"I7m@t4"s!&!>X`]4u3]l3GC'hO84SYm'?T&o5@bm8#,E:.rF)=tfP
%fs>qSEH,S=.g/F_4p.W#j5a`+0A6T7[fm]^'J^u$@b>;dDL<ifnm;)]XH!\LC='lP0G@LFIVJWF%E8*t`ZEb1@H#g#4F2BLF"5]\
%jl,,spiRjB>i:$Q,@/=m.IG<4i?ZGS'H,hRUW!RgiY6Y,VO?P)"U^hHfDPp]"_b%ZOL_DU/7$oa8V71=56#bTS3`GL+GL_=&:Qet
%LB0+\j@a(k$:s(<+eS3,p--SG($a6"dKh^Bii@?^U&^JWVcF$OTfDEk[<U0?HZa9QFGd/G5r#Z#B3qj?%iTY2`3;4'F>%0$i>DXa
%-0#T`<p]OIU<roBMt3V#27!ADE.V3pB^f'K$YH7>huWqA$pmK%7_Y8u^.m<:Fqi>/g3N.H>1ANZR`u1^>^>iChEKpHH8t-L;d>JV
%DGt2r7ZbpJJ/r1A/a5aGnk4;k'.#^sVLm.O+'?A3HOo`u)auk4pB;HD):ddn]AU5(?lae(!M1>iR'dV]^eq)Zeps/_L'\@PVtL@-
%p%8rZWfk\+oUJrHOA?k4JtYjF3"GUF-Iu#<`G8a%ea#jS<F!pB&Ea;Eoju8AKtI8:CaQY\?nQO/^gY*NA6KYc\qRu$h%_1(j8^0.
%g&pZg[X=fcD+3T2n68`Cj[!eQ#2U7O8BMps3E)Y)cL5n`fY:6$%82@bc=3f]GdN4uZ$HpJBtVus&W$F2D=$0I;1)A6FZ8oJm"_g-
%]U^8.0Q)]\U#tJ!AEk3(1"?Sp0TN+<J5PL^TC/X'5RQ(,9_;@l_s'J&h2F:TG%hHkPS+iRPU&T>m/="W*R$!F`\FcE(TY>Mie4Qq
%@Q$XrXuC4r`U+UN2]\;(q!CnHFNkph3"!GA::R.aW&Z'(.<B#4YtG9K^<<cP+1Ueqmk>e_#WC!4(qOqmD]0^V!ZL#`N3b%pTb&0/
%(fQ6Zi)q@.]@ThkmiHo=6d:gL3jKEg6P]<hqtOLn(f1..\\Bim'BOXe*QBj\-seF?/1VYNC</AX`9W<U2i>i7pm"G%\6E5K$-X1G
%+;Ko.DU9#b*_<EN#rEgf]W"hj8WlSFe'?:t1m2IS0QQ1gdQP+;`<!N:*RtSJ9NHOLHj75N)`jFB)s!L.r^XsY/D$#`Gn*o0g9[A*
%>fhV2<,`7I&k+A\^4n/@lq2r?L+D8\8_%+a(%*&'B@gh1I$<AU.hkrj<F)@708L;NCU>i\J?j-8[,Pc@7Hq4b^H,I_WgsX@3ET-E
%HHFcHKbZpP'6CC@IVql;(otkf5VD"6X3AbCb][d'?CP,)N)c>:Qs4Ef<LQm#pR5TW'YA\h(osU>>QAiHP$*0kJ)7R*QcEh[')F6O
%_g&C8AL+TTOB[`b`Z:>T(Uu5N?DJ0go9U\c0NrOpL-%$^fQ-L5UUM*o#&1rTg'rAZ@tn]q*#^Gcnf]r\j9f3q)$rZu&>Tt9,(d,E
%3Jk#k`ORg9!'hSZg3l6B;2X_lf)F*2Xff%;k'FBYg6S9U0q%C9kQ<P/[&S3FVT<<\=gU/ABeKXJW8dj1&e_ShFN.J-P[GKIV9&bW
%cZ+Fd#/i:*%JgWmMJ\jq#`Af^QQoEB)ijgZ<.$$Dl!O:K&?2Ii41$fNq7SWY2hroEoXLT%#ap>tPf"6dJq;lIX=rT:&H8k\d?)#k
%7Mbge/mNCe=UP=%!Q4Z'0;BUZ(g"Up`HH\kP57A!M]_knf+)+!:Qc2"Y`9EF>"L//F_[o,2'0_j!t)A&=&Zb4>\ZekJN%l+ms[[:
%j\'ZEA%Z-65JQM^GRa0U+;Qo9XZVD5,hMh'aS_!$5@(5_<Tr?gW/`RTq:uja3C0BjKTCI]P=5Yi&ki1VgB#oN0*3N8_VO:j8MXpB
%83lUD:i&.#Di0f?lS-0W-*2BG/+sr`4aLi/Y8X"8n<P5H'e@W)""h[)HSQ[a[8E,3eW_Q1h)$6\$G:3B5D41N;;+@rX^<sj)8/]O
%?);,qQePgcd$Lh7Y2B09f!Hjn[C*b'>&j9jR2k>r>XEkbZLKnN[*JCbli[kgfV'dG(O'Veh8-e*3"#!t?./Z-J:(!'@q#<IM9?X=
%4,_jdmCaH".l`Gkc$3skYDu`JpFV>::GS1ZjFKdgM1-ph<*;Ut7^;o(JX<S;[R2P;)&Pu`fjkn&&*oA]R>JeT2$0bK.(CeFUl5q%
%"Z!R3!7$EZLh-^?",\[cLbq\-K0mg=Is=jTMP<me'cgG&lHPldcOh-:`p*(s">Ol$I&;E%'AJ.P&/hnG<om_'#lP.=W+1@e#D`R[
%m`[KnOe^j*8RbO_M'A3'6l2#+:_Aj*-o?((>EgFTnKeOM@a<X^`cC+D`/lA=$74K3ea"PIDGQJ]iJ%O;0DIT(;cSYENV!<@eAneu
%n$60&;Li>C-OM(Bqp8Y8NAfk\%9NB/2^[/p!J&Z#B(@lbp$@Uo:eF?e8-#,rTI(7IfrU;ShBY&""44CYa$nA92DcdM7m='IB^V^I
%_M(>.O4L4)nW`pDGqb1^X@(W^lG<IoHV%o\nGq#Vds"RE;qX^Q'd3m+B]3"sg03VL:T#RqHWj5e$t]Ie9DpqC4^f"9)*He(WY8Bq
%HR5=SR6`u<B#l&>OPof/3h#dg?<0=Y/uEXN8LV<Cn:tm>n8e#FV<N%RAGQ?B'`d88WqT#B/=T<$j$[i:(4%-!1/6R9KqKWl(0Q,_
%oKE>pRR05'SM'E-S@1YGElGs*eHWJ.GO+/L0-%LEPRB$JgkBZh)oE?Q_j#U-KW>F^0qg<<4_a"'UhIrR"GbabK+O(DSMh2<AHfo\
%!!4tI>b:YnB#en#%#U.'Q]RS$FYkPE+Zh;MM&Oas'VAbalEb\5H6fb"C1riN!J=G6CO?)em1kta.S=6;9"P0saDAE7.a'pt;MDrM
%Pk6I_gh@jDa'p?''dV%-$iDHeZ".$AZGE063usf81arYhdl+L-n.%mp7:%Rs7,fM;QCeC^VL"T(8U0n.],"pNe3b*+M.jACC$`%[
%\6>ho+tWUj[TEfV'o,?rmS0'G.6H)L@=%jL%cr]T76Fqb^N-%G8>\8<opktO[hg6gP[r_agJR1iBK_$j&2@Q''TU5d:cQphjKC")
%qZ5[p:op$aXTUtj%EIlM`HOGP,@]asPlLXOV3?<],#e9O6-")Vn^L&1nH1?T>E:$hEs\<aP-`d0C,+Y=#9^\(/G4_60n3Z's&@pM
%=iaU3j7Kl+CBoXH%`WW0BgURJ?FUgj#5;T-e*EH5f4j_gd[/\#N?F_SYYYE!1\A>e@TtfSW>)Q45jCr3fBB7]%hu&Z#Td=s.c:+<
%b0*PE#WIc[Pt2id<Xif@>;B)N7YUs=8BpeE'd*-00V"t?eS'TG7fjhP5$G5^ig6Uj8i56E`JJS"LmS([;]*/E<95Ka!Nj<F"#k$*
%<MEOUk[EXUV^'n]C-B!DjR]]?dE5u,m<XdYA2H(GDiMroH+ESP-B:_j<?-om>r?lr-r_OFed[fF0mUZN[9ZC,;<"o9qVH*<M`'<u
%d@A7:6t]9YfS_bP<iVM#:;:Fp5nR*>ng,H'(2&$qX+<&M9LP?`m7I@G2P4Mo`&:!XI\D'p<T"7K8D&KY9$$1JQ4M(d8u.Rt%*0X$
%O=F#YO9:q?LDARLaYs.o5`n7'k9XA&=s[;+r?tJ2Z>c8S);5\+ppL]tO[5#h^]nLQ.6-EU)B'NNo`\Vo1WJk1IXn\0s2#'HSLc!C
%#1SUe9U:2BMFe5SJ.<q$N,h?6'BD.D,"*J#@ph"akT4/HUm[`5glB@*5D":9@3ANe7Np*B*%]+8/m1%WF,O+[WM\k:Nk92HIX%*R
%=i#:'MX[C;Is8@:iF=.:L!"R-Jd3/=8As9NIesANZ6D'76=M1Y_T,Z8:a@jTW[oW/OiSj#9F>Li$^5[15[9F/#jYe.$q6p/Qe"=>
%1L+IT@S:R78JgK_d+IhcGkpP)k<J,A;;NGC1bWfUa5E?Sg=fms],\7S-L(X@$`>3HJgY4C2GOFO5\>e;M%=FRjL##B7"J$8i2S[g
%`XB`ha2G'L6[BPZ&gsTsba&#765]245K2htU^^EIe]*OS?;S<`YoF/khC^RfHMW2QF"KqE7q[oOhWu:&MKO#CIjBda1t0jNT3fLU
%5![K"aZ_nZ;@aO[Bj``4%l4jf]Rk2pYoZ+MM56`ZbTfFGYaM.2[,+-R8:&0uQ?k2k4tS3F'0KY^*<;gbrJ$cXgaU!+LK)!JRG3MV
%,<Vgcb<ZQ7;g@3@.4.0WXE=l23Y7"IiZ/X!<`JM0]%^hQjkp?8W3arQM'cXB7"pi,D!Y*P45HCRG/!L'EYk_3>9):=J'+i3`tQ-/
%Om't?6spD3O].af%YB^[>)R<>kfI;6g%F@hLa"1)+7PtN9bOtg,!Oq-lMSXjpp)e=qtP4"DWJ7f4T_V,G\"cPP`R"1)Om^u9bpU'
%#"hJWq.2A*&0KlO5(ac0;,*m&hF*TCmF$gjd\PI"OA@Cm-7U"7Zr:8JIQ957/m\'2G+9ijFLrkL$=t>8X+$:_hR)r7QThqG,melD
%?,jPLh=m),b?0TY$F*Kl0K;dlk9>+p4\%iu1BJ@.=rh__.>Ns4s#AQI8VHhG;V3mh_&D=doXT&r&<e4u(^5UkN<I9KDU4sK%ri.f
%i?!c(8/>2j,IffZ8`Nr[JbYY9q`Pc'f+L%^?BejHUHnlVd^.H9EX52]BOTb?b[)oL4N^u0d,J52m(NW;3]D.VdP$=-9[Y';VQ0ei
%MPg^cVd-hUN(/[S1YI=SP_Zs:;!"VC%3guh;2-^hP?q5"CC33j9J(sPiTclpc@t-,FP:9YX[?"g!L+W@E&WSW[]hWjE;>;DaOe9%
%.uQhPrU$>Jd4eR/E#@j:JbVp$"pI-.b!6jRfsgmT8%9uY8c;q^XJ?eC[?[X%]8)b3#f)Vri6nb?Y"!.u?^(u9_>o3_n+qEX.rqBU
%k_L(VWEt5$M@<n&6N8H>VZ!b3p3FA/p,?%\WkFU!M"M3=7i[bXS]TUXEDFZ>N&i:5*2a3Z0#HQS6J\P%FcIEqdIW<aNgsV_HD45U
%0&\diTlC&CHa893U)/OP*FY2LP]<r`p)?9&NLL5NC#\.)T,>KWkd8!Id0d`8o,-HZPa*5iI.$P>@-0erQf+&o.)7>=G'H6pn6?IH
%ifG5Z:(%=Y!$q@1d..2n!j/b8]"REC:"HeV6!(Fo>-Ekp92udJRIMh."CSUH@%iDRYl`me#RL\[\alJ;_+Y@qjraEYP^O6?>tJH+
%Kp*`4B.!j-q,sEN:tlKl=Wt[u">*g=X,h8nq0'.DaqaSG5*NUPVUp<59^:sO<,Sp^=lU,'H5arr/&btl.mq:4,>:>'%L:#JP54=9
%ao&BW4\%8V`Aqa,Y*C5h"!oo.E4GjS49WpXTW_`hB2th'&Rn7Ej^:_2q;RMN"^dC0XZ,YGq^Vk5.Cr*6@uLbDLXh$)NtD$\I%Xjj
%O$)k`g8rW7R<,@1Mh1Fa@G]t*l(h(9@M`Ea:/oUAVh51(+':DM+\]9P-h*?!"R5_*"U%,U[J(ak`^n#bJ>"WV+f8k=H-WYW5>[`D
%UaJ.iIAHbiNGFm5rkju=:RuK"\VuRHI+u>aG@o2(`+_gghIURS)G)[n1O)Hg@tD/XLFF4g*EB>#9^1E\Y.92;4N&<.II.^#4fE]6
%=YMU`I%N;iVrancK)%tF`XZHMiFW?uoKI1d!TN*pnR=kS#[lF?_@R6cF&D@K'TS+)mACEMoPot6E(0nUQ;E2J)Emlk[U9(*LVm/h
%iJl=S+k@$U\,2!GDW8f';+=,:d/rD.`%,\"'BnR,k4O;bj"ZK0o-QnR3BeKONq&[n2==AqN$)KR)j([2Dp\BN8ga;6ejY"]GuN*=
%@GHGQ>6Gb++K^^1UKA.RJ0JVaU?[n>?[TX4EgFn?-Q?T.5CU?6h7rj_ek%BG5UAf`Y-:G3nbkYU_^eOIYf.M1+E/m/UIK?1hm0+k
%SMCbH8fm/XI<WNM`XpjXA7i.;A&bOZocQhhi7NdKHLO,;6GgM<q['AFc.3A>`($(;232uU<+a+WWhduRAEGQBZ5'T-+WNU`M)sj`
%%eN\.A/;JjI:h"""/YJ2?Bg/06\.B;)Uc*g@@SOW3B42Uq@Zflra"9.Lr$%:hc\`dik9j&F#HX.Mek43HIuN_XB?Y##sum5-d]ED
%TKpHB40LuADT7mA?AmRo;fOd$X*gPtr8@J\G/(H'NVq15D9\M75MqI9h`-#FR9S\ib+@`H?:c<nJW`N>E_>o5BS5lOQ1(YSoNQ=g
%#t;>t#5"b%7Orkg+!spc[c/(0]lui=JucE7N7[e&rPR5+/N9g]n.UPFF]\"F]<_kYLP2o']jl$l5u6bSjn9.\^+jfh;4Zk>JbJB)
%.6o>JKX4j;fqB1Vh:g]Z!EpqNi4i<!6p_0'aMm^=KUAh/mO&-f.WZM*r%.K#H9NpbJ/oEMl0tcs=c*6?6`<"N&q`4N--b>+P6Bd"
%c(b\].:@j=lA9sM2Af/]M>i7t)3%>,BWG4N$QZ._4Ab.<kuX(k9a4*!Se0J6(W.55.sE3J3VrcK:Qm`L%SG>%MuH$JCgl0%+a2Eg
%ljgXNf/d"VDdmk*%B^D(PE^8m6CJjI,=g&L#?oG&=ul/\mVOWnGT$_lLQ'KmK:._AoXbk>$#;ML^)a#A9CSIi$HAm:8#`ib/Q?.&
%rGke:N%%K.NdrJO:,&QDEku+fn+_=;"l_O!0T%[T^`9l:1LQ?g9QGK%I5^rHrN)/kFemor*4V=KZ!]slLCL*^'o/%TB3gOW+\PAh
%q1OAm2`85K)t9?*I_@)@a>:L@KS1A8Rj/a(LXSo[r*!9o+!,C?hWeAIfnOmT7f`B6:6iK0Nk:Pf-gd<-]Uc@?LX+A)]T%#rD/&hh
%W]"l<[o5@^7J<EB=W-.LA<D\80@Dc7+/b-N[^hL?I:*fldGmXCbVc]@#HTjX=OcMS`[=U30Y-nWmuMCh7&nVG7MTC/:-B;bb]V>c
%=<2;+Il-OZ_`hIWPH#bH&*EJoMS;Z:Y#82]YoU"+*+07p)p9&O+l_QsQaoH#+Oh!$S>>$Be8kd?HJbfEF6(e?:QbYt6>*)PgfP=X
%%ROeh<<M4^SaUlL<oI-NF$Rk:MP&]<A69W[B8k-#U0'mQAfYO!IZT0&-cb!M,-j@1D0$7DaVJ?)iokPrFXsBIHAES;FGdI\*9MuN
%W@4F=8u^0WGHS6B5V/&Ce/PgYRA,iY^$i>:ohJ'+B:X,\VO5Gg5h+8M$3rgZlbPGAjb6pF[6ss]2l"tR]WHDqMk'Y_2I'e,!OnIZ
%!DYlsr#tVRq5+T/(>/=?B7`H85+%65`82Mc<7q/]a0T&e!N3b[%IOmkQ.W.DYc['bj7g#ES009;Zt$8bRs&TC_`(T>5!B^&>'p_.
%I2`9D&Or17.[Z%jaNF$D*RD`f8YJUVkqS\R-IF&J*Cd9cg3<pP2>@nDa>dM(6=>kMc96G$;OEQc",qAKX!p_5c7T;r,\Nl++h5EX
%:PfY2J=n'PUdb-TZ#;N$VQ1HROQt2)LG7\(Fcnk?VGYj(WM0p(7UOI*F(E3!4!SVYKb.;fUmX6V8I(:!!OGuEAUa\Mo9@sr7^[oQ
%GF6S8Pg3#Nb&[XH3e"jR2K92F@f6?L(Coa`.Lj'2:!dgCq*q>Hb]29DHt^P4J5rXSf=dVINDZ^n0WX18,nEnQ<tOY8Xdfa$DR,B"
%JjBJT3Gi`:Bs1cTa3'MiOp8?,IB*%hc:?2.MR/L^%$_i+T+)AST--$4>>1a9VD3V])0p.SM%u51LC>C1Ea7+6U&^:n$6[T6MP,4Y
%Y*Xp'E?FCgR^t8%Xuq+7MUZWJY_15Bk_%pf;=s&u<Gj"9?ckK9?TP!%<@'5]P(bHGdh>H+].V.'P>.#bk<+>@d3<SaI;H@JUJ[Qe
%B0_7_i.Og\p'<5$$QWa2HGSs2_6;;n,c03(7=mUjO:.6%?<Y:N+N#gN*4B-nZrHp@R1(mqUNIJL#`jM81KaKLQm,I$9EN5Zj^U1!
%Wht.O3t1RFpAfp7ZBUt8ngIq##)mLK-#BR$,S"7XeM9^`af#NTH*Vu:cd9bp"iX'@Fr8u=F0<>PC""-Pl6L#:hr&8rd/o*T)^_oA
%MjEr:7hGIWV/=;Na[Jrm1?F81R!Pin\BNpA-KA.5?_4;/^BYk@df.'6k-3,%O2rsP.%o5QWiC&IH%NQaNp77iLo+Rd4l1<M2A.A:
%:<F?*MZ?(@hlQ6QgRW#6=YCOK2D8m%,K.TYiW>T>$FT.[VfW7l6Nh05cY*P-EOJapOJNDg)A]-e>8^Kla>=W(OE5OiW`a!Q*H@l`
%&0N6H_IB2G522XNQhA6:)T>j%Y$-hI[C,9,Ne68K@l?VEHXQX%f\tVdR8,nc.2Q>nfZfPC/5"8S=h3<!Yf_&k&$T/Dr_Z#5q+i<<
%f4F-#IT1+c[oViA^rWJGeU#u)X_PQC_OCWp_sJV%?;W962rJ3&E"Mr.gMk&rIQ6pme%X7LXEN%Mb=(E<Bl,HHeLk5^4[&MjISKbm
%T)"UIrKJcT5jVG=Ua&#5^#]5])#Ae!f].5G)AHPnI\PKhD%SDe+"ST<Z,a(ZQg?N`%@O;'Ea4t9f$bru7A5PVVnV,K<X!+N#2f.5
%R'`%DhRar#_7rqehl;bp*Y.P",Ca*^4S!'dE.-qJJOa-oi"YF7E4bip"@UD[JXS:A%cgS\,9M]%l?qn@b9C.[ZPO=3[BZD'4DCQ7
%)Ns;4*`E!qfnl;b_&E.MLGj88;$qY2bQBtsrBRE/8B@1DBRGg?Du2q\GF=2dW!42A[Hrk[^-NE&*cR`uA!Tdo7r.R52C0*Aop%*B
%6sEkt>;%/GG`^b6mpD+E;)!8&Am-/:1d44B`kl0Y2[nFnWs%B#@+P.l[%K<M)p&kC*.GMY7'63o-f'+h%hYbcW=55^UUAt'aDI'[
%LJ\0V5';M[ik*A2d%Ouh2]IRYQ$"(&5[EE3,:Bq[fRuA4*$pqO"Z=*j_[q2@"I!cGOa=,cr2KNqa):Amg`ZZ?O&q6jo3!Cqkr@$O
%SLIm^m1"]s;r[AiKFf[TDd'3UBF$J=@WNqd*4cTgm^DCQ_Zd8]ksMd9E/]gugQnC(nk6#lA>mH.#djoGX^t`[nG%F\odAqUPtqW^
%95-7Lb<gn,)&uXU&h;CC#"B.)*ArlI_/t-P&WZ/oRZUhdZ72=HqmGPSb^ik_8C3"FoA4YG:'6g9U_-gg`BDYRG%U2)V8P#f$)(",
%)&0P-hiK6G`jhlqWXm'G#*BIX.%S6$Of5!gYI`+&p**RgG#"&)^6]d'CnW"&Kc@P9.8X2RE+ABk5+@C!]+T=^)r_3J*&.I*W][:W
%kCF+53:R^N)oW$q9sp.;k*bZK!fTQ)#H@eS`:a3Vc\PB`<KZ'!RTj%h-X>gnK_hK_RQCqdZ896?8F6fnaAT?t+_s%J;H5anU4"*O
%Th\kR`9Xe)quhA82sHjm;TToMr4G7%cq&RkY<JG)g>npJ=.4>(8)`HB/U$6uNe7gapHE95,qi#+RWTpm7>g_.g`RePE:_dSCTS=-
%;/D^J+GS0C+I]63#M^Ya:>9.eOCEJ<F\5ru\Tbr:RMllA`*,0#)$XN4ZutuEKfo;ain'T.agM0dK#%S"(W=g9#&aW5j3SPJ1iZa:
%P"G6PjO'tg(J7DZHH"-#dT$ellE@*9ehopF.18N="&>_jW>]'<.)\*b7YiO,qdRtc+h8$Gkkt_n*a'KG+C:ud'*h8GQ]H%OZ3Bn-
%f2r*A_nMP/-$At[""d$-0jo\u7X_#EfZEuhPtnah/gMd-na^-j:o>l[Lm4._RU_lSRmhAPCAG8-=<fIjRst5C52?:<DEkcp?=DDL
%SM1iR^".V6^1P:u#PWLs9iD?-JE`lM1$i+P$&bV7*;PIBk@m@qAO-urUR9Y$Cc(!O_6n5g^?R\h(pZjrBCIfK-P?"D'`M;D%)2$1
%gL$)PPNe4Vn[tI@j`JJX(+??ME"+M(Oq'%sdKji5_;!PX:YIB_5_gg"MCd&uY>_IRHnPT"#WWlWHNL$GLdJ*]>CqfO6,=?OY!;c#
%^RTmI4pa4$%U#rVAmck+5B#9PhY_]F"6+$TfXHhVbpd(bAaXP-#U@K;3e\GHL;V&4`.$\Zn8hkFpsmrgS7TdmCX(ah3ILY9&.E&E
%'K:-=:LJCR:_9t]g>(3r5&0CTOe<j6NQ]V;#Mb\HTnKOZQjLlr_eP\2#/e(f4(Y%XV)s(#.IG"5%6="7k05/%ZhFQUGE2kn,dr\<
%4?97V%Pj&Hl!'?-"$Y(Y!ESFCVs[3PA&;$]^HQeI(@)_aFo65U($i.a)tBnWbrl_:>/t-b`-B21QPWmNAH_8lCnsQ0:nrN=g.^SN
%VRC(R*-paVBf$Lq,'+X-As#,FK_C-RhZYEl7MHp\2bR^b5\X>gW6?hO6a]S*QVF`K4&Z(m?8e:OiA]7#ZX0T`c+<s$Egd'a&>$"N
%&<7K<FFSfC'Qb]?K7&l!cN?"0q(AWS9gZc.2K)=&>E3FeCgN8GBSu%LK7'Uem4c'VZ5PF$<=3;>Ua*2dNU-:FD(qJJf"^/e`c7Pn
%@IrEe_segq;I*uc8761)Zl:^dag,_(dgpM&_d#dFV3m4B+gYGE%keE3a)p#!\<98I/nIK4Gp2N=&:2='>j3EF4C-g3_CRR."Xj+q
%2";+D#0biXD-6bI^ccS5=0/UpoO)G*G$:uA8JGr"mY':GBf(SCLQJ,[iWFSM@cR:4B^eDu]'Nr!Yl_Qt[d&,R3RA,`?:jJab#+3p
%&O"7(#+:7dNu$9`Q4m++;7hAm$nWj\Yc9AFD]0QAaNI'kod?(XD$+W]:LWC_n0DrJ^7U!H6oeBI("R7jGFcVVLWcit%h9QT^,9Y9
%Uh>R+n0q37m1]>BObeSk7r&;f&d_X7?GZ'GN0UOAl77X:Pr8Rl%.Upn+Sr:aQ$DN$XD/bp#eo\[2k/qm$?XY-Il?B6K3t*`Vl&kN
%Q`2rAgCjh/4>*BD">F*p''sg'+&uSFbr`VJ1/>67TfZq",r60\!O+-<6"3$<g-sC;ij=9OFO:dmL.2P?iJtcN/W'u=S:]V+_)Ra7
%-jga[CbEu?EeGSBLQ(F-pgRhspd4BYT->lqV1[.Z!YJ22VVhg&,K=BWaLLRpk/eX*@LgAYBSB=bM?N2fanR0U!NmB;;(qtb&OdI6
%)0YXZiF=-D&Whojr\WsP$htm<kffDmFR)gKKb;V,la=*;nCcgR=B([ne#QT?MsbQ<L_2hg80GLu=\VrMDG[(O4,PL\hZCN7hF=[%
%JlJ*_+S5n:#3KaKn]/8WkDg%^`I,cShojLs9H=AqA$$*=i=8eZ/_j"Xgg4ZGHE4A_']r/Wec=8"jD_.R\4c)M!TtTB-P4'\\ZWfm
%TRA#<6qbd!nqtHT-+qZ,I87kGppFAcGS7(T?EWVB<(cY,@p<=B'3aEpMQBm,]LOGnbQimme5Bn.+l=(#nRgKn)[S^(N9uGt`UCPf
%4qo96Y3gkX;+Y9)C-s46hhA!L:<s!+DFN8R1bt5go5R4-B$[;n/uWCnWa__*:bF77PB1i,>[AQ[0oo2`AVRuHek),->*4.UPB>(#
%f7p:AcojQ[TQ`b]K"]0o/R5O,CR*2HTal8^fUAAiQV^q'/%%cd2p@t!o,;RM'f!0WIWY;!l:L$;+.(tIQWif?GYp5!rNP&e.cb:D
%XBJfAiohn"GG84Ke=`OY<0Mi-a`e2D[qe7D.aDs8CDOC=_h%gq`b(lJ5&E@9Fa#D2.CfA-@J@MA:VEi'-%d`DF8O](R6Ack_QL$!
%KHhnXoa8#S0tL74_L"d*59GXb7LdZJos"Kkf1'%A>I!?gpZmX&H8Lgb=)\UA1d/G1:![Z4:Ei\#dp@',J#g>\4gs8UAPQm?a8P1m
%3_uhOM2hhr.J^B<#f?i4A,FFOF2,lX[K"`4F>%Wdp31HEXQD!P2<VC/D_Lo8L!sX=ZHr&[`sl(IIZRPjK5!;ubOCXJp)A$5j<NWf
%02@9g$aIE'"$44=k0"7\YO9&c#LZZ=P(IsQNldWILp:pNYR,k/:8TAqKjB64.;p.f8(eQokHg/0n9!&#!Hfs!AB<Hd>^t?-&%`_-
%7k0l2lc0Dt4(cc*i_jlL78^^5<fhtTK%gnN\NF:EPVG]Da"`FcAJ;G5oRgdPm.Je:#0:BAb>f4"8]OGP%OsBe-t%i5ONOqRO/5[-
%@mbJE\@>E'*C'8'OWl[FgKo+\SA="k/*]$_"qI+8=Il4$J;@qZ:(4!#F^:ugDI[B'hiI2CF!qJ)^U/D7NF&]Lo,($fY$42<%\s,l
%VKdYHNbFQ[K6A2'UQ;pEGS&gk@5X*#oWHm%(a;6gG-EiWn<=CLEs.I\CmnQ1BY[3@>L#-UJ3'E@%NdeRr5BL9G`-(Up;)ABSMK2M
%kb)>r.hO!2Qu/eV\=jR@N:T&Gf_`8ScVa;:h<tPBan'B[Bmmq=TR/rOZU8BXJ3"fu@/i'nHoSj!/=s7U*9dc!*YIstcd%:(762o>
%e1a]'GEH!>g)P+:H#"&O@@je1R$2*A9h$+]H:>IcWl'Id*tNG3a>tT+d\fN^,l+.k21-K(+=b@?=5;rIHHVX-Ft,*PUI50(Sjion
%Ee)j!MN:/P*pNrB6VKr(YC#A,'cNeiEd&ke;G:Q=q!b0+.XA3F<=0CKSWOG/kH@?+kQ,1UTgfocYgWX=)!_.\U\lP^rgSYW)`CgB
%YP>mi=.ss`Zq(//:0a0D"58UC]2Q/u55O;Pc;K]q1JAW#9Qb3!ViJOpneh)n_!Ak_V8fR6%rUQ.2]5+lMf4`SEu^kiWA`XT*-&$-
%c?h>s#5)YW(q*`j?7dZV#Abd[dcu8%*$OO@SjU3<.7[b,R*UbaSp%\QDBg-H0RKJ6.j1''Kb98#N=B,n0Q`H2mjRc?"B.1X<\H06
%L6Koo:Rsur0;fBc594`J4(\F[OYiuH>F^Zf03=#GI8H;$#,s\0(ulEZfCX8,0cX8T4NCKf)m"#un>nAM&=Br_PVcS6[,"oiRY652
%;THmp"-i4./K-t7`IM>Ep>+gQ$n:KtT+6cjj%60E240ju0%!.rGSNC.@E<_4dQI3r@r!0\CnNhHi$(X+lFV4X!sc5.-R3\/#u]ft
%jXY3=fr!i3_!RMo:;CPYK+U2*#O)N*=$,P=3Q27,/`8$u1FK(?:]%*1CRYFR)?XY*2gD9";fG4riOP_VlBdOfr,e)\6GH@ah:k-]
%#f'&+0l(+0C\YMMPO2ONpMi8\s'3J=,D4B`YlZ1k&RRj[-_?pcA'I?i0h7hT7!/MMlTng:F)uB+%F"\o#3%Lc-rd/[K,RbQ2ei0;
%=VQ\uO&c_ub/pm?01?obX)jY7M$eC_VM515hmIhR38e;dYT/eo%1[Zqgb;4]ZUNiXEUbhc]J)GA,9F!7aYZoSZA/la.6qS/d+;eF
%/"SVb8IL/%'ohq_3-3FlK\C5M0(or6`'nA%Qa?*43i0diZ5"#i/Lrk=J9(.VdI1uG3#/=T6n]/5KTfKa4"?_\>SD*[@hR,b:/BH3
%IH@mgiqbU(eb)94#Ro\7@pP&o5_]d#3-XRm*4!p>Fj+&I=`\hs>ZL?=U6e`r#\"5nhj8(!BB1ak!=S`(dNN!,f7$K$4H:2]ErQ`<
%@WE.*oO#HeAof)4Wh`!+)J`[+m2cF4a`_J_?7l'X.Rr4b^j'CZi*Pr)"qdiA,/I14?)^33Io`R2c`2dJq6[2G8GPV,=`M4kb<h0X
%NCYSd?(5(<7n!J:[2kQ6>X*aM0?TLjLGe5=#hc<rI0ESX?=1jJFOt*8X['2m\$.'r7)p]`>[d-,@tld(ZeYrJS;\j-PM*F<Lj%T"
%X-LOODa^=YiB1q!n4ISema*Z^h='cSH3bC^a'hj+-;]9M&<QCmfdMOG#T3.-V<Kt9q,=t@pKQAU5,isV9j@;b&,=T#P]Onb)',WG
%UaUo4lGbeLnPNHqLi,F0QSeiR;E([Oa7Bd.fa1^#8"#]2iu]!A:^jR.g[3%f=f^'(*dH<iC;fJdPJqM#D_oUHcj-_i?mcZtFdXMD
%*NV%YcP%tJn(ESp4t,ulm<&\2D9R&YfR@'O*rIR4"8=kCpoNscltY7DIeYjk]J'.VIso4=?L2qPT?mN*cGUQ/(\oOH2VW1Yf+S@V
%efM*UfP6N^bIh"@E9tK6A,Vp#l=i*b[L%h-VeLOPOTJu&R<_bM;,b7S/i,I7cWG0@ojsbI@Zi;GR,"#mAZSqG:6%/XErPcQSj%>$
%?($\RJ>&)=LX9)\WEte3*J]Rhrp;SX:\/2=2I(,%SX!%P4?[jWJr-NLLq2'5cZjco=XeZMs4HHkb_4bc%fOnGquar6'(!-0di9eN
%A+K=8n27D'n5U6$rE?Y\Kgs%kJg#Kd*]i&O$go_0$Bs:U1Vup'9?ZqaQg?\h4Q0f(q5NauXq?%FAnu=(60$XLN"qTX'XCVNS(U)"
%Fhe#C4'6DJ,)9XL'=H7A,@l&;6DCLTiMf3WKdoin5P9(MJW0+5<=8UMD@$T<Ebl-.>S%bjOb3_]T&uC$&c0oLM>I3FTYM"l+u.`)
%qP8@:f,.Tll$32*\<d&H@q<ga<(1(!JdsGjKip:dN038-Q&S^)a>ih.$g\!14MZ=>P&`s8o]X#4PAkW2?TV,6JlB^c%g><IJ#srY
%&T)2ENgNm^bR@i<>_Na-"#^`[6d4h53(O8Hm/]9]nUm#Q,Qi6-1d-o4f1#=QhiT,]CWsqARY;)$NRi-'M[p"U_URZQ#0_0/UNjFk
%Hjp/%D-><dC4R+D,r%Ip%utULM'**LGq?%)EAH\"[Uk]D+u*"R\[pg!'eO,</B;n*bE>85q6D@#1<@b/`XE;Go=eT/5e@WjJl3k(
%\?HS&@LDEPO)`-m'[2&h:^NiJ4KK"[+[5%-VV?99/&u;"#.q2'.X;@]mXL`\@3I81'O=.kMrO_iL'LLS14!&4hKJE;n$l^3)fD4:
%35dm4D?fe>?;aT5)V3cPp?a:>.B8PV!D+C*4*X?>(ksUl8Dd5@=?;9I:,!%^*7*+Td$rW.]YX!&?Q!Xfq4>qskZ8]f@9>3'\(d43
%4m#*+4Z4.DZT&/AN8u2e?n"\<n3bo>%7tN0P.25-ZPa'Sg[#n^'qU2J]j6OHXoK+&iHii6Qi4c+/@@8dG@BP7I.1ZrbeAon$=Y'i
%,eo6&5hIu5a>hWRanb$&2'(KAp'>t(9p1K?KjDS--)\Ko=($#'8.Mf8lX'0hG+-bI#9=h1R(6,5IOk`8H>8'?^4h7[+F`S*<q6+!
%"RU.<=jm2[V1nYpFrWN4,!bupe6QgU@Yi+0M8\-k0#RSqeYZY%JC-];"r;D$`q1MG^hI"#@@ZSs+P;6A%C%dZl&3)AG&m(kD,8IW
%Za$k$[@B7?o6p]<LY`<@(G1_"IMA./M]'=G"i^ohSt5E2pk<P"<uOUJ)ufTo'9QEt]SFoP^$1P@,cf#_aNBI#K`9rCVc6OS;Fefi
%BY\P?8;dk=LeA]"\lJ>e4:\46:IT;"$Bi79'Rrh_<W9&`[BY3j4.38[0*rHA\oo-42:!@8j%_?bXAp?I\g0'8F74'O:Ib^.VIJG?
%9cE3Fq=(8_&)5l-,J6\%gn@3bGp@f[CPSf"KmL1_?Ym.9l42]N^lIj=Itf6Z[\^jne1rG,nL16,h/9\6Ae7ECKrm1hB#)MPbaQ)Y
%[2X^bfLH4>3[B-fj/'q2@6E'gZZ3knV`9+ETf2]AF&q-2?;%(Dgi9IH;C%]D'n3G^Ljcg/$(Y54_AL#TZZa2N/G#K`Abl?GI3c3h
%U_(s[Nc;;kN@(nu=sDgYbeZ`P)^1mn1>#o>;i])+(Sf[4@TP=^=4\b+J8,NR!b6;QAJ@?>%dXgNcrnOs?-Kc?[X^uAQ8?$#3-6O6
%/Q]fgZ^21qpcN]SgF(0=$5XaUh>OY=?O<V"B&D.=0=j!or:RKpKSphE^!k4KF@p4H.g\DB<Dbh(`\Pf(5.P7E(=QO)SX3?L,*Csm
%%M@#`5rrX*X@3TglE(bRfFhk;jPuD1a(i7Zrkcnf0Dg*/T5BB5ZcmCJb+WMgU@`]mdVC2P_idJu#\J?;D&L%&h'^pCk2)4dKH!Tc
%?[)ZLSd^kpk4P-Sm/Y=aY[uQH!gV.2*L_W'W^a1S%6D;qE^q@q-SNS@>O;b_r?+#W=^!H0\0)N79hsf454*utqiC7!ZV;H1'7E,i
%==,>\g.J6>PbR9Ca?N_RR[1rlE?a1io<=)bfW$fE]$;e!k!=3]@Cu>$3f<G_1);$=Wm_9qB*OD,#PDHLWG_XJh>4qJ08Fa@,gTEb
%bMd((>E`:Y_l<;0MgQ*5%_;('a0Fl#eomk$Tq%Cr-9Rb7KOjDc-lV&J6T<:s_,+-0f&7Z?^`/:>qeS\:f"/pAZ)*[)XjtGKB;GRH
%ZI0qB_K"50o,GoXZ_P;;^S+6FJ=D.7^2t^3:H)KPC.7]F+",pLHLmT-53>\fF?8sjkSJrEJZuIL,5#?H5+On\%XX"=OsBFQKcW7!
%77hMq5j^\pH7p.7bKBD"N$7-DE%7Jo?*cQFac8FD`\C9&T[?W'b\h%BM77jh/N%%%o'kQ5rO?[GZ'`&[B2ff!JtI3<l!\-q'r$^U
%HV-#4;M\6%APd)'M2,t#F#.60@Hh/][jH;brbc?@SspPWW\DPbKEpTH<#sM!"R_6[.K_T>8V_.m/aW(l`!jWT]`mb^*RQKH>-)g,
%HorQ0.99+GkV4[>U51oEROc+`/t(lTDE3VHD$g%GPq'RQRJ+&[p[[T$p.dJD*i40q7^6ssB1_8HS2gJ`>E2%?5AuFSo%i@rJ&=;0
%bs?$5)En([+"^ROdN97C<J;rH7F1>%](ukK?&fm8ae:Q(,eMOjh0Vh4HpqJbjWOL!.t_o1g'j<A0Tl@-4[#=$Eo(*+c<Ktoqpr*B
%mJn$e0qqlTAs"`qDTQD9fotAq3[IH&PU[^J4aC22PC72<o$\I:jVet!iiPogDuCAc?W+dKG2`a87RV8jI;Tqu`:QN0mAGt/:2VuF
%1\D?uC=Cs==\DtV"T)u;Ukg&3&bh$$erShkZLjiH8iC$.jUL%Op^HmIU!d#SP1R",G?lLP4=;JQ9,0`S")D\R>#r<0`$T*6_6#U]
%+<AocbGsR3%U\o"l]k"r[qWs>BF8ZV,F">VWGb,]@Vrm/"F`Ak2r6FT(AU)Bo9=EeI?m`BE*TR:Q-j\+5EE1P7K*j![WG\$A5)E*
%`XJ.mRskngQpV6Nmq<5'K/b!`"aAb"Nh>m;VG6#?;(,W*n8#7@G[S"WoaS'Z2*lYn3ZH+m*BQorBX`rF'Q)V>_!%O(X!j!u:P3\X
%e!q71$#X`>SiI7Xd$bgu$63-tN:Hs>g-3D%`D7q2'Eg)I.GR&HPh&:<$r4@i2j9A$O[[kN$5Vmokb45aVVD$l.$*\$b4MahefsK,
%-Hr>n!N1>8@Nl%RReS1@pJ\gKVDR#E3H`Z@H@=I/%#SPI_qr_GB>ThFLfnpkBm<4F*f[snPPi="k93bAik4pJBEBbR7X,0\,RSH<
%@Ri_B;efPC+\3I]EnblJf`4GUn&]Qe8Jm$Y>_95(7_Ye0U4R1rXF`JlRLju1ilD\%;hF`)[,_MZa`c[.=dtK,//t$De!i)"q7XGr
%o42[rE53p_pK!H5V'VhD;H2cqEbP9YIA@)=25n7&*bC!TX'B[:B=fVtbd8gGgMUsi[t\,\&,\+L5)'Aud?1>m`H$MJ5q.9FUE,bL
%]Z&gmM!2cm+DJ)lJ1b.gotpG3er-_k/IN?;KsjNSLGV+Q6R5(f2%F).$aX@'q/aePg0fGm2,D\*3l>C8<"--mI@a;E!3B&?67qc-
%k>,#mgR[u<#KpiNAMdZ?VqE><$Ql_\Y/l6allkD1Y,qs;595"2Rce'1H";(Z+IFrbAXA66XX3%!(1%BVlfk[/?sk+P`^5r>F4A0M
%s#Z\U71CtPp-ag/fJCR)<Q-<%5;(JFMtO=#-KUPl%hkMWVl_8Ua<t*A/;g7+-\IM'[cImu?LI.5Ks8lok%=#*5-ifpO[%Xr@pjcW
%P(5m_kR=:EY+G7(`ROqWB%!se[cYT.)2&=U-6E0?"H@6p@it9`f>mpum,a9GW`-f2Z'GL>@FA<lB4@Qf?U[NnlJQQW?^5;;8^gWN
%I=AZ%b@%TWnaSRqa/sFMVkP+&e%Y_`;Z<W_Y)=P%VZe*[6std5gMWSU/5iWZB%4`U]I);b:4PcS@I;`,;`bVk,1.:'`+CeL;'B3K
%X50)sfsi&IZA[tTFJf`/_g>Wg)J.*EMol>jFh:FbGrM2WH:X+6=,6+'2$n"JepOJcG8'.SnBsJNa6C;(%dP?p/H^2ZdtBDkfd&dV
%1XD+X(#rapR<*)Y7/!H."[0YY*CM@/F3"DFJklGA8oS=lgu,NX&eSA!p&bf/BY@?9oB%J*HflehjK,HFN1iP0pU;WQ0LD4hDqdYO
%Pi?+jC8u,FI>=b8*\BL?kiU8Zh)DiV)A*"2gCLM*esePBd5Pq9C9RGn6>$r$0k5&NSZ4[8D`N#Ie,dQ`.u0\RZh"B9o8O>3ccH+q
%m]i3!nhbP-#LOCr$$qG2-&/p!oMVjN,b,P"aIBXT$hJ^d0^7hEa+lor2L#d$?QrGF7*d)@N-"Hd6p$",0Yg5'L?^V-6A0LdR't(S
%UGmYU<tQMu'_tKQFdP&3LBt;<F.Jc_MUJ2,4q02e^Va9^?#bK/'`d+&rr*?jRMoUo(r@:o@UCt(2I.4qfIc'N3RaGR;*&]AYKl?h
%?U)2@Iu'e1SbV/%m3o>lj6GqLNnA/==5<<laD?CMP[`h8oP!i82"3UpS`D##XFB[n-$50SkB2eI7XDd0pU*J=<j=;Ep+28G*Re<=
%ea9$CZS_kqL?j]*M2TET`$IB0.>jURR=l(Y5n/%&*gZN+p?W9g7EK?cE;Q>hjP6tlc`&kQ@5oPf*,k=T8R_'EBmuVE+W?Z79Rk'm
%SRt^51RO1PA=n#(<%?YMM\<+5r?-01=aI5*WP>s99#FuHIW&rJrMMMg%tRkcL-",@%-6ghT[NLKn,aHIVo^%_(Xn5.P=k2h%Dk-A
%r7-Ygj0+ErcPnlh$dDi`2/Mcc+F)I6XpS9A:husR7YY$s%4[A3F+Yi=?H5.Y7Lj:]:<6KYiA;C$Gt)AQnW"X%4hS\7RI-#%DnbtX
%)^PI+bOM3-J,]6[dij*t4dFJR>CCZ[K/3cZ_Y(1[,m9^h26rH-6td6kP.kH++e"D%[,%i/nPie^+=CKmb]'a7MBNK@:$?/+9!kc"
%YkOjIm_,sY@/<Cg,h362P4-fls)g\kYu=(/<NBS8T2_LF2FWN=[7qc'-;kk%5D%HJ]*Md#WC-L&kXV?nUjLk@+Jn!pmuL.1PaL%-
%p:I#"H*d7*q@2eK0qF^TXi.]P)a(1D3>sVNnBnZ"r7Ip5-TjJ=C-/3gUlk%LRrh3VU-n<V\uqgE=W)+rg94e'G[SEq0(T_#l9?;9
%'t8SUBtT)HeIecQ(D?TiXLe,WX-Kt\d&GUc7d\9uD9E44/EQ6LgCMCZ?(6)HD`D/#CgB3>;j:VRGJjS3l&u&0KXc8?AGbK@a1U@u
%^LLRi.H&=lPo9.87uL$^XFq?(I6L)dSmCkZ#IB/t6IpI_j3OAB>7@gnCk1NE]!S/!$]'r<].HmC\j&"`Y3_-`^[#0=2gb"o?c$rc
%N]K$c5876"\tQ_)6K*tU&1M0^aZ7M[4!H<kT9is0jmNc[$[u@;X@)e_?/*cOKV.4HS,p\>l]4d$ATk[if7#W"/8t7==20F*"r3<i
%[Ahgi.&SpRZbf:@<2rmk3p$g=UX3(p?3k`A+dq,884>=[VY][@Pg@mf*F8##kdQbG4g*`Bg]hb8CLI2$d(-gFH[ku<jr]*Q0?sU#
%EHibW[p%?kK]f#MP9AfkFI%QqjuX.I%'EiEGU'%7Gh1VFQf\YB[iDW"3gYosAA2lpjdFE<rpU-*SB'T#p)f<cbkjPF4S[`)5,po#
%Q?pO%%6YLHr7eN4XPFbS2%g%l.,"\U>Z6Bas,%L%;$Qp"3g@t?V&c+$A0()-`0\P5IqU$p,ctqNG=0.9DXUkjGL5bL+^pnk?T54C
%qmXg1M[@iBc&I;_MV*h#^H"a#XODXs!6'"c:+HXX"G:R$P@U,CAUIZJH=a3Im>%gsm;?jUF0A0a$"Y(L1R7+uq?A%EIit03@.6#;
%X!YU4Z'VMWB"D.Bl*g>\+F2-BMl1Xl!1+7q+)d"=l_3%)rTT0P6I.P.g3u))W87$<msZd#QTI?"G)onU?f0caDq<n22:%ScW.[U#
%1.!WaEmcc!I]63skBso%LrI8=VJRVXo*fcmiKgd3&8LG?D\-"EB(fU*mdrS)oK;!P^:3=Y]K!%llPj)'Z;[G[H\G/A;P\XM>'@sI
%m@?#XhLA-UU#i'G/OsVk8bF<%ps!^LI`j1WrSu??HT=oo%;e<M3n/'Cd!*5>N[ub/'$($U43[#F"O!)Goh<Ym-DU-ib7JmaA_LbI
%N,Cl)@SYr(#:pr<KTLkJe+GE7>96'8)P<T<QhPYM3d)n>psen;8bXbs_Q#,)r7;sK+PoRE955t:FM2.%WN4jJQaMh!q&"UjAe'+$
%gAoJmb@3`9rJS)9mrh*8Dg6"`>hY\!Ib6a0me5Ml=*QO*2Qk"XZ5)[ZCIY[7/Xks[<dqQm[sd2h*-IQ.oQ'f&WtP%H&d"5mcu1j.
%IDcUD0rO,"LYLdB<ru?NDF-"CB8d&'+80TZgV*>?:%9Oq3,YubJ)/KsWd>o2i]?KWVFRbaWFQb&KO.Ct1DQsaPg6V6B"Qk)/WEOd
%TPNWX%_#A^q`6o!OEg`O]_kq$6f..&Z[N;^j]WUPr4@IYj.HA;rU9bIG]r2KJnQk:+@%s'0pD(h>5sok2/BaPWYE\oF^Z&rpWM+E
%2(X5DI[0uRBC:TRoS+t0-fHd"99A7RkRQcj9sn3"%]gDW.S8;4\P)5K#ZMc^oLhV_1'E(Fq9j'3R.FBbW,s@g.?OH\Q0.$&U6O'4
%)0E[k\RA#Q3tg[A4bu.:B2k&L,n%`&h?YZ'!/,4Ij?%4g?,P#VU"9@f>E.>V].332MmboeP]DV6?LVZIWm0WdgS".EKW_In[j*Fb
%1&3ciW1o]Siq+5Aj8d$nrdcj*LEFh5SbQ)N5!"T"hj"#[86Ai6Yt!FJ'Q9L0Vb02aB]Zg(MS!uJ"TctERhlgj(dU,mXQtO<pE7cl
%.""JS\/!\)leh\&8dbK)R2#QtLGY<<(k+Z.c,%:J6"R%]Cp5,G2+2#$V^:3qAZAslr)hu@9@-Lejbl@IiYSHm6"FV4NJcH,n@BCs
%l>Isiii`43WVB]bOclDH;G6]GP3<(4c'(K@)_+jpO'sgd%"Fo_j]Qb,m?fh>Md)6;>W)u-$_?_NdIjWJ&+gGZHF8V.,\+&"9p"OC
%ou5l7+*3\/it.k<1S@\T>?;kN&Y*2KLW&OV<rY+C`4&2!mVc`=jr@sQ<69\KeY?D[Cb&pKd2ee$+nW[7<fN)B<OHDHG<uT_78i.*
%[E%rG&!aM(2HPVPU"N:R(N<Fb!'/4RJ2BB!%U2Vl4D&k-OA6?]]!lst[WdbeNj=O8\]i2&;Aj7i$t)Q:*BJ@lG]I)JHl^R0kKmLM
%'sd-.!,%(HOc(Y.Fml8DB-Z/+kVqd31f/M30tF7,+n#/%>^sm'%.r$L;e9uJ-X"]t7L5RH7/M(?ZpiFTn=$2cc8X2Qo>qOr6uppC
%IuZOqP#2%<=H>b66uq.-]MKP)<DGh]qZn6Mcn8qj/$djT^&El8\nH7ll48##0[jm<q+?FO/]r@RieZj`\:q",I43e_0WN8p%NRU^
%$2VPoVWAd&7(E"\PEp<pL"UlJ-FBe$k<]g;0mW+k:lf,S'U.8Hp)>>`RGpXK&`'k\<Kh2_a(ZtCAP\rm\N8/QYXFAmT-Z=9^0J!I
%28M-+7/h8MRdtP^']YonqQeJgH).jg_/;Y!1Z4!<G8'7KY""aR#kmE5NX#.\O4R_,^M9b:cfe1`jK5WM<$7",l,@R8<Yff5Qt(Nd
%)$L5a^f%5+fc2#SYNG4S4J]=n]L',C=]_BT[c+]/%Pn<R'u7$<I&n@k=iO+PDt1o)iQ"<A_eF@6W5E@,c:9`;h<1,oI-l'g09qZo
%\n`@J5%d*%p5'jsTB^ro,M#f_P:9n@>%n\&f9$IT6amk3O&"5J;O5-pQE_hV>t$#!,!B,`?PHo&%b74Kehqh<eR[-DVuW#+mOZeu
%KJ6MB1Q+VW_:9%b!JO'NZkd;VM*!0kE=GWneP+Jb,brUM1IGiiaIb/\XCh@2SII0eW6s'kML[7iXWc6iY[)c/?"?'LH6;/4?e[@A
%0lf\JSr:u#7)kKmSs2.NJnHB4O4,V?Er#M!6ZZhVOsD$^M/Q1WHJ9Foe<(;/"n=[*psF2,S2hj62oU&nB'g/b<t*]IX%c=OP`$<:
%i?hl'2J&`NYpf%]P%Dgh3MUAh!B%nqVDAOfQ4$cU=O3J6pH6K8h5oOdE7)\ITD)R'"a0<r$$sU3LWlblMr^R\g:M0*mY51=e>sFK
%q0<(BW_Lcq`_[7mTC"h#KN<B-XVW[a.NVP6HiI>6[P/oO<`;Q#qBDMG?jU:hLL;SH>XS+g-'NI8pIGT+B<nC\MJF>kRL`t#9,S[7
%,AiV-0(Wcb;/6abonrN?L"kI^p8dWeI(3b@G-;AnQJA8akCkD`3u]%kk7Pn*P1Y:71YtbJe2n*C;?N6E9lf>hVLaMh9H3?_+\7Q0
%56>"5"GIM3P>r$KG`^KTT70m7aA_R@>@InFUI:=\o\;Jr68c,CY'W3`4`iT0LR@J;b>c#nmi59@hL1C]MVUFQN:(O_HB*AGcMTje
%^%bQk9Guh'%`2?ufm86F7j.IMO0,F$Bb9:OD:!X4$H4MCjI1cKCVE@?Kn`:4)[SQHZBCmtb/W:Q3"%_r7-c0iBcm3JYTMej\'7nh
%gSC"--\Fm*U[1r;D,MSGe%U,]Q7lNC4mIhSq]1s%K$VFdi^4:H1\/Pp7:YroZg:\Y(67]EK52\`k:3sN(gVI`16D#/bb9kpF^D8O
%#JNTS"S0KI@us'cW_gK.Z;m.B<ACNVWhE>Q<CWuo?+i)oA0m%PB^?,`'[,nY6+J>C08B_=VaBB?**LWk,_!lWmin,rdRd.dMsFZO
%rn/fh8#m,)^ulK=I8962/^$T"Fsr^tY$6a9oG.LG<0_R%RsgCB,ElZ]g,TJW%uNZY/5>++rNL?@2<>c\@_uW^.:O#sdVIV[[bISt
%phAWf:U;Ns%fPOMB""_d&g.-=_3EF9BB6C6Utec^A(bbO1hnR1&i6t-?b`;uc=dGEfHUJ4T4.a(C@>TOQC)Ska-DrJ+6SZeZ(N*G
%9$[2;db/&^+g+MH6YWbU+<7o"XA)#CAYL1kb2&iEF.I?PToc=g9EZA^Un/P,]j1g'Qc#qf.3hP0XihE<<fojC!mU_pC")0TiM9W"
%e:G(:682+o@G;,eNiU<(+7AU^7*q:Np<(N)Fg+PG(LKD>#/[7hN>IM<PIG!'<V<DLO+$M(M1hl_=JDDt0iS()7isKl5HU\WO)GkL
%3LWA4?WQkrT>8VOVtl'fJ3T+>6VCEd1pm$s.RSAH.>=ZS^lBMe.gHd%eeiAplf4N[G^.&])7Uq^OHI"sY!s"gK@5DCefn4"<%d=#
%__]Ba]kRjZR8nm($A)Ap_V@*d89(XuQ(M.F/*kt=)L>:g+dHa&@_c!_E>con7B3FJFAT0DgGZOKVeUUcnBH`1i\40p7Ub)hG'`Gb
%[hjeu2;SjnF>a*A@X-b+,rX"?LRR)1mNj"D\uR5E+45Fq?Hm`->k#6[S9;ci,a;H4$Z-icZ\sINXOj?i?fn1EX>FE24<R1t6eY`i
%R&<TT3Mb?ujN@[+)9oL$IN4MrTd;J%+8Yi<a6JkUD5P!q8h):#-p$\!olR0h%Z=oGlA=ph>*)boDlO'`>B+Ai%`<Kmp,u11.=m.%
%SUK<Q<*G(2"/*$Ao,.7dcZ'$omq7t!Hf,U>B1E>O3:n5u7044-9pcA?_?CL0AQ9ii+_;`!#t`<$@leDq,Y"_A\XK/5X!3d1[*&`,
%@j4G").u[;#YL9rn(2R#lU8Z(aD3!G%C],-buOF).s.&bKt\m/1fbCRZu9eYQm0(2DQ,,+GZ=[;br4>fM*c3:<ahOaAFG"-"6S<U
%@ioXc[hkJ;=%A=(C_/1_86X"'.?SU1R;XK`=%X&0`0)\r.h/>rV(Bd8F;HIg62fDMj\e+LAUoE1P?W3o&\7J@*,U9Oh0%?FAD`B(
%3DR9'6\c9/LrpL0<hOZOS^CN9\5nK+Nq2NF?S7VgHQAfEhh%WH>;!9O\`;cC5/[(poO:[W_pE]*\M#*3V7nF6YqOqG_\p0i7mU0'
%do$VBS2mq(]'CWK$ec;YfVu!d>7[8bW=_E"Z'5CUkeV)WEq]jJmf$0i'9^/&8K4P%=F*T7e?!T>2/1aP\OTWmToL.H(IBKu5]=IO
%<h/a4;.:;^#%8^!F;orK;XuNOTouaHl,q!_FhOK-`uPBV>,9T66ec<ni\puBm-M:!GVZ^rRp?`O*+9IF,7R.Tocf)2fBOrm>S8,-
%XUK3d&n$kE(M/Mjq'?%gR:5cEKF"KU9Z'H&9=hg?kG.>Xh3::sZ.897YLJN!cTl3WoO=+kJaa9hOjtkXiYo*BPH,=3rR12eh5V:9
%oUh;>1<jT"7oD$a92bt>HDS3uL3q_DRMnY])NP?D=.uI&o=W0'-=)r$">6qQcA(YM>fVZW7YtK:'_duN8p=hN0@M[<(+J,@Z*DJ'
%.UEV5eU[8:ob%rGQF\"VX5uHR#.)U]9H93V?j:fb=,CpI6X=+s*jV@LiGb1/9/?O=@u[D"[^WeBb:J(q'N*rm;.t+=k3HsK8Z2dX
%M$oT)J?"ubh9jJ)?s'cO3OF"lCU-'"QVsl5K3g1f(gZPoS=Ci\ghqZ%\M%$G$rdNTV[G9"mIj)L+.eru"<=1fm>&@om<7ss2>LY#
%=ebL6-Nn"^Ibi?s`3$S^:##iY%72jK+dSZ@88\Teiq/kJm#)G%n("+ZBSK7aSS^"gGK]pLiMd-??.`?4IQ6sNDti*k^BH_B5&]EQ
%4%$H#6mJg*Q#.>Le4V2%:h`:sJUq47P.3]:+;/ZD"k2ot6LiEh[H%BpA"+A(-AVH.NDE9)FeZ>td@h(r]8+\O>?E;hUns#hH`6k$
%BQZ$V7?0eW71)?;E["PBcQrmSTX^G;4T(9r:!7pC[i;!gUaZOJH'0`$m<5R`dRWNID30"-ftcR%XW-YNn,3]%&d]qtVb^oo22kYE
%E`pI&en.F^7j<eZ8B1G#)t^Gal[77q`O12ub<"L_6hs]l=?ARs<A`J@H#XH6LZ^#VZ;Q-.Yl1eK/8t6qV]R-6ISkYZS[)9t^%f16
%V[5PRN?*ri4?5Neq5&Uc6Q"OUpA$t85>s/:oQ0e6"15KL*!9A>QR![@<n8h4eXi3@fCme'+8.n*gV%eh*7]_n'i\_ZM?iZ/U.dV'
%gMf$7'&aAidbu?f^ro]8nC"b;D>C%)bo5*'qQb]LU;^m3rH=-8CEpbr)\?Nd2m30skZH^.]rukkItOM.:1H<%f)DY[o\N'Y\o>YY
%U"me%P8Ee3Q16AX837+tqC"S-$\#[1<2j$j5]sXkPNW751ZbUuXkRlq'3D1//Q[e39`_@_Vcc?DA8[Ga+>O>T?n#5uD/)M(ds:k;
%`f@G;1A_[&`.n#h?5NV"\i(;9IMN5.Ssh9c1D_[';T"A@`7ZFc,7*.-OhZ(nIAm@:BFJm(8Y-X$d&nN@880++N1j(r_RcBueTci7
%ck_:3%\A!$P,f.7e7l/;e`ikl#[E6[>cgA/A)V&44]+"9N5(.N`]I:_:hDA\f2PP\K0?%/$SFm=J<n_79`d9uQR/[NEi!#%lGjn@
%=H"&Dk!K!G'W*@\0,;%4-lk,$?DM1Z]\qVoCR1u\+Ln""3''RFBoAd]V+/$-&!:udaNoZ/fFNCiQbYTSLh;8c7`\5qaGb/0)d5"M
%GX9r+^\p7>7Pn^B:Y.cJmY)E;05,TD6<njH=qfeK+)^mHg[,2YGj^*^Fo>XK"7JCt="o?\-DO,ETeH/Y;C'I0*S:`l1b.?3#kf<8
%ZdL2PShVr3O?$d3CZl(%qEc@oPJh!;WQ`DW$8d*7lB7GLLu.9:5MG)E]Rh9hWPK32j3h^m3rKCtDi8prL7KG9j/F?R*7s%/laO+8
%MG^LEU-O<Ydau!m8Z:mLB`9J"os"`i^ic2HM4RB%'>3bDP1S_;G=H0`ONZG.*`_a[[3DTNe\U5-+XN_,=T2f1Kq)udBYI/]2-K/S
%>e;u<\WW"7*I`[?E?Hm1Vc<eRpHrS'/0OMZWojcUa5j^+M!I[`D.*`Z9bSf"o7_mhkA[Q2n.p2#aO)F2BMVpF3aJFEl.79_dXkHL
%Pk4"b23)CIe.Cj%)+m@7UsZErLl6>Vb3Q%KamJ.4W[Mq^<&J//>YF:B/ZP&Jmlql))t/>^EDS/sE]&k1DcTp-C8a$YI<gZ#E6F9C
%9s&43GDEBBHQDen%F5GNS(s0rE;s5>>p+F!NXX8#?oDl3=18.2T@*Zj`NtJ[*%YQsHfA`i5]VH4C.[EOg*c3RA_8KjAOr`MiiEc$
%KnuqdZ_n3C9iO#g&Q*/jS!k?9e#IA?5'p-LI+krT=JUgija[O*-g*AR>HFj7![VEtle9LhKpJk.i.S)fSilYSDj".(k&SE^_bdRH
%'YP:0JX1TRo0Xrm!BI9M#%`Kecm)lC')#%fU0\pkdu)*[VIK(IZA8sZU=7(qJW'fAc80cp*M)^Y"7=KI4@#dYK>rY'E6,-ZH&Ju(
%[!A:qo&HFYIM"`ViQ"1]J*/d*MQ3]1BRsStCl])T3r-BZ6<FGp>>UQKCq1fTLUG$;kaEe6$7F0ZpgQa[F)>)Hb]-e+(L##uAFX]f
%i^M(5bRF]oP_I6=TRa=K&W/dp>31?;?/X"DB,qbp#[L\3<0DM%\I+r[aOl\o_b+L."<\#iQ')lR\MQ0lR5_BqeY#M(2*>JbM(NHG
%'fejkG\+$AGBChfI8c+.Su[jCf:jigX(1g#\2gts,M#QWTL]3=nr^om:>8*=;32<mm)$O[;,pV_iDh'XmtS!/=.AtchTi(<''_Hh
%DV;*Mn9k]S?K6gks!r8QDqi4JB(EV#4Ddm_He@prpTQ)1Cn4@kcK"?bY_PAYG2FOB"Tj5c'Z7"f+B<I+DeDeK?re_SO)CRRb?1P^
%'JkDB_5]pj(ecJW.W6u=jEZc>>iL[7d\pV/4*?YdCU!mu0$1+/V*)dAJ:XSd?X!"kj^P',D.cn`bJ$-I<[pot8>P6)6Wmob`p;90
%Lg#pL[;_YmI.hM[QaW%'$nQEZG]O0S1.J`'WN#EXfQEF8eamJBa?gJa<<2#?B;rJ&HGKDXcR%#g!,H9@'st,Sb)R\f+\8_(,P^t,
%a'%oGidVhogDV+kON3pS@7tq#\Gk1lpO+Q>fJ"CkR`@#E@H2[fiSLFtR<":\O>ki-?R*^_X<CTHcLp3'Ed#%%)i1:Bj2&Vj%=$\T
%Q>8K7APAk=6JK28iAP(-'FDHdm+(k\q5/NXTo^BI/mg#%DDcIK2+rAQVN/G5"r.@EO'>j&*7YnK1"Br/RKk./$`c't_\S'7i#/BE
%H1@2[jop!^OX@Ve%\^0'&Q;Efosl#%8?STRbP>J^>TCTSO)c2\h]3tLiEQ-G89o0`4Sr\2*&qkCSjsU=UG(`Rht#usH19]R3-cQm
%6#T,89l8j3VNAdXK1J?;`>)WLMg=Z+jn^5t_$W"oHDiF"MpXT;<0?4"n"Q5RUf]`0.=1=!>j#o5dd3#M[\X=c9tkQ"=Jr*7JZ1f/
%`!itV0:D+mKPSboC$gM>!JPh2.]V:*F=uZGg`9.cB,8q3]\.79J>U;nEL*J"mSr>='QPk*];jhikFO`.&A>Pm]m;mrWkPosos9<B
%5S<b=[S$_S)7-"2V,AI4]?N=>EU:m%E3j67^>Ee7^H'3G_N4EHC\I1"HZm6=]B\8/Gu(TI-^WM=?gZMIpY`#tnE2qprnbXVBa7ho
%=6^&-B2T5<eA.W'X0\O$X;d&#>2.^[!K9!N\s*@N,`-NP94$@gF1Z,TDg!:4]W^n7=klb&.O0L;F5<r^Hb@4*W.]9<qK>eSWSAtZ
%,#%dJ>lL_$,.:R2UlsB4V?71!FpY>#&1M+0l"nZ_"kq6Z4`)fC9[CX2_kI]<d/DS!72e(%TDkQKltT1GA:1?cSW@Baj->fu&$X_>
%8Ae&Y?l\[W=c"Qtc(On+<QA83mKrdu-fT?:iO`IedJ`juVL3T"4ur`e4baJr`CC0oK;\:VSb_@?I%(>iULAt\/7*,9Jco6KS)$E.
%O<tn2AOe<JS>-X)r._@LS%d86G>Wj0!4TMh@&B2A/74YA]d0PL[(n4O5o2-,$nC#HW%&-%DF%*5[7I:ZK!4"":WW+s3Z:@-.a%[q
%5O#QG!o',YK4/Gm<emh@6BPMc:"`*b'FC,JIr4;=qED^<&6S*ArCN:gosoVe0lD&^.Q23lr/1kI3Z+fcSuu@f'hl3Z*j\kSlf:k$
%b@lh*$\XFlEdSk2@k5.)cl#9Y#?4:.el1[pAtA.+@.9YR8?_Wo"+"Kh/Z)l)6$.3CY)aoCerq.&-qX.'"5YrCmt:,aV#BFlq_J$1
%Q$`#V4Z`B[]R`jB_e8/lK,=+7=8D(@Hh7M+p^EdbMf83qk%D_e^RpECoS/[,oMZs]9b1WcHV1W4(RZTQHp!(CS;U"H5%d/9=@k<.
%,XWGo'!*XR/#9MDD)M^PR"%4K!hp"?KQ(d`r^4R%^(q"hVUYq]NucU&>u_cYH[QV.)kMsb;f`RY\+Uu9o7K^WGX#WQQ*>`2THjon
%l&a$*"L&F+=NrQ"*)Qba1,Cc$:Q)H;j.#Y\.e;S9s*FQoj/@G<gte`Z/TCFu#Q2%4L(5`J7ii`SGE3?Mmm4a=.ob/1M@YiiV\%tE
%GfM5Lr:%n`6^]\pQ89gokmK%&bFiKDP("rrpQ,EVdjgiiWaBOtYN@Ph\lI5/pGq;.V^1CGg:LVTEW@DL=C5r=S<VZN)'h8*gBI`m
%je,4;4&.ZT;e%4$2^'_/G$`9MfDq5:#(b5U+L5#m8""L%$kD[NVF9boo#M3C(S`$[cQ'c!?s"eTn]TL[;-BZc2Q484)Sg>B^Q%M=
%lR(N?p[@!R*7XH$N%aq`NPb3NoQVX7]G!flfd0G<N$e\I43?NN%._[^H/OuNP#/lRCA\unnZOo@,5Tng3Ddm;j*Hd_W^U1dUS0R#
%?$ePPcb3HaX'"o_.X<-dQeEr6.Pp?0*]'AFY\Z2HFd0e^-hkOHdtEm=Z_V(fIMcXDFZ3m%%FFUk!ShMtPT&eLlBg^m_dfrcp9hU/
%bu8)Z<Cqh.+pXdB(-+?j_6$ROm=Q4d7$S3>SLc8Ed?W.*HOTT5g`]S`D5]*9--YK*WrD_^`j,LYA,R1pbo#b6_"M]eF^+Y84\#>`
%@ss<T^'AKSG$MM1Iii.<&$b3)EK19$jd0$D_iL7NLHqc9ZlJPgopJmHqRWaaX@db"FX5L@_(3j,m-^TQU*L_nZSV64U;J,4>JM4)
%`5&3%R8Hq\f@Dj@%HfS6XE;r`B$g\CV0<!pddjA-99EX/F@!D%D-Xit3g[553ok4jbjd[;f3lrkdYN_>)="7@I1CasVdgFJ_NlhC
%6`UbcHEJkWh9jOfMG"gOeu.D_<75ZZ[np4Cr]\Wb^=+d3*uH81m_p-qjFNE`bZoFk\@hE@*[r@q>a'@uas1idS_s"RJpF08`5!G9
%Nh?@12h1SV^]0ALJ,>!cr:eNErpR%?qYB^aIf#adq>IMsq+nd'ci<\(T76BU^]3mYs81Ci^\m%$J,IJCJ,/bEY5e@gq`k&UkJ-rb
%:VZo(oDeUGrrM)QG/8*Hq[``!O2(M&rs(C&5c4~>
%AI9_PrivateDataEnd
