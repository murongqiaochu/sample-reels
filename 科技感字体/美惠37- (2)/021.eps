%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: plata_9.eps
%%Creator: Adobe Illustrator(R) 19.1
%%For: user
%%CreationDate: 5/12/2016
%%BoundingBox: 0 0 1200 1200
%%HiResBoundingBox: 0 0 1200 1200
%%CropBox: 0 0 1200 1200
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.1.0 x29 R agm 4.7731 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=100 RasterRes=1 GradRes=1 Text=1 Stroke=0 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c067 79.157747, 2015/03/30-23:40:42        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
            xmlns:photoshop="http://ns.adobe.com/photoshop/1.0/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">abstract vector background with high tech circuit board Vector Illustration</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:creator>
            <rdf:Seq>
               <rdf:li>Iryna</rdf:li>
            </rdf:Seq>
         </dc:creator>
         <dc:description>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">abstract vector background with high tech circuit board Vector Illustration</rdf:li>
            </rdf:Alt>
         </dc:description>
         <dc:subject>
            <rdf:Bag>
               <rdf:li>circuit</rdf:li>
               <rdf:li>vector</rdf:li>
               <rdf:li>backgrounds</rdf:li>
               <rdf:li>tech</rdf:li>
               <rdf:li>processor</rdf:li>
               <rdf:li>abstract</rdf:li>
               <rdf:li>abstraction</rdf:li>
               <rdf:li>chip</rdf:li>
               <rdf:li>card</rdf:li>
               <rdf:li>design</rdf:li>
               <rdf:li>electrical equipment</rdf:li>
               <rdf:li>integrated</rdf:li>
               <rdf:li>technical</rdf:li>
               <rdf:li>computer part</rdf:li>
               <rdf:li>hardware</rdf:li>
               <rdf:li>engineering</rdf:li>
               <rdf:li>line</rdf:li>
               <rdf:li>cyberspace</rdf:li>
               <rdf:li>computer equipment</rdf:li>
               <rdf:li>graphic</rdf:li>
               <rdf:li>electronics industry</rdf:li>
               <rdf:li>digital</rdf:li>
               <rdf:li>technology</rdf:li>
               <rdf:li>computer</rdf:li>
               <rdf:li>circuit board</rdf:li>
               <rdf:li>illustration</rdf:li>
               <rdf:li>creativity</rdf:li>
               <rdf:li>connection</rdf:li>
               <rdf:li>computing</rdf:li>
               <rdf:li>backdrop</rdf:li>
               <rdf:li>science</rdf:li>
               <rdf:li>cover</rdf:li>
               <rdf:li>internal</rdf:li>
               <rdf:li>connect</rdf:li>
               <rdf:li>art</rdf:li>
               <rdf:li>industry</rdf:li>
               <rdf:li>conceptual</rdf:li>
               <rdf:li>construction</rdf:li>
               <rdf:li>textured</rdf:li>
               <rdf:li>computer chip</rdf:li>
               <rdf:li>mother board</rdf:li>
               <rdf:li>motherboard</rdf:li>
               <rdf:li>black</rdf:li>
               <rdf:li>blue</rdf:li>
            </rdf:Bag>
         </dc:subject>
         <xmp:MetadataDate>2016-05-12T13:17:03+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2016-05-12T13:17:03+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2016-05-12T13:17:02+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A8qYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqy3W/wAq&#xA;fzA0PSNH1fVNIkttP15o49MlLxEu8y8o0ZVYtGzruA4H4HDGJJoc2GSYhEylsALLH9V0fU9Juha6&#xA;jbtbzMiyIGoQyOKq6MpKsp8QcnkxSgakKa9NqseePFjPELr49x7iox2V5JbSXUcEj20JAmnVGMaE&#xA;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&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVf/2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:e086a27e-6924-5840-9046-3f0e19d2aabd</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:e086a27e-6924-5840-9046-3f0e19d2aabd</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:41ec1690-7122-4794-bdd3-d72d8dece17e</stRef:instanceID>
            <stRef:documentID>xmp.did:B93AAF57E0BDE511B2BBC0EB12123494</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F07763D45588E411BF89F345A28D8C9F</stEvt:instanceID>
                  <stEvt:when>2014-12-20T17:10:37+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:29845C695A88E411BF89F345A28D8C9F</stEvt:instanceID>
                  <stEvt:when>2014-12-20T17:19:01+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:2E845C695A88E411BF89F345A28D8C9F</stEvt:instanceID>
                  <stEvt:when>2014-12-20T17:33:07+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4365C60ACE89E4119A65C8F5B8A1FEA0</stEvt:instanceID>
                  <stEvt:when>2014-12-22T13:34:24+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0B5A99264D6BE51194FFADFDE0B012D7</stEvt:instanceID>
                  <stEvt:when>2015-10-05T13:38+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:B93AAF57E0BDE511B2BBC0EB12123494</stEvt:instanceID>
                  <stEvt:when>2016-01-18T14:39:03+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:6B06640DF2BDE5119314DC75DE111CE2</stEvt:instanceID>
                  <stEvt:when>2016-01-18T16:45:20+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Bridge CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/metadata</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:ABD1052FF3BDE5119314DC75DE111CE2</stEvt:instanceID>
                  <stEvt:when>2016-01-18T17:27:51+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Bridge CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/metadata</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:e086a27e-6924-5840-9046-3f0e19d2aabd</stEvt:instanceID>
                  <stEvt:when>2016-05-12T13:17:03+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>1200.000000</stDim:w>
            <stDim:h>1200.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=0 B=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
         <photoshop:Headline>abstract vector background with high tech circuit board</photoshop:Headline>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1200 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1200 li
1200 1200 li
1200 0 li
cp
clp
1200 1200 mo
0 1200 li
0 0 li
1200 0 li
1200 1200 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
0 0 0 rgb
f
351.965 74.9668 mo
353.315 73.6172 355.503 73.6172 356.853 74.9668 cv
358.205 76.3184 358.205 78.5059 356.853 79.8555 cv
355.503 81.207 353.315 81.207 351.965 79.8555 cv
350.613 78.5059 350.613 76.3184 351.965 74.9668 cv
cp
213.124 79.8164 mo
211.774 81.168 209.586 81.168 208.234 79.8164 cv
206.884 78.4648 206.884 76.2783 208.234 74.9258 cv
209.586 73.5762 211.774 73.5762 213.124 74.9258 cv
214.476 76.2783 214.476 78.4648 213.124 79.8164 cv
cp
213.694 72.3945 mo
210.538 70.3926 206.772 69.7539 204.129 72.3945 cv
201.488 75.0352 201.488 79.3184 204.129 81.9619 cv
206.772 84.5996 210.349 83.6172 213.694 81.9619 cv
215.015 81.3096 216.89 80.1299 217.895 78.8867 cv
347.162 78.8867 li
348.16 80.1436 350.059 81.3408 351.394 82 cv
354.739 83.6543 358.317 84.6406 360.96 82 cv
363.601 79.3574 363.601 75.0762 360.96 72.4365 cv
358.317 69.791 354.552 70.4326 351.394 72.4365 cv
350.06 73.2803 348.443 74.3311 347.44 75.4297 cv
217.683 75.4297 li
216.684 74.3174 215.046 73.25 213.694 72.3945 cv
cp
0 .862745 1 rgb
f
150.662 74.6201 mo
149.311 73.2676 149.311 71.0801 150.662 69.7305 cv
152.012 68.3789 154.201 68.3789 155.553 69.7305 cv
156.9 71.0801 156.9 73.2676 155.553 74.6201 cv
154.201 75.9707 152.012 75.9707 150.662 74.6201 cv
cp
429.21 73.7012 mo
407.181 73.7012 li
406.171 73.7012 405.208 74.1426 404.551 74.9141 cv
391.932 89.7031 li
179.252 89.7031 li
161.971 72.3418 li
161.67 72.04 161.322 71.8164 160.957 71.6484 cv
160.537 70.0527 158.04 68.4121 156.121 67.1973 cv
152.965 65.1953 149.201 64.5576 146.555 67.1973 cv
143.914 69.8379 143.914 74.1211 146.555 76.7637 cv
149.201 79.4043 152.774 78.4199 156.121 76.7637 cv
156.26 76.6953 156.406 76.6201 156.557 76.54 cv
156.699 76.7813 156.863 77.0137 157.07 77.2207 cv
175.366 95.5996 li
176.015 96.25 176.895 96.6201 177.817 96.6201 cv
393.525 96.6201 li
394.537 96.6201 395.5 96.1738 396.156 95.4043 cv
408.778 80.6152 li
429.21 80.6152 li
431.121 80.6152 432.668 79.0684 432.668 77.1582 cv
432.668 75.249 431.121 73.7012 429.21 73.7012 cv
cp
f
155.553 94.9727 mo
154.201 96.3242 152.012 96.3242 150.662 94.9727 cv
149.311 93.624 149.311 91.4365 150.662 90.084 cv
152.012 88.7344 154.201 88.7344 155.553 90.084 cv
156.9 91.4365 156.9 93.624 155.553 94.9727 cv
cp
432.668 89.1152 mo
432.668 87.209 431.121 85.6582 429.21 85.6582 cv
413.664 85.6582 li
412.759 85.6582 411.888 86.0137 411.242 86.6504 cv
396.26 101.363 li
175.575 101.363 li
163.391 89.9326 li
162.186 88.8008 160.379 88.7041 159.068 89.6074 cv
158.157 88.8574 157.068 88.1533 156.121 87.5527 cv
152.965 85.5508 149.201 84.9121 146.555 87.5527 cv
146.1 88.0088 145.729 88.5156 145.43 89.0527 cv
134.018 78.8926 li
131.719 81.4766 li
144.604 92.9473 li
144.741 94.4688 145.391 95.9531 146.555 97.1172 cv
149.201 99.7598 152.774 98.7744 156.121 97.1172 cv
156.98 96.6934 158.073 96.0459 159.01 95.3037 cv
171.845 107.342 li
172.486 107.943 173.33 108.279 174.208 108.279 cv
397.672 108.279 li
398.58 108.279 399.448 107.924 400.096 107.289 cv
415.079 92.5742 li
429.21 92.5742 li
431.121 92.5742 432.668 91.0283 432.668 89.1152 cv
cp
f
154.688 116.604 mo
153.336 117.953 151.148 117.953 149.797 116.604 cv
148.447 115.254 148.447 113.064 149.797 111.715 cv
151.148 110.365 153.336 110.365 154.688 111.715 cv
156.037 113.064 156.037 115.254 154.688 116.604 cv
cp
425.767 105.686 mo
418.417 105.686 li
417.411 105.686 416.457 106.123 415.801 106.885 cv
407.146 116.922 li
174.113 116.922 li
172.749 114.41 li
172.267 113.514 171.407 112.877 170.412 112.672 cv
160.863 110.699 li
159.897 110.499 158.952 110.723 158.205 111.236 cv
157.294 110.485 156.205 109.781 155.258 109.182 cv
152.617 107.508 149.557 106.794 147.078 108.146 cv
135.317 106.141 li
134.736 109.551 li
144.315 111.185 li
143.191 113.674 143.646 116.701 145.691 118.748 cv
148.336 121.389 151.912 120.404 155.258 118.748 cv
156.125 118.32 157.231 117.663 158.174 116.911 cv
158.55 117.176 158.982 117.37 159.461 117.469 cv
167.438 119.119 li
169.015 122.029 li
169.619 123.143 170.787 123.838 172.054 123.838 cv
408.733 123.838 li
409.741 123.838 410.695 123.4 411.351 122.639 cv
420.006 112.602 li
425.767 112.602 li
427.677 112.602 429.224 111.053 429.224 109.143 cv
429.224 107.232 427.677 105.686 425.767 105.686 cv
cp
f
164.857 134.57 mo
163.508 135.92 161.318 135.92 159.969 134.57 cv
158.617 133.221 158.617 131.031 159.969 129.68 cv
161.318 128.33 163.508 128.33 164.857 129.68 cv
166.207 131.031 166.207 133.221 164.857 134.57 cv
cp
425.767 128.414 mo
169.71 128.414 li
169.079 128.414 168.495 128.597 167.985 128.893 cv
167.164 128.258 166.244 127.664 165.428 127.146 cv
162.271 125.148 158.506 124.506 155.861 127.146 cv
153.221 129.789 153.221 134.074 155.861 136.713 cv
158.506 139.355 162.082 138.371 165.428 136.713 cv
166.258 136.305 167.305 135.689 168.219 134.98 cv
168.672 135.197 169.174 135.33 169.71 135.33 cv
425.767 135.33 li
427.677 135.33 429.224 133.783 429.224 131.873 cv
429.224 129.965 427.677 128.414 425.767 128.414 cv
cp
f
155.553 151.18 mo
154.201 152.529 152.012 152.529 150.662 151.18 cv
149.311 149.828 149.311 147.641 150.662 146.291 cv
152.012 144.939 154.201 144.939 155.553 146.291 cv
156.9 147.641 156.9 149.828 155.553 151.18 cv
cp
430.665 145.023 mo
163.256 145.023 li
161.924 145.023 160.777 145.789 160.2 146.896 cv
159.212 145.745 157.515 144.638 156.121 143.756 cv
153.707 142.225 150.939 141.497 148.586 142.418 cv
143.121 138.102 li
119.754 138.102 li
119.754 141.559 li
141.92 141.559 li
145.819 144.64 li
143.95 147.28 144.191 150.957 146.555 153.324 cv
149.201 155.963 152.774 154.979 156.121 153.324 cv
157.436 152.675 159.301 151.502 160.309 150.266 cv
160.916 151.266 162.005 151.939 163.256 151.939 cv
430.665 151.939 li
432.573 151.939 434.122 150.391 434.122 148.48 cv
434.122 146.572 432.573 145.023 430.665 145.023 cv
cp
f
167.274 167.654 mo
165.373 167.816 163.699 166.404 163.537 164.504 cv
163.375 162.6 164.787 160.928 166.691 160.766 cv
168.597 160.602 170.268 162.014 170.43 163.918 cv
170.589 165.82 169.181 167.494 167.274 167.654 cv
cp
434.122 159.047 mo
434.122 157.139 432.573 155.59 430.665 155.59 cv
173.168 155.59 li
171.774 155.59 170.58 156.42 170.032 157.608 cv
168.532 157.65 166.654 158.212 165.123 158.695 cv
161.926 159.703 159.257 161.794 158.965 164.898 cv
136.182 164.898 li
136.182 168.357 li
159.594 168.357 li
159.594 168.338 li
160.77 170.81 163.378 172.421 166.266 172.176 cv
169.991 171.859 171.543 168.49 172.435 164.861 cv
172.601 164.188 172.757 163.342 172.845 162.472 cv
172.952 162.481 173.057 162.504 173.168 162.504 cv
430.665 162.504 li
432.573 162.504 434.122 160.959 434.122 159.047 cv
cp
f
155.203 188.17 mo
153.854 189.52 151.664 189.52 150.314 188.17 cv
148.963 186.82 148.963 184.631 150.314 183.279 cv
151.664 181.932 153.854 181.932 155.203 183.279 cv
156.555 184.631 156.555 186.82 155.203 188.17 cv
cp
429.21 166.629 mo
190.659 166.629 li
189.711 166.629 188.802 167.02 188.147 167.707 cv
174.447 182.188 li
161.024 182.188 li
160.215 182.188 159.48 182.477 158.891 182.944 cv
157.947 182.141 156.781 181.385 155.774 180.748 cv
152.617 178.748 148.852 178.105 146.207 180.748 cv
143.566 183.391 143.566 187.672 146.207 190.313 cv
148.852 192.955 152.428 191.969 155.774 190.313 cv
156.697 189.856 157.893 189.143 158.873 188.33 cv
159.465 188.806 160.207 189.102 161.024 189.102 cv
175.938 189.102 li
176.889 189.102 177.797 188.711 178.449 188.021 cv
192.149 173.543 li
429.21 173.543 li
431.121 173.543 432.668 171.994 432.668 170.086 cv
432.668 168.176 431.121 166.629 429.21 166.629 cv
cp
f
152.516 210.229 mo
150.613 210.391 148.939 208.979 148.777 207.078 cv
148.717 206.361 148.879 205.679 149.206 205.096 cv
149.436 205.096 li
149.436 204.764 li
150.006 203.979 150.889 203.429 151.93 203.34 cv
152.807 203.265 153.625 203.533 154.278 204.019 cv
154.354 204.08 154.428 204.142 154.508 204.195 cv
155.151 204.764 155.59 205.566 155.668 206.49 cv
155.828 208.395 154.42 210.066 152.516 210.229 cv
cp
432.668 177.865 mo
432.668 175.955 431.121 174.408 429.21 174.408 cv
197.845 174.408 li
196.859 174.408 195.92 174.83 195.262 175.566 cv
180.884 191.695 li
163.256 191.695 li
162.398 191.695 161.576 192.014 160.938 192.592 cv
154.108 198.768 li
153.578 199.248 153.23 199.855 153.072 200.503 cv
152.145 200.719 151.201 201.005 150.365 201.27 cv
150.02 201.378 149.684 201.503 149.354 201.637 cv
136.182 201.637 li
136.182 205.096 li
144.975 205.096 li
144.387 206.098 144.084 207.258 144.195 208.58 cv
144.512 212.301 147.785 215.064 151.506 214.748 cv
155.23 214.432 156.783 211.064 157.676 207.436 cv
157.887 206.576 158.083 205.439 158.141 204.328 cv
158.354 204.206 158.56 204.066 158.75 203.895 cv
164.59 198.611 li
182.434 198.611 li
183.42 198.611 184.358 198.191 185.018 197.453 cv
199.395 181.324 li
429.21 181.324 li
431.121 181.324 432.668 179.775 432.668 177.865 cv
cp
f
135.027 75.1094 mo
135.027 80.3926 130.746 84.6777 125.461 84.6777 cv
120.18 84.6777 115.895 80.3926 115.895 75.1094 cv
115.895 69.8281 120.18 65.5449 125.461 65.5449 cv
130.746 65.5449 135.027 69.8281 135.027 75.1094 cv
cp
1 1 1 rgb
f
120.678 139.83 mo
120.678 145.113 116.395 149.396 111.108 149.396 cv
105.828 149.396 101.543 145.113 101.543 139.83 cv
101.543 134.547 105.828 130.264 111.108 130.264 cv
116.395 130.264 120.678 134.547 120.678 139.83 cv
cp
f
136.182 109.143 mo
136.182 114.426 131.898 118.709 126.617 118.709 cv
121.33 118.709 117.051 114.426 117.051 109.143 cv
117.051 103.861 121.33 99.5762 126.617 99.5762 cv
131.898 99.5762 136.182 103.861 136.182 109.143 cv
cp
f
138.887 170.086 mo
138.887 175.369 134.605 179.652 129.32 179.652 cv
124.039 179.652 119.754 175.369 119.754 170.086 cv
119.754 164.803 124.039 160.52 129.32 160.52 cv
134.605 160.52 138.887 164.803 138.887 170.086 cv
cp
f
138.887 203.979 mo
138.887 209.262 134.605 213.545 129.32 213.545 cv
124.039 213.545 119.754 209.262 119.754 203.979 cv
119.754 198.695 124.039 194.414 129.32 194.414 cv
134.605 194.414 138.887 198.695 138.887 203.979 cv
cp
f
739.115 873.249 mo
739.115 875.158 737.566 876.707 735.656 876.707 cv
733.746 876.707 732.199 875.158 732.199 873.249 cv
732.199 871.339 733.746 869.792 735.656 869.792 cv
737.566 869.792 739.115 871.339 739.115 873.249 cv
cp
887.48 722.111 mo
847.426 761.875 li
733.188 761.875 li
719.769 774.979 li
719.769 859.768 li
729.664 868.406 li
729.141 869.984 729.719 872.705 730.279 874.361 cv
731.478 877.9 733.307 881.125 737.043 881.125 cv
740.779 881.125 743.807 878.096 743.807 874.361 cv
743.807 870.623 740.689 868.414 737.043 867.594 cv
735.869 867.331 734.496 867.04 733.25 866.945 cv
723.227 858.194 li
723.227 776.434 li
734.596 765.333 li
848.851 765.333 li
888.904 725.569 li
998.112 725.569 li
1038.6 685.371 li
1038.6 625.377 li
1035.15 625.377 li
1035.15 683.933 li
996.685 722.111 li
887.48 722.111 li
cp
0 .862745 1 rgb
f
791.88 868.918 mo
792.278 867.051 794.113 865.859 795.983 866.258 cv
797.849 866.654 799.041 868.49 798.643 870.356 cv
798.246 872.227 796.409 873.418 794.543 873.021 cv
792.677 872.623 791.483 870.786 791.88 868.918 cv
cp
889.196 729.315 mo
850.01 769.079 li
739.394 769.079 li
726.541 781.303 li
726.541 845.172 li
751.323 870.631 li
751.323 880.393 li
760.352 890.387 li
771.959 890.387 li
783.801 877.657 li
789.407 874.653 li
790.805 875.457 793.405 875.479 795.443 875.456 cv
799.18 875.415 802.688 873.902 803.468 870.247 cv
804.244 866.594 801.912 863.003 798.258 862.223 cv
794.604 861.445 792.143 864.221 790.235 867.433 cv
789.653 868.409 788.976 869.826 788.614 871.154 cv
781.66 874.882 li
770.453 886.93 li
761.887 886.93 li
754.781 879.063 li
754.781 869.227 li
730 843.768 li
730 782.787 li
740.777 772.537 li
851.458 772.537 li
890.644 732.773 li
1001 732.773 li
1044.08 689.097 li
1044.08 625.377 li
1040.62 625.377 li
1040.62 687.678 li
999.56 729.315 li
889.196 729.315 li
cp
f
769.081 873.249 mo
769.081 875.158 767.533 876.707 765.624 876.707 cv
763.715 876.707 762.167 875.158 762.167 873.249 cv
762.167 871.339 763.715 869.792 765.624 869.792 cv
767.533 869.792 769.081 871.339 769.081 873.249 cv
cp
980.536 733.637 mo
955.467 759.281 li
867.314 759.281 li
852.332 773.977 li
757.513 773.977 li
738.068 793.726 li
738.068 847.011 li
759.531 868.753 li
759.186 870.361 759.726 872.822 760.248 874.361 cv
761.443 877.9 763.275 881.125 767.01 881.125 cv
770.747 881.125 773.775 878.096 773.775 874.361 cv
773.775 870.623 770.657 868.414 767.01 867.594 cv
765.631 867.285 763.983 866.944 762.586 866.922 cv
741.525 845.592 li
741.525 795.144 li
758.962 777.435 li
853.744 777.435 li
868.727 762.739 li
956.922 762.739 li
981.991 737.096 li
1004.16 737.096 li
1049.84 691.711 li
1049.84 625.377 li
1046.38 625.377 li
1046.38 690.273 li
1002.74 733.637 li
980.536 733.637 li
cp
f
769.397 906.313 mo
767.488 906.313 765.939 904.766 765.939 902.854 cv
765.939 900.943 767.488 899.396 769.397 899.396 cv
771.31 899.396 772.855 900.943 772.855 902.854 cv
772.855 904.766 771.31 906.313 769.397 906.313 cv
cp
984.838 742.568 mo
962.075 766.773 li
871.947 766.773 li
856.962 780.891 li
763.872 780.891 li
744.697 799.76 li
744.697 843.531 li
760.951 860.71 li
802.44 860.71 li
810.68 869.462 li
810.68 882.442 li
805.957 886.93 li
781.999 886.93 li
772.598 896.656 li
771.143 896.684 769.45 897.083 768.287 897.479 cv
764.748 898.674 761.521 900.504 761.521 904.242 cv
761.521 907.977 764.55 911.006 768.287 911.006 cv
772.021 911.006 774.232 907.887 775.053 904.242 cv
775.467 902.394 775.954 900.053 775.624 898.498 cv
783.465 890.387 li
807.338 890.387 li
814.139 883.927 li
814.139 868.091 li
803.934 857.252 li
762.439 857.252 li
748.154 842.155 li
748.154 801.209 li
765.287 784.349 li
858.332 784.349 li
873.318 770.231 li
963.57 770.231 li
986.334 746.026 li
1006.17 746.026 li
1058.49 694.887 li
1058.49 625.377 li
1055.03 625.377 li
1055.03 693.432 li
1004.76 742.568 li
984.838 742.568 li
cp
f
767.658 840.636 mo
767.658 842.545 766.112 844.093 764.201 844.093 cv
762.289 844.093 760.743 842.545 760.743 840.636 cv
760.743 838.725 762.289 837.177 764.201 837.177 cv
766.112 837.177 767.658 838.725 767.658 840.636 cv
cp
1025.64 747.614 mo
1025.64 764.736 li
1020.47 771.347 li
889.331 771.347 li
870.602 785.791 li
769.875 785.791 li
753.629 803.266 li
753.629 831.746 li
758.089 836.208 li
757.776 837.816 758.311 840.231 758.825 841.746 cv
760.021 845.285 761.852 848.512 765.59 848.512 cv
769.324 848.512 772.352 845.482 772.352 841.746 cv
772.352 838.01 769.233 835.8 765.59 834.981 cv
764.182 834.664 762.493 834.315 761.077 834.306 cv
757.086 830.313 li
757.086 804.623 li
771.383 789.249 li
871.782 789.249 li
890.51 774.805 li
1022.16 774.805 li
1029.1 765.928 li
1029.1 749.053 li
1092.55 685.878 li
1093.06 685.371 li
1093.06 648.774 li
1108.05 633.79 li
1108.05 625.377 li
1104.59 625.377 li
1104.59 632.358 li
1089.61 647.342 li
1089.61 683.933 li
1026.15 747.107 li
1025.64 747.614 li
cp
f
914.945 734.709 mo
920.2 734.709 924.455 738.966 924.455 744.219 cv
924.455 749.471 920.2 753.727 914.945 753.727 cv
909.695 753.727 905.438 749.471 905.438 744.219 cv
905.438 738.966 909.695 734.709 914.945 734.709 cv
1 1 1 rgb
f
888.695 783.086 mo
888.695 788.337 884.441 792.594 879.188 792.594 cv
873.936 792.594 869.678 788.337 869.678 783.086 cv
869.678 777.832 873.936 773.577 879.188 773.577 cv
884.441 773.577 888.695 777.832 888.695 783.086 cv
f
579.354 199.748 mo
578.002 201.098 575.813 201.098 574.462 199.748 cv
573.113 198.398 573.113 196.209 574.462 194.859 cv
575.813 193.508 578.002 193.508 579.354 194.859 cv
580.702 196.209 580.702 198.398 579.354 199.748 cv
cp
798.457 132.852 mo
768.914 163.23 li
659.438 163.23 li
626.012 196.266 li
584.462 196.266 li
583.604 194.854 581.411 193.449 579.926 192.715 cv
576.576 191.059 573.001 190.072 570.358 192.715 cv
567.716 195.357 567.716 199.639 570.358 202.281 cv
573.001 204.924 576.769 204.281 579.926 202.281 cv
581.22 201.461 582.78 200.445 583.789 199.383 cv
583.789 199.723 li
627.434 199.723 li
660.859 166.689 li
770.376 166.689 li
801.914 134.256 li
801.914 114.438 li
789.238 101.719 li
789.238 71.9727 li
785.781 71.9727 li
785.781 103.147 li
798.457 115.865 li
798.457 132.852 li
cp
0 .862745 1 rgb
f
515.104 319.844 mo
515.104 321.754 513.557 323.303 511.646 323.303 cv
509.736 323.303 508.189 321.754 508.189 319.844 cv
508.189 317.934 509.736 316.387 511.646 316.387 cv
513.557 316.387 515.104 317.934 515.104 319.844 cv
cp
663.47 168.707 mo
623.415 208.471 li
509.177 208.471 li
495.759 221.574 li
495.759 306.363 li
505.653 315.002 li
505.13 316.58 505.708 319.301 506.27 320.957 cv
507.468 324.496 509.296 327.721 513.033 327.721 cv
516.769 327.721 519.796 324.691 519.796 320.957 cv
519.796 317.219 516.679 315.01 513.033 314.19 cv
511.859 313.926 510.485 313.635 509.239 313.541 cv
499.217 304.789 li
499.217 223.029 li
510.585 211.928 li
624.839 211.928 li
664.894 172.164 li
774.102 172.164 li
814.594 131.967 li
814.594 71.9727 li
811.137 71.9727 li
811.137 130.527 li
772.675 168.707 li
663.47 168.707 li
cp
f
567.869 315.514 mo
568.268 313.647 570.102 312.455 571.973 312.853 cv
573.838 313.25 575.03 315.086 574.631 316.951 cv
574.235 318.822 572.398 320.014 570.532 319.615 cv
568.666 319.219 567.473 317.381 567.869 315.514 cv
cp
665.185 175.91 mo
625.999 215.674 li
515.385 215.674 li
502.531 227.898 li
502.531 291.768 li
527.313 317.227 li
527.313 326.988 li
536.341 336.982 li
547.948 336.982 li
559.79 324.252 li
565.397 321.248 li
566.794 322.053 569.394 322.074 571.433 322.051 cv
575.169 322.01 578.677 320.498 579.457 316.842 cv
580.233 313.19 577.901 309.598 574.247 308.818 cv
570.594 308.041 568.131 310.816 566.225 314.027 cv
565.644 315.004 564.966 316.422 564.604 317.75 cv
557.649 321.477 li
546.442 333.525 li
537.876 333.525 li
530.771 325.658 li
530.771 315.822 li
505.99 290.363 li
505.99 229.383 li
516.767 219.133 li
627.447 219.133 li
666.633 179.369 li
776.994 179.369 li
820.067 135.691 li
820.067 71.9727 li
816.61 71.9727 li
816.61 134.273 li
775.549 175.91 li
665.185 175.91 li
cp
f
545.07 319.844 mo
545.07 321.754 543.522 323.303 541.613 323.303 cv
539.704 323.303 538.156 321.754 538.156 319.844 cv
538.156 317.934 539.704 316.387 541.613 316.387 cv
543.522 316.387 545.07 317.934 545.07 319.844 cv
cp
756.525 180.232 mo
731.456 205.877 li
643.304 205.877 li
628.321 220.572 li
533.502 220.572 li
514.058 240.32 li
514.058 293.605 li
535.521 315.348 li
535.177 316.957 535.714 319.418 536.237 320.957 cv
537.433 324.496 539.265 327.721 542.999 327.721 cv
546.736 327.721 549.765 324.691 549.765 320.957 cv
549.765 317.219 546.646 315.01 542.999 314.19 cv
541.62 313.881 539.974 313.539 538.575 313.518 cv
517.515 292.188 li
517.515 241.74 li
534.951 224.031 li
629.733 224.031 li
644.716 209.334 li
732.911 209.334 li
757.98 183.691 li
780.151 183.691 li
825.831 138.307 li
825.831 71.9727 li
822.374 71.9727 li
822.374 136.867 li
778.727 180.232 li
756.525 180.232 li
cp
f
545.387 352.908 mo
543.477 352.908 541.929 351.361 541.929 349.449 cv
541.929 347.539 543.477 345.992 545.387 345.992 cv
547.299 345.992 548.845 347.539 548.845 349.449 cv
548.845 351.361 547.299 352.908 545.387 352.908 cv
cp
760.827 189.164 mo
738.064 213.369 li
647.936 213.369 li
632.951 227.486 li
539.861 227.486 li
520.686 246.355 li
520.686 290.127 li
536.94 307.305 li
578.43 307.305 li
586.669 316.057 li
586.669 329.037 li
581.946 333.525 li
557.988 333.525 li
548.587 343.252 li
547.131 343.279 545.44 343.678 544.276 344.074 cv
540.737 345.27 537.511 347.1 537.511 350.838 cv
537.511 354.572 540.539 357.602 544.276 357.602 cv
548.011 357.602 550.222 354.482 551.042 350.838 cv
551.456 348.99 551.944 346.648 551.614 345.094 cv
559.454 336.982 li
583.327 336.982 li
590.128 330.522 li
590.128 314.685 li
579.922 303.848 li
538.429 303.848 li
524.144 288.75 li
524.144 247.805 li
541.276 230.943 li
634.321 230.943 li
649.308 216.826 li
739.56 216.826 li
762.323 192.621 li
782.16 192.621 li
834.477 141.482 li
834.477 71.9727 li
831.019 71.9727 li
831.019 140.027 li
780.753 189.164 li
760.827 189.164 li
cp
f
793.351 203.344 mo
794.688 204.707 794.665 206.895 793.301 208.232 cv
791.936 209.568 789.748 209.545 788.411 208.182 cv
787.078 206.818 787.097 204.629 788.462 203.293 cv
789.826 201.955 792.014 201.979 793.351 203.344 cv
cp
789.525 198.467 mo
788.241 199.441 787.005 201.355 786.324 202.697 cv
784.636 206.031 783.608 209.596 786.227 212.264 cv
788.839 214.934 793.122 214.979 795.792 212.365 cv
798.46 209.75 797.855 205.973 795.89 202.795 cv
795.071 201.473 794.054 199.869 792.982 198.854 cv
792.982 197.379 li
844.272 146.543 li
844.272 71.9727 li
840.814 71.9727 li
840.814 145.102 li
789.525 195.936 li
789.525 198.467 li
cp
f
543.647 287.23 mo
543.647 289.141 542.102 290.688 540.19 290.688 cv
538.278 290.688 536.732 289.141 536.732 287.23 cv
536.732 285.32 538.278 283.772 540.19 283.772 cv
542.102 283.772 543.647 285.32 543.647 287.23 cv
cp
801.627 194.209 mo
801.627 211.332 li
796.461 217.941 li
665.32 217.941 li
646.592 232.387 li
545.864 232.387 li
529.618 249.861 li
529.618 278.342 li
534.079 282.803 li
533.767 284.412 534.301 286.826 534.815 288.342 cv
536.01 291.881 537.841 295.107 541.579 295.107 cv
545.313 295.107 548.341 292.078 548.341 288.342 cv
548.341 284.605 545.223 282.395 541.579 281.576 cv
540.171 281.26 538.482 280.91 537.067 280.9 cv
533.075 276.908 li
533.075 251.219 li
547.372 235.844 li
647.771 235.844 li
666.499 221.4 li
798.146 221.4 li
805.085 212.523 li
805.085 195.648 li
868.544 132.473 li
869.054 131.967 li
869.054 95.3691 li
884.036 80.3848 li
884.036 71.9727 li
880.579 71.9727 li
880.579 78.9531 li
865.596 93.9375 li
865.596 130.527 li
802.138 193.703 li
801.627 194.209 li
cp
f
546.157 261.338 mo
544.245 261.338 542.699 259.789 542.699 257.881 cv
542.699 255.969 544.245 254.422 546.157 254.422 cv
548.067 254.422 549.614 255.969 549.614 257.881 cv
549.614 259.789 548.067 261.338 546.157 261.338 cv
cp
871.356 134.26 mo
807.388 197.271 li
807.388 215.945 li
801.073 224.029 li
679.63 224.029 li
654.491 247.658 li
617.759 247.658 li
611.995 243.623 li
558.039 243.623 li
549.409 251.68 li
547.943 251.697 546.224 252.104 545.044 252.502 cv
541.505 253.699 538.278 255.529 538.278 259.264 cv
538.278 263.002 541.308 266.031 545.044 266.031 cv
548.78 266.031 550.992 262.912 551.81 259.264 cv
552.216 257.455 552.696 255.166 552.405 253.613 cv
559.403 247.082 li
610.904 247.082 li
616.668 251.117 li
655.862 251.117 li
681.001 227.486 li
802.758 227.486 li
810.845 217.133 li
810.845 198.719 li
874.814 135.707 li
874.814 98.5469 li
890.952 82.6992 li
890.952 71.9727 li
887.493 71.9727 li
887.493 81.248 li
871.356 97.0977 li
871.356 134.26 li
cp
f
957.728 247.092 mo
958.129 245.225 959.965 244.031 961.832 244.43 cv
963.7 244.828 964.891 246.662 964.493 248.531 cv
964.098 250.398 962.261 251.592 960.393 251.193 cv
958.526 250.797 957.333 248.959 957.728 247.092 cv
cp
946.073 265.293 mo
957.619 253.494 li
958.815 253.637 960.144 253.641 961.295 253.629 cv
965.03 253.588 968.538 252.076 969.318 248.42 cv
970.095 244.766 967.762 241.174 964.108 240.396 cv
960.453 239.619 957.992 242.391 956.084 245.605 cv
955.082 247.291 953.779 250.285 954.38 251.857 cv
943.601 262.873 li
946.073 265.293 li
cp
f
837.454 185.311 mo
835.543 185.311 833.996 183.766 833.996 181.854 cv
833.996 179.943 835.543 178.396 837.454 178.396 cv
839.362 178.396 840.912 179.943 840.912 181.854 cv
840.912 183.766 839.362 185.311 837.454 185.311 cv
cp
839.547 175.738 mo
838.396 175.883 837.218 176.18 836.339 176.479 cv
832.802 177.674 829.576 179.504 829.576 183.242 cv
829.576 186.977 832.605 190.004 836.339 190.004 cv
840.078 190.004 842.29 186.887 843.106 183.242 cv
843.602 181.031 844.193 178.121 843.37 176.697 cv
843.769 176.266 li
899.596 120.146 li
899.596 115.916 li
907.761 108.48 li
986.191 108.197 li
1004.63 126.637 li
1091.65 126.637 li
1116.92 101.096 li
1114.46 98.6641 li
1090.2 123.18 li
1006.06 123.18 li
987.62 104.734 li
906.416 105.029 li
896.138 114.387 li
896.138 118.719 li
841.273 173.871 li
839.547 175.738 li
cp
f
599.475 258.619 mo
599.509 256.711 601.081 255.189 602.992 255.223 cv
604.9 255.258 606.422 256.832 606.39 258.74 cv
606.355 260.65 604.782 262.172 602.872 262.139 cv
600.964 262.103 599.444 260.529 599.475 258.619 cv
cp
1093.94 129.066 mo
1003.43 129.066 li
983.834 110.783 li
921.052 111.082 li
885.191 147.83 li
885.191 169.43 li
860.845 193.773 li
821.371 193.773 li
813.442 201.701 li
813.442 219.004 li
803.167 230.367 li
684.223 230.08 li
649.641 264.084 li
611.894 264.084 li
609.055 262.52 li
609.165 260.969 608.748 258.982 608.328 257.664 cv
607.193 254.105 605.421 250.846 601.683 250.781 cv
597.948 250.717 594.864 253.691 594.801 257.428 cv
594.736 261.162 597.816 263.428 601.445 264.309 cv
603.034 264.693 604.981 265.133 606.491 265.055 cv
611.005 267.541 li
651.057 267.541 li
685.635 233.541 li
804.701 233.828 li
816.901 220.338 li
816.901 203.133 li
822.803 197.23 li
862.276 197.23 li
888.648 170.863 li
888.648 149.238 li
922.517 114.533 li
982.481 114.248 li
1002.07 132.523 li
1095.41 132.523 li
1116.94 110.094 li
1114.45 107.699 li
1093.94 129.066 li
cp
f
574.685 265.547 mo
572.776 265.514 571.256 263.938 571.29 262.029 cv
571.322 260.121 572.898 258.6 574.807 258.631 cv
576.719 258.666 578.238 260.24 578.204 262.15 cv
578.17 264.06 576.597 265.578 574.685 265.547 cv
cp
1095.69 135.465 mo
999.121 135.465 li
980.677 117.994 li
925.097 117.994 li
890.377 153.012 li
890.377 173.75 li
863.157 200.689 li
826.943 200.689 li
819.493 206.785 li
819.493 223 li
806.93 236.422 li
687.396 236.422 li
646.475 276.188 li
600.49 276.473 li
594.723 277.496 li
581.239 264.563 li
580.879 264.938 li
580.81 263.596 580.477 262.121 580.143 261.07 cv
579.008 257.512 577.235 254.256 573.497 254.189 cv
569.762 254.125 566.681 257.1 566.616 260.836 cv
566.552 264.57 569.631 266.836 573.261 267.717 cv
575.502 268.262 578.463 268.916 579.878 268.047 cv
593.605 281.213 li
600.663 279.93 li
647.885 279.637 li
688.802 239.879 li
808.429 239.879 li
822.951 224.367 li
822.951 208.424 li
828.178 204.146 li
864.58 204.146 li
893.835 175.191 li
893.835 154.436 li
926.538 121.451 li
979.299 121.451 li
997.743 138.924 li
1097.11 138.924 li
1118.37 117.842 li
1115.93 115.387 li
1095.69 135.465 li
cp
f
833.514 235.598 mo
831.605 235.598 830.057 234.049 830.057 232.139 cv
830.057 230.229 831.605 228.682 833.514 228.682 cv
835.424 228.682 836.971 230.229 836.971 232.139 cv
836.971 234.049 835.424 235.598 833.514 235.598 cv
cp
1103.42 147.383 mo
992.829 147.098 li
975.542 129.066 li
930.872 129.066 li
901.902 157.609 li
901.902 180.676 li
870.921 212.217 li
852.552 212.217 li
837.026 225.93 li
835.511 225.898 833.651 226.34 832.402 226.762 cv
828.863 227.959 825.64 229.789 825.64 233.525 cv
825.64 237.262 828.668 240.291 832.402 240.291 cv
836.14 240.291 838.352 237.17 839.17 233.525 cv
839.557 231.799 839.999 229.648 839.789 228.104 cv
853.859 215.674 li
872.373 215.674 li
905.359 182.09 li
905.359 159.057 li
932.288 132.523 li
974.066 132.523 li
991.351 150.551 li
1104.94 150.844 li
1118.42 136.152 li
1115.87 133.813 li
1103.42 147.383 li
cp
f
718.544 255.189 mo
716.636 255.189 715.087 253.643 715.087 251.73 cv
715.087 249.822 716.636 248.273 718.544 248.273 cv
720.455 248.273 722.001 249.822 722.001 251.73 cv
722.001 253.643 720.455 255.189 718.544 255.189 cv
cp
841.118 245.639 mo
844.272 241.307 li
844.272 232.57 li
856.469 221.4 li
874.668 221.4 li
912.563 183.248 li
912.563 161.975 li
936.615 138.061 li
971.168 138.061 li
989.034 157.18 li
1107.21 157.18 li
1118.39 145.707 li
1115.91 143.295 li
1105.75 153.723 li
990.538 153.723 li
972.671 134.604 li
935.189 134.604 li
909.104 160.537 li
909.104 181.824 li
873.23 217.941 li
855.125 217.941 li
840.814 231.049 li
840.814 240.18 li
839.358 242.182 li
724.719 242.182 li
722.074 245.525 li
720.555 245.49 718.686 245.93 717.432 246.355 cv
713.894 247.551 710.669 249.383 710.669 253.119 cv
710.669 256.853 713.698 259.885 717.432 259.885 cv
721.17 259.885 723.382 256.766 724.199 253.119 cv
724.591 251.371 725.043 249.186 724.811 247.637 cv
726.392 245.639 li
841.118 245.639 li
cp
f
609.817 330.682 mo
607.909 330.682 606.359 329.133 606.359 327.225 cv
606.359 325.313 607.909 323.766 609.817 323.766 cv
610.634 323.766 611.374 324.06 611.964 324.533 cv
612.523 325.096 li
612.987 325.684 613.274 326.416 613.274 327.225 cv
613.274 329.133 611.728 330.682 609.817 330.682 cv
cp
611.922 321.107 mo
610.769 321.252 609.585 321.549 608.705 321.848 cv
605.167 323.043 601.942 324.873 601.942 328.611 cv
601.942 332.348 604.971 335.375 608.705 335.375 cv
612.443 335.375 614.652 332.256 615.474 328.611 cv
615.96 326.44 616.544 323.594 615.788 322.139 cv
673.538 264.656 li
725.085 264.656 li
738.341 252.268 li
843.259 252.268 li
850.322 245.203 li
850.322 237.424 li
859.684 228.064 li
877.262 228.064 li
918.036 186.996 li
918.036 165.092 li
938.354 144.5 li
968.049 144.5 li
987.066 162.984 li
1110.1 162.984 li
1118.39 154.344 li
1115.9 151.949 li
1108.63 159.527 li
988.471 159.527 li
969.454 141.043 li
936.909 141.043 li
914.579 163.674 li
914.579 185.57 li
875.823 224.605 li
858.251 224.605 li
846.865 235.992 li
846.865 243.771 li
841.827 248.811 li
736.977 248.811 li
723.72 261.199 li
672.11 261.199 li
611.922 321.107 li
cp
f
639.025 321.605 mo
637.114 321.605 635.568 320.059 635.568 318.148 cv
635.568 316.236 637.114 314.69 639.025 314.69 cv
640.936 314.69 642.483 316.236 642.483 318.148 cv
642.483 320.059 640.936 321.605 639.025 321.605 cv
cp
1110.34 165.824 mo
984.132 165.824 li
964.541 147.383 li
941.23 147.383 li
920.343 168.572 li
920.343 188.914 li
879.852 230.369 li
869.482 230.369 li
844.7 255.582 li
738.136 255.582 li
725.459 267.252 li
686.228 267.252 li
641.499 311.984 li
640.233 312.103 638.888 312.441 637.914 312.77 cv
634.375 313.967 631.147 315.797 631.147 319.533 cv
631.147 323.27 634.176 326.299 637.914 326.299 cv
641.649 326.299 643.861 323.18 644.678 319.533 cv
645.144 317.469 645.696 314.787 645.093 313.279 cv
687.66 270.711 li
726.81 270.711 li
739.485 259.041 li
846.149 259.041 li
870.931 233.826 li
881.308 233.826 li
923.8 190.322 li
923.8 169.99 li
942.676 150.84 li
963.169 150.84 li
982.76 169.281 li
1111.85 169.281 li
1119.86 160.662 li
1117.32 158.309 li
1110.34 165.824 li
cp
f
744.862 270.336 mo
742.95 270.336 741.403 268.791 741.403 266.879 cv
741.403 264.969 742.95 263.422 744.862 263.422 cv
746.773 263.422 748.319 264.969 748.319 266.879 cv
748.319 268.791 746.773 270.336 744.862 270.336 cv
cp
858.245 260.625 mo
748.031 260.625 li
748.031 260.684 li
746.583 260.715 744.907 261.111 743.751 261.504 cv
740.212 262.699 736.984 264.531 736.984 268.268 cv
736.984 272.002 740.016 275.031 743.751 275.031 cv
747.485 275.031 749.697 271.912 750.515 268.268 cv
750.808 266.967 751.13 265.426 751.185 264.082 cv
859.69 264.082 li
948.153 174.469 li
1115.69 174.469 li
1115.69 171.012 li
946.708 171.012 li
858.245 260.625 li
cp
f
765.513 277.52 mo
763.602 277.52 762.056 275.971 762.056 274.06 cv
762.056 272.15 763.602 270.603 765.513 270.603 cv
767.425 270.603 768.972 272.15 768.972 274.06 cv
768.972 275.971 767.425 277.52 765.513 277.52 cv
cp
1118.59 178.275 mo
949.305 178.275 li
861.708 265.813 li
772.523 265.813 li
769.722 267.914 li
768.118 267.685 765.851 268.193 764.403 268.684 cv
760.863 269.881 757.636 271.711 757.636 275.447 cv
757.636 279.184 760.665 282.213 764.403 282.213 cv
768.138 282.213 770.349 279.094 771.166 275.447 cv
771.503 273.943 771.893 272.109 771.847 270.641 cv
773.675 269.27 li
863.141 269.27 li
950.736 181.734 li
1118.59 181.734 li
1118.59 178.275 li
cp
f
781.418 284.699 mo
779.507 284.699 777.96 283.152 777.96 281.242 cv
777.96 279.332 779.507 277.783 781.418 277.783 cv
783.329 277.783 784.875 279.332 784.875 281.242 cv
784.875 283.152 783.329 284.699 781.418 284.699 cv
cp
866.315 276.473 mo
954.488 187.723 li
1117.15 187.723 li
1117.15 184.264 li
953.049 184.264 li
864.876 273.014 li
788.191 273.014 li
784.72 275.041 li
783.244 275.049 781.498 275.461 780.307 275.865 cv
776.766 277.06 773.539 278.891 773.539 282.627 cv
773.539 286.363 776.569 289.393 780.307 289.393 cv
784.042 289.393 786.253 286.275 787.07 282.627 cv
787.45 280.938 787.88 278.842 787.7 277.305 cv
789.128 276.473 li
866.315 276.473 li
cp
f
800.726 289.514 mo
798.818 289.514 797.268 287.967 797.268 286.055 cv
797.268 284.147 798.818 282.598 800.726 282.598 cv
802.638 282.598 804.185 284.147 804.185 286.055 cv
804.185 287.967 802.638 289.514 800.726 289.514 cv
cp
1118.59 190.316 mo
954.203 190.316 li
867.183 277.623 li
809.552 277.623 li
805.165 279.947 li
803.554 279.629 801.133 280.164 799.615 280.68 cv
796.077 281.875 792.851 283.707 792.851 287.443 cv
792.851 291.18 795.88 294.209 799.615 294.209 cv
803.353 294.209 805.561 291.09 806.382 287.443 cv
806.703 286.012 807.061 284.287 807.058 282.857 cv
810.409 281.082 li
868.618 281.082 li
955.64 193.773 li
1118.59 193.773 li
1118.59 190.316 li
cp
f
817.668 295.746 mo
815.755 295.746 814.208 294.199 814.208 292.289 cv
814.208 290.377 815.755 288.832 817.668 288.832 cv
819.578 288.832 821.125 290.377 821.125 292.289 cv
821.125 294.199 819.578 295.746 817.668 295.746 cv
cp
1117.15 196.266 mo
957.379 196.266 li
868.628 284.252 li
825.927 284.252 li
822.517 286.299 li
820.94 285.772 818.213 286.35 816.556 286.912 cv
813.018 288.109 809.789 289.94 809.789 293.676 cv
809.789 297.412 812.817 300.44 816.556 300.44 cv
820.29 300.44 822.503 297.322 823.32 293.676 cv
823.616 292.361 823.941 290.803 823.991 289.447 cv
826.885 287.711 li
870.054 287.711 li
958.804 199.723 li
1117.15 199.723 li
1117.15 196.266 li
cp
f
838.412 302.43 mo
836.502 302.43 834.955 300.883 834.955 298.973 cv
834.955 297.06 836.502 295.516 838.412 295.516 cv
840.324 295.516 841.872 297.06 841.872 298.973 cv
841.872 300.883 840.324 302.43 838.412 302.43 cv
cp
845.98 290.881 mo
843.291 292.992 li
841.72 292.447 838.97 293.031 837.303 293.596 cv
833.764 294.793 830.535 296.623 830.535 300.359 cv
830.535 304.096 833.564 307.125 837.303 307.125 cv
841.037 307.125 843.249 304.006 844.065 300.359 cv
844.352 299.086 844.669 297.58 844.733 296.256 cv
847.176 294.338 li
874.375 294.338 li
962.549 207.029 li
1117.15 207.029 li
1117.15 203.572 li
961.126 203.572 li
872.954 290.881 li
845.98 290.881 li
cp
f
718.544 321.605 mo
716.636 321.605 715.087 320.059 715.087 318.148 cv
715.087 316.236 716.636 314.69 718.544 314.69 cv
720.455 314.69 722.001 316.236 722.001 318.148 cv
722.001 320.059 720.455 321.605 718.544 321.605 cv
cp
720.901 311.998 mo
719.671 312.127 718.377 312.451 717.432 312.77 cv
713.894 313.967 710.669 315.797 710.669 319.533 cv
710.669 323.27 713.698 326.299 717.432 326.299 cv
721.17 326.299 723.382 323.18 724.199 319.533 cv
724.62 317.658 725.111 315.277 724.749 313.723 cv
726.324 312.779 li
845.002 312.779 li
857.103 300.389 li
877.83 300.389 li
966.867 212.791 li
1117.15 212.791 li
1117.15 209.334 li
965.452 209.334 li
876.415 296.932 li
855.647 296.932 li
843.546 309.32 li
725.364 309.32 li
720.901 311.998 li
cp
f
1083.08 417.935 mo
1081.17 417.902 1079.65 416.324 1079.68 414.418 cv
1079.72 412.51 1081.29 410.986 1083.2 411.02 cv
1085.11 411.055 1086.63 412.629 1086.59 414.539 cv
1086.56 416.447 1084.99 417.969 1083.08 417.935 cv
cp
1089.27 417.299 mo
1089.2 415.963 1088.87 414.5 1088.54 413.459 cv
1087.4 409.9 1085.63 406.645 1081.89 406.578 cv
1078.15 406.512 1075.07 409.488 1075.01 413.225 cv
1074.94 416.959 1078.02 419.223 1081.65 420.105 cv
1083.74 420.609 1086.45 421.223 1087.96 420.611 cv
1093.11 424.291 li
1120.89 424.291 li
1120.89 420.832 li
1094.21 420.832 li
1089.27 417.299 li
cp
f
545.082 383.361 mo
543.172 383.361 541.623 381.815 541.623 379.904 cv
541.623 377.992 543.172 376.445 545.082 376.445 cv
546.99 376.445 548.54 377.992 548.54 379.904 cv
548.54 381.815 546.99 383.361 545.082 383.361 cv
cp
1024.81 423.426 mo
988.922 423.426 li
934.895 368.967 li
596.462 368.967 li
586.521 359.025 li
563.025 359.025 li
548.922 373.725 li
547.352 373.609 545.313 374.072 543.971 374.527 cv
540.43 375.723 537.205 377.555 537.205 381.289 cv
537.205 385.027 540.233 388.055 543.971 388.055 cv
547.706 388.055 549.918 384.935 550.736 381.289 cv
551.101 379.666 551.511 377.67 551.386 376.152 cv
564.501 362.482 li
585.089 362.482 li
595.03 372.424 li
933.454 372.424 li
987.481 426.885 li
1023.35 426.885 li
1037.61 441.58 li
1117.15 441.58 li
1117.15 438.121 li
1039.07 438.121 li
1024.81 423.426 li
cp
f
577.624 567.816 mo
576.272 569.168 574.085 569.168 572.735 567.816 cv
571.384 566.467 571.384 564.279 572.735 562.928 cv
574.085 561.576 576.272 561.576 577.624 562.928 cv
578.979 564.279 578.979 566.467 577.624 567.816 cv
cp
737.379 515.49 mo
718.361 496.039 li
671.956 496.039 li
605.394 563.898 li
582.429 563.898 li
581.431 562.641 579.53 561.443 578.197 560.783 cv
574.849 559.129 571.273 558.143 568.628 560.783 cv
565.989 563.428 565.989 567.711 568.63 570.35 cv
571.273 572.992 575.04 572.352 578.197 570.35 cv
579.529 569.506 581.146 568.455 582.149 567.356 cv
606.846 567.356 li
673.407 499.496 li
716.907 499.496 li
735.924 518.945 li
751.896 518.945 li
774.081 497.768 li
1024.35 497.768 li
1050.72 471.834 li
1115.69 471.834 li
1115.69 468.377 li
1049.3 468.377 li
1022.94 494.31 li
772.695 494.31 li
750.512 515.49 li
737.379 515.49 li
cp
f
579.207 475.523 mo
577.857 476.875 575.668 476.875 574.317 475.523 cv
572.968 474.174 572.968 471.986 574.317 470.635 cv
575.668 469.285 577.857 469.285 579.207 470.635 cv
580.558 471.986 580.558 474.174 579.207 475.523 cv
cp
866.167 429.438 mo
867.518 428.086 869.705 428.086 871.056 429.438 cv
872.403 430.787 872.403 432.975 871.056 434.326 cv
869.705 435.678 867.518 435.678 866.167 434.326 cv
864.811 432.975 864.811 430.787 866.167 429.438 cv
cp
614.18 475.004 mo
655.889 433.584 li
861.552 433.584 li
862.587 434.756 864.341 435.852 865.592 436.471 cv
868.941 438.127 872.518 439.111 875.162 436.471 cv
877.803 433.828 877.799 429.545 875.158 426.904 cv
872.518 424.264 868.75 424.904 865.592 426.904 cv
864.169 427.809 862.42 428.945 861.442 430.127 cv
654.464 430.127 li
612.755 471.547 li
583.962 471.547 li
582.954 470.313 581.092 469.143 579.777 468.492 cv
576.431 466.838 572.854 465.852 570.213 468.492 cv
567.568 471.135 567.568 475.416 570.213 478.059 cv
572.854 480.699 576.621 480.06 579.777 478.059 cv
581.14 477.197 582.792 476.119 583.789 474.994 cv
583.789 475.004 li
614.18 475.004 li
cp
f
873.034 466.789 mo
873.434 464.922 875.271 463.73 877.139 464.129 cv
879.005 464.525 880.196 466.361 879.799 468.228 cv
879.402 470.098 877.565 471.289 875.699 470.893 cv
873.831 470.494 872.64 468.656 873.034 466.789 cv
cp
547.063 504.824 mo
545.713 506.174 543.522 506.174 542.172 504.824 cv
540.824 503.473 540.824 501.285 542.172 499.934 cv
543.522 498.582 545.713 498.584 547.063 499.934 cv
548.416 501.285 548.416 503.473 547.063 504.824 cv
cp
784.491 450.836 mo
665.489 450.836 li
615.93 499.783 li
550.745 499.783 li
549.764 498.967 548.563 498.25 547.636 497.791 cv
544.286 496.133 540.71 495.148 538.067 497.791 cv
535.425 500.432 535.429 504.713 538.07 507.355 cv
540.71 509.998 544.479 509.355 547.636 507.355 cv
549.419 506.228 551.705 504.728 552.354 503.24 cv
617.347 503.24 li
666.907 454.295 li
783.036 454.295 li
806.376 478.172 li
868.392 478.172 li
872.797 473.18 li
874.026 473.34 875.411 473.34 876.602 473.326 cv
880.331 473.287 883.844 471.773 884.624 468.117 cv
885.4 464.467 883.066 460.873 879.412 460.094 cv
875.76 459.316 873.299 462.092 871.39 465.305 cv
870.397 466.973 869.112 469.92 869.663 471.506 cv
866.832 474.715 li
807.831 474.715 li
784.491 450.836 li
cp
f
545.082 535.984 mo
543.172 535.984 541.623 534.44 541.623 532.527 cv
541.623 530.617 543.172 529.07 545.082 529.07 cv
546.99 529.07 548.54 530.617 548.54 532.527 cv
548.54 534.44 546.99 535.984 545.082 535.984 cv
cp
891.019 470.44 mo
891.417 468.572 893.254 467.381 895.121 467.779 cv
896.989 468.174 898.181 470.01 897.783 471.877 cv
897.388 473.744 895.551 474.94 893.683 474.541 cv
891.816 474.143 890.62 472.307 891.019 470.44 cv
cp
623.695 514.769 mo
663.171 475.004 li
740.165 475.004 li
751.688 485.377 li
883.095 485.377 li
890.591 476.807 li
891.862 476.994 893.331 476.992 894.582 476.977 cv
898.316 476.935 901.828 475.424 902.607 471.768 cv
903.385 468.117 901.051 464.523 897.397 463.744 cv
893.743 462.967 891.279 465.74 889.374 468.953 cv
888.417 470.563 887.177 473.367 887.585 474.99 cv
881.523 481.92 li
753.018 481.92 li
741.492 471.547 li
661.734 471.547 li
622.256 511.31 li
563.191 511.31 li
548.166 526.334 li
546.737 526.381 545.104 526.768 543.971 527.15 cv
540.43 528.348 537.205 530.178 537.205 533.914 cv
537.205 537.65 540.233 540.68 543.971 540.68 cv
547.706 540.68 549.918 537.559 550.736 533.914 cv
551.157 532.039 551.647 529.658 551.286 528.106 cv
564.623 514.769 li
623.695 514.769 li
cp
f
574.358 535.111 mo
572.456 534.959 571.035 533.297 571.185 531.393 cv
571.333 529.488 572.997 528.066 574.898 528.215 cv
576.803 528.363 578.225 530.029 578.076 531.934 cv
577.927 533.836 576.263 535.26 574.358 535.111 cv
cp
911.771 476.277 mo
912.167 474.408 914.005 473.219 915.875 473.615 cv
917.743 474.012 918.931 475.85 918.536 477.717 cv
918.138 479.584 916.301 480.775 914.433 480.379 cv
912.565 479.982 911.374 478.145 911.771 476.277 cv
cp
625.127 522.94 mo
666.918 481.055 li
736.38 481.055 li
747.624 492.01 li
902.29 490.85 li
911.24 482.625 li
912.536 482.826 914.05 482.83 915.335 482.815 cv
919.069 482.773 922.581 481.26 923.357 477.605 cv
924.137 473.953 921.805 470.359 918.147 469.582 cv
914.498 468.807 912.032 471.578 910.125 474.793 cv
909.208 476.338 908.026 478.99 908.296 480.635 cv
900.934 487.4 li
749.019 488.543 li
737.784 477.598 li
665.481 477.598 li
623.709 519.467 li
589.62 519.084 li
578.455 525.576 li
578.552 525.744 li
577.054 525.609 575.2 525.896 573.942 526.215 cv
570.32 527.133 566.962 528.705 566.67 532.43 cv
566.377 536.156 569.159 539.41 572.883 539.703 cv
576.61 539.994 579.056 537.059 580.156 533.486 cv
580.694 531.746 581.333 529.553 581.195 527.984 cv
590.536 522.553 li
625.127 522.94 li
cp
f
460.145 326.785 mo
458.233 326.752 456.714 325.176 456.749 323.268 cv
456.78 321.359 458.356 319.838 460.265 319.869 cv
462.175 319.906 463.696 321.478 463.66 323.389 cv
463.628 325.297 462.053 326.818 460.145 326.785 cv
cp
466.352 326.887 mo
466.395 325.381 465.995 323.549 465.602 322.31 cv
464.464 318.752 462.691 315.496 458.956 315.43 cv
455.219 315.363 452.14 318.34 452.075 322.074 cv
452.008 325.81 455.087 328.076 458.718 328.957 cv
460.473 329.381 462.669 329.877 464.223 329.662 cv
471.251 336.982 li
520.22 336.982 li
526.736 344 li
526.736 362.074 li
535.112 368.103 li
547.032 368.103 li
559.713 355.713 li
712.138 355.713 li
750.172 318.83 li
847.915 318.83 li
860.017 305.576 li
881.146 305.576 li
970.327 217.404 li
1117.15 217.404 li
1117.15 213.945 li
968.906 213.945 li
879.724 302.119 li
858.49 302.119 li
846.389 315.371 li
748.772 315.371 li
710.736 352.256 li
558.304 352.256 li
545.625 364.645 li
536.227 364.645 li
530.195 360.303 li
530.195 342.643 li
521.727 333.525 li
472.724 333.525 li
466.352 326.887 li
cp
f
546.012 478.398 mo
544.101 478.365 542.581 476.789 542.614 474.879 cv
542.649 472.973 544.222 471.451 546.133 471.482 cv
548.041 471.518 549.563 473.092 549.529 475.002 cv
549.496 476.91 547.919 478.432 546.012 478.398 cv
cp
885.116 437.113 mo
885.515 435.244 887.352 434.053 889.22 434.449 cv
891.087 434.846 892.278 436.684 891.88 438.551 cv
891.485 440.42 889.647 441.609 887.78 441.213 cv
885.913 440.816 884.722 438.98 885.116 437.113 cv
cp
551.469 473.924 mo
550.331 470.365 548.558 467.109 544.823 467.043 cv
541.086 466.977 538.005 469.951 537.94 473.688 cv
537.875 477.422 540.956 479.688 544.586 480.568 cv
546.226 480.969 548.245 481.42 549.772 481.305 cv
558.23 490.852 li
610.154 490.852 li
662.021 438.697 li
857.171 438.697 li
866.967 447.199 li
881.151 447.199 li
884.852 443.498 li
886.087 443.662 887.483 443.662 888.683 443.65 cv
892.417 443.607 895.926 442.094 896.705 438.44 cv
897.481 434.785 895.149 431.195 891.496 430.416 cv
887.842 429.639 885.38 432.412 883.473 435.625 cv
882.498 437.264 881.237 440.141 881.716 441.744 cv
879.721 443.74 li
868.255 443.74 li
858.461 435.24 li
660.583 435.24 li
608.716 487.395 li
559.786 487.395 li
552.19 478.816 li
552.311 477.26 551.892 475.254 551.469 473.924 cv
cp
f
515.324 503.131 mo
517.234 503.166 518.755 504.74 518.721 506.648 cv
518.688 508.559 517.114 510.08 515.204 510.045 cv
513.295 510.012 511.774 508.435 511.808 506.527 cv
511.839 504.619 513.415 503.098 515.324 503.131 cv
cp
754.502 465.897 mo
755.853 464.547 758.04 464.547 759.392 465.897 cv
760.742 467.248 760.742 469.438 759.392 470.785 cv
758.04 472.137 755.853 472.137 754.502 470.785 cv
753.15 469.438 753.15 467.248 754.502 465.897 cv
cp
513.776 512.217 mo
515.837 512.717 518.509 513.316 520.028 512.74 cv
528.36 520.533 li
549.581 520.533 li
562.546 509.006 li
619.36 509.006 li
659.414 469.818 li
749.702 469.818 li
750.7 471.076 752.597 472.272 753.932 472.93 cv
757.277 474.586 760.853 475.572 763.497 472.93 cv
766.138 470.287 766.138 466.006 763.497 463.365 cv
760.853 460.721 757.089 461.363 753.932 463.365 cv
752.595 464.209 750.978 465.262 749.976 466.361 cv
658.003 466.361 li
617.948 505.547 li
561.234 505.547 li
548.268 517.076 li
529.724 517.076 li
521.394 509.279 li
521.306 507.98 520.981 506.58 520.661 505.572 cv
519.524 502.012 517.752 498.754 514.014 498.69 cv
510.279 498.625 507.199 501.602 507.13 505.336 cv
507.068 509.07 510.148 511.334 513.776 512.217 cv
cp
f
1038.45 540.959 mo
1039.8 539.609 1041.98 539.609 1043.33 540.959 cv
1044.69 542.31 1044.69 544.498 1043.33 545.848 cv
1041.98 547.199 1039.8 547.199 1038.45 545.848 cv
1037.09 544.498 1037.09 542.31 1038.45 540.959 cv
cp
899.605 545.809 mo
898.255 547.16 896.067 547.16 894.716 545.809 cv
893.365 544.457 893.365 542.269 894.716 540.918 cv
896.067 539.568 898.255 539.568 899.605 540.918 cv
900.957 542.269 900.957 544.457 899.605 545.809 cv
cp
900.176 538.387 mo
897.019 536.385 893.254 535.746 890.61 538.387 cv
887.97 541.027 887.97 545.31 890.61 547.953 cv
893.254 550.592 896.83 549.609 900.176 547.953 cv
901.497 547.303 903.371 546.123 904.376 544.879 cv
1033.64 544.879 li
1034.64 546.137 1036.54 547.332 1037.88 547.992 cv
1041.22 549.646 1044.8 550.633 1047.44 547.992 cv
1050.08 545.35 1050.08 541.068 1047.44 538.428 cv
1044.8 535.783 1041.03 536.424 1037.88 538.428 cv
1036.54 539.271 1034.92 540.324 1033.92 541.422 cv
904.164 541.422 li
903.165 540.309 901.527 539.242 900.176 538.387 cv
cp
f
722.785 519.592 mo
724.136 518.244 726.324 518.244 727.675 519.592 cv
729.024 520.943 729.024 523.135 727.675 524.482 cv
726.324 525.832 724.136 525.832 722.785 524.482 cv
721.435 523.135 721.435 520.943 722.785 519.592 cv
cp
728.245 526.627 mo
729.313 526.1 730.743 525.229 731.782 524.258 cv
755.524 524.258 li
776.271 503.24 li
1028.56 503.24 li
1052.04 478.768 li
1115.69 478.768 li
1115.69 475.31 li
1050.57 475.31 li
1027.08 499.783 li
774.826 499.783 li
754.079 520.801 li
732.766 520.801 li
731.933 519.441 729.88 518.096 728.245 517.06 cv
725.088 515.06 721.322 514.42 718.679 517.06 cv
716.038 519.703 716.038 523.984 718.679 526.627 cv
721.322 529.269 724.897 528.283 728.245 526.627 cv
cp
f
719.448 561.85 mo
718.098 563.201 715.909 563.201 714.56 561.85 cv
713.212 560.5 713.212 558.31 714.56 556.959 cv
715.909 555.609 718.098 555.609 719.448 556.959 cv
720.804 558.31 720.804 560.5 719.448 561.85 cv
cp
724.253 560.881 mo
732.472 560.881 li
732.472 557.424 li
723.976 557.424 li
722.974 556.324 721.356 555.273 720.022 554.428 cv
716.865 552.428 713.098 551.785 710.457 554.428 cv
707.815 557.07 707.811 561.352 710.453 563.994 cv
713.098 566.637 716.672 565.65 720.022 563.994 cv
721.354 563.336 723.255 562.139 724.253 560.881 cv
cp
f
671.823 628.996 mo
670.469 630.34 668.282 630.334 666.935 628.979 cv
665.589 627.625 665.597 625.434 666.951 624.09 cv
668.305 622.744 670.493 622.75 671.841 624.104 cv
673.188 625.459 673.181 627.65 671.823 628.996 cv
cp
672.421 621.574 mo
669.267 619.563 665.505 618.91 662.854 621.545 cv
660.204 624.174 660.186 628.461 662.821 631.109 cv
665.459 633.76 669.034 632.785 672.391 631.141 cv
673.484 630.606 674.96 629.707 676.01 628.711 cv
683.997 628.711 li
683.997 625.254 li
676.886 625.254 li
676.028 623.914 674.021 622.594 672.421 621.574 cv
cp
f
601.095 622.848 mo
602.449 621.502 604.638 621.512 605.984 622.865 cv
607.332 624.219 607.324 626.406 605.967 627.754 cv
604.612 629.098 602.426 629.094 601.078 627.738 cv
599.735 626.383 599.741 624.195 601.095 622.848 cv
cp
732.054 617.359 mo
733.337 615.945 735.521 615.832 736.935 617.115 cv
738.354 618.394 738.466 620.58 737.183 621.998 cv
735.902 623.412 733.719 623.523 732.3 622.242 cv
730.882 620.963 730.771 618.775 732.054 617.359 cv
cp
606.535 629.898 mo
607.221 629.563 608.058 629.084 608.845 628.529 cv
609.479 629.264 610.406 629.738 611.451 629.738 cv
631.911 629.738 li
632.891 629.738 633.825 629.324 634.481 628.596 cv
649.299 612.16 li
691.313 612.16 li
702.269 622.719 li
702.899 623.33 703.74 623.676 704.622 623.688 cv
726.664 623.977 li
726.682 623.977 726.695 623.977 726.712 623.977 cv
727.608 623.977 728.421 623.627 729.036 623.063 cv
729.935 623.703 730.958 624.295 731.857 624.803 cv
735.113 626.641 738.905 627.09 741.411 624.32 cv
743.916 621.547 743.704 617.269 740.932 614.764 cv
738.155 612.262 734.637 613.426 731.375 615.248 cv
730.45 615.766 729.249 616.568 728.297 617.461 cv
727.833 617.221 727.315 617.068 726.755 617.06 cv
706.08 616.791 li
695.108 606.215 li
694.464 605.592 693.602 605.244 692.709 605.244 cv
647.758 605.244 li
646.779 605.244 645.847 605.66 645.19 606.387 cv
630.374 622.824 li
611.451 622.824 li
611.021 622.824 610.614 622.912 610.233 623.057 cv
609.229 622.059 607.78 621.109 606.565 620.332 cv
603.411 618.324 599.649 617.67 596.999 620.303 cv
594.348 622.935 594.331 627.217 596.964 629.867 cv
599.602 632.519 603.179 631.545 606.535 629.898 cv
cp
f
689.162 555.109 mo
690.445 553.693 692.63 553.582 694.049 554.861 cv
695.464 556.143 695.575 558.328 694.295 559.746 cv
693.016 561.162 690.831 561.271 689.412 559.992 cv
687.992 558.713 687.883 556.525 689.162 555.109 cv
cp
688.968 562.553 mo
692.226 564.391 696.018 564.84 698.519 562.068 cv
701.024 559.299 700.813 555.019 698.04 552.514 cv
695.269 550.012 691.746 551.174 688.483 552.998 cv
687.394 553.606 685.927 554.613 684.931 555.693 cv
675.942 555.975 li
676.051 559.43 li
684.351 559.172 li
685.297 560.443 687.339 561.635 688.968 562.553 cv
cp
f
691.662 654.447 mo
693.553 654.715 694.869 656.461 694.602 658.352 cv
694.339 660.244 692.589 661.56 690.699 661.295 cv
688.808 661.029 687.494 659.281 687.759 657.391 cv
688.021 655.498 689.771 654.18 691.662 654.447 cv
cp
685.389 658.459 mo
685.695 662.184 687.448 665.576 691.144 666.098 cv
694.847 666.617 698.267 664.043 698.79 660.342 cv
699.307 656.641 696.368 654.379 693.029 652.701 cv
691.347 651.854 688.438 650.813 686.856 651.35 cv
654.528 651.35 li
654.528 654.809 li
685.267 654.809 li
685.208 656.006 685.296 657.322 685.389 658.459 cv
cp
f
512.849 531.971 mo
514.76 531.99 516.289 533.553 516.271 535.465 cv
516.253 537.375 514.69 538.906 512.78 538.887 cv
510.87 538.865 509.339 537.303 509.361 535.394 cv
509.378 533.486 510.941 531.949 512.849 531.971 cv
cp
743.031 499.041 mo
744.939 499.094 746.444 500.682 746.394 502.592 cv
746.339 504.5 744.753 506.004 742.846 505.953 cv
740.934 505.902 739.429 504.31 739.482 502.404 cv
739.533 500.496 741.124 498.99 743.031 499.041 cv
cp
511.652 540.793 mo
512.576 541.119 513.839 541.449 515.051 541.594 cv
515.23 542.252 515.602 542.863 516.165 543.334 cv
526.25 551.754 li
526.872 552.269 527.656 552.557 528.467 552.557 cv
592.434 552.557 li
593.321 552.557 594.172 552.217 594.815 551.606 cv
615.713 531.768 li
628.74 531.768 li
629.647 531.768 630.521 531.412 631.168 530.773 cv
669.922 492.58 li
727.935 492.58 li
734.428 498.68 li
735.102 499.315 735.97 499.619 736.833 499.609 cv
736.892 500.947 737.208 502.418 737.531 503.465 cv
738.63 507.033 740.374 510.307 744.112 510.41 cv
747.847 510.51 750.954 507.565 751.058 503.83 cv
751.155 500.094 748.1 497.801 744.477 496.885 cv
743.165 496.553 741.605 496.185 740.247 496.102 cv
740.231 495.199 739.87 494.305 739.161 493.639 cv
731.672 486.602 li
731.031 486 730.183 485.666 729.305 485.666 cv
668.504 485.666 li
667.596 485.666 666.725 486.023 666.077 486.66 cv
627.321 524.852 li
614.335 524.852 li
613.447 524.852 612.596 525.193 611.954 525.803 cv
591.056 545.641 li
529.72 545.641 li
520.599 538.025 li
520.133 537.639 519.594 537.408 519.038 537.301 cv
518.92 536.223 518.692 535.092 518.48 534.1 cv
517.698 530.44 515.523 527.303 511.785 527.268 cv
508.051 527.232 504.992 530.227 504.95 533.965 cv
504.92 537.699 508.125 539.563 511.652 540.793 cv
cp
f
513.504 565.568 mo
514.996 564.379 517.167 564.623 518.36 566.115 cv
519.555 567.609 519.31 569.787 517.813 570.975 cv
516.321 572.164 514.144 571.92 512.958 570.428 cv
511.765 568.935 512.008 566.758 513.504 565.568 cv
cp
518.144 573.168 mo
519.534 572.666 521.536 571.701 522.672 570.572 cv
547.918 570.572 li
557.279 579.975 li
557.279 609.135 li
621.325 672.799 li
621.831 673.301 li
658.114 673.301 li
673.457 689.24 li
755.039 689.24 li
758.994 685.65 li
756.666 683.09 li
753.702 685.783 li
674.931 685.783 li
659.586 669.844 li
623.256 669.844 li
560.737 607.697 li
560.737 578.545 li
549.354 567.115 li
522.829 567.115 li
521.959 565.9 520.455 564.66 519.214 563.662 cv
516.296 561.32 512.629 560.262 509.709 562.594 cv
506.787 564.924 506.305 569.176 508.635 572.1 cv
510.968 575.016 514.63 574.44 518.144 573.168 cv
cp
f
739.918 586.838 mo
738.021 586.619 736.662 584.904 736.879 583.008 cv
737.098 581.111 738.814 579.75 740.711 579.969 cv
742.608 580.188 743.967 581.902 743.751 583.799 cv
743.53 585.699 741.815 587.059 739.918 586.838 cv
cp
746.091 582.676 mo
745.695 578.957 743.856 575.607 740.144 575.18 cv
736.433 574.754 733.076 577.412 732.647 581.121 cv
732.223 584.836 735.217 587.023 738.595 588.619 cv
739.306 588.955 740.233 589.322 741.186 589.594 cv
741.316 590.295 741.653 590.965 742.214 591.49 cv
751.724 600.389 li
752.388 601.014 753.235 601.322 754.084 601.322 cv
755.005 601.322 755.927 600.955 756.609 600.229 cv
757.913 598.832 757.841 596.644 756.446 595.342 cv
746.938 586.44 li
746.743 586.258 746.528 586.109 746.307 585.981 cv
746.307 584.877 746.198 583.703 746.091 582.676 cv
cp
f
711.077 644.098 mo
709.727 645.447 707.539 645.447 706.188 644.098 cv
704.837 642.748 704.837 640.559 706.188 639.207 cv
707.539 637.857 709.727 637.857 711.077 639.207 cv
712.429 640.559 712.429 642.748 711.077 644.098 cv
cp
711.648 636.676 mo
708.491 634.674 704.726 634.033 702.082 636.676 cv
699.442 639.316 699.442 643.598 702.082 646.242 cv
704.726 648.881 708.302 647.896 711.648 646.242 cv
712.72 645.711 714.159 644.834 715.2 643.857 cv
723.541 643.857 li
723.541 640.4 li
716.16 640.4 li
715.321 639.045 713.276 637.705 711.648 636.676 cv
cp
f
1068.92 234.074 mo
1067.57 235.424 1065.38 235.424 1064.03 234.074 cv
1062.68 232.725 1062.68 230.535 1064.03 229.186 cv
1065.38 227.836 1067.57 227.836 1068.92 229.186 cv
1070.27 230.535 1070.27 232.725 1068.92 234.074 cv
cp
1063.46 226.652 mo
1061.93 227.619 1060.03 228.859 1059.11 230.129 cv
1049.96 230.369 li
1050.06 233.826 li
1059.64 233.574 li
1060.69 234.654 1062.29 235.643 1063.46 236.219 cv
1066.81 237.875 1070.38 238.861 1073.03 236.219 cv
1075.67 233.578 1075.67 229.295 1073.03 226.652 cv
1070.38 224.012 1066.61 224.652 1063.46 226.652 cv
cp
f
1011.66 445.717 mo
1010.31 447.065 1008.12 447.065 1006.77 445.717 cv
1005.42 444.365 1005.42 442.178 1006.77 440.826 cv
1008.12 439.477 1010.31 439.477 1011.66 440.826 cv
1013.01 442.178 1013.01 444.365 1011.66 445.717 cv
cp
579.049 384.838 mo
577.697 386.185 575.51 386.185 574.159 384.838 cv
572.808 383.486 572.808 381.297 574.159 379.947 cv
575.51 378.598 577.697 378.598 579.049 379.947 cv
580.398 381.297 580.398 383.486 579.049 384.838 cv
cp
1006.2 438.295 mo
1004.75 439.213 1002.96 440.377 1002 441.58 cv
991.063 441.58 li
928.392 380.637 li
583.789 380.637 li
583.789 380.838 li
582.776 379.609 580.927 378.447 579.619 377.805 cv
576.269 376.147 572.696 375.162 570.052 377.805 cv
567.409 380.445 567.409 384.728 570.055 387.369 cv
572.696 390.01 576.462 389.369 579.619 387.369 cv
581.067 386.453 582.847 385.293 583.813 384.096 cv
926.988 384.096 li
989.66 445.037 li
1002.22 445.037 li
1003.26 446.185 1004.97 447.25 1006.2 447.859 cv
1009.54 449.516 1013.12 450.5 1015.77 447.859 cv
1018.41 445.217 1018.41 440.935 1015.77 438.295 cv
1013.12 435.652 1009.36 436.291 1006.2 438.295 cv
cp
f
969.207 79.2754 mo
970.557 77.9277 972.745 77.9277 974.097 79.2754 cv
975.448 80.627 975.448 82.8145 974.097 84.1641 cv
972.745 85.5156 970.557 85.5156 969.207 84.1641 cv
967.856 82.8145 967.856 80.627 969.207 79.2754 cv
cp
974.666 86.6992 mo
976.001 85.8535 977.617 84.8008 978.62 83.7031 cv
999.731 83.7031 li
1010.04 73.1816 li
1007.57 70.7637 li
998.28 80.2461 li
978.896 80.2461 li
977.899 78.9883 976.001 77.791 974.666 77.1309 cv
971.317 75.4766 967.745 74.4922 965.101 77.1309 cv
962.456 79.7754 962.46 84.0586 965.101 86.6992 cv
967.745 89.3398 971.51 88.6992 974.666 86.6992 cv
cp
f
575.078 409.49 mo
576.425 408.141 578.616 408.141 579.964 409.49 cv
581.315 410.842 581.315 413.029 579.964 414.381 cv
578.616 415.73 576.425 415.73 575.078 414.381 cv
573.727 413.029 573.727 410.842 575.078 409.49 cv
cp
580.538 416.912 mo
582.046 415.957 583.912 414.738 584.847 413.486 cv
606.403 413.486 li
624.988 394.9 li
922.216 394.9 li
993.532 466.648 li
1115.69 466.648 li
1115.69 463.19 li
994.971 463.19 li
923.655 391.441 li
623.557 391.441 li
604.971 410.027 li
584.394 410.027 li
583.344 408.934 581.719 407.93 580.538 407.348 cv
577.188 405.691 573.611 404.707 570.969 407.348 cv
568.328 409.99 568.328 414.272 570.969 416.912 cv
573.611 419.555 577.38 418.914 580.538 416.912 cv
cp
f
515.043 408.842 mo
516.952 408.842 518.5 410.389 518.5 412.299 cv
518.5 414.209 516.952 415.756 515.043 415.756 cv
513.133 415.756 511.585 414.209 511.585 412.299 cv
511.585 410.389 513.133 408.842 515.043 408.842 cv
cp
513.931 420.449 mo
517.669 420.449 519.878 417.332 520.696 413.684 cv
520.926 412.662 521.171 411.49 521.296 410.381 cv
521.315 410.4 li
529.891 402.031 li
553.342 402.031 li
561.17 392.492 li
561.17 377.065 li
568.911 369.832 li
583.072 369.832 li
591.718 378.475 li
931.15 378.475 li
986.623 433.584 li
1019.91 433.584 li
1033.74 447.199 li
1115.69 447.199 li
1115.69 443.74 li
1035.16 443.74 li
1021.33 430.127 li
988.05 430.127 li
932.577 375.018 li
593.149 375.018 li
584.505 366.373 li
567.546 366.373 li
557.711 375.565 li
557.711 391.256 li
551.708 398.574 li
528.48 398.574 li
520.344 406.518 li
518.899 405.66 515.766 406.301 513.931 406.922 cv
510.392 408.119 507.166 409.949 507.166 413.684 cv
507.166 417.42 510.195 420.449 513.931 420.449 cv
cp
f
545.387 410.268 mo
547.299 410.268 548.845 411.815 548.845 413.725 cv
548.845 415.637 547.299 417.184 545.387 417.184 cv
543.477 417.184 541.929 415.637 541.929 413.725 cv
541.929 411.815 543.477 410.268 545.387 410.268 cv
cp
544.276 421.877 mo
548.011 421.877 550.222 418.758 551.042 415.111 cv
551.315 413.898 551.62 412.471 551.705 411.191 cv
558.269 408.238 li
567.481 399.232 li
596.453 399.666 li
606.403 389.713 li
923.962 389.713 li
995.71 459.732 li
1117.15 459.732 li
1117.15 456.275 li
997.117 456.275 li
925.369 386.256 li
604.971 386.256 li
595.041 396.185 li
566.095 395.754 li
556.29 405.334 li
550.61 407.893 li
549.13 407.107 546.073 407.738 544.276 408.35 cv
540.737 409.545 537.511 411.375 537.511 415.111 cv
537.511 418.848 540.539 421.877 544.276 421.877 cv
cp
f
774.31 209.998 mo
772.397 209.998 770.852 208.451 770.852 206.541 cv
770.852 204.629 772.397 203.082 774.31 203.082 cv
776.222 203.082 777.768 204.629 777.768 206.541 cv
777.768 208.451 776.222 209.998 774.31 209.998 cv
cp
773.199 201.164 mo
769.66 202.359 766.432 204.191 766.432 207.928 cv
766.432 211.664 769.461 214.691 773.199 214.691 cv
776.934 214.691 779.146 211.574 779.963 207.928 cv
780.365 206.131 780.839 203.867 780.563 202.314 cv
839.085 144.357 li
839.085 71.9727 li
835.628 71.9727 li
835.628 142.916 li
777.646 200.338 li
776.163 200.34 774.399 200.758 773.199 201.164 cv
cp
f
1045.88 425.848 mo
1045.91 423.94 1047.48 422.416 1049.39 422.451 cv
1051.3 422.484 1052.82 424.059 1052.79 425.969 cv
1052.75 427.877 1051.18 429.4 1049.27 429.367 cv
1047.36 429.332 1045.84 427.756 1045.88 425.848 cv
cp
1054.73 424.891 mo
1053.59 421.332 1051.82 418.074 1048.08 418.008 cv
1044.34 417.943 1041.27 420.918 1041.2 424.656 cv
1041.14 428.391 1044.21 430.654 1047.85 431.535 cv
1049.25 431.875 1050.93 432.256 1052.34 432.289 cv
1057.68 435.961 li
1120.89 435.961 li
1120.89 432.502 li
1058.76 432.502 li
1055.41 430.199 li
1055.65 428.602 1055.19 426.34 1054.73 424.891 cv
cp
f
1064.01 421.094 mo
1064.04 419.185 1065.62 417.662 1067.53 417.697 cv
1069.43 417.73 1070.96 419.305 1070.92 421.215 cv
1070.89 423.123 1069.32 424.647 1067.41 424.611 cv
1065.5 424.578 1063.98 423 1064.01 421.094 cv
cp
1072.86 420.137 mo
1071.73 416.578 1069.95 413.32 1066.22 413.254 cv
1062.48 413.188 1059.4 416.164 1059.33 419.9 cv
1059.27 423.637 1062.35 425.9 1065.98 426.781 cv
1067.48 427.147 1069.32 427.57 1070.79 427.547 cv
1076.28 431.207 li
1120.89 431.207 li
1120.89 427.748 li
1077.33 427.748 li
1073.56 425.236 li
1073.74 423.654 1073.3 421.525 1072.86 420.137 cv
cp
f
516.36 478.732 mo
514.449 478.697 512.93 477.121 512.964 475.215 cv
512.997 473.305 514.57 471.783 516.482 471.816 cv
518.39 471.852 519.913 473.424 519.877 475.334 cv
519.845 477.244 518.269 478.766 516.36 478.732 cv
cp
903.411 443.92 mo
903.807 442.051 905.644 440.859 907.516 441.258 cv
909.379 441.654 910.57 443.492 910.171 445.359 cv
909.776 447.227 907.939 448.418 906.072 448.02 cv
904.204 447.623 903.014 445.787 903.411 443.92 cv
cp
521.817 474.256 mo
520.682 470.697 518.906 467.441 515.171 467.373 cv
511.435 467.31 508.353 470.285 508.289 474.022 cv
508.224 477.756 511.304 480.02 514.935 480.9 cv
516.331 481.24 518.006 481.619 519.419 481.656 cv
528.613 490.852 li
549.359 490.852 li
555.411 496.902 li
613.602 496.902 li
666.045 445.037 li
853.403 445.037 li
863.63 454.293 li
898.918 454.293 li
902.645 450.221 li
903.991 450.463 905.608 450.471 906.974 450.457 cv
910.708 450.414 914.221 448.902 914.997 445.246 cv
915.773 441.594 913.443 438 909.787 437.225 cv
906.133 436.445 903.671 439.219 901.763 442.432 cv
900.88 443.92 899.766 446.424 899.921 448.076 cv
897.394 450.834 li
864.965 450.834 li
854.736 441.58 li
664.625 441.58 li
612.181 493.445 li
556.842 493.445 li
550.791 487.395 li
530.045 487.395 li
522.456 479.803 li
522.795 478.201 522.304 475.779 521.817 474.256 cv
cp
f
783.987 131.008 mo
785.325 132.371 785.302 134.561 783.938 135.896 cv
782.573 137.234 780.385 137.211 779.049 135.846 cv
777.71 134.482 777.733 132.291 779.098 130.955 cv
780.462 129.619 782.65 129.643 783.987 131.008 cv
cp
776.961 130.363 mo
775.269 133.695 774.246 137.258 776.859 139.928 cv
779.473 142.6 783.758 142.645 786.429 140.029 cv
789.096 137.416 788.492 133.639 786.527 130.461 cv
785.597 128.963 784.415 127.109 783.188 126.15 cv
783.188 71.9727 li
779.729 71.9727 li
779.729 126.492 li
778.606 127.529 777.563 129.172 776.961 130.363 cv
cp
f
797.539 92.7383 mo
798.903 91.4023 801.089 91.4258 802.428 92.7891 cv
803.764 94.1543 803.741 96.3438 802.377 97.6797 cv
801.013 99.0156 798.824 98.9922 797.487 97.6309 cv
796.154 96.2656 796.175 94.0762 797.539 92.7383 cv
cp
804.869 101.813 mo
807.536 99.1953 806.932 95.4219 804.967 92.2441 cv
804.111 90.8613 803.038 89.1777 801.914 88.1719 cv
801.914 71.9727 li
798.457 71.9727 li
798.457 88.0234 li
797.225 89.0273 796.055 90.8535 795.4 92.1445 cv
793.713 95.4785 792.685 99.043 795.303 101.711 cv
797.916 104.381 802.198 104.426 804.869 101.813 cv
cp
f
1030.07 92.7383 mo
1031.44 91.4023 1033.62 91.4258 1034.96 92.7891 cv
1036.3 94.1543 1036.27 96.3438 1034.91 97.6797 cv
1033.55 99.0156 1031.36 98.9922 1030.02 97.6309 cv
1028.69 96.2656 1028.71 94.0762 1030.07 92.7383 cv
cp
1037.4 101.813 mo
1040.07 99.1953 1039.46 95.4219 1037.5 92.2441 cv
1036.64 90.8613 1035.57 89.1777 1034.45 88.1719 cv
1034.45 71.9727 li
1030.99 71.9727 li
1030.99 88.0234 li
1029.76 89.0293 1028.59 90.8535 1027.93 92.1445 cv
1026.25 95.4785 1025.22 99.043 1027.84 101.711 cv
1030.45 104.381 1034.73 104.426 1037.4 101.813 cv
cp
f
1060.91 92.4316 mo
1062.27 91.0938 1064.46 91.1172 1065.79 92.4824 cv
1067.13 93.8477 1067.11 96.0352 1065.74 97.3711 cv
1064.38 98.709 1062.19 98.6855 1060.85 97.3203 cv
1059.52 95.957 1059.54 93.7676 1060.91 92.4316 cv
cp
1068.23 101.506 mo
1070.9 98.8887 1070.3 95.1133 1068.33 91.9375 cv
1067.48 90.5547 1066.4 88.873 1065.28 87.8672 cv
1065.28 71.9727 li
1061.82 71.9727 li
1061.82 87.7168 li
1060.59 88.7207 1059.42 90.5469 1058.77 91.8379 cv
1057.08 95.1699 1056.05 98.7344 1058.67 101.404 cv
1061.28 104.074 1065.56 104.119 1068.23 101.506 cv
cp
f
1046.21 108.441 mo
1047.57 107.107 1049.76 107.131 1051.1 108.494 cv
1052.44 109.859 1052.41 112.047 1051.05 113.385 cv
1049.68 114.721 1047.5 114.697 1046.16 113.334 cv
1044.82 111.967 1044.84 109.779 1046.21 108.441 cv
cp
1053.54 117.516 mo
1056.21 114.9 1055.6 111.125 1053.64 107.947 cv
1052.78 106.564 1051.71 104.885 1050.59 103.879 cv
1050.59 71.9727 li
1047.13 71.9727 li
1047.13 103.727 li
1045.9 104.73 1044.73 106.559 1044.07 107.85 cv
1042.38 111.18 1041.36 114.744 1043.97 117.416 cv
1046.58 120.084 1050.87 120.131 1053.54 117.516 cv
cp
f
1075.31 108.441 mo
1076.67 107.107 1078.87 107.131 1080.2 108.494 cv
1081.54 109.859 1081.52 112.047 1080.15 113.385 cv
1078.79 114.721 1076.6 114.697 1075.26 113.334 cv
1073.92 111.967 1073.95 109.779 1075.31 108.441 cv
cp
1082.64 117.516 mo
1085.31 114.9 1084.71 111.125 1082.74 107.947 cv
1081.88 106.564 1080.81 104.885 1079.69 103.879 cv
1079.69 71.9727 li
1076.23 71.9727 li
1076.23 103.727 li
1075 104.73 1073.83 106.559 1073.18 107.85 cv
1071.48 111.18 1070.46 114.744 1073.07 117.416 cv
1075.69 120.084 1079.97 120.131 1082.64 117.516 cv
cp
f
834.284 208.053 mo
836.194 208.053 837.741 209.6 837.741 211.512 cv
837.741 213.42 836.194 214.969 834.284 214.969 cv
832.372 214.969 830.826 213.42 830.826 211.512 cv
830.826 209.6 832.372 208.053 834.284 208.053 cv
cp
833.172 219.662 mo
836.907 219.662 839.119 216.543 839.936 212.896 cv
840.226 211.611 840.544 210.09 840.604 208.758 cv
868.023 208.758 li
899.596 178.27 li
899.596 155.592 li
929.129 126.061 li
977.249 126.061 li
996.273 145.078 li
1101.75 145.078 li
1116.95 128.977 li
1114.43 126.602 li
1100.26 141.621 li
997.706 141.621 li
978.682 122.602 li
927.696 122.602 li
896.138 154.16 li
896.138 176.803 li
866.626 205.299 li
837.356 205.299 li
837.356 205.316 li
835.931 205.365 834.304 205.75 833.172 206.133 cv
829.634 207.33 826.406 209.16 826.406 212.896 cv
826.406 216.633 829.435 219.662 833.172 219.662 cv
cp
f
1101.1 404.81 mo
1103 404.842 1104.53 406.418 1104.49 408.33 cv
1104.46 410.238 1102.88 411.758 1100.98 411.727 cv
1099.06 411.691 1097.54 410.115 1097.58 408.207 cv
1097.61 406.301 1099.19 404.777 1101.1 404.81 cv
cp
1099.55 413.895 mo
1101.97 414.482 1105.24 415.219 1106.48 414.016 cv
1106.49 414.01 1106.49 414.002 1106.5 413.996 cv
1110.45 416.512 li
1117.15 416.512 li
1117.15 413.053 li
1111.45 413.053 li
1107.12 410.297 li
1107.1 410.336 li
1106.97 409.225 1106.7 408.098 1106.43 407.248 cv
1105.29 403.691 1103.52 400.435 1099.79 400.369 cv
1096.05 400.303 1092.97 403.277 1092.91 407.016 cv
1092.84 410.748 1095.92 413.012 1099.55 413.895 cv
cp
f
711.075 188.412 mo
712.401 187.037 714.589 187 715.964 188.326 cv
717.338 189.652 717.376 191.84 716.049 193.217 cv
714.722 194.592 712.533 194.627 711.158 193.301 cv
709.788 191.973 709.747 189.785 711.075 188.412 cv
cp
710.625 195.455 mo
714.001 197.053 717.595 197.975 720.191 195.287 cv
722.785 192.6 722.711 188.316 720.025 185.721 cv
717.338 183.125 713.579 183.834 710.459 185.889 cv
708.864 186.936 706.864 188.295 706.034 189.654 cv
698.04 189.654 li
698.04 193.111 li
706.971 193.111 li
706.971 193.074 li
708.034 194.057 709.522 194.932 710.625 195.455 cv
cp
f
483.988 317.414 mo
485.899 317.414 487.446 318.961 487.446 320.873 cv
487.446 322.781 485.899 324.33 483.988 324.33 cv
482.077 324.33 480.53 322.781 480.53 320.873 cv
480.53 318.961 482.077 317.414 483.988 317.414 cv
cp
482.902 329.027 mo
487.101 329.027 490.505 325.623 490.505 321.424 cv
490.505 317.223 487.101 313.818 482.902 313.818 cv
478.703 313.818 475.299 317.223 475.299 321.424 cv
475.299 325.623 478.703 329.027 482.902 329.027 cv
cp
f
509.213 351.5 mo
509.213 349.59 510.759 348.039 512.67 348.039 cv
514.582 348.039 516.127 349.59 516.127 351.5 cv
516.127 353.408 514.582 354.957 512.67 354.957 cv
510.759 354.957 509.213 353.408 509.213 351.5 cv
cp
519.186 352.051 mo
519.186 347.85 515.784 344.445 511.585 344.445 cv
507.387 344.445 503.981 347.85 503.981 352.051 cv
503.981 356.25 507.387 359.654 511.585 359.654 cv
515.784 359.654 519.186 356.25 519.186 352.051 cv
cp
f
484.429 395.18 mo
484.429 397.088 482.88 398.637 480.971 398.637 cv
479.061 398.637 477.513 397.088 477.513 395.18 cv
477.513 393.27 479.061 391.719 480.971 391.719 cv
482.88 391.719 484.429 393.27 484.429 395.18 cv
cp
472.282 395.73 mo
472.282 399.93 475.686 403.336 479.885 403.336 cv
484.087 403.336 487.489 399.93 487.489 395.73 cv
487.489 391.529 484.087 388.125 479.885 388.125 cv
475.686 388.125 472.282 391.529 472.282 395.73 cv
cp
f
758.03 332.397 mo
758.03 330.488 759.581 328.94 761.489 328.94 cv
763.399 328.94 764.946 330.488 764.946 332.397 cv
764.946 334.307 763.399 335.855 761.489 335.855 cv
759.581 335.855 758.03 334.307 758.03 332.397 cv
cp
768.01 332.949 mo
768.01 328.748 764.604 325.344 760.404 325.344 cv
756.203 325.344 752.801 328.748 752.801 332.949 cv
752.801 337.148 756.203 340.553 760.404 340.553 cv
764.604 340.553 768.01 337.148 768.01 332.949 cv
cp
f
853.821 461.063 mo
853.821 459.152 855.368 457.605 857.278 457.605 cv
859.186 457.605 860.736 459.152 860.736 461.063 cv
860.736 462.973 859.186 464.52 857.278 464.52 cv
855.368 464.52 853.821 462.973 853.821 461.063 cv
cp
863.796 461.617 mo
863.796 457.414 860.392 454.01 856.191 454.01 cv
851.991 454.01 848.588 457.414 848.588 461.617 cv
848.588 465.815 851.991 469.219 856.191 469.219 cv
860.392 469.219 863.796 465.815 863.796 461.617 cv
cp
f
1063.02 516.955 mo
1063.02 515.043 1064.56 513.494 1066.48 513.494 cv
1068.38 513.494 1069.93 515.043 1069.93 516.955 cv
1069.93 518.863 1068.38 520.412 1066.48 520.412 cv
1064.56 520.412 1063.02 518.863 1063.02 516.955 cv
cp
1072.99 517.506 mo
1072.99 513.305 1069.59 509.9 1065.39 509.9 cv
1061.19 509.9 1057.78 513.305 1057.78 517.506 cv
1057.78 521.705 1061.19 525.109 1065.39 525.109 cv
1069.59 525.109 1072.99 521.705 1072.99 517.506 cv
cp
f
1085.72 513.494 mo
1087.63 513.494 1089.17 515.043 1089.17 516.955 cv
1089.17 518.863 1087.63 520.412 1085.72 520.412 cv
1083.81 520.412 1082.26 518.863 1082.26 516.955 cv
1082.26 515.043 1083.81 513.494 1085.72 513.494 cv
cp
1084.63 525.109 mo
1088.83 525.109 1092.23 521.705 1092.23 517.506 cv
1092.23 513.305 1088.83 509.9 1084.63 509.9 cv
1080.43 509.9 1077.02 513.305 1077.02 517.506 cv
1077.02 521.705 1080.43 525.109 1084.63 525.109 cv
cp
f
1102.12 265.301 mo
1104.03 265.301 1105.58 266.85 1105.58 268.76 cv
1105.58 270.668 1104.03 272.217 1102.12 272.217 cv
1100.21 272.217 1098.66 270.668 1098.66 268.76 cv
1098.66 266.85 1100.21 265.301 1102.12 265.301 cv
cp
1101.04 276.914 mo
1105.23 276.914 1108.64 273.512 1108.64 269.31 cv
1108.64 265.109 1105.23 261.705 1101.04 261.705 cv
1096.84 261.705 1093.43 265.109 1093.43 269.31 cv
1093.43 273.512 1096.84 276.914 1101.04 276.914 cv
cp
f
1101.13 294.963 mo
1103.04 294.963 1104.59 296.512 1104.59 298.42 cv
1104.59 300.33 1103.04 301.879 1101.13 301.879 cv
1099.22 301.879 1097.67 300.33 1097.67 298.42 cv
1097.67 296.512 1099.22 294.963 1101.13 294.963 cv
cp
1100.04 306.578 mo
1104.25 306.578 1107.65 303.172 1107.65 298.973 cv
1107.65 294.772 1104.25 291.367 1100.04 291.367 cv
1095.85 291.367 1092.44 294.772 1092.44 298.973 cv
1092.44 303.172 1095.85 306.578 1100.04 306.578 cv
cp
f
1102.22 331.848 mo
1100.31 331.848 1098.76 330.297 1098.76 328.389 cv
1098.76 326.478 1100.31 324.928 1102.22 324.928 cv
1104.13 324.928 1105.67 326.478 1105.67 328.389 cv
1105.67 330.297 1104.13 331.848 1102.22 331.848 cv
cp
1101.13 321.336 mo
1096.93 321.336 1093.53 324.74 1093.53 328.94 cv
1093.53 333.141 1096.93 336.543 1101.13 336.543 cv
1105.33 336.543 1108.74 333.141 1108.74 328.94 cv
1108.74 324.74 1105.33 321.336 1101.13 321.336 cv
cp
f
1102.22 356.744 mo
1104.13 356.744 1105.67 358.293 1105.67 360.205 cv
1105.67 362.113 1104.13 363.662 1102.22 363.662 cv
1100.31 363.662 1098.76 362.113 1098.76 360.205 cv
1098.76 358.293 1100.31 356.744 1102.22 356.744 cv
cp
1101.13 368.359 mo
1105.33 368.359 1108.74 364.955 1108.74 360.754 cv
1108.74 356.555 1105.33 353.15 1101.13 353.15 cv
1096.93 353.15 1093.53 356.555 1093.53 360.754 cv
1093.53 364.955 1096.93 368.359 1101.13 368.359 cv
cp
f
731.102 189.455 mo
731.102 187.545 732.647 185.996 734.56 185.996 cv
736.467 185.996 738.017 187.545 738.017 189.455 cv
738.017 191.363 736.467 192.912 734.56 192.912 cv
732.647 192.912 731.102 191.363 731.102 189.455 cv
cp
741.076 190.006 mo
741.076 185.805 737.672 182.4 733.473 182.4 cv
729.275 182.4 725.868 185.805 725.868 190.006 cv
725.868 194.205 729.275 197.609 733.473 197.609 cv
737.672 197.609 741.076 194.205 741.076 190.006 cv
cp
f
857.278 81.2441 mo
859.186 81.2441 860.736 82.793 860.736 84.7031 cv
860.736 86.6113 859.186 88.1621 857.278 88.1621 cv
855.368 88.1621 853.821 86.6113 853.821 84.7031 cv
853.821 82.793 855.368 81.2441 857.278 81.2441 cv
cp
856.191 92.8594 mo
860.392 92.8594 863.796 89.4551 863.796 85.2559 cv
863.796 81.0547 860.392 77.6504 856.191 77.6504 cv
851.991 77.6504 848.588 81.0547 848.588 85.2559 cv
848.588 89.4551 851.991 92.8594 856.191 92.8594 cv
cp
f
857.278 119.168 mo
859.186 119.168 860.736 120.719 860.736 122.627 cv
860.736 124.537 859.186 126.086 857.278 126.086 cv
855.368 126.086 853.821 124.537 853.821 122.627 cv
853.821 120.719 855.368 119.168 857.278 119.168 cv
cp
856.191 130.785 mo
860.392 130.785 863.796 127.379 863.796 123.18 cv
863.796 118.979 860.392 115.574 856.191 115.574 cv
851.991 115.574 848.588 118.979 848.588 123.18 cv
848.588 127.379 851.991 130.785 856.191 130.785 cv
cp
f
869.563 164.514 mo
869.563 162.604 871.11 161.053 873.021 161.053 cv
874.933 161.053 876.478 162.604 876.478 164.514 cv
876.478 166.422 874.933 167.971 873.021 167.971 cv
871.11 167.971 869.563 166.422 869.563 164.514 cv
cp
879.538 165.064 mo
879.538 160.861 876.134 157.459 871.934 157.459 cv
867.735 157.459 864.33 160.861 864.33 165.064 cv
864.33 169.264 867.735 172.668 871.934 172.668 cv
876.134 172.668 879.538 169.264 879.538 165.064 cv
cp
f
955.717 161.424 mo
955.717 159.516 957.267 157.967 959.174 157.967 cv
961.086 157.967 962.632 159.516 962.632 161.424 cv
962.632 163.334 961.086 164.883 959.174 164.883 cv
957.267 164.883 955.717 163.334 955.717 161.424 cv
cp
965.695 161.977 mo
965.695 157.775 962.291 154.371 958.091 154.371 cv
953.889 154.371 950.485 157.775 950.485 161.977 cv
950.485 166.176 953.889 169.578 958.091 169.578 cv
962.291 169.578 965.695 166.176 965.695 161.977 cv
cp
f
1002.38 239.502 mo
1000.47 239.502 998.921 237.955 998.921 236.045 cv
998.921 234.135 1000.47 232.586 1002.38 232.586 cv
1004.29 232.586 1005.84 234.135 1005.84 236.045 cv
1005.84 237.955 1004.29 239.502 1002.38 239.502 cv
cp
1001.29 228.99 mo
997.095 228.99 993.69 232.396 993.69 236.598 cv
993.69 240.795 997.095 244.201 1001.29 244.201 cv
1005.49 244.201 1008.9 240.795 1008.9 236.598 cv
1008.9 232.396 1005.49 228.99 1001.29 228.99 cv
cp
f
892.754 311.387 mo
892.754 309.477 894.301 307.926 896.212 307.926 cv
898.12 307.926 899.67 309.477 899.67 311.387 cv
899.67 313.295 898.12 314.844 896.212 314.844 cv
894.301 314.844 892.754 313.295 892.754 311.387 cv
cp
902.729 311.938 mo
902.729 307.736 899.326 304.334 895.125 304.334 cv
890.925 304.334 887.521 307.736 887.521 311.938 cv
887.521 316.137 890.925 319.541 895.125 319.541 cv
899.326 319.541 902.729 316.137 902.729 311.938 cv
cp
f
914.511 311.387 mo
914.511 309.477 916.058 307.926 917.968 307.926 cv
919.88 307.926 921.427 309.477 921.427 311.387 cv
921.427 313.295 919.88 314.844 917.968 314.844 cv
916.058 314.844 914.511 313.295 914.511 311.387 cv
cp
924.486 311.938 mo
924.486 307.736 921.081 304.334 916.88 304.334 cv
912.684 304.334 909.281 307.736 909.281 311.938 cv
909.281 316.137 912.684 319.541 916.88 319.541 cv
921.081 319.541 924.486 316.137 924.486 311.938 cv
cp
f
483.448 353.328 mo
481.536 353.328 479.99 351.779 479.99 349.869 cv
479.99 347.961 481.536 346.41 483.448 346.41 cv
485.356 346.41 486.905 347.961 486.905 349.869 cv
486.905 351.779 485.356 353.328 483.448 353.328 cv
cp
489.964 350.422 mo
489.964 346.221 486.561 342.816 482.36 342.816 cv
478.163 342.816 474.759 346.221 474.759 350.422 cv
474.759 354.621 478.163 358.027 482.36 358.027 cv
486.561 358.027 489.964 354.621 489.964 350.422 cv
cp
f
480.53 414.805 mo
482.441 414.805 483.988 416.355 483.988 418.266 cv
483.988 420.174 482.441 421.723 480.53 421.723 cv
478.618 421.723 477.073 420.174 477.073 418.266 cv
477.073 416.355 478.618 414.805 480.53 414.805 cv
cp
479.444 426.422 mo
483.644 426.422 487.049 423.016 487.049 418.816 cv
487.049 414.617 483.644 411.211 479.444 411.211 cv
475.246 411.211 471.839 414.617 471.839 418.816 cv
471.839 423.016 475.246 426.422 479.444 426.422 cv
cp
f
477.616 473.637 mo
477.616 471.728 479.164 470.18 481.073 470.18 cv
482.985 470.18 484.531 471.728 484.531 473.637 cv
484.531 475.547 482.985 477.094 481.073 477.094 cv
479.164 477.094 477.616 475.547 477.616 473.637 cv
cp
487.593 474.19 mo
487.593 469.988 484.188 466.584 479.989 466.584 cv
475.79 466.584 472.386 469.988 472.386 474.19 cv
472.386 478.389 475.79 481.791 479.989 481.791 cv
484.188 481.791 487.593 478.389 487.593 474.19 cv
cp
f
481.614 501.826 mo
483.524 501.826 485.071 503.375 485.071 505.285 cv
485.071 507.193 483.524 508.742 481.614 508.742 cv
479.704 508.742 478.157 507.193 478.157 505.285 cv
478.157 503.375 479.704 501.826 481.614 501.826 cv
cp
480.53 513.441 mo
484.729 513.441 488.133 510.035 488.133 505.836 cv
488.133 501.637 484.729 498.23 480.53 498.23 cv
476.329 498.23 472.927 501.637 472.927 505.836 cv
472.927 510.035 476.329 513.441 480.53 513.441 cv
cp
f
873.41 527.328 mo
875.166 526.576 877.198 527.391 877.95 529.148 cv
878.7 530.902 877.886 532.934 876.13 533.685 cv
874.375 534.438 872.343 533.621 871.593 531.867 cv
870.84 530.109 871.653 528.078 873.41 527.328 cv
cp
876.982 538.432 mo
880.841 536.781 882.635 532.313 880.98 528.449 cv
879.329 524.588 874.862 522.795 870.998 524.449 cv
867.136 526.102 865.346 530.568 866.998 534.434 cv
868.647 538.293 873.119 540.086 876.982 538.432 cv
cp
f
723.604 676.791 mo
721.849 677.543 719.82 676.727 719.066 674.973 cv
718.317 673.215 719.132 671.182 720.887 670.432 cv
722.643 669.682 724.675 670.494 725.425 672.252 cv
726.175 674.006 725.36 676.039 723.604 676.791 cv
cp
718.477 667.555 mo
714.614 669.207 712.82 673.674 714.475 677.537 cv
716.126 681.398 720.594 683.19 724.456 681.537 cv
728.319 679.885 730.108 675.416 728.457 671.555 cv
726.806 667.691 722.336 665.9 718.477 667.555 cv
cp
f
481.763 529.488 mo
483.673 529.488 485.221 531.037 485.221 532.947 cv
485.221 534.856 483.673 536.404 481.763 536.404 cv
479.853 536.404 478.306 534.856 478.306 532.947 cv
478.306 531.037 479.853 529.488 481.763 529.488 cv
cp
480.677 541.102 mo
484.876 541.102 488.282 537.697 488.282 533.5 cv
488.282 529.299 484.876 525.893 480.677 525.893 cv
476.478 525.893 473.075 529.299 473.075 533.5 cv
473.075 537.697 476.478 541.102 480.677 541.102 cv
cp
f
638.823 558.139 mo
640.18 559.484 640.194 561.67 638.853 563.029 cv
637.513 564.387 635.321 564.4 633.961 563.059 cv
632.606 561.715 632.593 559.529 633.936 558.17 cv
635.277 556.809 637.466 556.797 638.823 558.139 cv
cp
663.459 524.258 mo
681.011 524.258 li
693.113 537.1 li
751.688 537.1 li
779.722 509.049 li
1030.43 509.049 li
1054.2 484.549 li
1115.69 484.549 li
1115.69 481.092 li
1052.74 481.092 li
1028.96 505.592 li
778.292 505.592 li
750.257 533.641 li
694.605 533.641 li
682.504 520.801 li
662.021 520.801 li
634.5 548.49 li
634.5 553.527 li
633.359 554.525 632.266 556.221 631.396 557.613 cv
629.416 560.783 628.799 564.553 631.455 567.176 cv
634.112 569.803 638.397 569.781 641.021 567.123 cv
643.646 564.461 642.64 560.894 640.964 557.555 cv
640.32 556.273 639.172 554.465 637.959 553.449 cv
637.959 549.914 li
663.459 524.258 li
cp
f
574.78 597.404 mo
572.876 597.516 571.239 596.063 571.125 594.158 cv
571.013 592.252 572.467 590.615 574.371 590.502 cv
576.276 590.387 577.914 591.844 578.028 593.748 cv
578.141 595.654 576.688 597.291 574.78 597.404 cv
cp
642.683 581.619 mo
651.934 572.842 li
651.934 549.975 li
660.377 542.408 li
753.05 542.408 li
781.867 514.623 li
1033.9 514.623 li
1056.23 490.852 li
1115.69 490.852 li
1115.69 487.395 li
1054.73 487.395 li
1032.41 511.166 li
780.472 511.166 li
751.655 538.949 li
659.053 538.949 li
648.477 548.428 li
648.477 571.356 li
641.305 578.16 li
587.684 578.16 li
578.276 587.566 li
576.675 587.479 574.526 588.092 573.146 588.652 cv
569.685 590.053 566.576 592.074 566.795 595.803 cv
567.017 599.535 570.22 602.379 573.946 602.154 cv
577.679 601.934 579.7 598.691 580.301 595.004 cv
580.556 593.441 580.841 591.531 580.682 590.051 cv
589.114 581.619 li
642.683 581.619 li
cp
f
674.953 670.586 mo
673.046 670.576 671.503 669.023 671.513 667.115 cv
671.521 665.205 673.072 663.662 674.979 663.672 cv
676.892 663.68 678.431 665.232 678.424 667.143 cv
678.418 669.055 676.864 670.596 674.953 670.586 cv
cp
780.304 639.844 mo
780.304 539.709 li
797.497 520.693 li
997.185 520.693 li
1003.02 524.586 li
1004.94 521.711 li
998.233 517.236 li
795.961 517.236 li
776.847 538.379 li
776.847 638.363 li
756.561 657.688 li
713.404 657.688 li
697.845 675.037 li
685.026 675.037 li
681.38 670.49 li
681.288 670.565 li
681.337 669.098 680.956 667.266 680.626 665.764 cv
679.82 662.111 677.625 658.988 673.891 658.975 cv
670.152 658.961 667.113 661.975 667.097 665.713 cv
667.085 669.445 670.301 671.289 673.836 672.502 cv
675.292 673.002 677.583 673.521 679.19 673.287 cv
683.368 678.494 li
699.388 678.494 li
714.947 661.146 li
757.946 661.146 li
780.304 639.844 li
cp
f
717.599 601.746 mo
717.816 603.641 716.461 605.357 714.563 605.582 cv
712.668 605.801 710.953 604.441 710.73 602.543 cv
710.657 601.916 710.769 601.315 711.003 600.775 cv
711.194 600.652 711.375 600.51 711.544 600.346 cv
711.876 600.021 712.127 599.646 712.302 599.246 cv
712.73 598.969 713.22 598.773 713.762 598.711 cv
715.659 598.492 717.376 599.85 717.599 601.746 cv
cp
608.555 597.57 mo
607.199 598.914 605.013 598.908 603.665 597.553 cv
602.321 596.199 602.327 594.01 603.682 592.664 cv
605.035 591.318 607.225 591.326 608.571 592.68 cv
609.037 593.148 609.329 593.719 609.472 594.316 cv
609.46 594.438 609.435 594.553 609.435 594.676 cv
609.435 594.957 609.477 595.227 609.542 595.488 cv
609.459 596.248 609.141 596.988 608.555 597.57 cv
cp
612.894 591.219 mo
612.325 591.219 611.796 591.369 611.323 591.613 cv
610.606 591.084 609.841 590.588 609.152 590.148 cv
605.998 588.139 602.236 587.486 599.586 590.117 cv
596.935 592.752 596.918 597.033 599.552 599.684 cv
602.19 602.334 605.766 601.359 609.122 599.715 cv
609.954 599.307 611.009 598.69 611.929 597.981 cv
612.237 598.07 612.556 598.133 612.894 598.133 cv
668.794 598.133 li
669.18 598.133 669.564 598.068 669.93 597.943 cv
685.823 592.424 li
699.025 592.424 li
706.654 600.273 li
706.976 600.604 707.347 600.85 707.743 601.023 cv
707.995 602.094 708.367 603.207 708.707 604.178 cv
709.946 607.707 712.503 610.545 716.209 610.111 cv
719.921 609.68 722.582 606.322 722.146 602.611 cv
721.712 598.9 718.299 597.455 714.644 596.674 cv
713.958 596.527 713.099 596.398 712.22 596.34 cv
712.063 596.023 711.872 595.721 711.614 595.455 cv
702.97 586.557 li
702.318 585.887 701.425 585.508 700.487 585.508 cv
685.243 585.508 li
684.854 585.508 684.473 585.572 684.108 585.699 cv
668.21 591.219 li
612.894 591.219 li
cp
f
1025.44 526.119 mo
1026.8 524.768 1028.99 524.768 1030.33 526.119 cv
1031.68 527.469 1031.68 529.658 1030.33 531.008 cv
1028.99 532.359 1026.8 532.359 1025.44 531.008 cv
1024.09 529.658 1024.09 527.469 1025.44 526.119 cv
cp
1017.16 524.852 mo
1017.16 531.768 li
1022.56 531.768 li
1023.34 532.328 1024.18 532.813 1024.87 533.152 cv
1028.22 534.809 1031.8 535.793 1034.44 533.152 cv
1037.08 530.51 1037.08 526.227 1034.44 523.586 cv
1031.8 520.945 1028.03 521.584 1024.87 523.586 cv
1024.21 524.008 1023.47 524.481 1022.78 524.984 cv
1022.78 524.852 li
1017.16 524.852 li
cp
f
480.677 451.223 mo
478.927 451.223 477.509 449.803 477.509 448.053 cv
477.509 446.305 478.927 444.883 480.677 444.883 cv
482.429 444.883 483.847 446.305 483.847 448.053 cv
483.847 449.803 482.429 451.223 480.677 451.223 cv
cp
1013.91 477.039 mo
1015.78 477.039 1017.29 478.551 1017.29 480.416 cv
1017.29 482.281 1015.78 483.793 1013.91 483.793 cv
1012.04 483.793 1010.53 482.281 1010.53 480.416 cv
1010.53 478.551 1012.04 477.039 1013.91 477.039 cv
cp
618.714 452.27 mo
653.879 415.363 li
905.002 415.363 li
973.967 484.539 li
975.096 485.67 976.625 486.31 978.223 486.316 cv
1015.34 486.506 li
1015.35 486.506 1015.36 486.506 1015.37 486.506 cv
1018.7 486.506 1021.41 483.816 1021.42 480.484 cv
1021.44 477.145 1018.75 474.42 1015.4 474.404 cv
980.775 474.228 li
911.8 405.041 li
910.664 403.902 909.121 403.262 907.516 403.262 cv
651.286 403.262 li
649.628 403.262 648.046 403.94 646.903 405.139 cv
611.739 442.047 li
479.657 442.047 li
476.316 442.047 473.607 444.754 473.607 448.096 cv
473.607 451.44 476.316 454.148 479.657 454.148 cv
614.332 454.148 li
615.989 454.148 617.57 453.469 618.714 452.27 cv
cp
f
1013.4 333.195 mo
1011.85 333.195 1010.59 331.938 1010.59 330.385 cv
1010.59 328.834 1011.85 327.574 1013.4 327.574 cv
1014.96 327.574 1016.21 328.834 1016.21 330.385 cv
1016.21 331.938 1014.96 333.195 1013.4 333.195 cv
cp
1115.69 240.334 mo
1096.62 240.334 li
1008.53 327.902 li
1006.5 329.922 1006.49 333.203 1008.51 335.236 cv
1009.53 336.256 1010.86 336.768 1012.19 336.768 cv
1013.51 336.768 1014.84 336.264 1015.85 335.258 cv
1100.9 250.707 li
1115.69 250.707 li
1118.56 250.707 1120.88 248.387 1120.88 245.521 cv
1120.88 242.658 1118.56 240.334 1115.69 240.334 cv
cp
f
846.503 332.336 mo
846.503 334.783 844.521 336.768 842.073 336.768 cv
839.629 336.768 837.644 334.783 837.644 332.336 cv
837.644 329.889 839.629 327.906 842.073 327.906 cv
844.521 327.906 846.503 329.889 846.503 332.336 cv
cp
942.011 307.043 mo
944.454 307.043 946.44 309.027 946.44 311.473 cv
946.44 313.92 944.454 315.904 942.011 315.904 cv
939.563 315.904 937.58 313.92 937.58 311.473 cv
937.58 309.027 939.563 307.043 942.011 307.043 cv
cp
832.456 332.228 mo
832.456 337.004 836.326 340.873 841.101 340.873 cv
929.671 340.873 li
931.917 340.873 934.075 339.998 935.689 338.435 cv
947.97 326.537 li
949.649 324.908 950.598 322.668 950.598 320.33 cv
950.598 310.582 li
950.598 305.809 946.727 301.938 941.953 301.938 cv
937.178 301.938 933.308 305.809 933.308 310.582 cv
933.308 316.668 li
926.171 323.584 li
841.101 323.584 li
836.326 323.584 832.456 327.453 832.456 332.228 cv
cp
f
501.427 564.615 mo
501.427 569.871 497.168 574.125 491.917 574.125 cv
486.665 574.125 482.407 569.871 482.407 564.615 cv
482.407 559.365 486.665 555.107 491.917 555.107 cv
497.168 555.107 501.427 559.365 501.427 564.615 cv
1 1 1 rgb
f
690.935 181.305 mo
696.189 181.305 700.444 185.561 700.444 190.814 cv
700.444 196.066 696.189 200.322 690.935 200.322 cv
685.685 200.322 681.428 196.066 681.428 190.814 cv
681.428 185.561 685.685 181.305 690.935 181.305 cv
f
664.685 229.682 mo
664.685 234.932 660.431 239.189 655.177 239.189 cv
649.926 239.189 645.667 234.932 645.667 229.682 cv
645.667 224.428 649.926 220.172 655.177 220.172 cv
660.431 220.172 664.685 224.428 664.685 229.682 cv
f
640.66 251.141 mo
640.66 256.395 636.401 260.647 631.151 260.647 cv
625.896 260.647 621.643 256.395 621.643 251.141 cv
621.643 245.891 625.896 241.631 631.151 241.631 cv
636.401 241.631 640.66 245.891 640.66 251.141 cv
f
601.942 277.783 mo
601.942 283.037 597.685 287.293 592.434 287.293 cv
587.18 287.293 582.925 283.037 582.925 277.783 cv
582.925 272.531 587.18 268.275 592.434 268.275 cv
597.685 268.275 601.942 272.531 601.942 277.783 cv
f
909.395 105.027 mo
909.395 110.277 905.137 114.535 899.887 114.535 cv
894.633 114.535 890.377 110.277 890.377 105.027 cv
890.377 99.7725 894.633 95.5176 899.887 95.5176 cv
905.137 95.5176 909.395 99.7725 909.395 105.027 cv
f
950.878 269.31 mo
950.878 274.563 946.623 278.818 941.368 278.818 cv
936.118 278.818 931.86 274.563 931.86 269.31 cv
931.86 264.059 936.118 259.801 941.368 259.801 cv
946.623 259.801 950.878 264.059 950.878 269.31 cv
f
1050.71 231.953 mo
1050.71 237.207 1046.45 241.463 1041.2 241.463 cv
1035.95 241.463 1031.69 237.207 1031.69 231.953 cv
1031.69 226.701 1035.95 222.445 1041.2 222.445 cv
1046.45 222.445 1050.71 226.701 1050.71 231.953 cv
f
615.196 412.838 mo
615.196 418.09 610.941 422.346 605.688 422.346 cv
600.438 422.346 596.179 418.09 596.179 412.838 cv
596.179 407.584 600.438 403.328 605.688 403.328 cv
610.941 403.328 615.196 407.584 615.196 412.838 cv
f
917.083 65.9355 mo
917.083 71.2168 912.799 75.5 907.518 75.5 cv
902.233 75.5 897.951 71.2168 897.951 65.9355 cv
897.951 60.6523 902.233 56.3691 907.518 56.3691 cv
912.799 56.3691 917.083 60.6523 917.083 65.9355 cv
cp
f
1018.46 527.07 mo
1018.46 532.354 1014.18 536.637 1008.9 536.637 cv
1003.61 536.637 999.329 532.354 999.329 527.07 cv
999.329 521.787 1003.61 517.506 1008.9 517.506 cv
1014.18 517.506 1018.46 521.787 1018.46 527.07 cv
cp
f
821.51 541.102 mo
821.51 546.385 817.228 550.67 811.943 550.67 cv
806.662 550.67 802.377 546.385 802.377 541.102 cv
802.377 535.82 806.662 531.537 811.943 531.537 cv
817.228 531.537 821.51 535.82 821.51 541.102 cv
cp
f
749.028 559.154 mo
749.028 564.434 744.743 568.719 739.462 568.719 cv
734.178 568.719 729.896 564.434 729.896 559.154 cv
729.896 553.869 734.178 549.586 739.462 549.586 cv
744.743 549.586 749.028 553.869 749.028 559.154 cv
cp
f
690.185 523.148 mo
690.185 528.432 685.9 532.715 680.619 532.715 cv
675.336 532.715 671.054 528.432 671.054 523.148 cv
671.054 517.865 675.336 513.582 680.619 513.582 cv
685.9 513.582 690.185 517.865 690.185 523.148 cv
cp
f
612.894 537.912 mo
612.894 543.197 608.611 547.481 603.328 547.481 cv
598.046 547.481 593.761 543.197 593.761 537.912 cv
593.761 532.633 598.046 528.348 603.328 528.348 cv
608.611 528.348 612.894 532.633 612.894 537.912 cv
cp
f
677.868 557.414 mo
677.868 562.697 673.586 566.981 668.302 566.981 cv
663.021 566.981 658.735 562.697 658.735 557.414 cv
658.735 552.133 663.021 547.848 668.302 547.848 cv
673.586 547.848 677.868 552.133 677.868 557.414 cv
cp
f
769.555 599.988 mo
769.555 605.271 765.273 609.555 759.989 609.555 cv
754.708 609.555 750.422 605.271 750.422 599.988 cv
750.422 594.705 754.708 590.42 759.989 590.42 cv
765.273 590.42 769.555 594.705 769.555 599.988 cv
cp
f
807.159 605.822 mo
807.159 611.106 802.877 615.389 797.591 615.389 cv
792.31 615.389 788.025 611.106 788.025 605.822 cv
788.025 600.539 792.31 596.256 797.591 596.256 cv
802.877 596.256 807.159 600.539 807.159 605.822 cv
cp
f
772.581 679.537 mo
772.581 684.82 768.3 689.104 763.016 689.104 cv
757.733 689.104 753.448 684.82 753.448 679.537 cv
753.448 674.254 757.733 669.971 763.016 669.971 cv
768.3 669.971 772.581 674.254 772.581 679.537 cv
cp
f
740.597 642.129 mo
740.597 647.412 736.315 651.695 731.031 651.695 cv
725.749 651.695 721.464 647.412 721.464 642.129 cv
721.464 636.846 725.749 632.563 731.031 632.563 cv
736.315 632.563 740.597 636.846 740.597 642.129 cv
cp
f
683.76 590.42 mo
683.76 595.703 679.478 599.988 674.194 599.988 cv
668.913 599.988 664.628 595.703 664.628 590.42 cv
664.628 585.139 668.913 580.856 674.194 580.856 cv
679.478 580.856 683.76 585.139 683.76 590.42 cv
cp
f
644.428 620.852 mo
644.428 626.137 640.146 630.418 634.862 630.418 cv
629.581 630.418 625.295 626.137 625.295 620.852 cv
625.295 615.572 629.581 611.287 634.862 611.287 cv
640.146 611.287 644.428 615.572 644.428 620.852 cv
cp
f
656.256 653.08 mo
656.256 658.359 651.976 662.644 646.69 662.644 cv
641.409 662.644 637.124 658.359 637.124 653.08 cv
637.124 647.795 641.409 643.514 646.69 643.514 cv
651.976 643.514 656.256 647.795 656.256 653.08 cv
cp
f
697.807 626.281 mo
697.807 631.563 693.525 635.848 688.241 635.848 cv
682.96 635.848 678.675 631.563 678.675 626.281 cv
678.675 620.998 682.96 616.717 688.241 616.717 cv
693.525 616.717 697.807 620.998 697.807 626.281 cv
cp
f
119.955 554.047 mo
121.304 555.396 121.304 557.586 119.955 558.937 cv
118.604 560.291 116.414 560.291 115.064 558.937 cv
113.715 557.586 113.713 555.396 115.064 554.047 cv
116.414 552.697 118.604 552.697 119.955 554.047 cv
cp
405.793 1104.75 mo
407.705 1104.73 409.266 1106.26 409.287 1108.17 cv
409.307 1110.08 407.771 1111.64 405.863 1111.66 cv
403.953 1111.68 402.394 1110.15 402.371 1108.24 cv
402.352 1106.33 403.883 1104.77 405.793 1104.75 cv
cp
122.488 549.944 mo
119.845 547.301 115.564 547.301 112.92 549.94 cv
110.279 552.584 111.265 556.16 112.92 559.51 cv
113.562 560.804 114.707 562.637 115.924 563.656 cv
115.924 570.688 li
126.568 582.358 li
126.568 722.709 li
108.563 739.712 li
108.563 796.34 li
103.865 802.394 li
104.076 854.28 li
141.85 891.59 li
157.758 891.59 li
163.723 898.295 li
163.723 930.982 li
158.203 937.646 li
158.203 996.68 li
158.703 997.187 li
258.225 1097.63 li
291.113 1097.63 li
303.785 1084.46 li
342.896 1084.46 li
364.574 1105.76 li
399.637 1105.76 li
399.765 1107.04 400.12 1108.39 400.463 1109.37 cv
401.695 1112.89 403.561 1116.1 407.293 1116.07 cv
411.033 1116.03 414.025 1112.97 413.99 1109.23 cv
413.953 1105.5 410.814 1103.32 407.158 1102.54 cv
404.973 1102.07 402.097 1101.51 400.66 1102.3 cv
365.988 1102.3 li
344.311 1081.01 li
302.314 1081.01 li
289.644 1094.17 li
259.668 1094.17 li
161.662 995.26 li
161.662 938.891 li
167.181 932.227 li
167.181 896.981 li
159.311 888.132 li
143.27 888.132 li
107.529 852.828 li
107.328 803.572 li
112.021 797.524 li
112.021 741.2 li
130.025 724.2 li
130.025 581.017 li
119.381 569.348 li
119.381 563.56 li
120.521 562.566 121.615 560.888 122.488 559.51 cv
124.488 556.354 125.129 552.584 122.488 549.944 cv
cp
0 .862745 1 rgb
f
126.934 816.023 mo
128.213 817.437 128.102 819.621 126.687 820.904 cv
125.271 822.187 123.082 822.076 121.806 820.658 cv
120.523 819.24 120.631 817.055 122.049 815.775 cv
123.465 814.492 125.652 814.604 126.934 816.023 cv
cp
264.209 1056.07 mo
265.582 1054.75 267.771 1054.79 269.098 1056.16 cv
270.426 1057.53 270.39 1059.72 269.013 1061.05 cv
267.64 1062.38 265.447 1062.34 264.125 1060.96 cv
262.799 1059.59 262.834 1057.4 264.209 1056.07 cv
cp
129.281 812.027 mo
126.775 809.256 122.498 809.043 119.727 811.547 cv
116.955 814.054 117.406 817.847 119.244 821.1 cv
120.134 822.682 121.281 824.646 122.508 825.627 cv
122.508 833.655 li
177.576 886.71 li
177.994 937.422 li
171.086 942.745 li
171.086 993.029 li
240.984 1060.59 li
259.757 1060.59 li
260.748 1061.64 262.252 1062.66 263.506 1063.49 cv
266.629 1065.54 270.386 1066.25 273.072 1063.66 cv
275.761 1061.06 275.834 1056.78 273.24 1054.09 cv
270.646 1051.4 267.054 1052.32 263.674 1053.92 cv
262.271 1054.58 260.233 1055.83 259.257 1057.13 cv
242.381 1057.13 li
174.545 991.563 li
174.545 944.447 li
181.467 939.113 li
181.02 885.227 li
125.965 832.187 li
125.965 825.265 li
127.097 824.269 128.163 822.72 128.797 821.584 cv
130.619 818.322 131.785 814.804 129.281 812.027 cv
cp
f
175.896 798.947 mo
177.769 799.33 178.967 801.165 178.578 803.033 cv
178.189 804.904 176.361 806.102 174.49 805.716 cv
172.621 805.328 171.42 803.498 171.809 801.627 cv
172.201 799.757 174.027 798.558 175.896 798.947 cv
cp
328.029 1056.07 mo
329.402 1054.75 331.592 1054.79 332.918 1056.16 cv
334.246 1057.53 334.207 1059.72 332.834 1061.05 cv
331.459 1062.38 329.27 1062.34 327.943 1060.96 cv
326.617 1059.59 326.656 1057.4 328.029 1056.07 cv
cp
169.941 799.823 mo
169.307 801.223 168.558 802.932 168.3 804.375 cv
168.189 804.24 li
158.119 812.489 li
158.119 825.758 li
209.011 872.9 li
209.551 969.373 li
200.332 986.234 li
200.332 1010.71 li
232.873 1045.06 li
301.513 1045.06 li
315.543 1060.59 li
323.574 1060.59 li
323.574 1060.58 li
324.565 1061.64 326.073 1062.66 327.328 1063.49 cv
330.449 1065.54 334.205 1066.25 336.895 1063.66 cv
339.582 1061.06 339.656 1056.78 337.063 1054.09 cv
334.465 1051.4 330.871 1052.32 327.496 1053.92 cv
326.091 1054.58 324.055 1055.83 323.077 1057.13 cv
317.08 1057.13 li
303.049 1041.6 li
234.361 1041.6 li
203.789 1009.33 li
203.789 987.118 li
213.015 970.247 li
212.461 871.38 li
161.578 824.248 li
161.578 814.128 li
169.716 807.46 li
171.236 808.049 173.64 808.012 175.189 807.82 cv
178.898 807.367 182.429 806.229 183.189 802.572 cv
183.949 798.912 181.597 795.336 177.938 794.576 cv
174.281 793.817 171.484 796.417 169.941 799.823 cv
cp
f
238.182 1032.28 mo
236.273 1032.29 234.722 1030.75 234.711 1028.84 cv
234.703 1026.93 236.244 1025.38 238.154 1025.37 cv
240.066 1025.36 241.619 1026.9 241.625 1028.81 cv
241.636 1030.72 240.09 1032.28 238.182 1032.28 cv
cp
246.322 1029.9 mo
246.311 1026.17 243.186 1023.97 239.531 1023.17 cv
238.66 1022.98 237.677 1022.77 236.72 1022.64 cv
236.717 1022.05 236.577 1021.45 236.254 1020.9 cv
231.121 1012.16 li
230.154 1010.51 228.035 1009.96 226.39 1010.92 cv
225.293 1011.57 224.682 1012.72 224.682 1013.91 cv
224.682 1014.5 224.834 1015.11 225.158 1015.66 cv
230.291 1024.4 li
230.69 1025.08 231.289 1025.56 231.966 1025.84 cv
232.027 1027.25 232.414 1028.84 232.797 1029.96 cv
234.006 1033.49 235.852 1036.71 239.586 1036.7 cv
243.324 1036.68 246.336 1033.64 246.322 1029.9 cv
cp
f
328.355 1114.68 mo
330.269 1114.67 331.82 1116.21 331.828 1118.12 cv
331.838 1120.03 330.293 1121.59 328.383 1121.59 cv
326.475 1121.6 324.924 1120.06 324.912 1118.15 cv
324.904 1116.24 326.445 1114.69 328.355 1114.68 cv
cp
95.4551 554.407 mo
94.1758 552.989 94.291 550.805 95.7109 549.525 cv
97.1289 548.249 99.3145 548.363 100.59 549.782 cv
101.871 551.205 101.754 553.385 100.338 554.665 cv
98.916 555.944 96.7305 555.83 95.4551 554.407 cv
cp
324.186 1111.89 mo
312.627 1099.92 li
256.845 1099.92 li
155.357 997.947 li
155.357 936.021 li
160.717 929.916 li
160.717 901.408 li
154.965 893.318 li
139.855 893.318 li
101.91 855.846 li
101.066 801.856 li
105.959 795.816 li
105.959 739.343 li
123.445 723.352 li
123.445 583.607 li
100.271 558.377 li
101.148 557.435 101.938 556.26 102.447 555.351 cv
104.277 552.092 105.445 548.573 102.947 545.794 cv
100.449 543.018 96.1699 542.796 93.3955 545.294 cv
90.6191 547.797 91.0635 551.59 92.8955 554.851 cv
93.9727 556.765 95.4199 559.246 96.9365 559.858 cv
119.988 584.955 li
119.988 721.829 li
102.502 737.82 li
102.502 794.59 li
97.5918 800.654 li
98.4766 857.313 li
138.438 896.776 li
153.181 896.776 li
157.258 902.514 li
157.258 928.613 li
151.9 934.717 li
151.9 999.375 li
152.402 999.879 li
255.406 1103.38 li
311.158 1103.38 li
322.152 1114.76 li
322.149 1116.26 322.58 1118.05 322.998 1119.27 cv
324.209 1122.8 326.054 1126.02 329.789 1126.01 cv
333.525 1125.99 336.539 1122.95 336.523 1119.21 cv
336.513 1115.48 333.387 1113.29 329.734 1112.48 cv
327.963 1112.09 325.736 1111.63 324.186 1111.89 cv
cp
f
137.563 565.031 mo
138.845 566.453 138.725 568.634 137.307 569.915 cv
135.89 571.193 133.701 571.079 132.424 569.657 cv
131.146 568.24 131.261 566.055 132.681 564.774 cv
134.1 563.498 136.285 563.613 137.563 565.031 cv
cp
298.309 1063.09 mo
296.398 1063.07 294.871 1061.5 294.896 1059.59 cv
294.92 1057.68 296.488 1056.15 298.398 1056.18 cv
300.309 1056.21 301.838 1057.77 301.811 1059.68 cv
301.785 1061.59 300.217 1063.12 298.309 1063.09 cv
cp
130.365 560.543 mo
127.586 563.047 128.031 566.838 129.865 570.1 cv
130.736 571.648 131.852 573.566 133.048 574.568 cv
132.623 727.887 li
115.377 743.879 li
115.377 798.839 li
110.727 805.463 li
110.727 851.245 li
144.295 884.674 li
161.179 884.674 li
170.223 895.665 li
170.223 931.326 li
164.947 938.243 li
164.947 994.538 li
248.602 1078.26 li
282.906 1078.26 li
294.676 1065.91 li
296.171 1066.01 298.096 1065.64 299.666 1065.31 cv
303.322 1064.54 306.472 1062.37 306.52 1058.63 cv
306.568 1054.9 303.58 1051.83 299.845 1051.78 cv
296.109 1051.73 294.234 1054.93 292.988 1058.46 cv
292.503 1059.84 291.999 1061.97 292.14 1063.56 cv
281.429 1074.8 li
250.033 1074.8 li
168.406 993.106 li
168.406 939.411 li
173.681 932.494 li
173.681 894.426 li
162.811 881.217 li
145.725 881.217 li
114.187 849.81 li
114.187 806.555 li
118.836 799.93 li
118.836 745.388 li
136.074 729.4 li
136.506 574.336 li
137.666 573.347 138.77 571.758 139.416 570.6 cv
141.246 567.341 142.418 563.823 139.92 561.044 cv
137.416 558.269 133.144 558.045 130.365 560.543 cv
cp
f
178.436 821.654 mo
176.547 821.931 174.791 820.625 174.516 818.733 cv
174.24 816.845 175.549 815.089 177.438 814.813 cv
179.328 814.535 181.08 815.847 181.357 817.734 cv
181.636 819.625 180.328 821.381 178.436 821.654 cv
cp
271.027 1022.52 mo
272.307 1023.94 272.189 1026.12 270.771 1027.4 cv
269.354 1028.68 267.164 1028.56 265.89 1027.14 cv
264.611 1025.72 264.729 1023.54 266.148 1022.26 cv
267.564 1020.98 269.752 1021.1 271.027 1022.52 cv
cp
219.929 964.414 mo
219.929 859.247 li
199.6 841.573 li
184.736 820.993 li
184.604 821.088 li
184.477 819.529 183.734 817.606 183.098 816.359 cv
181.402 813.029 179.125 810.102 175.424 810.639 cv
171.729 811.18 169.172 814.616 169.711 818.312 cv
170.252 822.009 173.652 823.745 177.381 824.027 cv
179.053 824.154 181.104 824.275 182.589 823.924 cv
197.182 844.052 li
216.47 860.824 li
216.47 965.909 li
266.502 1012.92 li
266.502 1018.25 li
265.513 1019.23 264.603 1020.56 264.037 1021.57 cv
262.207 1024.83 261.033 1028.35 263.527 1031.13 cv
266.029 1033.91 270.306 1034.13 273.082 1031.63 cv
275.861 1029.13 275.42 1025.34 273.59 1022.08 cv
272.611 1020.34 271.324 1018.12 269.959 1017.28 cv
269.959 1011.43 li
219.929 964.414 li
cp
f
283.463 1086.04 mo
288.713 1086.04 292.972 1081.78 292.972 1076.53 cv
292.972 1071.27 288.713 1067.02 283.463 1067.02 cv
278.211 1067.02 273.955 1071.27 273.955 1076.53 cv
273.955 1081.78 278.211 1086.04 283.463 1086.04 cv
1 1 1 rgb
f
195.229 823.37 mo
189.947 823.37 185.662 827.651 185.662 832.935 cv
185.662 838.217 189.947 842.503 195.229 842.503 cv
200.515 842.503 204.795 838.217 204.795 832.935 cv
204.795 827.651 200.515 823.37 195.229 823.37 cv
cp
f
158.609 855.715 mo
153.326 855.715 149.043 859.997 149.043 865.282 cv
149.043 870.562 153.326 874.848 158.609 874.848 cv
163.894 874.848 168.176 870.562 168.176 865.282 cv
168.176 859.997 163.894 855.715 158.609 855.715 cv
cp
f
195.229 908.331 mo
189.947 908.331 185.662 912.613 185.662 917.896 cv
185.662 923.178 189.947 927.463 195.229 927.463 cv
200.515 927.463 204.795 923.178 204.795 917.896 cv
204.795 912.613 200.515 908.331 195.229 908.331 cv
cp
f
236.488 950.913 mo
231.205 950.913 226.922 955.197 226.922 960.479 cv
226.922 965.761 231.205 970.044 236.488 970.044 cv
241.77 970.044 246.056 965.761 246.056 960.479 cv
246.056 955.197 241.77 950.913 236.488 950.913 cv
cp
f
201.402 972.488 mo
196.117 972.488 191.836 976.771 191.836 982.054 cv
191.836 987.339 196.117 991.62 201.402 991.62 cv
206.684 991.62 210.97 987.339 210.97 982.054 cv
210.97 976.771 206.684 972.488 201.402 972.488 cv
cp
f
230.084 995.969 mo
224.804 995.969 220.52 1000.25 220.52 1005.54 cv
220.52 1010.82 224.804 1015.1 230.084 1015.1 cv
235.369 1015.1 239.65 1010.82 239.65 1005.54 cv
239.65 1000.25 235.369 995.969 230.084 995.969 cv
cp
f
351.383 1080.04 mo
346.127 1080.04 341.875 1084.3 341.875 1089.55 cv
341.875 1094.81 346.127 1099.06 351.383 1099.06 cv
356.633 1099.06 360.891 1094.81 360.891 1089.55 cv
360.891 1084.3 356.633 1080.04 351.383 1080.04 cv
f
311.898 1090.63 mo
306.645 1090.63 302.39 1094.89 302.39 1100.14 cv
302.39 1105.39 306.645 1109.65 311.898 1109.65 cv
317.15 1109.65 321.406 1105.39 321.406 1100.14 cv
321.406 1094.89 317.15 1090.63 311.898 1090.63 cv
f
261.738 547.102 mo
261.738 549.013 260.193 550.56 258.281 550.56 cv
256.372 550.56 254.824 549.013 254.824 547.102 cv
254.824 545.193 256.372 543.644 258.281 543.644 cv
260.193 543.644 261.738 545.193 261.738 547.102 cv
cp
252.167 545.008 mo
252.311 546.159 252.608 547.338 252.906 548.217 cv
254.102 551.754 255.932 554.979 259.67 554.979 cv
263.404 554.979 266.433 551.95 266.433 548.217 cv
266.433 544.477 263.314 542.266 259.67 541.449 cv
257.459 540.953 254.55 540.362 253.125 541.185 cv
252.693 540.787 li
196.574 484.96 li
192.344 484.96 li
184.908 476.795 li
184.625 398.364 li
203.065 379.924 li
203.065 292.909 li
177.524 267.635 li
175.093 270.094 li
199.607 294.352 li
199.607 378.491 li
181.162 396.935 li
181.457 478.14 li
190.814 488.418 li
195.147 488.418 li
250.299 543.282 li
252.167 545.008 li
cp
0 .862745 1 rgb
f
335.047 785.081 mo
333.14 785.047 331.617 783.475 331.65 781.563 cv
331.685 779.655 333.26 778.133 335.169 778.166 cv
337.078 778.2 338.6 779.773 338.566 781.684 cv
338.532 783.592 336.957 785.111 335.047 785.081 cv
cp
205.493 290.62 mo
205.493 381.122 li
187.212 400.722 li
187.51 463.504 li
224.258 499.364 li
245.858 499.364 li
270.2 523.711 li
270.2 563.185 li
278.13 571.113 li
295.432 571.113 li
306.795 581.389 li
306.508 700.333 li
340.512 734.915 li
340.512 772.662 li
338.948 775.501 li
337.396 775.391 335.409 775.808 334.092 776.227 cv
330.533 777.362 327.274 779.135 327.21 782.873 cv
327.145 786.607 330.118 789.691 333.855 789.755 cv
337.59 789.819 339.855 786.739 340.737 783.11 cv
341.121 781.521 341.561 779.574 341.483 778.065 cv
343.969 773.551 li
343.969 733.499 li
309.969 698.921 li
310.256 579.854 li
296.766 567.654 li
279.561 567.654 li
273.658 561.753 li
273.658 522.279 li
247.291 495.907 li
225.666 495.907 li
190.961 462.039 li
190.677 402.074 li
208.95 382.484 li
208.95 289.147 li
186.521 267.615 li
184.127 270.11 li
205.493 290.62 li
cp
f
341.975 809.87 mo
341.941 811.779 340.366 813.299 338.458 813.266 cv
336.549 813.233 335.027 811.657 335.06 809.749 cv
335.095 807.837 336.669 806.317 338.578 806.352 cv
340.488 806.386 342.007 807.959 341.975 809.87 cv
cp
211.894 288.868 mo
211.894 385.435 li
194.422 403.879 li
194.422 459.459 li
229.439 494.179 li
250.178 494.179 li
277.117 521.398 li
277.117 557.612 li
283.213 565.063 li
299.429 565.063 li
312.85 577.626 li
312.85 697.159 li
352.616 738.081 li
352.9 784.065 li
353.924 789.833 li
340.99 803.316 li
341.366 803.677 li
340.023 803.746 338.549 804.078 337.499 804.413 cv
333.939 805.548 330.685 807.32 330.617 811.059 cv
330.553 814.794 333.527 817.875 337.264 817.94 cv
340.998 818.004 343.264 814.924 344.145 811.295 cv
344.689 809.054 345.344 806.092 344.475 804.678 cv
357.641 790.95 li
356.358 783.893 li
356.065 736.671 li
316.307 695.754 li
316.307 576.127 li
300.795 561.604 li
284.852 561.604 li
280.574 556.378 li
280.574 519.976 li
251.618 490.721 li
230.863 490.721 li
197.879 458.018 li
197.879 405.257 li
215.352 386.813 li
215.352 287.442 li
194.27 266.19 li
191.814 268.624 li
211.894 288.868 li
cp
f
312.025 551.042 mo
312.025 552.95 310.477 554.499 308.567 554.499 cv
306.656 554.499 305.109 552.95 305.109 551.042 cv
305.109 549.132 306.656 547.585 308.567 547.585 cv
310.477 547.585 312.025 549.132 312.025 551.042 cv
cp
223.811 281.132 mo
223.525 391.727 li
205.493 409.014 li
205.493 453.684 li
234.037 482.653 li
257.103 482.653 li
288.645 513.635 li
288.645 532.004 li
302.358 547.529 li
302.326 549.045 302.768 550.904 303.19 552.153 cv
304.387 555.692 306.217 558.916 309.953 558.916 cv
313.689 558.916 316.719 555.888 316.719 552.153 cv
316.719 548.416 313.599 546.203 309.953 545.386 cv
308.227 544.999 306.075 544.557 304.532 544.767 cv
292.102 530.696 li
292.102 512.183 li
258.518 479.196 li
235.484 479.196 li
208.95 452.268 li
208.95 410.489 li
226.979 393.205 li
227.271 279.615 li
212.58 266.135 li
210.241 268.682 li
223.811 281.132 li
cp
f
331.617 666.012 mo
331.617 667.92 330.07 669.469 328.158 669.469 cv
326.25 669.469 324.7 667.92 324.7 666.012 cv
324.7 664.101 326.25 662.555 328.158 662.555 cv
330.07 662.555 331.617 664.101 331.617 666.012 cv
cp
322.067 543.438 mo
317.734 540.283 li
308.998 540.283 li
297.828 528.087 li
297.828 509.888 li
259.676 471.992 li
238.402 471.992 li
214.489 447.94 li
214.489 413.388 li
233.607 395.522 li
233.607 277.343 li
222.135 266.17 li
219.723 268.648 li
230.15 278.801 li
230.15 394.018 li
211.031 411.885 li
211.031 449.366 li
236.965 475.451 li
258.252 475.451 li
294.37 511.325 li
294.37 529.431 li
307.477 543.741 li
316.607 543.741 li
318.609 545.197 li
318.609 659.837 li
321.954 662.481 li
321.918 664.001 322.358 665.869 322.783 667.124 cv
323.978 670.662 325.81 673.887 329.547 673.887 cv
333.281 673.887 336.313 670.857 336.313 667.124 cv
336.313 663.386 333.194 661.174 329.547 660.356 cv
327.799 659.965 325.613 659.513 324.065 659.744 cv
322.067 658.164 li
322.067 543.438 li
cp
f
407.109 774.738 mo
407.109 776.646 405.561 778.196 403.652 778.196 cv
401.741 778.196 400.194 776.646 400.194 774.738 cv
400.194 773.922 400.488 773.182 400.961 772.592 cv
401.523 772.032 li
402.111 771.568 402.845 771.281 403.652 771.281 cv
405.561 771.281 407.109 772.827 407.109 774.738 cv
cp
397.534 772.633 mo
397.68 773.787 397.977 774.971 398.275 775.851 cv
399.472 779.389 401.302 782.613 405.039 782.613 cv
408.775 782.613 411.803 779.585 411.803 775.851 cv
411.803 772.112 408.684 769.903 405.039 769.082 cv
402.867 768.596 400.022 768.012 398.567 768.768 cv
341.085 711.018 li
341.085 659.471 li
328.695 646.215 li
328.695 541.297 li
321.632 534.233 li
313.852 534.233 li
304.492 524.872 li
304.492 507.294 li
263.425 466.52 li
241.52 466.52 li
220.928 446.201 li
220.928 416.507 li
239.412 397.489 li
239.412 274.453 li
230.771 266.162 li
228.377 268.659 li
235.955 275.928 li
235.955 396.085 li
217.471 415.102 li
217.471 447.647 li
240.102 469.977 li
261.999 469.977 li
301.033 508.732 li
301.033 526.305 li
312.42 537.69 li
320.199 537.69 li
325.238 542.729 li
325.238 647.579 li
337.627 660.836 li
337.627 712.445 li
397.534 772.633 li
cp
f
398.033 745.53 mo
398.033 747.441 396.486 748.987 394.575 748.987 cv
392.664 748.987 391.117 747.441 391.117 745.53 cv
391.117 743.619 392.664 742.072 394.575 742.072 cv
396.486 742.072 398.033 743.619 398.033 745.53 cv
cp
242.252 274.213 mo
242.252 400.424 li
223.811 420.015 li
223.811 443.325 li
245.001 464.213 li
265.343 464.213 li
306.797 504.704 li
306.797 515.073 li
332.01 539.856 li
332.01 646.42 li
343.68 659.097 li
343.68 698.327 li
388.412 743.057 li
388.531 744.322 388.868 745.668 389.198 746.642 cv
390.395 750.181 392.226 753.408 395.961 753.408 cv
399.697 753.408 402.727 750.38 402.727 746.642 cv
402.727 742.906 399.607 740.694 395.961 739.878 cv
393.896 739.411 391.215 738.859 389.707 739.463 cv
347.139 696.896 li
347.139 657.746 li
335.469 645.07 li
335.469 538.406 li
310.254 513.625 li
310.254 503.248 li
266.75 460.756 li
246.419 460.756 li
227.268 441.88 li
227.268 421.387 li
245.71 401.796 li
245.71 272.704 li
237.09 264.7 li
234.736 267.232 li
242.252 274.213 li
cp
f
284.48 550.271 mo
284.48 548.361 286.028 546.815 287.939 546.815 cv
289.849 546.815 291.397 548.361 291.397 550.271 cv
291.397 552.184 289.849 553.729 287.939 553.729 cv
286.028 553.729 284.48 552.184 284.48 550.271 cv
cp
296.091 551.383 mo
296.091 547.648 292.971 545.437 289.325 544.619 cv
288.04 544.33 286.519 544.012 285.185 543.951 cv
285.185 516.532 li
254.697 484.96 li
232.02 484.96 li
202.488 455.427 li
202.488 407.307 li
221.506 388.282 li
221.506 282.801 li
205.404 267.605 li
203.03 270.121 li
218.049 284.292 li
218.049 386.85 li
199.03 405.874 li
199.03 456.859 li
230.588 488.418 li
253.23 488.418 li
281.727 517.93 li
281.727 547.199 li
281.743 547.199 li
281.793 548.625 282.179 550.252 282.561 551.383 cv
283.758 554.922 285.589 558.149 289.325 558.149 cv
293.061 558.149 296.091 555.121 296.091 551.383 cv
cp
f
240.941 514.992 mo
239.031 514.992 237.48 513.445 237.48 511.534 cv
237.48 509.623 239.031 508.077 240.941 508.077 cv
242.85 508.077 244.398 509.623 244.398 511.534 cv
244.398 513.445 242.85 514.992 240.941 514.992 cv
cp
241.492 505.018 mo
237.29 505.018 233.887 508.422 233.887 512.622 cv
233.887 516.82 237.29 520.226 241.492 520.226 cv
245.691 520.226 249.096 516.82 249.096 512.622 cv
249.096 508.422 245.691 505.018 241.492 505.018 cv
cp
f
237.852 428.839 mo
235.943 428.839 234.395 427.289 234.395 425.382 cv
234.395 423.47 235.943 421.924 237.852 421.924 cv
239.762 421.924 241.311 423.47 241.311 425.382 cv
241.311 427.289 239.762 428.839 237.852 428.839 cv
cp
238.404 418.86 mo
234.203 418.86 230.799 422.265 230.799 426.465 cv
230.799 430.667 234.203 434.07 238.404 434.07 cv
242.604 434.07 246.007 430.667 246.007 426.465 cv
246.007 422.265 242.604 418.86 238.404 418.86 cv
cp
f
306.109 719.871 mo
311.36 719.871 315.617 724.125 315.617 729.379 cv
315.617 734.63 311.36 738.889 306.109 738.889 cv
300.855 738.889 296.601 734.63 296.601 729.379 cv
296.601 724.125 300.855 719.871 306.109 719.871 cv
1 1 1 rgb
f
327.568 743.896 mo
332.822 743.896 337.075 748.154 337.075 753.404 cv
337.075 758.659 332.822 762.913 327.568 762.913 cv
322.318 762.913 318.06 758.659 318.06 753.404 cv
318.06 748.154 322.318 743.896 327.568 743.896 cv
f
354.212 782.613 mo
359.465 782.613 363.721 786.871 363.721 792.122 cv
363.721 797.376 359.465 801.631 354.212 801.631 cv
348.959 801.631 344.703 797.376 344.703 792.122 cv
344.703 786.871 348.959 782.613 354.212 782.613 cv
f
181.455 475.16 mo
186.706 475.16 190.963 479.419 190.963 484.669 cv
190.963 489.923 186.706 494.179 181.455 494.179 cv
176.2 494.179 171.946 489.923 171.946 484.669 cv
171.946 479.419 176.2 475.16 181.455 475.16 cv
f
696.166 954.014 mo
698.057 954.281 699.373 956.027 699.107 957.918 cv
698.844 959.81 697.094 961.127 695.203 960.861 cv
693.313 960.596 691.998 958.848 692.264 956.957 cv
692.525 955.065 694.275 953.746 696.166 954.014 cv
cp
689.893 958.025 mo
690.199 961.75 691.953 965.143 695.648 965.664 cv
699.351 966.184 702.771 963.609 703.295 959.908 cv
703.81 956.207 700.873 953.945 697.533 952.268 cv
695.851 951.42 692.943 950.378 691.361 950.916 cv
659.033 950.916 li
659.033 954.375 li
689.771 954.375 li
689.713 955.572 689.801 956.887 689.893 958.025 cv
cp
0 .862745 1 rgb
f
713.121 1053.35 mo
711.25 1053.74 709.42 1052.54 709.031 1050.67 cv
708.646 1048.8 709.844 1046.97 711.715 1046.58 cv
713.582 1046.19 715.418 1047.39 715.801 1049.26 cv
716.189 1051.13 714.99 1052.96 713.121 1053.35 cv
cp
453.783 897.215 mo
452.412 895.889 452.373 893.699 453.699 892.324 cv
455.025 890.951 457.215 890.912 458.59 892.24 cv
459.963 893.566 460 895.756 458.674 897.129 cv
457.346 898.502 455.158 898.541 453.783 897.215 cv
cp
720.172 1047.22 mo
719.412 1043.56 715.836 1041.21 712.176 1041.97 cv
708.518 1042.73 707.381 1046.26 706.927 1049.97 cv
706.736 1051.52 706.699 1053.92 707.287 1055.44 cv
700.619 1063.58 li
690.5 1063.58 li
643.367 1012.7 li
544.5 1012.14 li
527.629 1021.37 li
505.42 1021.37 li
473.143 990.797 li
473.143 922.109 li
457.619 908.078 li
457.619 902.081 li
458.922 901.104 460.162 899.067 460.828 897.662 cv
462.426 894.287 463.348 890.693 460.658 888.096 cv
457.973 885.502 453.689 885.576 451.092 888.264 cv
448.5 890.953 449.207 894.709 451.261 897.83 cv
452.088 899.085 453.107 900.592 454.166 901.584 cv
454.162 901.584 li
454.162 909.615 li
469.685 923.646 li
469.685 992.285 li
504.043 1024.83 li
528.514 1024.83 li
545.375 1015.61 li
641.848 1016.15 li
688.99 1067.04 li
702.258 1067.04 li
710.508 1056.97 li
710.373 1056.86 li
711.816 1056.6 713.525 1055.85 714.924 1055.22 cv
718.33 1053.67 720.93 1050.88 720.172 1047.22 cv
cp
f
544.51 895.424 mo
545.254 893.664 547.281 892.842 549.041 893.586 cv
550.801 894.33 551.621 896.357 550.877 898.119 cv
550.133 899.879 548.102 900.701 546.346 899.955 cv
544.586 899.209 543.766 897.18 544.51 895.424 cv
cp
892.646 982.217 mo
894.504 981.769 896.367 982.916 896.816 984.769 cv
897.262 986.625 896.121 988.494 894.264 988.94 cv
892.406 989.387 890.539 988.246 890.094 986.387 cv
889.648 984.533 890.789 982.664 892.646 982.217 cv
cp
544.574 901.289 mo
545.492 902.106 546.893 903.141 548.221 903.733 cv
552.857 910.277 li
621.935 979.652 li
622.44 980.16 li
660.998 980.305 li
677.492 998.748 li
885.873 998.748 li
891.144 992.672 li
891.076 992.612 li
892.615 992.434 894.563 991.518 896.125 990.75 cv
899.48 989.102 901.994 986.223 901.117 982.59 cv
900.889 981.635 900.463 980.781 899.9 980.051 cv
899.92 979.966 899.949 979.885 899.961 979.799 cv
901.473 969.426 li
901.746 967.533 900.439 965.777 898.549 965.504 cv
896.65 965.229 894.904 966.535 894.629 968.426 cv
893.301 977.531 li
893.186 977.553 893.074 977.568 892.961 977.596 cv
889.326 978.473 888.301 982.037 887.965 985.758 cv
887.842 987.135 887.859 989.176 888.309 990.669 cv
884.295 995.291 li
679.039 995.291 li
662.547 976.852 li
623.881 976.707 li
555.596 908.16 li
551.9 902.945 li
552.699 901.606 553.125 899.438 553.441 897.697 cv
554.105 894.016 553.289 890.287 549.848 888.832 cv
546.406 887.375 542.438 888.981 540.977 892.422 cv
539.527 895.865 541.781 898.809 544.574 901.289 cv
cp
f
548.088 955.57 mo
549.273 954.07 551.445 953.816 552.943 955.002 cv
554.447 956.185 554.699 958.361 553.514 959.859 cv
552.328 961.354 550.154 961.609 548.656 960.426 cv
547.16 959.24 546.902 957.066 548.088 955.57 cv
cp
767.488 1024.39 mo
768.771 1022.98 770.957 1022.87 772.375 1024.15 cv
773.789 1025.43 773.9 1027.62 772.621 1029.03 cv
771.342 1030.45 769.156 1030.56 767.738 1029.28 cv
766.316 1028 766.209 1025.81 767.488 1024.39 cv
cp
554.332 961.92 mo
555.482 961.175 557.057 959.918 557.957 958.656 cv
578.656 958.656 li
610.769 991.094 li
653.504 991.094 li
670.361 1009.98 li
727.381 1009.98 li
742.939 1028.57 li
762.769 1028.57 li
763.752 1029.8 765.715 1030.94 767.293 1031.84 cv
770.551 1033.67 774.344 1034.13 776.846 1031.35 cv
779.352 1028.58 779.139 1024.3 776.365 1021.8 cv
773.594 1019.29 770.072 1020.46 766.81 1022.28 cv
765.676 1022.92 764.127 1023.98 763.133 1025.11 cv
744.555 1025.11 li
728.994 1006.53 li
671.912 1006.53 li
655.055 987.635 li
612.211 987.635 li
580.098 955.199 li
557.781 955.199 li
556.684 954.114 554.769 953.164 553.221 952.42 cv
549.848 950.799 546.035 950.6 543.719 953.531 cv
541.402 956.461 541.894 960.713 544.826 963.033 cv
547.76 965.348 551.195 963.953 554.332 961.92 cv
cp
f
518.008 865.135 mo
519.5 863.945 521.672 864.19 522.865 865.682 cv
524.059 867.176 523.815 869.354 522.318 870.541 cv
520.826 871.731 518.648 871.486 517.463 869.994 cv
516.269 868.502 516.512 866.324 518.008 865.135 cv
cp
522.648 872.734 mo
524.039 872.232 526.041 871.267 527.177 870.139 cv
552.422 870.139 li
561.783 879.541 li
561.783 908.701 li
625.83 972.365 li
626.336 972.867 li
662.619 972.867 li
677.961 988.807 li
759.543 988.807 li
763.498 985.217 li
761.17 982.656 li
758.207 985.35 li
679.435 985.35 li
664.09 969.41 li
627.761 969.41 li
565.242 907.264 li
565.242 878.111 li
553.857 866.682 li
527.334 866.682 li
526.463 865.467 524.959 864.226 523.719 863.229 cv
520.801 860.887 517.133 859.828 514.213 862.16 cv
511.291 864.49 510.809 868.742 513.139 871.666 cv
515.473 874.582 519.135 874.006 522.648 872.734 cv
cp
f
927.66 983.387 mo
927.66 985.295 926.113 986.844 924.203 986.844 cv
922.291 986.844 920.744 985.295 920.744 983.387 cv
920.744 981.477 922.291 979.926 924.203 979.926 cv
926.113 979.926 927.66 981.477 927.66 983.387 cv
cp
915.512 983.938 mo
915.512 988.137 918.918 991.543 923.113 991.543 cv
927.314 991.543 930.719 988.137 930.719 983.938 cv
930.719 979.736 927.314 976.332 923.113 976.332 cv
918.918 976.332 915.512 979.736 915.512 983.938 cv
cp
f
980.891 1002.19 mo
980.891 1004.1 979.344 1005.64 977.432 1005.64 cv
975.521 1005.64 973.973 1004.1 973.973 1002.19 cv
973.973 1000.28 975.521 998.727 977.432 998.727 cv
979.344 998.727 980.891 1000.28 980.891 1002.19 cv
cp
968.744 1002.74 mo
968.744 1006.94 972.146 1010.34 976.346 1010.34 cv
980.545 1010.34 983.949 1006.94 983.949 1002.74 cv
983.949 998.539 980.545 995.133 976.346 995.133 cv
972.146 995.133 968.744 998.539 968.744 1002.74 cv
cp
f
863.225 1024.13 mo
863.225 1022.22 864.771 1020.67 866.684 1020.67 cv
868.594 1020.67 870.141 1022.22 870.141 1024.13 cv
870.141 1026.04 868.594 1027.59 866.684 1027.59 cv
864.771 1027.59 863.225 1026.04 863.225 1024.13 cv
cp
873.199 1024.68 mo
873.199 1020.48 869.797 1017.08 865.596 1017.08 cv
861.398 1017.08 857.994 1020.48 857.994 1024.68 cv
857.994 1028.88 861.398 1032.29 865.596 1032.29 cv
869.797 1032.29 873.199 1028.88 873.199 1024.68 cv
cp
f
885.271 1059.14 mo
887.182 1059.14 888.728 1060.69 888.728 1062.6 cv
888.728 1064.51 887.182 1066.06 885.271 1066.06 cv
883.361 1066.06 881.814 1064.51 881.814 1062.6 cv
881.814 1060.69 883.361 1059.14 885.271 1059.14 cv
cp
519.539 962.664 mo
517.629 962.656 516.088 961.104 516.096 959.193 cv
516.102 957.285 517.656 955.742 519.565 955.75 cv
521.475 955.76 523.014 957.31 523.008 959.223 cv
523.002 961.133 521.447 962.674 519.539 962.664 cv
cp
884.184 1070.75 mo
888.385 1070.75 891.789 1067.35 891.789 1063.15 cv
891.789 1058.95 888.385 1055.54 884.184 1055.54 cv
881.273 1055.54 878.746 1057.18 877.468 1059.59 cv
848.625 1030.96 li
840.996 1030.96 li
824.939 1035.56 li
817.982 1037.65 li
730.717 1037.65 li
709.537 1012.7 li
670.139 1012.7 li
653.283 995.291 li
609.594 995.291 li
584.525 971.025 li
533.158 971.025 li
525.842 962.973 li
525.971 961.456 525.568 959.463 525.211 957.842 cv
524.404 954.191 522.209 951.066 518.473 951.053 cv
514.736 951.039 511.695 954.053 511.68 957.789 cv
511.67 961.525 514.885 963.371 518.42 964.58 cv
519.761 965.042 521.807 965.512 523.379 965.401 cv
531.629 974.482 li
583.127 974.482 li
608.195 998.748 li
651.816 998.748 li
668.674 1016.15 li
707.936 1016.15 li
729.117 1041.11 li
818.234 1041.11 li
841.242 1034.42 li
847.199 1034.42 li
876.607 1063.6 li
876.844 1067.59 880.141 1070.75 884.184 1070.75 cv
cp
f
856.902 1064.29 mo
855.035 1064.71 853.184 1063.54 852.76 1061.68 cv
852.338 1059.82 853.508 1057.97 855.367 1057.54 cv
857.23 1057.12 859.082 1058.29 859.508 1060.15 cv
859.93 1062.01 858.762 1063.87 856.902 1064.29 cv
cp
855.23 1054.44 mo
851.133 1055.37 848.566 1059.44 849.496 1063.54 cv
850.427 1067.63 854.5 1070.2 858.6 1069.27 cv
862.691 1068.34 865.258 1064.26 864.33 1060.17 cv
863.398 1056.07 859.324 1053.51 855.23 1054.44 cv
cp
f
728.109 976.357 mo
726.352 977.109 724.324 976.293 723.57 974.539 cv
722.822 972.781 723.637 970.748 725.391 969.998 cv
727.146 969.248 729.18 970.06 729.93 971.818 cv
730.68 973.572 729.865 975.606 728.109 976.357 cv
cp
722.98 967.121 mo
719.119 968.773 717.324 973.24 718.978 977.104 cv
720.631 980.965 725.098 982.756 728.961 981.104 cv
732.824 979.451 734.613 974.982 732.961 971.121 cv
731.31 967.258 726.84 965.467 722.98 967.121 cv
cp
f
769.703 1052.34 mo
768.951 1050.58 769.766 1048.55 771.521 1047.8 cv
773.277 1047.05 775.309 1047.86 776.063 1049.62 cv
776.813 1051.37 775.998 1053.4 774.242 1054.16 cv
772.486 1054.91 770.453 1054.09 769.703 1052.34 cv
cp
779.092 1048.92 mo
777.439 1045.06 772.973 1043.27 769.109 1044.92 cv
765.246 1046.57 763.457 1051.04 765.107 1054.9 cv
766.76 1058.76 771.23 1060.55 775.094 1058.9 cv
775.863 1058.57 776.545 1058.13 777.139 1057.6 cv
786.537 1057.6 li
787.492 1057.6 788.266 1056.83 788.266 1055.87 cv
788.266 1054.92 787.492 1054.14 786.537 1054.14 cv
779.367 1054.14 li
779.879 1052.48 779.83 1050.64 779.092 1048.92 cv
cp
f
843.502 975.787 mo
841.6 975.949 839.926 974.537 839.764 972.637 cv
839.703 971.92 839.865 971.236 840.193 970.654 cv
840.422 970.654 li
840.422 970.321 li
840.992 969.537 841.875 968.987 842.916 968.898 cv
843.793 968.823 844.611 969.092 845.266 969.577 cv
845.342 969.637 845.414 969.7 845.494 969.754 cv
846.139 970.321 846.576 971.125 846.654 972.049 cv
846.814 973.953 845.406 975.625 843.502 975.787 cv
cp
1123.65 943.424 mo
1123.65 941.514 1122.11 939.967 1120.2 939.967 cv
888.83 939.967 li
887.846 939.967 886.906 940.389 886.248 941.125 cv
871.869 957.254 li
854.242 957.254 li
853.385 957.254 852.563 957.572 851.924 958.15 cv
845.096 964.326 li
844.564 964.806 844.217 965.414 844.059 966.062 cv
843.131 966.276 842.188 966.563 841.351 966.828 cv
841.006 966.937 840.67 967.062 840.34 967.195 cv
827.168 967.195 li
827.168 970.654 li
835.961 970.654 li
835.373 971.655 835.07 972.816 835.182 974.139 cv
835.498 977.859 838.771 980.623 842.492 980.307 cv
846.217 979.99 847.769 976.623 848.662 972.994 cv
848.873 972.134 849.07 970.997 849.127 969.885 cv
849.34 969.765 849.547 969.625 849.736 969.453 cv
855.576 964.17 li
873.42 964.17 li
874.406 964.17 875.344 963.75 876.004 963.012 cv
890.381 946.883 li
1120.2 946.883 li
1122.11 946.883 1123.65 945.334 1123.65 943.424 cv
cp
f
443.332 853.273 mo
443.351 851.365 444.914 849.832 446.824 849.852 cv
448.732 849.871 450.264 851.432 450.244 853.344 cv
450.227 855.254 448.666 856.787 446.756 856.768 cv
444.846 856.744 443.313 855.184 443.332 853.273 cv
cp
1118.97 1066.53 mo
1121.42 1064.09 li
1047.96 990.322 li
1047.45 989.813 li
942.768 989.813 li
930.053 1001.34 li
675.809 1001.34 li
658.951 982.207 li
619.131 982.207 li
577.203 939.533 li
509.32 939.533 li
473.143 904.572 li
473.143 880.826 li
454.906 863.322 li
453.949 861.053 li
453.939 860.738 li
452.863 858.062 li
453.377 856.532 452.883 853.971 452.457 851.979 cv
451.672 848.322 449.494 845.185 445.76 845.146 cv
442.023 845.113 438.965 848.106 438.926 851.844 cv
438.893 855.578 442.098 857.443 445.625 858.674 cv
446.732 859.063 448.32 859.459 449.727 859.531 cv
450.5 861.447 li
451.48 864.81 li
469.685 882.281 li
469.685 906.039 li
507.922 942.992 li
575.754 942.992 li
617.682 985.666 li
657.389 985.666 li
674.244 1004.8 li
931.387 1004.8 li
944.101 993.271 li
1046.02 993.271 li
1118.97 1066.53 li
cp
f
864.553 974.592 mo
866.408 974.146 868.275 975.287 868.723 977.144 cv
869.168 979 868.027 980.865 866.17 981.315 cv
864.313 981.764 862.445 980.621 862 978.762 cv
861.553 976.904 862.695 975.037 864.553 974.592 cv
cp
861.793 988.807 mo
863.643 984.877 li
865.055 984.559 866.686 983.785 868.029 983.123 cv
871.387 981.475 873.898 978.596 873.025 974.965 cv
872.15 971.332 868.5 969.098 864.865 969.969 cv
861.232 970.848 860.207 974.41 859.873 978.131 cv
859.73 979.694 859.769 982.116 860.416 983.614 cv
859.598 985.35 li
778.912 985.35 li
775.352 982.574 li
773.226 985.299 li
777.723 988.807 li
861.793 988.807 li
cp
f
567.795 1032.99 mo
568.545 1034.74 567.73 1036.78 565.975 1037.53 cv
564.221 1038.28 562.19 1037.46 561.438 1035.71 cv
560.686 1033.95 561.502 1031.92 563.256 1031.17 cv
564.555 1030.61 566 1030.92 566.971 1031.82 cv
566.971 1031.88 li
567.039 1031.88 li
567.351 1032.19 567.613 1032.56 567.795 1032.99 cv
cp
959.982 1037.65 mo
924.543 1074.81 li
685.264 1073.96 li
640.744 1028.43 li
567.111 1028.43 li
565.207 1027.52 562.94 1027.4 560.846 1028.29 cv
556.982 1029.94 555.191 1034.41 556.844 1038.27 cv
558.494 1042.13 562.965 1043.93 566.826 1042.27 cv
570.69 1040.62 572.48 1036.15 570.826 1032.29 cv
570.768 1032.15 570.695 1032.02 570.629 1031.88 cv
639.289 1031.88 li
683.805 1077.41 li
926.019 1078.28 li
961.461 1041.11 li
1027.86 1041.11 li
1120.42 1134.95 li
1122.88 1132.52 li
1029.3 1037.65 li
959.982 1037.65 li
cp
f
697.014 1043.8 mo
698.9 1044.08 700.213 1045.83 699.935 1047.72 cv
699.658 1049.61 697.902 1050.92 696.014 1050.64 cv
694.123 1050.37 692.816 1048.61 693.094 1046.72 cv
693.367 1044.83 695.123 1043.52 697.014 1043.8 cv
cp
492.49 959.01 mo
491.211 960.43 489.025 960.547 487.607 959.269 cv
486.186 957.994 486.07 955.805 487.348 954.389 cv
488.625 952.969 490.809 952.852 492.23 954.131 cv
493.652 955.406 493.768 957.594 492.49 959.01 cv
cp
503.318 955.199 mo
497.473 955.199 li
496.625 953.834 494.412 952.547 492.668 951.568 cv
489.406 949.738 485.615 949.297 483.117 952.076 cv
480.619 954.854 480.842 959.129 483.621 961.631 cv
486.4 964.125 489.918 962.951 493.176 961.121 cv
494.184 960.556 495.516 959.646 496.496 958.656 cv
501.822 958.656 li
548.838 1008.69 li
653.924 1008.69 li
670.695 1027.98 li
690.824 1042.57 li
690.473 1044.06 690.594 1046.11 690.721 1047.78 cv
691.002 1051.51 692.738 1054.91 696.435 1055.45 cv
700.131 1055.99 703.568 1053.43 704.109 1049.73 cv
704.644 1046.03 701.719 1043.76 698.389 1042.06 cv
697.141 1041.42 695.218 1040.68 693.66 1040.55 cv
693.754 1040.42 li
673.174 1025.56 li
655.5 1005.23 li
550.334 1005.23 li
503.318 955.199 li
cp
f
575.511 984.383 mo
576.863 983.033 579.053 983.029 580.402 984.381 cv
581.754 985.729 581.754 987.92 580.406 989.269 cv
579.055 990.621 576.865 990.621 575.514 989.273 cv
575.018 988.777 574.707 988.168 574.574 987.529 cv
574.623 987.151 574.605 986.782 574.537 986.426 cv
574.623 985.68 574.938 984.955 575.511 984.383 cv
cp
570.613 990.494 mo
570.795 990.521 570.977 990.535 571.158 990.535 cv
571.662 990.535 572.144 990.413 572.584 990.211 cv
573.355 990.789 574.193 991.33 574.943 991.805 cv
578.102 993.805 581.869 994.443 584.508 991.803 cv
587.15 989.16 587.15 984.877 584.506 982.236 cv
581.859 979.596 578.289 980.582 574.94 982.24 cv
574.168 982.62 573.207 983.183 572.34 983.832 cv
572.133 983.757 571.918 983.697 571.693 983.662 cv
561.756 982.09 li
559.871 981.801 558.1 983.08 557.799 984.969 cv
557.502 986.854 558.789 988.625 560.676 988.922 cv
570.613 990.494 li
cp
f
945.348 1016.96 mo
945.348 1015.05 946.893 1013.5 948.805 1013.5 cv
950.715 1013.5 952.262 1015.05 952.262 1016.96 cv
952.262 1018.87 950.715 1020.42 948.805 1020.42 cv
946.893 1020.42 945.348 1018.87 945.348 1016.96 cv
cp
1127.79 1092.94 mo
1054.17 1018.6 li
1052.55 1016.96 1050.34 1016.04 1048.03 1016.04 cv
958.559 1016.04 li
957.396 1016.04 956.289 1016.27 955.275 1016.69 cv
954.865 1012.87 951.639 1009.9 947.717 1009.9 cv
943.519 1009.9 940.117 1013.31 940.117 1017.51 cv
940.117 1021.71 943.519 1025.11 947.717 1025.11 cv
948.484 1025.11 949.223 1025 949.922 1024.79 cv
949.977 1029.51 953.82 1033.33 958.559 1033.33 cv
1044.43 1033.33 li
1115.51 1105.1 li
1117.2 1106.81 1119.42 1107.67 1121.65 1107.67 cv
1123.85 1107.67 1126.05 1106.83 1127.73 1105.16 cv
1131.13 1101.8 1131.15 1096.33 1127.79 1092.94 cv
cp
f
948.105 977.406 mo
945.766 977.406 943.865 975.508 943.865 973.166 cv
943.865 970.822 945.766 968.924 948.105 968.924 cv
950.449 968.924 952.348 970.822 952.348 973.166 cv
952.348 975.508 950.449 977.406 948.105 977.406 cv
cp
1058.4 964.231 mo
946.457 964.231 li
941.682 964.231 937.813 968.102 937.813 972.873 cv
937.813 977.646 941.682 981.518 946.457 981.518 cv
1054.73 981.518 li
1115.43 1044.37 li
1117.13 1046.13 1119.39 1047.01 1121.65 1047.01 cv
1123.81 1047.01 1125.98 1046.21 1127.66 1044.59 cv
1131.09 1041.27 1131.18 1035.8 1127.87 1032.36 cv
1064.62 966.869 li
1062.99 965.184 1060.75 964.231 1058.4 964.231 cv
cp
f
505.932 864.182 mo
505.932 869.438 501.672 873.691 496.422 873.691 cv
491.17 873.691 486.912 869.438 486.912 864.182 cv
486.912 858.932 491.17 854.674 496.422 854.674 cv
501.672 854.674 505.932 858.932 505.932 864.182 cv
1 1 1 rgb
f
508.621 903.752 mo
508.621 909.006 504.365 913.26 499.113 913.26 cv
493.859 913.26 489.605 909.006 489.605 903.752 cv
489.605 898.5 493.859 894.242 499.113 894.242 cv
504.365 894.242 508.621 898.5 508.621 903.752 cv
f
906.859 963.818 mo
906.859 969.102 902.578 973.387 897.293 973.387 cv
892.012 973.387 887.726 969.102 887.726 963.818 cv
887.726 958.535 892.012 954.254 897.293 954.254 cv
902.578 954.254 906.859 958.535 906.859 963.818 cv
cp
f
829.873 969.537 mo
829.873 974.82 825.592 979.104 820.307 979.104 cv
815.025 979.104 810.74 974.82 810.74 969.537 cv
810.74 964.254 815.025 959.973 820.307 959.973 cv
825.592 959.973 829.873 964.254 829.873 969.537 cv
cp
f
777.086 979.104 mo
777.086 984.387 772.805 988.67 767.519 988.67 cv
762.238 988.67 757.953 984.387 757.953 979.104 cv
757.953 973.82 762.238 969.537 767.519 969.537 cv
772.805 969.537 777.086 973.82 777.086 979.104 cv
cp
f
750.35 1020.36 mo
750.35 1025.64 746.064 1029.93 740.781 1029.93 cv
735.498 1029.93 731.217 1025.64 731.217 1020.36 cv
731.217 1015.08 735.498 1010.8 740.781 1010.8 cv
746.064 1010.8 750.35 1015.08 750.35 1020.36 cv
cp
f
841.922 1033.32 mo
841.922 1038.61 837.635 1042.89 832.355 1042.89 cv
827.07 1042.89 822.789 1038.61 822.789 1033.32 cv
822.789 1028.04 827.07 1023.76 832.355 1023.76 cv
837.635 1023.76 841.922 1028.04 841.922 1033.32 cv
cp
f
804.316 1056.95 mo
804.316 1062.23 800.033 1066.52 794.748 1066.52 cv
789.469 1066.52 785.184 1062.23 785.184 1056.95 cv
785.184 1051.67 789.469 1047.39 794.748 1047.39 cv
800.033 1047.39 804.316 1051.67 804.316 1056.95 cv
cp
f
691.377 1029.93 mo
691.377 1035.21 687.096 1039.5 681.813 1039.5 cv
676.531 1039.5 672.244 1035.21 672.244 1029.93 cv
672.244 1024.64 676.531 1020.36 681.813 1020.36 cv
687.096 1020.36 691.377 1024.64 691.377 1029.93 cv
cp
f
659.033 1066.55 mo
659.033 1071.83 654.75 1076.12 649.465 1076.12 cv
644.185 1076.12 639.9 1071.83 639.9 1066.55 cv
639.9 1061.27 644.185 1056.98 649.465 1056.98 cv
654.75 1056.98 659.033 1061.27 659.033 1066.55 cv
cp
f
606.416 1029.93 mo
606.416 1035.21 602.135 1039.5 596.851 1039.5 cv
591.57 1039.5 587.285 1035.21 587.285 1029.93 cv
587.285 1024.64 591.57 1020.36 596.851 1020.36 cv
602.135 1020.36 606.416 1024.64 606.416 1029.93 cv
cp
f
563.834 988.67 mo
563.834 993.953 559.551 998.236 554.269 998.236 cv
548.986 998.236 544.703 993.953 544.703 988.67 cv
544.703 983.389 548.986 979.104 554.269 979.104 cv
559.551 979.104 563.834 983.389 563.834 988.67 cv
cp
f
542.26 1023.76 mo
542.26 1029.04 537.976 1033.32 532.693 1033.32 cv
527.408 1033.32 523.127 1029.04 523.127 1023.76 cv
523.127 1018.47 527.408 1014.19 532.693 1014.19 cv
537.976 1014.19 542.26 1018.47 542.26 1023.76 cv
cp
f
518.779 995.074 mo
518.779 1000.36 514.496 1004.64 509.211 1004.64 cv
503.93 1004.64 499.645 1000.36 499.645 995.074 cv
499.645 989.789 503.93 985.508 509.211 985.508 cv
514.496 985.508 518.779 989.789 518.779 995.074 cv
cp
f
660.761 952.646 mo
660.761 957.926 656.48 962.211 651.195 962.211 cv
645.914 962.211 641.629 957.926 641.629 952.646 cv
641.629 947.361 645.914 943.08 651.195 943.08 cv
656.48 943.08 660.761 947.361 660.761 952.646 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.1.0
%%For: (user) ()
%%Title: (plata_9.eps)
%%CreationDate: 5/12/2016 1:17 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Bj2NJdOtHHI]dJcKA>>!J6_sQfLB[82DuEAhDQ.4!#[@j96Y_HSDX=c*KaKi,mc!oZq#_qRIeY\:i;C5HUMK%]t<"d\#T,P
%a_L^V`I_)lYT:n:n:+U@qS0XdT@N[Nh(.3\[k%DhXju1nZn&P%GHK\7GIi]d[3+L2iFVh<IOQ'se/F>?T7tfb\T1/f8mD;RB"_'r
%Cj2?0?6L_#%!3#jo:%B*U&jaB_o'Bo-@tl+]cJbX`o_R@T!"M\@VPV`bbr/.8\NmEP^E(HlglZrQF6i4HG=W0Q60eE`I^haR@t]1
%la>bn^X86*$Y_-fZSu+(&9EPrF$R=l/"h`8rf<oT,QG'E"JGe$@,q9bc%c88hbM!>GV[V5mQ0KLUd8B'4J.(G<!Rb`!^L@BOk@L&
%>4]C(ma_*:!m<(iKa%8oo,kOuSH1Zk/Z7g[3\AB%`c3/Z_kQ>@^VdQp];fjscF#n%[6GH8cYDQVXeUo_eEQAPs%UP":l"mUYMZ:$
%hR)Q2g:;`BZ(/eVG.#nop?;RHNA@-/JLLQ-C2m)<SCDjQOR5LZ8$Q0PP$),aS(m$H2%Z@]-J:D_[1:o/H)V1[8#XA2:YY(9nqU4e
%l2T/G,I\4D%aGQjL%IU<St&SY9nDggR[tnFEU=BEmW@_Ap"#iNdgjB;TLecjVd<(H2KT:gr"flLN/[dpp&D"Fdl-iE[?ehNFq3,1
%)RODt?g_FhNE12(h8G.ln]t40qA(eRUOAkc:&i&Ed1H7tKaRtm?aZk#]nM%;oma1+\*.e?dAJ(YG1uodXk%Lh?iN&`Wj[t'Kt"H^
%YMGm.Xql2@^<o/W$T$"nKnE.26=\BWP;^C#rI"<r!=@(IXWYAV?iHu&h`UjoBh<cL!sj"Dogc.34uW\3G'QR4D3S8d:4[mc#2HB]
%6,/XuT@+n1Yh"/nCJ5q<F4qBNL"d#pIn9b&V^nY0pA2JVroWX<VpoS`]Nh/tXZ%0j&)sudSbR<Ad]">Mg=P_<CM5"&.sH;h[QA+]
%pM-h#$Lg01m[r$UQ.*QX(%a^.GdlHi-,ibt<P-A=b!4A8_@[,+c\Q@Jg9Hi:q>@U+.BI^hh:'5,]A6"I+7X\5PPH0tKUt3Okg__r
%SX/1i4KE3N3$F,Qkqg/^-+udm6pG"U=nK^M<9kgo0&Yqdg[+rC-CWhp+6=]dr?':ZG,*o2-DR&l?/hB#V,?"IdI#J)M7EKk05f8\
%AUd>G8V)A+Q[\`]/FVH_MS+:;YL9E=pWCa%rNA?3%VL8rDiniem.]hZ>0>djjuI87_Z"9F]Z/^->OJCVqM1kV9c^gLE2@`c/bsDd
%m8K0g4]kJjPJ7K`oWS!B[pP8+`.+uB/$O*;SKCr2ZrEFgX4_16Nsi=QKK3lZ8],gg=R("NK5E*9ogZ>fCN0`[n8O:b>Oj$<X7l^0
%duQ;nA_in/4PZi#>:8)nJ!:n#e`sMB5<8+:d&pAd8i'Y%DE'l.kkk_ob(5Oe2_JY3T^l.o2#`q['Ro+.iQ(^iBX9:,prHNHFNj*s
%5#DgF19JTNASLJ7e2TZE+50ek=0Lc%$B=3>Xa&9)@^"ZL,,_kLWEm1Rdd,'38-U.H(D\V&C/g59h:cJ=p:X7hkMaO6p>\Kb\JheT
%^U[;-Q2dfE@7RZo\8Z2jpNq$<,-OJ<bO#l(ab*fposg(cHX2V5Vq15onsCE.@8:6Pd@0IGepOmDY8pjo1lO;!^@N"c..u.[gm/QN
%BJhF-K!TG3)X[-"VbE[d%U@GZj$IFoh="<X:F5(`kD4/Ld+J/JIBY>NANAE)(Ti9@YH&K/E4pF"=IQgA'8Xr`Q('$5VQS]"\T6QV
%PrnDuad-kXC=g'Va-k-0U0gi+/dK?jICZ=12tc:0^>.5)S,..afU)2IQ7nR4SSR6./N>])S'-T*K_oiOl)`J8W&=9EbLQ<Ye'sX`
%0^Sf;Zg)+"h19II\mG9/cGdH,N+TEl\F;OooInWlf@Xhe>4-UHol=j@@dGGrDU(OceN=JL3nYQr232LPN_qas@ulJ5?L?e5DQS*h
%2dBj!hdP<C-'pPu$DX&n_RE/:4MBBcalo-7NBFI3eS]2X[Zpr[o3/!J.!ITK3cDKBXZTQAggt:-k/VDBh<O^V5D<IuAR,#lW71#)
%43-GTD8/uo8!05%;jmV,T`IL5l!HhVrrms;C!q+>\#^Q)B@=J%gWG5iK_r[JeE90Yh`9'YpXj>Ah0-K^gWgVoRf@NRfN5Xm>M0J;
%dcgMK\A0pW0X6LHWZoJ0O+&_)0kh7CLKZ[LaLF,="-(;h>'Y(s-ifFH_4,*Ck02)&K0.aGjA@(5A(2Vc+`Jf8)jWSYhJ'=IbEGl=
%<a,#0k0(dZHg:,g"&n=V+)V"Ql.2J`oNmlQNgI0!8I[b,/ZkTAN-7#'j-QoX>3.QBnem:EI?U[Yr#E4?H<;s>I8+r_o7,oN``g"1
%=RFUQs3?ae]]jQ4Ftq%FmS:;rn)l]>h/HVS>HQr)^)Q=+h3:gD*'!j:QY]Q>q5<>p0=*UlSb#dmEgT3c9qWF\'k7n1`bpCtqF+Ji
%-5DlHnG4e`%l^.&2V1C-8S@K3q3L?ahda0mnZ*N))HXc3^l.`n-u77Vh9'4^?IR[-3GMcr\,-nX'61Ya.$++CD%obUA?LjM\`OD:
%>ZBTiE_G9Sp+_oAk96kI0-Ie;Wq.VD=^<+`PlmGHO]LL6C?.oLXdtb^X]f5Lf&0>^jN0h"FVu!EHT<j75EF]@QSE9Fom6AF;6JF<
%.@QUbo4t=GRUmBi8*]SIGWP)uTaF/:g6k1/7[X5"A!-&2'.jeD?:X+5WEgSd222>?J!GtV0:#lj,UQa0jZ8;kkDhZkH`uOX+#tMe
%f8&[5+EQ#T;iYpbkoB:Bg@A2c29'<(>bq>CLh#ftQh4,A`e@"pl!PX!9`Bo(\.Z?'p>\KFeSaIk]lKstDtYhUfOllo)NP7X56i',
%o=QV"Xi?&aVoHGKNWZ:^lhKsZT&WD2:9\=om^/I/A0!TJ)j07O!8Des^\7GA-o_,Vs2`#-A17)mSX_$\ZlBlSNI%X+c>e-,;JoJ'
%=lC>[V+o"q=d3.`AhFr`s/T1>"!2&YLo-Fc'B,TaDGhcQ*b;EHpgRE`1.h#h>a.,1]RHV?)OT]Y]P/sT_JLK3;(=N((*sJHf1#@;
%o3.@uVWB\77EIttP@'5g,Euj&-InjO6"X;Y19F"@DePVS/]rbB3`d#ggrrrd>S;&9Fjs-c7EL2+Fg7mKHS%jmZ^>k&\>ckaQ((a2
%Op@E@_Y*q>QKC6ZeDr[6T9'uO4Nm'hG[@N[YN\V`^W.e+cU%KW<K(u&2sU@YdamA<^BnuV%nDGYU]/CLnXI8b1\M'sDVW:!J+Akm
%WEf<<\J@m#>)k2%b-e3RS'&-S+kJV5"IY]o2p5I,iD?FMD(=*8\#%g.=M%GMg/P(HV:tsV<&6<sLL\DD:YM,qfRj,[-$ua,J5\B&
%Gr?#-Cm8E;VJJ)#UC>EB<l**Z^aD\Ajf78qg5a>pqk*\kcu/fc>%>$=rc'oP4-,RpbFMhCIGqL?fBr*oHE142Y.$%_n7JQ!lb$9d
%Xlk!t_e;+ae8EXF1fqf<l(^)10UmS_C$[rM3.7'(9N^,dQVb9VGRNVJPlC)D.-'9\K"^5I"l#sT[L2YV9Ct1Amh5RqpbgYi`ohpN
%b_n-<AfBL,Du0DK*8U/7kN;WfppDR1c\KgG@N#4=85W(YNUdG\eTK+\jlDe#Qd:q?o=Wm*f6+!@Odu7Yjk2Ts_4&C3>"X>c_7m76
%@S,]jT[DBn#WZk6.&W<G_&K06S-+P)8sqFo\<Dn>*[Phb7NM&`QLVoZ`,_d44)NPpGuX^LdZ$Jh<3DLHr'cZ"h?YEQ*>9#LH+)>%
%(he6EDjp]sk'na7s#Ysj#:GLsVto4arcah2S`YF"q;5$s1sQ'WkV$A'c[%t`fWg`_>*@@)mt=0=-9PTic1t+U^=/V@:Ra@)N1Bb7
%EPG^^CUZi%[dqet:lfT.gQ,O5dJi`P'H?_/diLAKW8I^%*#K0/(n6eZ=#0.*I*"S$H>HVL%T2*O*0XNp(ThNF$($((Y%\Vth]Sb[
%)l%,#/.$)c,@o7/fg"Nkk0Ufj0\N7Vaeg0KSVG7`@BtC$:K]aCe7u*3Z4^qGUq>n>mA3&4m7+4ee>ZH7g7<9M_S#S!IQ!36GB-)-
%CCU,Ac?PQ#G&6/#b(3Leht:TrGL=G81D3Nn*-7KZ^!;1bD3u5OX\Dq77q5cV4P,b_m6'h4H*'E!8S@(eF0^.5"c\8KN/\-an:4j4
%:IN0V]8Y(g\]BcD&M^P)ph6D>8"'t.HM:ptK^(D`1(Cli"#%Cjc"Z*I)L2(]@l4_.>`Z[Y$F<:]77CWEr\=qq9X"a_%D;U4i+7;U
%`QbCRR@"!&^2fgJFTgs+?)bMWcV48$M`qS0N)MK;n&HdG4:j2pCgo/=R.SEGo&)4dO%n[g7%8S+G[hhapk>@2(mD)YgF_#1b[F52
%irfasWH+L;,A#;gj%XcTkpO0-WIgXfKlV$Pj7EMPS+Qj3:RpbCoqgp=9B.5Fs-\(gp.rl^p7KfpeD.E8q)McPRbl2Z(mEn3?Y@^T
%Tu^u/09pRQEKO9C*%oYA)'&XEFS;)Hl.%s]mac^BL/+k>;^>^/T&3rrrtg*6^N6tFdi"O[PI[Y7bFX#n2pOds?0gq/'REs+=#lL%
%*1+[O]fbNV=g-s;6W<BlL!5/9k<LAT/N$!r.N]:KN7p#?[/Xo]N9Oiq2_9t$9]HuAaJZTBEK')c`%gi@0TBR9XJ^F$G^^ROR)Uj-
%m:<)6N+j9lR`$r[G<E6=3EO2M:%uto469)<gj%APkG^D,ITPr-1Ak6NWr0cb4QEE./`q;mk,@(;D0B[OqmBHNNup(&IU'DEH!.,s
%Dse0FrfQLr[Foe08@@1K]m?l&;*6ZK+[EYlH6X5DRFYkXW>q&%C\,bk*b90"fUk>aP`&AYrm4I_#sWj.B,"qkn2SbdD4ZZHBC'R.
%j>*s"47-W$n]/noLImMe*qe64m.U/JYaE.iP_X04D^CArq"$;f#5tR;cU#<ee8LFT]ZrgZl0B]5i%k;tCUr5RCD*ZG\P$8X5\Zf,
%`m$".b(\+u.JV&<b(Q+.j[!<YlnoZ[K[^Pn]]f@ps%m7*GEl<Sh9lU1dCQl^p`.gEdn%-gD'C1o@'?&$[57L;L,?]qQi!t-c.&5P
%H?3#'DX,J@]t%PcrYN8Y*+o4FpZ?@$H'hUUn[-.jFm!dQ2Ke2[mbH<_S%<YCBM@6mWB5<Fgc>CH\T>=.\L-b"Jpd_@\pR%B?+S-s
%l/&i&eWW`gNuG[qrnL6FBL*,`BDNagpodr`]Kgs@4p-#rhj'SCO#_ViiYoN]0h15ANpumX*lo0o0Y0Q)S:%5^nYf<fS1PHYe35Ne
%lFe9t\O*pahN(-t.(*eK0"T7%3VI7+7lg+M/o7m$_Rl+=o_74!R0GZ!Q!pQ@_&0"PQQLNY]32H,H@IS$a6Oi4qjM<f(4XXlO-_QQ
%@pB02k@q)7mLAhtn:f&]Ll(%tLN2:>q[6X*Q#\K50%5,O=QQJ,l1R3Zj[q*X>1r%:#PLAK,PUqUYDll2rrq@#*q0Y[]JWZ(d(aUU
%LQ/`P'9R/BEDld[^"L_s%np/e$QiD4@sF4#=.)kMFg_mjo4=9OJ)s"!#])$AIQagD*;lkP#eTWYH+R)"A^:g0R:(Y;0D6d[e_r,Z
%K6:q_r=>??5P;GJ?WC`!BgQrW'O;6EBPJ4ZisXOAo&*[j7FM>"$'3pBPh)8fctT`](O?U)(UYt."-(;h?9*t,Z]"DN)'$<2`o3Z4
%@59gPPDqpN<H9ue9p.a/3Vcj`go:$CS$cLn.C`F4nYR$E2sS*4ErEkbbZ$StYX"[-a2p#5-=&Xo_-tcWj%jtI;[#2W$>$4VYJ4tf
%NY1@:`s*pAkkR*Aj8,:d03uQ)UkfubL<n-@Wq];;@!;CK\*N`5d?Tde>[s8jRQjKq/CSPuSnY\M1>FKal9D'C8g%2FbCAY_0AZ+Y
%E7VrXXf'[\HV$ZT23nl&S`f*G]JeGPiau=`2t`#g?[j;<S31o\hoJp@@?XLb,8gkJiK]@/(M+Km3]mA<qlo,ArbMGQ`8<SHCQL'W
%E@#cm@=M%b83eX*'R+L@?N\%!70Gi!2A8l$G+R#$?V>b"4K'7/$*P9a?$h5#V?uV`a0j3)]ed\'a/#8FYC)StFK\,TdOF6J>VO$5
%o7e>CXiDte2Z'W!hR+%B2i5V5@DOGKF>A2(-*qTTR=4[\g$2[t6eKAo3s#YXEiXPWk=Z-q8Fo&OQTpIU9X`o*/aR/E](&tPe'Q.6
%e)?J!;PPu>E;hK':.m-f9o7sb>/=!`"R0f<bI.m>>1M\D8.>(j3dfIqmF!E\7*U=8YLZJ6/b><YrSOYsr[j;jFrPl+miDB]$SA;V
%D'.:8X.=_6[.(BV.\G3OKq1u(ep,`+"o3;Cgh>257%pZY#OQ]p+oQW"E]W4CLU2]/=qDj>?-Y)gm=P!3K8WbibG@S7_uJW"q#?<Q
%r:B68jgS-c[uV?A]>Ta`>4"OYr%BbcbU9-?15WEb6oqN-9UKJelco#j/SS`1G48kMbR+;p?Nt&%ri>8[;;akHqBKrbS%QV4(HG?G
%5Jke=6APQEh9b\?r8H:W&G%!X(Dkqp0T<0)HN+*IH;8s<,M8Wq4b]5V:S4aUoj@@O*a")-Y0mB^8fVAXdW:?V1/PZ1cZ[Kk>-D!@
%jE?S$S&hm[a^/@X=K#k:?3'V,0=EE-/Tp4)*Y$K`FZ=>6Rg1M$ru2oGrS_,`[p'`XGr+paD(5.!hJ'O`hBT)jPl>UoOeqpCY,9hu
%3;jh2Ct"h/j=n6Cdc>=E+pf4fEW8Q#W856cs.:`n#+udWTGG5tY4S4EZ)j:=ZlsW(+)1eS(&uLV<!!p5G/V]CCG0Fmkcb$;0`TKN
%(TEh7LR4G9G7S?S[CV-CPWR]t.r>E(N$#4p\WbQcZi@]3>Laq<3R9<8g6K"uQ-UK@8p&PXM*UR/hSKNKY-)<3[R;qK[GEFR-3p8W
%o7)oOrprjpe.TB?Qu=M?#VtN$N'&ING!btLTs4;^I^+F3P<n]RZdS=9g<Bp8J%q49(V=6\H-i8'L\WCl^VMl+<u59C\(>]-=LieV
%k600+23?nT7_Nh``452ra8'\X<c2/oEkZH"o.#^&$XXS.Ed_Yh(Qj/^Gl4LGNRsGLcnbKOi3SO2XKJX$k8!o^&=c;BXL?lMiH*N:
%O^54t47;KXl6fZR=*ZO<SL2@0@+cqOAc<>6ACqHhg*U8Lc!%;U-0+84=A8W70BRFX77_IHSC'AJIT@Dq=r"F>eem1?X"/&?Fs2^\
%ONH!:05QtZ-iNU-Xg$PDn"4Cl*99iGdUQ8&lUB@H;kQapd7Is`(2K5JB7mF/UTPKM%J57ubLPl#Is0/m]bK)H<h\%3[0q?CDQhWj
%s1:0K/u,7%UepNg)s(D.5XloD`i?H8GYXLi6X2$`H:R@CVcr!ph?sh$mp@g?=c5EBG/%*<l*QYV1>9a%oC@1/;s;f%rC0toR`Zp5
%kokh3?LHb24:P8n;Y,Ci#&&=-JZ;#oqlYE'(3ZC86mf'QHIAc=oR#]fr)D^K=G3sFG2Pi-dT2Rr>.O;r\\"Ke,NE`d41/t.o1,p%
%;#@:pfVmAJjeI-shYT%GH)$1FPE)VDCXJR?35'nUlpt4cl[E"&SgFT]7pFWH&Y\lW;pKL;l1`J[;Y#!>[QS;r%reZ@iu[PHo4MG1
%r3Xj8.Q@'9kP[k/*ST9qX)OROHEK3.rC<u2No4bu=A"r$3fLqm+14_%:5id7o+g:/7PXd>)YJ/4@X,)+&N-**ZFU-)".Q*p+33ua
%?cK&[[VLBB)HVkm/D-o1C5$Q/dlpEIlB!He<O2M0`j9]H#_8eUFgfl5r:=TUS@%*i=3:s`7AdKGiW.g_VUg@S%Z4<7HuSMT['eS*
%1c4I1X`\SVo]lc>!s?egX&gt$Y*?OYpS1500RT23iBE)s\TQ]1-I`\TjL%Vg3iCH/s&",8o&pY=A)jcL7ET2,c(,7h?9B!%mGM@Z
%$'OQ/nfN"[:(B3d;@n%lMjNP3g1n0=QH3>nAN-A%c!PB"knCDBRr3)D8gdYT,f_oc_S'-ZhQ$"N)F%,KP:\X1%?<9O:elLG3$t&-
%d"0kI:tb:Z+4pNbLl1]$ZocfAFTauH*klC`ZG10Mg*R"U.Cm$trc_AVD<eB,3u&9[HAbp/<LO2bT3g*KomYAOBV/onU=LcTg:fnd
%)H74f%rs=Sgf(%d$8ETA%>&.c$'r8`?l<^kUY'$?,:9LMRN83Z'D_q1TT+ctLMoTcY%D4;4j\@b:p(;,TT.e+T@b!f^1q:kbY,Ca
%)JVB\Dm#hE'U+<O9CqXWql$Id3Z0k(K3%/C>>kDRd&q'4+[scBf%OAMOPT0;VVSTTq%4XhfbNoL<6C3?d('QB7(Ir$a]/FXm#C4t
%1/>VLceCroXlFT@:_L[D2hDBR/&T;=Q'2^.OFr42eaZsf'M%h&ZOFGhCV1o>]\3;^Uj6!WQ9/a8p@3-">iS+-1=Z:/H=a&RW*R_-
%mrrOmg/okJ'?OdL98ko=:g]3k_;Mk$;g!GH@TCG->ti=YoXJS;g)7'I-#Lu/9iB#k<rQ*h=0ETD&gM,6;+Gq]hGNYmgLt>tk10;]
%p5@5;,G_2K-nb)W@N8\'1)#`h9bPsUhBWjf2TQNY/W9=VP=sqBqqP;QF[bVVZ&6^@/F>6X3C>VmbZZS<r@"akaO]T\5]#ZA)W=S)
%#]ana/oGh)hT9/BF[?#,i<J$G;#rUcO7`io?*/88-`p60mmrjlUk2I1Nl`m-a7[GPW^=XC=2`UR_EE5e_^IH)`F`j4?dtn"DUG``
%&?3/J%l@!3.FM(YZca82Wl9.Z:52q4lQ_F+Gte)6[,(QPJ9a3.N:"%c*p<%2-cO7X:c6[X@,&8s).1<U7_>tb+'2k(Xdh="5;!OK
%d\tUZ?:rDjW)mo5-Ig":dXa9uk;ft<27s=uelXg'D_;dIB\#Taf;/VobsZdqN,_EnUA/'.Qa0H8nLmkZ,k#/o%*5/9FRW:i.\6;/
%<Gc,Ze]BqbWa3Xng:MB334h]B:A;$rbaK0AWk#]`cc#.L`hocX@5AcOajE.T8WLgQ8k/?uEN<0B2Qi-jdce>bg`?qG%CYTrNtS%+
%8"E\Id*2]@7Q!3+_dpHn9riG87b$Df<q'V@NpU.=6YK#jVffsl%3+>m'*LhK3GR20/X$uL]54t'Wn'O2Va]oEcY2Ba"3n\[ZN%-"
%@Q%8RL@>G:FbVGogV9EGa\^Fo)CkDn7&3<">M;n?GulgKKm3?oLmXI6Ie!XogZOjF,S%<I??Z8%U>!p0%iOSUK`seLF>nupi+C%.
%<ol)GO[^hSclJ-;%(.[r>"S/DP%Iel&!a#+7ErIomM?9"C.Euc2S&h;_XB;Xmril(T.U!">i_e?af[G%^JP1]21ikKDd>hD4H]i\
%/'T0&)IR:&G4.8-pp0=88[gW!H8EFtVt%4OqHpYMDQRtb93m&)a:h+_k\6r"L"06Q\#Lq,0Z[j\Csfr)&M>JSU_dZ.L3hNB+,L<b
%Qtj-0Ng]NW%`Wukr9#]S+ao;N"X.JAD)E5[f(A?)iU8btUD+/Vfj3Jt>[r=jc_Q@dd>Vt(B1:D+J$u-cmmXpT`0Nnc;r);_oNnZ/
%8P3M(#)f?d5Ib/P4O1U3a`*8Tm\'BFDN3oN@)/SOE-rCA4>?>eGr>Y"8n-J+dsgne<N\9f%(Q_1[8bZpgNLC7Y=a.H37G#u>[ESI
%F-%jC\8^=b&[KD[#A`(22sSLSN&77#<:Y.cAuFH1<qs#W3SR:<[F*L'Vc<CbI_<6A/u1S1f=JZ,Ggf^sWCHO$@!)3,P,+nuW+K;Q
%$[`)j&I4kQ'-$qrN(/%:9a9G8A\6Jffk:a*Q-rP,O"2ojPOf^;K)S;f.rW#m-Zo%^$dnDU[Pn]Z13QJ>2i8\H>?[eucR;@JWb]mJ
%lq`b`<gAn=rOAH_`1LP)]dk(`Mfq^(Ksgi#7N&e42f"5h]IV(0E_=NW?#WE&8g#i*9'#=[Q$_9I+14l<Df*ogilYPekQ"*]@@H@e
%OTTOpG/_8>.:Z?CX]C/Jo:Vbu6&VMep(u*U(&@7?<@RC`J1gf2ZWOmj&TNB%b7a.F*b#'EONV62M=tECR$WQu:<[gah]k4egbDe)
%`>b;2UKp'da#ZnjEcN!]AAk"1?e$o#F>XL2?+-M"_CS2]6*/qSbah;S"s#Jp5&]bp5IKo>3$kP$+=jNYIRZUL=pdZM\4YF+r-;I]
%'i6DG>[2.]?kL_*5A_3h&I[\QI[%Ii1f%#J<\0>PLk4g*]@&>gn;hb-E)%a*JOlpJq+e8())CDI\_\gc>LK]_(ut2kRQ)1X7JI[F
%D%'CC($]$N:bFTIddIF`jQMOn63q:LESm3#][^3K<'`R4bcKqO3pP1ogW/Q1lJ4eAFbW!*`J`9Q2M*ELqY=.=m`Z:*f1a'A,Th&s
%3*CX5O=lMWAsT]JAYM$1r8?#5C8..f0l1,:=rk!7o!!u%GQqku#SjJ,c_^K@?Fr$Pob/'PUSCkVahXO3AJ]$tN+sU3T:1YV\!B"D
%g7;NOCKIsO^UCNbq<R+e<r&'\?15n\]h`^mmiL:l._hU*mbZ]$=C(/RD4WAOZu/%a]JVopJ$!$0G4,QPSo"V>(K]HUIJhN?ZFKl1
%rKf%*IO3e)E*c"XD9oh2=l&ahlR2;TSX$$)`<Rp:oB4qpmL/2$9s_.4IB0,I4n#ME4F=cTZL$-8fBSD<=4W;Kq^4aPD-&sKK]2di
%h8SmDe)'r1c`>pCL&"WQ^"k8WmIsB=*XB1OS*Sq%GH9U>pYX@Tlc7TJUQM>-$01(8mH[Q_QO_T(D_I^4Cq'1bAbg06o?(OOfUQ0<
%^Y@Y9H!3A.Bm@BN^XCN2++J_UXu9<!mh_$d:O?lTiC>u9,@BoA=7#>C/'C`V^QX4^dG;2`-XYU"f=gY=>Lfi[Wsd=a4/Mn0gFZRH
%qf9)?e&:-Ujsh;bs7OUiWHYkZ>e97XRp1:us)i3jmJ`U"[9EUHj1!?QT.X+njYQg7TA)?^5*`*alX;g?eF.cjXFGM%?#AAFEdsc=
%pNsZ^]moK4&=?a+H@G/-1r7VpcRYhmjaM:=dEAAA@Is4`oe:dG4a'Jhb*G27[V.$U<n<mehpTf(pM8_Lf;^ISf,g7BOR8BqAesNE
%X,V)-.6)_-^:U\Z[=%l-`dI.5+bfTk:VlG=iEH-%h"'4bVa]e4p1GH@EU,6NoJh)7)oqLuGSe#1@B1HQT$7HIMEp'"[k7LKm?d,L
%bKKW<Dp<^s@%%'[I,Rr4#u+nMrO1hX5NX#*/uuaQheg#fp1s7=?Y)(WK<mu\r8*lhr-2`.=atJ_8.G4ZdIL3.gT)uTR`UG$]U`&0
%:ID6bT-m;,S1_XLH*i?-2322FXk!)3hJNu):V>Uqn?#SL=T::gIf/]SpPj4hrghTtkfrF<p[7o;V4G$Eh=]h,qY-9DT,1::RT8go
%_4b]/a.W9Kj3XBE]B['_m;/qTHZuu#rt[_%3c<e;fj$Uf@+-/\rYgN<eTNu^[/[i8U9q9*i5OjTD"WMKNo"P[!K]S8]_Hg@akQB1
%60WA#Puj7]HG>^TT(i*!a:2sgYnQsfhKNl%U%X=qG1Q0J_oBa^h%Su;nrn33oCiudl!X>Qo&`!\aFj<!eTUk%n@Z&rCEBWB$mD5j
%VqjQ*'<j4#lM:/&dc#8:l"55/I-KtZbjgU#a]^n'kfhoZZ7INJmRY^^Meee<pWdF':4p6dNOeH9AkK8F#9VYND"]ff+Oh.cY3%l6
%me6#$alu8R>cPHi.to(9GD#(_qlK<G1\bla2\tP:i_d`/T@I8Ld57\PQdn)/2NQnkea3l[UXmU_NHS)^KZD"n)ij#Boj/,l:N(Gu
%G.4``\aFrhjrQbcMK^dQe-N8#n`Ij&+0GeU4)\9q'^]OOkBYYOLL8@LXFBJ8S#_P"gNMi>o_fdKj2G7Y_"kutqj"L5D^#$Xg,hL3
%:Ye4l>7K`':R1.6>sH('/>2[E:IQOH]RBfR96?W]`TI>IF62K1HcZ)flUTgr]@*1\Q#=%d^!bcRVag<\Z*;I#/_(5r->h+YDCr&`
%c(*BEQ_2tfL8b-^pRl>?$gAEoFPGADIq.WgpNNV!)>FpL4jsd7BS!SiTa&or\YZFr1!/n,D1C+(2a3N#^HQ"'^W*+R/'H8iMU^_Q
%>ET6GpK$[BrPR'4s1h9Wji3Br"DP#\.Z=&^a@o'OpgO!?c<;_,?^,J5c[29bX;<\;%Jm9nWqF63QK574+!/DnfDESk/$G<oqdbt=
%?lH@c=nR.sF0_ZiI\XYij'CoF]'C5E+;sQoPM/1QUVFOF9,#kN>YUD5&?X0-Gaddki#'K)P9/&rWp=C[Z6lZ58"iB@1kI.eM.Or7
%mL)^J`d%#1kWZLLaeB#Qh-O-o6fSJ2T:QnUTD*MpWR[IcoO"4_k&0bf1LF2T7P;G62F4eDj8E&*PV8kTF"pD_Zpp\VcQ:*A8Yjfp
%\";m`U8=m`T-!=#b3Xqk9E-G/_rQHLLDOqB2L1=:EKIs-OQtHA5=$692A_Iq-+*44f!^E:8h\*Z`BWiKU\7@-jiu.6@UP28,PRH0
%`5#RD@Cg0*Lf5ZY@5:;q3<lr"_Ohl^B#T!Mlhe`>2sHH9O&i\"6V;^ZN);.$3"t,`#:?G@>i4&aTY\rlpQ\.a]Dc,u1FOh8rNqdX
%j2p$4,"=a3Ks5A3o/('O%<hANN"Q[6>jq]a[0[q>%c4p5D6DZt*KV@^m$RVo0""5sSnr=oIJI;ko@AO<e='B!>)]flY],BaRJ!nO
%GIQJ"XOY'*Y&%(_^>BU[B%RrLDtd^ba0\:thQaZpD_:;Fn5@k6(1s1p9t7emqg5@81B*Y`HfaYnR<\,+^\;aH`Ja2c-;(=o[F/As
%I:m-k9BQT#D.BDVB;_/-f4+98eMpf?pq#-"r:T#eZ_,<9I=&\*R6Pr+)U(8NL21M,*hBCa*c*r39eJ>sT(h8eDj5D<HaI:-GG\q;
%r[SuH\?X^N(:.jkJG1+->A-6K\bCFW$\JIK[_2Y15B1"MGV3etrJ/Zk%aRS5K*e5(!',&#1EQ+RZdaVa)TBuXFUi?XSgh#1rUX$t
%E7:p]LUqJc#Q*90j*LFrqMWn^50Yd.[/,+1dt?3&G<biS<48A_[DNS\A\'?brJuRI`V$?O@6*.(3$-^7FTePlZg_gAqk1=fjopl1
%Z)Q)`\rqu!%b]:N61?#UK;Yc0i8bRK"uK'>*Xj^0[^5u*lu%gXm.E-N*u4Wf^A%9t\"bpS>Ol*3a5+JFLKV?pK[%uoIUcrL\t=AZ
%.sk'8S<Z%B@cblV4K-YVSU"9>#Fpif\(=B)^U6T_5!7=?n@;'q(Eir_cX+nZUU#75-&f,8^Z!B$RIfWCqEmU@emc&?Y]*Rf1S/]m
%]",KDHSHBah#-a=_<oL,<Zg\mgl7ecd+A2dLS(<FZMf1Dp$Tu*1]*mA8hIINiGRoQX8TMHan625^:A!Jg\7f=XFITmD4_U`:V/]r
%cG7qu4U5U!Vl-D+'$B!7l#]\XG`+644lI9EX=$YJi;g#`a77lL1&0&ilEaKo^M;HnDn<D5kO@_/.:.>*OSj(UI4s/EiiR(AYB55?
%rbV2Bm(>i_lQ%uNo@4VUX1cd&_qA7l^su^n55N]2H1uXQhW!eTI\!iSr/JhSOOZ^lNb8accT;ZO.S:YWRp-hmV.mfgRF1T1YnNAi
%YtF)EbuL;#VK'c%g"9C5fU0=jp@2>">7W^kYjdL.MN.(?"%24,"rQC7^.$1LZa":1?$juW-B!%hlP652m"aD'l,<n>.VJS@`N/9M
%[2I;+&tJcWh"`>KqV&:1U7<"Q[iQ>3?m*k*GE;[@g=L[/[8kOr+0IMZHSu>EhdTfCVNElG]nnpk*.GHqM3`X3CZYHYQ^L6qSL2iV
%1,udbQSp)FJdsip3-tA)T!`B:IXbfC?`EP^',XR)]9h^X=a_ns_e"%e[ddqlk`@?]--2\<fo=.Eom=fMM-lGpHl%WfT]UH:Y:Mn`
%F)QK-=oYko^O9H?]md24;VF4"gB?EhIJPs/4gV10dsr#6oB>00eu.m?YX%ol$-DJorDCb!%dr0+h`SQ"n&+uVD:rYK\hh,#HtIPV
%9qG;kY^(5/pP^LFrb^opcMm'a=ZoZ`Hej[l#Jm[Emr2UrLT=c_hVRMiP,YqTQqqT'^$SNRKrb2=E?Xr.rEIk(Vl.^QN'ucJ>kd?h
%j5\,TrRW^Eese=0Y((]i?kdXLG5`IUZh1g,l1`A)]mUI+W\!NG1g-i,R6BT?gZ#8tV>A2ZqkHkpd^MmHroWCAc/+*MB_O(j2FFin
%]1]`sjf+V+:P/=:f3YSmI54&1.eh?$oncB-msB0)/)LfB;%7(OBntU)[9CkJN&ZS:1$XZ>GdR;Fg%'H!gJ88hFc]sJhc`8$s4Ue[
%s)uF1qY#))XiFZ5;1ul#"5;LD=3fim`t.RccJlj%Q)3#Pdk"R9>Fo!^/Aus-k`o'@\b^(>3<&bnj(#38DdZ5uDk6b1A.*e\:hlWj
%4M[h*8LC^:pn,=!bGSo7feQ+[nY<l?74%J,C#bj#`d;Mt*j-U"mQsL'e55IZG'e;4o_E$=D<5<sfptY,<[iKB<Z9eio\eKHgOlX!
%k43iE=:WI7gV9jA^8mg+7-C+.%V:ZfB#C$b^un.n[!S5X=0_e2UF\WH]PPkV%\Gq;^A7bJksKJp/kO<I/jfK>M+558>BtRCco2/Y
%*'E\n(\ap;.uUUFSJd_TrRX@)gLb4qV/?p[rEaN+MHF_Y50P"_rPlb(g6]!h]5+"K,L:Q0ld*:e]Bf&YRiBPWGOE0gMYusl[CPn]
%+"!H.^QCQ=qoAukP!)0!cauh.gqgo$j+@j;K@Y%k@)]89kH@\MDVf]Ed^f=Q[sm-#'M$Me9R?>A(<N9ERqp&?gm!f*IfkTP7/0eV
%YK]/t^XXpV5<E/#qY4rfm#F&eaDL&+a)3[#dcSbSoc5%!h]XT.YLf)T^ldj,V*8@O-?:3PbXR%okoCX7:VW0<lrBCbnL%s"bE'tf
%RnTf`,PnJ;d+Cmi49%$[r5RJ>q$Si^6Y+goVVtRge1[<:_+5mFgZEZpUZ/arl@n6aM#Fnl$MRnFdQ)^-/[\6l1D`_P]Dj(dBT*fa
%WiVE'QZFeDeq8=YEj9G8qUO8(_uNBahWb\7+1+Y+o47GMOk*TLU[k,=YHL&Ms/m<e[peJ(6;:6?X>Dp8W(i;_8'aC`2`?KAd-&qK
%\8m?f%@%J6OI6@roH?9h()N!t3si'%XQ&?J=_kFm3<)%tk8TXtW:H^C,A[+hC#>s7"8SY?.+aR0\;b$[<SD5,pX\MO^/q]CFk0?S
%S^BAYc+T+ZDo$)WFDc4Z2kmuuK,2Q&B7&D":+mVHn(f5Wr`bJQ80b3fQR'=)ML=?Ljq:$kl.sA7cM]cW__2Ca[<qh7q!l<DRX2;"
%C201aRJksaEas1A1scItgV9*V_9:`f?>[Vf=i&<FmXC*n5mbpFX<,X!T)AX"k1.BGmDWXJlfqN?LQ.&i$-]'I'#$T`-q-qD4XAGl
%2J8U7]Nql$1qQDg`Ht=rH>hB)qXO;,S!P\"T2]Q.dFg0A8*;7SL1'QKnTFXF)1cX?l*t*d$ju"fKCt!hO!MciP_1C)G<=Y/@sicI
%F6/(2ID:8.]pal^p5F8Ei$H#])LCS.Og=njZp2;lB63X:Q'mA@FJI:amB@9V'Rtb7(^prnl).R!eN9g4K=>b_^Q$)XCX:R,5?32c
%$hi>tnn\!CqMQ05^En0g_/?L+2TthQ<gGqa+cA1)4_HeHh^]uE5G!uU5!CXe2>hY9O^*@Md[bgdg\Qik/lDZ9ealYd<>P]&ILH_s
%q^mKgp2@,t>!MP0hj3I&^Xn+Yh]HZrS+PY9k43+Q&S3/e&i$6%PEKWcj`BeFRsVLTrjL+k#dfc@CZ0`M]aRj<r6CX_1a9M5X]>oI
%SaqEhe]*2hnFZ\"pFSFqhJ*u/P:!KI*;)8*IdWi&K&]$V:CF<#"-3u14E-3C0-DW_r,CU8Sc5+H;X<PBS&i.aOC+M)CIP"9,;\al
%Z>75IBb*G`,n]m_TDki=m9Su79mDb;?[T<QD4?W*^<;0iZ.!(;Oj6"s\g;.fe[Z8_jo&Ar^O39bT`21$4TFBZC+5V/_Kbh?^kTBX
%Z'-foI=4B'o\1K-CUI'oH1;;gf96`t#q*'Vf>!HNW-qi!^MA=OMu.JRgYL,6\6\"eo)A7jae"1s,MIVVhX#XdVM*4fk3j)r^,aqP
%C2[('=b$,+lteh$D7uNNLOCk8rL.PRQ^d`+Wpb>j=SNGuXEs?j"bQsC?fk-V#OC1N_=nc--]c?$Sg!Q<g!3?[N:Pm=puZ8[m*Y[m
%qM3f0\Kq?_qbK8OH-mJsla>3,lGEBuA*r*&).5J.J%rZWo3sSog$F0XD];oBM4b*1N2XWaof%m@2Z-NJAu>P5A)^XV,MbDJnhK:r
%$[^=)<R&Nr(,sBC^Wi*K:N#Q;I\$<$J15qSIt$_98f+E25Q%go[I\2f=FC/2Lp3jq.bg'k:<ALY(';FYs(5u"hp"-1Y^$%dY,Wd4
%5+LAP3>WA'c-6nT*HX4iO.XfrDsj1RM;N,s\eC^KK-sB/H\Ro:nOr-)[*liAs52jd,o>ke]T?(EiO[9O@@\M$e:i6iWG_3+fmYGs
%k918?O#<=m):dV#BpGb6o&4&*>M9NM>\+C"U,3qAgB.t$SX3R&*Tk-.aA0Ekf')gbQ$,Bk4k=fe[p!DJI!+P&bD,oU5ADkKNF)Rr
%;(E*h68Ug:nK"3P:UJor7p^_j^Pi]Bn8/C*WfO8G!egR`j+?Yd"o_n+_$>)Zk[4?K_lX=?Cgjrp4$a5mot:!fX``>8BmiOS"]alM
%R_MGN0>g*enQ?q4rm:O,Z&$i=rmK3?I#[<%^0ZIOO6,K`-CW)Lg[]K[D=r8P=7YtQ^](G:YQ&srkOkEVWU!Ysm"BA7O7;0#8n=3d
%FVLUd#sDXDB#q75@M!m(@3K`MDG9OHJ:sX9f`\YfkQD(0$Ar9Upk=DE/r%(Z'>uEL.E#r@$?``BU)-68bqE8'mh?1$>]fAS1HJ!K
%0b3PP3pQ5[YNX"]bt)Vh]dP!/XjEs$:7#^=ZtU`=$Q/)2gbC3H;%*_:m>5PVG$'^-_M'\<T7X;Op94L;]s)/TNh$6\!K7:t3RZN#
%K7`Dn7E^bApmr34K`6d55THl@ot=g*!*Q6rlZ<#\:^oQW-L`Q)-(s9hHN_jF+u&JB:CRa=Tb@W*dXsHEQJp"TH<?\'C_ne3n(SEr
%PNOuXZ*m=jTYQ2j745BSJV9o`\MR4J'j[1$*4t0TQH'C&S=$bkq\DRpO92ll$japQGd8;Q!mcp=I(q@/;AH'+$Y5)9D9$/9,<PCJ
%ghcs&)"4_(Cue\QZ'ZUPJ>h\AT$^9[$rL'D-g9M&@g42,3[%@kdEs1nn0@1rLSk=Qf^3ba.7CAgk\#620D#?Vp_9Hh0Sl@ZNe<2Y
%4-(0h8kf:kg-K(XAJ038^Z\lsCdJCR4CXe%<0Z<C^<I$oVD98+NBjuk*GHh6Y=Ls?:E/V%@3JoC!_=)AG-bj>Y%s&h5`uij@ORU.
%GU&r>Kb=tpO]fs]L)0#7g'#_G5)a1;"LnnK:p`S?:4]"ue,!TsgEW.4@O:#8OP'8CB'Pa!iS*3H@M-ek=]c:`NpgLe!At:2<h`HP
%GXqjf+;U)/]RYLDNWUPD3D:Asl%]Zi>Wp:;R.#bR/1o`c$T9"0==GA]YR+U)Ne77s=p0Lo*4jc@gNV.r"[2s8[pXQi:>i\p!4=L'
%83hZL@CDro$GI&ROUG`f5d389..'RG'*`>&*VK37+gcYS,HX7o4dJ^-Vb8m/'%$/Y@B4pF8e=$.3W=O5AVfd[_Ag4*N/uPp,@a0N
%FGg3tRZO>RMli^<kYN,UJ,muZ`/P]I'/%5;-j)ZP5RI9(X!uua;,$V=J'/I<Lkt/fL+l%-6T`!_KU@f`F^uES@OD)P*Kp>>nV7YQ
%#gQY^#,7&i\"Lkf&AKl_W[QR(\[L3Z%4'V3"@lk[XanJ>"jjgVU(pQC;7[P[dU<b0(uV!n<34g38'tq?@+:DCGAYM>_&P-p,nR\%
%7=9!a,F"($q3j2ngCBX)h(Sn9Ga^N(#jiJ-4kh\>ZMe9lT0W#eP)ajfgej,.fJ@$7CIfV$30'.UH5DFkD<u]"KFs2Hk0?F[C$[8(
%=oE9/2RHTE)*f1D9ap&POjT@L7hh)R[1EL.dXX<Kj"MbJ/PjGaZ]IlcOUE5_(..a_Lo(TFMublG7#8fYlO7l+9Em24aBYu@mQp:1
%8H9B,*qid"(HMb$W47p_)F&>>,E*)o3GF5?>h@n[g*&YLN.?e5OgM(fM'-gZ;pLaN$#%:omZ8Eq,'<I8TbGQ-I@?-=Cf+T>/2XV2
%f:so+7@QcO6C\N9[!Bj:OphEnH:.cLPZph>oKlU]6P%?bp*OQ[k*;J_2C>tG/iY3'K7_>R`Yc]ISPgpSj%0/?\&dnAif5Q9K4<FG
%d3#q06eEgH6a:V$Zj,-&Q%UB^nZWFke6er"@'i@a3e54(cq#(;JOZG1+O]a&R@,>Z6k^mYVCs^T68FBr.*K.,Y):oe,nrKqEmu'=
%#s6HW]u=.a+L94.Tmp1=Z-?KHA<W.!-7E:L%8>E6Pd0>3]H#qQMCH'B1n[3o6i*Ql8d!d9Q^GmV"t;r5"5U4k8j!a`!L[@#^_VRT
%kXT;V?<5p6Q!?Lj]n-r]/C`m]Kj-Ta!`9=B_Jc5Q7/RW^H.#U4](Xeb,H;l_*#_).5\-hJ[V\8mZH,0h50t_F2]Wos#_k_ZnaMu&
%ZogkjRl\It&I[&-R1*oQAYDNl*iKALY&-0;kf>5F2YsMhM2j`D_?=n:&;)lG&VpXG0M*`58JJp6DB0Z"(m%iEMF1aD*h+5`nYu/h
%87X,Y8h=0cJsD"b82[-kfSrn_a;5=d%EZ=cp'.Ko5E#_UP6n-_Rr)r<GM``rZAJ7+*=FU+mD1Q7'^q,/nO5kAap6tOL2XOQJh(qs
%EFY,r8fih+NKo]eX@*jb#\:'Z/dAO<!"+mQ@FYk0'rY/$J6jMN9tJr1ha/8eFR]ZK)cjFa[ps-I/j\4Tb2US\R-Rj,CB;J@)+\oR
%&<9R%=HLl2W(\WOhdb2*%7t,"E_MUjqRW@H]#P2[=?nEcq:t4Q=&'UF+"QA5<i2DS&E>dUX.]Pt&C_F6+2ej_T`U(Q$e(V^2ZojM
%1D^O<!bF#/<XL"$H;&e%.j,@m$@PY:N*8s67P(5rg.oiN]`oK]Fs-?/@FP]"_Dd8Z-jrYf%HQkY_&4@,,Oh`^M5m4.&DC)n\:hhV
%"[pB*,Ae9OMLJY\Z4M.9[Esbdp*4=WiO0RG&$^d12Ynmqo:T+j$>O%!83nl]%u;>GIA*GoWMPf?KbF0Be`fsE:qC8F054-=bgT,l
%OC$'`^6]4-#D1G=Ri'_VD87tkL9V&miOd(C!r6h$X@BQ:8'K8=1/AU<gMA2<b'[h,,`"P`KjmF'!R.)g'G*prMV*#GBEJcK/+4?3
%Ruj3$a^<uhLj\T@^9ja'0+eoH0"),l#_l="8i#YsP%:8`dPmT470&4D#tqPU.WAhRgR0@W?%JIN(P95a-i:c1/3l0!jHK-%3Gc$1
%-#jc[lm/O8;-[J`=mWea3"W/FFHQaSJ@3TuC1rq#1t:G1Q^jkmFYY'p]#9@^JFjX^\]/<O#Y%XPa`Z[@ZTZQ(qJ]o5@_B$>iC1`P
%;^76/1IEE1+1(5AikF\_P[\[`;48Vj,;(LSUbAi5#\1,edRfs"mpr_g'U5[Zdl/[)]$YSp&A=06Ce&eY0Wm[f*o9/+4hW/%cfCss
%3We@2d;(/3KJ6pK",DGARQumeJ1N8G-k:onI$gV9)DUl3S(3o[3X*6K$WA<*fqDe@X?\KM#C]2F'5Cjh(*RC>?8\-,EG2\_P6`=8
%_)u('RTmcV-F&j*LLT:opdJ!tdmjD+Fh]Nk56)uV[:<8k4\k?sfGDb!$/=HPANKT!LJ$A?(9t*%1]@gX57X49E+g@Vj"U&Km4nM7
%d+AW)YaGXc!P@`V3D#qc94HN%6;SX0E<8AO7UBm9dYr`.<@kR'@AgUd)A6N+TJ_pN1iQ[SG+X2^"A19YXdRESh\+Pd!'rt@&r868
%ZpgZ5?AKLp'AP:PY)W!G=JLFK19LrWa+s&FH4L3N3uLWIN-Blg+t'Z(-7G*`J^KgMm_j;"6NIe?:8TO56-5;7Y1b0VVFX"!+iDrm
%jR73j8S<@FqjU_:Bdd([k1S.t&Xe^")(PtS_Cc)g;rG*/a-p*F'UGE_A.a,u)2`C6lSpY8@-M>UEGc-V3K+nJ?=nb:$-3Q(2g@q'
%@=,5Q-'B>VEZ?N?60%S5kXY.N@/FtHKLK@OVBp*#r^@1Mc9`btoI.2hO'2$Z$rnW*Mo:-W';6?g^W#0*0E_V(?@[PAMeb!dK@iSq
%LfkD39HXU"pp%m=Rd:132dg2l'R>#`YSAYIl:F/H:`HhY]7aoL>R=O5UnS^Ek[%r'fS6/L3'\]mU)93+<s8(GCh%MT)Nk[7)OM6A
%)JTg'#NRZP9pfOSJP6bJ#V$+6(0E5Pe\Klc#^(CL<=s$5W-D6;U1/Qq.Z`75.RY*<KuSKiSp"*8:;)BKG9X3c'RfL8"(b7`Paqst
%/Vcf@3/NR2NTU!QVM]4N:hBbsr35gL]f6j*S3::^.qW",#h_j+0t^%fA$I13/]cQ-1DD*j[#*&!SVGi<K<ukk_Qk>2&52Y+90u[`
%CD'lK5""B:)(EgK3P<-9PW$?i^=#jO.65$FO;BYXVDf0#KZKdP6j)Fj*\HA2#!a=+b,iX2/QO&GFc;Ml5UbJEe4AXVdtU]_Y`:k`
%%N-9Y58-W[BI[>(JlF]^m7DZj_?3lrQ'qa49:sHF7pF_=@<(cl?*;kIP:D/6&p/]CF4hRBO>tP<->=/?<j]C#ZGSXdfFMe)KrQNL
%U2`."UbX^1&A3atPY?`YK[Dpk[7c=k)9<#ok]oj%L^-#MQuFbi.`OSA\U(Cr?8Or>GYnR,BHi+4%#Qtd#gJ3sQNDe17%uE#-KH=&
%(sr9mPQ7oA7UAo:eWNr:c9@H+DlZQ_!Q'\=^<p#Q4'Q1t%2Ag\+P;.q0;G^$6!NGNlUb'9dp,KH9%RnQ9ru9TOqa^Y15t[5q%_2`
%"To&HVA%=_H#+`./0i2u!14*[X[+cXF;5%TY#;2=qq?';:rL'V4pVn-8VAo-p^SM]LIqjQ(l;8iG/a^-5Z+/h5*L_Qr&Of'X=9k\
%nm#iM&aia]"(Zi5QLlIiL\0F=lL6*5(_a>/FD,9QAQZ#Hl2Xtk8/K@RO`^Mi#U2%bI"?=XKC*?\n5)QkL,9PKG+Co//;&gjs&]Ua
%P`5b^G#G1<&5U0O-IW>fJK'8Fb9_^WB;*%M#?4)I%_WHN(BlW'W5#Q5Es*%mNe<u?#=[9hnJQ&+Pc.,ST?UQ[G/VLQO\5$J0LQ+3
%69qu:=.nCo&_t+S=>%H%l4:hr?U-c0l3]fcRgprWa$r'L;6jXpDbf(UY$gCK0cc*#=[9rh$R8eC6hMeCrXL2il>q@_5ZSFe(anB&
%Y#HIE8\BRj=f.S%[Y4pZfj'P*A>$(B\LA5olh[(.fF>24?ffJH7ioNmbYrW-S/>n`k@?A-)-G%W)JX4HC&QEQ$H!:Eakf"?cW`ZF
%Q@flY;ohgn6b%qF<+D_OC`L4bT3e>+I2i]Og6IU*feC@l\?JJ+?#lYQB+oq(HaAK#H_1r1ReTtD]4T/@KmHYGYcV"sBSt)+3Q.4]
%B)m4;%^32V#*;Kp6JDp2'a+S\!`*?Hi2@=`>uq)t>U(Ln6"3lQ%G1@(@T8*;;lZH?j#eZ!:IT.<"L_GHMPgW'"sSnR`#/A<HG5mc
%p5_pq`@UB<nb.#u(/N+!L-nj<4*6pj#%.TW-'4Fm`3`MR+i7EK'2$dsWI0R!,eut$&DAaq-QF&3:^Af7paU!N+]tdTM>ru%6U$Fo
%pQD3_Ln52!'4@K(g12V;Q[KD81RV*-cnS[*dO\OK1=QkqZ8J#$(Wip]<_UaHeFP!$L/9aG4T!nd,$CEO&fm]4=H00'.W&j5[k/IL
%J`p7IB*'@TJIc:Mjhf%<aeY,8&FWo1\tl$NR3$5_=g\X:UT8GTbmY:1)Qks<?q'0$3<`'o$+'`9+A;mG:4);=2TZ4WpI`Iu5t42[
%KY$0iVPB8e'PX15WZb%?H>Q50""c[e0W'.(<#KCbKf686'K%&0l(W?PjYP"\&u\o?/4mAd`1'")_WA-mdP)+\-Gp^oeG;%qE9f)$
%;UaT$Z,UBj3j/bX4sUM0)Q%0n_[YWf\.OR.D.]KHfPTk8.%4-%W>CeL1)l?69^k]11I,^3lpeoCe73:t$:Qr1PAZ$XAN(fIQsuTp
%2iOqV":<>_0JcpXs"=3ChlbKVh5'u-cllm2<WVT(K[O-9>D3(j*:-CTXt)\X#)KtN?r@iA+E.N'+mc$Vfb!r[.=X[_#do*g.Q1.W
%i"DIG"b9R#%O+;3^kWIE+]h(,7TdWo65T;V>QdH\"G\)(8s^9,KL0%oT:np5b9c!PJ;t]!!jMb7ajCk-9Qkt8H4si5Bg>73&I2_u
%c;=mS37Dup+I!EWY83P4fG5me8;BSC?5tAT>!A:SPP7VRPEduXoqXTn7bEd,VtNhP6h6YuhW$siXZMl5+qu?R?P*MJ\.m]uP"-9l
%;Gmre0,a?uL*27+9dkiJU.gL<@,ss9DZK,(*%Inji\hT<aV*,]BJHNWOF'aeDgNa0DPn7Zkc1'n3WYT5)Ojm&0*RFs"Gr[;W"uf)
%7$14))GCU>#[Jr",&'N1Em2fG.g=%bgbT+#*KWEu%)s%TN]F"hE6i'/8[EO;a]O1?Nc:R7KLoW*Rt\XDD$UuG9i3@C<JfpVfd"nc
%)5r2Q=t]EdFU';<!$dj9Tp5&"\-h0(NZrm2rE6)-V#WqJa-X)G97/`b&RXK@HkR@-WjW1<*2'NtTs:U"!qul4:i.$oA1c>_5*mZ0
%(K3EQ<=gF16WD_/>m+jUYilPV=;ugAg4"U;N_9.XK?:9=#t1Nl@3d6^?H?Cspgp$fY!DcMb\U9*'*[HD_\iqoQ)uDFnpjW*'ulj)
%&Q8>0/6Zc/JLZFDSgV'Fi8qIR1sbhH@KU!K(ipuX5pp&E^)dij*>o,2YZ]],p=d4`0QEP4gcIfH,EdAg&4']KF`^`:p`Y#e[aI)P
%-uP_t]JJOkA&f[A#-g]A-7oV4ihjR6J<2ljNaQd@Oiu<.$$D8XK@>[%4B=9c&4'femt8-k0rjTCV'?`X?j$Zn5SBaZ1KMm-")LRQ
%aD.]D*t@<[X+4^4Ci[WdZe"h@L,3C>%+PV"#UbAB%V/N).)1b<4=j'#L"+14Lq=le"fdP,VHR7;_;p5f(1.j*3@>BDQ)IQiA"^J"
%#R\&AI(:K=oV_m3kV33Q"@>ROnOU/t+hl;5Og-.1:+TKS(XS@g*3'T^EEkatUCO%[69N4!DDD?"@I?`9Lc-OPiA*u53mgd"Ucu/[
%/KU8[,nCX602W!K+_>h9C7YgI9dltcWBu>9#k:?S$l!<5AQt&%l#9p4Yu^'MZ%f9ABP\qn5!V4EmmVoA)j"nH=#$1f!HYa:OL@Rh
%+q0m=[?Z=7B=Vgs,M5jaR^<sTnYK`)N#3[I;?NqX&cAi^AgbSh3iQhQ&DaSsB;gIP(tP0S+D4#-,bsGS<1mtd+^7cX^c*C/*]SVZ
%D*gP2*-gNrNT=[l*L-tunYniNZIUb(3!up)BO8CR#<qe1bZQ=qe=;D,@nT=(/4;FmU-A`L;B#1&hR>(.KE6$]*!DG]\HiON*JuhP
%$*bhCCRW,L8(,("-(o]3.?71U(^$_=%\/k9$<NWB3&S`1C%rrZWHL($Ob*nVbX`$c2.'7K[Q)]tZrrR9B,E;dWfgEIdZ^@/;&h#*
%4K5#Z#X+n<0I`e"17!<A+Uirjc=:BVaCV$;%A>CBl!m@(+(S6%EY6cNU(i@R>bNdmcTn2<=<o<d-2+lO)i7Tm96AU&U!\Capf!-/
%!3%Y,PRJsLZ(<1U[=#OLPu4h\`pj$?atVrs+L$oTjXEL-Mj0:QKh:X:`t^`Lkm7K^6e'4tdMNNk\W1)@6#H`n;BQBfjWecR&9Gk,
%NAD\Qm[GW8VP,9eE*EC=8bm7_TK#90l*Lbq,'[5<2ee)K"t3()iRm?"EC!Ti_&N!#>"=[/'=0RW<01b9R^iek6D#uS@3h/"X-/XC
%Po8O]"OgNYC3ria6MjQqcO$<HBE7iY`Rh='@udT[.!1cE=^WG6m:UsZo.+"0kh>_V2e519BMm>:0plc^LhOFKoilD-7-U+)>hn7`
%4:$4-<'\m)RQt/&1S@-1Y2%#+kQh6,5p^^t1LM;):(j#fP)IL1fG&tP0D3j36",hd.[t5<W,g&=gEYC#5WH>[_B1"-%t3(ETd,o<
%'.C:a&caX^is-G5.;Ri4[Aq\P9.n&V_aUhfLo0bjTSbEDhZ5YS_@H)6b]!d-R+HlR"X_,)BFNi]6<)[)j%Bh*D-A@]IPV?Ae;XLc
%Ga.WOI+8Z^HA^FuG3-5$((-8AEqh9!?drC*]Sg_/`Yf)s*l^bYARD91goH%CWRSWs#rLS`7ETES6[!f^<?DnF%<S(Xl!&1T!2)l#
%f6V2IMF_9d:YFl,p55u0*Y@;gU`YV#Z53hGU.>X%.&.q<l)MHCBQ3RY"<$g.:`,A"UG/4Ug_IBP*!R_\U-';.8kSGBA/A(&IBgG@
%=a@TMR(GW$$<^mAA4bniHY&&qjW]'?-AJ^U=rnW18hmi<_me3,f!S+WP5jWSJMC[u`s(B8_N>UKER`go!H>,XEA7\Yi=OX?2shH@
%<4:R5-Ba3P<Gc?eWp5$UFHhA?FWV*$>`@W>X+^P9P^!aQL`G0taj1?fXs;UoSrU!-K(8uh\/f44NM$to(o[<9i&07ej`D_L0I+%n
%\\H7N*4UHrjd(W^&nm$u+u-M35&0FPXASXJ8-Mlq)W.)A)o>ZqZbrU^26UI*"a+6QHU5IbcGcoT+>^2*ESk;XBu:(5FLWKA1TA(H
%Ug?`0Q%PM5#ZF&#_:isP3OT.3N^lPJ5<Rl@GOQgj6p&6Z!%R3$6HK^hj_KeZ%g,#!0rkMPY8+*B4)%&Wdmq,4S,kD-9qfZ1e)<,!
%6c]m=DbAeb[3Upa8KAHOePF+)7At=7fq!._cmaor#[W-5@Mctm.;1QV`@&s2V8F/n2bC.h:upVm?B!;,i<k`@`j?Y;Y3GeGL+*ma
%Zsdc^)m77mr(IS&E=TO\kW5FKR-u6lJ,pJO.'k<e]pbt,1n[U:/"tuGd;(r8A(Mn4F]CC3#op+5no9RimSC^n6!]pT4/V:lkt(GH
%,X2^#8g%?0JFO4oiM7a%J>.Y9k6R(^AJe]M!GT`-^(g@2TNEh7V0sB-OU):iX6)[-TC5;Fr";Au.o+GD?#c_lT(&t\=M^:S\'Hcl
%99gE84;3(Y="AMAXGPM=Vc"pM]]?a9PN!8YMT_MfSqSRo,h;`FBO.TG9n<q%jb"kniX2b<PY64"5R<h)NVF-_](2DC_PIZ@^`-kq
%LG_R'Of[[2`O8?VW"')taZi1HL2-3F>pdN]HQ3dm&_aL3,o4SW%rlAP=&UPE8qaIP;o4*c$at%#[\F-9fXEP]HEt*:<DNX!jarS)
%*<mcpY0du<WYQEKkU?p2ZAq4E8(b+5!!c4JOWt?<1dMs2#N`LdKS;(h%12Q$8l&?`7k>cY-9.$VhAT1_/slB)_SAZi%u8M;e:,NI
%@fZ<B-NXKM3<i<9*/&+.X!tat82]1Slc@TnC][5C3'Z=^.WpM(3h4]=M7,c>o6oCNAH+4^Ts(T/c=i"6MY-S;ZJ,MYe##Al'Kq,s
%\8Y"_(.[MoE*sp4^&,7<e0h1F4RVMCc3t'$_%\HqaXNPiic7U#'o-$SjhcS*`!o82NoMI1D)%n0q,/W=D+/Ki8I]X0PmQRL%'I<K
%&BL,.R%@RPRt8Ek=*GKd>93gf5RhUj:kjQmgLq_0:jaX4Fb#0!+sdr54c1db(:I)8"1\pDM+IS$&#W6u6nSh^+iq?8f5W+/L(fZl
%fEnK#Zn45LdtY@J*lXQ+;NRK:qkh_:JeH(B.(k*EDp57J9Fo5HdtT;lHFRC27rgAmMPT_Ee[1VeXR&SR$g!ZoD;(;XP43/iC,maP
%:RXOdmUr5LeuFrI*M0d]_?;@[A3_.tSIl/ci[UqJr9OW.YoHRN7K"oC1JgL7'aq#ANfQ:_qrB^B`;1@MmdUt;&\l?sF@MN]O@2:h
%07Y:@>$6uR]0oZ106:nGW?_igh2=_iZ4=^eE*-;#?#_d=R!e*]-Q$6:\Tf&YlNtj;&r=254&XM`;Jb?u$Uqo>Q0TF_GDT\[!s`"W
%Bp#4r(Sk&A#:'O%iWZ+pG[g%1qE.1,!=BIV$+VJ77suqTiFD?Ko.%Hj80F/*?9Oq!a$b[m%A*eJ;eY]uVXNR_:oI[?8]5rqZPGu/
%cOfp[l6q9q>K^BVZ,FfdY!CY_iOEn4$B#"9F.j:L7BtJNjEa&q)W>"P&?<p`/As?kN&3k`Qus"&/K,AW7V(!BU<$`Em?%fi$7Xak
%iX-@c&O3/o+beQ"hZ[J'%tO_tYUs907sl^lYD>J\fIBfe6?VMXphZ^-Y,1e?%!p9,TP,g:W&aVE<(>WM,<7DAeA^sNGcl^4$K\mB
%&2Sl`aTX1)6pejbgEBn$<_*'/_>5!<G(bMUE@ZU(;Dp=oj%6Y7/Th)!j;KJTjLOiM:'QN$cAi/Y95]/50tMaJ2%'Qai/P,JLE'd+
%rQ7IsIZ#M?0%sW8QDS9GPK<e>F%:D:p'1UFRq3(H"[iD;S&>%Kdlq`g7-J<j`/UURfW[7r8*"^1.Nug]C+*eOU+J#PXV(`#cC+eJ
%X+Wsk.S!\hafM@:in<nZ(=Q:%k=H&A6W]DLO(p_JghV2ZMF"16LOcZ&]kf&k07+R5Nnu3X&(*A^j#C;<-eY$j"_K;a1Jg4-A;^g0
%F7aiaC4,g0Ophng_pg7n2rT#BR\Z>)KLR6),$/.Ak0gUFe.`%])VdW8Tjal4-!`+J7]>pS#uPW%,^!$Di')00N,'7a.5\:hO9TbG
%dot_Z@dbLN^ppX3&nWu=I<@cq%$uQ>"3,k+M^'5pYtNMj9`l_J@+m;':(K:BmjR]+a3t@F74U8WS%<.G;e;b.c6I?XOc^%d"JR:q
%Pde*0AT-XpN!pE>c<O]6+IVRH=cbs[4>.Xg""*/@UMHjL0Xer5PWPBQ-shT@j+91BDoH=^#hZ02)L1nZ`uArs>UJZJ&B[ca+R\N@
%DIOM-+tD$t;tn,4eWLaQLr2eJ_IX_OG<PV<#bRW`Eoeo_q!`t[\U;n;/E"3DIcJZQiVE\aNtQFNlA<a(E%E@B'["*j@pTVE#U5T"
%WuL&`!QS6YEVuH9+PB<2^pLi,'R8T&N=(3G3.aDH]\*UQP[FMH$RXJo(mZ6+.l6<7mWLA-AY=)9fN.]ECjuG"Hc^nG'!$S!n"PP!
%;'(kT0ZcX%:L5&JE$E"]P_IMVlYo(U9t&>e<Eb=&gXH#FK]3o$`C^T:.]Uk(V7od^=u)e]'$'Zr#\\4G'amZ)4c=,COT8gJ;;TPo
%H]pcj_2*k8E!9i1d.T#qAX-Zc$D3R)[n!b'J@Lg_BJ(>X`.c%)L`X8eS3jJtZ"uK/+i3aS#_?M>G-oE@cqru9F>sdHX5anQGr;NE
%9]s>6gIN8QlCOb*>RE7L9q^_PPMoCrL@?30/o_h1<".bllHs%YQlUGdMk:&=%PJ/hXWCgkKVSu#ounII(^'I'Crk3uI=9QTW]9&N
%X$e[PWFeV,.<`_-5(1<OoBPOk-W2%??ZKkQ5q%4J0bT@Cj?B6JD8tPG5\Arc\56aO@JV]9Tpr^jNTGo"WgS^;<L=d<&=&!AIQe1l
%0qf?oLKBP)`KAg$CJn01TqT-*$'JkV`UBba=V9!)!_q\Ji3@PD!Vmq#\jgP.'6<!E56t8eBBHC2lf?GK^6kc+">4&@,(8"d&q'LD
%"b%AZlS?hN$[CcMCe'a4g0.eA(m3q#!]]J^&5HP#Oc#\k*7D&kh5buQO6<_l78RusY-`2_RJV#XPOH`7XtH,RahnA%(PbA+m8cJ=
%'199iWia;.<IV\.p,M!`1ggT&+kFZ<ha#ut_t3#q-\`^J21>#5JDuYf0Lt]`8]jlFI8Sq5"&N6iYS"$W4Cq8uTk"Vr<2S"1F7FsM
%aH>dFb"kke0<uIo=8"Ypb_Ho^+UsO[&9NT+!tV2uUhgT.(hKG:(mXum_@Loh82Xc:eY%e_SeB.?)b);$"07tgf)V61)GkQZ#/bFD
%2'^-B(Lu=C:@;?&,*2jB5l#P-<f>1E:1T4%$oGm[B94G.l!gilm*($MDs=Jn!l`](PsU!$Fh,<3_5.W;Jlsc=6[jD7"3%ko*">7p
%"I#g,!C$RPJYGKTOr,ZTrGf//Y]?CW&?&5G=V4<@_:-7$7<]r5b[>,dNVt\I&]+"ria>F=EZ(N!@8P+f4$=K!afBnROfpC0`3.m6
%cN)2i/8FEc=!"8YP:+k8(bVSF?,<*B/X4aj1CI4WLu<2D*#[lqfCq((`%Y"$ORb]eFkWW7hPG:I=S-P:8Bn3&6UMTX)oEij"Ze@"
%eK?3eA:\I4'Fd4\0YX;M'M:Uf5f\mMn4cpK(<Q!!nfH_t#t4u_F44mMj`t;.KiKro_"Br_W7HL9<9BWR(lgX4(NAT!dkM^g$6,+t
%GCYMWOe=0pY2's\(b8jU%Mn*9aWsp15!#>j(D'i5-h\OmCk,"ofumkh!6DV^9?S.3_cO&1(l*b@c+q@&`JI;t5il;W9,_C-#0K7e
%B%8"M\5[&sBo#:0@'($^Oo$>A(&61Qm'O-G7q*!R/WBjQGXdE@)IU[1&26MT\hIH0N4#!\n^Vl/:jVjfFh9.+%+IFX]Z4SV/0WsG
%*;Sh)',oORB5G)]@+p\q\7D6<,dVn*4f8C\.?kp\:i_c'U564/^m5^IJTtB;F["PXW?b8'78EEbD[O^EU/4ihN<D^Br''3WeB5d>
%Qj"fFPS#s-HKj5$@u0U\=m.!\cD7S9i+[K!$)bq61(t@Zr`%+FTt\1^@gpEPp(:A%kLC^B`erVF)og%j1knXhk.E-"=^X!iMT-4A
%UWU#B4=VNWeZ5r*G</(`eh2cBT8hP/'\NcL;^@8h>T?lB<>'g)@q1tOM%bVtEJH<=5_kd/ocmX6bYPLK@>NP$T_7>1I0>?S?%$\o
%I;sftAtnosl",g"$%CY5!CD5Z1_0/9.ibfo-(e;4glZV^omSTV;gdplo)&W.-)du\==FuqfO@9A5!%KH<>S@M"<:7G(ur:6^,H.K
%is.9iYc%>=4cgA?BZ]4m2J<b>Or*VU`RS6=Cq+j"a^Lsd_b/I+Uq@KpQa#H>Weon15cGrm`1^-U&<uYYa.0-j<?]kCHPHMeB48Q'
%-2R[RQ=;s:FbVZ#-a5qRPAOXm/7/r&=bG>n/$`^CiP5Qgjen]#Rk#[7iX:A`O<(/,&V/e+6"EJPe9F4t,46?S.VBA;)hbd\P#e)X
%$05,0b#J3!!eYURI"Z5EH'Sk_'1"I;'C.+h;Nb9FDh.=HP,_nKTn-1g@lSo8gQJY,0s:d]`2us6KdR?"\>Xl?#p'09/(g/:/hEEU
%$-?%_[I@m#r(mkfAW>ln&8OQ^IUnqQAaR&UID^TQ-Xg3LKYhA5_;Xnl7/+#a=;0\<U8C091Io\:?fBh,@W_:a.%IqPI9Q`kiIT1!
%MmjAl1I5'CZdp"u]HtmB`c6!WYJIfo"ZIB"&;S7j)5+X/m)o-AX87$sl^H`KGQ&TXUk'mHo.qk@'N.)TXUQCX]MN4@mA6-T%&flc
%31f94kK'Ao8%=:EeDP&fV*ka^&.cP8aTUt27lW=Z,-N9SHfI)3(2kP@:@`T5'L>+=;s@thiX96s%B@KA>rE,>L7Y66L/19360>NY
%1g+0@>`-K3[Nd<[fpcBH5p/7N07;/U]"4%uKD@3`YZ*90o?0i.3[hII9#Ee+Z%f!of2RSTW-SKuJDtI+\r_OP5MDQGjf<ElS$Af_
%3=E6#Q0CcJ6%=@+JD.7^oX8!Ri@A"9Y.B1m]fb]L\s>JBUI),7]H%a.93B?XQ:`&/BYiS9h1sa3[a`P&C3)4d56FD4)H`,Z`oso+
%!HI3q+(%/e?9un6M%>AK.&2t3:]\b`#a$.$BH_op(5Zk:UhUBO8$"3n(lG=:+#RUBlgRoCN'S)?JG&6LX$(u*AeN)h?g>OJ>dV;t
%3B+mh>_U7'^eY7-RSaF2_+'Y;@.f)I$M.DgZCMp'HUbHlYInL`ZDf<sM48B,;?A*K\8'"difcMXDkZK3@)R%?*gD2V7^j\c0/X\>
%)=+b6%4EVjgWkh:i/%9-W`8dl3QL;=:__R)e+fX5+@[.3WFAA0"->mC*ma@VoI>mNPH#$k[PD3*PX$St%%M2K_<T50H!)g/B?gL.
%m5Y-.#\Q=?I#0!A7`Pdh2Jm?MOQAnjI]5HlPT6@1`D.bOAA\RGS@i)]A-WF/AQ!p0:@nGF$9k(E^J4(Y%pADDEs`)g5th:<9"Yrn
%Xa/nu1/n=mGZki#rru^8VgUUT)ZeF1I7"44'US]KdDS]-mOH8tRJ-.\%_JFPk`-F1^A^BKlc\t0VHd!MmtWFW[Tl#H+--](@"hD6
%<tSCFb*V'Rp"D>@6"b_X?`^3PeXh>'V8]qm\Ip:GKVDF39LO:),k@K,W2&.i5ei!7Wmb@I$C/#bJYIN_FpSABb5#P&4fS$]RnX&L
%+ZDf<ibi`U,`,;GE.gXKeS>AfY#5eHTt3h7X;EEN3c<Ph+\$"A<"0orp>"gAHEtKL)a'Fd[YB#;Pq:t-7]=q%;A][9/m1YL%6k4R
%10%CEi'+9Q."J&IL+An8Lt:ffJ8C6b6S#]Fa:G4s\<G=X@PF8#jWGV\%=S4b)@sm=j$?S5-IjYP.E!`+B\eLK"QKu*nXU_Un80/`
%*csu3`*7)h7?:s;YJ8Eb`6"iV6q8IN!(:ctfl]UOmOt*481-hWS]f5B*QKSjd-B&0E\CM9:d!-o5(TVj<dl`"f>=G_/8POP+5"/B
%,6>[5<Z.,=c_@ZDM$LgY?Z^XRY<g2!q#gdl;HdtrT^X1,lQSe.FeuMQk)\`q#7A;<OhRL,[^@XSSb\,Y3D(3W&i<Ru@TI9YH;Yd6
%=*"+sTi-;MX#E^<k=kg_;Bj:^3>K?jUQqK3Tm^0_jAIU$/UjkVkGr*D(1aS*45d,i*@WK@W<gk:Pi"S#NWMO`!3s)[bQTG"O^\QE
%1KKGRU,0Nn+>7"V%\,p(7Wt$o[/'Yhq)1Vh-%RU3nY?9E;=N#$:s>b[c@B?f>"ZeITZANao'AFf$fXH#Mdg&4T.K*?E"^W#d<WY^
%KlKg8;AA+(UR5)OTeP<5NWDu5Ii.s3]\quVnsgtq9TNfkLuh2s(dbs'L#<u!lA2XMZ'<_pHSIds%\t;f8fAV*JA>h29#Ri+oLpW4
%&9]5T(r_'Z$u_^-X-U8!L=:idTT7]qe(():EcA&ng]`e('dEg8co<.g`P_eh>EWWYp^uPR:$o=9(pA.n;WaAKEKeS2HRBE><YH!1
%naa;lV]jSjF<Z#*0K":<:qb2DKuV4>TZHIo^>9%n;OL*m2B0:^ehfSpk_jathN+K)M\*2%WARAj)$a&f7ZC>C>T2C^Z3VbR2&)BL
%Ps(&LTu[&"Jl4,=KW5hNNT!,,8D5!RC/@@_<RtnA%+J@!NT!cs3H#7!(75MsU+q>iW43B?IO^KFb>kO=R:LM$`31Z^;CI#@^f%A_
%"S)`%Cq^Cb-Puj'aP@$&YJW-C!0BDYlm\))Uumqb!D>C!.9h5@^]`Y6,BdbqK,?YD_-cuC3@pBq6^pKXH7W%7fgV=MVtElt'moe'
%/M>>i-WSs_8lcqt&%6,DHuVJD<IHNanPJq'((-+$Y0-"t)/#WK(oVY2q2l6]oQ$BOO'pR$K>=;B!Kr!?,7F1GA0X(t+;a%!FGj+@
%K]?d;P_#hAIO5\5!uI]I=.Eu(\aaH.G*Gtr.G5^#"*L]BPJTN5,+u;#eob"E"[]j1&kI7J<Mg]Xhj"`+EShJ1^:G?U8'iKG@pi6X
%Qrepef<M_O9cB`m1U=Fc`(pu<$;>"TN-XrQYh2iF,*$R!,s[_fMP^(fN?Z*DcP\t?lo3d[F(<l+`F[dKH-_RRfLoT5mh?5)kQH_l
%.14MMOK6V.SK`U;D1_-8HbfoN5=C,_Oj`4$8=8/!=+_uCfQ*ZFD91<dCicrd@a:DDp$0u1;B1FQ*He97Db>"l+3kJ+'2;'^8SFE.
%V"en2A%?O^!8eLKJ.@(3&g4=WA2i#)(_`okEK9OXA%@JJEt#AdoendR9V<e+nMo1\.A?+fqe2[AcD_rMM+\$=(+.:&^'M]tA$O9M
%Jr`#DY4jh%Ko?B"1(V.#Ju#5Z)V36D=jSL+9oR7P[edXGJ6U*X)a_V95FUWrOpVld-7("[];k`s&JquIK2CVb`;'#Tf*nr]">R=5
%i?p;>40!n"AXbHD1=4[6<36=:#F(Qi5S9,V05JOC2+`oHYpY1V$Y,eR!MMnR9G&P>,Q4EiXm^QEJ.^;mn0nuJW@d,Q2pp[o=e5uR
%+E/EA+Y%t@86'ZJOh-dFKa,-T'h+XY<4"sA`LQ!JJI"Wb<tYTo29JfF4qk%U0QK+4Y#E^A..C&n_b=YDnQe*LU4KAF-*pEDQ!Gg.
%,ZULFq8g"o96)LjPD)&B*fC+9#Y:t7<e/q^I!m@E*Tgfum"'BB]CMooA](GqJQCI!"=iph\P*a95t_Xo-,Z&PWW_V1KfER%7g7k2
%Gr;NEZ@tDnaD?[t[SVed[Qtb(^fC-i3-_q[SBcg\4KZoO!#e@J8&Z:)#]P3J5<ZoSD.b!r*X5RgN3@MIma'OOU&>qpo\j!T*oGu:
%Y8_al`/Ef6CrnbQkdG"U("&mjFc7<#X1tKs5b3#L.(T=e5U5sq!0_9$hPcPJ^T,!LMb$^6#t:jt'!V9>^S>A*S`iBL`1-A4MGU@j
%r.&Qn7F\/!rqmnjO4t!0#@;_Q:^&0JIW7DJ\%fG+2^#p`=6]eneTX<h*h4aHELHV%VsW;_D-<1e]N<dH!#!X>lq@"GZH+K9>*]:W
%oE\nC!f]bY`(ra=YPo_$X0Un*Mfe[/!=m\@3P$j!Fj5l(jRBdFnt@'9ng!mGKeAE$4k`c?M^ab9PXn<>68k'+D*foM,D-?pLFr/I
%<Lcg37.=='i_aV%2*qJ%kS1c^(UCqS,0ACgir3sfUg#*1QQG@.$ff`Z"$,V!IB]I3'iEN)AqeN4Fe"\pJli(Thegq>PX!Jh1b._.
%Pe<OH,PIWTWg%=[G.Jf_*)8GJBeZ]rq\l`;%hp%>/PAXBc$>mZ;s=N,R:_su$t"tP,J!d:3),N`o#&,@Mr4K)-IIoX)RX7bpgF\P
%#XtIL=1Z)c$_itbT_YraO%.\cG:3#8`@5goK<<apd*%Wh2!+6p&p0`2UUUAjH3`.C3/S[2GjFgr4"<<pOGYA2rqNp4guL`a!.Vb7
%B./6s/5E77A4)H[nT@VH'*kU+=\FCWPaU]2k&orfXDd[XB`DSMYVfRbquT;LkpnYaUM0UG4+b$$N#rBAIFO^AC-?UGN8Ina`OHn]
%Y'aV@EE$;IQ#YS.H!5nuTsgc7U+F2d5\KE.dDa*KlBp9*2/e:?P>,)X)<Wse7CKlo_/o@=^t"Qt6j;I4C;'M[Z8(q\Tp+#!5Y0lp
%8S^g.<Xjd*_?9uY'P+\$r+,o[7%8V;V)12+kNf<LD*fld+,Oa`+!SsQ4c:7UX`pGk^0]OW`*7.EDqR9J/k4g;HKLRRNL\KK;!k!`
%?TF`@%:mo4>h8TN`Nu:X0/gl+S.Q'b].%2i]%Tc:H&;VM[l5L6j7R3%]cqjFp/IjYT\0nm)Y_H#6tRsV3R7QapsDL?;G5+fnl3JF
%QURfOS'W[S/Do7X+n&>Bd?H!@X/&)VrC<t[AF6tU20B;iaRdIE<=Tp59dY%*!FZse[m/FTbb2H!]75T70K9@@^$t[;Di]T"q)%cf
%rW+XDG)3/8+nU^H:L&WmlarVGe5;samZfY9oT^o9$,n(]j`%Rp_q._CRr#g=ohIXl]Mp*l]<M,Bd:8f@`=8cs44)j";-`S0>CSm)
%(&Mn1n_s3Vorj(H-+P5K@])A82P981E&/#-hep\SAO1=*8Z%&iUJRE:NkR8Ik)$OZ,I+>j4HgqqjUOQOkh\ou<[3je)5?bn\H=8/
%JfR@KX7SaN1*nkk')<-=3su0s30a.F(kP#;VPG!epPXo2W_FnYdM*'mIYT>`Ae4oNS2s>X>+`4>4SFYZ7[?7]/#B;_P$R6Lpo&[1
%+RbYLQQ5ErrRi:,G+BdS+3S=82K'puR#-/Y;.R9_k!1PR!R*uS2_a;E<Z^PfOG+@>`2G>OQTsuNplk@-2%,66Z8tf4*+1[?'\/]P
%f#@[*cCs<rVMSSNBt_dqeLS<<^WB*p3g5VDV'iEt>L97cGg#:c,]qU>^Vs8$N'b!RI<J&CU,$TOrc3`7oZP'[<r:r@S-hGbEm$Jp
%#dG>i@8#=tnUlC!O\]1IMB5n40iKP2jQ6))L;<jcj`Zgk(F_Bb?`+/`Ia+Wc:ke(Gf]ud0*6I8S=X1F=$*qVUd:^:0-3bRo43g.(
%@h87(4$\&>p+TMoh;a^u!?U.*]>2L1.Dc!P\Pk)36GV,cRWtP0I9IG@%f6rCT\Y8T^%d-_CS2FZ>2?UCV7WIdA#/SFn\^[UdO_Of
%UY^kt")Do(N=Z!d4?`OeT5o\&g/fQb6f_)$aQq4+23CWoU2s&n?rG.S.UM(m5pN1"&KN/rg\nFp;5M7Ah;9.AgZG%D$Rj'oQ\gmN
%5Y4eFN[.<BE:_pLP`g*=TV+]!nqnIuG<?JDZ)%`3OIkk4G3J$G03A,*ZK-"^E*Y*Q-XILBFOjW^2$l:piW*a:q5Y35-8(o5Et-6-
%dt2S!-,HAoG(d(F?ls@+?:>T%0kI$JViCUMnG';;P0?F@/r>TXl55<?S;tCF,.+d<BJ[:i"UR1lIC'KQ3ED#8O>bErN<-[c$$1"=
%ri9T?O'`YZJ5Y2'H`MHaUZk"TpsCn1Kp%?Xe/:QdEf\MKFP)Z;4P<tt5N"!d=$pbBmFT6R."\m(auL2lWt,Otm98Uf^K4qTRU)E-
%5T#)gW%M,Xft])0[oi!QJFFULV2;k??E&C4T/C7jE)ES(936Aqg5e;:^2&l9WFjHN@CRQNaWLqUXHaRK@=W3\FsY1d/UI&ro3@?\
%)HMq"&M%*8>AI(%bJ='$]FL\eQAoI*Jl"V#-_Pt=h]G(*SIgG\Mm:!ZjoMCJ[n-idbB6YPhK%rP`ZgcqTmQ`Z"I_O05i^eV94L@>
%/*a(@6c#?)V1eh8g_=@fp<j:IWpT"`?SASSiiT[3-3l0Id$[fdVZd+JkrPp>[7ID(\)uC=a0=HU>Ip8`LHE0'Ne`t5gQ!d@Cq'XC
%g[T6<GE[!F\(H^r4+-t1]>M8JGdtX5p#9!ZSZ7K_`V(ooRbGE9dRo1E(*[HrJ^YY-f?R#K,(cUnL%G\gh;C3UBm>Bqr.qS1#C>d2
%"!tZ`..c'DnJNA,<J8m["]6%sbV<.*^$"r$ko6:&6jRg%O^F:C!VO9n3TI6C@eDt5T-NQpn%[S-LU4^i_kl88X9C*IfSYFB[M5(j
%h,80r!tTn[pgH5V7qi&S[<Ad`DNm$TnCH9R1iKaXV/k5NctN4bfRpNP5>LM:M(Nd5L#E%Ji1*/o@$A[c3cUN'q>EL7Rg+@PA51a.
%&27jF(e`3qfTrMCV^!dgJiWhffG7>@PUMHB1"#Tl4.UZ,4[U]u8^NK0,<*9FLR0IdWa)OJIPi=nioStb)MTMFOXk>Y*D,oB*^i,>
%33eKm`mjpD-j']u2M=578h<nC]`*RZs+mTscCXcuQ,D8WIK)]H:ohtZib4K!o;G\+`PN/n;=]/L=89.I3Ednkl!he*%7L]!<i0[-
%>7osnJK.E(Oktb#X(I:c2^2?Zoe%=ja(WBG/bBf!H:NOt^^Ag1199rP?82M3`E]1'3qi&D_nW8/?lAsnmuIPjb)&gd%Dc]Do\Uu.
%fN[30E<_4_`Taa=4:=0-9kl3LXB1Wu>#92HG7,fRr-#bQZt4))nI8,!L!h2@4eN^16cNZUP%W%E2&S),[&$sk]u>^Y)c;$AV"!fg
%@:BY24C3AcpipeGX_8s_hhHdWIPL\0V;?l3DY'Qtp#UsqP4@@!o4Q^e4n_`)h@To2YDbK`$d>TSLAc`F'?E;Qoa#.ZXFGUa>4>'p
%dUg\38GMa@Y:^W;/=e/0X_S9=<E*+.B2.$g'ktCe=#WqD$Eq:Trmd*WLa]g>jo#Kl,6ZSO>S6)iK\m#KRGq+od('6WeaA[DHlp</
%%Fc;_n_1rV*!jP082.63_Hd&j6e\T-`O7=SrEa+\0<5agk-k2JD<=\r!k$%`7_<t4U[^Q1q<<F>VY'q3B9=FR]s$aY?O^5k)EN^I
%rMn\QU/7t7-=j-6dB9a]7/4e979OmK]%Af)<6D)s[:T2'71I=p\F!3R:b"Fj4qcp3'HjSM#Pk;p,uGf2f'ON>B1[Pn?E7;*TYh,U
%"l7LFb#B,\$lfj?&X=>UQ'?l<!(neA>5WX9Ee)dqicmA!CV0Y*##UdW6BKUD*^W4^4T.#Q83rXGrG@.V1[:^mSoIV_64i$NLf:$O
%DthjWXVa1#?B?6WCSTnY)BgcMS'rX'ihRs'3)JV0)P3f`]g1g\r<'X',n]/P\(q9](m+0QNB:`M[brYds2Y;-<uG@=+1K!LNoiCg
%AJ:(?I>2m4GSH@\q+-B\e]W1;jG2OUK,IR.lMVn;[HiSMC*BZ]Sm<n>+(I=2#j&,@N"5OCegF8ZT@GCqe/RtbV]T'A/[?h7,P8ge
%6VN5mb.XAjg!SW_[];X.-+$)[l#EpKi+4YoZQYs[d'7h[+5KXKI+^Vrl^CoBq`]qe=%:*)UtHSoUq"]-kOBsE.Z^,/c37*nah?>^
%.U>i>W@]Kabu2Xr^+nf225$S,#1k6M):@iZTlLZ<LAjiIjG%+n3C!/1DHR5<.jUHL]1_Y&q/s-K0j@O2#@UKm_L/(l$u)dq$7a!`
%mRAs&[IS=S<-IE$Ur"9:WQapsB%h,o<!@`-MV@e!8?>uQm67*f9Nmr+=u.\L7"I79!6_-B$aqjW^0V&)'BqHL;P??WTSNd;9s2gJ
%7`pqANl0&?1=k[W`#/cNqaaH1\=d*PG#?YhLZj4)kgaK;W[o1VQcL`MD=:@4PV_Z=n.0W^)\>,oD6)"&+LB[lmk&-TKbh^hP\6i=
%CA#2:#t"7qiC[#QPYHThRZ.5C7tIrlDnYhd^o(;3GXWf`I!`\o-V3]3l=qU1gs6>3-6K?P(n^i^]gFUaoi,VuFf.Db3=>fJ:f^X@
%p=eY_0Ua_hhV@ZIMKX#KN@G:b)tL>5T8l?Qb+uEs,':T%#MF32kihKn]BeUpp7$XK3jOZ&oK]7^^?W1Io?gDF?BHAmG"ZS,G25.D
%'@V'cfh63T8MLV*Crk8[<.h1].cQ=)n0YUM;c]"*Ad#t,H1e-6i2"E8ka/B%`$ErGRB,J@"q/hee]'cpPgV_ln._*fmNEY)WmoB.
%SG3Qd:VoZ;X@9&"Q37)&$-"sbi!td_-Y4R0]qh<AKDM(05)"bZbb6U!PjS:p*d.rP)/S+=h#qjgVNs<G?3An56u=?M+_66`Iq[F`
%JgR_n2(h=t6DdU!F;'/gLe"q]o0=:YZ]GYH+J;#$_I5`b&_VRuVOg%j$S#iE0)JQ^O6'(J^'pKbPgUh=^re=Q_TT)3B1cTjO;43q
%aQWepE>P+7d`a-a>[,Yk^4P1h$^tCr/F*0UTo<@+%o_b5,JtkBDB9k@oB$CTnYpNhl.`&p$PXcpj4P9^qR=J,3#<<u@j1*_1/0&[
%r2TVcbfMHTQ/*&tmB=pskEDf$LIr!rl-4J=X-XqmR3Mk1'&(F@NERW`@3MZVT0!H`."4I#k7$F)a8BZ^!Obp)#!-@8j2ZJ_!1cQK
%V@rbefnX(9S=ZnRXQ+l$UtF=EY_1$M`#t-^Ju2WZO'eGD^,_I#A<%mmUu[nX-4!G)icmZZpX;,;kH$99,iXn9inLH(X:nesFf;A#
%H9=IB-RF;ucCSWI1X!54!YR5ecoLK3),H-7md:l'fjg*ZaB?7S;KuO8+$OWb&UD6?+KO5/`ssS'%[#j6[JC0J%?6=aqfKbl4b=l)
%62?UP\M"RXX*d>*3E\rCCrbnULI/?*&+-]D!L)ERK5:1/6'G[@-qYh6`%!#==KOoKf@X970qlPLS0hG'n6>rBEm:L8YM?A>c.d'1
%-t(TPgJ9`C"'&=<Z91poq]<,]-b;^Yfe:c^jUI<@]ZFq"'HSr=L2GVm1ZJ<\\t&pq#.\;_XA&`ha'Qu2jJ1uI#2Li?O[b'2\matN
%Tog$=.^YY6qCi<J0.G3UZQT8\Tr?Jq#01DE"j7Fo/>tZ<8j1kPJraY$$VKSn]+9KKdjVbXgd%$oeq/VlZ47S<!q0uL:c>8K::8t$
%-X])%?RaX2WP3\)JpJ,BHjrG`flR\W,QH*3ai.<_CbUXP.aVY2AOb]dJph;aT6]:WUc%33Lok;jWZOBmqRDJ`9a9n84CoA0U4pD\
%Y_E'q`6^"]H-Fe#)\oE)4bjJ6&$*O%cGoZ?NGTZ<7&PN:'Kb#CKd_-1q1:0:)Vm^W+\/pgnd0G>)g*LuYUGgpfiVA!8tab&=Dq7o
%BJf^$-U068RkD6qrJTS-G9#L^>s6)Vn_902QI1)Q/Sl6jMDT)cQ7"112Z3QAf>-P%a2@fE-(4RddeAS0)B4GeJe9@B<<_?A]hi1c
%edXArfDC9%S!^%F3i5JdbBC-),:@;?NB>NB<'tXg.n:`b:J3-oF\9m:><Bc^9.i`<eX&1PQX_>t])D8e6Q`25YDkO4/g<QI=Dq]@
%&;Is\?6r(\7>eT7[mm5.+K)Zt7@]jq(QV<TZ/"Ot'[=`'m_O=CRE#;kg3n'Igu%MAr/Y&#qC>0/e"h-_lH'>j&p.n)JVLt2e;<6m
%^!@r^G6M_;'<%esDr3lUV#n&+L\&jQ5p!kFRgAPiGsN&+q0F9FQPXdMRhTf#M%kNedUNp'J/OJS$;cj/2G&5]Q=HAm9+uhS\9)X)
%;`&q`q2tDJffBgDWg$VU(aLT-qnBH'[<sLZ<%d&@@uad[IPmg]_]F_lZrEIAS$Ef=,OpqU'F[p&eQ[V9?IK_jnFrge=]TGfOTk3C
%/<GXPJDl3,1cL?3BbL4aah7c?KhLDPRutqlG0MJ(`1nNG1?ol0a+6ae(FWn[0gr*"4]\cCQd45"?<*s313sHJgR9b;P6SB`r//HR
%Hn`78KQq)+X6t=Za?T;SN?9`/-Bu5]%Y#$Z)nA&#K$=4K8PCa#fYY<6a95;Q<cZMt#gNr-pUYbX7r5ZGd`J1+!@FJ9A=0fN;[3d\
%n'Y6?>fUA9Pqr>2R$MLajTCj3pmncFjMG:7Wjm20F:.KMrNM7HEj-i%7r#HhJ_H_(>D,_@e"g"'(#9B>%*6g57/*T/W%YPo&3`Y+
%ckNQnDTQM2775/EadR`h.Q0]p,kn!;Hb>StI_;fsPbnh6PG#:=Ft!QgB9uG9UWEiGDqeZp`-\:dq_WhTo>_;%;AL_gV0]b<P[#1c
%ka&V?5nmCG:IX*#XJo#O6pXWas6tm=oR6*SYX^p,gQ:GW3DT0+'O#UFFS<\2+qUp3l@%^^^Z6cbN"$;>S'k;.QH'\:7D"'+IXkN?
%FLkeVZ"foeVcD,;/$DM7:qAtGi5'I1"2&fd'FG/u,l,f=lF*]4!\iMB%K>`S4UVQ[:paKQ9X26bJhPMhU7sm"\NAKRV5GWs'G\5$
%5>\)8<<*9defl>LVDrmr;_6HLg=\Wk91Oj6jg_9C5=\biR`(37B6:YXmh<(0lV/#ZSu<gjaRgdGdB!IIVP'_E9krBUq\7O@:X>A)
%JS/R4e7jZSXLk\.HlPDM2)84XO[r'm#THDuNTu.:=,lE\AXL07P(FCGX^$PB),kJ`IkL-;Ot1V)jp;j'Kg,/&_iglbE)M57+`3)6
%M;'`::!PAfZ`pRO7%'E4dR(PIW;->Q#RJTk$k*QD@;rb.C<1k-D:]_<:L/#%mWi=eJ19=?U(Ad>8W,8/2ENp*ieY>t>Q?T9#%Ws5
%;l%\"]E0/89i:/8:YIW,A3&Wt*EhfmO-n2KWi-%'VdNcr+o3dfUCAjkbp_FU%Jk$UHXLQL[+uBA-,!JOp9Z=_fBfah")8]R"pi1[
%([0)D)c0ef:Y=I6Ce?_dBY*jc:\kMP[ZY[59\7EI@Ks!\=M]j9aO.->UolRM=h;jMK,[<Q$Yct(<$(-oOY"p0;j)#T*$c94E/)oh
%m[G>B_iE*3?YXtu+f0$*<u<88Qk;SL),iRq]=>NM:!qWfP)=C/Yrf4bXGOPReQ,B.PJbTd+<j(R9^8`slm)3b4O>Bpic)7c,Bu`0
%HomfobL&mkl\n4Am)gXN4pPH6Q2o<,E>WO%NQlC:NZ`P(RtjHe'9JMi28GU@bnVX*kNTk?S^_+J0Nstg#.LmiJT^dLmrmDi&C3DO
%SSt5o73sjfn4e!@Tda:cJMP<52IEf7jXmc[1[H-t9I8]'J*:g>'-^=IY?2[/,AW,B?UFLk?cNWKfLsd.kpC?PcNnH_*n;6!D23"k
%5a0ZSB]$rRU)5jUkL.d:0XWb9cSCel8L_T4bLKp\fIjVG0&7-#M1bb*2^Y(Hc>XWT+na^H:Wk]@CoO%E.C7,Xi>/`eQVkqiF1W!I
%Pt,A6jlA9Nk8M)B=-HG4\u)/5[gjLN?g.YmW.U%jLpKnAqn'.eMNZ:U![qjdg7dMPI8%g['H<XHZFjG571]#Y042I0kC1:(C(XTs
%]f6c@KYE->4>mPcZu9_^^h%a82VLL:O(\4#?a_<YW<u&eUIiGtBD6PE?6#4qZ=5\c.HV*ud`s7=GI4nEX3S-B;^gLb$qp.@Ec7&`
%(9d!a[)8`$6:;1Sf&\CFDu0pE:J]:2cC#dsN@`0^Zt1;$E_T>DG$+<#q*aE,[:*_TT"iW$rLKCqN"W2>j,js];>G`d%A>5b!gA26
%KZ.e34Q&.Eh@anqN+C+:[-.&m-aeB72s;sPKAn2K@RHEYaU)r%,U>1cZupeO9sL:&%T+)Hg$Y[g0@MqG]D&j9QK<a@]c*Vl=Bj\h
%655;Cd/8V/5#?S+=#sXYaV[33>N.2fDn7,Y9.5iFcu\@5M&M3"a50j#0q`@Mj2'8(rE@*hU)@nJN7F;"6?a_*Fg>&>UCXW[ftDL2
%D;g<#.O.L=oeo79@=?EW`1QL@.W"p%Wnm/ePVRi*Xf3kM3I`KMb*eQKH5'f?E(`qV>m$MpW^3%B?I8A(#"kkdiY4:;-fj@cd+])3
%0d]:YM/hT^_`kkU9!i^Yc/cPVG(4D6NpFTe*p0`6-Nu^L+Y-V%kA$GjU!,JOSn0-<Vq%^K@\B7If,h1U8t<k$?.rPT`MquW:Af)a
%BQCd8/Vl='HhuU>*HMR0&R\E5')<BDaL/nI,]ipJcWC#.%UYjLZ"Q"!MV-5r!q#2SK("^3&n,_*jWllGf"sRCkB=;s)`t.kp#GRZ
%$4B#c$WC8`AhO;[@:bt;o;'sTQTEYhKcmOV5H)5[V<*c9e\Toc:Mj9]&!sgS)8N+NG.70cHZ\e?6+T)9I\=IC!L5TFO2JNg>A5e'
%(7'mi"0nFG$)X'9YnFEA`jad04t\?%3k%k=ModaYC2kTgcc/f1Au9M7"6Dc`8%-r<Vgh+;X&?nTl#]Qc"uKN=+-jZK]2$pRODMm?
%:]2@&=+5WG-&hR5o5Zeup1ejWW&d7d>"Hk#YgpINHoQn="a"I?-KYE:9;=\_FZ%WO9AU"kCC2uR>p%+9XqSaPVa.pUDnZ.go31_A
%N6uLO$Hn"*:GF)Eb1L[KT9ECsLP$EV#M+/H&Kr%(;NcEQ=,]:+dGL6Td?JlpRdSXD/H.kA/=$W"j#Gh.f9KbB#C,Q`E(t]FUcdVt
%E6c)<8q[-1N6;`RbC%5JB9_1Arh(Re>b3?EkXA"?bTAJ7W(nQcU+-ECGh_gEA9F^:H3@s:qCkR>/(bP'F^:;L5"&STccuY;SDd_9
%qkZQrlSHi/Zgj;fN[]rKQ;Bc...Uq.q;"q_TY(_qH7iA:+#$[k(A[hAL2'=#M@!Nh7j)MsNf[c9cb;O6VAMKq#Wri82%-lU]<m#[
%/!XN+<o\O"3mq71G`o9>3>b4#"6p>@lg;_1eO!f%!/q?,5Et/0FT$VUDARC6'"gX+qXFMQ\[?1Qh4gP<JhfT/p]h;:OaE\P@EPe<
%-%d@Lh,rcG"XWfnfa^GEUg)K$*H=puL!(h)*ZCg&Z_9CXqQ`H_;/Z98;WR:n3EeK/fHUis@Ti*;a%%>UWR9f'XSUKL[JUs*=RQum
%U?KM<ri4AV<s2^T:c[AV[O58od>!EUj`Qn,d!ZVbY.Zq:4gN?Uof7OarYo?$MbJD8gN2%"'l;jG/^5,/Df9o#X,O^+]nuhZ/)L-u
%M3jkp22ks*C>4L]L:^F2Ydeb>(YoDT[W;uJGV67(?jS]]?-gM^*(-1@kPGnQ@\?kNi4am3:!YH1;Fs#oZ9X$^k\PH)\e5k'BSjiM
%q\g---7`#o+2oZ'MBF$YT0%]9ku0ociFgqVn&+2!2alYLR\AXdma"9;kb-\XhbQ(fFJ-,e'fPh#[2B-L^Bd?A\?_<E]S*fhqjT3r
%-;e<^Usf[MB(I%9e&X.4VrZ.XZ"[s*2:VU<MaWJd*fU;pqHbp?m&Z-@"_Brmn`!=/;5G,h>=gD<O.ILe8E48j<C8AtNt@;ce6^,$
%kUVFK*$8T)Vf3.i?R+#3btt":pTAr`QsA#!<T`nD@I$;WfbXZc%nu1-E_?D;Mh=!g+Vi)pp17t'G$LMd-hHm]*N+=F+[YT<1mqR\
%Oat0In9^#TgekdI3E/-Qqr8$ta]<1?7LIeVFL?iDs3"OUbsU@,.L:AWkuDiFWosK.7hYWDq2pCFoKM(hO1LT<h7X<qIP")G4pO%#
%AXNY[K(A"t;-=Gn@ZNYb7I6>1*iL2Aj;u[AeZD2BOJ)QBmIA*#%sYXc]P3;^!&F*;^:_)@pg)peZ>qj__51p17k$qim##52du(fQ
%X.$LZEY;O>CN>=D%r&9uj6JQ9?[*?@TfX3h9$+VijhchIZ]A((odc1&eu0AS!7cX+8@CN2\"Yo,oPL!sW"4ZtjX*?PSt&,8:Kmcn
%=)hBU7L9+*lf`F:qY`$PB<P7HiDX$Q@h+#k5B!13R\c(O[4@rmDj^1$appl]+el7%d.%pAJf5mkkm0\]l8Z+WW?MYEA(lA`VDNGV
%bB_I)7D5J2S`%eMU;t`o\*.*lS%Y;SZBk+#kmEu+6S"\Aq9mfZlO839A&/m0olo)LJ0`#9A5BB5+PD6RA[q3cnZ:9$VfZ;495IC-
%OEU)9dm$`^)tpju(46Li-1@O5$N$@@k&<8_/"V^)9/]!hBAG\<V^*JIJU5u*W(6eL=9`ui7&UTFOu5"gdZRb2GnqoI`ZLMnH;'(u
%.fu,J9CQ6Q8BP,qZ+$-+^a-5f_*5nbGn&?5*h@rEFS')RH5F*1JD0FJ4P9uKF3Y,H]\2U3EumEH(uIb'65nig2F&H_e)KK[rk/`:
%7Ild:nqK1N+ej>J0h"`'OS[=.^C)@B]Q1@-F^"[d@V;*1#=bYT3r=!C%^K[<qSo[._j&Ko=kD;(7F)R?.gW2?2B4k0a"Uk(-LR5l
%H1(8:qiT0TC<5Bn(`Ko!Yp@0X/DEo.$&@$uU3"6:")>BYb@URE\"EA#<%AZJ-NDA'!s"PA%X.Wo3e?\NDT#uhOokMU+Gam*36K-!
%Io*>PCKkV&#;T&\0.!+4UHC%G-Jjj2qdZ&bk(f@#L0\so=\Ns2nHfkTrjg%T0rga`e!Hh#k=B(:i.>gYl[(eN,ptG/OW._>ec`?r
%9q:"IT%?R^4jg.k7OD!0"=HW:%/uCb5(f8so=.-^eK>g"mj#AVV]T5f4V]0%UKCl,Tk-b:@Z'NYlBcMk?V:UfDlYk)/E@SZV5Ir3
%*Uku#]Q9JPT,VH*Hju#caZLN^FBmWF0ulIc!V@tm(=Nm$[)fS,/VbZ7&rUDO"A@(3^NL9em%1"<_%GLHo63B?pZ(JmK"Zj'X$mRD
%b!/(gE",cY%]Oks!Rf(+#8SQ))&#"*:*F1?G@Nj8$IWG38;mofC?d&\_A1%q#[JnOC[SSn,^/X9grBq;`%(:$!h;]te9dAepg,,6
%62;6c4]f3`IW5hV<N#"3jp&@L:0m#XPt]e:Nh,$SiCNV8'5]XMjtLmQI\Jm:DrK1;E7Nc[$WY:B(L;eCg$JC6'Zo0)Oeo6"`'P4"
%VRHrr8Tjk"GI?5?`0N0"ACp6n`]NVON4?e;CThh3=%#dkdO9NT[T-T786O-jf&seiRbK%F"43`08F#4M2b+QoQ<C?CA3"3@`r<53
%OS"=rIWWTUOUXoKU6cb(Y].iZ<Q_Ob087H'ZRHiQXF+>Xd!&ols0@^1`$Cb\2uh1l%R`YNp\RU=^oA@4Qe@O.>A%k-_4\/ghR8-O
%I++ock$Y%O`*K8k\sLKg-kA)\lErHF9#S`Q>Pr^cj\"9J[O'6R/Q14Mi[07lF9$Iuj#VD%XmY+a>(32;0^0uu6_?u$[,T.H@%QiJ
%8;/^d1.$O`K?9WXNm>@[4O>rZ>kTO8goE%Fdh3g`l`>0P(*9t4=^j,gXLjPV6<Lh5*6Vcj%q3IU=[!Q!Uql"Z3`lAS7,^t`4YI.J
%FTkRKFJ`94L@K4tfcg$=afds=hS1$[ioLSJU08`SfF9\Y5/eScqgO3`>qWs[K*$J-Tu!&MLZWV_+a5-Zp7[<*?-kd@o<n'\!GW3+
%>3=:5Gdc$3&F.f+N7c-9s5a7"AX0Zp>DY.Y?mo*D&aKM\LdMJKXiI`9>4uMP]8_U5N6pT=]fVPdi]%n`IHVrXESl31ZAg)k0,m*>
%4J[TRL)n"9GE?)si``@%>/CJRnS:!kO.^>BBV$8M>!&jjL&:$6Y$P*4WYAE6g8U@B6+O#n*ALhqQI=Eg'MT,>QYe/H)tW`WiX"+T
%$;P1?LS7JP/eLOM2f!4&)N^[6'WGO`Jok.n=JAR20E*`U(CCnKKkguI]m3GMJiu8&S&a"$A-#>/11_J622D0]@Q8I4Os<38o1/!#
%DR0.Q-@t"Ym([Msa!jA9=BUZ7[OHeAY*`K]UWl:7ED39?M<o7f9GVk*k4SGtef8%`diU$X8P;hEPmJt^mk1<LD2O!Q5e7tM$0XP_
%cqZp[1rkV.K=hr+9?r_t5N;MNNd@0CbfGWFPS,ls.0Ee0f1aDbFXO-!TUYo4auI-t"3^$rZNukCmqVDXQB[uX4GJPi]3U>^H_HeY
%*kS2AoaMn?"*AcICjj\El97kHBG9jT=`(T)=RVual"[p]\!K84/9P8OKSfm\(!na0dmsP'Jeuu&,A8nFn1.RE7N>:\'jQ:1(AOT8
%+&;lie`^cgb"h&B_J>GJMK!KNZ?+#2&_kNtO>s%TJe2C=KI!+6JHZaeoEa:enPa]n)(5[uq5^lFim<l$5cP<,7t#?s5eDccP1,fO
%2@gMF\np5B8])R,7or!`5L@lnRU8+:D\5:UiE.I(U<=bt2*<,TrqL2R=(S\hAaFtc<tN+!bqm'*0$hj><!$^,%!1f2,5+8::"S*a
%S49Ce5f#s6$n[4%48k#]s0*lBa<"dm[k<E8pu$Sk$FqR&@,$='S\mL[SS`l3;Op^P6Wjs<KandO_df@5\QbasFbgkCjIJqpG8PU.
%]6'Olp_o(VPZLMVVqg&aSO1LO"'XRdCg#jZVg:_+f.p+@'URM0L&gX$ib@Yu&Y[Y-ge"=2-c8?JM6OD7Dfa8L>g^YG[EEupYgZ8J
%o#VnhcaOa\.@`;tf/1Ft\a>1qH=![(a#ogY8o5[X^d)8PVRAMFT4jk@Q6/0bacd)_=(2HV0?M5:Ps;IEdN-6+:DQ1,@F9[WIP2Rn
%B^Y"u`QMm^L[O\,FB6HU'le'1Oliko:V]@/&0ChV%F7mP)pncYLI)4>.@;Y=[[WgR0&6dIaFqX1O>^_b)[$9=(if=a+=JZmgO\T>
%kLHa^TGDJh\C(S-c?^,Q"k#l`IMK1TOTI]\EPs];F>)q*&7?NR/eaMu=DXeYQ:5Qr;M)t+B16.3'\P9&I[=Z<?%a?s`Zc[29qYJW
%J=p[EqK?#?+2j0k9Wne)imH].>amDH?QKK>DX0j#[YQ&+JhU,4PZR&;&]"-]+QoJ.Z^9VNF]%[?UVoQiU?FjST9%9>NP(=eLJ^"\
%&C/W[qt==4[W0ZC>Ocj%W[-c)]8BSi=f.T+0*aOn6i,#3HYfq#c4P3X1VN^`hN%;+-\km/O/7Y=-%otUO06?I<65i#l<jsg,;`p'
%b;46>(gb$<3$V8p]s"'*.u-*HH?ZrjdhP3J<-RiW.6m8ErM=?ij9lcOA=7K/dBNFKb`;=NRKNegiOl;_-rEQMW?,'$Hrl`d-=!Z.
%??9n7>[(B:T,!?Xe,1iC*M-j8;qs7p5r!g0Es@.FLM15!3>@!)(\%/$S49Hh$jhBsU0B1]9)-Ka.>EJ2dA3O:r6U38?,n8Z);U?e
%Ws4eP!u,geaBGB\K1=kU<X%2?I)`M_1*,==Z:\dp'q*8g/!$ja2[f1K<3_12>%pN_7Z5HbF6^5p.LHmWGjjsRJN6L/&La7SY"S1#
%iZIS[)-\f>0NW1/$4[2a[a.\G__&9p(<IpNop-/??"mA4r`uj9SWTd[?r\@n=orUS;QKYq%(%]MLk*)lHnR=-GV/:%V$#NMjte9r
%pQ,YY!cd)q4:sk-9CJU]q(.Np2+/=R:J9iQ2s?e3.M.V<[[R&3^,nR7lWGFS?Ho_g:l2P<l'&lqq(bk:^ETDsC.@Zi@)UjiOVua$
%/LeHuKfQJ=_-/0?c,]cd()rKUGd6r"JOM>YqD`2`cW#iF29?:Y_>2KQK([,J*[d=D9Zp=4_+'@>qYkKu19Dhg9?`^9M-c>.rA&sY
%AS-ep:Q%1lXZ>dn%EoD$hfZ$hJU:hBE9'tq\%\/-VctIriF(LcBDH34N)V?kaOEO&0lS-mM%8(h?mX6Y'o$Qu;bci2B.1Pu,iIHF
%,J6TCA'"`,<+4UIdR^t1oiX$m3^ri^cC,*:e=W>o@(,&4MSS.JaVD*FdOV^^49mZk=P@#P75@>ClBO^C-3@M)c%2ohr2Wd`ID2R)
%;_V*%FBt/CZ(l[J6Mn,91h:Jp];$YR8kMK[5%(O(NctqbT127?>W*cKs/Ntl9eUn!2ge%@M+4QapQbP<#i:K/XFN!K!J36"j&sT!
%@XZTESUVa6jAUPV4@cOrn("YTH'OJYUL[k:TsPBGO8F6+6H_b<[oJ3'+20!]XCq;PH6o*\AX9GpmcFE#(^]nN+BEBt7"OJ7gZZsq
%.R-)N/)eLK&=1_.!VJA&B@.9Q#03[<5eSUbrI"jW?C%oR#0d`\O;jc8%sX;hT@.f%m%u^K0Z;#-\<Du#Hu.)ofLY&0CCM60@a20u
%_iqPj5MYS@&r,qf[\mN.l1K$eX%iaPC+<>(d!O)'/>2a&ecl_Hj,r$c&ioK"h\i+l(LIPWj=f@B[[?A?6Sg,D"'R_TqdZTtn9;N[
%V>1i(D@VBk.5qZ%^bRVoSkb^&:+Z!;8\^L>P[!#I4G%Ol'pk2[\,!84C@@Kg(EFZA+o3BC>BKgg`ttaf,*-5d^g'Op*_5_N#PSq$
%OWH8%2^#`hLFrSeZ$_UY/5'WPKTU4FR?O&Sm?aHY^&KjGY<@PX&]DpFc.Lm]ka43I05P@j6Ut68p[Xt<^P*&aSVduY!JJDBGj^Mu
%+$Gt0T91L:1nc/Id/"a!k$#*;nH4U`r9W;g,:9]'1A!*/%JGQqn"l6#\]WI/*SO%:X0,q)Ko)OnCND\,==:gVjp\*L6tO/L\`6r>
%2Do@J\[=Or*6VC_g*:(r8!q>h?m\/"Dl11bWo!u6S1'`UMNn7<D\s;h^)uRg943?'@9eKc+eHdh-,#*+D5YhuqG#ZI=tp;HKg&C@
%2(YGeHM0kuB\O4afd%pk.m1kRl-S\Rg9\0ckT1uZVaZdII6aSajNL\sbqH/5HQ?h!UEuVi+?pB;\+e;?fEJ`l-RjmMUs@<f7PSho
%N7fX4cH%V@TI\*$rRj0ZaQokX.rC+MXf;9KT>eQg:9fHF9%`r@afG05%&gZ2na%0\_G\L+Z758@rTG#!;sasnEV#X63KrK':s>W2
%HkBm._@!!8Be.Yq(bW,$/,j)$bXjSO@%e&:Ou^a'5bW8>?5J_8MUn(FV9S%h^PO0`)$Ps8lQ!'^eJ>>9](aEin,aerA3l:/bC=k(
%RQJ2lV@VJ_,uq6edfA?L=`'%[H+5^a]_Vt+I\<U&9@hT#pTA^/<=]cjTu3gege(isrWEbV&.%\I+8UZ&GGSh)+R)fq.i&\jVQ9j"
%XRSe.:fp`ZJY"H&/QSk<`B-:>4^A)taO6gG[s[9>7GbIg2W8Au\pF(n^=XLtb<F=QY?ecJ/UlH`jT@b@hX3;Ido2(NQ(`XoU0`L/
%+p-Aam39@XQnK'Q$^CpG8*WVei"6kkF/hWnC%F6t*c?p2*%odD=o3&c_PM@**L0#^cB[u<s1S&pM]K)q6RbE[@F:D,PpQ"lr!rsn
%n[gg"JpUW@W:b;;2l[ZOgAS@-T9^UA9lq*s_;&`4S2<oO^GgeL/49D)EVkLpCNPr>mAZ&B$sJ&c(:dQ6*hT\lMJ8.:qY%!^&gmSb
%\L!lq&`Sag$=/`..'_WA=ul446fK.;1cZHP4McG*2;?d*YC9.4-s:S5J`NK:j8ksPc2&*dqfnnL%LYuq;'gth"aod&Cn)%dWbc*9
%$^Nmlolgp!mRe.VUdZ#bVcYE+D].?V7P?LdE*c`"!gJXs<fDk<L;=9N?QE'dk$Vrg%W,.?L66kh8&FW&Ko2,`?I7.0@S3sm[1B"@
%YuYK^629UaLFCP1^?t+o@K&Y4S;uX'8WhA85`t$nj\_Q3ArBJ;mP#`ief0^B7>]/kHN2rOY?U1r\,k-+#ML+VMX0)ClgH2k"ZJ=/
%)XeR)"$IFj4j>Y'[$\:^*fY6W0$",KV(-TZUdt[N<_A2_BBcHc`!W(Vod9<OBXUJYjbHp9a\eROMF2#/AJ23>SfnqpUV!^NLJ2a2
%Z4,EF.#(+;D&Atr1Z$q(ab;CGJ=;b'ftN=RioE88SXtuRj.,`RSD0dr*o%ReUYThcNF<["K<l1L(kj5j!iWOd+K^#55"]s4*'p`)
%_V%U-XQ[TtJ-QqlS95aZPO\tqBMYbt$9#3mC14._9!qD=n[6#AO.SjQZ<Gh08t?(ND&\1?#CcC<UJZ7DX/;%Lkp.^Q%t&KhaB/eN
%nH%V%)/]_(4X>Qo7O7X]TQ!(e4CO5+I5p*;=s1DiZdn(9'P'.:PEC>*IfQ^<Rq,']G0;U.@OAr[mFr1\;SOGuB&-@,j@ZEr_.W=L
%^nW_PF:Hnrkn:'lqsbSmguXC'cX8fNaJ=(J%P+Xf=oSUXMDqeiL)kM'J"g0$2'nT7%G2/8H7L&4YgB20n@qpGhS7OWrR"NXGhIC&
%N)59ZP;lG[2s[;r;Ka.b-3*-:G*-Z#;J,5hE`TDP0eab,H>Uqg68N/u&SAHZQ)>k[Y\!`OFNF0Q^^h#rd1UWn?bVl'*?fVrW0E`b
%-Al3S[qt$`Di29VB70%>a$Ga]eb9PN-MMaJ7k0aD,n@\TPV+8+L>EiM+*jVTc;6FX#lB`/.-).(gr3+%14t:nZ>C(fNU+,+,HpUr
%7G8DK):m?kQO$11S+QT/\>0,W-99F5B$&p&,aULhW9rn%R>`*>%^d=PTguoWGY&?c<XXU+1J'8Or>a*);-nV342o(@q".D1HeI'7
%p`@RTST*BGA@?429!f?c.uXO$5(0?,O0>DEG*u(Sr(bmOlq6^MJcrD4Ge0t0F#`#--pNJUh(S=+E<oqi(A-&!*M.n%Ce.Gg9(X))
%f7He2+[U%_I`a20kq$W?AWE;Y?uu@(>:S(WE"5,7EBU,L^HV>ddk,"mC\,rd_L;;Fkf@.C(/se73E:m_$'Tq!CIf9baCR*E[Gn:g
%ZAh+N>=4rtMKD,="+&rf7:Wu(nQeNtOs#)-Rc7h@05nSK&Ig?WY.^2<U5Q-:8O9A:.Fppak^6r6/jYuOQ!B1])tjhl2-Wo/hhl;7
%"W!f#e$:<k40i6oPS8PQ*pN0_S_KUQd>CQU=3#Y6nZn`;S6QqA#,X4;3o;c"h)s@%M7S">WQ$+KimM_0)^$a^(H6HXLBt3"2d$l+
%-P2$O%s@[oe5]<=jq7nq!tL)jKSUe#YJ:OXE>`8QM!]eYe*"jgSiDNc7pf3Hf3BQX0C@Xa:\P3-r<X731h5;"PO6O3:a&`:J8XF=
%EJ]@00\!X`m+A0?imrNH@MCQ%SU;q#Gda8A<00i');C(!H5G9)LXTFhqp*?)XmSkflTuB]JPQ5aC@Nc!]1t@Y._;E;"<HPZ"g\dD
%\6=\4/]f5t)++0Uj[+BfeCEU,A!m-4r&/:2LU;XVg1p\F.Os>CEd-G>Rf07!e(n?U_;U'RdXu+rAl*1`$$Baj5+$?fM7Fd`.p!t6
%=%BE4CoUGI[!H9m4#Lnm51JbSN:=ob=a?el>DbpJa@>0LA)Me!m47DeH_(l^P/8IU>ZV.3K>u'CA7e3QoM@7Gg%^N%D^I''1V82n
%7'ZSe>eC9$$lD1-2i^bU4S%^QTCm@-WcY&BDQZj,L36UV?0rP5-Gb(A7WGqp-en#?d`<%7poV"I0;Z;,W4urlM6&gecpshNDDZAV
%ECJ4uE'm.B*mmU-E]HM:bKD'ndj4k8'lB.l(lh8R#0^!*KlIEE5o8jt7;`?9/2-T-<!`fTj,CXPDMc;]c4G.uPBGR/UT&YsUH,%k
%EAI!&^mLHb1T)C.Mp9F_Rks]INg?0s+hd.+:E[u]<W$7[9FPSaOrDH9KQ4&A(]hMrhK6GFib1F0WS,muDg0@DkBla+18>u^$0S]V
%?rG<CLLOSJg?=ARH<oN_+kWc@]/$Dn'#h)eq"8H>&@s^DY!O@7J9\u<6M+nT.,*mt"p$Y6"/`?MD\GtkZ-'X2#\)JBc@-V!kEKDO
%1TBC?h>)5W7E8E`$bf'Pg#?NG+nSoO!_#Z=&5GK;VM<!S,1dWX]@-_aG0%os<3d.\6=#b)nJSkmfg@f&8&BC0AE"9"E)U[*pC/Hi
%QnYlb[0I<:U'+bq-@B'ds70>e+6Q@]a\LGirefd_5m0/;emAd4=nS;kM=Z>[%X>NRRGm<X4C'=k+`qu6P1IF(G?Y=4Q2F3Q5VOsB
%]6BSO0t9k:+n/sBI15+E6Y9"&7UAGgZZEko36G8F7'[!7;KHU26/CS)USi]BnOh_,J(]EeJo?m2>e4S*+W5Vr&eD/@#51md^Yj>#
%_*'P.&2PuAl*i9o]F68DNa8Rn_>>fZOYJB,TQD.gjO=F.*o7r*:g0Prrq[IrgM&_dQ8o3s+6lD51("CmL>7b`Ofdt+>))$!&ML*@
%BT9uhg(>n,-]GkiV*l7,b@nQ94dQ*fNWdR\n9g0b4XucW@mI%OhI6;C<,YHFl!s;5gO<Dl3&Tqk:e'Q+Er3YFT>T+BZu!33/1nrC
%[C;)fI19DBF'ooLU2Z,d5HEg4)4RYD^:G;SC5MNijlgfM`QKpP;_QrVa>lEfksV-'o0[F\%T'OLUrCP.;g-m`\8#2aKc,M=a^e4l
%2ADGKn/;u:MNlc-IS,<UUfpt1L97X4`8D`<n'"'H3c+0]MCY^Sa&ka!:3r+rd5)DD,qmqs8C*BYQL2R.;mZe)KT0TL&!FXL=D9P2
%3=?H?`(>AE.HZ2g_ePsrBs'2Z.t]+t)Q-&41kr\a%sP(Y3I'7rYPW$UQpR5+MX/H0fRA48]&HbnS%=[WaAq/C;K_`&mie,$Q22DB
%!F;aC<echqQ&R%;`ES"kE8<P:(u>VUd^,k2cI<IG$RN&qlUOS$o4SDBl(r<=a^4*1).=%d>Jcp.TsLA.`iJ0mn[n$(@>j[D#l/a`
%BtE"roO,[u-k[uW-e]8HXp6P<0O%#%cDfD@A"h0uChk#0/-C6F.9_XKFb_&k&UM5g=$o8&6H6dtBg,NH0PUt?:s6?Z[E5:@63FU!
%e,30X]\t0NME8n++u?ZaW4W\`nOZ("!X/+BAEoF!h4;Fd9A:^dCTan),FN*Jds(fed\#[ZI/3O>Yj-U+B,,foenTTSgj0OABIo$Q
%%%hl/Ic\S(^?FjKEqKEe8-O(D"('ZPO8HFI8!`$h`7pNZ(Z:.2nQ@^>=Ulp`4)g3K^=;1YlTPG%:%Co!n2$q'd]Dcs'i.&@rc,ks
%?Bp?BF3Nq)II*"\H^^j4`[kqJSSXm-p:M3AF$1UT(6=mE<6M4?![N'3*i$0]O7A'8<a4d#oJpZIkC=jSp#>RM+0`lj^R[RoX:h8k
%kW]9Q<%B'.Q%0=pc0'$lZ6SdA3F3HHX@):jYOA[m0k)HiXNT+'aHCB1=O5$L4X)_q%bWXc-pNIQ)4mK^AAMgC-pq%g.Q'"'6^CBQ
%ls+,ChCXUHkSUV:8uo^La=7LXDIR+s.[0&'4GN3Lf0A)Uf$'8'T>tcbk,*fdgN4tM`QtQTm"T[p3X*&p-_O]?h=2aa<9oqlbM8P:
%bhZWjVh%gcA8#"!Bj?Qd."RSF8Oq'WrjEl]V(QB(=HQ7eTNc(AMKa&#hFY1m8K7pp=Xo:>O;!l&O`LnrT)9->5NP[e_W(,[9@sM:
%'Q]k2>#XI,)>YP$+d5>_mm<\\3*RG'&LXN+TU5^i5+`/PO!61X]L;+e.!#*+>0^dlK`l'T1DAnhV\e)&.u(E?K_D$o*GE([1V-&!
%.NITJ9aPBGgiGL"LHtUp/Aij[[#>#3pL8G#d^u":iKN8EEYCN9^jt_F.Hp3D%2@ul>Xmc.YV"=qAhH]k]1<1F&p4WJ=]o2q9#nX-
%dOH-)$8dO&hofpdd5CJuNT+'jnOJmk'@O4'gWTNi@>#0@iW`BJmHA4k05bmlXhPse-`2j%LLOgP?V).*f5A$1fPGGAbM6iRj:Rqc
%m_]j>KKELT"-u#F$#d$FW>uDaQA"u$GY0.;9+ttGcF]UAFSc<pl;-p7NZ(C[1VKai<cXg?Z78Zsd?#o227IH0mhps-`D7]7^o[>=
%5>!7QpVY*pV^%I2rOsnJP?1[lAiA%2dU<U`'SdN2h8M*C4YZ2VpGgn5Ad7/FOtoo<:*&%#_!L!S(\nAfFdZ*n%NPd6IF%G_,MM\d
%o@L*bQMRAD8/s,K`HcR,R@Op,"8g;N^d7:j3'62+U8!g)@[(<!e!%B.rQL74rb%$a>33/"7eWiB]]H=6Z(_R5p1p3Q^XrX?O'pNj
%#0ado]Rj'e[(/3O;j[D\Q"\8@1$/(/5P4l;\JrLih(gZo@'l.RHukCm9GS_l>&ar_E=YV:'SrrNMPWh.2saO#+j="+];=F:47@H@
%*OaJ2:?6)[oMFScA>L5NFaPIug2?u0n_TJkdWt>@gn9=bT0%t^r=U+D7Mp56&[s)Y@)Wi+7/4%?IhCIR!R?`(/f7RLg&1;+IRBZC
%s+k9A?J6&M@D3k]JoL$mnV_:ncG%'iC2m3@[GE,4s+j0BjRo<mN[+UR;p"CL?o?sO+A>41)85?ljf1!-EiblU*St?_JFYP[Co&YM
%q<OD(=!?t^JV6Kp5m^(+f:7JA$b8Slk7s]Yk;g-a*H;7>?UR7*ftpr`57H"f/IhU%\qJb(/@O^Rd81k&:E;Q<El9V,A@<$5Y+VH9
%QG+;>8n0/E3n[AI69NF_G7m-Ls6thc7k&=@[GHL)qaP;5'CWUd6_hb+TGSm//52O$WQe-0N]*kf.]O9H!Xi%[@&CHl$8,r4Pg[nh
%BAkAk-M6kaETDWFi=o0*V76PkC-+DDf1R'RGjF`E%`b(I+N^$_iqe+s/M;!On*<fTU?JL'jlDnTjCJ\4)6DkBn-_q@m\L@@X4=NY
%PpBoiCl;;*<1:nOV#=u^ptb/$bBiVk)&p^p)#:o7$M4r8UjSKH<jSF@m_.UQ?8&p3G6bE!oWfuLo=Fj;=*R4e/.pDL4Hr+^PgRZp
%[cT9T;-b:t#>@Olnn4d\=k&KRITe9nQ77EO=QZ[Yr/+hSAiJPc]kp5V'ep.m7r>@kF^cTpd`H"r&!`@R>&/*]ML'>e"ZkBU3f7-;
%9CRpU'8a-6bo8kdIE8_N48W,1>'Q>.X)&O.:\8VK-"``/,m;2C;($+@H2S&K;&ip)Xo8mhY!7.aY!>AKWM6H^]X>8*'Wgs3'FRVn
%YlAZa,E$p;n#&M`2f].\hq*l=6IQ8k796]k[^aYi=NgS-JkB1f#P>=WgCe:HrXcB5#b\l<JRkl9X$@tW3#Q?X9p.#CS>4ekG]pH4
%r,?a0MgOo04_TpJe#P0(Yb'<bTQeY^^W2YnE9WJ*.E=X8cq[-6>(]d\IX'1OmkDGb!_'fMUI8<7^5h2laD]h.hLtMJHNX-U9/j/d
%p\oUs+RNrTTd,Jt@a`"5kSANm\b@5M/aeHC1?/kB98G[u2Ks=JrfHL;b',b$)c5*9ldJ*X#@3SRp)o9YH5#;kdD5b!d^^ps]t`+g
%YcV>0k-%Bdo)1gNk2B9b^\!ThVao1O4XJLS>?+"9)u[Y%Iji"IrDD@#ZJOeBU637&'M$/GaAJejKN)l.i:u9p>VGNI^E5$<A5Tf/
%.bCHSCE2i4%+m^d9BG"NjCIkQ3gQp-#==cL'&@f@B9<?Z]'HK89*D!>,*rk/YI-#NGeQ(Xr,d$o'`$V[VrM^?/."'dqHiuJ[r@K$
%*HW0"!np;UF8W'O>OL,oI(QGL#5+lq9#6N##IJ\!c3$84,$mnfL2pUlPp_mC_e<]Yl0-D@nu_)ISLQ5A0UIpai.fS%<BFMOKF(9c
%Nn6M"a2]iP+"*i)0qLl%O.ce]ah!GkVo1GSNQ!<O@(#\/O+rZ=7u,surYR_a"Iq5)5I4^VF*cAt08>8f7"5%8eW4(qrhXplj+EAl
%+5\."K68E^:PjfdJ!;ps8*'j@c0QaBhRrOYe&[YWLR\=I"Tht7s2)4dbO=p_:M5QU&R-B)=i&%apNc90kBACEmeK"=m>7[=cU)a6
%V\?.=#NP2]/.\i3?Js\e;Io%=>Ml'm^*OJ3W)7_omkE?f'%6!JqW?H&"nac"8?UTZ7H_%0##$;X*d5@JnHd,6>'XS\FIH1umMLn@
%[?ame>'#Bf,GVp"Q+((L*]I"CP?k'lfZBK?]VZ^81"j^MlP(CsJh=3P%\H!.0U>574c^d'14I#n.CFBD4cIIWnl$;YCJ0[3.opC,
%n7_#6Z?GH6mlufM-C%E&W3Y5M/6>B:[LqgN[Tn0O;$/oIp.-F5iDnj&e,7fGEJ;_m2nRSqZ*Y+49/_5KbHD\d;<#A4Pui5!'.SpA
%rH[`)T@TNGU`p`KUdLf1HtaVP<-G&K"sKs84Krg$W%a78VI7A?jD'HdXZW8HPqk[lhjol>C(saR>'#D(Oe]_KQOhpO\_J_OmiYdh
%!se!<E`ENM1\nc&*PMNqCJurs28baYJG3FeQ6HnP>3rQZ[3q9XDI.eiEf2Kb[D[W]ap["Z3D/Yoq9\a5_6Dmk(&?G'Rng>>&8m$Q
%2F"IG-Od%08X)Wa)^X>gGHoe9h2/h:6am$%N5Jt2_.r'Hc?>Kt97PfEreHWBm3[d>5JCEton/n[ENKaBH"XV^kGNs_-:6`@0X]SL
%eO?[TNj/N31(nqj'e>OcGVlan=F0Simn`)62MW(C/2]u%2?h&ZmHc5kj:@X(`JeeY`$<nYTpP@f9#RJ%OI0+u`-QD*b'NaI5b!+*
%MRu4(^!rOub>Qd9_#D7"\Ld0^^XYTEAARgMO_64NF9N-"iQt5q8+K*4h8_OC47imUF[ZCs*thMZmuQH4FERU_6+(.)<mcreY"1TV
%l:pJRl1SfKpgNX2..44PT+!R4fR]AK<gI1[89!3=ZE/Xo4YEgdZXXS:;+K^:*Ao27Yj1kQF^%QnC*9@m!G95q;8)L<I=0[Xd_;DW
%:TknY%[,a(Q9`C#W_Goe4XX2Xi#_6^;:91/f2?$"%suIo=kZV?;&q)C%PZTo9$4$Gp$f^X%Z%]Y8+A;F3]]GZ0hD`&X3fR[`<DeW
%[ra'Z<'>JO9>(WpL;Wdps3RON!S)K(RLL7UokqG:pZ%p6E>)K.FF;46a6/1tGh=?&TLDW3a0:p;Z0(%G$A3I*F1>2<cspUN+6GL8
%`=6K[>JP(3-nY>cf%!Qkj1%FbDn`DEi`pjqd>WH>)b&Pb),i)GKgR>2;'L<08";a=ch?jSQEgi3Q+e5JRqUmB/u:!ec<2Y,KI9:E
%qThV9ZE3eleo?7@cd?qlH`j6+'biR_r@]'C96Y*ingPKCPfH599h:7Y+kg7O(l-:<gjiSSDd(OO!n9h^LV5p[hP2G?WX[/oQ>U5Q
%n,<2=3Y554"r$hUp>blL`KZf@XQB^;_<!fZFl>bc>XjM:$8)OcZ:C3&ipXr#j3e-re`th=m\V"kiogo^el$EQ0C-WhIJnAdCK]A<
%Dp&EsO0Xd,d9jjnpjSl?kYkj442mZ8+VAk#/WFNd;PRi"qsm+o`B$5@)pgcN&f!8o\<KJ:?&2OXg4])>Hi(en8)L&JpYL?UdS>pB
%;csC/&GCeHC([e4,1YtK>t[5D.^WE*qINCQ5a>aE0"VgQ:_3*_[Go,Hb!u:(igs(uR_$JO`/9hk+)nTm(7C`heEr$>G05>pKj8@k
%,R],3.&LFIa=O6pro(IeKgHU8ANf0!_65CrO5^pFW&uO>bh[#sO/kM#JiQp@*8%4d!?ZT\lNOjE++!j!249a9KjNpJ+8^M[d\j]9
%;`NWCB&-;4E'3Yj0A?J/kX[-J6@AeJ-Zd8PNM6V6O-$c,mT+ogV9P$))Kc8R1Aa1;(1?N/'_S/lFf-BBDj.",fojg!5m<fGG5P<s
%9DQ7IUdhR>h"=fZL'bOE!+PP3q;IV*O\oA=ZJOeAU8u=V.;j#uTiUGQ8C-u6NZX;,p#=j)qe9jtbnACLYqaW'TGKXHp0l!C^Q4r-
%HPhCqJj,t!T`28H')n3&##mcc7IuFtddj`*9#p-DD9JQ:DIlu>4fu=)4<Q(%f$R@Ar1#UZWET0h^Q:h3MGQg`,rpd^NgWO^4(Z%f
%`=8bnV2E:U/B-^@0D1XY;&VEC3',ZLHgC-UdF$7hEF(X.E.Ib5TS.$qOX8DT'r"b"@`"pp(1U4"%_^(_[++".Te`a<o9I9(.-oEi
%Xg##DcV]S[r/h]4W&Glk*=WuQ*1b:4hYUNs#_YE`kHWB*`*7.)ZU]0QlB#Me@=fpjW'K`j4TEThV*p@i)YW1;b9;jaWAgN;BpB/P
%.6lU?Y$Qu):oSZ3]n)rghMq:/IMsGeLa]5P8nMRlX=6r/.!2d<h(Oo'^-K1XF,Ug?RIX44RqKoQP^4!h"cKeUoAbUIkZs5.$<6:2
%BQ)fWY'8p>^Q1+4e57]Zna>-G0h$a)FKe8l\6.\m<TnP3q5]ZnV4P]3Z4r'UgD&UQDaH25p=WW.q*SEGQDNuf%B.i^ctqVgDKOp@
%^E;&>8GWZZ+?p3Bs5+>$"pB@-,o9b^q_$989bE/m";5(pUndi"#n&'Hek6oX<r"N$1=:%noWlOCE6Yf-5[NS!7_A5(V+Xt>HS=^+
%:^Rf6h]JO#q#*Tn90pu+8IS4R9h#sLNGjs+/#_XBR$Ac%aBq,g/'p>uOp0Y]XC$lI*;s404h=<mD.*@IF<c]jn*e;ZOlJs]Jd<31
%9$26m"`9XsS/%Nd7\W0VUpG(s@L"qA?SmZcO7E>c[>`jne?_="&,Qm2'58s<`>,?$44)j"?<la7>CR`q`uGE6W(_bUZ'K9>Y9_8*
%m>,m5h4/%+Z<>4$2Mjg4V_,*KS^q_\eHQ_[g!Np^LMXF4hB0]OW75%uBO<3jGN,a6+"_'"_K,YHZV*0GKOd/#kSj;c-_\XW]ZVUa
%.g3VuSELr,r?.J:Oc%JjKI7`iO!Q9fLtdb?LZrDf4GolNC;(/A6gr$b:`Go1S9/XZW[/A/O!4_5>2,KRgIN6pg(B#ZaW\BSG2!T(
%hV!4/6#(4:rcBHmpAs>Sp9WRLg@3[`8>/%B.DJ5M(+<(a'=-B*Nh2-tE'j8[+lS4>l0^)\q8pkD7)d6T6lnErg$8"P8V0m%']7I0
%3)F#to9)Y9mPDp!]NRbtW*8_0pgI^7>u$.UJ*?8IQQ1k$7#K_r!o:NJ*nokD4?HI-&0#^8R\=iWc8&#e,lqL7FP,mUMS,G2qf_P!
%+Jhk-QrT@E1K)aC9<*U13j3+NfbmDaHa;cEF\nJcaYlP+eIp;/47?eQL3Y=sYcd2D-,,KO>b+_R<+A/b[CYB0@27sO^HWQ^'JBNq
%5p]-)+-E;W+qZJ;GN^-qZn$bWf$<3X:n*Y;n]%B"`t)fc^M(9#=n-Nsp\fiD5%86=oY^>#GQ4n$(K`nT7"tfmfj@:*^3Jo#<Qt!F
%AtS*,FoSGOaboe:n*D,SQi#*f1Xr<M0-*d_I.m]JAN3Qg6%+Rj<+u6NQ5`I^8q%X?Ii!eh(,aoGAO<Z*fWI>c-l%L(;;-PHSH[0%
%NNu%Nhtm.Y;mB:L22U=a#P;N:$HcshAPjeTfPD:+\k#:ZS,)EI31R-JM+YGf`NEYbS+/iU:o56+iX/ZM/SI%]'K<Vnf&%!J@oqO7
%bKILS'(;1(A9J0;N[j7529.s(6*\YKSN>Lt*tM>VK1%"P<7NQI<PDWV)(LTFJFkI9*_X#=^%i=8"RV_5/E*[U_U;J$ECrg="p>L&
%3q`TK<@_d)/_oiZeEplIq\)E!d#$GDq3[j$^:IiUl\a\<B2G1[<A"ig2j'SF^Iu&#n%GGu13uI$:nk5;^qik%OmJ6fR"RL-1ObH(
%m*_X)CVq<OK',m&Mo$;i*%\ULGZ9]>-+]^)G;KM+-1*#1]i6!FoaI7,+<;qT(_H,&oUT6&>=7M=3YZL,^>XLRU*U0?-7c?\$+)Zn
%CJ]jH\SDI[OOMkA$G6@1e*Spd?@Ga4I!j?$"A(-Q`Uro&EVt/WI6)I&8q=Wq.R(7#dKJmDD^]e&!&$n&$KR20@8bEtB'jB#rS6!5
%PbRKL)sqF<Ut4:.UZ.J@`(eRP=efVr&Ds:H@obg\4<NL*Tb9N#qEplU#Lg#KA+K<HcKQsDVDRNc!$*c154nTueE:&,@Xb6I1iHqu
%&#[j%2G]<ao$ScAe\4+rmL:cYrmNE%,Lb-E4lb>hMbq<>$0cOm.36M8\tpNG't(49rXWt1-?_u^EMK/q\qF*E!M6Xj<29P@BXK<4
%$_)2+E<]EBQ<qL@BBg.IGp:W]LXc&d8N=7@`=>g</H&qFXEIMf+3W.B&!UWt_Sc;"gT?RC8Oc6D)PN)0l!1?f]kus\?:k:.L1g`e
%VNfqZ%agf#b!]%Hq4mQP%4r'P#I9"==b="/]UTDPe=mCH#Hi72ln`3qQODrg<3IObJEDf\jViLp-2A6BC"$'Q#?tlk8goMNX%`B4
%:,JBgVrW<L'Y[jm=kq$1LH%qEn3@brER,tGqeX1cpi;XPr:e7*?^;(+VY/Y$`&cS@^E`9N%QRT=54MX>p!W;P7j.oTBsUC(dA]qB
%/IT]/?M)s;?t@YcC&)[;32?_3$VT`UrV`qAb7$&Pg91'QG&9^j,[Ci8cOiLi7jKe<X)t9qj$qa'FCA%`k-pq2\m+C!+MYf,XX_(9
%\uh=KqEd<qRf?+p\;k*"*cqQcB'+ofd02?P;3[SRdb9RVRAWTDFd@QH9YQ%MCojiU7?9tG5FJ;cPn-h5*)sB(NXW<aHrkKU6^&3i
%$\re(oKIMS6lWV&<5m`L/hDAHM9b(CoJo/0I@*oq>QE%(Gl"Nd.C^]qn7Ce*m[MaUp^jY[>O(X7OQ:-/&<;4!&I"E4qM;ADHW.-\
%OGf%G-ji#:E)-im'.-]52k.F>Ge5@0pCDhV;PIo='@;GRkbGs$^8Ee`?1(,'S"OMEFZYm/d_#,d(>l!VrOS)]E?UTd%=PPGUMa<B
%Qa#k@]2T36r<Q7WI?Nof(WZ&6\^KcMXF=gte>GKNAZFtkkcRD\DLtLRV@Rj=lDh;%/O$<Q:L.J.-,1UD@Y-H*rEcsX!HU5MH(j5a
%W]3Qfm`Fkh%J8?U3c&-cP';fHB(TDSeSUG<<?.atJehYAWOFJL\ZJg!p2LL>Bp)k$08Sfkd+qJF#75$WZQb_\r3(%6QN$=9NiJ,c
%C1<5Z..FS=Ci[ca_")K->4J!dajK_J";5p`_G@U8!I;H^V=E\3Rtm9nN3a#kNg9b8O3.jUL3:'NPP%RUcK"(=*Lj^[pF6S,T3`$U
%V)m_[c-XuS5\b'rom,3apt/MWSRdB%6!iqaQJ%<?Tth3(*'Bl<@.R-`#":TsjT7H%)_I3Bm`VfdqH3Z76F7g_2oi/tf$>!@cP!`5
%Xf.9F#^>AR\3DT`Q3&M7"A9etdgN*3UsAc+_AC6d_L.[BbSb-ZTSfJ]UJ9s$4d44h?(K"hD)*@':u5T^2e:;YU^G1PZ+O77XY69Z
%>9^IL5(UrHaSI;Ql%W6.].hoQE^6ur6LS9l4afXWoOfW8Gk."26L<u_<sD>AR:m/LO,5Q<7En%j4AsHIs5Su#0Sg6G1b@,7*88Tu
%Gl?HYAZ6R7^0JonY\X5[Tb[CoDKP,rImkO^&;utYff[=-R/N!gYL]$DM'`i%F@KE/cpYO0LLk-\*HO/*VppjcE(Y[u\;dsW(FqB"
%WMATfS(E3Hn_sZ8I@WhJs*u.9RI^p-Lfs?r40%ZYF,'s)U-N>V$Y!rUZ3_+6.FM^*06:9:IXbUolAC$$$/IprOCJd*GYO<=f:Rg#
%(,J"4D1&Vc,;ZFp4Ut:;nt6`5(I&TG.E%=.6!%_+kg;A]0$\h]MjJf:?6El4I&Xk6#^:ffD"e+ZL>Rn4kZCJjm#=Fi9_oC^B*f?m
%6?aCD1AH+/r2cq)UU>VpMj(4/"V59BHbfg7StR'MXPB<dAQK)^-&*('OK?o(n1Fl+XcIHih;b=%rc,UN=PrJ(jn6D*rG>MOCJB',
%Asg&nIcK66?)&+DHm6G]'DVrI;g!f9;M3b+m!ZsqEQnKH@Z.+(>\,/g[N2Um>p0o*m+FA[NKe1D<tl9+67`#?BUJ/p>48QajijSg
%[RiMeF6JnkXdS*6ZSkiVd;J27%+!+b\3QQu"%Wq!=9@7aNFRVa=[$l.31V&raO81^1,T0#lRf#gdYDpQ1@"B*r;LOs*#drG'h+HX
%P.rTf`Ws0%<pI-LY4$.%G`D'Jnnp$O.^n8Ieo4q3X7-LT7?1Kf\GaPgkX:T>Yter1i5[!PQ(n(]Oh"k;5G,s4H%qeZho_$YXlFTQ
%i:k^o#q]qd6&p7^'%s_7Ae8$&o#++;GdRD=1j5uMr,>7nU3G"L.8.Cc;_lJim1'qW:JZpQ?h$#ZgheD\50<7c,fMJ]NecD;@3JN\
%L$V?'D0=((nsUA2Q-a)f3aY80]b`5$kP<^36W`SYlI.'>9!)`cjKl6W"m\m452L)rW>-/L2s@s<+4%dI'Zk92TpRJ@=pSP0`&-qN
%,c[$4irNU>d4/ZN_A1M3>N?L8_]UJj`RS6s^$_Fn;>KGM9#`KV4[(^!4/WmAp69c9i%5<JCs;\\T9td^-)A">5::"V+2<Ju-`q!.
%*a45Vl/I7E7M]"=oG_[H0Ii<[_aU"kF>SbAX7AeB#<#`bnNQhrrH+bf\/`.+h(5?O3]W8oDeFp]c,`0/9f_0S#+l!$=Puf#Y_9`,
%iEX[Ar_S?D/$enm'W[hoI]<N<`P)%9U)=lE4,=C4G8"O/;RWlC+]piahE@HDI)CMm/u#ER%BY(-X;*cZ7)Cr"kXK.rM0AROE36Ji
%&4O8=WK#/B\K02qBhR_eUAK=KN\E$S]C'i\KE&!T*Lp9'dgUEDRVR\anTB$"WZ2b@DIaHtZaFW_9H=s;.Fm)Z\sOdJ9-e5<QL@[p
%5^ms7N:c.S;[?sciW`F6mV$<DQ</D'enHcV__oOpd_,Oe,L9V_N_4lI))5@*@k'<GQ7KQ$TNm@i&QqurD'K0N`&Zud+$X#J3&ZXE
%:oUpsft^Hin&B^(591&bm@Mr9Y0j4PYZib*d,,ETYt<AR-/[%5c3!V^FO3@3o5YnIXoj[1J<\dc3&1jS+-Ut8+',\Neg/m(Hh*,B
%i<V".Z8jT9*IGaRcVheZ>Nhf[8.9VZUe4YLg-^*k+kS0/[pKMG(GdH+GUj;hJZ#m-JNA(YG+/:fD=d6!gMBZ\TbUmCj!uFqHiEM#
%Ia70h\`6d[XHMc=*%nN,Hbq1E"p"eQbTGJ:ne)@U3Mdm(92r'$A[`PB-g%=T$[MYj2c$1afV)s."!4Sg!_[1_qYc8E[:V<jK^6!B
%I6Z,s/e')],Dr7!D"SKL6-?WeHo\0Vdu>]q(.UGDh?(=?(=\._FX$I9N:Sc':Z'\N9iU=,<%GD];IAd//S/I8a!K#*&P5lUFnjTS
%6It5@nSj'M!U]#"TWV;hq>+hlYE;Y=hXP`4f/KfA^$+0Y'2A9G54Q`l#$K`3U0?8K^g1eX/qZ<-H*02!41i:Qdfg^5,f'!$3"s`k
%&"g>89.m[?#a%+G&MBgdAQkMu''*X!-q*9Oq"FqY:HhlN'oeHNV)1)D(Y<Fs82'OkqsO5&rp"QnCN0M-oa\>fE"poNn[#QN'5-WH
%n[`fWRYj#0'CM&m#!h:UGuEdeH82tGP3g(YAE/G!J7KiC`>*(N1,&l;0#q[lij=IPTf)+0LhB3[`t.K*j5Sqm44],c`lRZLB)V2U
%s$sGF1SP&9J/j'r:R(>a683AH$%YI'ZKr;>5Co0](Mo,S+%\R^?M7]%JYL.H!>m,4qn>(*_M)irF46't'B.'iYQRVbZ`F\n]P$L/
%NcB:NMu.mV)k7i\Fu-7&*L6T-=WW$MUnIn-s$'$)ab&rXmu?<B$n0b=8%fphfc7Pp%hr*8o0JDr$8h$"BJsfDf=URH^[WLm0<TU-
%B&NCc>sj8dNeREnKJoi74)\G\Wt)gj<De!@q-i$J3c:25OfVPYG-JMQV(>&*gkVn-BgOI/5b`E"LS\Wdgj<\o/Wc"uY/>[bR;E?0
%I\OHR)nSX]3g\VZME_N?C#0nmQr%"Ad.SR<f2%Sa7r\]iHM))EPqhYq96'%<+ZiW%2^&cSH3=$T7lPa6n,84^_2`1(2"K5'W-pnW
%F1&+dZY7"oo+6=R?5?CZ&p]m?@^f,4).<u[d>tR;Pa1O]JM'NrkbV^*kH\*&9h5c%hRZ*jc_@o[Sb62`Np]G;\+M!J"XTQAm&*M.
%lqCV0-45m2-K'(2jVUi@o;Oq_dS_`8+Be$RiP!P*8nKSEoY%3hT't#A7[8hCD!,fe&fg;bU-A3*?3$tp%L"qlqVq5O4i3B,nN`t@
%L%Jf`%6.;>4l.?!k?+o/kTpGE,2@NZ""L%+'l@QdQ/]6q<qB4-6?.BmqtfbRf<VdXhYK)X7A*R[/Sc=@^OO&>59f:I4mt;n/`$qN
%d``prTm?YYZf,m3;F('BRdAR%@Y(9A@C?l/\^@,LUVp^u%AHmpQl[@:*'YJ")+D:64B@:8-oWY4=.:H%cM%u8S`:-.jV:X4MqnWJ
%3)'87O?>O%R&N.s#F8Iq]snD$4a1U+Z)5Y9e4Z8T9!VDXNPNZa^Ac$tM_+8/[kT`=qR?JXL-?%9@]h\[b]gmrT5[+?C>'A(@^3f:
%`uRJGq/Y]6.7HQu>hbaDU8!<lA3F*53Z'K>;%EI2,_o5u+tpui-RC^#f"7%jrTol3PHpK88NA-_.=@ErQJm1Mlg&pn5rVl<<md2r
%fIQ_uiUoq?]".tu9.Woj9kOeo41A0@03*dCeINtcdE;".d`GhVHcP0HJ\,I(I`+'BFS@Zm<4Wn9e$mH=oFl+2e+ZIjmg;EjQf"Y>
%0QVW&dKVHN$jMNh4_1Wlef&N_V:'L>b*:KM+-&PWinca9?I<qmqacn:^3196O2.du'=&YIcp2OY+3OVc=.9cAkr!\ujbI)br!@^i
%"3Pps(@b%>Fc^_pXp"p*e=.#qNX#2!QHj&]n,;p;i1(f?^a4BehbQ)Ga>fq"j*4j]I#Y7Kc8"3j3omPNe#DCM_W0FiGjNBaBH<>5
%J`<?b7T>8_A-eN0<#\B`8<ON)59#%7A\E:GhSLC!^la\J<!@,@Y7A1t7817c_k+b/(ZPO1SPNlg8&[$@P%65K5Zt:^*U)LX;^m_D
%0k<jK]a;AGdYJ,$+-t2@E?G#r07rCN*D3bWA7-l8njRj:a-sXpJedr&ci^Zh4e\5&$S6HYI^l6"kpUF7gW5(Jd3UeR]f;i<dNtmE
%S']>P_e<HX@Hh#4pYOe0+Q.8DT->Jr^FRGB]cc6\5TWm.;K4Yj,O%8U#3la5'jeReT&Y$g&Q)0d:p9TSpmOU?29:,Yd.66$*49sG
%7sjjI%nkN[[.iFsDD@u[>AOg&qVMet?A<K*O<dY=;B2C_G[N?i_0^rNcaEP`>(-bI?ClgV>(Nt_Sh9/:Vsc$/g_d[8UYZL"<hoA2
%Y]_Tjqp=(7%G\`E&@5#hmP'K0TFeB\E6(SVaLf%$T,0/!%kWS<]hGCgFS$G8geob7'K;\dpZ4Z&7#BT"q=qW_(l+jJNHu7a3>G@I
%YlCqL/rP)FDsj)nUcg%;5acu6TBP5b!_B5lZb@15+B\UR`SA^RJR0+c4U@Dl^VfB>\>N2-JYLkbR=Tpl]=gV-1]i<>U6SmqH<DXS
%Rb*$K3mgTImqjV>3't*T:;?6F\lfQ.f,)8h3O*hN&LpfC)N36*YB0[$hSOt1MC[&@irqT`MdD8ci.D<(;K"lTe)7!PrJ.-e]t!h9
%`f"M=WVX"U;l:sB1t7^'+D,L=To:e$>8]2gaNO*u1%=aHb8-7XUT=McV.%.HFACuY-k.mI%`Y?rKO,8<k192IN^!*phE)Zp@>d#)
%(DN/A0>R;q%Adl0K:00kcI\L6&D#+ld*&[hD:2&+J%.skgelcjU=PY5ljVa78"iJMXL;:fZ;d:>.q7&a])KUpLL/b_BCdNsn"l2d
%k"COFnGPU4W&)nG8WA)f77Mp#fP'A^ma0.^U=W_$L4G4m]6drgb$&07lmHNcL0iHD>9L1MRF'-^]$[tc_pY_:lb03F"om2&^\d>(
%rTh5trVuiopOBNYF4)(65#4T4%fCb(?PCQIQ[9O7c\'Vj5kL2n"794<5TN&@Hr!$Ef&8HUD'E'$QJD'4/Tt78Z_8$cj.22:gLB.^
%6[iqc/?9&fngIq3;s"Hj,N;3JWe>h/*#)+P-TU"NnXPHY7-Nbr=B7NM4%a+H#R`s`=+V7'YaqrU<#hk-lV9aa3^`Y+CQS>L:Gf'*
%N`G^ss-G@*S9'Cmclt\5dVhpY6+#<Mb[2afE+bENFpcjZM5$Unjqq!C>&,2CKa%b@)_0g*9Qui9Bb"Q&W*&?:Om!D@@1D38?21Pc
%bg(L=3hV^R,*"L+^gmb.m)1.m;@kO$MbNM&?p^=nV=C)kIUUY?q&]:7%f_%i%1joIQ8Hj7B!U'^dM>@u6ts!4%Y@tL'hXtXP\6QY
%hLPjR6g;TW#Y"R"Y;IGV:[g2g@-?ScbU$:]b+3'G,8F7EZ]n6Y<3GROH@-0_\[nSqk2`5%2sQaXQH4L)FS)mJ1Q:GG2E)7B?P^B]
%Q5ueNC*MN_C_](DDZ>B=Qi=!"F4=nQkCiM.+I(4O.RCAi2rl[)re)(C)p97[dYT9Z1d3P`YTN)1nEWMQ$,4XV'.(NkE[X+4_mUjs
%Em2S"m-#m=q&JGjMC+sQ((-1S7],eA-]/L3?h,HG,^7a'I:#/5pd`\mi.C2WVfOr26;R6FT?H:45]jj@fai(KJ"iF^(\WZ&-G7S8
%jHo>O5L@qAr`X9<8Gpa_VI8@#O4LE%!gYlb%V7)lCSD*QB>g(="CoZOrc/XU>[cMkEUO_Ddsq-Os7X5,bQ%:.?N9Sgrl]fjO8nnQ
%qs/_4qc>S<_0\WJf73ags79Usl[ScWs3G'PlJMQPJ,=Qj\*s@W^\l9)jL>0cYQ("tric6,b&g>>@/j,B%/)l@Ef/?!k!TfdC.o-A
%>i"'#0d9;:mPUOkC*)#q/nXedn[2BX&Q:XdIakJf@=`8sbks3kJ?aI1>`rBg.@.7Ac<7d-cKk!H\@64O2$I.;:]$uci(LiZr,7"q
%%%>B1&*13Q@`f`chAf&UU>RZGi;t#CfNXq1/PDaroF17-7Mj'PQF>r6jGnoGq2Zn)S()0fX.r<\6cua_@QiK3fYZuQ)D[tphYsWq
%o>tKI;R5uFN47]-"+Z6--c8j36=pf'O&PTsDPkNQVkQ@E(Z"kM/Rm08L%oI1JA;TGF@<[0Fl=/1@4ACm]F%c"re/">YFQ1BbsQl7
%9q6qdd-??DangM_PSPB6-YOU+X?\W8J`Gf>RFjs0Xc<Rjkm0uiE!Sc8$-&S#'`o:)ql#*3&AQiqIHnZ+litMmm@_>;RP^eGmh*b2
%:jO6tCA5)>=:?QKOH\a&JY+S:hLkHqS=90W+g%6q&!]g$BD9hAE:p:BHp!<:U263s=`-kd8;4f(<1tthdnA0(M=-$:B6nk2JWq+F
%XU29E3A'!i'Pk'k07-60JH\20%:<RK;Q41Ok=+%RKRq6SEP/V(hV!'sc2Q]30<n(W=J)?K_"%CDEVF^Pb,0'^+e0:j'YjauE@k"&
%_42-'b!YY63]do7o(6![m^7D"SLS-l)3CSQhouN4>DDN2Csjj@)gJ`&`5]I&:"j?2U<CO1Ru+2nRIQO8-F;f^6N6pF'n5KqhX>@<
%N,MOJR/*4+B_gYmdg2\I9?-f)iDb\B^bkS!oZb<6pL%"$Sr).:)-r:Rp<1@Zfm,qZ<o;<#^`,pfoJm#j"[U$P;P?)tD4VS]G#,+Z
%h%meHW3cJ:XM4B(n(jk,4d9PRSWfVeR'GSFngo9-h.+AO%FI1CQJ(;$k@6`eiW_-"0c6h#,t94q>nk?`U>$AtUm:+fFH>nL,8Dli
%e7-UlP!;>&;+hTncamhahD8XRo^(k$MM@rok@f_M]Rgjcr1Ub&`-htsWEelse<S!(,>b"mc7-:"o:F0FY+B*_c/%B*:0'Jfa1+Dk
%m7sLBN2%qu6SV(Ik5g(,=>rUABji5#Pn_n>\\8,FON"D]`d'ES7unV=Fmcs\<DYMmSIn/E"8&7)S($!T@Zl$G:DfQg>CUHL@KQFE
%q;6lBUG-Djei0Q)Acg62`7!;3m[(8WK&^p-;U0E\K_c/^[<;"j2g6YUY\0&PapnU@44]nVTRc[tZ9sIrmY!*5LS>h#d]l0eRa]=0
%^-d_\c)($B6`H-lG*4p$Y<oRilqk@%8I8QB44Gag_t8Js#2n_k15uceqPO"kgZS5W/;o("X%\D"p'G<G(Z`!Whe=6MI`;M0+^EOV
%[u=4=$mWM9d?_:Y.TMBcWHS7@@5))krp:Ta`5&lh@ZQ^4O:H*Ul2Jm>!1&`O83&mH/WC'YfNH)>!EVp&+eVTAg1+sW(+`^@k#C<h
%,h5VRB@4iP=?7/;:7a_X3ORZeQfH;X*8oCHpXSEdh92\rDk$Jaj<#bDQZPTGHnnDRRf'mUr;D!.Wjp\sXkV&YnE!qhm&gJ/8AMFq
%Y->/E)Omei<82K(Blir046k\F_m/BiX`]nRhGnaM<B1833m4'oAF[+jWA_4dVMPH-bLS-o-Y_qLT6gJ1DQZLX=Z&0B>Z>*>.X[d?
%lEmsPP3M&JShRK^')-RFh*\'@(o_!Id#L1$H`2548<lc*E?tda)i>?`H?She/_$KLN&DPiWJ$`RLuLVJON9Z+P=i!Q#4&ug'ftNW
%BA0s]FS;?9[4X&\5OM<;**Pa\#S%LcI\6RFiYH2@cHo#`[oAZX[V#3l#,f@>r+/%?*(L"<S/R;@<r02L8X[IP$$13!2C@0+2h6%s
%,YF8\.%L7W2\\oi_K,+SZ7,9\e_o#hBki*ENmLp!^MOb<>*/<7rK7F+@Lu*uA/Pb,_Lt]NC!:)Q*4]qMP2'8jGd`#?R^eV;<0%R"
%'k>"`Gglh5(>o=Rq)V#6!gSERFHV0jZ+*/"ADn`n]B*1J)hjeQMY`nUdA?/%Caq@j$_-pY]?fV4kad5!W8W;O_h[]D6jh%&Tl>.b
%35Bp0nbCbr",F8P01d>POLX3pZFOZ."&>1Q`u.+rXaS(8%BH\Y,/Ci.%Cig4\@9D*N6QjhF_EoiL&=RfMinAFp)l25_m&!8$ZT8P
%q<O%D2#CIMR(]Q8+1i4DI?_ZO"h'`S"t9mZ*CE_dZb9dWYb&10/:1jhcW;c^G9P0`S@TrT`]X7&[o1+A!p/%%S^H9n6biYHlc^i\
%M`o=NdSOOcS=Q2?Q]d/3G'FSd@/jD!k:L4AjJKKYW]s=cDfNJB_.JQ>KOD_K<$MT<Qqn!8P#*fLqY/Z/8iEti?hVK(;<ark5M./4
%2GelUQMP[Wj0tN.?9,VgB&E]mQaPCoa+Xn1oe0:LAT<-kgDP#%%N@<)8S6*;kREUsf.8EH[qb/Bp1W*GnUUC(/OSVX73lj<_Q8[W
%,iknDc"%=G._rA;N,NR>)OH;jEVtSh-UgGee[p7$MmY-]I6.>uj:Y6pSO+a6p.drLP^D-$j%!if5I_m,iT=H^pk,@[Mcg7XT'e)Y
%0hLA<amhJP$O4\TC*15/q6b]R<'ooo's81Mrr"%aZHflhOFq2U,fOnpFkW36'*aihWFQWA*Wlj"R$ZuJ\'B!3GT^"2GP2I;E2`F_
%(tp/84ON8t!1hIsLmOHoUAb"@E\[tpf=&U@'^uNRa^s5D5\k;n&U2EDpu;R9*C=q"=e=e1M[<E<Y'bm@D6)a:m%B#pcclej2t:#t
%i8(]Ul]Qu?lk'TKfCd@r7celc0-=EY^*IO;MdR/%B%cP'M7@P_;!&rT_A@mI,3$at/M#ITCTR4=j[+i0,9dB++e?iV?)kPXH&Ao&
%[M,0IQR`8%eG`LM"O:j7Y6ud25-99@J,<!,&noji-;%1@]U$dmr"_S\m,1sl`KfruHB\%V;4&/hJZ^62BFU[?kp3AB,sZeio3X:>
%%j&!,Yk7]/c;^)a!6D_;?pop7XsEF-O%<c)]2s+EgV#ko9uj'6!YjrP#Q4<[riLM_2]2oCH\@;$n81OJ`bWGl05srGor,pRBC*i>
%+*us6=(c8S-Jq*gU7GmO''g0b(4psM9B=ob9:415#i<+Z.-Ora%[SU0#oM:VW&kWK4$LCOAi?&up/p;0*@,Mep&(Fqd6l/d:Bth-
%s"U])WHko?CXrOBioI^Y+uXJj9Am*tpX,EIV,8i$faY3iM^A')BkR=.=3B'l;[cgq%IgY>D$#Ipj*mIQUYps'XaRGoi,q*4fPa]7
%_AC5;a`?l=R0MnT,/(!YEp">#.',4b8p[.tH@kUkBo5#<_V>k'Y6%T\(4q+%$D/_nenQB/OrO;Z@j>/N>I^[UBR(\E^aYsi'AjP&
%VWCF0!nmArp8I'[D'/e"LUjoC:Z`_F3lR8SZk)*WI!I6r-\i5aQmE$-!-:!oI3pu!S_)oD:m1'2G@cZedO#coE4N-#Nm'V2YA!fT
%[=eirTpptlGD_Vsk]/8s*hda/4*j"H2e<]NI0s$%F^8F&OTC'+c0<\ZX[:.;9B"Jp]f[HII@\2$R?D/\@I2M#SFJn&S,Ga38O9gU
%,6OXZUm%UKn3Dg4Q&eB\TJpLE8]6R%E$D@)9(P=2gq-;fk6,L/TR;a$`M>L]3>hpShVo2cRoPMl+ppujY=$mGW?l:dW.`.AciM%/
%YfBG'asuR'fap!tAX/n>9I:o_i)gd<YfM'D$N,c8mu4pZ*"4j\!I6HqFu#W-nJ2qG\"hEQ5Kh)`PuFtbicfcWaSlK)eEcbVnPE+Y
%kAQDk.B!G%S&Ejg%31S8JRG-Z_M]CQ_!\J/GeSc>.*_:rqk0jeUCON\'ioMHBG'tH2L2qLZ-,ka8:DYhKS::X]DAB+S8>`!bb,Z\
%K[FFn`*/corqG+];%<''KB2a,3O=[Hi-1@Y*<qLXS&J+D!sVPPBC1/"icKl\&Om=7O//_8@Q]940sZCAVI@AV6.-0a1Hdg4iWFR/
%EnXsJE@;I#XIOHM<fTGXQd4UsXZ?kGQh-Ps!>9Ikl%-DA]'uE&s$Xc!,_oOd/u%eYP\HegY%p>H5c\(j8*39":AO3[D!CMJ?3<&t
%7dQ6n4;lT'2'4+WOl0(*OWB4T7(Rs9]fq\poCBM'8Y5;)%&1e$P.P#,PF])uAc9`$p..n5.ncY]aBY)LhXd>l@,rgaK;.0QG.jJ*
%X1i$jhpRiQV4Y_Een$]L"V\Ae&3+`o&4#iWbQCf[,W_VQ(41H`nDJWGcLZ'r3\GI*&]]%F]>ikGZrX0P@Ym5kggQ_"TU5A$-OkWn
%ZIu`LLZH;_PiIDB)L)G'F31NlQ$45<EZs1P/(V'oldp%19qRN',kc9"=?=9`l$UuP&U+%[r_/\7Ac"WR5*J_JV/*V3OuNbHfZ'@5
%3+C7ek.2%.%$>,<CIcB-NZQB+[KbLJfL-Lo\R"#l*IN5k,9-re:7AnIP:k(NEB/O[ES9PI5]*Ie<g;'bGL6p7lM'2NeZ_H<<>aK.
%/i+O(#pQ*;s(F9AL%pX4"H-XU&[!E"YEQ.4;FusF[_CEi>V20N-Qs3O*?%Dj)5d/ikjg&=0_m=[>@>90n^J\P+SjqRK;n74('V7e
%e9lTL:=XGX2W)DHLXo6as-nF=V[4JL\G!T,*4tHV6=hR:FT@qad@mtGL%$JU`t><)jn'72MoABeeZ@i68a)P/q^`juGCj?>2W@jg
%1t*HrGnI<VFFZQOq8X?\ko\SZ=[A+AFG&;]D#ObOh'l!LK#r'+TsK7G<qB1e$B^\u_;>KQH`=7-p2Zb@dN#L:pMo49k8[OLMB/Bn
%+(tQ_ch7ar,*cOAMI!2E0s(YXF'7+e,,)W:.FF'T=K0!L]qM:DhOtI.s-!5sh_g'-5U3[YD0jj8%u4B6jBgGLZ_Oj+J/=3'HO!#e
%W'EsNl6s0"Sj!=Di`b-H9"bPE9Vg?0NTfR-%G@*7/?V=7hL]>A96%Wan,<33(C%%N\rYiN&A@knVI=9;F`_LJhs0QMOf`:>`#5HR
%Y(K?sF.Y?_=X;.DNF+/0Le"ufM&ed/#ZXJ$J5P*PC:+02bo=Xp5.l+5msUW&@pR$lgkW#pi9]YEF6K+gHsE>^\#.4(]^TmHH'RBb
%]_r\;*I8.>NfGjGM^qW'\"_9c;I&\1H[l(HpPIMMQU4Z4'[unq(V=Bf*Q;qL(#'\]/?_kmjOV1[?I9lEQf9^`EW7Za-5=0g+#(\F
%)],::W5TLMe2u%6^enA*`d<48hY0%lA`Gh;T$8"p4sfq@kY.:!),:,1k.[]]QQF7d5;<,rDL-StbgcB-VIgTu!din>C!&)GK<&YK
%2E(R/cLVX2ZKa0anD;!nHV``JV)"<6.,r/OBW.,M]0Wo?cN":6kD%iK"ZRg;k"r)aH"(!m!HF-"=79?0K(L1T5FU?#eaJ74%;sG0
%0OB_4GFkE3b:YO,MOA.MU0E^T^!M[r=IH%A%UK[EaG/dR>VIta9_D57->UD&&j7n(OoHW_jl8rQo#9+G/T04tq%!9[B8^OZhZj$@
%4.WV#VfG6dijK4^)YQ@6rQtj2K*`us/Q*RVqRT%s63XR=6K+0G0l1V7eX(4\fXhS$5;"ern^aNfeU#_8M]9,!]u+iV>E^e-mpl?&
%%B.5'T-b"Vi5jRJPX@P'/HTNBU(9U.*5&-fLA4mkO</@<1?d:7nhI,/]_+In&(+NUc+.sGX!BYS*)5kRf)('NNNOV[J6n35GC@"$
%QgF2@Qb;bp!]@'s#eou*lI#[OM1_lFKh;>FeTO:52nYc5'LuTi1`13\88uY<lrYY;mpr@QPf]A>ase?@K6VnU(%68gr0$;bEs$lX
%%GL^8d&^tPBJ'@s0%7K+$aG;"RMNsi;Xe[W+cN/*7.-`e*#BG#/0#"NY:e(;5*eLbRs[a=m9Q3O.-N&ti\1E:A9-rGXBX*LB5T?b
%)Lao.3Q!:NEsfAJ62p`ZkiLfMTKK^:D8glV,e3hQ\qu9kXBBR@2=s^&2EN0aRKAN?'P1o(RTQod]HXKAUj\WO4E6;a:.:I8!RimE
%BI!*d`TUU%(`(npgClt;a<fE!isQOtrRJ:Q"Wef9G#$j+>9QhPUJBc69%Q'iND<G?"A6bQT$W8V>cEEBSM/3-12b?R:g;]=L)+p@
%29.c7l-XE7+%j9=%F,?j@751oa8678illt/p[Z06Gj4G)d"Jr_b);cUmJ`&Q-R66o?8&(:eB?&S9T%7fnaN.g1l_8k+Q!S+dh@Gm
%=lkS#ATjKq%7TocMqJ1c_g-61B]i'b]0O6[b-dqqEEmi.INqBV)-(Qd,ND.X6J.(D-_Re)SBeE*3)?TH6=R?;/-ZR/Xi"Of0mS<'
%S5QW7$D7l'rKO$?&h<*#hsWp3%TPo2n?#b>M-Q%N!q?)FYgZ^GYB;/PR-VX.5W;fQ%\PDqau5%YT`,)86R!!ACA7@$Vp/OWT`(I,
%9Ql7#X6T*1#rG])Ce0[J:#O)YB1=In-HZFRHin8RCFYuN3cRMeAb\@EnCo5cn4&TsPMRB0ah,i))$VU)31$KGC)'9V#$%j0m*O.0
%eI4lC20a$Um`##J4.;D"VQ01J)IH=NC0Mt8Wk@pd?P.0h>4do(#1rGV@O5%QjSMcUJi-#'^#a3%E,Gnd>NGa.>tPHLTFcA+!mJuk
%>)Rp#"=+8cpWuUQ=2O_&rpj:mrE!K&CD((DQOf.[g_m3U6#H^#r#Hb%V.sE+O=s"X7MmLJ9dRkO.\tp'=fE[l=d&J<G8TU1^Eiac
%OtSrBRW/><>2]!Oj:8:@jpQue=EGL9B8No$%dm+)hc*U["G:*YdMJ\WPl]%Vc7+!YWC$BjUT%agF&E^_'3^;Q2UFdK8jm^2%b7kr
%kA(j6a8<F>6m!i"MXdN/3L4[Y-]6:K.A[M6GEkbBi2uUC6#dL-A4OJ9QDtG<f3e1W69g=h.o;UJ#ZBMp6.[>?.fO+nV`nrHU(/D_
%'jGJLE/mUinZI'f>,bPtr$HjZTsRdp\Ug'_H(g<'"bQTmPeX;))T92IJ\`=+EHRAE$929mI3mUmCbnoX#k?:c*_T[A/GTX>K!bpq
%Z=p!bA-n>5"W_I04<hYF5%8V>OV\eL_;Z?aR=kf.)=7jrQ1V3iWQ\>>(_(ab''M!UG!VSUhNV]>CCjXB0s',SnZ4FuYgAZQn#B!V
%M;Jk9Udeq_6<14t=LbCVFqsYpP.mTcl/_dq15@gV]&b<F\1K<0#C>$WVqt$]isU_e-.73$kHQ;[NZX&AotJUX,H[+L79&!K#JmK%
%>r?\s;!9I\Z0ENsr;K*b6<Xm6Pll'8%b,Hhr_GugnN,Oo18>j"\c8[&?`XLI?p2gg:X;V[*BPFee3ltQo$e9_=T!]b6,lcP<KZKP
%#D2>%#g<eS,tTY,(%p?G`@`<5L:_;2PS?u0Pf&p!Mm*Q9cid'Uo5a9s\Z.%Dmm:niU7K"<ckrdH8J/^d1"]jCS6sA8K\HtN]@3>d
%TIuEd:@U%\>BaZt[g;[H>*:eHGGdKaRXj*J[FbUOhChG/&+lGQ'`"C/EZ?em'KK5Qg$,jmiArBQ(Eppl%1bp9QiWr,%ZaD]nq-4Q
%1A-Pt]',]&TPWIGf[=nIR9lQ0<H#gXVO9qKTKq]A8m\O[AQ7RQ/sg(?c@WK"(RdGMEbJ-HFl=[@gtL=.$%TuGYcbjLoM'j"M;)$)
%0Hd/b@Sj?L!4?PW--2A4YSLie3Q#d/XEo)9)=#e[7k)P9Y/P[;q8!S`)MP1#g$0CG4Jj_2iu!d;b!o;(JnT4W%a<lc+H`WTFt/iP
%Ql%N[.=oQOW6<BR@Nti(FboT4P'.&inVUkY!&'<Kp:kiPjP08H_7XQ/+_Kdb.<o-!9X7r@D34VT0.3-B7_:ODRr\+%T12"d2"@]e
%AaB>.>MmHr.oY5"ZG,#L^mYn.nudk)#%-$5`F?`@7QAft]Wg3d8b&S-nHHl]CA'2aG)WllFt2m5Zar6Pnj&o/Tt70NVO)^[=m28#
%/,)Y5PVio:@=4_%:*X`f'gXgG263bfP1SrOFNnRPAl\Q,Wjd(M<dC>Ep#`sT?Y=$V6[c35pf]#5L\A`3`@$qbQbgrsk7ul:\TJDo
%XupMep[S;2<r%X$E^+@R[5kd*WN$+;kr[l60/Q#LE[iLmEM8XKnS/pO\8+BWK!9("\f]=`U<pu^4ddaqc(T_&74p]cVD1qc8.r6N
%;Y:lk&$D"1K$OSa7p8)!_9Qj$,VP!a1a-)QEgj*<.Ed+L3L1<6TWQrX9]#_N@$28aREPZ;G]d5/@g74@G,%U2#LA+-%_'[W2BhVp
%WQ%enT3an=m+_Mn6%kTsZ1jUBh6/eoa8*;%hr/Z`cpF3-eMqAAVihDEX>l0g)C<j,aE]ppK_$rE%3LYN2TWQmV'jWkWfX9d94[t6
%cYJErml)%!DF96"^5qq'Y+!G*9M>P%/s#KNP\b>#Xr'G)2#'YNQ6i)^:]O(NEr%dd'RHb$,_8aCN_!iVW^["/HCSb%^We%?$%5)1
%YZq!B?&1?D=c%1-h&kC3XDW7S?5HD;RWc`hU%$B#gKV/6_WhnO]T;3?c5R$+_'oGX03+8CnJu#Eg'%N),^e(oiLh;#ejlp:'?&Ld
%?&9@r6:.p'T4S;g"%<@U)JbmQK^Lb&ZAo[gZ4id+[A/LgU@&a1f`u]U/l]]n(<!i":_mcgi!Z/<O+E)&Im;>=dCQ4'cIC*`U*j3h
%4qf^G6U@*J9XKYNA/L1$hK5Q/VJYY)iMM!;m994D^e,=4%btE7q`kb`3P*P/9i(W"0?=$`BZ?1kg;;2uB/D<K$@knueO`.jLf=]N
%SI;<,](-[0W_:qZRAieg6,(Q&]X]-n_CY'Z=sWa>9Pmk/?RYQd9,l@9c6Rh>j4u.E'5XT4K"\qsR",.4Qs.>]=g8MlG4YMtX.D/^
%[;_=Rg%]ODM./]C%nS$f2r?8N]Us&c/]dn][gPnS2Go95=lh5lC_')9C=[PFMLD7,,p`XVP0>eb#'>XWW22tn5VODd&9mMi,j,k-
%hhO<I>Rq$Z_!V'iiX,V$K6ao`-,)Zk0L%LXcRRq_oAl*te9^71kFkT*&=[NqJDsO7h($14,3/<H.PM#fUju?efP4M:\C/Y_8N`]I
%Lm@!V%hpNA5I#Ed;7&i%Q)-+o'1JSJZ<iB]>t1&$Pu.BupMTXDP`_,:=nnSU.u-O0K^cnk;C.:=:$thLd%@736OeT'TH[ZD-n\*K
%,*<tcBbuji8;bYE'GF0nWb@Dj@N2]I];$]6U_sq<_2aCk@I"_jZ)RL>cH-h[MS)B&AQ6_jmcTUh*/p47V@%3HP$C@j(.gGL;'_L>
%&FU,D)/&Fd^WWgG(!4<<C!pp%BLtskI#n%<1Xk:b$2=5uO7^IE^P+t"W/*i^/8#(`P<0*f!$*tcN2Q1\,tVFL"k/jQ-*0?V=qubp
%MjUVC:Qg591EW^39pll280M/ZH#rc[_>OFV(qIA<U1UX]<7l+ZiIaQ]PY$Ro;uAiM,*n[rgfCQeioEAO2kQ-=:Bs4pjqd$,q:gTM
%.?!Q;>uJc"q_c=LXrElIY$oQ:^5_k'Y*^H`#tsd84s)1I$"eNj15'rDAA/5!R9V!$0B9`qa9>.Z+dO"C;'F51G5L-0?=&H)FXa^D
%<JlI-D4rYm;@l^2=-,l*TqIX/\:krs]Ug9&EnOQ!ki!LRINYOEJ$B2Qb0*28TK`;YE7L*a`A"FcU<3;KX&5D\3j"QY)8i'PBj<R_
%-HI#j*g>NW#,nJ<adiT%QO$6KNQ?_4_^B4)0)4H7Pm8`W+<Rg!?K=Lm-l0)HgB-YTJmZl57N'c*4::<V^a2[;.!#8#H]KWITpVP=
%BTP4YgB?tD8V(jR;RL)*1'',k,tVfm]5X7+7F1_I<;iAeW;iYi'MJ48\1l`'+".:amVNZEg1;%@<J1Un+N4d;`!6BUJFHG%_LVu/
%HSi4)ka)flU$sgi<j\;G8U5#S^B(UsH%YG"27V>p\+0GioB`"1[%[Z`VtM(LRKJ0I:c5"f%Umk6K;ddPRDHP_.Y3i;fQG8#g%l-@
%6i.ob2#E!EOqOh#%GH,6ke+UZg`49,Z2T@.R\NVs6%F35SD4AnP<eY?r0gDsII5C\PLP@oL/IG]_7EmR6'2nnLg.=hIE30X'4>+5
%S^K`,>KG[eL;rV_f&e*hO7jC8<Ea9#WQ[/6I"09G;H9?Gnq^'h,>(@&^3td:["CU0$P81\&sA)QCP_mGcJR;l5^p)_@pTrq`IoD]
%g"Jdd?8j]YDmd"XnSPYJ@(&D]N+)^5=jlH]*Y.JO:6[NR4E+h5ZJBh_!?nOg:@5qaPL@MGk"]nCp3mH2rIJO@[L9nsnY%Y*gRt\+
%%@oGfR[_4i2VrqQ`7/m^l:aS@Y\#3u+q^nV5>fLJS&oeEms[d"k,*L^cie)?gr6<OS>P6?gq!sY6^/+F%g0dG?4Tq/U:C`eqV>$+
%heI!<iqmD=ha@fB7B&fqjI(`pWD`kd\j@&FB.XT4PY0T$@V5Qa[gBGEE,2U_ap$Pr%Hp.k#\lbF(K0mc`44LU#&X;kFPbqjD@Y_(
%G^nW6M4/6+)c+4-SgV1k%'E;]Z.p7Yk:iG%Xqu`k]Q`EWD,`T&X\f]K649jK$'AK@V15_PbFtgp)r$IVdtQ)ZMoO<Z^5qr2I?pW,
%_``tB,7F?rMHSYn\t^IS_D2/tJW>Bm6G>h;-b#jAF$RJ(C+]dG>JC2e874^$mWB[^_muYX\II9h?0Jr;e_D.ap[S7_Rb*1$^Z<Z<
%*6#mUUYImnjF\0.*u/g&jJsE$oL+NfYip>o-:H1s#C\\/UjAe9`d<>jN7!=[h&WSJ%:1;knfm./0-!ga2$YFlg(,mu=oDcZBF0<l
%%dUgcOSL<kePW4`[I/9n-\+;FT`;/(%RPL(b%,(jLn73tG_@d=%d).7`1ul_^47K&,)93!=n,#nQFt$'(mb2[VlW%I(.Y2jCfS+.
%?L\bPGt!S<Dp;pqVbtEG"%&RF)eoeKJ*<5iS4YnK5#=@!B(GG>,+OT>k/*/b@8p;WV6o\kKJMo62a=nA>W#=9<@-N9pG#'A![q4i
%Scd[>F]`gBDi_WRmj$@mGhBA4i>LnaSHnBIQjBYTHq*>bL6G7UT9esFa\!2=kTfkC>+Q7@43*ZA&Y,a<^8.IUN]-2QAZN2p/'.\J
%89?ACmH6>P9VIQgJ/g6MGlL_h%32Y"Us%>_Ad1hnDtnV!qb$^fM].Z&XF/"Fd]Y7@KW<--Ujj7,ZPFB')I*a[*n74J'M`[IP\7fM
%OdF9P#b%a1RMuV%art+e-I%ts[QGg,-ZMY[ac$Eee_07b>m;kr^0`1:F_7N-'/WWUM53]GZE&-rUai<8'"%H/i/kmplA.B@-ta%)
%<GDYo3Zal4\/Qk=UNdO;<$EcS?OR(60JYU_dNaJSX_PjeW&Ug[/o%'*>bME/\hJR[Pqh&GAX:uD"`6+J`4_<!Vsb-_"R%6YYE;c]
%:oPs5[>7[6_;P2(>eE$a3gGX(0n]gnDC@]_Y%nW^3NSL;<M+uOU.Z[*$OiW#EfFKS><TU(g8q;USJDUmWn*qg.HO^&9nJX88QAQR
%`<0:Cl/4L1340=DlQ.s9neD*>9Y7j+;mMdUAe7dWk7i"A(?q:tH=?&onhjAND%(rqBEAlq>Pmr*%G=ce]Ji]Cn:!"uN8XYLKn6lb
%cN&JT#)JlBA*5,t=5T.>H-%oDB<G?ZRT(XeFN]9_/j:!r4lNl7.cPB%D&IH47$2i9lR!H7_9Z([Y(m4dkC6r--&V_;r^X3r,5M0,
%@[q`OGiDR4!`CFc@=7A%8-]ko6ko:m)WkL\ih></!]sZHU)XT`H%k@-`?TT?2dE>aLat#h#5V0887KR7@%7<3*CDG6gf.D3Z\lL?
%Q[!JH'^r//T!'Uj:-7c@hC>1SE[/YH%[1kbI_6TlM[bJX/]mnb>^:5de-@7#)-/uC[/Q`!<80J/a%0!6W\N*<5ZFVl(B?EM]/9=d
%m94:OV7r40(_)2%M-`rD)?#Ze#dcY[!as@o.\s.f9D8g4$HllFPKgIC#R=q?>24Hs;jBkG.R6_XBf2I]/k.WHRUK@[I]H(nfLDR[
%/jfZ/$/Mjg']kPu#ge1JJ`l4]P,S!V%O<t>.</1D:SQrQ55E%NW"m1i/Dc=/2]+gD_'8<o,!b_US,/Cj-QXK?HOun]59TMC#r)Df
%L`W]XoR!'cgdFu1/Atp$faj@fOj-VWNSY"1<U^4cOnC>_M5P_.eN%5,0@38Zp`qg.S!_o=J@'G08CsSCN[.2PiP*@03;C*^$-NrM
%g(#5S`=g$B(p>O2f4;JODA^LR.n5+K7Z*2PSNsdi+*<9RT'+JJ?-nSG7=!=f9D=+H<^MW:kS;"Z;KLZ+"j]aW8Ing6<diO_;'FAT
%6FS1)d-eu3KP3u%@X/-rTc^!$,.\P!/0#M/P5$fT;YF`t#4ZS15'H]?VUf=8`-b<Z.)5l*ateNF1)+pa<$kG<$WsC)nj6?=_-0Sq
%"b^XXS9P*@7?k#!\@*o`@d`[d>Tse7Go<IP-m$_@i<+_sKV+toN,hn%q*71]oWtFKQS@[oOC'P5gU>*tQV0#=/[rr"TWYK9Di57E
%R%uJmE?PfT5dW*RLlBpD:V(8"jnFZJ5i;O^0=jeTRAQJ!!uPL)T3`\_N&c\m&>#Gm&E#li&-ML>UfUj`=mMhochdW[@8qf!*;d]g
%odom"%W/Q'./!Eg%KlHG["+74Mi4=<#3NL[9MY&qOC%+/35"QbX>E-qlWiufcOt#?Z0fB:FZReVOSPZAF\LW.(87N4/1M@N`Oq&@
%gsqEL4:\C+"3'5R,\s7pdh2Y[k/C_8D.tu7-D0J3=FTO^b5KIH'k4@3IV#$1#7m%aoZbd!=6UX7<sU0!9GAR#"Q!q'G#B_Ye<4;;
%m3m'HXX8p1)!<#/Da'1l3t,^qZFD3dYJah"Dc%O(J^`,S*&^3"R79\-j;;R<700H"_'kZ`cu^eD0N&aT&Dji5PN:[+#EIn`o]oJ@
%92'eO3ThF=#)tD%He@B6],N9$9t=!T,(H/Z7r<6J/>0MF-tdoJWc$I^r-qfaoMW+#IL\T$O1qR`EIYI"k)^5X0chte:Zo++&#sEu
%gXhg",\d%(q*MZ:E"J_N6Lj`>;-MoZ_[L-%fJ4Z,laA@GbdaDO><&I7V*6fMRQ%Eq:NX`m@<'"UR3.gDOunGCJ]r>@d^$QDH(Y"l
%@\JO/LDrHA2\e=T`,':>=j5SdF2^bu'Ru6G=/gN>J3&<CK@Q0g_,%:NPHCmY*XhctLO>2:GM`E:NK_Rq>f`]'pCD=LcS7dSJ,F<q
%$!'+.c7VK.@WK/$R^ge]Aa2+nNBZkU/<NqU=mYZ]&1rON9:k;)_J)d9DmQ;_^S9)p#)P+g.$%Q0i,,)=JB5[gHi:a^914FtVod+2
%>*T]%Sm]qIEZ&=3C1*BT2==T#]8tlj[u"[M=00PToIBs]UK0Yk]MIs39Y7T#&6-b%2LEu)_Aai*LZMTJ3Y_0,0XGkuVG#/hfnD:`
%ql,q&-%O0eOf<QIf1CjWf#m9Hd%28b@+ZZaJs_h@PHCg5er/M$>22t(OP;'2mkV9X%g<7aghhV*$3t=Q2E+H@OZ<[`dReimBN]AD
%no7*4r"I%>#Zn5?PG%l4L:9G#ABgA2HFZ!E2=A!&&WMZk5WM>O!8=K\UF9n-Eu*o'),Ujr0RUGnBRP(CY>M'g@7R)C'C>tl:l%5J
%J`oPC5F\KPa06SdY-"ag_<GGHEcpR_g/07->ZjQakKH0;%M&/Wg+Z5b$MIY9MBgs[MnqWol4X_.79R>F03*QGd!7n_O^npMSSQZ!
%"4QS)((2+#YcGRIZ6b)_N-Pe_JnoAX9@FKfA]k"O5$70X5bh,O40eEc9OL,!=2S:CP/A\!(e'c2"I_D)Z[</n(.`g->IPo^:fX/k
%8X2NZ>_[pF7S!V'iXf+Qo%;l>nh48AW#h":Y`#$pO.b^^Rgq!'ltL2J:k_!q[gFcdd8c;;5!ho\SoP\.k2OrfE?t'RiuJTrP^F%m
%eWK@:$6N]aQ4Mh+h*s&PqVpNVW+g\&"GbofE[Z,G![[U<]o=nGbjgXP;Gg7hAJ/,g3+ufrEV/iX&3dJmc)*D?IH%.4`<dI>n?"QM
%1cQkd:6"1uo@Dp$Fo/MEn)N3#"ZfQ[<;`$EK[2#LA1e;sYH*0$(_b'S"b1)MHk7c9\R0P/YAS8q6"qB9G4\a3jD'[SCZWrZ5lBlZ
%]li9P`,+hqBOB!mIZ$,/mOp">XSRIJSg7@fe%RheANAN]B9%])%\[-Y/GoCo=c%H?ElZrsIi^<!:H\$H(3/^('"%M,&:Q_0Ea:X0
%Z^Q4qm!Yc'V/$B%?2"T1_c_^A?9stO8!,"3TK9^opqV,i:AoTG)Pn8E-9'/^oB.'/#N0?[N]L\^XNi33+3/6$$hr%:HS5U&@b,W(
%HlTP'%GjM!mfPc7a2<cMQ#9IW*Nh^[<Q0])?oYFCF&p8JQf@)iUVgnga7@_HHGEgXT=rA-TZ>o9@-i<tke)!Z:c.uWm(<.J)ecB_
%0uJqIq$"c0k$A*N/'Z]L5I;5@lV;TCG]S9SlK4qfC8$!<46GDio,Y!>kT3H%8+"]NRuZ%>NQt2+!R2t+O8[VqJaSkO6"u7o-&4\"
%Y1'dUpm0s-_(nra5-Zq?,Wf79hKs/QQ7nPb^$ic#/37EHid#8(G2T[s&qAI%EE,N.>e1rI8i+QU(oS&Tl;TcA"$6q_bC58#C=8Z-
%)YK6V8@d\;1]1H<B%?;i5)/&F&`G;j4<i`3fO;?4BjbjSe&-m?FqA4i*J.qc%S9V7UnKTKnj$WVbI7k.<g2q`:h<G\oTF.IrWaRn
%X@@4#&Ki1YM`o"e[)C5M&KUB\$JFZ)f)pcL@s:#-U:N086PWiRMWkBc<&qHNdG[DY9HtMK&_Oi&<-CIjAmoptN\5gQZ<9M_r@13c
%l?Wq#_5[oR^/,.=FsW1aEp:I].BIL8/^BrK;ZRmaKZek+4PHr#,Le$:[q,dpI+9.X$HU^0;:$>b&a*(Hec?q5$<4b6$)7dP.A?eF
%&Y8In=g"^X\&5<DG$T9"3>8/X:;ml`+mQl3PU'MO&^7:.o@s.GS`7im^-k*Mq[l$MC-O?<q_l>85-;Y/p<g@\O:rf7,)<NtD/7ms
%MMNe6IPtj5A;Tp#E6T=g4sZ\")A>#N3&l<4D^*L?U7';jqW0_1e:&@*.VqhN"H3BMn\no/-kN/cg8k?GU\dt%QRG*?0NLLe,NGaF
%@KASF,gSB\br7U48SE%*"k2n]^%WQbJ"EN1G$Q#t@!e(V[eIMPo0ufFCI$dtrbA>scp,(hAY.m9]q!Pu=Y'Z9-+p`K4;KA6FASA[
%HN=A`-Ah]YbFt^^c!faEpL7kH(1>(2H3jnuqk>f:AiM"cIH$!n[&mL!,8_"qYnCl`5uAa:B%RSaHf76dFE%qS!a'Q.2r)^QJaZ'#
%#qqEe6nIV%O%V*"_A'9BXJMJ^=<J*#pX`iO,jPk.q*DeF.MWGiQ1VR0m@c)ig%i^sk1l?MPd'$,*B/\-0J_5kUD.\]'Fj'4`:dQX
%A8a`D'OMs=J8"5\F.V])%K%N!lr'41Z!6(Ca^_6=9QZlCrI6^iHW]J'^k#`7nJGBf>]W*I7jI2_;.mm?gJu+7h(OmIkU<pXl<M(M
%@6-I]:#-hQaaF<9G0-Ws]=#!tIg_*n;)K!3ZJ50S@o)&^VFTjhG]sZR6r1lbkE-.$-Thhti^ims35N[hT@Gl()&?otMPDp6mZYiH
%LE<W9i&Ijd;i_;:^1*BNBmr1?CX>^4A;N4E"nQhkO,B85`NW=R"9f26BenU<YV*kL$n6,nLlgQ<BsZqVc;Df0Hnj2Ro)h;B@9,sl
%Z*;6CQRk5Z8Ah`c$Tq1$e@9<p^2B:[c$=X%)h!-<DEqsq/]'0?ZV$TB\Erk5MYtBPRU5OZ.QR)6I.HIuW5-A'$l]pO94]QmcWQYh
%-,Zf"fiU[;a*;,F@WTL*_nlPA%s&GI+(W+>*Xrt[71XF\Jf@:'V0WTG'CgX=d"["BISPq>/J.dBgt8+VBX,qFa`mq>q+GaS-s&ni
%(h*/$!L`K.97FfZL.UoOL+AnV.\ps]-(9\'eDn>&"/Z,g.-qA`eo#M=KdUlVLFt0b?>DHC!jCbUOX#pTOj&X@Gm/t[Ft8#*4>33I
%d9,II4iC5]#;.B@HY,#'GY$g_(a$i"Ttg@p+P%dRlCS.k;N@G8i):e])nU\)M5nBoPZWRo7W2[Q1/Jr+#kU9)-8b#imCg)A`.7,#
%Ld?P>P;B0:buk*$Cf_bsCdFA/`I;]Cqu]YW;,.h;SnUpObd8NTabm>F$F0,[=MjRGhJPe/WeK0&XKJr48Eu@CT2C_K2+>+`n]W(e
%Mb.PtU0"D"=R<C,9*jP,0\R>2SmU6-9R1s4M=P2-j(b*9RQ:J6]N$f%$hT?G\F/;P%RMqq.cigY\L0O;;:+:pLK$0n_qW,+1CYJ[
%SCfhs=,$mY0MV.oJ6I%AeG"T@QZr]][#sK___d-\-_7,j8DrFckV!Drr+V4dA6?;-L^,Cb*.3Ym;@LGsme9OT2F(no^j'n\)]J>D
%@0sH)$%P]LWiGXr`$\W>KCH"VaVHDdeKHt^'gOaNeerS'3G:1!p(j+<K1(G93-ZHQ:a!K2;^ogtLT(mg1rOjR2Ym4?T()YK"+GXA
%L#Jq2TD`YSJp2]hcY[*9@NhDP%$\K`T'Y4?l%!Ej`'YTIW.SWT:Q!\91l&gH`Q!oYYU3+VQ*$EPnP(VS"XtN,oRWn*SES>4Wcl,K
%W4`=dOQ%1GI"Sd!7Tc#?6URa!!'ui=ml?9/U+J!t=<Fp'Z$GCEHdt[\Ym_'Z&6B$0We3+<LdiZrldD9"]XI)cN)%!Z?=>)p,(<Z+
%9?PtCHK=PD=<bk;I;"e[=Q3,k^<)_2!:=3[)oe<LZV\9Ll%_r2SBh2!$sT6f8^,FPIL;gVI)uL!Fm>)V`:ngLNj%)4DPdG_@qGpm
%JP0h3A:TL_=;c-A`WLnZ];%+=fqi3\rK'YJ"5Qj!+LTr\N.o.3&ZkiQ]p==9*:H#N>TsFT-T9!YW!(kk*!&(Z?)2NZD`IB.l1VO7
%?Giat)C)nt.t!iY<le>iBahV>Mu"T>_4a`)2W0TNcbbY<B5<jpCkme=X9+:tH7r0kc_^\R<#\\l,&(if/Kc?V^l.<a&Q!J@[JY0C
%<ErC+*/0SA]g0?fEI2ZYfkm"7)^Ef:G.u1I5E[-''#5V8&&NB5kU:?dm@h>"I4t&8!2:Xs+O9VW7g;E&XQWh([_.Kmc?oi;o/WQL
%97f$29=&C2"0HN"Bs6j&b/&AVA@+Ha)K(R>AQb"_n^]o#!bY/%hVV4o^I6sWPtJq-IeBDKDs7bQ.3`a6c=@oD57Q&N^hY2c,P+<u
%M)*.d`N.D^Q&)innTOiIZ?)H(,$Y6NcQ>G(66%[rYF$\&r>n\SbhTe1-9E"gc3P1g+_1fdDQeE(=2b/"#a'F!(PB'Sqd<cVQ`:4"
%-BZ5tSuN;C;ZDn<KSLp'D-7p0Kj$l,"dt7!WUA4"K0E]=79[?-7<W*+5Zj=I+RlWRaoZ\;D4gL'n[Fj-J?dgl!F(u!UeRc/c/aki
%Y!b,UN*IHB*9=eA[1VX,[K\-1,_3rcl7:3a=kTTCU-kYdKLG$W^<Xjqha'tXNjG>6MXa-h*O6M=:_"10n;3J#4b3S$MDRFW;5m9p
%G@qKCX1!\FGJ;DtGPAhln?OQKd.A.f]uM(eWgbP;/9c?/c;&2p%P"uCe6R-,,6o%&q"/pqUVe]L^JlUEo.?jrI[).AP,)kQ[H\Kk
%1n)&GOp*YV3KXJTMqbF-)N`^YGk2\Xs8*pGnH7]Oq\#/<Bd/I&"`mM+!].QJ^Y]u*gr4j,A&d6+0!ZUf:!J!C?f7Z8VGJMUZqB/1
%]?&q3^CH2J4%AXF?U9pZo5<Li_JVY:-$rl7T"%%Q>YtdVZM"M58Z(h[Ejc6440Qpd9%pTY%oW)kFn=cM+e:l_FVZDg;9K!(W`X\Z
%/:O.mH0]Er<TTMnJ$s0TDiGTF^kb!X1S+-5;/b4LEr7^FFmk3F-AMl;E)%E'^B"NFbG>=/ZVV><G4gYbfEhBDWCr*-M;su]]WMn_
%a0J>>igc[[M]9F.ngrZiEoPUbbBu1f[]^8V7>4_9'S_PC(+a$?:-l)p1Q7Ztq7%k6N!Z>$)/Pku)P/muDjk@]Nr\W01;K&%=l:W=
%1LT[hB@AnC(n=D^/HlLuT:Jm!d]'o%7Gh)-MjUgY8mNu^<n9k+])'2&bMu:aXVc!JP+hF]p.I$#7en(UhQ.U6BI_2DV3k*`ma>1_
%pD#uYFbmVsY713B!.Z]+K<^>LSVIh@`1)J&2Z2[!<R(,RVN`3o,aMrZmX1Mo5%O.^I,@PNoqPJA0Qb.XaK4FQSA-0<Ok_0G)WBN_
%:*(NJW"C>mB7o*!P"]nupT<5U[O^</gjEirbh+gp0p+dkB"[]ljWpc%K377-YX2k=')uTare!UV+c"-0dN\kR35Z9@AO(dLgDreX
%d^?f\3m0oSiGFRag(ZM9<d8gb.-!b^$O<3>)kC!=RgJ.ck#X;eYso<KHRI(N7NVTgCe+p>,%j,"g2W-=L42m$0:9OmGOBJG:doWE
%dg3Jg;$5mMK\O3]H+Cu9A9S)U_&$7YY\+l;lprMbl:c8[!jQ#PC)e:"lBp\D*+]=!+-2Qd#,e1e=Ku:e=!mWSOP)hh2lR_:E[T(p
%.j'8(/H8L$c\'Gm*/<Bsd/j9M/=n,Eac:iMXEL?X#uDi`hA"/p7s>/_Jo'rRR:3\\!5p_T#DP>IlT,H>C[t/C,%0o:!83hFh`J7S
%r&-Rm+mWk5[llq@9?&05:$G>7R%4SB*EgK>!R'I&iT$''1A]oV%`jELGYTsq?OU!d&[a!VNt/!-Ca.H>Ln'+a3bOgkiZg5b6WYuf
%/sIW^l0M)]^bt\:LR@f!.3aF6X"gJmF<87!r]8M!(WnuF5).-Oa*HaAi's1*(7[o8qkm&@K+g5-kVc)@#hKCndB<cRC2n,]_uoO`
%%l5D5PTU(NBEKC=%2)"3QdnPomKn^Ca;M/-Fl>1kJ.Ip,"&r5TrQpeIZIWtC/<SNlX/*O?QM1jb.853.5pZcS=neVc0G?0q9c);B
%[=]O4#]2VmU-tmr/e<Kip*c!H`);!#4/C>mITjUpP8*h#+3I/D=op6Vgr\Yg_*^?W(;qg(e=9AGXZ@,]odV\F-O;!J9>Y2E*uG2b
%](D@BZOh?_6lEG]>d8qe,L?_k)YDqfiJ"p)@A:[_Qsmc6`oh"V(H>E&d2qkZhEO4cP7F?caIo3-NdO+Rb6*r2=X\\F9Brj]dA%/T
%>H[#Rjj`%E2\8s7_^F=Qh*m_oq5\aE=NODG<DGVBYgSWgjhrVIetuM5_hE\)@o-0Ka<a%BgW1@o`D<%83u;T8kZ5k!J4_*PoW_Qn
%-+kRta>CW$/59uEhYI._Ao5#Vq5,$-2%7\uQsi7I*K8%p+Ndp*a\=1H\[S1H7B\QTq#TOK+j9Jr1O^@(CHD%CTBRYE8bc^3!49nf
%C!I'Foe=mEOth]E&M8)_9u*O@rGn_rS-'Ye)m&n=m;R\llpm2s"]MDBLDM:#gi!STKT=X%BPb$*E*/4[aKcX:+KIlXaS3W(G@6gt
%D)/=+Gf5aKReKI9aalh$->[<*XGOm9T._$1QWWbN-6q\nml`B(]Xp5YI]<-N5KT=)/.'t5CE,cWmK5Vm%_+M:D^]%\"u^n"4GY\m
%\3Kf)hWX^W(<Tdi*.K7o2(.^EV/Q]8@c)#:lBHdN6adZDp.#@&UEo9G4riaNY3CCLFY-e)H%5XYQsq#?IoG.ja)a<1oK9cR#V4UR
%L[m]::$f?KbFb=b\`WGF(UPUY0r>Qg-c/"O@>XmR9E=Mmq4CC`ejYf74.e+lR/5l>2mb).D/\j*=)@?U&Eh?M\U!-lL1p&QBO@kF
%TQ>?l`Andtg8Feg&YT[:'qoY0VZRr9qm=4A[n+Pkg8s\TK.bWY[FVG]Z?cu@c-)7s`Iqa(7VW*kFQK[W<)$;FM^LY_eTh^>ML"W2
%Fb4\?RQ7WY>Z>oIc*A62Vd";@C*_EOF;<J.3au411g`tLKDPYh=16Imq^&$r.XRV(0Wk%f0NiFSKXQ[ug-&.g:Fk0MH1aWK++`H)
%HkY9Pr=OjP1/Y,bM\=!/@>@_pXkpl]LY/^d6pn4KCu#<V:FIa,B3ki^M9['H\ID`uDID8VC2FF>gM#2/n5;^kEbC$R9"BI"IJGrc
%j9<D_h2sGA>),n-BD^uqIHZV:O7'RjKG7!F7<:QOIXO[AMVoc?+KIM5(,m;#B"n@paJ[r8%!3FX2"tIlD\SOkT!dB!7uGfT*?7hi
%6rd4"s3kQ)1NWb2#R9@BT.TAS+d>"ZHD7qj8jW2X+B<H2XJVp3!d;lSF$^ts1t0]DF:CNQI35B,J,]4uIt`&ANLL,noX*(o6`2ii
%jYFQ;U_YA`,/cl5,\1pT=#$lD3/C&:T<7KWR`*/S`PsOlT@k3/9&q/?D?I`<Z>M>BD%P+KMp^g2kuWO_K(/9?KCJf&j9s"`;_s3Q
%LDtG+lj7)GB:2Vs\.E[&q7-.\()5Tq[gS0=YNFb/VCp9]2^&$Ah;Gk`%P:l]2HW*F`/fpb`cfh'&%&r40^CtEfuF+KWLuPM$>^CP
%OQ))=JZT;/OJ;BqBPp,j,MZ.#ITpl5k?G^U@(%#E(N+k`k.Zo.%g'b#*asV=fD>CH(K2^?T;st'<K_?!`CQ^C$c>[BUMIIsSYg.=
%/aeufrt)k(@+Lg!"),)e>,--,4#$SY]?PWc2OrI[MimlEalg%\PIVX)?f8(UX=)2Wa=TuWZB!a*!\;mP&I4Xt%_:t)(+Q_U5FU@^
%pWfBa(_psT+P^/5lmLUN%ubV1FeA9RD*65*Mimn)@.dgbN1@#B:REs3[d?,u0f%$,aoSTV#5Lr8*tVaYG<+"Jb$J+`Jm7$8kaXlp
%?mg<g9gTb[+5Q3E+?YhS2?SDedOi0OH2'$g;/t/<s*UK]l#=$hZUA`UfdE%V0hsAY"qMp1fiCq>QU7OdZ.@UhL2A$h"1DijD_`[9
%hYT5,pD]ZiDPN.+^CT*qA?$m?L#UbWq1M&X^&M)P&l<HTo%rgEX6,L+?PmYeFI-=*Q_lK#`6mEG7F*'5TMG7r'lS"F6Ha`=J`5e`
%0'@rc#c#3PU\=:=W]1U:)7%Wb3fb["]j?&:n61MAedO"fFS<[sBm5$\f&Vj.Ds7<"II9hLCYsKrB?57kF,"M+N#D27i-HRQSp#BC
%]h<hBi0`Lo_cg9cJttaMi]EJa`;9&pZ2e'&qh7u$IPnU-D9Le`UdO7p>jRYY^Y@>Mh;Gqb%4tc\2HW0H<h11jebJ_D/?q4"+cWgC
%/BB,Cp)ZF6BaD[g-W\JbY;A\^gu*pgm9rAMLRY.?'@!)AUpBY5(k00SjLfRRbA?agYl-g^3+$C`N["GEcQ/jJ!Ojq^n4**m6AP%A
%JukrmftooeKT#K-J8qs+D1f,Q\ZjaIO#Rf,O?;JCZbb%;:0h.$kX0(-%LgYkf*H#1hZrOK"+Gb=C1[%AHp5q)b"@B[QnuB+UfKDt
%0gf26Ms5TS_E@FSB6,$QIQo(\D%t_ME]1DhZ3(YB^B&?QS2WD\>f2rRI35X6`;cg*_>?IrrSRS4+9#RA:]L?Zs8;kos7P,RJ,[*3
%5Q$:$rV<r&pt%b/fDkR!?iU,orqs5irK#ibr95ka6(N\drq69>O$E[;\%hn9J,/DK5Q:@`roJV2_2m^hrpY\mrqH.inUCXI@q:J~>
%AI9_PrivateDataEnd
